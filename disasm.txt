
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 8f fc 00 00       	call   c000fcaf <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 33 8e 02 00       	call   c0028e58 <_init>
c0000025:	c3                   	ret    
c0000026:	bb ee 9a 02 c0       	mov    ebx,0xc0029aee
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 9a 02 c0    	cmp    ebx,0xc0029afc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000049:	3d d8 e3 02 c0       	cmp    eax,0xc002e3d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000075:	2d d8 e3 02 c0       	sub    eax,0xc002e3d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 e3 02 c0       	push   0xc002e3d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 9b 02 c0       	mov    ebx,0xc0029b04
c00000bb:	81 eb 00 9b 02 c0    	sub    ebx,0xc0029b00
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 9b 02 c0       	mov    esi,0xc0029b00
c00000ca:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 e3 02 c0       	push   0xc002e3d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 ea 02 c0       	push   0xc002ea10
c000012c:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 9d d9 01 00       	call   c001dd40 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 04 29 01 00       	call   c0012cbf <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 7b d9 01 00       	call   c001dd40 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 23 de 01 00       	call   c001e207 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 81 e4 01 00       	call   c001e86e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 ee 02 c0 	lgdtd  ds:0xc002ee50
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 fe 45 01 00       	call   c0014bdf <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    
c0000662:	66 90                	xchg   ax,ax

c0000664 <memcmp>:
c0000664:	56                   	push   esi
c0000665:	53                   	push   ebx
c0000666:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000066e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000672:	85 f6                	test   esi,esi
c0000674:	74 1d                	je     c0000693 <memcmp+0x2f>
c0000676:	8a 08                	mov    cl,BYTE PTR [eax]
c0000678:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067b:	38 cb                	cmp    bl,cl
c000067d:	75 19                	jne    c0000698 <memcmp+0x34>
c000067f:	01 c6                	add    esi,eax
c0000681:	eb 0a                	jmp    c000068d <memcmp+0x29>
c0000683:	90                   	nop
c0000684:	8a 08                	mov    cl,BYTE PTR [eax]
c0000686:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000689:	38 d9                	cmp    cl,bl
c000068b:	75 0b                	jne    c0000698 <memcmp+0x34>
c000068d:	40                   	inc    eax
c000068e:	42                   	inc    edx
c000068f:	39 f0                	cmp    eax,esi
c0000691:	75 f1                	jne    c0000684 <memcmp+0x20>
c0000693:	31 c0                	xor    eax,eax
c0000695:	5b                   	pop    ebx
c0000696:	5e                   	pop    esi
c0000697:	c3                   	ret    
c0000698:	0f b6 c1             	movzx  eax,cl
c000069b:	29 d8                	sub    eax,ebx
c000069d:	5b                   	pop    ebx
c000069e:	5e                   	pop    esi
c000069f:	c3                   	ret    

c00006a0 <memmove>:
c00006a0:	55                   	push   ebp
c00006a1:	57                   	push   edi
c00006a2:	56                   	push   esi
c00006a3:	53                   	push   ebx
c00006a4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006a8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b0:	39 dd                	cmp    ebp,ebx
c00006b2:	0f 83 80 00 00 00    	jae    c0000738 <memmove+0x98>
c00006b8:	85 d2                	test   edx,edx
c00006ba:	74 74                	je     c0000730 <memmove+0x90>
c00006bc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006bf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c2:	39 cd                	cmp    ebp,ecx
c00006c4:	0f 93 c1             	setae  cl
c00006c7:	39 f3                	cmp    ebx,esi
c00006c9:	0f 93 c0             	setae  al
c00006cc:	89 c6                	mov    esi,eax
c00006ce:	09 ce                	or     esi,ecx
c00006d0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d3:	89 f0                	mov    eax,esi
c00006d5:	83 f9 0c             	cmp    ecx,0xc
c00006d8:	0f 97 c1             	seta   cl
c00006db:	84 c8                	test   al,cl
c00006dd:	74 75                	je     c0000754 <memmove+0xb4>
c00006df:	89 e9                	mov    ecx,ebp
c00006e1:	09 d9                	or     ecx,ebx
c00006e3:	83 e1 03             	and    ecx,0x3
c00006e6:	75 6c                	jne    c0000754 <memmove+0xb4>
c00006e8:	89 d7                	mov    edi,edx
c00006ea:	89 d9                	mov    ecx,ebx
c00006ec:	83 e7 fc             	and    edi,0xfffffffc
c00006ef:	89 ee                	mov    esi,ebp
c00006f1:	01 df                	add    edi,ebx
c00006f3:	90                   	nop
c00006f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006f6:	83 c6 04             	add    esi,0x4
c00006f9:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006fc:	83 c1 04             	add    ecx,0x4
c00006ff:	39 f9                	cmp    ecx,edi
c0000701:	75 f1                	jne    c00006f4 <memmove+0x54>
c0000703:	89 d1                	mov    ecx,edx
c0000705:	89 d7                	mov    edi,edx
c0000707:	83 e1 fc             	and    ecx,0xfffffffc
c000070a:	29 cf                	sub    edi,ecx
c000070c:	01 cb                	add    ebx,ecx
c000070e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000712:	39 ca                	cmp    edx,ecx
c0000714:	74 1a                	je     c0000730 <memmove+0x90>
c0000716:	8a 03                	mov    al,BYTE PTR [ebx]
c0000718:	83 ff 01             	cmp    edi,0x1
c000071b:	88 06                	mov    BYTE PTR [esi],al
c000071d:	74 11                	je     c0000730 <memmove+0x90>
c000071f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000722:	83 ff 02             	cmp    edi,0x2
c0000725:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000728:	74 06                	je     c0000730 <memmove+0x90>
c000072a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000072d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000730:	5b                   	pop    ebx
c0000731:	89 e8                	mov    eax,ebp
c0000733:	5e                   	pop    esi
c0000734:	5f                   	pop    edi
c0000735:	5d                   	pop    ebp
c0000736:	c3                   	ret    
c0000737:	90                   	nop
c0000738:	76 f6                	jbe    c0000730 <memmove+0x90>
c000073a:	85 d2                	test   edx,edx
c000073c:	74 f2                	je     c0000730 <memmove+0x90>
c000073e:	4b                   	dec    ebx
c000073f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000742:	66 90                	xchg   ax,ax
c0000744:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000747:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074a:	4a                   	dec    edx
c000074b:	75 f7                	jne    c0000744 <memmove+0xa4>
c000074d:	5b                   	pop    ebx
c000074e:	89 e8                	mov    eax,ebp
c0000750:	5e                   	pop    esi
c0000751:	5f                   	pop    edi
c0000752:	5d                   	pop    ebp
c0000753:	c3                   	ret    
c0000754:	01 ea                	add    edx,ebp
c0000756:	89 e9                	mov    ecx,ebp
c0000758:	8a 03                	mov    al,BYTE PTR [ebx]
c000075a:	41                   	inc    ecx
c000075b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000075e:	43                   	inc    ebx
c000075f:	39 d1                	cmp    ecx,edx
c0000761:	75 f5                	jne    c0000758 <memmove+0xb8>
c0000763:	eb cb                	jmp    c0000730 <memmove+0x90>
c0000765:	8d 76 00             	lea    esi,[esi+0x0]

c0000768 <memcpy>:
c0000768:	57                   	push   edi
c0000769:	56                   	push   esi
c000076a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000076e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000772:	a8 03                	test   al,0x3
c0000774:	74 12                	je     c0000788 <memcpy+0x20>
c0000776:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000077a:	89 c1                	mov    ecx,eax
c000077c:	fc                   	cld    
c000077d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000077f:	29 c7                	sub    edi,eax
c0000781:	5e                   	pop    esi
c0000782:	89 f8                	mov    eax,edi
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax
c0000788:	89 c1                	mov    ecx,eax
c000078a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078e:	c1 e9 02             	shr    ecx,0x2
c0000791:	fc                   	cld    
c0000792:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000794:	29 c7                	sub    edi,eax
c0000796:	5e                   	pop    esi
c0000797:	89 f8                	mov    eax,edi
c0000799:	5f                   	pop    edi
c000079a:	c3                   	ret    
c000079b:	90                   	nop

c000079c <memset>:
c000079c:	57                   	push   edi
c000079d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007a1:	85 c9                	test   ecx,ecx
c00007a3:	74 0b                	je     c00007b0 <memset+0x14>
c00007a5:	fc                   	cld    
c00007a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007aa:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00007ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007b4:	5f                   	pop    edi
c00007b5:	c3                   	ret    
c00007b6:	66 90                	xchg   ax,ax

c00007b8 <strlen>:
c00007b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00007bc:	31 c0                	xor    eax,eax
c00007be:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00007c1:	74 09                	je     c00007cc <strlen+0x14>
c00007c3:	90                   	nop
c00007c4:	40                   	inc    eax
c00007c5:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007c9:	75 f9                	jne    c00007c4 <strlen+0xc>
c00007cb:	c3                   	ret    
c00007cc:	c3                   	ret    
c00007cd:	8d 76 00             	lea    esi,[esi+0x0]

c00007d0 <strpbrk>:
c00007d0:	57                   	push   edi
c00007d1:	56                   	push   esi
c00007d2:	53                   	push   ebx
c00007d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007db:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007dd:	84 db                	test   bl,bl
c00007df:	74 21                	je     c0000802 <strpbrk+0x32>
c00007e1:	8a 07                	mov    al,BYTE PTR [edi]
c00007e3:	84 c0                	test   al,al
c00007e5:	74 14                	je     c00007fb <strpbrk+0x2b>
c00007e7:	38 d8                	cmp    al,bl
c00007e9:	74 19                	je     c0000804 <strpbrk+0x34>
c00007eb:	89 fa                	mov    edx,edi
c00007ed:	eb 05                	jmp    c00007f4 <strpbrk+0x24>
c00007ef:	90                   	nop
c00007f0:	38 d9                	cmp    cl,bl
c00007f2:	74 10                	je     c0000804 <strpbrk+0x34>
c00007f4:	42                   	inc    edx
c00007f5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007f7:	84 c9                	test   cl,cl
c00007f9:	75 f5                	jne    c00007f0 <strpbrk+0x20>
c00007fb:	46                   	inc    esi
c00007fc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007fe:	84 db                	test   bl,bl
c0000800:	75 e1                	jne    c00007e3 <strpbrk+0x13>
c0000802:	31 f6                	xor    esi,esi
c0000804:	89 f0                	mov    eax,esi
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	5f                   	pop    edi
c0000809:	c3                   	ret    
c000080a:	66 90                	xchg   ax,ax

c000080c <strtok>:
c000080c:	56                   	push   esi
c000080d:	53                   	push   ebx
c000080e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000812:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000816:	85 db                	test   ebx,ebx
c0000818:	75 07                	jne    c0000821 <strtok+0x15>
c000081a:	eb 2c                	jmp    c0000848 <strtok+0x3c>
c000081c:	43                   	inc    ebx
c000081d:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000821:	56                   	push   esi
c0000822:	53                   	push   ebx
c0000823:	e8 a8 ff ff ff       	call   c00007d0 <strpbrk>
c0000828:	5a                   	pop    edx
c0000829:	a3 28 ea 02 c0       	mov    ds:0xc002ea28,eax
c000082e:	59                   	pop    ecx
c000082f:	39 d8                	cmp    eax,ebx
c0000831:	74 e9                	je     c000081c <strtok+0x10>
c0000833:	85 c0                	test   eax,eax
c0000835:	74 1b                	je     c0000852 <strtok+0x46>
c0000837:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000083a:	8d 50 01             	lea    edx,[eax+0x1]
c000083d:	89 d8                	mov    eax,ebx
c000083f:	89 15 28 ea 02 c0    	mov    DWORD PTR ds:0xc002ea28,edx
c0000845:	5b                   	pop    ebx
c0000846:	5e                   	pop    esi
c0000847:	c3                   	ret    
c0000848:	8b 1d 28 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea28
c000084e:	85 db                	test   ebx,ebx
c0000850:	75 cf                	jne    c0000821 <strtok+0x15>
c0000852:	31 c0                	xor    eax,eax
c0000854:	5b                   	pop    ebx
c0000855:	5e                   	pop    esi
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strcpy>:
c0000858:	53                   	push   ebx
c0000859:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000085d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000861:	89 c3                	mov    ebx,eax
c0000863:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000865:	84 d2                	test   dl,dl
c0000867:	74 0d                	je     c0000876 <strcpy+0x1e>
c0000869:	8d 76 00             	lea    esi,[esi+0x0]
c000086c:	88 13                	mov    BYTE PTR [ebx],dl
c000086e:	41                   	inc    ecx
c000086f:	43                   	inc    ebx
c0000870:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000872:	84 d2                	test   dl,dl
c0000874:	75 f6                	jne    c000086c <strcpy+0x14>
c0000876:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000879:	5b                   	pop    ebx
c000087a:	c3                   	ret    
c000087b:	90                   	nop

c000087c <strncpy>:
c000087c:	55                   	push   ebp
c000087d:	57                   	push   edi
c000087e:	56                   	push   esi
c000087f:	53                   	push   ebx
c0000880:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000884:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000888:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000088c:	85 c0                	test   eax,eax
c000088e:	74 39                	je     c00008c9 <strncpy+0x4d>
c0000890:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000892:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000895:	8d 55 01             	lea    edx,[ebp+0x1]
c0000898:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000089b:	84 db                	test   bl,bl
c000089d:	74 31                	je     c00008d0 <strncpy+0x54>
c000089f:	85 c9                	test   ecx,ecx
c00008a1:	74 26                	je     c00008c9 <strncpy+0x4d>
c00008a3:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c00008a6:	8d 48 fe             	lea    ecx,[eax-0x2]
c00008a9:	8d 55 02             	lea    edx,[ebp+0x2]
c00008ac:	8d 46 02             	lea    eax,[esi+0x2]
c00008af:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c00008b2:	84 db                	test   bl,bl
c00008b4:	75 0f                	jne    c00008c5 <strncpy+0x49>
c00008b6:	eb 18                	jmp    c00008d0 <strncpy+0x54>
c00008b8:	40                   	inc    eax
c00008b9:	42                   	inc    edx
c00008ba:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00008bd:	49                   	dec    ecx
c00008be:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008c1:	84 db                	test   bl,bl
c00008c3:	74 0b                	je     c00008d0 <strncpy+0x54>
c00008c5:	85 c9                	test   ecx,ecx
c00008c7:	75 ef                	jne    c00008b8 <strncpy+0x3c>
c00008c9:	5b                   	pop    ebx
c00008ca:	89 e8                	mov    eax,ebp
c00008cc:	5e                   	pop    esi
c00008cd:	5f                   	pop    edi
c00008ce:	5d                   	pop    ebp
c00008cf:	c3                   	ret    
c00008d0:	85 c9                	test   ecx,ecx
c00008d2:	74 f5                	je     c00008c9 <strncpy+0x4d>
c00008d4:	fc                   	cld    
c00008d5:	31 c0                	xor    eax,eax
c00008d7:	89 d7                	mov    edi,edx
c00008d9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008db:	89 e8                	mov    eax,ebp
c00008dd:	5b                   	pop    ebx
c00008de:	5e                   	pop    esi
c00008df:	5f                   	pop    edi
c00008e0:	5d                   	pop    ebp
c00008e1:	c3                   	ret    
c00008e2:	66 90                	xchg   ax,ax

c00008e4 <strcmp>:
c00008e4:	56                   	push   esi
c00008e5:	53                   	push   ebx
c00008e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ee:	8a 16                	mov    dl,BYTE PTR [esi]
c00008f0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008f3:	38 d1                	cmp    cl,dl
c00008f5:	75 1d                	jne    c0000914 <strcmp+0x30>
c00008f7:	84 c9                	test   cl,cl
c00008f9:	74 21                	je     c000091c <strcmp+0x38>
c00008fb:	b8 01 00 00 00       	mov    eax,0x1
c0000900:	eb 07                	jmp    c0000909 <strcmp+0x25>
c0000902:	66 90                	xchg   ax,ax
c0000904:	40                   	inc    eax
c0000905:	84 d2                	test   dl,dl
c0000907:	74 13                	je     c000091c <strcmp+0x38>
c0000909:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000090c:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c0000910:	38 ca                	cmp    dl,cl
c0000912:	74 f0                	je     c0000904 <strcmp+0x20>
c0000914:	0f b6 c2             	movzx  eax,dl
c0000917:	5b                   	pop    ebx
c0000918:	29 c8                	sub    eax,ecx
c000091a:	5e                   	pop    esi
c000091b:	c3                   	ret    
c000091c:	31 c0                	xor    eax,eax
c000091e:	5b                   	pop    ebx
c000091f:	5e                   	pop    esi
c0000920:	c3                   	ret    
c0000921:	8d 76 00             	lea    esi,[esi+0x0]

c0000924 <strchr>:
c0000924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000928:	8a 10                	mov    dl,BYTE PTR [eax]
c000092a:	84 d2                	test   dl,dl
c000092c:	74 15                	je     c0000943 <strchr+0x1f>
c000092e:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000932:	38 ca                	cmp    dl,cl
c0000934:	75 06                	jne    c000093c <strchr+0x18>
c0000936:	eb 0e                	jmp    c0000946 <strchr+0x22>
c0000938:	38 ca                	cmp    dl,cl
c000093a:	74 09                	je     c0000945 <strchr+0x21>
c000093c:	40                   	inc    eax
c000093d:	8a 10                	mov    dl,BYTE PTR [eax]
c000093f:	84 d2                	test   dl,dl
c0000941:	75 f5                	jne    c0000938 <strchr+0x14>
c0000943:	31 c0                	xor    eax,eax
c0000945:	c3                   	ret    
c0000946:	c3                   	ret    
c0000947:	90                   	nop

c0000948 <strncmp>:
c0000948:	57                   	push   edi
c0000949:	56                   	push   esi
c000094a:	53                   	push   ebx
c000094b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000094f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000953:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000957:	85 ff                	test   edi,edi
c0000959:	74 28                	je     c0000983 <strncmp+0x3b>
c000095b:	8a 16                	mov    dl,BYTE PTR [esi]
c000095d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000960:	38 d1                	cmp    cl,dl
c0000962:	75 28                	jne    c000098c <strncmp+0x44>
c0000964:	8d 46 01             	lea    eax,[esi+0x1]
c0000967:	84 c9                	test   cl,cl
c0000969:	74 18                	je     c0000983 <strncmp+0x3b>
c000096b:	01 fe                	add    esi,edi
c000096d:	eb 0f                	jmp    c000097e <strncmp+0x36>
c000096f:	90                   	nop
c0000970:	8a 10                	mov    dl,BYTE PTR [eax]
c0000972:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000975:	38 ca                	cmp    dl,cl
c0000977:	75 13                	jne    c000098c <strncmp+0x44>
c0000979:	40                   	inc    eax
c000097a:	84 d2                	test   dl,dl
c000097c:	74 05                	je     c0000983 <strncmp+0x3b>
c000097e:	43                   	inc    ebx
c000097f:	39 c6                	cmp    esi,eax
c0000981:	75 ed                	jne    c0000970 <strncmp+0x28>
c0000983:	5b                   	pop    ebx
c0000984:	31 c0                	xor    eax,eax
c0000986:	5e                   	pop    esi
c0000987:	5f                   	pop    edi
c0000988:	c3                   	ret    
c0000989:	8d 76 00             	lea    esi,[esi+0x0]
c000098c:	5b                   	pop    ebx
c000098d:	0f b6 c2             	movzx  eax,dl
c0000990:	5e                   	pop    esi
c0000991:	29 c8                	sub    eax,ecx
c0000993:	5f                   	pop    edi
c0000994:	c3                   	ret    
c0000995:	8d 76 00             	lea    esi,[esi+0x0]

c0000998 <strcat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000099e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00009a2:	89 c3                	mov    ebx,eax
c00009a4:	eb 04                	jmp    c00009aa <strcat+0x12>
c00009a6:	66 90                	xchg   ax,ax
c00009a8:	89 d3                	mov    ebx,edx
c00009aa:	8d 53 01             	lea    edx,[ebx+0x1]
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f5                	jne    c00009a8 <strcat+0x10>
c00009b3:	31 d2                	xor    edx,edx
c00009b5:	8d 76 00             	lea    esi,[esi+0x0]
c00009b8:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00009bb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00009be:	42                   	inc    edx
c00009bf:	84 c9                	test   cl,cl
c00009c1:	75 f5                	jne    c00009b8 <strcat+0x20>
c00009c3:	5b                   	pop    ebx
c00009c4:	5e                   	pop    esi
c00009c5:	c3                   	ret    
c00009c6:	66 90                	xchg   ax,ax

c00009c8 <strncat>:
c00009c8:	56                   	push   esi
c00009c9:	53                   	push   ebx
c00009ca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009d6:	85 f6                	test   esi,esi
c00009d8:	74 1e                	je     c00009f8 <strncat+0x30>
c00009da:	89 c2                	mov    edx,eax
c00009dc:	42                   	inc    edx
c00009dd:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009e1:	75 f9                	jne    c00009dc <strncat+0x14>
c00009e3:	01 ce                	add    esi,ecx
c00009e5:	eb 06                	jmp    c00009ed <strncat+0x25>
c00009e7:	90                   	nop
c00009e8:	39 f1                	cmp    ecx,esi
c00009ea:	74 10                	je     c00009fc <strncat+0x34>
c00009ec:	42                   	inc    edx
c00009ed:	41                   	inc    ecx
c00009ee:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009f1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009f4:	84 db                	test   bl,bl
c00009f6:	75 f0                	jne    c00009e8 <strncat+0x20>
c00009f8:	5b                   	pop    ebx
c00009f9:	5e                   	pop    esi
c00009fa:	c3                   	ret    
c00009fb:	90                   	nop
c00009fc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009ff:	5b                   	pop    ebx
c0000a00:	5e                   	pop    esi
c0000a01:	c3                   	ret    
c0000a02:	66 90                	xchg   ax,ax

c0000a04 <strstr>:
c0000a04:	57                   	push   edi
c0000a05:	56                   	push   esi
c0000a06:	53                   	push   ebx
c0000a07:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000a0b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0000a0f:	57                   	push   edi
c0000a10:	e8 a3 fd ff ff       	call   c00007b8 <strlen>
c0000a15:	59                   	pop    ecx
c0000a16:	85 c0                	test   eax,eax
c0000a18:	74 2a                	je     c0000a44 <strstr+0x40>
c0000a1a:	89 c6                	mov    esi,eax
c0000a1c:	eb 12                	jmp    c0000a30 <strstr+0x2c>
c0000a1e:	66 90                	xchg   ax,ax
c0000a20:	56                   	push   esi
c0000a21:	57                   	push   edi
c0000a22:	53                   	push   ebx
c0000a23:	e8 3c fc ff ff       	call   c0000664 <memcmp>
c0000a28:	83 c4 0c             	add    esp,0xc
c0000a2b:	85 c0                	test   eax,eax
c0000a2d:	74 15                	je     c0000a44 <strstr+0x40>
c0000a2f:	43                   	inc    ebx
c0000a30:	53                   	push   ebx
c0000a31:	e8 82 fd ff ff       	call   c00007b8 <strlen>
c0000a36:	5a                   	pop    edx
c0000a37:	39 f0                	cmp    eax,esi
c0000a39:	73 e5                	jae    c0000a20 <strstr+0x1c>
c0000a3b:	5b                   	pop    ebx
c0000a3c:	31 c0                	xor    eax,eax
c0000a3e:	5e                   	pop    esi
c0000a3f:	5f                   	pop    edi
c0000a40:	c3                   	ret    
c0000a41:	8d 76 00             	lea    esi,[esi+0x0]
c0000a44:	89 d8                	mov    eax,ebx
c0000a46:	5b                   	pop    ebx
c0000a47:	5e                   	pop    esi
c0000a48:	5f                   	pop    edi
c0000a49:	c3                   	ret    
c0000a4a:	66 90                	xchg   ax,ax

c0000a4c <toupper>:
c0000a4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a50:	0f b6 d0             	movzx  edx,al
c0000a53:	f6 82 20 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64e0],0x2
c0000a5a:	74 03                	je     c0000a5f <toupper+0x13>
c0000a5c:	83 e8 20             	sub    eax,0x20
c0000a5f:	c3                   	ret    

c0000a60 <tolower>:
c0000a60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a64:	0f b6 d0             	movzx  edx,al
c0000a67:	f6 82 20 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64e0],0x1
c0000a6e:	74 03                	je     c0000a73 <tolower+0x13>
c0000a70:	83 c0 20             	add    eax,0x20
c0000a73:	c3                   	ret    

c0000a74 <simple_strtoul>:
c0000a74:	55                   	push   ebp
c0000a75:	57                   	push   edi
c0000a76:	56                   	push   esi
c0000a77:	53                   	push   ebx
c0000a78:	83 ec 08             	sub    esp,0x8
c0000a7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a83:	90                   	nop
c0000a84:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a87:	f6 82 20 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64e0],0x8
c0000a8e:	75 05                	jne    c0000a95 <simple_strtoul+0x21>
c0000a90:	80 fa 09             	cmp    dl,0x9
c0000a93:	75 03                	jne    c0000a98 <simple_strtoul+0x24>
c0000a95:	41                   	inc    ecx
c0000a96:	eb ec                	jmp    c0000a84 <simple_strtoul+0x10>
c0000a98:	80 fa 2d             	cmp    dl,0x2d
c0000a9b:	0f 84 1b 01 00 00    	je     c0000bbc <simple_strtoul+0x148>
c0000aa1:	80 fa 2b             	cmp    dl,0x2b
c0000aa4:	0f 84 c2 00 00 00    	je     c0000b6c <simple_strtoul+0xf8>
c0000aaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000ab2:	85 f6                	test   esi,esi
c0000ab4:	0f 85 c3 00 00 00    	jne    c0000b7d <simple_strtoul+0x109>
c0000aba:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000abc:	80 fa 30             	cmp    dl,0x30
c0000abf:	0f 84 47 01 00 00    	je     c0000c0c <simple_strtoul+0x198>
c0000ac5:	be 0a 00 00 00       	mov    esi,0xa
c0000aca:	84 d2                	test   dl,dl
c0000acc:	0f 84 6f 01 00 00    	je     c0000c41 <simple_strtoul+0x1cd>
c0000ad2:	31 ed                	xor    ebp,ebp
c0000ad4:	31 ff                	xor    edi,edi
c0000ad6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000add:	eb 2b                	jmp    c0000b0a <simple_strtoul+0x96>
c0000adf:	90                   	nop
c0000ae0:	83 eb 30             	sub    ebx,0x30
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	73 4d                	jae    c0000b34 <simple_strtoul+0xc0>
c0000ae7:	31 d2                	xor    edx,edx
c0000ae9:	89 d8                	mov    eax,ebx
c0000aeb:	f7 d0                	not    eax
c0000aed:	f7 f6                	div    esi
c0000aef:	39 f8                	cmp    eax,edi
c0000af1:	0f 82 b1 00 00 00    	jb     c0000ba8 <simple_strtoul+0x134>
c0000af7:	0f af fe             	imul   edi,esi
c0000afa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000b01:	01 df                	add    edi,ebx
c0000b03:	41                   	inc    ecx
c0000b04:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b06:	84 d2                	test   dl,dl
c0000b08:	74 2a                	je     c0000b34 <simple_strtoul+0xc0>
c0000b0a:	0f b6 da             	movzx  ebx,dl
c0000b0d:	f6 83 20 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64e0],0x4
c0000b14:	75 ca                	jne    c0000ae0 <simple_strtoul+0x6c>
c0000b16:	0f be d2             	movsx  edx,dl
c0000b19:	52                   	push   edx
c0000b1a:	e8 2d ff ff ff       	call   c0000a4c <toupper>
c0000b1f:	5b                   	pop    ebx
c0000b20:	0f b6 d0             	movzx  edx,al
c0000b23:	f6 82 20 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64e0],0x1
c0000b2a:	74 08                	je     c0000b34 <simple_strtoul+0xc0>
c0000b2c:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b2f:	39 f3                	cmp    ebx,esi
c0000b31:	72 b4                	jb     c0000ae7 <simple_strtoul+0x73>
c0000b33:	90                   	nop
c0000b34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b38:	85 c0                	test   eax,eax
c0000b3a:	74 14                	je     c0000b50 <simple_strtoul+0xdc>
c0000b3c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b3f:	09 f8                	or     eax,edi
c0000b41:	75 71                	jne    c0000bb4 <simple_strtoul+0x140>
c0000b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b47:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b4b:	31 ff                	xor    edi,edi
c0000b4d:	89 30                	mov    DWORD PTR [eax],esi
c0000b4f:	90                   	nop
c0000b50:	4d                   	dec    ebp
c0000b51:	75 05                	jne    c0000b58 <simple_strtoul+0xe4>
c0000b53:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b58:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b5d:	75 02                	jne    c0000b61 <simple_strtoul+0xed>
c0000b5f:	f7 df                	neg    edi
c0000b61:	83 c4 08             	add    esp,0x8
c0000b64:	89 f8                	mov    eax,edi
c0000b66:	5b                   	pop    ebx
c0000b67:	5e                   	pop    esi
c0000b68:	5f                   	pop    edi
c0000b69:	5d                   	pop    ebp
c0000b6a:	c3                   	ret    
c0000b6b:	90                   	nop
c0000b6c:	41                   	inc    ecx
c0000b6d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b75:	85 f6                	test   esi,esi
c0000b77:	0f 84 3d ff ff ff    	je     c0000aba <simple_strtoul+0x46>
c0000b7d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b80:	83 f8 22             	cmp    eax,0x22
c0000b83:	77 6a                	ja     c0000bef <simple_strtoul+0x17b>
c0000b85:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b87:	83 fe 08             	cmp    esi,0x8
c0000b8a:	0f 84 a2 00 00 00    	je     c0000c32 <simple_strtoul+0x1be>
c0000b90:	83 fe 10             	cmp    esi,0x10
c0000b93:	0f 85 31 ff ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000b99:	80 fa 30             	cmp    dl,0x30
c0000b9c:	74 2c                	je     c0000bca <simple_strtoul+0x156>
c0000b9e:	be 10 00 00 00       	mov    esi,0x10
c0000ba3:	e9 22 ff ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000ba8:	bd 01 00 00 00       	mov    ebp,0x1
c0000bad:	31 ff                	xor    edi,edi
c0000baf:	e9 4f ff ff ff       	jmp    c0000b03 <simple_strtoul+0x8f>
c0000bb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb8:	89 08                	mov    DWORD PTR [eax],ecx
c0000bba:	eb 94                	jmp    c0000b50 <simple_strtoul+0xdc>
c0000bbc:	41                   	inc    ecx
c0000bbd:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000bc5:	e9 e8 fe ff ff       	jmp    c0000ab2 <simple_strtoul+0x3e>
c0000bca:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bce:	88 04 24             	mov    BYTE PTR [esp],al
c0000bd1:	50                   	push   eax
c0000bd2:	e8 89 fe ff ff       	call   c0000a60 <tolower>
c0000bd7:	5e                   	pop    esi
c0000bd8:	83 f8 78             	cmp    eax,0x78
c0000bdb:	0f 84 84 00 00 00    	je     c0000c65 <simple_strtoul+0x1f1>
c0000be1:	41                   	inc    ecx
c0000be2:	be 10 00 00 00       	mov    esi,0x10
c0000be7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bea:	e9 db fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000bef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bf3:	85 ff                	test   edi,edi
c0000bf5:	74 5c                	je     c0000c53 <simple_strtoul+0x1df>
c0000bf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bfb:	85 c9                	test   ecx,ecx
c0000bfd:	75 4e                	jne    c0000c4d <simple_strtoul+0x1d9>
c0000bff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000c05:	31 ff                	xor    edi,edi
c0000c07:	e9 4c ff ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c0c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000c10:	88 04 24             	mov    BYTE PTR [esp],al
c0000c13:	50                   	push   eax
c0000c14:	e8 47 fe ff ff       	call   c0000a60 <tolower>
c0000c19:	5d                   	pop    ebp
c0000c1a:	83 f8 78             	cmp    eax,0x78
c0000c1d:	74 3b                	je     c0000c5a <simple_strtoul+0x1e6>
c0000c1f:	41                   	inc    ecx
c0000c20:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000c23:	80 fa 30             	cmp    dl,0x30
c0000c26:	74 13                	je     c0000c3b <simple_strtoul+0x1c7>
c0000c28:	be 08 00 00 00       	mov    esi,0x8
c0000c2d:	e9 98 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>
c0000c32:	80 fa 30             	cmp    dl,0x30
c0000c35:	0f 85 8f fe ff ff    	jne    c0000aca <simple_strtoul+0x56>
c0000c3b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c3e:	41                   	inc    ecx
c0000c3f:	eb e7                	jmp    c0000c28 <simple_strtoul+0x1b4>
c0000c41:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c45:	85 d2                	test   edx,edx
c0000c47:	74 0a                	je     c0000c53 <simple_strtoul+0x1df>
c0000c49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c4d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c51:	89 30                	mov    DWORD PTR [eax],esi
c0000c53:	31 ff                	xor    edi,edi
c0000c55:	e9 fe fe ff ff       	jmp    c0000b58 <simple_strtoul+0xe4>
c0000c5a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c5d:	83 c1 02             	add    ecx,0x2
c0000c60:	e9 34 ff ff ff       	jmp    c0000b99 <simple_strtoul+0x125>
c0000c65:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c68:	be 10 00 00 00       	mov    esi,0x10
c0000c6d:	83 c1 02             	add    ecx,0x2
c0000c70:	e9 55 fe ff ff       	jmp    c0000aca <simple_strtoul+0x56>

c0000c75 <largebin_index>:
c0000c75:	89 c2                	mov    edx,eax
c0000c77:	c1 ea 08             	shr    edx,0x8
c0000c7a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c80:	77 10                	ja     c0000c92 <largebin_index+0x1d>
c0000c82:	0f bd d2             	bsr    edx,edx
c0000c85:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c88:	d3 e8                	shr    eax,cl
c0000c8a:	83 e0 03             	and    eax,0x3
c0000c8d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c91:	c3                   	ret    
c0000c92:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c97:	c3                   	ret    

c0000c98 <malloc_init_state>:
c0000c98:	53                   	push   ebx
c0000c99:	8d 50 34             	lea    edx,[eax+0x34]
c0000c9c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000ca2:	89 d1                	mov    ecx,edx
c0000ca4:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ca7:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000caa:	83 c2 08             	add    edx,0x8
c0000cad:	39 da                	cmp    edx,ebx
c0000caf:	75 f3                	jne    c0000ca4 <malloc_init_state+0xc>
c0000cb1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cb3:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000cbd:	83 e2 03             	and    edx,0x3
c0000cc0:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cca:	83 ca 48             	or     edx,0x48
c0000ccd:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cd7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000ce1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ce8:	89 10                	mov    DWORD PTR [eax],edx
c0000cea:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ced:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cf7:	5b                   	pop    ebx
c0000cf8:	c3                   	ret    

c0000cf9 <malloc_consolidate>:
c0000cf9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cfb:	85 d2                	test   edx,edx
c0000cfd:	0f 84 d8 00 00 00    	je     c0000ddb <malloc_consolidate+0xe2>
c0000d03:	55                   	push   ebp
c0000d04:	83 e2 fd             	and    edx,0xfffffffd
c0000d07:	57                   	push   edi
c0000d08:	89 c5                	mov    ebp,eax
c0000d0a:	56                   	push   esi
c0000d0b:	8d 78 34             	lea    edi,[eax+0x34]
c0000d0e:	53                   	push   ebx
c0000d0f:	83 ec 10             	sub    esp,0x10
c0000d12:	89 10                	mov    DWORD PTR [eax],edx
c0000d14:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d18:	c1 ea 03             	shr    edx,0x3
c0000d1b:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d23:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d26:	85 d2                	test   edx,edx
c0000d28:	0f 84 98 00 00 00    	je     c0000dc6 <malloc_consolidate+0xcd>
c0000d2e:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d35:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d38:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d3f:	89 f9                	mov    ecx,edi
c0000d41:	83 e1 fe             	and    ecx,0xfffffffe
c0000d44:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d47:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d4a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d4d:	83 e7 01             	and    edi,0x1
c0000d50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d53:	75 14                	jne    c0000d69 <malloc_consolidate+0x70>
c0000d55:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d57:	29 fa                	sub    edx,edi
c0000d59:	01 f9                	add    ecx,edi
c0000d5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d5e:	89 fb                	mov    ebx,edi
c0000d60:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d63:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d66:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d69:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d6c:	74 40                	je     c0000dae <malloc_consolidate+0xb5>
c0000d6e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d71:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d74:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d78:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d7b:	83 e7 01             	and    edi,0x1
c0000d7e:	75 0e                	jne    c0000d8e <malloc_consolidate+0x95>
c0000d80:	01 d9                	add    ecx,ebx
c0000d82:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d85:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d88:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d8b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d8e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d91:	89 ce                	mov    esi,ecx
c0000d93:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d96:	83 ce 01             	or     esi,0x1
c0000d99:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d9c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d9f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000da2:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000da6:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000da9:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dac:	eb 0c                	jmp    c0000dba <malloc_consolidate+0xc1>
c0000dae:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000db1:	83 c9 01             	or     ecx,0x1
c0000db4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000db7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000dba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000dbe:	85 d2                	test   edx,edx
c0000dc0:	0f 85 6f ff ff ff    	jne    c0000d35 <malloc_consolidate+0x3c>
c0000dc6:	83 c5 04             	add    ebp,0x4
c0000dc9:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000dcd:	0f 85 50 ff ff ff    	jne    c0000d23 <malloc_consolidate+0x2a>
c0000dd3:	83 c4 10             	add    esp,0x10
c0000dd6:	5b                   	pop    ebx
c0000dd7:	5e                   	pop    esi
c0000dd8:	5f                   	pop    edi
c0000dd9:	5d                   	pop    ebp
c0000dda:	c3                   	ret    
c0000ddb:	e9 b8 fe ff ff       	jmp    c0000c98 <malloc_init_state>

c0000de0 <dlfree>:
c0000de0:	57                   	push   edi
c0000de1:	56                   	push   esi
c0000de2:	53                   	push   ebx
c0000de3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000de7:	85 db                	test   ebx,ebx
c0000de9:	0f 84 e2 00 00 00    	je     c0000ed1 <dlfree+0xf1>
c0000def:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000df2:	8b 0d 40 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea40
c0000df8:	89 f0                	mov    eax,esi
c0000dfa:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dfd:	83 e0 fc             	and    eax,0xfffffffc
c0000e00:	39 c1                	cmp    ecx,eax
c0000e02:	72 24                	jb     c0000e28 <dlfree+0x48>
c0000e04:	83 c9 03             	or     ecx,0x3
c0000e07:	c1 e8 03             	shr    eax,0x3
c0000e0a:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000e10:	83 e8 02             	sub    eax,0x2
c0000e13:	8b 0c 85 44 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15bc]
c0000e1a:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e1c:	89 14 85 44 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd15bc],edx
c0000e23:	e9 a9 00 00 00       	jmp    c0000ed1 <dlfree+0xf1>
c0000e28:	83 e6 02             	and    esi,0x2
c0000e2b:	0f 85 a0 00 00 00    	jne    c0000ed1 <dlfree+0xf1>
c0000e31:	83 c9 01             	or     ecx,0x1
c0000e34:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e37:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000e3d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e40:	83 e1 fc             	and    ecx,0xfffffffc
c0000e43:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e47:	75 13                	jne    c0000e5c <dlfree+0x7c>
c0000e49:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e4c:	29 da                	sub    edx,ebx
c0000e4e:	01 d8                	add    eax,ebx
c0000e50:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e53:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e56:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e59:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5c:	39 35 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,esi
c0000e62:	74 40                	je     c0000ea4 <dlfree+0xc4>
c0000e64:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e68:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e6b:	80 e3 01             	and    bl,0x1
c0000e6e:	75 0e                	jne    c0000e7e <dlfree+0x9e>
c0000e70:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e73:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e76:	01 c8                	add    eax,ecx
c0000e78:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e7e:	8b 0d 7c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea7c
c0000e84:	c7 42 0c 74 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea74
c0000e8b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e8e:	89 15 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edx
c0000e94:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e97:	89 c1                	mov    ecx,eax
c0000e99:	83 c9 01             	or     ecx,0x1
c0000e9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e9f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ea2:	eb 10                	jmp    c0000eb4 <dlfree+0xd4>
c0000ea4:	01 c8                	add    eax,ecx
c0000ea6:	89 c1                	mov    ecx,eax
c0000ea8:	83 c9 01             	or     ecx,0x1
c0000eab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000eae:	89 15 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edx
c0000eb4:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000eb9:	76 16                	jbe    c0000ed1 <dlfree+0xf1>
c0000ebb:	f6 05 40 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea40,0x2
c0000ec2:	74 0d                	je     c0000ed1 <dlfree+0xf1>
c0000ec4:	5b                   	pop    ebx
c0000ec5:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0000eca:	5e                   	pop    esi
c0000ecb:	5f                   	pop    edi
c0000ecc:	e9 28 fe ff ff       	jmp    c0000cf9 <malloc_consolidate>
c0000ed1:	5b                   	pop    ebx
c0000ed2:	5e                   	pop    esi
c0000ed3:	5f                   	pop    edi
c0000ed4:	c3                   	ret    

c0000ed5 <sYSMALLOc>:
c0000ed5:	55                   	push   ebp
c0000ed6:	57                   	push   edi
c0000ed7:	56                   	push   esi
c0000ed8:	53                   	push   ebx
c0000ed9:	89 d3                	mov    ebx,edx
c0000edb:	83 ec 2c             	sub    esp,0x2c
c0000ede:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ee2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ee8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000eeb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef2:	74 1f                	je     c0000f13 <sYSMALLOc+0x3e>
c0000ef4:	89 d8                	mov    eax,ebx
c0000ef6:	e8 fe fd ff ff       	call   c0000cf9 <malloc_consolidate>
c0000efb:	83 ec 0c             	sub    esp,0xc
c0000efe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f02:	83 e8 07             	sub    eax,0x7
c0000f05:	50                   	push   eax
c0000f06:	e8 30 02 00 00       	call   c000113b <dlmalloc>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	e9 20 02 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f13:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f16:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f1f:	83 e0 fc             	and    eax,0xfffffffc
c0000f22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f2a:	83 c0 10             	add    eax,0x10
c0000f2d:	01 c1                	add    ecx,eax
c0000f2f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f33:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f3a:	74 04                	je     c0000f40 <sYSMALLOc+0x6b>
c0000f3c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f40:	f7 da                	neg    edx
c0000f42:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f4a:	21 d1                	and    ecx,edx
c0000f4c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f50:	7f 07                	jg     c0000f59 <sYSMALLOc+0x84>
c0000f52:	31 c0                	xor    eax,eax
c0000f54:	e9 da 01 00 00       	jmp    c0001133 <sYSMALLOc+0x25e>
c0000f59:	83 ec 0c             	sub    esp,0xc
c0000f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f60:	e8 21 e8 00 00       	call   c000f786 <sbrk>
c0000f65:	83 c4 10             	add    esp,0x10
c0000f68:	89 c6                	mov    esi,eax
c0000f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f6d:	74 e3                	je     c0000f52 <sYSMALLOc+0x7d>
c0000f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f73:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f77:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f7a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f80:	39 f1                	cmp    ecx,esi
c0000f82:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f88:	75 13                	jne    c0000f9d <sYSMALLOc+0xc8>
c0000f8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f8e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f92:	83 c8 01             	or     eax,0x1
c0000f95:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f98:	e9 3e 01 00 00       	jmp    c00010db <sYSMALLOc+0x206>
c0000f9d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fa3:	88 d0                	mov    al,dl
c0000fa5:	83 e0 01             	and    eax,0x1
c0000fa8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fad:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fb1:	0f 95 c0             	setne  al
c0000fb4:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fb8:	39 f1                	cmp    ecx,esi
c0000fba:	76 12                	jbe    c0000fce <sYSMALLOc+0xf9>
c0000fbc:	84 c0                	test   al,al
c0000fbe:	74 0e                	je     c0000fce <sYSMALLOc+0xf9>
c0000fc0:	83 e2 fe             	and    edx,0xfffffffe
c0000fc3:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fc9:	e9 83 00 00 00       	jmp    c0001051 <sYSMALLOc+0x17c>
c0000fce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fd3:	74 7c                	je     c0001051 <sYSMALLOc+0x17c>
c0000fd5:	84 c0                	test   al,al
c0000fd7:	74 0c                	je     c0000fe5 <sYSMALLOc+0x110>
c0000fd9:	89 f0                	mov    eax,esi
c0000fdb:	29 c8                	sub    eax,ecx
c0000fdd:	01 e8                	add    eax,ebp
c0000fdf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fe5:	89 f2                	mov    edx,esi
c0000fe7:	83 e2 07             	and    edx,0x7
c0000fea:	74 0c                	je     c0000ff8 <sYSMALLOc+0x123>
c0000fec:	b8 08 00 00 00       	mov    eax,0x8
c0000ff1:	29 d0                	sub    eax,edx
c0000ff3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ff6:	eb 04                	jmp    c0000ffc <sYSMALLOc+0x127>
c0000ff8:	89 f5                	mov    ebp,esi
c0000ffa:	31 c0                	xor    eax,eax
c0000ffc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001004:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001008:	01 c1                	add    ecx,eax
c000100a:	83 ec 0c             	sub    esp,0xc
c000100d:	01 f1                	add    ecx,esi
c000100f:	01 ca                	add    edx,ecx
c0001011:	29 c8                	sub    eax,ecx
c0001013:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0001017:	01 c2                	add    edx,eax
c0001019:	52                   	push   edx
c000101a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000101e:	e8 63 e7 00 00       	call   c000f786 <sbrk>
c0001023:	83 c4 10             	add    esp,0x10
c0001026:	83 f8 ff             	cmp    eax,0xffffffff
c0001029:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102d:	75 0f                	jne    c000103e <sYSMALLOc+0x169>
c000102f:	83 ec 0c             	sub    esp,0xc
c0001032:	6a 00                	push   0x0
c0001034:	e8 4d e7 00 00       	call   c000f786 <sbrk>
c0001039:	83 c4 10             	add    esp,0x10
c000103c:	eb 30                	jmp    c000106e <sYSMALLOc+0x199>
c000103e:	39 c6                	cmp    esi,eax
c0001040:	76 33                	jbe    c0001075 <sYSMALLOc+0x1a0>
c0001042:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001046:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000104d:	01 f0                	add    eax,esi
c000104f:	eb 1d                	jmp    c000106e <sYSMALLOc+0x199>
c0001051:	83 ec 0c             	sub    esp,0xc
c0001054:	89 f5                	mov    ebp,esi
c0001056:	6a 00                	push   0x0
c0001058:	e8 29 e7 00 00       	call   c000f786 <sbrk>
c000105d:	89 c2                	mov    edx,eax
c000105f:	29 f2                	sub    edx,esi
c0001061:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001065:	83 c4 10             	add    esp,0x10
c0001068:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000106e:	31 d2                	xor    edx,edx
c0001070:	83 f8 ff             	cmp    eax,0xffffffff
c0001073:	74 66                	je     c00010db <sYSMALLOc+0x206>
c0001075:	29 e8                	sub    eax,ebp
c0001077:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000107a:	01 d0                	add    eax,edx
c000107c:	83 c8 01             	or     eax,0x1
c000107f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001082:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001088:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000108d:	74 4c                	je     c00010db <sYSMALLOc+0x206>
c000108f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001093:	83 e8 0c             	sub    eax,0xc
c0001096:	83 e0 f8             	and    eax,0xfffffff8
c0001099:	89 c2                	mov    edx,eax
c000109b:	83 ca 01             	or     edx,0x1
c000109e:	83 f8 0f             	cmp    eax,0xf
c00010a1:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010a4:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010ac:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010b4:	76 25                	jbe    c00010db <sYSMALLOc+0x206>
c00010b6:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010bc:	83 ec 0c             	sub    esp,0xc
c00010bf:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010c9:	83 c7 08             	add    edi,0x8
c00010cc:	57                   	push   edi
c00010cd:	e8 0e fd ff ff       	call   c0000de0 <dlfree>
c00010d2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010d8:	83 c4 10             	add    esp,0x10
c00010db:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010e1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010e7:	73 06                	jae    c00010ef <sYSMALLOc+0x21a>
c00010e9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010ef:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010f5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010fb:	73 06                	jae    c0001103 <sYSMALLOc+0x22e>
c00010fd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001103:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001106:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001109:	83 e2 fc             	and    edx,0xfffffffc
c000110c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001110:	0f 82 3c fe ff ff    	jb     c0000f52 <sYSMALLOc+0x7d>
c0001116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000111a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000111d:	29 fa                	sub    edx,edi
c000111f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001122:	83 ca 01             	or     edx,0x1
c0001125:	89 fb                	mov    ebx,edi
c0001127:	83 c0 08             	add    eax,0x8
c000112a:	83 cb 01             	or     ebx,0x1
c000112d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001130:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001133:	83 c4 2c             	add    esp,0x2c
c0001136:	5b                   	pop    ebx
c0001137:	5e                   	pop    esi
c0001138:	5f                   	pop    edi
c0001139:	5d                   	pop    ebp
c000113a:	c3                   	ret    

c000113b <dlmalloc>:
c000113b:	55                   	push   ebp
c000113c:	57                   	push   edi
c000113d:	56                   	push   esi
c000113e:	53                   	push   ebx
c000113f:	83 ec 1c             	sub    esp,0x1c
c0001142:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001146:	83 f8 df             	cmp    eax,0xffffffdf
c0001149:	0f 87 70 03 00 00    	ja     c00014bf <dlmalloc+0x384>
c000114f:	83 c0 0b             	add    eax,0xb
c0001152:	be 10 00 00 00       	mov    esi,0x10
c0001157:	83 f8 0f             	cmp    eax,0xf
c000115a:	76 05                	jbe    c0001161 <dlmalloc+0x26>
c000115c:	83 e0 f8             	and    eax,0xfffffff8
c000115f:	89 c6                	mov    esi,eax
c0001161:	8b 3d 40 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea40
c0001167:	f7 c7 01 00 00 00    	test   edi,0x1
c000116d:	75 17                	jne    c0001186 <dlmalloc+0x4b>
c000116f:	85 ff                	test   edi,edi
c0001171:	0f 85 05 03 00 00    	jne    c000147c <dlmalloc+0x341>
c0001177:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c000117c:	e8 78 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c0001181:	e9 f6 02 00 00       	jmp    c000147c <dlmalloc+0x341>
c0001186:	39 f7                	cmp    edi,esi
c0001188:	72 1f                	jb     c00011a9 <dlmalloc+0x6e>
c000118a:	89 f2                	mov    edx,esi
c000118c:	c1 ea 03             	shr    edx,0x3
c000118f:	83 ea 02             	sub    edx,0x2
c0001192:	8b 04 95 44 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15bc]
c0001199:	85 c0                	test   eax,eax
c000119b:	74 0c                	je     c00011a9 <dlmalloc+0x6e>
c000119d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011a0:	89 0c 95 44 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15bc],ecx
c00011a7:	eb 30                	jmp    c00011d9 <dlmalloc+0x9e>
c00011a9:	89 f0                	mov    eax,esi
c00011ab:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011b1:	77 2e                	ja     c00011e1 <dlmalloc+0xa6>
c00011b3:	c1 e8 03             	shr    eax,0x3
c00011b6:	8d 14 c5 74 ea 02 c0 	lea    edx,[eax*8-0x3ffd158c]
c00011bd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c1:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011c4:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011c7:	39 c3                	cmp    ebx,eax
c00011c9:	74 2e                	je     c00011f9 <dlmalloc+0xbe>
c00011cb:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011ce:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011d3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011d6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011d9:	83 c0 08             	add    eax,0x8
c00011dc:	e9 e0 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00011e1:	e8 8f fa ff ff       	call   c0000c75 <largebin_index>
c00011e6:	83 e7 02             	and    edi,0x2
c00011e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011ed:	74 0a                	je     c00011f9 <dlmalloc+0xbe>
c00011ef:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00011f4:	e8 00 fb ff ff       	call   c0000cf9 <malloc_consolidate>
c00011f9:	8d 46 10             	lea    eax,[esi+0x10]
c00011fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001200:	8b 1d 80 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea80
c0001206:	81 fb 74 ea 02 c0    	cmp    ebx,0xc002ea74
c000120c:	0f 84 13 01 00 00    	je     c0001325 <dlmalloc+0x1ea>
c0001212:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001215:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001218:	83 e7 fc             	and    edi,0xfffffffc
c000121b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001221:	77 4c                	ja     c000126f <dlmalloc+0x134>
c0001223:	3d 74 ea 02 c0       	cmp    eax,0xc002ea74
c0001228:	75 45                	jne    c000126f <dlmalloc+0x134>
c000122a:	39 1d 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,ebx
c0001230:	75 3d                	jne    c000126f <dlmalloc+0x134>
c0001232:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001236:	73 37                	jae    c000126f <dlmalloc+0x134>
c0001238:	8d 04 33             	lea    eax,[ebx+esi*1]
c000123b:	89 fa                	mov    edx,edi
c000123d:	a3 7c ea 02 c0       	mov    ds:0xc002ea7c,eax
c0001242:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0001247:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c000124c:	29 f2                	sub    edx,esi
c000124e:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c0001255:	c7 40 0c 74 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea74
c000125c:	83 ce 01             	or     esi,0x1
c000125f:	89 d1                	mov    ecx,edx
c0001261:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001264:	83 c9 01             	or     ecx,0x1
c0001267:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000126a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000126d:	eb 15                	jmp    c0001284 <dlmalloc+0x149>
c000126f:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0001274:	39 fe                	cmp    esi,edi
c0001276:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c000127d:	75 0d                	jne    c000128c <dlmalloc+0x151>
c000127f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001284:	8d 43 08             	lea    eax,[ebx+0x8]
c0001287:	e9 35 02 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000128c:	89 f8                	mov    eax,edi
c000128e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001294:	77 19                	ja     c00012af <dlmalloc+0x174>
c0001296:	c1 e8 03             	shr    eax,0x3
c0001299:	8d 14 00             	lea    edx,[eax+eax*1]
c000129c:	83 c2 0d             	add    edx,0xd
c000129f:	8d 2c 95 38 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15c8]
c00012a6:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c00012ad:	eb 46                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012af:	e8 c1 f9 ff ff       	call   c0000c75 <largebin_index>
c00012b4:	8d 14 00             	lea    edx,[eax+eax*1]
c00012b7:	83 c2 0d             	add    edx,0xd
c00012ba:	8d 0c 95 40 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15c0]
c00012c1:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c00012c8:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012cb:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012cf:	89 d5                	mov    ebp,edx
c00012d1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012d5:	74 1e                	je     c00012f5 <dlmalloc+0x1ba>
c00012d7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012da:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012dd:	77 12                	ja     c00012f1 <dlmalloc+0x1b6>
c00012df:	83 cf 01             	or     edi,0x1
c00012e2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012e5:	76 05                	jbe    c00012ec <dlmalloc+0x1b1>
c00012e7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ea:	eb f6                	jmp    c00012e2 <dlmalloc+0x1a7>
c00012ec:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012ef:	eb 04                	jmp    c00012f5 <dlmalloc+0x1ba>
c00012f1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012f5:	89 c7                	mov    edi,eax
c00012f7:	88 c1                	mov    cl,al
c00012f9:	c1 ff 05             	sar    edi,0x5
c00012fc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001300:	bf 01 00 00 00       	mov    edi,0x1
c0001305:	d3 e7                	shl    edi,cl
c0001307:	89 f8                	mov    eax,edi
c0001309:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000130d:	09 04 bd 74 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd128c],eax
c0001314:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001317:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000131a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000131d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001320:	e9 db fe ff ff       	jmp    c0001200 <dlmalloc+0xc5>
c0001325:	81 fe ff 00 00 00    	cmp    esi,0xff
c000132b:	76 78                	jbe    c00013a5 <dlmalloc+0x26a>
c000132d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001331:	8d 04 c5 74 ea 02 c0 	lea    eax,[eax*8-0x3ffd158c]
c0001338:	8d 48 f8             	lea    ecx,[eax-0x8]
c000133b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000133e:	39 ca                	cmp    edx,ecx
c0001340:	74 63                	je     c00013a5 <dlmalloc+0x26a>
c0001342:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001345:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001348:	83 e3 fc             	and    ebx,0xfffffffc
c000134b:	39 de                	cmp    esi,ebx
c000134d:	77 52                	ja     c00013a1 <dlmalloc+0x266>
c000134f:	89 df                	mov    edi,ebx
c0001351:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001354:	29 f7                	sub    edi,esi
c0001356:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001359:	01 d3                	add    ebx,edx
c000135b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000135e:	83 ff 0f             	cmp    edi,0xf
c0001361:	8d 42 08             	lea    eax,[edx+0x8]
c0001364:	77 09                	ja     c000136f <dlmalloc+0x234>
c0001366:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000136a:	e9 52 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000136f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001372:	83 ce 01             	or     esi,0x1
c0001375:	89 0d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,ecx
c000137b:	89 0d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,ecx
c0001381:	c7 41 08 74 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea74
c0001388:	c7 41 0c 74 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea74
c000138f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001392:	89 fa                	mov    edx,edi
c0001394:	83 ca 01             	or     edx,0x1
c0001397:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000139a:	89 3b                	mov    DWORD PTR [ebx],edi
c000139c:	e9 20 01 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c00013a1:	89 c2                	mov    edx,eax
c00013a3:	eb 99                	jmp    c000133e <dlmalloc+0x203>
c00013a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013a9:	b8 01 00 00 00       	mov    eax,0x1
c00013ae:	41                   	inc    ecx
c00013af:	89 cb                	mov    ebx,ecx
c00013b1:	8d 14 cd 6c ea 02 c0 	lea    edx,[ecx*8-0x3ffd1594]
c00013b8:	c1 eb 05             	shr    ebx,0x5
c00013bb:	d3 e0                	shl    eax,cl
c00013bd:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c00013c4:	39 f8                	cmp    eax,edi
c00013c6:	77 04                	ja     c00013cc <dlmalloc+0x291>
c00013c8:	85 c0                	test   eax,eax
c00013ca:	75 26                	jne    c00013f2 <dlmalloc+0x2b7>
c00013cc:	43                   	inc    ebx
c00013cd:	83 fb 02             	cmp    ebx,0x2
c00013d0:	0f 87 a6 00 00 00    	ja     c000147c <dlmalloc+0x341>
c00013d6:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c00013dd:	85 ff                	test   edi,edi
c00013df:	74 eb                	je     c00013cc <dlmalloc+0x291>
c00013e1:	89 d8                	mov    eax,ebx
c00013e3:	c1 e0 06             	shl    eax,0x6
c00013e6:	8d 14 85 6c ea 02 c0 	lea    edx,[eax*4-0x3ffd1594]
c00013ed:	b8 01 00 00 00       	mov    eax,0x1
c00013f2:	85 f8                	test   eax,edi
c00013f4:	75 07                	jne    c00013fd <dlmalloc+0x2c2>
c00013f6:	83 c2 08             	add    edx,0x8
c00013f9:	01 c0                	add    eax,eax
c00013fb:	eb f5                	jmp    c00013f2 <dlmalloc+0x2b7>
c00013fd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001400:	39 ca                	cmp    edx,ecx
c0001402:	75 14                	jne    c0001418 <dlmalloc+0x2dd>
c0001404:	89 c1                	mov    ecx,eax
c0001406:	83 c2 08             	add    edx,0x8
c0001409:	f7 d1                	not    ecx
c000140b:	01 c0                	add    eax,eax
c000140d:	21 cf                	and    edi,ecx
c000140f:	89 3c 9d 74 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd128c],edi
c0001416:	eb ac                	jmp    c00013c4 <dlmalloc+0x289>
c0001418:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000141b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000141e:	83 e0 fc             	and    eax,0xfffffffc
c0001421:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001424:	89 c3                	mov    ebx,eax
c0001426:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001429:	29 f3                	sub    ebx,esi
c000142b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000142e:	83 fb 0f             	cmp    ebx,0xf
c0001431:	8d 41 08             	lea    eax,[ecx+0x8]
c0001434:	77 09                	ja     c000143f <dlmalloc+0x304>
c0001436:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000143a:	e9 82 00 00 00       	jmp    c00014c1 <dlmalloc+0x386>
c000143f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001442:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001448:	89 3d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edi
c000144e:	89 3d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,edi
c0001454:	c7 47 08 74 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea74
c000145b:	c7 47 0c 74 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea74
c0001462:	77 06                	ja     c000146a <dlmalloc+0x32f>
c0001464:	89 3d 70 ea 02 c0    	mov    DWORD PTR ds:0xc002ea70,edi
c000146a:	83 ce 01             	or     esi,0x1
c000146d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001470:	89 d9                	mov    ecx,ebx
c0001472:	83 c9 01             	or     ecx,0x1
c0001475:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001478:	89 1a                	mov    DWORD PTR [edx],ebx
c000147a:	eb 45                	jmp    c00014c1 <dlmalloc+0x386>
c000147c:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001481:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001484:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001487:	83 e2 fc             	and    edx,0xfffffffc
c000148a:	39 d1                	cmp    ecx,edx
c000148c:	77 1e                	ja     c00014ac <dlmalloc+0x371>
c000148e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001491:	89 f3                	mov    ebx,esi
c0001493:	89 0d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,ecx
c0001499:	83 cb 01             	or     ebx,0x1
c000149c:	29 f2                	sub    edx,esi
c000149e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014a1:	83 ca 01             	or     edx,0x1
c00014a4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014a7:	e9 2d fd ff ff       	jmp    c00011d9 <dlmalloc+0x9e>
c00014ac:	83 c4 1c             	add    esp,0x1c
c00014af:	89 f0                	mov    eax,esi
c00014b1:	5b                   	pop    ebx
c00014b2:	ba 40 ea 02 c0       	mov    edx,0xc002ea40
c00014b7:	5e                   	pop    esi
c00014b8:	5f                   	pop    edi
c00014b9:	5d                   	pop    ebp
c00014ba:	e9 16 fa ff ff       	jmp    c0000ed5 <sYSMALLOc>
c00014bf:	31 c0                	xor    eax,eax
c00014c1:	83 c4 1c             	add    esp,0x1c
c00014c4:	5b                   	pop    ebx
c00014c5:	5e                   	pop    esi
c00014c6:	5f                   	pop    edi
c00014c7:	5d                   	pop    ebp
c00014c8:	c3                   	ret    

c00014c9 <iALLOc>:
c00014c9:	55                   	push   ebp
c00014ca:	89 c5                	mov    ebp,eax
c00014cc:	57                   	push   edi
c00014cd:	56                   	push   esi
c00014ce:	53                   	push   ebx
c00014cf:	83 ec 2c             	sub    esp,0x2c
c00014d2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014d6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014de:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c00014e5:	75 12                	jne    c00014f9 <iALLOc+0x30>
c00014e7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014eb:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00014f0:	e8 04 f8 ff ff       	call   c0000cf9 <malloc_consolidate>
c00014f5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014fe:	74 12                	je     c0001512 <iALLOc+0x49>
c0001500:	85 ed                	test   ebp,ebp
c0001502:	0f 84 64 01 00 00    	je     c000166c <iALLOc+0x1a3>
c0001508:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001510:	eb 33                	jmp    c0001545 <iALLOc+0x7c>
c0001512:	85 ed                	test   ebp,ebp
c0001514:	75 14                	jne    c000152a <iALLOc+0x61>
c0001516:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000151e:	83 c4 2c             	add    esp,0x2c
c0001521:	5b                   	pop    ebx
c0001522:	5e                   	pop    esi
c0001523:	5f                   	pop    edi
c0001524:	5d                   	pop    ebp
c0001525:	e9 11 fc ff ff       	jmp    c000113b <dlmalloc>
c000152a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001531:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001539:	83 f8 0f             	cmp    eax,0xf
c000153c:	76 07                	jbe    c0001545 <iALLOc+0x7c>
c000153e:	83 e0 f8             	and    eax,0xfffffff8
c0001541:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001545:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000154a:	75 09                	jne    c0001555 <iALLOc+0x8c>
c000154c:	89 d0                	mov    eax,edx
c000154e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001551:	31 f6                	xor    esi,esi
c0001553:	eb 3b                	jmp    c0001590 <iALLOc+0xc7>
c0001555:	8b 02                	mov    eax,DWORD PTR [edx]
c0001557:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000155f:	83 c0 0b             	add    eax,0xb
c0001562:	83 f8 0f             	cmp    eax,0xf
c0001565:	76 07                	jbe    c000156e <iALLOc+0xa5>
c0001567:	83 e0 f8             	and    eax,0xfffffff8
c000156a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000156e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001572:	0f af f5             	imul   esi,ebp
c0001575:	eb 25                	jmp    c000159c <iALLOc+0xd3>
c0001577:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001579:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000157c:	bb 10 00 00 00       	mov    ebx,0x10
c0001581:	83 f9 0f             	cmp    ecx,0xf
c0001584:	76 05                	jbe    c000158b <iALLOc+0xc2>
c0001586:	83 e1 f8             	and    ecx,0xfffffff8
c0001589:	89 cb                	mov    ebx,ecx
c000158b:	01 de                	add    esi,ebx
c000158d:	83 c0 04             	add    eax,0x4
c0001590:	39 c7                	cmp    edi,eax
c0001592:	75 e3                	jne    c0001577 <iALLOc+0xae>
c0001594:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000159c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015a0:	8b 1d 94 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed94
c00015a6:	83 ec 0c             	sub    esp,0xc
c00015a9:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c00015b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015b7:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015bb:	50                   	push   eax
c00015bc:	e8 7a fb ff ff       	call   c000113b <dlmalloc>
c00015c1:	83 c4 10             	add    esp,0x10
c00015c4:	89 1d 94 ed 02 c0    	mov    DWORD PTR ds:0xc002ed94,ebx
c00015ca:	85 c0                	test   eax,eax
c00015cc:	0f 84 92 00 00 00    	je     c0001664 <iALLOc+0x19b>
c00015d2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015d5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015d8:	83 e3 fc             	and    ebx,0xfffffffc
c00015db:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015df:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015e4:	74 1e                	je     c0001604 <iALLOc+0x13b>
c00015e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ea:	89 d9                	mov    ecx,ebx
c00015ec:	52                   	push   edx
c00015ed:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015f1:	83 e9 04             	sub    ecx,0x4
c00015f4:	51                   	push   ecx
c00015f5:	6a 00                	push   0x0
c00015f7:	50                   	push   eax
c00015f8:	e8 9f f1 ff ff       	call   c000079c <memset>
c00015fd:	83 c4 10             	add    esp,0x10
c0001600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001604:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001609:	75 14                	jne    c000161f <iALLOc+0x156>
c000160b:	8d 04 37             	lea    eax,[edi+esi*1]
c000160e:	29 f3                	sub    ebx,esi
c0001610:	8d 48 08             	lea    ecx,[eax+0x8]
c0001613:	83 cb 01             	or     ebx,0x1
c0001616:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000161a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000161d:	89 f3                	mov    ebx,esi
c000161f:	31 c0                	xor    eax,eax
c0001621:	4d                   	dec    ebp
c0001622:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001625:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001629:	39 c5                	cmp    ebp,eax
c000162b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000162e:	74 2c                	je     c000165c <iALLOc+0x193>
c0001630:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001634:	85 c9                	test   ecx,ecx
c0001636:	75 15                	jne    c000164d <iALLOc+0x184>
c0001638:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000163b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000163e:	b9 10 00 00 00       	mov    ecx,0x10
c0001643:	83 fe 0f             	cmp    esi,0xf
c0001646:	76 05                	jbe    c000164d <iALLOc+0x184>
c0001648:	83 e6 f8             	and    esi,0xfffffff8
c000164b:	89 f1                	mov    ecx,esi
c000164d:	89 ce                	mov    esi,ecx
c000164f:	29 cb                	sub    ebx,ecx
c0001651:	83 ce 01             	or     esi,0x1
c0001654:	40                   	inc    eax
c0001655:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001658:	01 cf                	add    edi,ecx
c000165a:	eb c6                	jmp    c0001622 <iALLOc+0x159>
c000165c:	83 cb 01             	or     ebx,0x1
c000165f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001662:	eb 08                	jmp    c000166c <iALLOc+0x1a3>
c0001664:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000166c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001670:	83 c4 2c             	add    esp,0x2c
c0001673:	5b                   	pop    ebx
c0001674:	5e                   	pop    esi
c0001675:	5f                   	pop    edi
c0001676:	5d                   	pop    ebp
c0001677:	c3                   	ret    

c0001678 <dlrealloc>:
c0001678:	55                   	push   ebp
c0001679:	57                   	push   edi
c000167a:	56                   	push   esi
c000167b:	53                   	push   ebx
c000167c:	83 ec 1c             	sub    esp,0x1c
c000167f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001683:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001687:	85 db                	test   ebx,ebx
c0001689:	75 10                	jne    c000169b <dlrealloc+0x23>
c000168b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000168f:	83 c4 1c             	add    esp,0x1c
c0001692:	5b                   	pop    ebx
c0001693:	5e                   	pop    esi
c0001694:	5f                   	pop    edi
c0001695:	5d                   	pop    ebp
c0001696:	e9 a0 fa ff ff       	jmp    c000113b <dlmalloc>
c000169b:	83 f8 df             	cmp    eax,0xffffffdf
c000169e:	76 07                	jbe    c00016a7 <dlrealloc+0x2f>
c00016a0:	31 db                	xor    ebx,ebx
c00016a2:	e9 7c 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c00016a7:	83 c0 0b             	add    eax,0xb
c00016aa:	bf 10 00 00 00       	mov    edi,0x10
c00016af:	83 f8 0f             	cmp    eax,0xf
c00016b2:	76 05                	jbe    c00016b9 <dlrealloc+0x41>
c00016b4:	83 e0 f8             	and    eax,0xfffffff8
c00016b7:	89 c7                	mov    edi,eax
c00016b9:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016bc:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016bf:	89 c6                	mov    esi,eax
c00016c1:	83 e6 fc             	and    esi,0xfffffffc
c00016c4:	a8 02                	test   al,0x2
c00016c6:	75 d8                	jne    c00016a0 <dlrealloc+0x28>
c00016c8:	39 f7                	cmp    edi,esi
c00016ca:	0f 86 15 01 00 00    	jbe    c00017e5 <dlrealloc+0x16d>
c00016d0:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016d7:	39 15 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,edx
c00016dd:	75 33                	jne    c0001712 <dlrealloc+0x9a>
c00016df:	83 e1 fc             	and    ecx,0xfffffffc
c00016e2:	01 f1                	add    ecx,esi
c00016e4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016e8:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016eb:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016ef:	77 49                	ja     c000173a <dlrealloc+0xc2>
c00016f1:	01 fd                	add    ebp,edi
c00016f3:	83 e0 01             	and    eax,0x1
c00016f6:	09 f8                	or     eax,edi
c00016f8:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016fb:	89 2d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,ebp
c0001701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001705:	29 f8                	sub    eax,edi
c0001707:	83 c8 01             	or     eax,0x1
c000170a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000170d:	e9 11 01 00 00       	jmp    c0001823 <dlrealloc+0x1ab>
c0001712:	89 c8                	mov    eax,ecx
c0001714:	83 e0 fe             	and    eax,0xfffffffe
c0001717:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000171c:	75 1c                	jne    c000173a <dlrealloc+0xc2>
c000171e:	83 e1 fc             	and    ecx,0xfffffffc
c0001721:	01 f1                	add    ecx,esi
c0001723:	39 cf                	cmp    edi,ecx
c0001725:	77 13                	ja     c000173a <dlrealloc+0xc2>
c0001727:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c000172a:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000172d:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001730:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001733:	89 ce                	mov    esi,ecx
c0001735:	e9 ab 00 00 00       	jmp    c00017e5 <dlrealloc+0x16d>
c000173a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000173e:	8d 47 f9             	lea    eax,[edi-0x7]
c0001741:	83 ec 0c             	sub    esp,0xc
c0001744:	50                   	push   eax
c0001745:	e8 f1 f9 ff ff       	call   c000113b <dlmalloc>
c000174a:	83 c4 10             	add    esp,0x10
c000174d:	89 c1                	mov    ecx,eax
c000174f:	85 c0                	test   eax,eax
c0001751:	0f 84 49 ff ff ff    	je     c00016a0 <dlrealloc+0x28>
c0001757:	8d 40 f8             	lea    eax,[eax-0x8]
c000175a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000175e:	39 c2                	cmp    edx,eax
c0001760:	75 0a                	jne    c000176c <dlrealloc+0xf4>
c0001762:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001765:	83 e0 fc             	and    eax,0xfffffffc
c0001768:	01 c6                	add    esi,eax
c000176a:	eb 79                	jmp    c00017e5 <dlrealloc+0x16d>
c000176c:	83 ee 04             	sub    esi,0x4
c000176f:	83 fe 27             	cmp    esi,0x27
c0001772:	76 16                	jbe    c000178a <dlrealloc+0x112>
c0001774:	50                   	push   eax
c0001775:	56                   	push   esi
c0001776:	53                   	push   ebx
c0001777:	51                   	push   ecx
c0001778:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000177c:	e8 e7 ef ff ff       	call   c0000768 <memcpy>
c0001781:	83 c4 10             	add    esp,0x10
c0001784:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001788:	eb 43                	jmp    c00017cd <dlrealloc+0x155>
c000178a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000178c:	83 fe 13             	cmp    esi,0x13
c000178f:	89 01                	mov    DWORD PTR [ecx],eax
c0001791:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001794:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001797:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000179a:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000179d:	76 2e                	jbe    c00017cd <dlrealloc+0x155>
c000179f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017a2:	83 fe 1b             	cmp    esi,0x1b
c00017a5:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017a8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017ab:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017ae:	76 1d                	jbe    c00017cd <dlrealloc+0x155>
c00017b0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017b3:	83 fe 23             	cmp    esi,0x23
c00017b6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017b9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017bc:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017bf:	76 0c                	jbe    c00017cd <dlrealloc+0x155>
c00017c1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017c4:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017ca:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017d1:	83 ec 0c             	sub    esp,0xc
c00017d4:	53                   	push   ebx
c00017d5:	e8 06 f6 ff ff       	call   c0000de0 <dlfree>
c00017da:	83 c4 10             	add    esp,0x10
c00017dd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017e1:	89 cb                	mov    ebx,ecx
c00017e3:	eb 3e                	jmp    c0001823 <dlrealloc+0x1ab>
c00017e5:	89 f2                	mov    edx,esi
c00017e7:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017ea:	29 fa                	sub    edx,edi
c00017ec:	83 e1 01             	and    ecx,0x1
c00017ef:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017f3:	83 fa 0f             	cmp    edx,0xf
c00017f6:	77 0b                	ja     c0001803 <dlrealloc+0x18b>
c00017f8:	09 ce                	or     esi,ecx
c00017fa:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017fd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001801:	eb 20                	jmp    c0001823 <dlrealloc+0x1ab>
c0001803:	01 fd                	add    ebp,edi
c0001805:	83 ec 0c             	sub    esp,0xc
c0001808:	09 cf                	or     edi,ecx
c000180a:	83 ca 01             	or     edx,0x1
c000180d:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001810:	83 c5 08             	add    ebp,0x8
c0001813:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0001816:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000181a:	55                   	push   ebp
c000181b:	e8 c0 f5 ff ff       	call   c0000de0 <dlfree>
c0001820:	83 c4 10             	add    esp,0x10
c0001823:	83 c4 1c             	add    esp,0x1c
c0001826:	89 d8                	mov    eax,ebx
c0001828:	5b                   	pop    ebx
c0001829:	5e                   	pop    esi
c000182a:	5f                   	pop    edi
c000182b:	5d                   	pop    ebp
c000182c:	c3                   	ret    

c000182d <dlmemalign>:
c000182d:	55                   	push   ebp
c000182e:	57                   	push   edi
c000182f:	56                   	push   esi
c0001830:	53                   	push   ebx
c0001831:	83 ec 0c             	sub    esp,0xc
c0001834:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001838:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000183c:	83 fa 08             	cmp    edx,0x8
c000183f:	77 10                	ja     c0001851 <dlmemalign+0x24>
c0001841:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001845:	83 c4 0c             	add    esp,0xc
c0001848:	5b                   	pop    ebx
c0001849:	5e                   	pop    esi
c000184a:	5f                   	pop    edi
c000184b:	5d                   	pop    ebp
c000184c:	e9 ea f8 ff ff       	jmp    c000113b <dlmalloc>
c0001851:	bf 10 00 00 00       	mov    edi,0x10
c0001856:	83 fa 0f             	cmp    edx,0xf
c0001859:	76 13                	jbe    c000186e <dlmemalign+0x41>
c000185b:	8d 4a ff             	lea    ecx,[edx-0x1]
c000185e:	85 d1                	test   ecx,edx
c0001860:	75 04                	jne    c0001866 <dlmemalign+0x39>
c0001862:	89 d7                	mov    edi,edx
c0001864:	eb 08                	jmp    c000186e <dlmemalign+0x41>
c0001866:	39 d7                	cmp    edi,edx
c0001868:	73 04                	jae    c000186e <dlmemalign+0x41>
c000186a:	01 ff                	add    edi,edi
c000186c:	eb f8                	jmp    c0001866 <dlmemalign+0x39>
c000186e:	83 f8 df             	cmp    eax,0xffffffdf
c0001871:	76 07                	jbe    c000187a <dlmemalign+0x4d>
c0001873:	31 c0                	xor    eax,eax
c0001875:	e9 ce 00 00 00       	jmp    c0001948 <dlmemalign+0x11b>
c000187a:	83 c0 0b             	add    eax,0xb
c000187d:	bd 10 00 00 00       	mov    ebp,0x10
c0001882:	83 f8 0f             	cmp    eax,0xf
c0001885:	76 05                	jbe    c000188c <dlmemalign+0x5f>
c0001887:	83 e0 f8             	and    eax,0xfffffff8
c000188a:	89 c5                	mov    ebp,eax
c000188c:	83 ec 0c             	sub    esp,0xc
c000188f:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001893:	50                   	push   eax
c0001894:	e8 a2 f8 ff ff       	call   c000113b <dlmalloc>
c0001899:	83 c4 10             	add    esp,0x10
c000189c:	89 c1                	mov    ecx,eax
c000189e:	85 c0                	test   eax,eax
c00018a0:	74 d1                	je     c0001873 <dlmemalign+0x46>
c00018a2:	31 d2                	xor    edx,edx
c00018a4:	8d 70 f8             	lea    esi,[eax-0x8]
c00018a7:	f7 f7                	div    edi
c00018a9:	85 d2                	test   edx,edx
c00018ab:	74 62                	je     c000190f <dlmemalign+0xe2>
c00018ad:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018b1:	89 f8                	mov    eax,edi
c00018b3:	f7 d8                	neg    eax
c00018b5:	21 c3                	and    ebx,eax
c00018b7:	83 eb 08             	sub    ebx,0x8
c00018ba:	89 d8                	mov    eax,ebx
c00018bc:	29 f0                	sub    eax,esi
c00018be:	83 f8 0f             	cmp    eax,0xf
c00018c1:	77 02                	ja     c00018c5 <dlmemalign+0x98>
c00018c3:	01 fb                	add    ebx,edi
c00018c5:	89 d8                	mov    eax,ebx
c00018c7:	29 f0                	sub    eax,esi
c00018c9:	89 c6                	mov    esi,eax
c00018cb:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018ce:	89 c2                	mov    edx,eax
c00018d0:	83 e2 fc             	and    edx,0xfffffffc
c00018d3:	29 f2                	sub    edx,esi
c00018d5:	a8 02                	test   al,0x2
c00018d7:	74 10                	je     c00018e9 <dlmemalign+0xbc>
c00018d9:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018dc:	83 ca 02             	or     edx,0x2
c00018df:	8d 43 08             	lea    eax,[ebx+0x8]
c00018e2:	89 33                	mov    DWORD PTR [ebx],esi
c00018e4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018e7:	eb 5f                	jmp    c0001948 <dlmemalign+0x11b>
c00018e9:	83 ec 0c             	sub    esp,0xc
c00018ec:	89 d0                	mov    eax,edx
c00018ee:	83 c8 01             	or     eax,0x1
c00018f1:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018f4:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018f9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018fc:	83 e0 01             	and    eax,0x1
c00018ff:	09 f0                	or     eax,esi
c0001901:	89 de                	mov    esi,ebx
c0001903:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001906:	51                   	push   ecx
c0001907:	e8 d4 f4 ff ff       	call   c0000de0 <dlfree>
c000190c:	83 c4 10             	add    esp,0x10
c000190f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001912:	a8 02                	test   al,0x2
c0001914:	75 2f                	jne    c0001945 <dlmemalign+0x118>
c0001916:	83 e0 fc             	and    eax,0xfffffffc
c0001919:	8d 55 10             	lea    edx,[ebp+0x10]
c000191c:	39 c2                	cmp    edx,eax
c000191e:	73 25                	jae    c0001945 <dlmemalign+0x118>
c0001920:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001923:	83 ec 0c             	sub    esp,0xc
c0001926:	29 e8                	sub    eax,ebp
c0001928:	83 c2 08             	add    edx,0x8
c000192b:	83 c8 01             	or     eax,0x1
c000192e:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001931:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001934:	83 e0 01             	and    eax,0x1
c0001937:	09 c5                	or     ebp,eax
c0001939:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000193c:	52                   	push   edx
c000193d:	e8 9e f4 ff ff       	call   c0000de0 <dlfree>
c0001942:	83 c4 10             	add    esp,0x10
c0001945:	8d 46 08             	lea    eax,[esi+0x8]
c0001948:	83 c4 0c             	add    esp,0xc
c000194b:	5b                   	pop    ebx
c000194c:	5e                   	pop    esi
c000194d:	5f                   	pop    edi
c000194e:	5d                   	pop    ebp
c000194f:	c3                   	ret    

c0001950 <dlcalloc>:
c0001950:	53                   	push   ebx
c0001951:	83 ec 14             	sub    esp,0x14
c0001954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001958:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000195d:	50                   	push   eax
c000195e:	e8 d8 f7 ff ff       	call   c000113b <dlmalloc>
c0001963:	83 c4 10             	add    esp,0x10
c0001966:	89 c3                	mov    ebx,eax
c0001968:	85 c0                	test   eax,eax
c000196a:	74 77                	je     c00019e3 <dlcalloc+0x93>
c000196c:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000196f:	89 d0                	mov    eax,edx
c0001971:	83 e0 fc             	and    eax,0xfffffffc
c0001974:	80 e2 02             	and    dl,0x2
c0001977:	75 5a                	jne    c00019d3 <dlcalloc+0x83>
c0001979:	83 e8 04             	sub    eax,0x4
c000197c:	83 f8 27             	cmp    eax,0x27
c000197f:	76 03                	jbe    c0001984 <dlcalloc+0x34>
c0001981:	51                   	push   ecx
c0001982:	eb 53                	jmp    c00019d7 <dlcalloc+0x87>
c0001984:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000198a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001991:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001998:	83 f8 13             	cmp    eax,0x13
c000199b:	76 46                	jbe    c00019e3 <dlcalloc+0x93>
c000199d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019a4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019ab:	83 f8 1b             	cmp    eax,0x1b
c00019ae:	76 33                	jbe    c00019e3 <dlcalloc+0x93>
c00019b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019b7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019be:	83 f8 23             	cmp    eax,0x23
c00019c1:	76 20                	jbe    c00019e3 <dlcalloc+0x93>
c00019c3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019ca:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019d1:	eb 10                	jmp    c00019e3 <dlcalloc+0x93>
c00019d3:	83 e8 08             	sub    eax,0x8
c00019d6:	52                   	push   edx
c00019d7:	50                   	push   eax
c00019d8:	6a 00                	push   0x0
c00019da:	53                   	push   ebx
c00019db:	e8 bc ed ff ff       	call   c000079c <memset>
c00019e0:	83 c4 10             	add    esp,0x10
c00019e3:	89 d8                	mov    eax,ebx
c00019e5:	83 c4 08             	add    esp,0x8
c00019e8:	5b                   	pop    ebx
c00019e9:	c3                   	ret    

c00019ea <dlcfree>:
c00019ea:	e9 f1 f3 ff ff       	jmp    c0000de0 <dlfree>

c00019ef <dlindependent_calloc>:
c00019ef:	83 ec 28             	sub    esp,0x28
c00019f2:	b9 03 00 00 00       	mov    ecx,0x3
c00019f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019ff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a03:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a0b:	e8 b9 fa ff ff       	call   c00014c9 <iALLOc>
c0001a10:	83 c4 2c             	add    esp,0x2c
c0001a13:	c3                   	ret    

c0001a14 <dlindependent_comalloc>:
c0001a14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a1c:	31 c9                	xor    ecx,ecx
c0001a1e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a26:	e9 9e fa ff ff       	jmp    c00014c9 <iALLOc>

c0001a2b <dlvalloc>:
c0001a2b:	83 ec 0c             	sub    esp,0xc
c0001a2e:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c0001a35:	75 0a                	jne    c0001a41 <dlvalloc+0x16>
c0001a37:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a3c:	e8 b8 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a41:	50                   	push   eax
c0001a42:	50                   	push   eax
c0001a43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a47:	ff 35 9c ed 02 c0    	push   DWORD PTR ds:0xc002ed9c
c0001a4d:	e8 db fd ff ff       	call   c000182d <dlmemalign>
c0001a52:	83 c4 1c             	add    esp,0x1c
c0001a55:	c3                   	ret    

c0001a56 <dlpvalloc>:
c0001a56:	83 ec 0c             	sub    esp,0xc
c0001a59:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c0001a60:	75 0a                	jne    c0001a6c <dlpvalloc+0x16>
c0001a62:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a67:	e8 8d f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a6c:	a1 9c ed 02 c0       	mov    eax,ds:0xc002ed9c
c0001a71:	89 c1                	mov    ecx,eax
c0001a73:	52                   	push   edx
c0001a74:	f7 d9                	neg    ecx
c0001a76:	52                   	push   edx
c0001a77:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a7b:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a7f:	21 ca                	and    edx,ecx
c0001a81:	52                   	push   edx
c0001a82:	50                   	push   eax
c0001a83:	e8 a5 fd ff ff       	call   c000182d <dlmemalign>
c0001a88:	83 c4 1c             	add    esp,0x1c
c0001a8b:	c3                   	ret    

c0001a8c <dlmalloc_trim>:
c0001a8c:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a91:	e8 63 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001a96:	31 c0                	xor    eax,eax
c0001a98:	c3                   	ret    

c0001a99 <dlmalloc_usable_size>:
c0001a99:	53                   	push   ebx
c0001a9a:	31 c0                	xor    eax,eax
c0001a9c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001aa0:	85 c9                	test   ecx,ecx
c0001aa2:	74 24                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001aa4:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001aa7:	f6 c2 02             	test   dl,0x2
c0001aaa:	74 08                	je     c0001ab4 <dlmalloc_usable_size+0x1b>
c0001aac:	83 e2 fc             	and    edx,0xfffffffc
c0001aaf:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ab2:	eb 14                	jmp    c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ab4:	89 d3                	mov    ebx,edx
c0001ab6:	31 c0                	xor    eax,eax
c0001ab8:	83 e3 fe             	and    ebx,0xfffffffe
c0001abb:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ac0:	74 06                	je     c0001ac8 <dlmalloc_usable_size+0x2f>
c0001ac2:	83 e2 fc             	and    edx,0xfffffffc
c0001ac5:	8d 42 fc             	lea    eax,[edx-0x4]
c0001ac8:	5b                   	pop    ebx
c0001ac9:	c3                   	ret    

c0001aca <dlmallinfo>:
c0001aca:	55                   	push   ebp
c0001acb:	57                   	push   edi
c0001acc:	56                   	push   esi
c0001acd:	53                   	push   ebx
c0001ace:	83 ec 08             	sub    esp,0x8
c0001ad1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ad5:	83 3d 6c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea6c,0x0
c0001adc:	75 0a                	jne    c0001ae8 <dlmallinfo+0x1e>
c0001ade:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001ae3:	e8 11 f2 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001ae8:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001aed:	31 ed                	xor    ebp,ebp
c0001aef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001af2:	31 c9                	xor    ecx,ecx
c0001af4:	83 e0 fc             	and    eax,0xfffffffc
c0001af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001afb:	31 c0                	xor    eax,eax
c0001afd:	8b 14 85 44 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15bc]
c0001b04:	85 d2                	test   edx,edx
c0001b06:	74 0e                	je     c0001b16 <dlmallinfo+0x4c>
c0001b08:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b0b:	45                   	inc    ebp
c0001b0c:	83 e6 fc             	and    esi,0xfffffffc
c0001b0f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b12:	01 f1                	add    ecx,esi
c0001b14:	eb ee                	jmp    c0001b04 <dlmallinfo+0x3a>
c0001b16:	40                   	inc    eax
c0001b17:	83 f8 0a             	cmp    eax,0xa
c0001b1a:	75 e1                	jne    c0001afd <dlmallinfo+0x33>
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b27:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b2a:	b8 74 ea 02 c0       	mov    eax,0xc002ea74
c0001b2f:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b32:	39 f0                	cmp    eax,esi
c0001b34:	74 10                	je     c0001b46 <dlmallinfo+0x7c>
c0001b36:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b39:	ff 04 24             	inc    DWORD PTR [esp]
c0001b3c:	83 e7 fc             	and    edi,0xfffffffc
c0001b3f:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b42:	01 fa                	add    edx,edi
c0001b44:	eb ec                	jmp    c0001b32 <dlmallinfo+0x68>
c0001b46:	83 c0 08             	add    eax,0x8
c0001b49:	3d 6c ed 02 c0       	cmp    eax,0xc002ed6c
c0001b4e:	75 df                	jne    c0001b2f <dlmallinfo+0x65>
c0001b50:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b53:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b56:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b59:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c0001b5e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b61:	89 03                	mov    DWORD PTR [ebx],eax
c0001b63:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b66:	8b 35 90 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed90
c0001b6c:	29 d0                	sub    eax,edx
c0001b6e:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b71:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b74:	8b 35 a4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002eda4
c0001b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b7e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b81:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b84:	8b 35 b4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb4
c0001b8a:	89 d8                	mov    eax,ebx
c0001b8c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b8f:	83 c4 08             	add    esp,0x8
c0001b92:	5b                   	pop    ebx
c0001b93:	5e                   	pop    esi
c0001b94:	5f                   	pop    edi
c0001b95:	5d                   	pop    ebp
c0001b96:	c2 04 00             	ret    0x4

c0001b99 <dlmalloc_stats>:
c0001b99:	83 ec 30             	sub    esp,0x30
c0001b9c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001ba0:	50                   	push   eax
c0001ba1:	e8 24 ff ff ff       	call   c0001aca <dlmallinfo>
c0001ba6:	83 c4 30             	add    esp,0x30
c0001ba9:	c3                   	ret    

c0001baa <dlmallopt>:
c0001baa:	56                   	push   esi
c0001bab:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001bb0:	53                   	push   ebx
c0001bb1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bb9:	e8 3b f1 ff ff       	call   c0000cf9 <malloc_consolidate>
c0001bbe:	8d 46 04             	lea    eax,[esi+0x4]
c0001bc1:	83 f8 05             	cmp    eax,0x5
c0001bc4:	77 67                	ja     c0001c2d <dlmallopt+0x83>
c0001bc6:	ff 24 85 24 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63dc]
c0001bcd:	83 fb 50             	cmp    ebx,0x50
c0001bd0:	77 5b                	ja     c0001c2d <dlmallopt+0x83>
c0001bd2:	ba 08 00 00 00       	mov    edx,0x8
c0001bd7:	85 db                	test   ebx,ebx
c0001bd9:	74 12                	je     c0001bed <dlmallopt+0x43>
c0001bdb:	83 c3 0b             	add    ebx,0xb
c0001bde:	ba 10 00 00 00       	mov    edx,0x10
c0001be3:	83 fb 0f             	cmp    ebx,0xf
c0001be6:	76 05                	jbe    c0001bed <dlmallopt+0x43>
c0001be8:	89 da                	mov    edx,ebx
c0001bea:	83 e2 f8             	and    edx,0xfffffff8
c0001bed:	a1 40 ea 02 c0       	mov    eax,ds:0xc002ea40
c0001bf2:	83 e0 03             	and    eax,0x3
c0001bf5:	09 d0                	or     eax,edx
c0001bf7:	a3 40 ea 02 c0       	mov    ds:0xc002ea40,eax
c0001bfc:	eb 31                	jmp    c0001c2f <dlmallopt+0x85>
c0001bfe:	89 1d 84 ed 02 c0    	mov    DWORD PTR ds:0xc002ed84,ebx
c0001c04:	eb 06                	jmp    c0001c0c <dlmallopt+0x62>
c0001c06:	89 1d 88 ed 02 c0    	mov    DWORD PTR ds:0xc002ed88,ebx
c0001c0c:	be 01 00 00 00       	mov    esi,0x1
c0001c11:	eb 1c                	jmp    c0001c2f <dlmallopt+0x85>
c0001c13:	89 1d 8c ed 02 c0    	mov    DWORD PTR ds:0xc002ed8c,ebx
c0001c19:	eb f1                	jmp    c0001c0c <dlmallopt+0x62>
c0001c1b:	31 f6                	xor    esi,esi
c0001c1d:	85 db                	test   ebx,ebx
c0001c1f:	75 0e                	jne    c0001c2f <dlmallopt+0x85>
c0001c21:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c0001c2b:	eb df                	jmp    c0001c0c <dlmallopt+0x62>
c0001c2d:	31 f6                	xor    esi,esi
c0001c2f:	89 f0                	mov    eax,esi
c0001c31:	5b                   	pop    ebx
c0001c32:	5e                   	pop    esi
c0001c33:	c3                   	ret    

c0001c34 <disk_status>:
c0001c34:	31 c0                	xor    eax,eax
c0001c36:	c3                   	ret    

c0001c37 <disk_initialize>:
c0001c37:	31 c0                	xor    eax,eax
c0001c39:	c3                   	ret    

c0001c3a <disk_read>:
c0001c3a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3f:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c47:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4b:	e9 98 f8 01 00       	jmp    c00214e8 <fatWrapperReadDisk>

c0001c50 <disk_write>:
c0001c50:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c55:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c61:	e9 c9 f8 01 00       	jmp    c002152f <fatWrapperWriteDisk>

c0001c66 <disk_ioctl>:
c0001c66:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c6f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c74:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c80:	e9 f1 f8 01 00       	jmp    c0021576 <fatWrapperIoctl>

c0001c85 <ld_word>:
c0001c85:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c8c:	c1 e2 08             	shl    edx,0x8
c0001c8f:	09 d0                	or     eax,edx
c0001c91:	c3                   	ret    

c0001c92 <ld_dword>:
c0001c92:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c96:	89 d1                	mov    ecx,edx
c0001c98:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c9c:	c1 e1 08             	shl    ecx,0x8
c0001c9f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ca2:	09 ca                	or     edx,ecx
c0001ca4:	c1 e2 08             	shl    edx,0x8
c0001ca7:	09 d0                	or     eax,edx
c0001ca9:	c3                   	ret    

c0001caa <ld_qword>:
c0001caa:	57                   	push   edi
c0001cab:	56                   	push   esi
c0001cac:	53                   	push   ebx
c0001cad:	31 db                	xor    ebx,ebx
c0001caf:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cb2:	89 df                	mov    edi,ebx
c0001cb4:	89 ce                	mov    esi,ecx
c0001cb6:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001cba:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cbe:	c1 e6 08             	shl    esi,0x8
c0001cc1:	09 f2                	or     edx,esi
c0001cc3:	89 d6                	mov    esi,edx
c0001cc5:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cc9:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ccd:	c1 e6 08             	shl    esi,0x8
c0001cd0:	09 f2                	or     edx,esi
c0001cd2:	89 d6                	mov    esi,edx
c0001cd4:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cd8:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cdc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cdf:	c1 e6 08             	shl    esi,0x8
c0001ce2:	89 fb                	mov    ebx,edi
c0001ce4:	09 f2                	or     edx,esi
c0001ce6:	89 d1                	mov    ecx,edx
c0001ce8:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cec:	c1 e1 08             	shl    ecx,0x8
c0001cef:	89 da                	mov    edx,ebx
c0001cf1:	09 c8                	or     eax,ecx
c0001cf3:	5b                   	pop    ebx
c0001cf4:	5e                   	pop    esi
c0001cf5:	5f                   	pop    edi
c0001cf6:	c3                   	ret    

c0001cf7 <st_word>:
c0001cf7:	66 89 10             	mov    WORD PTR [eax],dx
c0001cfa:	c3                   	ret    

c0001cfb <st_dword>:
c0001cfb:	89 10                	mov    DWORD PTR [eax],edx
c0001cfd:	c3                   	ret    

c0001cfe <st_qword>:
c0001cfe:	89 10                	mov    DWORD PTR [eax],edx
c0001d00:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d03:	c3                   	ret    

c0001d04 <mem_cpy>:
c0001d04:	85 c9                	test   ecx,ecx
c0001d06:	74 10                	je     c0001d18 <mem_cpy+0x14>
c0001d08:	57                   	push   edi
c0001d09:	01 c1                	add    ecx,eax
c0001d0b:	56                   	push   esi
c0001d0c:	89 c7                	mov    edi,eax
c0001d0e:	89 d6                	mov    esi,edx
c0001d10:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d11:	39 f9                	cmp    ecx,edi
c0001d13:	75 fb                	jne    c0001d10 <mem_cpy+0xc>
c0001d15:	5e                   	pop    esi
c0001d16:	5f                   	pop    edi
c0001d17:	c3                   	ret    
c0001d18:	c3                   	ret    

c0001d19 <mem_set>:
c0001d19:	01 c1                	add    ecx,eax
c0001d1b:	40                   	inc    eax
c0001d1c:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d1f:	39 c8                	cmp    eax,ecx
c0001d21:	75 f8                	jne    c0001d1b <mem_set+0x2>
c0001d23:	c3                   	ret    

c0001d24 <mem_cmp>:
c0001d24:	57                   	push   edi
c0001d25:	56                   	push   esi
c0001d26:	89 c6                	mov    esi,eax
c0001d28:	53                   	push   ebx
c0001d29:	46                   	inc    esi
c0001d2a:	42                   	inc    edx
c0001d2b:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d2f:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d33:	29 fb                	sub    ebx,edi
c0001d35:	89 cf                	mov    edi,ecx
c0001d37:	29 f7                	sub    edi,esi
c0001d39:	01 c7                	add    edi,eax
c0001d3b:	74 04                	je     c0001d41 <mem_cmp+0x1d>
c0001d3d:	85 db                	test   ebx,ebx
c0001d3f:	74 e8                	je     c0001d29 <mem_cmp+0x5>
c0001d41:	89 d8                	mov    eax,ebx
c0001d43:	5b                   	pop    ebx
c0001d44:	5e                   	pop    esi
c0001d45:	5f                   	pop    edi
c0001d46:	c3                   	ret    

c0001d47 <chk_chr>:
c0001d47:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d4a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d4d:	74 07                	je     c0001d56 <chk_chr+0xf>
c0001d4f:	39 d1                	cmp    ecx,edx
c0001d51:	74 03                	je     c0001d56 <chk_chr+0xf>
c0001d53:	40                   	inc    eax
c0001d54:	eb f1                	jmp    c0001d47 <chk_chr>
c0001d56:	89 c8                	mov    eax,ecx
c0001d58:	c3                   	ret    

c0001d59 <dbc_1st>:
c0001d59:	31 c0                	xor    eax,eax
c0001d5b:	c3                   	ret    

c0001d5c <dbc_2nd>:
c0001d5c:	31 c0                	xor    eax,eax
c0001d5e:	c3                   	ret    

c0001d5f <tchar2uni>:
c0001d5f:	57                   	push   edi
c0001d60:	89 c7                	mov    edi,eax
c0001d62:	56                   	push   esi
c0001d63:	53                   	push   ebx
c0001d64:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d66:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d68:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d6b:	84 c9                	test   cl,cl
c0001d6d:	78 0a                	js     c0001d79 <tchar2uni+0x1a>
c0001d6f:	0f b6 d1             	movzx  edx,cl
c0001d72:	89 f3                	mov    ebx,esi
c0001d74:	e9 9f 00 00 00       	jmp    c0001e18 <tchar2uni+0xb9>
c0001d79:	88 ca                	mov    dl,cl
c0001d7b:	83 e2 e0             	and    edx,0xffffffe0
c0001d7e:	80 fa c0             	cmp    dl,0xc0
c0001d81:	75 0c                	jne    c0001d8f <tchar2uni+0x30>
c0001d83:	89 ca                	mov    edx,ecx
c0001d85:	b9 01 00 00 00       	mov    ecx,0x1
c0001d8a:	83 e2 1f             	and    edx,0x1f
c0001d8d:	eb 2e                	jmp    c0001dbd <tchar2uni+0x5e>
c0001d8f:	88 ca                	mov    dl,cl
c0001d91:	83 e2 f0             	and    edx,0xfffffff0
c0001d94:	80 fa e0             	cmp    dl,0xe0
c0001d97:	75 0c                	jne    c0001da5 <tchar2uni+0x46>
c0001d99:	89 ca                	mov    edx,ecx
c0001d9b:	b9 02 00 00 00       	mov    ecx,0x2
c0001da0:	83 e2 0f             	and    edx,0xf
c0001da3:	eb 18                	jmp    c0001dbd <tchar2uni+0x5e>
c0001da5:	88 ca                	mov    dl,cl
c0001da7:	83 e2 f8             	and    edx,0xfffffff8
c0001daa:	88 d0                	mov    al,dl
c0001dac:	83 ca ff             	or     edx,0xffffffff
c0001daf:	3c f0                	cmp    al,0xf0
c0001db1:	75 6c                	jne    c0001e1f <tchar2uni+0xc0>
c0001db3:	89 ca                	mov    edx,ecx
c0001db5:	b9 03 00 00 00       	mov    ecx,0x3
c0001dba:	83 e2 07             	and    edx,0x7
c0001dbd:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001dc1:	46                   	inc    esi
c0001dc2:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001dc5:	88 c8                	mov    al,cl
c0001dc7:	83 e0 c0             	and    eax,0xffffffc0
c0001dca:	3c 80                	cmp    al,0x80
c0001dcc:	75 4e                	jne    c0001e1c <tchar2uni+0xbd>
c0001dce:	c1 e2 06             	shl    edx,0x6
c0001dd1:	83 e1 3f             	and    ecx,0x3f
c0001dd4:	09 ca                	or     edx,ecx
c0001dd6:	39 de                	cmp    esi,ebx
c0001dd8:	75 e7                	jne    c0001dc1 <tchar2uni+0x62>
c0001dda:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ddd:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001de3:	77 37                	ja     c0001e1c <tchar2uni+0xbd>
c0001de5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001deb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001df1:	76 29                	jbe    c0001e1c <tchar2uni+0xbd>
c0001df3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001df9:	76 1d                	jbe    c0001e18 <tchar2uni+0xb9>
c0001dfb:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e01:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e07:	c1 e1 06             	shl    ecx,0x6
c0001e0a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e10:	09 ca                	or     edx,ecx
c0001e12:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e18:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e1a:	eb 03                	jmp    c0001e1f <tchar2uni+0xc0>
c0001e1c:	83 ca ff             	or     edx,0xffffffff
c0001e1f:	5b                   	pop    ebx
c0001e20:	89 d0                	mov    eax,edx
c0001e22:	5e                   	pop    esi
c0001e23:	5f                   	pop    edi
c0001e24:	c3                   	ret    

c0001e25 <put_utf>:
c0001e25:	53                   	push   ebx
c0001e26:	83 f8 7f             	cmp    eax,0x7f
c0001e29:	89 c3                	mov    ebx,eax
c0001e2b:	b0 00                	mov    al,0x0
c0001e2d:	77 11                	ja     c0001e40 <put_utf+0x1b>
c0001e2f:	85 c9                	test   ecx,ecx
c0001e31:	0f 84 e5 00 00 00    	je     c0001f1c <put_utf+0xf7>
c0001e37:	88 1a                	mov    BYTE PTR [edx],bl
c0001e39:	b0 01                	mov    al,0x1
c0001e3b:	e9 dc 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e40:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e46:	77 23                	ja     c0001e6b <put_utf+0x46>
c0001e48:	83 f9 01             	cmp    ecx,0x1
c0001e4b:	0f 86 cb 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e51:	89 d8                	mov    eax,ebx
c0001e53:	83 e3 3f             	and    ebx,0x3f
c0001e56:	c1 e8 06             	shr    eax,0x6
c0001e59:	83 cb 80             	or     ebx,0xffffff80
c0001e5c:	83 c8 c0             	or     eax,0xffffffc0
c0001e5f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e62:	88 02                	mov    BYTE PTR [edx],al
c0001e64:	b0 02                	mov    al,0x2
c0001e66:	e9 b1 00 00 00       	jmp    c0001f1c <put_utf+0xf7>
c0001e6b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e71:	77 40                	ja     c0001eb3 <put_utf+0x8e>
c0001e73:	83 f9 02             	cmp    ecx,0x2
c0001e76:	0f 86 a0 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e7c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e82:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e88:	0f 86 8e 00 00 00    	jbe    c0001f1c <put_utf+0xf7>
c0001e8e:	89 d8                	mov    eax,ebx
c0001e90:	c1 e8 0c             	shr    eax,0xc
c0001e93:	83 c8 e0             	or     eax,0xffffffe0
c0001e96:	88 02                	mov    BYTE PTR [edx],al
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 e0 3f             	and    eax,0x3f
c0001ea6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ea9:	83 c8 80             	or     eax,0xffffff80
c0001eac:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eaf:	b0 03                	mov    al,0x3
c0001eb1:	eb 69                	jmp    c0001f1c <put_utf+0xf7>
c0001eb3:	83 f9 03             	cmp    ecx,0x3
c0001eb6:	76 64                	jbe    c0001f1c <put_utf+0xf7>
c0001eb8:	89 d9                	mov    ecx,ebx
c0001eba:	0f b7 c3             	movzx  eax,bx
c0001ebd:	66 31 c9             	xor    cx,cx
c0001ec0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ec6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ecc:	c1 e9 06             	shr    ecx,0x6
c0001ecf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ed5:	77 43                	ja     c0001f1a <put_utf+0xf5>
c0001ed7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001edd:	77 3b                	ja     c0001f1a <put_utf+0xf5>
c0001edf:	09 cb                	or     ebx,ecx
c0001ee1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ee7:	89 d8                	mov    eax,ebx
c0001ee9:	c1 e8 12             	shr    eax,0x12
c0001eec:	83 c8 f0             	or     eax,0xfffffff0
c0001eef:	88 02                	mov    BYTE PTR [edx],al
c0001ef1:	89 d8                	mov    eax,ebx
c0001ef3:	c1 e8 0c             	shr    eax,0xc
c0001ef6:	83 e0 3f             	and    eax,0x3f
c0001ef9:	83 c8 80             	or     eax,0xffffff80
c0001efc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f16:	b0 04                	mov    al,0x4
c0001f18:	eb 02                	jmp    c0001f1c <put_utf+0xf7>
c0001f1a:	31 c0                	xor    eax,eax
c0001f1c:	5b                   	pop    ebx
c0001f1d:	c3                   	ret    

c0001f1e <clst2sect>:
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	83 ea 02             	sub    edx,0x2
c0001f23:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f26:	83 e8 02             	sub    eax,0x2
c0001f29:	39 d0                	cmp    eax,edx
c0001f2b:	76 0d                	jbe    c0001f3a <clst2sect+0x1c>
c0001f2d:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f31:	f7 e2                	mul    edx
c0001f33:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f36:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f39:	c3                   	ret    
c0001f3a:	31 c0                	xor    eax,eax
c0001f3c:	31 d2                	xor    edx,edx
c0001f3e:	c3                   	ret    

c0001f3f <clmt_clust>:
c0001f3f:	57                   	push   edi
c0001f40:	89 cf                	mov    edi,ecx
c0001f42:	56                   	push   esi
c0001f43:	89 d6                	mov    esi,edx
c0001f45:	53                   	push   ebx
c0001f46:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f4a:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f4d:	89 f2                	mov    edx,esi
c0001f4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f51:	c1 ef 09             	shr    edi,0x9
c0001f54:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f58:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f5b:	89 f9                	mov    ecx,edi
c0001f5d:	31 ff                	xor    edi,edi
c0001f5f:	57                   	push   edi
c0001f60:	56                   	push   esi
c0001f61:	51                   	push   ecx
c0001f62:	52                   	push   edx
c0001f63:	e8 4c 52 02 00       	call   c00271b4 <__udivdi3>
c0001f68:	83 c4 10             	add    esp,0x10
c0001f6b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f6d:	85 d2                	test   edx,edx
c0001f6f:	74 10                	je     c0001f81 <clmt_clust+0x42>
c0001f71:	39 d0                	cmp    eax,edx
c0001f73:	72 07                	jb     c0001f7c <clmt_clust+0x3d>
c0001f75:	29 d0                	sub    eax,edx
c0001f77:	83 c3 08             	add    ebx,0x8
c0001f7a:	eb ef                	jmp    c0001f6b <clmt_clust+0x2c>
c0001f7c:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f7f:	89 c2                	mov    edx,eax
c0001f81:	5b                   	pop    ebx
c0001f82:	89 d0                	mov    eax,edx
c0001f84:	5e                   	pop    esi
c0001f85:	5f                   	pop    edi
c0001f86:	c3                   	ret    

c0001f87 <pick_lfn>:
c0001f87:	55                   	push   ebp
c0001f88:	57                   	push   edi
c0001f89:	56                   	push   esi
c0001f8a:	89 d6                	mov    esi,edx
c0001f8c:	53                   	push   ebx
c0001f8d:	89 c3                	mov    ebx,eax
c0001f8f:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f92:	e8 ee fc ff ff       	call   c0001c85 <ld_word>
c0001f97:	66 85 c0             	test   ax,ax
c0001f9a:	74 04                	je     c0001fa0 <pick_lfn+0x19>
c0001f9c:	31 c0                	xor    eax,eax
c0001f9e:	eb 5c                	jmp    c0001ffc <pick_lfn+0x75>
c0001fa0:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fa3:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa8:	83 e1 bf             	and    ecx,0xffffffbf
c0001fab:	31 ff                	xor    edi,edi
c0001fad:	49                   	dec    ecx
c0001fae:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fb1:	0f b6 87 40 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62c0]
c0001fb8:	01 f0                	add    eax,esi
c0001fba:	e8 c6 fc ff ff       	call   c0001c85 <ld_word>
c0001fbf:	66 85 ed             	test   bp,bp
c0001fc2:	74 11                	je     c0001fd5 <pick_lfn+0x4e>
c0001fc4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fca:	77 d0                	ja     c0001f9c <pick_lfn+0x15>
c0001fcc:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fd0:	89 c5                	mov    ebp,eax
c0001fd2:	41                   	inc    ecx
c0001fd3:	eb 04                	jmp    c0001fd9 <pick_lfn+0x52>
c0001fd5:	66 40                	inc    ax
c0001fd7:	75 c3                	jne    c0001f9c <pick_lfn+0x15>
c0001fd9:	47                   	inc    edi
c0001fda:	83 ff 0d             	cmp    edi,0xd
c0001fdd:	75 d2                	jne    c0001fb1 <pick_lfn+0x2a>
c0001fdf:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fe2:	74 13                	je     c0001ff7 <pick_lfn+0x70>
c0001fe4:	66 85 ed             	test   bp,bp
c0001fe7:	74 0e                	je     c0001ff7 <pick_lfn+0x70>
c0001fe9:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fef:	77 ab                	ja     c0001f9c <pick_lfn+0x15>
c0001ff1:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff7:	b8 01 00 00 00       	mov    eax,0x1
c0001ffc:	5b                   	pop    ebx
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	5d                   	pop    ebp
c0002000:	c3                   	ret    

c0002001 <put_lfn>:
c0002001:	55                   	push   ebp
c0002002:	31 ed                	xor    ebp,ebp
c0002004:	57                   	push   edi
c0002005:	89 d7                	mov    edi,edx
c0002007:	56                   	push   esi
c0002008:	31 f6                	xor    esi,esi
c000200a:	53                   	push   ebx
c000200b:	83 ec 08             	sub    esp,0x8
c000200e:	89 04 24             	mov    DWORD PTR [esp],eax
c0002011:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002015:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002019:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201f:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002022:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002025:	31 d2                	xor    edx,edx
c0002027:	e8 cb fc ff ff       	call   c0001cf7 <st_word>
c000202c:	0f b6 d9             	movzx  ebx,cl
c000202f:	4b                   	dec    ebx
c0002030:	6b db 0d             	imul   ebx,ebx,0xd
c0002033:	66 83 fe ff          	cmp    si,0xffff
c0002037:	74 08                	je     c0002041 <put_lfn+0x40>
c0002039:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000203c:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002040:	43                   	inc    ebx
c0002041:	0f b6 85 40 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62c0]
c0002048:	0f b7 d6             	movzx  edx,si
c000204b:	01 f8                	add    eax,edi
c000204d:	e8 a5 fc ff ff       	call   c0001cf7 <st_word>
c0002052:	66 85 f6             	test   si,si
c0002055:	75 03                	jne    c000205a <put_lfn+0x59>
c0002057:	83 ce ff             	or     esi,0xffffffff
c000205a:	45                   	inc    ebp
c000205b:	83 fd 0d             	cmp    ebp,0xd
c000205e:	75 d3                	jne    c0002033 <put_lfn+0x32>
c0002060:	66 46                	inc    si
c0002062:	74 0a                	je     c000206e <put_lfn+0x6d>
c0002064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002067:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000206c:	75 09                	jne    c0002077 <put_lfn+0x76>
c000206e:	88 c8                	mov    al,cl
c0002070:	83 c8 40             	or     eax,0x40
c0002073:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002077:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000207b:	88 07                	mov    BYTE PTR [edi],al
c000207d:	83 c4 08             	add    esp,0x8
c0002080:	5b                   	pop    ebx
c0002081:	5e                   	pop    esi
c0002082:	5f                   	pop    edi
c0002083:	5d                   	pop    ebp
c0002084:	c3                   	ret    

c0002085 <gen_numname>:
c0002085:	57                   	push   edi
c0002086:	89 cf                	mov    edi,ecx
c0002088:	56                   	push   esi
c0002089:	b9 0b 00 00 00       	mov    ecx,0xb
c000208e:	53                   	push   ebx
c000208f:	89 c6                	mov    esi,eax
c0002091:	83 ec 10             	sub    esp,0x10
c0002094:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002098:	e8 67 fc ff ff       	call   c0001d04 <mem_cpy>
c000209d:	83 fb 05             	cmp    ebx,0x5
c00020a0:	76 2d                	jbe    c00020cf <gen_numname+0x4a>
c00020a2:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a5:	66 85 c0             	test   ax,ax
c00020a8:	74 25                	je     c00020cf <gen_numname+0x4a>
c00020aa:	83 c7 02             	add    edi,0x2
c00020ad:	ba 10 00 00 00       	mov    edx,0x10
c00020b2:	01 db                	add    ebx,ebx
c00020b4:	89 c1                	mov    ecx,eax
c00020b6:	66 d1 e8             	shr    ax,1
c00020b9:	83 e1 01             	and    ecx,0x1
c00020bc:	01 cb                	add    ebx,ecx
c00020be:	0f ba e3 10          	bt     ebx,0x10
c00020c2:	73 06                	jae    c00020ca <gen_numname+0x45>
c00020c4:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020ca:	4a                   	dec    edx
c00020cb:	75 e5                	jne    c00020b2 <gen_numname+0x2d>
c00020cd:	eb d3                	jmp    c00020a2 <gen_numname+0x1d>
c00020cf:	b8 07 00 00 00       	mov    eax,0x7
c00020d4:	88 d9                	mov    cl,bl
c00020d6:	83 e1 0f             	and    ecx,0xf
c00020d9:	8d 51 30             	lea    edx,[ecx+0x30]
c00020dc:	80 fa 39             	cmp    dl,0x39
c00020df:	76 03                	jbe    c00020e4 <gen_numname+0x5f>
c00020e1:	8d 51 37             	lea    edx,[ecx+0x37]
c00020e4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e7:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020eb:	89 da                	mov    edx,ebx
c00020ed:	c1 ea 04             	shr    edx,0x4
c00020f0:	83 fb 0f             	cmp    ebx,0xf
c00020f3:	76 06                	jbe    c00020fb <gen_numname+0x76>
c00020f5:	89 c8                	mov    eax,ecx
c00020f7:	89 d3                	mov    ebx,edx
c00020f9:	eb d9                	jmp    c00020d4 <gen_numname+0x4f>
c00020fb:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002100:	31 d2                	xor    edx,edx
c0002102:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002105:	8d 04 16             	lea    eax,[esi+edx*1]
c0002108:	39 ca                	cmp    edx,ecx
c000210a:	73 18                	jae    c0002124 <gen_numname+0x9f>
c000210c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210f:	3c 20                	cmp    al,0x20
c0002111:	74 11                	je     c0002124 <gen_numname+0x9f>
c0002113:	e8 41 fc ff ff       	call   c0001d59 <dbc_1st>
c0002118:	85 c0                	test   eax,eax
c000211a:	74 05                	je     c0002121 <gen_numname+0x9c>
c000211c:	39 d3                	cmp    ebx,edx
c000211e:	74 04                	je     c0002124 <gen_numname+0x9f>
c0002120:	42                   	inc    edx
c0002121:	42                   	inc    edx
c0002122:	eb e1                	jmp    c0002105 <gen_numname+0x80>
c0002124:	b0 20                	mov    al,0x20
c0002126:	83 f9 07             	cmp    ecx,0x7
c0002129:	77 05                	ja     c0002130 <gen_numname+0xab>
c000212b:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212f:	41                   	inc    ecx
c0002130:	42                   	inc    edx
c0002131:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002135:	83 fa 07             	cmp    edx,0x7
c0002138:	76 ea                	jbe    c0002124 <gen_numname+0x9f>
c000213a:	83 c4 10             	add    esp,0x10
c000213d:	5b                   	pop    ebx
c000213e:	5e                   	pop    esi
c000213f:	5f                   	pop    edi
c0002140:	c3                   	ret    

c0002141 <sum_sfn>:
c0002141:	31 c9                	xor    ecx,ecx
c0002143:	31 d2                	xor    edx,edx
c0002145:	d0 ca                	ror    dl,1
c0002147:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c000214a:	41                   	inc    ecx
c000214b:	83 f9 0b             	cmp    ecx,0xb
c000214e:	75 f5                	jne    c0002145 <sum_sfn+0x4>
c0002150:	88 d0                	mov    al,dl
c0002152:	c3                   	ret    

c0002153 <xdir_sum>:
c0002153:	56                   	push   esi
c0002154:	31 c9                	xor    ecx,ecx
c0002156:	53                   	push   ebx
c0002157:	31 d2                	xor    edx,edx
c0002159:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000215d:	43                   	inc    ebx
c000215e:	c1 e3 05             	shl    ebx,0x5
c0002161:	83 fa 02             	cmp    edx,0x2
c0002164:	74 0b                	je     c0002171 <xdir_sum+0x1e>
c0002166:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000216a:	66 d1 c9             	ror    cx,1
c000216d:	01 f1                	add    ecx,esi
c000216f:	eb 05                	jmp    c0002176 <xdir_sum+0x23>
c0002171:	ba 03 00 00 00       	mov    edx,0x3
c0002176:	42                   	inc    edx
c0002177:	39 d3                	cmp    ebx,edx
c0002179:	77 e6                	ja     c0002161 <xdir_sum+0xe>
c000217b:	89 c8                	mov    eax,ecx
c000217d:	5b                   	pop    ebx
c000217e:	5e                   	pop    esi
c000217f:	c3                   	ret    

c0002180 <xsum32>:
c0002180:	d1 ca                	ror    edx,1
c0002182:	0f b6 c0             	movzx  eax,al
c0002185:	01 d0                	add    eax,edx
c0002187:	c3                   	ret    

c0002188 <get_xfileinfo>:
c0002188:	55                   	push   ebp
c0002189:	31 c9                	xor    ecx,ecx
c000218b:	57                   	push   edi
c000218c:	bd 40 00 00 00       	mov    ebp,0x40
c0002191:	56                   	push   esi
c0002192:	31 ff                	xor    edi,edi
c0002194:	53                   	push   ebx
c0002195:	89 c6                	mov    esi,eax
c0002197:	83 ec 0c             	sub    esp,0xc
c000219a:	89 d3                	mov    ebx,edx
c000219c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021a3:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021a7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021aa:	76 6d                	jbe    c0002219 <get_xfileinfo+0x91>
c00021ac:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021b2:	76 0b                	jbe    c00021bf <get_xfileinfo+0x37>
c00021b4:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021b8:	bf 01 00 00 00       	mov    edi,0x1
c00021bd:	eb 63                	jmp    c0002222 <get_xfileinfo+0x9a>
c00021bf:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021c5:	75 03                	jne    c00021ca <get_xfileinfo+0x42>
c00021c7:	83 c5 02             	add    ebp,0x2
c00021ca:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021cd:	83 c5 02             	add    ebp,0x2
c00021d0:	e8 b0 fa ff ff       	call   c0001c85 <ld_word>
c00021d5:	ff 04 24             	inc    DWORD PTR [esp]
c00021d8:	66 85 c9             	test   cx,cx
c00021db:	75 0d                	jne    c00021ea <get_xfileinfo+0x62>
c00021dd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021e3:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021e8:	76 2b                	jbe    c0002215 <get_xfileinfo+0x8d>
c00021ea:	c1 e1 10             	shl    ecx,0x10
c00021ed:	ba ff 00 00 00       	mov    edx,0xff
c00021f2:	0f b7 c0             	movzx  eax,ax
c00021f5:	29 fa                	sub    edx,edi
c00021f7:	09 c8                	or     eax,ecx
c00021f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021fd:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002201:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0002205:	e8 1b fc ff ff       	call   c0001e25 <put_utf>
c000220a:	84 c0                	test   al,al
c000220c:	74 a6                	je     c00021b4 <get_xfileinfo+0x2c>
c000220e:	0f b6 c0             	movzx  eax,al
c0002211:	01 c7                	add    edi,eax
c0002213:	31 c0                	xor    eax,eax
c0002215:	89 c1                	mov    ecx,eax
c0002217:	eb 8a                	jmp    c00021a3 <get_xfileinfo+0x1b>
c0002219:	85 ff                	test   edi,edi
c000221b:	74 97                	je     c00021b4 <get_xfileinfo+0x2c>
c000221d:	66 85 c9             	test   cx,cx
c0002220:	75 92                	jne    c00021b4 <get_xfileinfo+0x2c>
c0002222:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002227:	31 c0                	xor    eax,eax
c0002229:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c000222d:	31 d2                	xor    edx,edx
c000222f:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002232:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002235:	80 e1 10             	and    cl,0x10
c0002238:	75 08                	jne    c0002242 <get_xfileinfo+0xba>
c000223a:	8d 46 38             	lea    eax,[esi+0x38]
c000223d:	e8 68 fa ff ff       	call   c0001caa <ld_qword>
c0002242:	89 03                	mov    DWORD PTR [ebx],eax
c0002244:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002247:	8d 46 0c             	lea    eax,[esi+0xc]
c000224a:	e8 36 fa ff ff       	call   c0001c85 <ld_word>
c000224f:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002253:	8d 46 0e             	lea    eax,[esi+0xe]
c0002256:	e8 2a fa ff ff       	call   c0001c85 <ld_word>
c000225b:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000225f:	83 c4 0c             	add    esp,0xc
c0002262:	5b                   	pop    ebx
c0002263:	5e                   	pop    esi
c0002264:	5f                   	pop    edi
c0002265:	5d                   	pop    ebp
c0002266:	c3                   	ret    

c0002267 <get_ldnumber>:
c0002267:	8b 10                	mov    edx,DWORD PTR [eax]
c0002269:	85 d2                	test   edx,edx
c000226b:	74 14                	je     c0002281 <get_ldnumber+0x1a>
c000226d:	56                   	push   esi
c000226e:	53                   	push   ebx
c000226f:	89 d3                	mov    ebx,edx
c0002271:	43                   	inc    ebx
c0002272:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002275:	80 f9 1f             	cmp    cl,0x1f
c0002278:	76 0d                	jbe    c0002287 <get_ldnumber+0x20>
c000227a:	80 f9 3a             	cmp    cl,0x3a
c000227d:	75 f2                	jne    c0002271 <get_ldnumber+0xa>
c000227f:	eb 0a                	jmp    c000228b <get_ldnumber+0x24>
c0002281:	83 c9 ff             	or     ecx,0xffffffff
c0002284:	89 c8                	mov    eax,ecx
c0002286:	c3                   	ret    
c0002287:	31 c9                	xor    ecx,ecx
c0002289:	eb 24                	jmp    c00022af <get_ldnumber+0x48>
c000228b:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000228e:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002291:	80 f9 09             	cmp    cl,0x9
c0002294:	77 16                	ja     c00022ac <get_ldnumber+0x45>
c0002296:	83 c2 02             	add    edx,0x2
c0002299:	83 c9 ff             	or     ecx,0xffffffff
c000229c:	39 d3                	cmp    ebx,edx
c000229e:	75 0f                	jne    c00022af <get_ldnumber+0x48>
c00022a0:	89 f2                	mov    edx,esi
c00022a2:	89 18                	mov    DWORD PTR [eax],ebx
c00022a4:	0f be ca             	movsx  ecx,dl
c00022a7:	83 e9 30             	sub    ecx,0x30
c00022aa:	eb 03                	jmp    c00022af <get_ldnumber+0x48>
c00022ac:	83 c9 ff             	or     ecx,0xffffffff
c00022af:	89 c8                	mov    eax,ecx
c00022b1:	5b                   	pop    ebx
c00022b2:	5e                   	pop    esi
c00022b3:	c3                   	ret    

c00022b4 <crc32>:
c00022b4:	56                   	push   esi
c00022b5:	89 d6                	mov    esi,edx
c00022b7:	53                   	push   ebx
c00022b8:	b2 01                	mov    dl,0x1
c00022ba:	bb 08 00 00 00       	mov    ebx,0x8
c00022bf:	89 f1                	mov    ecx,esi
c00022c1:	84 d1                	test   cl,dl
c00022c3:	0f 95 c1             	setne  cl
c00022c6:	0f b6 c9             	movzx  ecx,cl
c00022c9:	31 c1                	xor    ecx,eax
c00022cb:	89 c8                	mov    eax,ecx
c00022cd:	d1 e8                	shr    eax,1
c00022cf:	80 e1 01             	and    cl,0x1
c00022d2:	74 05                	je     c00022d9 <crc32+0x25>
c00022d4:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022d9:	d1 e2                	shl    edx,1
c00022db:	4b                   	dec    ebx
c00022dc:	75 e1                	jne    c00022bf <crc32+0xb>
c00022de:	5b                   	pop    ebx
c00022df:	5e                   	pop    esi
c00022e0:	c3                   	ret    

c00022e1 <test_gpt_header>:
c00022e1:	55                   	push   ebp
c00022e2:	b9 10 00 00 00       	mov    ecx,0x10
c00022e7:	57                   	push   edi
c00022e8:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c00022ed:	56                   	push   esi
c00022ee:	31 ff                	xor    edi,edi
c00022f0:	53                   	push   ebx
c00022f1:	89 c3                	mov    ebx,eax
c00022f3:	e8 2c fa ff ff       	call   c0001d24 <mem_cmp>
c00022f8:	85 c0                	test   eax,eax
c00022fa:	75 55                	jne    c0002351 <test_gpt_header+0x70>
c00022fc:	89 c7                	mov    edi,eax
c00022fe:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002303:	83 ce ff             	or     esi,0xffffffff
c0002306:	31 d2                	xor    edx,edx
c0002308:	83 fd 03             	cmp    ebp,0x3
c000230b:	76 05                	jbe    c0002312 <test_gpt_header+0x31>
c000230d:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002312:	89 f0                	mov    eax,esi
c0002314:	45                   	inc    ebp
c0002315:	e8 9a ff ff ff       	call   c00022b4 <crc32>
c000231a:	83 fd 4c             	cmp    ebp,0x4c
c000231d:	89 c6                	mov    esi,eax
c000231f:	75 e5                	jne    c0002306 <test_gpt_header+0x25>
c0002321:	8d 43 10             	lea    eax,[ebx+0x10]
c0002324:	f7 d6                	not    esi
c0002326:	e8 67 f9 ff ff       	call   c0001c92 <ld_dword>
c000232b:	39 c6                	cmp    esi,eax
c000232d:	75 22                	jne    c0002351 <test_gpt_header+0x70>
c000232f:	8d 43 54             	lea    eax,[ebx+0x54]
c0002332:	e8 5b f9 ff ff       	call   c0001c92 <ld_dword>
c0002337:	83 c0 80             	add    eax,0xffffff80
c000233a:	75 15                	jne    c0002351 <test_gpt_header+0x70>
c000233c:	8d 43 50             	lea    eax,[ebx+0x50]
c000233f:	e8 4e f9 ff ff       	call   c0001c92 <ld_dword>
c0002344:	3d 80 00 00 00       	cmp    eax,0x80
c0002349:	0f 96 c0             	setbe  al
c000234c:	0f b6 c0             	movzx  eax,al
c000234f:	89 c7                	mov    edi,eax
c0002351:	5b                   	pop    ebx
c0002352:	89 f8                	mov    eax,edi
c0002354:	5e                   	pop    esi
c0002355:	5f                   	pop    edi
c0002356:	5d                   	pop    ebp
c0002357:	c3                   	ret    

c0002358 <make_rand>:
c0002358:	56                   	push   esi
c0002359:	85 c0                	test   eax,eax
c000235b:	53                   	push   ebx
c000235c:	75 05                	jne    c0002363 <make_rand+0xb>
c000235e:	b8 01 00 00 00       	mov    eax,0x1
c0002363:	01 d1                	add    ecx,edx
c0002365:	bb 08 00 00 00       	mov    ebx,0x8
c000236a:	89 c6                	mov    esi,eax
c000236c:	d1 e8                	shr    eax,1
c000236e:	83 e6 01             	and    esi,0x1
c0002371:	85 f6                	test   esi,esi
c0002373:	74 05                	je     c000237a <make_rand+0x22>
c0002375:	35 00 00 00 a3       	xor    eax,0xa3000000
c000237a:	4b                   	dec    ebx
c000237b:	75 ed                	jne    c000236a <make_rand+0x12>
c000237d:	42                   	inc    edx
c000237e:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002381:	39 ca                	cmp    edx,ecx
c0002383:	75 e0                	jne    c0002365 <make_rand+0xd>
c0002385:	5b                   	pop    ebx
c0002386:	5e                   	pop    esi
c0002387:	c3                   	ret    

c0002388 <validate>:
c0002388:	56                   	push   esi
c0002389:	53                   	push   ebx
c000238a:	89 d6                	mov    esi,edx
c000238c:	51                   	push   ecx
c000238d:	85 c0                	test   eax,eax
c000238f:	75 09                	jne    c000239a <validate+0x12>
c0002391:	b8 09 00 00 00       	mov    eax,0x9
c0002396:	31 c9                	xor    ecx,ecx
c0002398:	eb 2f                	jmp    c00023c9 <validate+0x41>
c000239a:	89 c3                	mov    ebx,eax
c000239c:	8b 00                	mov    eax,DWORD PTR [eax]
c000239e:	85 c0                	test   eax,eax
c00023a0:	74 ef                	je     c0002391 <validate+0x9>
c00023a2:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023a5:	74 ea                	je     c0002391 <validate+0x9>
c00023a7:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023ab:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023af:	75 e0                	jne    c0002391 <validate+0x9>
c00023b1:	83 ec 0c             	sub    esp,0xc
c00023b4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023b8:	50                   	push   eax
c00023b9:	e8 76 f8 ff ff       	call   c0001c34 <disk_status>
c00023be:	83 c4 10             	add    esp,0x10
c00023c1:	a8 01                	test   al,0x1
c00023c3:	75 cc                	jne    c0002391 <validate+0x9>
c00023c5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023c7:	31 c0                	xor    eax,eax
c00023c9:	89 0e                	mov    DWORD PTR [esi],ecx
c00023cb:	5a                   	pop    edx
c00023cc:	5b                   	pop    ebx
c00023cd:	5e                   	pop    esi
c00023ce:	c3                   	ret    

c00023cf <sync_window>:
c00023cf:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023d3:	0f 84 85 00 00 00    	je     c000245e <sync_window+0x8f>
c00023d9:	55                   	push   ebp
c00023da:	8d 68 54             	lea    ebp,[eax+0x54]
c00023dd:	57                   	push   edi
c00023de:	56                   	push   esi
c00023df:	53                   	push   ebx
c00023e0:	89 c3                	mov    ebx,eax
c00023e2:	83 ec 28             	sub    esp,0x28
c00023e5:	6a 01                	push   0x1
c00023e7:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023ea:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023ed:	55                   	push   ebp
c00023ee:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023f2:	50                   	push   eax
c00023f3:	e8 58 f8 ff ff       	call   c0001c50 <disk_write>
c00023f8:	83 c4 20             	add    esp,0x20
c00023fb:	ba 01 00 00 00       	mov    edx,0x1
c0002400:	85 c0                	test   eax,eax
c0002402:	75 50                	jne    c0002454 <sync_window+0x85>
c0002404:	31 ff                	xor    edi,edi
c0002406:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002409:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000240d:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002411:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002414:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002417:	89 c6                	mov    esi,eax
c0002419:	89 d7                	mov    edi,edx
c000241b:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000241e:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002422:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002425:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002429:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c000242d:	73 23                	jae    c0002452 <sync_window+0x83>
c000242f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002433:	75 1d                	jne    c0002452 <sync_window+0x83>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	6a 01                	push   0x1
c000243a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000243e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002442:	52                   	push   edx
c0002443:	50                   	push   eax
c0002444:	55                   	push   ebp
c0002445:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002449:	50                   	push   eax
c000244a:	e8 01 f8 ff ff       	call   c0001c50 <disk_write>
c000244f:	83 c4 20             	add    esp,0x20
c0002452:	31 d2                	xor    edx,edx
c0002454:	83 c4 1c             	add    esp,0x1c
c0002457:	89 d0                	mov    eax,edx
c0002459:	5b                   	pop    ebx
c000245a:	5e                   	pop    esi
c000245b:	5f                   	pop    edi
c000245c:	5d                   	pop    ebp
c000245d:	c3                   	ret    
c000245e:	31 d2                	xor    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	c3                   	ret    

c0002463 <move_window>:
c0002463:	56                   	push   esi
c0002464:	53                   	push   ebx
c0002465:	89 c3                	mov    ebx,eax
c0002467:	83 ec 14             	sub    esp,0x14
c000246a:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000246d:	75 07                	jne    c0002476 <move_window+0x13>
c000246f:	31 f6                	xor    esi,esi
c0002471:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002474:	74 59                	je     c00024cf <move_window+0x6c>
c0002476:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000247a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000247e:	89 d8                	mov    eax,ebx
c0002480:	e8 4a ff ff ff       	call   c00023cf <sync_window>
c0002485:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002489:	89 c6                	mov    esi,eax
c000248b:	85 c0                	test   eax,eax
c000248d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002491:	75 3c                	jne    c00024cf <move_window+0x6c>
c0002493:	83 ec 0c             	sub    esp,0xc
c0002496:	8d 43 54             	lea    eax,[ebx+0x54]
c0002499:	6a 01                	push   0x1
c000249b:	51                   	push   ecx
c000249c:	52                   	push   edx
c000249d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024a1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024a5:	50                   	push   eax
c00024a6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024aa:	50                   	push   eax
c00024ab:	e8 8a f7 ff ff       	call   c0001c3a <disk_read>
c00024b0:	83 c4 20             	add    esp,0x20
c00024b3:	85 c0                	test   eax,eax
c00024b5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024bd:	74 0a                	je     c00024c9 <move_window+0x66>
c00024bf:	83 ca ff             	or     edx,0xffffffff
c00024c2:	be 01 00 00 00       	mov    esi,0x1
c00024c7:	89 d1                	mov    ecx,edx
c00024c9:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024cc:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024cf:	89 f0                	mov    eax,esi
c00024d1:	83 c4 14             	add    esp,0x14
c00024d4:	5b                   	pop    ebx
c00024d5:	5e                   	pop    esi
c00024d6:	c3                   	ret    

c00024d7 <check_fs>:
c00024d7:	53                   	push   ebx
c00024d8:	89 c3                	mov    ebx,eax
c00024da:	83 ec 08             	sub    esp,0x8
c00024dd:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024e1:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024e8:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ef:	e8 6f ff ff ff       	call   c0002463 <move_window>
c00024f4:	ba 04 00 00 00       	mov    edx,0x4
c00024f9:	85 c0                	test   eax,eax
c00024fb:	0f 85 89 00 00 00    	jne    c000258a <check_fs+0xb3>
c0002501:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002507:	e8 79 f7 ff ff       	call   c0001c85 <ld_word>
c000250c:	ba 03 00 00 00       	mov    edx,0x3
c0002511:	66 3d 55 aa          	cmp    ax,0xaa55
c0002515:	75 73                	jne    c000258a <check_fs+0xb3>
c0002517:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c000251c:	8d 43 54             	lea    eax,[ebx+0x54]
c000251f:	b9 0b 00 00 00       	mov    ecx,0xb
c0002524:	e8 fb f7 ff ff       	call   c0001d24 <mem_cmp>
c0002529:	ba 01 00 00 00       	mov    edx,0x1
c000252e:	85 c0                	test   eax,eax
c0002530:	74 58                	je     c000258a <check_fs+0xb3>
c0002532:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002535:	8d 50 18             	lea    edx,[eax+0x18]
c0002538:	80 fa 01             	cmp    dl,0x1
c000253b:	76 09                	jbe    c0002546 <check_fs+0x6f>
c000253d:	ba 02 00 00 00       	mov    edx,0x2
c0002542:	3c eb                	cmp    al,0xeb
c0002544:	75 44                	jne    c000258a <check_fs+0xb3>
c0002546:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c000254b:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002551:	b9 03 00 00 00       	mov    ecx,0x3
c0002556:	e8 c9 f7 ff ff       	call   c0001d24 <mem_cmp>
c000255b:	31 d2                	xor    edx,edx
c000255d:	85 c0                	test   eax,eax
c000255f:	74 29                	je     c000258a <check_fs+0xb3>
c0002561:	ba 6c 9d 02 c0       	mov    edx,0xc0029d6c
c0002566:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000256c:	b9 05 00 00 00       	mov    ecx,0x5
c0002571:	e8 ae f7 ff ff       	call   c0001d24 <mem_cmp>
c0002576:	31 d2                	xor    edx,edx
c0002578:	85 c0                	test   eax,eax
c000257a:	74 0e                	je     c000258a <check_fs+0xb3>
c000257c:	31 d2                	xor    edx,edx
c000257e:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002585:	0f 95 c2             	setne  dl
c0002588:	01 d2                	add    edx,edx
c000258a:	89 d0                	mov    eax,edx
c000258c:	83 c4 08             	add    esp,0x8
c000258f:	5b                   	pop    ebx
c0002590:	c3                   	ret    

c0002591 <find_volume>:
c0002591:	55                   	push   ebp
c0002592:	31 c9                	xor    ecx,ecx
c0002594:	57                   	push   edi
c0002595:	56                   	push   esi
c0002596:	89 d6                	mov    esi,edx
c0002598:	53                   	push   ebx
c0002599:	31 d2                	xor    edx,edx
c000259b:	83 ec 3c             	sub    esp,0x3c
c000259e:	89 c3                	mov    ebx,eax
c00025a0:	e8 32 ff ff ff       	call   c00024d7 <check_fs>
c00025a5:	83 f8 02             	cmp    eax,0x2
c00025a8:	74 0e                	je     c00025b8 <find_volume+0x27>
c00025aa:	0f 87 5d 01 00 00    	ja     c000270d <find_volume+0x17c>
c00025b0:	85 f6                	test   esi,esi
c00025b2:	0f 84 55 01 00 00    	je     c000270d <find_volume+0x17c>
c00025b8:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025bf:	0f 85 dd 00 00 00    	jne    c00026a2 <find_volume+0x111>
c00025c5:	31 c9                	xor    ecx,ecx
c00025c7:	ba 01 00 00 00       	mov    edx,0x1
c00025cc:	89 d8                	mov    eax,ebx
c00025ce:	e8 90 fe ff ff       	call   c0002463 <move_window>
c00025d3:	85 c0                	test   eax,eax
c00025d5:	74 0a                	je     c00025e1 <find_volume+0x50>
c00025d7:	b8 04 00 00 00       	mov    eax,0x4
c00025dc:	e9 2c 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025e1:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025e4:	89 e8                	mov    eax,ebp
c00025e6:	e8 f6 fc ff ff       	call   c00022e1 <test_gpt_header>
c00025eb:	85 c0                	test   eax,eax
c00025ed:	75 0a                	jne    c00025f9 <find_volume+0x68>
c00025ef:	b8 03 00 00 00       	mov    eax,0x3
c00025f4:	e9 14 01 00 00       	jmp    c000270d <find_volume+0x17c>
c00025f9:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025ff:	e8 8e f6 ff ff       	call   c0001c92 <ld_dword>
c0002604:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002608:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000260e:	e8 97 f6 ff ff       	call   c0001caa <ld_qword>
c0002613:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000261b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000261f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002623:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000262b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000262f:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002633:	74 ba                	je     c00025ef <find_volume+0x5e>
c0002635:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002639:	31 c9                	xor    ecx,ecx
c000263b:	c1 e7 07             	shl    edi,0x7
c000263e:	89 d8                	mov    eax,ebx
c0002640:	89 fa                	mov    edx,edi
c0002642:	c1 ea 09             	shr    edx,0x9
c0002645:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002649:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000264d:	e8 11 fe ff ff       	call   c0002463 <move_window>
c0002652:	85 c0                	test   eax,eax
c0002654:	75 81                	jne    c00025d7 <find_volume+0x46>
c0002656:	81 e7 80 01 00 00    	and    edi,0x180
c000265c:	b9 10 00 00 00       	mov    ecx,0x10
c0002661:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002665:	ba 50 9d 02 c0       	mov    edx,0xc0029d50
c000266a:	e8 b5 f6 ff ff       	call   c0001d24 <mem_cmp>
c000266f:	85 c0                	test   eax,eax
c0002671:	75 29                	jne    c000269c <find_volume+0x10b>
c0002673:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002677:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000267b:	e8 2a f6 ff ff       	call   c0001caa <ld_qword>
c0002680:	89 d1                	mov    ecx,edx
c0002682:	89 c2                	mov    edx,eax
c0002684:	89 d8                	mov    eax,ebx
c0002686:	e8 4c fe ff ff       	call   c00024d7 <check_fs>
c000268b:	85 f6                	test   esi,esi
c000268d:	75 07                	jne    c0002696 <find_volume+0x105>
c000268f:	83 f8 01             	cmp    eax,0x1
c0002692:	77 08                	ja     c000269c <find_volume+0x10b>
c0002694:	eb 77                	jmp    c000270d <find_volume+0x17c>
c0002696:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000269a:	74 71                	je     c000270d <find_volume+0x17c>
c000269c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026a0:	eb 89                	jmp    c000262b <find_volume+0x9a>
c00026a2:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026a6:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026ac:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026b6:	89 cd                	mov    ebp,ecx
c00026b8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026bc:	89 f8                	mov    eax,edi
c00026be:	83 c7 10             	add    edi,0x10
c00026c1:	e8 cc f5 ff ff       	call   c0001c92 <ld_dword>
c00026c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026ca:	89 01                	mov    DWORD PTR [ecx],eax
c00026cc:	83 c1 04             	add    ecx,0x4
c00026cf:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026d3:	75 e3                	jne    c00026b8 <find_volume+0x127>
c00026d5:	31 ff                	xor    edi,edi
c00026d7:	85 f6                	test   esi,esi
c00026d9:	74 03                	je     c00026de <find_volume+0x14d>
c00026db:	8d 7e ff             	lea    edi,[esi-0x1]
c00026de:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026e2:	85 d2                	test   edx,edx
c00026e4:	74 14                	je     c00026fa <find_volume+0x169>
c00026e6:	31 c9                	xor    ecx,ecx
c00026e8:	89 d8                	mov    eax,ebx
c00026ea:	e8 e8 fd ff ff       	call   c00024d7 <check_fs>
c00026ef:	83 f8 01             	cmp    eax,0x1
c00026f2:	76 19                	jbe    c000270d <find_volume+0x17c>
c00026f4:	85 f6                	test   esi,esi
c00026f6:	74 0f                	je     c0002707 <find_volume+0x176>
c00026f8:	eb 13                	jmp    c000270d <find_volume+0x17c>
c00026fa:	85 f6                	test   esi,esi
c00026fc:	0f 85 ed fe ff ff    	jne    c00025ef <find_volume+0x5e>
c0002702:	b8 03 00 00 00       	mov    eax,0x3
c0002707:	47                   	inc    edi
c0002708:	83 ff 03             	cmp    edi,0x3
c000270b:	76 d1                	jbe    c00026de <find_volume+0x14d>
c000270d:	83 c4 3c             	add    esp,0x3c
c0002710:	5b                   	pop    ebx
c0002711:	5e                   	pop    esi
c0002712:	5f                   	pop    edi
c0002713:	5d                   	pop    ebp
c0002714:	c3                   	ret    

c0002715 <mount_volume>:
c0002715:	55                   	push   ebp
c0002716:	57                   	push   edi
c0002717:	89 cf                	mov    edi,ecx
c0002719:	56                   	push   esi
c000271a:	53                   	push   ebx
c000271b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002720:	83 ec 3c             	sub    esp,0x3c
c0002723:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002729:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000272d:	e8 35 fb ff ff       	call   c0002267 <get_ldnumber>
c0002732:	85 c0                	test   eax,eax
c0002734:	0f 88 3a 05 00 00    	js     c0002c74 <mount_volume+0x55f>
c000273a:	8b 2c 85 e0 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1220]
c0002741:	89 c6                	mov    esi,eax
c0002743:	bb 0c 00 00 00       	mov    ebx,0xc
c0002748:	85 ed                	test   ebp,ebp
c000274a:	0f 84 24 05 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002754:	83 e7 fe             	and    edi,0xfffffffe
c0002757:	89 2a                	mov    DWORD PTR [edx],ebp
c0002759:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000275d:	74 32                	je     c0002791 <mount_volume+0x7c>
c000275f:	83 ec 0c             	sub    esp,0xc
c0002762:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002766:	50                   	push   eax
c0002767:	e8 c8 f4 ff ff       	call   c0001c34 <disk_status>
c000276c:	83 c4 10             	add    esp,0x10
c000276f:	a8 01                	test   al,0x1
c0002771:	75 1e                	jne    c0002791 <mount_volume+0x7c>
c0002773:	31 db                	xor    ebx,ebx
c0002775:	89 f9                	mov    ecx,edi
c0002777:	84 c9                	test   cl,cl
c0002779:	0f 84 f5 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c000277f:	a8 04                	test   al,0x4
c0002781:	0f 84 ed 04 00 00    	je     c0002c74 <mount_volume+0x55f>
c0002787:	bb 0a 00 00 00       	mov    ebx,0xa
c000278c:	e9 e3 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002791:	83 ec 0c             	sub    esp,0xc
c0002794:	89 f0                	mov    eax,esi
c0002796:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000279a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000279d:	0f b6 f0             	movzx  esi,al
c00027a0:	bb 03 00 00 00       	mov    ebx,0x3
c00027a5:	56                   	push   esi
c00027a6:	e8 8c f4 ff ff       	call   c0001c37 <disk_initialize>
c00027ab:	83 c4 10             	add    esp,0x10
c00027ae:	a8 01                	test   al,0x1
c00027b0:	0f 85 be 04 00 00    	jne    c0002c74 <mount_volume+0x55f>
c00027b6:	89 f9                	mov    ecx,edi
c00027b8:	84 c9                	test   cl,cl
c00027ba:	74 04                	je     c00027c0 <mount_volume+0xab>
c00027bc:	a8 04                	test   al,0x4
c00027be:	75 c7                	jne    c0002787 <mount_volume+0x72>
c00027c0:	31 d2                	xor    edx,edx
c00027c2:	89 e8                	mov    eax,ebp
c00027c4:	e8 c8 fd ff ff       	call   c0002591 <find_volume>
c00027c9:	83 f8 04             	cmp    eax,0x4
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0xc3>
c00027ce:	bb 01 00 00 00       	mov    ebx,0x1
c00027d3:	e9 9c 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027d8:	83 f8 01             	cmp    eax,0x1
c00027db:	76 0a                	jbe    c00027e7 <mount_volume+0xd2>
c00027dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00027e2:	e9 8d 04 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c00027e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f5:	75 17                	jne    c000280e <mount_volume+0xf9>
c00027f7:	b8 0b 00 00 00       	mov    eax,0xb
c00027fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002801:	75 da                	jne    c00027dd <mount_volume+0xc8>
c0002803:	40                   	inc    eax
c0002804:	83 f8 40             	cmp    eax,0x40
c0002807:	75 f3                	jne    c00027fc <mount_volume+0xe7>
c0002809:	e9 5a 02 00 00       	jmp    c0002a68 <mount_volume+0x353>
c000280e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002811:	e8 6f f4 ff ff       	call   c0001c85 <ld_word>
c0002816:	66 3d 00 02          	cmp    ax,0x200
c000281a:	75 c1                	jne    c00027dd <mount_volume+0xc8>
c000281c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000281f:	e8 61 f4 ff ff       	call   c0001c85 <ld_word>
c0002824:	0f b7 c0             	movzx  eax,ax
c0002827:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000282b:	85 c0                	test   eax,eax
c000282d:	75 0c                	jne    c000283b <mount_volume+0x126>
c000282f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002832:	e8 5b f4 ff ff       	call   c0001c92 <ld_dword>
c0002837:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000283b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000283f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002842:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002845:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002849:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000284c:	48                   	dec    eax
c000284d:	3c 01                	cmp    al,0x1
c000284f:	77 8c                	ja     c00027dd <mount_volume+0xc8>
c0002851:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002855:	89 c3                	mov    ebx,eax
c0002857:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000285b:	66 85 c0             	test   ax,ax
c000285e:	0f 84 79 ff ff ff    	je     c00027dd <mount_volume+0xc8>
c0002864:	8d 40 ff             	lea    eax,[eax-0x1]
c0002867:	85 d8                	test   eax,ebx
c0002869:	0f 85 6e ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c000286f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002872:	e8 0e f4 ff ff       	call   c0001c85 <ld_word>
c0002877:	89 c7                	mov    edi,eax
c0002879:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000287d:	a8 0f                	test   al,0xf
c000287f:	0f 85 58 ff ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002885:	8d 45 67             	lea    eax,[ebp+0x67]
c0002888:	e8 f8 f3 ff ff       	call   c0001c85 <ld_word>
c000288d:	0f b7 f0             	movzx  esi,ax
c0002890:	85 f6                	test   esi,esi
c0002892:	75 0a                	jne    c000289e <mount_volume+0x189>
c0002894:	8d 45 74             	lea    eax,[ebp+0x74]
c0002897:	e8 f6 f3 ff ff       	call   c0001c92 <ld_dword>
c000289c:	89 c6                	mov    esi,eax
c000289e:	8d 45 62             	lea    eax,[ebp+0x62]
c00028a1:	e8 df f3 ff ff       	call   c0001c85 <ld_word>
c00028a6:	66 85 c0             	test   ax,ax
c00028a9:	0f 84 2e ff ff ff    	je     c00027dd <mount_volume+0xc8>
c00028af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028b4:	0f b7 c8             	movzx  ecx,ax
c00028b7:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028c0:	89 fa                	mov    edx,edi
c00028c2:	66 c1 ea 04          	shr    dx,0x4
c00028c6:	0f b7 d2             	movzx  edx,dx
c00028c9:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028d4:	39 c6                	cmp    esi,eax
c00028d6:	0f 82 01 ff ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028dc:	29 c6                	sub    esi,eax
c00028de:	31 d2                	xor    edx,edx
c00028e0:	89 f0                	mov    eax,esi
c00028e2:	f7 f3                	div    ebx
c00028e4:	39 de                	cmp    esi,ebx
c00028e6:	0f 82 f1 fe ff ff    	jb     c00027dd <mount_volume+0xc8>
c00028ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028f1:	0f 87 e6 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00028f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028fc:	0f 86 63 03 00 00    	jbe    c0002c65 <mount_volume+0x550>
c0002902:	bb 03 00 00 00       	mov    ebx,0x3
c0002907:	8d 70 02             	lea    esi,[eax+0x2]
c000290a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000290e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002912:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002915:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002918:	31 d2                	xor    edx,edx
c000291a:	89 c8                	mov    eax,ecx
c000291c:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000291f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002923:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002927:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000292b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000292f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002932:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002935:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002939:	31 d2                	xor    edx,edx
c000293b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000293f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002943:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002946:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002949:	83 fb 03             	cmp    ebx,0x3
c000294c:	75 2b                	jne    c0002979 <mount_volume+0x264>
c000294e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002951:	e8 2f f3 ff ff       	call   c0001c85 <ld_word>
c0002956:	66 09 c7             	or     di,ax
c0002959:	0f 85 7e fe ff ff    	jne    c00027dd <mount_volume+0xc8>
c000295f:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002965:	c1 e6 02             	shl    esi,0x2
c0002968:	e8 25 f3 ff ff       	call   c0001c92 <ld_dword>
c000296d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002974:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002977:	eb 30                	jmp    c00029a9 <mount_volume+0x294>
c0002979:	66 85 ff             	test   di,di
c000297c:	0f 84 5b fe ff ff    	je     c00027dd <mount_volume+0xc8>
c0002982:	31 d2                	xor    edx,edx
c0002984:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002988:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000298c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002990:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002993:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002996:	83 fb 02             	cmp    ebx,0x2
c0002999:	75 04                	jne    c000299f <mount_volume+0x28a>
c000299b:	01 f6                	add    esi,esi
c000299d:	eb 0a                	jmp    c00029a9 <mount_volume+0x294>
c000299f:	8d 04 76             	lea    eax,[esi+esi*2]
c00029a2:	83 e6 01             	and    esi,0x1
c00029a5:	d1 e8                	shr    eax,1
c00029a7:	01 c6                	add    esi,eax
c00029a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029af:	c1 ee 09             	shr    esi,0x9
c00029b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029b6:	0f 87 21 fe ff ff    	ja     c00027dd <mount_volume+0xc8>
c00029bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029ce:	83 fb 03             	cmp    ebx,0x3
c00029d1:	75 7a                	jne    c0002a4d <mount_volume+0x338>
c00029d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029d9:	e8 a7 f2 ff ff       	call   c0001c85 <ld_word>
c00029de:	66 48                	dec    ax
c00029e0:	75 6b                	jne    c0002a4d <mount_volume+0x338>
c00029e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029ea:	83 c2 01             	add    edx,0x1
c00029ed:	89 e8                	mov    eax,ebp
c00029ef:	83 d1 00             	adc    ecx,0x0
c00029f2:	e8 6c fa ff ff       	call   c0002463 <move_window>
c00029f7:	85 c0                	test   eax,eax
c00029f9:	75 52                	jne    c0002a4d <mount_volume+0x338>
c00029fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a05:	e8 7b f2 ff ff       	call   c0001c85 <ld_word>
c0002a0a:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a0e:	75 3d                	jne    c0002a4d <mount_volume+0x338>
c0002a10:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a13:	e8 7a f2 ff ff       	call   c0001c92 <ld_dword>
c0002a18:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a1d:	75 2e                	jne    c0002a4d <mount_volume+0x338>
c0002a1f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a25:	e8 68 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a2a:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a2f:	75 1c                	jne    c0002a4d <mount_volume+0x338>
c0002a31:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a37:	e8 56 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a3c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a3f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a45:	e8 48 f2 ff ff       	call   c0001c92 <ld_dword>
c0002a4a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a4d:	66 a1 c0 ed 02 c0    	mov    ax,ds:0xc002edc0
c0002a53:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a56:	40                   	inc    eax
c0002a57:	31 db                	xor    ebx,ebx
c0002a59:	66 a3 c0 ed 02 c0    	mov    ds:0xc002edc0,ax
c0002a5f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a63:	e9 0c 02 00 00       	jmp    c0002c74 <mount_volume+0x55f>
c0002a68:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a6e:	e8 12 f2 ff ff       	call   c0001c85 <ld_word>
c0002a73:	66 3d 00 01          	cmp    ax,0x100
c0002a77:	0f 85 60 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a7d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a84:	0f 85 53 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002a8a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a90:	e8 15 f2 ff ff       	call   c0001caa <ld_qword>
c0002a95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a99:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a9d:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002aa3:	e8 ea f1 ff ff       	call   c0001c92 <ld_dword>
c0002aa8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002aab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ab1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ab4:	fe c8                	dec    al
c0002ab6:	0f 85 21 fd ff ff    	jne    c00027dd <mount_volume+0xc8>
c0002abc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ac3:	bb 01 00 00 00       	mov    ebx,0x1
c0002ac8:	d3 e3                	shl    ebx,cl
c0002aca:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002ace:	66 85 db             	test   bx,bx
c0002ad1:	0f 84 06 fd ff ff    	je     c00027dd <mount_volume+0xc8>
c0002ad7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002add:	e8 b0 f1 ff ff       	call   c0001c92 <ld_dword>
c0002ae2:	89 c6                	mov    esi,eax
c0002ae4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ae9:	0f 87 ee fc ff ff    	ja     c00027dd <mount_volume+0xc8>
c0002aef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002af3:	8d 40 02             	lea    eax,[eax+0x2]
c0002af6:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002af9:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002afc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b00:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b03:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b09:	e8 84 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b0e:	31 d2                	xor    edx,edx
c0002b10:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b14:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b18:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b1c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b20:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b23:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b26:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b2c:	e8 61 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b31:	31 d2                	xor    edx,edx
c0002b33:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b37:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b42:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b45:	0f b7 c3             	movzx  eax,bx
c0002b48:	31 d2                	xor    edx,edx
c0002b4a:	0f af f0             	imul   esi,eax
c0002b4d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b51:	89 f0                	mov    eax,esi
c0002b53:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b57:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b5b:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b5f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b63:	39 c1                	cmp    ecx,eax
c0002b65:	89 df                	mov    edi,ebx
c0002b67:	19 d7                	sbb    edi,edx
c0002b69:	0f 82 6e fc ff ff    	jb     c00027dd <mount_volume+0xc8>
c0002b6f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b75:	31 db                	xor    ebx,ebx
c0002b77:	e8 16 f1 ff ff       	call   c0001c92 <ld_dword>
c0002b7c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b83:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b86:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b8e:	85 db                	test   ebx,ebx
c0002b90:	75 39                	jne    c0002bcb <mount_volume+0x4b6>
c0002b92:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b96:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b9a:	0f 86 3d fc ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002ba0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002ba3:	31 ff                	xor    edi,edi
c0002ba5:	89 e8                	mov    eax,ebp
c0002ba7:	e8 72 f3 ff ff       	call   c0001f1e <clst2sect>
c0002bac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bb0:	01 c6                	add    esi,eax
c0002bb2:	89 e8                	mov    eax,ebp
c0002bb4:	11 d7                	adc    edi,edx
c0002bb6:	89 f2                	mov    edx,esi
c0002bb8:	89 f9                	mov    ecx,edi
c0002bba:	e8 a4 f8 ff ff       	call   c0002463 <move_window>
c0002bbf:	85 c0                	test   eax,eax
c0002bc1:	0f 85 07 fc ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002bc7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bcb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bd0:	74 0b                	je     c0002bdd <mount_volume+0x4c8>
c0002bd2:	83 c3 20             	add    ebx,0x20
c0002bd5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bdb:	eb b1                	jmp    c0002b8e <mount_volume+0x479>
c0002bdd:	8d 75 54             	lea    esi,[ebp+0x54]
c0002be0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002be4:	e8 a9 f0 ff ff       	call   c0001c92 <ld_dword>
c0002be9:	89 c3                	mov    ebx,eax
c0002beb:	83 f8 01             	cmp    eax,0x1
c0002bee:	0f 86 e9 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bf4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bf7:	0f 86 e0 fb ff ff    	jbe    c00027dd <mount_volume+0xc8>
c0002bfd:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c00:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c04:	0f af c2             	imul   eax,edx
c0002c07:	31 d2                	xor    edx,edx
c0002c09:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c0c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c0f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c12:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c15:	31 c9                	xor    ecx,ecx
c0002c17:	89 da                	mov    edx,ebx
c0002c19:	89 e8                	mov    eax,ebp
c0002c1b:	c1 ea 07             	shr    edx,0x7
c0002c1e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c21:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c24:	e8 3a f8 ff ff       	call   c0002463 <move_window>
c0002c29:	85 c0                	test   eax,eax
c0002c2b:	0f 85 9d fb ff ff    	jne    c00027ce <mount_volume+0xb9>
c0002c31:	89 d8                	mov    eax,ebx
c0002c33:	83 e0 7f             	and    eax,0x7f
c0002c36:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c39:	e8 54 f0 ff ff       	call   c0001c92 <ld_dword>
c0002c3e:	83 f8 ff             	cmp    eax,0xffffffff
c0002c41:	74 0a                	je     c0002c4d <mount_volume+0x538>
c0002c43:	43                   	inc    ebx
c0002c44:	39 d8                	cmp    eax,ebx
c0002c46:	74 cd                	je     c0002c15 <mount_volume+0x500>
c0002c48:	e9 90 fb ff ff       	jmp    c00027dd <mount_volume+0xc8>
c0002c4d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c54:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c5b:	bb 04 00 00 00       	mov    ebx,0x4
c0002c60:	e9 e8 fd ff ff       	jmp    c0002a4d <mount_volume+0x338>
c0002c65:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c6a:	19 db                	sbb    ebx,ebx
c0002c6c:	83 c3 02             	add    ebx,0x2
c0002c6f:	e9 93 fc ff ff       	jmp    c0002907 <mount_volume+0x1f2>
c0002c74:	83 c4 3c             	add    esp,0x3c
c0002c77:	89 d8                	mov    eax,ebx
c0002c79:	5b                   	pop    ebx
c0002c7a:	5e                   	pop    esi
c0002c7b:	5f                   	pop    edi
c0002c7c:	5d                   	pop    ebp
c0002c7d:	c3                   	ret    

c0002c7e <find_bitmap>:
c0002c7e:	55                   	push   ebp
c0002c7f:	57                   	push   edi
c0002c80:	89 c7                	mov    edi,eax
c0002c82:	56                   	push   esi
c0002c83:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c86:	53                   	push   ebx
c0002c87:	83 ec 1c             	sub    esp,0x1c
c0002c8a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c8d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c91:	83 e8 02             	sub    eax,0x2
c0002c94:	39 f0                	cmp    eax,esi
c0002c96:	77 02                	ja     c0002c9a <find_bitmap+0x1c>
c0002c98:	31 f6                	xor    esi,esi
c0002c9a:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c9e:	89 f3                	mov    ebx,esi
c0002ca0:	31 ed                	xor    ebp,ebp
c0002ca2:	31 c9                	xor    ecx,ecx
c0002ca4:	89 da                	mov    edx,ebx
c0002ca6:	89 f8                	mov    eax,edi
c0002ca8:	c1 ea 0c             	shr    edx,0xc
c0002cab:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cae:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cb1:	e8 ad f7 ff ff       	call   c0002463 <move_window>
c0002cb6:	85 c0                	test   eax,eax
c0002cb8:	75 68                	jne    c0002d22 <find_bitmap+0xa4>
c0002cba:	89 da                	mov    edx,ebx
c0002cbc:	89 d9                	mov    ecx,ebx
c0002cbe:	c1 ea 03             	shr    edx,0x3
c0002cc1:	83 e1 07             	and    ecx,0x7
c0002cc4:	b8 01 00 00 00       	mov    eax,0x1
c0002cc9:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ccf:	d3 e0                	shl    eax,cl
c0002cd1:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cd4:	83 e9 02             	sub    ecx,0x2
c0002cd7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cdb:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cdf:	43                   	inc    ebx
c0002ce0:	21 c1                	and    ecx,eax
c0002ce2:	d1 e0                	shl    eax,1
c0002ce4:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ce8:	77 09                	ja     c0002cf3 <find_bitmap+0x75>
c0002cea:	31 db                	xor    ebx,ebx
c0002cec:	ba 00 02 00 00       	mov    edx,0x200
c0002cf1:	31 c0                	xor    eax,eax
c0002cf3:	84 c9                	test   cl,cl
c0002cf5:	75 10                	jne    c0002d07 <find_bitmap+0x89>
c0002cf7:	45                   	inc    ebp
c0002cf8:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cfc:	75 0f                	jne    c0002d0d <find_bitmap+0x8f>
c0002cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d02:	83 c0 02             	add    eax,0x2
c0002d05:	eb 22                	jmp    c0002d29 <find_bitmap+0xab>
c0002d07:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d0b:	31 ed                	xor    ebp,ebp
c0002d0d:	39 de                	cmp    esi,ebx
c0002d0f:	74 16                	je     c0002d27 <find_bitmap+0xa9>
c0002d11:	84 c0                	test   al,al
c0002d13:	75 c6                	jne    c0002cdb <find_bitmap+0x5d>
c0002d15:	42                   	inc    edx
c0002d16:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d1c:	77 84                	ja     c0002ca2 <find_bitmap+0x24>
c0002d1e:	b0 01                	mov    al,0x1
c0002d20:	eb b9                	jmp    c0002cdb <find_bitmap+0x5d>
c0002d22:	83 c8 ff             	or     eax,0xffffffff
c0002d25:	eb 02                	jmp    c0002d29 <find_bitmap+0xab>
c0002d27:	31 c0                	xor    eax,eax
c0002d29:	83 c4 1c             	add    esp,0x1c
c0002d2c:	5b                   	pop    ebx
c0002d2d:	5e                   	pop    esi
c0002d2e:	5f                   	pop    edi
c0002d2f:	5d                   	pop    ebp
c0002d30:	c3                   	ret    

c0002d31 <change_bitmap>:
c0002d31:	55                   	push   ebp
c0002d32:	89 cd                	mov    ebp,ecx
c0002d34:	57                   	push   edi
c0002d35:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d38:	56                   	push   esi
c0002d39:	89 c7                	mov    edi,eax
c0002d3b:	53                   	push   ebx
c0002d3c:	89 c8                	mov    eax,ecx
c0002d3e:	83 ec 1c             	sub    esp,0x1c
c0002d41:	31 d2                	xor    edx,edx
c0002d43:	89 ce                	mov    esi,ecx
c0002d45:	c1 e8 0c             	shr    eax,0xc
c0002d48:	bb 01 00 00 00       	mov    ebx,0x1
c0002d4d:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d50:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d53:	c1 ee 03             	shr    esi,0x3
c0002d56:	83 e1 07             	and    ecx,0x7
c0002d59:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d5f:	d3 e3                	shl    ebx,cl
c0002d61:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d65:	89 c1                	mov    ecx,eax
c0002d67:	89 d3                	mov    ebx,edx
c0002d69:	83 c1 01             	add    ecx,0x1
c0002d6c:	83 d3 00             	adc    ebx,0x0
c0002d6f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d73:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d77:	89 d1                	mov    ecx,edx
c0002d79:	89 c2                	mov    edx,eax
c0002d7b:	89 f8                	mov    eax,edi
c0002d7d:	e8 e1 f6 ff ff       	call   c0002463 <move_window>
c0002d82:	89 c1                	mov    ecx,eax
c0002d84:	85 c0                	test   eax,eax
c0002d86:	75 48                	jne    c0002dd0 <change_bitmap+0x9f>
c0002d88:	31 d2                	xor    edx,edx
c0002d8a:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d8e:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d92:	0f 95 c2             	setne  dl
c0002d95:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d99:	74 3c                	je     c0002dd7 <change_bitmap+0xa6>
c0002d9b:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d9f:	4d                   	dec    ebp
c0002da0:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002da4:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002da8:	74 32                	je     c0002ddc <change_bitmap+0xab>
c0002daa:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dae:	75 d8                	jne    c0002d88 <change_bitmap+0x57>
c0002db0:	8d 46 01             	lea    eax,[esi+0x1]
c0002db3:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002db8:	89 c3                	mov    ebx,eax
c0002dba:	31 f6                	xor    esi,esi
c0002dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dc4:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002dca:	74 99                	je     c0002d65 <change_bitmap+0x34>
c0002dcc:	89 de                	mov    esi,ebx
c0002dce:	eb b8                	jmp    c0002d88 <change_bitmap+0x57>
c0002dd0:	b9 01 00 00 00       	mov    ecx,0x1
c0002dd5:	eb 05                	jmp    c0002ddc <change_bitmap+0xab>
c0002dd7:	b9 02 00 00 00       	mov    ecx,0x2
c0002ddc:	83 c4 1c             	add    esp,0x1c
c0002ddf:	89 c8                	mov    eax,ecx
c0002de1:	5b                   	pop    ebx
c0002de2:	5e                   	pop    esi
c0002de3:	5f                   	pop    edi
c0002de4:	5d                   	pop    ebp
c0002de5:	c3                   	ret    

c0002de6 <put_fat>:
c0002de6:	83 fa 01             	cmp    edx,0x1
c0002de9:	0f 86 7b 01 00 00    	jbe    c0002f6a <put_fat+0x184>
c0002def:	55                   	push   ebp
c0002df0:	57                   	push   edi
c0002df1:	89 cf                	mov    edi,ecx
c0002df3:	56                   	push   esi
c0002df4:	b9 02 00 00 00       	mov    ecx,0x2
c0002df9:	53                   	push   ebx
c0002dfa:	89 c6                	mov    esi,eax
c0002dfc:	83 ec 1c             	sub    esp,0x1c
c0002dff:	89 d3                	mov    ebx,edx
c0002e01:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e04:	0f 86 68 01 00 00    	jbe    c0002f72 <put_fat+0x18c>
c0002e0a:	8a 00                	mov    al,BYTE PTR [eax]
c0002e0c:	3c 02                	cmp    al,0x2
c0002e0e:	0f 84 c7 00 00 00    	je     c0002edb <put_fat+0xf5>
c0002e14:	77 09                	ja     c0002e1f <put_fat+0x39>
c0002e16:	fe c8                	dec    al
c0002e18:	74 17                	je     c0002e31 <put_fat+0x4b>
c0002e1a:	e9 53 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e1f:	b9 02 00 00 00       	mov    ecx,0x2
c0002e24:	3c 04                	cmp    al,0x4
c0002e26:	0f 86 e1 00 00 00    	jbe    c0002f0d <put_fat+0x127>
c0002e2c:	e9 41 01 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002e31:	89 d5                	mov    ebp,edx
c0002e33:	31 c9                	xor    ecx,ecx
c0002e35:	d1 ed                	shr    ebp,1
c0002e37:	89 f0                	mov    eax,esi
c0002e39:	01 d5                	add    ebp,edx
c0002e3b:	89 ea                	mov    edx,ebp
c0002e3d:	c1 ea 09             	shr    edx,0x9
c0002e40:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e43:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e46:	e8 18 f6 ff ff       	call   c0002463 <move_window>
c0002e4b:	89 c1                	mov    ecx,eax
c0002e4d:	85 c0                	test   eax,eax
c0002e4f:	0f 85 1d 01 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002e55:	8d 46 54             	lea    eax,[esi+0x54]
c0002e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e5c:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e5f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e69:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e6d:	89 f8                	mov    eax,edi
c0002e6f:	83 e3 01             	and    ebx,0x1
c0002e72:	74 0d                	je     c0002e81 <put_fat+0x9b>
c0002e74:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e77:	89 fa                	mov    edx,edi
c0002e79:	83 e0 0f             	and    eax,0xf
c0002e7c:	c1 e2 04             	shl    edx,0x4
c0002e7f:	09 d0                	or     eax,edx
c0002e81:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e88:	31 c9                	xor    ecx,ecx
c0002e8a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e8e:	c1 ea 09             	shr    edx,0x9
c0002e91:	89 f0                	mov    eax,esi
c0002e93:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e96:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e99:	e8 c5 f5 ff ff       	call   c0002463 <move_window>
c0002e9e:	89 c1                	mov    ecx,eax
c0002ea0:	85 c0                	test   eax,eax
c0002ea2:	0f 85 ca 00 00 00    	jne    c0002f72 <put_fat+0x18c>
c0002ea8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002eac:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002eb2:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002eb6:	85 db                	test   ebx,ebx
c0002eb8:	74 07                	je     c0002ec1 <put_fat+0xdb>
c0002eba:	c1 ef 04             	shr    edi,0x4
c0002ebd:	89 fa                	mov    edx,edi
c0002ebf:	eb 0e                	jmp    c0002ecf <put_fat+0xe9>
c0002ec1:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ec4:	c1 ef 08             	shr    edi,0x8
c0002ec7:	83 e2 f0             	and    edx,0xfffffff0
c0002eca:	83 e7 0f             	and    edi,0xf
c0002ecd:	09 fa                	or     edx,edi
c0002ecf:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ed2:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ed6:	e9 97 00 00 00       	jmp    c0002f72 <put_fat+0x18c>
c0002edb:	31 c9                	xor    ecx,ecx
c0002edd:	c1 ea 08             	shr    edx,0x8
c0002ee0:	89 f0                	mov    eax,esi
c0002ee2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ee5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee8:	e8 76 f5 ff ff       	call   c0002463 <move_window>
c0002eed:	89 c1                	mov    ecx,eax
c0002eef:	85 c0                	test   eax,eax
c0002ef1:	75 7f                	jne    c0002f72 <put_fat+0x18c>
c0002ef3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef7:	01 db                	add    ebx,ebx
c0002ef9:	0f b7 d7             	movzx  edx,di
c0002efc:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f02:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f06:	e8 ec ed ff ff       	call   c0001cf7 <st_word>
c0002f0b:	eb 53                	jmp    c0002f60 <put_fat+0x17a>
c0002f0d:	31 c9                	xor    ecx,ecx
c0002f0f:	c1 ea 07             	shr    edx,0x7
c0002f12:	89 f0                	mov    eax,esi
c0002f14:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f17:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f1a:	e8 44 f5 ff ff       	call   c0002463 <move_window>
c0002f1f:	89 c1                	mov    ecx,eax
c0002f21:	85 c0                	test   eax,eax
c0002f23:	75 4d                	jne    c0002f72 <put_fat+0x18c>
c0002f25:	c1 e3 02             	shl    ebx,0x2
c0002f28:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f2e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f31:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f35:	74 1c                	je     c0002f53 <put_fat+0x16d>
c0002f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f3b:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f41:	89 d8                	mov    eax,ebx
c0002f43:	e8 4a ed ff ff       	call   c0001c92 <ld_dword>
c0002f48:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f4c:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f51:	09 c7                	or     edi,eax
c0002f53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f57:	89 fa                	mov    edx,edi
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 9b ed ff ff       	call   c0001cfb <st_dword>
c0002f60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f64:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f68:	eb 08                	jmp    c0002f72 <put_fat+0x18c>
c0002f6a:	b9 02 00 00 00       	mov    ecx,0x2
c0002f6f:	89 c8                	mov    eax,ecx
c0002f71:	c3                   	ret    
c0002f72:	83 c4 1c             	add    esp,0x1c
c0002f75:	89 c8                	mov    eax,ecx
c0002f77:	5b                   	pop    ebx
c0002f78:	5e                   	pop    esi
c0002f79:	5f                   	pop    edi
c0002f7a:	5d                   	pop    ebp
c0002f7b:	c3                   	ret    

c0002f7c <fill_last_frag>:
c0002f7c:	57                   	push   edi
c0002f7d:	89 cf                	mov    edi,ecx
c0002f7f:	56                   	push   esi
c0002f80:	89 d6                	mov    esi,edx
c0002f82:	53                   	push   ebx
c0002f83:	89 c3                	mov    ebx,eax
c0002f85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f88:	85 c0                	test   eax,eax
c0002f8a:	74 21                	je     c0002fad <fill_last_frag+0x31>
c0002f8c:	89 f9                	mov    ecx,edi
c0002f8e:	83 f8 01             	cmp    eax,0x1
c0002f91:	76 05                	jbe    c0002f98 <fill_last_frag+0x1c>
c0002f93:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f96:	29 c1                	sub    ecx,eax
c0002f98:	8d 56 01             	lea    edx,[esi+0x1]
c0002f9b:	29 c2                	sub    edx,eax
c0002f9d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f9f:	e8 42 fe ff ff       	call   c0002de6 <put_fat>
c0002fa4:	85 c0                	test   eax,eax
c0002fa6:	75 05                	jne    c0002fad <fill_last_frag+0x31>
c0002fa8:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fab:	eb d8                	jmp    c0002f85 <fill_last_frag+0x9>
c0002fad:	5b                   	pop    ebx
c0002fae:	5e                   	pop    esi
c0002faf:	5f                   	pop    edi
c0002fb0:	c3                   	ret    

c0002fb1 <fill_first_frag>:
c0002fb1:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fb5:	75 2d                	jne    c0002fe4 <fill_first_frag+0x33>
c0002fb7:	57                   	push   edi
c0002fb8:	56                   	push   esi
c0002fb9:	53                   	push   ebx
c0002fba:	89 c3                	mov    ebx,eax
c0002fbc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fbf:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fc2:	01 d7                	add    edi,edx
c0002fc4:	39 fa                	cmp    edx,edi
c0002fc6:	74 14                	je     c0002fdc <fill_first_frag+0x2b>
c0002fc8:	8d 72 01             	lea    esi,[edx+0x1]
c0002fcb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fcd:	89 f1                	mov    ecx,esi
c0002fcf:	e8 12 fe ff ff       	call   c0002de6 <put_fat>
c0002fd4:	89 f2                	mov    edx,esi
c0002fd6:	85 c0                	test   eax,eax
c0002fd8:	74 ea                	je     c0002fc4 <fill_first_frag+0x13>
c0002fda:	eb 0b                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fdc:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fe0:	31 c0                	xor    eax,eax
c0002fe2:	eb 03                	jmp    c0002fe7 <fill_first_frag+0x36>
c0002fe4:	31 c0                	xor    eax,eax
c0002fe6:	c3                   	ret    
c0002fe7:	5b                   	pop    ebx
c0002fe8:	5e                   	pop    esi
c0002fe9:	5f                   	pop    edi
c0002fea:	c3                   	ret    

c0002feb <get_fat>:
c0002feb:	83 fa 01             	cmp    edx,0x1
c0002fee:	0f 86 db 01 00 00    	jbe    c00031cf <get_fat+0x1e4>
c0002ff4:	55                   	push   ebp
c0002ff5:	b9 01 00 00 00       	mov    ecx,0x1
c0002ffa:	57                   	push   edi
c0002ffb:	56                   	push   esi
c0002ffc:	53                   	push   ebx
c0002ffd:	83 ec 1c             	sub    esp,0x1c
c0003000:	8b 38                	mov    edi,DWORD PTR [eax]
c0003002:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0003005:	0f 86 cc 01 00 00    	jbe    c00031d7 <get_fat+0x1ec>
c000300b:	89 c3                	mov    ebx,eax
c000300d:	89 d6                	mov    esi,edx
c000300f:	8a 07                	mov    al,BYTE PTR [edi]
c0003011:	3c 02                	cmp    al,0x2
c0003013:	0f 84 99 00 00 00    	je     c00030b2 <get_fat+0xc7>
c0003019:	77 09                	ja     c0003024 <get_fat+0x39>
c000301b:	fe c8                	dec    al
c000301d:	74 1a                	je     c0003039 <get_fat+0x4e>
c000301f:	e9 b3 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003024:	3c 03                	cmp    al,0x3
c0003026:	0f 84 b5 00 00 00    	je     c00030e1 <get_fat+0xf6>
c000302c:	3c 04                	cmp    al,0x4
c000302e:	0f 84 e3 00 00 00    	je     c0003117 <get_fat+0x12c>
c0003034:	e9 9e 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c0003039:	89 d3                	mov    ebx,edx
c000303b:	31 c9                	xor    ecx,ecx
c000303d:	d1 eb                	shr    ebx,1
c000303f:	89 f8                	mov    eax,edi
c0003041:	01 d3                	add    ebx,edx
c0003043:	89 da                	mov    edx,ebx
c0003045:	c1 ea 09             	shr    edx,0x9
c0003048:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000304b:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000304e:	e8 10 f4 ff ff       	call   c0002463 <move_window>
c0003053:	85 c0                	test   eax,eax
c0003055:	74 08                	je     c000305f <get_fat+0x74>
c0003057:	83 c9 ff             	or     ecx,0xffffffff
c000305a:	e9 78 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c000305f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003062:	31 c9                	xor    ecx,ecx
c0003064:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000306a:	89 ea                	mov    edx,ebp
c000306c:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003070:	c1 ea 09             	shr    edx,0x9
c0003073:	89 f8                	mov    eax,edi
c0003075:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003078:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307b:	e8 e3 f3 ff ff       	call   c0002463 <move_window>
c0003080:	85 c0                	test   eax,eax
c0003082:	75 d3                	jne    c0003057 <get_fat+0x6c>
c0003084:	0f b6 c3             	movzx  eax,bl
c0003087:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000308d:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003092:	c1 e3 08             	shl    ebx,0x8
c0003095:	09 c3                	or     ebx,eax
c0003097:	89 d9                	mov    ecx,ebx
c0003099:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000309f:	83 e6 01             	and    esi,0x1
c00030a2:	0f 84 2f 01 00 00    	je     c00031d7 <get_fat+0x1ec>
c00030a8:	89 d9                	mov    ecx,ebx
c00030aa:	c1 e9 04             	shr    ecx,0x4
c00030ad:	e9 25 01 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030b2:	31 c9                	xor    ecx,ecx
c00030b4:	c1 ea 08             	shr    edx,0x8
c00030b7:	89 f8                	mov    eax,edi
c00030b9:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030bc:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030bf:	e8 9f f3 ff ff       	call   c0002463 <move_window>
c00030c4:	85 c0                	test   eax,eax
c00030c6:	75 8f                	jne    c0003057 <get_fat+0x6c>
c00030c8:	01 f6                	add    esi,esi
c00030ca:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030d0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030d4:	e8 ac eb ff ff       	call   c0001c85 <ld_word>
c00030d9:	0f b7 c8             	movzx  ecx,ax
c00030dc:	e9 f6 00 00 00       	jmp    c00031d7 <get_fat+0x1ec>
c00030e1:	31 c9                	xor    ecx,ecx
c00030e3:	c1 ea 07             	shr    edx,0x7
c00030e6:	89 f8                	mov    eax,edi
c00030e8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030eb:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ee:	e8 70 f3 ff ff       	call   c0002463 <move_window>
c00030f3:	85 c0                	test   eax,eax
c00030f5:	0f 85 5c ff ff ff    	jne    c0003057 <get_fat+0x6c>
c00030fb:	c1 e6 02             	shl    esi,0x2
c00030fe:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003104:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003108:	e8 85 eb ff ff       	call   c0001c92 <ld_dword>
c000310d:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003112:	e9 b4 00 00 00       	jmp    c00031cb <get_fat+0x1e0>
c0003117:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000311a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000311d:	89 d1                	mov    ecx,edx
c000311f:	09 c1                	or     ecx,eax
c0003121:	74 06                	je     c0003129 <get_fat+0x13e>
c0003123:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003127:	75 0f                	jne    c0003138 <get_fat+0x14d>
c0003129:	b9 01 00 00 00       	mov    ecx,0x1
c000312e:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003132:	0f 85 9f 00 00 00    	jne    c00031d7 <get_fat+0x1ec>
c0003138:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c000313c:	89 f5                	mov    ebp,esi
c000313e:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003143:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003146:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003149:	80 f9 02             	cmp    cl,0x2
c000314c:	75 35                	jne    c0003183 <get_fat+0x198>
c000314e:	83 c0 ff             	add    eax,0xffffffff
c0003151:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003156:	83 d2 ff             	adc    edx,0xffffffff
c0003159:	31 db                	xor    ebx,ebx
c000315b:	0f ac d0 09          	shrd   eax,edx,0x9
c000315f:	53                   	push   ebx
c0003160:	c1 ea 09             	shr    edx,0x9
c0003163:	51                   	push   ecx
c0003164:	52                   	push   edx
c0003165:	50                   	push   eax
c0003166:	e8 49 40 02 00       	call   c00271b4 <__udivdi3>
c000316b:	83 c4 10             	add    esp,0x10
c000316e:	b9 01 00 00 00       	mov    ecx,0x1
c0003173:	39 c5                	cmp    ebp,eax
c0003175:	77 60                	ja     c00031d7 <get_fat+0x1ec>
c0003177:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000317c:	74 59                	je     c00031d7 <get_fat+0x1ec>
c000317e:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003181:	eb 54                	jmp    c00031d7 <get_fat+0x1ec>
c0003183:	80 f9 03             	cmp    cl,0x3
c0003186:	75 05                	jne    c000318d <get_fat+0x1a2>
c0003188:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000318b:	77 f1                	ja     c000317e <get_fat+0x193>
c000318d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003192:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003196:	75 3f                	jne    c00031d7 <get_fat+0x1ec>
c0003198:	31 c9                	xor    ecx,ecx
c000319a:	89 f2                	mov    edx,esi
c000319c:	89 f8                	mov    eax,edi
c000319e:	c1 ea 07             	shr    edx,0x7
c00031a1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031a4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031a7:	e8 b7 f2 ff ff       	call   c0002463 <move_window>
c00031ac:	85 c0                	test   eax,eax
c00031ae:	0f 85 a3 fe ff ff    	jne    c0003057 <get_fat+0x6c>
c00031b4:	c1 e6 02             	shl    esi,0x2
c00031b7:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031bd:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031c1:	e8 cc ea ff ff       	call   c0001c92 <ld_dword>
c00031c6:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031cb:	89 c1                	mov    ecx,eax
c00031cd:	eb 08                	jmp    c00031d7 <get_fat+0x1ec>
c00031cf:	b9 01 00 00 00       	mov    ecx,0x1
c00031d4:	89 c8                	mov    eax,ecx
c00031d6:	c3                   	ret    
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 c8                	mov    eax,ecx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <dir_sdi>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	89 c3                	mov    ebx,eax
c00031e7:	83 ec 1c             	sub    esp,0x1c
c00031ea:	8b 38                	mov    edi,DWORD PTR [eax]
c00031ec:	31 c0                	xor    eax,eax
c00031ee:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031f1:	0f 94 c0             	sete   al
c00031f4:	48                   	dec    eax
c00031f5:	25 00 00 20 f0       	and    eax,0xf0200000
c00031fa:	05 00 00 00 10       	add    eax,0x10000000
c00031ff:	39 d0                	cmp    eax,edx
c0003201:	77 0a                	ja     c000320d <dir_sdi+0x2c>
c0003203:	b8 02 00 00 00       	mov    eax,0x2
c0003208:	e9 c4 00 00 00       	jmp    c00032d1 <dir_sdi+0xf0>
c000320d:	89 d6                	mov    esi,edx
c000320f:	f6 c2 1f             	test   dl,0x1f
c0003212:	75 ef                	jne    c0003203 <dir_sdi+0x22>
c0003214:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0003217:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000321a:	85 c9                	test   ecx,ecx
c000321c:	75 2d                	jne    c000324b <dir_sdi+0x6a>
c000321e:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003221:	77 1b                	ja     c000323e <dir_sdi+0x5d>
c0003223:	89 f2                	mov    edx,esi
c0003225:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003229:	c1 ea 05             	shr    edx,0x5
c000322c:	39 c2                	cmp    edx,eax
c000322e:	73 d3                	jae    c0003203 <dir_sdi+0x22>
c0003230:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003233:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003236:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003239:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000323c:	eb 4b                	jmp    c0003289 <dir_sdi+0xa8>
c000323e:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003241:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003245:	85 c0                	test   eax,eax
c0003247:	74 da                	je     c0003223 <dir_sdi+0x42>
c0003249:	89 c1                	mov    ecx,eax
c000324b:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000324f:	c1 e5 09             	shl    ebp,0x9
c0003252:	89 ca                	mov    edx,ecx
c0003254:	39 ee                	cmp    esi,ebp
c0003256:	72 1c                	jb     c0003274 <dir_sdi+0x93>
c0003258:	89 d8                	mov    eax,ebx
c000325a:	e8 8c fd ff ff       	call   c0002feb <get_fat>
c000325f:	89 c1                	mov    ecx,eax
c0003261:	83 f8 ff             	cmp    eax,0xffffffff
c0003264:	74 66                	je     c00032cc <dir_sdi+0xeb>
c0003266:	83 f8 01             	cmp    eax,0x1
c0003269:	76 98                	jbe    c0003203 <dir_sdi+0x22>
c000326b:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000326e:	76 93                	jbe    c0003203 <dir_sdi+0x22>
c0003270:	29 ee                	sub    esi,ebp
c0003272:	eb de                	jmp    c0003252 <dir_sdi+0x71>
c0003274:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003278:	89 f8                	mov    eax,edi
c000327a:	e8 9f ec ff ff       	call   c0001f1e <clst2sect>
c000327f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003283:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003286:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003289:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000328c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000328f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003292:	89 d1                	mov    ecx,edx
c0003294:	09 c1                	or     ecx,eax
c0003296:	0f 84 67 ff ff ff    	je     c0003203 <dir_sdi+0x22>
c000329c:	89 f1                	mov    ecx,esi
c000329e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032a6:	c1 e9 09             	shr    ecx,0x9
c00032a9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032ad:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032b1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032b5:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032b8:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032be:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032c1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032c5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032c8:	31 c0                	xor    eax,eax
c00032ca:	eb 05                	jmp    c00032d1 <dir_sdi+0xf0>
c00032cc:	b8 01 00 00 00       	mov    eax,0x1
c00032d1:	83 c4 1c             	add    esp,0x1c
c00032d4:	5b                   	pop    ebx
c00032d5:	5e                   	pop    esi
c00032d6:	5f                   	pop    edi
c00032d7:	5d                   	pop    ebp
c00032d8:	c3                   	ret    

c00032d9 <create_chain>:
c00032d9:	55                   	push   ebp
c00032da:	89 c5                	mov    ebp,eax
c00032dc:	57                   	push   edi
c00032dd:	56                   	push   esi
c00032de:	53                   	push   ebx
c00032df:	83 ec 1c             	sub    esp,0x1c
c00032e2:	85 d2                	test   edx,edx
c00032e4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x21>
c00032ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ef:	85 ff                	test   edi,edi
c00032f1:	74 39                	je     c000332c <create_chain+0x53>
c00032f3:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032f6:	77 39                	ja     c0003331 <create_chain+0x58>
c00032f8:	eb 32                	jmp    c000332c <create_chain+0x53>
c00032fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032fe:	e8 e8 fc ff ff       	call   c0002feb <get_fat>
c0003303:	89 c3                	mov    ebx,eax
c0003305:	83 f8 01             	cmp    eax,0x1
c0003308:	77 0a                	ja     c0003314 <create_chain+0x3b>
c000330a:	bb 01 00 00 00       	mov    ebx,0x1
c000330f:	e9 ba 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c0003314:	83 f8 ff             	cmp    eax,0xffffffff
c0003317:	0f 84 62 01 00 00    	je     c000347f <create_chain+0x1a6>
c000331d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003320:	0f 87 a8 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c0003326:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000332a:	eb 05                	jmp    c0003331 <create_chain+0x58>
c000332c:	bf 01 00 00 00       	mov    edi,0x1
c0003331:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003335:	75 07                	jne    c000333e <create_chain+0x65>
c0003337:	31 db                	xor    ebx,ebx
c0003339:	e9 90 01 00 00       	jmp    c00034ce <create_chain+0x1f5>
c000333e:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003341:	75 74                	jne    c00033b7 <create_chain+0xde>
c0003343:	b9 01 00 00 00       	mov    ecx,0x1
c0003348:	89 fa                	mov    edx,edi
c000334a:	89 f0                	mov    eax,esi
c000334c:	e8 2d f9 ff ff       	call   c0002c7e <find_bitmap>
c0003351:	89 c3                	mov    ebx,eax
c0003353:	8d 40 ff             	lea    eax,[eax-0x1]
c0003356:	83 f8 fd             	cmp    eax,0xfffffffd
c0003359:	0f 87 6f 01 00 00    	ja     c00034ce <create_chain+0x1f5>
c000335f:	83 ec 0c             	sub    esp,0xc
c0003362:	b9 01 00 00 00       	mov    ecx,0x1
c0003367:	6a 01                	push   0x1
c0003369:	89 da                	mov    edx,ebx
c000336b:	89 f0                	mov    eax,esi
c000336d:	e8 bf f9 ff ff       	call   c0002d31 <change_bitmap>
c0003372:	83 c4 10             	add    esp,0x10
c0003375:	83 f8 02             	cmp    eax,0x2
c0003378:	74 90                	je     c000330a <create_chain+0x31>
c000337a:	83 f8 01             	cmp    eax,0x1
c000337d:	0f 84 fc 00 00 00    	je     c000347f <create_chain+0x1a6>
c0003383:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003388:	75 09                	jne    c0003393 <create_chain+0xba>
c000338a:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000338e:	e9 0c 01 00 00       	jmp    c000349f <create_chain+0x1c6>
c0003393:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003397:	0f 85 e7 00 00 00    	jne    c0003484 <create_chain+0x1ab>
c000339d:	8d 57 01             	lea    edx,[edi+0x1]
c00033a0:	39 da                	cmp    edx,ebx
c00033a2:	0f 84 f7 00 00 00    	je     c000349f <create_chain+0x1c6>
c00033a8:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033ab:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033af:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033b2:	e9 cd 00 00 00       	jmp    c0003484 <create_chain+0x1ab>
c00033b7:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033bb:	75 41                	jne    c00033fe <create_chain+0x125>
c00033bd:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033c0:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c3:	77 05                	ja     c00033ca <create_chain+0xf1>
c00033c5:	bb 02 00 00 00       	mov    ebx,0x2
c00033ca:	89 da                	mov    edx,ebx
c00033cc:	89 e8                	mov    eax,ebp
c00033ce:	e8 18 fc ff ff       	call   c0002feb <get_fat>
c00033d3:	83 f8 01             	cmp    eax,0x1
c00033d6:	0f 84 2e ff ff ff    	je     c000330a <create_chain+0x31>
c00033dc:	83 f8 ff             	cmp    eax,0xffffffff
c00033df:	0f 84 9a 00 00 00    	je     c000347f <create_chain+0x1a6>
c00033e5:	85 c0                	test   eax,eax
c00033e7:	74 11                	je     c00033fa <create_chain+0x121>
c00033e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033ec:	83 f8 01             	cmp    eax,0x1
c00033ef:	76 0d                	jbe    c00033fe <create_chain+0x125>
c00033f1:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033f4:	76 08                	jbe    c00033fe <create_chain+0x125>
c00033f6:	89 c7                	mov    edi,eax
c00033f8:	eb 04                	jmp    c00033fe <create_chain+0x125>
c00033fa:	85 db                	test   ebx,ebx
c00033fc:	75 38                	jne    c0003436 <create_chain+0x15d>
c00033fe:	89 fb                	mov    ebx,edi
c0003400:	43                   	inc    ebx
c0003401:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003404:	77 0e                	ja     c0003414 <create_chain+0x13b>
c0003406:	83 ff 01             	cmp    edi,0x1
c0003409:	0f 86 28 ff ff ff    	jbe    c0003337 <create_chain+0x5e>
c000340f:	bb 02 00 00 00       	mov    ebx,0x2
c0003414:	89 da                	mov    edx,ebx
c0003416:	89 e8                	mov    eax,ebp
c0003418:	e8 ce fb ff ff       	call   c0002feb <get_fat>
c000341d:	85 c0                	test   eax,eax
c000341f:	74 15                	je     c0003436 <create_chain+0x15d>
c0003421:	83 f8 01             	cmp    eax,0x1
c0003424:	0f 84 e0 fe ff ff    	je     c000330a <create_chain+0x31>
c000342a:	40                   	inc    eax
c000342b:	74 52                	je     c000347f <create_chain+0x1a6>
c000342d:	39 fb                	cmp    ebx,edi
c000342f:	75 cf                	jne    c0003400 <create_chain+0x127>
c0003431:	e9 01 ff ff ff       	jmp    c0003337 <create_chain+0x5e>
c0003436:	83 c9 ff             	or     ecx,0xffffffff
c0003439:	89 da                	mov    edx,ebx
c000343b:	89 f0                	mov    eax,esi
c000343d:	e8 a4 f9 ff ff       	call   c0002de6 <put_fat>
c0003442:	85 c0                	test   eax,eax
c0003444:	75 32                	jne    c0003478 <create_chain+0x19f>
c0003446:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000344b:	74 11                	je     c000345e <create_chain+0x185>
c000344d:	89 d9                	mov    ecx,ebx
c000344f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003453:	89 f0                	mov    eax,esi
c0003455:	e8 8c f9 ff ff       	call   c0002de6 <put_fat>
c000345a:	85 c0                	test   eax,eax
c000345c:	75 1a                	jne    c0003478 <create_chain+0x19f>
c000345e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003461:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003464:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003467:	8d 51 fe             	lea    edx,[ecx-0x2]
c000346a:	39 d0                	cmp    eax,edx
c000346c:	77 04                	ja     c0003472 <create_chain+0x199>
c000346e:	48                   	dec    eax
c000346f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003472:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003476:	eb 56                	jmp    c00034ce <create_chain+0x1f5>
c0003478:	48                   	dec    eax
c0003479:	0f 85 8b fe ff ff    	jne    c000330a <create_chain+0x31>
c000347f:	83 cb ff             	or     ebx,0xffffffff
c0003482:	eb 4a                	jmp    c00034ce <create_chain+0x1f5>
c0003484:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003488:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000348b:	41                   	inc    ecx
c000348c:	39 d9                	cmp    ecx,ebx
c000348e:	75 19                	jne    c00034a9 <create_chain+0x1d0>
c0003490:	b9 02 00 00 00       	mov    ecx,0x2
c0003495:	85 d2                	test   edx,edx
c0003497:	74 03                	je     c000349c <create_chain+0x1c3>
c0003499:	8d 4a 01             	lea    ecx,[edx+0x1]
c000349c:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000349f:	85 c0                	test   eax,eax
c00034a1:	0f 85 63 fe ff ff    	jne    c000330a <create_chain+0x31>
c00034a7:	eb b5                	jmp    c000345e <create_chain+0x185>
c00034a9:	85 d2                	test   edx,edx
c00034ab:	75 07                	jne    c00034b4 <create_chain+0x1db>
c00034ad:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034b4:	89 d9                	mov    ecx,ebx
c00034b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034ba:	89 e8                	mov    eax,ebp
c00034bc:	e8 bb fa ff ff       	call   c0002f7c <fill_last_frag>
c00034c1:	85 c0                	test   eax,eax
c00034c3:	75 b3                	jne    c0003478 <create_chain+0x19f>
c00034c5:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034cc:	eb 90                	jmp    c000345e <create_chain+0x185>
c00034ce:	83 c4 1c             	add    esp,0x1c
c00034d1:	89 d8                	mov    eax,ebx
c00034d3:	5b                   	pop    ebx
c00034d4:	5e                   	pop    esi
c00034d5:	5f                   	pop    edi
c00034d6:	5d                   	pop    ebp
c00034d7:	c3                   	ret    

c00034d8 <remove_chain>:
c00034d8:	55                   	push   ebp
c00034d9:	57                   	push   edi
c00034da:	56                   	push   esi
c00034db:	53                   	push   ebx
c00034dc:	83 ec 1c             	sub    esp,0x1c
c00034df:	83 fa 01             	cmp    edx,0x1
c00034e2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034e6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034e8:	77 0a                	ja     c00034f4 <remove_chain+0x1c>
c00034ea:	b8 02 00 00 00       	mov    eax,0x2
c00034ef:	e9 24 01 00 00       	jmp    c0003618 <remove_chain+0x140>
c00034f4:	89 d6                	mov    esi,edx
c00034f6:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034f9:	76 ef                	jbe    c00034ea <remove_chain+0x12>
c00034fb:	89 c7                	mov    edi,eax
c00034fd:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003502:	75 06                	jne    c000350a <remove_chain+0x32>
c0003504:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003508:	eb 54                	jmp    c000355e <remove_chain+0x86>
c000350a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000350d:	75 06                	jne    c0003515 <remove_chain+0x3d>
c000350f:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003513:	74 ef                	je     c0003504 <remove_chain+0x2c>
c0003515:	83 c9 ff             	or     ecx,0xffffffff
c0003518:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000351c:	89 d8                	mov    eax,ebx
c000351e:	e8 c3 f8 ff ff       	call   c0002de6 <put_fat>
c0003523:	85 c0                	test   eax,eax
c0003525:	74 dd                	je     c0003504 <remove_chain+0x2c>
c0003527:	e9 ec 00 00 00       	jmp    c0003618 <remove_chain+0x140>
c000352c:	83 f8 01             	cmp    eax,0x1
c000352f:	74 b9                	je     c00034ea <remove_chain+0x12>
c0003531:	83 f8 ff             	cmp    eax,0xffffffff
c0003534:	74 6d                	je     c00035a3 <remove_chain+0xcb>
c0003536:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003539:	75 6f                	jne    c00035aa <remove_chain+0xd2>
c000353b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000353e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003541:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003544:	39 d0                	cmp    eax,edx
c0003546:	73 08                	jae    c0003550 <remove_chain+0x78>
c0003548:	40                   	inc    eax
c0003549:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000354d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003550:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003553:	39 e9                	cmp    ecx,ebp
c0003555:	75 64                	jne    c00035bb <remove_chain+0xe3>
c0003557:	89 ee                	mov    esi,ebp
c0003559:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000355c:	76 0f                	jbe    c000356d <remove_chain+0x95>
c000355e:	89 f2                	mov    edx,esi
c0003560:	89 f8                	mov    eax,edi
c0003562:	e8 84 fa ff ff       	call   c0002feb <get_fat>
c0003567:	89 c5                	mov    ebp,eax
c0003569:	85 c0                	test   eax,eax
c000356b:	75 bf                	jne    c000352c <remove_chain+0x54>
c000356d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003570:	0f 85 a0 00 00 00    	jne    c0003616 <remove_chain+0x13e>
c0003576:	eb 6c                	jmp    c00035e4 <remove_chain+0x10c>
c0003578:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000357b:	84 c0                	test   al,al
c000357d:	75 7d                	jne    c00035fc <remove_chain+0x124>
c000357f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003582:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003586:	0f 84 86 00 00 00    	je     c0003612 <remove_chain+0x13a>
c000358c:	89 da                	mov    edx,ebx
c000358e:	89 f8                	mov    eax,edi
c0003590:	e8 56 fa ff ff       	call   c0002feb <get_fat>
c0003595:	83 f8 01             	cmp    eax,0x1
c0003598:	0f 86 4c ff ff ff    	jbe    c00034ea <remove_chain+0x12>
c000359e:	83 f8 ff             	cmp    eax,0xffffffff
c00035a1:	75 4e                	jne    c00035f1 <remove_chain+0x119>
c00035a3:	b8 01 00 00 00       	mov    eax,0x1
c00035a8:	eb 6e                	jmp    c0003618 <remove_chain+0x140>
c00035aa:	31 c9                	xor    ecx,ecx
c00035ac:	89 f2                	mov    edx,esi
c00035ae:	89 d8                	mov    eax,ebx
c00035b0:	e8 31 f8 ff ff       	call   c0002de6 <put_fat>
c00035b5:	85 c0                	test   eax,eax
c00035b7:	74 82                	je     c000353b <remove_chain+0x63>
c00035b9:	eb 5d                	jmp    c0003618 <remove_chain+0x140>
c00035bb:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035be:	75 1b                	jne    c00035db <remove_chain+0x103>
c00035c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035c4:	89 d8                	mov    eax,ebx
c00035c6:	83 ec 0c             	sub    esp,0xc
c00035c9:	6a 00                	push   0x0
c00035cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035cf:	e8 5d f7 ff ff       	call   c0002d31 <change_bitmap>
c00035d4:	83 c4 10             	add    esp,0x10
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 3d                	jne    c0003618 <remove_chain+0x140>
c00035db:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035df:	e9 73 ff ff ff       	jmp    c0003557 <remove_chain+0x7f>
c00035e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035e9:	75 8d                	jne    c0003578 <remove_chain+0xa0>
c00035eb:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ef:	eb 25                	jmp    c0003616 <remove_chain+0x13e>
c00035f1:	8d 53 01             	lea    edx,[ebx+0x1]
c00035f4:	89 c3                	mov    ebx,eax
c00035f6:	39 c2                	cmp    edx,eax
c00035f8:	74 88                	je     c0003582 <remove_chain+0xaa>
c00035fa:	eb 1a                	jmp    c0003616 <remove_chain+0x13e>
c00035fc:	3c 03                	cmp    al,0x3
c00035fe:	75 16                	jne    c0003616 <remove_chain+0x13e>
c0003600:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003603:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003607:	77 0d                	ja     c0003616 <remove_chain+0x13e>
c0003609:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000360c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003610:	72 04                	jb     c0003616 <remove_chain+0x13e>
c0003612:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003616:	31 c0                	xor    eax,eax
c0003618:	83 c4 1c             	add    esp,0x1c
c000361b:	5b                   	pop    ebx
c000361c:	5e                   	pop    esi
c000361d:	5f                   	pop    edi
c000361e:	5d                   	pop    ebp
c000361f:	c3                   	ret    

c0003620 <dir_clear>:
c0003620:	55                   	push   ebp
c0003621:	57                   	push   edi
c0003622:	56                   	push   esi
c0003623:	89 c6                	mov    esi,eax
c0003625:	53                   	push   ebx
c0003626:	83 ec 1c             	sub    esp,0x1c
c0003629:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000362d:	e8 9d ed ff ff       	call   c00023cf <sync_window>
c0003632:	85 c0                	test   eax,eax
c0003634:	0f 85 de 00 00 00    	jne    c0003718 <dir_clear+0xf8>
c000363a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000363e:	89 f0                	mov    eax,esi
c0003640:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003643:	e8 d6 e8 ff ff       	call   c0001f1e <clst2sect>
c0003648:	b9 00 02 00 00       	mov    ecx,0x200
c000364d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003651:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003655:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003658:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c000365b:	89 e8                	mov    eax,ebp
c000365d:	31 d2                	xor    edx,edx
c000365f:	e8 b5 e6 ff ff       	call   c0001d19 <mem_set>
c0003664:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003668:	c1 e3 09             	shl    ebx,0x9
c000366b:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003671:	76 1f                	jbe    c0003692 <dir_clear+0x72>
c0003673:	bb 00 80 00 00       	mov    ebx,0x8000
c0003678:	eb 18                	jmp    c0003692 <dir_clear+0x72>
c000367a:	83 ec 0c             	sub    esp,0xc
c000367d:	53                   	push   ebx
c000367e:	e8 35 4e 00 00       	call   c00084b8 <ff_memalloc>
c0003683:	83 c4 10             	add    esp,0x10
c0003686:	89 c7                	mov    edi,eax
c0003688:	85 c0                	test   eax,eax
c000368a:	0f 85 8f 00 00 00    	jne    c000371f <dir_clear+0xff>
c0003690:	d1 eb                	shr    ebx,1
c0003692:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003698:	77 e0                	ja     c000367a <dir_clear+0x5a>
c000369a:	31 db                	xor    ebx,ebx
c000369c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036a0:	39 d8                	cmp    eax,ebx
c00036a2:	76 66                	jbe    c000370a <dir_clear+0xea>
c00036a4:	83 ec 0c             	sub    esp,0xc
c00036a7:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036ab:	6a 01                	push   0x1
c00036ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036b5:	55                   	push   ebp
c00036b6:	50                   	push   eax
c00036b7:	e8 94 e5 ff ff       	call   c0001c50 <disk_write>
c00036bc:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036c1:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036c6:	83 c4 20             	add    esp,0x20
c00036c9:	85 c0                	test   eax,eax
c00036cb:	75 3d                	jne    c000370a <dir_clear+0xea>
c00036cd:	43                   	inc    ebx
c00036ce:	eb cc                	jmp    c000369c <dir_clear+0x7c>
c00036d0:	83 ec 0c             	sub    esp,0xc
c00036d3:	31 d2                	xor    edx,edx
c00036d5:	55                   	push   ebp
c00036d6:	89 d8                	mov    eax,ebx
c00036d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036dc:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036e0:	52                   	push   edx
c00036e1:	50                   	push   eax
c00036e2:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036e6:	57                   	push   edi
c00036e7:	50                   	push   eax
c00036e8:	e8 63 e5 ff ff       	call   c0001c50 <disk_write>
c00036ed:	83 c4 20             	add    esp,0x20
c00036f0:	85 c0                	test   eax,eax
c00036f2:	75 0a                	jne    c00036fe <dir_clear+0xde>
c00036f4:	01 eb                	add    ebx,ebp
c00036f6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036fa:	39 d8                	cmp    eax,ebx
c00036fc:	77 d2                	ja     c00036d0 <dir_clear+0xb0>
c00036fe:	83 ec 0c             	sub    esp,0xc
c0003701:	57                   	push   edi
c0003702:	e8 c7 4d 00 00       	call   c00084ce <ff_memfree>
c0003707:	83 c4 10             	add    esp,0x10
c000370a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000370e:	39 d8                	cmp    eax,ebx
c0003710:	0f 95 c0             	setne  al
c0003713:	0f b6 c0             	movzx  eax,al
c0003716:	eb 19                	jmp    c0003731 <dir_clear+0x111>
c0003718:	b8 01 00 00 00       	mov    eax,0x1
c000371d:	eb 12                	jmp    c0003731 <dir_clear+0x111>
c000371f:	89 d9                	mov    ecx,ebx
c0003721:	31 d2                	xor    edx,edx
c0003723:	c1 eb 09             	shr    ebx,0x9
c0003726:	e8 ee e5 ff ff       	call   c0001d19 <mem_set>
c000372b:	89 dd                	mov    ebp,ebx
c000372d:	31 db                	xor    ebx,ebx
c000372f:	eb c5                	jmp    c00036f6 <dir_clear+0xd6>
c0003731:	83 c4 1c             	add    esp,0x1c
c0003734:	5b                   	pop    ebx
c0003735:	5e                   	pop    esi
c0003736:	5f                   	pop    edi
c0003737:	5d                   	pop    ebp
c0003738:	c3                   	ret    

c0003739 <dir_next>:
c0003739:	55                   	push   ebp
c000373a:	57                   	push   edi
c000373b:	56                   	push   esi
c000373c:	53                   	push   ebx
c000373d:	89 c3                	mov    ebx,eax
c000373f:	83 ec 1c             	sub    esp,0x1c
c0003742:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003744:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003748:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000374b:	8d 78 20             	lea    edi,[eax+0x20]
c000374e:	31 c0                	xor    eax,eax
c0003750:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003754:	0f 94 c0             	sete   al
c0003757:	48                   	dec    eax
c0003758:	25 00 00 20 f0       	and    eax,0xf0200000
c000375d:	05 00 00 00 10       	add    eax,0x10000000
c0003762:	39 f8                	cmp    eax,edi
c0003764:	77 0e                	ja     c0003774 <dir_next+0x3b>
c0003766:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000376d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003774:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003777:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000377a:	b8 04 00 00 00       	mov    eax,0x4
c000377f:	89 ce                	mov    esi,ecx
c0003781:	09 d6                	or     esi,edx
c0003783:	0f 84 da 00 00 00    	je     c0003863 <dir_next+0x12a>
c0003789:	89 f8                	mov    eax,edi
c000378b:	25 ff 01 00 00       	and    eax,0x1ff
c0003790:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003794:	0f 85 b9 00 00 00    	jne    c0003853 <dir_next+0x11a>
c000379a:	83 c2 01             	add    edx,0x1
c000379d:	83 d1 00             	adc    ecx,0x0
c00037a0:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037a3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037a9:	85 d2                	test   edx,edx
c00037ab:	75 29                	jne    c00037d6 <dir_next+0x9d>
c00037ad:	89 fa                	mov    edx,edi
c00037af:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037b3:	c1 ea 05             	shr    edx,0x5
c00037b6:	39 c2                	cmp    edx,eax
c00037b8:	0f 82 95 00 00 00    	jb     c0003853 <dir_next+0x11a>
c00037be:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037c5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037cc:	b8 04 00 00 00       	mov    eax,0x4
c00037d1:	e9 8d 00 00 00       	jmp    c0003863 <dir_next+0x12a>
c00037d6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037da:	89 f9                	mov    ecx,edi
c00037dc:	48                   	dec    eax
c00037dd:	c1 e9 09             	shr    ecx,0x9
c00037e0:	85 c8                	test   eax,ecx
c00037e2:	75 6f                	jne    c0003853 <dir_next+0x11a>
c00037e4:	89 d8                	mov    eax,ebx
c00037e6:	e8 00 f8 ff ff       	call   c0002feb <get_fat>
c00037eb:	89 c6                	mov    esi,eax
c00037ed:	83 f8 01             	cmp    eax,0x1
c00037f0:	77 07                	ja     c00037f9 <dir_next+0xc0>
c00037f2:	b8 02 00 00 00       	mov    eax,0x2
c00037f7:	eb 6a                	jmp    c0003863 <dir_next+0x12a>
c00037f9:	83 f8 ff             	cmp    eax,0xffffffff
c00037fc:	75 07                	jne    c0003805 <dir_next+0xcc>
c00037fe:	b8 01 00 00 00       	mov    eax,0x1
c0003803:	eb 5e                	jmp    c0003863 <dir_next+0x12a>
c0003805:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003808:	77 37                	ja     c0003841 <dir_next+0x108>
c000380a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000380f:	74 ad                	je     c00037be <dir_next+0x85>
c0003811:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003814:	89 d8                	mov    eax,ebx
c0003816:	e8 be fa ff ff       	call   c00032d9 <create_chain>
c000381b:	89 c6                	mov    esi,eax
c000381d:	b8 07 00 00 00       	mov    eax,0x7
c0003822:	85 f6                	test   esi,esi
c0003824:	74 3d                	je     c0003863 <dir_next+0x12a>
c0003826:	83 fe 01             	cmp    esi,0x1
c0003829:	74 c7                	je     c00037f2 <dir_next+0xb9>
c000382b:	83 fe ff             	cmp    esi,0xffffffff
c000382e:	74 ce                	je     c00037fe <dir_next+0xc5>
c0003830:	89 f2                	mov    edx,esi
c0003832:	89 e8                	mov    eax,ebp
c0003834:	e8 e7 fd ff ff       	call   c0003620 <dir_clear>
c0003839:	85 c0                	test   eax,eax
c000383b:	75 c1                	jne    c00037fe <dir_next+0xc5>
c000383d:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003841:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003844:	89 f2                	mov    edx,esi
c0003846:	89 e8                	mov    eax,ebp
c0003848:	e8 d1 e6 ff ff       	call   c0001f1e <clst2sect>
c000384d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003850:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003853:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003857:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000385a:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000385e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003861:	31 c0                	xor    eax,eax
c0003863:	83 c4 1c             	add    esp,0x1c
c0003866:	5b                   	pop    ebx
c0003867:	5e                   	pop    esi
c0003868:	5f                   	pop    edi
c0003869:	5d                   	pop    ebp
c000386a:	c3                   	ret    

c000386b <load_xdir>:
c000386b:	55                   	push   ebp
c000386c:	57                   	push   edi
c000386d:	56                   	push   esi
c000386e:	89 c6                	mov    esi,eax
c0003870:	53                   	push   ebx
c0003871:	83 ec 1c             	sub    esp,0x1c
c0003874:	8b 00                	mov    eax,DWORD PTR [eax]
c0003876:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003879:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000387c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000387f:	e8 df eb ff ff       	call   c0002463 <move_window>
c0003884:	89 c3                	mov    ebx,eax
c0003886:	85 c0                	test   eax,eax
c0003888:	0f 85 0c 01 00 00    	jne    c000399a <load_xdir+0x12f>
c000388e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003891:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003894:	0f 85 fb 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c000389a:	89 f8                	mov    eax,edi
c000389c:	b9 20 00 00 00       	mov    ecx,0x20
c00038a1:	e8 5e e4 ff ff       	call   c0001d04 <mem_cpy>
c00038a6:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038aa:	40                   	inc    eax
c00038ab:	c1 e0 05             	shl    eax,0x5
c00038ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038b2:	83 e8 60             	sub    eax,0x60
c00038b5:	3d 00 02 00 00       	cmp    eax,0x200
c00038ba:	0f 87 d5 00 00 00    	ja     c0003995 <load_xdir+0x12a>
c00038c0:	31 d2                	xor    edx,edx
c00038c2:	89 f0                	mov    eax,esi
c00038c4:	e8 70 fe ff ff       	call   c0003739 <dir_next>
c00038c9:	89 c3                	mov    ebx,eax
c00038cb:	83 f8 04             	cmp    eax,0x4
c00038ce:	0f 84 c1 00 00 00    	je     c0003995 <load_xdir+0x12a>
c00038d4:	85 c0                	test   eax,eax
c00038d6:	0f 85 be 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038dc:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038df:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e2:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e4:	e8 7a eb ff ff       	call   c0002463 <move_window>
c00038e9:	89 c3                	mov    ebx,eax
c00038eb:	85 c0                	test   eax,eax
c00038ed:	0f 85 a7 00 00 00    	jne    c000399a <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038f9:	0f 85 96 00 00 00    	jne    c0003995 <load_xdir+0x12a>
c00038ff:	8d 47 20             	lea    eax,[edi+0x20]
c0003902:	b9 20 00 00 00       	mov    ecx,0x20
c0003907:	e8 f8 e3 ff ff       	call   c0001d04 <mem_cpy>
c000390c:	31 d2                	xor    edx,edx
c000390e:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003912:	b9 0f 00 00 00       	mov    ecx,0xf
c0003917:	83 c0 2c             	add    eax,0x2c
c000391a:	f7 f1                	div    ecx
c000391c:	c1 e0 05             	shl    eax,0x5
c000391f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003923:	77 70                	ja     c0003995 <load_xdir+0x12a>
c0003925:	bd 40 00 00 00       	mov    ebp,0x40
c000392a:	31 d2                	xor    edx,edx
c000392c:	89 f0                	mov    eax,esi
c000392e:	e8 06 fe ff ff       	call   c0003739 <dir_next>
c0003933:	89 c3                	mov    ebx,eax
c0003935:	83 f8 04             	cmp    eax,0x4
c0003938:	74 5b                	je     c0003995 <load_xdir+0x12a>
c000393a:	85 c0                	test   eax,eax
c000393c:	75 5c                	jne    c000399a <load_xdir+0x12f>
c000393e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003941:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003944:	8b 06                	mov    eax,DWORD PTR [esi]
c0003946:	e8 18 eb ff ff       	call   c0002463 <move_window>
c000394b:	89 c3                	mov    ebx,eax
c000394d:	85 c0                	test   eax,eax
c000394f:	75 49                	jne    c000399a <load_xdir+0x12f>
c0003951:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003954:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003957:	75 3c                	jne    c0003995 <load_xdir+0x12a>
c0003959:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000395f:	77 0d                	ja     c000396e <load_xdir+0x103>
c0003961:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003964:	b9 20 00 00 00       	mov    ecx,0x20
c0003969:	e8 96 e3 ff ff       	call   c0001d04 <mem_cpy>
c000396e:	83 c5 20             	add    ebp,0x20
c0003971:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003975:	77 b3                	ja     c000392a <load_xdir+0xbf>
c0003977:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000397d:	77 1b                	ja     c000399a <load_xdir+0x12f>
c000397f:	89 f8                	mov    eax,edi
c0003981:	e8 cd e7 ff ff       	call   c0002153 <xdir_sum>
c0003986:	89 c1                	mov    ecx,eax
c0003988:	8d 47 02             	lea    eax,[edi+0x2]
c000398b:	e8 f5 e2 ff ff       	call   c0001c85 <ld_word>
c0003990:	66 39 c1             	cmp    cx,ax
c0003993:	74 05                	je     c000399a <load_xdir+0x12f>
c0003995:	bb 02 00 00 00       	mov    ebx,0x2
c000399a:	83 c4 1c             	add    esp,0x1c
c000399d:	89 d8                	mov    eax,ebx
c000399f:	5b                   	pop    ebx
c00039a0:	5e                   	pop    esi
c00039a1:	5f                   	pop    edi
c00039a2:	5d                   	pop    ebp
c00039a3:	c3                   	ret    

c00039a4 <load_obj_xdir>:
c00039a4:	53                   	push   ebx
c00039a5:	89 c3                	mov    ebx,eax
c00039a7:	83 ec 08             	sub    esp,0x8
c00039aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00039ac:	89 03                	mov    DWORD PTR [ebx],eax
c00039ae:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039b1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039b4:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039b7:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039ba:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039bd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039c4:	30 c0                	xor    al,al
c00039c6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039cd:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039d0:	89 d8                	mov    eax,ebx
c00039d2:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039d5:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039d8:	e8 04 f8 ff ff       	call   c00031e1 <dir_sdi>
c00039dd:	85 c0                	test   eax,eax
c00039df:	75 0b                	jne    c00039ec <load_obj_xdir+0x48>
c00039e1:	89 d8                	mov    eax,ebx
c00039e3:	83 c4 08             	add    esp,0x8
c00039e6:	5b                   	pop    ebx
c00039e7:	e9 7f fe ff ff       	jmp    c000386b <load_xdir>
c00039ec:	83 c4 08             	add    esp,0x8
c00039ef:	5b                   	pop    ebx
c00039f0:	c3                   	ret    

c00039f1 <dir_read>:
c00039f1:	55                   	push   ebp
c00039f2:	bd 04 00 00 00       	mov    ebp,0x4
c00039f7:	57                   	push   edi
c00039f8:	56                   	push   esi
c00039f9:	be ff ff ff ff       	mov    esi,0xffffffff
c00039fe:	53                   	push   ebx
c00039ff:	89 c3                	mov    ebx,eax
c0003a01:	83 ec 1c             	sub    esp,0x1c
c0003a04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a08:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a0a:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 c8                	mov    eax,ecx
c0003a17:	09 d0                	or     eax,edx
c0003a19:	0f 84 25 01 00 00    	je     c0003b44 <dir_read+0x153>
c0003a1f:	89 f8                	mov    eax,edi
c0003a21:	e8 3d ea ff ff       	call   c0002463 <move_window>
c0003a26:	89 c5                	mov    ebp,eax
c0003a28:	85 c0                	test   eax,eax
c0003a2a:	0f 85 23 01 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a30:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a33:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a35:	84 c9                	test   cl,cl
c0003a37:	0f 84 11 01 00 00    	je     c0003b4e <dir_read+0x15d>
c0003a3d:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a40:	75 48                	jne    c0003a8a <dir_read+0x99>
c0003a42:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a47:	74 10                	je     c0003a59 <dir_read+0x68>
c0003a49:	80 f9 83             	cmp    cl,0x83
c0003a4c:	0f 85 dd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a52:	31 ed                	xor    ebp,ebp
c0003a54:	e9 08 01 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a59:	80 f9 85             	cmp    cl,0x85
c0003a5c:	0f 85 cd 00 00 00    	jne    c0003b2f <dir_read+0x13e>
c0003a62:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a65:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a68:	89 d8                	mov    eax,ebx
c0003a6a:	e8 fc fd ff ff       	call   c000386b <load_xdir>
c0003a6f:	89 c5                	mov    ebp,eax
c0003a71:	85 c0                	test   eax,eax
c0003a73:	0f 85 da 00 00 00    	jne    c0003b53 <dir_read+0x162>
c0003a79:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a7c:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a7f:	83 e0 3f             	and    eax,0x3f
c0003a82:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a85:	e9 d7 00 00 00       	jmp    c0003b61 <dir_read+0x170>
c0003a8a:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a8d:	83 e0 3f             	and    eax,0x3f
c0003a90:	80 f9 2e             	cmp    cl,0x2e
c0003a93:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a97:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a9a:	0f 84 8a 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa0:	80 f9 e5             	cmp    cl,0xe5
c0003aa3:	0f 84 81 00 00 00    	je     c0003b2a <dir_read+0x139>
c0003aa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003aad:	83 e0 1f             	and    eax,0x1f
c0003ab0:	83 f8 08             	cmp    eax,0x8
c0003ab3:	0f 94 c0             	sete   al
c0003ab6:	0f b6 c0             	movzx  eax,al
c0003ab9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003abd:	75 6b                	jne    c0003b2a <dir_read+0x139>
c0003abf:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003ac4:	75 44                	jne    c0003b0a <dir_read+0x119>
c0003ac6:	f6 c1 40             	test   cl,0x40
c0003ac9:	74 12                	je     c0003add <dir_read+0xec>
c0003acb:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003ace:	83 e1 bf             	and    ecx,0xffffffbf
c0003ad1:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ad5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ad8:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003adb:	eb 06                	jmp    c0003ae3 <dir_read+0xf2>
c0003add:	89 f0                	mov    eax,esi
c0003adf:	38 c8                	cmp    al,cl
c0003ae1:	75 47                	jne    c0003b2a <dir_read+0x139>
c0003ae3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ae7:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aec:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aef:	75 3e                	jne    c0003b2f <dir_read+0x13e>
c0003af1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003af5:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003af8:	e8 8a e4 ff ff       	call   c0001f87 <pick_lfn>
c0003afd:	85 c0                	test   eax,eax
c0003aff:	74 2e                	je     c0003b2f <dir_read+0x13e>
c0003b01:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b05:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b08:	eb 25                	jmp    c0003b2f <dir_read+0x13e>
c0003b0a:	89 f0                	mov    eax,esi
c0003b0c:	84 c0                	test   al,al
c0003b0e:	75 11                	jne    c0003b21 <dir_read+0x130>
c0003b10:	89 d0                	mov    eax,edx
c0003b12:	e8 2a e6 ff ff       	call   c0002141 <sum_sfn>
c0003b17:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b1b:	0f 84 31 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b21:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b28:	eb 37                	jmp    c0003b61 <dir_read+0x170>
c0003b2a:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b2f:	31 d2                	xor    edx,edx
c0003b31:	89 d8                	mov    eax,ebx
c0003b33:	e8 01 fc ff ff       	call   c0003739 <dir_next>
c0003b38:	89 c5                	mov    ebp,eax
c0003b3a:	85 c0                	test   eax,eax
c0003b3c:	0f 84 cd fe ff ff    	je     c0003a0f <dir_read+0x1e>
c0003b42:	eb 0f                	jmp    c0003b53 <dir_read+0x162>
c0003b44:	85 ed                	test   ebp,ebp
c0003b46:	0f 84 06 ff ff ff    	je     c0003a52 <dir_read+0x61>
c0003b4c:	eb 05                	jmp    c0003b53 <dir_read+0x162>
c0003b4e:	bd 04 00 00 00       	mov    ebp,0x4
c0003b53:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b5a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b61:	83 c4 1c             	add    esp,0x1c
c0003b64:	89 e8                	mov    eax,ebp
c0003b66:	5b                   	pop    ebx
c0003b67:	5e                   	pop    esi
c0003b68:	5f                   	pop    edi
c0003b69:	5d                   	pop    ebp
c0003b6a:	c3                   	ret    

c0003b6b <dir_alloc>:
c0003b6b:	55                   	push   ebp
c0003b6c:	89 d5                	mov    ebp,edx
c0003b6e:	57                   	push   edi
c0003b6f:	31 d2                	xor    edx,edx
c0003b71:	56                   	push   esi
c0003b72:	53                   	push   ebx
c0003b73:	89 c3                	mov    ebx,eax
c0003b75:	83 ec 0c             	sub    esp,0xc
c0003b78:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b7a:	e8 62 f6 ff ff       	call   c00031e1 <dir_sdi>
c0003b7f:	85 c0                	test   eax,eax
c0003b81:	75 4e                	jne    c0003bd1 <dir_alloc+0x66>
c0003b83:	31 f6                	xor    esi,esi
c0003b85:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b88:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b8b:	89 f8                	mov    eax,edi
c0003b8d:	e8 d1 e8 ff ff       	call   c0002463 <move_window>
c0003b92:	85 c0                	test   eax,eax
c0003b94:	75 3b                	jne    c0003bd1 <dir_alloc+0x66>
c0003b96:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b99:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b9c:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b9e:	75 07                	jne    c0003ba7 <dir_alloc+0x3c>
c0003ba0:	f7 d2                	not    edx
c0003ba2:	c0 ea 07             	shr    dl,0x7
c0003ba5:	eb 0d                	jmp    c0003bb4 <dir_alloc+0x49>
c0003ba7:	84 d2                	test   dl,dl
c0003ba9:	0f 94 c1             	sete   cl
c0003bac:	80 fa e5             	cmp    dl,0xe5
c0003baf:	0f 94 c2             	sete   dl
c0003bb2:	09 ca                	or     edx,ecx
c0003bb4:	84 d2                	test   dl,dl
c0003bb6:	74 07                	je     c0003bbf <dir_alloc+0x54>
c0003bb8:	46                   	inc    esi
c0003bb9:	39 ee                	cmp    esi,ebp
c0003bbb:	75 04                	jne    c0003bc1 <dir_alloc+0x56>
c0003bbd:	eb 1c                	jmp    c0003bdb <dir_alloc+0x70>
c0003bbf:	31 f6                	xor    esi,esi
c0003bc1:	ba 01 00 00 00       	mov    edx,0x1
c0003bc6:	89 d8                	mov    eax,ebx
c0003bc8:	e8 6c fb ff ff       	call   c0003739 <dir_next>
c0003bcd:	85 c0                	test   eax,eax
c0003bcf:	74 b4                	je     c0003b85 <dir_alloc+0x1a>
c0003bd1:	83 f8 04             	cmp    eax,0x4
c0003bd4:	75 05                	jne    c0003bdb <dir_alloc+0x70>
c0003bd6:	b8 07 00 00 00       	mov    eax,0x7
c0003bdb:	83 c4 0c             	add    esp,0xc
c0003bde:	5b                   	pop    ebx
c0003bdf:	5e                   	pop    esi
c0003be0:	5f                   	pop    edi
c0003be1:	5d                   	pop    ebp
c0003be2:	c3                   	ret    

c0003be3 <store_xdir>:
c0003be3:	55                   	push   ebp
c0003be4:	57                   	push   edi
c0003be5:	89 c7                	mov    edi,eax
c0003be7:	56                   	push   esi
c0003be8:	53                   	push   ebx
c0003be9:	83 ec 0c             	sub    esp,0xc
c0003bec:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bee:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bf1:	89 e8                	mov    eax,ebp
c0003bf3:	e8 5b e5 ff ff       	call   c0002153 <xdir_sum>
c0003bf8:	0f b7 d0             	movzx  edx,ax
c0003bfb:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bfe:	e8 f4 e0 ff ff       	call   c0001cf7 <st_word>
c0003c03:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c07:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c0a:	89 f8                	mov    eax,edi
c0003c0c:	e8 d0 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c11:	89 c6                	mov    esi,eax
c0003c13:	85 f6                	test   esi,esi
c0003c15:	75 3d                	jne    c0003c54 <store_xdir+0x71>
c0003c17:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c1a:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c1d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c1f:	e8 3f e8 ff ff       	call   c0002463 <move_window>
c0003c24:	89 c6                	mov    esi,eax
c0003c26:	85 c0                	test   eax,eax
c0003c28:	75 2a                	jne    c0003c54 <store_xdir+0x71>
c0003c2a:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c2d:	b9 20 00 00 00       	mov    ecx,0x20
c0003c32:	89 ea                	mov    edx,ebp
c0003c34:	e8 cb e0 ff ff       	call   c0001d04 <mem_cpy>
c0003c39:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c3b:	85 db                	test   ebx,ebx
c0003c3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c41:	74 11                	je     c0003c54 <store_xdir+0x71>
c0003c43:	31 d2                	xor    edx,edx
c0003c45:	89 f8                	mov    eax,edi
c0003c47:	83 c5 20             	add    ebp,0x20
c0003c4a:	e8 ea fa ff ff       	call   c0003739 <dir_next>
c0003c4f:	4b                   	dec    ebx
c0003c50:	89 c6                	mov    esi,eax
c0003c52:	eb bf                	jmp    c0003c13 <store_xdir+0x30>
c0003c54:	89 f0                	mov    eax,esi
c0003c56:	83 fe 02             	cmp    esi,0x2
c0003c59:	76 05                	jbe    c0003c60 <store_xdir+0x7d>
c0003c5b:	b8 02 00 00 00       	mov    eax,0x2
c0003c60:	83 c4 0c             	add    esp,0xc
c0003c63:	5b                   	pop    ebx
c0003c64:	5e                   	pop    esi
c0003c65:	5f                   	pop    edi
c0003c66:	5d                   	pop    ebp
c0003c67:	c3                   	ret    

c0003c68 <dir_remove>:
c0003c68:	57                   	push   edi
c0003c69:	56                   	push   esi
c0003c6a:	53                   	push   ebx
c0003c6b:	89 c3                	mov    ebx,eax
c0003c6d:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c70:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c72:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c75:	83 fa ff             	cmp    edx,0xffffffff
c0003c78:	74 09                	je     c0003c83 <dir_remove+0x1b>
c0003c7a:	e8 62 f5 ff ff       	call   c00031e1 <dir_sdi>
c0003c7f:	85 c0                	test   eax,eax
c0003c81:	75 41                	jne    c0003cc4 <dir_remove+0x5c>
c0003c83:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c86:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c89:	89 f0                	mov    eax,esi
c0003c8b:	e8 d3 e7 ff ff       	call   c0002463 <move_window>
c0003c90:	85 c0                	test   eax,eax
c0003c92:	75 26                	jne    c0003cba <dir_remove+0x52>
c0003c94:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c97:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c9a:	75 05                	jne    c0003ca1 <dir_remove+0x39>
c0003c9c:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c9f:	eb 03                	jmp    c0003ca4 <dir_remove+0x3c>
c0003ca1:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003ca4:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003ca8:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cab:	73 17                	jae    c0003cc4 <dir_remove+0x5c>
c0003cad:	31 d2                	xor    edx,edx
c0003caf:	89 d8                	mov    eax,ebx
c0003cb1:	e8 83 fa ff ff       	call   c0003739 <dir_next>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	74 c9                	je     c0003c83 <dir_remove+0x1b>
c0003cba:	83 f8 04             	cmp    eax,0x4
c0003cbd:	75 05                	jne    c0003cc4 <dir_remove+0x5c>
c0003cbf:	b8 02 00 00 00       	mov    eax,0x2
c0003cc4:	5b                   	pop    ebx
c0003cc5:	5e                   	pop    esi
c0003cc6:	5f                   	pop    edi
c0003cc7:	c3                   	ret    

c0003cc8 <create_name>:
c0003cc8:	55                   	push   ebp
c0003cc9:	89 d5                	mov    ebp,edx
c0003ccb:	57                   	push   edi
c0003ccc:	89 c7                	mov    edi,eax
c0003cce:	56                   	push   esi
c0003ccf:	31 f6                	xor    esi,esi
c0003cd1:	53                   	push   ebx
c0003cd2:	83 ec 3c             	sub    esp,0x3c
c0003cd5:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cd7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003ce0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ce4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ce8:	e8 72 e0 ff ff       	call   c0001d5f <tchar2uni>
c0003ced:	89 c3                	mov    ebx,eax
c0003cef:	83 f8 ff             	cmp    eax,0xffffffff
c0003cf2:	75 0a                	jne    c0003cfe <create_name+0x36>
c0003cf4:	b8 06 00 00 00       	mov    eax,0x6
c0003cf9:	e9 9e 02 00 00       	jmp    c0003f9c <create_name+0x2d4>
c0003cfe:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d03:	76 0c                	jbe    c0003d11 <create_name+0x49>
c0003d05:	c1 e8 10             	shr    eax,0x10
c0003d08:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d0c:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d10:	46                   	inc    esi
c0003d11:	66 83 fb 1f          	cmp    bx,0x1f
c0003d15:	76 4f                	jbe    c0003d66 <create_name+0x9e>
c0003d17:	66 83 fb 5c          	cmp    bx,0x5c
c0003d1b:	74 35                	je     c0003d52 <create_name+0x8a>
c0003d1d:	66 83 fb 2f          	cmp    bx,0x2f
c0003d21:	74 2f                	je     c0003d52 <create_name+0x8a>
c0003d23:	66 83 fb 7f          	cmp    bx,0x7f
c0003d27:	77 11                	ja     c0003d3a <create_name+0x72>
c0003d29:	0f b7 d3             	movzx  edx,bx
c0003d2c:	b8 72 9d 02 c0       	mov    eax,0xc0029d72
c0003d31:	e8 11 e0 ff ff       	call   c0001d47 <chk_chr>
c0003d36:	85 c0                	test   eax,eax
c0003d38:	75 ba                	jne    c0003cf4 <create_name+0x2c>
c0003d3a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d40:	77 b2                	ja     c0003cf4 <create_name+0x2c>
c0003d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d46:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d4a:	46                   	inc    esi
c0003d4b:	eb 97                	jmp    c0003ce4 <create_name+0x1c>
c0003d4d:	40                   	inc    eax
c0003d4e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d56:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d58:	80 fa 2f             	cmp    dl,0x2f
c0003d5b:	74 f0                	je     c0003d4d <create_name+0x85>
c0003d5d:	80 fa 5c             	cmp    dl,0x5c
c0003d60:	74 eb                	je     c0003d4d <create_name+0x85>
c0003d62:	31 db                	xor    ebx,ebx
c0003d64:	eb 02                	jmp    c0003d68 <create_name+0xa0>
c0003d66:	b3 04                	mov    bl,0x4
c0003d68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d6c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d6f:	85 f6                	test   esi,esi
c0003d71:	74 18                	je     c0003d8b <create_name+0xc3>
c0003d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d77:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d7c:	66 83 f8 20          	cmp    ax,0x20
c0003d80:	74 06                	je     c0003d88 <create_name+0xc0>
c0003d82:	66 83 f8 2e          	cmp    ax,0x2e
c0003d86:	75 03                	jne    c0003d8b <create_name+0xc3>
c0003d88:	4e                   	dec    esi
c0003d89:	eb e4                	jmp    c0003d6f <create_name+0xa7>
c0003d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d8f:	31 ed                	xor    ebp,ebp
c0003d91:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d97:	85 f6                	test   esi,esi
c0003d99:	0f 84 55 ff ff ff    	je     c0003cf4 <create_name+0x2c>
c0003d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da3:	8d 55 01             	lea    edx,[ebp+0x1]
c0003da6:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003daa:	66 83 f8 20          	cmp    ax,0x20
c0003dae:	75 04                	jne    c0003db4 <create_name+0xec>
c0003db0:	89 d5                	mov    ebp,edx
c0003db2:	eb eb                	jmp    c0003d9f <create_name+0xd7>
c0003db4:	85 ed                	test   ebp,ebp
c0003db6:	75 06                	jne    c0003dbe <create_name+0xf6>
c0003db8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dbc:	75 08                	jne    c0003dc6 <create_name+0xfe>
c0003dbe:	83 cb 03             	or     ebx,0x3
c0003dc1:	eb 03                	jmp    c0003dc6 <create_name+0xfe>
c0003dc3:	4e                   	dec    esi
c0003dc4:	74 0c                	je     c0003dd2 <create_name+0x10a>
c0003dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dca:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dd0:	75 f1                	jne    c0003dc3 <create_name+0xfb>
c0003dd2:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dd7:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003dda:	ba 20 00 00 00       	mov    edx,0x20
c0003ddf:	e8 35 df ff ff       	call   c0001d19 <mem_set>
c0003de4:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dec:	31 c9                	xor    ecx,ecx
c0003dee:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003df3:	8d 45 01             	lea    eax,[ebp+0x1]
c0003df6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dfe:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e02:	66 85 ed             	test   bp,bp
c0003e05:	0f 84 30 01 00 00    	je     c0003f3b <create_name+0x273>
c0003e0b:	66 83 fd 20          	cmp    bp,0x20
c0003e0f:	74 10                	je     c0003e21 <create_name+0x159>
c0003e11:	66 83 fd 2e          	cmp    bp,0x2e
c0003e15:	75 13                	jne    c0003e2a <create_name+0x162>
c0003e17:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1b:	0f 84 6b 01 00 00    	je     c0003f8c <create_name+0x2c4>
c0003e21:	83 cb 03             	or     ebx,0x3
c0003e24:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e28:	eb c9                	jmp    c0003df3 <create_name+0x12b>
c0003e2a:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e2e:	73 0b                	jae    c0003e3b <create_name+0x173>
c0003e30:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e34:	75 47                	jne    c0003e7d <create_name+0x1b5>
c0003e36:	e9 51 01 00 00       	jmp    c0003f8c <create_name+0x2c4>
c0003e3b:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e40:	75 10                	jne    c0003e52 <create_name+0x18a>
c0003e42:	83 cb 03             	or     ebx,0x3
c0003e45:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e4d:	e9 e9 00 00 00       	jmp    c0003f3b <create_name+0x273>
c0003e52:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e56:	74 0d                	je     c0003e65 <create_name+0x19d>
c0003e58:	83 cb 03             	or     ebx,0x3
c0003e5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5f:	0f 87 d6 00 00 00    	ja     c0003f3b <create_name+0x273>
c0003e65:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e6a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e6e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e76:	b9 08 00 00 00       	mov    ecx,0x8
c0003e7b:	eb a7                	jmp    c0003e24 <create_name+0x15c>
c0003e7d:	66 83 fd 7f          	cmp    bp,0x7f
c0003e81:	76 68                	jbe    c0003eeb <create_name+0x223>
c0003e83:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e87:	88 da                	mov    dl,bl
c0003e89:	83 ca 02             	or     edx,0x2
c0003e8c:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e90:	50                   	push   eax
c0003e91:	50                   	push   eax
c0003e92:	68 b5 01 00 00       	push   0x1b5
c0003e97:	55                   	push   ebp
c0003e98:	e8 48 46 00 00       	call   c00084e5 <ff_uni2oem>
c0003e9d:	83 c4 10             	add    esp,0x10
c0003ea0:	89 c5                	mov    ebp,eax
c0003ea2:	a8 80                	test   al,0x80
c0003ea4:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ea8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003eac:	74 0c                	je     c0003eba <create_name+0x1f2>
c0003eae:	83 e5 7f             	and    ebp,0x7f
c0003eb1:	0f b6 ad c0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6340]
c0003eb8:	eb 2a                	jmp    c0003ee4 <create_name+0x21c>
c0003eba:	66 3d ff 00          	cmp    ax,0xff
c0003ebe:	76 24                	jbe    c0003ee4 <create_name+0x21c>
c0003ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ec4:	48                   	dec    eax
c0003ec5:	39 c8                	cmp    eax,ecx
c0003ec7:	77 0c                	ja     c0003ed5 <create_name+0x20d>
c0003ec9:	83 cb 03             	or     ebx,0x3
c0003ecc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ed0:	e9 4f ff ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003ed5:	89 e8                	mov    eax,ebp
c0003ed7:	88 d3                	mov    bl,dl
c0003ed9:	66 c1 e8 08          	shr    ax,0x8
c0003edd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ee1:	41                   	inc    ecx
c0003ee2:	eb 4b                	jmp    c0003f2f <create_name+0x267>
c0003ee4:	88 d3                	mov    bl,dl
c0003ee6:	66 85 ed             	test   bp,bp
c0003ee9:	74 19                	je     c0003f04 <create_name+0x23c>
c0003eeb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eef:	0f b7 d5             	movzx  edx,bp
c0003ef2:	b8 7b 9d 02 c0       	mov    eax,0xc0029d7b
c0003ef7:	e8 4b de ff ff       	call   c0001d47 <chk_chr>
c0003efc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f00:	85 c0                	test   eax,eax
c0003f02:	74 0a                	je     c0003f0e <create_name+0x246>
c0003f04:	83 cb 03             	or     ebx,0x3
c0003f07:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f0c:	eb 21                	jmp    c0003f2f <create_name+0x267>
c0003f0e:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f11:	66 83 f8 19          	cmp    ax,0x19
c0003f15:	77 07                	ja     c0003f1e <create_name+0x256>
c0003f17:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f1c:	eb 11                	jmp    c0003f2f <create_name+0x267>
c0003f1e:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f21:	66 83 f8 19          	cmp    ax,0x19
c0003f25:	77 08                	ja     c0003f2f <create_name+0x267>
c0003f27:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f2c:	83 ed 20             	sub    ebp,0x20
c0003f2f:	89 e8                	mov    eax,ebp
c0003f31:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f35:	41                   	inc    ecx
c0003f36:	e9 e9 fe ff ff       	jmp    c0003e24 <create_name+0x15c>
c0003f3b:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f3f:	75 04                	jne    c0003f45 <create_name+0x27d>
c0003f41:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f45:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f4a:	75 05                	jne    c0003f51 <create_name+0x289>
c0003f4c:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f51:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f55:	83 e0 0c             	and    eax,0xc
c0003f58:	3c 0c                	cmp    al,0xc
c0003f5a:	74 0b                	je     c0003f67 <create_name+0x29f>
c0003f5c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f60:	83 e0 03             	and    eax,0x3
c0003f63:	3c 03                	cmp    al,0x3
c0003f65:	75 05                	jne    c0003f6c <create_name+0x2a4>
c0003f67:	83 cb 02             	or     ebx,0x2
c0003f6a:	eb 19                	jmp    c0003f85 <create_name+0x2bd>
c0003f6c:	f6 c3 02             	test   bl,0x2
c0003f6f:	75 14                	jne    c0003f85 <create_name+0x2bd>
c0003f71:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f76:	74 03                	je     c0003f7b <create_name+0x2b3>
c0003f78:	83 cb 10             	or     ebx,0x10
c0003f7b:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f80:	74 03                	je     c0003f85 <create_name+0x2bd>
c0003f82:	83 cb 08             	or     ebx,0x8
c0003f85:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f88:	31 c0                	xor    eax,eax
c0003f8a:	eb 10                	jmp    c0003f9c <create_name+0x2d4>
c0003f8c:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f91:	0f 85 ce fe ff ff    	jne    c0003e65 <create_name+0x19d>
c0003f97:	e9 a6 fe ff ff       	jmp    c0003e42 <create_name+0x17a>
c0003f9c:	83 c4 3c             	add    esp,0x3c
c0003f9f:	5b                   	pop    ebx
c0003fa0:	5e                   	pop    esi
c0003fa1:	5f                   	pop    edi
c0003fa2:	5d                   	pop    ebp
c0003fa3:	c3                   	ret    

c0003fa4 <xname_sum>:
c0003fa4:	56                   	push   esi
c0003fa5:	53                   	push   ebx
c0003fa6:	89 c6                	mov    esi,eax
c0003fa8:	51                   	push   ecx
c0003fa9:	31 db                	xor    ebx,ebx
c0003fab:	83 c6 02             	add    esi,0x2
c0003fae:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fb2:	66 85 c0             	test   ax,ax
c0003fb5:	74 1f                	je     c0003fd6 <xname_sum+0x32>
c0003fb7:	83 ec 0c             	sub    esp,0xc
c0003fba:	66 d1 cb             	ror    bx,1
c0003fbd:	50                   	push   eax
c0003fbe:	e8 1e 46 00 00       	call   c00085e1 <ff_wtoupper>
c0003fc3:	83 c4 10             	add    esp,0x10
c0003fc6:	0f b6 d0             	movzx  edx,al
c0003fc9:	66 c1 e8 08          	shr    ax,0x8
c0003fcd:	01 d3                	add    ebx,edx
c0003fcf:	66 d1 cb             	ror    bx,1
c0003fd2:	01 c3                	add    ebx,eax
c0003fd4:	eb d5                	jmp    c0003fab <xname_sum+0x7>
c0003fd6:	89 d8                	mov    eax,ebx
c0003fd8:	5a                   	pop    edx
c0003fd9:	5b                   	pop    ebx
c0003fda:	5e                   	pop    esi
c0003fdb:	c3                   	ret    

c0003fdc <create_xdir>:
c0003fdc:	55                   	push   ebp
c0003fdd:	b9 40 00 00 00       	mov    ecx,0x40
c0003fe2:	57                   	push   edi
c0003fe3:	bd 01 00 00 00       	mov    ebp,0x1
c0003fe8:	56                   	push   esi
c0003fe9:	31 ff                	xor    edi,edi
c0003feb:	53                   	push   ebx
c0003fec:	be 40 00 00 00       	mov    esi,0x40
c0003ff1:	89 c3                	mov    ebx,eax
c0003ff3:	83 ec 1c             	sub    esp,0x1c
c0003ff6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ffa:	31 d2                	xor    edx,edx
c0003ffc:	e8 18 dd ff ff       	call   c0001d19 <mem_set>
c0004001:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0004004:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0004008:	31 c9                	xor    ecx,ecx
c000400a:	8d 46 01             	lea    eax,[esi+0x1]
c000400d:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0004018:	66 85 ed             	test   bp,bp
c000401b:	74 12                	je     c000402f <create_xdir+0x53>
c000401d:	0f b6 c1             	movzx  eax,cl
c0004020:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004024:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004028:	66 83 fd 01          	cmp    bp,0x1
c000402c:	80 d9 ff             	sbb    cl,0xff
c000402f:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004032:	0f b7 d5             	movzx  edx,bp
c0004035:	83 c6 02             	add    esi,0x2
c0004038:	e8 ba dc ff ff       	call   c0001cf7 <st_word>
c000403d:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004043:	75 d3                	jne    c0004018 <create_xdir+0x3c>
c0004045:	8d 47 01             	lea    eax,[edi+0x1]
c0004048:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004050:	0f b6 c1             	movzx  eax,cl
c0004053:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004058:	74 07                	je     c0004061 <create_xdir+0x85>
c000405a:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000405f:	eb a9                	jmp    c000400a <create_xdir+0x2e>
c0004061:	8d 47 02             	lea    eax,[edi+0x2]
c0004064:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004067:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000406a:	89 d0                	mov    eax,edx
c000406c:	e8 33 ff ff ff       	call   c0003fa4 <xname_sum>
c0004071:	83 c4 1c             	add    esp,0x1c
c0004074:	0f b7 d0             	movzx  edx,ax
c0004077:	8d 43 24             	lea    eax,[ebx+0x24]
c000407a:	5b                   	pop    ebx
c000407b:	5e                   	pop    esi
c000407c:	5f                   	pop    edi
c000407d:	5d                   	pop    ebp
c000407e:	e9 74 dc ff ff       	jmp    c0001cf7 <st_word>

c0004083 <cmp_lfn>:
c0004083:	55                   	push   ebp
c0004084:	57                   	push   edi
c0004085:	89 d7                	mov    edi,edx
c0004087:	56                   	push   esi
c0004088:	53                   	push   ebx
c0004089:	83 ec 1c             	sub    esp,0x1c
c000408c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004090:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004093:	e8 ed db ff ff       	call   c0001c85 <ld_word>
c0004098:	66 85 c0             	test   ax,ax
c000409b:	74 07                	je     c00040a4 <cmp_lfn+0x21>
c000409d:	31 c0                	xor    eax,eax
c000409f:	e9 9a 00 00 00       	jmp    c000413e <cmp_lfn+0xbb>
c00040a4:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040a6:	bd 01 00 00 00       	mov    ebp,0x1
c00040ab:	83 e3 3f             	and    ebx,0x3f
c00040ae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040b6:	4b                   	dec    ebx
c00040b7:	6b db 0d             	imul   ebx,ebx,0xd
c00040ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040be:	0f b6 80 40 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62c0]
c00040c5:	01 f8                	add    eax,edi
c00040c7:	e8 b9 db ff ff       	call   c0001c85 <ld_word>
c00040cc:	66 85 ed             	test   bp,bp
c00040cf:	89 c6                	mov    esi,eax
c00040d1:	74 3c                	je     c000410f <cmp_lfn+0x8c>
c00040d3:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040d9:	77 c2                	ja     c000409d <cmp_lfn+0x1a>
c00040db:	83 ec 0c             	sub    esp,0xc
c00040de:	0f b7 c0             	movzx  eax,ax
c00040e1:	50                   	push   eax
c00040e2:	e8 fa 44 00 00       	call   c00085e1 <ff_wtoupper>
c00040e7:	89 c5                	mov    ebp,eax
c00040e9:	8d 43 01             	lea    eax,[ebx+0x1]
c00040ec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040f4:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fb:	e8 e1 44 00 00       	call   c00085e1 <ff_wtoupper>
c0004100:	83 c4 10             	add    esp,0x10
c0004103:	39 c5                	cmp    ebp,eax
c0004105:	75 96                	jne    c000409d <cmp_lfn+0x1a>
c0004107:	89 f5                	mov    ebp,esi
c0004109:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000410d:	eb 04                	jmp    c0004113 <cmp_lfn+0x90>
c000410f:	66 46                	inc    si
c0004111:	75 8a                	jne    c000409d <cmp_lfn+0x1a>
c0004113:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0004117:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c000411c:	75 9c                	jne    c00040ba <cmp_lfn+0x37>
c000411e:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004121:	74 16                	je     c0004139 <cmp_lfn+0xb6>
c0004123:	66 85 ed             	test   bp,bp
c0004126:	74 11                	je     c0004139 <cmp_lfn+0xb6>
c0004128:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000412c:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004131:	0f 94 c0             	sete   al
c0004134:	0f b6 c0             	movzx  eax,al
c0004137:	eb 05                	jmp    c000413e <cmp_lfn+0xbb>
c0004139:	b8 01 00 00 00       	mov    eax,0x1
c000413e:	83 c4 1c             	add    esp,0x1c
c0004141:	5b                   	pop    ebx
c0004142:	5e                   	pop    esi
c0004143:	5f                   	pop    edi
c0004144:	5d                   	pop    ebp
c0004145:	c3                   	ret    

c0004146 <dir_find>:
c0004146:	55                   	push   ebp
c0004147:	31 d2                	xor    edx,edx
c0004149:	57                   	push   edi
c000414a:	56                   	push   esi
c000414b:	53                   	push   ebx
c000414c:	89 c3                	mov    ebx,eax
c000414e:	83 ec 1c             	sub    esp,0x1c
c0004151:	8b 30                	mov    esi,DWORD PTR [eax]
c0004153:	e8 89 f0 ff ff       	call   c00031e1 <dir_sdi>
c0004158:	89 04 24             	mov    DWORD PTR [esp],eax
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 9e 01 00 00    	jne    c0004301 <dir_find+0x1bb>
c0004163:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004166:	0f 85 8d 00 00 00    	jne    c00041f9 <dir_find+0xb3>
c000416c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000416f:	e8 30 fe ff ff       	call   c0003fa4 <xname_sum>
c0004174:	89 c7                	mov    edi,eax
c0004176:	31 d2                	xor    edx,edx
c0004178:	89 d8                	mov    eax,ebx
c000417a:	e8 72 f8 ff ff       	call   c00039f1 <dir_read>
c000417f:	85 c0                	test   eax,eax
c0004181:	0f 85 5e 01 00 00    	jne    c00042e5 <dir_find+0x19f>
c0004187:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000418a:	8d 41 24             	lea    eax,[ecx+0x24]
c000418d:	e8 f3 da ff ff       	call   c0001c85 <ld_word>
c0004192:	66 39 f8             	cmp    ax,di
c0004195:	75 df                	jne    c0004176 <dir_find+0x30>
c0004197:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000419a:	31 ed                	xor    ebp,ebp
c000419c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041a0:	ba 40 00 00 00       	mov    edx,0x40
c00041a5:	89 e9                	mov    ecx,ebp
c00041a7:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041ab:	0f 84 42 01 00 00    	je     c00042f3 <dir_find+0x1ad>
c00041b1:	f6 c2 1f             	test   dl,0x1f
c00041b4:	75 03                	jne    c00041b9 <dir_find+0x73>
c00041b6:	83 c2 02             	add    edx,0x2
c00041b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041bd:	89 d0                	mov    eax,edx
c00041bf:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041c2:	e8 be da ff ff       	call   c0001c85 <ld_word>
c00041c7:	83 ec 0c             	sub    esp,0xc
c00041ca:	0f b7 c0             	movzx  eax,ax
c00041cd:	50                   	push   eax
c00041ce:	e8 0e 44 00 00       	call   c00085e1 <ff_wtoupper>
c00041d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041d7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041da:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041de:	89 04 24             	mov    DWORD PTR [esp],eax
c00041e1:	e8 fb 43 00 00       	call   c00085e1 <ff_wtoupper>
c00041e6:	83 c4 10             	add    esp,0x10
c00041e9:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041ed:	75 87                	jne    c0004176 <dir_find+0x30>
c00041ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041f3:	45                   	inc    ebp
c00041f4:	83 c2 02             	add    edx,0x2
c00041f7:	eb ac                	jmp    c00041a5 <dir_find+0x5f>
c00041f9:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004200:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0004205:	bf ff ff ff ff       	mov    edi,0xffffffff
c000420a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000420d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004210:	89 f0                	mov    eax,esi
c0004212:	e8 4c e2 ff ff       	call   c0002463 <move_window>
c0004217:	85 c0                	test   eax,eax
c0004219:	0f 85 c6 00 00 00    	jne    c00042e5 <dir_find+0x19f>
c000421f:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004222:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004225:	84 c9                	test   cl,cl
c0004227:	0f 84 bd 00 00 00    	je     c00042ea <dir_find+0x1a4>
c000422d:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004230:	88 d0                	mov    al,dl
c0004232:	83 e0 3f             	and    eax,0x3f
c0004235:	80 f9 e5             	cmp    cl,0xe5
c0004238:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000423b:	0f 84 87 00 00 00    	je     c00042c8 <dir_find+0x182>
c0004241:	80 e2 08             	and    dl,0x8
c0004244:	74 06                	je     c000424c <dir_find+0x106>
c0004246:	3c 0f                	cmp    al,0xf
c0004248:	75 7e                	jne    c00042c8 <dir_find+0x182>
c000424a:	eb 04                	jmp    c0004250 <dir_find+0x10a>
c000424c:	3c 0f                	cmp    al,0xf
c000424e:	75 4c                	jne    c000429c <dir_find+0x156>
c0004250:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004254:	75 7e                	jne    c00042d4 <dir_find+0x18e>
c0004256:	f6 c1 40             	test   cl,0x40
c0004259:	74 12                	je     c000426d <dir_find+0x127>
c000425b:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000425e:	83 e1 bf             	and    ecx,0xffffffbf
c0004261:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004265:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004268:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000426b:	eb 06                	jmp    c0004273 <dir_find+0x12d>
c000426d:	89 f8                	mov    eax,edi
c000426f:	38 c8                	cmp    al,cl
c0004271:	75 5c                	jne    c00042cf <dir_find+0x189>
c0004273:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004277:	bf ff ff ff ff       	mov    edi,0xffffffff
c000427c:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000427f:	75 53                	jne    c00042d4 <dir_find+0x18e>
c0004281:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004285:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004288:	89 ea                	mov    edx,ebp
c000428a:	e8 f4 fd ff ff       	call   c0004083 <cmp_lfn>
c000428f:	85 c0                	test   eax,eax
c0004291:	74 41                	je     c00042d4 <dir_find+0x18e>
c0004293:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004297:	8d 79 ff             	lea    edi,[ecx-0x1]
c000429a:	eb 38                	jmp    c00042d4 <dir_find+0x18e>
c000429c:	89 f8                	mov    eax,edi
c000429e:	84 c0                	test   al,al
c00042a0:	75 0d                	jne    c00042af <dir_find+0x169>
c00042a2:	89 e8                	mov    eax,ebp
c00042a4:	e8 98 de ff ff       	call   c0002141 <sum_sfn>
c00042a9:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042ad:	74 52                	je     c0004301 <dir_find+0x1bb>
c00042af:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042b3:	75 13                	jne    c00042c8 <dir_find+0x182>
c00042b5:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042b8:	b9 0b 00 00 00       	mov    ecx,0xb
c00042bd:	89 e8                	mov    eax,ebp
c00042bf:	e8 60 da ff ff       	call   c0001d24 <mem_cmp>
c00042c4:	85 c0                	test   eax,eax
c00042c6:	74 39                	je     c0004301 <dir_find+0x1bb>
c00042c8:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042d4:	31 d2                	xor    edx,edx
c00042d6:	89 d8                	mov    eax,ebx
c00042d8:	e8 5c f4 ff ff       	call   c0003739 <dir_next>
c00042dd:	85 c0                	test   eax,eax
c00042df:	0f 84 25 ff ff ff    	je     c000420a <dir_find+0xc4>
c00042e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00042e8:	eb 17                	jmp    c0004301 <dir_find+0x1bb>
c00042ea:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042f1:	eb 0e                	jmp    c0004301 <dir_find+0x1bb>
c00042f3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042f6:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042fb:	0f 85 75 fe ff ff    	jne    c0004176 <dir_find+0x30>
c0004301:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004304:	83 c4 1c             	add    esp,0x1c
c0004307:	5b                   	pop    ebx
c0004308:	5e                   	pop    esi
c0004309:	5f                   	pop    edi
c000430a:	5d                   	pop    ebp
c000430b:	c3                   	ret    

c000430c <dir_register>:
c000430c:	55                   	push   ebp
c000430d:	57                   	push   edi
c000430e:	56                   	push   esi
c000430f:	be 06 00 00 00       	mov    esi,0x6
c0004314:	53                   	push   ebx
c0004315:	83 ec 6c             	sub    esp,0x6c
c0004318:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c000431c:	0f 85 62 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004322:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004324:	31 ff                	xor    edi,edi
c0004326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004329:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000432e:	74 03                	je     c0004333 <dir_register+0x27>
c0004330:	47                   	inc    edi
c0004331:	eb f6                	jmp    c0004329 <dir_register+0x1d>
c0004333:	89 c3                	mov    ebx,eax
c0004335:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004339:	0f 85 e1 00 00 00    	jne    c0004420 <dir_register+0x114>
c000433f:	83 c7 0e             	add    edi,0xe
c0004342:	b9 0f 00 00 00       	mov    ecx,0xf
c0004347:	89 f8                	mov    eax,edi
c0004349:	31 d2                	xor    edx,edx
c000434b:	f7 f1                	div    ecx
c000434d:	8d 50 02             	lea    edx,[eax+0x2]
c0004350:	89 c7                	mov    edi,eax
c0004352:	89 d8                	mov    eax,ebx
c0004354:	e8 12 f8 ff ff       	call   c0003b6b <dir_alloc>
c0004359:	89 c6                	mov    esi,eax
c000435b:	85 c0                	test   eax,eax
c000435d:	0f 85 21 02 00 00    	jne    c0004584 <dir_register+0x278>
c0004363:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004369:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000436c:	c1 e7 05             	shl    edi,0x5
c000436f:	29 f8                	sub    eax,edi
c0004371:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004374:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004377:	a8 04                	test   al,0x4
c0004379:	0f 84 91 00 00 00    	je     c0004410 <dir_register+0x104>
c000437f:	83 e0 fb             	and    eax,0xfffffffb
c0004382:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004385:	89 d8                	mov    eax,ebx
c0004387:	e8 25 ec ff ff       	call   c0002fb1 <fill_first_frag>
c000438c:	85 c0                	test   eax,eax
c000438e:	0f 85 ee 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004394:	83 c9 ff             	or     ecx,0xffffffff
c0004397:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000439a:	89 d8                	mov    eax,ebx
c000439c:	e8 db eb ff ff       	call   c0002f7c <fill_last_frag>
c00043a1:	85 c0                	test   eax,eax
c00043a3:	0f 85 d9 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043a9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043ad:	74 61                	je     c0004410 <dir_register+0x104>
c00043af:	89 da                	mov    edx,ebx
c00043b1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043b5:	e8 ea f5 ff ff       	call   c00039a4 <load_obj_xdir>
c00043ba:	85 c0                	test   eax,eax
c00043bc:	0f 85 c0 01 00 00    	jne    c0004582 <dir_register+0x276>
c00043c2:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043c6:	31 c9                	xor    ecx,ecx
c00043c8:	c1 e2 09             	shl    edx,0x9
c00043cb:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043ce:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043d4:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043da:	83 c0 38             	add    eax,0x38
c00043dd:	e8 1c d9 ff ff       	call   c0001cfe <st_qword>
c00043e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043e5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043e8:	83 c0 28             	add    eax,0x28
c00043eb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ee:	e8 0b d9 ff ff       	call   c0001cfe <st_qword>
c00043f3:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043f6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043f9:	83 c8 01             	or     eax,0x1
c00043fc:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004403:	e8 db f7 ff ff       	call   c0003be3 <store_xdir>
c0004408:	85 c0                	test   eax,eax
c000440a:	0f 85 72 01 00 00    	jne    c0004582 <dir_register+0x276>
c0004410:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004413:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004416:	e8 c1 fb ff ff       	call   c0003fdc <create_xdir>
c000441b:	e9 64 01 00 00       	jmp    c0004584 <dir_register+0x278>
c0004420:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004423:	b9 0c 00 00 00       	mov    ecx,0xc
c0004428:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000442c:	89 c2                	mov    edx,eax
c000442e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004432:	e8 cd d8 ff ff       	call   c0001d04 <mem_cpy>
c0004437:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c000443c:	74 58                	je     c0004496 <dir_register+0x18a>
c000443e:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004442:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000444a:	83 ec 0c             	sub    esp,0xc
c000444d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004450:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004454:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004458:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000445c:	e8 24 dc ff ff       	call   c0002085 <gen_numname>
c0004461:	89 d8                	mov    eax,ebx
c0004463:	e8 de fc ff ff       	call   c0004146 <dir_find>
c0004468:	83 c4 10             	add    esp,0x10
c000446b:	89 c6                	mov    esi,eax
c000446d:	85 c0                	test   eax,eax
c000446f:	75 15                	jne    c0004486 <dir_register+0x17a>
c0004471:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004475:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000447a:	75 ce                	jne    c000444a <dir_register+0x13e>
c000447c:	be 07 00 00 00       	mov    esi,0x7
c0004481:	e9 fe 00 00 00       	jmp    c0004584 <dir_register+0x278>
c0004486:	83 f8 04             	cmp    eax,0x4
c0004489:	0f 85 f5 00 00 00    	jne    c0004584 <dir_register+0x278>
c000448f:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004493:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004496:	b9 01 00 00 00       	mov    ecx,0x1
c000449b:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044a0:	74 0f                	je     c00044b1 <dir_register+0x1a5>
c00044a2:	b9 0d 00 00 00       	mov    ecx,0xd
c00044a7:	8d 47 0c             	lea    eax,[edi+0xc]
c00044aa:	31 d2                	xor    edx,edx
c00044ac:	f7 f1                	div    ecx
c00044ae:	8d 48 01             	lea    ecx,[eax+0x1]
c00044b1:	89 ca                	mov    edx,ecx
c00044b3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044b7:	89 d8                	mov    eax,ebx
c00044b9:	e8 ad f6 ff ff       	call   c0003b6b <dir_alloc>
c00044be:	89 c6                	mov    esi,eax
c00044c0:	85 c0                	test   eax,eax
c00044c2:	0f 85 bc 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044cc:	49                   	dec    ecx
c00044cd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044d1:	74 6a                	je     c000453d <dir_register+0x231>
c00044d3:	89 c8                	mov    eax,ecx
c00044d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044d8:	c1 e0 05             	shl    eax,0x5
c00044db:	29 c2                	sub    edx,eax
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 fd ec ff ff       	call   c00031e1 <dir_sdi>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 96 00 00 00    	jne    c0004584 <dir_register+0x278>
c00044ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044f2:	e8 4a dc ff ff       	call   c0002141 <sum_sfn>
c00044f7:	0f b6 f8             	movzx  edi,al
c00044fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004500:	89 e8                	mov    eax,ebp
c0004502:	e8 5c df ff ff       	call   c0002463 <move_window>
c0004507:	89 c6                	mov    esi,eax
c0004509:	85 c0                	test   eax,eax
c000450b:	75 77                	jne    c0004584 <dir_register+0x278>
c000450d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004512:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004515:	83 ec 0c             	sub    esp,0xc
c0004518:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000451b:	57                   	push   edi
c000451c:	e8 e0 da ff ff       	call   c0002001 <put_lfn>
c0004521:	31 d2                	xor    edx,edx
c0004523:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004527:	89 d8                	mov    eax,ebx
c0004529:	e8 0b f2 ff ff       	call   c0003739 <dir_next>
c000452e:	83 c4 10             	add    esp,0x10
c0004531:	89 c6                	mov    esi,eax
c0004533:	85 c0                	test   eax,eax
c0004535:	75 4d                	jne    c0004584 <dir_register+0x278>
c0004537:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c000453b:	75 bd                	jne    c00044fa <dir_register+0x1ee>
c000453d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004540:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004543:	89 e8                	mov    eax,ebp
c0004545:	e8 19 df ff ff       	call   c0002463 <move_window>
c000454a:	89 c6                	mov    esi,eax
c000454c:	85 c0                	test   eax,eax
c000454e:	75 34                	jne    c0004584 <dir_register+0x278>
c0004550:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004553:	b9 20 00 00 00       	mov    ecx,0x20
c0004558:	31 d2                	xor    edx,edx
c000455a:	e8 ba d7 ff ff       	call   c0001d19 <mem_set>
c000455f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004566:	b9 0b 00 00 00       	mov    ecx,0xb
c000456b:	e8 94 d7 ff ff       	call   c0001d04 <mem_cpy>
c0004570:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004573:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004576:	83 e0 18             	and    eax,0x18
c0004579:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000457c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004580:	eb 02                	jmp    c0004584 <dir_register+0x278>
c0004582:	89 c6                	mov    esi,eax
c0004584:	83 c4 6c             	add    esp,0x6c
c0004587:	89 f0                	mov    eax,esi
c0004589:	5b                   	pop    ebx
c000458a:	5e                   	pop    esi
c000458b:	5f                   	pop    edi
c000458c:	5d                   	pop    ebp
c000458d:	c3                   	ret    

c000458e <sync_fs>:
c000458e:	56                   	push   esi
c000458f:	53                   	push   ebx
c0004590:	53                   	push   ebx
c0004591:	89 c3                	mov    ebx,eax
c0004593:	e8 37 de ff ff       	call   c00023cf <sync_window>
c0004598:	85 c0                	test   eax,eax
c000459a:	0f 85 b1 00 00 00    	jne    c0004651 <sync_fs+0xc3>
c00045a0:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045a3:	0f 85 8e 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045a9:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045ad:	0f 85 84 00 00 00    	jne    c0004637 <sync_fs+0xa9>
c00045b3:	b9 00 02 00 00       	mov    ecx,0x200
c00045b8:	8d 73 54             	lea    esi,[ebx+0x54]
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	89 f0                	mov    eax,esi
c00045bf:	e8 55 d7 ff ff       	call   c0001d19 <mem_set>
c00045c4:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045ca:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045cf:	e8 23 d7 ff ff       	call   c0001cf7 <st_word>
c00045d4:	ba 52 52 61 41       	mov    edx,0x41615252
c00045d9:	89 f0                	mov    eax,esi
c00045db:	e8 1b d7 ff ff       	call   c0001cfb <st_dword>
c00045e0:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045e6:	ba 72 72 41 61       	mov    edx,0x61417272
c00045eb:	e8 0b d7 ff ff       	call   c0001cfb <st_dword>
c00045f0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045f3:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045f9:	e8 fd d6 ff ff       	call   c0001cfb <st_dword>
c00045fe:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004601:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004607:	e8 ef d6 ff ff       	call   c0001cfb <st_dword>
c000460c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000460f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004612:	83 c0 01             	add    eax,0x1
c0004615:	83 d2 00             	adc    edx,0x0
c0004618:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c000461b:	83 ec 0c             	sub    esp,0xc
c000461e:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004621:	6a 01                	push   0x1
c0004623:	52                   	push   edx
c0004624:	50                   	push   eax
c0004625:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004629:	56                   	push   esi
c000462a:	50                   	push   eax
c000462b:	e8 20 d6 ff ff       	call   c0001c50 <disk_write>
c0004630:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004634:	83 c4 20             	add    esp,0x20
c0004637:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000463b:	51                   	push   ecx
c000463c:	6a 00                	push   0x0
c000463e:	6a 00                	push   0x0
c0004640:	50                   	push   eax
c0004641:	e8 20 d6 ff ff       	call   c0001c66 <disk_ioctl>
c0004646:	83 c4 10             	add    esp,0x10
c0004649:	85 c0                	test   eax,eax
c000464b:	0f 95 c0             	setne  al
c000464e:	0f b6 c0             	movzx  eax,al
c0004651:	5a                   	pop    edx
c0004652:	5b                   	pop    ebx
c0004653:	5e                   	pop    esi
c0004654:	c3                   	ret    

c0004655 <create_partition>:
c0004655:	55                   	push   ebp
c0004656:	0f b6 c0             	movzx  eax,al
c0004659:	57                   	push   edi
c000465a:	56                   	push   esi
c000465b:	53                   	push   ebx
c000465c:	83 ec 60             	sub    esp,0x60
c000465f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004663:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004667:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000466b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000466f:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004673:	50                   	push   eax
c0004674:	6a 01                	push   0x1
c0004676:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000467a:	e8 e7 d5 ff ff       	call   c0001c66 <disk_ioctl>
c000467f:	83 c4 10             	add    esp,0x10
c0004682:	85 c0                	test   eax,eax
c0004684:	74 0a                	je     c0004690 <create_partition+0x3b>
c0004686:	b8 01 00 00 00       	mov    eax,0x1
c000468b:	e9 67 05 00 00       	jmp    c0004bf7 <create_partition+0x5a2>
c0004690:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004694:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004698:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000469c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046a5:	0f 86 ed 03 00 00    	jbe    c0004a98 <create_partition+0x443>
c00046ab:	83 c0 df             	add    eax,0xffffffdf
c00046ae:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046b6:	83 d2 ff             	adc    edx,0xffffffff
c00046b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046bd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046c9:	83 c0 bd             	add    eax,0xffffffbd
c00046cc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046d3:	83 d2 ff             	adc    edx,0xffffffff
c00046d6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046da:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046de:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046e6:	be 22 00 00 00       	mov    esi,0x22
c00046eb:	31 ff                	xor    edi,edi
c00046ed:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046f5:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046fd:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004705:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004709:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000470f:	75 0e                	jne    c000471f <create_partition+0xca>
c0004711:	b9 00 02 00 00       	mov    ecx,0x200
c0004716:	31 d2                	xor    edx,edx
c0004718:	89 d8                	mov    eax,ebx
c000471a:	e8 fa d5 ff ff       	call   c0001d19 <mem_set>
c000471f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004723:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004727:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000472b:	0b 04 24             	or     eax,DWORD PTR [esp]
c000472e:	0f 84 23 01 00 00    	je     c0004857 <create_partition+0x202>
c0004734:	89 f0                	mov    eax,esi
c0004736:	89 fa                	mov    edx,edi
c0004738:	05 ff 07 00 00       	add    eax,0x7ff
c000473d:	83 d2 00             	adc    edx,0x0
c0004740:	89 c1                	mov    ecx,eax
c0004742:	89 d7                	mov    edi,edx
c0004744:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000474a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000474e:	89 ce                	mov    esi,ecx
c0004750:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004754:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004758:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c000475c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000475f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004763:	89 04 24             	mov    DWORD PTR [esp],eax
c0004766:	b8 64 00 00 00       	mov    eax,0x64
c000476b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000476e:	b8 00 00 00 00       	mov    eax,0x0
c0004773:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004777:	72 41                	jb     c00047ba <create_partition+0x165>
c0004779:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000477d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004781:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004785:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000478a:	01 c1                	add    ecx,eax
c000478c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004790:	f7 24 24             	mul    DWORD PTR [esp]
c0004793:	6a 00                	push   0x0
c0004795:	01 ca                	add    edx,ecx
c0004797:	6a 64                	push   0x64
c0004799:	52                   	push   edx
c000479a:	50                   	push   eax
c000479b:	e8 14 2a 02 00       	call   c00271b4 <__udivdi3>
c00047a0:	83 c4 10             	add    esp,0x10
c00047a3:	05 ff 07 00 00       	add    eax,0x7ff
c00047a8:	83 d2 00             	adc    edx,0x0
c00047ab:	89 c1                	mov    ecx,eax
c00047ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047b1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047b7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047c1:	01 f0                	add    eax,esi
c00047c3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047c7:	11 fa                	adc    edx,edi
c00047c9:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047cd:	19 d1                	sbb    ecx,edx
c00047cf:	73 2e                	jae    c00047ff <create_partition+0x1aa>
c00047d1:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047d5:	89 f8                	mov    eax,edi
c00047d7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047de:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047e2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047ea:	73 6b                	jae    c0004857 <create_partition+0x202>
c00047ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047f4:	29 f0                	sub    eax,esi
c00047f6:	19 fa                	sbb    edx,edi
c00047f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00047fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004803:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004806:	74 4f                	je     c0004857 <create_partition+0x202>
c0004808:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c000480b:	b9 10 00 00 00       	mov    ecx,0x10
c0004810:	ba 50 9d 02 c0       	mov    edx,0xc0029d50
c0004815:	e8 ea d4 ff ff       	call   c0001d04 <mem_cpy>
c000481a:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c000481e:	b9 10 00 00 00       	mov    ecx,0x10
c0004823:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004827:	e8 2c db ff ff       	call   c0002358 <make_rand>
c000482c:	89 f2                	mov    edx,esi
c000482e:	89 f9                	mov    ecx,edi
c0004830:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004834:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004838:	e8 c1 d4 ff ff       	call   c0001cfe <st_qword>
c000483d:	03 34 24             	add    esi,DWORD PTR [esp]
c0004840:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004844:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004848:	89 f2                	mov    edx,esi
c000484a:	89 f9                	mov    ecx,edi
c000484c:	83 c2 ff             	add    edx,0xffffffff
c000484f:	83 d1 ff             	adc    ecx,0xffffffff
c0004852:	e8 a7 d4 ff ff       	call   c0001cfe <st_qword>
c0004857:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000485b:	83 e8 80             	sub    eax,0xffffff80
c000485e:	89 c5                	mov    ebp,eax
c0004860:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004864:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000486a:	75 6b                	jne    c00048d7 <create_partition+0x282>
c000486c:	45                   	inc    ebp
c000486d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004871:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004876:	e8 39 da ff ff       	call   c00022b4 <crc32>
c000487b:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004881:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004885:	75 e5                	jne    c000486c <create_partition+0x217>
c0004887:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000488b:	31 d2                	xor    edx,edx
c000488d:	83 ec 0c             	sub    esp,0xc
c0004890:	c1 ed 09             	shr    ebp,0x9
c0004893:	6a 01                	push   0x1
c0004895:	8d 45 02             	lea    eax,[ebp+0x2]
c0004898:	52                   	push   edx
c0004899:	50                   	push   eax
c000489a:	53                   	push   ebx
c000489b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000489f:	e8 ac d3 ff ff       	call   c0001c50 <disk_write>
c00048a4:	83 c4 20             	add    esp,0x20
c00048a7:	85 c0                	test   eax,eax
c00048a9:	0f 85 d7 fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048af:	83 ec 0c             	sub    esp,0xc
c00048b2:	31 d2                	xor    edx,edx
c00048b4:	6a 01                	push   0x1
c00048b6:	89 e8                	mov    eax,ebp
c00048b8:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048bc:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048c0:	52                   	push   edx
c00048c1:	50                   	push   eax
c00048c2:	53                   	push   ebx
c00048c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c7:	e8 84 d3 ff ff       	call   c0001c50 <disk_write>
c00048cc:	83 c4 20             	add    esp,0x20
c00048cf:	85 c0                	test   eax,eax
c00048d1:	0f 85 af fd ff ff    	jne    c0004686 <create_partition+0x31>
c00048d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048df:	3d 00 40 00 00       	cmp    eax,0x4000
c00048e4:	74 0d                	je     c00048f3 <create_partition+0x29e>
c00048e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048ea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ee:	e9 12 fe ff ff       	jmp    c0004705 <create_partition+0xb0>
c00048f3:	31 d2                	xor    edx,edx
c00048f5:	b9 00 02 00 00       	mov    ecx,0x200
c00048fa:	89 d8                	mov    eax,ebx
c00048fc:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048ff:	e8 15 d4 ff ff       	call   c0001d19 <mem_set>
c0004904:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004907:	b9 10 00 00 00       	mov    ecx,0x10
c000490c:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c0004911:	89 d8                	mov    eax,ebx
c0004913:	e8 ec d3 ff ff       	call   c0001d04 <mem_cpy>
c0004918:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000491c:	8d 43 58             	lea    eax,[ebx+0x58]
c000491f:	f7 d2                	not    edx
c0004921:	e8 d5 d3 ff ff       	call   c0001cfb <st_dword>
c0004926:	8d 43 18             	lea    eax,[ebx+0x18]
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	89 04 24             	mov    DWORD PTR [esp],eax
c000492e:	ba 01 00 00 00       	mov    edx,0x1
c0004933:	e8 c6 d3 ff ff       	call   c0001cfe <st_qword>
c0004938:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000493c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004940:	83 c2 ff             	add    edx,0xffffffff
c0004943:	89 e8                	mov    eax,ebp
c0004945:	83 d1 ff             	adc    ecx,0xffffffff
c0004948:	e8 b1 d3 ff ff       	call   c0001cfe <st_qword>
c000494d:	31 c9                	xor    ecx,ecx
c000494f:	8d 43 28             	lea    eax,[ebx+0x28]
c0004952:	ba 22 00 00 00       	mov    edx,0x22
c0004957:	e8 a2 d3 ff ff       	call   c0001cfe <st_qword>
c000495c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004960:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004964:	83 c2 de             	add    edx,0xffffffde
c0004967:	8d 43 30             	lea    eax,[ebx+0x30]
c000496a:	83 d1 ff             	adc    ecx,0xffffffff
c000496d:	31 f6                	xor    esi,esi
c000496f:	e8 8a d3 ff ff       	call   c0001cfe <st_qword>
c0004974:	8d 43 54             	lea    eax,[ebx+0x54]
c0004977:	ba 80 00 00 00       	mov    edx,0x80
c000497c:	e8 7a d3 ff ff       	call   c0001cfb <st_dword>
c0004981:	8d 43 50             	lea    eax,[ebx+0x50]
c0004984:	ba 80 00 00 00       	mov    edx,0x80
c0004989:	e8 6d d3 ff ff       	call   c0001cfb <st_dword>
c000498e:	ba 02 00 00 00       	mov    edx,0x2
c0004993:	89 f8                	mov    eax,edi
c0004995:	e8 61 d3 ff ff       	call   c0001cfb <st_dword>
c000499a:	8d 53 38             	lea    edx,[ebx+0x38]
c000499d:	b9 10 00 00 00       	mov    ecx,0x10
c00049a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049a6:	e8 ad d9 ff ff       	call   c0002358 <make_rand>
c00049ab:	83 c8 ff             	or     eax,0xffffffff
c00049ae:	46                   	inc    esi
c00049af:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049b4:	e8 fb d8 ff ff       	call   c00022b4 <crc32>
c00049b9:	83 fe 5c             	cmp    esi,0x5c
c00049bc:	75 f0                	jne    c00049ae <create_partition+0x359>
c00049be:	f7 d0                	not    eax
c00049c0:	8d 73 10             	lea    esi,[ebx+0x10]
c00049c3:	89 c2                	mov    edx,eax
c00049c5:	89 f0                	mov    eax,esi
c00049c7:	e8 2f d3 ff ff       	call   c0001cfb <st_dword>
c00049cc:	83 ec 0c             	sub    esp,0xc
c00049cf:	6a 01                	push   0x1
c00049d1:	6a 00                	push   0x0
c00049d3:	6a 01                	push   0x1
c00049d5:	53                   	push   ebx
c00049d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049da:	e8 71 d2 ff ff       	call   c0001c50 <disk_write>
c00049df:	83 c4 20             	add    esp,0x20
c00049e2:	85 c0                	test   eax,eax
c00049e4:	0f 85 9c fc ff ff    	jne    c0004686 <create_partition+0x31>
c00049ea:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ee:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049f2:	83 c2 ff             	add    edx,0xffffffff
c00049f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049f8:	83 d1 ff             	adc    ecx,0xffffffff
c00049fb:	e8 fe d2 ff ff       	call   c0001cfe <st_qword>
c0004a00:	ba 01 00 00 00       	mov    edx,0x1
c0004a05:	31 c9                	xor    ecx,ecx
c0004a07:	89 e8                	mov    eax,ebp
c0004a09:	e8 f0 d2 ff ff       	call   c0001cfe <st_qword>
c0004a0e:	89 f8                	mov    eax,edi
c0004a10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a18:	31 ff                	xor    edi,edi
c0004a1a:	e8 df d2 ff ff       	call   c0001cfe <st_qword>
c0004a1f:	89 f0                	mov    eax,esi
c0004a21:	31 d2                	xor    edx,edx
c0004a23:	e8 d3 d2 ff ff       	call   c0001cfb <st_dword>
c0004a28:	83 c8 ff             	or     eax,0xffffffff
c0004a2b:	47                   	inc    edi
c0004a2c:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a31:	e8 7e d8 ff ff       	call   c00022b4 <crc32>
c0004a36:	83 ff 5c             	cmp    edi,0x5c
c0004a39:	75 f0                	jne    c0004a2b <create_partition+0x3d6>
c0004a3b:	f7 d0                	not    eax
c0004a3d:	89 c2                	mov    edx,eax
c0004a3f:	89 f0                	mov    eax,esi
c0004a41:	e8 b5 d2 ff ff       	call   c0001cfb <st_dword>
c0004a46:	83 ec 0c             	sub    esp,0xc
c0004a49:	6a 01                	push   0x1
c0004a4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a4f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a53:	83 c0 ff             	add    eax,0xffffffff
c0004a56:	83 d2 ff             	adc    edx,0xffffffff
c0004a59:	52                   	push   edx
c0004a5a:	50                   	push   eax
c0004a5b:	53                   	push   ebx
c0004a5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a60:	e8 eb d1 ff ff       	call   c0001c50 <disk_write>
c0004a65:	83 c4 20             	add    esp,0x20
c0004a68:	85 c0                	test   eax,eax
c0004a6a:	0f 85 16 fc ff ff    	jne    c0004686 <create_partition+0x31>
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	89 d8                	mov    eax,ebx
c0004a74:	b9 00 02 00 00       	mov    ecx,0x200
c0004a79:	e8 9b d2 ff ff       	call   c0001d19 <mem_set>
c0004a7e:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a84:	b9 10 00 00 00       	mov    ecx,0x10
c0004a89:	ba 50 9c 02 c0       	mov    edx,0xc0029c50
c0004a8e:	e8 71 d2 ff ff       	call   c0001d04 <mem_cpy>
c0004a93:	e9 21 01 00 00       	jmp    c0004bb9 <create_partition+0x564>
c0004a98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a9c:	b9 05 00 00 00       	mov    ecx,0x5
c0004aa1:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aa4:	bf 08 00 00 00       	mov    edi,0x8
c0004aa9:	89 f8                	mov    eax,edi
c0004aab:	31 d2                	xor    edx,edx
c0004aad:	0f b6 f0             	movzx  esi,al
c0004ab0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ab3:	f7 f6                	div    esi
c0004ab5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004aba:	76 0a                	jbe    c0004ac6 <create_partition+0x471>
c0004abc:	d1 e7                	shl    edi,1
c0004abe:	49                   	dec    ecx
c0004abf:	75 e8                	jne    c0004aa9 <create_partition+0x454>
c0004ac1:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004ac6:	b9 00 02 00 00       	mov    ecx,0x200
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	89 d8                	mov    eax,ebx
c0004acf:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ad5:	e8 3f d2 ff ff       	call   c0001d19 <mem_set>
c0004ada:	b9 64 00 00 00       	mov    ecx,0x64
c0004adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ae2:	31 d2                	xor    edx,edx
c0004ae4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aec:	f7 f1                	div    ecx
c0004aee:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004af3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004af7:	89 f8                	mov    eax,edi
c0004af9:	0f b6 c0             	movzx  eax,al
c0004afc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b00:	e9 80 00 00 00       	jmp    c0004b85 <create_partition+0x530>
c0004b05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b08:	29 cf                	sub    edi,ecx
c0004b0a:	89 ca                	mov    edx,ecx
c0004b0c:	89 f0                	mov    eax,esi
c0004b0e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b13:	e8 e3 d1 ff ff       	call   c0001cfb <st_dword>
c0004b18:	8d 46 04             	lea    eax,[esi+0x4]
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	83 c6 10             	add    esi,0x10
c0004b20:	e8 d6 d1 ff ff       	call   c0001cfb <st_dword>
c0004b25:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b29:	31 d2                	xor    edx,edx
c0004b2b:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b2e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b32:	89 c8                	mov    eax,ecx
c0004b34:	01 f9                	add    ecx,edi
c0004b36:	f7 f5                	div    ebp
c0004b38:	89 d5                	mov    ebp,edx
c0004b3a:	31 d2                	xor    edx,edx
c0004b3c:	45                   	inc    ebp
c0004b3d:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b41:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b44:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b47:	89 c2                	mov    edx,eax
c0004b49:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b4c:	c1 ea 02             	shr    edx,0x2
c0004b4f:	83 e2 c0             	and    edx,0xffffffc0
c0004b52:	09 ea                	or     edx,ebp
c0004b54:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b59:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b5c:	31 d2                	xor    edx,edx
c0004b5e:	f7 f5                	div    ebp
c0004b60:	89 d7                	mov    edi,edx
c0004b62:	31 d2                	xor    edx,edx
c0004b64:	47                   	inc    edi
c0004b65:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b69:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b6c:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b6f:	89 c5                	mov    ebp,eax
c0004b71:	c1 ed 02             	shr    ebp,0x2
c0004b74:	83 e5 c0             	and    ebp,0xffffffc0
c0004b77:	09 ef                	or     edi,ebp
c0004b79:	89 fa                	mov    edx,edi
c0004b7b:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b7e:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b83:	74 34                	je     c0004bb9 <create_partition+0x564>
c0004b85:	85 c9                	test   ecx,ecx
c0004b87:	74 30                	je     c0004bb9 <create_partition+0x564>
c0004b89:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b8c:	76 2b                	jbe    c0004bb9 <create_partition+0x564>
c0004b8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b92:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b96:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b99:	83 ff 64             	cmp    edi,0x64
c0004b9c:	76 4b                	jbe    c0004be9 <create_partition+0x594>
c0004b9e:	89 f8                	mov    eax,edi
c0004ba0:	01 c8                	add    eax,ecx
c0004ba2:	0f 82 5d ff ff ff    	jb     c0004b05 <create_partition+0x4b0>
c0004ba8:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bab:	0f 87 54 ff ff ff    	ja     c0004b05 <create_partition+0x4b0>
c0004bb1:	85 ff                	test   edi,edi
c0004bb3:	0f 85 51 ff ff ff    	jne    c0004b0a <create_partition+0x4b5>
c0004bb9:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004bbf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bc4:	e8 2e d1 ff ff       	call   c0001cf7 <st_word>
c0004bc9:	83 ec 0c             	sub    esp,0xc
c0004bcc:	6a 01                	push   0x1
c0004bce:	6a 00                	push   0x0
c0004bd0:	6a 00                	push   0x0
c0004bd2:	53                   	push   ebx
c0004bd3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bd7:	e8 74 d0 ff ff       	call   c0001c50 <disk_write>
c0004bdc:	83 c4 20             	add    esp,0x20
c0004bdf:	85 c0                	test   eax,eax
c0004be1:	0f 95 c0             	setne  al
c0004be4:	0f b6 c0             	movzx  eax,al
c0004be7:	eb 0e                	jmp    c0004bf7 <create_partition+0x5a2>
c0004be9:	74 07                	je     c0004bf2 <create_partition+0x59d>
c0004beb:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bf0:	eb ac                	jmp    c0004b9e <create_partition+0x549>
c0004bf2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bf5:	eb a7                	jmp    c0004b9e <create_partition+0x549>
c0004bf7:	83 c4 5c             	add    esp,0x5c
c0004bfa:	5b                   	pop    ebx
c0004bfb:	5e                   	pop    esi
c0004bfc:	5f                   	pop    edi
c0004bfd:	5d                   	pop    ebp
c0004bfe:	c3                   	ret    

c0004bff <get_fileinfo>:
c0004bff:	55                   	push   ebp
c0004c00:	57                   	push   edi
c0004c01:	56                   	push   esi
c0004c02:	53                   	push   ebx
c0004c03:	83 ec 1c             	sub    esp,0x1c
c0004c06:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c08:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c0c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c10:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c13:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c16:	0f 84 dc 01 00 00    	je     c0004df8 <get_fileinfo+0x1f9>
c0004c1c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c1f:	75 0f                	jne    c0004c30 <get_fileinfo+0x31>
c0004c21:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c24:	83 c4 1c             	add    esp,0x1c
c0004c27:	5b                   	pop    ebx
c0004c28:	5e                   	pop    esi
c0004c29:	5f                   	pop    edi
c0004c2a:	5d                   	pop    ebp
c0004c2b:	e9 58 d5 ff ff       	jmp    c0002188 <get_xfileinfo>
c0004c30:	89 d3                	mov    ebx,edx
c0004c32:	89 c6                	mov    esi,eax
c0004c34:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c38:	74 6a                	je     c0004ca4 <get_fileinfo+0xa5>
c0004c3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c42:	31 ed                	xor    ebp,ebp
c0004c44:	31 ff                	xor    edi,edi
c0004c46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c4a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c4e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c51:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c55:	66 85 d2             	test   dx,dx
c0004c58:	74 3e                	je     c0004c98 <get_fileinfo+0x99>
c0004c5a:	66 85 ed             	test   bp,bp
c0004c5d:	75 0c                	jne    c0004c6b <get_fileinfo+0x6c>
c0004c5f:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c65:	66 3d ff 07          	cmp    ax,0x7ff
c0004c69:	76 22                	jbe    c0004c8d <get_fileinfo+0x8e>
c0004c6b:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c70:	89 e8                	mov    eax,ebp
c0004c72:	29 f9                	sub    ecx,edi
c0004c74:	c1 e0 10             	shl    eax,0x10
c0004c77:	09 d0                	or     eax,edx
c0004c79:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c7d:	e8 a3 d1 ff ff       	call   c0001e25 <put_utf>
c0004c82:	84 c0                	test   al,al
c0004c84:	74 10                	je     c0004c96 <get_fileinfo+0x97>
c0004c86:	0f b6 c0             	movzx  eax,al
c0004c89:	31 d2                	xor    edx,edx
c0004c8b:	01 c7                	add    edi,eax
c0004c8d:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c92:	89 d5                	mov    ebp,edx
c0004c94:	eb b0                	jmp    c0004c46 <get_fileinfo+0x47>
c0004c96:	31 ff                	xor    edi,edi
c0004c98:	66 85 ed             	test   bp,bp
c0004c9b:	74 02                	je     c0004c9f <get_fileinfo+0xa0>
c0004c9d:	31 ff                	xor    edi,edi
c0004c9f:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004ca4:	31 ff                	xor    edi,edi
c0004ca6:	31 c9                	xor    ecx,ecx
c0004ca8:	83 f9 0a             	cmp    ecx,0xa
c0004cab:	0f 87 ad 00 00 00    	ja     c0004d5e <get_fileinfo+0x15f>
c0004cb1:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb4:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cb7:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004cbb:	66 83 fa 20          	cmp    dx,0x20
c0004cbf:	0f 84 92 00 00 00    	je     c0004d57 <get_fileinfo+0x158>
c0004cc5:	66 83 fa 05          	cmp    dx,0x5
c0004cc9:	75 05                	jne    c0004cd0 <get_fileinfo+0xd1>
c0004ccb:	ba e5 00 00 00       	mov    edx,0xe5
c0004cd0:	83 ff 0b             	cmp    edi,0xb
c0004cd3:	77 0b                	ja     c0004ce0 <get_fileinfo+0xe1>
c0004cd5:	83 fd 09             	cmp    ebp,0x9
c0004cd8:	75 06                	jne    c0004ce0 <get_fileinfo+0xe1>
c0004cda:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cdf:	47                   	inc    edi
c0004ce0:	0f b7 c2             	movzx  eax,dx
c0004ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce7:	e8 6d d0 ff ff       	call   c0001d59 <dbc_1st>
c0004cec:	85 c0                	test   eax,eax
c0004cee:	74 2f                	je     c0004d1f <get_fileinfo+0x120>
c0004cf0:	83 fd 08             	cmp    ebp,0x8
c0004cf3:	74 2a                	je     c0004d1f <get_fileinfo+0x120>
c0004cf5:	83 fd 0b             	cmp    ebp,0xb
c0004cf8:	74 25                	je     c0004d1f <get_fileinfo+0x120>
c0004cfa:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cfd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d01:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d05:	e8 52 d0 ff ff       	call   c0001d5c <dbc_2nd>
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 11                	je     c0004d1f <get_fileinfo+0x120>
c0004d0e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d12:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d17:	c1 e2 08             	shl    edx,0x8
c0004d1a:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d1d:	09 c2                	or     edx,eax
c0004d1f:	0f b7 d2             	movzx  edx,dx
c0004d22:	50                   	push   eax
c0004d23:	50                   	push   eax
c0004d24:	68 b5 01 00 00       	push   0x1b5
c0004d29:	52                   	push   edx
c0004d2a:	e8 46 38 00 00       	call   c0008575 <ff_oem2uni>
c0004d2f:	83 c4 10             	add    esp,0x10
c0004d32:	66 85 c0             	test   ax,ax
c0004d35:	75 04                	jne    c0004d3b <get_fileinfo+0x13c>
c0004d37:	31 ff                	xor    edi,edi
c0004d39:	eb 23                	jmp    c0004d5e <get_fileinfo+0x15f>
c0004d3b:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d40:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d44:	29 f9                	sub    ecx,edi
c0004d46:	0f b7 c0             	movzx  eax,ax
c0004d49:	e8 d7 d0 ff ff       	call   c0001e25 <put_utf>
c0004d4e:	84 c0                	test   al,al
c0004d50:	74 e5                	je     c0004d37 <get_fileinfo+0x138>
c0004d52:	0f b6 c0             	movzx  eax,al
c0004d55:	01 c7                	add    edi,eax
c0004d57:	89 e9                	mov    ecx,ebp
c0004d59:	e9 4a ff ff ff       	jmp    c0004ca8 <get_fileinfo+0xa9>
c0004d5e:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d63:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d67:	75 54                	jne    c0004dbd <get_fileinfo+0x1be>
c0004d69:	85 ff                	test   edi,edi
c0004d6b:	75 0b                	jne    c0004d78 <get_fileinfo+0x179>
c0004d6d:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d71:	ba 01 00 00 00       	mov    edx,0x1
c0004d76:	eb 33                	jmp    c0004dab <get_fileinfo+0x1ac>
c0004d78:	b1 08                	mov    cl,0x8
c0004d7a:	31 d2                	xor    edx,edx
c0004d7c:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d82:	84 c0                	test   al,al
c0004d84:	74 25                	je     c0004dab <get_fileinfo+0x1ac>
c0004d86:	66 83 f8 2e          	cmp    ax,0x2e
c0004d8a:	74 16                	je     c0004da2 <get_fileinfo+0x1a3>
c0004d8c:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d8f:	66 83 ff 19          	cmp    di,0x19
c0004d93:	77 0f                	ja     c0004da4 <get_fileinfo+0x1a5>
c0004d95:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d98:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d9b:	74 07                	je     c0004da4 <get_fileinfo+0x1a5>
c0004d9d:	83 c0 20             	add    eax,0x20
c0004da0:	eb 02                	jmp    c0004da4 <get_fileinfo+0x1a5>
c0004da2:	b1 10                	mov    cl,0x10
c0004da4:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004da8:	42                   	inc    edx
c0004da9:	eb d1                	jmp    c0004d7c <get_fileinfo+0x17d>
c0004dab:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004db0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db3:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004db7:	75 04                	jne    c0004dbd <get_fileinfo+0x1be>
c0004db9:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004dbd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc0:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004dc3:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dc6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc9:	83 c0 1c             	add    eax,0x1c
c0004dcc:	e8 c1 ce ff ff       	call   c0001c92 <ld_dword>
c0004dd1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dd8:	89 03                	mov    DWORD PTR [ebx],eax
c0004dda:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ddd:	83 c0 16             	add    eax,0x16
c0004de0:	e8 a0 ce ff ff       	call   c0001c85 <ld_word>
c0004de5:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004de9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dec:	83 c0 18             	add    eax,0x18
c0004def:	e8 91 ce ff ff       	call   c0001c85 <ld_word>
c0004df4:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004df8:	83 c4 1c             	add    esp,0x1c
c0004dfb:	5b                   	pop    ebx
c0004dfc:	5e                   	pop    esi
c0004dfd:	5f                   	pop    edi
c0004dfe:	5d                   	pop    ebp
c0004dff:	c3                   	ret    

c0004e00 <ld_clust.isra.0>:
c0004e00:	56                   	push   esi
c0004e01:	89 c6                	mov    esi,eax
c0004e03:	53                   	push   ebx
c0004e04:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e07:	89 d3                	mov    ebx,edx
c0004e09:	e8 77 ce ff ff       	call   c0001c85 <ld_word>
c0004e0e:	0f b7 c8             	movzx  ecx,ax
c0004e11:	89 f0                	mov    eax,esi
c0004e13:	3c 03                	cmp    al,0x3
c0004e15:	75 0d                	jne    c0004e24 <ld_clust.isra.0+0x24>
c0004e17:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e1a:	e8 66 ce ff ff       	call   c0001c85 <ld_word>
c0004e1f:	c1 e0 10             	shl    eax,0x10
c0004e22:	09 c1                	or     ecx,eax
c0004e24:	89 c8                	mov    eax,ecx
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <st_clust.isra.1>:
c0004e29:	56                   	push   esi
c0004e2a:	89 c6                	mov    esi,eax
c0004e2c:	53                   	push   ebx
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	0f b7 d1             	movzx  edx,cx
c0004e32:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e35:	e8 bd ce ff ff       	call   c0001cf7 <st_word>
c0004e3a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e3d:	75 0f                	jne    c0004e4e <st_clust.isra.1+0x25>
c0004e3f:	c1 e9 10             	shr    ecx,0x10
c0004e42:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e45:	89 ca                	mov    edx,ecx
c0004e47:	5b                   	pop    ebx
c0004e48:	5e                   	pop    esi
c0004e49:	e9 a9 ce ff ff       	jmp    c0001cf7 <st_word>
c0004e4e:	5b                   	pop    ebx
c0004e4f:	5e                   	pop    esi
c0004e50:	c3                   	ret    

c0004e51 <init_alloc_info.isra.2>:
c0004e51:	56                   	push   esi
c0004e52:	53                   	push   ebx
c0004e53:	89 c6                	mov    esi,eax
c0004e55:	89 d3                	mov    ebx,edx
c0004e57:	51                   	push   ecx
c0004e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e5a:	83 c0 34             	add    eax,0x34
c0004e5d:	e8 30 ce ff ff       	call   c0001c92 <ld_dword>
c0004e62:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e65:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e67:	83 c0 38             	add    eax,0x38
c0004e6a:	e8 3b ce ff ff       	call   c0001caa <ld_qword>
c0004e6f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e72:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e75:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e77:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e7a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e81:	83 e0 02             	and    eax,0x2
c0004e84:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e87:	5b                   	pop    ebx
c0004e88:	5b                   	pop    ebx
c0004e89:	5e                   	pop    esi
c0004e8a:	c3                   	ret    

c0004e8b <follow_path>:
c0004e8b:	56                   	push   esi
c0004e8c:	53                   	push   ebx
c0004e8d:	89 c3                	mov    ebx,eax
c0004e8f:	83 ec 14             	sub    esp,0x14
c0004e92:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e96:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e9c:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e9e:	80 fa 5c             	cmp    dl,0x5c
c0004ea1:	75 07                	jne    c0004eaa <follow_path+0x1f>
c0004ea3:	40                   	inc    eax
c0004ea4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ea8:	eb ee                	jmp    c0004e98 <follow_path+0xd>
c0004eaa:	80 fa 2f             	cmp    dl,0x2f
c0004ead:	74 f4                	je     c0004ea3 <follow_path+0x18>
c0004eaf:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004eb6:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ebd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ec0:	77 52                	ja     c0004f14 <follow_path+0x89>
c0004ec2:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ec6:	31 d2                	xor    edx,edx
c0004ec8:	89 d8                	mov    eax,ebx
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <dir_sdi>
c0004ecf:	eb 7c                	jmp    c0004f4d <follow_path+0xc2>
c0004ed1:	89 d8                	mov    eax,ebx
c0004ed3:	e8 6e f2 ff ff       	call   c0004146 <dir_find>
c0004ed8:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004edb:	85 c0                	test   eax,eax
c0004edd:	75 46                	jne    c0004f25 <follow_path+0x9a>
c0004edf:	80 e2 04             	and    dl,0x4
c0004ee2:	75 69                	jne    c0004f4d <follow_path+0xc2>
c0004ee4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ee8:	74 5e                	je     c0004f48 <follow_path+0xbd>
c0004eea:	8a 06                	mov    al,BYTE PTR [esi]
c0004eec:	3c 04                	cmp    al,0x4
c0004eee:	75 41                	jne    c0004f31 <follow_path+0xa6>
c0004ef0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ef3:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ef7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004efa:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004efd:	30 c0                	xor    al,al
c0004eff:	09 d0                	or     eax,edx
c0004f01:	89 da                	mov    edx,ebx
c0004f03:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f06:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f09:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f0c:	8d 46 10             	lea    eax,[esi+0x10]
c0004f0f:	e8 3d ff ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c0004f14:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f18:	89 d8                	mov    eax,ebx
c0004f1a:	e8 a9 ed ff ff       	call   c0003cc8 <create_name>
c0004f1f:	85 c0                	test   eax,eax
c0004f21:	74 ae                	je     c0004ed1 <follow_path+0x46>
c0004f23:	eb 28                	jmp    c0004f4d <follow_path+0xc2>
c0004f25:	83 f8 04             	cmp    eax,0x4
c0004f28:	75 23                	jne    c0004f4d <follow_path+0xc2>
c0004f2a:	80 e2 04             	and    dl,0x4
c0004f2d:	74 19                	je     c0004f48 <follow_path+0xbd>
c0004f2f:	eb 1c                	jmp    c0004f4d <follow_path+0xc2>
c0004f31:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f34:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f3a:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f3e:	e8 bd fe ff ff       	call   c0004e00 <ld_clust.isra.0>
c0004f43:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f46:	eb cc                	jmp    c0004f14 <follow_path+0x89>
c0004f48:	b8 05 00 00 00       	mov    eax,0x5
c0004f4d:	83 c4 14             	add    esp,0x14
c0004f50:	5b                   	pop    ebx
c0004f51:	5e                   	pop    esi
c0004f52:	c3                   	ret    

c0004f53 <f_mount>:
c0004f53:	53                   	push   ebx
c0004f54:	83 ec 18             	sub    esp,0x18
c0004f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f63:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f67:	e8 fb d2 ff ff       	call   c0002267 <get_ldnumber>
c0004f6c:	89 c2                	mov    edx,eax
c0004f6e:	b8 0b 00 00 00       	mov    eax,0xb
c0004f73:	85 d2                	test   edx,edx
c0004f75:	78 39                	js     c0004fb0 <f_mount+0x5d>
c0004f77:	8b 04 95 e0 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1220]
c0004f7e:	85 c0                	test   eax,eax
c0004f80:	74 03                	je     c0004f85 <f_mount+0x32>
c0004f82:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f89:	85 c0                	test   eax,eax
c0004f8b:	74 03                	je     c0004f90 <f_mount+0x3d>
c0004f8d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f94:	89 04 95 e0 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1220],eax
c0004f9b:	31 c0                	xor    eax,eax
c0004f9d:	84 db                	test   bl,bl
c0004f9f:	74 0f                	je     c0004fb0 <f_mount+0x5d>
c0004fa1:	31 c9                	xor    ecx,ecx
c0004fa3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fab:	e8 65 d7 ff ff       	call   c0002715 <mount_volume>
c0004fb0:	83 c4 18             	add    esp,0x18
c0004fb3:	5b                   	pop    ebx
c0004fb4:	c3                   	ret    

c0004fb5 <f_open>:
c0004fb5:	55                   	push   ebp
c0004fb6:	bd 09 00 00 00       	mov    ebp,0x9
c0004fbb:	57                   	push   edi
c0004fbc:	56                   	push   esi
c0004fbd:	53                   	push   ebx
c0004fbe:	83 ec 7c             	sub    esp,0x7c
c0004fc1:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fc8:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fcf:	85 db                	test   ebx,ebx
c0004fd1:	0f 84 10 04 00 00    	je     c00053e7 <f_open+0x432>
c0004fd7:	89 fe                	mov    esi,edi
c0004fd9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fdd:	83 e6 3f             	and    esi,0x3f
c0004fe0:	89 f0                	mov    eax,esi
c0004fe2:	0f b6 c8             	movzx  ecx,al
c0004fe5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fec:	e8 24 d7 ff ff       	call   c0002715 <mount_volume>
c0004ff1:	89 c5                	mov    ebp,eax
c0004ff3:	85 c0                	test   eax,eax
c0004ff5:	0f 85 e6 03 00 00    	jne    c00053e1 <f_open+0x42c>
c0004ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fff:	bd 11 00 00 00       	mov    ebp,0x11
c0005004:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005008:	83 ec 0c             	sub    esp,0xc
c000500b:	68 60 04 00 00       	push   0x460
c0005010:	e8 a3 34 00 00       	call   c00084b8 <ff_memalloc>
c0005015:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005019:	83 c4 10             	add    esp,0x10
c000501c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005021:	0f 84 c0 03 00 00    	je     c00053e7 <f_open+0x432>
c0005027:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000502b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000502f:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005035:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005038:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000503b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005042:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005046:	e8 40 fe ff ff       	call   c0004e8b <follow_path>
c000504b:	89 c5                	mov    ebp,eax
c000504d:	85 c0                	test   eax,eax
c000504f:	75 0c                	jne    c000505d <f_open+0xa8>
c0005051:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005056:	79 05                	jns    c000505d <f_open+0xa8>
c0005058:	bd 06 00 00 00       	mov    ebp,0x6
c000505d:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005063:	0f 84 84 01 00 00    	je     c00051ed <f_open+0x238>
c0005069:	85 ed                	test   ebp,ebp
c000506b:	74 20                	je     c000508d <f_open+0xd8>
c000506d:	83 fd 04             	cmp    ebp,0x4
c0005070:	0f 85 58 03 00 00    	jne    c00053ce <f_open+0x419>
c0005076:	8d 44 24 24          	lea    eax,[esp+0x24]
c000507a:	83 ce 08             	or     esi,0x8
c000507d:	e8 8a f2 ff ff       	call   c000430c <dir_register>
c0005082:	89 c5                	mov    ebp,eax
c0005084:	85 c0                	test   eax,eax
c0005086:	74 2f                	je     c00050b7 <f_open+0x102>
c0005088:	e9 41 03 00 00       	jmp    c00053ce <f_open+0x419>
c000508d:	bd 07 00 00 00       	mov    ebp,0x7
c0005092:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005097:	0f 85 31 03 00 00    	jne    c00053ce <f_open+0x419>
c000509d:	bd 08 00 00 00       	mov    ebp,0x8
c00050a2:	f7 c7 04 00 00 00    	test   edi,0x4
c00050a8:	0f 85 20 03 00 00    	jne    c00053ce <f_open+0x419>
c00050ae:	83 e7 08             	and    edi,0x8
c00050b1:	0f 84 65 01 00 00    	je     c000521c <f_open+0x267>
c00050b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050bb:	8a 02                	mov    al,BYTE PTR [edx]
c00050bd:	3c 04                	cmp    al,0x4
c00050bf:	0f 85 97 00 00 00    	jne    c000515c <f_open+0x1a7>
c00050c5:	8d 42 10             	lea    eax,[edx+0x10]
c00050c8:	89 13                	mov    DWORD PTR [ebx],edx
c00050ca:	89 da                	mov    edx,ebx
c00050cc:	e8 80 fd ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00050d1:	31 d2                	xor    edx,edx
c00050d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d7:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050df:	83 c0 02             	add    eax,0x2
c00050e2:	e8 32 cc ff ff       	call   c0001d19 <mem_set>
c00050e7:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050ec:	31 d2                	xor    edx,edx
c00050ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050f5:	83 c0 26             	add    eax,0x26
c00050f8:	e8 1c cc ff ff       	call   c0001d19 <mem_set>
c00050fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005101:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005104:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0005108:	ba 00 00 21 50       	mov    edx,0x50210000
c000510d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005110:	83 c0 08             	add    eax,0x8
c0005113:	e8 e3 cb ff ff       	call   c0001cfb <st_dword>
c0005118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000511c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511f:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005123:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005127:	e8 b7 ea ff ff       	call   c0003be3 <store_xdir>
c000512c:	89 c5                	mov    ebp,eax
c000512e:	85 c0                	test   eax,eax
c0005130:	0f 85 98 02 00 00    	jne    c00053ce <f_open+0x419>
c0005136:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005139:	85 d2                	test   edx,edx
c000513b:	0f 84 db 00 00 00    	je     c000521c <f_open+0x267>
c0005141:	31 c9                	xor    ecx,ecx
c0005143:	89 d8                	mov    eax,ebx
c0005145:	e8 8e e3 ff ff       	call   c00034d8 <remove_chain>
c000514a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000514e:	89 c5                	mov    ebp,eax
c0005150:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005153:	48                   	dec    eax
c0005154:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005157:	e9 b8 00 00 00       	jmp    c0005214 <f_open+0x25f>
c000515c:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005160:	89 ea                	mov    edx,ebp
c0005162:	e8 99 fc ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005167:	ba 00 00 21 50       	mov    edx,0x50210000
c000516c:	89 c7                	mov    edi,eax
c000516e:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005171:	e8 85 cb ff ff       	call   c0001cfb <st_dword>
c0005176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000517a:	31 c9                	xor    ecx,ecx
c000517c:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005180:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005184:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005188:	e8 9c fc ff ff       	call   c0004e29 <st_clust.isra.1>
c000518d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005191:	31 d2                	xor    edx,edx
c0005193:	83 c0 1c             	add    eax,0x1c
c0005196:	e8 60 cb ff ff       	call   c0001cfb <st_dword>
c000519b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000519f:	85 ff                	test   edi,edi
c00051a1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051a5:	74 75                	je     c000521c <f_open+0x267>
c00051a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051ab:	31 c9                	xor    ecx,ecx
c00051ad:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051b0:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051bb:	89 fa                	mov    edx,edi
c00051bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051c1:	e8 12 e3 ff ff       	call   c00034d8 <remove_chain>
c00051c6:	89 c5                	mov    ebp,eax
c00051c8:	85 c0                	test   eax,eax
c00051ca:	0f 85 fe 01 00 00    	jne    c00053ce <f_open+0x419>
c00051d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051dc:	4f                   	dec    edi
c00051dd:	e8 81 d2 ff ff       	call   c0002463 <move_window>
c00051e2:	89 c5                	mov    ebp,eax
c00051e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e8:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051eb:	eb 27                	jmp    c0005214 <f_open+0x25f>
c00051ed:	85 ed                	test   ebp,ebp
c00051ef:	0f 85 d9 01 00 00    	jne    c00053ce <f_open+0x419>
c00051f5:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051f9:	bd 04 00 00 00       	mov    ebp,0x4
c00051fe:	a8 10                	test   al,0x10
c0005200:	0f 85 c8 01 00 00    	jne    c00053ce <f_open+0x419>
c0005206:	83 e7 02             	and    edi,0x2
c0005209:	74 11                	je     c000521c <f_open+0x267>
c000520b:	bd 07 00 00 00       	mov    ebp,0x7
c0005210:	a8 01                	test   al,0x1
c0005212:	eb 02                	jmp    c0005216 <f_open+0x261>
c0005214:	85 ed                	test   ebp,ebp
c0005216:	0f 85 b2 01 00 00    	jne    c00053ce <f_open+0x419>
c000521c:	f7 c6 08 00 00 00    	test   esi,0x8
c0005222:	74 03                	je     c0005227 <f_open+0x272>
c0005224:	83 ce 40             	or     esi,0x40
c0005227:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000522b:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000522e:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005231:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005234:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005237:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000523b:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000523e:	8a 02                	mov    al,BYTE PTR [edx]
c0005240:	3c 04                	cmp    al,0x4
c0005242:	75 2a                	jne    c000526e <f_open+0x2b9>
c0005244:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005248:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000524d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005250:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005254:	30 c0                	xor    al,al
c0005256:	09 c8                	or     eax,ecx
c0005258:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000525b:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000525f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005262:	8d 42 10             	lea    eax,[edx+0x10]
c0005265:	89 da                	mov    edx,ebx
c0005267:	e8 e5 fb ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000526c:	eb 1c                	jmp    c000528a <f_open+0x2d5>
c000526e:	89 fa                	mov    edx,edi
c0005270:	e8 8b fb ff ff       	call   c0004e00 <ld_clust.isra.0>
c0005275:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005278:	8d 47 1c             	lea    eax,[edi+0x1c]
c000527b:	e8 12 ca ff ff       	call   c0001c92 <ld_dword>
c0005280:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005287:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000528e:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005295:	89 03                	mov    DWORD PTR [ebx],eax
c0005297:	31 d2                	xor    edx,edx
c0005299:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000529d:	b9 00 02 00 00       	mov    ecx,0x200
c00052a2:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052a6:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052b3:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052b6:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052c0:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052d2:	e8 42 ca ff ff       	call   c0001d19 <mem_set>
c00052d7:	83 e6 20             	and    esi,0x20
c00052da:	75 07                	jne    c00052e3 <f_open+0x32e>
c00052dc:	31 ed                	xor    ebp,ebp
c00052de:	e9 eb 00 00 00       	jmp    c00053ce <f_open+0x419>
c00052e3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052e6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052f5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052f9:	74 e1                	je     c00052dc <f_open+0x327>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005303:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005306:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000530d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005310:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c0005314:	31 ff                	xor    edi,edi
c0005316:	c1 e5 09             	shl    ebp,0x9
c0005319:	89 ee                	mov    esi,ebp
c000531b:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000531f:	89 f8                	mov    eax,edi
c0005321:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005325:	73 22                	jae    c0005349 <f_open+0x394>
c0005327:	89 d8                	mov    eax,ebx
c0005329:	e8 bd dc ff ff       	call   c0002feb <get_fat>
c000532e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005332:	89 c2                	mov    edx,eax
c0005334:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005338:	83 f8 01             	cmp    eax,0x1
c000533b:	76 10                	jbe    c000534d <f_open+0x398>
c000533d:	83 f8 ff             	cmp    eax,0xffffffff
c0005340:	75 d9                	jne    c000531b <f_open+0x366>
c0005342:	bd 01 00 00 00       	mov    ebp,0x1
c0005347:	eb 09                	jmp    c0005352 <f_open+0x39d>
c0005349:	31 ed                	xor    ebp,ebp
c000534b:	eb 05                	jmp    c0005352 <f_open+0x39d>
c000534d:	bd 02 00 00 00       	mov    ebp,0x2
c0005352:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005355:	85 ed                	test   ebp,ebp
c0005357:	75 75                	jne    c00053ce <f_open+0x419>
c0005359:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000535d:	25 ff 01 00 00       	and    eax,0x1ff
c0005362:	0f 84 74 ff ff ff    	je     c00052dc <f_open+0x327>
c0005368:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000536c:	bd 02 00 00 00       	mov    ebp,0x2
c0005371:	89 c8                	mov    eax,ecx
c0005373:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005377:	e8 a2 cb ff ff       	call   c0001f1e <clst2sect>
c000537c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005380:	89 d7                	mov    edi,edx
c0005382:	09 c7                	or     edi,eax
c0005384:	74 48                	je     c00053ce <f_open+0x419>
c0005386:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000538a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000538e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005396:	0f ac fe 09          	shrd   esi,edi,0x9
c000539a:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000539e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053a2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053a5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053a9:	83 ec 0c             	sub    esp,0xc
c00053ac:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053af:	6a 01                	push   0x1
c00053b1:	52                   	push   edx
c00053b2:	50                   	push   eax
c00053b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053bb:	50                   	push   eax
c00053bc:	e8 79 c8 ff ff       	call   c0001c3a <disk_read>
c00053c1:	83 c4 20             	add    esp,0x20
c00053c4:	85 c0                	test   eax,eax
c00053c6:	0f 95 c0             	setne  al
c00053c9:	0f b6 c0             	movzx  eax,al
c00053cc:	89 c5                	mov    ebp,eax
c00053ce:	83 ec 0c             	sub    esp,0xc
c00053d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053d5:	e8 f4 30 00 00       	call   c00084ce <ff_memfree>
c00053da:	83 c4 10             	add    esp,0x10
c00053dd:	85 ed                	test   ebp,ebp
c00053df:	74 06                	je     c00053e7 <f_open+0x432>
c00053e1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053e7:	83 c4 7c             	add    esp,0x7c
c00053ea:	89 e8                	mov    eax,ebp
c00053ec:	5b                   	pop    ebx
c00053ed:	5e                   	pop    esi
c00053ee:	5f                   	pop    edi
c00053ef:	5d                   	pop    ebp
c00053f0:	c3                   	ret    

c00053f1 <f_read>:
c00053f1:	55                   	push   ebp
c00053f2:	57                   	push   edi
c00053f3:	56                   	push   esi
c00053f4:	53                   	push   ebx
c00053f5:	83 ec 2c             	sub    esp,0x2c
c00053f8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053fc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005400:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005406:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000540a:	89 d8                	mov    eax,ebx
c000540c:	e8 77 cf ff ff       	call   c0002388 <validate>
c0005411:	89 c5                	mov    ebp,eax
c0005413:	85 c0                	test   eax,eax
c0005415:	0f 85 4c 02 00 00    	jne    c0005667 <f_read+0x276>
c000541b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000541f:	85 ed                	test   ebp,ebp
c0005421:	0f 85 40 02 00 00    	jne    c0005667 <f_read+0x276>
c0005427:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c000542b:	0f 84 31 02 00 00    	je     c0005662 <f_read+0x271>
c0005431:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005434:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005437:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000543a:	bf 00 00 00 00       	mov    edi,0x0
c000543f:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005442:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005446:	89 d1                	mov    ecx,edx
c0005448:	19 f9                	sbb    ecx,edi
c000544a:	0f 83 cf 00 00 00    	jae    c000551f <f_read+0x12e>
c0005450:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005454:	e9 c6 00 00 00       	jmp    c000551f <f_read+0x12e>
c0005459:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000545c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000545f:	89 d0                	mov    eax,edx
c0005461:	25 ff 01 00 00       	and    eax,0x1ff
c0005466:	0f 85 c9 01 00 00    	jne    c0005635 <f_read+0x244>
c000546c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005470:	89 d6                	mov    esi,edx
c0005472:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005476:	89 cf                	mov    edi,ecx
c0005478:	48                   	dec    eax
c0005479:	0f ac fe 09          	shrd   esi,edi,0x9
c000547d:	21 f0                	and    eax,esi
c000547f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005483:	0f 84 a6 00 00 00    	je     c000552f <f_read+0x13e>
c0005489:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000548d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005490:	89 c8                	mov    eax,ecx
c0005492:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005495:	e8 84 ca ff ff       	call   c0001f1e <clst2sect>
c000549a:	89 d7                	mov    edi,edx
c000549c:	09 c7                	or     edi,eax
c000549e:	0f 84 b4 00 00 00    	je     c0005558 <f_read+0x167>
c00054a4:	31 ff                	xor    edi,edi
c00054a6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054aa:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054ad:	01 c6                	add    esi,eax
c00054af:	11 d7                	adc    edi,edx
c00054b1:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054b9:	0f 86 fd 00 00 00    	jbe    c00055bc <f_read+0x1cb>
c00054bf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054c7:	c1 e8 09             	shr    eax,0x9
c00054ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00054cd:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054d1:	03 14 24             	add    edx,DWORD PTR [esp]
c00054d4:	39 c2                	cmp    edx,eax
c00054d6:	76 07                	jbe    c00054df <f_read+0xee>
c00054d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00054df:	83 ec 0c             	sub    esp,0xc
c00054e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054ec:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054f0:	50                   	push   eax
c00054f1:	e8 44 c7 ff ff       	call   c0001c3a <disk_read>
c00054f6:	83 c4 20             	add    esp,0x20
c00054f9:	85 c0                	test   eax,eax
c00054fb:	75 6e                	jne    c000556b <f_read+0x17a>
c00054fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005501:	78 7e                	js     c0005581 <f_read+0x190>
c0005503:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005506:	c1 e6 09             	shl    esi,0x9
c0005509:	31 ff                	xor    edi,edi
c000550b:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000550f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005513:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005517:	01 30                	add    DWORD PTR [eax],esi
c0005519:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c000551c:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000551f:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005524:	0f 85 2f ff ff ff    	jne    c0005459 <f_read+0x68>
c000552a:	e9 38 01 00 00       	jmp    c0005667 <f_read+0x276>
c000552f:	89 c8                	mov    eax,ecx
c0005531:	09 d0                	or     eax,edx
c0005533:	75 05                	jne    c000553a <f_read+0x149>
c0005535:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005538:	eb 19                	jmp    c0005553 <f_read+0x162>
c000553a:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000553e:	74 09                	je     c0005549 <f_read+0x158>
c0005540:	89 d8                	mov    eax,ebx
c0005542:	e8 f8 c9 ff ff       	call   c0001f3f <clmt_clust>
c0005547:	eb 0a                	jmp    c0005553 <f_read+0x162>
c0005549:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000554c:	89 d8                	mov    eax,ebx
c000554e:	e8 98 da ff ff       	call   c0002feb <get_fat>
c0005553:	83 f8 01             	cmp    eax,0x1
c0005556:	77 0e                	ja     c0005566 <f_read+0x175>
c0005558:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000555c:	bd 02 00 00 00       	mov    ebp,0x2
c0005561:	e9 01 01 00 00       	jmp    c0005667 <f_read+0x276>
c0005566:	83 f8 ff             	cmp    eax,0xffffffff
c0005569:	75 0e                	jne    c0005579 <f_read+0x188>
c000556b:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556f:	bd 01 00 00 00       	mov    ebp,0x1
c0005574:	e9 ee 00 00 00       	jmp    c0005667 <f_read+0x276>
c0005579:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000557c:	e9 08 ff ff ff       	jmp    c0005489 <f_read+0x98>
c0005581:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005584:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005587:	29 f0                	sub    eax,esi
c0005589:	19 fa                	sbb    edx,edi
c000558b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000558e:	89 d7                	mov    edi,edx
c0005590:	ba 00 00 00 00       	mov    edx,0x0
c0005595:	89 f9                	mov    ecx,edi
c0005597:	19 d1                	sbb    ecx,edx
c0005599:	0f 83 64 ff ff ff    	jae    c0005503 <f_read+0x112>
c000559f:	89 c7                	mov    edi,eax
c00055a1:	8d 53 50             	lea    edx,[ebx+0x50]
c00055a4:	c1 e7 09             	shl    edi,0x9
c00055a7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055ab:	b9 00 02 00 00       	mov    ecx,0x200
c00055b0:	01 f8                	add    eax,edi
c00055b2:	e8 4d c7 ff ff       	call   c0001d04 <mem_cpy>
c00055b7:	e9 47 ff ff ff       	jmp    c0005503 <f_read+0x112>
c00055bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055bf:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00055c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055c9:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055cd:	75 05                	jne    c00055d4 <f_read+0x1e3>
c00055cf:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055d2:	74 5b                	je     c000562f <f_read+0x23e>
c00055d4:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055df:	79 2a                	jns    c000560b <f_read+0x21a>
c00055e1:	83 ec 0c             	sub    esp,0xc
c00055e4:	6a 01                	push   0x1
c00055e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055f6:	50                   	push   eax
c00055f7:	e8 54 c6 ff ff       	call   c0001c50 <disk_write>
c00055fc:	83 c4 20             	add    esp,0x20
c00055ff:	85 c0                	test   eax,eax
c0005601:	0f 85 64 ff ff ff    	jne    c000556b <f_read+0x17a>
c0005607:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000560b:	83 ec 0c             	sub    esp,0xc
c000560e:	6a 01                	push   0x1
c0005610:	57                   	push   edi
c0005611:	56                   	push   esi
c0005612:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005616:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000561e:	50                   	push   eax
c000561f:	e8 16 c6 ff ff       	call   c0001c3a <disk_read>
c0005624:	83 c4 20             	add    esp,0x20
c0005627:	85 c0                	test   eax,eax
c0005629:	0f 85 3c ff ff ff    	jne    c000556b <f_read+0x17a>
c000562f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005632:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005635:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005638:	ba 00 02 00 00       	mov    edx,0x200
c000563d:	25 ff 01 00 00       	and    eax,0x1ff
c0005642:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005646:	29 c2                	sub    edx,eax
c0005648:	39 d6                	cmp    esi,edx
c000564a:	76 02                	jbe    c000564e <f_read+0x25d>
c000564c:	89 d6                	mov    esi,edx
c000564e:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005652:	89 f1                	mov    ecx,esi
c0005654:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005658:	e8 a7 c6 ff ff       	call   c0001d04 <mem_cpy>
c000565d:	e9 a7 fe ff ff       	jmp    c0005509 <f_read+0x118>
c0005662:	bd 07 00 00 00       	mov    ebp,0x7
c0005667:	83 c4 2c             	add    esp,0x2c
c000566a:	89 e8                	mov    eax,ebp
c000566c:	5b                   	pop    ebx
c000566d:	5e                   	pop    esi
c000566e:	5f                   	pop    edi
c000566f:	5d                   	pop    ebp
c0005670:	c3                   	ret    

c0005671 <f_write>:
c0005671:	55                   	push   ebp
c0005672:	57                   	push   edi
c0005673:	56                   	push   esi
c0005674:	53                   	push   ebx
c0005675:	83 ec 2c             	sub    esp,0x2c
c0005678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000567c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005680:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005686:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000568a:	89 d8                	mov    eax,ebx
c000568c:	e8 f7 cc ff ff       	call   c0002388 <validate>
c0005691:	89 c5                	mov    ebp,eax
c0005693:	85 c0                	test   eax,eax
c0005695:	0f 85 86 02 00 00    	jne    c0005921 <f_write+0x2b0>
c000569b:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000569f:	85 ed                	test   ebp,ebp
c00056a1:	0f 85 7a 02 00 00    	jne    c0005921 <f_write+0x2b0>
c00056a7:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056ab:	0f 84 6b 02 00 00    	je     c000591c <f_write+0x2ab>
c00056b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056b8:	0f 84 43 01 00 00    	je     c0005801 <f_write+0x190>
c00056be:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056c1:	89 c1                	mov    ecx,eax
c00056c3:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056c7:	0f 83 34 01 00 00    	jae    c0005801 <f_write+0x190>
c00056cd:	f7 d0                	not    eax
c00056cf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056d3:	e9 29 01 00 00       	jmp    c0005801 <f_write+0x190>
c00056d8:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056db:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056de:	89 d0                	mov    eax,edx
c00056e0:	25 ff 01 00 00       	and    eax,0x1ff
c00056e5:	0f 85 00 02 00 00    	jne    c00058eb <f_write+0x27a>
c00056eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ef:	89 d6                	mov    esi,edx
c00056f1:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056f5:	89 cf                	mov    edi,ecx
c00056f7:	48                   	dec    eax
c00056f8:	0f ac fe 09          	shrd   esi,edi,0x9
c00056fc:	21 f0                	and    eax,esi
c00056fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005702:	0f 84 06 01 00 00    	je     c000580e <f_write+0x19d>
c0005708:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000570c:	0f 88 6e 01 00 00    	js     c0005880 <f_write+0x20f>
c0005712:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005716:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005719:	89 c8                	mov    eax,ecx
c000571b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000571f:	e8 fa c7 ff ff       	call   c0001f1e <clst2sect>
c0005724:	89 d1                	mov    ecx,edx
c0005726:	09 c1                	or     ecx,eax
c0005728:	0f 84 1c 01 00 00    	je     c000584a <f_write+0x1d9>
c000572e:	31 ff                	xor    edi,edi
c0005730:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005734:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005738:	01 c6                	add    esi,eax
c000573a:	11 d7                	adc    edi,edx
c000573c:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005744:	0f 86 63 01 00 00    	jbe    c00058ad <f_write+0x23c>
c000574a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000574e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005752:	c1 e8 09             	shr    eax,0x9
c0005755:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005759:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000575d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005761:	39 c2                	cmp    edx,eax
c0005763:	76 08                	jbe    c000576d <f_write+0xfc>
c0005765:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005769:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000576d:	83 ec 0c             	sub    esp,0xc
c0005770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005774:	57                   	push   edi
c0005775:	56                   	push   esi
c0005776:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000577a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000577e:	50                   	push   eax
c000577f:	e8 cc c4 ff ff       	call   c0001c50 <disk_write>
c0005784:	83 c4 20             	add    esp,0x20
c0005787:	85 c0                	test   eax,eax
c0005789:	0f 85 ce 00 00 00    	jne    c000585d <f_write+0x1ec>
c000578f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005792:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005795:	29 f0                	sub    eax,esi
c0005797:	19 fa                	sbb    edx,edi
c0005799:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000579d:	89 d7                	mov    edi,edx
c000579f:	ba 00 00 00 00       	mov    edx,0x0
c00057a4:	89 f9                	mov    ecx,edi
c00057a6:	19 d1                	sbb    ecx,edx
c00057a8:	73 1c                	jae    c00057c6 <f_write+0x155>
c00057aa:	89 c7                	mov    edi,eax
c00057ac:	b9 00 02 00 00       	mov    ecx,0x200
c00057b1:	c1 e7 09             	shl    edi,0x9
c00057b4:	8d 43 50             	lea    eax,[ebx+0x50]
c00057b7:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057bb:	89 fa                	mov    edx,edi
c00057bd:	e8 42 c5 ff ff       	call   c0001d04 <mem_cpy>
c00057c2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057c6:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057ca:	c1 e6 09             	shl    esi,0x9
c00057cd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057d1:	31 ff                	xor    edi,edi
c00057d3:	01 30                	add    DWORD PTR [eax],esi
c00057d5:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057d9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057dd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057e0:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057e3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057e6:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057e9:	89 c1                	mov    ecx,eax
c00057eb:	39 f2                	cmp    edx,esi
c00057ed:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057f0:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057f3:	19 f9                	sbb    ecx,edi
c00057f5:	73 04                	jae    c00057fb <f_write+0x18a>
c00057f7:	89 f2                	mov    edx,esi
c00057f9:	89 f8                	mov    eax,edi
c00057fb:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005801:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005806:	0f 85 cc fe ff ff    	jne    c00056d8 <f_write+0x67>
c000580c:	eb 2e                	jmp    c000583c <f_write+0x1cb>
c000580e:	89 c8                	mov    eax,ecx
c0005810:	09 d0                	or     eax,edx
c0005812:	75 0b                	jne    c000581f <f_write+0x1ae>
c0005814:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005817:	31 d2                	xor    edx,edx
c0005819:	85 c0                	test   eax,eax
c000581b:	75 28                	jne    c0005845 <f_write+0x1d4>
c000581d:	eb 12                	jmp    c0005831 <f_write+0x1c0>
c000581f:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005823:	74 09                	je     c000582e <f_write+0x1bd>
c0005825:	89 d8                	mov    eax,ebx
c0005827:	e8 13 c7 ff ff       	call   c0001f3f <clmt_clust>
c000582c:	eb 0a                	jmp    c0005838 <f_write+0x1c7>
c000582e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 a1 da ff ff       	call   c00032d9 <create_chain>
c0005838:	85 c0                	test   eax,eax
c000583a:	75 09                	jne    c0005845 <f_write+0x1d4>
c000583c:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005840:	e9 dc 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005845:	83 f8 01             	cmp    eax,0x1
c0005848:	75 0e                	jne    c0005858 <f_write+0x1e7>
c000584a:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000584e:	bd 02 00 00 00       	mov    ebp,0x2
c0005853:	e9 c9 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c0005858:	83 f8 ff             	cmp    eax,0xffffffff
c000585b:	75 0e                	jne    c000586b <f_write+0x1fa>
c000585d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005861:	bd 01 00 00 00       	mov    ebp,0x1
c0005866:	e9 b6 00 00 00       	jmp    c0005921 <f_write+0x2b0>
c000586b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000586e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005872:	0f 85 90 fe ff ff    	jne    c0005708 <f_write+0x97>
c0005878:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000587b:	e9 88 fe ff ff       	jmp    c0005708 <f_write+0x97>
c0005880:	83 ec 0c             	sub    esp,0xc
c0005883:	8d 43 50             	lea    eax,[ebx+0x50]
c0005886:	6a 01                	push   0x1
c0005888:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000588b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000588e:	50                   	push   eax
c000588f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005893:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005897:	50                   	push   eax
c0005898:	e8 b3 c3 ff ff       	call   c0001c50 <disk_write>
c000589d:	83 c4 20             	add    esp,0x20
c00058a0:	85 c0                	test   eax,eax
c00058a2:	75 b9                	jne    c000585d <f_write+0x1ec>
c00058a4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058a8:	e9 65 fe ff ff       	jmp    c0005712 <f_write+0xa1>
c00058ad:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058b0:	75 05                	jne    c00058b7 <f_write+0x246>
c00058b2:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058b5:	74 2e                	je     c00058e5 <f_write+0x274>
c00058b7:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058ba:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058bd:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058c0:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058c3:	73 20                	jae    c00058e5 <f_write+0x274>
c00058c5:	83 ec 0c             	sub    esp,0xc
c00058c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00058cb:	6a 01                	push   0x1
c00058cd:	57                   	push   edi
c00058ce:	56                   	push   esi
c00058cf:	50                   	push   eax
c00058d0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058d4:	50                   	push   eax
c00058d5:	e8 60 c3 ff ff       	call   c0001c3a <disk_read>
c00058da:	83 c4 20             	add    esp,0x20
c00058dd:	85 c0                	test   eax,eax
c00058df:	0f 85 78 ff ff ff    	jne    c000585d <f_write+0x1ec>
c00058e5:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058e8:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058eb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ee:	ba 00 02 00 00       	mov    edx,0x200
c00058f3:	25 ff 01 00 00       	and    eax,0x1ff
c00058f8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058fc:	29 c2                	sub    edx,eax
c00058fe:	39 d6                	cmp    esi,edx
c0005900:	76 02                	jbe    c0005904 <f_write+0x293>
c0005902:	89 d6                	mov    esi,edx
c0005904:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005908:	89 f1                	mov    ecx,esi
c000590a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000590e:	e8 f1 c3 ff ff       	call   c0001d04 <mem_cpy>
c0005913:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005917:	e9 b1 fe ff ff       	jmp    c00057cd <f_write+0x15c>
c000591c:	bd 07 00 00 00       	mov    ebp,0x7
c0005921:	83 c4 2c             	add    esp,0x2c
c0005924:	89 e8                	mov    eax,ebp
c0005926:	5b                   	pop    ebx
c0005927:	5e                   	pop    esi
c0005928:	5f                   	pop    edi
c0005929:	5d                   	pop    ebp
c000592a:	c3                   	ret    

c000592b <f_sync>:
c000592b:	56                   	push   esi
c000592c:	53                   	push   ebx
c000592d:	83 ec 64             	sub    esp,0x64
c0005930:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005934:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005938:	89 d8                	mov    eax,ebx
c000593a:	e8 49 ca ff ff       	call   c0002388 <validate>
c000593f:	85 c0                	test   eax,eax
c0005941:	0f 85 ba 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005947:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000594a:	f6 c2 40             	test   dl,0x40
c000594d:	0f 84 ae 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c0005953:	84 d2                	test   dl,dl
c0005955:	79 33                	jns    c000598a <f_sync+0x5f>
c0005957:	83 ec 0c             	sub    esp,0xc
c000595a:	8d 43 50             	lea    eax,[ebx+0x50]
c000595d:	6a 01                	push   0x1
c000595f:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005962:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005965:	50                   	push   eax
c0005966:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000596a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000596e:	50                   	push   eax
c000596f:	e8 dc c2 ff ff       	call   c0001c50 <disk_write>
c0005974:	83 c4 20             	add    esp,0x20
c0005977:	89 c2                	mov    edx,eax
c0005979:	b8 01 00 00 00       	mov    eax,0x1
c000597e:	85 d2                	test   edx,edx
c0005980:	0f 85 7b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c0005986:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000598a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000598e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005991:	0f 85 11 01 00 00    	jne    c0005aa8 <f_sync+0x17d>
c0005997:	89 d8                	mov    eax,ebx
c0005999:	e8 13 d6 ff ff       	call   c0002fb1 <fill_first_frag>
c000599e:	85 c0                	test   eax,eax
c00059a0:	0f 85 5b 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059a6:	83 c9 ff             	or     ecx,0xffffffff
c00059a9:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059ac:	89 d8                	mov    eax,ebx
c00059ae:	e8 c9 d5 ff ff       	call   c0002f7c <fill_last_frag>
c00059b3:	85 c0                	test   eax,eax
c00059b5:	0f 85 46 01 00 00    	jne    c0005b01 <f_sync+0x1d6>
c00059bb:	83 ec 0c             	sub    esp,0xc
c00059be:	68 60 04 00 00       	push   0x460
c00059c3:	e8 f0 2a 00 00       	call   c00084b8 <ff_memalloc>
c00059c8:	83 c4 10             	add    esp,0x10
c00059cb:	89 c6                	mov    esi,eax
c00059cd:	b8 11 00 00 00       	mov    eax,0x11
c00059d2:	85 f6                	test   esi,esi
c00059d4:	0f 84 27 01 00 00    	je     c0005b01 <f_sync+0x1d6>
c00059da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059de:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059e4:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059e7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059ea:	89 da                	mov    edx,ebx
c00059ec:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059f0:	e8 af df ff ff       	call   c00039a4 <load_obj_xdir>
c00059f5:	85 c0                	test   eax,eax
c00059f7:	0f 85 95 00 00 00    	jne    c0005a92 <f_sync+0x167>
c00059fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a01:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a04:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a08:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a0b:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a0e:	83 ca 01             	or     edx,0x1
c0005a11:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a14:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a1a:	83 c0 34             	add    eax,0x34
c0005a1d:	e8 d9 c2 ff ff       	call   c0001cfb <st_dword>
c0005a22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a26:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a29:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a2f:	83 c0 38             	add    eax,0x38
c0005a32:	e8 c7 c2 ff ff       	call   c0001cfe <st_qword>
c0005a37:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a3e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a41:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a44:	83 c0 28             	add    eax,0x28
c0005a47:	e8 b2 c2 ff ff       	call   c0001cfe <st_qword>
c0005a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a50:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a55:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a58:	83 c0 0c             	add    eax,0xc
c0005a5b:	e8 9b c2 ff ff       	call   c0001cfb <st_dword>
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a67:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a6b:	31 d2                	xor    edx,edx
c0005a6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a70:	83 c0 10             	add    eax,0x10
c0005a73:	e8 83 c2 ff ff       	call   c0001cfb <st_dword>
c0005a78:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a7c:	e8 62 e1 ff ff       	call   c0003be3 <store_xdir>
c0005a81:	85 c0                	test   eax,eax
c0005a83:	75 0d                	jne    c0005a92 <f_sync+0x167>
c0005a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a89:	e8 00 eb ff ff       	call   c000458e <sync_fs>
c0005a8e:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a96:	83 ec 0c             	sub    esp,0xc
c0005a99:	56                   	push   esi
c0005a9a:	e8 2f 2a 00 00       	call   c00084ce <ff_memfree>
c0005a9f:	83 c4 10             	add    esp,0x10
c0005aa2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005aa6:	eb 59                	jmp    c0005b01 <f_sync+0x1d6>
c0005aa8:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005aab:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005aae:	e8 b0 c9 ff ff       	call   c0002463 <move_window>
c0005ab3:	85 c0                	test   eax,eax
c0005ab5:	75 4a                	jne    c0005b01 <f_sync+0x1d6>
c0005ab7:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005aba:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005abe:	89 f2                	mov    edx,esi
c0005ac0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ac3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005ac5:	e8 5f f3 ff ff       	call   c0004e29 <st_clust.isra.1>
c0005aca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005acd:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005ad0:	e8 26 c2 ff ff       	call   c0001cfb <st_dword>
c0005ad5:	8d 46 16             	lea    eax,[esi+0x16]
c0005ad8:	ba 00 00 21 50       	mov    edx,0x50210000
c0005add:	e8 19 c2 ff ff       	call   c0001cfb <st_dword>
c0005ae2:	8d 46 12             	lea    eax,[esi+0x12]
c0005ae5:	31 d2                	xor    edx,edx
c0005ae7:	e8 0b c2 ff ff       	call   c0001cf7 <st_word>
c0005aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005af8:	e8 91 ea ff ff       	call   c000458e <sync_fs>
c0005afd:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b01:	83 c4 64             	add    esp,0x64
c0005b04:	5b                   	pop    ebx
c0005b05:	5e                   	pop    esi
c0005b06:	c3                   	ret    

c0005b07 <f_close>:
c0005b07:	53                   	push   ebx
c0005b08:	83 ec 24             	sub    esp,0x24
c0005b0b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b0f:	53                   	push   ebx
c0005b10:	e8 16 fe ff ff       	call   c000592b <f_sync>
c0005b15:	83 c4 10             	add    esp,0x10
c0005b18:	85 c0                	test   eax,eax
c0005b1a:	75 15                	jne    c0005b31 <f_close+0x2a>
c0005b1c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b20:	89 d8                	mov    eax,ebx
c0005b22:	e8 61 c8 ff ff       	call   c0002388 <validate>
c0005b27:	85 c0                	test   eax,eax
c0005b29:	75 06                	jne    c0005b31 <f_close+0x2a>
c0005b2b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b31:	83 c4 18             	add    esp,0x18
c0005b34:	5b                   	pop    ebx
c0005b35:	c3                   	ret    

c0005b36 <f_lseek>:
c0005b36:	55                   	push   ebp
c0005b37:	57                   	push   edi
c0005b38:	56                   	push   esi
c0005b39:	53                   	push   ebx
c0005b3a:	83 ec 3c             	sub    esp,0x3c
c0005b3d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b41:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b45:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b4c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b50:	89 d8                	mov    eax,ebx
c0005b52:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b56:	e8 2d c8 ff ff       	call   c0002388 <validate>
c0005b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	0f 85 7a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b67:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b6b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	0f 85 6a 04 00 00    	jne    c0005fe1 <f_lseek+0x4ab>
c0005b77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b7e:	74 0c                	je     c0005b8c <f_lseek+0x56>
c0005b80:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b83:	85 c0                	test   eax,eax
c0005b85:	75 1f                	jne    c0005ba6 <f_lseek+0x70>
c0005b87:	e9 b5 01 00 00       	jmp    c0005d41 <f_lseek+0x20b>
c0005b8c:	83 c9 ff             	or     ecx,0xffffffff
c0005b8f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b92:	89 d8                	mov    eax,ebx
c0005b94:	e8 e3 d3 ff ff       	call   c0002f7c <fill_last_frag>
c0005b99:	85 c0                	test   eax,eax
c0005b9b:	74 e3                	je     c0005b80 <f_lseek+0x4a>
c0005b9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005ba1:	e9 3b 04 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005ba6:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bab:	0f 85 ac 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bb1:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bb5:	0f 85 a2 00 00 00    	jne    c0005c5d <f_lseek+0x127>
c0005bbb:	8d 78 04             	lea    edi,[eax+0x4]
c0005bbe:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005bc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0005bc3:	be 02 00 00 00       	mov    esi,0x2
c0005bc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bcc:	85 ed                	test   ebp,ebp
c0005bce:	74 73                	je     c0005c43 <f_lseek+0x10d>
c0005bd0:	89 e9                	mov    ecx,ebp
c0005bd2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bd9:	ff 04 24             	inc    DWORD PTR [esp]
c0005bdc:	89 ca                	mov    edx,ecx
c0005bde:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005be2:	89 d8                	mov    eax,ebx
c0005be4:	e8 02 d4 ff ff       	call   c0002feb <get_fat>
c0005be9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bed:	83 f8 01             	cmp    eax,0x1
c0005bf0:	77 11                	ja     c0005c03 <f_lseek+0xcd>
c0005bf2:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bf6:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bfe:	e9 de 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c03:	83 f8 ff             	cmp    eax,0xffffffff
c0005c06:	75 11                	jne    c0005c19 <f_lseek+0xe3>
c0005c08:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c0c:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c14:	e9 c8 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c19:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c1c:	89 c1                	mov    ecx,eax
c0005c1e:	39 c2                	cmp    edx,eax
c0005c20:	74 b7                	je     c0005bd9 <f_lseek+0xa3>
c0005c22:	83 c6 02             	add    esi,0x2
c0005c25:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c29:	72 0b                	jb     c0005c36 <f_lseek+0x100>
c0005c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c2e:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c31:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c33:	83 c7 08             	add    edi,0x8
c0005c36:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c3a:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c3d:	76 04                	jbe    c0005c43 <f_lseek+0x10d>
c0005c3f:	89 c5                	mov    ebp,eax
c0005c41:	eb 8d                	jmp    c0005bd0 <f_lseek+0x9a>
c0005c43:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c46:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c4a:	89 30                	mov    DWORD PTR [eax],esi
c0005c4c:	0f 87 87 03 00 00    	ja     c0005fd9 <f_lseek+0x4a3>
c0005c52:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c58:	e9 84 03 00 00       	jmp    c0005fe1 <f_lseek+0x4ab>
c0005c5d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c60:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c6b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c76:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c7a:	73 0f                	jae    c0005c8b <f_lseek+0x155>
c0005c7c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c7f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c83:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c8f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c93:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c96:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c9d:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005ca1:	0f 84 3a 03 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005ca7:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005caf:	83 c6 ff             	add    esi,0xffffffff
c0005cb2:	89 d8                	mov    eax,ebx
c0005cb4:	83 d7 ff             	adc    edi,0xffffffff
c0005cb7:	89 f2                	mov    edx,esi
c0005cb9:	89 f9                	mov    ecx,edi
c0005cbb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005cbf:	89 34 24             	mov    DWORD PTR [esp],esi
c0005cc2:	e8 78 c2 ff ff       	call   c0001f3f <clmt_clust>
c0005cc7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ccb:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cce:	89 c2                	mov    edx,eax
c0005cd0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cd4:	89 c8                	mov    eax,ecx
c0005cd6:	e8 43 c2 ff ff       	call   c0001f1e <clst2sect>
c0005cdb:	89 d7                	mov    edi,edx
c0005cdd:	09 c7                	or     edi,eax
c0005cdf:	0f 84 0d ff ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005ce5:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ce9:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cef:	0f 84 ec 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005cf5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cf9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cfd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d00:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d04:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d08:	4d                   	dec    ebp
c0005d09:	31 ff                	xor    edi,edi
c0005d0b:	21 ee                	and    esi,ebp
c0005d0d:	01 c6                	add    esi,eax
c0005d0f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d12:	11 d7                	adc    edi,edx
c0005d14:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d17:	39 fa                	cmp    edx,edi
c0005d19:	75 08                	jne    c0005d23 <f_lseek+0x1ed>
c0005d1b:	39 f0                	cmp    eax,esi
c0005d1d:	0f 84 be 02 00 00    	je     c0005fe1 <f_lseek+0x4ab>
c0005d23:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d26:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d2a:	0f 89 80 02 00 00    	jns    c0005fb0 <f_lseek+0x47a>
c0005d30:	83 ec 0c             	sub    esp,0xc
c0005d33:	6a 01                	push   0x1
c0005d35:	52                   	push   edx
c0005d36:	50                   	push   eax
c0005d37:	55                   	push   ebp
c0005d38:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d3c:	e9 5a 02 00 00       	jmp    c0005f9b <f_lseek+0x465>
c0005d41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d45:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d48:	74 16                	je     c0005d60 <f_lseek+0x22a>
c0005d4a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d4f:	76 0f                	jbe    c0005d60 <f_lseek+0x22a>
c0005d51:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d58:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d60:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d63:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d66:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d69:	89 c7                	mov    edi,eax
c0005d6b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d6f:	73 0d                	jae    c0005d7e <f_lseek+0x248>
c0005d71:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d75:	75 07                	jne    c0005d7e <f_lseek+0x248>
c0005d77:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d7e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d81:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d84:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d88:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d8f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d96:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d99:	75 09                	jne    c0005da4 <f_lseek+0x26e>
c0005d9b:	31 f6                	xor    esi,esi
c0005d9d:	31 ff                	xor    edi,edi
c0005d9f:	e9 af 01 00 00       	jmp    c0005f53 <f_lseek+0x41d>
c0005da4:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005da8:	89 d7                	mov    edi,edx
c0005daa:	c1 e1 09             	shl    ecx,0x9
c0005dad:	09 c7                	or     edi,eax
c0005daf:	89 cd                	mov    ebp,ecx
c0005db1:	74 6d                	je     c0005e20 <f_lseek+0x2ea>
c0005db3:	83 c0 ff             	add    eax,0xffffffff
c0005db6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005dba:	83 d2 ff             	adc    edx,0xffffffff
c0005dbd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005dc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dc4:	83 c0 ff             	add    eax,0xffffffff
c0005dc7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005dcb:	83 d2 ff             	adc    edx,0xffffffff
c0005dce:	31 ff                	xor    edi,edi
c0005dd0:	57                   	push   edi
c0005dd1:	51                   	push   ecx
c0005dd2:	52                   	push   edx
c0005dd3:	50                   	push   eax
c0005dd4:	e8 db 13 02 00       	call   c00271b4 <__udivdi3>
c0005dd9:	83 c4 10             	add    esp,0x10
c0005ddc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005de0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005de4:	57                   	push   edi
c0005de5:	55                   	push   ebp
c0005de6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dee:	e8 c1 13 02 00       	call   c00271b4 <__udivdi3>
c0005df3:	83 c4 10             	add    esp,0x10
c0005df6:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dfa:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dfe:	19 d1                	sbb    ecx,edx
c0005e00:	72 1e                	jb     c0005e20 <f_lseek+0x2ea>
c0005e02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e06:	89 e9                	mov    ecx,ebp
c0005e08:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e0b:	f7 d9                	neg    ecx
c0005e0d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e10:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e14:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e17:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e1a:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e1e:	eb 28                	jmp    c0005e48 <f_lseek+0x312>
c0005e20:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e23:	85 c0                	test   eax,eax
c0005e25:	75 1e                	jne    c0005e45 <f_lseek+0x30f>
c0005e27:	31 d2                	xor    edx,edx
c0005e29:	89 d8                	mov    eax,ebx
c0005e2b:	e8 a9 d4 ff ff       	call   c00032d9 <create_chain>
c0005e30:	83 f8 01             	cmp    eax,0x1
c0005e33:	0f 84 b9 fd ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005e39:	83 f8 ff             	cmp    eax,0xffffffff
c0005e3c:	0f 84 c6 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005e42:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e45:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e48:	85 c0                	test   eax,eax
c0005e4a:	0f 84 4b ff ff ff    	je     c0005d9b <f_lseek+0x265>
c0005e50:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e54:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e5c:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e5f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e63:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e66:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e69:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e6d:	0f 83 9d 00 00 00    	jae    c0005f10 <f_lseek+0x3da>
c0005e73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e77:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e7b:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e7e:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e82:	01 f2                	add    edx,esi
c0005e84:	11 f9                	adc    ecx,edi
c0005e86:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e8a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e8e:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e91:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e94:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e97:	f6 c1 02             	test   cl,0x2
c0005e9a:	74 35                	je     c0005ed1 <f_lseek+0x39b>
c0005e9c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ea0:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ea3:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ea6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005eaa:	73 16                	jae    c0005ec2 <f_lseek+0x38c>
c0005eac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005eb0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eb4:	88 ca                	mov    dl,cl
c0005eb6:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005eb9:	83 ca 40             	or     edx,0x40
c0005ebc:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ebf:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ec2:	89 c2                	mov    edx,eax
c0005ec4:	89 d8                	mov    eax,ebx
c0005ec6:	e8 0e d4 ff ff       	call   c00032d9 <create_chain>
c0005ecb:	85 c0                	test   eax,eax
c0005ecd:	75 0b                	jne    c0005eda <f_lseek+0x3a4>
c0005ecf:	eb 30                	jmp    c0005f01 <f_lseek+0x3cb>
c0005ed1:	89 c2                	mov    edx,eax
c0005ed3:	89 d8                	mov    eax,ebx
c0005ed5:	e8 11 d1 ff ff       	call   c0002feb <get_fat>
c0005eda:	83 f8 ff             	cmp    eax,0xffffffff
c0005edd:	0f 84 25 fd ff ff    	je     c0005c08 <f_lseek+0xd2>
c0005ee3:	83 f8 01             	cmp    eax,0x1
c0005ee6:	0f 86 06 fd ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005eec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ef0:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ef3:	0f 86 f9 fc ff ff    	jbe    c0005bf2 <f_lseek+0xbc>
c0005ef9:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005efc:	e9 5b ff ff ff       	jmp    c0005e5c <f_lseek+0x326>
c0005f01:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f08:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f10:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f13:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f17:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f1a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f1d:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f20:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f26:	0f 84 6f fe ff ff    	je     c0005d9b <f_lseek+0x265>
c0005f2c:	89 c2                	mov    edx,eax
c0005f2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f32:	e8 e7 bf ff ff       	call   c0001f1e <clst2sect>
c0005f37:	89 d7                	mov    edi,edx
c0005f39:	09 c7                	or     edi,eax
c0005f3b:	0f 84 b1 fc ff ff    	je     c0005bf2 <f_lseek+0xbc>
c0005f41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f45:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f48:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f4c:	c1 ef 09             	shr    edi,0x9
c0005f4f:	01 c6                	add    esi,eax
c0005f51:	11 d7                	adc    edi,edx
c0005f53:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f56:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f59:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f5c:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f5f:	19 d1                	sbb    ecx,edx
c0005f61:	73 0a                	jae    c0005f6d <f_lseek+0x437>
c0005f63:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f66:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f69:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f6d:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f72:	74 6d                	je     c0005fe1 <f_lseek+0x4ab>
c0005f74:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f77:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f7a:	39 fa                	cmp    edx,edi
c0005f7c:	75 04                	jne    c0005f82 <f_lseek+0x44c>
c0005f7e:	39 f0                	cmp    eax,esi
c0005f80:	74 5f                	je     c0005fe1 <f_lseek+0x4ab>
c0005f82:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f85:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f89:	79 25                	jns    c0005fb0 <f_lseek+0x47a>
c0005f8b:	83 ec 0c             	sub    esp,0xc
c0005f8e:	6a 01                	push   0x1
c0005f90:	52                   	push   edx
c0005f91:	50                   	push   eax
c0005f92:	55                   	push   ebp
c0005f93:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9b:	50                   	push   eax
c0005f9c:	e8 af bc ff ff       	call   c0001c50 <disk_write>
c0005fa1:	83 c4 20             	add    esp,0x20
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 85 5c fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fb0:	83 ec 0c             	sub    esp,0xc
c0005fb3:	6a 01                	push   0x1
c0005fb5:	57                   	push   edi
c0005fb6:	56                   	push   esi
c0005fb7:	55                   	push   ebp
c0005fb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc0:	50                   	push   eax
c0005fc1:	e8 74 bc ff ff       	call   c0001c3a <disk_read>
c0005fc6:	83 c4 20             	add    esp,0x20
c0005fc9:	85 c0                	test   eax,eax
c0005fcb:	0f 85 37 fc ff ff    	jne    c0005c08 <f_lseek+0xd2>
c0005fd1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fd4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fd7:	eb 08                	jmp    c0005fe1 <f_lseek+0x4ab>
c0005fd9:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fe1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fe5:	83 c4 3c             	add    esp,0x3c
c0005fe8:	5b                   	pop    ebx
c0005fe9:	5e                   	pop    esi
c0005fea:	5f                   	pop    edi
c0005feb:	5d                   	pop    ebp
c0005fec:	c3                   	ret    

c0005fed <f_opendir>:
c0005fed:	56                   	push   esi
c0005fee:	b8 09 00 00 00       	mov    eax,0x9
c0005ff3:	53                   	push   ebx
c0005ff4:	83 ec 24             	sub    esp,0x24
c0005ff7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ffb:	85 db                	test   ebx,ebx
c0005ffd:	0f 84 e6 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c0006003:	31 c9                	xor    ecx,ecx
c0006005:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006009:	8d 44 24 34          	lea    eax,[esp+0x34]
c000600d:	e8 03 c7 ff ff       	call   c0002715 <mount_volume>
c0006012:	85 c0                	test   eax,eax
c0006014:	0f 85 c9 00 00 00    	jne    c00060e3 <f_opendir+0xf6>
c000601a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601e:	83 ec 0c             	sub    esp,0xc
c0006021:	89 03                	mov    DWORD PTR [ebx],eax
c0006023:	68 60 04 00 00       	push   0x460
c0006028:	e8 8b 24 00 00       	call   c00084b8 <ff_memalloc>
c000602d:	83 c4 10             	add    esp,0x10
c0006030:	89 c6                	mov    esi,eax
c0006032:	b8 11 00 00 00       	mov    eax,0x11
c0006037:	85 f6                	test   esi,esi
c0006039:	0f 84 aa 00 00 00    	je     c00060e9 <f_opendir+0xfc>
c000603f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006043:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006049:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000604c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000604f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006053:	89 d8                	mov    eax,ebx
c0006055:	e8 31 ee ff ff       	call   c0004e8b <follow_path>
c000605a:	85 c0                	test   eax,eax
c000605c:	75 61                	jne    c00060bf <f_opendir+0xd2>
c000605e:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006062:	78 46                	js     c00060aa <f_opendir+0xbd>
c0006064:	b8 05 00 00 00       	mov    eax,0x5
c0006069:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000606d:	74 50                	je     c00060bf <f_opendir+0xd2>
c000606f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006073:	8a 01                	mov    al,BYTE PTR [ecx]
c0006075:	3c 04                	cmp    al,0x4
c0006077:	75 26                	jne    c000609f <f_opendir+0xb2>
c0006079:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000607c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000607f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006082:	30 d2                	xor    dl,dl
c0006084:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006088:	09 c2                	or     edx,eax
c000608a:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000608d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006090:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006093:	89 da                	mov    edx,ebx
c0006095:	8d 41 10             	lea    eax,[ecx+0x10]
c0006098:	e8 b4 ed ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c000609d:	eb 0b                	jmp    c00060aa <f_opendir+0xbd>
c000609f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060a2:	e8 59 ed ff ff       	call   c0004e00 <ld_clust.isra.0>
c00060a7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060aa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060ae:	31 d2                	xor    edx,edx
c00060b0:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060b8:	89 d8                	mov    eax,ebx
c00060ba:	e8 22 d1 ff ff       	call   c00031e1 <dir_sdi>
c00060bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060c3:	83 ec 0c             	sub    esp,0xc
c00060c6:	56                   	push   esi
c00060c7:	e8 02 24 00 00       	call   c00084ce <ff_memfree>
c00060cc:	83 c4 10             	add    esp,0x10
c00060cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060d3:	83 f8 04             	cmp    eax,0x4
c00060d6:	74 06                	je     c00060de <f_opendir+0xf1>
c00060d8:	85 c0                	test   eax,eax
c00060da:	74 0d                	je     c00060e9 <f_opendir+0xfc>
c00060dc:	eb 05                	jmp    c00060e3 <f_opendir+0xf6>
c00060de:	b8 05 00 00 00       	mov    eax,0x5
c00060e3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e9:	83 c4 24             	add    esp,0x24
c00060ec:	5b                   	pop    ebx
c00060ed:	5e                   	pop    esi
c00060ee:	c3                   	ret    

c00060ef <f_closedir>:
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 18             	sub    esp,0x18
c00060f3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060f7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060fb:	89 d8                	mov    eax,ebx
c00060fd:	e8 86 c2 ff ff       	call   c0002388 <validate>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 06                	jne    c000610c <f_closedir+0x1d>
c0006106:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610c:	83 c4 18             	add    esp,0x18
c000610f:	5b                   	pop    ebx
c0006110:	c3                   	ret    

c0006111 <f_readdir>:
c0006111:	57                   	push   edi
c0006112:	56                   	push   esi
c0006113:	53                   	push   ebx
c0006114:	83 ec 20             	sub    esp,0x20
c0006117:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000611b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000611f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006123:	89 d8                	mov    eax,ebx
c0006125:	e8 5e c2 ff ff       	call   c0002388 <validate>
c000612a:	85 c0                	test   eax,eax
c000612c:	75 77                	jne    c00061a5 <f_readdir+0x94>
c000612e:	85 ff                	test   edi,edi
c0006130:	75 0b                	jne    c000613d <f_readdir+0x2c>
c0006132:	31 d2                	xor    edx,edx
c0006134:	89 d8                	mov    eax,ebx
c0006136:	e8 a6 d0 ff ff       	call   c00031e1 <dir_sdi>
c000613b:	eb 68                	jmp    c00061a5 <f_readdir+0x94>
c000613d:	83 ec 0c             	sub    esp,0xc
c0006140:	68 60 04 00 00       	push   0x460
c0006145:	e8 6e 23 00 00       	call   c00084b8 <ff_memalloc>
c000614a:	83 c4 10             	add    esp,0x10
c000614d:	89 c6                	mov    esi,eax
c000614f:	b8 11 00 00 00       	mov    eax,0x11
c0006154:	85 f6                	test   esi,esi
c0006156:	74 4d                	je     c00061a5 <f_readdir+0x94>
c0006158:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000615c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006162:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006165:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006168:	31 d2                	xor    edx,edx
c000616a:	89 d8                	mov    eax,ebx
c000616c:	e8 80 d8 ff ff       	call   c00039f1 <dir_read>
c0006171:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006176:	75 19                	jne    c0006191 <f_readdir+0x80>
c0006178:	89 fa                	mov    edx,edi
c000617a:	89 d8                	mov    eax,ebx
c000617c:	e8 7e ea ff ff       	call   c0004bff <get_fileinfo>
c0006181:	31 d2                	xor    edx,edx
c0006183:	89 d8                	mov    eax,ebx
c0006185:	e8 af d5 ff ff       	call   c0003739 <dir_next>
c000618a:	83 f8 04             	cmp    eax,0x4
c000618d:	75 02                	jne    c0006191 <f_readdir+0x80>
c000618f:	31 c0                	xor    eax,eax
c0006191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006195:	83 ec 0c             	sub    esp,0xc
c0006198:	56                   	push   esi
c0006199:	e8 30 23 00 00       	call   c00084ce <ff_memfree>
c000619e:	83 c4 10             	add    esp,0x10
c00061a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061a5:	83 c4 20             	add    esp,0x20
c00061a8:	5b                   	pop    ebx
c00061a9:	5e                   	pop    esi
c00061aa:	5f                   	pop    edi
c00061ab:	c3                   	ret    

c00061ac <f_stat>:
c00061ac:	57                   	push   edi
c00061ad:	31 c9                	xor    ecx,ecx
c00061af:	56                   	push   esi
c00061b0:	53                   	push   ebx
c00061b1:	83 ec 50             	sub    esp,0x50
c00061b4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061b8:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061bc:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061c0:	e8 50 c5 ff ff       	call   c0002715 <mount_volume>
c00061c5:	89 c3                	mov    ebx,eax
c00061c7:	85 c0                	test   eax,eax
c00061c9:	75 67                	jne    c0006232 <f_stat+0x86>
c00061cb:	83 ec 0c             	sub    esp,0xc
c00061ce:	bb 11 00 00 00       	mov    ebx,0x11
c00061d3:	68 60 04 00 00       	push   0x460
c00061d8:	e8 db 22 00 00       	call   c00084b8 <ff_memalloc>
c00061dd:	83 c4 10             	add    esp,0x10
c00061e0:	89 c6                	mov    esi,eax
c00061e2:	85 c0                	test   eax,eax
c00061e4:	74 4c                	je     c0006232 <f_stat+0x86>
c00061e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061ea:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061f0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061f3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061f6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061fa:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061fe:	e8 88 ec ff ff       	call   c0004e8b <follow_path>
c0006203:	89 c3                	mov    ebx,eax
c0006205:	85 c0                	test   eax,eax
c0006207:	75 1d                	jne    c0006226 <f_stat+0x7a>
c0006209:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000620e:	78 11                	js     c0006221 <f_stat+0x75>
c0006210:	85 ff                	test   edi,edi
c0006212:	74 12                	je     c0006226 <f_stat+0x7a>
c0006214:	89 fa                	mov    edx,edi
c0006216:	8d 44 24 04          	lea    eax,[esp+0x4]
c000621a:	e8 e0 e9 ff ff       	call   c0004bff <get_fileinfo>
c000621f:	eb 05                	jmp    c0006226 <f_stat+0x7a>
c0006221:	bb 06 00 00 00       	mov    ebx,0x6
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	56                   	push   esi
c000622a:	e8 9f 22 00 00       	call   c00084ce <ff_memfree>
c000622f:	83 c4 10             	add    esp,0x10
c0006232:	83 c4 50             	add    esp,0x50
c0006235:	89 d8                	mov    eax,ebx
c0006237:	5b                   	pop    ebx
c0006238:	5e                   	pop    esi
c0006239:	5f                   	pop    edi
c000623a:	c3                   	ret    

c000623b <f_getfree>:
c000623b:	55                   	push   ebp
c000623c:	31 c9                	xor    ecx,ecx
c000623e:	57                   	push   edi
c000623f:	56                   	push   esi
c0006240:	53                   	push   ebx
c0006241:	83 ec 5c             	sub    esp,0x5c
c0006244:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006248:	8d 44 24 70          	lea    eax,[esp+0x70]
c000624c:	e8 c4 c4 ff ff       	call   c0002715 <mount_volume>
c0006251:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006255:	85 c0                	test   eax,eax
c0006257:	0f 85 9d 01 00 00    	jne    c00063fa <f_getfree+0x1bf>
c000625d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006261:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006265:	89 02                	mov    DWORD PTR [edx],eax
c0006267:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000626a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000626d:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006270:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006274:	39 f2                	cmp    edx,esi
c0006276:	77 0b                	ja     c0006283 <f_getfree+0x48>
c0006278:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000627c:	89 10                	mov    DWORD PTR [eax],edx
c000627e:	e9 77 01 00 00       	jmp    c00063fa <f_getfree+0x1bf>
c0006283:	8a 10                	mov    dl,BYTE PTR [eax]
c0006285:	80 fa 01             	cmp    dl,0x1
c0006288:	75 3a                	jne    c00062c4 <f_getfree+0x89>
c000628a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000628e:	be 02 00 00 00       	mov    esi,0x2
c0006293:	31 db                	xor    ebx,ebx
c0006295:	89 f2                	mov    edx,esi
c0006297:	8d 44 24 28          	lea    eax,[esp+0x28]
c000629b:	e8 4b cd ff ff       	call   c0002feb <get_fat>
c00062a0:	83 f8 ff             	cmp    eax,0xffffffff
c00062a3:	0f 84 28 01 00 00    	je     c00063d1 <f_getfree+0x196>
c00062a9:	83 f8 01             	cmp    eax,0x1
c00062ac:	0f 84 29 01 00 00    	je     c00063db <f_getfree+0x1a0>
c00062b2:	83 d3 00             	adc    ebx,0x0
c00062b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062b9:	46                   	inc    esi
c00062ba:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062bd:	77 d6                	ja     c0006295 <f_getfree+0x5a>
c00062bf:	e9 25 01 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c00062c4:	80 fa 04             	cmp    dl,0x4
c00062c7:	0f 85 88 00 00 00    	jne    c0006355 <f_getfree+0x11a>
c00062cd:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062d0:	31 ed                	xor    ebp,ebp
c00062d2:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062d5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062dd:	31 db                	xor    ebx,ebx
c00062df:	85 ed                	test   ebp,ebp
c00062e1:	75 3f                	jne    c0006322 <f_getfree+0xe7>
c00062e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062eb:	83 c0 01             	add    eax,0x1
c00062ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062f2:	83 d2 00             	adc    edx,0x0
c00062f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006305:	e8 59 c1 ff ff       	call   c0002463 <move_window>
c000630a:	85 c0                	test   eax,eax
c000630c:	0f 85 d3 00 00 00    	jne    c00063e5 <f_getfree+0x1aa>
c0006312:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006316:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000631a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000631e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006322:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006326:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006329:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c000632d:	89 cf                	mov    edi,ecx
c000632f:	85 f6                	test   esi,esi
c0006331:	74 12                	je     c0006345 <f_getfree+0x10a>
c0006333:	88 c1                	mov    cl,al
c0006335:	83 e1 01             	and    ecx,0x1
c0006338:	80 f9 01             	cmp    cl,0x1
c000633b:	83 d3 00             	adc    ebx,0x0
c000633e:	d0 e8                	shr    al,1
c0006340:	4e                   	dec    esi
c0006341:	39 fe                	cmp    esi,edi
c0006343:	75 ea                	jne    c000632f <f_getfree+0xf4>
c0006345:	45                   	inc    ebp
c0006346:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000634c:	85 f6                	test   esi,esi
c000634e:	75 8f                	jne    c00062df <f_getfree+0xa4>
c0006350:	e9 94 00 00 00       	jmp    c00063e9 <f_getfree+0x1ae>
c0006355:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006358:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000635b:	31 f6                	xor    esi,esi
c000635d:	31 db                	xor    ebx,ebx
c000635f:	85 f6                	test   esi,esi
c0006361:	75 1b                	jne    c000637e <f_getfree+0x143>
c0006363:	89 d7                	mov    edi,edx
c0006365:	89 cd                	mov    ebp,ecx
c0006367:	83 c7 01             	add    edi,0x1
c000636a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000636e:	83 d5 00             	adc    ebp,0x0
c0006371:	e8 ed c0 ff ff       	call   c0002463 <move_window>
c0006376:	85 c0                	test   eax,eax
c0006378:	75 6b                	jne    c00063e5 <f_getfree+0x1aa>
c000637a:	89 fa                	mov    edx,edi
c000637c:	89 e9                	mov    ecx,ebp
c000637e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006382:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006386:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000638a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000638d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006391:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006395:	75 11                	jne    c00063a8 <f_getfree+0x16d>
c0006397:	e8 e9 b8 ff ff       	call   c0001c85 <ld_word>
c000639c:	66 83 f8 01          	cmp    ax,0x1
c00063a0:	83 d3 00             	adc    ebx,0x0
c00063a3:	83 c6 02             	add    esi,0x2
c00063a6:	eb 13                	jmp    c00063bb <f_getfree+0x180>
c00063a8:	e8 e5 b8 ff ff       	call   c0001c92 <ld_dword>
c00063ad:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063b2:	83 f8 01             	cmp    eax,0x1
c00063b5:	83 d3 00             	adc    ebx,0x0
c00063b8:	83 c6 04             	add    esi,0x4
c00063bb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063c9:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063cd:	75 90                	jne    c000635f <f_getfree+0x124>
c00063cf:	eb 18                	jmp    c00063e9 <f_getfree+0x1ae>
c00063d1:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063d9:	eb 0e                	jmp    c00063e9 <f_getfree+0x1ae>
c00063db:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063e3:	eb 04                	jmp    c00063e9 <f_getfree+0x1ae>
c00063e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063ed:	89 18                	mov    DWORD PTR [eax],ebx
c00063ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063f3:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063f6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063fe:	83 c4 5c             	add    esp,0x5c
c0006401:	5b                   	pop    ebx
c0006402:	5e                   	pop    esi
c0006403:	5f                   	pop    edi
c0006404:	5d                   	pop    ebp
c0006405:	c3                   	ret    

c0006406 <f_truncate>:
c0006406:	56                   	push   esi
c0006407:	53                   	push   ebx
c0006408:	83 ec 14             	sub    esp,0x14
c000640b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000640f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006413:	89 d8                	mov    eax,ebx
c0006415:	e8 6e bf ff ff       	call   c0002388 <validate>
c000641a:	89 c6                	mov    esi,eax
c000641c:	85 c0                	test   eax,eax
c000641e:	0f 85 d2 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006424:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006428:	85 f6                	test   esi,esi
c000642a:	0f 85 c6 00 00 00    	jne    c00064f6 <f_truncate+0xf0>
c0006430:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006434:	0f 84 b7 00 00 00    	je     c00064f1 <f_truncate+0xeb>
c000643a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000643d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006440:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006443:	89 d1                	mov    ecx,edx
c0006445:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006448:	0f 83 a8 00 00 00    	jae    c00064f6 <f_truncate+0xf0>
c000644e:	09 c2                	or     edx,eax
c0006450:	75 15                	jne    c0006467 <f_truncate+0x61>
c0006452:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006455:	31 c9                	xor    ecx,ecx
c0006457:	89 d8                	mov    eax,ebx
c0006459:	e8 7a d0 ff ff       	call   c00034d8 <remove_chain>
c000645e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006465:	eb 35                	jmp    c000649c <f_truncate+0x96>
c0006467:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000646a:	89 d8                	mov    eax,ebx
c000646c:	e8 7a cb ff ff       	call   c0002feb <get_fat>
c0006471:	89 c2                	mov    edx,eax
c0006473:	b8 01 00 00 00       	mov    eax,0x1
c0006478:	83 fa ff             	cmp    edx,0xffffffff
c000647b:	74 1f                	je     c000649c <f_truncate+0x96>
c000647d:	b8 02 00 00 00       	mov    eax,0x2
c0006482:	83 fa 01             	cmp    edx,0x1
c0006485:	74 15                	je     c000649c <f_truncate+0x96>
c0006487:	31 c0                	xor    eax,eax
c0006489:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000648d:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006490:	76 0a                	jbe    c000649c <f_truncate+0x96>
c0006492:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006495:	89 d8                	mov    eax,ebx
c0006497:	e8 3c d0 ff ff       	call   c00034d8 <remove_chain>
c000649c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000649f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064a2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064a5:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064a8:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064ab:	83 ca 40             	or     edx,0x40
c00064ae:	85 c0                	test   eax,eax
c00064b0:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064b3:	75 35                	jne    c00064ea <f_truncate+0xe4>
c00064b5:	84 d2                	test   dl,dl
c00064b7:	79 3d                	jns    c00064f6 <f_truncate+0xf0>
c00064b9:	83 ec 0c             	sub    esp,0xc
c00064bc:	8d 43 50             	lea    eax,[ebx+0x50]
c00064bf:	6a 01                	push   0x1
c00064c1:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064c4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064c7:	50                   	push   eax
c00064c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064d0:	50                   	push   eax
c00064d1:	e8 7a b7 ff ff       	call   c0001c50 <disk_write>
c00064d6:	83 c4 20             	add    esp,0x20
c00064d9:	85 c0                	test   eax,eax
c00064db:	75 08                	jne    c00064e5 <f_truncate+0xdf>
c00064dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064e1:	31 f6                	xor    esi,esi
c00064e3:	eb 11                	jmp    c00064f6 <f_truncate+0xf0>
c00064e5:	b8 01 00 00 00       	mov    eax,0x1
c00064ea:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064ed:	89 c6                	mov    esi,eax
c00064ef:	eb 05                	jmp    c00064f6 <f_truncate+0xf0>
c00064f1:	be 07 00 00 00       	mov    esi,0x7
c00064f6:	89 f0                	mov    eax,esi
c00064f8:	83 c4 14             	add    esp,0x14
c00064fb:	5b                   	pop    ebx
c00064fc:	5e                   	pop    esi
c00064fd:	c3                   	ret    

c00064fe <f_unlink>:
c00064fe:	56                   	push   esi
c00064ff:	b9 02 00 00 00       	mov    ecx,0x2
c0006504:	53                   	push   ebx
c0006505:	81 ec e4 00 00 00    	sub    esp,0xe4
c000650b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000650f:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006516:	e8 fa c1 ff ff       	call   c0002715 <mount_volume>
c000651b:	85 c0                	test   eax,eax
c000651d:	0f 85 55 01 00 00    	jne    c0006678 <f_unlink+0x17a>
c0006523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006527:	83 ec 0c             	sub    esp,0xc
c000652a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000652e:	68 60 04 00 00       	push   0x460
c0006533:	e8 80 1f 00 00       	call   c00084b8 <ff_memalloc>
c0006538:	83 c4 10             	add    esp,0x10
c000653b:	89 c3                	mov    ebx,eax
c000653d:	b8 11 00 00 00       	mov    eax,0x11
c0006542:	85 db                	test   ebx,ebx
c0006544:	0f 84 2e 01 00 00    	je     c0006678 <f_unlink+0x17a>
c000654a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006554:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006557:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000655a:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006561:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006565:	e8 21 e9 ff ff       	call   c0004e8b <follow_path>
c000656a:	85 c0                	test   eax,eax
c000656c:	0f 85 f2 00 00 00    	jne    c0006664 <f_unlink+0x166>
c0006572:	b8 06 00 00 00       	mov    eax,0x6
c0006577:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000657f:	0f 88 df 00 00 00    	js     c0006664 <f_unlink+0x166>
c0006585:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000658a:	74 0a                	je     c0006596 <f_unlink+0x98>
c000658c:	b8 07 00 00 00       	mov    eax,0x7
c0006591:	e9 ce 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c0006596:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000659a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000659e:	8a 02                	mov    al,BYTE PTR [edx]
c00065a0:	3c 04                	cmp    al,0x4
c00065a2:	75 12                	jne    c00065b6 <f_unlink+0xb8>
c00065a4:	8d 42 10             	lea    eax,[edx+0x10]
c00065a7:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065ab:	e8 a1 e8 ff ff       	call   c0004e51 <init_alloc_info.isra.2>
c00065b0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065b4:	eb 0e                	jmp    c00065c4 <f_unlink+0xc6>
c00065b6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065bd:	e8 3e e8 ff ff       	call   c0004e00 <ld_clust.isra.0>
c00065c2:	89 c6                	mov    esi,eax
c00065c4:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065c9:	75 12                	jne    c00065dd <f_unlink+0xdf>
c00065cb:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065cf:	e8 94 d6 ff ff       	call   c0003c68 <dir_remove>
c00065d4:	85 c0                	test   eax,eax
c00065d6:	74 6c                	je     c0006644 <f_unlink+0x146>
c00065d8:	e9 87 00 00 00       	jmp    c0006664 <f_unlink+0x166>
c00065dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065e1:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065e8:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065f2:	75 21                	jne    c0006615 <f_unlink+0x117>
c00065f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065f8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065fc:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006603:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c000660a:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000660e:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c0006615:	31 d2                	xor    edx,edx
c0006617:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000661e:	e8 be cb ff ff       	call   c00031e1 <dir_sdi>
c0006623:	85 c0                	test   eax,eax
c0006625:	75 3d                	jne    c0006664 <f_unlink+0x166>
c0006627:	31 d2                	xor    edx,edx
c0006629:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006630:	e8 bc d3 ff ff       	call   c00039f1 <dir_read>
c0006635:	85 c0                	test   eax,eax
c0006637:	0f 84 4f ff ff ff    	je     c000658c <f_unlink+0x8e>
c000663d:	83 f8 04             	cmp    eax,0x4
c0006640:	75 22                	jne    c0006664 <f_unlink+0x166>
c0006642:	eb 87                	jmp    c00065cb <f_unlink+0xcd>
c0006644:	85 f6                	test   esi,esi
c0006646:	75 0b                	jne    c0006653 <f_unlink+0x155>
c0006648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000664c:	e8 3d df ff ff       	call   c000458e <sync_fs>
c0006651:	eb 11                	jmp    c0006664 <f_unlink+0x166>
c0006653:	31 c9                	xor    ecx,ecx
c0006655:	89 f2                	mov    edx,esi
c0006657:	8d 44 24 20          	lea    eax,[esp+0x20]
c000665b:	e8 78 ce ff ff       	call   c00034d8 <remove_chain>
c0006660:	85 c0                	test   eax,eax
c0006662:	74 e4                	je     c0006648 <f_unlink+0x14a>
c0006664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006668:	83 ec 0c             	sub    esp,0xc
c000666b:	53                   	push   ebx
c000666c:	e8 5d 1e 00 00       	call   c00084ce <ff_memfree>
c0006671:	83 c4 10             	add    esp,0x10
c0006674:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006678:	81 c4 e4 00 00 00    	add    esp,0xe4
c000667e:	5b                   	pop    ebx
c000667f:	5e                   	pop    esi
c0006680:	c3                   	ret    

c0006681 <f_mkdir>:
c0006681:	57                   	push   edi
c0006682:	b9 02 00 00 00       	mov    ecx,0x2
c0006687:	56                   	push   esi
c0006688:	53                   	push   ebx
c0006689:	83 c4 80             	add    esp,0xffffff80
c000668c:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006690:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006697:	e8 79 c0 ff ff       	call   c0002715 <mount_volume>
c000669c:	89 c3                	mov    ebx,eax
c000669e:	85 c0                	test   eax,eax
c00066a0:	0f 85 fe 01 00 00    	jne    c00068a4 <f_mkdir+0x223>
c00066a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066aa:	bb 11 00 00 00       	mov    ebx,0x11
c00066af:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066b3:	83 ec 0c             	sub    esp,0xc
c00066b6:	68 60 04 00 00       	push   0x460
c00066bb:	e8 f8 1d 00 00       	call   c00084b8 <ff_memalloc>
c00066c0:	83 c4 10             	add    esp,0x10
c00066c3:	89 c7                	mov    edi,eax
c00066c5:	85 c0                	test   eax,eax
c00066c7:	0f 84 d7 01 00 00    	je     c00068a4 <f_mkdir+0x223>
c00066cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d1:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066d7:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066dd:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066e4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066e8:	e8 9e e7 ff ff       	call   c0004e8b <follow_path>
c00066ed:	89 c3                	mov    ebx,eax
c00066ef:	85 c0                	test   eax,eax
c00066f1:	74 3e                	je     c0006731 <f_mkdir+0xb0>
c00066f3:	83 f8 04             	cmp    eax,0x4
c00066f6:	75 3e                	jne    c0006736 <f_mkdir+0xb5>
c00066f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066fc:	31 d2                	xor    edx,edx
c00066fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 ce cb ff ff       	call   c00032d9 <create_chain>
c000670b:	89 c6                	mov    esi,eax
c000670d:	85 c0                	test   eax,eax
c000670f:	74 0c                	je     c000671d <f_mkdir+0x9c>
c0006711:	bb 02 00 00 00       	mov    ebx,0x2
c0006716:	83 f8 01             	cmp    eax,0x1
c0006719:	74 07                	je     c0006722 <f_mkdir+0xa1>
c000671b:	eb 2a                	jmp    c0006747 <f_mkdir+0xc6>
c000671d:	bb 07 00 00 00       	mov    ebx,0x7
c0006722:	31 c9                	xor    ecx,ecx
c0006724:	89 f2                	mov    edx,esi
c0006726:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672a:	e8 a9 cd ff ff       	call   c00034d8 <remove_chain>
c000672f:	eb 05                	jmp    c0006736 <f_mkdir+0xb5>
c0006731:	bb 08 00 00 00       	mov    ebx,0x8
c0006736:	83 ec 0c             	sub    esp,0xc
c0006739:	57                   	push   edi
c000673a:	e8 8f 1d 00 00       	call   c00084ce <ff_memfree>
c000673f:	83 c4 10             	add    esp,0x10
c0006742:	e9 5d 01 00 00       	jmp    c00068a4 <f_mkdir+0x223>
c0006747:	bb 01 00 00 00       	mov    ebx,0x1
c000674c:	83 f8 ff             	cmp    eax,0xffffffff
c000674f:	74 d1                	je     c0006722 <f_mkdir+0xa1>
c0006751:	89 f2                	mov    edx,esi
c0006753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006757:	e8 c4 ce ff ff       	call   c0003620 <dir_clear>
c000675c:	89 c3                	mov    ebx,eax
c000675e:	85 c0                	test   eax,eax
c0006760:	75 c0                	jne    c0006722 <f_mkdir+0xa1>
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006769:	74 69                	je     c00067d4 <f_mkdir+0x153>
c000676b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006770:	83 c0 54             	add    eax,0x54
c0006773:	ba 20 00 00 00       	mov    edx,0x20
c0006778:	e8 9c b5 ff ff       	call   c0001d19 <mem_set>
c000677d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006781:	ba 00 00 21 50       	mov    edx,0x50210000
c0006786:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000678a:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000678e:	83 c0 6a             	add    eax,0x6a
c0006791:	e8 65 b5 ff ff       	call   c0001cfb <st_dword>
c0006796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000679a:	89 f1                	mov    ecx,esi
c000679c:	8d 50 54             	lea    edx,[eax+0x54]
c000679f:	e8 85 e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	b9 20 00 00 00       	mov    ecx,0x20
c00067ad:	8d 50 54             	lea    edx,[eax+0x54]
c00067b0:	83 c0 74             	add    eax,0x74
c00067b3:	e8 4c b5 ff ff       	call   c0001d04 <mem_cpy>
c00067b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067bc:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067c0:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067c4:	8d 50 74             	lea    edx,[eax+0x74]
c00067c7:	e8 5d e6 ff ff       	call   c0004e29 <st_clust.isra.1>
c00067cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067d4:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067d8:	e8 2f db ff ff       	call   c000430c <dir_register>
c00067dd:	89 c3                	mov    ebx,eax
c00067df:	85 c0                	test   eax,eax
c00067e1:	0f 85 3b ff ff ff    	jne    c0006722 <f_mkdir+0xa1>
c00067e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067eb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ee:	75 74                	jne    c0006864 <f_mkdir+0x1e3>
c00067f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f3:	ba 00 00 21 50       	mov    edx,0x50210000
c00067f8:	83 c0 0c             	add    eax,0xc
c00067fb:	e8 fb b4 ff ff       	call   c0001cfb <st_dword>
c0006800:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006804:	89 f2                	mov    edx,esi
c0006806:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006809:	83 c0 34             	add    eax,0x34
c000680c:	e8 ea b4 ff ff       	call   c0001cfb <st_dword>
c0006811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006815:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006819:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000681c:	c1 e2 09             	shl    edx,0x9
c000681f:	83 c0 38             	add    eax,0x38
c0006822:	e8 d4 b4 ff ff       	call   c0001cfb <st_dword>
c0006827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000682f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006832:	c1 e2 09             	shl    edx,0x9
c0006835:	83 c0 28             	add    eax,0x28
c0006838:	e8 be b4 ff ff       	call   c0001cfb <st_dword>
c000683d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006841:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006844:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000684b:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000684f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006853:	e8 8b d3 ff ff       	call   c0003be3 <store_xdir>
c0006858:	89 c3                	mov    ebx,eax
c000685a:	85 c0                	test   eax,eax
c000685c:	0f 85 d4 fe ff ff    	jne    c0006736 <f_mkdir+0xb5>
c0006862:	eb 30                	jmp    c0006894 <f_mkdir+0x213>
c0006864:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006868:	ba 00 00 21 50       	mov    edx,0x50210000
c000686d:	83 c0 16             	add    eax,0x16
c0006870:	e8 86 b4 ff ff       	call   c0001cfb <st_dword>
c0006875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006879:	89 f1                	mov    ecx,esi
c000687b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000687f:	e8 a5 e5 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006884:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006888:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000688c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006890:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006898:	e8 f1 dc ff ff       	call   c000458e <sync_fs>
c000689d:	89 c3                	mov    ebx,eax
c000689f:	e9 92 fe ff ff       	jmp    c0006736 <f_mkdir+0xb5>
c00068a4:	83 ec 80             	sub    esp,0xffffff80
c00068a7:	89 d8                	mov    eax,ebx
c00068a9:	5b                   	pop    ebx
c00068aa:	5e                   	pop    esi
c00068ab:	5f                   	pop    edi
c00068ac:	c3                   	ret    

c00068ad <f_rename>:
c00068ad:	55                   	push   ebp
c00068ae:	57                   	push   edi
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068b7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068be:	e8 a4 b9 ff ff       	call   c0002267 <get_ldnumber>
c00068c3:	b9 02 00 00 00       	mov    ecx,0x2
c00068c8:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068cc:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068d3:	e8 3d be ff ff       	call   c0002715 <mount_volume>
c00068d8:	85 c0                	test   eax,eax
c00068da:	0f 85 b5 02 00 00    	jne    c0006b95 <f_rename+0x2e8>
c00068e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e4:	83 ec 0c             	sub    esp,0xc
c00068e7:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068eb:	68 60 04 00 00       	push   0x460
c00068f0:	e8 c3 1b 00 00       	call   c00084b8 <ff_memalloc>
c00068f5:	83 c4 10             	add    esp,0x10
c00068f8:	89 c3                	mov    ebx,eax
c00068fa:	b8 11 00 00 00       	mov    eax,0x11
c00068ff:	85 db                	test   ebx,ebx
c0006901:	0f 84 8e 02 00 00    	je     c0006b95 <f_rename+0x2e8>
c0006907:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006911:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006914:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006917:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c000691e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006922:	e8 64 e5 ff ff       	call   c0004e8b <follow_path>
c0006927:	85 c0                	test   eax,eax
c0006929:	0f 85 52 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c000692f:	b8 06 00 00 00       	mov    eax,0x6
c0006934:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c000693c:	0f 85 3f 02 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006946:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006949:	0f 85 05 01 00 00    	jne    c0006a54 <f_rename+0x1a7>
c000694f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006952:	b9 40 00 00 00       	mov    ecx,0x40
c0006957:	8d 44 24 18          	lea    eax,[esp+0x18]
c000695b:	e8 a4 b3 ff ff       	call   c0001d04 <mem_cpy>
c0006960:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006965:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006969:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006970:	e8 8f b3 ff ff       	call   c0001d04 <mem_cpy>
c0006975:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000697c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006983:	e8 03 e5 ff ff       	call   c0004e8b <follow_path>
c0006988:	85 c0                	test   eax,eax
c000698a:	75 29                	jne    c00069b5 <f_rename+0x108>
c000698c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006990:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006997:	74 0a                	je     c00069a3 <f_rename+0xf6>
c0006999:	b8 08 00 00 00       	mov    eax,0x8
c000699e:	e9 de 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c00069a3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069aa:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069b1:	75 e6                	jne    c0006999 <f_rename+0xec>
c00069b3:	eb 09                	jmp    c00069be <f_rename+0x111>
c00069b5:	83 f8 04             	cmp    eax,0x4
c00069b8:	0f 85 c3 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069be:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069c5:	e8 42 d9 ff ff       	call   c000430c <dir_register>
c00069ca:	85 c0                	test   eax,eax
c00069cc:	0f 85 af 01 00 00    	jne    c0006b81 <f_rename+0x2d4>
c00069d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d6:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069d9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069dc:	89 c5                	mov    ebp,eax
c00069de:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069e1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069e5:	8d 46 24             	lea    eax,[esi+0x24]
c00069e8:	e8 98 b2 ff ff       	call   c0001c85 <ld_word>
c00069ed:	b9 40 00 00 00       	mov    ecx,0x40
c00069f2:	89 c7                	mov    edi,eax
c00069f4:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069f8:	89 f0                	mov    eax,esi
c00069fa:	e8 05 b3 ff ff       	call   c0001d04 <mem_cpy>
c00069ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a03:	89 e9                	mov    ecx,ebp
c0006a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a08:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a0b:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a13:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a16:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a19:	0f b7 d7             	movzx  edx,di
c0006a1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a1f:	83 c0 24             	add    eax,0x24
c0006a22:	e8 d0 b2 ff ff       	call   c0001cf7 <st_word>
c0006a27:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a2b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a2e:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a31:	a8 10                	test   al,0x10
c0006a33:	75 06                	jne    c0006a3b <f_rename+0x18e>
c0006a35:	83 c8 20             	or     eax,0x20
c0006a38:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a3b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a42:	e8 9c d1 ff ff       	call   c0003be3 <store_xdir>
c0006a47:	85 c0                	test   eax,eax
c0006a49:	0f 84 1c 01 00 00    	je     c0006b6b <f_rename+0x2be>
c0006a4f:	e9 2d 01 00 00       	jmp    c0006b81 <f_rename+0x2d4>
c0006a54:	b9 20 00 00 00       	mov    ecx,0x20
c0006a59:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a60:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a64:	e8 9b b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a69:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a6e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a72:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a79:	e8 86 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006a7e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a85:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a8c:	e8 fa e3 ff ff       	call   c0004e8b <follow_path>
c0006a91:	85 c0                	test   eax,eax
c0006a93:	75 27                	jne    c0006abc <f_rename+0x20f>
c0006a95:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a99:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006aa0:	0f 85 f3 fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aa6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006aad:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ab4:	0f 85 df fe ff ff    	jne    c0006999 <f_rename+0xec>
c0006aba:	eb 09                	jmp    c0006ac5 <f_rename+0x218>
c0006abc:	83 f8 04             	cmp    eax,0x4
c0006abf:	0f 85 bc 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ac5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006acc:	e8 3b d8 ff ff       	call   c000430c <dir_register>
c0006ad1:	85 c0                	test   eax,eax
c0006ad3:	0f 85 a8 00 00 00    	jne    c0006b81 <f_rename+0x2d4>
c0006ad9:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006ae0:	b9 13 00 00 00       	mov    ecx,0x13
c0006ae5:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ae8:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aec:	e8 13 b2 ff ff       	call   c0001d04 <mem_cpy>
c0006af1:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006af5:	a8 10                	test   al,0x10
c0006af7:	75 03                	jne    c0006afc <f_rename+0x24f>
c0006af9:	83 c8 20             	or     eax,0x20
c0006afc:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b03:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b07:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b0b:	74 5e                	je     c0006b6b <f_rename+0x2be>
c0006b0d:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b14:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b18:	74 51                	je     c0006b6b <f_rename+0x2be>
c0006b1a:	89 f2                	mov    edx,esi
c0006b1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b20:	8a 07                	mov    al,BYTE PTR [edi]
c0006b22:	e8 d9 e2 ff ff       	call   c0004e00 <ld_clust.isra.0>
c0006b27:	89 c2                	mov    edx,eax
c0006b29:	89 f8                	mov    eax,edi
c0006b2b:	e8 ee b3 ff ff       	call   c0001f1e <clst2sect>
c0006b30:	89 c6                	mov    esi,eax
c0006b32:	89 d1                	mov    ecx,edx
c0006b34:	b8 02 00 00 00       	mov    eax,0x2
c0006b39:	09 f2                	or     edx,esi
c0006b3b:	74 44                	je     c0006b81 <f_rename+0x2d4>
c0006b3d:	89 f2                	mov    edx,esi
c0006b3f:	89 f8                	mov    eax,edi
c0006b41:	e8 1d b9 ff ff       	call   c0002463 <move_window>
c0006b46:	85 c0                	test   eax,eax
c0006b48:	75 37                	jne    c0006b81 <f_rename+0x2d4>
c0006b4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b4e:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b52:	75 17                	jne    c0006b6b <f_rename+0x2be>
c0006b54:	8d 50 74             	lea    edx,[eax+0x74]
c0006b57:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b5e:	e8 c6 e2 ff ff       	call   c0004e29 <st_clust.isra.1>
c0006b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b67:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b6b:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b6f:	e8 f4 d0 ff ff       	call   c0003c68 <dir_remove>
c0006b74:	85 c0                	test   eax,eax
c0006b76:	75 09                	jne    c0006b81 <f_rename+0x2d4>
c0006b78:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b7c:	e8 0d da ff ff       	call   c000458e <sync_fs>
c0006b81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b85:	83 ec 0c             	sub    esp,0xc
c0006b88:	53                   	push   ebx
c0006b89:	e8 40 19 00 00       	call   c00084ce <ff_memfree>
c0006b8e:	83 c4 10             	add    esp,0x10
c0006b91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b95:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b9b:	5b                   	pop    ebx
c0006b9c:	5e                   	pop    esi
c0006b9d:	5f                   	pop    edi
c0006b9e:	5d                   	pop    ebp
c0006b9f:	c3                   	ret    

c0006ba0 <f_chmod>:
c0006ba0:	57                   	push   edi
c0006ba1:	b9 02 00 00 00       	mov    ecx,0x2
c0006ba6:	56                   	push   esi
c0006ba7:	53                   	push   ebx
c0006ba8:	83 ec 60             	sub    esp,0x60
c0006bab:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006baf:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bb3:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bb7:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006bbb:	e8 55 bb ff ff       	call   c0002715 <mount_volume>
c0006bc0:	85 c0                	test   eax,eax
c0006bc2:	0f 85 af 00 00 00    	jne    c0006c77 <f_chmod+0xd7>
c0006bc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcc:	83 ec 0c             	sub    esp,0xc
c0006bcf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bd3:	68 60 04 00 00       	push   0x460
c0006bd8:	e8 db 18 00 00       	call   c00084b8 <ff_memalloc>
c0006bdd:	83 c4 10             	add    esp,0x10
c0006be0:	89 c6                	mov    esi,eax
c0006be2:	b8 11 00 00 00       	mov    eax,0x11
c0006be7:	85 f6                	test   esi,esi
c0006be9:	0f 84 88 00 00 00    	je     c0006c77 <f_chmod+0xd7>
c0006bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bf9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bfc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bff:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c03:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c07:	e8 7f e2 ff ff       	call   c0004e8b <follow_path>
c0006c0c:	85 c0                	test   eax,eax
c0006c0e:	75 53                	jne    c0006c63 <f_chmod+0xc3>
c0006c10:	b8 06 00 00 00       	mov    eax,0x6
c0006c15:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c1a:	75 47                	jne    c0006c63 <f_chmod+0xc3>
c0006c1c:	89 f9                	mov    ecx,edi
c0006c1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c22:	83 e1 27             	and    ecx,0x27
c0006c25:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c28:	75 1d                	jne    c0006c47 <f_chmod+0xa7>
c0006c2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c2d:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c30:	21 cb                	and    ebx,ecx
c0006c32:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c35:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c38:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c3c:	e8 a2 cf ff ff       	call   c0003be3 <store_xdir>
c0006c41:	85 c0                	test   eax,eax
c0006c43:	75 1e                	jne    c0006c63 <f_chmod+0xc3>
c0006c45:	eb 13                	jmp    c0006c5a <f_chmod+0xba>
c0006c47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c4b:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c4e:	21 cb                	and    ebx,ecx
c0006c50:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c53:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c56:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c5e:	e8 2b d9 ff ff       	call   c000458e <sync_fs>
c0006c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c67:	83 ec 0c             	sub    esp,0xc
c0006c6a:	56                   	push   esi
c0006c6b:	e8 5e 18 00 00       	call   c00084ce <ff_memfree>
c0006c70:	83 c4 10             	add    esp,0x10
c0006c73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c77:	83 c4 60             	add    esp,0x60
c0006c7a:	5b                   	pop    ebx
c0006c7b:	5e                   	pop    esi
c0006c7c:	5f                   	pop    edi
c0006c7d:	c3                   	ret    

c0006c7e <f_utime>:
c0006c7e:	56                   	push   esi
c0006c7f:	b9 02 00 00 00       	mov    ecx,0x2
c0006c84:	53                   	push   ebx
c0006c85:	83 ec 64             	sub    esp,0x64
c0006c88:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c8c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c90:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c94:	e8 7c ba ff ff       	call   c0002715 <mount_volume>
c0006c99:	85 c0                	test   eax,eax
c0006c9b:	0f 85 b5 00 00 00    	jne    c0006d56 <f_utime+0xd8>
c0006ca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca5:	83 ec 0c             	sub    esp,0xc
c0006ca8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cac:	68 60 04 00 00       	push   0x460
c0006cb1:	e8 02 18 00 00       	call   c00084b8 <ff_memalloc>
c0006cb6:	83 c4 10             	add    esp,0x10
c0006cb9:	89 c3                	mov    ebx,eax
c0006cbb:	b8 11 00 00 00       	mov    eax,0x11
c0006cc0:	85 db                	test   ebx,ebx
c0006cc2:	0f 84 8e 00 00 00    	je     c0006d56 <f_utime+0xd8>
c0006cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccc:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cd2:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cd5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cd8:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cdc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ce0:	e8 a6 e1 ff ff       	call   c0004e8b <follow_path>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	75 59                	jne    c0006d42 <f_utime+0xc4>
c0006ce9:	b8 06 00 00 00       	mov    eax,0x6
c0006cee:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cf3:	75 4d                	jne    c0006d42 <f_utime+0xc4>
c0006cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf9:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cfd:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d01:	c1 e2 10             	shl    edx,0x10
c0006d04:	09 ca                	or     edx,ecx
c0006d06:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d09:	75 1a                	jne    c0006d25 <f_utime+0xa7>
c0006d0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d0e:	83 c0 0c             	add    eax,0xc
c0006d11:	e8 e5 af ff ff       	call   c0001cfb <st_dword>
c0006d16:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d1a:	e8 c4 ce ff ff       	call   c0003be3 <store_xdir>
c0006d1f:	85 c0                	test   eax,eax
c0006d21:	75 1f                	jne    c0006d42 <f_utime+0xc4>
c0006d23:	eb 14                	jmp    c0006d39 <f_utime+0xbb>
c0006d25:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d29:	83 c0 16             	add    eax,0x16
c0006d2c:	e8 ca af ff ff       	call   c0001cfb <st_dword>
c0006d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d35:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d3d:	e8 4c d8 ff ff       	call   c000458e <sync_fs>
c0006d42:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d46:	83 ec 0c             	sub    esp,0xc
c0006d49:	53                   	push   ebx
c0006d4a:	e8 7f 17 00 00       	call   c00084ce <ff_memfree>
c0006d4f:	83 c4 10             	add    esp,0x10
c0006d52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d56:	83 c4 64             	add    esp,0x64
c0006d59:	5b                   	pop    ebx
c0006d5a:	5e                   	pop    esi
c0006d5b:	c3                   	ret    

c0006d5c <f_getlabel>:
c0006d5c:	55                   	push   ebp
c0006d5d:	31 c9                	xor    ecx,ecx
c0006d5f:	57                   	push   edi
c0006d60:	56                   	push   esi
c0006d61:	53                   	push   ebx
c0006d62:	83 ec 6c             	sub    esp,0x6c
c0006d65:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d69:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d70:	e8 a0 b9 ff ff       	call   c0002715 <mount_volume>
c0006d75:	89 c6                	mov    esi,eax
c0006d77:	85 c0                	test   eax,eax
c0006d79:	0f 85 c1 01 00 00    	jne    c0006f40 <f_getlabel+0x1e4>
c0006d7f:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d87:	0f 84 5f 01 00 00    	je     c0006eec <f_getlabel+0x190>
c0006d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d91:	31 d2                	xor    edx,edx
c0006d93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d97:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006da3:	e8 39 c4 ff ff       	call   c00031e1 <dir_sdi>
c0006da8:	85 c0                	test   eax,eax
c0006daa:	0f 85 2d 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006db0:	ba 01 00 00 00       	mov    edx,0x1
c0006db5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006db9:	e8 33 cc ff ff       	call   c00039f1 <dir_read>
c0006dbe:	85 c0                	test   eax,eax
c0006dc0:	0f 85 17 01 00 00    	jne    c0006edd <f_getlabel+0x181>
c0006dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dca:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006dcd:	74 09                	je     c0006dd8 <f_getlabel+0x7c>
c0006dcf:	31 db                	xor    ebx,ebx
c0006dd1:	31 c9                	xor    ecx,ecx
c0006dd3:	e9 c8 00 00 00       	jmp    c0006ea0 <f_getlabel+0x144>
c0006dd8:	31 ed                	xor    ebp,ebp
c0006dda:	31 db                	xor    ebx,ebx
c0006ddc:	31 ff                	xor    edi,edi
c0006dde:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006de2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006de6:	39 fa                	cmp    edx,edi
c0006de8:	76 4b                	jbe    c0006e35 <f_getlabel+0xd9>
c0006dea:	47                   	inc    edi
c0006deb:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dee:	01 d0                	add    eax,edx
c0006df0:	e8 90 ae ff ff       	call   c0001c85 <ld_word>
c0006df5:	66 85 ed             	test   bp,bp
c0006df8:	75 0d                	jne    c0006e07 <f_getlabel+0xab>
c0006dfa:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e00:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e05:	76 28                	jbe    c0006e2f <f_getlabel+0xd3>
c0006e07:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e0e:	89 e9                	mov    ecx,ebp
c0006e10:	01 da                	add    edx,ebx
c0006e12:	c1 e1 10             	shl    ecx,0x10
c0006e15:	0f b7 c0             	movzx  eax,ax
c0006e18:	09 c8                	or     eax,ecx
c0006e1a:	b9 04 00 00 00       	mov    ecx,0x4
c0006e1f:	e8 01 b0 ff ff       	call   c0001e25 <put_utf>
c0006e24:	84 c0                	test   al,al
c0006e26:	74 0b                	je     c0006e33 <f_getlabel+0xd7>
c0006e28:	0f b6 c0             	movzx  eax,al
c0006e2b:	01 c3                	add    ebx,eax
c0006e2d:	31 c0                	xor    eax,eax
c0006e2f:	89 c5                	mov    ebp,eax
c0006e31:	eb ab                	jmp    c0006dde <f_getlabel+0x82>
c0006e33:	31 db                	xor    ebx,ebx
c0006e35:	66 85 ed             	test   bp,bp
c0006e38:	74 02                	je     c0006e3c <f_getlabel+0xe0>
c0006e3a:	31 db                	xor    ebx,ebx
c0006e3c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e43:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e47:	e9 a0 00 00 00       	jmp    c0006eec <f_getlabel+0x190>
c0006e4c:	83 ff 0b             	cmp    edi,0xb
c0006e4f:	74 11                	je     c0006e62 <f_getlabel+0x106>
c0006e51:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e5a:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e5d:	c1 e0 08             	shl    eax,0x8
c0006e60:	09 c2                	or     edx,eax
c0006e62:	0f b7 d2             	movzx  edx,dx
c0006e65:	50                   	push   eax
c0006e66:	50                   	push   eax
c0006e67:	68 b5 01 00 00       	push   0x1b5
c0006e6c:	52                   	push   edx
c0006e6d:	e8 03 17 00 00       	call   c0008575 <ff_oem2uni>
c0006e72:	83 c4 10             	add    esp,0x10
c0006e75:	66 85 c0             	test   ax,ax
c0006e78:	74 46                	je     c0006ec0 <f_getlabel+0x164>
c0006e7a:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e81:	0f b7 c0             	movzx  eax,ax
c0006e84:	01 da                	add    edx,ebx
c0006e86:	b9 04 00 00 00       	mov    ecx,0x4
c0006e8b:	e8 95 af ff ff       	call   c0001e25 <put_utf>
c0006e90:	84 c0                	test   al,al
c0006e92:	74 2c                	je     c0006ec0 <f_getlabel+0x164>
c0006e94:	0f b6 c0             	movzx  eax,al
c0006e97:	01 c3                	add    ebx,eax
c0006e99:	83 ff 0b             	cmp    edi,0xb
c0006e9c:	74 24                	je     c0006ec2 <f_getlabel+0x166>
c0006e9e:	89 f9                	mov    ecx,edi
c0006ea0:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006ea4:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ea7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006eac:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006eb1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006eb5:	e8 9f ae ff ff       	call   c0001d59 <dbc_1st>
c0006eba:	85 c0                	test   eax,eax
c0006ebc:	74 a4                	je     c0006e62 <f_getlabel+0x106>
c0006ebe:	eb 8c                	jmp    c0006e4c <f_getlabel+0xf0>
c0006ec0:	31 db                	xor    ebx,ebx
c0006ec2:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ec9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ecc:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ed3:	74 17                	je     c0006eec <f_getlabel+0x190>
c0006ed5:	4b                   	dec    ebx
c0006ed6:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ed9:	74 ee                	je     c0006ec9 <f_getlabel+0x16d>
c0006edb:	eb 0f                	jmp    c0006eec <f_getlabel+0x190>
c0006edd:	83 f8 04             	cmp    eax,0x4
c0006ee0:	75 5c                	jne    c0006f3e <f_getlabel+0x1e2>
c0006ee2:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ee9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eec:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ef4:	74 4a                	je     c0006f40 <f_getlabel+0x1e4>
c0006ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006efa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006efd:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f00:	e8 5e b5 ff ff       	call   c0002463 <move_window>
c0006f05:	89 c6                	mov    esi,eax
c0006f07:	85 c0                	test   eax,eax
c0006f09:	75 35                	jne    c0006f40 <f_getlabel+0x1e4>
c0006f0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f0f:	b8 43 00 00 00       	mov    eax,0x43
c0006f14:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f16:	80 f9 03             	cmp    cl,0x3
c0006f19:	74 0f                	je     c0006f2a <f_getlabel+0x1ce>
c0006f1b:	31 c0                	xor    eax,eax
c0006f1d:	80 f9 04             	cmp    cl,0x4
c0006f20:	0f 94 c0             	sete   al
c0006f23:	48                   	dec    eax
c0006f24:	83 e0 c3             	and    eax,0xffffffc3
c0006f27:	83 c0 64             	add    eax,0x64
c0006f2a:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f2e:	e8 5f ad ff ff       	call   c0001c92 <ld_dword>
c0006f33:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f3a:	89 07                	mov    DWORD PTR [edi],eax
c0006f3c:	eb 02                	jmp    c0006f40 <f_getlabel+0x1e4>
c0006f3e:	89 c6                	mov    esi,eax
c0006f40:	83 c4 6c             	add    esp,0x6c
c0006f43:	89 f0                	mov    eax,esi
c0006f45:	5b                   	pop    ebx
c0006f46:	5e                   	pop    esi
c0006f47:	5f                   	pop    edi
c0006f48:	5d                   	pop    ebp
c0006f49:	c3                   	ret    

c0006f4a <f_setlabel>:
c0006f4a:	56                   	push   esi
c0006f4b:	b9 02 00 00 00       	mov    ecx,0x2
c0006f50:	53                   	push   ebx
c0006f51:	83 ec 74             	sub    esp,0x74
c0006f54:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f58:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f5f:	e8 b1 b7 ff ff       	call   c0002715 <mount_volume>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	85 c0                	test   eax,eax
c0006f68:	0f 85 41 02 00 00    	jne    c00071af <f_setlabel+0x265>
c0006f6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f72:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f75:	0f 85 8e 00 00 00    	jne    c0007009 <f_setlabel+0xbf>
c0006f7b:	b9 16 00 00 00       	mov    ecx,0x16
c0006f80:	31 d2                	xor    edx,edx
c0006f82:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f86:	31 db                	xor    ebx,ebx
c0006f88:	e8 8c ad ff ff       	call   c0001d19 <mem_set>
c0006f8d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f94:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f97:	0f 86 0a 01 00 00    	jbe    c00070a7 <f_setlabel+0x15d>
c0006f9d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fa4:	e8 b6 ad ff ff       	call   c0001d5f <tchar2uni>
c0006fa9:	89 c6                	mov    esi,eax
c0006fab:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fb0:	76 2a                	jbe    c0006fdc <f_setlabel+0x92>
c0006fb2:	83 f8 ff             	cmp    eax,0xffffffff
c0006fb5:	74 05                	je     c0006fbc <f_setlabel+0x72>
c0006fb7:	83 fb 09             	cmp    ebx,0x9
c0006fba:	76 0a                	jbe    c0006fc6 <f_setlabel+0x7c>
c0006fbc:	be 06 00 00 00       	mov    esi,0x6
c0006fc1:	e9 e9 01 00 00       	jmp    c00071af <f_setlabel+0x265>
c0006fc6:	89 c2                	mov    edx,eax
c0006fc8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fcc:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fcf:	c1 ea 10             	shr    edx,0x10
c0006fd2:	01 c8                	add    eax,ecx
c0006fd4:	43                   	inc    ebx
c0006fd5:	e8 1d ad ff ff       	call   c0001cf7 <st_word>
c0006fda:	eb 04                	jmp    c0006fe0 <f_setlabel+0x96>
c0006fdc:	85 c0                	test   eax,eax
c0006fde:	74 dc                	je     c0006fbc <f_setlabel+0x72>
c0006fe0:	89 f2                	mov    edx,esi
c0006fe2:	b8 97 9c 02 c0       	mov    eax,0xc0029c97
c0006fe7:	e8 5b ad ff ff       	call   c0001d47 <chk_chr>
c0006fec:	85 c0                	test   eax,eax
c0006fee:	75 cc                	jne    c0006fbc <f_setlabel+0x72>
c0006ff0:	83 fb 0a             	cmp    ebx,0xa
c0006ff3:	77 c7                	ja     c0006fbc <f_setlabel+0x72>
c0006ff5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff8:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ffc:	0f b7 d6             	movzx  edx,si
c0006fff:	01 c8                	add    eax,ecx
c0007001:	43                   	inc    ebx
c0007002:	e8 f0 ac ff ff       	call   c0001cf7 <st_word>
c0007007:	eb 84                	jmp    c0006f8d <f_setlabel+0x43>
c0007009:	b9 0b 00 00 00       	mov    ecx,0xb
c000700e:	ba 20 00 00 00       	mov    edx,0x20
c0007013:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0007017:	31 db                	xor    ebx,ebx
c0007019:	e8 fb ac ff ff       	call   c0001d19 <mem_set>
c000701e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007025:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007028:	76 60                	jbe    c000708a <f_setlabel+0x140>
c000702a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007031:	e8 29 ad ff ff       	call   c0001d5f <tchar2uni>
c0007036:	3d ff ff 00 00       	cmp    eax,0xffff
c000703b:	0f 87 7b ff ff ff    	ja     c0006fbc <f_setlabel+0x72>
c0007041:	83 ec 0c             	sub    esp,0xc
c0007044:	50                   	push   eax
c0007045:	e8 97 15 00 00       	call   c00085e1 <ff_wtoupper>
c000704a:	5a                   	pop    edx
c000704b:	59                   	pop    ecx
c000704c:	68 b5 01 00 00       	push   0x1b5
c0007051:	50                   	push   eax
c0007052:	e8 8e 14 00 00       	call   c00084e5 <ff_uni2oem>
c0007057:	83 c4 10             	add    esp,0x10
c000705a:	89 c6                	mov    esi,eax
c000705c:	66 85 c0             	test   ax,ax
c000705f:	0f 84 57 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007065:	0f b7 d0             	movzx  edx,ax
c0007068:	b8 90 9c 02 c0       	mov    eax,0xc0029c90
c000706d:	e8 d5 ac ff ff       	call   c0001d47 <chk_chr>
c0007072:	85 c0                	test   eax,eax
c0007074:	0f 85 42 ff ff ff    	jne    c0006fbc <f_setlabel+0x72>
c000707a:	66 81 fe ff 00       	cmp    si,0xff
c000707f:	0f 87 14 01 00 00    	ja     c0007199 <f_setlabel+0x24f>
c0007085:	e9 fa 00 00 00       	jmp    c0007184 <f_setlabel+0x23a>
c000708a:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000708f:	0f 84 27 ff ff ff    	je     c0006fbc <f_setlabel+0x72>
c0007095:	85 db                	test   ebx,ebx
c0007097:	74 0e                	je     c00070a7 <f_setlabel+0x15d>
c0007099:	8d 43 ff             	lea    eax,[ebx-0x1]
c000709c:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070a1:	75 04                	jne    c00070a7 <f_setlabel+0x15d>
c00070a3:	89 c3                	mov    ebx,eax
c00070a5:	eb ee                	jmp    c0007095 <f_setlabel+0x14b>
c00070a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070ab:	31 d2                	xor    edx,edx
c00070ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070b1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070b9:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070bd:	e8 1f c1 ff ff       	call   c00031e1 <dir_sdi>
c00070c2:	89 c6                	mov    esi,eax
c00070c4:	85 c0                	test   eax,eax
c00070c6:	0f 85 e3 00 00 00    	jne    c00071af <f_setlabel+0x265>
c00070cc:	ba 01 00 00 00       	mov    edx,0x1
c00070d1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d5:	e8 17 c9 ff ff       	call   c00039f1 <dir_read>
c00070da:	85 c0                	test   eax,eax
c00070dc:	75 21                	jne    c00070ff <f_setlabel+0x1b5>
c00070de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070e2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e6:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070e9:	74 5d                	je     c0007148 <f_setlabel+0x1fe>
c00070eb:	85 db                	test   ebx,ebx
c00070ed:	74 0b                	je     c00070fa <f_setlabel+0x1b0>
c00070ef:	b9 0b 00 00 00       	mov    ecx,0xb
c00070f4:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070f8:	eb 70                	jmp    c000716a <f_setlabel+0x220>
c00070fa:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070fd:	eb 70                	jmp    c000716f <f_setlabel+0x225>
c00070ff:	83 f8 04             	cmp    eax,0x4
c0007102:	75 7c                	jne    c0007180 <f_setlabel+0x236>
c0007104:	85 db                	test   ebx,ebx
c0007106:	0f 84 a3 00 00 00    	je     c00071af <f_setlabel+0x265>
c000710c:	ba 01 00 00 00       	mov    edx,0x1
c0007111:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007115:	e8 51 ca ff ff       	call   c0003b6b <dir_alloc>
c000711a:	89 c6                	mov    esi,eax
c000711c:	85 c0                	test   eax,eax
c000711e:	0f 85 8b 00 00 00    	jne    c00071af <f_setlabel+0x265>
c0007124:	31 d2                	xor    edx,edx
c0007126:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000712a:	b9 20 00 00 00       	mov    ecx,0x20
c000712f:	e8 e5 ab ff ff       	call   c0001d19 <mem_set>
c0007134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007138:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000713b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000713f:	75 18                	jne    c0007159 <f_setlabel+0x20f>
c0007141:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007144:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007148:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c000714b:	b9 16 00 00 00       	mov    ecx,0x16
c0007150:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007154:	83 c0 02             	add    eax,0x2
c0007157:	eb 9b                	jmp    c00070f4 <f_setlabel+0x1aa>
c0007159:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000715d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007162:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007166:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716a:	e8 95 ab ff ff       	call   c0001d04 <mem_cpy>
c000716f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007173:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000717b:	e8 0e d4 ff ff       	call   c000458e <sync_fs>
c0007180:	89 c6                	mov    esi,eax
c0007182:	eb 2b                	jmp    c00071af <f_setlabel+0x265>
c0007184:	83 fb 0a             	cmp    ebx,0xa
c0007187:	0f 87 2f fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c000718d:	89 f0                	mov    eax,esi
c000718f:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007193:	43                   	inc    ebx
c0007194:	e9 85 fe ff ff       	jmp    c000701e <f_setlabel+0xd4>
c0007199:	83 fb 09             	cmp    ebx,0x9
c000719c:	0f 87 1a fe ff ff    	ja     c0006fbc <f_setlabel+0x72>
c00071a2:	89 f0                	mov    eax,esi
c00071a4:	66 c1 e8 08          	shr    ax,0x8
c00071a8:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071ac:	43                   	inc    ebx
c00071ad:	eb de                	jmp    c000718d <f_setlabel+0x243>
c00071af:	89 f0                	mov    eax,esi
c00071b1:	83 c4 74             	add    esp,0x74
c00071b4:	5b                   	pop    ebx
c00071b5:	5e                   	pop    esi
c00071b6:	c3                   	ret    

c00071b7 <f_forward>:
c00071b7:	55                   	push   ebp
c00071b8:	57                   	push   edi
c00071b9:	56                   	push   esi
c00071ba:	53                   	push   ebx
c00071bb:	83 ec 2c             	sub    esp,0x2c
c00071be:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071d0:	89 d8                	mov    eax,ebx
c00071d2:	e8 b1 b1 ff ff       	call   c0002388 <validate>
c00071d7:	89 c5                	mov    ebp,eax
c00071d9:	85 c0                	test   eax,eax
c00071db:	0f 85 aa 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071e1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071e5:	85 ed                	test   ebp,ebp
c00071e7:	0f 85 9e 01 00 00    	jne    c000738b <f_forward+0x1d4>
c00071ed:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071f1:	0f 84 8f 01 00 00    	je     c0007386 <f_forward+0x1cf>
c00071f7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071fa:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071fd:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007200:	bf 00 00 00 00       	mov    edi,0x0
c0007205:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007208:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000720c:	89 d1                	mov    ecx,edx
c000720e:	19 f9                	sbb    ecx,edi
c0007210:	0f 83 cf 00 00 00    	jae    c00072e5 <f_forward+0x12e>
c0007216:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000721a:	e9 c6 00 00 00       	jmp    c00072e5 <f_forward+0x12e>
c000721f:	50                   	push   eax
c0007220:	50                   	push   eax
c0007221:	6a 00                	push   0x0
c0007223:	6a 00                	push   0x0
c0007225:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007229:	83 c4 10             	add    esp,0x10
c000722c:	85 c0                	test   eax,eax
c000722e:	0f 84 57 01 00 00    	je     c000738b <f_forward+0x1d4>
c0007234:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007237:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000723e:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007242:	89 d7                	mov    edi,edx
c0007244:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007247:	89 c6                	mov    esi,eax
c0007249:	0f ac fe 09          	shrd   esi,edi,0x9
c000724d:	21 ce                	and    esi,ecx
c000724f:	89 c1                	mov    ecx,eax
c0007251:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007257:	0f 84 98 00 00 00    	je     c00072f5 <f_forward+0x13e>
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007264:	89 c8                	mov    eax,ecx
c0007266:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000726a:	e8 af ac ff ff       	call   c0001f1e <clst2sect>
c000726f:	89 d7                	mov    edi,edx
c0007271:	09 c7                	or     edi,eax
c0007273:	0f 84 9e 00 00 00    	je     c0007317 <f_forward+0x160>
c0007279:	31 ff                	xor    edi,edi
c000727b:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000727e:	01 c6                	add    esi,eax
c0007280:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007284:	11 d7                	adc    edi,edx
c0007286:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007289:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000728c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007290:	39 fa                	cmp    edx,edi
c0007292:	0f 85 a2 00 00 00    	jne    c000733a <f_forward+0x183>
c0007298:	39 f0                	cmp    eax,esi
c000729a:	0f 85 9a 00 00 00    	jne    c000733a <f_forward+0x183>
c00072a0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072a3:	ba 00 02 00 00       	mov    edx,0x200
c00072a8:	25 ff 01 00 00       	and    eax,0x1ff
c00072ad:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072b1:	29 c2                	sub    edx,eax
c00072b3:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072b6:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072b9:	39 d1                	cmp    ecx,edx
c00072bb:	76 02                	jbe    c00072bf <f_forward+0x108>
c00072bd:	89 d1                	mov    ecx,edx
c00072bf:	8d 73 50             	lea    esi,[ebx+0x50]
c00072c2:	52                   	push   edx
c00072c3:	01 c6                	add    esi,eax
c00072c5:	52                   	push   edx
c00072c6:	51                   	push   ecx
c00072c7:	56                   	push   esi
c00072c8:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072cc:	83 c4 10             	add    esp,0x10
c00072cf:	85 c0                	test   eax,eax
c00072d1:	74 44                	je     c0007317 <f_forward+0x160>
c00072d3:	31 ff                	xor    edi,edi
c00072d5:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072d8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072db:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072df:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072e3:	01 07                	add    DWORD PTR [edi],eax
c00072e5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072ea:	0f 85 2f ff ff ff    	jne    c000721f <f_forward+0x68>
c00072f0:	e9 96 00 00 00       	jmp    c000738b <f_forward+0x1d4>
c00072f5:	85 f6                	test   esi,esi
c00072f7:	0f 85 60 ff ff ff    	jne    c000725d <f_forward+0xa6>
c00072fd:	89 d7                	mov    edi,edx
c00072ff:	09 c7                	or     edi,eax
c0007301:	75 05                	jne    c0007308 <f_forward+0x151>
c0007303:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007306:	eb 0a                	jmp    c0007312 <f_forward+0x15b>
c0007308:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000730b:	89 d8                	mov    eax,ebx
c000730d:	e8 d9 bc ff ff       	call   c0002feb <get_fat>
c0007312:	83 f8 01             	cmp    eax,0x1
c0007315:	77 0b                	ja     c0007322 <f_forward+0x16b>
c0007317:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000731b:	bd 02 00 00 00       	mov    ebp,0x2
c0007320:	eb 69                	jmp    c000738b <f_forward+0x1d4>
c0007322:	83 f8 ff             	cmp    eax,0xffffffff
c0007325:	75 0b                	jne    c0007332 <f_forward+0x17b>
c0007327:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000732b:	bd 01 00 00 00       	mov    ebp,0x1
c0007330:	eb 59                	jmp    c000738b <f_forward+0x1d4>
c0007332:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007335:	e9 23 ff ff ff       	jmp    c000725d <f_forward+0xa6>
c000733a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000733e:	79 20                	jns    c0007360 <f_forward+0x1a9>
c0007340:	83 ec 0c             	sub    esp,0xc
c0007343:	6a 01                	push   0x1
c0007345:	52                   	push   edx
c0007346:	50                   	push   eax
c0007347:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000734b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 fb a8 ff ff       	call   c0001c50 <disk_write>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	75 cb                	jne    c0007327 <f_forward+0x170>
c000735c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007360:	83 ec 0c             	sub    esp,0xc
c0007363:	6a 01                	push   0x1
c0007365:	57                   	push   edi
c0007366:	56                   	push   esi
c0007367:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000736b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000736f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007373:	50                   	push   eax
c0007374:	e8 c1 a8 ff ff       	call   c0001c3a <disk_read>
c0007379:	83 c4 20             	add    esp,0x20
c000737c:	85 c0                	test   eax,eax
c000737e:	0f 84 1c ff ff ff    	je     c00072a0 <f_forward+0xe9>
c0007384:	eb a1                	jmp    c0007327 <f_forward+0x170>
c0007386:	bd 07 00 00 00       	mov    ebp,0x7
c000738b:	83 c4 2c             	add    esp,0x2c
c000738e:	89 e8                	mov    eax,ebp
c0007390:	5b                   	pop    ebx
c0007391:	5e                   	pop    esi
c0007392:	5f                   	pop    edi
c0007393:	5d                   	pop    ebp
c0007394:	c3                   	ret    

c0007395 <f_mkfs>:
c0007395:	55                   	push   ebp
c0007396:	57                   	push   edi
c0007397:	56                   	push   esi
c0007398:	53                   	push   ebx
c0007399:	bb 0b 00 00 00       	mov    ebx,0xb
c000739e:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073a4:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073ab:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073b2:	e8 b0 ae ff ff       	call   c0002267 <get_ldnumber>
c00073b7:	85 c0                	test   eax,eax
c00073b9:	0f 88 ec 10 00 00    	js     c00084ab <f_mkfs+0x1116>
c00073bf:	8b 14 85 e0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1220]
c00073c6:	85 d2                	test   edx,edx
c00073c8:	74 03                	je     c00073cd <f_mkfs+0x38>
c00073ca:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073cd:	85 f6                	test   esi,esi
c00073cf:	75 05                	jne    c00073d6 <f_mkfs+0x41>
c00073d1:	be 80 9c 02 c0       	mov    esi,0xc0029c80
c00073d6:	83 ec 0c             	sub    esp,0xc
c00073d9:	0f b6 c0             	movzx  eax,al
c00073dc:	bb 03 00 00 00       	mov    ebx,0x3
c00073e1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e9:	e8 49 a8 ff ff       	call   c0001c37 <disk_initialize>
c00073ee:	83 c4 10             	add    esp,0x10
c00073f1:	a8 01                	test   al,0x1
c00073f3:	0f 85 b2 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c00073f9:	bb 0a 00 00 00       	mov    ebx,0xa
c00073fe:	a8 04                	test   al,0x4
c0007400:	0f 85 a5 10 00 00    	jne    c00084ab <f_mkfs+0x1116>
c0007406:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007409:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000740d:	85 c0                	test   eax,eax
c000740f:	75 20                	jne    c0007431 <f_mkfs+0x9c>
c0007411:	51                   	push   ecx
c0007412:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007416:	50                   	push   eax
c0007417:	6a 03                	push   0x3
c0007419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000741d:	e8 44 a8 ff ff       	call   c0001c66 <disk_ioctl>
c0007422:	83 c4 10             	add    esp,0x10
c0007425:	85 c0                	test   eax,eax
c0007427:	74 08                	je     c0007431 <f_mkfs+0x9c>
c0007429:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007431:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007435:	8d 42 ff             	lea    eax,[edx-0x1]
c0007438:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000743d:	77 04                	ja     c0007443 <f_mkfs+0xae>
c000743f:	85 c2                	test   edx,eax
c0007441:	74 08                	je     c000744b <f_mkfs+0xb6>
c0007443:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000744b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000744e:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007452:	48                   	dec    eax
c0007453:	3c 01                	cmp    al,0x1
c0007455:	76 05                	jbe    c000745c <f_mkfs+0xc7>
c0007457:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c000745c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000745f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007463:	48                   	dec    eax
c0007464:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007469:	77 07                	ja     c0007472 <f_mkfs+0xdd>
c000746b:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007470:	74 08                	je     c000747a <f_mkfs+0xe5>
c0007472:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000747a:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000747d:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007483:	77 07                	ja     c000748c <f_mkfs+0xf7>
c0007485:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007488:	85 d8                	test   eax,ebx
c000748a:	74 02                	je     c000748e <f_mkfs+0xf9>
c000748c:	31 db                	xor    ebx,ebx
c000748e:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007499:	77 0a                	ja     c00074a5 <f_mkfs+0x110>
c000749b:	bb 11 00 00 00       	mov    ebx,0x11
c00074a0:	e9 06 10 00 00       	jmp    c00084ab <f_mkfs+0x1116>
c00074a5:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074ac:	8b 36                	mov    esi,DWORD PTR [esi]
c00074ae:	85 ed                	test   ebp,ebp
c00074b0:	75 1e                	jne    c00074d0 <f_mkfs+0x13b>
c00074b2:	83 ec 0c             	sub    esp,0xc
c00074b5:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074bc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074c1:	50                   	push   eax
c00074c2:	e8 f1 0f 00 00       	call   c00084b8 <ff_memalloc>
c00074c7:	83 c4 10             	add    esp,0x10
c00074ca:	89 c5                	mov    ebp,eax
c00074cc:	85 c0                	test   eax,eax
c00074ce:	74 cb                	je     c000749b <f_mkfs+0x106>
c00074d0:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074d8:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074e0:	52                   	push   edx
c00074e1:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074e5:	50                   	push   eax
c00074e6:	6a 01                	push   0x1
c00074e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074ec:	e8 75 a7 ff ff       	call   c0001c66 <disk_ioctl>
c00074f1:	83 c4 10             	add    esp,0x10
c00074f4:	85 c0                	test   eax,eax
c00074f6:	0f 85 4a 0f 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00074fc:	89 f1                	mov    ecx,esi
c00074fe:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007506:	83 e1 0f             	and    ecx,0xf
c0007509:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007511:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007515:	83 e6 08             	and    esi,0x8
c0007518:	75 56                	jne    c0007570 <f_mkfs+0x1db>
c000751a:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000751e:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007522:	83 ff 00             	cmp    edi,0x0
c0007525:	76 20                	jbe    c0007547 <f_mkfs+0x1b2>
c0007527:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c000752c:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007534:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c000753a:	83 d7 ff             	adc    edi,0xffffffff
c000753d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007541:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007545:	eb 21                	jmp    c0007568 <f_mkfs+0x1d3>
c0007547:	ba 3f 00 00 00       	mov    edx,0x3f
c000754c:	39 f2                	cmp    edx,esi
c000754e:	19 f8                	sbb    eax,edi
c0007550:	73 1e                	jae    c0007570 <f_mkfs+0x1db>
c0007552:	83 c6 c1             	add    esi,0xffffffc1
c0007555:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000755d:	83 d7 ff             	adc    edi,0xffffffff
c0007560:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007564:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007568:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007570:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007574:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007578:	89 04 24             	mov    DWORD PTR [esp],eax
c000757b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000757f:	31 c0                	xor    eax,eax
c0007581:	ba 7f 00 00 00       	mov    edx,0x7f
c0007586:	89 c7                	mov    edi,eax
c0007588:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000758b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000758f:	0f 83 c5 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007595:	89 df                	mov    edi,ebx
c0007597:	c1 ef 09             	shr    edi,0x9
c000759a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000759e:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075a5:	c1 ef 09             	shr    edi,0x9
c00075a8:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075ad:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075b1:	74 29                	je     c00075dc <f_mkfs+0x247>
c00075b3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b9:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075be:	0f 97 c2             	seta   dl
c00075c1:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075c4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075c8:	0f 92 c0             	setb   al
c00075cb:	08 c2                	or     dl,al
c00075cd:	75 5b                	jne    c000762a <f_mkfs+0x295>
c00075cf:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d3:	83 e0 07             	and    eax,0x7
c00075d6:	3c 04                	cmp    al,0x4
c00075d8:	74 50                	je     c000762a <f_mkfs+0x295>
c00075da:	eb 1b                	jmp    c00075f7 <f_mkfs+0x262>
c00075dc:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075e1:	0f 87 73 0a 00 00    	ja     c000805a <f_mkfs+0xcc5>
c00075e7:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075ed:	76 08                	jbe    c00075f7 <f_mkfs+0x262>
c00075ef:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075f7:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075fb:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075ff:	83 e0 01             	and    eax,0x1
c0007602:	80 e1 02             	and    cl,0x2
c0007605:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007609:	74 0d                	je     c0007618 <f_mkfs+0x283>
c000760b:	84 c0                	test   al,al
c000760d:	0f 84 53 09 00 00    	je     c0007f66 <f_mkfs+0xbd1>
c0007613:	e9 12 08 00 00       	jmp    c0007e2a <f_mkfs+0xa95>
c0007618:	bb 13 00 00 00       	mov    ebx,0x13
c000761d:	84 c0                	test   al,al
c000761f:	0f 85 05 08 00 00    	jne    c0007e2a <f_mkfs+0xa95>
c0007625:	e9 39 0e 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c000762a:	31 c0                	xor    eax,eax
c000762c:	ba ff 0f 00 00       	mov    edx,0xfff
c0007631:	89 c7                	mov    edi,eax
c0007633:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007636:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000763a:	0f 83 1a 0a 00 00    	jae    c000805a <f_mkfs+0xcc5>
c0007640:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007646:	77 39                	ja     c0007681 <f_mkfs+0x2ec>
c0007648:	ba ff ff 07 00       	mov    edx,0x7ffff
c000764d:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007655:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007658:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000765c:	73 08                	jae    c0007666 <f_mkfs+0x2d1>
c000765e:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007666:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000766b:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000766e:	b8 00 00 00 00       	mov    eax,0x0
c0007673:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007677:	73 08                	jae    c0007681 <f_mkfs+0x2ec>
c0007679:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007685:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007689:	83 c0 20             	add    eax,0x20
c000768c:	83 d2 00             	adc    edx,0x0
c000768f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007693:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000769b:	31 d2                	xor    edx,edx
c000769d:	31 ff                	xor    edi,edi
c000769f:	52                   	push   edx
c00076a0:	89 fb                	mov    ebx,edi
c00076a2:	50                   	push   eax
c00076a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076ab:	e8 04 fb 01 00       	call   c00271b4 <__udivdi3>
c00076b0:	83 c4 10             	add    esp,0x10
c00076b3:	c1 e0 02             	shl    eax,0x2
c00076b6:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076ba:	05 07 02 00 00       	add    eax,0x207
c00076bf:	89 f1                	mov    ecx,esi
c00076c1:	c1 e8 09             	shr    eax,0x9
c00076c4:	83 c1 ff             	add    ecx,0xffffffff
c00076c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076cb:	83 d3 ff             	adc    ebx,0xffffffff
c00076ce:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076d2:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076d6:	31 d2                	xor    edx,edx
c00076d8:	01 c8                	add    eax,ecx
c00076da:	11 da                	adc    edx,ebx
c00076dc:	89 c1                	mov    ecx,eax
c00076de:	f7 de                	neg    esi
c00076e0:	89 d0                	mov    eax,edx
c00076e2:	83 d7 00             	adc    edi,0x0
c00076e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076e9:	f7 df                	neg    edi
c00076eb:	21 f1                	and    ecx,esi
c00076ed:	21 f8                	and    eax,edi
c00076ef:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076f3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076f7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076fb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076ff:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007703:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007706:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c000770a:	0f ac d0 01          	shrd   eax,edx,0x1
c000770e:	89 df                	mov    edi,ebx
c0007710:	d1 ea                	shr    edx,1
c0007712:	39 c1                	cmp    ecx,eax
c0007714:	19 d7                	sbb    edi,edx
c0007716:	0f 83 3e 09 00 00    	jae    c000805a <f_mkfs+0xcc5>
c000771c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007720:	31 d2                	xor    edx,edx
c0007722:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007726:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000772a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000772e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007731:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007735:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007739:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c000773d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007741:	83 f8 0f             	cmp    eax,0xf
c0007744:	0f 86 10 09 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c000774a:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007752:	0f 87 02 09 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007758:	31 d2                	xor    edx,edx
c000775a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000775e:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007766:	83 c0 07             	add    eax,0x7
c0007769:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007771:	c1 e8 03             	shr    eax,0x3
c0007774:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000777b:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000777f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007783:	c1 e0 09             	shl    eax,0x9
c0007786:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000778a:	48                   	dec    eax
c000778b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000778f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007793:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007797:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000779b:	31 d2                	xor    edx,edx
c000779d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077a1:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077ac:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077b5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077b9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077c1:	31 ff                	xor    edi,edi
c00077c3:	31 f6                	xor    esi,esi
c00077c5:	31 db                	xor    ebx,ebx
c00077c7:	85 ff                	test   edi,edi
c00077c9:	74 05                	je     c00077d0 <f_mkfs+0x43b>
c00077cb:	4f                   	dec    edi
c00077cc:	74 44                	je     c0007812 <f_mkfs+0x47d>
c00077ce:	eb 4f                	jmp    c000781f <f_mkfs+0x48a>
c00077d0:	83 ec 0c             	sub    esp,0xc
c00077d3:	0f b7 c3             	movzx  eax,bx
c00077d6:	50                   	push   eax
c00077d7:	e8 05 0e 00 00       	call   c00085e1 <ff_wtoupper>
c00077dc:	83 c4 10             	add    esp,0x10
c00077df:	89 c1                	mov    ecx,eax
c00077e1:	8d 53 01             	lea    edx,[ebx+0x1]
c00077e4:	66 39 c3             	cmp    bx,ax
c00077e7:	75 3e                	jne    c0007827 <f_mkfs+0x492>
c00077e9:	be 01 00 00 00       	mov    esi,0x1
c00077ee:	89 df                	mov    edi,ebx
c00077f0:	66 01 f7             	add    di,si
c00077f3:	75 07                	jne    c00077fc <f_mkfs+0x467>
c00077f5:	83 fe 7f             	cmp    esi,0x7f
c00077f8:	77 31                	ja     c000782b <f_mkfs+0x496>
c00077fa:	eb 16                	jmp    c0007812 <f_mkfs+0x47d>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	0f b7 ff             	movzx  edi,di
c0007802:	57                   	push   edi
c0007803:	e8 d9 0d 00 00       	call   c00085e1 <ff_wtoupper>
c0007808:	83 c4 10             	add    esp,0x10
c000780b:	39 c7                	cmp    edi,eax
c000780d:	75 e6                	jne    c00077f5 <f_mkfs+0x460>
c000780f:	46                   	inc    esi
c0007810:	eb dc                	jmp    c00077ee <f_mkfs+0x459>
c0007812:	31 c0                	xor    eax,eax
c0007814:	89 d9                	mov    ecx,ebx
c0007816:	4e                   	dec    esi
c0007817:	0f 95 c0             	setne  al
c000781a:	43                   	inc    ebx
c000781b:	89 c7                	mov    edi,eax
c000781d:	eb 14                	jmp    c0007833 <f_mkfs+0x49e>
c000781f:	89 f1                	mov    ecx,esi
c0007821:	01 f3                	add    ebx,esi
c0007823:	31 ff                	xor    edi,edi
c0007825:	eb 0c                	jmp    c0007833 <f_mkfs+0x49e>
c0007827:	89 d3                	mov    ebx,edx
c0007829:	eb 08                	jmp    c0007833 <f_mkfs+0x49e>
c000782b:	bf 02 00 00 00       	mov    edi,0x2
c0007830:	83 c9 ff             	or     ecx,0xffffffff
c0007833:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007837:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783a:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000783e:	0f b6 c1             	movzx  eax,cl
c0007841:	e8 3a a9 ff ff       	call   c0002180 <xsum32>
c0007846:	66 c1 e9 08          	shr    cx,0x8
c000784a:	89 c2                	mov    edx,eax
c000784c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000784f:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007853:	0f b7 c1             	movzx  eax,cx
c0007856:	e8 25 a9 ff ff       	call   c0002180 <xsum32>
c000785b:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007860:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007864:	66 85 db             	test   bx,bx
c0007867:	74 1f                	je     c0007888 <f_mkfs+0x4f3>
c0007869:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000786c:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007873:	83 c0 02             	add    eax,0x2
c0007876:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000787c:	39 c2                	cmp    edx,eax
c000787e:	74 08                	je     c0007888 <f_mkfs+0x4f3>
c0007880:	89 04 24             	mov    DWORD PTR [esp],eax
c0007883:	e9 3f ff ff ff       	jmp    c00077c7 <f_mkfs+0x432>
c0007888:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000788b:	83 ec 0c             	sub    esp,0xc
c000788e:	05 01 02 00 00       	add    eax,0x201
c0007893:	c1 e8 09             	shr    eax,0x9
c0007896:	50                   	push   eax
c0007897:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000789b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000789f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078a3:	55                   	push   ebp
c00078a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078a8:	e8 a3 a3 ff ff       	call   c0001c50 <disk_write>
c00078ad:	83 c4 20             	add    esp,0x20
c00078b0:	85 c0                	test   eax,eax
c00078b2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078b5:	0f 85 8b 0b 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00078bb:	89 d0                	mov    eax,edx
c00078bd:	31 d2                	xor    edx,edx
c00078bf:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078c3:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078c7:	66 85 db             	test   bx,bx
c00078ca:	74 04                	je     c00078d0 <f_mkfs+0x53b>
c00078cc:	31 c0                	xor    eax,eax
c00078ce:	eb b0                	jmp    c0007880 <f_mkfs+0x4eb>
c00078d0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078d4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078d8:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078dc:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078e2:	31 d2                	xor    edx,edx
c00078e4:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ef:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078f3:	c1 eb 09             	shr    ebx,0x9
c00078f6:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007901:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007905:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007909:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000790d:	8d 70 01             	lea    esi,[eax+0x1]
c0007910:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007918:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c000791f:	31 d2                	xor    edx,edx
c0007921:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007926:	89 04 24             	mov    DWORD PTR [esp],eax
c0007929:	89 c1                	mov    ecx,eax
c000792b:	89 e8                	mov    eax,ebp
c000792d:	e8 e7 a3 ff ff       	call   c0001d19 <mem_set>
c0007932:	31 c0                	xor    eax,eax
c0007934:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007937:	76 10                	jbe    c0007949 <f_mkfs+0x5b4>
c0007939:	83 fe 07             	cmp    esi,0x7
c000793c:	76 0b                	jbe    c0007949 <f_mkfs+0x5b4>
c000793e:	40                   	inc    eax
c000793f:	83 ee 08             	sub    esi,0x8
c0007942:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007947:	eb eb                	jmp    c0007934 <f_mkfs+0x59f>
c0007949:	b2 01                	mov    dl,0x1
c000794b:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000794f:	85 f6                	test   esi,esi
c0007951:	74 0c                	je     c000795f <f_mkfs+0x5ca>
c0007953:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007956:	76 07                	jbe    c000795f <f_mkfs+0x5ca>
c0007958:	08 11                	or     BYTE PTR [ecx],dl
c000795a:	4e                   	dec    esi
c000795b:	d1 e2                	shl    edx,1
c000795d:	eb f0                	jmp    c000794f <f_mkfs+0x5ba>
c000795f:	89 df                	mov    edi,ebx
c0007961:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007965:	76 04                	jbe    c000796b <f_mkfs+0x5d6>
c0007967:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000796b:	83 ec 0c             	sub    esp,0xc
c000796e:	57                   	push   edi
c000796f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007973:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007977:	55                   	push   ebp
c0007978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000797c:	e8 cf a2 ff ff       	call   c0001c50 <disk_write>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	85 c0                	test   eax,eax
c0007986:	0f 85 ba 0a 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000798c:	31 d2                	xor    edx,edx
c000798e:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007992:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007996:	29 fb                	sub    ebx,edi
c0007998:	0f 85 7a ff ff ff    	jne    c0007918 <f_mkfs+0x583>
c000799e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079aa:	31 f6                	xor    esi,esi
c00079ac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079b0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079b3:	31 d2                	xor    edx,edx
c00079b5:	89 e8                	mov    eax,ebp
c00079b7:	e8 5d a3 ff ff       	call   c0001d19 <mem_set>
c00079bc:	31 c9                	xor    ecx,ecx
c00079be:	85 db                	test   ebx,ebx
c00079c0:	75 40                	jne    c0007a02 <f_mkfs+0x66d>
c00079c2:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079c7:	89 e8                	mov    eax,ebp
c00079c9:	bb 02 00 00 00       	mov    ebx,0x2
c00079ce:	e8 28 a3 ff ff       	call   c0001cfb <st_dword>
c00079d3:	8d 45 04             	lea    eax,[ebp+0x4]
c00079d6:	83 ca ff             	or     edx,0xffffffff
c00079d9:	e8 1d a3 ff ff       	call   c0001cfb <st_dword>
c00079de:	b9 08 00 00 00       	mov    ecx,0x8
c00079e3:	eb 1d                	jmp    c0007a02 <f_mkfs+0x66d>
c00079e5:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e8:	76 3b                	jbe    c0007a25 <f_mkfs+0x690>
c00079ea:	43                   	inc    ebx
c00079eb:	83 fe 01             	cmp    esi,0x1
c00079ee:	89 da                	mov    edx,ebx
c00079f0:	77 03                	ja     c00079f5 <f_mkfs+0x660>
c00079f2:	83 ca ff             	or     edx,0xffffffff
c00079f5:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079f9:	4e                   	dec    esi
c00079fa:	e8 fc a2 ff ff       	call   c0001cfb <st_dword>
c00079ff:	83 c1 04             	add    ecx,0x4
c0007a02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a06:	85 f6                	test   esi,esi
c0007a08:	75 db                	jne    c00079e5 <f_mkfs+0x650>
c0007a0a:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a0f:	77 14                	ja     c0007a25 <f_mkfs+0x690>
c0007a11:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a15:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a1c:	85 f6                	test   esi,esi
c0007a1e:	74 05                	je     c0007a25 <f_mkfs+0x690>
c0007a20:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a23:	77 dd                	ja     c0007a02 <f_mkfs+0x66d>
c0007a25:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a29:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a2d:	39 cf                	cmp    edi,ecx
c0007a2f:	76 02                	jbe    c0007a33 <f_mkfs+0x69e>
c0007a31:	89 cf                	mov    edi,ecx
c0007a33:	83 ec 0c             	sub    esp,0xc
c0007a36:	57                   	push   edi
c0007a37:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a3f:	55                   	push   ebp
c0007a40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a44:	e8 07 a2 ff ff       	call   c0001c50 <disk_write>
c0007a49:	83 c4 20             	add    esp,0x20
c0007a4c:	85 c0                	test   eax,eax
c0007a4e:	0f 85 f2 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007a54:	31 d2                	xor    edx,edx
c0007a56:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a5a:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a5e:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a62:	0f 85 48 ff ff ff    	jne    c00079b0 <f_mkfs+0x61b>
c0007a68:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a6b:	31 d2                	xor    edx,edx
c0007a6d:	89 e8                	mov    eax,ebp
c0007a6f:	31 ff                	xor    edi,edi
c0007a71:	e8 a3 a2 ff ff       	call   c0001d19 <mem_set>
c0007a76:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a79:	ba 02 00 00 00       	mov    edx,0x2
c0007a7e:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a82:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a86:	e8 70 a2 ff ff       	call   c0001cfb <st_dword>
c0007a8b:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a8e:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a92:	e8 64 a2 ff ff       	call   c0001cfb <st_dword>
c0007a97:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a9a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a9e:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007aa2:	e8 54 a2 ff ff       	call   c0001cfb <st_dword>
c0007aa7:	8d 45 54             	lea    eax,[ebp+0x54]
c0007aaa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007aae:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ab2:	83 c2 02             	add    edx,0x2
c0007ab5:	e8 41 a2 ff ff       	call   c0001cfb <st_dword>
c0007aba:	8d 45 58             	lea    eax,[ebp+0x58]
c0007abd:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ac1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007ac5:	e8 31 a2 ff ff       	call   c0001cfb <st_dword>
c0007aca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ace:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007ad3:	89 c6                	mov    esi,eax
c0007ad5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ad9:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007add:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ae0:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ae4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ae7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aeb:	39 cb                	cmp    ebx,ecx
c0007aed:	76 02                	jbe    c0007af1 <f_mkfs+0x75c>
c0007aef:	89 cb                	mov    ebx,ecx
c0007af1:	83 ec 0c             	sub    esp,0xc
c0007af4:	53                   	push   ebx
c0007af5:	57                   	push   edi
c0007af6:	56                   	push   esi
c0007af7:	55                   	push   ebp
c0007af8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afc:	e8 4f a1 ff ff       	call   c0001c50 <disk_write>
c0007b01:	83 c4 20             	add    esp,0x20
c0007b04:	85 c0                	test   eax,eax
c0007b06:	0f 85 3a 09 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007b0c:	31 d2                	xor    edx,edx
c0007b0e:	b9 00 02 00 00       	mov    ecx,0x200
c0007b13:	89 e8                	mov    eax,ebp
c0007b15:	e8 ff a1 ff ff       	call   c0001d19 <mem_set>
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	01 de                	add    esi,ebx
c0007b1e:	11 d7                	adc    edi,edx
c0007b20:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b23:	75 bf                	jne    c0007ae4 <f_mkfs+0x74f>
c0007b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b2d:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b35:	b9 00 02 00 00       	mov    ecx,0x200
c0007b3a:	31 d2                	xor    edx,edx
c0007b3c:	89 e8                	mov    eax,ebp
c0007b3e:	e8 d6 a1 ff ff       	call   c0001d19 <mem_set>
c0007b43:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b48:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c0007b4d:	89 e8                	mov    eax,ebp
c0007b4f:	e8 b0 a1 ff ff       	call   c0001d04 <mem_cpy>
c0007b54:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b57:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b5f:	e8 9a a1 ff ff       	call   c0001cfe <st_qword>
c0007b64:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b68:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b6b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b6f:	e8 8a a1 ff ff       	call   c0001cfe <st_qword>
c0007b74:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b77:	ba 20 00 00 00       	mov    edx,0x20
c0007b7c:	e8 7a a1 ff ff       	call   c0001cfb <st_dword>
c0007b81:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b89:	e8 6d a1 ff ff       	call   c0001cfb <st_dword>
c0007b8e:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b92:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b96:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b9a:	e8 5c a1 ff ff       	call   c0001cfb <st_dword>
c0007b9f:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007ba2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ba6:	e8 50 a1 ff ff       	call   c0001cfb <st_dword>
c0007bab:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007baf:	8d 50 02             	lea    edx,[eax+0x2]
c0007bb2:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bb5:	e8 41 a1 ff ff       	call   c0001cfb <st_dword>
c0007bba:	8d 45 64             	lea    eax,[ebp+0x64]
c0007bbd:	ba 00 00 21 50       	mov    edx,0x50210000
c0007bc2:	e8 34 a1 ff ff       	call   c0001cfb <st_dword>
c0007bc7:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bca:	ba 00 01 00 00       	mov    edx,0x100
c0007bcf:	e8 23 a1 ff ff       	call   c0001cf7 <st_word>
c0007bd4:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bd8:	b8 0a 00 00 00       	mov    eax,0xa
c0007bdd:	48                   	dec    eax
c0007bde:	74 05                	je     c0007be5 <f_mkfs+0x850>
c0007be0:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007be3:	eb f8                	jmp    c0007bdd <f_mkfs+0x848>
c0007be5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be9:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bf1:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bf5:	74 05                	je     c0007bfc <f_mkfs+0x867>
c0007bf7:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bfa:	eb f5                	jmp    c0007bf1 <f_mkfs+0x85c>
c0007bfc:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bff:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c04:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c0a:	31 db                	xor    ebx,ebx
c0007c0c:	e8 e6 a0 ff ff       	call   c0001cf7 <st_word>
c0007c11:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c17:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c1f:	e8 d3 a0 ff ff       	call   c0001cf7 <st_word>
c0007c24:	31 c9                	xor    ecx,ecx
c0007c26:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c29:	83 f8 01             	cmp    eax,0x1
c0007c2c:	76 13                	jbe    c0007c41 <f_mkfs+0x8ac>
c0007c2e:	83 f9 70             	cmp    ecx,0x70
c0007c31:	74 0e                	je     c0007c41 <f_mkfs+0x8ac>
c0007c33:	89 da                	mov    edx,ebx
c0007c35:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c3a:	e8 41 a5 ff ff       	call   c0002180 <xsum32>
c0007c3f:	89 c3                	mov    ebx,eax
c0007c41:	41                   	inc    ecx
c0007c42:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c48:	75 dc                	jne    c0007c26 <f_mkfs+0x891>
c0007c4a:	89 f0                	mov    eax,esi
c0007c4c:	89 fa                	mov    edx,edi
c0007c4e:	83 c0 01             	add    eax,0x1
c0007c51:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c55:	83 d2 00             	adc    edx,0x0
c0007c58:	83 ec 0c             	sub    esp,0xc
c0007c5b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c5f:	6a 01                	push   0x1
c0007c61:	57                   	push   edi
c0007c62:	56                   	push   esi
c0007c63:	55                   	push   ebp
c0007c64:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c68:	e8 e3 9f ff ff       	call   c0001c50 <disk_write>
c0007c6d:	83 c4 20             	add    esp,0x20
c0007c70:	85 c0                	test   eax,eax
c0007c72:	0f 85 ce 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007c78:	31 d2                	xor    edx,edx
c0007c7a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c7f:	89 e8                	mov    eax,ebp
c0007c81:	e8 93 a0 ff ff       	call   c0001d19 <mem_set>
c0007c86:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c8e:	e8 64 a0 ff ff       	call   c0001cf7 <st_word>
c0007c93:	89 f0                	mov    eax,esi
c0007c95:	89 fa                	mov    edx,edi
c0007c97:	83 c0 09             	add    eax,0x9
c0007c9a:	83 d2 00             	adc    edx,0x0
c0007c9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007ca0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007ca4:	31 c9                	xor    ecx,ecx
c0007ca6:	41                   	inc    ecx
c0007ca7:	89 da                	mov    edx,ebx
c0007ca9:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cae:	e8 cd a4 ff ff       	call   c0002180 <xsum32>
c0007cb3:	89 c3                	mov    ebx,eax
c0007cb5:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cbb:	75 e9                	jne    c0007ca6 <f_mkfs+0x911>
c0007cbd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007cc1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007cc5:	83 c0 01             	add    eax,0x1
c0007cc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ccc:	83 d2 00             	adc    edx,0x0
c0007ccf:	83 ec 0c             	sub    esp,0xc
c0007cd2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cd6:	6a 01                	push   0x1
c0007cd8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cdc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ce0:	55                   	push   ebp
c0007ce1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ce5:	e8 66 9f ff ff       	call   c0001c50 <disk_write>
c0007cea:	83 c4 20             	add    esp,0x20
c0007ced:	85 c0                	test   eax,eax
c0007cef:	0f 85 51 07 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007cf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cf9:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cfd:	75 09                	jne    c0007d08 <f_mkfs+0x973>
c0007cff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d02:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d06:	74 12                	je     c0007d1a <f_mkfs+0x985>
c0007d08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d0c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d18:	eb 8a                	jmp    c0007ca4 <f_mkfs+0x90f>
c0007d1a:	31 d2                	xor    edx,edx
c0007d1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d21:	89 e8                	mov    eax,ebp
c0007d23:	e8 f1 9f ff ff       	call   c0001d19 <mem_set>
c0007d28:	83 c6 0b             	add    esi,0xb
c0007d2b:	83 d7 00             	adc    edi,0x0
c0007d2e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d32:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d36:	31 c9                	xor    ecx,ecx
c0007d38:	41                   	inc    ecx
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d40:	e8 3b a4 ff ff       	call   c0002180 <xsum32>
c0007d45:	89 c3                	mov    ebx,eax
c0007d47:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d4d:	75 e9                	jne    c0007d38 <f_mkfs+0x9a3>
c0007d4f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d52:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d56:	83 c6 01             	add    esi,0x1
c0007d59:	83 d7 00             	adc    edi,0x0
c0007d5c:	83 ec 0c             	sub    esp,0xc
c0007d5f:	6a 01                	push   0x1
c0007d61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d69:	55                   	push   ebp
c0007d6a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d6e:	e8 dd 9e ff ff       	call   c0001c50 <disk_write>
c0007d73:	83 c4 20             	add    esp,0x20
c0007d76:	85 c0                	test   eax,eax
c0007d78:	0f 85 c8 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007d7e:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d82:	75 06                	jne    c0007d8a <f_mkfs+0x9f5>
c0007d84:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d88:	74 09                	je     c0007d93 <f_mkfs+0x9fe>
c0007d8a:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d8d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d91:	eb a3                	jmp    c0007d36 <f_mkfs+0x9a1>
c0007d93:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d97:	89 da                	mov    edx,ebx
c0007d99:	01 e8                	add    eax,ebp
c0007d9b:	e8 5b 9f ff ff       	call   c0001cfb <st_dword>
c0007da0:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007da5:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dad:	75 e4                	jne    c0007d93 <f_mkfs+0x9fe>
c0007daf:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007db2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007db6:	83 c6 02             	add    esi,0x2
c0007db9:	83 d7 00             	adc    edi,0x0
c0007dbc:	83 ec 0c             	sub    esp,0xc
c0007dbf:	6a 01                	push   0x1
c0007dc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007dc9:	55                   	push   ebp
c0007dca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007dce:	e8 7d 9e ff ff       	call   c0001c50 <disk_write>
c0007dd3:	83 c4 20             	add    esp,0x20
c0007dd6:	85 c0                	test   eax,eax
c0007dd8:	0f 85 68 06 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c0007dde:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007de3:	74 0d                	je     c0007df2 <f_mkfs+0xa5d>
c0007de5:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ded:	e9 43 fd ff ff       	jmp    c0007b35 <f_mkfs+0x7a0>
c0007df2:	b1 07                	mov    cl,0x7
c0007df4:	e9 e3 05 00 00       	jmp    c00083dc <f_mkfs+0x1047>
c0007df9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dfe:	0f 85 4f 02 00 00    	jne    c0008053 <f_mkfs+0xcbe>
c0007e04:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e09:	0f 86 22 02 00 00    	jbe    c0008031 <f_mkfs+0xc9c>
c0007e0f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e14:	0f 85 81 06 00 00    	jne    c000849b <f_mkfs+0x1106>
c0007e1a:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e21:	83 f8 40             	cmp    eax,0x40
c0007e24:	0f 87 51 06 00 00    	ja     c000847b <f_mkfs+0x10e6>
c0007e2a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e2e:	85 ff                	test   edi,edi
c0007e30:	75 1c                	jne    c0007e4e <f_mkfs+0xab9>
c0007e32:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e35:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c0007e3a:	c1 e9 0c             	shr    ecx,0xc
c0007e3d:	bf 01 00 00 00       	mov    edi,0x1
c0007e42:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e45:	66 85 c0             	test   ax,ax
c0007e48:	0f 85 95 01 00 00    	jne    c0007fe3 <f_mkfs+0xc4e>
c0007e4e:	31 d2                	xor    edx,edx
c0007e50:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e53:	f7 f7                	div    edi
c0007e55:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e5a:	0f 86 95 01 00 00    	jbe    c0007ff5 <f_mkfs+0xc60>
c0007e60:	83 c0 02             	add    eax,0x2
c0007e63:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e68:	01 c0                	add    eax,eax
c0007e6a:	05 ff 01 00 00       	add    eax,0x1ff
c0007e6f:	be 01 00 00 00       	mov    esi,0x1
c0007e74:	c1 e8 09             	shr    eax,0x9
c0007e77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e7b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e7f:	c1 e0 05             	shl    eax,0x5
c0007e82:	c1 e8 09             	shr    eax,0x9
c0007e85:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e89:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e8e:	31 d2                	xor    edx,edx
c0007e90:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e94:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e98:	89 f0                	mov    eax,esi
c0007e9a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e9e:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ea2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ea6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007eaa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007eae:	31 d2                	xor    edx,edx
c0007eb0:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007eb5:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007eb9:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ebd:	31 db                	xor    ebx,ebx
c0007ebf:	01 c8                	add    eax,ecx
c0007ec1:	11 da                	adc    edx,ebx
c0007ec3:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ec7:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ecb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ecf:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ed3:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ed7:	f7 da                	neg    edx
c0007ed9:	21 d1                	and    ecx,edx
c0007edb:	29 d9                	sub    ecx,ebx
c0007edd:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ee2:	0f 85 20 01 00 00    	jne    c0008008 <f_mkfs+0xc73>
c0007ee8:	31 db                	xor    ebx,ebx
c0007eea:	01 ce                	add    esi,ecx
c0007eec:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ef0:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ef4:	31 d2                	xor    edx,edx
c0007ef6:	89 f8                	mov    eax,edi
c0007ef8:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007efc:	c1 e0 04             	shl    eax,0x4
c0007eff:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f03:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f07:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f0b:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f0f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f12:	19 d3                	sbb    ebx,edx
c0007f14:	0f 82 40 01 00 00    	jb     c000805a <f_mkfs+0xcc5>
c0007f1a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f1d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f21:	89 c8                	mov    eax,ecx
c0007f23:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f28:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f2c:	29 f0                	sub    eax,esi
c0007f2e:	29 d0                	sub    eax,edx
c0007f30:	31 d2                	xor    edx,edx
c0007f32:	f7 f7                	div    edi
c0007f34:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f39:	89 c3                	mov    ebx,eax
c0007f3b:	0f 85 b8 fe ff ff    	jne    c0007df9 <f_mkfs+0xa64>
c0007f41:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f46:	0f 87 1d 01 00 00    	ja     c0008069 <f_mkfs+0xcd4>
c0007f4c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f51:	0f 85 03 01 00 00    	jne    c000805a <f_mkfs+0xcc5>
c0007f57:	83 ff 01             	cmp    edi,0x1
c0007f5a:	0f 86 fa 00 00 00    	jbe    c000805a <f_mkfs+0xcc5>
c0007f60:	d1 ef                	shr    edi,1
c0007f62:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f66:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f6a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f6d:	85 db                	test   ebx,ebx
c0007f6f:	75 2d                	jne    c0007f9e <f_mkfs+0xc09>
c0007f71:	89 cb                	mov    ebx,ecx
c0007f73:	ba 70 9c 02 c0       	mov    edx,0xc0029c70
c0007f78:	c1 eb 11             	shr    ebx,0x11
c0007f7b:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f83:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f86:	66 85 c0             	test   ax,ax
c0007f89:	74 11                	je     c0007f9c <f_mkfs+0xc07>
c0007f8b:	83 c2 02             	add    edx,0x2
c0007f8e:	39 d8                	cmp    eax,ebx
c0007f90:	77 0a                	ja     c0007f9c <f_mkfs+0xc07>
c0007f92:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f96:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f9a:	eb e7                	jmp    c0007f83 <f_mkfs+0xbee>
c0007f9c:	31 db                	xor    ebx,ebx
c0007f9e:	31 d2                	xor    edx,edx
c0007fa0:	89 c8                	mov    eax,ecx
c0007fa2:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fa6:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fad:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fb2:	c1 ea 09             	shr    edx,0x9
c0007fb5:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fba:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fbe:	0f 87 96 00 00 00    	ja     c000805a <f_mkfs+0xcc5>
c0007fc4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fc8:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fd4:	be 20 00 00 00       	mov    esi,0x20
c0007fd9:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fde:	e9 a6 fe ff ff       	jmp    c0007e89 <f_mkfs+0xaf4>
c0007fe3:	83 c2 02             	add    edx,0x2
c0007fe6:	39 c8                	cmp    eax,ecx
c0007fe8:	0f 87 60 fe ff ff    	ja     c0007e4e <f_mkfs+0xab9>
c0007fee:	01 ff                	add    edi,edi
c0007ff0:	e9 4d fe ff ff       	jmp    c0007e42 <f_mkfs+0xaad>
c0007ff5:	8d 04 40             	lea    eax,[eax+eax*2]
c0007ff8:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007ffd:	40                   	inc    eax
c0007ffe:	d1 e8                	shr    eax,1
c0008000:	83 c0 03             	add    eax,0x3
c0008003:	e9 62 fe ff ff       	jmp    c0007e6a <f_mkfs+0xad5>
c0008008:	31 d2                	xor    edx,edx
c000800a:	89 c8                	mov    eax,ecx
c000800c:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008010:	85 d2                	test   edx,edx
c0008012:	74 0c                	je     c0008020 <f_mkfs+0xc8b>
c0008014:	49                   	dec    ecx
c0008015:	46                   	inc    esi
c0008016:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c000801b:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008020:	89 c8                	mov    eax,ecx
c0008022:	31 d2                	xor    edx,edx
c0008024:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008028:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c000802c:	e9 c3 fe ff ff       	jmp    c0007ef4 <f_mkfs+0xb5f>
c0008031:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008036:	77 31                	ja     c0008069 <f_mkfs+0xcd4>
c0008038:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000803d:	75 1b                	jne    c000805a <f_mkfs+0xcc5>
c000803f:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008042:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008046:	3d 80 00 00 00       	cmp    eax,0x80
c000804b:	0f 86 d9 fd ff ff    	jbe    c0007e2a <f_mkfs+0xa95>
c0008051:	eb 07                	jmp    c000805a <f_mkfs+0xcc5>
c0008053:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008058:	76 0a                	jbe    c0008064 <f_mkfs+0xccf>
c000805a:	bb 0e 00 00 00       	mov    ebx,0xe
c000805f:	e9 ff 03 00 00       	jmp    c0008463 <f_mkfs+0x10ce>
c0008064:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008069:	31 d2                	xor    edx,edx
c000806b:	b9 00 02 00 00       	mov    ecx,0x200
c0008070:	89 e8                	mov    eax,ebp
c0008072:	e8 a2 9c ff ff       	call   c0001d19 <mem_set>
c0008077:	b9 0b 00 00 00       	mov    ecx,0xb
c000807c:	ba 82 9d 02 c0       	mov    edx,0xc0029d82
c0008081:	89 e8                	mov    eax,ebp
c0008083:	e8 7c 9c ff ff       	call   c0001d04 <mem_cpy>
c0008088:	8d 45 0b             	lea    eax,[ebp+0xb]
c000808b:	ba 00 02 00 00       	mov    edx,0x200
c0008090:	e8 62 9c ff ff       	call   c0001cf7 <st_word>
c0008095:	89 f8                	mov    eax,edi
c0008097:	0f b7 d6             	movzx  edx,si
c000809a:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000809d:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080a0:	e8 52 9c ff ff       	call   c0001cf7 <st_word>
c00080a5:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080a9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ae:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080b1:	75 08                	jne    c00080bb <f_mkfs+0xd26>
c00080b3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080bb:	8d 45 11             	lea    eax,[ebp+0x11]
c00080be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080c2:	e8 30 9c ff ff       	call   c0001cf7 <st_word>
c00080c7:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cc:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080d0:	39 d0                	cmp    eax,edx
c00080d2:	b8 00 00 00 00       	mov    eax,0x0
c00080d7:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080db:	72 0a                	jb     c00080e7 <f_mkfs+0xd52>
c00080dd:	8d 45 13             	lea    eax,[ebp+0x13]
c00080e0:	e8 12 9c ff ff       	call   c0001cf7 <st_word>
c00080e5:	eb 08                	jmp    c00080ef <f_mkfs+0xd5a>
c00080e7:	8d 45 20             	lea    eax,[ebp+0x20]
c00080ea:	e8 0c 9c ff ff       	call   c0001cfb <st_dword>
c00080ef:	8d 45 18             	lea    eax,[ebp+0x18]
c00080f2:	ba 3f 00 00 00       	mov    edx,0x3f
c00080f7:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080fb:	e8 f7 9b ff ff       	call   c0001cf7 <st_word>
c0008100:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008103:	ba ff 00 00 00       	mov    edx,0xff
c0008108:	e8 ea 9b ff ff       	call   c0001cf7 <st_word>
c000810d:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008110:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008114:	e8 e2 9b ff ff       	call   c0001cfb <st_dword>
c0008119:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000811e:	75 57                	jne    c0008177 <f_mkfs+0xde2>
c0008120:	8d 45 43             	lea    eax,[ebp+0x43]
c0008123:	ba 00 00 21 50       	mov    edx,0x50210000
c0008128:	e8 ce 9b ff ff       	call   c0001cfb <st_dword>
c000812d:	8d 45 24             	lea    eax,[ebp+0x24]
c0008130:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008134:	e8 c2 9b ff ff       	call   c0001cfb <st_dword>
c0008139:	8d 45 2c             	lea    eax,[ebp+0x2c]
c000813c:	ba 02 00 00 00       	mov    edx,0x2
c0008141:	e8 b5 9b ff ff       	call   c0001cfb <st_dword>
c0008146:	8d 45 30             	lea    eax,[ebp+0x30]
c0008149:	ba 01 00 00 00       	mov    edx,0x1
c000814e:	e8 a4 9b ff ff       	call   c0001cf7 <st_word>
c0008153:	8d 45 32             	lea    eax,[ebp+0x32]
c0008156:	ba 06 00 00 00       	mov    edx,0x6
c000815b:	e8 97 9b ff ff       	call   c0001cf7 <st_word>
c0008160:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008164:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008168:	8d 45 47             	lea    eax,[ebp+0x47]
c000816b:	b9 13 00 00 00       	mov    ecx,0x13
c0008170:	ba 8e 9d 02 c0       	mov    edx,0xc0029d8e
c0008175:	eb 2f                	jmp    c00081a6 <f_mkfs+0xe11>
c0008177:	8d 45 27             	lea    eax,[ebp+0x27]
c000817a:	ba 00 00 21 50       	mov    edx,0x50210000
c000817f:	e8 77 9b ff ff       	call   c0001cfb <st_dword>
c0008184:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008189:	8d 45 16             	lea    eax,[ebp+0x16]
c000818c:	e8 66 9b ff ff       	call   c0001cf7 <st_word>
c0008191:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008195:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008199:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000819c:	b9 13 00 00 00       	mov    ecx,0x13
c00081a1:	ba a2 9d 02 c0       	mov    edx,0xc0029da2
c00081a6:	e8 59 9b ff ff       	call   c0001d04 <mem_cpy>
c00081ab:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081b1:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081b6:	89 f0                	mov    eax,esi
c00081b8:	e8 3a 9b ff ff       	call   c0001cf7 <st_word>
c00081bd:	83 ec 0c             	sub    esp,0xc
c00081c0:	6a 01                	push   0x1
c00081c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ca:	55                   	push   ebp
c00081cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081cf:	e8 7c 9a ff ff       	call   c0001c50 <disk_write>
c00081d4:	83 c4 20             	add    esp,0x20
c00081d7:	85 c0                	test   eax,eax
c00081d9:	0f 85 67 02 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00081df:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081e4:	0f 85 b7 00 00 00    	jne    c00082a1 <f_mkfs+0xf0c>
c00081ea:	83 ec 0c             	sub    esp,0xc
c00081ed:	6a 01                	push   0x1
c00081ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081f7:	83 c0 06             	add    eax,0x6
c00081fa:	83 d2 00             	adc    edx,0x0
c00081fd:	52                   	push   edx
c00081fe:	50                   	push   eax
c00081ff:	55                   	push   ebp
c0008200:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008204:	e8 47 9a ff ff       	call   c0001c50 <disk_write>
c0008209:	83 c4 20             	add    esp,0x20
c000820c:	b9 00 02 00 00       	mov    ecx,0x200
c0008211:	31 d2                	xor    edx,edx
c0008213:	89 e8                	mov    eax,ebp
c0008215:	e8 ff 9a ff ff       	call   c0001d19 <mem_set>
c000821a:	ba 52 52 61 41       	mov    edx,0x41615252
c000821f:	89 e8                	mov    eax,ebp
c0008221:	e8 d5 9a ff ff       	call   c0001cfb <st_dword>
c0008226:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c000822c:	ba 72 72 41 61       	mov    edx,0x61417272
c0008231:	e8 c5 9a ff ff       	call   c0001cfb <st_dword>
c0008236:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008239:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000823f:	e8 b7 9a ff ff       	call   c0001cfb <st_dword>
c0008244:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c000824a:	ba 02 00 00 00       	mov    edx,0x2
c000824f:	e8 a7 9a ff ff       	call   c0001cfb <st_dword>
c0008254:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008259:	89 f0                	mov    eax,esi
c000825b:	e8 97 9a ff ff       	call   c0001cf7 <st_word>
c0008260:	83 ec 0c             	sub    esp,0xc
c0008263:	6a 01                	push   0x1
c0008265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008269:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000826d:	83 c0 07             	add    eax,0x7
c0008270:	83 d2 00             	adc    edx,0x0
c0008273:	52                   	push   edx
c0008274:	50                   	push   eax
c0008275:	55                   	push   ebp
c0008276:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000827a:	e8 d1 99 ff ff       	call   c0001c50 <disk_write>
c000827f:	83 c4 14             	add    esp,0x14
c0008282:	6a 01                	push   0x1
c0008284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008288:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000828c:	83 c0 01             	add    eax,0x1
c000828f:	83 d2 00             	adc    edx,0x0
c0008292:	52                   	push   edx
c0008293:	50                   	push   eax
c0008294:	55                   	push   ebp
c0008295:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008299:	e8 b2 99 ff ff       	call   c0001c50 <disk_write>
c000829e:	83 c4 20             	add    esp,0x20
c00082a1:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082a8:	31 d2                	xor    edx,edx
c00082aa:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082b0:	31 db                	xor    ebx,ebx
c00082b2:	89 e8                	mov    eax,ebp
c00082b4:	e8 60 9a ff ff       	call   c0001d19 <mem_set>
c00082b9:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082c5:	0f 94 c3             	sete   bl
c00082c8:	4b                   	dec    ebx
c00082c9:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082cf:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082d5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082da:	75 21                	jne    c00082fd <f_mkfs+0xf68>
c00082dc:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082e1:	89 e8                	mov    eax,ebp
c00082e3:	e8 13 9a ff ff       	call   c0001cfb <st_dword>
c00082e8:	8d 45 04             	lea    eax,[ebp+0x4]
c00082eb:	83 ca ff             	or     edx,0xffffffff
c00082ee:	e8 08 9a ff ff       	call   c0001cfb <st_dword>
c00082f3:	8d 45 08             	lea    eax,[ebp+0x8]
c00082f6:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082fb:	eb 04                	jmp    c0008301 <f_mkfs+0xf6c>
c00082fd:	89 da                	mov    edx,ebx
c00082ff:	89 e8                	mov    eax,ebp
c0008301:	e8 f5 99 ff ff       	call   c0001cfb <st_dword>
c0008306:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000830a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000830e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008312:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008316:	39 ce                	cmp    esi,ecx
c0008318:	76 02                	jbe    c000831c <f_mkfs+0xf87>
c000831a:	89 ce                	mov    esi,ecx
c000831c:	83 ec 0c             	sub    esp,0xc
c000831f:	56                   	push   esi
c0008320:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008324:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008328:	55                   	push   ebp
c0008329:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000832d:	e8 1e 99 ff ff       	call   c0001c50 <disk_write>
c0008332:	83 c4 20             	add    esp,0x20
c0008335:	85 c0                	test   eax,eax
c0008337:	0f 85 09 01 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c000833d:	31 d2                	xor    edx,edx
c000833f:	b9 00 02 00 00       	mov    ecx,0x200
c0008344:	89 e8                	mov    eax,ebp
c0008346:	e8 ce 99 ff ff       	call   c0001d19 <mem_set>
c000834b:	31 d2                	xor    edx,edx
c000834d:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008351:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008355:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008359:	75 b3                	jne    c000830e <f_mkfs+0xf79>
c000835b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000835e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008365:	40                   	inc    eax
c0008366:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000836a:	0f 87 65 ff ff ff    	ja     c00082d5 <f_mkfs+0xf40>
c0008370:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008375:	74 04                	je     c000837b <f_mkfs+0xfe6>
c0008377:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000837b:	89 fb                	mov    ebx,edi
c000837d:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008381:	76 04                	jbe    c0008387 <f_mkfs+0xff2>
c0008383:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008387:	83 ec 0c             	sub    esp,0xc
c000838a:	53                   	push   ebx
c000838b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000838f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008393:	55                   	push   ebp
c0008394:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008398:	e8 b3 98 ff ff       	call   c0001c50 <disk_write>
c000839d:	83 c4 20             	add    esp,0x20
c00083a0:	85 c0                	test   eax,eax
c00083a2:	0f 85 9e 00 00 00    	jne    c0008446 <f_mkfs+0x10b1>
c00083a8:	31 d2                	xor    edx,edx
c00083aa:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083ae:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083b2:	29 df                	sub    edi,ebx
c00083b4:	75 c5                	jne    c000837b <f_mkfs+0xfe6>
c00083b6:	b1 0c                	mov    cl,0xc
c00083b8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083bd:	74 1d                	je     c00083dc <f_mkfs+0x1047>
c00083bf:	b8 ff ff 00 00       	mov    eax,0xffff
c00083c4:	b1 06                	mov    cl,0x6
c00083c6:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083ca:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083ce:	72 0c                	jb     c00083dc <f_mkfs+0x1047>
c00083d0:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083d5:	0f 94 c1             	sete   cl
c00083d8:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083dc:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083e1:	75 4c                	jne    c000842f <f_mkfs+0x109a>
c00083e3:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083e7:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083eb:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083f2:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083f9:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008404:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000840f:	0f b6 c9             	movzx  ecx,cl
c0008412:	83 ec 0c             	sub    esp,0xc
c0008415:	55                   	push   ebp
c0008416:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000841d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008421:	e8 2f c2 ff ff       	call   c0004655 <create_partition>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 c3                	mov    ebx,eax
c000842b:	85 c0                	test   eax,eax
c000842d:	75 34                	jne    c0008463 <f_mkfs+0x10ce>
c000842f:	31 db                	xor    ebx,ebx
c0008431:	50                   	push   eax
c0008432:	6a 00                	push   0x0
c0008434:	6a 00                	push   0x0
c0008436:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000843a:	e8 27 98 ff ff       	call   c0001c66 <disk_ioctl>
c000843f:	83 c4 10             	add    esp,0x10
c0008442:	85 c0                	test   eax,eax
c0008444:	74 1d                	je     c0008463 <f_mkfs+0x10ce>
c0008446:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000844e:	75 0c                	jne    c000845c <f_mkfs+0x10c7>
c0008450:	83 ec 0c             	sub    esp,0xc
c0008453:	55                   	push   ebp
c0008454:	e8 75 00 00 00       	call   c00084ce <ff_memfree>
c0008459:	83 c4 10             	add    esp,0x10
c000845c:	bb 01 00 00 00       	mov    ebx,0x1
c0008461:	eb 48                	jmp    c00084ab <f_mkfs+0x1116>
c0008463:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000846b:	75 3e                	jne    c00084ab <f_mkfs+0x1116>
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	55                   	push   ebp
c0008471:	e8 58 00 00 00       	call   c00084ce <ff_memfree>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	eb 30                	jmp    c00084ab <f_mkfs+0x1116>
c000847b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008480:	0f 85 eb fa ff ff    	jne    c0007f71 <f_mkfs+0xbdc>
c0008486:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000848a:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008490:	0f 86 b8 f9 ff ff    	jbe    c0007e4e <f_mkfs+0xab9>
c0008496:	e9 bf fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c000849b:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a0:	0f 85 c0 fa ff ff    	jne    c0007f66 <f_mkfs+0xbd1>
c00084a6:	e9 af fb ff ff       	jmp    c000805a <f_mkfs+0xcc5>
c00084ab:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084b1:	89 d8                	mov    eax,ebx
c00084b3:	5b                   	pop    ebx
c00084b4:	5e                   	pop    esi
c00084b5:	5f                   	pop    edi
c00084b6:	5d                   	pop    ebp
c00084b7:	c3                   	ret    

c00084b8 <ff_memalloc>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 63 74 00 00       	call   c000f92a <malloc>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 c4 0c             	add    esp,0xc
c00084cd:	c3                   	ret    

c00084ce <ff_memfree>:
c00084ce:	83 ec 0c             	sub    esp,0xc
c00084d1:	83 ec 0c             	sub    esp,0xc
c00084d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d8:	e8 5d 74 00 00       	call   c000f93a <free>
c00084dd:	83 c4 10             	add    esp,0x10
c00084e0:	90                   	nop
c00084e1:	83 c4 0c             	add    esp,0xc
c00084e4:	c3                   	ret    

c00084e5 <ff_uni2oem>:
c00084e5:	83 ec 14             	sub    esp,0x14
c00084e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084ec:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084f0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f7:	c7 44 24 0c c0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0c0
c00084ff:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008504:	77 0b                	ja     c0008511 <ff_uni2oem+0x2c>
c0008506:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000850a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850f:	eb 5b                	jmp    c000856c <ff_uni2oem+0x87>
c0008511:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008519:	77 51                	ja     c000856c <ff_uni2oem+0x87>
c000851b:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008521:	75 49                	jne    c000856c <ff_uni2oem+0x87>
c0008523:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000852a:	eb 0b                	jmp    c0008537 <ff_uni2oem+0x52>
c000852c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008531:	40                   	inc    eax
c0008532:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008537:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000853d:	77 1b                	ja     c000855a <ff_uni2oem+0x75>
c000853f:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008544:	01 c0                	add    eax,eax
c0008546:	89 c2                	mov    edx,eax
c0008548:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000854c:	01 d0                	add    eax,edx
c000854e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008551:	0f b7 c0             	movzx  eax,ax
c0008554:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008558:	75 d2                	jne    c000852c <ff_uni2oem+0x47>
c000855a:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000855f:	83 e8 80             	sub    eax,0xffffff80
c0008562:	25 ff 00 00 00       	and    eax,0xff
c0008567:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000856c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008571:	83 c4 14             	add    esp,0x14
c0008574:	c3                   	ret    

c0008575 <ff_oem2uni>:
c0008575:	83 ec 18             	sub    esp,0x18
c0008578:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000857c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008580:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008585:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008589:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008590:	c7 44 24 10 c0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0c0
c0008598:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000859e:	77 0b                	ja     c00085ab <ff_oem2uni+0x36>
c00085a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a4:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085a9:	eb 2d                	jmp    c00085d8 <ff_oem2uni+0x63>
c00085ab:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085b1:	75 25                	jne    c00085d8 <ff_oem2uni+0x63>
c00085b3:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085ba:	77 1c                	ja     c00085d8 <ff_oem2uni+0x63>
c00085bc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085c1:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085c6:	01 c0                	add    eax,eax
c00085c8:	89 c2                	mov    edx,eax
c00085ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085ce:	01 d0                	add    eax,edx
c00085d0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085d3:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085d8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085dd:	83 c4 18             	add    esp,0x18
c00085e0:	c3                   	ret    

c00085e1 <ff_wtoupper>:
c00085e1:	83 ec 10             	sub    esp,0x10
c00085e4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085ec:	0f 87 3e 01 00 00    	ja     c0008730 <ff_wtoupper+0x14f>
c00085f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085f6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085fb:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008602:	77 07                	ja     c000860b <ff_wtoupper+0x2a>
c0008604:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c0008609:	eb 05                	jmp    c0008610 <ff_wtoupper+0x2f>
c000860b:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c0008610:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008618:	8d 50 02             	lea    edx,[eax+0x2]
c000861b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000861f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008622:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008627:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c000862d:	0f 84 f4 00 00 00    	je     c0008727 <ff_wtoupper+0x146>
c0008633:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008638:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c000863d:	0f 82 e4 00 00 00    	jb     c0008727 <ff_wtoupper+0x146>
c0008643:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008647:	8d 50 02             	lea    edx,[eax+0x2]
c000864a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000864e:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008651:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008656:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000865b:	66 c1 e8 08          	shr    ax,0x8
c000865f:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008664:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000866b:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008670:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008675:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000867a:	01 ca                	add    edx,ecx
c000867c:	39 d0                	cmp    eax,edx
c000867e:	0f 8d 86 00 00 00    	jge    c000870a <ff_wtoupper+0x129>
c0008684:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008689:	83 f8 08             	cmp    eax,0x8
c000868c:	0f 87 94 00 00 00    	ja     c0008726 <ff_wtoupper+0x145>
c0008692:	8b 04 85 c0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6240]
c0008699:	ff e0                	jmp    eax
c000869b:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086a0:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086a5:	29 c2                	sub    edx,eax
c00086a7:	89 d0                	mov    eax,edx
c00086a9:	01 c0                	add    eax,eax
c00086ab:	89 c2                	mov    edx,eax
c00086ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086b1:	01 d0                	add    eax,edx
c00086b3:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086b6:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086bb:	eb 4b                	jmp    c0008708 <ff_wtoupper+0x127>
c00086bd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086c2:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086c6:	83 e0 01             	and    eax,0x1
c00086c9:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086ce:	eb 38                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d0:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086d6:	eb 30                	jmp    c0008708 <ff_wtoupper+0x127>
c00086d8:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086de:	eb 28                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e0:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086e6:	eb 20                	jmp    c0008708 <ff_wtoupper+0x127>
c00086e8:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ee:	eb 18                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f0:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086f6:	eb 10                	jmp    c0008708 <ff_wtoupper+0x127>
c00086f8:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086fe:	eb 08                	jmp    c0008708 <ff_wtoupper+0x127>
c0008700:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008707:	90                   	nop
c0008708:	eb 1c                	jmp    c0008726 <ff_wtoupper+0x145>
c000870a:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008710:	0f 85 fe fe ff ff    	jne    c0008614 <ff_wtoupper+0x33>
c0008716:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c000871b:	01 c0                	add    eax,eax
c000871d:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008721:	e9 ee fe ff ff       	jmp    c0008614 <ff_wtoupper+0x33>
c0008726:	90                   	nop
c0008727:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000872c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	c3                   	ret    

c0008738 <psrc_set_converter>:
c0008738:	56                   	push   esi
c0008739:	89 d6                	mov    esi,edx
c000873b:	53                   	push   ebx
c000873c:	89 c3                	mov    ebx,eax
c000873e:	83 ec 0c             	sub    esp,0xc
c0008741:	52                   	push   edx
c0008742:	50                   	push   eax
c0008743:	e8 6f 55 00 00       	call   c000dcb7 <sinc_set_converter>
c0008748:	83 c4 10             	add    esp,0x10
c000874b:	85 c0                	test   eax,eax
c000874d:	74 25                	je     c0008774 <psrc_set_converter+0x3c>
c000874f:	50                   	push   eax
c0008750:	50                   	push   eax
c0008751:	56                   	push   esi
c0008752:	53                   	push   ebx
c0008753:	e8 17 5d 00 00       	call   c000e46f <zoh_set_converter>
c0008758:	83 c4 10             	add    esp,0x10
c000875b:	85 c0                	test   eax,eax
c000875d:	74 15                	je     c0008774 <psrc_set_converter+0x3c>
c000875f:	51                   	push   ecx
c0008760:	51                   	push   ecx
c0008761:	56                   	push   esi
c0008762:	53                   	push   ebx
c0008763:	e8 0f 11 00 00       	call   c0009877 <linear_set_converter>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	ba 0a 00 00 00       	mov    edx,0xa
c0008770:	85 c0                	test   eax,eax
c0008772:	75 02                	jne    c0008776 <psrc_set_converter+0x3e>
c0008774:	31 d2                	xor    edx,edx
c0008776:	89 d0                	mov    eax,edx
c0008778:	5a                   	pop    edx
c0008779:	5b                   	pop    ebx
c000877a:	5e                   	pop    esi
c000877b:	c3                   	ret    

c000877c <src_delete>:
c000877c:	53                   	push   ebx
c000877d:	83 ec 08             	sub    esp,0x8
c0008780:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 29                	je     c00087b1 <src_delete+0x35>
c0008788:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000878b:	85 c0                	test   eax,eax
c000878d:	74 0c                	je     c000879b <src_delete+0x1f>
c000878f:	83 ec 0c             	sub    esp,0xc
c0008792:	50                   	push   eax
c0008793:	e8 a2 71 00 00       	call   c000f93a <free>
c0008798:	83 c4 10             	add    esp,0x10
c000879b:	50                   	push   eax
c000879c:	6a 3c                	push   0x3c
c000879e:	6a 00                	push   0x0
c00087a0:	53                   	push   ebx
c00087a1:	e8 f6 7f ff ff       	call   c000079c <memset>
c00087a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00087a9:	e8 8c 71 00 00       	call   c000f93a <free>
c00087ae:	83 c4 10             	add    esp,0x10
c00087b1:	31 c0                	xor    eax,eax
c00087b3:	83 c4 08             	add    esp,0x8
c00087b6:	5b                   	pop    ebx
c00087b7:	c3                   	ret    

c00087b8 <src_process>:
c00087b8:	55                   	push   ebp
c00087b9:	57                   	push   edi
c00087ba:	56                   	push   esi
c00087bb:	53                   	push   ebx
c00087bc:	83 ec 1c             	sub    esp,0x1c
c00087bf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00087c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087c7:	85 ed                	test   ebp,ebp
c00087c9:	0f 84 6f 01 00 00    	je     c000893e <src_process+0x186>
c00087cf:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087d3:	0f 84 6c 01 00 00    	je     c0008945 <src_process+0x18d>
c00087d9:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087dd:	0f 84 62 01 00 00    	je     c0008945 <src_process+0x18d>
c00087e3:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087ea:	0f 85 5c 01 00 00    	jne    c000894c <src_process+0x194>
c00087f0:	85 db                	test   ebx,ebx
c00087f2:	0f 84 5b 01 00 00    	je     c0008953 <src_process+0x19b>
c00087f8:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087fa:	85 f6                	test   esi,esi
c00087fc:	0f 84 58 01 00 00    	je     c000895a <src_process+0x1a2>
c0008802:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008805:	85 ff                	test   edi,edi
c0008807:	0f 84 4d 01 00 00    	je     c000895a <src_process+0x1a2>
c000880d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008810:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0008813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000881b:	68 00 00 70 3f       	push   0x3f700000
c0008820:	6a 00                	push   0x0
c0008822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000882a:	e8 58 04 02 00       	call   c0028c87 <__ltdf2>
c000882f:	83 c4 10             	add    esp,0x10
c0008832:	85 c0                	test   eax,eax
c0008834:	0f 88 27 01 00 00    	js     c0008961 <src_process+0x1a9>
c000883a:	68 00 00 70 40       	push   0x40700000
c000883f:	6a 00                	push   0x0
c0008841:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008845:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008849:	e8 1b 04 02 00       	call   c0028c69 <__gtdf2>
c000884e:	83 c4 10             	add    esp,0x10
c0008851:	85 c0                	test   eax,eax
c0008853:	0f 8f 08 01 00 00    	jg     c0008961 <src_process+0x1a9>
c0008859:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000885d:	79 07                	jns    c0008866 <src_process+0xae>
c000885f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008866:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008869:	85 c0                	test   eax,eax
c000886b:	79 50                	jns    c00088bd <src_process+0x105>
c000886d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008874:	39 fe                	cmp    esi,edi
c0008876:	72 37                	jb     c00088af <src_process+0xf7>
c0008878:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000887f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008886:	68 00 00 70 3f       	push   0x3f700000
c000888b:	6a 00                	push   0x0
c000888d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008890:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008893:	e8 ef 03 02 00       	call   c0028c87 <__ltdf2>
c0008898:	83 c4 10             	add    esp,0x10
c000889b:	85 c0                	test   eax,eax
c000889d:	79 37                	jns    c00088d6 <src_process+0x11e>
c000889f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00088a3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00088a7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00088aa:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00088ad:	eb 27                	jmp    c00088d6 <src_process+0x11e>
c00088af:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00088b2:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088b6:	8d 04 86             	lea    eax,[esi+eax*4]
c00088b9:	39 c7                	cmp    edi,eax
c00088bb:	eb 0d                	jmp    c00088ca <src_process+0x112>
c00088bd:	39 fe                	cmp    esi,edi
c00088bf:	72 ee                	jb     c00088af <src_process+0xf7>
c00088c1:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088c5:	8d 04 87             	lea    eax,[edi+eax*4]
c00088c8:	39 c6                	cmp    esi,eax
c00088ca:	73 ac                	jae    c0008878 <src_process+0xc0>
c00088cc:	b8 10 00 00 00       	mov    eax,0x10
c00088d1:	e9 90 00 00 00       	jmp    c0008966 <src_process+0x1ae>
c00088d6:	83 ec 10             	sub    esp,0x10
c00088d9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088dc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088df:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088e2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088e5:	e8 a2 fa 01 00       	call   c002838c <__subdf3>
c00088ea:	83 c4 18             	add    esp,0x18
c00088ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088f5:	52                   	push   edx
c00088f6:	50                   	push   eax
c00088f7:	e8 24 05 02 00       	call   c0028e20 <fabs>
c00088fc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008900:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008904:	83 c4 10             	add    esp,0x10
c0008907:	68 af 03 d2 3c       	push   0x3cd203af
c000890c:	68 16 56 e7 9e       	push   0x9ee75616
c0008911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008919:	e8 69 03 02 00       	call   c0028c87 <__ltdf2>
c000891e:	83 c4 10             	add    esp,0x10
c0008921:	85 c0                	test   eax,eax
c0008923:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008927:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c000892b:	79 05                	jns    c0008932 <src_process+0x17a>
c000892d:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c0008930:	eb 03                	jmp    c0008935 <src_process+0x17d>
c0008932:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008935:	83 c4 1c             	add    esp,0x1c
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	5f                   	pop    edi
c000893b:	5d                   	pop    ebp
c000893c:	ff e0                	jmp    eax
c000893e:	b8 02 00 00 00       	mov    eax,0x2
c0008943:	eb 21                	jmp    c0008966 <src_process+0x1ae>
c0008945:	b8 07 00 00 00       	mov    eax,0x7
c000894a:	eb 1a                	jmp    c0008966 <src_process+0x1ae>
c000894c:	b8 12 00 00 00       	mov    eax,0x12
c0008951:	eb 13                	jmp    c0008966 <src_process+0x1ae>
c0008953:	b8 03 00 00 00       	mov    eax,0x3
c0008958:	eb 0c                	jmp    c0008966 <src_process+0x1ae>
c000895a:	b8 04 00 00 00       	mov    eax,0x4
c000895f:	eb 05                	jmp    c0008966 <src_process+0x1ae>
c0008961:	b8 06 00 00 00       	mov    eax,0x6
c0008966:	83 c4 1c             	add    esp,0x1c
c0008969:	5b                   	pop    ebx
c000896a:	5e                   	pop    esi
c000896b:	5f                   	pop    edi
c000896c:	5d                   	pop    ebp
c000896d:	c3                   	ret    

c000896e <src_callback_read>:
c000896e:	55                   	push   ebp
c000896f:	57                   	push   edi
c0008970:	56                   	push   esi
c0008971:	53                   	push   ebx
c0008972:	83 ec 3c             	sub    esp,0x3c
c0008975:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008979:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000897d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008981:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008985:	85 ed                	test   ebp,ebp
c0008987:	0f 8e 52 01 00 00    	jle    c0008adf <src_callback_read+0x171>
c000898d:	85 db                	test   ebx,ebx
c000898f:	0f 84 4a 01 00 00    	je     c0008adf <src_callback_read+0x171>
c0008995:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000899c:	74 0c                	je     c00089aa <src_callback_read+0x3c>
c000899e:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c00089a5:	e9 35 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089aa:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c00089ae:	75 0c                	jne    c00089bc <src_callback_read+0x4e>
c00089b0:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c00089b7:	e9 23 01 00 00       	jmp    c0008adf <src_callback_read+0x171>
c00089bc:	51                   	push   ecx
c00089bd:	6a 24                	push   0x24
c00089bf:	6a 00                	push   0x0
c00089c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089c5:	50                   	push   eax
c00089c6:	e8 d1 7d ff ff       	call   c000079c <memset>
c00089cb:	83 c4 10             	add    esp,0x10
c00089ce:	68 00 00 70 3f       	push   0x3f700000
c00089d3:	6a 00                	push   0x0
c00089d5:	57                   	push   edi
c00089d6:	56                   	push   esi
c00089d7:	e8 ab 02 02 00       	call   c0028c87 <__ltdf2>
c00089dc:	83 c4 10             	add    esp,0x10
c00089df:	85 c0                	test   eax,eax
c00089e1:	78 3e                	js     c0008a21 <src_callback_read+0xb3>
c00089e3:	68 00 00 70 40       	push   0x40700000
c00089e8:	6a 00                	push   0x0
c00089ea:	57                   	push   edi
c00089eb:	56                   	push   esi
c00089ec:	e8 78 02 02 00       	call   c0028c69 <__gtdf2>
c00089f1:	83 c4 10             	add    esp,0x10
c00089f4:	85 c0                	test   eax,eax
c00089f6:	7f 29                	jg     c0008a21 <src_callback_read+0xb3>
c00089f8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089fc:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0008a00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a04:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008a08:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008a0b:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0008a0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008a13:	31 f6                	xor    esi,esi
c0008a15:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008a18:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008a1c:	e9 97 00 00 00       	jmp    c0008ab8 <src_callback_read+0x14a>
c0008a21:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a28:	e9 b2 00 00 00       	jmp    c0008adf <src_callback_read+0x171>
c0008a2d:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a31:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a35:	52                   	push   edx
c0008a36:	52                   	push   edx
c0008a37:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a3b:	50                   	push   eax
c0008a3c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a3f:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a42:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a46:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a4a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a4e:	83 c4 10             	add    esp,0x10
c0008a51:	85 c0                	test   eax,eax
c0008a53:	75 08                	jne    c0008a5d <src_callback_read+0xef>
c0008a55:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a5d:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a64:	50                   	push   eax
c0008a65:	50                   	push   eax
c0008a66:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a6a:	50                   	push   eax
c0008a6b:	53                   	push   ebx
c0008a6c:	e8 47 fd ff ff       	call   c00087b8 <src_process>
c0008a71:	83 c4 10             	add    esp,0x10
c0008a74:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a7b:	85 c0                	test   eax,eax
c0008a7d:	75 49                	jne    c0008ac8 <src_callback_read+0x15a>
c0008a7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a86:	89 f9                	mov    ecx,edi
c0008a88:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a8c:	0f af ca             	imul   ecx,edx
c0008a8f:	c1 e1 02             	shl    ecx,0x2
c0008a92:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a96:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a9a:	0f af d1             	imul   edx,ecx
c0008a9d:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008aa1:	c1 e2 02             	shl    edx,0x2
c0008aa4:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008aa8:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008aab:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008ab0:	74 12                	je     c0008ac4 <src_callback_read+0x156>
c0008ab2:	39 d5                	cmp    ebp,edx
c0008ab4:	7e 14                	jle    c0008aca <src_callback_read+0x15c>
c0008ab6:	89 d6                	mov    esi,edx
c0008ab8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008abd:	75 9e                	jne    c0008a5d <src_callback_read+0xef>
c0008abf:	e9 69 ff ff ff       	jmp    c0008a2d <src_callback_read+0xbf>
c0008ac4:	85 c9                	test   ecx,ecx
c0008ac6:	75 ea                	jne    c0008ab2 <src_callback_read+0x144>
c0008ac8:	89 f2                	mov    edx,esi
c0008aca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008ace:	85 c0                	test   eax,eax
c0008ad0:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008ad3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad7:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ada:	74 05                	je     c0008ae1 <src_callback_read+0x173>
c0008adc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008adf:	31 d2                	xor    edx,edx
c0008ae1:	83 c4 3c             	add    esp,0x3c
c0008ae4:	89 d0                	mov    eax,edx
c0008ae6:	5b                   	pop    ebx
c0008ae7:	5e                   	pop    esi
c0008ae8:	5f                   	pop    edi
c0008ae9:	5d                   	pop    ebp
c0008aea:	c3                   	ret    

c0008aeb <src_set_ratio>:
c0008aeb:	57                   	push   edi
c0008aec:	ba 02 00 00 00       	mov    edx,0x2
c0008af1:	56                   	push   esi
c0008af2:	53                   	push   ebx
c0008af3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008af7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008afb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aff:	85 db                	test   ebx,ebx
c0008b01:	74 4c                	je     c0008b4f <src_set_ratio+0x64>
c0008b03:	ba 07 00 00 00       	mov    edx,0x7
c0008b08:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008b0c:	74 41                	je     c0008b4f <src_set_ratio+0x64>
c0008b0e:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008b12:	74 3b                	je     c0008b4f <src_set_ratio+0x64>
c0008b14:	68 00 00 70 3f       	push   0x3f700000
c0008b19:	6a 00                	push   0x0
c0008b1b:	57                   	push   edi
c0008b1c:	56                   	push   esi
c0008b1d:	e8 65 01 02 00       	call   c0028c87 <__ltdf2>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba 06 00 00 00       	mov    edx,0x6
c0008b2a:	85 c0                	test   eax,eax
c0008b2c:	78 21                	js     c0008b4f <src_set_ratio+0x64>
c0008b2e:	68 00 00 70 40       	push   0x40700000
c0008b33:	6a 00                	push   0x0
c0008b35:	57                   	push   edi
c0008b36:	56                   	push   esi
c0008b37:	e8 2d 01 02 00       	call   c0028c69 <__gtdf2>
c0008b3c:	83 c4 10             	add    esp,0x10
c0008b3f:	ba 06 00 00 00       	mov    edx,0x6
c0008b44:	85 c0                	test   eax,eax
c0008b46:	7f 07                	jg     c0008b4f <src_set_ratio+0x64>
c0008b48:	89 33                	mov    DWORD PTR [ebx],esi
c0008b4a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b4d:	31 d2                	xor    edx,edx
c0008b4f:	5b                   	pop    ebx
c0008b50:	89 d0                	mov    eax,edx
c0008b52:	5e                   	pop    esi
c0008b53:	5f                   	pop    edi
c0008b54:	c3                   	ret    

c0008b55 <src_get_channels>:
c0008b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b59:	b8 02 00 00 00       	mov    eax,0x2
c0008b5e:	85 d2                	test   edx,edx
c0008b60:	74 14                	je     c0008b76 <src_get_channels+0x21>
c0008b62:	b8 07 00 00 00       	mov    eax,0x7
c0008b67:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b6b:	74 09                	je     c0008b76 <src_get_channels+0x21>
c0008b6d:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b71:	74 03                	je     c0008b76 <src_get_channels+0x21>
c0008b73:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b76:	c3                   	ret    

c0008b77 <src_reset>:
c0008b77:	53                   	push   ebx
c0008b78:	b8 02 00 00 00       	mov    eax,0x2
c0008b7d:	83 ec 08             	sub    esp,0x8
c0008b80:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b84:	85 db                	test   ebx,ebx
c0008b86:	74 36                	je     c0008bbe <src_reset+0x47>
c0008b88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b8b:	85 c0                	test   eax,eax
c0008b8d:	74 09                	je     c0008b98 <src_reset+0x21>
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	53                   	push   ebx
c0008b93:	ff d0                	call   eax
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	31 d2                	xor    edx,edx
c0008b9c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b9f:	89 03                	mov    DWORD PTR [ebx],eax
c0008ba1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ba4:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008ba7:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008bae:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008bb5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008bbc:	31 c0                	xor    eax,eax
c0008bbe:	83 c4 08             	add    esp,0x8
c0008bc1:	5b                   	pop    ebx
c0008bc2:	c3                   	ret    

c0008bc3 <src_new>:
c0008bc3:	57                   	push   edi
c0008bc4:	56                   	push   esi
c0008bc5:	53                   	push   ebx
c0008bc6:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008bca:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008bce:	85 f6                	test   esi,esi
c0008bd0:	74 73                	je     c0008c45 <src_new+0x82>
c0008bd2:	85 ff                	test   edi,edi
c0008bd4:	7f 08                	jg     c0008bde <src_new+0x1b>
c0008bd6:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bdc:	eb 1e                	jmp    c0008bfc <src_new+0x39>
c0008bde:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008be4:	50                   	push   eax
c0008be5:	50                   	push   eax
c0008be6:	6a 3c                	push   0x3c
c0008be8:	6a 01                	push   0x1
c0008bea:	e8 6b 6d 00 00       	call   c000f95a <calloc>
c0008bef:	83 c4 10             	add    esp,0x10
c0008bf2:	89 c3                	mov    ebx,eax
c0008bf4:	85 c0                	test   eax,eax
c0008bf6:	75 10                	jne    c0008c08 <src_new+0x45>
c0008bf8:	85 f6                	test   esi,esi
c0008bfa:	75 04                	jne    c0008c00 <src_new+0x3d>
c0008bfc:	31 db                	xor    ebx,ebx
c0008bfe:	eb 4b                	jmp    c0008c4b <src_new+0x88>
c0008c00:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008c06:	eb 43                	jmp    c0008c4b <src_new+0x88>
c0008c08:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008c0b:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008c16:	e8 1d fb ff ff       	call   c0008738 <psrc_set_converter>
c0008c1b:	85 c0                	test   eax,eax
c0008c1d:	74 18                	je     c0008c37 <src_new+0x74>
c0008c1f:	85 f6                	test   esi,esi
c0008c21:	74 06                	je     c0008c29 <src_new+0x66>
c0008c23:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c29:	83 ec 0c             	sub    esp,0xc
c0008c2c:	53                   	push   ebx
c0008c2d:	31 db                	xor    ebx,ebx
c0008c2f:	e8 06 6d 00 00       	call   c000f93a <free>
c0008c34:	83 c4 10             	add    esp,0x10
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	53                   	push   ebx
c0008c3b:	e8 37 ff ff ff       	call   c0008b77 <src_reset>
c0008c40:	83 c4 10             	add    esp,0x10
c0008c43:	eb 06                	jmp    c0008c4b <src_new+0x88>
c0008c45:	85 ff                	test   edi,edi
c0008c47:	7f 9b                	jg     c0008be4 <src_new+0x21>
c0008c49:	eb b1                	jmp    c0008bfc <src_new+0x39>
c0008c4b:	89 d8                	mov    eax,ebx
c0008c4d:	5b                   	pop    ebx
c0008c4e:	5e                   	pop    esi
c0008c4f:	5f                   	pop    edi
c0008c50:	c3                   	ret    

c0008c51 <src_callback_new>:
c0008c51:	56                   	push   esi
c0008c52:	53                   	push   ebx
c0008c53:	53                   	push   ebx
c0008c54:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c5c:	85 f6                	test   esi,esi
c0008c5e:	75 0e                	jne    c0008c6e <src_callback_new+0x1d>
c0008c60:	31 db                	xor    ebx,ebx
c0008c62:	85 c0                	test   eax,eax
c0008c64:	74 47                	je     c0008cad <src_callback_new+0x5c>
c0008c66:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c6c:	eb 3f                	jmp    c0008cad <src_callback_new+0x5c>
c0008c6e:	85 c0                	test   eax,eax
c0008c70:	74 06                	je     c0008c78 <src_callback_new+0x27>
c0008c72:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c78:	51                   	push   ecx
c0008c79:	50                   	push   eax
c0008c7a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c7e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c82:	e8 3c ff ff ff       	call   c0008bc3 <src_new>
c0008c87:	83 c4 10             	add    esp,0x10
c0008c8a:	89 c3                	mov    ebx,eax
c0008c8c:	85 c0                	test   eax,eax
c0008c8e:	74 1d                	je     c0008cad <src_callback_new+0x5c>
c0008c90:	83 ec 0c             	sub    esp,0xc
c0008c93:	50                   	push   eax
c0008c94:	e8 de fe ff ff       	call   c0008b77 <src_reset>
c0008c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c9d:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008ca4:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008ca7:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	89 d8                	mov    eax,ebx
c0008caf:	5a                   	pop    edx
c0008cb0:	5b                   	pop    ebx
c0008cb1:	5e                   	pop    esi
c0008cb2:	c3                   	ret    

c0008cb3 <src_get_name>:
c0008cb3:	53                   	push   ebx
c0008cb4:	83 ec 14             	sub    esp,0x14
c0008cb7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cbb:	53                   	push   ebx
c0008cbc:	e8 d0 4f 00 00       	call   c000dc91 <sinc_get_name>
c0008cc1:	83 c4 10             	add    esp,0x10
c0008cc4:	85 c0                	test   eax,eax
c0008cc6:	75 1d                	jne    c0008ce5 <src_get_name+0x32>
c0008cc8:	83 ec 0c             	sub    esp,0xc
c0008ccb:	53                   	push   ebx
c0008ccc:	e8 80 57 00 00       	call   c000e451 <zoh_get_name>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	85 c0                	test   eax,eax
c0008cd6:	75 0d                	jne    c0008ce5 <src_get_name+0x32>
c0008cd8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cdc:	83 c4 08             	add    esp,0x8
c0008cdf:	5b                   	pop    ebx
c0008ce0:	e9 74 0b 00 00       	jmp    c0009859 <linear_get_name>
c0008ce5:	83 c4 08             	add    esp,0x8
c0008ce8:	5b                   	pop    ebx
c0008ce9:	c3                   	ret    

c0008cea <src_get_description>:
c0008cea:	53                   	push   ebx
c0008ceb:	83 ec 14             	sub    esp,0x14
c0008cee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cf2:	53                   	push   ebx
c0008cf3:	e8 ac 4f 00 00       	call   c000dca4 <sinc_get_description>
c0008cf8:	83 c4 10             	add    esp,0x10
c0008cfb:	85 c0                	test   eax,eax
c0008cfd:	75 1d                	jne    c0008d1c <src_get_description+0x32>
c0008cff:	83 ec 0c             	sub    esp,0xc
c0008d02:	53                   	push   ebx
c0008d03:	e8 58 57 00 00       	call   c000e460 <zoh_get_description>
c0008d08:	83 c4 10             	add    esp,0x10
c0008d0b:	85 c0                	test   eax,eax
c0008d0d:	75 0d                	jne    c0008d1c <src_get_description+0x32>
c0008d0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008d13:	83 c4 08             	add    esp,0x8
c0008d16:	5b                   	pop    ebx
c0008d17:	e9 4c 0b 00 00       	jmp    c0009868 <linear_get_description>
c0008d1c:	83 c4 08             	add    esp,0x8
c0008d1f:	5b                   	pop    ebx
c0008d20:	c3                   	ret    

c0008d21 <src_get_version>:
c0008d21:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0008d26:	c3                   	ret    

c0008d27 <src_is_valid_ratio>:
c0008d27:	83 ec 1c             	sub    esp,0x1c
c0008d2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d32:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d3a:	68 00 00 70 3f       	push   0x3f700000
c0008d3f:	6a 00                	push   0x0
c0008d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d49:	e8 39 ff 01 00       	call   c0028c87 <__ltdf2>
c0008d4e:	83 c4 10             	add    esp,0x10
c0008d51:	31 d2                	xor    edx,edx
c0008d53:	85 c0                	test   eax,eax
c0008d55:	78 1e                	js     c0008d75 <src_is_valid_ratio+0x4e>
c0008d57:	68 00 00 70 40       	push   0x40700000
c0008d5c:	6a 00                	push   0x0
c0008d5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d66:	e8 fe fe 01 00       	call   c0028c69 <__gtdf2>
c0008d6b:	31 d2                	xor    edx,edx
c0008d6d:	83 c4 10             	add    esp,0x10
c0008d70:	85 c0                	test   eax,eax
c0008d72:	0f 9e c2             	setle  dl
c0008d75:	89 d0                	mov    eax,edx
c0008d77:	83 c4 1c             	add    esp,0x1c
c0008d7a:	c3                   	ret    

c0008d7b <src_error>:
c0008d7b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d7f:	31 c0                	xor    eax,eax
c0008d81:	85 d2                	test   edx,edx
c0008d83:	74 03                	je     c0008d88 <src_error+0xd>
c0008d85:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d88:	c3                   	ret    

c0008d89 <src_strerror>:
c0008d89:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d8d:	31 c0                	xor    eax,eax
c0008d8f:	83 fa 17             	cmp    edx,0x17
c0008d92:	77 07                	ja     c0008d9b <src_strerror+0x12>
c0008d94:	8b 04 95 20 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59e0]
c0008d9b:	c3                   	ret    

c0008d9c <src_simple>:
c0008d9c:	56                   	push   esi
c0008d9d:	53                   	push   ebx
c0008d9e:	83 ec 18             	sub    esp,0x18
c0008da1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008da5:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008da9:	50                   	push   eax
c0008daa:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008dae:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008db2:	e8 0c fe ff ff       	call   c0008bc3 <src_new>
c0008db7:	83 c4 10             	add    esp,0x10
c0008dba:	85 c0                	test   eax,eax
c0008dbc:	75 06                	jne    c0008dc4 <src_simple+0x28>
c0008dbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008dc2:	eb 25                	jmp    c0008de9 <src_simple+0x4d>
c0008dc4:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008dcb:	89 c3                	mov    ebx,eax
c0008dcd:	50                   	push   eax
c0008dce:	50                   	push   eax
c0008dcf:	56                   	push   esi
c0008dd0:	53                   	push   ebx
c0008dd1:	e8 e2 f9 ff ff       	call   c00087b8 <src_process>
c0008dd6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008dd9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ddd:	e8 9a f9 ff ff       	call   c000877c <src_delete>
c0008de2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008de6:	83 c4 10             	add    esp,0x10
c0008de9:	83 c4 14             	add    esp,0x14
c0008dec:	5b                   	pop    ebx
c0008ded:	5e                   	pop    esi
c0008dee:	c3                   	ret    

c0008def <src_short_to_float_array>:
c0008def:	53                   	push   ebx
c0008df0:	83 ec 18             	sub    esp,0x18
c0008df3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008df7:	85 db                	test   ebx,ebx
c0008df9:	74 54                	je     c0008e4f <src_short_to_float_array+0x60>
c0008dfb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dff:	4b                   	dec    ebx
c0008e00:	83 ec 0c             	sub    esp,0xc
c0008e03:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008e07:	50                   	push   eax
c0008e08:	e8 0e fc 01 00       	call   c0028a1b <__floatsidf>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e18:	68 00 00 00 3f       	push   0x3f000000
c0008e1d:	6a 00                	push   0x0
c0008e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e27:	e8 8c f5 01 00       	call   c00283b8 <__muldf3>
c0008e2c:	59                   	pop    ecx
c0008e2d:	59                   	pop    ecx
c0008e2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e32:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e3e:	e8 48 fe 01 00       	call   c0028c8b <__truncdfsf2>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e4a:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e4d:	eb a8                	jmp    c0008df7 <src_short_to_float_array+0x8>
c0008e4f:	83 c4 18             	add    esp,0x18
c0008e52:	5b                   	pop    ebx
c0008e53:	c3                   	ret    

c0008e54 <src_float_to_short_array>:
c0008e54:	56                   	push   esi
c0008e55:	53                   	push   ebx
c0008e56:	83 ec 14             	sub    esp,0x14
c0008e59:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e5d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e61:	85 db                	test   ebx,ebx
c0008e63:	0f 84 a4 00 00 00    	je     c0008f0d <src_float_to_short_array+0xb9>
c0008e69:	83 ec 0c             	sub    esp,0xc
c0008e6c:	4b                   	dec    ebx
c0008e6d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e71:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e74:	e8 36 ff 01 00       	call   c0028daf <__extendsfdf2>
c0008e79:	83 c4 10             	add    esp,0x10
c0008e7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e84:	68 00 00 e0 41       	push   0x41e00000
c0008e89:	6a 00                	push   0x0
c0008e8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e93:	e8 20 f5 01 00       	call   c00283b8 <__muldf3>
c0008e98:	83 c4 10             	add    esp,0x10
c0008e9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ea3:	68 ff ff df 41       	push   0x41dfffff
c0008ea8:	68 00 00 c0 ff       	push   0xffc00000
c0008ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb5:	e8 cb fd 01 00       	call   c0028c85 <__gedf2>
c0008eba:	83 c4 10             	add    esp,0x10
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	78 08                	js     c0008ec9 <src_float_to_short_array+0x75>
c0008ec1:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ec7:	eb 98                	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008ec9:	68 00 00 e0 c1       	push   0xc1e00000
c0008ece:	6a 00                	push   0x0
c0008ed0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed8:	e8 ac fd 01 00       	call   c0028c89 <__ledf2>
c0008edd:	83 c4 10             	add    esp,0x10
c0008ee0:	85 c0                	test   eax,eax
c0008ee2:	7f 0b                	jg     c0008eef <src_float_to_short_array+0x9b>
c0008ee4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008eea:	e9 72 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008eef:	50                   	push   eax
c0008ef0:	50                   	push   eax
c0008ef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ef9:	e8 42 ff 01 00       	call   c0028e40 <lrint>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	c1 f8 10             	sar    eax,0x10
c0008f04:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008f08:	e9 54 ff ff ff       	jmp    c0008e61 <src_float_to_short_array+0xd>
c0008f0d:	83 c4 14             	add    esp,0x14
c0008f10:	5b                   	pop    ebx
c0008f11:	5e                   	pop    esi
c0008f12:	c3                   	ret    

c0008f13 <src_int_to_float_array>:
c0008f13:	53                   	push   ebx
c0008f14:	83 ec 18             	sub    esp,0x18
c0008f17:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f1b:	85 db                	test   ebx,ebx
c0008f1d:	74 52                	je     c0008f71 <src_int_to_float_array+0x5e>
c0008f1f:	83 ec 0c             	sub    esp,0xc
c0008f22:	4b                   	dec    ebx
c0008f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f27:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f2a:	e8 ec fa 01 00       	call   c0028a1b <__floatsidf>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f3a:	68 00 00 00 3e       	push   0x3e000000
c0008f3f:	6a 00                	push   0x0
c0008f41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f49:	e8 6a f4 01 00       	call   c00283b8 <__muldf3>
c0008f4e:	59                   	pop    ecx
c0008f4f:	59                   	pop    ecx
c0008f50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f54:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f60:	e8 26 fd 01 00       	call   c0028c8b <__truncdfsf2>
c0008f65:	83 c4 10             	add    esp,0x10
c0008f68:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f6c:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f6f:	eb aa                	jmp    c0008f1b <src_int_to_float_array+0x8>
c0008f71:	83 c4 18             	add    esp,0x18
c0008f74:	5b                   	pop    ebx
c0008f75:	c3                   	ret    

c0008f76 <src_float_to_int_array>:
c0008f76:	56                   	push   esi
c0008f77:	53                   	push   ebx
c0008f78:	83 ec 14             	sub    esp,0x14
c0008f7b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f83:	85 db                	test   ebx,ebx
c0008f85:	0f 84 a2 00 00 00    	je     c000902d <src_float_to_int_array+0xb7>
c0008f8b:	83 ec 0c             	sub    esp,0xc
c0008f8e:	4b                   	dec    ebx
c0008f8f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f93:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f96:	e8 14 fe 01 00       	call   c0028daf <__extendsfdf2>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fa2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa6:	68 00 00 e0 41       	push   0x41e00000
c0008fab:	6a 00                	push   0x0
c0008fad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb5:	e8 fe f3 01 00       	call   c00283b8 <__muldf3>
c0008fba:	83 c4 10             	add    esp,0x10
c0008fbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008fc1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fc5:	68 ff ff df 41       	push   0x41dfffff
c0008fca:	68 00 00 c0 ff       	push   0xffc00000
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 a9 fc 01 00       	call   c0028c85 <__gedf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	78 09                	js     c0008fec <src_float_to_int_array+0x76>
c0008fe3:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fea:	eb 97                	jmp    c0008f83 <src_float_to_int_array+0xd>
c0008fec:	68 00 00 e0 c1       	push   0xc1e00000
c0008ff1:	6a 00                	push   0x0
c0008ff3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ffb:	e8 89 fc 01 00       	call   c0028c89 <__ledf2>
c0009000:	83 c4 10             	add    esp,0x10
c0009003:	85 c0                	test   eax,eax
c0009005:	7f 0c                	jg     c0009013 <src_float_to_int_array+0x9d>
c0009007:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c000900e:	e9 70 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c0009013:	50                   	push   eax
c0009014:	50                   	push   eax
c0009015:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000901d:	e8 1e fe 01 00       	call   c0028e40 <lrint>
c0009022:	83 c4 10             	add    esp,0x10
c0009025:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009028:	e9 56 ff ff ff       	jmp    c0008f83 <src_float_to_int_array+0xd>
c000902d:	83 c4 14             	add    esp,0x14
c0009030:	5b                   	pop    ebx
c0009031:	5e                   	pop    esi
c0009032:	c3                   	ret    

c0009033 <linear_vari_process>:
c0009033:	55                   	push   ebp
c0009034:	31 d2                	xor    edx,edx
c0009036:	57                   	push   edi
c0009037:	56                   	push   esi
c0009038:	53                   	push   ebx
c0009039:	83 ec 3c             	sub    esp,0x3c
c000903c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0009040:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009044:	0f 8e d3 07 00 00    	jle    c000981d <linear_vari_process+0x7ea>
c000904a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000904e:	ba 05 00 00 00       	mov    edx,0x5
c0009053:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009056:	85 db                	test   ebx,ebx
c0009058:	0f 84 bf 07 00 00    	je     c000981d <linear_vari_process+0x7ea>
c000905e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009061:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009065:	74 19                	je     c0009080 <linear_vari_process+0x4d>
c0009067:	31 d2                	xor    edx,edx
c0009069:	39 c2                	cmp    edx,eax
c000906b:	7d 0c                	jge    c0009079 <linear_vari_process+0x46>
c000906d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000906f:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009072:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009076:	42                   	inc    edx
c0009077:	eb f0                	jmp    c0009069 <linear_vari_process+0x36>
c0009079:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009080:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009083:	0f af d0             	imul   edx,eax
c0009086:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009089:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000908d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009094:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009097:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000909e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090a2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00090a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00090a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00090ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00090af:	68 00 00 70 3f       	push   0x3f700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 c4 fb 01 00       	call   c0028c87 <__ltdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 88 4a 07 00 00    	js     c000981d <linear_vari_process+0x7ea>
c00090d3:	68 00 00 70 40       	push   0x40700000
c00090d8:	6a 00                	push   0x0
c00090da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090e2:	e8 82 fb 01 00       	call   c0028c69 <__gtdf2>
c00090e7:	83 c4 10             	add    esp,0x10
c00090ea:	ba 16 00 00 00       	mov    edx,0x16
c00090ef:	85 c0                	test   eax,eax
c00090f1:	0f 8f 26 07 00 00    	jg     c000981d <linear_vari_process+0x7ea>
c00090f7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090fb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0009101:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009105:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009109:	68 00 00 f0 3f       	push   0x3ff00000
c000910e:	6a 00                	push   0x0
c0009110:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009114:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009118:	e8 6a fb 01 00       	call   c0028c87 <__ltdf2>
c000911d:	83 c4 10             	add    esp,0x10
c0009120:	85 c0                	test   eax,eax
c0009122:	0f 89 89 02 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c0009128:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c000912b:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000912e:	0f 8d 7d 02 00 00    	jge    c00093b1 <linear_vari_process+0x37e>
c0009134:	83 ec 0c             	sub    esp,0xc
c0009137:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913a:	e8 dc f8 01 00       	call   c0028a1b <__floatsidf>
c000913f:	83 c4 10             	add    esp,0x10
c0009142:	89 04 24             	mov    DWORD PTR [esp],eax
c0009145:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009149:	68 00 00 f0 3f       	push   0x3ff00000
c000914e:	6a 00                	push   0x0
c0009150:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009154:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009158:	e8 de eb 01 00       	call   c0027d3b <__adddf3>
c000915d:	83 c4 10             	add    esp,0x10
c0009160:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009164:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009168:	52                   	push   edx
c0009169:	50                   	push   eax
c000916a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009172:	e8 41 f2 01 00       	call   c00283b8 <__muldf3>
c0009177:	5d                   	pop    ebp
c0009178:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000917c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009180:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009183:	e8 93 f8 01 00       	call   c0028a1b <__floatsidf>
c0009188:	83 c4 10             	add    esp,0x10
c000918b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000918f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009193:	52                   	push   edx
c0009194:	50                   	push   eax
c0009195:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	e8 99 eb 01 00       	call   c0027d3b <__adddf3>
c00091a2:	59                   	pop    ecx
c00091a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00091a7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00091ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00091ae:	e8 68 f8 01 00       	call   c0028a1b <__floatsidf>
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00091ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00091be:	52                   	push   edx
c00091bf:	50                   	push   eax
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 b8 fa 01 00       	call   c0028c85 <__gedf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 89 d9 01 00 00    	jns    c00093b1 <linear_vari_process+0x37e>
c00091d8:	85 ff                	test   edi,edi
c00091da:	0f 8e f4 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c00091e0:	83 ec 10             	sub    esp,0x10
c00091e3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091e6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091e9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091ed:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091f0:	ff 30                	push   DWORD PTR [eax]
c00091f2:	e8 95 f1 01 00       	call   c002838c <__subdf3>
c00091f7:	83 c4 18             	add    esp,0x18
c00091fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009202:	52                   	push   edx
c0009203:	50                   	push   eax
c0009204:	e8 17 fc 01 00       	call   c0028e20 <fabs>
c0009209:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000920d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009219:	68 23 42 92 0c       	push   0xc924223
c000921e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009222:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009226:	e8 3e fa 01 00       	call   c0028c69 <__gtdf2>
c000922b:	83 c4 10             	add    esp,0x10
c000922e:	85 c0                	test   eax,eax
c0009230:	0f 8e 9e 00 00 00    	jle    c00092d4 <linear_vari_process+0x2a1>
c0009236:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000923a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000923d:	8b 00                	mov    eax,DWORD PTR [eax]
c000923f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009243:	89 04 24             	mov    DWORD PTR [esp],eax
c0009246:	52                   	push   edx
c0009247:	50                   	push   eax
c0009248:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000924b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000924e:	e8 39 f1 01 00       	call   c002838c <__subdf3>
c0009253:	59                   	pop    ecx
c0009254:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009258:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000925c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000925f:	e8 b7 f7 01 00       	call   c0028a1b <__floatsidf>
c0009264:	83 c4 10             	add    esp,0x10
c0009267:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000926b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926f:	52                   	push   edx
c0009270:	50                   	push   eax
c0009271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009279:	e8 3a f1 01 00       	call   c00283b8 <__muldf3>
c000927e:	5f                   	pop    edi
c000927f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009283:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009287:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000928a:	e8 8c f7 01 00       	call   c0028a1b <__floatsidf>
c000928f:	83 c4 10             	add    esp,0x10
c0009292:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009296:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000929a:	52                   	push   edx
c000929b:	50                   	push   eax
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a4:	e8 f3 f3 01 00       	call   c002869c <__divdf3>
c00092a9:	83 c4 10             	add    esp,0x10
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092b8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00092bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092c4:	e8 72 ea 01 00       	call   c0027d3b <__adddf3>
c00092c9:	83 c4 10             	add    esp,0x10
c00092cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092d4:	31 ff                	xor    edi,edi
c00092d6:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092d9:	0f 8e 9d 00 00 00    	jle    c000937c <linear_vari_process+0x349>
c00092df:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092e2:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092e9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00092f0:	8b 06                	mov    eax,DWORD PTR [esi]
c00092f2:	52                   	push   edx
c00092f3:	52                   	push   edx
c00092f4:	55                   	push   ebp
c00092f5:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092f8:	47                   	inc    edi
c00092f9:	e8 d2 e3 01 00       	call   c00276d0 <__subsf3>
c00092fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009301:	e8 a9 fa 01 00       	call   c0028daf <__extendsfdf2>
c0009306:	83 c4 10             	add    esp,0x10
c0009309:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000930d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009311:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009315:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009319:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009321:	e8 92 f0 01 00       	call   c00283b8 <__muldf3>
c0009326:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009329:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000932d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009331:	e8 79 fa 01 00       	call   c0028daf <__extendsfdf2>
c0009336:	83 c4 10             	add    esp,0x10
c0009339:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000933d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009341:	52                   	push   edx
c0009342:	50                   	push   eax
c0009343:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009347:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000934b:	e8 eb e9 01 00       	call   c0027d3b <__adddf3>
c0009350:	59                   	pop    ecx
c0009351:	5d                   	pop    ebp
c0009352:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009356:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000935a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000935e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009362:	e8 24 f9 01 00       	call   c0028c8b <__truncdfsf2>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000936d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009371:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009374:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009377:	e9 5a ff ff ff       	jmp    c00092d6 <linear_vari_process+0x2a3>
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009384:	68 00 00 f0 3f       	push   0x3ff00000
c0009389:	6a 00                	push   0x0
c000938b:	e8 0c f3 01 00       	call   c002869c <__divdf3>
c0009390:	83 c4 10             	add    esp,0x10
c0009393:	89 04 24             	mov    DWORD PTR [esp],eax
c0009396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000939a:	52                   	push   edx
c000939b:	50                   	push   eax
c000939c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093a4:	e8 92 e9 01 00       	call   c0027d3b <__adddf3>
c00093a9:	83 c4 10             	add    esp,0x10
c00093ac:	e9 50 fd ff ff       	jmp    c0009101 <linear_vari_process+0xce>
c00093b1:	50                   	push   eax
c00093b2:	50                   	push   eax
c00093b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093bb:	e8 80 fa 01 00       	call   c0028e40 <lrint>
c00093c0:	83 ec 0c             	sub    esp,0xc
c00093c3:	50                   	push   eax
c00093c4:	e8 52 f6 01 00       	call   c0028a1b <__floatsidf>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093d0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093d4:	52                   	push   edx
c00093d5:	50                   	push   eax
c00093d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093de:	e8 a9 ef 01 00       	call   c002838c <__subdf3>
c00093e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093eb:	83 c4 20             	add    esp,0x20
c00093ee:	6a 00                	push   0x0
c00093f0:	6a 00                	push   0x0
c00093f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093fa:	e8 88 f8 01 00       	call   c0028c87 <__ltdf2>
c00093ff:	83 c4 10             	add    esp,0x10
c0009402:	85 c0                	test   eax,eax
c0009404:	79 1e                	jns    c0009424 <linear_vari_process+0x3f1>
c0009406:	68 00 00 f0 3f       	push   0x3ff00000
c000940b:	6a 00                	push   0x0
c000940d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009411:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009415:	e8 21 e9 01 00       	call   c0027d3b <__adddf3>
c000941a:	83 c4 10             	add    esp,0x10
c000941d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009420:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009424:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009427:	83 ec 10             	sub    esp,0x10
c000942a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000942e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009432:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009436:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000943a:	e8 4d ef 01 00       	call   c002838c <__subdf3>
c000943f:	83 c4 18             	add    esp,0x18
c0009442:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009446:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000944a:	52                   	push   edx
c000944b:	50                   	push   eax
c000944c:	e8 ef f9 01 00       	call   c0028e40 <lrint>
c0009451:	83 c4 10             	add    esp,0x10
c0009454:	0f af f8             	imul   edi,eax
c0009457:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000945a:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000945d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009460:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009463:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009466:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000946a:	0f 8d 13 03 00 00    	jge    c0009783 <linear_vari_process+0x750>
c0009470:	83 ec 0c             	sub    esp,0xc
c0009473:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009476:	e8 a0 f5 01 00       	call   c0028a1b <__floatsidf>
c000947b:	83 c4 10             	add    esp,0x10
c000947e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009482:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009486:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000948e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009492:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009496:	e8 1d ef 01 00       	call   c00283b8 <__muldf3>
c000949b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000949e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094a6:	e8 70 f5 01 00       	call   c0028a1b <__floatsidf>
c00094ab:	83 c4 10             	add    esp,0x10
c00094ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094b6:	52                   	push   edx
c00094b7:	50                   	push   eax
c00094b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c0:	e8 76 e8 01 00       	call   c0027d3b <__adddf3>
c00094c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094cc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d0:	e8 46 f5 01 00       	call   c0028a1b <__floatsidf>
c00094d5:	83 c4 10             	add    esp,0x10
c00094d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094e0:	52                   	push   edx
c00094e1:	50                   	push   eax
c00094e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	e8 98 f7 01 00       	call   c0028c87 <__ltdf2>
c00094ef:	83 c4 10             	add    esp,0x10
c00094f2:	85 c0                	test   eax,eax
c00094f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094f8:	0f 89 85 02 00 00    	jns    c0009783 <linear_vari_process+0x750>
c00094fe:	85 c9                	test   ecx,ecx
c0009500:	0f 8e f5 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c0009506:	83 ec 10             	sub    esp,0x10
c0009509:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000950c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000950f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0009513:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009516:	ff 30                	push   DWORD PTR [eax]
c0009518:	e8 6f ee 01 00       	call   c002838c <__subdf3>
c000951d:	83 c4 18             	add    esp,0x18
c0009520:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009524:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009528:	52                   	push   edx
c0009529:	50                   	push   eax
c000952a:	e8 f1 f8 01 00       	call   c0028e20 <fabs>
c000952f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009533:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009537:	83 c4 10             	add    esp,0x10
c000953a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000953f:	68 23 42 92 0c       	push   0xc924223
c0009544:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009548:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000954c:	e8 18 f7 01 00       	call   c0028c69 <__gtdf2>
c0009551:	83 c4 10             	add    esp,0x10
c0009554:	85 c0                	test   eax,eax
c0009556:	0f 8e 9f 00 00 00    	jle    c00095fb <linear_vari_process+0x5c8>
c000955c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009560:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009563:	8b 00                	mov    eax,DWORD PTR [eax]
c0009565:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009569:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000956d:	52                   	push   edx
c000956e:	50                   	push   eax
c000956f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009572:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009575:	e8 12 ee 01 00       	call   c002838c <__subdf3>
c000957a:	5f                   	pop    edi
c000957b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000957f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009583:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009586:	e8 90 f4 01 00       	call   c0028a1b <__floatsidf>
c000958b:	83 c4 10             	add    esp,0x10
c000958e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009592:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009596:	52                   	push   edx
c0009597:	50                   	push   eax
c0009598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000959c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a0:	e8 13 ee 01 00       	call   c00283b8 <__muldf3>
c00095a5:	5d                   	pop    ebp
c00095a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00095aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00095ae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00095b1:	e8 65 f4 01 00       	call   c0028a1b <__floatsidf>
c00095b6:	83 c4 10             	add    esp,0x10
c00095b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095c1:	52                   	push   edx
c00095c2:	50                   	push   eax
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095cb:	e8 cc f0 01 00       	call   c002869c <__divdf3>
c00095d0:	83 c4 10             	add    esp,0x10
c00095d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095eb:	e8 4b e7 01 00       	call   c0027d3b <__adddf3>
c00095f0:	83 c4 10             	add    esp,0x10
c00095f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095fb:	31 ff                	xor    edi,edi
c00095fd:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009600:	39 f8                	cmp    eax,edi
c0009602:	0f 8e ac 00 00 00    	jle    c00096b4 <linear_vari_process+0x681>
c0009608:	8b 16                	mov    edx,DWORD PTR [esi]
c000960a:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000960d:	29 c1                	sub    ecx,eax
c000960f:	89 c8                	mov    eax,ecx
c0009611:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009614:	01 f8                	add    eax,edi
c0009616:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000961a:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000961d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009620:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009624:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009627:	51                   	push   ecx
c0009628:	01 f8                	add    eax,edi
c000962a:	51                   	push   ecx
c000962b:	47                   	inc    edi
c000962c:	55                   	push   ebp
c000962d:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c0009630:	e8 9b e0 01 00       	call   c00276d0 <__subsf3>
c0009635:	89 04 24             	mov    DWORD PTR [esp],eax
c0009638:	e8 72 f7 01 00       	call   c0028daf <__extendsfdf2>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009644:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009648:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000964c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009650:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009658:	e8 5b ed 01 00       	call   c00283b8 <__muldf3>
c000965d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009660:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009664:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009668:	e8 42 f7 01 00       	call   c0028daf <__extendsfdf2>
c000966d:	83 c4 10             	add    esp,0x10
c0009670:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009674:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009678:	52                   	push   edx
c0009679:	50                   	push   eax
c000967a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000967e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009682:	e8 b4 e6 01 00       	call   c0027d3b <__adddf3>
c0009687:	5d                   	pop    ebp
c0009688:	59                   	pop    ecx
c0009689:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000968d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009691:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009695:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009699:	e8 ed f5 01 00       	call   c0028c8b <__truncdfsf2>
c000969e:	83 c4 10             	add    esp,0x10
c00096a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096a5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00096a9:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c00096ac:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c00096af:	e9 49 ff ff ff       	jmp    c00095fd <linear_vari_process+0x5ca>
c00096b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bc:	68 00 00 f0 3f       	push   0x3ff00000
c00096c1:	6a 00                	push   0x0
c00096c3:	e8 d4 ef 01 00       	call   c002869c <__divdf3>
c00096c8:	83 c4 10             	add    esp,0x10
c00096cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096d3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096e3:	e8 53 e6 01 00       	call   c0027d3b <__adddf3>
c00096e8:	59                   	pop    ecx
c00096e9:	5f                   	pop    edi
c00096ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096fa:	e8 41 f7 01 00       	call   c0028e40 <lrint>
c00096ff:	83 ec 0c             	sub    esp,0xc
c0009702:	50                   	push   eax
c0009703:	e8 13 f3 01 00       	call   c0028a1b <__floatsidf>
c0009708:	83 c4 10             	add    esp,0x10
c000970b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000970f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009713:	52                   	push   edx
c0009714:	50                   	push   eax
c0009715:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009719:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971d:	e8 6a ec 01 00       	call   c002838c <__subdf3>
c0009722:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009726:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000972a:	83 c4 20             	add    esp,0x20
c000972d:	6a 00                	push   0x0
c000972f:	6a 00                	push   0x0
c0009731:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009735:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009739:	e8 49 f5 01 00       	call   c0028c87 <__ltdf2>
c000973e:	83 c4 10             	add    esp,0x10
c0009741:	85 c0                	test   eax,eax
c0009743:	79 1e                	jns    c0009763 <linear_vari_process+0x730>
c0009745:	68 00 00 f0 3f       	push   0x3ff00000
c000974a:	6a 00                	push   0x0
c000974c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009750:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009754:	e8 e2 e5 01 00       	call   c0027d3b <__adddf3>
c0009759:	83 c4 10             	add    esp,0x10
c000975c:	89 04 24             	mov    DWORD PTR [esp],eax
c000975f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009763:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009766:	83 ec 10             	sub    esp,0x10
c0009769:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000976d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009771:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009775:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009779:	e8 0e ec 01 00       	call   c002838c <__subdf3>
c000977e:	e9 bc fc ff ff       	jmp    c000943f <linear_vari_process+0x40c>
c0009783:	39 fd                	cmp    ebp,edi
c0009785:	7d 38                	jge    c00097bf <linear_vari_process+0x78c>
c0009787:	83 ec 0c             	sub    esp,0xc
c000978a:	89 f8                	mov    eax,edi
c000978c:	29 e8                	sub    eax,ebp
c000978e:	99                   	cdq    
c000978f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009792:	50                   	push   eax
c0009793:	e8 83 f2 01 00       	call   c0028a1b <__floatsidf>
c0009798:	83 c4 10             	add    esp,0x10
c000979b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000979f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097a3:	52                   	push   edx
c00097a4:	50                   	push   eax
c00097a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00097ad:	e8 89 e5 01 00       	call   c0027d3b <__adddf3>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c00097b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00097bb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00097bf:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097ca:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097cd:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097d0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	7f 29                	jg     c0009800 <linear_vari_process+0x7cd>
c00097d7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097e3:	89 01                	mov    DWORD PTR [ecx],eax
c00097e5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097e8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097eb:	99                   	cdq    
c00097ec:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ef:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097f2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097f5:	99                   	cdq    
c00097f6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097f9:	31 d2                	xor    edx,edx
c00097fb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097fe:	eb 1d                	jmp    c000981d <linear_vari_process+0x7ea>
c0009800:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009803:	31 d2                	xor    edx,edx
c0009805:	29 c8                	sub    eax,ecx
c0009807:	c1 e0 02             	shl    eax,0x2
c000980a:	39 d1                	cmp    ecx,edx
c000980c:	7e c9                	jle    c00097d7 <linear_vari_process+0x7a4>
c000980e:	8b 3e                	mov    edi,DWORD PTR [esi]
c0009810:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c0009813:	83 c0 04             	add    eax,0x4
c0009816:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c000981a:	42                   	inc    edx
c000981b:	eb ed                	jmp    c000980a <linear_vari_process+0x7d7>
c000981d:	83 c4 3c             	add    esp,0x3c
c0009820:	89 d0                	mov    eax,edx
c0009822:	5b                   	pop    ebx
c0009823:	5e                   	pop    esi
c0009824:	5f                   	pop    edi
c0009825:	5d                   	pop    ebp
c0009826:	c3                   	ret    

c0009827 <linear_reset>:
c0009827:	83 ec 0c             	sub    esp,0xc
c000982a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000982e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0009831:	85 c0                	test   eax,eax
c0009833:	74 20                	je     c0009855 <linear_reset+0x2e>
c0009835:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009838:	83 c0 1c             	add    eax,0x1c
c000983b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000983e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009845:	c1 e2 02             	shl    edx,0x2
c0009848:	51                   	push   ecx
c0009849:	52                   	push   edx
c000984a:	6a 00                	push   0x0
c000984c:	50                   	push   eax
c000984d:	e8 4a 6f ff ff       	call   c000079c <memset>
c0009852:	83 c4 10             	add    esp,0x10
c0009855:	83 c4 0c             	add    esp,0xc
c0009858:	c3                   	ret    

c0009859 <linear_get_name>:
c0009859:	31 c0                	xor    eax,eax
c000985b:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009860:	75 05                	jne    c0009867 <linear_get_name+0xe>
c0009862:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0009867:	c3                   	ret    

c0009868 <linear_get_description>:
c0009868:	31 c0                	xor    eax,eax
c000986a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000986f:	75 05                	jne    c0009876 <linear_get_description+0xe>
c0009871:	b8 94 a6 02 c0       	mov    eax,0xc002a694
c0009876:	c3                   	ret    

c0009877 <linear_set_converter>:
c0009877:	53                   	push   ebx
c0009878:	b8 0a 00 00 00       	mov    eax,0xa
c000987d:	83 ec 08             	sub    esp,0x8
c0009880:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009884:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009889:	75 6e                	jne    c00098f9 <linear_set_converter+0x82>
c000988b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000988e:	85 c0                	test   eax,eax
c0009890:	74 13                	je     c00098a5 <linear_set_converter+0x2e>
c0009892:	83 ec 0c             	sub    esp,0xc
c0009895:	50                   	push   eax
c0009896:	e8 9f 60 00 00       	call   c000f93a <free>
c000989b:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	50                   	push   eax
c00098a6:	50                   	push   eax
c00098a7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098aa:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00098b1:	50                   	push   eax
c00098b2:	6a 01                	push   0x1
c00098b4:	e8 a1 60 00 00       	call   c000f95a <calloc>
c00098b9:	83 c4 10             	add    esp,0x10
c00098bc:	89 c2                	mov    edx,eax
c00098be:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00098c1:	85 d2                	test   edx,edx
c00098c3:	b8 01 00 00 00       	mov    eax,0x1
c00098c8:	74 2f                	je     c00098f9 <linear_set_converter+0x82>
c00098ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098cd:	83 ec 0c             	sub    esp,0xc
c00098d0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098d3:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098d9:	c7 43 24 33 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009033
c00098e0:	c7 43 20 33 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009033
c00098e7:	c7 43 28 27 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009827
c00098ee:	53                   	push   ebx
c00098ef:	e8 33 ff ff ff       	call   c0009827 <linear_reset>
c00098f4:	83 c4 10             	add    esp,0x10
c00098f7:	31 c0                	xor    eax,eax
c00098f9:	83 c4 08             	add    esp,0x8
c00098fc:	5b                   	pop    ebx
c00098fd:	c3                   	ret    

c00098fe <int_to_fp>:
c00098fe:	c1 e0 0c             	shl    eax,0xc
c0009901:	c3                   	ret    

c0009902 <fp_to_int>:
c0009902:	c1 f8 0c             	sar    eax,0xc
c0009905:	c3                   	ret    

c0009906 <fp_fraction_part>:
c0009906:	25 ff 0f 00 00       	and    eax,0xfff
c000990b:	c3                   	ret    

c000990c <fp_to_double>:
c000990c:	83 ec 1c             	sub    esp,0x1c
c000990f:	e8 f2 ff ff ff       	call   c0009906 <fp_fraction_part>
c0009914:	83 ec 0c             	sub    esp,0xc
c0009917:	50                   	push   eax
c0009918:	e8 fe f0 01 00       	call   c0028a1b <__floatsidf>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009924:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009928:	68 00 00 30 3f       	push   0x3f300000
c000992d:	6a 00                	push   0x0
c000992f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009937:	e8 7c ea 01 00       	call   c00283b8 <__muldf3>
c000993c:	83 c4 2c             	add    esp,0x2c
c000993f:	c3                   	ret    

c0009940 <calc_output_single>:
c0009940:	55                   	push   ebp
c0009941:	57                   	push   edi
c0009942:	56                   	push   esi
c0009943:	89 c6                	mov    esi,eax
c0009945:	53                   	push   ebx
c0009946:	89 d3                	mov    ebx,edx
c0009948:	83 ec 4c             	sub    esp,0x4c
c000994b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000994f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009952:	e8 a7 ff ff ff       	call   c00098fe <int_to_fp>
c0009957:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c000995a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000995e:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009962:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009966:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009969:	99                   	cdq    
c000996a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009972:	f7 fb                	idiv   ebx
c0009974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000997c:	89 da                	mov    edx,ebx
c000997e:	0f af d0             	imul   edx,eax
c0009981:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009985:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009989:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000998d:	29 c2                	sub    edx,eax
c000998f:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009996:	83 c5 04             	add    ebp,0x4
c0009999:	e8 6e ff ff ff       	call   c000990c <fp_to_double>
c000999e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099a2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00099aa:	e8 53 ff ff ff       	call   c0009902 <fp_to_int>
c00099af:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c00099b2:	52                   	push   edx
c00099b3:	52                   	push   edx
c00099b4:	51                   	push   ecx
c00099b5:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c00099b9:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c00099bd:	e8 0e dd 01 00       	call   c00276d0 <__subsf3>
c00099c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00099c5:	e8 e5 f3 01 00       	call   c0028daf <__extendsfdf2>
c00099ca:	83 c4 10             	add    esp,0x10
c00099cd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099e5:	e8 ce e9 01 00       	call   c00283b8 <__muldf3>
c00099ea:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ee:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099f5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099f9:	e8 b1 f3 01 00       	call   c0028daf <__extendsfdf2>
c00099fe:	83 c4 10             	add    esp,0x10
c0009a01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a09:	52                   	push   edx
c0009a0a:	50                   	push   eax
c0009a0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a13:	e8 23 e3 01 00       	call   c0027d3b <__adddf3>
c0009a18:	59                   	pop    ecx
c0009a19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009a1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009a21:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a27:	e8 83 f3 01 00       	call   c0028daf <__extendsfdf2>
c0009a2c:	83 c4 10             	add    esp,0x10
c0009a2f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a33:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a37:	52                   	push   edx
c0009a38:	50                   	push   eax
c0009a39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a41:	e8 72 e9 01 00       	call   c00283b8 <__muldf3>
c0009a46:	83 c4 10             	add    esp,0x10
c0009a49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a51:	52                   	push   edx
c0009a52:	50                   	push   eax
c0009a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a5b:	e8 db e2 01 00       	call   c0027d3b <__adddf3>
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a67:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a6b:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a6f:	0f 89 1d ff ff ff    	jns    c0009992 <calc_output_single+0x52>
c0009a75:	89 d9                	mov    ecx,ebx
c0009a77:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a7b:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a7f:	89 dd                	mov    ebp,ebx
c0009a81:	29 c8                	sub    eax,ecx
c0009a83:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a8b:	99                   	cdq    
c0009a8c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a94:	f7 fb                	idiv   ebx
c0009a96:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a9a:	0f af e8             	imul   ebp,eax
c0009a9d:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009aa1:	01 cd                	add    ebp,ecx
c0009aa3:	8d 34 86             	lea    esi,[esi+eax*4]
c0009aa6:	89 e8                	mov    eax,ebp
c0009aa8:	83 ee 04             	sub    esi,0x4
c0009aab:	e8 5c fe ff ff       	call   c000990c <fp_to_double>
c0009ab0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ab4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ab8:	89 e8                	mov    eax,ebp
c0009aba:	29 dd                	sub    ebp,ebx
c0009abc:	e8 41 fe ff ff       	call   c0009902 <fp_to_int>
c0009ac1:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009ac4:	52                   	push   edx
c0009ac5:	52                   	push   edx
c0009ac6:	51                   	push   ecx
c0009ac7:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009acb:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009acf:	e8 fc db 01 00       	call   c00276d0 <__subsf3>
c0009ad4:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ad7:	e8 d3 f2 01 00       	call   c0028daf <__extendsfdf2>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009af7:	e8 bc e8 01 00       	call   c00283b8 <__muldf3>
c0009afc:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009b00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009b04:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009b07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009b0b:	e8 9f f2 01 00       	call   c0028daf <__extendsfdf2>
c0009b10:	83 c4 10             	add    esp,0x10
c0009b13:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b17:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b1b:	52                   	push   edx
c0009b1c:	50                   	push   eax
c0009b1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b21:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b25:	e8 11 e2 01 00       	call   c0027d3b <__adddf3>
c0009b2a:	59                   	pop    ecx
c0009b2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b2f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b33:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b39:	e8 71 f2 01 00       	call   c0028daf <__extendsfdf2>
c0009b3e:	83 c4 10             	add    esp,0x10
c0009b41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b49:	52                   	push   edx
c0009b4a:	50                   	push   eax
c0009b4b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b53:	e8 60 e8 01 00       	call   c00283b8 <__muldf3>
c0009b58:	83 c4 10             	add    esp,0x10
c0009b5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b63:	52                   	push   edx
c0009b64:	50                   	push   eax
c0009b65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b6d:	e8 c9 e1 01 00       	call   c0027d3b <__adddf3>
c0009b72:	83 c4 10             	add    esp,0x10
c0009b75:	85 ed                	test   ebp,ebp
c0009b77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b7f:	0f 8f 21 ff ff ff    	jg     c0009aa6 <calc_output_single+0x166>
c0009b85:	52                   	push   edx
c0009b86:	50                   	push   eax
c0009b87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b8f:	e8 a7 e1 01 00       	call   c0027d3b <__adddf3>
c0009b94:	83 c4 5c             	add    esp,0x5c
c0009b97:	5b                   	pop    ebx
c0009b98:	5e                   	pop    esi
c0009b99:	5f                   	pop    edi
c0009b9a:	5d                   	pop    ebp
c0009b9b:	c3                   	ret    

c0009b9c <calc_output_stereo>:
c0009b9c:	55                   	push   ebp
c0009b9d:	89 cd                	mov    ebp,ecx
c0009b9f:	57                   	push   edi
c0009ba0:	56                   	push   esi
c0009ba1:	53                   	push   ebx
c0009ba2:	89 c3                	mov    ebx,eax
c0009ba4:	83 ec 6c             	sub    esp,0x6c
c0009ba7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009bab:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009bb2:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009bb9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009bbd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009bc1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009bc4:	e8 35 fd ff ff       	call   c00098fe <int_to_fp>
c0009bc9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bd1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd5:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bdd:	29 c8                	sub    eax,ecx
c0009bdf:	99                   	cdq    
c0009be0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009be4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009be8:	0f af d0             	imul   edx,eax
c0009beb:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bee:	31 d2                	xor    edx,edx
c0009bf0:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bf4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bf8:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bfb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bff:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009c02:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009c06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009c0a:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009c0d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009c12:	29 c1                	sub    ecx,eax
c0009c14:	31 c0                	xor    eax,eax
c0009c16:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009c19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c21:	83 c7 08             	add    edi,0x8
c0009c24:	e8 e3 fc ff ff       	call   c000990c <fp_to_double>
c0009c29:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c2d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c35:	e8 c8 fc ff ff       	call   c0009902 <fp_to_int>
c0009c3a:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c3d:	52                   	push   edx
c0009c3e:	52                   	push   edx
c0009c3f:	51                   	push   ecx
c0009c40:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c44:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c48:	e8 83 da 01 00       	call   c00276d0 <__subsf3>
c0009c4d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c50:	e8 5a f1 01 00       	call   c0028daf <__extendsfdf2>
c0009c55:	83 c4 10             	add    esp,0x10
c0009c58:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c5c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c60:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	e8 43 e7 01 00       	call   c00283b8 <__muldf3>
c0009c75:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c79:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c80:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c84:	e8 26 f1 01 00       	call   c0028daf <__extendsfdf2>
c0009c89:	83 c4 10             	add    esp,0x10
c0009c8c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c90:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c94:	52                   	push   edx
c0009c95:	50                   	push   eax
c0009c96:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c9e:	e8 98 e0 01 00       	call   c0027d3b <__adddf3>
c0009ca3:	59                   	pop    ecx
c0009ca4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009ca8:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009cac:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009cb2:	e8 f8 f0 01 00       	call   c0028daf <__extendsfdf2>
c0009cb7:	83 c4 10             	add    esp,0x10
c0009cba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cbe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cc2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cc6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cca:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cce:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd2:	e8 e1 e6 01 00       	call   c00283b8 <__muldf3>
c0009cd7:	83 c4 10             	add    esp,0x10
c0009cda:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cde:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ce2:	52                   	push   edx
c0009ce3:	50                   	push   eax
c0009ce4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cec:	e8 4a e0 01 00       	call   c0027d3b <__adddf3>
c0009cf1:	59                   	pop    ecx
c0009cf2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cf6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cfa:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009d00:	e8 aa f0 01 00       	call   c0028daf <__extendsfdf2>
c0009d05:	83 c4 10             	add    esp,0x10
c0009d08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009d0c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009d10:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009d18:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d1c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009d20:	e8 93 e6 01 00       	call   c00283b8 <__muldf3>
c0009d25:	83 c4 10             	add    esp,0x10
c0009d28:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d2c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d30:	52                   	push   edx
c0009d31:	50                   	push   eax
c0009d32:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d3a:	e8 fc df 01 00       	call   c0027d3b <__adddf3>
c0009d3f:	83 c4 10             	add    esp,0x10
c0009d42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d46:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d4a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d4e:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d52:	0f 89 c5 fe ff ff    	jns    c0009c1d <calc_output_stereo+0x81>
c0009d58:	29 e9                	sub    ecx,ebp
c0009d5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d5e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d62:	29 c8                	sub    eax,ecx
c0009d64:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d6c:	99                   	cdq    
c0009d6d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d71:	31 d2                	xor    edx,edx
c0009d73:	0f af f8             	imul   edi,eax
c0009d76:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d7a:	40                   	inc    eax
c0009d7b:	01 cf                	add    edi,ecx
c0009d7d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d82:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d86:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d8e:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d91:	31 c0                	xor    eax,eax
c0009d93:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d97:	89 f8                	mov    eax,edi
c0009d99:	83 eb 08             	sub    ebx,0x8
c0009d9c:	e8 6b fb ff ff       	call   c000990c <fp_to_double>
c0009da1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009da5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009da9:	89 f8                	mov    eax,edi
c0009dab:	e8 52 fb ff ff       	call   c0009902 <fp_to_int>
c0009db0:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009db3:	52                   	push   edx
c0009db4:	52                   	push   edx
c0009db5:	55                   	push   ebp
c0009db6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009dba:	e8 11 d9 01 00       	call   c00276d0 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 e8 ef 01 00       	call   c0028daf <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 d1 e5 01 00       	call   c00283b8 <__muldf3>
c0009de7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dee:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009df2:	e8 b8 ef 01 00       	call   c0028daf <__extendsfdf2>
c0009df7:	83 c4 10             	add    esp,0x10
c0009dfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e02:	52                   	push   edx
c0009e03:	50                   	push   eax
c0009e04:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e08:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009e0c:	e8 2a df 01 00       	call   c0027d3b <__adddf3>
c0009e11:	59                   	pop    ecx
c0009e12:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009e16:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009e1a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009e20:	e8 8a ef 01 00       	call   c0028daf <__extendsfdf2>
c0009e25:	83 c4 10             	add    esp,0x10
c0009e28:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e2c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e34:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e40:	e8 73 e5 01 00       	call   c00283b8 <__muldf3>
c0009e45:	83 c4 10             	add    esp,0x10
c0009e48:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e4c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e50:	52                   	push   edx
c0009e51:	50                   	push   eax
c0009e52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e5a:	e8 dc de 01 00       	call   c0027d3b <__adddf3>
c0009e5f:	5d                   	pop    ebp
c0009e60:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e64:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e68:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e6e:	e8 3c ef 01 00       	call   c0028daf <__extendsfdf2>
c0009e73:	83 c4 10             	add    esp,0x10
c0009e76:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e7a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	e8 25 e5 01 00       	call   c00283b8 <__muldf3>
c0009e93:	83 c4 10             	add    esp,0x10
c0009e96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e9a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e9e:	52                   	push   edx
c0009e9f:	50                   	push   eax
c0009ea0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009ea8:	e8 8e de 01 00       	call   c0027d3b <__adddf3>
c0009ead:	83 c4 10             	add    esp,0x10
c0009eb0:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009eb4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009eb8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ebc:	85 ff                	test   edi,edi
c0009ebe:	0f 8f d3 fe ff ff    	jg     c0009d97 <calc_output_stereo+0x1fb>
c0009ec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ec8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	e8 62 de 01 00       	call   c0027d3b <__adddf3>
c0009ed9:	83 c4 10             	add    esp,0x10
c0009edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ee0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ef4:	e8 bf e4 01 00       	call   c00283b8 <__muldf3>
c0009ef9:	59                   	pop    ecx
c0009efa:	5b                   	pop    ebx
c0009efb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009eff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f0b:	e8 7b ed 01 00       	call   c0028c8b <__truncdfsf2>
c0009f10:	83 c4 10             	add    esp,0x10
c0009f13:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009f1a:	89 03                	mov    DWORD PTR [ebx],eax
c0009f1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f2c:	e8 0a de 01 00       	call   c0027d3b <__adddf3>
c0009f31:	83 c4 10             	add    esp,0x10
c0009f34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f38:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f3c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f40:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f4c:	e8 67 e4 01 00       	call   c00283b8 <__muldf3>
c0009f51:	5e                   	pop    esi
c0009f52:	5f                   	pop    edi
c0009f53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f63:	e8 23 ed 01 00       	call   c0028c8b <__truncdfsf2>
c0009f68:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f6f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f72:	83 c4 7c             	add    esp,0x7c
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	5f                   	pop    edi
c0009f78:	5d                   	pop    ebp
c0009f79:	c3                   	ret    

c0009f7a <calc_output_quad>:
c0009f7a:	55                   	push   ebp
c0009f7b:	57                   	push   edi
c0009f7c:	56                   	push   esi
c0009f7d:	89 c6                	mov    esi,eax
c0009f7f:	53                   	push   ebx
c0009f80:	83 ec 7c             	sub    esp,0x7c
c0009f83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f87:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f8b:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f92:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009fa1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009fa4:	e8 55 f9 ff ff       	call   c00098fe <int_to_fp>
c0009fa9:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009fac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009fb7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009fbb:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009fbf:	99                   	cdq    
c0009fc0:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fc4:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fc8:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fcb:	31 d2                	xor    edx,edx
c0009fcd:	0f af d8             	imul   ebx,eax
c0009fd0:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fd8:	0f af c7             	imul   eax,edi
c0009fdb:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fdf:	29 c1                	sub    ecx,eax
c0009fe1:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fe9:	31 c0                	xor    eax,eax
c0009feb:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fee:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009ff2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009ff6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009ffa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ffe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a002:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a006:	89 d8                	mov    eax,ebx
c000a008:	83 c7 10             	add    edi,0x10
c000a00b:	e8 fc f8 ff ff       	call   c000990c <fp_to_double>
c000a010:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a014:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a018:	89 d8                	mov    eax,ebx
c000a01a:	e8 e3 f8 ff ff       	call   c0009902 <fp_to_int>
c000a01f:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c000a023:	52                   	push   edx
c000a024:	52                   	push   edx
c000a025:	51                   	push   ecx
c000a026:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a02a:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a02e:	e8 9d d6 01 00       	call   c00276d0 <__subsf3>
c000a033:	89 04 24             	mov    DWORD PTR [esp],eax
c000a036:	e8 74 ed 01 00       	call   c0028daf <__extendsfdf2>
c000a03b:	83 c4 10             	add    esp,0x10
c000a03e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a042:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	e8 5d e3 01 00       	call   c00283b8 <__muldf3>
c000a05b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a05f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a063:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a066:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a06a:	e8 40 ed 01 00       	call   c0028daf <__extendsfdf2>
c000a06f:	83 c4 10             	add    esp,0x10
c000a072:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a076:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a07a:	52                   	push   edx
c000a07b:	50                   	push   eax
c000a07c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a080:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a084:	e8 b2 dc 01 00       	call   c0027d3b <__adddf3>
c000a089:	59                   	pop    ecx
c000a08a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a08e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a092:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a098:	e8 12 ed 01 00       	call   c0028daf <__extendsfdf2>
c000a09d:	83 c4 10             	add    esp,0x10
c000a0a0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0b8:	e8 fb e2 01 00       	call   c00283b8 <__muldf3>
c000a0bd:	83 c4 10             	add    esp,0x10
c000a0c0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0c4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c8:	52                   	push   edx
c000a0c9:	50                   	push   eax
c000a0ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0d2:	e8 64 dc 01 00       	call   c0027d3b <__adddf3>
c000a0d7:	59                   	pop    ecx
c000a0d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0dc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0e0:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0e6:	e8 c4 ec 01 00       	call   c0028daf <__extendsfdf2>
c000a0eb:	83 c4 10             	add    esp,0x10
c000a0ee:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0f2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0fe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a102:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a106:	e8 ad e2 01 00       	call   c00283b8 <__muldf3>
c000a10b:	83 c4 10             	add    esp,0x10
c000a10e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a112:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a116:	52                   	push   edx
c000a117:	50                   	push   eax
c000a118:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a11c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a120:	e8 16 dc 01 00       	call   c0027d3b <__adddf3>
c000a125:	59                   	pop    ecx
c000a126:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a12a:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a12e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a134:	e8 76 ec 01 00       	call   c0028daf <__extendsfdf2>
c000a139:	83 c4 10             	add    esp,0x10
c000a13c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a140:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a14c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a150:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a154:	e8 5f e2 01 00       	call   c00283b8 <__muldf3>
c000a159:	83 c4 10             	add    esp,0x10
c000a15c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a160:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a164:	52                   	push   edx
c000a165:	50                   	push   eax
c000a166:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a16e:	e8 c8 db 01 00       	call   c0027d3b <__adddf3>
c000a173:	59                   	pop    ecx
c000a174:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a178:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a17c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a182:	e8 28 ec 01 00       	call   c0028daf <__extendsfdf2>
c000a187:	83 c4 10             	add    esp,0x10
c000a18a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a18e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a196:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a19a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a19e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a1a2:	e8 11 e2 01 00       	call   c00283b8 <__muldf3>
c000a1a7:	83 c4 10             	add    esp,0x10
c000a1aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1ae:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1b2:	52                   	push   edx
c000a1b3:	50                   	push   eax
c000a1b4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1b8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a1bc:	e8 7a db 01 00       	call   c0027d3b <__adddf3>
c000a1c1:	83 c4 10             	add    esp,0x10
c000a1c4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1c8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1cc:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1d0:	0f 89 30 fe ff ff    	jns    c000a006 <calc_output_quad+0x8c>
c000a1d6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1de:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1e2:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1e6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ee:	29 c8                	sub    eax,ecx
c000a1f0:	99                   	cdq    
c000a1f1:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1f5:	31 d2                	xor    edx,edx
c000a1f7:	0f af d8             	imul   ebx,eax
c000a1fa:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1fe:	40                   	inc    eax
c000a1ff:	01 cb                	add    ebx,ecx
c000a201:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a206:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a20a:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a20e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a212:	8d 34 86             	lea    esi,[esi+eax*4]
c000a215:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a21d:	31 c0                	xor    eax,eax
c000a21f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a223:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a227:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a22b:	89 d8                	mov    eax,ebx
c000a22d:	83 ee 10             	sub    esi,0x10
c000a230:	e8 d7 f6 ff ff       	call   c000990c <fp_to_double>
c000a235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a239:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a23d:	89 d8                	mov    eax,ebx
c000a23f:	e8 be f6 ff ff       	call   c0009902 <fp_to_int>
c000a244:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a248:	52                   	push   edx
c000a249:	52                   	push   edx
c000a24a:	57                   	push   edi
c000a24b:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a24f:	e8 7c d4 01 00       	call   c00276d0 <__subsf3>
c000a254:	89 04 24             	mov    DWORD PTR [esp],eax
c000a257:	e8 53 eb 01 00       	call   c0028daf <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 3c e1 01 00       	call   c00283b8 <__muldf3>
c000a27c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a27f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a283:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a287:	e8 23 eb 01 00       	call   c0028daf <__extendsfdf2>
c000a28c:	83 c4 10             	add    esp,0x10
c000a28f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a293:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a297:	52                   	push   edx
c000a298:	50                   	push   eax
c000a299:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a29d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2a1:	e8 95 da 01 00       	call   c0027d3b <__adddf3>
c000a2a6:	59                   	pop    ecx
c000a2a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a2ab:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a2af:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a2b5:	e8 f5 ea 01 00       	call   c0028daf <__extendsfdf2>
c000a2ba:	83 c4 10             	add    esp,0x10
c000a2bd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2c1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2cd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2d5:	e8 de e0 01 00       	call   c00283b8 <__muldf3>
c000a2da:	83 c4 10             	add    esp,0x10
c000a2dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2e5:	52                   	push   edx
c000a2e6:	50                   	push   eax
c000a2e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ef:	e8 47 da 01 00       	call   c0027d3b <__adddf3>
c000a2f4:	5f                   	pop    edi
c000a2f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2fd:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a303:	e8 a7 ea 01 00       	call   c0028daf <__extendsfdf2>
c000a308:	83 c4 10             	add    esp,0x10
c000a30b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a313:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a317:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a31b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a31f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a323:	e8 90 e0 01 00       	call   c00283b8 <__muldf3>
c000a328:	83 c4 10             	add    esp,0x10
c000a32b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a32f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a333:	52                   	push   edx
c000a334:	50                   	push   eax
c000a335:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a339:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a33d:	e8 f9 d9 01 00       	call   c0027d3b <__adddf3>
c000a342:	59                   	pop    ecx
c000a343:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a347:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a34b:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a351:	e8 59 ea 01 00       	call   c0028daf <__extendsfdf2>
c000a356:	83 c4 10             	add    esp,0x10
c000a359:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a35d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a369:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a36d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a371:	e8 42 e0 01 00       	call   c00283b8 <__muldf3>
c000a376:	83 c4 10             	add    esp,0x10
c000a379:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a37d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a381:	52                   	push   edx
c000a382:	50                   	push   eax
c000a383:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a387:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a38b:	e8 ab d9 01 00       	call   c0027d3b <__adddf3>
c000a390:	5f                   	pop    edi
c000a391:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a395:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a399:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a39f:	e8 0b ea 01 00       	call   c0028daf <__extendsfdf2>
c000a3a4:	83 c4 10             	add    esp,0x10
c000a3a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a3b7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3bf:	e8 f4 df 01 00       	call   c00283b8 <__muldf3>
c000a3c4:	83 c4 10             	add    esp,0x10
c000a3c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3cf:	52                   	push   edx
c000a3d0:	50                   	push   eax
c000a3d1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3d9:	e8 5d d9 01 00       	call   c0027d3b <__adddf3>
c000a3de:	83 c4 10             	add    esp,0x10
c000a3e1:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3e5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3e9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3ed:	85 db                	test   ebx,ebx
c000a3ef:	0f 8f 36 fe ff ff    	jg     c000a22b <calc_output_quad+0x2b1>
c000a3f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3f9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a401:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a405:	e8 31 d9 01 00       	call   c0027d3b <__adddf3>
c000a40a:	83 c4 10             	add    esp,0x10
c000a40d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a419:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a421:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a425:	e8 8e df 01 00       	call   c00283b8 <__muldf3>
c000a42a:	59                   	pop    ecx
c000a42b:	5b                   	pop    ebx
c000a42c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a430:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a438:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43c:	e8 4a e8 01 00       	call   c0028c8b <__truncdfsf2>
c000a441:	83 c4 10             	add    esp,0x10
c000a444:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a44b:	89 06                	mov    DWORD PTR [esi],eax
c000a44d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a451:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a455:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a459:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a45d:	e8 d9 d8 01 00       	call   c0027d3b <__adddf3>
c000a462:	83 c4 10             	add    esp,0x10
c000a465:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a469:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a46d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a47d:	e8 36 df 01 00       	call   c00283b8 <__muldf3>
c000a482:	5e                   	pop    esi
c000a483:	5f                   	pop    edi
c000a484:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a488:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	e8 f2 e7 01 00       	call   c0028c8b <__truncdfsf2>
c000a499:	83 c4 10             	add    esp,0x10
c000a49c:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4a3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a4a6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4aa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a4ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a4b6:	e8 80 d8 01 00       	call   c0027d3b <__adddf3>
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d6:	e8 dd de 01 00       	call   c00283b8 <__muldf3>
c000a4db:	5d                   	pop    ebp
c000a4dc:	59                   	pop    ecx
c000a4dd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	e8 99 e7 01 00       	call   c0028c8b <__truncdfsf2>
c000a4f2:	83 c4 10             	add    esp,0x10
c000a4f5:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4fc:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4ff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a503:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a507:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a50f:	e8 27 d8 01 00       	call   c0027d3b <__adddf3>
c000a514:	83 c4 10             	add    esp,0x10
c000a517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a51b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a527:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a52f:	e8 84 de 01 00       	call   c00283b8 <__muldf3>
c000a534:	5b                   	pop    ebx
c000a535:	5e                   	pop    esi
c000a536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a53a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a53e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a542:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a546:	e8 40 e7 01 00       	call   c0028c8b <__truncdfsf2>
c000a54b:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a552:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a555:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a55b:	5b                   	pop    ebx
c000a55c:	5e                   	pop    esi
c000a55d:	5f                   	pop    edi
c000a55e:	5d                   	pop    ebp
c000a55f:	c3                   	ret    

c000a560 <calc_output_hex>:
c000a560:	55                   	push   ebp
c000a561:	89 cd                	mov    ebp,ecx
c000a563:	57                   	push   edi
c000a564:	56                   	push   esi
c000a565:	53                   	push   ebx
c000a566:	89 c3                	mov    ebx,eax
c000a568:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a56e:	89 14 24             	mov    DWORD PTR [esp],edx
c000a571:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a578:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a57f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a583:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a587:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a58a:	e8 6f f3 ff ff       	call   c00098fe <int_to_fp>
c000a58f:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a592:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a596:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a599:	29 c8                	sub    eax,ecx
c000a59b:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a59f:	99                   	cdq    
c000a5a0:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a5a8:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a5ab:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a5b3:	0f af f8             	imul   edi,eax
c000a5b6:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a5b9:	01 cf                	add    edi,ecx
c000a5bb:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a5bf:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a5c2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5c6:	0f af c2             	imul   eax,edx
c000a5c9:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5cd:	29 c1                	sub    ecx,eax
c000a5cf:	31 d2                	xor    edx,edx
c000a5d1:	31 c0                	xor    eax,eax
c000a5d3:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5e2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5ea:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5f2:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5fe:	89 f8                	mov    eax,edi
c000a600:	e8 07 f3 ff ff       	call   c000990c <fp_to_double>
c000a605:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a609:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a60d:	89 f8                	mov    eax,edi
c000a60f:	e8 ee f2 ff ff       	call   c0009902 <fp_to_int>
c000a614:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a618:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a61b:	52                   	push   edx
c000a61c:	52                   	push   edx
c000a61d:	51                   	push   ecx
c000a61e:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a622:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a629:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a62d:	e8 9e d0 01 00       	call   c00276d0 <__subsf3>
c000a632:	89 04 24             	mov    DWORD PTR [esp],eax
c000a635:	e8 75 e7 01 00       	call   c0028daf <__extendsfdf2>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a641:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	e8 5e dd 01 00       	call   c00283b8 <__muldf3>
c000a65a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a65e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a662:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a665:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a669:	e8 41 e7 01 00       	call   c0028daf <__extendsfdf2>
c000a66e:	83 c4 10             	add    esp,0x10
c000a671:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a675:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a679:	52                   	push   edx
c000a67a:	50                   	push   eax
c000a67b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a683:	e8 b3 d6 01 00       	call   c0027d3b <__adddf3>
c000a688:	59                   	pop    ecx
c000a689:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a68d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a691:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a697:	e8 13 e7 01 00       	call   c0028daf <__extendsfdf2>
c000a69c:	83 c4 10             	add    esp,0x10
c000a69f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6a3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6af:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6b7:	e8 fc dc 01 00       	call   c00283b8 <__muldf3>
c000a6bc:	83 c4 10             	add    esp,0x10
c000a6bf:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6c3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6c7:	52                   	push   edx
c000a6c8:	50                   	push   eax
c000a6c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6cd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6d1:	e8 65 d6 01 00       	call   c0027d3b <__adddf3>
c000a6d6:	59                   	pop    ecx
c000a6d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6db:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6df:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6e5:	e8 c5 e6 01 00       	call   c0028daf <__extendsfdf2>
c000a6ea:	83 c4 10             	add    esp,0x10
c000a6ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6f1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6fd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a701:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a705:	e8 ae dc 01 00       	call   c00283b8 <__muldf3>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a711:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a715:	52                   	push   edx
c000a716:	50                   	push   eax
c000a717:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a71f:	e8 17 d6 01 00       	call   c0027d3b <__adddf3>
c000a724:	59                   	pop    ecx
c000a725:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a729:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a72d:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a733:	e8 77 e6 01 00       	call   c0028daf <__extendsfdf2>
c000a738:	83 c4 10             	add    esp,0x10
c000a73b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a743:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a74b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a74f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a753:	e8 60 dc 01 00       	call   c00283b8 <__muldf3>
c000a758:	83 c4 10             	add    esp,0x10
c000a75b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a75f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a763:	52                   	push   edx
c000a764:	50                   	push   eax
c000a765:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a769:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a76d:	e8 c9 d5 01 00       	call   c0027d3b <__adddf3>
c000a772:	59                   	pop    ecx
c000a773:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a777:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a77b:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a781:	e8 29 e6 01 00       	call   c0028daf <__extendsfdf2>
c000a786:	83 c4 10             	add    esp,0x10
c000a789:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a78d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a799:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a79d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a1:	e8 12 dc 01 00       	call   c00283b8 <__muldf3>
c000a7a6:	83 c4 10             	add    esp,0x10
c000a7a9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ad:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7b1:	52                   	push   edx
c000a7b2:	50                   	push   eax
c000a7b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a7bb:	e8 7b d5 01 00       	call   c0027d3b <__adddf3>
c000a7c0:	59                   	pop    ecx
c000a7c1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7c5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7c9:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7cf:	e8 db e5 01 00       	call   c0028daf <__extendsfdf2>
c000a7d4:	83 c4 10             	add    esp,0x10
c000a7d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7e7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7eb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ef:	e8 c4 db 01 00       	call   c00283b8 <__muldf3>
c000a7f4:	83 c4 10             	add    esp,0x10
c000a7f7:	83 c6 18             	add    esi,0x18
c000a7fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a802:	52                   	push   edx
c000a803:	50                   	push   eax
c000a804:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a808:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a80c:	e8 2a d5 01 00       	call   c0027d3b <__adddf3>
c000a811:	59                   	pop    ecx
c000a812:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a816:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a81a:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a820:	e8 8a e5 01 00       	call   c0028daf <__extendsfdf2>
c000a825:	83 c4 10             	add    esp,0x10
c000a828:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a82c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a838:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a83c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a840:	e8 73 db 01 00       	call   c00283b8 <__muldf3>
c000a845:	83 c4 10             	add    esp,0x10
c000a848:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a84c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a850:	52                   	push   edx
c000a851:	50                   	push   eax
c000a852:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a856:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a85a:	e8 dc d4 01 00       	call   c0027d3b <__adddf3>
c000a85f:	83 c4 10             	add    esp,0x10
c000a862:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a866:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a86a:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a86d:	0f 89 8b fd ff ff    	jns    c000a5fe <calc_output_hex+0x9e>
c000a873:	31 f6                	xor    esi,esi
c000a875:	31 ff                	xor    edi,edi
c000a877:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a87b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a87e:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a882:	29 e9                	sub    ecx,ebp
c000a884:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a888:	29 c8                	sub    eax,ecx
c000a88a:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a88d:	99                   	cdq    
c000a88e:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a892:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a895:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a899:	0f af e8             	imul   ebp,eax
c000a89c:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a8a0:	40                   	inc    eax
c000a8a1:	01 cd                	add    ebp,ecx
c000a8a3:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a8a8:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a8ac:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a8b0:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a8b4:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a8b7:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a8bb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a8bf:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a8c3:	89 e8                	mov    eax,ebp
c000a8c5:	e8 42 f0 ff ff       	call   c000990c <fp_to_double>
c000a8ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8d2:	89 e8                	mov    eax,ebp
c000a8d4:	e8 29 f0 ff ff       	call   c0009902 <fp_to_int>
c000a8d9:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8dd:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	51                   	push   ecx
c000a8e3:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8ea:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8f1:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8f5:	e8 d6 cd 01 00       	call   c00276d0 <__subsf3>
c000a8fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8fd:	e8 ad e4 01 00       	call   c0028daf <__extendsfdf2>
c000a902:	83 c4 10             	add    esp,0x10
c000a905:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a909:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a90d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a911:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a915:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a919:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a91d:	e8 96 da 01 00       	call   c00283b8 <__muldf3>
c000a922:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a929:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a92d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a930:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a934:	e8 76 e4 01 00       	call   c0028daf <__extendsfdf2>
c000a939:	83 c4 10             	add    esp,0x10
c000a93c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a940:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a944:	52                   	push   edx
c000a945:	50                   	push   eax
c000a946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a94e:	e8 e8 d3 01 00       	call   c0027d3b <__adddf3>
c000a953:	59                   	pop    ecx
c000a954:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a958:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a95c:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a962:	e8 48 e4 01 00       	call   c0028daf <__extendsfdf2>
c000a967:	83 c4 10             	add    esp,0x10
c000a96a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a972:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a976:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a97a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a97e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a982:	e8 31 da 01 00       	call   c00283b8 <__muldf3>
c000a987:	83 c4 10             	add    esp,0x10
c000a98a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a98e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a992:	52                   	push   edx
c000a993:	50                   	push   eax
c000a994:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a99c:	e8 9a d3 01 00       	call   c0027d3b <__adddf3>
c000a9a1:	59                   	pop    ecx
c000a9a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a9a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a9aa:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a9b0:	e8 fa e3 01 00       	call   c0028daf <__extendsfdf2>
c000a9b5:	83 c4 10             	add    esp,0x10
c000a9b8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9bc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9cc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d0:	e8 e3 d9 01 00       	call   c00283b8 <__muldf3>
c000a9d5:	83 c4 10             	add    esp,0x10
c000a9d8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9dc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9e0:	52                   	push   edx
c000a9e1:	50                   	push   eax
c000a9e2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9e6:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9ea:	e8 4c d3 01 00       	call   c0027d3b <__adddf3>
c000a9ef:	59                   	pop    ecx
c000a9f0:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9f4:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9f8:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9fe:	e8 ac e3 01 00       	call   c0028daf <__extendsfdf2>
c000aa03:	83 c4 10             	add    esp,0x10
c000aa06:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa0a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa16:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa1e:	e8 95 d9 01 00       	call   c00283b8 <__muldf3>
c000aa23:	83 c4 10             	add    esp,0x10
c000aa26:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa2a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa2e:	52                   	push   edx
c000aa2f:	50                   	push   eax
c000aa30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa34:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa38:	e8 fe d2 01 00       	call   c0027d3b <__adddf3>
c000aa3d:	59                   	pop    ecx
c000aa3e:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa42:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa46:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa4c:	e8 5e e3 01 00       	call   c0028daf <__extendsfdf2>
c000aa51:	83 c4 10             	add    esp,0x10
c000aa54:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa58:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa64:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa68:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa6c:	e8 47 d9 01 00       	call   c00283b8 <__muldf3>
c000aa71:	83 c4 10             	add    esp,0x10
c000aa74:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa78:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa7c:	52                   	push   edx
c000aa7d:	50                   	push   eax
c000aa7e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa82:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa86:	e8 b0 d2 01 00       	call   c0027d3b <__adddf3>
c000aa8b:	59                   	pop    ecx
c000aa8c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa90:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa94:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa9a:	e8 10 e3 01 00       	call   c0028daf <__extendsfdf2>
c000aa9f:	83 c4 10             	add    esp,0x10
c000aaa2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aab2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aab6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaba:	e8 f9 d8 01 00       	call   c00283b8 <__muldf3>
c000aabf:	83 c4 10             	add    esp,0x10
c000aac2:	83 eb 18             	sub    ebx,0x18
c000aac5:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aac9:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aacd:	52                   	push   edx
c000aace:	50                   	push   eax
c000aacf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aad7:	e8 5f d2 01 00       	call   c0027d3b <__adddf3>
c000aadc:	59                   	pop    ecx
c000aadd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aae1:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aae5:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaeb:	e8 bf e2 01 00       	call   c0028daf <__extendsfdf2>
c000aaf0:	83 c4 10             	add    esp,0x10
c000aaf3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaf7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aafb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab03:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab07:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000ab0b:	e8 a8 d8 01 00       	call   c00283b8 <__muldf3>
c000ab10:	83 c4 10             	add    esp,0x10
c000ab13:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab17:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ab1b:	52                   	push   edx
c000ab1c:	50                   	push   eax
c000ab1d:	57                   	push   edi
c000ab1e:	56                   	push   esi
c000ab1f:	e8 17 d2 01 00       	call   c0027d3b <__adddf3>
c000ab24:	83 c4 10             	add    esp,0x10
c000ab27:	89 c6                	mov    esi,eax
c000ab29:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab2c:	89 d7                	mov    edi,edx
c000ab2e:	85 ed                	test   ebp,ebp
c000ab30:	0f 8f 8d fd ff ff    	jg     c000a8c3 <calc_output_hex+0x363>
c000ab36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab46:	e8 f0 d1 01 00       	call   c0027d3b <__adddf3>
c000ab4b:	83 c4 10             	add    esp,0x10
c000ab4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab55:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab59:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab65:	e8 4e d8 01 00       	call   c00283b8 <__muldf3>
c000ab6a:	59                   	pop    ecx
c000ab6b:	5b                   	pop    ebx
c000ab6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab74:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7c:	e8 0a e1 01 00       	call   c0028c8b <__truncdfsf2>
c000ab81:	83 c4 10             	add    esp,0x10
c000ab84:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab8b:	89 03                	mov    DWORD PTR [ebx],eax
c000ab8d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab91:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab9d:	e8 99 d1 01 00       	call   c0027d3b <__adddf3>
c000aba2:	83 c4 10             	add    esp,0x10
c000aba5:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abbc:	e8 f7 d7 01 00       	call   c00283b8 <__muldf3>
c000abc1:	5d                   	pop    ebp
c000abc2:	59                   	pop    ecx
c000abc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd3:	e8 b3 e0 01 00       	call   c0028c8b <__truncdfsf2>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abe2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abe5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abe9:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abed:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abf5:	e8 41 d1 01 00       	call   c0027d3b <__adddf3>
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac04:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac08:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac14:	e8 9f d7 01 00       	call   c00283b8 <__muldf3>
c000ac19:	5b                   	pop    ebx
c000ac1a:	5d                   	pop    ebp
c000ac1b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2b:	e8 5b e0 01 00       	call   c0028c8b <__truncdfsf2>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac3a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac3d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac41:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac49:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac4d:	e8 e9 d0 01 00       	call   c0027d3b <__adddf3>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac60:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac64:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac68:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac6c:	e8 47 d7 01 00       	call   c00283b8 <__muldf3>
c000ac71:	59                   	pop    ecx
c000ac72:	5b                   	pop    ebx
c000ac73:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac83:	e8 03 e0 01 00       	call   c0028c8b <__truncdfsf2>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac92:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac95:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aca5:	e8 91 d0 01 00       	call   c0027d3b <__adddf3>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	89 04 24             	mov    DWORD PTR [esp],eax
c000acb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acbc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc4:	e8 ef d6 01 00       	call   c00283b8 <__muldf3>
c000acc9:	5d                   	pop    ebp
c000acca:	59                   	pop    ecx
c000accb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000accf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acd3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acdb:	e8 ab df 01 00       	call   c0028c8b <__truncdfsf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acea:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aced:	57                   	push   edi
c000acee:	56                   	push   esi
c000acef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acf7:	e8 3f d0 01 00       	call   c0027d3b <__adddf3>
c000acfc:	83 c4 10             	add    esp,0x10
c000acff:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ad06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad16:	e8 9d d6 01 00       	call   c00283b8 <__muldf3>
c000ad1b:	5b                   	pop    ebx
c000ad1c:	5e                   	pop    esi
c000ad1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad2d:	e8 59 df 01 00       	call   c0028c8b <__truncdfsf2>
c000ad32:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad39:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad3c:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad42:	5b                   	pop    ebx
c000ad43:	5e                   	pop    esi
c000ad44:	5f                   	pop    edi
c000ad45:	5d                   	pop    ebp
c000ad46:	c3                   	ret    

c000ad47 <sinc_reset>:
c000ad47:	56                   	push   esi
c000ad48:	53                   	push   ebx
c000ad49:	51                   	push   ecx
c000ad4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad4e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad51:	85 db                	test   ebx,ebx
c000ad53:	74 59                	je     c000adae <sinc_reset+0x67>
c000ad55:	31 d2                	xor    edx,edx
c000ad57:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad5e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad61:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad64:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad6b:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad72:	31 c0                	xor    eax,eax
c000ad74:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad7a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad7d:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad80:	52                   	push   edx
c000ad81:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad84:	c1 e0 02             	shl    eax,0x2
c000ad87:	50                   	push   eax
c000ad88:	6a 00                	push   0x0
c000ad8a:	56                   	push   esi
c000ad8b:	e8 0c 5a ff ff       	call   c000079c <memset>
c000ad90:	83 c4 0c             	add    esp,0xc
c000ad93:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad96:	c1 e0 02             	shl    eax,0x2
c000ad99:	50                   	push   eax
c000ad9a:	68 aa 00 00 00       	push   0xaa
c000ad9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ada2:	8d 04 86             	lea    eax,[esi+eax*4]
c000ada5:	50                   	push   eax
c000ada6:	e8 f1 59 ff ff       	call   c000079c <memset>
c000adab:	83 c4 10             	add    esp,0x10
c000adae:	58                   	pop    eax
c000adaf:	5b                   	pop    ebx
c000adb0:	5e                   	pop    esi
c000adb1:	c3                   	ret    

c000adb2 <calc_output_multi>:
c000adb2:	55                   	push   ebp
c000adb3:	57                   	push   edi
c000adb4:	56                   	push   esi
c000adb5:	89 c6                	mov    esi,eax
c000adb7:	53                   	push   ebx
c000adb8:	83 ec 4c             	sub    esp,0x4c
c000adbb:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000adbf:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000adc3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000adc7:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000adcb:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adcf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000add3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000add7:	8d 46 44             	lea    eax,[esi+0x44]
c000adda:	89 04 24             	mov    DWORD PTR [esp],eax
c000addd:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ade3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ade7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adea:	e8 0f eb ff ff       	call   c00098fe <int_to_fp>
c000adef:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adf2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adf6:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adfa:	99                   	cdq    
c000adfb:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ae03:	0f af d0             	imul   edx,eax
c000ae06:	0f af c3             	imul   eax,ebx
c000ae09:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ae0d:	29 c1                	sub    ecx,eax
c000ae0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ae17:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ae1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ae22:	57                   	push   edi
c000ae23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae27:	6a 00                	push   0x0
c000ae29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae2d:	e8 6a 59 ff ff       	call   c000079c <memset>
c000ae32:	83 c4 10             	add    esp,0x10
c000ae35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae39:	89 df                	mov    edi,ebx
c000ae3b:	e8 cc ea ff ff       	call   c000990c <fp_to_double>
c000ae40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae4c:	e8 b1 ea ff ff       	call   c0009902 <fp_to_int>
c000ae51:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae54:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae57:	51                   	push   ecx
c000ae58:	51                   	push   ecx
c000ae59:	55                   	push   ebp
c000ae5a:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae5e:	e8 6d c8 01 00       	call   c00276d0 <__subsf3>
c000ae63:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae66:	e8 44 df 01 00       	call   c0028daf <__extendsfdf2>
c000ae6b:	83 c4 10             	add    esp,0x10
c000ae6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae72:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae7e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae82:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae86:	e8 2d d5 01 00       	call   c00283b8 <__muldf3>
c000ae8b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae92:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae96:	e8 14 df 01 00       	call   c0028daf <__extendsfdf2>
c000ae9b:	83 c4 10             	add    esp,0x10
c000ae9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aea2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea6:	52                   	push   edx
c000aea7:	50                   	push   eax
c000aea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aeb0:	e8 86 ce 01 00       	call   c0027d3b <__adddf3>
c000aeb5:	83 c4 10             	add    esp,0x10
c000aeb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aebc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aec0:	89 f8                	mov    eax,edi
c000aec2:	b9 08 00 00 00       	mov    ecx,0x8
c000aec7:	99                   	cdq    
c000aec8:	f7 f9                	idiv   ecx
c000aeca:	4a                   	dec    edx
c000aecb:	83 fa 06             	cmp    edx,0x6
c000aece:	77 07                	ja     c000aed7 <calc_output_multi+0x125>
c000aed0:	ff 24 95 c4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd593c]
c000aed7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeda:	4f                   	dec    edi
c000aedb:	83 ec 0c             	sub    esp,0xc
c000aede:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee5:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeec:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef0:	e8 ba de 01 00       	call   c0028daf <__extendsfdf2>
c000aef5:	83 c4 10             	add    esp,0x10
c000aef8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefc:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af08:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af10:	e8 a3 d4 01 00       	call   c00283b8 <__muldf3>
c000af15:	83 c4 10             	add    esp,0x10
c000af18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af20:	52                   	push   edx
c000af21:	50                   	push   eax
c000af22:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af25:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af28:	e8 0e ce 01 00       	call   c0027d3b <__adddf3>
c000af2d:	83 c4 10             	add    esp,0x10
c000af30:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af33:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af36:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af39:	4f                   	dec    edi
c000af3a:	83 ec 0c             	sub    esp,0xc
c000af3d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af40:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af44:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af4f:	e8 5b de 01 00       	call   c0028daf <__extendsfdf2>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af67:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6f:	e8 44 d4 01 00       	call   c00283b8 <__muldf3>
c000af74:	83 c4 10             	add    esp,0x10
c000af77:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7f:	52                   	push   edx
c000af80:	50                   	push   eax
c000af81:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af84:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af87:	e8 af cd 01 00       	call   c0027d3b <__adddf3>
c000af8c:	83 c4 10             	add    esp,0x10
c000af8f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af92:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af95:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af98:	4f                   	dec    edi
c000af99:	83 ec 0c             	sub    esp,0xc
c000af9c:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa3:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afaa:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afae:	e8 fc dd 01 00       	call   c0028daf <__extendsfdf2>
c000afb3:	83 c4 10             	add    esp,0x10
c000afb6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afba:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afca:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afce:	e8 e5 d3 01 00       	call   c00283b8 <__muldf3>
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afde:	52                   	push   edx
c000afdf:	50                   	push   eax
c000afe0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe3:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe6:	e8 50 cd 01 00       	call   c0027d3b <__adddf3>
c000afeb:	83 c4 10             	add    esp,0x10
c000afee:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff1:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff7:	4f                   	dec    edi
c000aff8:	83 ec 0c             	sub    esp,0xc
c000affb:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000affe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b002:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b009:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00d:	e8 9d dd 01 00       	call   c0028daf <__extendsfdf2>
c000b012:	83 c4 10             	add    esp,0x10
c000b015:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b019:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b021:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b025:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02d:	e8 86 d3 01 00       	call   c00283b8 <__muldf3>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b039:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03d:	52                   	push   edx
c000b03e:	50                   	push   eax
c000b03f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b042:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b045:	e8 f1 cc 01 00       	call   c0027d3b <__adddf3>
c000b04a:	83 c4 10             	add    esp,0x10
c000b04d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b050:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b053:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b056:	4f                   	dec    edi
c000b057:	83 ec 0c             	sub    esp,0xc
c000b05a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b061:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b068:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06c:	e8 3e dd 01 00       	call   c0028daf <__extendsfdf2>
c000b071:	83 c4 10             	add    esp,0x10
c000b074:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b078:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b080:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b084:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b088:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08c:	e8 27 d3 01 00       	call   c00283b8 <__muldf3>
c000b091:	83 c4 10             	add    esp,0x10
c000b094:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b098:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09c:	52                   	push   edx
c000b09d:	50                   	push   eax
c000b09e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a4:	e8 92 cc 01 00       	call   c0027d3b <__adddf3>
c000b0a9:	83 c4 10             	add    esp,0x10
c000b0ac:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0af:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 df dc 01 00       	call   c0028daf <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0eb:	e8 c8 d2 01 00       	call   c00283b8 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 33 cc 01 00       	call   c0027d3b <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b114:	4f                   	dec    edi
c000b115:	83 ec 0c             	sub    esp,0xc
c000b118:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b11f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b126:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12a:	e8 80 dc 01 00       	call   c0028daf <__extendsfdf2>
c000b12f:	83 c4 10             	add    esp,0x10
c000b132:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b136:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b142:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b146:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14a:	e8 69 d2 01 00       	call   c00283b8 <__muldf3>
c000b14f:	83 c4 10             	add    esp,0x10
c000b152:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b156:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15a:	52                   	push   edx
c000b15b:	50                   	push   eax
c000b15c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b15f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b162:	e8 d4 cb 01 00       	call   c0027d3b <__adddf3>
c000b167:	83 c4 10             	add    esp,0x10
c000b16a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b170:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b173:	4f                   	dec    edi
c000b174:	83 ec 0c             	sub    esp,0xc
c000b177:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b17e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b185:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b189:	e8 21 dc 01 00       	call   c0028daf <__extendsfdf2>
c000b18e:	83 c4 10             	add    esp,0x10
c000b191:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b195:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b199:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b1a9:	e8 0a d2 01 00       	call   c00283b8 <__muldf3>
c000b1ae:	83 c4 10             	add    esp,0x10
c000b1b1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b1b5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b1b9:	52                   	push   edx
c000b1ba:	50                   	push   eax
c000b1bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c1:	e8 75 cb 01 00       	call   c0027d3b <__adddf3>
c000b1c6:	83 c4 10             	add    esp,0x10
c000b1c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1cf:	85 ff                	test   edi,edi
c000b1d1:	0f 8f e9 fc ff ff    	jg     c000aec0 <calc_output_multi+0x10e>
c000b1d7:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1db:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1df:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1e3:	0f 89 4c fc ff ff    	jns    c000ae35 <calc_output_multi+0x83>
c000b1e9:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1f1:	29 c8                	sub    eax,ecx
c000b1f3:	99                   	cdq    
c000b1f4:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1fc:	0f af d0             	imul   edx,eax
c000b1ff:	40                   	inc    eax
c000b200:	01 d1                	add    ecx,edx
c000b202:	0f af c3             	imul   eax,ebx
c000b205:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b209:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b20c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b210:	55                   	push   ebp
c000b211:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b215:	6a 00                	push   0x0
c000b217:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b21b:	e8 7c 55 ff ff       	call   c000079c <memset>
c000b220:	83 c4 10             	add    esp,0x10
c000b223:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b227:	e8 e0 e6 ff ff       	call   c000990c <fp_to_double>
c000b22c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b230:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b234:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b238:	e8 c5 e6 ff ff       	call   c0009902 <fp_to_int>
c000b23d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b240:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b243:	57                   	push   edi
c000b244:	57                   	push   edi
c000b245:	89 df                	mov    edi,ebx
c000b247:	55                   	push   ebp
c000b248:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b24c:	e8 7f c4 01 00       	call   c00276d0 <__subsf3>
c000b251:	89 04 24             	mov    DWORD PTR [esp],eax
c000b254:	e8 56 db 01 00       	call   c0028daf <__extendsfdf2>
c000b259:	83 c4 10             	add    esp,0x10
c000b25c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b260:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b268:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b26c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b270:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b274:	e8 3f d1 01 00       	call   c00283b8 <__muldf3>
c000b279:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b27c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b280:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b284:	e8 26 db 01 00       	call   c0028daf <__extendsfdf2>
c000b289:	83 c4 10             	add    esp,0x10
c000b28c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b290:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b294:	52                   	push   edx
c000b295:	50                   	push   eax
c000b296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b29e:	e8 98 ca 01 00       	call   c0027d3b <__adddf3>
c000b2a3:	83 c4 10             	add    esp,0x10
c000b2a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b2aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b2ae:	89 f8                	mov    eax,edi
c000b2b0:	b9 08 00 00 00       	mov    ecx,0x8
c000b2b5:	99                   	cdq    
c000b2b6:	f7 f9                	idiv   ecx
c000b2b8:	4a                   	dec    edx
c000b2b9:	83 fa 06             	cmp    edx,0x6
c000b2bc:	77 07                	ja     c000b2c5 <calc_output_multi+0x513>
c000b2be:	ff 24 95 e0 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5920]
c000b2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2c9:	4f                   	dec    edi
c000b2ca:	83 ec 0c             	sub    esp,0xc
c000b2cd:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2db:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2df:	e8 cb da 01 00       	call   c0028daf <__extendsfdf2>
c000b2e4:	83 c4 10             	add    esp,0x10
c000b2e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2ff:	e8 b4 d0 01 00       	call   c00283b8 <__muldf3>
c000b304:	83 c4 10             	add    esp,0x10
c000b307:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30f:	52                   	push   edx
c000b310:	50                   	push   eax
c000b311:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b314:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b317:	e8 1f ca 01 00       	call   c0027d3b <__adddf3>
c000b31c:	83 c4 10             	add    esp,0x10
c000b31f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b322:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b325:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b329:	4f                   	dec    edi
c000b32a:	83 ec 0c             	sub    esp,0xc
c000b32d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b330:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b334:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b33f:	e8 6b da 01 00       	call   c0028daf <__extendsfdf2>
c000b344:	83 c4 10             	add    esp,0x10
c000b347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b353:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b357:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35f:	e8 54 d0 01 00       	call   c00283b8 <__muldf3>
c000b364:	83 c4 10             	add    esp,0x10
c000b367:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36f:	52                   	push   edx
c000b370:	50                   	push   eax
c000b371:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b374:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b377:	e8 bf c9 01 00       	call   c0027d3b <__adddf3>
c000b37c:	83 c4 10             	add    esp,0x10
c000b37f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b382:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b389:	4f                   	dec    edi
c000b38a:	83 ec 0c             	sub    esp,0xc
c000b38d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b390:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b394:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b39f:	e8 0b da 01 00       	call   c0028daf <__extendsfdf2>
c000b3a4:	83 c4 10             	add    esp,0x10
c000b3a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bf:	e8 f4 cf 01 00       	call   c00283b8 <__muldf3>
c000b3c4:	83 c4 10             	add    esp,0x10
c000b3c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cf:	52                   	push   edx
c000b3d0:	50                   	push   eax
c000b3d1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d7:	e8 5f c9 01 00       	call   c0027d3b <__adddf3>
c000b3dc:	83 c4 10             	add    esp,0x10
c000b3df:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e9:	4f                   	dec    edi
c000b3ea:	83 ec 0c             	sub    esp,0xc
c000b3ed:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3ff:	e8 ab d9 01 00       	call   c0028daf <__extendsfdf2>
c000b404:	83 c4 10             	add    esp,0x10
c000b407:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41f:	e8 94 cf 01 00       	call   c00283b8 <__muldf3>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42f:	52                   	push   edx
c000b430:	50                   	push   eax
c000b431:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b434:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b437:	e8 ff c8 01 00       	call   c0027d3b <__adddf3>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b442:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b445:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b449:	4f                   	dec    edi
c000b44a:	83 ec 0c             	sub    esp,0xc
c000b44d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b450:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b454:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b45f:	e8 4b d9 01 00       	call   c0028daf <__extendsfdf2>
c000b464:	83 c4 10             	add    esp,0x10
c000b467:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b473:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47f:	e8 34 cf 01 00       	call   c00283b8 <__muldf3>
c000b484:	83 c4 10             	add    esp,0x10
c000b487:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48f:	52                   	push   edx
c000b490:	50                   	push   eax
c000b491:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b494:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b497:	e8 9f c8 01 00       	call   c0027d3b <__adddf3>
c000b49c:	83 c4 10             	add    esp,0x10
c000b49f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a9:	4f                   	dec    edi
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bb:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4bf:	e8 eb d8 01 00       	call   c0028daf <__extendsfdf2>
c000b4c4:	83 c4 10             	add    esp,0x10
c000b4c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4df:	e8 d4 ce 01 00       	call   c00283b8 <__muldf3>
c000b4e4:	83 c4 10             	add    esp,0x10
c000b4e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ef:	52                   	push   edx
c000b4f0:	50                   	push   eax
c000b4f1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f7:	e8 3f c8 01 00       	call   c0027d3b <__adddf3>
c000b4fc:	83 c4 10             	add    esp,0x10
c000b4ff:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b502:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b505:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b509:	4f                   	dec    edi
c000b50a:	83 ec 0c             	sub    esp,0xc
c000b50d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b510:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b514:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b51f:	e8 8b d8 01 00       	call   c0028daf <__extendsfdf2>
c000b524:	83 c4 10             	add    esp,0x10
c000b527:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b533:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b537:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53f:	e8 74 ce 01 00       	call   c00283b8 <__muldf3>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54f:	52                   	push   edx
c000b550:	50                   	push   eax
c000b551:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b554:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b557:	e8 df c7 01 00       	call   c0027d3b <__adddf3>
c000b55c:	83 c4 10             	add    esp,0x10
c000b55f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b562:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b565:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b569:	4f                   	dec    edi
c000b56a:	83 ec 0c             	sub    esp,0xc
c000b56d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b570:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b574:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b57b:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b57f:	e8 2b d8 01 00       	call   c0028daf <__extendsfdf2>
c000b584:	83 c4 10             	add    esp,0x10
c000b587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b593:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b597:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b59f:	e8 14 ce 01 00       	call   c00283b8 <__muldf3>
c000b5a4:	83 c4 10             	add    esp,0x10
c000b5a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5ab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b5af:	52                   	push   edx
c000b5b0:	50                   	push   eax
c000b5b1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b5b4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b5b7:	e8 7f c7 01 00       	call   c0027d3b <__adddf3>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b5c2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5c5:	85 ff                	test   edi,edi
c000b5c7:	0f 8f e1 fc ff ff    	jg     c000b2ae <calc_output_multi+0x4fc>
c000b5cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5d1:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5d5:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5d9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5de:	0f 8f 3f fc ff ff    	jg     c000b223 <calc_output_multi+0x471>
c000b5e4:	be 08 00 00 00       	mov    esi,0x8
c000b5e9:	89 d8                	mov    eax,ebx
c000b5eb:	99                   	cdq    
c000b5ec:	f7 fe                	idiv   esi
c000b5ee:	4a                   	dec    edx
c000b5ef:	83 fa 06             	cmp    edx,0x6
c000b5f2:	77 07                	ja     c000b5fb <calc_output_multi+0x849>
c000b5f4:	ff 24 95 fc a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5904]
c000b5fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5ff:	4b                   	dec    ebx
c000b600:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b604:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b607:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b612:	e8 24 c7 01 00       	call   c0027d3b <__adddf3>
c000b617:	83 c4 10             	add    esp,0x10
c000b61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b632:	e8 81 cd 01 00       	call   c00283b8 <__muldf3>
c000b637:	5d                   	pop    ebp
c000b638:	59                   	pop    ecx
c000b639:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 3d d6 01 00       	call   c0028c8b <__truncdfsf2>
c000b64e:	83 c4 10             	add    esp,0x10
c000b651:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b655:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	4b                   	dec    ebx
c000b65d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b661:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b664:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b668:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66f:	e8 c7 c6 01 00       	call   c0027d3b <__adddf3>
c000b674:	83 c4 10             	add    esp,0x10
c000b677:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68f:	e8 24 cd 01 00       	call   c00283b8 <__muldf3>
c000b694:	59                   	pop    ecx
c000b695:	5f                   	pop    edi
c000b696:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b69a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a6:	e8 e0 d5 01 00       	call   c0028c8b <__truncdfsf2>
c000b6ab:	83 c4 10             	add    esp,0x10
c000b6ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b9:	4b                   	dec    ebx
c000b6ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cc:	e8 6a c6 01 00       	call   c0027d3b <__adddf3>
c000b6d1:	83 c4 10             	add    esp,0x10
c000b6d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ec:	e8 c7 cc 01 00       	call   c00283b8 <__muldf3>
c000b6f1:	5f                   	pop    edi
c000b6f2:	5d                   	pop    ebp
c000b6f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b703:	e8 83 d5 01 00       	call   c0028c8b <__truncdfsf2>
c000b708:	83 c4 10             	add    esp,0x10
c000b70b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b716:	4b                   	dec    ebx
c000b717:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b722:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b726:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b729:	e8 0d c6 01 00       	call   c0027d3b <__adddf3>
c000b72e:	83 c4 10             	add    esp,0x10
c000b731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b735:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b739:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b741:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b749:	e8 6a cc 01 00       	call   c00283b8 <__muldf3>
c000b74e:	5d                   	pop    ebp
c000b74f:	59                   	pop    ecx
c000b750:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b754:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b758:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b760:	e8 26 d5 01 00       	call   c0028c8b <__truncdfsf2>
c000b765:	83 c4 10             	add    esp,0x10
c000b768:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b773:	4b                   	dec    ebx
c000b774:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b778:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b783:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b786:	e8 b0 c5 01 00       	call   c0027d3b <__adddf3>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b792:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a6:	e8 0d cc 01 00       	call   c00283b8 <__muldf3>
c000b7ab:	59                   	pop    ecx
c000b7ac:	5f                   	pop    edi
c000b7ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bd:	e8 c9 d4 01 00       	call   c0028c8b <__truncdfsf2>
c000b7c2:	83 c4 10             	add    esp,0x10
c000b7c5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7d0:	4b                   	dec    ebx
c000b7d1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e3:	e8 53 c5 01 00       	call   c0027d3b <__adddf3>
c000b7e8:	83 c4 10             	add    esp,0x10
c000b7eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b803:	e8 b0 cb 01 00       	call   c00283b8 <__muldf3>
c000b808:	5f                   	pop    edi
c000b809:	5d                   	pop    ebp
c000b80a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b816:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81a:	e8 6c d4 01 00       	call   c0028c8b <__truncdfsf2>
c000b81f:	83 c4 10             	add    esp,0x10
c000b822:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b826:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82d:	4b                   	dec    ebx
c000b82e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b832:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b839:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b840:	e8 f6 c4 01 00       	call   c0027d3b <__adddf3>
c000b845:	83 c4 10             	add    esp,0x10
c000b848:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b858:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b860:	e8 53 cb 01 00       	call   c00283b8 <__muldf3>
c000b865:	5d                   	pop    ebp
c000b866:	59                   	pop    ecx
c000b867:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b873:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b877:	e8 0f d4 01 00       	call   c0028c8b <__truncdfsf2>
c000b87c:	83 c4 10             	add    esp,0x10
c000b87f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b883:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b886:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b88a:	4b                   	dec    ebx
c000b88b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b88f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b892:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b896:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b89a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b89d:	e8 99 c4 01 00       	call   c0027d3b <__adddf3>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8bd:	e8 f6 ca 01 00       	call   c00283b8 <__muldf3>
c000b8c2:	59                   	pop    ecx
c000b8c3:	5f                   	pop    edi
c000b8c4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8c8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d4:	e8 b2 d3 01 00       	call   c0028c8b <__truncdfsf2>
c000b8d9:	83 c4 10             	add    esp,0x10
c000b8dc:	85 db                	test   ebx,ebx
c000b8de:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8e2:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8e5:	0f 8f fe fc ff ff    	jg     c000b5e9 <calc_output_multi+0x837>
c000b8eb:	83 c4 4c             	add    esp,0x4c
c000b8ee:	5b                   	pop    ebx
c000b8ef:	5e                   	pop    esi
c000b8f0:	5f                   	pop    edi
c000b8f1:	5d                   	pop    ebp
c000b8f2:	c3                   	ret    

c000b8f3 <double_to_fp>:
c000b8f3:	83 ec 0c             	sub    esp,0xc
c000b8f6:	68 00 00 b0 40       	push   0x40b00000
c000b8fb:	6a 00                	push   0x0
c000b8fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b905:	e8 ae ca 01 00       	call   c00283b8 <__muldf3>
c000b90a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b90e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b912:	83 c4 1c             	add    esp,0x1c
c000b915:	e9 26 d5 01 00       	jmp    c0028e40 <lrint>

c000b91a <prepare_data>:
c000b91a:	55                   	push   ebp
c000b91b:	57                   	push   edi
c000b91c:	56                   	push   esi
c000b91d:	53                   	push   ebx
c000b91e:	83 ec 1c             	sub    esp,0x1c
c000b921:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b925:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b929:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b92d:	0f 89 57 01 00 00    	jns    c000ba8a <prepare_data+0x170>
c000b933:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b936:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b939:	85 d2                	test   edx,edx
c000b93b:	75 0d                	jne    c000b94a <prepare_data+0x30>
c000b93d:	8d 14 36             	lea    edx,[esi+esi*1]
c000b940:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b943:	29 d0                	sub    eax,edx
c000b945:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b948:	eb 44                	jmp    c000b98e <prepare_data+0x74>
c000b94a:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b94d:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b950:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b953:	39 c1                	cmp    ecx,eax
c000b955:	7d 04                	jge    c000b95b <prepare_data+0x41>
c000b957:	29 d0                	sub    eax,edx
c000b959:	eb 2d                	jmp    c000b988 <prepare_data+0x6e>
c000b95b:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b961:	29 d7                	sub    edi,edx
c000b963:	01 f7                	add    edi,esi
c000b965:	51                   	push   ecx
c000b966:	29 f2                	sub    edx,esi
c000b968:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b96f:	8d 14 90             	lea    edx,[eax+edx*4]
c000b972:	51                   	push   ecx
c000b973:	52                   	push   edx
c000b974:	50                   	push   eax
c000b975:	e8 26 4d ff ff       	call   c00006a0 <memmove>
c000b97a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b97d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b980:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b983:	29 f0                	sub    eax,esi
c000b985:	83 c4 10             	add    esp,0x10
c000b988:	29 f0                	sub    eax,esi
c000b98a:	79 02                	jns    c000b98e <prepare_data+0x74>
c000b98c:	31 c0                	xor    eax,eax
c000b98e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b991:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b994:	29 ef                	sub    edi,ebp
c000b996:	39 c7                	cmp    edi,eax
c000b998:	7e 02                	jle    c000b99c <prepare_data+0x82>
c000b99a:	89 c7                	mov    edi,eax
c000b99c:	89 f8                	mov    eax,edi
c000b99e:	99                   	cdq    
c000b99f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b9a2:	b8 15 00 00 00       	mov    eax,0x15
c000b9a7:	29 d7                	sub    edi,edx
c000b9a9:	0f 88 dd 00 00 00    	js     c000ba8c <prepare_data+0x172>
c000b9af:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b9b2:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b9b5:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b9b8:	0f 8f ce 00 00 00    	jg     c000ba8c <prepare_data+0x172>
c000b9be:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9c4:	50                   	push   eax
c000b9c5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9cc:	50                   	push   eax
c000b9cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9d1:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9d3:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9d6:	50                   	push   eax
c000b9d7:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9da:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9de:	50                   	push   eax
c000b9df:	e8 84 4d ff ff       	call   c0000768 <memcpy>
c000b9e4:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9e7:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9ea:	01 fd                	add    ebp,edi
c000b9ec:	01 f9                	add    ecx,edi
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9f4:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9f7:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9fa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9fe:	0f 85 86 00 00 00    	jne    c000ba8a <prepare_data+0x170>
c000ba04:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000ba07:	89 e8                	mov    eax,ebp
c000ba09:	8d 3c 36             	lea    edi,[esi+esi*1]
c000ba0c:	29 c8                	sub    eax,ecx
c000ba0e:	39 f8                	cmp    eax,edi
c000ba10:	7d 78                	jge    c000ba8a <prepare_data+0x170>
c000ba12:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ba16:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000ba1a:	74 6e                	je     c000ba8a <prepare_data+0x170>
c000ba1c:	8d 7e 04             	lea    edi,[esi+0x4]
c000ba1f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ba23:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba26:	29 ef                	sub    edi,ebp
c000ba28:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba2c:	7c 29                	jl     c000ba57 <prepare_data+0x13d>
c000ba2e:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba31:	29 f1                	sub    ecx,esi
c000ba33:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba3a:	55                   	push   ebp
c000ba3b:	50                   	push   eax
c000ba3c:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba3f:	50                   	push   eax
c000ba40:	52                   	push   edx
c000ba41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba45:	e8 56 4c ff ff       	call   c00006a0 <memmove>
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba50:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba53:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba57:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba5a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba5d:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba60:	83 c6 05             	add    esi,0x5
c000ba63:	78 07                	js     c000ba6c <prepare_data+0x152>
c000ba65:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba68:	39 cf                	cmp    edi,ecx
c000ba6a:	7e 04                	jle    c000ba70 <prepare_data+0x156>
c000ba6c:	89 ce                	mov    esi,ecx
c000ba6e:	29 c6                	sub    esi,eax
c000ba70:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba73:	51                   	push   ecx
c000ba74:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba7b:	51                   	push   ecx
c000ba7c:	6a 00                	push   0x0
c000ba7e:	50                   	push   eax
c000ba7f:	e8 18 4d ff ff       	call   c000079c <memset>
c000ba84:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba87:	83 c4 10             	add    esp,0x10
c000ba8a:	31 c0                	xor    eax,eax
c000ba8c:	83 c4 1c             	add    esp,0x1c
c000ba8f:	5b                   	pop    ebx
c000ba90:	5e                   	pop    esi
c000ba91:	5f                   	pop    edi
c000ba92:	5d                   	pop    ebp
c000ba93:	c3                   	ret    

c000ba94 <sinc_multichan_vari_process>:
c000ba94:	55                   	push   ebp
c000ba95:	ba 05 00 00 00       	mov    edx,0x5
c000ba9a:	57                   	push   edi
c000ba9b:	56                   	push   esi
c000ba9c:	53                   	push   ebx
c000ba9d:	83 ec 4c             	sub    esp,0x4c
c000baa0:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000baa4:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000baa8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000baab:	85 db                	test   ebx,ebx
c000baad:	0f 84 9b 06 00 00    	je     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bab3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bab6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bab9:	0f af c5             	imul   eax,ebp
c000babc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000babf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bac2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bac9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bad0:	0f af c5             	imul   eax,ebp
c000bad3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bad6:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bad9:	8b 06                	mov    eax,DWORD PTR [esi]
c000badb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000badf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bae3:	68 00 00 70 3f       	push   0x3f700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 90 d1 01 00       	call   c0028c87 <__ltdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 88 47 06 00 00    	js     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb07:	68 00 00 70 40       	push   0x40700000
c000bb0c:	6a 00                	push   0x0
c000bb0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb16:	e8 4e d1 01 00       	call   c0028c69 <__gtdf2>
c000bb1b:	83 c4 10             	add    esp,0x10
c000bb1e:	ba 16 00 00 00       	mov    edx,0x16
c000bb23:	85 c0                	test   eax,eax
c000bb25:	0f 8f 23 06 00 00    	jg     c000c14e <sinc_multichan_vari_process+0x6ba>
c000bb2b:	83 ec 0c             	sub    esp,0xc
c000bb2e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb31:	e8 e5 ce 01 00       	call   c0028a1b <__floatsidf>
c000bb36:	83 c4 10             	add    esp,0x10
c000bb39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb41:	68 00 00 00 40       	push   0x40000000
c000bb46:	6a 00                	push   0x0
c000bb48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb50:	e8 e6 c1 01 00       	call   c0027d3b <__adddf3>
c000bb55:	59                   	pop    ecx
c000bb56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb5a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb5e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb61:	e8 b5 ce 01 00       	call   c0028a1b <__floatsidf>
c000bb66:	83 c4 10             	add    esp,0x10
c000bb69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb71:	52                   	push   edx
c000bb72:	50                   	push   eax
c000bb73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7b:	e8 1c cb 01 00       	call   c002869c <__divdf3>
c000bb80:	83 c4 10             	add    esp,0x10
c000bb83:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb87:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb8b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb8e:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bba9:	e8 bb d0 01 00       	call   c0028c69 <__gtdf2>
c000bbae:	83 c4 10             	add    esp,0x10
c000bbb1:	85 c0                	test   eax,eax
c000bbb3:	7e 2d                	jle    c000bbe2 <sinc_multichan_vari_process+0x14e>
c000bbb5:	68 00 00 f0 3f       	push   0x3ff00000
c000bbba:	6a 00                	push   0x0
c000bbbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbc4:	e8 be d0 01 00       	call   c0028c87 <__ltdf2>
c000bbc9:	83 c4 10             	add    esp,0x10
c000bbcc:	85 c0                	test   eax,eax
c000bbce:	79 4d                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbd4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbdc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbe0:	eb 1b                	jmp    c000bbfd <sinc_multichan_vari_process+0x169>
c000bbe2:	68 00 00 f0 3f       	push   0x3ff00000
c000bbe7:	6a 00                	push   0x0
c000bbe9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbf1:	e8 91 d0 01 00       	call   c0028c87 <__ltdf2>
c000bbf6:	83 c4 10             	add    esp,0x10
c000bbf9:	85 c0                	test   eax,eax
c000bbfb:	79 20                	jns    c000bc1d <sinc_multichan_vari_process+0x189>
c000bbfd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc0d:	e8 8a ca 01 00       	call   c002869c <__divdf3>
c000bc12:	83 c4 10             	add    esp,0x10
c000bc15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc1d:	50                   	push   eax
c000bc1e:	50                   	push   eax
c000bc1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc27:	e8 14 d2 01 00       	call   c0028e40 <lrint>
c000bc2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc2f:	40                   	inc    eax
c000bc30:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc34:	0f af c5             	imul   eax,ebp
c000bc37:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc3b:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	58                   	pop    eax
c000bc43:	5a                   	pop    edx
c000bc44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc4c:	e8 ef d1 01 00       	call   c0028e40 <lrint>
c000bc51:	83 ec 0c             	sub    esp,0xc
c000bc54:	50                   	push   eax
c000bc55:	e8 c1 cd 01 00       	call   c0028a1b <__floatsidf>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc65:	52                   	push   edx
c000bc66:	50                   	push   eax
c000bc67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc6f:	e8 18 c7 01 00       	call   c002838c <__subdf3>
c000bc74:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc78:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc7c:	83 c4 20             	add    esp,0x20
c000bc7f:	6a 00                	push   0x0
c000bc81:	6a 00                	push   0x0
c000bc83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc8b:	e8 f7 cf 01 00       	call   c0028c87 <__ltdf2>
c000bc90:	83 c4 10             	add    esp,0x10
c000bc93:	85 c0                	test   eax,eax
c000bc95:	79 1f                	jns    c000bcb6 <sinc_multichan_vari_process+0x222>
c000bc97:	68 00 00 f0 3f       	push   0x3ff00000
c000bc9c:	6a 00                	push   0x0
c000bc9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bca6:	e8 90 c0 01 00       	call   c0027d3b <__adddf3>
c000bcab:	83 c4 10             	add    esp,0x10
c000bcae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bcb6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bcb9:	83 ec 10             	sub    esp,0x10
c000bcbc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bcc0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bcc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bccb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcd3:	e8 b4 c6 01 00       	call   c002838c <__subdf3>
c000bcd8:	83 c4 18             	add    esp,0x18
c000bcdb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcdf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bce3:	52                   	push   edx
c000bce4:	50                   	push   eax
c000bce5:	e8 56 d1 01 00       	call   c0028e40 <lrint>
c000bcea:	0f af e8             	imul   ebp,eax
c000bced:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcf1:	01 e8                	add    eax,ebp
c000bcf3:	99                   	cdq    
c000bcf4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcf7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd02:	68 00 00 f0 3f       	push   0x3ff00000
c000bd07:	6a 00                	push   0x0
c000bd09:	e8 8e c9 01 00       	call   c002869c <__divdf3>
c000bd0e:	83 c4 10             	add    esp,0x10
c000bd11:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd15:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd19:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bd1e:	68 23 42 92 0c       	push   0xc924223
c000bd23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd2b:	e8 0b c0 01 00       	call   c0027d3b <__adddf3>
c000bd30:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd34:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd38:	83 c4 20             	add    esp,0x20
c000bd3b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd43:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd4b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd4e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd51:	7d 50                	jge    c000bda3 <sinc_multichan_vari_process+0x30f>
c000bd53:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd56:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd59:	01 c8                	add    eax,ecx
c000bd5b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd5e:	99                   	cdq    
c000bd5f:	f7 f9                	idiv   ecx
c000bd61:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd65:	7d 0c                	jge    c000bd73 <sinc_multichan_vari_process+0x2df>
c000bd67:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd6a:	85 ed                	test   ebp,ebp
c000bd6c:	79 6b                	jns    c000bdd9 <sinc_multichan_vari_process+0x345>
c000bd6e:	e9 e6 00 00 00       	jmp    c000be59 <sinc_multichan_vari_process+0x3c5>
c000bd73:	50                   	push   eax
c000bd74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd78:	57                   	push   edi
c000bd79:	53                   	push   ebx
c000bd7a:	e8 9b fb ff ff       	call   c000b91a <prepare_data>
c000bd7f:	83 c4 10             	add    esp,0x10
c000bd82:	89 c2                	mov    edx,eax
c000bd84:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd87:	85 c0                	test   eax,eax
c000bd89:	0f 85 bf 03 00 00    	jne    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bd8f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd92:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd95:	01 c8                	add    eax,ecx
c000bd97:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd9a:	99                   	cdq    
c000bd9b:	f7 f9                	idiv   ecx
c000bd9d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bda1:	7c c4                	jl     c000bd67 <sinc_multichan_vari_process+0x2d3>
c000bda3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bda7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bdab:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bdae:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bdb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bdb9:	89 06                	mov    DWORD PTR [esi],eax
c000bdbb:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bdbe:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bdc1:	99                   	cdq    
c000bdc2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdc5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bdc8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bdcb:	99                   	cdq    
c000bdcc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdcf:	31 d2                	xor    edx,edx
c000bdd1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdd4:	e9 75 03 00 00       	jmp    c000c14e <sinc_multichan_vari_process+0x6ba>
c000bdd9:	83 ec 0c             	sub    esp,0xc
c000bddc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bddf:	e8 37 cc 01 00       	call   c0028a1b <__floatsidf>
c000bde4:	83 c4 10             	add    esp,0x10
c000bde7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	e8 37 bf 01 00       	call   c0027d3b <__adddf3>
c000be04:	83 c4 10             	add    esp,0x10
c000be07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000be0b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000be0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000be17:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	e8 17 bf 01 00       	call   c0027d3b <__adddf3>
c000be24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be27:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be2f:	e8 e7 cb 01 00       	call   c0028a1b <__floatsidf>
c000be34:	83 c4 10             	add    esp,0x10
c000be37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3f:	52                   	push   edx
c000be40:	50                   	push   eax
c000be41:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be49:	e8 37 ce 01 00       	call   c0028c85 <__gedf2>
c000be4e:	83 c4 10             	add    esp,0x10
c000be51:	85 c0                	test   eax,eax
c000be53:	0f 89 4a ff ff ff    	jns    c000bda3 <sinc_multichan_vari_process+0x30f>
c000be59:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be5d:	0f 8e ed 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000be63:	83 ec 10             	sub    esp,0x10
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be6f:	ff 36                	push   DWORD PTR [esi]
c000be71:	e8 16 c5 01 00       	call   c002838c <__subdf3>
c000be76:	83 c4 18             	add    esp,0x18
c000be79:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be7d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be81:	52                   	push   edx
c000be82:	50                   	push   eax
c000be83:	e8 98 cf 01 00       	call   c0028e20 <fabs>
c000be88:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be90:	83 c4 10             	add    esp,0x10
c000be93:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be98:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bea5:	e8 bf cd 01 00       	call   c0028c69 <__gtdf2>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	85 c0                	test   eax,eax
c000beaf:	0f 8e 9b 00 00 00    	jle    c000bf50 <sinc_multichan_vari_process+0x4bc>
c000beb5:	8b 06                	mov    eax,DWORD PTR [esi]
c000beb7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000beba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bebe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bec2:	52                   	push   edx
c000bec3:	50                   	push   eax
c000bec4:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bec7:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000beca:	e8 bd c4 01 00       	call   c002838c <__subdf3>
c000becf:	59                   	pop    ecx
c000bed0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bed4:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bed8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bedb:	e8 3b cb 01 00       	call   c0028a1b <__floatsidf>
c000bee0:	83 c4 10             	add    esp,0x10
c000bee3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bee7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beeb:	52                   	push   edx
c000beec:	50                   	push   eax
c000beed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef5:	e8 be c4 01 00       	call   c00283b8 <__muldf3>
c000befa:	5d                   	pop    ebp
c000befb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beff:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bf03:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bf06:	e8 10 cb 01 00       	call   c0028a1b <__floatsidf>
c000bf0b:	83 c4 10             	add    esp,0x10
c000bf0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf12:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf16:	52                   	push   edx
c000bf17:	50                   	push   eax
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf20:	e8 77 c7 01 00       	call   c002869c <__divdf3>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf2c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf38:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf3c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf40:	e8 f6 bd 01 00       	call   c0027d3b <__adddf3>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf4c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf50:	83 ec 0c             	sub    esp,0xc
c000bf53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf56:	e8 c0 ca 01 00       	call   c0028a1b <__floatsidf>
c000bf5b:	83 c4 10             	add    esp,0x10
c000bf5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf62:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf76:	e8 0c cd 01 00       	call   c0028c87 <__ltdf2>
c000bf7b:	83 c4 10             	add    esp,0x10
c000bf7e:	85 c0                	test   eax,eax
c000bf80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf84:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf88:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf8c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf90:	78 10                	js     c000bfa2 <sinc_multichan_vari_process+0x50e>
c000bf92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf96:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf9a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf9e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bfa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb2:	e8 01 c4 01 00       	call   c00283b8 <__muldf3>
c000bfb7:	59                   	pop    ecx
c000bfb8:	5d                   	pop    ebp
c000bfb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bfbd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bfc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfc9:	e8 25 f9 ff ff       	call   c000b8f3 <double_to_fp>
c000bfce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd2:	89 c5                	mov    ebp,eax
c000bfd4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfd8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfe0:	e8 d3 c3 01 00       	call   c00283b8 <__muldf3>
c000bfe5:	83 c4 18             	add    esp,0x18
c000bfe8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bff0:	52                   	push   edx
c000bff1:	50                   	push   eax
c000bff2:	e8 fc f8 ff ff       	call   c000b8f3 <double_to_fp>
c000bff7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bffa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bffe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c001:	8d 04 90             	lea    eax,[eax+edx*4]
c000c004:	50                   	push   eax
c000c005:	50                   	push   eax
c000c006:	50                   	push   eax
c000c007:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c00a:	e8 0c ca 01 00       	call   c0028a1b <__floatsidf>
c000c00f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c013:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000c017:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c023:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c027:	e8 70 c6 01 00       	call   c002869c <__divdf3>
c000c02c:	83 c4 1c             	add    esp,0x1c
c000c02f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c033:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c037:	52                   	push   edx
c000c038:	89 ea                	mov    edx,ebp
c000c03a:	50                   	push   eax
c000c03b:	89 d8                	mov    eax,ebx
c000c03d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c040:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c044:	e8 69 ed ff ff       	call   c000adb2 <calc_output_multi>
c000c049:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c04c:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c04f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c053:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c057:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c05f:	e8 38 c6 01 00       	call   c002869c <__divdf3>
c000c064:	83 c4 10             	add    esp,0x10
c000c067:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c06b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c077:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c07f:	e8 b7 bc 01 00       	call   c0027d3b <__adddf3>
c000c084:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c088:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c08c:	83 c4 28             	add    esp,0x28
c000c08f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c093:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c097:	e8 a4 cd 01 00       	call   c0028e40 <lrint>
c000c09c:	83 ec 0c             	sub    esp,0xc
c000c09f:	50                   	push   eax
c000c0a0:	e8 76 c9 01 00       	call   c0028a1b <__floatsidf>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0ac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b0:	52                   	push   edx
c000c0b1:	50                   	push   eax
c000c0b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0b6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0ba:	e8 cd c2 01 00       	call   c002838c <__subdf3>
c000c0bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0c7:	83 c4 20             	add    esp,0x20
c000c0ca:	6a 00                	push   0x0
c000c0cc:	6a 00                	push   0x0
c000c0ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d6:	e8 ac cb 01 00       	call   c0028c87 <__ltdf2>
c000c0db:	83 c4 10             	add    esp,0x10
c000c0de:	85 c0                	test   eax,eax
c000c0e0:	79 20                	jns    c000c102 <sinc_multichan_vari_process+0x66e>
c000c0e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f2:	e8 44 bc 01 00       	call   c0027d3b <__adddf3>
c000c0f7:	83 c4 10             	add    esp,0x10
c000c0fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c102:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c105:	83 ec 10             	sub    esp,0x10
c000c108:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c10c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c10f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c117:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c11f:	e8 68 c2 01 00       	call   c002838c <__subdf3>
c000c124:	83 c4 18             	add    esp,0x18
c000c127:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c12b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c12f:	52                   	push   edx
c000c130:	50                   	push   eax
c000c131:	e8 0a cd 01 00       	call   c0028e40 <lrint>
c000c136:	0f af e8             	imul   ebp,eax
c000c139:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	01 e8                	add    eax,ebp
c000c142:	99                   	cdq    
c000c143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c149:	e9 fd fb ff ff       	jmp    c000bd4b <sinc_multichan_vari_process+0x2b7>
c000c14e:	83 c4 4c             	add    esp,0x4c
c000c151:	89 d0                	mov    eax,edx
c000c153:	5b                   	pop    ebx
c000c154:	5e                   	pop    esi
c000c155:	5f                   	pop    edi
c000c156:	5d                   	pop    ebp
c000c157:	c3                   	ret    

c000c158 <sinc_hex_vari_process>:
c000c158:	55                   	push   ebp
c000c159:	ba 05 00 00 00       	mov    edx,0x5
c000c15e:	57                   	push   edi
c000c15f:	56                   	push   esi
c000c160:	53                   	push   ebx
c000c161:	83 ec 4c             	sub    esp,0x4c
c000c164:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c168:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c16c:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c16f:	85 db                	test   ebx,ebx
c000c171:	0f 84 9c 06 00 00    	je     c000c813 <sinc_hex_vari_process+0x6bb>
c000c177:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c17a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c17d:	0f af c7             	imul   eax,edi
c000c180:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c183:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c186:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c18d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c194:	0f af c7             	imul   eax,edi
c000c197:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c19a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c19d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c1a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c1a8:	68 00 00 70 3f       	push   0x3f700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 cb ca 01 00       	call   c0028c87 <__ltdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 88 47 06 00 00    	js     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1cc:	68 00 00 70 40       	push   0x40700000
c000c1d1:	6a 00                	push   0x0
c000c1d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1db:	e8 89 ca 01 00       	call   c0028c69 <__gtdf2>
c000c1e0:	83 c4 10             	add    esp,0x10
c000c1e3:	ba 16 00 00 00       	mov    edx,0x16
c000c1e8:	85 c0                	test   eax,eax
c000c1ea:	0f 8f 23 06 00 00    	jg     c000c813 <sinc_hex_vari_process+0x6bb>
c000c1f0:	83 ec 0c             	sub    esp,0xc
c000c1f3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1f6:	e8 20 c8 01 00       	call   c0028a1b <__floatsidf>
c000c1fb:	83 c4 10             	add    esp,0x10
c000c1fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c202:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c206:	68 00 00 00 40       	push   0x40000000
c000c20b:	6a 00                	push   0x0
c000c20d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c211:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c215:	e8 21 bb 01 00       	call   c0027d3b <__adddf3>
c000c21a:	59                   	pop    ecx
c000c21b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c21f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c223:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c226:	e8 f0 c7 01 00       	call   c0028a1b <__floatsidf>
c000c22b:	83 c4 10             	add    esp,0x10
c000c22e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c236:	52                   	push   edx
c000c237:	50                   	push   eax
c000c238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c240:	e8 57 c4 01 00       	call   c002869c <__divdf3>
c000c245:	83 c4 10             	add    esp,0x10
c000c248:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c24c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c250:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c253:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c256:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c262:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c266:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26e:	e8 f6 c9 01 00       	call   c0028c69 <__gtdf2>
c000c273:	83 c4 10             	add    esp,0x10
c000c276:	85 c0                	test   eax,eax
c000c278:	7e 2d                	jle    c000c2a7 <sinc_hex_vari_process+0x14f>
c000c27a:	68 00 00 f0 3f       	push   0x3ff00000
c000c27f:	6a 00                	push   0x0
c000c281:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c285:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c289:	e8 f9 c9 01 00       	call   c0028c87 <__ltdf2>
c000c28e:	83 c4 10             	add    esp,0x10
c000c291:	85 c0                	test   eax,eax
c000c293:	79 4d                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c299:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c29d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c2a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c2a5:	eb 1b                	jmp    c000c2c2 <sinc_hex_vari_process+0x16a>
c000c2a7:	68 00 00 f0 3f       	push   0x3ff00000
c000c2ac:	6a 00                	push   0x0
c000c2ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2b6:	e8 cc c9 01 00       	call   c0028c87 <__ltdf2>
c000c2bb:	83 c4 10             	add    esp,0x10
c000c2be:	85 c0                	test   eax,eax
c000c2c0:	79 20                	jns    c000c2e2 <sinc_hex_vari_process+0x18a>
c000c2c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d2:	e8 c5 c3 01 00       	call   c002869c <__divdf3>
c000c2d7:	83 c4 10             	add    esp,0x10
c000c2da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e2:	50                   	push   eax
c000c2e3:	50                   	push   eax
c000c2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ec:	e8 4f cb 01 00       	call   c0028e40 <lrint>
c000c2f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2f4:	40                   	inc    eax
c000c2f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2f9:	0f af c7             	imul   eax,edi
c000c2fc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	58                   	pop    eax
c000c308:	5a                   	pop    edx
c000c309:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c311:	e8 2a cb 01 00       	call   c0028e40 <lrint>
c000c316:	83 ec 0c             	sub    esp,0xc
c000c319:	50                   	push   eax
c000c31a:	e8 fc c6 01 00       	call   c0028a1b <__floatsidf>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c32a:	52                   	push   edx
c000c32b:	50                   	push   eax
c000c32c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c330:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c334:	e8 53 c0 01 00       	call   c002838c <__subdf3>
c000c339:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c341:	83 c4 20             	add    esp,0x20
c000c344:	6a 00                	push   0x0
c000c346:	6a 00                	push   0x0
c000c348:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c350:	e8 32 c9 01 00       	call   c0028c87 <__ltdf2>
c000c355:	83 c4 10             	add    esp,0x10
c000c358:	85 c0                	test   eax,eax
c000c35a:	79 1f                	jns    c000c37b <sinc_hex_vari_process+0x223>
c000c35c:	68 00 00 f0 3f       	push   0x3ff00000
c000c361:	6a 00                	push   0x0
c000c363:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c36b:	e8 cb b9 01 00       	call   c0027d3b <__adddf3>
c000c370:	83 c4 10             	add    esp,0x10
c000c373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c37b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c37e:	83 ec 10             	sub    esp,0x10
c000c381:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c385:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c388:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c38c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c390:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c394:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c398:	e8 ef bf 01 00       	call   c002838c <__subdf3>
c000c39d:	83 c4 18             	add    esp,0x18
c000c3a0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3a4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3a8:	52                   	push   edx
c000c3a9:	50                   	push   eax
c000c3aa:	e8 91 ca 01 00       	call   c0028e40 <lrint>
c000c3af:	0f af f8             	imul   edi,eax
c000c3b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3b6:	01 f8                	add    eax,edi
c000c3b8:	99                   	cdq    
c000c3b9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c3bc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c3bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3c7:	68 00 00 f0 3f       	push   0x3ff00000
c000c3cc:	6a 00                	push   0x0
c000c3ce:	e8 c9 c2 01 00       	call   c002869c <__divdf3>
c000c3d3:	83 c4 10             	add    esp,0x10
c000c3d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3de:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3e3:	68 23 42 92 0c       	push   0xc924223
c000c3e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ec:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3f0:	e8 46 b9 01 00       	call   c0027d3b <__adddf3>
c000c3f5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3f9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3fd:	83 c4 20             	add    esp,0x20
c000c400:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c408:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c410:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c413:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c416:	7d 50                	jge    c000c468 <sinc_hex_vari_process+0x310>
c000c418:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c41b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c41e:	01 c8                	add    eax,ecx
c000c420:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c423:	99                   	cdq    
c000c424:	f7 f9                	idiv   ecx
c000c426:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c42a:	7d 0c                	jge    c000c438 <sinc_hex_vari_process+0x2e0>
c000c42c:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c42f:	85 ff                	test   edi,edi
c000c431:	79 6c                	jns    c000c49f <sinc_hex_vari_process+0x347>
c000c433:	e9 e7 00 00 00       	jmp    c000c51f <sinc_hex_vari_process+0x3c7>
c000c438:	50                   	push   eax
c000c439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c43d:	56                   	push   esi
c000c43e:	53                   	push   ebx
c000c43f:	e8 d6 f4 ff ff       	call   c000b91a <prepare_data>
c000c444:	83 c4 10             	add    esp,0x10
c000c447:	89 c2                	mov    edx,eax
c000c449:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c44c:	85 c0                	test   eax,eax
c000c44e:	0f 85 bf 03 00 00    	jne    c000c813 <sinc_hex_vari_process+0x6bb>
c000c454:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c45a:	01 c8                	add    eax,ecx
c000c45c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c45f:	99                   	cdq    
c000c460:	f7 f9                	idiv   ecx
c000c462:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c466:	7c c4                	jl     c000c42c <sinc_hex_vari_process+0x2d4>
c000c468:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c46c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c470:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c473:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c47a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c47e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c481:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c484:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c487:	99                   	cdq    
c000c488:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c48b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c48e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c491:	99                   	cdq    
c000c492:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c495:	31 d2                	xor    edx,edx
c000c497:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c49a:	e9 74 03 00 00       	jmp    c000c813 <sinc_hex_vari_process+0x6bb>
c000c49f:	83 ec 0c             	sub    esp,0xc
c000c4a2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c4a5:	e8 71 c5 01 00       	call   c0028a1b <__floatsidf>
c000c4aa:	83 c4 10             	add    esp,0x10
c000c4ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c5:	e8 71 b8 01 00       	call   c0027d3b <__adddf3>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e5:	e8 51 b8 01 00       	call   c0027d3b <__adddf3>
c000c4ea:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f5:	e8 21 c5 01 00       	call   c0028a1b <__floatsidf>
c000c4fa:	83 c4 10             	add    esp,0x10
c000c4fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	52                   	push   edx
c000c506:	50                   	push   eax
c000c507:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50f:	e8 71 c7 01 00       	call   c0028c85 <__gedf2>
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	85 c0                	test   eax,eax
c000c519:	0f 89 49 ff ff ff    	jns    c000c468 <sinc_hex_vari_process+0x310>
c000c51f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c523:	0f 8e ef 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c529:	83 ec 10             	sub    esp,0x10
c000c52c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c52f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c532:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c535:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c538:	e8 4f be 01 00       	call   c002838c <__subdf3>
c000c53d:	83 c4 18             	add    esp,0x18
c000c540:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c544:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c548:	52                   	push   edx
c000c549:	50                   	push   eax
c000c54a:	e8 d1 c8 01 00       	call   c0028e20 <fabs>
c000c54f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c553:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c557:	83 c4 10             	add    esp,0x10
c000c55a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c55f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c564:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c568:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c56c:	e8 f8 c6 01 00       	call   c0028c69 <__gtdf2>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	85 c0                	test   eax,eax
c000c576:	0f 8e 9c 00 00 00    	jle    c000c618 <sinc_hex_vari_process+0x4c0>
c000c57c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c57f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c582:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c586:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c58a:	52                   	push   edx
c000c58b:	50                   	push   eax
c000c58c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c58f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c592:	e8 f5 bd 01 00       	call   c002838c <__subdf3>
c000c597:	59                   	pop    ecx
c000c598:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c59c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c5a3:	e8 73 c4 01 00       	call   c0028a1b <__floatsidf>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5b3:	52                   	push   edx
c000c5b4:	50                   	push   eax
c000c5b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5bd:	e8 f6 bd 01 00       	call   c00283b8 <__muldf3>
c000c5c2:	5f                   	pop    edi
c000c5c3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5c7:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5cb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5ce:	e8 48 c4 01 00       	call   c0028a1b <__floatsidf>
c000c5d3:	83 c4 10             	add    esp,0x10
c000c5d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5de:	52                   	push   edx
c000c5df:	50                   	push   eax
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e8:	e8 af c0 01 00       	call   c002869c <__divdf3>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c600:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c604:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c608:	e8 2e b7 01 00       	call   c0027d3b <__adddf3>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c614:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c618:	83 ec 0c             	sub    esp,0xc
c000c61b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c61e:	e8 f8 c3 01 00       	call   c0028a1b <__floatsidf>
c000c623:	83 c4 10             	add    esp,0x10
c000c626:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c62e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c632:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c63e:	e8 44 c6 01 00       	call   c0028c87 <__ltdf2>
c000c643:	83 c4 10             	add    esp,0x10
c000c646:	85 c0                	test   eax,eax
c000c648:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c64c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c650:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c654:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c658:	78 10                	js     c000c66a <sinc_hex_vari_process+0x512>
c000c65a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c65e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c662:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c666:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67a:	e8 39 bd 01 00       	call   c00283b8 <__muldf3>
c000c67f:	59                   	pop    ecx
c000c680:	5f                   	pop    edi
c000c681:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c685:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c689:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c68d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c691:	e8 5d f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c696:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69a:	89 c7                	mov    edi,eax
c000c69c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6a8:	e8 0b bd 01 00       	call   c00283b8 <__muldf3>
c000c6ad:	83 c4 18             	add    esp,0x18
c000c6b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6b8:	52                   	push   edx
c000c6b9:	50                   	push   eax
c000c6ba:	e8 34 f2 ff ff       	call   c000b8f3 <double_to_fp>
c000c6bf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c6c2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6c6:	83 c4 0c             	add    esp,0xc
c000c6c9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6cc:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6cf:	50                   	push   eax
c000c6d0:	50                   	push   eax
c000c6d1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6d4:	e8 42 c3 01 00       	call   c0028a1b <__floatsidf>
c000c6d9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6dd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6f1:	e8 a6 bf 01 00       	call   c002869c <__divdf3>
c000c6f6:	83 c4 18             	add    esp,0x18
c000c6f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c701:	52                   	push   edx
c000c702:	89 fa                	mov    edx,edi
c000c704:	50                   	push   eax
c000c705:	89 d8                	mov    eax,ebx
c000c707:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c70b:	e8 50 de ff ff       	call   c000a560 <calc_output_hex>
c000c710:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c714:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c718:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c720:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c724:	e8 73 bf 01 00       	call   c002869c <__divdf3>
c000c729:	83 c4 10             	add    esp,0x10
c000c72c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c730:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c73c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c740:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c744:	e8 f2 b5 01 00       	call   c0027d3b <__adddf3>
c000c749:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c74d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c751:	83 c4 18             	add    esp,0x18
c000c754:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c758:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c75c:	e8 df c6 01 00       	call   c0028e40 <lrint>
c000c761:	83 ec 0c             	sub    esp,0xc
c000c764:	50                   	push   eax
c000c765:	e8 b1 c2 01 00       	call   c0028a1b <__floatsidf>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c771:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c775:	52                   	push   edx
c000c776:	50                   	push   eax
c000c777:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c77f:	e8 08 bc 01 00       	call   c002838c <__subdf3>
c000c784:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c788:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c78c:	83 c4 20             	add    esp,0x20
c000c78f:	6a 00                	push   0x0
c000c791:	6a 00                	push   0x0
c000c793:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c797:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79b:	e8 e7 c4 01 00       	call   c0028c87 <__ltdf2>
c000c7a0:	83 c4 10             	add    esp,0x10
c000c7a3:	85 c0                	test   eax,eax
c000c7a5:	79 20                	jns    c000c7c7 <sinc_hex_vari_process+0x66f>
c000c7a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b7:	e8 7f b5 01 00       	call   c0027d3b <__adddf3>
c000c7bc:	83 c4 10             	add    esp,0x10
c000c7bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7c7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7ca:	83 ec 10             	sub    esp,0x10
c000c7cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7e4:	e8 a3 bb 01 00       	call   c002838c <__subdf3>
c000c7e9:	83 c4 18             	add    esp,0x18
c000c7ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7f4:	52                   	push   edx
c000c7f5:	50                   	push   eax
c000c7f6:	e8 45 c6 01 00       	call   c0028e40 <lrint>
c000c7fb:	0f af f8             	imul   edi,eax
c000c7fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c802:	83 c4 10             	add    esp,0x10
c000c805:	01 f8                	add    eax,edi
c000c807:	99                   	cdq    
c000c808:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c80e:	e9 fd fb ff ff       	jmp    c000c410 <sinc_hex_vari_process+0x2b8>
c000c813:	83 c4 4c             	add    esp,0x4c
c000c816:	89 d0                	mov    eax,edx
c000c818:	5b                   	pop    ebx
c000c819:	5e                   	pop    esi
c000c81a:	5f                   	pop    edi
c000c81b:	5d                   	pop    ebp
c000c81c:	c3                   	ret    

c000c81d <sinc_quad_vari_process>:
c000c81d:	55                   	push   ebp
c000c81e:	ba 05 00 00 00       	mov    edx,0x5
c000c823:	57                   	push   edi
c000c824:	56                   	push   esi
c000c825:	53                   	push   ebx
c000c826:	83 ec 4c             	sub    esp,0x4c
c000c829:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c82d:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c831:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c834:	85 db                	test   ebx,ebx
c000c836:	0f 84 9c 06 00 00    	je     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c83c:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c83f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c842:	0f af c7             	imul   eax,edi
c000c845:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c848:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c84b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c852:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c859:	0f af c7             	imul   eax,edi
c000c85c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c85f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c862:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c865:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c869:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c86d:	68 00 00 70 3f       	push   0x3f700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 06 c4 01 00       	call   c0028c87 <__ltdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 88 47 06 00 00    	js     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c891:	68 00 00 70 40       	push   0x40700000
c000c896:	6a 00                	push   0x0
c000c898:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c89c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8a0:	e8 c4 c3 01 00       	call   c0028c69 <__gtdf2>
c000c8a5:	83 c4 10             	add    esp,0x10
c000c8a8:	ba 16 00 00 00       	mov    edx,0x16
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	0f 8f 23 06 00 00    	jg     c000ced8 <sinc_quad_vari_process+0x6bb>
c000c8b5:	83 ec 0c             	sub    esp,0xc
c000c8b8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c8bb:	e8 5b c1 01 00       	call   c0028a1b <__floatsidf>
c000c8c0:	83 c4 10             	add    esp,0x10
c000c8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8cb:	68 00 00 00 40       	push   0x40000000
c000c8d0:	6a 00                	push   0x0
c000c8d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8da:	e8 5c b4 01 00       	call   c0027d3b <__adddf3>
c000c8df:	59                   	pop    ecx
c000c8e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8e4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8e8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8eb:	e8 2b c1 01 00       	call   c0028a1b <__floatsidf>
c000c8f0:	83 c4 10             	add    esp,0x10
c000c8f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8fb:	52                   	push   edx
c000c8fc:	50                   	push   eax
c000c8fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c901:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c905:	e8 92 bd 01 00       	call   c002869c <__divdf3>
c000c90a:	83 c4 10             	add    esp,0x10
c000c90d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c911:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c915:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c918:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c91b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c91f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c923:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c927:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c933:	e8 31 c3 01 00       	call   c0028c69 <__gtdf2>
c000c938:	83 c4 10             	add    esp,0x10
c000c93b:	85 c0                	test   eax,eax
c000c93d:	7e 2d                	jle    c000c96c <sinc_quad_vari_process+0x14f>
c000c93f:	68 00 00 f0 3f       	push   0x3ff00000
c000c944:	6a 00                	push   0x0
c000c946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c94e:	e8 34 c3 01 00       	call   c0028c87 <__ltdf2>
c000c953:	83 c4 10             	add    esp,0x10
c000c956:	85 c0                	test   eax,eax
c000c958:	79 4d                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c95e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c962:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c966:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c96a:	eb 1b                	jmp    c000c987 <sinc_quad_vari_process+0x16a>
c000c96c:	68 00 00 f0 3f       	push   0x3ff00000
c000c971:	6a 00                	push   0x0
c000c973:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c977:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c97b:	e8 07 c3 01 00       	call   c0028c87 <__ltdf2>
c000c980:	83 c4 10             	add    esp,0x10
c000c983:	85 c0                	test   eax,eax
c000c985:	79 20                	jns    c000c9a7 <sinc_quad_vari_process+0x18a>
c000c987:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c997:	e8 00 bd 01 00       	call   c002869c <__divdf3>
c000c99c:	83 c4 10             	add    esp,0x10
c000c99f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9a7:	50                   	push   eax
c000c9a8:	50                   	push   eax
c000c9a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b1:	e8 8a c4 01 00       	call   c0028e40 <lrint>
c000c9b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c9b9:	40                   	inc    eax
c000c9ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9be:	0f af c7             	imul   eax,edi
c000c9c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	58                   	pop    eax
c000c9cd:	5a                   	pop    edx
c000c9ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9d6:	e8 65 c4 01 00       	call   c0028e40 <lrint>
c000c9db:	83 ec 0c             	sub    esp,0xc
c000c9de:	50                   	push   eax
c000c9df:	e8 37 c0 01 00       	call   c0028a1b <__floatsidf>
c000c9e4:	83 c4 10             	add    esp,0x10
c000c9e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ef:	52                   	push   edx
c000c9f0:	50                   	push   eax
c000c9f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9f9:	e8 8e b9 01 00       	call   c002838c <__subdf3>
c000c9fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca02:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca06:	83 c4 20             	add    esp,0x20
c000ca09:	6a 00                	push   0x0
c000ca0b:	6a 00                	push   0x0
c000ca0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca15:	e8 6d c2 01 00       	call   c0028c87 <__ltdf2>
c000ca1a:	83 c4 10             	add    esp,0x10
c000ca1d:	85 c0                	test   eax,eax
c000ca1f:	79 1f                	jns    c000ca40 <sinc_quad_vari_process+0x223>
c000ca21:	68 00 00 f0 3f       	push   0x3ff00000
c000ca26:	6a 00                	push   0x0
c000ca28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca30:	e8 06 b3 01 00       	call   c0027d3b <__adddf3>
c000ca35:	83 c4 10             	add    esp,0x10
c000ca38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca3c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca43:	83 ec 10             	sub    esp,0x10
c000ca46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca4a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca59:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca5d:	e8 2a b9 01 00       	call   c002838c <__subdf3>
c000ca62:	83 c4 18             	add    esp,0x18
c000ca65:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca69:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca6d:	52                   	push   edx
c000ca6e:	50                   	push   eax
c000ca6f:	e8 cc c3 01 00       	call   c0028e40 <lrint>
c000ca74:	0f af f8             	imul   edi,eax
c000ca77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca7b:	01 f8                	add    eax,edi
c000ca7d:	99                   	cdq    
c000ca7e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca81:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca88:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca8c:	68 00 00 f0 3f       	push   0x3ff00000
c000ca91:	6a 00                	push   0x0
c000ca93:	e8 04 bc 01 00       	call   c002869c <__divdf3>
c000ca98:	83 c4 10             	add    esp,0x10
c000ca9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000caa3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000caa8:	68 23 42 92 0c       	push   0xc924223
c000caad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cab5:	e8 81 b2 01 00       	call   c0027d3b <__adddf3>
c000caba:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cabe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cac2:	83 c4 20             	add    esp,0x20
c000cac5:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cacd:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cad5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cad8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cadb:	7d 50                	jge    c000cb2d <sinc_quad_vari_process+0x310>
c000cadd:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cae0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cae3:	01 c8                	add    eax,ecx
c000cae5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae8:	99                   	cdq    
c000cae9:	f7 f9                	idiv   ecx
c000caeb:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caef:	7d 0c                	jge    c000cafd <sinc_quad_vari_process+0x2e0>
c000caf1:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000caf4:	85 ff                	test   edi,edi
c000caf6:	79 6c                	jns    c000cb64 <sinc_quad_vari_process+0x347>
c000caf8:	e9 e7 00 00 00       	jmp    c000cbe4 <sinc_quad_vari_process+0x3c7>
c000cafd:	50                   	push   eax
c000cafe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb02:	56                   	push   esi
c000cb03:	53                   	push   ebx
c000cb04:	e8 11 ee ff ff       	call   c000b91a <prepare_data>
c000cb09:	83 c4 10             	add    esp,0x10
c000cb0c:	89 c2                	mov    edx,eax
c000cb0e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cb11:	85 c0                	test   eax,eax
c000cb13:	0f 85 bf 03 00 00    	jne    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb19:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cb1c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cb1f:	01 c8                	add    eax,ecx
c000cb21:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb24:	99                   	cdq    
c000cb25:	f7 f9                	idiv   ecx
c000cb27:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb2b:	7c c4                	jl     c000caf1 <sinc_quad_vari_process+0x2d4>
c000cb2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb35:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb38:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb3f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb43:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb46:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb49:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb4c:	99                   	cdq    
c000cb4d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb50:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb53:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb56:	99                   	cdq    
c000cb57:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb5a:	31 d2                	xor    edx,edx
c000cb5c:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb5f:	e9 74 03 00 00       	jmp    c000ced8 <sinc_quad_vari_process+0x6bb>
c000cb64:	83 ec 0c             	sub    esp,0xc
c000cb67:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb6a:	e8 ac be 01 00       	call   c0028a1b <__floatsidf>
c000cb6f:	83 c4 10             	add    esp,0x10
c000cb72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8a:	e8 ac b1 01 00       	call   c0027d3b <__adddf3>
c000cb8f:	83 c4 10             	add    esp,0x10
c000cb92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb96:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cba2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbaa:	e8 8c b1 01 00       	call   c0027d3b <__adddf3>
c000cbaf:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cbb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbb6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbba:	e8 5c be 01 00       	call   c0028a1b <__floatsidf>
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbca:	52                   	push   edx
c000cbcb:	50                   	push   eax
c000cbcc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd4:	e8 ac c0 01 00       	call   c0028c85 <__gedf2>
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	85 c0                	test   eax,eax
c000cbde:	0f 89 49 ff ff ff    	jns    c000cb2d <sinc_quad_vari_process+0x310>
c000cbe4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbe8:	0f 8e ef 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cbee:	83 ec 10             	sub    esp,0x10
c000cbf1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf4:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbfa:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbfd:	e8 8a b7 01 00       	call   c002838c <__subdf3>
c000cc02:	83 c4 18             	add    esp,0x18
c000cc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc0d:	52                   	push   edx
c000cc0e:	50                   	push   eax
c000cc0f:	e8 0c c2 01 00       	call   c0028e20 <fabs>
c000cc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cc1c:	83 c4 10             	add    esp,0x10
c000cc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc31:	e8 33 c0 01 00       	call   c0028c69 <__gtdf2>
c000cc36:	83 c4 10             	add    esp,0x10
c000cc39:	85 c0                	test   eax,eax
c000cc3b:	0f 8e 9c 00 00 00    	jle    c000ccdd <sinc_quad_vari_process+0x4c0>
c000cc41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc44:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc4b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc4f:	52                   	push   edx
c000cc50:	50                   	push   eax
c000cc51:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc54:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc57:	e8 30 b7 01 00       	call   c002838c <__subdf3>
c000cc5c:	59                   	pop    ecx
c000cc5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc61:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc65:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc68:	e8 ae bd 01 00       	call   c0028a1b <__floatsidf>
c000cc6d:	83 c4 10             	add    esp,0x10
c000cc70:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc74:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc78:	52                   	push   edx
c000cc79:	50                   	push   eax
c000cc7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc82:	e8 31 b7 01 00       	call   c00283b8 <__muldf3>
c000cc87:	5f                   	pop    edi
c000cc88:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc8c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc90:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc93:	e8 83 bd 01 00       	call   c0028a1b <__floatsidf>
c000cc98:	83 c4 10             	add    esp,0x10
c000cc9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc9f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cca3:	52                   	push   edx
c000cca4:	50                   	push   eax
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccad:	e8 ea b9 01 00       	call   c002869c <__divdf3>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccb9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ccc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cccd:	e8 69 b0 01 00       	call   c0027d3b <__adddf3>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccd9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccdd:	83 ec 0c             	sub    esp,0xc
c000cce0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cce3:	e8 33 bd 01 00       	call   c0028a1b <__floatsidf>
c000cce8:	83 c4 10             	add    esp,0x10
c000cceb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd03:	e8 7f bf 01 00       	call   c0028c87 <__ltdf2>
c000cd08:	83 c4 10             	add    esp,0x10
c000cd0b:	85 c0                	test   eax,eax
c000cd0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cd11:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cd15:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cd19:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cd1d:	78 10                	js     c000cd2f <sinc_quad_vari_process+0x512>
c000cd1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cd23:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd27:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd2b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3f:	e8 74 b6 01 00       	call   c00283b8 <__muldf3>
c000cd44:	59                   	pop    ecx
c000cd45:	5f                   	pop    edi
c000cd46:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd56:	e8 98 eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd5f:	89 c7                	mov    edi,eax
c000cd61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd6d:	e8 46 b6 01 00       	call   c00283b8 <__muldf3>
c000cd72:	83 c4 18             	add    esp,0x18
c000cd75:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd7d:	52                   	push   edx
c000cd7e:	50                   	push   eax
c000cd7f:	e8 6f eb ff ff       	call   c000b8f3 <double_to_fp>
c000cd84:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd87:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd8b:	83 c4 0c             	add    esp,0xc
c000cd8e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd91:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd94:	50                   	push   eax
c000cd95:	50                   	push   eax
c000cd96:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd99:	e8 7d bc 01 00       	call   c0028a1b <__floatsidf>
c000cd9e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cda2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cda6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdaa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdb6:	e8 e1 b8 01 00       	call   c002869c <__divdf3>
c000cdbb:	83 c4 18             	add    esp,0x18
c000cdbe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdc2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdc6:	52                   	push   edx
c000cdc7:	89 fa                	mov    edx,edi
c000cdc9:	50                   	push   eax
c000cdca:	89 d8                	mov    eax,ebx
c000cdcc:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdd0:	e8 a5 d1 ff ff       	call   c0009f7a <calc_output_quad>
c000cdd5:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdd9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cddd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cde9:	e8 ae b8 01 00       	call   c002869c <__divdf3>
c000cdee:	83 c4 10             	add    esp,0x10
c000cdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce05:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce09:	e8 2d af 01 00       	call   c0027d3b <__adddf3>
c000ce0e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ce12:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ce16:	83 c4 18             	add    esp,0x18
c000ce19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ce21:	e8 1a c0 01 00       	call   c0028e40 <lrint>
c000ce26:	83 ec 0c             	sub    esp,0xc
c000ce29:	50                   	push   eax
c000ce2a:	e8 ec bb 01 00       	call   c0028a1b <__floatsidf>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce36:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce3a:	52                   	push   edx
c000ce3b:	50                   	push   eax
c000ce3c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce44:	e8 43 b5 01 00       	call   c002838c <__subdf3>
c000ce49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce4d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce51:	83 c4 20             	add    esp,0x20
c000ce54:	6a 00                	push   0x0
c000ce56:	6a 00                	push   0x0
c000ce58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce60:	e8 22 be 01 00       	call   c0028c87 <__ltdf2>
c000ce65:	83 c4 10             	add    esp,0x10
c000ce68:	85 c0                	test   eax,eax
c000ce6a:	79 20                	jns    c000ce8c <sinc_quad_vari_process+0x66f>
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7c:	e8 ba ae 01 00       	call   c0027d3b <__adddf3>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce8c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce8f:	83 ec 10             	sub    esp,0x10
c000ce92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce96:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cea9:	e8 de b4 01 00       	call   c002838c <__subdf3>
c000ceae:	83 c4 18             	add    esp,0x18
c000ceb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ceb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ceb9:	52                   	push   edx
c000ceba:	50                   	push   eax
c000cebb:	e8 80 bf 01 00       	call   c0028e40 <lrint>
c000cec0:	0f af f8             	imul   edi,eax
c000cec3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cec7:	83 c4 10             	add    esp,0x10
c000ceca:	01 f8                	add    eax,edi
c000cecc:	99                   	cdq    
c000cecd:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced3:	e9 fd fb ff ff       	jmp    c000cad5 <sinc_quad_vari_process+0x2b8>
c000ced8:	83 c4 4c             	add    esp,0x4c
c000cedb:	89 d0                	mov    eax,edx
c000cedd:	5b                   	pop    ebx
c000cede:	5e                   	pop    esi
c000cedf:	5f                   	pop    edi
c000cee0:	5d                   	pop    ebp
c000cee1:	c3                   	ret    

c000cee2 <sinc_stereo_vari_process>:
c000cee2:	55                   	push   ebp
c000cee3:	ba 05 00 00 00       	mov    edx,0x5
c000cee8:	57                   	push   edi
c000cee9:	56                   	push   esi
c000ceea:	53                   	push   ebx
c000ceeb:	83 ec 4c             	sub    esp,0x4c
c000ceee:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cef2:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cef6:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cef9:	85 db                	test   ebx,ebx
c000cefb:	0f 84 9c 06 00 00    	je     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf01:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cf04:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cf07:	0f af c7             	imul   eax,edi
c000cf0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cf0d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cf10:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cf17:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cf1e:	0f af c7             	imul   eax,edi
c000cf21:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf24:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf27:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf2a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf32:	68 00 00 70 3f       	push   0x3f700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 41 bd 01 00       	call   c0028c87 <__ltdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 88 47 06 00 00    	js     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf56:	68 00 00 70 40       	push   0x40700000
c000cf5b:	6a 00                	push   0x0
c000cf5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf65:	e8 ff bc 01 00       	call   c0028c69 <__gtdf2>
c000cf6a:	83 c4 10             	add    esp,0x10
c000cf6d:	ba 16 00 00 00       	mov    edx,0x16
c000cf72:	85 c0                	test   eax,eax
c000cf74:	0f 8f 23 06 00 00    	jg     c000d59d <sinc_stereo_vari_process+0x6bb>
c000cf7a:	83 ec 0c             	sub    esp,0xc
c000cf7d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf80:	e8 96 ba 01 00       	call   c0028a1b <__floatsidf>
c000cf85:	83 c4 10             	add    esp,0x10
c000cf88:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf90:	68 00 00 00 40       	push   0x40000000
c000cf95:	6a 00                	push   0x0
c000cf97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9f:	e8 97 ad 01 00       	call   c0027d3b <__adddf3>
c000cfa4:	59                   	pop    ecx
c000cfa5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cfa9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cfad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cfb0:	e8 66 ba 01 00       	call   c0028a1b <__floatsidf>
c000cfb5:	83 c4 10             	add    esp,0x10
c000cfb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfc0:	52                   	push   edx
c000cfc1:	50                   	push   eax
c000cfc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfca:	e8 cd b6 01 00       	call   c002869c <__divdf3>
c000cfcf:	83 c4 10             	add    esp,0x10
c000cfd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfda:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfdd:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff8:	e8 6c bc 01 00       	call   c0028c69 <__gtdf2>
c000cffd:	83 c4 10             	add    esp,0x10
c000d000:	85 c0                	test   eax,eax
c000d002:	7e 2d                	jle    c000d031 <sinc_stereo_vari_process+0x14f>
c000d004:	68 00 00 f0 3f       	push   0x3ff00000
c000d009:	6a 00                	push   0x0
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d013:	e8 6f bc 01 00       	call   c0028c87 <__ltdf2>
c000d018:	83 c4 10             	add    esp,0x10
c000d01b:	85 c0                	test   eax,eax
c000d01d:	79 4d                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d023:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d027:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d02b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d02f:	eb 1b                	jmp    c000d04c <sinc_stereo_vari_process+0x16a>
c000d031:	68 00 00 f0 3f       	push   0x3ff00000
c000d036:	6a 00                	push   0x0
c000d038:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d03c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d040:	e8 42 bc 01 00       	call   c0028c87 <__ltdf2>
c000d045:	83 c4 10             	add    esp,0x10
c000d048:	85 c0                	test   eax,eax
c000d04a:	79 20                	jns    c000d06c <sinc_stereo_vari_process+0x18a>
c000d04c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d050:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d05c:	e8 3b b6 01 00       	call   c002869c <__divdf3>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d068:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d06c:	50                   	push   eax
c000d06d:	50                   	push   eax
c000d06e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d072:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d076:	e8 c5 bd 01 00       	call   c0028e40 <lrint>
c000d07b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d07e:	40                   	inc    eax
c000d07f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d083:	0f af c7             	imul   eax,edi
c000d086:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	58                   	pop    eax
c000d092:	5a                   	pop    edx
c000d093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d097:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d09b:	e8 a0 bd 01 00       	call   c0028e40 <lrint>
c000d0a0:	83 ec 0c             	sub    esp,0xc
c000d0a3:	50                   	push   eax
c000d0a4:	e8 72 b9 01 00       	call   c0028a1b <__floatsidf>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d0b0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d0b4:	52                   	push   edx
c000d0b5:	50                   	push   eax
c000d0b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0ba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0be:	e8 c9 b2 01 00       	call   c002838c <__subdf3>
c000d0c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0cb:	83 c4 20             	add    esp,0x20
c000d0ce:	6a 00                	push   0x0
c000d0d0:	6a 00                	push   0x0
c000d0d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0da:	e8 a8 bb 01 00       	call   c0028c87 <__ltdf2>
c000d0df:	83 c4 10             	add    esp,0x10
c000d0e2:	85 c0                	test   eax,eax
c000d0e4:	79 1f                	jns    c000d105 <sinc_stereo_vari_process+0x223>
c000d0e6:	68 00 00 f0 3f       	push   0x3ff00000
c000d0eb:	6a 00                	push   0x0
c000d0ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0f5:	e8 41 ac 01 00       	call   c0027d3b <__adddf3>
c000d0fa:	83 c4 10             	add    esp,0x10
c000d0fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d101:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d105:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d108:	83 ec 10             	sub    esp,0x10
c000d10b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d10f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d11a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d122:	e8 65 b2 01 00       	call   c002838c <__subdf3>
c000d127:	83 c4 18             	add    esp,0x18
c000d12a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d12e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d132:	52                   	push   edx
c000d133:	50                   	push   eax
c000d134:	e8 07 bd 01 00       	call   c0028e40 <lrint>
c000d139:	0f af f8             	imul   edi,eax
c000d13c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d140:	01 f8                	add    eax,edi
c000d142:	99                   	cdq    
c000d143:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d146:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d149:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d14d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d151:	68 00 00 f0 3f       	push   0x3ff00000
c000d156:	6a 00                	push   0x0
c000d158:	e8 3f b5 01 00       	call   c002869c <__divdf3>
c000d15d:	83 c4 10             	add    esp,0x10
c000d160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d164:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d168:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d16d:	68 23 42 92 0c       	push   0xc924223
c000d172:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d176:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d17a:	e8 bc ab 01 00       	call   c0027d3b <__adddf3>
c000d17f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d183:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d187:	83 c4 20             	add    esp,0x20
c000d18a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d192:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d19a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d19d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d1a0:	7d 50                	jge    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d1a2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1a5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a8:	01 c8                	add    eax,ecx
c000d1aa:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1ad:	99                   	cdq    
c000d1ae:	f7 f9                	idiv   ecx
c000d1b0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1b4:	7d 0c                	jge    c000d1c2 <sinc_stereo_vari_process+0x2e0>
c000d1b6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d1b9:	85 ff                	test   edi,edi
c000d1bb:	79 6c                	jns    c000d229 <sinc_stereo_vari_process+0x347>
c000d1bd:	e9 e7 00 00 00       	jmp    c000d2a9 <sinc_stereo_vari_process+0x3c7>
c000d1c2:	50                   	push   eax
c000d1c3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1c7:	56                   	push   esi
c000d1c8:	53                   	push   ebx
c000d1c9:	e8 4c e7 ff ff       	call   c000b91a <prepare_data>
c000d1ce:	83 c4 10             	add    esp,0x10
c000d1d1:	89 c2                	mov    edx,eax
c000d1d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1d6:	85 c0                	test   eax,eax
c000d1d8:	0f 85 bf 03 00 00    	jne    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d1de:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1e1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1e4:	01 c8                	add    eax,ecx
c000d1e6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1e9:	99                   	cdq    
c000d1ea:	f7 f9                	idiv   ecx
c000d1ec:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1f0:	7c c4                	jl     c000d1b6 <sinc_stereo_vari_process+0x2d4>
c000d1f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1fa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1fd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d204:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d208:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d20b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d20e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d211:	99                   	cdq    
c000d212:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d215:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d218:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d21b:	99                   	cdq    
c000d21c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d21f:	31 d2                	xor    edx,edx
c000d221:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d224:	e9 74 03 00 00       	jmp    c000d59d <sinc_stereo_vari_process+0x6bb>
c000d229:	83 ec 0c             	sub    esp,0xc
c000d22c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d22f:	e8 e7 b7 01 00       	call   c0028a1b <__floatsidf>
c000d234:	83 c4 10             	add    esp,0x10
c000d237:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d23b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d243:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24f:	e8 e7 aa 01 00       	call   c0027d3b <__adddf3>
c000d254:	83 c4 10             	add    esp,0x10
c000d257:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d25b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d25f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d267:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26f:	e8 c7 aa 01 00       	call   c0027d3b <__adddf3>
c000d274:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d277:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d27f:	e8 97 b7 01 00       	call   c0028a1b <__floatsidf>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28f:	52                   	push   edx
c000d290:	50                   	push   eax
c000d291:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d295:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d299:	e8 e7 b9 01 00       	call   c0028c85 <__gedf2>
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	85 c0                	test   eax,eax
c000d2a3:	0f 89 49 ff ff ff    	jns    c000d1f2 <sinc_stereo_vari_process+0x310>
c000d2a9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d2ad:	0f 8e ef 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d2b3:	83 ec 10             	sub    esp,0x10
c000d2b6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2b9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2bc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2bf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d2c2:	e8 c5 b0 01 00       	call   c002838c <__subdf3>
c000d2c7:	83 c4 18             	add    esp,0x18
c000d2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2d2:	52                   	push   edx
c000d2d3:	50                   	push   eax
c000d2d4:	e8 47 bb 01 00       	call   c0028e20 <fabs>
c000d2d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2e1:	83 c4 10             	add    esp,0x10
c000d2e4:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2e9:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2f6:	e8 6e b9 01 00       	call   c0028c69 <__gtdf2>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	85 c0                	test   eax,eax
c000d300:	0f 8e 9c 00 00 00    	jle    c000d3a2 <sinc_stereo_vari_process+0x4c0>
c000d306:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d309:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d30c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d310:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d314:	52                   	push   edx
c000d315:	50                   	push   eax
c000d316:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d319:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d31c:	e8 6b b0 01 00       	call   c002838c <__subdf3>
c000d321:	59                   	pop    ecx
c000d322:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d326:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d32a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d32d:	e8 e9 b6 01 00       	call   c0028a1b <__floatsidf>
c000d332:	83 c4 10             	add    esp,0x10
c000d335:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d339:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d33d:	52                   	push   edx
c000d33e:	50                   	push   eax
c000d33f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d343:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d347:	e8 6c b0 01 00       	call   c00283b8 <__muldf3>
c000d34c:	5f                   	pop    edi
c000d34d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d351:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d355:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d358:	e8 be b6 01 00       	call   c0028a1b <__floatsidf>
c000d35d:	83 c4 10             	add    esp,0x10
c000d360:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d364:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d368:	52                   	push   edx
c000d369:	50                   	push   eax
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d372:	e8 25 b3 01 00       	call   c002869c <__divdf3>
c000d377:	83 c4 10             	add    esp,0x10
c000d37a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d37e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d382:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d386:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d38a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d38e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d392:	e8 a4 a9 01 00       	call   c0027d3b <__adddf3>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d3a2:	83 ec 0c             	sub    esp,0xc
c000d3a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d3a8:	e8 6e b6 01 00       	call   c0028a1b <__floatsidf>
c000d3ad:	83 c4 10             	add    esp,0x10
c000d3b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3c8:	e8 ba b8 01 00       	call   c0028c87 <__ltdf2>
c000d3cd:	83 c4 10             	add    esp,0x10
c000d3d0:	85 c0                	test   eax,eax
c000d3d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3de:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3e2:	78 10                	js     c000d3f4 <sinc_stereo_vari_process+0x512>
c000d3e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d404:	e8 af af 01 00       	call   c00283b8 <__muldf3>
c000d409:	59                   	pop    ecx
c000d40a:	5f                   	pop    edi
c000d40b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d40f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d417:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d41b:	e8 d3 e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d420:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d424:	89 c7                	mov    edi,eax
c000d426:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d42a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d42e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d432:	e8 81 af 01 00       	call   c00283b8 <__muldf3>
c000d437:	83 c4 18             	add    esp,0x18
c000d43a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d43e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d442:	52                   	push   edx
c000d443:	50                   	push   eax
c000d444:	e8 aa e4 ff ff       	call   c000b8f3 <double_to_fp>
c000d449:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d44c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d450:	83 c4 0c             	add    esp,0xc
c000d453:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d456:	8d 04 90             	lea    eax,[eax+edx*4]
c000d459:	50                   	push   eax
c000d45a:	50                   	push   eax
c000d45b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d45e:	e8 b8 b5 01 00       	call   c0028a1b <__floatsidf>
c000d463:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d467:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d473:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d47b:	e8 1c b2 01 00       	call   c002869c <__divdf3>
c000d480:	83 c4 18             	add    esp,0x18
c000d483:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d487:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d48b:	52                   	push   edx
c000d48c:	89 fa                	mov    edx,edi
c000d48e:	50                   	push   eax
c000d48f:	89 d8                	mov    eax,ebx
c000d491:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d495:	e8 02 c7 ff ff       	call   c0009b9c <calc_output_stereo>
c000d49a:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d49e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d4ae:	e8 e9 b1 01 00       	call   c002869c <__divdf3>
c000d4b3:	83 c4 10             	add    esp,0x10
c000d4b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d4ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ce:	e8 68 a8 01 00       	call   c0027d3b <__adddf3>
c000d4d3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4d7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4db:	83 c4 18             	add    esp,0x18
c000d4de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4e6:	e8 55 b9 01 00       	call   c0028e40 <lrint>
c000d4eb:	83 ec 0c             	sub    esp,0xc
c000d4ee:	50                   	push   eax
c000d4ef:	e8 27 b5 01 00       	call   c0028a1b <__floatsidf>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4ff:	52                   	push   edx
c000d500:	50                   	push   eax
c000d501:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d505:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d509:	e8 7e ae 01 00       	call   c002838c <__subdf3>
c000d50e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d512:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d516:	83 c4 20             	add    esp,0x20
c000d519:	6a 00                	push   0x0
c000d51b:	6a 00                	push   0x0
c000d51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d525:	e8 5d b7 01 00       	call   c0028c87 <__ltdf2>
c000d52a:	83 c4 10             	add    esp,0x10
c000d52d:	85 c0                	test   eax,eax
c000d52f:	79 20                	jns    c000d551 <sinc_stereo_vari_process+0x66f>
c000d531:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d535:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d539:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d53d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d541:	e8 f5 a7 01 00       	call   c0027d3b <__adddf3>
c000d546:	83 c4 10             	add    esp,0x10
c000d549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d54d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d551:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d554:	83 ec 10             	sub    esp,0x10
c000d557:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d55b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d55e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d566:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d56e:	e8 19 ae 01 00       	call   c002838c <__subdf3>
c000d573:	83 c4 18             	add    esp,0x18
c000d576:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d57a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d57e:	52                   	push   edx
c000d57f:	50                   	push   eax
c000d580:	e8 bb b8 01 00       	call   c0028e40 <lrint>
c000d585:	0f af f8             	imul   edi,eax
c000d588:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d58c:	83 c4 10             	add    esp,0x10
c000d58f:	01 f8                	add    eax,edi
c000d591:	99                   	cdq    
c000d592:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d595:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d598:	e9 fd fb ff ff       	jmp    c000d19a <sinc_stereo_vari_process+0x2b8>
c000d59d:	83 c4 4c             	add    esp,0x4c
c000d5a0:	89 d0                	mov    eax,edx
c000d5a2:	5b                   	pop    ebx
c000d5a3:	5e                   	pop    esi
c000d5a4:	5f                   	pop    edi
c000d5a5:	5d                   	pop    ebp
c000d5a6:	c3                   	ret    

c000d5a7 <sinc_mono_vari_process>:
c000d5a7:	55                   	push   ebp
c000d5a8:	ba 05 00 00 00       	mov    edx,0x5
c000d5ad:	57                   	push   edi
c000d5ae:	56                   	push   esi
c000d5af:	53                   	push   ebx
c000d5b0:	83 ec 4c             	sub    esp,0x4c
c000d5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5b7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d5bb:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d5be:	85 db                	test   ebx,ebx
c000d5c0:	0f 84 c1 06 00 00    	je     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d5c6:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5c9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5cc:	0f af c7             	imul   eax,edi
c000d5cf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5d2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5d5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5dc:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5e3:	0f af c7             	imul   eax,edi
c000d5e6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5e9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5fa:	68 00 00 70 3f       	push   0x3f700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 79 b6 01 00       	call   c0028c87 <__ltdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 88 69 06 00 00    	js     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d61e:	68 00 00 70 40       	push   0x40700000
c000d623:	6a 00                	push   0x0
c000d625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d629:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d62d:	e8 37 b6 01 00       	call   c0028c69 <__gtdf2>
c000d632:	83 c4 10             	add    esp,0x10
c000d635:	ba 16 00 00 00       	mov    edx,0x16
c000d63a:	85 c0                	test   eax,eax
c000d63c:	0f 8f 45 06 00 00    	jg     c000dc87 <sinc_mono_vari_process+0x6e0>
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d648:	e8 ce b3 01 00       	call   c0028a1b <__floatsidf>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d654:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d658:	68 00 00 00 40       	push   0x40000000
c000d65d:	6a 00                	push   0x0
c000d65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d667:	e8 cf a6 01 00       	call   c0027d3b <__adddf3>
c000d66c:	59                   	pop    ecx
c000d66d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d671:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d675:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d678:	e8 9e b3 01 00       	call   c0028a1b <__floatsidf>
c000d67d:	83 c4 10             	add    esp,0x10
c000d680:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d684:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d688:	52                   	push   edx
c000d689:	50                   	push   eax
c000d68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d692:	e8 05 b0 01 00       	call   c002869c <__divdf3>
c000d697:	83 c4 10             	add    esp,0x10
c000d69a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d69e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6a2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d6a5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d6a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c0:	e8 a4 b5 01 00       	call   c0028c69 <__gtdf2>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	85 c0                	test   eax,eax
c000d6ca:	7e 2d                	jle    c000d6f9 <sinc_mono_vari_process+0x152>
c000d6cc:	68 00 00 f0 3f       	push   0x3ff00000
c000d6d1:	6a 00                	push   0x0
c000d6d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6db:	e8 a7 b5 01 00       	call   c0028c87 <__ltdf2>
c000d6e0:	83 c4 10             	add    esp,0x10
c000d6e3:	85 c0                	test   eax,eax
c000d6e5:	79 4d                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6f7:	eb 1b                	jmp    c000d714 <sinc_mono_vari_process+0x16d>
c000d6f9:	68 00 00 f0 3f       	push   0x3ff00000
c000d6fe:	6a 00                	push   0x0
c000d700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d708:	e8 7a b5 01 00       	call   c0028c87 <__ltdf2>
c000d70d:	83 c4 10             	add    esp,0x10
c000d710:	85 c0                	test   eax,eax
c000d712:	79 20                	jns    c000d734 <sinc_mono_vari_process+0x18d>
c000d714:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d718:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 73 af 01 00       	call   c002869c <__divdf3>
c000d729:	83 c4 10             	add    esp,0x10
c000d72c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d730:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d734:	50                   	push   eax
c000d735:	50                   	push   eax
c000d736:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73e:	e8 fd b6 01 00       	call   c0028e40 <lrint>
c000d743:	40                   	inc    eax
c000d744:	0f af c7             	imul   eax,edi
c000d747:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d74b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d74f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d752:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d755:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d759:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d75d:	58                   	pop    eax
c000d75e:	5a                   	pop    edx
c000d75f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d763:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d767:	e8 d4 b6 01 00       	call   c0028e40 <lrint>
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	50                   	push   eax
c000d770:	e8 a6 b2 01 00       	call   c0028a1b <__floatsidf>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d77c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d780:	52                   	push   edx
c000d781:	50                   	push   eax
c000d782:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d786:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78a:	e8 fd ab 01 00       	call   c002838c <__subdf3>
c000d78f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d793:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d797:	83 c4 20             	add    esp,0x20
c000d79a:	6a 00                	push   0x0
c000d79c:	6a 00                	push   0x0
c000d79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7a6:	e8 dc b4 01 00       	call   c0028c87 <__ltdf2>
c000d7ab:	83 c4 10             	add    esp,0x10
c000d7ae:	85 c0                	test   eax,eax
c000d7b0:	79 1f                	jns    c000d7d1 <sinc_mono_vari_process+0x22a>
c000d7b2:	68 00 00 f0 3f       	push   0x3ff00000
c000d7b7:	6a 00                	push   0x0
c000d7b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7c1:	e8 75 a5 01 00       	call   c0027d3b <__adddf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7d1:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7d4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7d7:	83 ec 10             	sub    esp,0x10
c000d7da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 9d ab 01 00       	call   c002838c <__subdf3>
c000d7ef:	83 c4 18             	add    esp,0x18
c000d7f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7fa:	52                   	push   edx
c000d7fb:	50                   	push   eax
c000d7fc:	e8 3f b6 01 00       	call   c0028e40 <lrint>
c000d801:	0f af f8             	imul   edi,eax
c000d804:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d807:	31 ff                	xor    edi,edi
c000d809:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d80e:	99                   	cdq    
c000d80f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d812:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d815:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d819:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d81d:	55                   	push   ebp
c000d81e:	57                   	push   edi
c000d81f:	e8 78 ae 01 00       	call   c002869c <__divdf3>
c000d824:	83 c4 10             	add    esp,0x10
c000d827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d834:	68 23 42 92 0c       	push   0xc924223
c000d839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d841:	e8 f5 a4 01 00       	call   c0027d3b <__adddf3>
c000d846:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d84a:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d84e:	83 c4 20             	add    esp,0x20
c000d851:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d855:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d859:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d85c:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d85f:	7d 54                	jge    c000d8b5 <sinc_mono_vari_process+0x30e>
c000d861:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d864:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d867:	01 c8                	add    eax,ecx
c000d869:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d86c:	99                   	cdq    
c000d86d:	f7 f9                	idiv   ecx
c000d86f:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d873:	7d 0c                	jge    c000d881 <sinc_mono_vari_process+0x2da>
c000d875:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d878:	85 ff                	test   edi,edi
c000d87a:	79 73                	jns    c000d8ef <sinc_mono_vari_process+0x348>
c000d87c:	e9 ee 00 00 00       	jmp    c000d96f <sinc_mono_vari_process+0x3c8>
c000d881:	50                   	push   eax
c000d882:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d886:	56                   	push   esi
c000d887:	53                   	push   ebx
c000d888:	e8 8d e0 ff ff       	call   c000b91a <prepare_data>
c000d88d:	89 c2                	mov    edx,eax
c000d88f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d893:	83 c4 10             	add    esp,0x10
c000d896:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d899:	85 d2                	test   edx,edx
c000d89b:	0f 85 e6 03 00 00    	jne    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8a1:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d8a4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d8a7:	01 c8                	add    eax,ecx
c000d8a9:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d8ac:	99                   	cdq    
c000d8ad:	f7 f9                	idiv   ecx
c000d8af:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d8b3:	7c c0                	jl     c000d875 <sinc_mono_vari_process+0x2ce>
c000d8b5:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8c1:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8c4:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8cf:	89 01                	mov    DWORD PTR [ecx],eax
c000d8d1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8d7:	99                   	cdq    
c000d8d8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8db:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8de:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8e1:	99                   	cdq    
c000d8e2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8e5:	31 d2                	xor    edx,edx
c000d8e7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8ea:	e9 98 03 00 00       	jmp    c000dc87 <sinc_mono_vari_process+0x6e0>
c000d8ef:	83 ec 0c             	sub    esp,0xc
c000d8f2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8f5:	e8 21 b1 01 00       	call   c0028a1b <__floatsidf>
c000d8fa:	83 c4 10             	add    esp,0x10
c000d8fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d901:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d905:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d909:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d915:	e8 21 a4 01 00       	call   c0027d3b <__adddf3>
c000d91a:	83 c4 10             	add    esp,0x10
c000d91d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d921:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d925:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d929:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d92d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d931:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d935:	e8 01 a4 01 00       	call   c0027d3b <__adddf3>
c000d93a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d93d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d941:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d945:	e8 d1 b0 01 00       	call   c0028a1b <__floatsidf>
c000d94a:	83 c4 10             	add    esp,0x10
c000d94d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d951:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d955:	52                   	push   edx
c000d956:	50                   	push   eax
c000d957:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	e8 05 b3 01 00       	call   c0028c69 <__gtdf2>
c000d964:	83 c4 10             	add    esp,0x10
c000d967:	85 c0                	test   eax,eax
c000d969:	0f 8f 46 ff ff ff    	jg     c000d8b5 <sinc_mono_vari_process+0x30e>
c000d96f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d973:	0f 8e f5 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d979:	83 ec 10             	sub    esp,0x10
c000d97c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d97f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d982:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d986:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d989:	ff 30                	push   DWORD PTR [eax]
c000d98b:	e8 fc a9 01 00       	call   c002838c <__subdf3>
c000d990:	83 c4 18             	add    esp,0x18
c000d993:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d997:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d99b:	52                   	push   edx
c000d99c:	50                   	push   eax
c000d99d:	e8 7e b4 01 00       	call   c0028e20 <fabs>
c000d9a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d9a6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d9aa:	83 c4 10             	add    esp,0x10
c000d9ad:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d9b2:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d9b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9bf:	e8 a5 b2 01 00       	call   c0028c69 <__gtdf2>
c000d9c4:	83 c4 10             	add    esp,0x10
c000d9c7:	85 c0                	test   eax,eax
c000d9c9:	0f 8e 9f 00 00 00    	jle    c000da6e <sinc_mono_vari_process+0x4c7>
c000d9cf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9d6:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9e0:	52                   	push   edx
c000d9e1:	50                   	push   eax
c000d9e2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9e5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9e8:	e8 9f a9 01 00       	call   c002838c <__subdf3>
c000d9ed:	5f                   	pop    edi
c000d9ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9f6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9f9:	e8 1d b0 01 00       	call   c0028a1b <__floatsidf>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da09:	52                   	push   edx
c000da0a:	50                   	push   eax
c000da0b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da13:	e8 a0 a9 01 00       	call   c00283b8 <__muldf3>
c000da18:	5d                   	pop    ebp
c000da19:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000da1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000da21:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da24:	e8 f2 af 01 00       	call   c0028a1b <__floatsidf>
c000da29:	83 c4 10             	add    esp,0x10
c000da2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da30:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da34:	52                   	push   edx
c000da35:	50                   	push   eax
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3e:	e8 59 ac 01 00       	call   c002869c <__divdf3>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da56:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da5e:	e8 d8 a2 01 00       	call   c0027d3b <__adddf3>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da6a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da6e:	83 ec 0c             	sub    esp,0xc
c000da71:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da74:	e8 a2 af 01 00       	call   c0028a1b <__floatsidf>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da94:	e8 ee b1 01 00       	call   c0028c87 <__ltdf2>
c000da99:	83 c4 10             	add    esp,0x10
c000da9c:	85 c0                	test   eax,eax
c000da9e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000daa2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000daa6:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000daaa:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000daae:	78 10                	js     c000dac0 <sinc_mono_vari_process+0x519>
c000dab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dab4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dab8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dabc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dac0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad0:	e8 e3 a8 01 00       	call   c00283b8 <__muldf3>
c000dad5:	59                   	pop    ecx
c000dad6:	5f                   	pop    edi
c000dad7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dadb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dadf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dae7:	e8 07 de ff ff       	call   c000b8f3 <double_to_fp>
c000daec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf0:	89 c7                	mov    edi,eax
c000daf2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daf6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dafe:	e8 b5 a8 01 00       	call   c00283b8 <__muldf3>
c000db03:	83 c4 18             	add    esp,0x18
c000db06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db0e:	52                   	push   edx
c000db0f:	50                   	push   eax
c000db10:	e8 de dd ff ff       	call   c000b8f3 <double_to_fp>
c000db15:	83 ec 0c             	sub    esp,0xc
c000db18:	89 c5                	mov    ebp,eax
c000db1a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000db1d:	e8 f9 ae 01 00       	call   c0028a1b <__floatsidf>
c000db22:	83 c4 10             	add    esp,0x10
c000db25:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db29:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db2d:	52                   	push   edx
c000db2e:	50                   	push   eax
c000db2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db37:	e8 60 ab 01 00       	call   c002869c <__divdf3>
c000db3c:	83 c4 10             	add    esp,0x10
c000db3f:	89 e9                	mov    ecx,ebp
c000db41:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db45:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db49:	89 d8                	mov    eax,ebx
c000db4b:	89 fa                	mov    edx,edi
c000db4d:	e8 ee bd ff ff       	call   c0009940 <calc_output_single>
c000db52:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db55:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db60:	52                   	push   edx
c000db61:	50                   	push   eax
c000db62:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db66:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db6a:	e8 49 a8 01 00       	call   c00283b8 <__muldf3>
c000db6f:	59                   	pop    ecx
c000db70:	59                   	pop    ecx
c000db71:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db75:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db79:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db81:	e8 05 b1 01 00       	call   c0028c8b <__truncdfsf2>
c000db86:	83 c4 10             	add    esp,0x10
c000db89:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db8c:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db8f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db97:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9f:	e8 f8 aa 01 00       	call   c002869c <__divdf3>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dbab:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dbaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbbf:	e8 77 a1 01 00       	call   c0027d3b <__adddf3>
c000dbc4:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dbc8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dbcc:	83 c4 18             	add    esp,0x18
c000dbcf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbd7:	e8 64 b2 01 00       	call   c0028e40 <lrint>
c000dbdc:	83 ec 0c             	sub    esp,0xc
c000dbdf:	50                   	push   eax
c000dbe0:	e8 36 ae 01 00       	call   c0028a1b <__floatsidf>
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbf0:	52                   	push   edx
c000dbf1:	50                   	push   eax
c000dbf2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfa:	e8 8d a7 01 00       	call   c002838c <__subdf3>
c000dbff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dc07:	83 c4 20             	add    esp,0x20
c000dc0a:	6a 00                	push   0x0
c000dc0c:	6a 00                	push   0x0
c000dc0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc16:	e8 6c b0 01 00       	call   c0028c87 <__ltdf2>
c000dc1b:	83 c4 10             	add    esp,0x10
c000dc1e:	85 c0                	test   eax,eax
c000dc20:	79 20                	jns    c000dc42 <sinc_mono_vari_process+0x69b>
c000dc22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc32:	e8 04 a1 01 00       	call   c0027d3b <__adddf3>
c000dc37:	83 c4 10             	add    esp,0x10
c000dc3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc42:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc45:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc48:	83 ec 10             	sub    esp,0x10
c000dc4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc53:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc5b:	e8 2c a7 01 00       	call   c002838c <__subdf3>
c000dc60:	83 c4 18             	add    esp,0x18
c000dc63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc67:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc6b:	52                   	push   edx
c000dc6c:	50                   	push   eax
c000dc6d:	e8 ce b1 01 00       	call   c0028e40 <lrint>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	0f af f8             	imul   edi,eax
c000dc78:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc7b:	99                   	cdq    
c000dc7c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc7f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc82:	e9 d2 fb ff ff       	jmp    c000d859 <sinc_mono_vari_process+0x2b2>
c000dc87:	83 c4 4c             	add    esp,0x4c
c000dc8a:	89 d0                	mov    eax,edx
c000dc8c:	5b                   	pop    ebx
c000dc8d:	5e                   	pop    esi
c000dc8e:	5f                   	pop    edi
c000dc8f:	5d                   	pop    ebp
c000dc90:	c3                   	ret    

c000dc91 <sinc_get_name>:
c000dc91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc95:	31 c0                	xor    eax,eax
c000dc97:	83 fa 02             	cmp    edx,0x2
c000dc9a:	77 07                	ja     c000dca3 <sinc_get_name+0x12>
c000dc9c:	8b 04 95 24 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58dc]
c000dca3:	c3                   	ret    

c000dca4 <sinc_get_description>:
c000dca4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dca8:	31 c0                	xor    eax,eax
c000dcaa:	83 fa 02             	cmp    edx,0x2
c000dcad:	77 07                	ja     c000dcb6 <sinc_get_description+0x12>
c000dcaf:	8b 04 95 18 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58e8]
c000dcb6:	c3                   	ret    

c000dcb7 <sinc_set_converter>:
c000dcb7:	53                   	push   ebx
c000dcb8:	81 ec 58 08 00 00    	sub    esp,0x858
c000dcbe:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dcc5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dcc8:	85 c0                	test   eax,eax
c000dcca:	74 13                	je     c000dcdf <sinc_set_converter+0x28>
c000dccc:	83 ec 0c             	sub    esp,0xc
c000dccf:	50                   	push   eax
c000dcd0:	e8 65 1c 00 00       	call   c000f93a <free>
c000dcd5:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcdc:	83 c4 10             	add    esp,0x10
c000dcdf:	50                   	push   eax
c000dce0:	68 44 08 00 00       	push   0x844
c000dce5:	6a 00                	push   0x0
c000dce7:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dceb:	50                   	push   eax
c000dcec:	e8 ab 2a ff ff       	call   c000079c <memset>
c000dcf1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcf4:	83 c4 10             	add    esp,0x10
c000dcf7:	b8 0b 00 00 00       	mov    eax,0xb
c000dcfc:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dd02:	7f 6e                	jg     c000dd72 <sinc_set_converter+0xbb>
c000dd04:	83 fa 01             	cmp    edx,0x1
c000dd07:	75 10                	jne    c000dd19 <sinc_set_converter+0x62>
c000dd09:	c7 43 24 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d5a7
c000dd10:	c7 43 20 a7 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d5a7
c000dd17:	eb 4d                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd19:	83 fa 02             	cmp    edx,0x2
c000dd1c:	75 10                	jne    c000dd2e <sinc_set_converter+0x77>
c000dd1e:	c7 43 24 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cee2
c000dd25:	c7 43 20 e2 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cee2
c000dd2c:	eb 38                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd2e:	83 fa 04             	cmp    edx,0x4
c000dd31:	75 10                	jne    c000dd43 <sinc_set_converter+0x8c>
c000dd33:	c7 43 24 1d c8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c81d
c000dd3a:	c7 43 20 1d c8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c81d
c000dd41:	eb 23                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd43:	83 fa 06             	cmp    edx,0x6
c000dd46:	75 10                	jne    c000dd58 <sinc_set_converter+0xa1>
c000dd48:	c7 43 24 58 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c158
c000dd4f:	c7 43 20 58 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c158
c000dd56:	eb 0e                	jmp    c000dd66 <sinc_set_converter+0xaf>
c000dd58:	c7 43 24 94 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba94
c000dd5f:	c7 43 20 94 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba94
c000dd66:	c7 43 28 47 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad47
c000dd6d:	b8 0a 00 00 00       	mov    eax,0xa
c000dd72:	81 c4 58 08 00 00    	add    esp,0x858
c000dd78:	5b                   	pop    ebx
c000dd79:	c3                   	ret    

c000dd7a <zoh_vari_process>:
c000dd7a:	55                   	push   ebp
c000dd7b:	31 d2                	xor    edx,edx
c000dd7d:	57                   	push   edi
c000dd7e:	56                   	push   esi
c000dd7f:	53                   	push   ebx
c000dd80:	83 ec 3c             	sub    esp,0x3c
c000dd83:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd87:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd8b:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd8f:	0f 8e 80 06 00 00    	jle    c000e415 <zoh_vari_process+0x69b>
c000dd95:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd98:	ba 05 00 00 00       	mov    edx,0x5
c000dd9d:	85 db                	test   ebx,ebx
c000dd9f:	0f 84 70 06 00 00    	je     c000e415 <zoh_vari_process+0x69b>
c000dda5:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dda8:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ddac:	74 19                	je     c000ddc7 <zoh_vari_process+0x4d>
c000ddae:	31 d2                	xor    edx,edx
c000ddb0:	39 c2                	cmp    edx,eax
c000ddb2:	7d 0c                	jge    c000ddc0 <zoh_vari_process+0x46>
c000ddb4:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ddb6:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000ddb9:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000ddbd:	42                   	inc    edx
c000ddbe:	eb f0                	jmp    c000ddb0 <zoh_vari_process+0x36>
c000ddc0:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ddc7:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ddca:	0f af d0             	imul   edx,eax
c000ddcd:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddd0:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddd4:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dddb:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddde:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dde5:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dde8:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddf2:	68 00 00 70 3f       	push   0x3f700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 81 ae 01 00       	call   c0028c87 <__ltdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 88 ff 05 00 00    	js     c000e415 <zoh_vari_process+0x69b>
c000de16:	68 00 00 70 40       	push   0x40700000
c000de1b:	6a 00                	push   0x0
c000de1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de25:	e8 3f ae 01 00       	call   c0028c69 <__gtdf2>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	ba 16 00 00 00       	mov    edx,0x16
c000de32:	85 c0                	test   eax,eax
c000de34:	0f 8f db 05 00 00    	jg     c000e415 <zoh_vari_process+0x69b>
c000de3a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de3d:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de40:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de44:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de48:	68 00 00 f0 3f       	push   0x3ff00000
c000de4d:	6a 00                	push   0x0
c000de4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de57:	e8 2b ae 01 00       	call   c0028c87 <__ltdf2>
c000de5c:	83 c4 10             	add    esp,0x10
c000de5f:	85 c0                	test   eax,eax
c000de61:	0f 89 da 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000de67:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de6a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de6d:	0f 8d ce 01 00 00    	jge    c000e041 <zoh_vari_process+0x2c7>
c000de73:	83 ec 0c             	sub    esp,0xc
c000de76:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de79:	e8 9d ab 01 00       	call   c0028a1b <__floatsidf>
c000de7e:	83 c4 10             	add    esp,0x10
c000de81:	89 04 24             	mov    DWORD PTR [esp],eax
c000de84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de98:	e8 1b a5 01 00       	call   c00283b8 <__muldf3>
c000de9d:	59                   	pop    ecx
c000de9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dea6:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dea9:	e8 6d ab 01 00       	call   c0028a1b <__floatsidf>
c000deae:	83 c4 10             	add    esp,0x10
c000deb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deb9:	52                   	push   edx
c000deba:	50                   	push   eax
c000debb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000debf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec3:	e8 73 9e 01 00       	call   c0027d3b <__adddf3>
c000dec8:	59                   	pop    ecx
c000dec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000decd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000ded1:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ded4:	e8 42 ab 01 00       	call   c0028a1b <__floatsidf>
c000ded9:	83 c4 10             	add    esp,0x10
c000dedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dee0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dee4:	52                   	push   edx
c000dee5:	50                   	push   eax
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deee:	e8 92 ad 01 00       	call   c0028c85 <__gedf2>
c000def3:	83 c4 10             	add    esp,0x10
c000def6:	85 c0                	test   eax,eax
c000def8:	0f 89 43 01 00 00    	jns    c000e041 <zoh_vari_process+0x2c7>
c000defe:	85 ed                	test   ebp,ebp
c000df00:	0f 8e ec 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df06:	83 ec 10             	sub    esp,0x10
c000df09:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0f:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df12:	ff 37                	push   DWORD PTR [edi]
c000df14:	e8 73 a4 01 00       	call   c002838c <__subdf3>
c000df19:	83 c4 18             	add    esp,0x18
c000df1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df24:	52                   	push   edx
c000df25:	50                   	push   eax
c000df26:	e8 f5 ae 01 00       	call   c0028e20 <fabs>
c000df2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df2f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df33:	83 c4 10             	add    esp,0x10
c000df36:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df3b:	68 23 42 92 0c       	push   0xc924223
c000df40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df48:	e8 1c ad 01 00       	call   c0028c69 <__gtdf2>
c000df4d:	83 c4 10             	add    esp,0x10
c000df50:	85 c0                	test   eax,eax
c000df52:	0f 8e 9a 00 00 00    	jle    c000dff2 <zoh_vari_process+0x278>
c000df58:	8b 07                	mov    eax,DWORD PTR [edi]
c000df5a:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000df60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df64:	52                   	push   edx
c000df65:	50                   	push   eax
c000df66:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df69:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df6c:	e8 1b a4 01 00       	call   c002838c <__subdf3>
c000df71:	59                   	pop    ecx
c000df72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df76:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df7a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df7d:	e8 99 aa 01 00       	call   c0028a1b <__floatsidf>
c000df82:	83 c4 10             	add    esp,0x10
c000df85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df89:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df8d:	52                   	push   edx
c000df8e:	50                   	push   eax
c000df8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df97:	e8 1c a4 01 00       	call   c00283b8 <__muldf3>
c000df9c:	5d                   	pop    ebp
c000df9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfa8:	e8 6e aa 01 00       	call   c0028a1b <__floatsidf>
c000dfad:	83 c4 10             	add    esp,0x10
c000dfb0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfb4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb8:	52                   	push   edx
c000dfb9:	50                   	push   eax
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfc2:	e8 d5 a6 01 00       	call   c002869c <__divdf3>
c000dfc7:	83 c4 10             	add    esp,0x10
c000dfca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfd6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfe2:	e8 54 9d 01 00       	call   c0027d3b <__adddf3>
c000dfe7:	83 c4 10             	add    esp,0x10
c000dfea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dff2:	31 c0                	xor    eax,eax
c000dff4:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dff7:	7e 13                	jle    c000e00c <zoh_vari_process+0x292>
c000dff9:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dffd:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e000:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000e003:	40                   	inc    eax
c000e004:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000e007:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e00a:	eb e8                	jmp    c000dff4 <zoh_vari_process+0x27a>
c000e00c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e010:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e014:	68 00 00 f0 3f       	push   0x3ff00000
c000e019:	6a 00                	push   0x0
c000e01b:	e8 7c a6 01 00       	call   c002869c <__divdf3>
c000e020:	83 c4 10             	add    esp,0x10
c000e023:	89 04 24             	mov    DWORD PTR [esp],eax
c000e026:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e02a:	52                   	push   edx
c000e02b:	50                   	push   eax
c000e02c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e030:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e034:	e8 02 9d 01 00       	call   c0027d3b <__adddf3>
c000e039:	83 c4 10             	add    esp,0x10
c000e03c:	e9 ff fd ff ff       	jmp    c000de40 <zoh_vari_process+0xc6>
c000e041:	55                   	push   ebp
c000e042:	55                   	push   ebp
c000e043:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e047:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04b:	e8 f0 ad 01 00       	call   c0028e40 <lrint>
c000e050:	83 ec 0c             	sub    esp,0xc
c000e053:	50                   	push   eax
c000e054:	e8 c2 a9 01 00       	call   c0028a1b <__floatsidf>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e060:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e064:	52                   	push   edx
c000e065:	50                   	push   eax
c000e066:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06e:	e8 19 a3 01 00       	call   c002838c <__subdf3>
c000e073:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e077:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e07b:	83 c4 20             	add    esp,0x20
c000e07e:	6a 00                	push   0x0
c000e080:	6a 00                	push   0x0
c000e082:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e086:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e08a:	e8 f8 ab 01 00       	call   c0028c87 <__ltdf2>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	85 c0                	test   eax,eax
c000e094:	79 1e                	jns    c000e0b4 <zoh_vari_process+0x33a>
c000e096:	68 00 00 f0 3f       	push   0x3ff00000
c000e09b:	6a 00                	push   0x0
c000e09d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0a5:	e8 91 9c 01 00       	call   c0027d3b <__adddf3>
c000e0aa:	83 c4 10             	add    esp,0x10
c000e0ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0b0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0b4:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0b7:	83 ec 10             	sub    esp,0x10
c000e0ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0c2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0c6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0ca:	e8 bd a2 01 00       	call   c002838c <__subdf3>
c000e0cf:	83 c4 18             	add    esp,0x18
c000e0d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0da:	52                   	push   edx
c000e0db:	50                   	push   eax
c000e0dc:	e8 5f ad 01 00       	call   c0028e40 <lrint>
c000e0e1:	83 c4 10             	add    esp,0x10
c000e0e4:	0f af e8             	imul   ebp,eax
c000e0e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0ea:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0ed:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0f1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0f4:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0fb:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0fe:	0f 8d 7a 02 00 00    	jge    c000e37e <zoh_vari_process+0x604>
c000e104:	83 ec 0c             	sub    esp,0xc
c000e107:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e10a:	e8 0c a9 01 00       	call   c0028a1b <__floatsidf>
c000e10f:	83 c4 10             	add    esp,0x10
c000e112:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e116:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e11a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e11e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e122:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e126:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12a:	e8 89 a2 01 00       	call   c00283b8 <__muldf3>
c000e12f:	59                   	pop    ecx
c000e130:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e134:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e13c:	e8 da a8 01 00       	call   c0028a1b <__floatsidf>
c000e141:	83 c4 10             	add    esp,0x10
c000e144:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e148:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e14c:	52                   	push   edx
c000e14d:	50                   	push   eax
c000e14e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e152:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e156:	e8 e0 9b 01 00       	call   c0027d3b <__adddf3>
c000e15b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e15e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e162:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e166:	e8 b0 a8 01 00       	call   c0028a1b <__floatsidf>
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e172:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e176:	52                   	push   edx
c000e177:	50                   	push   eax
c000e178:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e17c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e180:	e8 04 ab 01 00       	call   c0028c89 <__ledf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e18e:	0f 8f ea 01 00 00    	jg     c000e37e <zoh_vari_process+0x604>
c000e194:	85 c9                	test   ecx,ecx
c000e196:	0f 8e ed 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e19c:	83 ec 10             	sub    esp,0x10
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e1a8:	ff 37                	push   DWORD PTR [edi]
c000e1aa:	e8 dd a1 01 00       	call   c002838c <__subdf3>
c000e1af:	83 c4 18             	add    esp,0x18
c000e1b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1ba:	52                   	push   edx
c000e1bb:	50                   	push   eax
c000e1bc:	e8 5f ac 01 00       	call   c0028e20 <fabs>
c000e1c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1c5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1c9:	83 c4 10             	add    esp,0x10
c000e1cc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1d1:	68 23 42 92 0c       	push   0xc924223
c000e1d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1de:	e8 86 aa 01 00       	call   c0028c69 <__gtdf2>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	85 c0                	test   eax,eax
c000e1e8:	0f 8e 9b 00 00 00    	jle    c000e289 <zoh_vari_process+0x50f>
c000e1ee:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1f0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1fb:	52                   	push   edx
c000e1fc:	50                   	push   eax
c000e1fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e200:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e203:	e8 84 a1 01 00       	call   c002838c <__subdf3>
c000e208:	5d                   	pop    ebp
c000e209:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e20d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e211:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e214:	e8 02 a8 01 00       	call   c0028a1b <__floatsidf>
c000e219:	83 c4 10             	add    esp,0x10
c000e21c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e220:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e224:	52                   	push   edx
c000e225:	50                   	push   eax
c000e226:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e22e:	e8 85 a1 01 00       	call   c00283b8 <__muldf3>
c000e233:	59                   	pop    ecx
c000e234:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e238:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e23c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e23f:	e8 d7 a7 01 00       	call   c0028a1b <__floatsidf>
c000e244:	83 c4 10             	add    esp,0x10
c000e247:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e24b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e24f:	52                   	push   edx
c000e250:	50                   	push   eax
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e259:	e8 3e a4 01 00       	call   c002869c <__divdf3>
c000e25e:	83 c4 10             	add    esp,0x10
c000e261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e265:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e269:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e26d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e271:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e275:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e279:	e8 bd 9a 01 00       	call   c0027d3b <__adddf3>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e285:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e289:	31 d2                	xor    edx,edx
c000e28b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e28e:	39 d0                	cmp    eax,edx
c000e290:	7e 1d                	jle    c000e2af <zoh_vari_process+0x535>
c000e292:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e295:	29 c1                	sub    ecx,eax
c000e297:	89 c8                	mov    eax,ecx
c000e299:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e29b:	01 d0                	add    eax,edx
c000e29d:	42                   	inc    edx
c000e29e:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e2a1:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e2a4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e2a7:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e2aa:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e2ad:	eb dc                	jmp    c000e28b <zoh_vari_process+0x511>
c000e2af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2b7:	68 00 00 f0 3f       	push   0x3ff00000
c000e2bc:	6a 00                	push   0x0
c000e2be:	e8 d9 a3 01 00       	call   c002869c <__divdf3>
c000e2c3:	83 c4 10             	add    esp,0x10
c000e2c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ce:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	e8 58 9a 01 00       	call   c0027d3b <__adddf3>
c000e2e3:	5d                   	pop    ebp
c000e2e4:	59                   	pop    ecx
c000e2e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2f5:	e8 46 ab 01 00       	call   c0028e40 <lrint>
c000e2fa:	83 ec 0c             	sub    esp,0xc
c000e2fd:	50                   	push   eax
c000e2fe:	e8 18 a7 01 00       	call   c0028a1b <__floatsidf>
c000e303:	83 c4 10             	add    esp,0x10
c000e306:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e30a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e30e:	52                   	push   edx
c000e30f:	50                   	push   eax
c000e310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e314:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e318:	e8 6f a0 01 00       	call   c002838c <__subdf3>
c000e31d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e321:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e325:	83 c4 20             	add    esp,0x20
c000e328:	6a 00                	push   0x0
c000e32a:	6a 00                	push   0x0
c000e32c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e330:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e334:	e8 4e a9 01 00       	call   c0028c87 <__ltdf2>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	85 c0                	test   eax,eax
c000e33e:	79 1e                	jns    c000e35e <zoh_vari_process+0x5e4>
c000e340:	68 00 00 f0 3f       	push   0x3ff00000
c000e345:	6a 00                	push   0x0
c000e347:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34f:	e8 e7 99 01 00       	call   c0027d3b <__adddf3>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e35e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e361:	83 ec 10             	sub    esp,0x10
c000e364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e374:	e8 13 a0 01 00       	call   c002838c <__subdf3>
c000e379:	e9 51 fd ff ff       	jmp    c000e0cf <zoh_vari_process+0x355>
c000e37e:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e382:	7d 3a                	jge    c000e3be <zoh_vari_process+0x644>
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	83 ec 0c             	sub    esp,0xc
c000e38b:	29 e8                	sub    eax,ebp
c000e38d:	99                   	cdq    
c000e38e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e391:	50                   	push   eax
c000e392:	e8 84 a6 01 00       	call   c0028a1b <__floatsidf>
c000e397:	83 c4 10             	add    esp,0x10
c000e39a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e39e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e3a2:	52                   	push   edx
c000e3a3:	50                   	push   eax
c000e3a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3a8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e3ac:	e8 8a 99 01 00       	call   c0027d3b <__adddf3>
c000e3b1:	83 c4 10             	add    esp,0x10
c000e3b4:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e3b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e3be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e3c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3c5:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3c8:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ce:	85 c0                	test   eax,eax
c000e3d0:	7f 25                	jg     c000e3f7 <zoh_vari_process+0x67d>
c000e3d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3da:	89 07                	mov    DWORD PTR [edi],eax
c000e3dc:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3df:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3e2:	99                   	cdq    
c000e3e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3e6:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3e9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3ec:	99                   	cdq    
c000e3ed:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3f0:	31 d2                	xor    edx,edx
c000e3f2:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3f5:	eb 1e                	jmp    c000e415 <zoh_vari_process+0x69b>
c000e3f7:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3fa:	31 d2                	xor    edx,edx
c000e3fc:	29 c8                	sub    eax,ecx
c000e3fe:	c1 e0 02             	shl    eax,0x2
c000e401:	39 d1                	cmp    ecx,edx
c000e403:	7e cd                	jle    c000e3d2 <zoh_vari_process+0x658>
c000e405:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e407:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e40b:	83 c0 04             	add    eax,0x4
c000e40e:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e412:	42                   	inc    edx
c000e413:	eb ec                	jmp    c000e401 <zoh_vari_process+0x687>
c000e415:	83 c4 3c             	add    esp,0x3c
c000e418:	89 d0                	mov    eax,edx
c000e41a:	5b                   	pop    ebx
c000e41b:	5e                   	pop    esi
c000e41c:	5f                   	pop    edi
c000e41d:	5d                   	pop    ebp
c000e41e:	c3                   	ret    

c000e41f <zoh_reset>:
c000e41f:	83 ec 0c             	sub    esp,0xc
c000e422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e426:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e429:	85 c0                	test   eax,eax
c000e42b:	74 20                	je     c000e44d <zoh_reset+0x2e>
c000e42d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e430:	83 c0 1c             	add    eax,0x1c
c000e433:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e436:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e43d:	c1 e2 02             	shl    edx,0x2
c000e440:	51                   	push   ecx
c000e441:	52                   	push   edx
c000e442:	6a 00                	push   0x0
c000e444:	50                   	push   eax
c000e445:	e8 52 23 ff ff       	call   c000079c <memset>
c000e44a:	83 c4 10             	add    esp,0x10
c000e44d:	83 c4 0c             	add    esp,0xc
c000e450:	c3                   	ret    

c000e451 <zoh_get_name>:
c000e451:	31 c0                	xor    eax,eax
c000e453:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e458:	75 05                	jne    c000e45f <zoh_get_name+0xe>
c000e45a:	b8 3e a8 02 c0       	mov    eax,0xc002a83e
c000e45f:	c3                   	ret    

c000e460 <zoh_get_description>:
c000e460:	31 c0                	xor    eax,eax
c000e462:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e467:	75 05                	jne    c000e46e <zoh_get_description+0xe>
c000e469:	b8 4f a8 02 c0       	mov    eax,0xc002a84f
c000e46e:	c3                   	ret    

c000e46f <zoh_set_converter>:
c000e46f:	53                   	push   ebx
c000e470:	b8 0a 00 00 00       	mov    eax,0xa
c000e475:	83 ec 08             	sub    esp,0x8
c000e478:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e47c:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e481:	75 6e                	jne    c000e4f1 <zoh_set_converter+0x82>
c000e483:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e486:	85 c0                	test   eax,eax
c000e488:	74 13                	je     c000e49d <zoh_set_converter+0x2e>
c000e48a:	83 ec 0c             	sub    esp,0xc
c000e48d:	50                   	push   eax
c000e48e:	e8 a7 14 00 00       	call   c000f93a <free>
c000e493:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	50                   	push   eax
c000e49e:	50                   	push   eax
c000e49f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a2:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e4a9:	50                   	push   eax
c000e4aa:	6a 01                	push   0x1
c000e4ac:	e8 a9 14 00 00       	call   c000f95a <calloc>
c000e4b1:	83 c4 10             	add    esp,0x10
c000e4b4:	89 c2                	mov    edx,eax
c000e4b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e4b9:	85 d2                	test   edx,edx
c000e4bb:	b8 01 00 00 00       	mov    eax,0x1
c000e4c0:	74 2f                	je     c000e4f1 <zoh_set_converter+0x82>
c000e4c2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4c5:	83 ec 0c             	sub    esp,0xc
c000e4c8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4cb:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4d1:	c7 43 24 7a dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd7a
c000e4d8:	c7 43 20 7a dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd7a
c000e4df:	c7 43 28 1f e4 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e41f
c000e4e6:	53                   	push   ebx
c000e4e7:	e8 33 ff ff ff       	call   c000e41f <zoh_reset>
c000e4ec:	83 c4 10             	add    esp,0x10
c000e4ef:	31 c0                	xor    eax,eax
c000e4f1:	83 c4 08             	add    esp,0x8
c000e4f4:	5b                   	pop    ebx
c000e4f5:	c3                   	ret    

c000e4f6 <CPU::current()>:
c000e4f6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e4fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e501:	90                   	nop
c000e502:	c3                   	ret    

c000e503 <operator new(unsigned long)>:
c000e503:	83 ec 0c             	sub    esp,0xc
c000e506:	83 ec 0c             	sub    esp,0xc
c000e509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e50d:	e8 18 14 00 00       	call   c000f92a <malloc>
c000e512:	83 c4 10             	add    esp,0x10
c000e515:	83 c4 0c             	add    esp,0xc
c000e518:	c3                   	ret    

c000e519 <operator delete(void*)>:
c000e519:	83 ec 0c             	sub    esp,0xc
c000e51c:	83 ec 0c             	sub    esp,0xc
c000e51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e523:	e8 22 14 00 00       	call   c000f94a <rfree>
c000e528:	83 c4 10             	add    esp,0x10
c000e52b:	90                   	nop
c000e52c:	83 c4 0c             	add    esp,0xc
c000e52f:	c3                   	ret    

c000e530 <disableIRQs()>:
c000e530:	fa                   	cli    
c000e531:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e536:	40                   	inc    eax
c000e537:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e53c:	90                   	nop
c000e53d:	c3                   	ret    

c000e53e <enableIRQs()>:
c000e53e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e543:	48                   	dec    eax
c000e544:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e549:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e54e:	85 c0                	test   eax,eax
c000e550:	75 01                	jne    c000e553 <enableIRQs()+0x15>
c000e552:	fb                   	sti    
c000e553:	90                   	nop
c000e554:	c3                   	ret    

c000e555 <lockScheduler()>:
c000e555:	fa                   	cli    
c000e556:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e55b:	40                   	inc    eax
c000e55c:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e561:	90                   	nop
c000e562:	c3                   	ret    

c000e563 <unlockScheduler()>:
c000e563:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e568:	48                   	dec    eax
c000e569:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e56e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e573:	85 c0                	test   eax,eax
c000e575:	75 01                	jne    c000e578 <unlockScheduler()+0x15>
c000e577:	fb                   	sti    
c000e578:	90                   	nop
c000e579:	c3                   	ret    

c000e57a <lockStuff()>:
c000e57a:	fa                   	cli    
c000e57b:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e580:	40                   	inc    eax
c000e581:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e586:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c000e58b:	40                   	inc    eax
c000e58c:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c000e591:	90                   	nop
c000e592:	c3                   	ret    

c000e593 <unlockStuff()>:
c000e593:	83 ec 0c             	sub    esp,0xc
c000e596:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c000e59b:	48                   	dec    eax
c000e59c:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c000e5a1:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c000e5a6:	85 c0                	test   eax,eax
c000e5a8:	75 18                	jne    c000e5c2 <unlockStuff()+0x2f>
c000e5aa:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c000e5af:	85 c0                	test   eax,eax
c000e5b1:	74 0f                	je     c000e5c2 <unlockStuff()+0x2f>
c000e5b3:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c000e5bd:	e8 d2 fe 00 00       	call   c001e494 <schedule()>
c000e5c2:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e5c7:	48                   	dec    eax
c000e5c8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e5cd:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e5d2:	85 c0                	test   eax,eax
c000e5d4:	75 01                	jne    c000e5d7 <unlockStuff()+0x44>
c000e5d6:	fb                   	sti    
c000e5d7:	90                   	nop
c000e5d8:	83 c4 0c             	add    esp,0xc
c000e5db:	c3                   	ret    

c000e5dc <Krnl::resolveCompatibilitySymbol(char*)>:
c000e5dc:	83 ec 0c             	sub    esp,0xc
c000e5df:	83 ec 08             	sub    esp,0x8
c000e5e2:	68 86 a8 02 c0       	push   0xc002a886
c000e5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5eb:	e8 f4 22 ff ff       	call   c00008e4 <strcmp>
c000e5f0:	83 c4 10             	add    esp,0x10
c000e5f3:	85 c0                	test   eax,eax
c000e5f5:	0f 94 c0             	sete   al
c000e5f8:	84 c0                	test   al,al
c000e5fa:	74 0a                	je     c000e606 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e5fc:	b8 48 ee 02 c0       	mov    eax,0xc002ee48
c000e601:	e9 e3 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e606:	83 ec 08             	sub    esp,0x8
c000e609:	68 8f a8 02 c0       	push   0xc002a88f
c000e60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e612:	e8 cd 22 ff ff       	call   c00008e4 <strcmp>
c000e617:	83 c4 10             	add    esp,0x10
c000e61a:	85 c0                	test   eax,eax
c000e61c:	0f 94 c0             	sete   al
c000e61f:	84 c0                	test   al,al
c000e621:	74 0a                	je     c000e62d <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e623:	b8 b4 71 02 c0       	mov    eax,0xc00271b4
c000e628:	e9 bc 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e62d:	83 ec 08             	sub    esp,0x8
c000e630:	68 99 a8 02 c0       	push   0xc002a899
c000e635:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e639:	e8 a6 22 ff ff       	call   c00008e4 <strcmp>
c000e63e:	83 c4 10             	add    esp,0x10
c000e641:	85 c0                	test   eax,eax
c000e643:	0f 94 c0             	sete   al
c000e646:	84 c0                	test   al,al
c000e648:	74 0a                	je     c000e654 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e64a:	b8 e8 6e 02 c0       	mov    eax,0xc0026ee8
c000e64f:	e9 95 00 00 00       	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e654:	83 ec 08             	sub    esp,0x8
c000e657:	68 a2 a8 02 c0       	push   0xc002a8a2
c000e65c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e660:	e8 7f 22 ff ff       	call   c00008e4 <strcmp>
c000e665:	83 c4 10             	add    esp,0x10
c000e668:	85 c0                	test   eax,eax
c000e66a:	0f 94 c0             	sete   al
c000e66d:	84 c0                	test   al,al
c000e66f:	74 07                	je     c000e678 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e671:	b8 b4 72 02 c0       	mov    eax,0xc00272b4
c000e676:	eb 71                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e678:	83 ec 08             	sub    esp,0x8
c000e67b:	68 ac a8 02 c0       	push   0xc002a8ac
c000e680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e684:	e8 5b 22 ff ff       	call   c00008e4 <strcmp>
c000e689:	83 c4 10             	add    esp,0x10
c000e68c:	85 c0                	test   eax,eax
c000e68e:	0f 94 c0             	sete   al
c000e691:	84 c0                	test   al,al
c000e693:	74 07                	je     c000e69c <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e695:	b8 34 70 02 c0       	mov    eax,0xc0027034
c000e69a:	eb 4d                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e69c:	83 ec 08             	sub    esp,0x8
c000e69f:	68 b5 a8 02 c0       	push   0xc002a8b5
c000e6a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6a8:	e8 37 22 ff ff       	call   c00008e4 <strcmp>
c000e6ad:	83 c4 10             	add    esp,0x10
c000e6b0:	85 c0                	test   eax,eax
c000e6b2:	0f 94 c0             	sete   al
c000e6b5:	84 c0                	test   al,al
c000e6b7:	74 07                	je     c000e6c0 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e6b9:	b8 4c ee 02 c0       	mov    eax,0xc002ee4c
c000e6be:	eb 29                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6c0:	83 ec 08             	sub    esp,0x8
c000e6c3:	68 c2 a8 02 c0       	push   0xc002a8c2
c000e6c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6cc:	e8 13 22 ff ff       	call   c00008e4 <strcmp>
c000e6d1:	83 c4 10             	add    esp,0x10
c000e6d4:	85 c0                	test   eax,eax
c000e6d6:	0f 94 c0             	sete   al
c000e6d9:	84 c0                	test   al,al
c000e6db:	74 07                	je     c000e6e4 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e6dd:	b8 4d ee 02 c0       	mov    eax,0xc002ee4d
c000e6e2:	eb 05                	jmp    c000e6e9 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e6e4:	b8 00 00 00 00       	mov    eax,0x0
c000e6e9:	83 c4 0c             	add    esp,0xc
c000e6ec:	c3                   	ret    
c000e6ed:	90                   	nop

c000e6ee <Computer::close(int, int, void*)>:
c000e6ee:	57                   	push   edi
c000e6ef:	56                   	push   esi
c000e6f0:	53                   	push   ebx
c000e6f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e6fd:	83 ec 0c             	sub    esp,0xc
c000e700:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e706:	e8 81 5d 00 00       	call   c001448c <Device::closeAll()>
c000e70b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e711:	83 c4 10             	add    esp,0x10
c000e714:	8b 10                	mov    edx,DWORD PTR [eax]
c000e716:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e71a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e722:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e726:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e72a:	5b                   	pop    ebx
c000e72b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e72e:	5e                   	pop    esi
c000e72f:	5f                   	pop    edi
c000e730:	ff e0                	jmp    eax

c000e732 <Krnl::firstTask()>:
c000e732:	53                   	push   ebx
c000e733:	83 ec 14             	sub    esp,0x14
c000e736:	fb                   	sti    
c000e737:	68 3f 07 00 00       	push   0x73f
c000e73c:	e8 e9 11 00 00       	call   c000f92a <malloc>
c000e741:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e748:	89 c3                	mov    ebx,eax
c000e74a:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c000e750:	68 cf a8 02 c0       	push   0xc002a8cf
c000e755:	6a 01                	push   0x1
c000e757:	50                   	push   eax
c000e758:	e8 fb f8 00 00       	call   c001e058 <Process::Process(bool, char const*, Process*, char**)>
c000e75d:	83 c4 20             	add    esp,0x20
c000e760:	68 ff 00 00 00       	push   0xff
c000e765:	6a 00                	push   0x0
c000e767:	68 bd f2 00 c0       	push   0xc000f2bd
c000e76c:	53                   	push   ebx
c000e76d:	e8 de fa 00 00       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c000e772:	6a 7a                	push   0x7a
c000e774:	6a 00                	push   0x0
c000e776:	68 ce ec 01 c0       	push   0xc001ecce
c000e77b:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c000e781:	e8 ca fa 00 00       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c000e786:	83 c4 20             	add    esp,0x20
c000e789:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e78e:	c6 05 4d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee4d,0x1
c000e795:	e8 88 09 01 00       	call   c001f122 <Vm::initialise8086()>
c000e79a:	e8 cd 4a 00 00       	call   c001326c <Fs::initVFS()>
c000e79f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e7a4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e7aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000e7ac:	6a 00                	push   0x0
c000e7ae:	6a 00                	push   0x0
c000e7b0:	6a 00                	push   0x0
c000e7b2:	50                   	push   eax
c000e7b3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e7b6:	e8 2b e1 00 00       	call   c001c8e6 <Sys::loadSyscalls()>
c000e7bb:	e8 a4 bf 00 00       	call   c001a764 <Krnl::loadSystemEnv()>
c000e7c0:	83 c4 0c             	add    esp,0xc
c000e7c3:	6a 3a                	push   0x3a
c000e7c5:	68 dc a8 02 c0       	push   0xc002a8dc
c000e7ca:	68 e5 a8 02 c0       	push   0xc002a8e5
c000e7cf:	e8 b6 cc 00 00       	call   c001b48a <Reg::readIntWithDefault(char*, char*, int)>
c000e7d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e7d7:	e8 80 55 00 00       	call   c0013d5c <User::loadClockSettings(int)>
c000e7dc:	58                   	pop    eax
c000e7dd:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e7e2:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e7e8:	e8 73 5c 00 00       	call   c0014460 <Device::loadDriversForAll()>
c000e7ed:	e8 b8 ba 00 00       	call   c001a2aa <Krnl::startCPUs()>
c000e7f2:	5a                   	pop    edx
c000e7f3:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c000e7f9:	59                   	pop    ecx
c000e7fa:	6a 01                	push   0x1
c000e7fc:	68 ed a8 02 c0       	push   0xc002a8ed
c000e801:	e8 b0 f2 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c000e806:	5a                   	pop    edx
c000e807:	59                   	pop    ecx
c000e808:	53                   	push   ebx
c000e809:	50                   	push   eax
c000e80a:	e8 d2 f4 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c000e80f:	83 c4 10             	add    esp,0x10
c000e812:	83 ec 0c             	sub    esp,0xc
c000e815:	6a 02                	push   0x2
c000e817:	e8 77 fe 00 00       	call   c001e693 <blockTask(TaskState)>
c000e81c:	83 c4 10             	add    esp,0x10
c000e81f:	eb f1                	jmp    c000e812 <Krnl::firstTask()+0xe0>
c000e821:	90                   	nop

c000e822 <Computer::Computer()>:
c000e822:	83 ec 0c             	sub    esp,0xc
c000e825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e829:	83 ec 08             	sub    esp,0x8
c000e82c:	68 09 a9 02 c0       	push   0xc002a909
c000e831:	50                   	push   eax
c000e832:	e8 cf 5c 00 00       	call   c0014506 <Device::Device(char const*)>
c000e837:	83 c4 10             	add    esp,0x10
c000e83a:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c000e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e843:	89 10                	mov    DWORD PTR [eax],edx
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e857:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e86b:	83 ca 04             	or     edx,0x4
c000e86e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e878:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e87e:	0f b6 d0             	movzx  edx,al
c000e881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e885:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e88c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e890:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e896:	0f b6 d0             	movzx  edx,al
c000e899:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e89d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ac:	8d 50 01             	lea    edx,[eax+0x1]
c000e8af:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8b3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8b9:	0f b6 d0             	movzx  edx,al
c000e8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8c4:	83 e1 3f             	and    ecx,0x3f
c000e8c7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8cf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d5:	0f b6 d0             	movzx  edx,al
c000e8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8dc:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ed:	0f b6 d0             	movzx  edx,al
c000e8f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f4:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8fd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e903:	8d 50 01             	lea    edx,[eax+0x1]
c000e906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e90a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e910:	0f b6 d0             	movzx  edx,al
c000e913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e917:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e91b:	83 e1 3f             	and    ecx,0x3f
c000e91e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e926:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e92c:	0f b6 d0             	movzx  edx,al
c000e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e933:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e93a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e944:	0f b6 d0             	movzx  edx,al
c000e947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e94b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e954:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e95a:	8d 50 01             	lea    edx,[eax+0x1]
c000e95d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e961:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e967:	0f b6 d0             	movzx  edx,al
c000e96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e96e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e972:	83 e1 3f             	and    ecx,0x3f
c000e975:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e979:	90                   	nop
c000e97a:	83 c4 0c             	add    esp,0xc
c000e97d:	c3                   	ret    

c000e97e <Computer::setBootMessage(char const*)>:
c000e97e:	c3                   	ret    
c000e97f:	90                   	nop

c000e980 <Computer::detectFeatures()>:
c000e980:	55                   	push   ebp
c000e981:	57                   	push   edi
c000e982:	56                   	push   esi
c000e983:	53                   	push   ebx
c000e984:	83 ec 1c             	sub    esp,0x1c
c000e987:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e98b:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e995:	e8 4a 19 ff ff       	call   c00002e4 <detectCPUID>
c000e99a:	85 c0                	test   eax,eax
c000e99c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a2:	0f 95 c2             	setne  dl
c000e9a5:	83 e0 fd             	and    eax,0xfffffffd
c000e9a8:	d1 e2                	shl    edx,1
c000e9aa:	09 d0                	or     eax,edx
c000e9ac:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9b2:	a8 02                	test   al,0x2
c000e9b4:	75 46                	jne    c000e9fc <Computer::detectFeatures()+0x7c>
c000e9b6:	f6 05 61 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee61,0x4
c000e9bd:	74 07                	je     c000e9c6 <Computer::detectFeatures()+0x46>
c000e9bf:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e9c6:	e8 ab 84 01 00       	call   c0026e76 <x87Detect>
c000e9cb:	83 e0 01             	and    eax,0x1
c000e9ce:	c1 e0 04             	shl    eax,0x4
c000e9d1:	88 c2                	mov    dl,al
c000e9d3:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9d9:	83 e0 ef             	and    eax,0xffffffef
c000e9dc:	09 d0                	or     eax,edx
c000e9de:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9e4:	a8 10                	test   al,0x10
c000e9e6:	0f 85 2a 01 00 00    	jne    c000eb16 <Computer::detectFeatures()+0x196>
c000e9ec:	84 c0                	test   al,al
c000e9ee:	0f 88 45 01 00 00    	js     c000eb39 <Computer::detectFeatures()+0x1b9>
c000e9f4:	83 c4 1c             	add    esp,0x1c
c000e9f7:	5b                   	pop    ebx
c000e9f8:	5e                   	pop    esi
c000e9f9:	5f                   	pop    edi
c000e9fa:	5d                   	pop    ebp
c000e9fb:	c3                   	ret    
c000e9fc:	83 ec 0c             	sub    esp,0xc
c000e9ff:	6a 20                	push   0x20
c000ea01:	e8 b6 a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea06:	83 e0 01             	and    eax,0x1
c000ea09:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ea10:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea16:	83 e0 f7             	and    eax,0xfffffff7
c000ea19:	09 d0                	or     eax,edx
c000ea1b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea21:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000ea28:	e8 8f a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea2d:	83 e0 01             	and    eax,0x1
c000ea30:	88 c2                	mov    dl,al
c000ea32:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea38:	83 e0 fe             	and    eax,0xfffffffe
c000ea3b:	09 d0                	or     eax,edx
c000ea3d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea43:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000ea4a:	e8 6d a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea4f:	c1 e0 07             	shl    eax,0x7
c000ea52:	88 c2                	mov    dl,al
c000ea54:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea5a:	83 e0 7f             	and    eax,0x7f
c000ea5d:	09 d0                	or     eax,edx
c000ea5f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea65:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000ea6c:	e8 4b a5 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea71:	83 c4 10             	add    esp,0x10
c000ea74:	83 e0 01             	and    eax,0x1
c000ea77:	c1 e0 05             	shl    eax,0x5
c000ea7a:	88 c2                	mov    dl,al
c000ea7c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea82:	83 e0 df             	and    eax,0xffffffdf
c000ea85:	09 d0                	or     eax,edx
c000ea87:	f7 05 60 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee60,0x401
c000ea91:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea97:	0f 84 c2 00 00 00    	je     c000eb5f <Computer::detectFeatures()+0x1df>
c000ea9d:	83 e0 fe             	and    eax,0xfffffffe
c000eaa0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaa6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaac:	88 c2                	mov    dl,al
c000eaae:	83 e2 09             	and    edx,0x9
c000eab1:	fe ca                	dec    dl
c000eab3:	75 09                	jne    c000eabe <Computer::detectFeatures()+0x13e>
c000eab5:	83 e0 fe             	and    eax,0xfffffffe
c000eab8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eabe:	83 ec 0c             	sub    esp,0xc
c000eac1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac5:	50                   	push   eax
c000eac6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000eaca:	55                   	push   ebp
c000eacb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000eacf:	57                   	push   edi
c000ead0:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ead4:	56                   	push   esi
c000ead5:	68 00 00 00 80       	push   0x80000000
c000eada:	e8 59 a4 00 00       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eadf:	83 c4 20             	add    esp,0x20
c000eae2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000eae9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eaed:	0f 86 c3 fe ff ff    	jbe    c000e9b6 <Computer::detectFeatures()+0x36>
c000eaf3:	83 ec 0c             	sub    esp,0xc
c000eaf6:	50                   	push   eax
c000eaf7:	55                   	push   ebp
c000eaf8:	57                   	push   edi
c000eaf9:	56                   	push   esi
c000eafa:	68 01 00 00 80       	push   0x80000001
c000eaff:	e8 34 a4 00 00       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000eb04:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000eb0e:	83 c4 20             	add    esp,0x20
c000eb11:	e9 a0 fe ff ff       	jmp    c000e9b6 <Computer::detectFeatures()+0x36>
c000eb16:	e8 15 83 01 00       	call   c0026e30 <absolutelyNoChanceInHell>
c000eb1b:	88 c2                	mov    dl,al
c000eb1d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb23:	c1 e2 07             	shl    edx,0x7
c000eb26:	83 e0 7f             	and    eax,0x7f
c000eb29:	09 d0                	or     eax,edx
c000eb2b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb31:	84 c0                	test   al,al
c000eb33:	0f 89 bb fe ff ff    	jns    c000e9f4 <Computer::detectFeatures()+0x74>
c000eb39:	e8 d2 82 01 00       	call   c0026e10 <avxDetect>
c000eb3e:	83 e0 01             	and    eax,0x1
c000eb41:	c1 e0 05             	shl    eax,0x5
c000eb44:	88 c2                	mov    dl,al
c000eb46:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eb4c:	83 e0 df             	and    eax,0xffffffdf
c000eb4f:	09 d0                	or     eax,edx
c000eb51:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eb57:	83 c4 1c             	add    esp,0x1c
c000eb5a:	5b                   	pop    ebx
c000eb5b:	5e                   	pop    esi
c000eb5c:	5f                   	pop    edi
c000eb5d:	5d                   	pop    ebp
c000eb5e:	c3                   	ret    
c000eb5f:	83 ec 0c             	sub    esp,0xc
c000eb62:	68 00 02 00 00       	push   0x200
c000eb67:	e8 50 a4 00 00       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	83 e0 01             	and    eax,0x1
c000eb72:	88 c2                	mov    dl,al
c000eb74:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb7a:	83 e0 fe             	and    eax,0xfffffffe
c000eb7d:	09 d0                	or     eax,edx
c000eb7f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb85:	e9 1c ff ff ff       	jmp    c000eaa6 <Computer::detectFeatures()+0x126>

c000eb8a <Computer::displayFeatures()>:
c000eb8a:	53                   	push   ebx
c000eb8b:	83 ec 14             	sub    esp,0x14
c000eb8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb92:	68 19 a9 02 c0       	push   0xc002a919
c000eb97:	e8 45 43 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000eb9c:	83 c4 10             	add    esp,0x10
c000eb9f:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eba6:	0f 85 73 02 00 00    	jne    c000ee1f <Computer::displayFeatures()+0x295>
c000ebac:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ebb1:	83 ec 08             	sub    esp,0x8
c000ebb4:	50                   	push   eax
c000ebb5:	68 2c a9 02 c0       	push   0xc002a92c
c000ebba:	e8 22 43 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ebbf:	83 c4 10             	add    esp,0x10
c000ebc2:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000ebc9:	0f 85 8c 02 00 00    	jne    c000ee5b <Computer::displayFeatures()+0x2d1>
c000ebcf:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ebd4:	83 ec 08             	sub    esp,0x8
c000ebd7:	50                   	push   eax
c000ebd8:	68 3d a9 02 c0       	push   0xc002a93d
c000ebdd:	e8 ff 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000ebec:	0f 85 5f 02 00 00    	jne    c000ee51 <Computer::displayFeatures()+0x2c7>
c000ebf2:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	50                   	push   eax
c000ebfb:	68 4e a9 02 c0       	push   0xc002a94e
c000ec00:	e8 dc 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ec05:	83 c4 10             	add    esp,0x10
c000ec08:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000ec0f:	0f 85 32 02 00 00    	jne    c000ee47 <Computer::displayFeatures()+0x2bd>
c000ec15:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec1a:	83 ec 08             	sub    esp,0x8
c000ec1d:	50                   	push   eax
c000ec1e:	68 5f a9 02 c0       	push   0xc002a95f
c000ec23:	e8 b9 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ec28:	83 c4 10             	add    esp,0x10
c000ec2b:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ec32:	0f 85 05 02 00 00    	jne    c000ee3d <Computer::displayFeatures()+0x2b3>
c000ec38:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec3d:	83 ec 08             	sub    esp,0x8
c000ec40:	50                   	push   eax
c000ec41:	68 70 a9 02 c0       	push   0xc002a970
c000ec46:	e8 96 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ec4b:	83 c4 10             	add    esp,0x10
c000ec4e:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ec55:	0f 85 d8 01 00 00    	jne    c000ee33 <Computer::displayFeatures()+0x2a9>
c000ec5b:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec60:	83 ec 08             	sub    esp,0x8
c000ec63:	50                   	push   eax
c000ec64:	68 81 a9 02 c0       	push   0xc002a981
c000ec69:	e8 73 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec78:	0f 85 ab 01 00 00    	jne    c000ee29 <Computer::displayFeatures()+0x29f>
c000ec7e:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec83:	83 ec 08             	sub    esp,0x8
c000ec86:	50                   	push   eax
c000ec87:	68 92 a9 02 c0       	push   0xc002a992
c000ec8c:	e8 50 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ec91:	83 c4 10             	add    esp,0x10
c000ec94:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec9b:	0f 88 1b 02 00 00    	js     c000eebc <Computer::displayFeatures()+0x332>
c000eca1:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000eca6:	83 ec 08             	sub    esp,0x8
c000eca9:	50                   	push   eax
c000ecaa:	68 a3 a9 02 c0       	push   0xc002a9a3
c000ecaf:	e8 2d 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ecb4:	83 c4 10             	add    esp,0x10
c000ecb7:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ecbe:	0f 85 a1 01 00 00    	jne    c000ee65 <Computer::displayFeatures()+0x2db>
c000ecc4:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ecc9:	83 ec 08             	sub    esp,0x8
c000eccc:	50                   	push   eax
c000eccd:	68 b4 a9 02 c0       	push   0xc002a9b4
c000ecd2:	e8 0a 42 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ece1:	0f 85 cb 01 00 00    	jne    c000eeb2 <Computer::displayFeatures()+0x328>
c000ece7:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ecec:	83 ec 08             	sub    esp,0x8
c000ecef:	50                   	push   eax
c000ecf0:	68 c5 a9 02 c0       	push   0xc002a9c5
c000ecf5:	e8 e7 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ecfa:	83 c4 10             	add    esp,0x10
c000ecfd:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ed04:	0f 85 9e 01 00 00    	jne    c000eea8 <Computer::displayFeatures()+0x31e>
c000ed0a:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed0f:	83 ec 08             	sub    esp,0x8
c000ed12:	50                   	push   eax
c000ed13:	68 d6 a9 02 c0       	push   0xc002a9d6
c000ed18:	e8 c4 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ed1d:	83 c4 10             	add    esp,0x10
c000ed20:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ed27:	0f 85 71 01 00 00    	jne    c000ee9e <Computer::displayFeatures()+0x314>
c000ed2d:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed32:	83 ec 08             	sub    esp,0x8
c000ed35:	50                   	push   eax
c000ed36:	68 e7 a9 02 c0       	push   0xc002a9e7
c000ed3b:	e8 a1 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ed4a:	0f 85 44 01 00 00    	jne    c000ee94 <Computer::displayFeatures()+0x30a>
c000ed50:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed55:	83 ec 08             	sub    esp,0x8
c000ed58:	50                   	push   eax
c000ed59:	68 f8 a9 02 c0       	push   0xc002a9f8
c000ed5e:	e8 7e 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ed6d:	0f 85 17 01 00 00    	jne    c000ee8a <Computer::displayFeatures()+0x300>
c000ed73:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed78:	83 ec 08             	sub    esp,0x8
c000ed7b:	50                   	push   eax
c000ed7c:	68 09 aa 02 c0       	push   0xc002aa09
c000ed81:	e8 5b 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ed86:	83 c4 10             	add    esp,0x10
c000ed89:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed90:	0f 85 ea 00 00 00    	jne    c000ee80 <Computer::displayFeatures()+0x2f6>
c000ed96:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed9b:	83 ec 08             	sub    esp,0x8
c000ed9e:	50                   	push   eax
c000ed9f:	68 1a aa 02 c0       	push   0xc002aa1a
c000eda4:	e8 38 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000eda9:	83 c4 10             	add    esp,0x10
c000edac:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000edb3:	0f 88 0d 01 00 00    	js     c000eec6 <Computer::displayFeatures()+0x33c>
c000edb9:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000edbe:	83 ec 08             	sub    esp,0x8
c000edc1:	50                   	push   eax
c000edc2:	68 2b aa 02 c0       	push   0xc002aa2b
c000edc7:	e8 15 41 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000edcc:	83 c4 10             	add    esp,0x10
c000edcf:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000edd6:	0f 85 9a 00 00 00    	jne    c000ee76 <Computer::displayFeatures()+0x2ec>
c000eddc:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ede1:	83 ec 08             	sub    esp,0x8
c000ede4:	50                   	push   eax
c000ede5:	68 3c aa 02 c0       	push   0xc002aa3c
c000edea:	e8 f2 40 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000edef:	83 c4 10             	add    esp,0x10
c000edf2:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000edf9:	75 74                	jne    c000ee6f <Computer::displayFeatures()+0x2e5>
c000edfb:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ee00:	83 ec 08             	sub    esp,0x8
c000ee03:	50                   	push   eax
c000ee04:	68 4d aa 02 c0       	push   0xc002aa4d
c000ee09:	e8 d3 40 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ee0e:	c7 44 24 20 b4 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c4b4
c000ee16:	83 c4 18             	add    esp,0x18
c000ee19:	5b                   	pop    ebx
c000ee1a:	e9 c2 40 00 00       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)>
c000ee1f:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee24:	e9 88 fd ff ff       	jmp    c000ebb1 <Computer::displayFeatures()+0x27>
c000ee29:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee2e:	e9 50 fe ff ff       	jmp    c000ec83 <Computer::displayFeatures()+0xf9>
c000ee33:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee38:	e9 23 fe ff ff       	jmp    c000ec60 <Computer::displayFeatures()+0xd6>
c000ee3d:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee42:	e9 f6 fd ff ff       	jmp    c000ec3d <Computer::displayFeatures()+0xb3>
c000ee47:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee4c:	e9 c9 fd ff ff       	jmp    c000ec1a <Computer::displayFeatures()+0x90>
c000ee51:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee56:	e9 9c fd ff ff       	jmp    c000ebf7 <Computer::displayFeatures()+0x6d>
c000ee5b:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee60:	e9 6f fd ff ff       	jmp    c000ebd4 <Computer::displayFeatures()+0x4a>
c000ee65:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee6a:	e9 5a fe ff ff       	jmp    c000ecc9 <Computer::displayFeatures()+0x13f>
c000ee6f:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee74:	eb 8a                	jmp    c000ee00 <Computer::displayFeatures()+0x276>
c000ee76:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee7b:	e9 61 ff ff ff       	jmp    c000ede1 <Computer::displayFeatures()+0x257>
c000ee80:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee85:	e9 11 ff ff ff       	jmp    c000ed9b <Computer::displayFeatures()+0x211>
c000ee8a:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee8f:	e9 e4 fe ff ff       	jmp    c000ed78 <Computer::displayFeatures()+0x1ee>
c000ee94:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee99:	e9 b7 fe ff ff       	jmp    c000ed55 <Computer::displayFeatures()+0x1cb>
c000ee9e:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eea3:	e9 8a fe ff ff       	jmp    c000ed32 <Computer::displayFeatures()+0x1a8>
c000eea8:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eead:	e9 5d fe ff ff       	jmp    c000ed0f <Computer::displayFeatures()+0x185>
c000eeb2:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eeb7:	e9 30 fe ff ff       	jmp    c000ecec <Computer::displayFeatures()+0x162>
c000eebc:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eec1:	e9 e0 fd ff ff       	jmp    c000eca6 <Computer::displayFeatures()+0x11c>
c000eec6:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eecb:	e9 ee fe ff ff       	jmp    c000edbe <Computer::displayFeatures()+0x234>

c000eed0 <Computer::rdmsr(unsigned int)>:
c000eed0:	83 ec 0c             	sub    esp,0xc
c000eed3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eed7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eede:	74 0a                	je     c000eeea <Computer::rdmsr(unsigned int)+0x1a>
c000eee0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eee4:	0f 32                	rdmsr  
c000eee6:	83 c4 0c             	add    esp,0xc
c000eee9:	c3                   	ret    
c000eeea:	83 ec 0c             	sub    esp,0xc
c000eeed:	68 5e aa 02 c0       	push   0xc002aa5e
c000eef2:	e8 a6 b9 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000eef7:	83 c4 10             	add    esp,0x10
c000eefa:	eb e4                	jmp    c000eee0 <Computer::rdmsr(unsigned int)+0x10>

c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eefc:	57                   	push   edi
c000eefd:	56                   	push   esi
c000eefe:	52                   	push   edx
c000eeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef03:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef07:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef0b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ef12:	74 0e                	je     c000ef22 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ef14:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ef18:	89 f0                	mov    eax,esi
c000ef1a:	89 fa                	mov    edx,edi
c000ef1c:	0f 30                	wrmsr  
c000ef1e:	58                   	pop    eax
c000ef1f:	5e                   	pop    esi
c000ef20:	5f                   	pop    edi
c000ef21:	c3                   	ret    
c000ef22:	83 ec 0c             	sub    esp,0xc
c000ef25:	68 64 aa 02 c0       	push   0xc002aa64
c000ef2a:	e8 6e b9 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000ef2f:	83 c4 10             	add    esp,0x10
c000ef32:	eb e0                	jmp    c000ef14 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ef34 <Computer::nmiEnabled()>:
c000ef34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef38:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ef3e:	c3                   	ret    
c000ef3f:	90                   	nop

c000ef40 <Computer::readCMOS(unsigned char)>:
c000ef40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef44:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef4b:	19 c0                	sbb    eax,eax
c000ef4d:	83 e0 80             	and    eax,0xffffff80
c000ef50:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef54:	e6 70                	out    0x70,al
c000ef56:	e4 71                	in     al,0x71
c000ef58:	c3                   	ret    
c000ef59:	90                   	nop

c000ef5a <Computer::enableNMI(bool)>:
c000ef5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef62:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ef68:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ef70:	eb ce                	jmp    c000ef40 <Computer::readCMOS(unsigned char)>

c000ef72 <Computer::open(int, int, void*)>:
c000ef72:	56                   	push   esi
c000ef73:	53                   	push   ebx
c000ef74:	83 ec 10             	sub    esp,0x10
c000ef77:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef7b:	f6 05 60 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee60,0x4
c000ef82:	68 68 12 00 00       	push   0x1268
c000ef87:	0f 94 05 84 dd 02 c0 	sete   BYTE PTR ds:0xc002dd84
c000ef8e:	e8 97 09 00 00       	call   c000f92a <malloc>
c000ef93:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef96:	89 c6                	mov    esi,eax
c000ef98:	e8 a3 93 00 00       	call   c0018340 <ACPI::ACPI()>
c000ef9d:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000efa3:	58                   	pop    eax
c000efa4:	5a                   	pop    edx
c000efa5:	56                   	push   esi
c000efa6:	53                   	push   ebx
c000efa7:	e8 6a 53 00 00       	call   c0014316 <Device::addChild(Device*)>
c000efac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efaf:	e8 cc f9 ff ff       	call   c000e980 <Computer::detectFeatures()>
c000efb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000efb7:	e8 ce fb ff ff       	call   c000eb8a <Computer::displayFeatures()>
c000efbc:	59                   	pop    ecx
c000efbd:	5e                   	pop    esi
c000efbe:	6a 01                	push   0x1
c000efc0:	53                   	push   ebx
c000efc1:	e8 94 ff ff ff       	call   c000ef5a <Computer::enableNMI(bool)>
c000efc6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000efcd:	e8 58 09 00 00       	call   c000f92a <malloc>
c000efd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000efd5:	89 c6                	mov    esi,eax
c000efd7:	e8 98 a0 00 00       	call   c0019074 <CPU::CPU()>
c000efdc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000efe2:	58                   	pop    eax
c000efe3:	5a                   	pop    edx
c000efe4:	56                   	push   esi
c000efe5:	53                   	push   ebx
c000efe6:	e8 2b 53 00 00       	call   c0014316 <Device::addChild(Device*)>
c000efeb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eff1:	8b 10                	mov    edx,DWORD PTR [eax]
c000eff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eff7:	6a 00                	push   0x0
c000eff9:	6a 00                	push   0x0
c000effb:	50                   	push   eax
c000effc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efff:	83 c4 20             	add    esp,0x20
c000f002:	e8 a3 58 00 00       	call   c00148aa <setupFPU()>
c000f007:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000f00d:	85 c0                	test   eax,eax
c000f00f:	74 1f                	je     c000f030 <Computer::open(int, int, void*)+0xbe>
c000f011:	83 ec 08             	sub    esp,0x8
c000f014:	50                   	push   eax
c000f015:	53                   	push   ebx
c000f016:	e8 fb 52 00 00       	call   c0014316 <Device::addChild(Device*)>
c000f01b:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000f021:	8b 10                	mov    edx,DWORD PTR [eax]
c000f023:	6a 00                	push   0x0
c000f025:	6a 00                	push   0x0
c000f027:	6a 00                	push   0x0
c000f029:	50                   	push   eax
c000f02a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f02d:	83 c4 20             	add    esp,0x20
c000f030:	83 ec 0c             	sub    esp,0xc
c000f033:	68 32 e7 00 c0       	push   0xc000e732
c000f038:	e8 35 f3 00 00       	call   c001e372 <setupMultitasking(void (*)())>
c000f03d:	83 c4 14             	add    esp,0x14
c000f040:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f045:	5b                   	pop    ebx
c000f046:	5e                   	pop    esi
c000f047:	c3                   	ret    

c000f048 <Computer::disableNMI()>:
c000f048:	6a 00                	push   0x0
c000f04a:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000f04e:	e8 07 ff ff ff       	call   c000ef5a <Computer::enableNMI(bool)>
c000f053:	58                   	pop    eax
c000f054:	5a                   	pop    edx
c000f055:	c3                   	ret    

c000f056 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000f056:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000f061:	19 c0                	sbb    eax,eax
c000f063:	83 e0 80             	and    eax,0xffffff80
c000f066:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000f06a:	e6 70                	out    0x70,al
c000f06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f070:	e6 71                	out    0x71,al
c000f072:	c3                   	ret    
c000f073:	90                   	nop

c000f074 <Computer::handleNMI()>:
c000f074:	56                   	push   esi
c000f075:	53                   	push   ebx
c000f076:	83 ec 10             	sub    esp,0x10
c000f079:	e4 92                	in     al,0x92
c000f07b:	89 c6                	mov    esi,eax
c000f07d:	e4 61                	in     al,0x61
c000f07f:	68 6a aa 02 c0       	push   0xc002aa6a
c000f084:	88 c3                	mov    bl,al
c000f086:	e8 56 3e 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000f08b:	83 c4 10             	add    esp,0x10
c000f08e:	83 e6 10             	and    esi,0x10
c000f091:	75 0d                	jne    c000f0a0 <Computer::handleNMI()+0x2c>
c000f093:	f6 c3 40             	test   bl,0x40
c000f096:	75 1d                	jne    c000f0b5 <Computer::handleNMI()+0x41>
c000f098:	84 db                	test   bl,bl
c000f09a:	78 2d                	js     c000f0c9 <Computer::handleNMI()+0x55>
c000f09c:	58                   	pop    eax
c000f09d:	5b                   	pop    ebx
c000f09e:	5e                   	pop    esi
c000f09f:	c3                   	ret    
c000f0a0:	83 ec 0c             	sub    esp,0xc
c000f0a3:	68 7b aa 02 c0       	push   0xc002aa7b
c000f0a8:	e8 f0 b7 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	f6 c3 40             	test   bl,0x40
c000f0b3:	74 e3                	je     c000f098 <Computer::handleNMI()+0x24>
c000f0b5:	83 ec 0c             	sub    esp,0xc
c000f0b8:	68 88 aa 02 c0       	push   0xc002aa88
c000f0bd:	e8 db b7 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	84 db                	test   bl,bl
c000f0c7:	79 d3                	jns    c000f09c <Computer::handleNMI()+0x28>
c000f0c9:	c7 44 24 10 92 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa92
c000f0d1:	5a                   	pop    edx
c000f0d2:	5b                   	pop    ebx
c000f0d3:	5e                   	pop    esi
c000f0d4:	e9 c4 b7 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c000f0d9:	90                   	nop

c000f0da <Computer::setDiskActivityLight(int, bool)>:
c000f0da:	56                   	push   esi
c000f0db:	53                   	push   ebx
c000f0dc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0e0:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f0e5:	77 1b                	ja     c000f102 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f0e7:	e4 92                	in     al,0x92
c000f0e9:	bb 40 00 00 00       	mov    ebx,0x40
c000f0ee:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f0f2:	89 da                	mov    edx,ebx
c000f0f4:	d3 e2                	shl    edx,cl
c000f0f6:	89 f1                	mov    ecx,esi
c000f0f8:	f7 d2                	not    edx
c000f0fa:	d3 e3                	shl    ebx,cl
c000f0fc:	21 d0                	and    eax,edx
c000f0fe:	09 d8                	or     eax,ebx
c000f100:	e6 92                	out    0x92,al
c000f102:	5b                   	pop    ebx
c000f103:	5e                   	pop    esi
c000f104:	c3                   	ret    
c000f105:	90                   	nop

c000f106 <GDTEntry::setBase(unsigned int)>:
c000f106:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f10a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f10e:	89 c1                	mov    ecx,eax
c000f110:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f114:	c1 e9 10             	shr    ecx,0x10
c000f117:	c1 e8 18             	shr    eax,0x18
c000f11a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f11d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f120:	c3                   	ret    
c000f121:	90                   	nop

c000f122 <GDTEntry::setLimit(unsigned int)>:
c000f122:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f126:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f12a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f12d:	66 89 01             	mov    WORD PTR [ecx],ax
c000f130:	83 e2 f0             	and    edx,0xfffffff0
c000f133:	c1 e8 10             	shr    eax,0x10
c000f136:	83 e0 0f             	and    eax,0xf
c000f139:	09 d0                	or     eax,edx
c000f13b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f13e:	c3                   	ret    
c000f13f:	90                   	nop

c000f140 <GDT::GDT()>:
c000f140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f144:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f14a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f14e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f154:	90                   	nop
c000f155:	c3                   	ret    

c000f156 <GDT::addEntry(GDTEntry)>:
c000f156:	53                   	push   ebx
c000f157:	83 ec 0c             	sub    esp,0xc
c000f15a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f15e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f160:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f167:	52                   	push   edx
c000f168:	50                   	push   eax
c000f169:	68 cc aa 02 c0       	push   0xc002aacc
c000f16e:	e8 6e 3d 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000f173:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f175:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f179:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f17d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f181:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f185:	8d 50 01             	lea    edx,[eax+0x1]
c000f188:	c1 e0 03             	shl    eax,0x3
c000f18b:	89 13                	mov    DWORD PTR [ebx],edx
c000f18d:	83 c4 18             	add    esp,0x18
c000f190:	5b                   	pop    ebx
c000f191:	c3                   	ret    

c000f192 <GDT::getNumberOfEntries()>:
c000f192:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f196:	8b 00                	mov    eax,DWORD PTR [eax]
c000f198:	c3                   	ret    
c000f199:	90                   	nop

c000f19a <GDT::flush()>:
c000f19a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f19e:	8b 10                	mov    edx,DWORD PTR [eax]
c000f1a0:	83 c0 04             	add    eax,0x4
c000f1a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f1aa:	a3 52 ee 02 c0       	mov    ds:0xc002ee52,eax
c000f1af:	66 89 15 50 ee 02 c0 	mov    WORD PTR ds:0xc002ee50,dx
c000f1b6:	e9 95 12 ff ff       	jmp    c0000450 <loadGDT>
c000f1bb:	90                   	nop

c000f1bc <GDT::setup()>:
c000f1bc:	55                   	push   ebp
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	53                   	push   ebx
c000f1c0:	83 ec 3c             	sub    esp,0x3c
c000f1c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f1c7:	6a 00                	push   0x0
c000f1c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f1cd:	53                   	push   ebx
c000f1ce:	e8 33 ff ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f1d3:	6a 00                	push   0x0
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 47 ff ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f1db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f1e3:	6a 00                	push   0x0
c000f1e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f1e9:	53                   	push   ebx
c000f1ea:	e8 17 ff ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f1ef:	68 ff ff ff 00       	push   0xffffff
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 28 ff ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f1fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f1fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f203:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f208:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f20c:	83 c4 20             	add    esp,0x20
c000f20f:	6a 00                	push   0x0
c000f211:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f215:	53                   	push   ebx
c000f216:	e8 eb fe ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c000f21b:	68 ff ff ff 00       	push   0xffffff
c000f220:	53                   	push   ebx
c000f221:	e8 fc fe ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c000f226:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f22a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f22e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f232:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f236:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f23a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f23f:	0d 00 92 c0 00       	or     eax,0xc09200
c000f244:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f248:	89 d8                	mov    eax,ebx
c000f24a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f24e:	80 cc 60             	or     ah,0x60
c000f251:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f255:	83 c4 0c             	add    esp,0xc
c000f258:	89 f8                	mov    eax,edi
c000f25a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f25e:	80 cc 60             	or     ah,0x60
c000f261:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f265:	89 c7                	mov    edi,eax
c000f267:	55                   	push   ebp
c000f268:	e8 e9 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f26d:	83 c4 0c             	add    esp,0xc
c000f270:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f274:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f278:	55                   	push   ebp
c000f279:	e8 d8 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f27e:	83 c4 0c             	add    esp,0xc
c000f281:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f285:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f289:	55                   	push   ebp
c000f28a:	e8 c7 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f28f:	83 c4 0c             	add    esp,0xc
c000f292:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f296:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f29a:	53                   	push   ebx
c000f29b:	51                   	push   ecx
c000f29c:	55                   	push   ebp
c000f29d:	e8 b4 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f2a2:	83 c4 0c             	add    esp,0xc
c000f2a5:	57                   	push   edi
c000f2a6:	56                   	push   esi
c000f2a7:	55                   	push   ebp
c000f2a8:	e8 a9 fe ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c000f2ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f2b0:	e8 e5 fe ff ff       	call   c000f19a <GDT::flush()>
c000f2b5:	83 c4 4c             	add    esp,0x4c
c000f2b8:	5b                   	pop    ebx
c000f2b9:	5e                   	pop    esi
c000f2ba:	5f                   	pop    edi
c000f2bb:	5d                   	pop    ebp
c000f2bc:	c3                   	ret    

c000f2bd <idleFunction(void*)>:
c000f2bd:	53                   	push   ebx
c000f2be:	83 ec 08             	sub    esp,0x8
c000f2c1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000f2c6:	48                   	dec    eax
c000f2c7:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000f2cc:	75 01                	jne    c000f2cf <idleFunction(void*)+0x12>
c000f2ce:	fb                   	sti    
c000f2cf:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000f2d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f2da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f2e1:	74 3c                	je     c000f31f <idleFunction(void*)+0x62>
c000f2e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f2ea:	74 33                	je     c000f31f <idleFunction(void*)+0x62>
c000f2ec:	31 db                	xor    ebx,ebx
c000f2ee:	52                   	push   edx
c000f2ef:	52                   	push   edx
c000f2f0:	68 e1 00 00 00       	push   0xe1
c000f2f5:	50                   	push   eax
c000f2f6:	e8 d5 fb ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c000f2fb:	53                   	push   ebx
c000f2fc:	83 e0 02             	and    eax,0x2
c000f2ff:	50                   	push   eax
c000f300:	68 e1 00 00 00       	push   0xe1
c000f305:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c000f30b:	e8 ec fb ff ff       	call   c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>
c000f310:	83 c4 20             	add    esp,0x20
c000f313:	e8 67 0f ff ff       	call   c000027f <doTPAUSE>
c000f318:	e8 a3 9b 01 00       	call   c0028ec0 <idleCommon()>
c000f31d:	eb f4                	jmp    c000f313 <idleFunction(void*)+0x56>
c000f31f:	fb                   	sti    
c000f320:	f4                   	hlt    
c000f321:	e8 9a 9b 01 00       	call   c0028ec0 <idleCommon()>
c000f326:	eb f7                	jmp    c000f31f <idleFunction(void*)+0x62>

c000f328 <IDTEntry::IDTEntry(bool)>:
c000f328:	83 ec 04             	sub    esp,0x4
c000f32b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f32f:	88 04 24             	mov    BYTE PTR [esp],al
c000f332:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f336:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f33c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f340:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f348:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f34b:	83 e2 f0             	and    edx,0xfffffff0
c000f34e:	83 ca 0e             	or     edx,0xe
c000f351:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f358:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f35b:	83 e2 ef             	and    edx,0xffffffef
c000f35e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f361:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f365:	74 04                	je     c000f36b <IDTEntry::IDTEntry(bool)+0x43>
c000f367:	b2 03                	mov    dl,0x3
c000f369:	eb 02                	jmp    c000f36d <IDTEntry::IDTEntry(bool)+0x45>
c000f36b:	b2 00                	mov    dl,0x0
c000f36d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f371:	83 e2 03             	and    edx,0x3
c000f374:	88 d1                	mov    cl,dl
c000f376:	c1 e1 05             	shl    ecx,0x5
c000f379:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f37c:	83 e2 9f             	and    edx,0xffffff9f
c000f37f:	09 ca                	or     edx,ecx
c000f381:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f384:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f388:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f38b:	83 ca 80             	or     edx,0xffffff80
c000f38e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f391:	90                   	nop
c000f392:	83 c4 04             	add    esp,0x4
c000f395:	c3                   	ret    

c000f396 <IDTEntry::setOffset(unsigned int)>:
c000f396:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f39a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f39e:	66 89 02             	mov    WORD PTR [edx],ax
c000f3a1:	c1 e8 10             	shr    eax,0x10
c000f3a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f3a8:	c3                   	ret    
c000f3a9:	90                   	nop

c000f3aa <IDT::IDT()>:
c000f3aa:	90                   	nop
c000f3ab:	c3                   	ret    

c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f3ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3b0:	83 c0 30             	add    eax,0x30
c000f3b3:	c3                   	ret    

c000f3b4 <IDT::addEntry(IDTEntry, int)>:
c000f3b4:	53                   	push   ebx
c000f3b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3b9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f3bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f3c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f3c5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f3c8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f3cc:	5b                   	pop    ebx
c000f3cd:	c3                   	ret    

c000f3ce <IDT::addEntry(int, void (*)(), bool)>:
c000f3ce:	53                   	push   ebx
c000f3cf:	83 ec 10             	sub    esp,0x10
c000f3d2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f3d7:	50                   	push   eax
c000f3d8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f3dc:	53                   	push   ebx
c000f3dd:	e8 46 ff ff ff       	call   c000f328 <IDTEntry::IDTEntry(bool)>
c000f3e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 aa ff ff ff       	call   c000f396 <IDTEntry::setOffset(unsigned int)>
c000f3ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f3f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f3f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f3fc:	e8 b3 ff ff ff       	call   c000f3b4 <IDT::addEntry(IDTEntry, int)>
c000f401:	83 c4 30             	add    esp,0x30
c000f404:	5b                   	pop    ebx
c000f405:	c3                   	ret    

c000f406 <IDT::flush()>:
c000f406:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f40a:	66 c7 05 58 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee58,0x7ff
c000f413:	a3 5a ee 02 c0       	mov    ds:0xc002ee5a,eax
c000f418:	0f 01 1d 58 ee 02 c0 	lidtd  ds:0xc002ee58
c000f41f:	c3                   	ret    

c000f420 <IDT::setup()>:
c000f420:	57                   	push   edi
c000f421:	56                   	push   esi
c000f422:	53                   	push   ebx
c000f423:	83 ec 10             	sub    esp,0x10
c000f426:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f42a:	6a 00                	push   0x0
c000f42c:	68 70 04 00 c0       	push   0xc0000470
c000f431:	6a 00                	push   0x0
c000f433:	53                   	push   ebx
c000f434:	e8 95 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f439:	6a 00                	push   0x0
c000f43b:	68 80 04 00 c0       	push   0xc0000480
c000f440:	6a 01                	push   0x1
c000f442:	53                   	push   ebx
c000f443:	e8 86 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f448:	83 c4 20             	add    esp,0x20
c000f44b:	6a 00                	push   0x0
c000f44d:	68 8a 04 00 c0       	push   0xc000048a
c000f452:	6a 02                	push   0x2
c000f454:	53                   	push   ebx
c000f455:	e8 74 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f45a:	6a 00                	push   0x0
c000f45c:	68 94 04 00 c0       	push   0xc0000494
c000f461:	6a 03                	push   0x3
c000f463:	53                   	push   ebx
c000f464:	e8 65 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f469:	83 c4 20             	add    esp,0x20
c000f46c:	6a 00                	push   0x0
c000f46e:	68 9e 04 00 c0       	push   0xc000049e
c000f473:	6a 04                	push   0x4
c000f475:	53                   	push   ebx
c000f476:	e8 53 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f47b:	6a 00                	push   0x0
c000f47d:	68 a8 04 00 c0       	push   0xc00004a8
c000f482:	6a 05                	push   0x5
c000f484:	53                   	push   ebx
c000f485:	e8 44 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f48a:	83 c4 20             	add    esp,0x20
c000f48d:	6a 00                	push   0x0
c000f48f:	68 b2 04 00 c0       	push   0xc00004b2
c000f494:	6a 06                	push   0x6
c000f496:	53                   	push   ebx
c000f497:	e8 32 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f49c:	6a 00                	push   0x0
c000f49e:	68 bc 04 00 c0       	push   0xc00004bc
c000f4a3:	6a 07                	push   0x7
c000f4a5:	53                   	push   ebx
c000f4a6:	e8 23 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ab:	83 c4 20             	add    esp,0x20
c000f4ae:	6a 00                	push   0x0
c000f4b0:	68 c6 04 00 c0       	push   0xc00004c6
c000f4b5:	6a 08                	push   0x8
c000f4b7:	53                   	push   ebx
c000f4b8:	e8 11 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4bd:	6a 00                	push   0x0
c000f4bf:	68 ce 04 00 c0       	push   0xc00004ce
c000f4c4:	6a 09                	push   0x9
c000f4c6:	53                   	push   ebx
c000f4c7:	e8 02 ff ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4cc:	83 c4 20             	add    esp,0x20
c000f4cf:	6a 00                	push   0x0
c000f4d1:	68 d8 04 00 c0       	push   0xc00004d8
c000f4d6:	6a 0a                	push   0xa
c000f4d8:	53                   	push   ebx
c000f4d9:	e8 f0 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4de:	6a 00                	push   0x0
c000f4e0:	68 e0 04 00 c0       	push   0xc00004e0
c000f4e5:	6a 0b                	push   0xb
c000f4e7:	53                   	push   ebx
c000f4e8:	e8 e1 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ed:	83 c4 20             	add    esp,0x20
c000f4f0:	6a 00                	push   0x0
c000f4f2:	68 e8 04 00 c0       	push   0xc00004e8
c000f4f7:	6a 0c                	push   0xc
c000f4f9:	53                   	push   ebx
c000f4fa:	e8 cf fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f4ff:	6a 00                	push   0x0
c000f501:	68 f0 04 00 c0       	push   0xc00004f0
c000f506:	6a 0d                	push   0xd
c000f508:	53                   	push   ebx
c000f509:	e8 c0 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f50e:	83 c4 20             	add    esp,0x20
c000f511:	6a 00                	push   0x0
c000f513:	68 f8 04 00 c0       	push   0xc00004f8
c000f518:	6a 0e                	push   0xe
c000f51a:	53                   	push   ebx
c000f51b:	e8 ae fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f520:	6a 00                	push   0x0
c000f522:	68 00 05 00 c0       	push   0xc0000500
c000f527:	6a 0f                	push   0xf
c000f529:	53                   	push   ebx
c000f52a:	e8 9f fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f52f:	83 c4 20             	add    esp,0x20
c000f532:	6a 00                	push   0x0
c000f534:	68 0a 05 00 c0       	push   0xc000050a
c000f539:	6a 10                	push   0x10
c000f53b:	53                   	push   ebx
c000f53c:	e8 8d fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f541:	6a 00                	push   0x0
c000f543:	68 14 05 00 c0       	push   0xc0000514
c000f548:	6a 11                	push   0x11
c000f54a:	53                   	push   ebx
c000f54b:	e8 7e fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f550:	83 c4 20             	add    esp,0x20
c000f553:	6a 00                	push   0x0
c000f555:	68 1e 05 00 c0       	push   0xc000051e
c000f55a:	6a 12                	push   0x12
c000f55c:	53                   	push   ebx
c000f55d:	e8 6c fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f562:	6a 01                	push   0x1
c000f564:	68 b8 05 00 c0       	push   0xc00005b8
c000f569:	6a 60                	push   0x60
c000f56b:	53                   	push   ebx
c000f56c:	e8 5d fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f571:	83 c4 20             	add    esp,0x20
c000f574:	6a 00                	push   0x0
c000f576:	68 bf 05 00 c0       	push   0xc00005bf
c000f57b:	6a 20                	push   0x20
c000f57d:	53                   	push   ebx
c000f57e:	e8 4b fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f583:	6a 00                	push   0x0
c000f585:	68 aa 05 00 c0       	push   0xc00005aa
c000f58a:	6a 21                	push   0x21
c000f58c:	53                   	push   ebx
c000f58d:	e8 3c fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f592:	83 c4 20             	add    esp,0x20
c000f595:	6a 00                	push   0x0
c000f597:	68 b1 05 00 c0       	push   0xc00005b1
c000f59c:	6a 22                	push   0x22
c000f59e:	53                   	push   ebx
c000f59f:	e8 2a fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5a4:	6a 00                	push   0x0
c000f5a6:	68 28 05 00 c0       	push   0xc0000528
c000f5ab:	6a 23                	push   0x23
c000f5ad:	53                   	push   ebx
c000f5ae:	e8 1b fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5b3:	83 c4 20             	add    esp,0x20
c000f5b6:	6a 00                	push   0x0
c000f5b8:	68 32 05 00 c0       	push   0xc0000532
c000f5bd:	6a 24                	push   0x24
c000f5bf:	53                   	push   ebx
c000f5c0:	e8 09 fe ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5c5:	6a 00                	push   0x0
c000f5c7:	68 3c 05 00 c0       	push   0xc000053c
c000f5cc:	6a 25                	push   0x25
c000f5ce:	53                   	push   ebx
c000f5cf:	e8 fa fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5d4:	83 c4 20             	add    esp,0x20
c000f5d7:	6a 00                	push   0x0
c000f5d9:	68 46 05 00 c0       	push   0xc0000546
c000f5de:	6a 26                	push   0x26
c000f5e0:	53                   	push   ebx
c000f5e1:	e8 e8 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5e6:	6a 00                	push   0x0
c000f5e8:	68 50 05 00 c0       	push   0xc0000550
c000f5ed:	6a 27                	push   0x27
c000f5ef:	53                   	push   ebx
c000f5f0:	e8 d9 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f5f5:	83 c4 20             	add    esp,0x20
c000f5f8:	6a 00                	push   0x0
c000f5fa:	68 5a 05 00 c0       	push   0xc000055a
c000f5ff:	6a 28                	push   0x28
c000f601:	53                   	push   ebx
c000f602:	e8 c7 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f607:	6a 00                	push   0x0
c000f609:	68 64 05 00 c0       	push   0xc0000564
c000f60e:	6a 29                	push   0x29
c000f610:	53                   	push   ebx
c000f611:	e8 b8 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f616:	83 c4 20             	add    esp,0x20
c000f619:	6a 00                	push   0x0
c000f61b:	68 6e 05 00 c0       	push   0xc000056e
c000f620:	6a 2a                	push   0x2a
c000f622:	53                   	push   ebx
c000f623:	e8 a6 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f628:	6a 00                	push   0x0
c000f62a:	68 78 05 00 c0       	push   0xc0000578
c000f62f:	6a 2b                	push   0x2b
c000f631:	53                   	push   ebx
c000f632:	e8 97 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f637:	83 c4 20             	add    esp,0x20
c000f63a:	6a 00                	push   0x0
c000f63c:	68 82 05 00 c0       	push   0xc0000582
c000f641:	6a 2c                	push   0x2c
c000f643:	53                   	push   ebx
c000f644:	e8 85 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f649:	6a 00                	push   0x0
c000f64b:	68 8c 05 00 c0       	push   0xc000058c
c000f650:	6a 2d                	push   0x2d
c000f652:	53                   	push   ebx
c000f653:	e8 76 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f658:	83 c4 20             	add    esp,0x20
c000f65b:	6a 00                	push   0x0
c000f65d:	68 96 05 00 c0       	push   0xc0000596
c000f662:	6a 2e                	push   0x2e
c000f664:	53                   	push   ebx
c000f665:	e8 64 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f66a:	6a 00                	push   0x0
c000f66c:	68 a0 05 00 c0       	push   0xc00005a0
c000f671:	6a 2f                	push   0x2f
c000f673:	53                   	push   ebx
c000f674:	e8 55 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f679:	83 c4 20             	add    esp,0x20
c000f67c:	6a 00                	push   0x0
c000f67e:	68 f5 05 00 c0       	push   0xc00005f5
c000f683:	6a 30                	push   0x30
c000f685:	53                   	push   ebx
c000f686:	e8 43 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f68b:	6a 00                	push   0x0
c000f68d:	68 ff 05 00 c0       	push   0xc00005ff
c000f692:	6a 31                	push   0x31
c000f694:	53                   	push   ebx
c000f695:	e8 34 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f69a:	83 c4 20             	add    esp,0x20
c000f69d:	6a 00                	push   0x0
c000f69f:	68 09 06 00 c0       	push   0xc0000609
c000f6a4:	6a 32                	push   0x32
c000f6a6:	53                   	push   ebx
c000f6a7:	e8 22 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6ac:	6a 00                	push   0x0
c000f6ae:	68 13 06 00 c0       	push   0xc0000613
c000f6b3:	6a 33                	push   0x33
c000f6b5:	53                   	push   ebx
c000f6b6:	e8 13 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6bb:	83 c4 20             	add    esp,0x20
c000f6be:	6a 00                	push   0x0
c000f6c0:	68 1d 06 00 c0       	push   0xc000061d
c000f6c5:	6a 34                	push   0x34
c000f6c7:	53                   	push   ebx
c000f6c8:	e8 01 fd ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6cd:	6a 00                	push   0x0
c000f6cf:	68 27 06 00 c0       	push   0xc0000627
c000f6d4:	6a 35                	push   0x35
c000f6d6:	53                   	push   ebx
c000f6d7:	e8 f2 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6dc:	83 c4 20             	add    esp,0x20
c000f6df:	6a 00                	push   0x0
c000f6e1:	68 31 06 00 c0       	push   0xc0000631
c000f6e6:	6a 36                	push   0x36
c000f6e8:	53                   	push   ebx
c000f6e9:	e8 e0 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6ee:	6a 00                	push   0x0
c000f6f0:	68 3b 06 00 c0       	push   0xc000063b
c000f6f5:	6a 37                	push   0x37
c000f6f7:	53                   	push   ebx
c000f6f8:	e8 d1 fc ff ff       	call   c000f3ce <IDT::addEntry(int, void (*)(), bool)>
c000f6fd:	83 c4 1c             	add    esp,0x1c
c000f700:	6a 03                	push   0x3
c000f702:	6a 02                	push   0x2
c000f704:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f70a:	e8 05 2d 00 00       	call   c0012414 <VAS::allocatePages(int, int)>
c000f70f:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f716:	89 c6                	mov    esi,eax
c000f718:	e8 0d 02 00 00       	call   c000f92a <malloc>
c000f71d:	81 c6 00 20 00 00    	add    esi,0x2000
c000f723:	89 04 24             	mov    DWORD PTR [esp],eax
c000f726:	89 c7                	mov    edi,eax
c000f728:	e8 df 1c 00 00       	call   c001140c <TSS::TSS()>
c000f72d:	83 c4 0c             	add    esp,0xc
c000f730:	68 c6 04 00 c0       	push   0xc00004c6
c000f735:	56                   	push   esi
c000f736:	57                   	push   edi
c000f737:	e8 10 1d 00 00       	call   c001144c <TSS::setup(unsigned long, unsigned long)>
c000f73c:	89 c6                	mov    esi,eax
c000f73e:	58                   	pop    eax
c000f73f:	5a                   	pop    edx
c000f740:	6a 00                	push   0x0
c000f742:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f746:	50                   	push   eax
c000f747:	e8 dc fb ff ff       	call   c000f328 <IDTEntry::IDTEntry(bool)>
c000f74c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f750:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f755:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f75c:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f762:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f766:	80 ce 05             	or     dh,0x5
c000f769:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f76c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f770:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f774:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f777:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f77a:	e8 87 fc ff ff       	call   c000f406 <IDT::flush()>
c000f77f:	83 c4 20             	add    esp,0x20
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	5f                   	pop    edi
c000f785:	c3                   	ret    

c000f786 <sbrk>:
c000f786:	55                   	push   ebp
c000f787:	57                   	push   edi
c000f788:	56                   	push   esi
c000f789:	53                   	push   ebx
c000f78a:	83 ec 1c             	sub    esp,0x1c
c000f78d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f791:	85 c0                	test   eax,eax
c000f793:	74 3e                	je     c000f7d3 <sbrk+0x4d>
c000f795:	78 43                	js     c000f7da <sbrk+0x54>
c000f797:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c000f79d:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f7a3:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f7a9:	83 e2 01             	and    edx,0x1
c000f7ac:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f7b0:	8b 0d 74 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd74
c000f7b6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f7ba:	05 ff 0f 00 00       	add    eax,0xfff
c000f7bf:	89 c2                	mov    edx,eax
c000f7c1:	78 2f                	js     c000f7f2 <sbrk+0x6c>
c000f7c3:	c1 fa 0c             	sar    edx,0xc
c000f7c6:	89 d7                	mov    edi,edx
c000f7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f7cc:	be 00 00 00 00       	mov    esi,0x0
c000f7d1:	eb 36                	jmp    c000f809 <sbrk+0x83>
c000f7d3:	a1 74 dd 02 c0       	mov    eax,ds:0xc002dd74
c000f7d8:	eb 73                	jmp    c000f84d <sbrk+0xc7>
c000f7da:	83 ec 08             	sub    esp,0x8
c000f7dd:	50                   	push   eax
c000f7de:	68 e8 aa 02 c0       	push   0xc002aae8
c000f7e3:	e8 f9 36 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000f7e8:	83 c4 10             	add    esp,0x10
c000f7eb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f7f0:	eb 5b                	jmp    c000f84d <sbrk+0xc7>
c000f7f2:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f7f8:	eb c9                	jmp    c000f7c3 <sbrk+0x3d>
c000f7fa:	81 05 74 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd74,0x1000
c000f804:	46                   	inc    esi
c000f805:	39 f7                	cmp    edi,esi
c000f807:	74 33                	je     c000f83c <sbrk+0xb6>
c000f809:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c000f80f:	8b 2d 74 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd74
c000f815:	e8 7c 07 00 00       	call   c000ff96 <Phys::allocatePage()>
c000f81a:	68 01 0c 00 00       	push   0xc01
c000f81f:	55                   	push   ebp
c000f820:	50                   	push   eax
c000f821:	53                   	push   ebx
c000f822:	e8 eb 2a 00 00       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f827:	83 c4 10             	add    esp,0x10
c000f82a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f82f:	74 c9                	je     c000f7fa <sbrk+0x74>
c000f831:	8b 1d 74 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd74
c000f837:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f83a:	eb be                	jmp    c000f7fa <sbrk+0x74>
c000f83c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f841:	75 12                	jne    c000f855 <sbrk+0xcf>
c000f843:	0f 20 d8             	mov    eax,cr3
c000f846:	0f 22 d8             	mov    cr3,eax
c000f849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f84d:	83 c4 1c             	add    esp,0x1c
c000f850:	5b                   	pop    ebx
c000f851:	5e                   	pop    esi
c000f852:	5f                   	pop    edi
c000f853:	5d                   	pop    ebp
c000f854:	c3                   	ret    
c000f855:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f859:	89 cb                	mov    ebx,ecx
c000f85b:	c1 eb 0a             	shr    ebx,0xa
c000f85e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f864:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f86a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f86e:	c1 e0 0c             	shl    eax,0xc
c000f871:	01 c8                	add    eax,ecx
c000f873:	c1 e8 0a             	shr    eax,0xa
c000f876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f87b:	2d 00 00 40 00       	sub    eax,0x400000
c000f880:	39 c3                	cmp    ebx,eax
c000f882:	77 c5                	ja     c000f849 <sbrk+0xc3>
c000f884:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f887:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f88d:	39 d8                	cmp    eax,ebx
c000f88f:	73 f3                	jae    c000f884 <sbrk+0xfe>
c000f891:	eb b6                	jmp    c000f849 <sbrk+0xc3>

c000f893 <mmap>:
c000f893:	83 ec 18             	sub    esp,0x18
c000f896:	68 18 ab 02 c0       	push   0xc002ab18
c000f89b:	e8 fd af 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000f8a0:	b8 00 00 00 00       	mov    eax,0x0
c000f8a5:	83 c4 1c             	add    esp,0x1c
c000f8a8:	c3                   	ret    

c000f8a9 <munmap>:
c000f8a9:	83 ec 18             	sub    esp,0x18
c000f8ac:	68 1d ab 02 c0       	push   0xc002ab1d
c000f8b1:	e8 e7 af 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000f8b6:	b8 00 00 00 00       	mov    eax,0x0
c000f8bb:	83 c4 1c             	add    esp,0x1c
c000f8be:	c3                   	ret    

c000f8bf <liballoc_lock()>:
c000f8bf:	fa                   	cli    
c000f8c0:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c000f8c6:	b8 00 00 00 00       	mov    eax,0x0
c000f8cb:	c3                   	ret    

c000f8cc <liballoc_unlock()>:
c000f8cc:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000f8d1:	48                   	dec    eax
c000f8d2:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000f8d7:	75 01                	jne    c000f8da <liballoc_unlock()+0xe>
c000f8d9:	fb                   	sti    
c000f8da:	b8 00 00 00 00       	mov    eax,0x0
c000f8df:	c3                   	ret    

c000f8e0 <liballoc_alloc(int)>:
c000f8e0:	83 ec 10             	sub    esp,0x10
c000f8e3:	68 01 08 00 00       	push   0x801
c000f8e8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8ec:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f8f2:	e8 1d 2b 00 00       	call   c0012414 <VAS::allocatePages(int, int)>
c000f8f7:	83 c4 1c             	add    esp,0x1c
c000f8fa:	c3                   	ret    

c000f8fb <liballoc_free(void*, int)>:
c000f8fb:	83 ec 14             	sub    esp,0x14
c000f8fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f902:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f908:	e8 b1 27 00 00       	call   c00120be <VAS::freeAllocatedPages(unsigned long)>
c000f90d:	b8 00 00 00 00       	mov    eax,0x0
c000f912:	83 c4 1c             	add    esp,0x1c
c000f915:	c3                   	ret    

c000f916 <realloc>:
c000f916:	83 ec 14             	sub    esp,0x14
c000f919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f921:	e8 52 1d ff ff       	call   c0001678 <dlrealloc>
c000f926:	83 c4 1c             	add    esp,0x1c
c000f929:	c3                   	ret    

c000f92a <malloc>:
c000f92a:	83 ec 18             	sub    esp,0x18
c000f92d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f931:	e8 05 18 ff ff       	call   c000113b <dlmalloc>
c000f936:	83 c4 1c             	add    esp,0x1c
c000f939:	c3                   	ret    

c000f93a <free>:
c000f93a:	83 ec 18             	sub    esp,0x18
c000f93d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f941:	e8 9a 14 ff ff       	call   c0000de0 <dlfree>
c000f946:	83 c4 1c             	add    esp,0x1c
c000f949:	c3                   	ret    

c000f94a <rfree>:
c000f94a:	83 ec 18             	sub    esp,0x18
c000f94d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f951:	e8 8a 14 ff ff       	call   c0000de0 <dlfree>
c000f956:	83 c4 1c             	add    esp,0x1c
c000f959:	c3                   	ret    

c000f95a <calloc>:
c000f95a:	56                   	push   esi
c000f95b:	53                   	push   ebx
c000f95c:	83 ec 10             	sub    esp,0x10
c000f95f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f963:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f968:	53                   	push   ebx
c000f969:	e8 bc ff ff ff       	call   c000f92a <malloc>
c000f96e:	89 c6                	mov    esi,eax
c000f970:	83 c4 0c             	add    esp,0xc
c000f973:	53                   	push   ebx
c000f974:	6a 00                	push   0x0
c000f976:	50                   	push   eax
c000f977:	e8 20 0e ff ff       	call   c000079c <memset>
c000f97c:	89 f0                	mov    eax,esi
c000f97e:	83 c4 14             	add    esp,0x14
c000f981:	5b                   	pop    ebx
c000f982:	5e                   	pop    esi
c000f983:	c3                   	ret    

c000f984 <hwTextMode_loadInData(VgaText*)>:
c000f984:	55                   	push   ebp
c000f985:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c000f98a:	57                   	push   edi
c000f98b:	56                   	push   esi
c000f98c:	53                   	push   ebx
c000f98d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f991:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f994:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f997:	85 d2                	test   edx,edx
c000f999:	7e 29                	jle    c000f9c4 <hwTextMode_loadInData(VgaText*)+0x40>
c000f99b:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f9a1:	31 f6                	xor    esi,esi
c000f9a3:	29 cd                	sub    ebp,ecx
c000f9a5:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f9a8:	31 c0                	xor    eax,eax
c000f9aa:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f9ae:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f9b2:	40                   	inc    eax
c000f9b3:	83 f8 50             	cmp    eax,0x50
c000f9b6:	75 f2                	jne    c000f9aa <hwTextMode_loadInData(VgaText*)+0x26>
c000f9b8:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f9be:	46                   	inc    esi
c000f9bf:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f9c2:	7f e1                	jg     c000f9a5 <hwTextMode_loadInData(VgaText*)+0x21>
c000f9c4:	5b                   	pop    ebx
c000f9c5:	5e                   	pop    esi
c000f9c6:	5f                   	pop    edi
c000f9c7:	5d                   	pop    ebp
c000f9c8:	c3                   	ret    

c000f9c9 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f9c9:	55                   	push   ebp
c000f9ca:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000f9d1:	57                   	push   edi
c000f9d2:	56                   	push   esi
c000f9d3:	53                   	push   ebx
c000f9d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9d8:	75 44                	jne    c000fa1e <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f9da:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9dd:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9e0:	8b 15 80 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd80
c000f9e6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f9ea:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f9f0:	eb 08                	jmp    c000f9fa <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f9f2:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f9f5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f9f8:	89 da                	mov    edx,ebx
c000f9fa:	83 e5 0f             	and    ebp,0xf
c000f9fd:	c1 e0 04             	shl    eax,0x4
c000fa00:	8d 5a 02             	lea    ebx,[edx+0x2]
c000fa03:	0f b6 c0             	movzx  eax,al
c000fa06:	41                   	inc    ecx
c000fa07:	09 e8                	or     eax,ebp
c000fa09:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000fa0d:	c1 e0 08             	shl    eax,0x8
c000fa10:	09 e8                	or     eax,ebp
c000fa12:	39 fb                	cmp    ebx,edi
c000fa14:	66 89 02             	mov    WORD PTR [edx],ax
c000fa17:	75 d9                	jne    c000f9f2 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000fa19:	5b                   	pop    ebx
c000fa1a:	5e                   	pop    esi
c000fa1b:	5f                   	pop    edi
c000fa1c:	5d                   	pop    ebp
c000fa1d:	c3                   	ret    
c000fa1e:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000fa25:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000fa2c:	31 c0                	xor    eax,eax
c000fa2e:	bd 02 00 00 00       	mov    ebp,0x2
c000fa33:	eb ab                	jmp    c000f9e0 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000fa35 <hwTextMode_showCursor(VgaText*, bool)>:
c000fa35:	56                   	push   esi
c000fa36:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fa3d:	53                   	push   ebx
c000fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa42:	75 36                	jne    c000fa7a <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000fa44:	84 c0                	test   al,al
c000fa46:	74 35                	je     c000fa7d <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000fa48:	bb d4 03 00 00       	mov    ebx,0x3d4
c000fa4d:	b0 0a                	mov    al,0xa
c000fa4f:	89 da                	mov    edx,ebx
c000fa51:	ee                   	out    dx,al
c000fa52:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000fa57:	89 ca                	mov    edx,ecx
c000fa59:	ec                   	in     al,dx
c000fa5a:	b2 0f                	mov    dl,0xf
c000fa5c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000fa60:	83 e0 c0             	and    eax,0xffffffc0
c000fa63:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000fa66:	09 d0                	or     eax,edx
c000fa68:	89 ca                	mov    edx,ecx
c000fa6a:	ee                   	out    dx,al
c000fa6b:	b0 0b                	mov    al,0xb
c000fa6d:	89 da                	mov    edx,ebx
c000fa6f:	ee                   	out    dx,al
c000fa70:	89 ca                	mov    edx,ecx
c000fa72:	ec                   	in     al,dx
c000fa73:	83 e0 e0             	and    eax,0xffffffe0
c000fa76:	83 c8 0f             	or     eax,0xf
c000fa79:	ee                   	out    dx,al
c000fa7a:	5b                   	pop    ebx
c000fa7b:	5e                   	pop    esi
c000fa7c:	c3                   	ret    
c000fa7d:	b0 0a                	mov    al,0xa
c000fa7f:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa84:	ee                   	out    dx,al
c000fa85:	b0 20                	mov    al,0x20
c000fa87:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa8c:	ee                   	out    dx,al
c000fa8d:	5b                   	pop    ebx
c000fa8e:	5e                   	pop    esi
c000fa8f:	c3                   	ret    

c000fa90 <hwTextMode_update(VgaText*)>:
c000fa90:	c3                   	ret    

c000fa91 <hwTextMode_updateCursor(VgaText*)>:
c000fa91:	56                   	push   esi
c000fa92:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fa99:	53                   	push   ebx
c000fa9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa9e:	75 36                	jne    c000fad6 <hwTextMode_updateCursor(VgaText*)+0x45>
c000faa0:	be d4 03 00 00       	mov    esi,0x3d4
c000faa5:	b9 19 00 00 00       	mov    ecx,0x19
c000faaa:	89 f2                	mov    edx,esi
c000faac:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000faaf:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fab2:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fab5:	c1 e1 04             	shl    ecx,0x4
c000fab8:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fabb:	b0 0f                	mov    al,0xf
c000fabd:	ee                   	out    dx,al
c000fabe:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fac3:	88 c8                	mov    al,cl
c000fac5:	89 da                	mov    edx,ebx
c000fac7:	ee                   	out    dx,al
c000fac8:	b0 0e                	mov    al,0xe
c000faca:	89 f2                	mov    edx,esi
c000facc:	ee                   	out    dx,al
c000facd:	89 c8                	mov    eax,ecx
c000facf:	89 da                	mov    edx,ebx
c000fad1:	66 c1 e8 08          	shr    ax,0x8
c000fad5:	ee                   	out    dx,al
c000fad6:	5b                   	pop    ebx
c000fad7:	5e                   	pop    esi
c000fad8:	c3                   	ret    

c000fad9 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fad9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fadd:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fae4:	75 38                	jne    c000fb1e <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fae6:	ba da 03 00 00       	mov    edx,0x3da
c000faeb:	84 c0                	test   al,al
c000faed:	75 18                	jne    c000fb07 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000faef:	ec                   	in     al,dx
c000faf0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000faf5:	b0 30                	mov    al,0x30
c000faf7:	89 ca                	mov    edx,ecx
c000faf9:	ee                   	out    dx,al
c000fafa:	ba c1 03 00 00       	mov    edx,0x3c1
c000faff:	ec                   	in     al,dx
c000fb00:	83 c8 08             	or     eax,0x8
c000fb03:	89 ca                	mov    edx,ecx
c000fb05:	ee                   	out    dx,al
c000fb06:	c3                   	ret    
c000fb07:	ec                   	in     al,dx
c000fb08:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fb0d:	b0 30                	mov    al,0x30
c000fb0f:	89 ca                	mov    edx,ecx
c000fb11:	ee                   	out    dx,al
c000fb12:	ba c1 03 00 00       	mov    edx,0x3c1
c000fb17:	ec                   	in     al,dx
c000fb18:	83 e0 f7             	and    eax,0xfffffff7
c000fb1b:	89 ca                	mov    edx,ecx
c000fb1d:	ee                   	out    dx,al
c000fb1e:	c3                   	ret    

c000fb1f <hwTextMode_scrollScreen(VgaText*)>:
c000fb1f:	55                   	push   ebp
c000fb20:	57                   	push   edi
c000fb21:	56                   	push   esi
c000fb22:	53                   	push   ebx
c000fb23:	83 ec 1c             	sub    esp,0x1c
c000fb26:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb2a:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fb31:	74 0e                	je     c000fb41 <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fb33:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fb3a:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fb41:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c000fb46:	bd 02 00 00 00       	mov    ebp,0x2
c000fb4b:	05 a0 00 00 00       	add    eax,0xa0
c000fb50:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fb54:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fb58:	31 c0                	xor    eax,eax
c000fb5a:	eb 0b                	jmp    c000fb67 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fb5c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb62:	74 51                	je     c000fbb5 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fb64:	43                   	inc    ebx
c000fb65:	89 f0                	mov    eax,esi
c000fb67:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fb6d:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fb73:	88 13                	mov    BYTE PTR [ebx],dl
c000fb75:	8d 70 01             	lea    esi,[eax+0x1]
c000fb78:	83 fd 18             	cmp    ebp,0x18
c000fb7b:	75 df                	jne    c000fb5c <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb7d:	a8 01                	test   al,0x1
c000fb7f:	75 13                	jne    c000fb94 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb81:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb84:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb8a:	75 d8                	jne    c000fb64 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb8c:	83 c4 1c             	add    esp,0x1c
c000fb8f:	5b                   	pop    ebx
c000fb90:	5e                   	pop    esi
c000fb91:	5f                   	pop    edi
c000fb92:	5d                   	pop    ebp
c000fb93:	c3                   	ret    
c000fb94:	83 ec 08             	sub    esp,0x8
c000fb97:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb9b:	50                   	push   eax
c000fb9c:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fba0:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fba4:	50                   	push   eax
c000fba5:	e8 18 0c 00 00       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbaa:	83 c4 10             	add    esp,0x10
c000fbad:	88 07                	mov    BYTE PTR [edi],al
c000fbaf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fbb3:	eb cf                	jmp    c000fb84 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fbb5:	45                   	inc    ebp
c000fbb6:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fbbe:	eb 94                	jmp    c000fb54 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fbc0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fbc0:	57                   	push   edi
c000fbc1:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fbc8:	56                   	push   esi
c000fbc9:	53                   	push   ebx
c000fbca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fbce:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fbd2:	75 62                	jne    c000fc36 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fbd4:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fbd9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fbde:	83 ec 08             	sub    esp,0x8
c000fbe1:	52                   	push   edx
c000fbe2:	50                   	push   eax
c000fbe3:	e8 da 0b 00 00       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c000fbe8:	5a                   	pop    edx
c000fbe9:	0f b6 c0             	movzx  eax,al
c000fbec:	59                   	pop    ecx
c000fbed:	50                   	push   eax
c000fbee:	0f be c3             	movsx  eax,bl
c000fbf1:	50                   	push   eax
c000fbf2:	e8 71 0c 00 00       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c000fbf7:	83 c4 10             	add    esp,0x10
c000fbfa:	8b 35 80 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd80
c000fc00:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fc07:	74 07                	je     c000fc10 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fc09:	66 0f be c3          	movsx  ax,bl
c000fc0d:	80 cc 02             	or     ah,0x2
c000fc10:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc14:	ba 19 00 00 00       	mov    edx,0x19
c000fc19:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fc1c:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fc1f:	8d 14 92             	lea    edx,[edx+edx*4]
c000fc22:	c1 e1 04             	shl    ecx,0x4
c000fc25:	c1 e2 04             	shl    edx,0x4
c000fc28:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fc2c:	01 ca                	add    edx,ecx
c000fc2e:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fc32:	5b                   	pop    ebx
c000fc33:	5e                   	pop    esi
c000fc34:	5f                   	pop    edi
c000fc35:	c3                   	ret    
c000fc36:	b8 02 00 00 00       	mov    eax,0x2
c000fc3b:	31 d2                	xor    edx,edx
c000fc3d:	eb 9f                	jmp    c000fbde <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fc3f <setupTextMode()>:
c000fc3f:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fc44:	83 e0 30             	and    eax,0x30
c000fc47:	66 83 f8 30          	cmp    ax,0x30
c000fc4b:	75 11                	jne    c000fc5e <setupTextMode()+0x1f>
c000fc4d:	81 2d 80 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dd80,0x8000
c000fc57:	c6 05 e0 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eee0,0x1
c000fc5e:	c7 05 18 ef 02 c0 d9 fa 00 c0 	mov    DWORD PTR ds:0xc002ef18,0xc000fad9
c000fc68:	c7 05 04 ef 02 c0 84 f9 00 c0 	mov    DWORD PTR ds:0xc002ef04,0xc000f984
c000fc72:	c7 05 00 ef 02 c0 c9 f9 00 c0 	mov    DWORD PTR ds:0xc002ef00,0xc000f9c9
c000fc7c:	c7 05 0c ef 02 c0 1f fb 00 c0 	mov    DWORD PTR ds:0xc002ef0c,0xc000fb1f
c000fc86:	c7 05 14 ef 02 c0 35 fa 00 c0 	mov    DWORD PTR ds:0xc002ef14,0xc000fa35
c000fc90:	c7 05 08 ef 02 c0 90 fa 00 c0 	mov    DWORD PTR ds:0xc002ef08,0xc000fa90
c000fc9a:	c7 05 10 ef 02 c0 91 fa 00 c0 	mov    DWORD PTR ds:0xc002ef10,0xc000fa91
c000fca4:	c7 05 1c ef 02 c0 c0 fb 00 c0 	mov    DWORD PTR ds:0xc002ef1c,0xc000fbc0
c000fcae:	c3                   	ret    

c000fcaf <kernel_main>:
c000fcaf:	57                   	push   edi
c000fcb0:	bf f9 03 00 00       	mov    edi,0x3f9
c000fcb5:	56                   	push   esi
c000fcb6:	89 fa                	mov    edx,edi
c000fcb8:	53                   	push   ebx
c000fcb9:	31 f6                	xor    esi,esi
c000fcbb:	83 ec 2c             	sub    esp,0x2c
c000fcbe:	89 f0                	mov    eax,esi
c000fcc0:	ee                   	out    dx,al
c000fcc1:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fcc6:	b0 80                	mov    al,0x80
c000fcc8:	89 da                	mov    edx,ebx
c000fcca:	ee                   	out    dx,al
c000fccb:	b1 03                	mov    cl,0x3
c000fccd:	ba f8 03 00 00       	mov    edx,0x3f8
c000fcd2:	88 c8                	mov    al,cl
c000fcd4:	ee                   	out    dx,al
c000fcd5:	89 f0                	mov    eax,esi
c000fcd7:	89 fa                	mov    edx,edi
c000fcd9:	ee                   	out    dx,al
c000fcda:	88 c8                	mov    al,cl
c000fcdc:	89 da                	mov    edx,ebx
c000fcde:	ee                   	out    dx,al
c000fcdf:	b0 c7                	mov    al,0xc7
c000fce1:	ba fa 03 00 00       	mov    edx,0x3fa
c000fce6:	ee                   	out    dx,al
c000fce7:	b0 0b                	mov    al,0xb
c000fce9:	ba fc 03 00 00       	mov    edx,0x3fc
c000fcee:	ee                   	out    dx,al
c000fcef:	68 24 ab 02 c0       	push   0xc002ab24
c000fcf4:	e8 e8 31 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000fcf9:	e8 56 09 00 00       	call   c0010654 <installVgaTextImplementation()>
c000fcfe:	e8 3c ff ff ff       	call   c000fc3f <setupTextMode()>
c000fd03:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fd08:	05 ff 0f 00 00       	add    eax,0xfff
c000fd0d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fd12:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd15:	e8 f5 03 00 00       	call   c001010f <Phys::physicalMemorySetup(unsigned int)>
c000fd1a:	e8 7b 1f 00 00       	call   c0011c9a <Virt::virtualMemorySetup()>
c000fd1f:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fd25:	83 c4 10             	add    esp,0x10
c000fd28:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fd2e:	75 0e                	jne    c000fd3e <kernel_main+0x8f>
c000fd30:	89 d8                	mov    eax,ebx
c000fd32:	25 48 03 00 00       	and    eax,0x348
c000fd37:	3d 00 03 00 00       	cmp    eax,0x300
c000fd3c:	74 10                	je     c000fd4e <kernel_main+0x9f>
c000fd3e:	83 ec 0c             	sub    esp,0xc
c000fd41:	68 b5 c4 02 c0       	push   0xc002c4b5
c000fd46:	e8 52 ab 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000fd4b:	83 c4 10             	add    esp,0x10
c000fd4e:	83 ec 0c             	sub    esp,0xc
c000fd51:	89 1d 60 ee 02 c0    	mov    DWORD PTR ds:0xc002ee60,ebx
c000fd57:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fd5b:	53                   	push   ebx
c000fd5c:	e8 85 21 00 00       	call   c0011ee6 <VAS::VAS()>
c000fd61:	89 1d d0 ef 02 c0    	mov    DWORD PTR ds:0xc002efd0,ebx
c000fd67:	e8 b4 02 ff ff       	call   c0000020 <callGlobalConstructors>
c000fd6c:	c7 04 24 3b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab3b
c000fd73:	e8 69 31 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000fd78:	e8 9c 1f 00 00       	call   c0011d19 <Virt::swappingSetup()>
c000fd7d:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd84:	e8 a1 fb ff ff       	call   c000f92a <malloc>
c000fd89:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd8c:	89 c6                	mov    esi,eax
c000fd8e:	e8 8f ea ff ff       	call   c000e822 <Computer::Computer()>
c000fd93:	58                   	pop    eax
c000fd94:	89 35 48 ee 02 c0    	mov    DWORD PTR ds:0xc002ee48,esi
c000fd9a:	5a                   	pop    edx
c000fd9b:	56                   	push   esi
c000fd9c:	68 58 ab 02 c0       	push   0xc002ab58
c000fda1:	e8 3b 31 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000fda6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000fdab:	8b 10                	mov    edx,DWORD PTR [eax]
c000fdad:	6a 00                	push   0x0
c000fdaf:	6a 00                	push   0x0
c000fdb1:	6a 00                	push   0x0
c000fdb3:	50                   	push   eax
c000fdb4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fdb7:	83 c4 14             	add    esp,0x14
c000fdba:	53                   	push   ebx
c000fdbb:	e8 d6 23 00 00       	call   c0012196 <VAS::~VAS()>
c000fdc0:	c7 04 24 6b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab6b
c000fdc7:	e8 d1 aa 00 00       	call   c001a89d <Krnl::panic(char const*)>
c000fdcc:	83 c4 30             	add    esp,0x30
c000fdcf:	5b                   	pop    ebx
c000fdd0:	5e                   	pop    esi
c000fdd1:	5f                   	pop    edi
c000fdd2:	c3                   	ret    

c000fdd3 <Phys::allocateDMA(unsigned long)>:
c000fdd3:	55                   	push   ebp
c000fdd4:	31 d2                	xor    edx,edx
c000fdd6:	57                   	push   edi
c000fdd7:	31 ed                	xor    ebp,ebp
c000fdd9:	56                   	push   esi
c000fdda:	31 c9                	xor    ecx,ecx
c000fddc:	53                   	push   ebx
c000fddd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fde1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fde7:	31 c0                	xor    eax,eax
c000fde9:	c1 ee 0c             	shr    esi,0xc
c000fdec:	eb 17                	jmp    c000fe05 <Phys::allocateDMA(unsigned long)+0x32>
c000fdee:	85 c9                	test   ecx,ecx
c000fdf0:	75 04                	jne    c000fdf6 <Phys::allocateDMA(unsigned long)+0x23>
c000fdf2:	89 d5                	mov    ebp,edx
c000fdf4:	89 d0                	mov    eax,edx
c000fdf6:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fdf9:	39 de                	cmp    esi,ebx
c000fdfb:	74 20                	je     c000fe1d <Phys::allocateDMA(unsigned long)+0x4a>
c000fdfd:	42                   	inc    edx
c000fdfe:	89 d9                	mov    ecx,ebx
c000fe00:	83 fa 2f             	cmp    edx,0x2f
c000fe03:	7f 11                	jg     c000fe16 <Phys::allocateDMA(unsigned long)+0x43>
c000fe05:	80 ba a0 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1160],0x0
c000fe0c:	74 e0                	je     c000fdee <Phys::allocateDMA(unsigned long)+0x1b>
c000fe0e:	31 c9                	xor    ecx,ecx
c000fe10:	42                   	inc    edx
c000fe11:	83 fa 2f             	cmp    edx,0x2f
c000fe14:	7e ef                	jle    c000fe05 <Phys::allocateDMA(unsigned long)+0x32>
c000fe16:	5b                   	pop    ebx
c000fe17:	31 c0                	xor    eax,eax
c000fe19:	5e                   	pop    esi
c000fe1a:	5f                   	pop    edi
c000fe1b:	5d                   	pop    ebp
c000fe1c:	c3                   	ret    
c000fe1d:	8d 14 30             	lea    edx,[eax+esi*1]
c000fe20:	89 d7                	mov    edi,edx
c000fe22:	4f                   	dec    edi
c000fe23:	79 03                	jns    c000fe28 <Phys::allocateDMA(unsigned long)+0x55>
c000fe25:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fe28:	c1 ff 04             	sar    edi,0x4
c000fe2b:	89 c2                	mov    edx,eax
c000fe2d:	c1 fa 04             	sar    edx,0x4
c000fe30:	39 fa                	cmp    edx,edi
c000fe32:	75 2f                	jne    c000fe63 <Phys::allocateDMA(unsigned long)+0x90>
c000fe34:	85 db                	test   ebx,ebx
c000fe36:	74 1a                	je     c000fe52 <Phys::allocateDMA(unsigned long)+0x7f>
c000fe38:	be a0 ee 02 c0       	mov    esi,0xc002eea0
c000fe3d:	8d 90 a0 ee 02 c0    	lea    edx,[eax-0x3ffd1160]
c000fe43:	f7 d6                	not    esi
c000fe45:	29 c6                	sub    esi,eax
c000fe47:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fe4a:	42                   	inc    edx
c000fe4b:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fe4e:	39 d9                	cmp    ecx,ebx
c000fe50:	7f f5                	jg     c000fe47 <Phys::allocateDMA(unsigned long)+0x74>
c000fe52:	85 ff                	test   edi,edi
c000fe54:	74 13                	je     c000fe69 <Phys::allocateDMA(unsigned long)+0x96>
c000fe56:	5b                   	pop    ebx
c000fe57:	05 50 20 0c 00       	add    eax,0xc2050
c000fe5c:	5e                   	pop    esi
c000fe5d:	c1 e0 0c             	shl    eax,0xc
c000fe60:	5f                   	pop    edi
c000fe61:	5d                   	pop    ebp
c000fe62:	c3                   	ret    
c000fe63:	89 ea                	mov    edx,ebp
c000fe65:	31 c9                	xor    ecx,ecx
c000fe67:	eb a7                	jmp    c000fe10 <Phys::allocateDMA(unsigned long)+0x3d>
c000fe69:	5b                   	pop    ebx
c000fe6a:	c1 e0 0c             	shl    eax,0xc
c000fe6d:	5e                   	pop    esi
c000fe6e:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fe73:	5f                   	pop    edi
c000fe74:	5d                   	pop    ebp
c000fe75:	c3                   	ret    

c000fe76 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe7a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe7e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe84:	c1 e9 0c             	shr    ecx,0xc
c000fe87:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe8c:	76 25                	jbe    c000feb3 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe8e:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe93:	c1 e8 0c             	shr    eax,0xc
c000fe96:	8d 50 10             	lea    edx,[eax+0x10]
c000fe99:	85 c9                	test   ecx,ecx
c000fe9b:	74 15                	je     c000feb2 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe9d:	8d 82 a0 ee 02 c0    	lea    eax,[edx-0x3ffd1160]
c000fea3:	8d 94 11 a0 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1160]
c000feaa:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fead:	40                   	inc    eax
c000feae:	39 d0                	cmp    eax,edx
c000feb0:	75 f8                	jne    c000feaa <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000feb2:	c3                   	ret    
c000feb3:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000feb9:	c1 ea 0c             	shr    edx,0xc
c000febc:	eb db                	jmp    c000fe99 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000febe <Phys::setPageState(unsigned long, bool)>:
c000febe:	56                   	push   esi
c000febf:	ba 01 00 00 00       	mov    edx,0x1
c000fec4:	53                   	push   ebx
c000fec5:	8b 35 78 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd78
c000fecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fecf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fed3:	89 c8                	mov    eax,ecx
c000fed5:	83 e1 07             	and    ecx,0x7
c000fed8:	c1 e8 03             	shr    eax,0x3
c000fedb:	d3 e3                	shl    ebx,cl
c000fedd:	01 c6                	add    esi,eax
c000fedf:	d3 e2                	shl    edx,cl
c000fee1:	f7 d2                	not    edx
c000fee3:	20 16                	and    BYTE PTR [esi],dl
c000fee5:	03 05 78 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd78
c000feeb:	08 18                	or     BYTE PTR [eax],bl
c000feed:	5b                   	pop    ebx
c000feee:	5e                   	pop    esi
c000feef:	c3                   	ret    

c000fef0 <Phys::getPageState(unsigned long)>:
c000fef0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fef4:	8b 15 78 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd78
c000fefa:	89 c8                	mov    eax,ecx
c000fefc:	83 e1 07             	and    ecx,0x7
c000feff:	c1 e8 03             	shr    eax,0x3
c000ff02:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ff06:	d3 f8                	sar    eax,cl
c000ff08:	83 e0 01             	and    eax,0x1
c000ff0b:	c3                   	ret    

c000ff0c <Phys::freePage(unsigned long)>:
c000ff0c:	53                   	push   ebx
c000ff0d:	83 ec 08             	sub    esp,0x8
c000ff10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff14:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000ff1a:	76 57                	jbe    c000ff73 <Phys::freePage(unsigned long)+0x67>
c000ff1c:	c1 eb 0c             	shr    ebx,0xc
c000ff1f:	53                   	push   ebx
c000ff20:	e8 cb ff ff ff       	call   c000fef0 <Phys::getPageState(unsigned long)>
c000ff25:	5a                   	pop    edx
c000ff26:	84 c0                	test   al,al
c000ff28:	74 5b                	je     c000ff85 <Phys::freePage(unsigned long)+0x79>
c000ff2a:	a1 90 ee 02 c0       	mov    eax,ds:0xc002ee90
c000ff2f:	48                   	dec    eax
c000ff30:	a3 90 ee 02 c0       	mov    ds:0xc002ee90,eax
c000ff35:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff38:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff3b:	c1 e0 02             	shl    eax,0x2
c000ff3e:	99                   	cdq    
c000ff3f:	f7 3d 94 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee94
c000ff45:	39 05 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,eax
c000ff4b:	75 13                	jne    c000ff60 <Phys::freePage(unsigned long)+0x54>
c000ff4d:	83 ec 08             	sub    esp,0x8
c000ff50:	6a 00                	push   0x0
c000ff52:	53                   	push   ebx
c000ff53:	e8 66 ff ff ff       	call   c000febe <Phys::setPageState(unsigned long, bool)>
c000ff58:	83 c4 10             	add    esp,0x10
c000ff5b:	83 c4 08             	add    esp,0x8
c000ff5e:	5b                   	pop    ebx
c000ff5f:	c3                   	ret    
c000ff60:	83 ec 0c             	sub    esp,0xc
c000ff63:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c000ff68:	50                   	push   eax
c000ff69:	e8 14 0a 00 00       	call   c0010982 <VgaText::updateRAMUsageDisplay(int)>
c000ff6e:	83 c4 10             	add    esp,0x10
c000ff71:	eb da                	jmp    c000ff4d <Phys::freePage(unsigned long)+0x41>
c000ff73:	68 00 10 00 00       	push   0x1000
c000ff78:	53                   	push   ebx
c000ff79:	e8 f8 fe ff ff       	call   c000fe76 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff7e:	59                   	pop    ecx
c000ff7f:	5b                   	pop    ebx
c000ff80:	83 c4 08             	add    esp,0x8
c000ff83:	5b                   	pop    ebx
c000ff84:	c3                   	ret    
c000ff85:	c7 44 24 10 86 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab86
c000ff8d:	83 c4 08             	add    esp,0x8
c000ff90:	5b                   	pop    ebx
c000ff91:	e9 07 a9 00 00       	jmp    c001a89d <Krnl::panic(char const*)>

c000ff96 <Phys::allocatePage()>:
c000ff96:	56                   	push   esi
c000ff97:	53                   	push   ebx
c000ff98:	51                   	push   ecx
c000ff99:	8b 35 84 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee84
c000ff9f:	89 f3                	mov    ebx,esi
c000ffa1:	eb 0a                	jmp    c000ffad <Phys::allocatePage()+0x17>
c000ffa3:	89 1d 84 ee 02 c0    	mov    DWORD PTR ds:0xc002ee84,ebx
c000ffa9:	39 de                	cmp    esi,ebx
c000ffab:	74 24                	je     c000ffd1 <Phys::allocatePage()+0x3b>
c000ffad:	53                   	push   ebx
c000ffae:	e8 3d ff ff ff       	call   c000fef0 <Phys::getPageState(unsigned long)>
c000ffb3:	5a                   	pop    edx
c000ffb4:	84 c0                	test   al,al
c000ffb6:	74 77                	je     c001002f <Phys::allocatePage()+0x99>
c000ffb8:	43                   	inc    ebx
c000ffb9:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ffbf:	75 e2                	jne    c000ffa3 <Phys::allocatePage()+0xd>
c000ffc1:	31 db                	xor    ebx,ebx
c000ffc3:	c7 05 84 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee84,0x0
c000ffcd:	39 de                	cmp    esi,ebx
c000ffcf:	75 dc                	jne    c000ffad <Phys::allocatePage()+0x17>
c000ffd1:	83 ec 0c             	sub    esp,0xc
c000ffd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ffd9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ffdc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ffe2:	e8 27 2c 00 00       	call   c0012c0e <VAS::scanForEviction()>
c000ffe7:	83 c4 10             	add    esp,0x10
c000ffea:	85 c0                	test   eax,eax
c000ffec:	75 76                	jne    c0010064 <Phys::allocatePage()+0xce>
c000ffee:	83 ec 0c             	sub    esp,0xc
c000fff1:	68 9c ab 02 c0       	push   0xc002ab9c
c000fff6:	e8 e6 2e 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c000fffb:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c0010002:	e8 cc fd ff ff       	call   c000fdd3 <Phys::allocateDMA(unsigned long)>
c0010007:	83 c4 10             	add    esp,0x10
c001000a:	85 c0                	test   eax,eax
c001000c:	75 56                	jne    c0010064 <Phys::allocatePage()+0xce>
c001000e:	83 ec 0c             	sub    esp,0xc
c0010011:	68 ad ab 02 c0       	push   0xc002abad
c0010016:	e8 82 a8 00 00       	call   c001a89d <Krnl::panic(char const*)>
c001001b:	83 c4 10             	add    esp,0x10
c001001e:	8b 1d 84 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee84
c0010024:	53                   	push   ebx
c0010025:	e8 c6 fe ff ff       	call   c000fef0 <Phys::getPageState(unsigned long)>
c001002a:	5a                   	pop    edx
c001002b:	84 c0                	test   al,al
c001002d:	75 89                	jne    c000ffb8 <Phys::allocatePage()+0x22>
c001002f:	6a 01                	push   0x1
c0010031:	53                   	push   ebx
c0010032:	e8 87 fe ff ff       	call   c000febe <Phys::setPageState(unsigned long, bool)>
c0010037:	a1 90 ee 02 c0       	mov    eax,ds:0xc002ee90
c001003c:	59                   	pop    ecx
c001003d:	40                   	inc    eax
c001003e:	5b                   	pop    ebx
c001003f:	a3 90 ee 02 c0       	mov    ds:0xc002ee90,eax
c0010044:	8d 04 80             	lea    eax,[eax+eax*4]
c0010047:	8d 04 80             	lea    eax,[eax+eax*4]
c001004a:	c1 e0 02             	shl    eax,0x2
c001004d:	99                   	cdq    
c001004e:	f7 3d 94 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee94
c0010054:	39 05 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,eax
c001005a:	75 0c                	jne    c0010068 <Phys::allocatePage()+0xd2>
c001005c:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c0010061:	c1 e0 0c             	shl    eax,0xc
c0010064:	5a                   	pop    edx
c0010065:	5b                   	pop    ebx
c0010066:	5e                   	pop    esi
c0010067:	c3                   	ret    
c0010068:	83 ec 0c             	sub    esp,0xc
c001006b:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c0010070:	50                   	push   eax
c0010071:	e8 0c 09 00 00       	call   c0010982 <VgaText::updateRAMUsageDisplay(int)>
c0010076:	83 c4 10             	add    esp,0x10
c0010079:	eb e1                	jmp    c001005c <Phys::allocatePage()+0xc6>

c001007b <Phys::allocateContiguousPages(int)>:
c001007b:	57                   	push   edi
c001007c:	56                   	push   esi
c001007d:	53                   	push   ebx
c001007e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010082:	fa                   	cli    
c0010083:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0010089:	31 db                	xor    ebx,ebx
c001008b:	85 db                	test   ebx,ebx
c001008d:	75 11                	jne    c00100a0 <Phys::allocateContiguousPages(int)+0x25>
c001008f:	e8 02 ff ff ff       	call   c000ff96 <Phys::allocatePage()>
c0010094:	83 fe 01             	cmp    esi,0x1
c0010097:	89 c7                	mov    edi,eax
c0010099:	74 21                	je     c00100bc <Phys::allocateContiguousPages(int)+0x41>
c001009b:	bb 01 00 00 00       	mov    ebx,0x1
c00100a0:	e8 f1 fe ff ff       	call   c000ff96 <Phys::allocatePage()>
c00100a5:	89 da                	mov    edx,ebx
c00100a7:	c1 e2 0c             	shl    edx,0xc
c00100aa:	01 fa                	add    edx,edi
c00100ac:	39 c2                	cmp    edx,eax
c00100ae:	74 20                	je     c00100d0 <Phys::allocateContiguousPages(int)+0x55>
c00100b0:	bb 01 00 00 00       	mov    ebx,0x1
c00100b5:	89 c7                	mov    edi,eax
c00100b7:	83 fe 01             	cmp    esi,0x1
c00100ba:	75 e4                	jne    c00100a0 <Phys::allocateContiguousPages(int)+0x25>
c00100bc:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00100c1:	48                   	dec    eax
c00100c2:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c00100c7:	75 01                	jne    c00100ca <Phys::allocateContiguousPages(int)+0x4f>
c00100c9:	fb                   	sti    
c00100ca:	89 f8                	mov    eax,edi
c00100cc:	5b                   	pop    ebx
c00100cd:	5e                   	pop    esi
c00100ce:	5f                   	pop    edi
c00100cf:	c3                   	ret    
c00100d0:	43                   	inc    ebx
c00100d1:	39 f3                	cmp    ebx,esi
c00100d3:	75 b6                	jne    c001008b <Phys::allocateContiguousPages(int)+0x10>
c00100d5:	eb e5                	jmp    c00100bc <Phys::allocateContiguousPages(int)+0x41>

c00100d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00100d7:	56                   	push   esi
c00100d8:	53                   	push   ebx
c00100d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00100dd:	39 1d 88 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee88,ebx
c00100e3:	73 06                	jae    c00100eb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00100e5:	89 1d 88 ee 02 c0    	mov    DWORD PTR ds:0xc002ee88,ebx
c00100eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00100ef:	c1 eb 0c             	shr    ebx,0xc
c00100f2:	c1 e8 0c             	shr    eax,0xc
c00100f5:	39 d8                	cmp    eax,ebx
c00100f7:	73 13                	jae    c001010c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c00100f9:	6a 00                	push   0x0
c00100fb:	8d 70 01             	lea    esi,[eax+0x1]
c00100fe:	50                   	push   eax
c00100ff:	e8 ba fd ff ff       	call   c000febe <Phys::setPageState(unsigned long, bool)>
c0010104:	5a                   	pop    edx
c0010105:	89 f0                	mov    eax,esi
c0010107:	59                   	pop    ecx
c0010108:	39 f3                	cmp    ebx,esi
c001010a:	75 ed                	jne    c00100f9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001010c:	5b                   	pop    ebx
c001010d:	5e                   	pop    esi
c001010e:	c3                   	ret    

c001010f <Phys::physicalMemorySetup(unsigned int)>:
c001010f:	55                   	push   ebp
c0010110:	57                   	push   edi
c0010111:	56                   	push   esi
c0010112:	53                   	push   ebx
c0010113:	31 db                	xor    ebx,ebx
c0010115:	83 ec 40             	sub    esp,0x40
c0010118:	6a 30                	push   0x30
c001011a:	6a 00                	push   0x0
c001011c:	68 a0 ee 02 c0       	push   0xc002eea0
c0010121:	e8 76 06 ff ff       	call   c000079c <memset>
c0010126:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001012a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001012f:	05 00 10 00 00       	add    eax,0x1000
c0010134:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0010138:	83 c4 10             	add    esp,0x10
c001013b:	83 ec 08             	sub    esp,0x8
c001013e:	6a 01                	push   0x1
c0010140:	53                   	push   ebx
c0010141:	43                   	inc    ebx
c0010142:	e8 77 fd ff ff       	call   c000febe <Phys::setPageState(unsigned long, bool)>
c0010147:	83 c4 10             	add    esp,0x10
c001014a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010150:	75 e9                	jne    c001013b <Phys::physicalMemorySetup(unsigned int)+0x2c>
c0010152:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0010159:	66 85 c0             	test   ax,ax
c001015c:	0f 84 8e 01 00 00    	je     c00102f0 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c0010162:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010166:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001016e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010172:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010177:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001017b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010183:	eb 15                	jmp    c001019a <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010185:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010189:	83 c3 18             	add    ebx,0x18
c001018c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010190:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010194:	0f 84 66 01 00 00    	je     c0010300 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c001019a:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001019d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00101a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00101a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00101a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00101ab:	8b 33                	mov    esi,DWORD PTR [ebx]
c00101ad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00101b0:	01 f0                	add    eax,esi
c00101b2:	55                   	push   ebp
c00101b3:	11 fa                	adc    edx,edi
c00101b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00101b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00101bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00101c1:	56                   	push   esi
c00101c2:	68 e8 ab 02 c0       	push   0xc002abe8
c00101c7:	e8 15 2d 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00101cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101d0:	83 c4 10             	add    esp,0x10
c00101d3:	09 f8                	or     eax,edi
c00101d5:	0f 85 25 01 00 00    	jne    c0010300 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c00101db:	4d                   	dec    ebp
c00101dc:	75 a7                	jne    c0010185 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101de:	ba 00 00 08 00       	mov    edx,0x80000
c00101e3:	89 c1                	mov    ecx,eax
c00101e5:	39 f2                	cmp    edx,esi
c00101e7:	19 f9                	sbb    ecx,edi
c00101e9:	0f 82 a7 00 00 00    	jb     c0010296 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ef:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c00101f3:	89 c1                	mov    ecx,eax
c00101f5:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c00101f9:	0f 83 97 00 00 00    	jae    c0010296 <Phys::physicalMemorySetup(unsigned int)+0x187>
c00101ff:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010204:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010208:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001020c:	39 fa                	cmp    edx,edi
c001020e:	19 e8                	sbb    eax,ebp
c0010210:	0f 82 14 01 00 00    	jb     c001032a <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010216:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001021a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001021e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0010224:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010229:	83 d5 ff             	adc    ebp,0xffffffff
c001022c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010230:	31 c0                	xor    eax,eax
c0010232:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010236:	39 fa                	cmp    edx,edi
c0010238:	89 c1                	mov    ecx,eax
c001023a:	19 e9                	sbb    ecx,ebp
c001023c:	0f 83 43 ff ff ff    	jae    c0010185 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010242:	be 00 00 08 00       	mov    esi,0x80000
c0010247:	50                   	push   eax
c0010248:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001024c:	57                   	push   edi
c001024d:	56                   	push   esi
c001024e:	68 0c ac 02 c0       	push   0xc002ac0c
c0010253:	e8 89 2c 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0010258:	5a                   	pop    edx
c0010259:	59                   	pop    ecx
c001025a:	57                   	push   edi
c001025b:	56                   	push   esi
c001025c:	e8 76 fe ff ff       	call   c00100d7 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0010261:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0010265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010269:	83 c4 0c             	add    esp,0xc
c001026c:	0f ac d0 0c          	shrd   eax,edx,0xc
c0010270:	03 05 94 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee94
c0010276:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001027d:	a3 94 ee 02 c0       	mov    ds:0xc002ee94,eax
c0010282:	52                   	push   edx
c0010283:	50                   	push   eax
c0010284:	68 c9 ab 02 c0       	push   0xc002abc9
c0010289:	e8 53 2c 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001028e:	83 c4 10             	add    esp,0x10
c0010291:	e9 ef fe ff ff       	jmp    c0010185 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010296:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001029a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001029e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00102a2:	39 ea                	cmp    edx,ebp
c00102a4:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00102a8:	0f 82 d7 fe ff ff    	jb     c0010185 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102ae:	ba ff 1f 00 00       	mov    edx,0x1fff
c00102b3:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00102b7:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00102bb:	0f 83 c4 fe ff ff    	jae    c0010185 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00102c1:	39 ee                	cmp    esi,ebp
c00102c3:	89 f8                	mov    eax,edi
c00102c5:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c00102c9:	0f 83 78 ff ff ff    	jae    c0010247 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00102d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00102d7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00102db:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00102df:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00102e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00102e7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00102eb:	e9 57 ff ff ff       	jmp    c0010247 <Phys::physicalMemorySetup(unsigned int)+0x138>
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	68 bb ab 02 c0       	push   0xc002abbb
c00102f8:	e8 a0 a5 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00102fd:	83 c4 10             	add    esp,0x10
c0010300:	bb 40 01 00 00       	mov    ebx,0x140
c0010305:	83 ec 08             	sub    esp,0x8
c0010308:	6a 00                	push   0x0
c001030a:	53                   	push   ebx
c001030b:	43                   	inc    ebx
c001030c:	e8 ad fb ff ff       	call   c000febe <Phys::setPageState(unsigned long, bool)>
c0010311:	ff 05 94 ee 02 c0    	inc    DWORD PTR ds:0xc002ee94
c0010317:	83 c4 10             	add    esp,0x10
c001031a:	81 fb 80 01 00 00    	cmp    ebx,0x180
c0010320:	75 e3                	jne    c0010305 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0010322:	83 c4 3c             	add    esp,0x3c
c0010325:	5b                   	pop    ebx
c0010326:	5e                   	pop    esi
c0010327:	5f                   	pop    edi
c0010328:	5d                   	pop    ebp
c0010329:	c3                   	ret    
c001032a:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010332:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001033a:	e9 d7 fe ff ff       	jmp    c0010216 <Phys::physicalMemorySetup(unsigned int)+0x107>
c001033f:	90                   	nop

c0010340 <Pipe::isAtty()>:
c0010340:	31 c0                	xor    eax,eax
c0010342:	c3                   	ret    
c0010343:	90                   	nop

c0010344 <Pipe::~Pipe()>:
c0010344:	83 ec 0c             	sub    esp,0xc
c0010347:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c001034c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010350:	89 10                	mov    DWORD PTR [eax],edx
c0010352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010356:	83 ec 0c             	sub    esp,0xc
c0010359:	50                   	push   eax
c001035a:	e8 1b 15 00 00       	call   c001187a <UnixFile::~UnixFile()>
c001035f:	83 c4 10             	add    esp,0x10
c0010362:	90                   	nop
c0010363:	83 c4 0c             	add    esp,0xc
c0010366:	c3                   	ret    
c0010367:	90                   	nop

c0010368 <Pipe::~Pipe()>:
c0010368:	83 ec 0c             	sub    esp,0xc
c001036b:	83 ec 0c             	sub    esp,0xc
c001036e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010372:	e8 cd ff ff ff       	call   c0010344 <Pipe::~Pipe()>
c0010377:	83 c4 10             	add    esp,0x10
c001037a:	83 ec 08             	sub    esp,0x8
c001037d:	6a 20                	push   0x20
c001037f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010383:	e8 79 2a 00 00       	call   c0012e01 <operator delete(void*, unsigned long)>
c0010388:	83 c4 10             	add    esp,0x10
c001038b:	83 c4 0c             	add    esp,0xc
c001038e:	c3                   	ret    
c001038f:	90                   	nop

c0010390 <Pipe::read(unsigned long long, void*, int*)>:
c0010390:	55                   	push   ebp
c0010391:	57                   	push   edi
c0010392:	56                   	push   esi
c0010393:	53                   	push   ebx
c0010394:	83 ec 1c             	sub    esp,0x1c
c0010397:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001039b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001039f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00103a3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00103a6:	89 c8                	mov    eax,ecx
c00103a8:	99                   	cdq    
c00103a9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00103ad:	74 24                	je     c00103d3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103af:	39 f9                	cmp    ecx,edi
c00103b1:	89 d1                	mov    ecx,edx
c00103b3:	19 f1                	sbb    ecx,esi
c00103b5:	73 1c                	jae    c00103d3 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00103b7:	fa                   	cli    
c00103b8:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c00103be:	e8 d1 e0 00 00       	call   c001e494 <schedule()>
c00103c3:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00103c8:	48                   	dec    eax
c00103c9:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c00103ce:	75 d3                	jne    c00103a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d0:	fb                   	sti    
c00103d1:	eb d0                	jmp    c00103a3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00103d3:	39 f8                	cmp    eax,edi
c00103d5:	89 d1                	mov    ecx,edx
c00103d7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00103db:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00103df:	19 f1                	sbb    ecx,esi
c00103e1:	73 08                	jae    c00103eb <Pipe::read(unsigned long long, void*, int*)+0x5b>
c00103e3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00103eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103ee:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103f1:	29 c6                	sub    esi,eax
c00103f3:	89 f1                	mov    ecx,esi
c00103f5:	c1 f9 1f             	sar    ecx,0x1f
c00103f8:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00103fc:	89 ca                	mov    edx,ecx
c00103fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010402:	19 d1                	sbb    ecx,edx
c0010404:	73 04                	jae    c001040a <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0010406:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001040a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001040e:	89 fd                	mov    ebp,edi
c0010410:	29 f5                	sub    ebp,esi
c0010412:	85 f6                	test   esi,esi
c0010414:	74 12                	je     c0010428 <Pipe::read(unsigned long long, void*, int*)+0x98>
c0010416:	52                   	push   edx
c0010417:	56                   	push   esi
c0010418:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001041b:	50                   	push   eax
c001041c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0010420:	e8 43 03 ff ff       	call   c0000768 <memcpy>
c0010425:	83 c4 10             	add    esp,0x10
c0010428:	85 ed                	test   ebp,ebp
c001042a:	74 12                	je     c001043e <Pipe::read(unsigned long long, void*, int*)+0xae>
c001042c:	50                   	push   eax
c001042d:	55                   	push   ebp
c001042e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0010431:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c0010435:	56                   	push   esi
c0010436:	e8 2d 03 ff ff       	call   c0000768 <memcpy>
c001043b:	83 c4 10             	add    esp,0x10
c001043e:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c0010441:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0010444:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010447:	99                   	cdq    
c0010448:	89 f7                	mov    edi,esi
c001044a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001044e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0010452:	c1 ff 1f             	sar    edi,0x1f
c0010455:	57                   	push   edi
c0010456:	56                   	push   esi
c0010457:	52                   	push   edx
c0010458:	50                   	push   eax
c0010459:	e8 56 6e 01 00       	call   c00272b4 <__umoddi3>
c001045e:	83 c4 10             	add    esp,0x10
c0010461:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0010464:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010469:	75 10                	jne    c001047b <Pipe::read(unsigned long long, void*, int*)+0xeb>
c001046b:	83 ec 0c             	sub    esp,0xc
c001046e:	68 35 ac 02 c0       	push   0xc002ac35
c0010473:	e8 25 a4 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0010478:	83 c4 10             	add    esp,0x10
c001047b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001047f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010483:	89 10                	mov    DWORD PTR [eax],edx
c0010485:	83 c4 1c             	add    esp,0x1c
c0010488:	31 c0                	xor    eax,eax
c001048a:	5b                   	pop    ebx
c001048b:	5e                   	pop    esi
c001048c:	5f                   	pop    edi
c001048d:	5d                   	pop    ebp
c001048e:	c3                   	ret    
c001048f:	90                   	nop

c0010490 <Pipe::write(unsigned long long, void*, int*)>:
c0010490:	55                   	push   ebp
c0010491:	57                   	push   edi
c0010492:	56                   	push   esi
c0010493:	53                   	push   ebx
c0010494:	83 ec 1c             	sub    esp,0x1c
c0010497:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001049b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001049f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104a3:	89 04 24             	mov    DWORD PTR [esp],eax
c00104a6:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c00104a9:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c00104ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00104b0:	89 de                	mov    esi,ebx
c00104b2:	89 df                	mov    edi,ebx
c00104b4:	c1 ff 1f             	sar    edi,0x1f
c00104b7:	01 c6                	add    esi,eax
c00104b9:	89 c8                	mov    eax,ecx
c00104bb:	11 d7                	adc    edi,edx
c00104bd:	99                   	cdq    
c00104be:	39 f1                	cmp    ecx,esi
c00104c0:	89 d0                	mov    eax,edx
c00104c2:	19 f8                	sbb    eax,edi
c00104c4:	b8 01 00 00 00       	mov    eax,0x1
c00104c9:	0f 82 80 00 00 00    	jb     c001054f <Pipe::write(unsigned long long, void*, int*)+0xbf>
c00104cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00104d2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00104d5:	01 d8                	add    eax,ebx
c00104d7:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00104db:	99                   	cdq    
c00104dc:	f7 f9                	idiv   ecx
c00104de:	29 d1                	sub    ecx,edx
c00104e0:	89 d7                	mov    edi,edx
c00104e2:	89 c8                	mov    eax,ecx
c00104e4:	99                   	cdq    
c00104e5:	39 ce                	cmp    esi,ecx
c00104e7:	19 d3                	sbb    ebx,edx
c00104e9:	bb 00 00 00 00       	mov    ebx,0x0
c00104ee:	72 04                	jb     c00104f4 <Pipe::write(unsigned long long, void*, int*)+0x64>
c00104f0:	89 f3                	mov    ebx,esi
c00104f2:	29 cb                	sub    ebx,ecx
c00104f4:	89 f1                	mov    ecx,esi
c00104f6:	29 d9                	sub    ecx,ebx
c00104f8:	74 1a                	je     c0010514 <Pipe::write(unsigned long long, void*, int*)+0x84>
c00104fa:	52                   	push   edx
c00104fb:	51                   	push   ecx
c00104fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010500:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010504:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010507:	57                   	push   edi
c0010508:	e8 5b 02 ff ff       	call   c0000768 <memcpy>
c001050d:	83 c4 10             	add    esp,0x10
c0010510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010514:	85 db                	test   ebx,ebx
c0010516:	74 12                	je     c001052a <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010518:	50                   	push   eax
c0010519:	53                   	push   ebx
c001051a:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001051e:	51                   	push   ecx
c001051f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010522:	e8 41 02 ff ff       	call   c0000768 <memcpy>
c0010527:	83 c4 10             	add    esp,0x10
c001052a:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c001052d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010532:	75 10                	jne    c0010544 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c0010534:	83 ec 0c             	sub    esp,0xc
c0010537:	68 51 ac 02 c0       	push   0xc002ac51
c001053c:	e8 5c a3 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0010541:	83 c4 10             	add    esp,0x10
c0010544:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010548:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001054b:	89 38                	mov    DWORD PTR [eax],edi
c001054d:	31 c0                	xor    eax,eax
c001054f:	83 c4 1c             	add    esp,0x1c
c0010552:	5b                   	pop    ebx
c0010553:	5e                   	pop    esi
c0010554:	5f                   	pop    edi
c0010555:	5d                   	pop    ebp
c0010556:	c3                   	ret    
c0010557:	90                   	nop

c0010558 <Pipe::Pipe(int)>:
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001055f:	83 ec 08             	sub    esp,0x8
c0010562:	6a 00                	push   0x0
c0010564:	50                   	push   eax
c0010565:	e8 2e 11 00 00       	call   c0011698 <UnixFile::UnixFile(int)>
c001056a:	83 c4 10             	add    esp,0x10
c001056d:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c0010572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010576:	89 10                	mov    DWORD PTR [eax],edx
c0010578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010580:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010583:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010587:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001058e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010592:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010599:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001059d:	83 ec 0c             	sub    esp,0xc
c00105a0:	50                   	push   eax
c00105a1:	e8 84 f3 ff ff       	call   c000f92a <malloc>
c00105a6:	83 c4 10             	add    esp,0x10
c00105a9:	89 c2                	mov    edx,eax
c00105ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105af:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00105b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105b6:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00105ba:	90                   	nop
c00105bb:	83 c4 0c             	add    esp,0xc
c00105be:	c3                   	ret    
c00105bf:	90                   	nop

c00105c0 <VgaText::isAtty()>:
c00105c0:	b0 01                	mov    al,0x1
c00105c2:	c3                   	ret    
c00105c3:	90                   	nop

c00105c4 <VgaText::~VgaText()>:
c00105c4:	83 ec 0c             	sub    esp,0xc
c00105c7:	ba 34 ad 02 c0       	mov    edx,0xc002ad34
c00105cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d0:	89 10                	mov    DWORD PTR [eax],edx
c00105d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d6:	83 ec 0c             	sub    esp,0xc
c00105d9:	50                   	push   eax
c00105da:	e8 9b 12 00 00       	call   c001187a <UnixFile::~UnixFile()>
c00105df:	83 c4 10             	add    esp,0x10
c00105e2:	90                   	nop
c00105e3:	83 c4 0c             	add    esp,0xc
c00105e6:	c3                   	ret    
c00105e7:	90                   	nop

c00105e8 <VgaText::~VgaText()>:
c00105e8:	83 ec 0c             	sub    esp,0xc
c00105eb:	83 ec 0c             	sub    esp,0xc
c00105ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105f2:	e8 cd ff ff ff       	call   c00105c4 <VgaText::~VgaText()>
c00105f7:	83 c4 10             	add    esp,0x10
c00105fa:	83 ec 08             	sub    esp,0x8
c00105fd:	68 c4 02 00 00       	push   0x2c4
c0010602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010606:	e8 f6 27 00 00       	call   c0012e01 <operator delete(void*, unsigned long)>
c001060b:	83 c4 10             	add    esp,0x10
c001060e:	83 c4 0c             	add    esp,0xc
c0010611:	c3                   	ret    

c0010612 <VgaText::read(unsigned long long, void*, int*)>:
c0010612:	83 ec 10             	sub    esp,0x10
c0010615:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010619:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001061d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010621:	e8 7e 5d 00 00       	call   c00163a4 <readKeyboard(VgaText*, char*, unsigned long)>
c0010626:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001062a:	89 02                	mov    DWORD PTR [edx],eax
c001062c:	31 c0                	xor    eax,eax
c001062e:	83 c4 1c             	add    esp,0x1c
c0010631:	c3                   	ret    

c0010632 <setTerminalScrollLock(bool)>:
c0010632:	c3                   	ret    

c0010633 <addToTerminalCycle(VgaText*)>:
c0010633:	8b 15 20 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef20
c0010639:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063d:	85 d2                	test   edx,edx
c001063f:	75 09                	jne    c001064a <addToTerminalCycle(VgaText*)+0x17>
c0010641:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c0010644:	a3 20 ef 02 c0       	mov    ds:0xc002ef20,eax
c0010649:	c3                   	ret    
c001064a:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c001064d:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0010650:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c0010653:	c3                   	ret    

c0010654 <installVgaTextImplementation()>:
c0010654:	83 ec 10             	sub    esp,0x10
c0010657:	6a 20                	push   0x20
c0010659:	6a 00                	push   0x0
c001065b:	68 00 ef 02 c0       	push   0xc002ef00
c0010660:	e8 37 01 ff ff       	call   c000079c <memset>
c0010665:	83 c4 1c             	add    esp,0x1c
c0010668:	c3                   	ret    

c0010669 <scrollTerminalScrollLock(int)>:
c0010669:	c3                   	ret    

c001066a <VgaText::load()>:
c001066a:	53                   	push   ebx
c001066b:	31 c0                	xor    eax,eax
c001066d:	83 ec 58             	sub    esp,0x58
c0010670:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0010674:	89 e2                	mov    edx,esp
c0010676:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c001067a:	40                   	inc    eax
c001067b:	83 f8 50             	cmp    eax,0x50
c001067e:	75 f6                	jne    c0010676 <VgaText::load()+0xc>
c0010680:	31 c0                	xor    eax,eax
c0010682:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010689:	84 c9                	test   cl,cl
c001068b:	74 06                	je     c0010693 <VgaText::load()+0x29>
c001068d:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010690:	40                   	inc    eax
c0010691:	eb ef                	jmp    c0010682 <VgaText::load()+0x18>
c0010693:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010696:	85 c0                	test   eax,eax
c0010698:	74 09                	je     c00106a3 <VgaText::load()+0x39>
c001069a:	51                   	push   ecx
c001069b:	51                   	push   ecx
c001069c:	52                   	push   edx
c001069d:	53                   	push   ebx
c001069e:	ff d0                	call   eax
c00106a0:	83 c4 10             	add    esp,0x10
c00106a3:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c00106a6:	85 c0                	test   eax,eax
c00106a8:	74 09                	je     c00106b3 <VgaText::load()+0x49>
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	53                   	push   ebx
c00106ae:	ff d0                	call   eax
c00106b0:	83 c4 10             	add    esp,0x10
c00106b3:	83 c4 58             	add    esp,0x58
c00106b6:	5b                   	pop    ebx
c00106b7:	c3                   	ret    

c00106b8 <VgaText::updateCursor()>:
c00106b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106bc:	39 05 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,eax
c00106c2:	75 09                	jne    c00106cd <VgaText::updateCursor()+0x15>
c00106c4:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c00106c7:	85 c0                	test   eax,eax
c00106c9:	74 02                	je     c00106cd <VgaText::updateCursor()+0x15>
c00106cb:	ff e0                	jmp    eax
c00106cd:	c3                   	ret    

c00106ce <VgaText::showCursor(bool)>:
c00106ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106d6:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c00106d9:	c3                   	ret    

c00106da <VgaText::disableBlink(bool)>:
c00106da:	56                   	push   esi
c00106db:	53                   	push   ebx
c00106dc:	51                   	push   ecx
c00106dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00106e5:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c00106eb:	75 15                	jne    c0010702 <VgaText::disableBlink(bool)+0x28>
c00106ed:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c00106f0:	85 c0                	test   eax,eax
c00106f2:	74 0e                	je     c0010702 <VgaText::disableBlink(bool)+0x28>
c00106f4:	89 f1                	mov    ecx,esi
c00106f6:	52                   	push   edx
c00106f7:	52                   	push   edx
c00106f8:	0f b6 d1             	movzx  edx,cl
c00106fb:	52                   	push   edx
c00106fc:	53                   	push   ebx
c00106fd:	ff d0                	call   eax
c00106ff:	83 c4 10             	add    esp,0x10
c0010702:	89 f0                	mov    eax,esi
c0010704:	83 f0 01             	xor    eax,0x1
c0010707:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c001070a:	58                   	pop    eax
c001070b:	5b                   	pop    ebx
c001070c:	5e                   	pop    esi
c001070d:	c3                   	ret    

c001070e <VgaText::doANSI_SGR(int)>:
c001070e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010716:	85 d2                	test   edx,edx
c0010718:	75 0b                	jne    c0010725 <VgaText::doANSI_SGR(int)+0x17>
c001071a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001071d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010720:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010723:	eb 59                	jmp    c001077e <VgaText::doANSI_SGR(int)+0x70>
c0010725:	83 fa 07             	cmp    edx,0x7
c0010728:	75 0b                	jne    c0010735 <VgaText::doANSI_SGR(int)+0x27>
c001072a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001072d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010730:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010733:	eb 49                	jmp    c001077e <VgaText::doANSI_SGR(int)+0x70>
c0010735:	83 fa 1b             	cmp    edx,0x1b
c0010738:	74 e0                	je     c001071a <VgaText::doANSI_SGR(int)+0xc>
c001073a:	8d 4a e2             	lea    ecx,[edx-0x1e]
c001073d:	83 f9 07             	cmp    ecx,0x7
c0010740:	77 09                	ja     c001074b <VgaText::doANSI_SGR(int)+0x3d>
c0010742:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c0010749:	eb 20                	jmp    c001076b <VgaText::doANSI_SGR(int)+0x5d>
c001074b:	8d 4a d8             	lea    ecx,[edx-0x28]
c001074e:	83 f9 07             	cmp    ecx,0x7
c0010751:	77 09                	ja     c001075c <VgaText::doANSI_SGR(int)+0x4e>
c0010753:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c001075a:	eb 22                	jmp    c001077e <VgaText::doANSI_SGR(int)+0x70>
c001075c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001075f:	83 f9 07             	cmp    ecx,0x7
c0010762:	77 0b                	ja     c001076f <VgaText::doANSI_SGR(int)+0x61>
c0010764:	8b 14 95 58 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a8]
c001076b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001076e:	c3                   	ret    
c001076f:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010772:	83 f9 07             	cmp    ecx,0x7
c0010775:	77 0a                	ja     c0010781 <VgaText::doANSI_SGR(int)+0x73>
c0010777:	8b 14 95 30 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23d0]
c001077e:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010781:	c3                   	ret    

c0010782 <VgaText::setDefaultBgColour(VgaColour)>:
c0010782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001078a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001078d:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010790:	c3                   	ret    
c0010791:	90                   	nop

c0010792 <VgaText::setDefaultFgColour(VgaColour)>:
c0010792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010796:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001079a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001079d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00107a0:	c3                   	ret    
c00107a1:	90                   	nop

c00107a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00107a2:	53                   	push   ebx
c00107a3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00107a7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00107ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00107af:	51                   	push   ecx
c00107b0:	e8 cd ff ff ff       	call   c0010782 <VgaText::setDefaultBgColour(VgaColour)>
c00107b5:	58                   	pop    eax
c00107b6:	5a                   	pop    edx
c00107b7:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00107bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00107bf:	5b                   	pop    ebx
c00107c0:	eb d0                	jmp    c0010792 <VgaText::setDefaultFgColour(VgaColour)>

c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>:
c00107c2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00107c6:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00107cb:	83 e0 0f             	and    eax,0xf
c00107ce:	c1 e2 04             	shl    edx,0x4
c00107d1:	09 d0                	or     eax,edx
c00107d3:	c3                   	ret    

c00107d4 <VgaText::scrollScreen()>:
c00107d4:	55                   	push   ebp
c00107d5:	b9 01 00 00 00       	mov    ecx,0x1
c00107da:	57                   	push   edi
c00107db:	56                   	push   esi
c00107dc:	53                   	push   ebx
c00107dd:	83 ec 0c             	sub    esp,0xc
c00107e0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107e4:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00107ea:	31 ff                	xor    edi,edi
c00107ec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00107ef:	83 f9 17             	cmp    ecx,0x17
c00107f2:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00107f5:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00107fc:	75 27                	jne    c0010825 <VgaText::scrollScreen()+0x51>
c00107fe:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010801:	01 f5                	add    ebp,esi
c0010803:	f7 c7 01 00 00 00    	test   edi,0x1
c0010809:	74 16                	je     c0010821 <VgaText::scrollScreen()+0x4d>
c001080b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001080f:	50                   	push   eax
c0010810:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010814:	50                   	push   eax
c0010815:	e8 a8 ff ff ff       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c001081a:	5a                   	pop    edx
c001081b:	5a                   	pop    edx
c001081c:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001081f:	eb 04                	jmp    c0010825 <VgaText::scrollScreen()+0x51>
c0010821:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010825:	47                   	inc    edi
c0010826:	46                   	inc    esi
c0010827:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001082d:	75 bd                	jne    c00107ec <VgaText::scrollScreen()+0x18>
c001082f:	41                   	inc    ecx
c0010830:	83 f9 18             	cmp    ecx,0x18
c0010833:	75 af                	jne    c00107e4 <VgaText::scrollScreen()+0x10>
c0010835:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c001083b:	75 1b                	jne    c0010858 <VgaText::scrollScreen()+0x84>
c001083d:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010841:	74 05                	je     c0010848 <VgaText::scrollScreen()+0x74>
c0010843:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010846:	eb 10                	jmp    c0010858 <VgaText::scrollScreen()+0x84>
c0010848:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c001084b:	85 c0                	test   eax,eax
c001084d:	74 09                	je     c0010858 <VgaText::scrollScreen()+0x84>
c001084f:	83 ec 0c             	sub    esp,0xc
c0010852:	53                   	push   ebx
c0010853:	ff d0                	call   eax
c0010855:	83 c4 10             	add    esp,0x10
c0010858:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001085c:	83 c4 0c             	add    esp,0xc
c001085f:	5b                   	pop    ebx
c0010860:	5e                   	pop    esi
c0010861:	5f                   	pop    edi
c0010862:	5d                   	pop    ebp
c0010863:	e9 50 fe ff ff       	jmp    c00106b8 <VgaText::updateCursor()>

c0010868 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010868:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001086d:	c1 e0 08             	shl    eax,0x8
c0010870:	89 c2                	mov    edx,eax
c0010872:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010877:	09 d0                	or     eax,edx
c0010879:	c3                   	ret    

c001087a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001087a:	56                   	push   esi
c001087b:	53                   	push   ebx
c001087c:	51                   	push   ecx
c001087d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010881:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010886:	50                   	push   eax
c0010887:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001088c:	50                   	push   eax
c001088d:	e8 30 ff ff ff       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010892:	5b                   	pop    ebx
c0010893:	0f b6 c0             	movzx  eax,al
c0010896:	5e                   	pop    esi
c0010897:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001089c:	50                   	push   eax
c001089d:	53                   	push   ebx
c001089e:	e8 c5 ff ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c00108a3:	5a                   	pop    edx
c00108a4:	5e                   	pop    esi
c00108a5:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c00108a8:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00108ae:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00108b2:	0f b7 d2             	movzx  edx,dx
c00108b5:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00108b9:	39 0d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ecx
c00108bf:	75 10                	jne    c00108d1 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108c1:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00108c4:	85 c0                	test   eax,eax
c00108c6:	74 09                	je     c00108d1 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00108c8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00108cc:	5a                   	pop    edx
c00108cd:	5b                   	pop    ebx
c00108ce:	5e                   	pop    esi
c00108cf:	ff e0                	jmp    eax
c00108d1:	58                   	pop    eax
c00108d2:	5b                   	pop    ebx
c00108d3:	5e                   	pop    esi
c00108d4:	c3                   	ret    
c00108d5:	90                   	nop

c00108d6 <VgaText::getCursorX()>:
c00108d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108da:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00108dd:	c3                   	ret    

c00108de <VgaText::getCursorY()>:
c00108de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00108e5:	c3                   	ret    

c00108e6 <VgaText::setCursor(int, int)>:
c00108e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ee:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00108f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00108f8:	e9 bb fd ff ff       	jmp    c00106b8 <VgaText::updateCursor()>
c00108fd:	90                   	nop

c00108fe <VgaText::setCursorX(int)>:
c00108fe:	83 ec 10             	sub    esp,0x10
c0010901:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010905:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090c:	50                   	push   eax
c001090d:	e8 d4 ff ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c0010912:	83 c4 1c             	add    esp,0x1c
c0010915:	c3                   	ret    

c0010916 <VgaText::setCursorY(int)>:
c0010916:	83 ec 10             	sub    esp,0x10
c0010919:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001091d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010921:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010924:	50                   	push   eax
c0010925:	e8 bc ff ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c001092a:	83 c4 1c             	add    esp,0x1c
c001092d:	c3                   	ret    

c001092e <VgaText::incrementCursor(bool)>:
c001092e:	56                   	push   esi
c001092f:	53                   	push   ebx
c0010930:	51                   	push   ecx
c0010931:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010935:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010939:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001093c:	40                   	inc    eax
c001093d:	83 f8 50             	cmp    eax,0x50
c0010940:	74 05                	je     c0010947 <VgaText::incrementCursor(bool)+0x19>
c0010942:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010945:	eb 24                	jmp    c001096b <VgaText::incrementCursor(bool)+0x3d>
c0010947:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001094a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010951:	8d 50 01             	lea    edx,[eax+0x1]
c0010954:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010957:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001095a:	75 0f                	jne    c001096b <VgaText::incrementCursor(bool)+0x3d>
c001095c:	83 ec 0c             	sub    esp,0xc
c001095f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010962:	53                   	push   ebx
c0010963:	e8 6c fe ff ff       	call   c00107d4 <VgaText::scrollScreen()>
c0010968:	83 c4 10             	add    esp,0x10
c001096b:	89 f0                	mov    eax,esi
c001096d:	84 c0                	test   al,al
c001096f:	74 0c                	je     c001097d <VgaText::incrementCursor(bool)+0x4f>
c0010971:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010975:	5a                   	pop    edx
c0010976:	5b                   	pop    ebx
c0010977:	5e                   	pop    esi
c0010978:	e9 3b fd ff ff       	jmp    c00106b8 <VgaText::updateCursor()>
c001097d:	58                   	pop    eax
c001097e:	5b                   	pop    ebx
c001097f:	5e                   	pop    esi
c0010980:	c3                   	ret    
c0010981:	90                   	nop

c0010982 <VgaText::updateRAMUsageDisplay(int)>:
c0010982:	56                   	push   esi
c0010983:	8b 35 80 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd80
c0010989:	53                   	push   ebx
c001098a:	bb 0a 00 00 00       	mov    ebx,0xa
c001098f:	6a 0f                	push   0xf
c0010991:	6a 00                	push   0x0
c0010993:	e8 2a fe ff ff       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010998:	5a                   	pop    edx
c0010999:	59                   	pop    ecx
c001099a:	0f b6 c8             	movzx  ecx,al
c001099d:	51                   	push   ecx
c001099e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a2:	99                   	cdq    
c00109a3:	f7 fb                	idiv   ebx
c00109a5:	89 d3                	mov    ebx,edx
c00109a7:	83 c0 30             	add    eax,0x30
c00109aa:	83 c3 30             	add    ebx,0x30
c00109ad:	0f be c0             	movsx  eax,al
c00109b0:	0f b6 db             	movzx  ebx,bl
c00109b3:	50                   	push   eax
c00109b4:	e8 af fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b9:	5a                   	pop    edx
c00109ba:	5a                   	pop    edx
c00109bb:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109c2:	51                   	push   ecx
c00109c3:	53                   	push   ebx
c00109c4:	e8 9f fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c9:	5b                   	pop    ebx
c00109ca:	5a                   	pop    edx
c00109cb:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109d2:	51                   	push   ecx
c00109d3:	6a 25                	push   0x25
c00109d5:	e8 8e fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c00109da:	59                   	pop    ecx
c00109db:	5b                   	pop    ebx
c00109dc:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109e3:	5b                   	pop    ebx
c00109e4:	5e                   	pop    esi
c00109e5:	c3                   	ret    

c00109e6 <VgaText::updateDiskUsage()>:
c00109e6:	55                   	push   ebp
c00109e7:	bd 10 27 00 00       	mov    ebp,0x2710
c00109ec:	57                   	push   edi
c00109ed:	8b 3d 80 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd80
c00109f3:	56                   	push   esi
c00109f4:	53                   	push   ebx
c00109f5:	6a 0f                	push   0xf
c00109f7:	6a 00                	push   0x0
c00109f9:	e8 c4 fd ff ff       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c00109fe:	5a                   	pop    edx
c00109ff:	0f b6 d8             	movzx  ebx,al
c0010a02:	59                   	pop    ecx
c0010a03:	8b 35 a8 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331a8
c0010a09:	53                   	push   ebx
c0010a0a:	b9 0a 00 00 00       	mov    ecx,0xa
c0010a0f:	89 f0                	mov    eax,esi
c0010a11:	99                   	cdq    
c0010a12:	f7 fd                	idiv   ebp
c0010a14:	99                   	cdq    
c0010a15:	f7 f9                	idiv   ecx
c0010a17:	8d 42 30             	lea    eax,[edx+0x30]
c0010a1a:	0f b6 c0             	movzx  eax,al
c0010a1d:	50                   	push   eax
c0010a1e:	e8 45 fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a23:	5d                   	pop    ebp
c0010a24:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a29:	5a                   	pop    edx
c0010a2a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a2e:	53                   	push   ebx
c0010a2f:	89 f0                	mov    eax,esi
c0010a31:	99                   	cdq    
c0010a32:	f7 fd                	idiv   ebp
c0010a34:	99                   	cdq    
c0010a35:	f7 f9                	idiv   ecx
c0010a37:	8d 42 30             	lea    eax,[edx+0x30]
c0010a3a:	0f b6 c0             	movzx  eax,al
c0010a3d:	50                   	push   eax
c0010a3e:	e8 25 fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a43:	5d                   	pop    ebp
c0010a44:	bd 64 00 00 00       	mov    ebp,0x64
c0010a49:	5a                   	pop    edx
c0010a4a:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a51:	53                   	push   ebx
c0010a52:	89 f0                	mov    eax,esi
c0010a54:	99                   	cdq    
c0010a55:	f7 fd                	idiv   ebp
c0010a57:	99                   	cdq    
c0010a58:	f7 f9                	idiv   ecx
c0010a5a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a5d:	0f b6 c0             	movzx  eax,al
c0010a60:	50                   	push   eax
c0010a61:	e8 02 fe ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a66:	5d                   	pop    ebp
c0010a67:	5a                   	pop    edx
c0010a68:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a6f:	53                   	push   ebx
c0010a70:	89 f0                	mov    eax,esi
c0010a72:	99                   	cdq    
c0010a73:	f7 f9                	idiv   ecx
c0010a75:	89 d6                	mov    esi,edx
c0010a77:	99                   	cdq    
c0010a78:	f7 f9                	idiv   ecx
c0010a7a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a7d:	0f b6 c0             	movzx  eax,al
c0010a80:	50                   	push   eax
c0010a81:	e8 e2 fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a86:	5d                   	pop    ebp
c0010a87:	5a                   	pop    edx
c0010a88:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a8f:	53                   	push   ebx
c0010a90:	8d 46 30             	lea    eax,[esi+0x30]
c0010a93:	0f b6 f0             	movzx  esi,al
c0010a96:	56                   	push   esi
c0010a97:	e8 cc fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a9c:	5e                   	pop    esi
c0010a9d:	8b 35 a4 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331a4
c0010aa3:	5d                   	pop    ebp
c0010aa4:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010aab:	bd 10 27 00 00       	mov    ebp,0x2710
c0010ab0:	53                   	push   ebx
c0010ab1:	89 f0                	mov    eax,esi
c0010ab3:	99                   	cdq    
c0010ab4:	f7 fd                	idiv   ebp
c0010ab6:	99                   	cdq    
c0010ab7:	f7 f9                	idiv   ecx
c0010ab9:	8d 42 30             	lea    eax,[edx+0x30]
c0010abc:	0f b6 c0             	movzx  eax,al
c0010abf:	50                   	push   eax
c0010ac0:	e8 a3 fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ac5:	5a                   	pop    edx
c0010ac6:	5d                   	pop    ebp
c0010ac7:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010ace:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ad3:	53                   	push   ebx
c0010ad4:	89 f0                	mov    eax,esi
c0010ad6:	99                   	cdq    
c0010ad7:	f7 fd                	idiv   ebp
c0010ad9:	99                   	cdq    
c0010ada:	f7 f9                	idiv   ecx
c0010adc:	8d 42 30             	lea    eax,[edx+0x30]
c0010adf:	0f b6 c0             	movzx  eax,al
c0010ae2:	50                   	push   eax
c0010ae3:	e8 80 fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ae8:	5a                   	pop    edx
c0010ae9:	5d                   	pop    ebp
c0010aea:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010af1:	bd 64 00 00 00       	mov    ebp,0x64
c0010af6:	53                   	push   ebx
c0010af7:	89 f0                	mov    eax,esi
c0010af9:	99                   	cdq    
c0010afa:	f7 fd                	idiv   ebp
c0010afc:	99                   	cdq    
c0010afd:	f7 f9                	idiv   ecx
c0010aff:	83 c2 30             	add    edx,0x30
c0010b02:	0f b6 d2             	movzx  edx,dl
c0010b05:	52                   	push   edx
c0010b06:	e8 5d fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b0b:	5a                   	pop    edx
c0010b0c:	5d                   	pop    ebp
c0010b0d:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b14:	53                   	push   ebx
c0010b15:	89 f0                	mov    eax,esi
c0010b17:	99                   	cdq    
c0010b18:	f7 f9                	idiv   ecx
c0010b1a:	89 d6                	mov    esi,edx
c0010b1c:	99                   	cdq    
c0010b1d:	f7 f9                	idiv   ecx
c0010b1f:	8d 42 30             	lea    eax,[edx+0x30]
c0010b22:	0f b6 c0             	movzx  eax,al
c0010b25:	50                   	push   eax
c0010b26:	e8 3d fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2b:	5a                   	pop    edx
c0010b2c:	59                   	pop    ecx
c0010b2d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b34:	53                   	push   ebx
c0010b35:	8d 46 30             	lea    eax,[esi+0x30]
c0010b38:	0f b6 f0             	movzx  esi,al
c0010b3b:	56                   	push   esi
c0010b3c:	e8 27 fd ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b41:	5b                   	pop    ebx
c0010b42:	5e                   	pop    esi
c0010b43:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b4a:	5b                   	pop    ebx
c0010b4b:	5e                   	pop    esi
c0010b4c:	5f                   	pop    edi
c0010b4d:	5d                   	pop    ebp
c0010b4e:	c3                   	ret    
c0010b4f:	90                   	nop

c0010b50 <VgaText::updateTitle()>:
c0010b50:	53                   	push   ebx
c0010b51:	31 c0                	xor    eax,eax
c0010b53:	83 ec 58             	sub    esp,0x58
c0010b56:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b5a:	89 e1                	mov    ecx,esp
c0010b5c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b60:	40                   	inc    eax
c0010b61:	83 f8 50             	cmp    eax,0x50
c0010b64:	75 f6                	jne    c0010b5c <VgaText::updateTitle()+0xc>
c0010b66:	31 c0                	xor    eax,eax
c0010b68:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010b6f:	84 db                	test   bl,bl
c0010b71:	74 06                	je     c0010b79 <VgaText::updateTitle()+0x29>
c0010b73:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b76:	40                   	inc    eax
c0010b77:	eb ef                	jmp    c0010b68 <VgaText::updateTitle()+0x18>
c0010b79:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010b7c:	85 c0                	test   eax,eax
c0010b7e:	74 09                	je     c0010b89 <VgaText::updateTitle()+0x39>
c0010b80:	53                   	push   ebx
c0010b81:	53                   	push   ebx
c0010b82:	51                   	push   ecx
c0010b83:	52                   	push   edx
c0010b84:	ff d0                	call   eax
c0010b86:	83 c4 10             	add    esp,0x10
c0010b89:	e8 58 fe ff ff       	call   c00109e6 <VgaText::updateDiskUsage()>
c0010b8e:	83 c4 58             	add    esp,0x58
c0010b91:	5b                   	pop    ebx
c0010b92:	c3                   	ret    
c0010b93:	90                   	nop

c0010b94 <VgaText::setTitleTextColour(VgaColour)>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b9f:	eb af                	jmp    c0010b50 <VgaText::updateTitle()>
c0010ba1:	90                   	nop

c0010ba2 <VgaText::setTitleColour(VgaColour)>:
c0010ba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ba6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010baa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010bad:	eb a1                	jmp    c0010b50 <VgaText::updateTitle()>
c0010baf:	90                   	nop

c0010bb0 <VgaText::setTitle(char*)>:
c0010bb0:	53                   	push   ebx
c0010bb1:	83 ec 10             	sub    esp,0x10
c0010bb4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bbc:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010bc2:	50                   	push   eax
c0010bc3:	e8 90 fc fe ff       	call   c0000858 <strcpy>
c0010bc8:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bcc:	83 c4 18             	add    esp,0x18
c0010bcf:	5b                   	pop    ebx
c0010bd0:	e9 7b ff ff ff       	jmp    c0010b50 <VgaText::updateTitle()>
c0010bd5:	90                   	nop

c0010bd6 <VgaText::decrementCursor(bool)>:
c0010bd6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bda:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bde:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010be1:	85 c0                	test   eax,eax
c0010be3:	74 04                	je     c0010be9 <VgaText::decrementCursor(bool)+0x13>
c0010be5:	48                   	dec    eax
c0010be6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010be9:	84 c9                	test   cl,cl
c0010beb:	74 09                	je     c0010bf6 <VgaText::decrementCursor(bool)+0x20>
c0010bed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bf1:	e9 c2 fa ff ff       	jmp    c00106b8 <VgaText::updateCursor()>
c0010bf6:	c3                   	ret    
c0010bf7:	90                   	nop

c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bf8:	53                   	push   ebx
c0010bf9:	83 ec 08             	sub    esp,0x8
c0010bfc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010c00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c04:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c08:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c0c:	3c 07                	cmp    al,0x7
c0010c0e:	75 2a                	jne    c0010c3a <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c10:	a1 d8 ef 02 c0       	mov    eax,ds:0xc002efd8
c0010c15:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c1d:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c25:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c31:	83 c4 08             	add    esp,0x8
c0010c34:	5b                   	pop    ebx
c0010c35:	e9 b4 30 00 00       	jmp    c0013cee <Buzzer::beep(int, int, bool)>
c0010c3a:	3c 0d                	cmp    al,0xd
c0010c3c:	75 09                	jne    c0010c47 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010c3e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c45:	eb 2c                	jmp    c0010c73 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010c47:	3c 0a                	cmp    al,0xa
c0010c49:	75 31                	jne    c0010c7c <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010c4b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010c4e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010c55:	8d 50 01             	lea    edx,[eax+0x1]
c0010c58:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010c5b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010c5e:	75 0f                	jne    c0010c6f <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010c60:	83 ec 0c             	sub    esp,0xc
c0010c63:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010c66:	53                   	push   ebx
c0010c67:	e8 68 fb ff ff       	call   c00107d4 <VgaText::scrollScreen()>
c0010c6c:	83 c4 10             	add    esp,0x10
c0010c6f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c73:	83 c4 08             	add    esp,0x8
c0010c76:	5b                   	pop    ebx
c0010c77:	e9 3c fa ff ff       	jmp    c00106b8 <VgaText::updateCursor()>
c0010c7c:	3c 08                	cmp    al,0x8
c0010c7e:	75 25                	jne    c0010ca5 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010c80:	50                   	push   eax
c0010c81:	50                   	push   eax
c0010c82:	6a 01                	push   0x1
c0010c84:	53                   	push   ebx
c0010c85:	e8 4c ff ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010c8a:	5a                   	pop    edx
c0010c8b:	59                   	pop    ecx
c0010c8c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c8f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c92:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c95:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c98:	6a 20                	push   0x20
c0010c9a:	53                   	push   ebx
c0010c9b:	e8 da fb ff ff       	call   c001087a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ca0:	83 c4 28             	add    esp,0x28
c0010ca3:	5b                   	pop    ebx
c0010ca4:	c3                   	ret    
c0010ca5:	83 ec 08             	sub    esp,0x8
c0010ca8:	0f be c0             	movsx  eax,al
c0010cab:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cae:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cb1:	51                   	push   ecx
c0010cb2:	52                   	push   edx
c0010cb3:	50                   	push   eax
c0010cb4:	53                   	push   ebx
c0010cb5:	e8 c0 fb ff ff       	call   c001087a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cba:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cbe:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010cc6:	83 c4 28             	add    esp,0x28
c0010cc9:	5b                   	pop    ebx
c0010cca:	e9 5f fc ff ff       	jmp    c001092e <VgaText::incrementCursor(bool)>
c0010ccf:	90                   	nop

c0010cd0 <VgaText::isShowingCursor()>:
c0010cd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cd4:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010cd7:	c3                   	ret    

c0010cd8 <VgaText::isBlinkDisabled()>:
c0010cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cdc:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010cdf:	83 f0 01             	xor    eax,0x1
c0010ce2:	c3                   	ret    
c0010ce3:	90                   	nop

c0010ce4 <VgaText::setCursorHeight(int)>:
c0010ce4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ce8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010cec:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010cef:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010cf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010cf7:	e9 d2 f9 ff ff       	jmp    c00106ce <VgaText::showCursor(bool)>

c0010cfc <VgaText::getCursorHeight()>:
c0010cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d00:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010d03:	c3                   	ret    

c0010d04 <setActiveTerminal(VgaText*)>:
c0010d04:	53                   	push   ebx
c0010d05:	83 ec 08             	sub    esp,0x8
c0010d08:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d0c:	85 db                	test   ebx,ebx
c0010d0e:	75 11                	jne    c0010d21 <setActiveTerminal(VgaText*)+0x1d>
c0010d10:	c7 44 24 10 8c ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac8c
c0010d18:	83 c4 08             	add    esp,0x8
c0010d1b:	5b                   	pop    ebx
c0010d1c:	e9 7c 9b 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c0010d21:	50                   	push   eax
c0010d22:	50                   	push   eax
c0010d23:	53                   	push   ebx
c0010d24:	68 9a ac 02 c0       	push   0xc002ac9a
c0010d29:	e8 b3 21 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0010d2e:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0010d33:	83 c4 10             	add    esp,0x10
c0010d36:	85 c0                	test   eax,eax
c0010d38:	74 0c                	je     c0010d46 <setActiveTerminal(VgaText*)+0x42>
c0010d3a:	83 ec 0c             	sub    esp,0xc
c0010d3d:	50                   	push   eax
c0010d3e:	e8 75 f9 ff ff       	call   c00106b8 <VgaText::updateCursor()>
c0010d43:	83 c4 10             	add    esp,0x10
c0010d46:	89 1d 24 ef 02 c0    	mov    DWORD PTR ds:0xc002ef24,ebx
c0010d4c:	51                   	push   ecx
c0010d4d:	51                   	push   ecx
c0010d4e:	53                   	push   ebx
c0010d4f:	68 b2 ac 02 c0       	push   0xc002acb2
c0010d54:	e8 88 21 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0010d59:	83 c4 0c             	add    esp,0xc
c0010d5c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010d5f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010d62:	53                   	push   ebx
c0010d63:	e8 7e fb ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c0010d68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d6b:	e8 68 ff ff ff       	call   c0010cd8 <VgaText::isBlinkDisabled()>
c0010d70:	5a                   	pop    edx
c0010d71:	0f b6 c0             	movzx  eax,al
c0010d74:	59                   	pop    ecx
c0010d75:	50                   	push   eax
c0010d76:	53                   	push   ebx
c0010d77:	e8 5e f9 ff ff       	call   c00106da <VgaText::disableBlink(bool)>
c0010d7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d7f:	e8 78 ff ff ff       	call   c0010cfc <VgaText::getCursorHeight()>
c0010d84:	5a                   	pop    edx
c0010d85:	59                   	pop    ecx
c0010d86:	50                   	push   eax
c0010d87:	53                   	push   ebx
c0010d88:	e8 57 ff ff ff       	call   c0010ce4 <VgaText::setCursorHeight(int)>
c0010d8d:	83 c4 10             	add    esp,0x10
c0010d90:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d94:	75 07                	jne    c0010d9d <setActiveTerminal(VgaText*)+0x99>
c0010d96:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d9d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010da1:	83 c4 08             	add    esp,0x8
c0010da4:	5b                   	pop    ebx
c0010da5:	e9 c0 f8 ff ff       	jmp    c001066a <VgaText::load()>

c0010daa <doTerminalCycle()>:
c0010daa:	83 ec 18             	sub    esp,0x18
c0010dad:	a1 20 ef 02 c0       	mov    eax,ds:0xc002ef20
c0010db2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010db5:	50                   	push   eax
c0010db6:	a3 20 ef 02 c0       	mov    ds:0xc002ef20,eax
c0010dbb:	e8 44 ff ff ff       	call   c0010d04 <setActiveTerminal(VgaText*)>
c0010dc0:	83 c4 1c             	add    esp,0x1c
c0010dc3:	c3                   	ret    

c0010dc4 <VgaText::doUpdate()>:
c0010dc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010dc8:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010dcb:	85 c0                	test   eax,eax
c0010dcd:	74 02                	je     c0010dd1 <VgaText::doUpdate()+0xd>
c0010dcf:	ff e0                	jmp    eax
c0010dd1:	c3                   	ret    

c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010dd2:	55                   	push   ebp
c0010dd3:	31 ed                	xor    ebp,ebp
c0010dd5:	57                   	push   edi
c0010dd6:	56                   	push   esi
c0010dd7:	53                   	push   ebx
c0010dd8:	83 ec 1c             	sub    esp,0x1c
c0010ddb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010ddf:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010de4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010deb:	50                   	push   eax
c0010dec:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010df1:	50                   	push   eax
c0010df2:	e8 cb f9 ff ff       	call   c00107c2 <VgaText::combineColours(unsigned char, unsigned char)>
c0010df7:	59                   	pop    ecx
c0010df8:	0f b6 c0             	movzx  eax,al
c0010dfb:	5e                   	pop    esi
c0010dfc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e01:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010e05:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010e0c:	0f b7 f6             	movzx  esi,si
c0010e0f:	01 f6                	add    esi,esi
c0010e11:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e14:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010e17:	84 c0                	test   al,al
c0010e19:	0f 84 fd 00 00 00    	je     c0010f1c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010e1f:	3c 0d                	cmp    al,0xd
c0010e21:	75 0c                	jne    c0010e2f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010e23:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e2a:	e9 e7 00 00 00       	jmp    c0010f16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e2f:	3c 0a                	cmp    al,0xa
c0010e31:	75 47                	jne    c0010e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010e33:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010e36:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010e3d:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e40:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010e43:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010e46:	75 0f                	jne    c0010e57 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010e48:	83 ec 0c             	sub    esp,0xc
c0010e4b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010e4e:	53                   	push   ebx
c0010e4f:	e8 80 f9 ff ff       	call   c00107d4 <VgaText::scrollScreen()>
c0010e54:	83 c4 10             	add    esp,0x10
c0010e57:	83 ec 0c             	sub    esp,0xc
c0010e5a:	31 ed                	xor    ebp,ebp
c0010e5c:	53                   	push   ebx
c0010e5d:	e8 56 f8 ff ff       	call   c00106b8 <VgaText::updateCursor()>
c0010e62:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e67:	83 c4 10             	add    esp,0x10
c0010e6a:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e6d:	0f b7 f6             	movzx  esi,si
c0010e70:	01 f6                	add    esi,esi
c0010e72:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e75:	e9 9c 00 00 00       	jmp    c0010f16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e7a:	3c 08                	cmp    al,0x8
c0010e7c:	75 35                	jne    c0010eb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010e7e:	56                   	push   esi
c0010e7f:	56                   	push   esi
c0010e80:	6a 01                	push   0x1
c0010e82:	53                   	push   ebx
c0010e83:	e8 4e fd ff ff       	call   c0010bd6 <VgaText::decrementCursor(bool)>
c0010e88:	58                   	pop    eax
c0010e89:	5a                   	pop    edx
c0010e8a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e8d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e90:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e93:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e96:	6a 20                	push   0x20
c0010e98:	53                   	push   ebx
c0010e99:	e8 dc f9 ff ff       	call   c001087a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e9e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010ea3:	83 c4 20             	add    esp,0x20
c0010ea6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010ea9:	0f b7 f6             	movzx  esi,si
c0010eac:	01 f6                	add    esi,esi
c0010eae:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010eb1:	eb 63                	jmp    c0010f16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010eb3:	51                   	push   ecx
c0010eb4:	51                   	push   ecx
c0010eb5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010eb9:	50                   	push   eax
c0010eba:	e8 a9 f9 ff ff       	call   c0010868 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ebf:	83 c4 10             	add    esp,0x10
c0010ec2:	66 89 06             	mov    WORD PTR [esi],ax
c0010ec5:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c0010ecb:	75 21                	jne    c0010eee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ecd:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010ed0:	85 c0                	test   eax,eax
c0010ed2:	74 1a                	je     c0010eee <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010ed4:	52                   	push   edx
c0010ed5:	52                   	push   edx
c0010ed6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010ed9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ee0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010ee4:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010ee7:	51                   	push   ecx
c0010ee8:	53                   	push   ebx
c0010ee9:	ff d0                	call   eax
c0010eeb:	83 c4 20             	add    esp,0x20
c0010eee:	83 c6 02             	add    esi,0x2
c0010ef1:	50                   	push   eax
c0010ef2:	50                   	push   eax
c0010ef3:	6a 00                	push   0x0
c0010ef5:	53                   	push   ebx
c0010ef6:	e8 33 fa ff ff       	call   c001092e <VgaText::incrementCursor(bool)>
c0010efb:	83 c4 10             	add    esp,0x10
c0010efe:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010f02:	75 0d                	jne    c0010f11 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010f04:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010f09:	0f b7 f6             	movzx  esi,si
c0010f0c:	01 f6                	add    esi,esi
c0010f0e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010f11:	bd 01 00 00 00       	mov    ebp,0x1
c0010f16:	47                   	inc    edi
c0010f17:	e9 f8 fe ff ff       	jmp    c0010e14 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010f1c:	83 ec 0c             	sub    esp,0xc
c0010f1f:	53                   	push   ebx
c0010f20:	e8 93 f7 ff ff       	call   c00106b8 <VgaText::updateCursor()>
c0010f25:	83 c4 10             	add    esp,0x10
c0010f28:	89 e8                	mov    eax,ebp
c0010f2a:	84 c0                	test   al,al
c0010f2c:	74 0c                	je     c0010f3a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010f2e:	83 ec 0c             	sub    esp,0xc
c0010f31:	53                   	push   ebx
c0010f32:	e8 8d fe ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f41:	83 c4 1c             	add    esp,0x1c
c0010f44:	5b                   	pop    ebx
c0010f45:	5e                   	pop    esi
c0010f46:	5f                   	pop    edi
c0010f47:	5d                   	pop    ebp
c0010f48:	c3                   	ret    
c0010f49:	90                   	nop

c0010f4a <VgaText::clearScreen()>:
c0010f4a:	57                   	push   edi
c0010f4b:	56                   	push   esi
c0010f4c:	31 f6                	xor    esi,esi
c0010f4e:	53                   	push   ebx
c0010f4f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010f53:	52                   	push   edx
c0010f54:	6a 00                	push   0x0
c0010f56:	6a 00                	push   0x0
c0010f58:	53                   	push   ebx
c0010f59:	e8 88 f9 ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c0010f5e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010f65:	83 c4 10             	add    esp,0x10
c0010f68:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010f6b:	7e 20                	jle    c0010f8d <VgaText::clearScreen()+0x43>
c0010f6d:	31 ff                	xor    edi,edi
c0010f6f:	50                   	push   eax
c0010f70:	50                   	push   eax
c0010f71:	56                   	push   esi
c0010f72:	57                   	push   edi
c0010f73:	47                   	inc    edi
c0010f74:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010f77:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010f7a:	6a 20                	push   0x20
c0010f7c:	53                   	push   ebx
c0010f7d:	e8 f8 f8 ff ff       	call   c001087a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f82:	83 c4 20             	add    esp,0x20
c0010f85:	83 ff 50             	cmp    edi,0x50
c0010f88:	75 e5                	jne    c0010f6f <VgaText::clearScreen()+0x25>
c0010f8a:	46                   	inc    esi
c0010f8b:	eb db                	jmp    c0010f68 <VgaText::clearScreen()+0x1e>
c0010f8d:	83 ec 0c             	sub    esp,0xc
c0010f90:	53                   	push   ebx
c0010f91:	e8 2e fe ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0010f96:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f9d:	83 c4 10             	add    esp,0x10
c0010fa0:	5b                   	pop    ebx
c0010fa1:	5e                   	pop    esi
c0010fa2:	5f                   	pop    edi
c0010fa3:	c3                   	ret    

c0010fa4 <VgaText::putchar(char)>:
c0010fa4:	56                   	push   esi
c0010fa5:	53                   	push   ebx
c0010fa6:	83 ec 14             	sub    esp,0x14
c0010fa9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010fad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fb1:	3c 5b                	cmp    al,0x5b
c0010fb3:	75 18                	jne    c0010fcd <VgaText::putchar(char)+0x29>
c0010fb5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010fb9:	74 1f                	je     c0010fda <VgaText::putchar(char)+0x36>
c0010fbb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010fc1:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010fc8:	e9 bd 00 00 00       	jmp    c001108a <VgaText::putchar(char)+0xe6>
c0010fcd:	3c 1b                	cmp    al,0x1b
c0010fcf:	75 09                	jne    c0010fda <VgaText::putchar(char)+0x36>
c0010fd1:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010fd5:	e9 b0 00 00 00       	jmp    c001108a <VgaText::putchar(char)+0xe6>
c0010fda:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010fdd:	84 c9                	test   cl,cl
c0010fdf:	0f 84 92 00 00 00    	je     c0011077 <VgaText::putchar(char)+0xd3>
c0010fe5:	8d 50 c0             	lea    edx,[eax-0x40]
c0010fe8:	80 fa 3e             	cmp    dl,0x3e
c0010feb:	77 76                	ja     c0011063 <VgaText::putchar(char)+0xbf>
c0010fed:	3c 6d                	cmp    al,0x6d
c0010fef:	75 47                	jne    c0011038 <VgaText::putchar(char)+0x94>
c0010ff1:	31 f6                	xor    esi,esi
c0010ff3:	31 d2                	xor    edx,edx
c0010ff5:	31 c0                	xor    eax,eax
c0010ff7:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010ffa:	7e 2d                	jle    c0011029 <VgaText::putchar(char)+0x85>
c0010ffc:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011001:	80 fa 3b             	cmp    dl,0x3b
c0011004:	75 17                	jne    c001101d <VgaText::putchar(char)+0x79>
c0011006:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001100a:	50                   	push   eax
c001100b:	53                   	push   ebx
c001100c:	e8 fd f6 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011011:	59                   	pop    ecx
c0011012:	31 d2                	xor    edx,edx
c0011014:	58                   	pop    eax
c0011015:	31 c0                	xor    eax,eax
c0011017:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001101b:	eb 09                	jmp    c0011026 <VgaText::putchar(char)+0x82>
c001101d:	6b c0 0a             	imul   eax,eax,0xa
c0011020:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011024:	88 ca                	mov    dl,cl
c0011026:	46                   	inc    esi
c0011027:	eb ce                	jmp    c0010ff7 <VgaText::putchar(char)+0x53>
c0011029:	84 d2                	test   dl,dl
c001102b:	74 2e                	je     c001105b <VgaText::putchar(char)+0xb7>
c001102d:	50                   	push   eax
c001102e:	53                   	push   ebx
c001102f:	e8 da f6 ff ff       	call   c001070e <VgaText::doANSI_SGR(int)>
c0011034:	58                   	pop    eax
c0011035:	5a                   	pop    edx
c0011036:	eb 23                	jmp    c001105b <VgaText::putchar(char)+0xb7>
c0011038:	3c 4a                	cmp    al,0x4a
c001103a:	75 1f                	jne    c001105b <VgaText::putchar(char)+0xb7>
c001103c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011040:	75 19                	jne    c001105b <VgaText::putchar(char)+0xb7>
c0011042:	83 ec 0c             	sub    esp,0xc
c0011045:	53                   	push   ebx
c0011046:	e8 ff fe ff ff       	call   c0010f4a <VgaText::clearScreen()>
c001104b:	83 c4 0c             	add    esp,0xc
c001104e:	6a 00                	push   0x0
c0011050:	6a 00                	push   0x0
c0011052:	53                   	push   ebx
c0011053:	e8 8e f8 ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c0011058:	83 c4 10             	add    esp,0x10
c001105b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011061:	eb 27                	jmp    c001108a <VgaText::putchar(char)+0xe6>
c0011063:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0011066:	83 fa 0e             	cmp    edx,0xe
c0011069:	7f 1f                	jg     c001108a <VgaText::putchar(char)+0xe6>
c001106b:	8d 4a 01             	lea    ecx,[edx+0x1]
c001106e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011071:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0011075:	eb 13                	jmp    c001108a <VgaText::putchar(char)+0xe6>
c0011077:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001107a:	0f be c0             	movsx  eax,al
c001107d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011080:	50                   	push   eax
c0011081:	53                   	push   ebx
c0011082:	e8 71 fb ff ff       	call   c0010bf8 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011087:	83 c4 10             	add    esp,0x10
c001108a:	83 c4 14             	add    esp,0x14
c001108d:	5b                   	pop    ebx
c001108e:	5e                   	pop    esi
c001108f:	c3                   	ret    

c0011090 <VgaText::puts(char const*)>:
c0011090:	53                   	push   ebx
c0011091:	83 ec 08             	sub    esp,0x8
c0011094:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011098:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001109b:	84 c0                	test   al,al
c001109d:	74 12                	je     c00110b1 <VgaText::puts(char const*)+0x21>
c001109f:	43                   	inc    ebx
c00110a0:	51                   	push   ecx
c00110a1:	51                   	push   ecx
c00110a2:	50                   	push   eax
c00110a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110a7:	e8 f8 fe ff ff       	call   c0010fa4 <VgaText::putchar(char)>
c00110ac:	83 c4 10             	add    esp,0x10
c00110af:	eb e7                	jmp    c0011098 <VgaText::puts(char const*)+0x8>
c00110b1:	83 c4 08             	add    esp,0x8
c00110b4:	5b                   	pop    ebx
c00110b5:	c3                   	ret    

c00110b6 <VgaText::putx(unsigned int)>:
c00110b6:	57                   	push   edi
c00110b7:	b9 11 00 00 00       	mov    ecx,0x11
c00110bc:	56                   	push   esi
c00110bd:	be ce ac 02 c0       	mov    esi,0xc002acce
c00110c2:	53                   	push   ebx
c00110c3:	83 ec 20             	sub    esp,0x20
c00110c6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00110ca:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00110ce:	fc                   	cld    
c00110cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110d1:	be 08 00 00 00       	mov    esi,0x8
c00110d6:	50                   	push   eax
c00110d7:	50                   	push   eax
c00110d8:	89 d8                	mov    eax,ebx
c00110da:	c1 e3 04             	shl    ebx,0x4
c00110dd:	c1 e8 1c             	shr    eax,0x1c
c00110e0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00110e5:	50                   	push   eax
c00110e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00110ea:	e8 b5 fe ff ff       	call   c0010fa4 <VgaText::putchar(char)>
c00110ef:	83 c4 10             	add    esp,0x10
c00110f2:	4e                   	dec    esi
c00110f3:	75 e1                	jne    c00110d6 <VgaText::putx(unsigned int)+0x20>
c00110f5:	83 c4 20             	add    esp,0x20
c00110f8:	5b                   	pop    ebx
c00110f9:	5e                   	pop    esi
c00110fa:	5f                   	pop    edi
c00110fb:	c3                   	ret    

c00110fc <VgaText::VgaText(char const*)>:
c00110fc:	57                   	push   edi
c00110fd:	56                   	push   esi
c00110fe:	53                   	push   ebx
c00110ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011103:	83 ec 08             	sub    esp,0x8
c0011106:	6a 00                	push   0x0
c0011108:	50                   	push   eax
c0011109:	e8 8a 05 00 00       	call   c0011698 <UnixFile::UnixFile(int)>
c001110e:	83 c4 10             	add    esp,0x10
c0011111:	ba 34 ad 02 c0       	mov    edx,0xc002ad34
c0011116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001111a:	89 10                	mov    DWORD PTR [eax],edx
c001111c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011120:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0011127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001112b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011136:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001113a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0011142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011146:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001114d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011151:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001115c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0011163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011167:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c001116e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011172:	8d 50 60             	lea    edx,[eax+0x60]
c0011175:	bb 00 ef 02 c0       	mov    ebx,0xc002ef00
c001117a:	b8 08 00 00 00       	mov    eax,0x8
c001117f:	fc                   	cld    
c0011180:	89 d7                	mov    edi,edx
c0011182:	89 de                	mov    esi,ebx
c0011184:	89 c1                	mov    ecx,eax
c0011186:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001118c:	05 82 00 00 00       	add    eax,0x82
c0011191:	83 ec 08             	sub    esp,0x8
c0011194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011198:	50                   	push   eax
c0011199:	e8 ba f6 fe ff       	call   c0000858 <strcpy>
c001119e:	83 c4 10             	add    esp,0x10
c00111a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111a5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c00111ac:	83 ec 0c             	sub    esp,0xc
c00111af:	6a 01                	push   0x1
c00111b1:	e8 25 09 00 00       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c00111b6:	83 c4 10             	add    esp,0x10
c00111b9:	89 c2                	mov    edx,eax
c00111bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111bf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00111c2:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c00111c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111cf:	89 c6                	mov    esi,eax
c00111d1:	e8 c0 ed ff ff       	call   c000ff96 <Phys::allocatePage()>
c00111d6:	6a 05                	push   0x5
c00111d8:	56                   	push   esi
c00111d9:	50                   	push   eax
c00111da:	53                   	push   ebx
c00111db:	e8 32 11 00 00       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00111ea:	83 ec 04             	sub    esp,0x4
c00111ed:	68 00 0f 00 00       	push   0xf00
c00111f2:	6a 00                	push   0x0
c00111f4:	50                   	push   eax
c00111f5:	e8 a2 f5 fe ff       	call   c000079c <memset>
c00111fa:	83 c4 10             	add    esp,0x10
c00111fd:	83 ec 04             	sub    esp,0x4
c0011200:	6a 00                	push   0x0
c0011202:	6a 07                	push   0x7
c0011204:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011208:	e8 95 f5 ff ff       	call   c00107a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001120d:	83 c4 10             	add    esp,0x10
c0011210:	83 ec 08             	sub    esp,0x8
c0011213:	6a 02                	push   0x2
c0011215:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011219:	e8 c6 fa ff ff       	call   c0010ce4 <VgaText::setCursorHeight(int)>
c001121e:	83 c4 10             	add    esp,0x10
c0011221:	83 ec 04             	sub    esp,0x4
c0011224:	6a 00                	push   0x0
c0011226:	6a 00                	push   0x0
c0011228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122c:	e8 b5 f6 ff ff       	call   c00108e6 <VgaText::setCursor(int, int)>
c0011231:	83 c4 10             	add    esp,0x10
c0011234:	83 ec 08             	sub    esp,0x8
c0011237:	6a 01                	push   0x1
c0011239:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001123d:	e8 8c f4 ff ff       	call   c00106ce <VgaText::showCursor(bool)>
c0011242:	83 c4 10             	add    esp,0x10
c0011245:	83 ec 08             	sub    esp,0x8
c0011248:	6a 01                	push   0x1
c001124a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001124e:	e8 87 f4 ff ff       	call   c00106da <VgaText::disableBlink(bool)>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	83 ec 0c             	sub    esp,0xc
c0011259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001125d:	e8 e8 fc ff ff       	call   c0010f4a <VgaText::clearScreen()>
c0011262:	83 c4 10             	add    esp,0x10
c0011265:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011269:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001126d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011271:	05 02 01 00 00       	add    eax,0x102
c0011276:	83 ec 04             	sub    esp,0x4
c0011279:	68 96 00 00 00       	push   0x96
c001127e:	6a 00                	push   0x0
c0011280:	50                   	push   eax
c0011281:	e8 16 f5 fe ff       	call   c000079c <memset>
c0011286:	83 c4 10             	add    esp,0x10
c0011289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128d:	05 98 01 00 00       	add    eax,0x198
c0011292:	83 ec 04             	sub    esp,0x4
c0011295:	68 2c 01 00 00       	push   0x12c
c001129a:	6a 00                	push   0x0
c001129c:	50                   	push   eax
c001129d:	e8 fa f4 fe ff       	call   c000079c <memset>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	90                   	nop
c00112a6:	5b                   	pop    ebx
c00112a7:	5e                   	pop    esi
c00112a8:	5f                   	pop    edi
c00112a9:	c3                   	ret    

c00112aa <VgaText::receiveKey(unsigned char)>:
c00112aa:	55                   	push   ebp
c00112ab:	57                   	push   edi
c00112ac:	56                   	push   esi
c00112ad:	53                   	push   ebx
c00112ae:	83 ec 1c             	sub    esp,0x1c
c00112b1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00112b5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00112b9:	84 db                	test   bl,bl
c00112bb:	0f 84 c9 00 00 00    	je     c001138a <VgaText::receiveKey(unsigned char)+0xe0>
c00112c1:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c00112c7:	80 fb 08             	cmp    bl,0x8
c00112ca:	75 2c                	jne    c00112f8 <VgaText::receiveKey(unsigned char)+0x4e>
c00112cc:	83 ec 0c             	sub    esp,0xc
c00112cf:	57                   	push   edi
c00112d0:	e8 e3 f4 fe ff       	call   c00007b8 <strlen>
c00112d5:	83 c4 10             	add    esp,0x10
c00112d8:	85 c0                	test   eax,eax
c00112da:	74 41                	je     c001131d <VgaText::receiveKey(unsigned char)+0x73>
c00112dc:	50                   	push   eax
c00112dd:	50                   	push   eax
c00112de:	6a 08                	push   0x8
c00112e0:	56                   	push   esi
c00112e1:	e8 be fc ff ff       	call   c0010fa4 <VgaText::putchar(char)>
c00112e6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112e9:	e8 ca f4 fe ff       	call   c00007b8 <strlen>
c00112ee:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c00112f6:	eb 22                	jmp    c001131a <VgaText::receiveKey(unsigned char)+0x70>
c00112f8:	0f be c3             	movsx  eax,bl
c00112fb:	52                   	push   edx
c00112fc:	52                   	push   edx
c00112fd:	50                   	push   eax
c00112fe:	56                   	push   esi
c00112ff:	e8 a0 fc ff ff       	call   c0010fa4 <VgaText::putchar(char)>
c0011304:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011308:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001130d:	59                   	pop    ecx
c001130e:	5d                   	pop    ebp
c001130f:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011313:	50                   	push   eax
c0011314:	57                   	push   edi
c0011315:	e8 7e f6 fe ff       	call   c0000998 <strcat>
c001131a:	83 c4 10             	add    esp,0x10
c001131d:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0011324:	75 05                	jne    c001132b <VgaText::receiveKey(unsigned char)+0x81>
c0011326:	80 fb 0a             	cmp    bl,0xa
c0011329:	75 53                	jne    c001137e <VgaText::receiveKey(unsigned char)+0xd4>
c001132b:	83 ec 0c             	sub    esp,0xc
c001132e:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0011334:	53                   	push   ebx
c0011335:	e8 7e f4 fe ff       	call   c00007b8 <strlen>
c001133a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001133d:	89 c5                	mov    ebp,eax
c001133f:	e8 74 f4 fe ff       	call   c00007b8 <strlen>
c0011344:	83 c4 10             	add    esp,0x10
c0011347:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c001134b:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011350:	76 10                	jbe    c0011362 <VgaText::receiveKey(unsigned char)+0xb8>
c0011352:	83 ec 0c             	sub    esp,0xc
c0011355:	68 df ac 02 c0       	push   0xc002acdf
c001135a:	e8 3e 95 00 00       	call   c001a89d <Krnl::panic(char const*)>
c001135f:	83 c4 10             	add    esp,0x10
c0011362:	50                   	push   eax
c0011363:	50                   	push   eax
c0011364:	57                   	push   edi
c0011365:	53                   	push   ebx
c0011366:	e8 2d f6 fe ff       	call   c0000998 <strcat>
c001136b:	83 c4 0c             	add    esp,0xc
c001136e:	68 96 00 00 00       	push   0x96
c0011373:	6a 00                	push   0x0
c0011375:	57                   	push   edi
c0011376:	e8 21 f4 fe ff       	call   c000079c <memset>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	83 ec 0c             	sub    esp,0xc
c0011381:	56                   	push   esi
c0011382:	e8 3d fa ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c0011387:	83 c4 10             	add    esp,0x10
c001138a:	83 c4 1c             	add    esp,0x1c
c001138d:	5b                   	pop    ebx
c001138e:	5e                   	pop    esi
c001138f:	5f                   	pop    edi
c0011390:	5d                   	pop    ebp
c0011391:	c3                   	ret    

c0011392 <VgaText::write(unsigned long long, void*, int*)>:
c0011392:	55                   	push   ebp
c0011393:	57                   	push   edi
c0011394:	56                   	push   esi
c0011395:	53                   	push   ebx
c0011396:	83 ec 0c             	sub    esp,0xc
c0011399:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001139d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00113a1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00113a5:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00113ac:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00113af:	39 eb                	cmp    ebx,ebp
c00113b1:	74 13                	je     c00113c6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00113b3:	43                   	inc    ebx
c00113b4:	50                   	push   eax
c00113b5:	50                   	push   eax
c00113b6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00113ba:	50                   	push   eax
c00113bb:	56                   	push   esi
c00113bc:	e8 e3 fb ff ff       	call   c0010fa4 <VgaText::putchar(char)>
c00113c1:	83 c4 10             	add    esp,0x10
c00113c4:	eb e9                	jmp    c00113af <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00113d0:	56                   	push   esi
c00113d1:	e8 ee f9 ff ff       	call   c0010dc4 <VgaText::doUpdate()>
c00113d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00113da:	89 38                	mov    DWORD PTR [eax],edi
c00113dc:	83 c4 1c             	add    esp,0x1c
c00113df:	31 c0                	xor    eax,eax
c00113e1:	5b                   	pop    ebx
c00113e2:	5e                   	pop    esi
c00113e3:	5f                   	pop    edi
c00113e4:	5d                   	pop    ebp
c00113e5:	c3                   	ret    

c00113e6 <newTerminal(char*)>:
c00113e6:	83 ec 28             	sub    esp,0x28
c00113e9:	68 c4 02 00 00       	push   0x2c4
c00113ee:	e8 37 e5 ff ff       	call   c000f92a <malloc>
c00113f3:	5a                   	pop    edx
c00113f4:	59                   	pop    ecx
c00113f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00113f9:	50                   	push   eax
c00113fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00113fe:	e8 f9 fc ff ff       	call   c00110fc <VgaText::VgaText(char const*)>
c0011403:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011407:	83 c4 2c             	add    esp,0x2c
c001140a:	c3                   	ret    
c001140b:	90                   	nop

c001140c <TSS::TSS()>:
c001140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011410:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011417:	90                   	nop
c0011418:	c3                   	ret    
c0011419:	90                   	nop

c001141a <TSS::setESP(unsigned long)>:
c001141a:	55                   	push   ebp
c001141b:	89 e5                	mov    ebp,esp
c001141d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011420:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011423:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011426:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011429:	90                   	nop
c001142a:	5d                   	pop    ebp
c001142b:	c3                   	ret    

c001142c <TSS::flush()>:
c001142c:	55                   	push   ebp
c001142d:	89 e5                	mov    ebp,esp
c001142f:	83 ec 10             	sub    esp,0x10
c0011432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011435:	8b 00                	mov    eax,DWORD PTR [eax]
c0011437:	83 c8 03             	or     eax,0x3
c001143a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001143e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011442:	66 89 d0             	mov    ax,dx
c0011445:	0f 00 d8             	ltr    ax
c0011448:	90                   	nop
c0011449:	c9                   	leave  
c001144a:	c3                   	ret    
c001144b:	90                   	nop

c001144c <TSS::setup(unsigned long, unsigned long)>:
c001144c:	55                   	push   ebp
c001144d:	89 e5                	mov    ebp,esp
c001144f:	83 ec 18             	sub    esp,0x18
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	6a 68                	push   0x68
c0011457:	e8 ce e4 ff ff       	call   c000f92a <malloc>
c001145c:	83 c4 10             	add    esp,0x10
c001145f:	89 c2                	mov    edx,eax
c0011461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011464:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	83 ec 04             	sub    esp,0x4
c0011470:	6a 68                	push   0x68
c0011472:	6a 00                	push   0x0
c0011474:	50                   	push   eax
c0011475:	e8 22 f3 fe ff       	call   c000079c <memset>
c001147a:	83 c4 10             	add    esp,0x10
c001147d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011480:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011483:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011498:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001149b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001149e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00114ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114b3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00114b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114bf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00114c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114cb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00114d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114d7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00114dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114e3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00114e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114ef:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00114f2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00114f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011504:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011507:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001150e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011511:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011514:	0f 20 da             	mov    edx,cr3
c0011517:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001151a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001151d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011523:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011526:	83 ec 08             	sub    esp,0x8
c0011529:	50                   	push   eax
c001152a:	8d 45 ec             	lea    eax,[ebp-0x14]
c001152d:	50                   	push   eax
c001152e:	e8 d3 db ff ff       	call   c000f106 <GDTEntry::setBase(unsigned int)>
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	83 ec 08             	sub    esp,0x8
c0011539:	6a 68                	push   0x68
c001153b:	8d 45 ec             	lea    eax,[ebp-0x14]
c001153e:	50                   	push   eax
c001153f:	e8 de db ff ff       	call   c000f122 <GDTEntry::setLimit(unsigned int)>
c0011544:	83 c4 10             	add    esp,0x10
c0011547:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c001154b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001154e:	83 e0 0f             	and    eax,0xf
c0011551:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011554:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011557:	83 c8 40             	or     eax,0x40
c001155a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001155d:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0011562:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011568:	05 78 01 00 00       	add    eax,0x178
c001156d:	83 ec 04             	sub    esp,0x4
c0011570:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011573:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011576:	50                   	push   eax
c0011577:	e8 da db ff ff       	call   c000f156 <GDT::addEntry(GDTEntry)>
c001157c:	83 c4 10             	add    esp,0x10
c001157f:	89 c2                	mov    edx,eax
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	89 10                	mov    DWORD PTR [eax],edx
c0011586:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001158b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011591:	05 78 01 00 00       	add    eax,0x178
c0011596:	83 ec 0c             	sub    esp,0xc
c0011599:	50                   	push   eax
c001159a:	e8 fb db ff ff       	call   c000f19a <GDT::flush()>
c001159f:	83 c4 10             	add    esp,0x10
c00115a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00115a7:	83 ec 08             	sub    esp,0x8
c00115aa:	50                   	push   eax
c00115ab:	68 48 ad 02 c0       	push   0xc002ad48
c00115b0:	e8 2c 19 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00115bd:	c9                   	leave  
c00115be:	c3                   	ret    
c00115bf:	90                   	nop

c00115c0 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00115c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115d0:	75 08                	jne    c00115da <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00115d2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115d8:	eb 38                	jmp    c0011612 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00115da:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115df:	75 17                	jne    c00115f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00115e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115e6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115ef:	8b 10                	mov    edx,DWORD PTR [eax]
c00115f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115f5:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00115f8:	89 c1                	mov    ecx,eax
c00115fa:	83 e1 fd             	and    ecx,0xfffffffd
c00115fd:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011603:	74 cd                	je     c00115d2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011605:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001160a:	83 e0 ef             	and    eax,0xffffffef
c001160d:	83 f8 08             	cmp    eax,0x8
c0011610:	76 c0                	jbe    c00115d2 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011612:	31 c0                	xor    eax,eax
c0011614:	c3                   	ret    
c0011615:	90                   	nop

c0011616 <ReservedFilename::isAtty()>:
c0011616:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001161a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001161d:	31 c0                	xor    eax,eax
c001161f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011625:	74 09                	je     c0011630 <ReservedFilename::isAtty()+0x1a>
c0011627:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001162d:	0f 94 c0             	sete   al
c0011630:	c3                   	ret    
c0011631:	90                   	nop

c0011632 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011632:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011636:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001163a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001163d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011641:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011646:	75 08                	jne    c0011650 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011648:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001164e:	eb 3d                	jmp    c001168d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011650:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011655:	75 17                	jne    c001166e <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011657:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001165c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001165f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011665:	8b 10                	mov    edx,DWORD PTR [eax]
c0011667:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001166b:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c001166e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011673:	75 04                	jne    c0011679 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011675:	89 0a                	mov    DWORD PTR [edx],ecx
c0011677:	eb 14                	jmp    c001168d <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011679:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c001167e:	74 c8                	je     c0011648 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011680:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011685:	83 e0 ef             	and    eax,0xffffffef
c0011688:	83 f8 08             	cmp    eax,0x8
c001168b:	76 bb                	jbe    c0011648 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001168d:	31 c0                	xor    eax,eax
c001168f:	c3                   	ret    

c0011690 <UnixFile::getFileDescriptor()>:
c0011690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011694:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011697:	c3                   	ret    

c0011698 <UnixFile::UnixFile(int)>:
c0011698:	53                   	push   ebx
c0011699:	83 ec 28             	sub    esp,0x28
c001169c:	ba 34 ae 02 c0       	mov    edx,0xc002ae34
c00116a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116a5:	89 10                	mov    DWORD PTR [eax],edx
c00116a7:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00116af:	0f 8f 8c 01 00 00    	jg     c0011841 <UnixFile::UnixFile(int)+0x1a9>
c00116b5:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c00116ba:	8d 50 01             	lea    edx,[eax+0x1]
c00116bd:	89 15 e0 dd 02 c0    	mov    DWORD PTR ds:0xc002dde0,edx
c00116c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00116c7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00116ca:	83 ec 08             	sub    esp,0x8
c00116cd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00116d1:	68 b8 ef 02 c0       	push   0xc002efb8
c00116d6:	e8 61 78 01 00       	call   c0028f3c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00116db:	83 c4 10             	add    esp,0x10
c00116de:	a0 b4 ef 02 c0       	mov    al,ds:0xc002efb4
c00116e3:	83 f0 01             	xor    eax,0x1
c00116e6:	84 c0                	test   al,al
c00116e8:	0f 84 54 01 00 00    	je     c0011842 <UnixFile::UnixFile(int)+0x1aa>
c00116ee:	c6 05 b4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efb4,0x1
c00116f5:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00116fd:	83 ec 0c             	sub    esp,0xc
c0011700:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011704:	e8 21 e2 ff ff       	call   c000f92a <malloc>
c0011709:	83 c4 10             	add    esp,0x10
c001170c:	89 c3                	mov    ebx,eax
c001170e:	83 ec 08             	sub    esp,0x8
c0011711:	68 03 ff ff 0f       	push   0xfffff03
c0011716:	53                   	push   ebx
c0011717:	e8 2c 01 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	89 1d ac ef 02 c0    	mov    DWORD PTR ds:0xc002efac,ebx
c0011725:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c001172d:	83 ec 0c             	sub    esp,0xc
c0011730:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011734:	e8 f1 e1 ff ff       	call   c000f92a <malloc>
c0011739:	83 c4 10             	add    esp,0x10
c001173c:	89 c3                	mov    ebx,eax
c001173e:	83 ec 08             	sub    esp,0x8
c0011741:	68 01 ff ff 0f       	push   0xfffff01
c0011746:	53                   	push   ebx
c0011747:	e8 fc 00 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	89 1d b0 ef 02 c0    	mov    DWORD PTR ds:0xc002efb0,ebx
c0011755:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c001175d:	83 ec 0c             	sub    esp,0xc
c0011760:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011764:	e8 c1 e1 ff ff       	call   c000f92a <malloc>
c0011769:	83 c4 10             	add    esp,0x10
c001176c:	89 c3                	mov    ebx,eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	68 00 ff ff 0f       	push   0xfffff00
c0011776:	53                   	push   ebx
c0011777:	e8 cc 00 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c001177c:	83 c4 10             	add    esp,0x10
c001177f:	89 1d a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,ebx
c0011785:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001178d:	83 ec 0c             	sub    esp,0xc
c0011790:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011794:	e8 91 e1 ff ff       	call   c000f92a <malloc>
c0011799:	83 c4 10             	add    esp,0x10
c001179c:	89 c3                	mov    ebx,eax
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	68 02 ff ff 0f       	push   0xfffff02
c00117a6:	53                   	push   ebx
c00117a7:	e8 9c 00 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c00117ac:	83 c4 10             	add    esp,0x10
c00117af:	89 1d a8 ef 02 c0    	mov    DWORD PTR ds:0xc002efa8,ebx
c00117b5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117bd:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00117c2:	7f 7e                	jg     c0011842 <UnixFile::UnixFile(int)+0x1aa>
c00117c4:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00117cc:	83 ec 0c             	sub    esp,0xc
c00117cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00117d3:	e8 52 e1 ff ff       	call   c000f92a <malloc>
c00117d8:	83 c4 10             	add    esp,0x10
c00117db:	89 c3                	mov    ebx,eax
c00117dd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117e1:	05 10 ff ff 0f       	add    eax,0xfffff10
c00117e6:	83 ec 08             	sub    esp,0x8
c00117e9:	50                   	push   eax
c00117ea:	53                   	push   ebx
c00117eb:	e8 58 00 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117f7:	89 1c 85 80 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1080],ebx
c00117fe:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011806:	83 ec 0c             	sub    esp,0xc
c0011809:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001180d:	e8 18 e1 ff ff       	call   c000f92a <malloc>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	89 c3                	mov    ebx,eax
c0011817:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001181b:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011820:	83 ec 08             	sub    esp,0x8
c0011823:	50                   	push   eax
c0011824:	53                   	push   ebx
c0011825:	e8 1e 00 00 00       	call   c0011848 <ReservedFilename::ReservedFilename(int)>
c001182a:	83 c4 10             	add    esp,0x10
c001182d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011831:	89 1c 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],ebx
c0011838:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001183c:	e9 7c ff ff ff       	jmp    c00117bd <UnixFile::UnixFile(int)+0x125>
c0011841:	90                   	nop
c0011842:	83 c4 28             	add    esp,0x28
c0011845:	5b                   	pop    ebx
c0011846:	c3                   	ret    
c0011847:	90                   	nop

c0011848 <ReservedFilename::ReservedFilename(int)>:
c0011848:	83 ec 0c             	sub    esp,0xc
c001184b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184f:	83 ec 08             	sub    esp,0x8
c0011852:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011856:	50                   	push   eax
c0011857:	e8 3c fe ff ff       	call   c0011698 <UnixFile::UnixFile(int)>
c001185c:	83 c4 10             	add    esp,0x10
c001185f:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0011864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011868:	89 10                	mov    DWORD PTR [eax],edx
c001186a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001186e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011872:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011875:	90                   	nop
c0011876:	83 c4 0c             	add    esp,0xc
c0011879:	c3                   	ret    

c001187a <UnixFile::~UnixFile()>:
c001187a:	83 ec 1c             	sub    esp,0x1c
c001187d:	ba 34 ae 02 c0       	mov    edx,0xc002ae34
c0011882:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011886:	89 10                	mov    DWORD PTR [eax],edx
c0011888:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001188c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001188f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011894:	7f 73                	jg     c0011909 <UnixFile::~UnixFile()+0x8f>
c0011896:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001189e:	83 ec 0c             	sub    esp,0xc
c00118a1:	68 b8 ef 02 c0       	push   0xc002efb8
c00118a6:	e8 65 77 01 00       	call   c0029010 <LinkedList<UnixFile>::getFirstElement()>
c00118ab:	83 c4 10             	add    esp,0x10
c00118ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	68 b8 ef 02 c0       	push   0xc002efb8
c00118ba:	e8 59 77 01 00       	call   c0029018 <LinkedList<UnixFile>::removeFirst()>
c00118bf:	83 c4 10             	add    esp,0x10
c00118c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118c6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00118ca:	74 40                	je     c001190c <UnixFile::~UnixFile()+0x92>
c00118cc:	83 ec 08             	sub    esp,0x8
c00118cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00118d3:	68 b8 ef 02 c0       	push   0xc002efb8
c00118d8:	e8 5f 76 01 00       	call   c0028f3c <LinkedList<UnixFile>::addElement(UnixFile*)>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118e4:	8d 50 01             	lea    edx,[eax+0x1]
c00118e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00118eb:	3d 88 13 00 00       	cmp    eax,0x1388
c00118f0:	0f 94 c0             	sete   al
c00118f3:	84 c0                	test   al,al
c00118f5:	74 a7                	je     c001189e <UnixFile::~UnixFile()+0x24>
c00118f7:	83 ec 0c             	sub    esp,0xc
c00118fa:	68 0c ae 02 c0       	push   0xc002ae0c
c00118ff:	e8 99 8f 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011904:	83 c4 10             	add    esp,0x10
c0011907:	eb 95                	jmp    c001189e <UnixFile::~UnixFile()+0x24>
c0011909:	90                   	nop
c001190a:	eb 01                	jmp    c001190d <UnixFile::~UnixFile()+0x93>
c001190c:	90                   	nop
c001190d:	90                   	nop
c001190e:	83 c4 1c             	add    esp,0x1c
c0011911:	c3                   	ret    

c0011912 <UnixFile::~UnixFile()>:
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	83 ec 0c             	sub    esp,0xc
c0011918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001191c:	e8 59 ff ff ff       	call   c001187a <UnixFile::~UnixFile()>
c0011921:	83 c4 10             	add    esp,0x10
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	6a 0c                	push   0xc
c0011929:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001192d:	e8 cf 14 00 00       	call   c0012e01 <operator delete(void*, unsigned long)>
c0011932:	83 c4 10             	add    esp,0x10
c0011935:	83 c4 0c             	add    esp,0xc
c0011938:	c3                   	ret    
c0011939:	90                   	nop

c001193a <ReservedFilename::~ReservedFilename()>:
c001193a:	83 ec 0c             	sub    esp,0xc
c001193d:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c0011942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011946:	89 10                	mov    DWORD PTR [eax],edx
c0011948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001194c:	83 ec 0c             	sub    esp,0xc
c001194f:	50                   	push   eax
c0011950:	e8 25 ff ff ff       	call   c001187a <UnixFile::~UnixFile()>
c0011955:	83 c4 10             	add    esp,0x10
c0011958:	90                   	nop
c0011959:	83 c4 0c             	add    esp,0xc
c001195c:	c3                   	ret    
c001195d:	90                   	nop

c001195e <ReservedFilename::~ReservedFilename()>:
c001195e:	83 ec 0c             	sub    esp,0xc
c0011961:	83 ec 0c             	sub    esp,0xc
c0011964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011968:	e8 cd ff ff ff       	call   c001193a <ReservedFilename::~ReservedFilename()>
c001196d:	83 c4 10             	add    esp,0x10
c0011970:	83 ec 08             	sub    esp,0x8
c0011973:	6a 0c                	push   0xc
c0011975:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011979:	e8 83 14 00 00       	call   c0012e01 <operator delete(void*, unsigned long)>
c001197e:	83 c4 10             	add    esp,0x10
c0011981:	83 c4 0c             	add    esp,0xc
c0011984:	c3                   	ret    

c0011985 <getFromFileDescriptor(int)>:
c0011985:	53                   	push   ebx
c0011986:	83 ec 08             	sub    esp,0x8
c0011989:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001198d:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011993:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011999:	7f 2c                	jg     c00119c7 <getFromFileDescriptor(int)+0x42>
c001199b:	83 ec 0c             	sub    esp,0xc
c001199e:	68 b8 ef 02 c0       	push   0xc002efb8
c00119a3:	e8 68 76 01 00       	call   c0029010 <LinkedList<UnixFile>::getFirstElement()>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	85 c0                	test   eax,eax
c00119ad:	75 04                	jne    c00119b3 <getFromFileDescriptor(int)+0x2e>
c00119af:	31 c0                	xor    eax,eax
c00119b1:	eb 6e                	jmp    c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119b3:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00119b6:	74 69                	je     c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119b8:	52                   	push   edx
c00119b9:	52                   	push   edx
c00119ba:	50                   	push   eax
c00119bb:	68 b8 ef 02 c0       	push   0xc002efb8
c00119c0:	e8 f5 76 01 00       	call   c00290ba <LinkedList<UnixFile>::getNext(UnixFile*)>
c00119c5:	eb e1                	jmp    c00119a8 <getFromFileDescriptor(int)+0x23>
c00119c7:	a1 ac ef 02 c0       	mov    eax,ds:0xc002efac
c00119cc:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00119d2:	74 4d                	je     c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119d4:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c00119d9:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00119df:	74 40                	je     c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119e1:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c00119e6:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00119ec:	74 33                	je     c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119ee:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c00119f3:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00119f9:	74 26                	je     c0011a21 <getFromFileDescriptor(int)+0x9c>
c00119fb:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011a01:	83 f8 08             	cmp    eax,0x8
c0011a04:	77 09                	ja     c0011a0f <getFromFileDescriptor(int)+0x8a>
c0011a06:	8b 04 85 80 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1080]
c0011a0d:	eb 12                	jmp    c0011a21 <getFromFileDescriptor(int)+0x9c>
c0011a0f:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011a15:	83 fb 08             	cmp    ebx,0x8
c0011a18:	77 95                	ja     c00119af <getFromFileDescriptor(int)+0x2a>
c0011a1a:	8b 04 9d 40 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10c0]
c0011a21:	83 c4 08             	add    esp,0x8
c0011a24:	5b                   	pop    ebx
c0011a25:	c3                   	ret    

c0011a26 <__static_initialization_and_destruction_0(int, int)>:
c0011a26:	83 ec 0c             	sub    esp,0xc
c0011a29:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011a2e:	75 34                	jne    c0011a64 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a30:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011a38:	75 2a                	jne    c0011a64 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011a3a:	83 ec 0c             	sub    esp,0xc
c0011a3d:	68 b8 ef 02 c0       	push   0xc002efb8
c0011a42:	e8 9d 74 01 00       	call   c0028ee4 <LinkedList<UnixFile>::LinkedList()>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	83 ec 04             	sub    esp,0x4
c0011a4d:	68 70 dd 02 c0       	push   0xc002dd70
c0011a52:	68 b8 ef 02 c0       	push   0xc002efb8
c0011a57:	68 e2 8e 02 c0       	push   0xc0028ee2
c0011a5c:	e8 1a 13 00 00       	call   c0012d7b <__cxa_atexit>
c0011a61:	83 c4 10             	add    esp,0x10
c0011a64:	90                   	nop
c0011a65:	83 c4 0c             	add    esp,0xc
c0011a68:	c3                   	ret    

c0011a69 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011a69:	83 ec 0c             	sub    esp,0xc
c0011a6c:	83 ec 08             	sub    esp,0x8
c0011a6f:	68 ff ff 00 00       	push   0xffff
c0011a74:	6a 01                	push   0x1
c0011a76:	e8 ab ff ff ff       	call   c0011a26 <__static_initialization_and_destruction_0(int, int)>
c0011a7b:	83 c4 10             	add    esp,0x10
c0011a7e:	83 c4 0c             	add    esp,0xc
c0011a81:	c3                   	ret    

c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a82:	53                   	push   ebx
c0011a83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a87:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a8b:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a91:	89 c8                	mov    eax,ecx
c0011a93:	d1 e8                	shr    eax,1
c0011a95:	03 05 e8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dde8
c0011a9b:	83 e1 01             	and    ecx,0x1
c0011a9e:	8a 10                	mov    dl,BYTE PTR [eax]
c0011aa0:	75 09                	jne    c0011aab <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011aa2:	83 e2 f0             	and    edx,0xfffffff0
c0011aa5:	09 da                	or     edx,ebx
c0011aa7:	88 10                	mov    BYTE PTR [eax],dl
c0011aa9:	5b                   	pop    ebx
c0011aaa:	c3                   	ret    
c0011aab:	c1 e3 04             	shl    ebx,0x4
c0011aae:	83 e2 0f             	and    edx,0xf
c0011ab1:	09 da                	or     edx,ebx
c0011ab3:	88 10                	mov    BYTE PTR [eax],dl
c0011ab5:	5b                   	pop    ebx
c0011ab6:	c3                   	ret    

c0011ab7 <Virt::getPageState(unsigned long)>:
c0011ab7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011abb:	8b 0d e8 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dde8
c0011ac1:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011ac7:	89 d0                	mov    eax,edx
c0011ac9:	d1 e8                	shr    eax,1
c0011acb:	83 e2 01             	and    edx,0x1
c0011ace:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011ad1:	75 04                	jne    c0011ad7 <Virt::getPageState(unsigned long)+0x20>
c0011ad3:	83 e0 0f             	and    eax,0xf
c0011ad6:	c3                   	ret    
c0011ad7:	c0 e8 04             	shr    al,0x4
c0011ada:	c3                   	ret    

c0011adb <Virt::allocateKernelVirtualPages(int)>:
c0011adb:	55                   	push   ebp
c0011adc:	31 ed                	xor    ebp,ebp
c0011ade:	57                   	push   edi
c0011adf:	56                   	push   esi
c0011ae0:	53                   	push   ebx
c0011ae1:	31 db                	xor    ebx,ebx
c0011ae3:	83 ec 1c             	sub    esp,0x1c
c0011ae6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011aea:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c0011af0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011af5:	57                   	push   edi
c0011af6:	e8 bc ff ff ff       	call   c0011ab7 <Virt::getPageState(unsigned long)>
c0011afb:	5a                   	pop    edx
c0011afc:	84 c0                	test   al,al
c0011afe:	75 3a                	jne    c0011b3a <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011b00:	85 db                	test   ebx,ebx
c0011b02:	75 02                	jne    c0011b06 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011b04:	89 fd                	mov    ebp,edi
c0011b06:	43                   	inc    ebx
c0011b07:	39 f3                	cmp    ebx,esi
c0011b09:	74 5a                	je     c0011b65 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011b0b:	47                   	inc    edi
c0011b0c:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b12:	76 31                	jbe    c0011b45 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011b14:	c7 05 e4 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dde4,0xc8000
c0011b1e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011b23:	75 28                	jne    c0011b4d <Virt::allocateKernelVirtualPages(int)+0x72>
c0011b25:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011b2a:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011b2f:	57                   	push   edi
c0011b30:	e8 82 ff ff ff       	call   c0011ab7 <Virt::getPageState(unsigned long)>
c0011b35:	5a                   	pop    edx
c0011b36:	84 c0                	test   al,al
c0011b38:	74 c6                	je     c0011b00 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011b3a:	31 db                	xor    ebx,ebx
c0011b3c:	47                   	inc    edi
c0011b3d:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011b43:	77 cf                	ja     c0011b14 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011b45:	89 3d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edi
c0011b4b:	eb a8                	jmp    c0011af5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b4d:	83 ec 0c             	sub    esp,0xc
c0011b50:	68 64 ae 02 c0       	push   0xc002ae64
c0011b55:	e8 43 8d 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011b5a:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c0011b60:	83 c4 10             	add    esp,0x10
c0011b63:	eb 90                	jmp    c0011af5 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011b65:	89 2d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,ebp
c0011b6b:	4b                   	dec    ebx
c0011b6c:	74 5f                	je     c0011bcd <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011b6e:	85 f6                	test   esi,esi
c0011b70:	74 3d                	je     c0011baf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b72:	89 e8                	mov    eax,ebp
c0011b74:	31 db                	xor    ebx,ebx
c0011b76:	8d 7e ff             	lea    edi,[esi-0x1]
c0011b79:	eb 14                	jmp    c0011b8f <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011b7b:	6a 01                	push   0x1
c0011b7d:	43                   	inc    ebx
c0011b7e:	50                   	push   eax
c0011b7f:	e8 fe fe ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b84:	58                   	pop    eax
c0011b85:	39 f3                	cmp    ebx,esi
c0011b87:	5a                   	pop    edx
c0011b88:	74 25                	je     c0011baf <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b8a:	a1 e4 dd 02 c0       	mov    eax,ds:0xc002dde4
c0011b8f:	8d 50 01             	lea    edx,[eax+0x1]
c0011b92:	85 db                	test   ebx,ebx
c0011b94:	89 15 e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edx
c0011b9a:	74 20                	je     c0011bbc <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b9c:	39 df                	cmp    edi,ebx
c0011b9e:	75 db                	jne    c0011b7b <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011ba0:	6a 03                	push   0x3
c0011ba2:	43                   	inc    ebx
c0011ba3:	50                   	push   eax
c0011ba4:	e8 d9 fe ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ba9:	59                   	pop    ecx
c0011baa:	39 f3                	cmp    ebx,esi
c0011bac:	58                   	pop    eax
c0011bad:	75 db                	jne    c0011b8a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011baf:	83 c4 1c             	add    esp,0x1c
c0011bb2:	89 e8                	mov    eax,ebp
c0011bb4:	5b                   	pop    ebx
c0011bb5:	c1 e0 0c             	shl    eax,0xc
c0011bb8:	5e                   	pop    esi
c0011bb9:	5f                   	pop    edi
c0011bba:	5d                   	pop    ebp
c0011bbb:	c3                   	ret    
c0011bbc:	6a 02                	push   0x2
c0011bbe:	bb 01 00 00 00       	mov    ebx,0x1
c0011bc3:	50                   	push   eax
c0011bc4:	e8 b9 fe ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bc9:	58                   	pop    eax
c0011bca:	5a                   	pop    edx
c0011bcb:	eb bd                	jmp    c0011b8a <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011bcd:	6a 04                	push   0x4
c0011bcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0011bd2:	55                   	push   ebp
c0011bd3:	a3 e4 dd 02 c0       	mov    ds:0xc002dde4,eax
c0011bd8:	e8 a5 fe ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011bdd:	59                   	pop    ecx
c0011bde:	89 e8                	mov    eax,ebp
c0011be0:	5b                   	pop    ebx
c0011be1:	c1 e0 0c             	shl    eax,0xc
c0011be4:	83 c4 1c             	add    esp,0x1c
c0011be7:	5b                   	pop    ebx
c0011be8:	5e                   	pop    esi
c0011be9:	5f                   	pop    edi
c0011bea:	5d                   	pop    ebp
c0011beb:	c3                   	ret    

c0011bec <Virt::freeSwapfilePage(unsigned long)>:
c0011bec:	53                   	push   ebx
c0011bed:	8b 15 cc ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efcc
c0011bf3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bf7:	b8 01 00 00 00       	mov    eax,0x1
c0011bfc:	89 cb                	mov    ebx,ecx
c0011bfe:	d3 e0                	shl    eax,cl
c0011c00:	c1 eb 05             	shr    ebx,0x5
c0011c03:	f7 d0                	not    eax
c0011c05:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011c08:	5b                   	pop    ebx
c0011c09:	c3                   	ret    

c0011c0a <Virt::swapIDToSector(unsigned long)>:
c0011c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c0e:	0f af 05 ec dd 02 c0 	imul   eax,DWORD PTR ds:0xc002ddec
c0011c15:	03 05 f4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddf4
c0011c1b:	c3                   	ret    

c0011c1c <Virt::allocateSwapfilePage()>:
c0011c1c:	55                   	push   ebp
c0011c1d:	31 d2                	xor    edx,edx
c0011c1f:	57                   	push   edi
c0011c20:	56                   	push   esi
c0011c21:	53                   	push   ebx
c0011c22:	83 ec 0c             	sub    esp,0xc
c0011c25:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c0011c2b:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011c30:	f7 f1                	div    ecx
c0011c32:	39 0d f0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddf0,ecx
c0011c38:	72 2d                	jb     c0011c67 <Virt::allocateSwapfilePage()+0x4b>
c0011c3a:	8b 35 cc ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efcc
c0011c40:	8b 16                	mov    edx,DWORD PTR [esi]
c0011c42:	f6 c2 01             	test   dl,0x1
c0011c45:	74 3c                	je     c0011c83 <Virt::allocateSwapfilePage()+0x67>
c0011c47:	31 c9                	xor    ecx,ecx
c0011c49:	bf 01 00 00 00       	mov    edi,0x1
c0011c4e:	eb 12                	jmp    c0011c62 <Virt::allocateSwapfilePage()+0x46>
c0011c50:	89 fd                	mov    ebp,edi
c0011c52:	89 ca                	mov    edx,ecx
c0011c54:	d3 e5                	shl    ebp,cl
c0011c56:	c1 ea 05             	shr    edx,0x5
c0011c59:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011c5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011c5e:	85 ea                	test   edx,ebp
c0011c60:	74 2a                	je     c0011c8c <Virt::allocateSwapfilePage()+0x70>
c0011c62:	41                   	inc    ecx
c0011c63:	39 c8                	cmp    eax,ecx
c0011c65:	77 e9                	ja     c0011c50 <Virt::allocateSwapfilePage()+0x34>
c0011c67:	83 ec 0c             	sub    esp,0xc
c0011c6a:	68 eb af 02 c0       	push   0xc002afeb
c0011c6f:	e8 29 8c 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011c74:	83 c4 10             	add    esp,0x10
c0011c77:	31 c9                	xor    ecx,ecx
c0011c79:	83 c4 0c             	add    esp,0xc
c0011c7c:	89 c8                	mov    eax,ecx
c0011c7e:	5b                   	pop    ebx
c0011c7f:	5e                   	pop    esi
c0011c80:	5f                   	pop    edi
c0011c81:	5d                   	pop    ebp
c0011c82:	c3                   	ret    
c0011c83:	89 f3                	mov    ebx,esi
c0011c85:	bd 01 00 00 00       	mov    ebp,0x1
c0011c8a:	31 c9                	xor    ecx,ecx
c0011c8c:	09 ea                	or     edx,ebp
c0011c8e:	89 c8                	mov    eax,ecx
c0011c90:	89 13                	mov    DWORD PTR [ebx],edx
c0011c92:	83 c4 0c             	add    esp,0xc
c0011c95:	5b                   	pop    ebx
c0011c96:	5e                   	pop    esi
c0011c97:	5f                   	pop    edi
c0011c98:	5d                   	pop    ebp
c0011c99:	c3                   	ret    

c0011c9a <Virt::virtualMemorySetup()>:
c0011c9a:	53                   	push   ebx
c0011c9b:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011ca0:	83 ec 08             	sub    esp,0x8
c0011ca3:	6a 0f                	push   0xf
c0011ca5:	53                   	push   ebx
c0011ca6:	43                   	inc    ebx
c0011ca7:	e8 d6 fd ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011cac:	59                   	pop    ecx
c0011cad:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cb3:	58                   	pop    eax
c0011cb4:	75 ed                	jne    c0011ca3 <Virt::virtualMemorySetup()+0x9>
c0011cb6:	83 ec 08             	sub    esp,0x8
c0011cb9:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cbe:	68 00 00 00 c8       	push   0xc8000000
c0011cc3:	68 02 b0 02 c0       	push   0xc002b002
c0011cc8:	e8 14 12 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011ccd:	58                   	pop    eax
c0011cce:	5a                   	pop    edx
c0011ccf:	68 00 f0 ff ef       	push   0xeffff000
c0011cd4:	68 16 b0 02 c0       	push   0xc002b016
c0011cd9:	e8 03 12 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011cde:	83 c4 10             	add    esp,0x10
c0011ce1:	83 ec 08             	sub    esp,0x8
c0011ce4:	6a 00                	push   0x0
c0011ce6:	53                   	push   ebx
c0011ce7:	43                   	inc    ebx
c0011ce8:	e8 95 fd ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cf6:	75 e9                	jne    c0011ce1 <Virt::virtualMemorySetup()+0x47>
c0011cf8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011cfd:	83 ec 08             	sub    esp,0x8
c0011d00:	6a 0f                	push   0xf
c0011d02:	53                   	push   ebx
c0011d03:	43                   	inc    ebx
c0011d04:	e8 79 fd ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d09:	83 c4 10             	add    esp,0x10
c0011d0c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d12:	75 e9                	jne    c0011cfd <Virt::virtualMemorySetup()+0x63>
c0011d14:	83 c4 08             	add    esp,0x8
c0011d17:	5b                   	pop    ebx
c0011d18:	c3                   	ret    

c0011d19 <Virt::swappingSetup()>:
c0011d19:	c3                   	ret    

c0011d1a <Virt::setupPageSwapping(int)>:
c0011d1a:	57                   	push   edi
c0011d1b:	56                   	push   esi
c0011d1c:	53                   	push   ebx
c0011d1d:	83 ec 1c             	sub    esp,0x1c
c0011d20:	68 2a b0 02 c0       	push   0xc002b02a
c0011d25:	e8 b7 11 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011d2a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011d31:	e8 f4 db ff ff       	call   c000f92a <malloc>
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	89 c6                	mov    esi,eax
c0011d3b:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c0011d41:	68 3e b0 02 c0       	push   0xc002b03e
c0011d46:	50                   	push   eax
c0011d47:	e8 f4 16 00 00       	call   c0013440 <File::File(char const*, Process*)>
c0011d4c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d4f:	e8 c8 18 00 00       	call   c001361c <File::unlink()>
c0011d54:	59                   	pop    ecx
c0011d55:	5b                   	pop    ebx
c0011d56:	6a 12                	push   0x12
c0011d58:	56                   	push   esi
c0011d59:	e8 46 17 00 00       	call   c00134a4 <File::open(FileOpenMode)>
c0011d5e:	83 c4 10             	add    esp,0x10
c0011d61:	85 c0                	test   eax,eax
c0011d63:	0f 85 5b 01 00 00    	jne    c0011ec4 <Virt::setupPageSwapping(int)+0x1aa>
c0011d69:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d75:	c1 e3 08             	shl    ebx,0x8
c0011d78:	83 ec 0c             	sub    esp,0xc
c0011d7b:	68 00 00 01 00       	push   0x10000
c0011d80:	e8 a5 db ff ff       	call   c000f92a <malloc>
c0011d85:	83 c4 0c             	add    esp,0xc
c0011d88:	89 c7                	mov    edi,eax
c0011d8a:	68 00 00 01 00       	push   0x10000
c0011d8f:	68 ee 00 00 00       	push   0xee
c0011d94:	50                   	push   eax
c0011d95:	e8 02 ea fe ff       	call   c000079c <memset>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	85 db                	test   ebx,ebx
c0011d9f:	79 03                	jns    c0011da4 <Virt::setupPageSwapping(int)+0x8a>
c0011da1:	83 c3 0f             	add    ebx,0xf
c0011da4:	c1 fb 04             	sar    ebx,0x4
c0011da7:	4b                   	dec    ebx
c0011da8:	83 fb ff             	cmp    ebx,0xffffffff
c0011dab:	74 4f                	je     c0011dfc <Virt::setupPageSwapping(int)+0xe2>
c0011dad:	83 ec 0c             	sub    esp,0xc
c0011db0:	8b 06                	mov    eax,DWORD PTR [esi]
c0011db2:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011db6:	52                   	push   edx
c0011db7:	57                   	push   edi
c0011db8:	6a 00                	push   0x0
c0011dba:	68 00 00 01 00       	push   0x10000
c0011dbf:	56                   	push   esi
c0011dc0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011dc3:	83 c4 20             	add    esp,0x20
c0011dc6:	85 c0                	test   eax,eax
c0011dc8:	0f 85 e0 00 00 00    	jne    c0011eae <Virt::setupPageSwapping(int)+0x194>
c0011dce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dd2:	3d 00 00 01 00       	cmp    eax,0x10000
c0011dd7:	74 ce                	je     c0011da7 <Virt::setupPageSwapping(int)+0x8d>
c0011dd9:	83 ec 08             	sub    esp,0x8
c0011ddc:	4b                   	dec    ebx
c0011ddd:	50                   	push   eax
c0011dde:	68 91 b0 02 c0       	push   0xc002b091
c0011de3:	e8 f9 10 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011de8:	c7 04 24 9a b0 02 c0 	mov    DWORD PTR [esp],0xc002b09a
c0011def:	e8 a9 8a 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011df4:	83 c4 10             	add    esp,0x10
c0011df7:	83 fb ff             	cmp    ebx,0xffffffff
c0011dfa:	75 b1                	jne    c0011dad <Virt::setupPageSwapping(int)+0x93>
c0011dfc:	83 ec 0c             	sub    esp,0xc
c0011dff:	56                   	push   esi
c0011e00:	e8 fd 16 00 00       	call   c0013502 <File::close()>
c0011e05:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011e08:	e8 3d db ff ff       	call   c000f94a <rfree>
c0011e0d:	83 c4 10             	add    esp,0x10
c0011e10:	85 f6                	test   esi,esi
c0011e12:	74 0c                	je     c0011e20 <Virt::setupPageSwapping(int)+0x106>
c0011e14:	83 ec 0c             	sub    esp,0xc
c0011e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e19:	56                   	push   esi
c0011e1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e1d:	83 c4 10             	add    esp,0x10
c0011e20:	83 ec 08             	sub    esp,0x8
c0011e23:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0011e28:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011e2e:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e30:	68 3e b0 02 c0       	push   0xc002b03e
c0011e35:	50                   	push   eax
c0011e36:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011e39:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011e3d:	c6 05 f8 dd 02 c0 43 	mov    BYTE PTR ds:0xc002ddf8,0x43
c0011e44:	c1 e2 0b             	shl    edx,0xb
c0011e47:	a3 f4 dd 02 c0       	mov    ds:0xc002ddf4,eax
c0011e4c:	89 15 f0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddf0,edx
c0011e52:	c7 05 ec dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ddec,0x8
c0011e5c:	c1 ea 08             	shr    edx,0x8
c0011e5f:	89 14 24             	mov    DWORD PTR [esp],edx
c0011e62:	e8 c3 da ff ff       	call   c000f92a <malloc>
c0011e67:	83 c4 0c             	add    esp,0xc
c0011e6a:	89 c1                	mov    ecx,eax
c0011e6c:	a3 cc ef 02 c0       	mov    ds:0xc002efcc,eax
c0011e71:	31 d2                	xor    edx,edx
c0011e73:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011e78:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011e7e:	c1 e8 05             	shr    eax,0x5
c0011e81:	50                   	push   eax
c0011e82:	6a 00                	push   0x0
c0011e84:	51                   	push   ecx
c0011e85:	e8 12 e9 fe ff       	call   c000079c <memset>
c0011e8a:	58                   	pop    eax
c0011e8b:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011e90:	5a                   	pop    edx
c0011e91:	31 d2                	xor    edx,edx
c0011e93:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011e99:	c1 e8 05             	shr    eax,0x5
c0011e9c:	50                   	push   eax
c0011e9d:	68 a0 b0 02 c0       	push   0xc002b0a0
c0011ea2:	e8 3a 10 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011ea7:	83 c4 20             	add    esp,0x20
c0011eaa:	5b                   	pop    ebx
c0011eab:	5e                   	pop    esi
c0011eac:	5f                   	pop    edi
c0011ead:	c3                   	ret    
c0011eae:	83 ec 08             	sub    esp,0x8
c0011eb1:	50                   	push   eax
c0011eb2:	68 79 b0 02 c0       	push   0xc002b079
c0011eb7:	e8 25 10 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011ebc:	83 c4 10             	add    esp,0x10
c0011ebf:	e9 0a ff ff ff       	jmp    c0011dce <Virt::setupPageSwapping(int)+0xb4>
c0011ec4:	83 ec 08             	sub    esp,0x8
c0011ec7:	50                   	push   eax
c0011ec8:	68 55 b0 02 c0       	push   0xc002b055
c0011ecd:	e8 0f 10 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0011ed2:	c7 04 24 5e b0 02 c0 	mov    DWORD PTR [esp],0xc002b05e
c0011ed9:	e8 bf 89 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011ede:	83 c4 10             	add    esp,0x10
c0011ee1:	e9 83 fe ff ff       	jmp    c0011d69 <Virt::setupPageSwapping(int)+0x4f>

c0011ee6 <VAS::VAS()>:
c0011ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011eea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ef5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011efc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f00:	a3 d0 ef 02 c0       	mov    ds:0xc002efd0,eax
c0011f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f09:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f11:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f18:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011f1f:	90                   	nop
c0011f20:	c3                   	ret    
c0011f21:	90                   	nop

c0011f22 <VAS::VAS(VAS*)>:
c0011f22:	83 ec 0c             	sub    esp,0xc
c0011f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f29:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f34:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	68 84 ae 02 c0       	push   0xc002ae84
c0011f43:	e8 55 89 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0011f48:	83 c4 10             	add    esp,0x10
c0011f4b:	90                   	nop
c0011f4c:	83 c4 0c             	add    esp,0xc
c0011f4f:	c3                   	ret    

c0011f50 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011f50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f54:	89 c2                	mov    edx,eax
c0011f56:	c1 e8 0a             	shr    eax,0xa
c0011f59:	c1 ea 16             	shr    edx,0x16
c0011f5c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011f61:	19 c9                	sbb    ecx,ecx
c0011f63:	c1 e2 0c             	shl    edx,0xc
c0011f66:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011f6c:	25 fc 0f 00 00       	and    eax,0xffc
c0011f71:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011f78:	01 d0                	add    eax,edx
c0011f7a:	c3                   	ret    
c0011f7b:	90                   	nop

c0011f7c <VAS::getPageTableEntry(unsigned long)>:
c0011f7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f80:	89 ca                	mov    edx,ecx
c0011f82:	c1 e9 0a             	shr    ecx,0xa
c0011f85:	c1 ea 16             	shr    edx,0x16
c0011f88:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f8e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f94:	c1 e0 0c             	shl    eax,0xc
c0011f97:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f9a:	c3                   	ret    

c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f9b:	57                   	push   edi
c0011f9c:	56                   	push   esi
c0011f9d:	be 01 00 00 00       	mov    esi,0x1
c0011fa2:	53                   	push   ebx
c0011fa3:	83 ec 10             	sub    esp,0x10
c0011fa6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011faa:	c1 eb 0c             	shr    ebx,0xc
c0011fad:	eb 3f                	jmp    c0011fee <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011faf:	83 ec 08             	sub    esp,0x8
c0011fb2:	57                   	push   edi
c0011fb3:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0011fb9:	e8 be ff ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fc3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fc7:	f6 c4 04             	test   ah,0x4
c0011fca:	75 5f                	jne    c001202b <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011fcc:	80 fa 04             	cmp    dl,0x4
c0011fcf:	74 78                	je     c0012049 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011fd1:	80 fa 02             	cmp    dl,0x2
c0011fd4:	0f 84 88 00 00 00    	je     c0012062 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011fda:	80 fa 03             	cmp    dl,0x3
c0011fdd:	0f 84 ad 00 00 00    	je     c0012090 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011fe3:	fe ca                	dec    dl
c0011fe5:	0f 84 92 00 00 00    	je     c001207d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011feb:	43                   	inc    ebx
c0011fec:	31 f6                	xor    esi,esi
c0011fee:	53                   	push   ebx
c0011fef:	89 df                	mov    edi,ebx
c0011ff1:	e8 c1 fa ff ff       	call   c0011ab7 <Virt::getPageState(unsigned long)>
c0011ff6:	c1 e7 0c             	shl    edi,0xc
c0011ff9:	59                   	pop    ecx
c0011ffa:	84 c0                	test   al,al
c0011ffc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012000:	75 ad                	jne    c0011faf <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0012002:	83 ec 0c             	sub    esp,0xc
c0012005:	68 bb b0 02 c0       	push   0xc002b0bb
c001200a:	e8 8e 88 00 00       	call   c001a89d <Krnl::panic(char const*)>
c001200f:	58                   	pop    eax
c0012010:	5a                   	pop    edx
c0012011:	57                   	push   edi
c0012012:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0012018:	e8 5f ff ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c001201d:	83 c4 10             	add    esp,0x10
c0012020:	8b 00                	mov    eax,DWORD PTR [eax]
c0012022:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012026:	f6 c4 04             	test   ah,0x4
c0012029:	74 c0                	je     c0011feb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001202b:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c001202f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012034:	83 ec 0c             	sub    esp,0xc
c0012037:	50                   	push   eax
c0012038:	e8 cf de ff ff       	call   c000ff0c <Phys::freePage(unsigned long)>
c001203d:	83 c4 10             	add    esp,0x10
c0012040:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012044:	80 fa 04             	cmp    dl,0x4
c0012047:	75 88                	jne    c0011fd1 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0012049:	89 f0                	mov    eax,esi
c001204b:	84 c0                	test   al,al
c001204d:	75 47                	jne    c0012096 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001204f:	c7 44 24 20 a8 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aea8
c0012057:	83 c4 10             	add    esp,0x10
c001205a:	5b                   	pop    ebx
c001205b:	5e                   	pop    esi
c001205c:	5f                   	pop    edi
c001205d:	e9 3b 88 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c0012062:	89 f0                	mov    eax,esi
c0012064:	84 c0                	test   al,al
c0012066:	75 15                	jne    c001207d <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012068:	83 ec 0c             	sub    esp,0xc
c001206b:	68 d7 b0 02 c0       	push   0xc002b0d7
c0012070:	e8 28 88 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0012075:	83 c4 10             	add    esp,0x10
c0012078:	e9 6e ff ff ff       	jmp    c0011feb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001207d:	83 ec 08             	sub    esp,0x8
c0012080:	6a 00                	push   0x0
c0012082:	53                   	push   ebx
c0012083:	e8 fa f9 ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012088:	83 c4 10             	add    esp,0x10
c001208b:	e9 5b ff ff ff       	jmp    c0011feb <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012090:	89 f0                	mov    eax,esi
c0012092:	84 c0                	test   al,al
c0012094:	75 15                	jne    c00120ab <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012096:	83 ec 08             	sub    esp,0x8
c0012099:	6a 00                	push   0x0
c001209b:	53                   	push   ebx
c001209c:	e8 e1 f9 ff ff       	call   c0011a82 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120a1:	83 c4 10             	add    esp,0x10
c00120a4:	83 c4 10             	add    esp,0x10
c00120a7:	5b                   	pop    ebx
c00120a8:	5e                   	pop    esi
c00120a9:	5f                   	pop    edi
c00120aa:	c3                   	ret    
c00120ab:	c7 44 24 20 f3 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0f3
c00120b3:	83 c4 10             	add    esp,0x10
c00120b6:	5b                   	pop    ebx
c00120b7:	5e                   	pop    esi
c00120b8:	5f                   	pop    edi
c00120b9:	e9 df 87 00 00       	jmp    c001a89d <Krnl::panic(char const*)>

c00120be <VAS::freeAllocatedPages(unsigned long)>:
c00120be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120c6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00120ca:	74 09                	je     c00120d5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00120cc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00120d0:	e9 c6 fe ff ff       	jmp    c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c00120d5:	c7 44 24 04 cc ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aecc
c00120dd:	e9 ff 0d 00 00       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)>

c00120e2 <VAS::virtualToPhysical(unsigned long)>:
c00120e2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120e6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00120ea:	e8 8d fe ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c00120ef:	5a                   	pop    edx
c00120f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f2:	59                   	pop    ecx
c00120f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120f8:	c3                   	ret    
c00120f9:	90                   	nop

c00120fa <VAS::reflagRange(unsigned long, int, int, int)>:
c00120fa:	55                   	push   ebp
c00120fb:	57                   	push   edi
c00120fc:	56                   	push   esi
c00120fd:	53                   	push   ebx
c00120fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012102:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012106:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001210a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001210e:	85 db                	test   ebx,ebx
c0012110:	7e 22                	jle    c0012134 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012112:	c1 e3 0c             	shl    ebx,0xc
c0012115:	01 f3                	add    ebx,esi
c0012117:	56                   	push   esi
c0012118:	81 c6 00 10 00 00    	add    esi,0x1000
c001211e:	55                   	push   ebp
c001211f:	e8 58 fe ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0012124:	5a                   	pop    edx
c0012125:	59                   	pop    ecx
c0012126:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012128:	21 f9                	and    ecx,edi
c001212a:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c001212e:	39 f3                	cmp    ebx,esi
c0012130:	89 08                	mov    DWORD PTR [eax],ecx
c0012132:	75 e3                	jne    c0012117 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0012134:	5b                   	pop    ebx
c0012135:	5e                   	pop    esi
c0012136:	5f                   	pop    edi
c0012137:	5d                   	pop    ebp
c0012138:	c3                   	ret    
c0012139:	90                   	nop

c001213a <VAS::setToWriteCombining(unsigned long, int)>:
c001213a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001213f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012145:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c001214c:	75 01                	jne    c001214f <VAS::setToWriteCombining(unsigned long, int)+0x15>
c001214e:	c3                   	ret    
c001214f:	68 80 00 00 00       	push   0x80
c0012154:	6a ff                	push   0xffffffff
c0012156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001215a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001215e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012162:	e8 93 ff ff ff       	call   c00120fa <VAS::reflagRange(unsigned long, int, int, int)>
c0012167:	83 c4 14             	add    esp,0x14
c001216a:	c3                   	ret    
c001216b:	90                   	nop

c001216c <VAS::mapOtherVASIn(bool, VAS*)>:
c001216c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0012171:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012175:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001217c:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c001217f:	19 c0                	sbb    eax,eax
c0012181:	83 ca 03             	or     edx,0x3
c0012184:	83 e0 fc             	and    eax,0xfffffffc
c0012187:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001218e:	0f 20 d8             	mov    eax,cr3
c0012191:	0f 22 d8             	mov    cr3,eax
c0012194:	c3                   	ret    
c0012195:	90                   	nop

c0012196 <VAS::~VAS()>:
c0012196:	83 ec 2c             	sub    esp,0x2c
c0012199:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121a1:	fa                   	cli    
c00121a2:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00121a7:	40                   	inc    eax
c00121a8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c00121ad:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121b7:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00121c1:	6a 01                	push   0x1
c00121c3:	50                   	push   eax
c00121c4:	e8 a3 ff ff ff       	call   c001216c <VAS::mapOtherVASIn(bool, VAS*)>
c00121c9:	83 c4 0c             	add    esp,0xc
c00121cc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121d4:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c00121dc:	0f 8f d4 00 00 00    	jg     c00122b6 <VAS::~VAS()+0x120>
c00121e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ed:	c1 e2 02             	shl    edx,0x2
c00121f0:	01 d0                	add    eax,edx
c00121f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00121f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00121f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fc:	83 e0 01             	and    eax,0x1
c00121ff:	0f 84 a8 00 00 00    	je     c00122ad <VAS::~VAS()+0x117>
c0012205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001220d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012215:	7f 72                	jg     c0012289 <VAS::~VAS()+0xf3>
c0012217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001221b:	c1 e0 0a             	shl    eax,0xa
c001221e:	89 c2                	mov    edx,eax
c0012220:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012224:	01 d0                	add    eax,edx
c0012226:	c1 e0 0c             	shl    eax,0xc
c0012229:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001222d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012232:	8b 00                	mov    eax,DWORD PTR [eax]
c0012234:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012237:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001223d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012241:	6a 01                	push   0x1
c0012243:	50                   	push   eax
c0012244:	e8 07 fd ff ff       	call   c0011f50 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012249:	83 c4 0c             	add    esp,0xc
c001224c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012250:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012254:	8b 00                	mov    eax,DWORD PTR [eax]
c0012256:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001225a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001225e:	25 01 04 00 00       	and    eax,0x401
c0012263:	3d 01 04 00 00       	cmp    eax,0x401
c0012268:	75 19                	jne    c0012283 <VAS::~VAS()+0xed>
c001226a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001226e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012273:	83 ec 0c             	sub    esp,0xc
c0012276:	50                   	push   eax
c0012277:	e8 90 dc ff ff       	call   c000ff0c <Phys::freePage(unsigned long)>
c001227c:	83 c4 10             	add    esp,0x10
c001227f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012283:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012287:	eb 84                	jmp    c001220d <VAS::~VAS()+0x77>
c0012289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001228d:	25 00 04 00 00       	and    eax,0x400
c0012292:	74 19                	je     c00122ad <VAS::~VAS()+0x117>
c0012294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012298:	25 00 f0 ff ff       	and    eax,0xfffff000
c001229d:	83 ec 0c             	sub    esp,0xc
c00122a0:	50                   	push   eax
c00122a1:	e8 66 dc ff ff       	call   c000ff0c <Phys::freePage(unsigned long)>
c00122a6:	83 c4 10             	add    esp,0x10
c00122a9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ad:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00122b1:	e9 1e ff ff ff       	jmp    c00121d4 <VAS::~VAS()+0x3e>
c00122b6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00122bd:	83 ec 0c             	sub    esp,0xc
c00122c0:	50                   	push   eax
c00122c1:	e8 d5 fc ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c00122c6:	83 c4 10             	add    esp,0x10
c00122c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00122d0:	83 ec 0c             	sub    esp,0xc
c00122d3:	50                   	push   eax
c00122d4:	e8 33 dc ff ff       	call   c000ff0c <Phys::freePage(unsigned long)>
c00122d9:	83 c4 10             	add    esp,0x10
c00122dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00122e4:	c1 e0 02             	shl    eax,0x2
c00122e7:	83 ec 08             	sub    esp,0x8
c00122ea:	50                   	push   eax
c00122eb:	68 f0 ae 02 c0       	push   0xc002aef0
c00122f0:	e8 ec 0b 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00122f5:	83 c4 10             	add    esp,0x10
c00122f8:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00122fd:	48                   	dec    eax
c00122fe:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012303:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012308:	85 c0                	test   eax,eax
c001230a:	75 01                	jne    c001230d <VAS::~VAS()+0x177>
c001230c:	fb                   	sti    
c001230d:	90                   	nop
c001230e:	83 c4 2c             	add    esp,0x2c
c0012311:	c3                   	ret    

c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012312:	55                   	push   ebp
c0012313:	57                   	push   edi
c0012314:	56                   	push   esi
c0012315:	53                   	push   ebx
c0012316:	83 ec 1c             	sub    esp,0x1c
c0012319:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001231d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012321:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012327:	77 08                	ja     c0012331 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012329:	0f 20 d8             	mov    eax,cr3
c001232c:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c001232f:	75 47                	jne    c0012378 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012331:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012335:	09 d8                	or     eax,ebx
c0012337:	a9 ff 0f 00 00       	test   eax,0xfff
c001233c:	75 57                	jne    c0012395 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c001233e:	89 de                	mov    esi,ebx
c0012340:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012343:	c1 ee 16             	shr    esi,0x16
c0012346:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001234d:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012351:	74 54                	je     c00123a7 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0012353:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012357:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001235d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012361:	c1 e6 0c             	shl    esi,0xc
c0012364:	c1 eb 0a             	shr    ebx,0xa
c0012367:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001236d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012370:	83 c4 1c             	add    esp,0x1c
c0012373:	5b                   	pop    ebx
c0012374:	5e                   	pop    esi
c0012375:	5f                   	pop    edi
c0012376:	5d                   	pop    ebp
c0012377:	c3                   	ret    
c0012378:	83 ec 0c             	sub    esp,0xc
c001237b:	68 10 af 02 c0       	push   0xc002af10
c0012380:	e8 5c 0b 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238c:	09 d8                	or     eax,ebx
c001238e:	a9 ff 0f 00 00       	test   eax,0xfff
c0012393:	74 a9                	je     c001233e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	68 78 af 02 c0       	push   0xc002af78
c001239d:	e8 fb 84 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00123a2:	83 c4 10             	add    esp,0x10
c00123a5:	eb 97                	jmp    c001233e <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123ab:	e8 e6 db ff ff       	call   c000ff96 <Phys::allocatePage()>
c00123b0:	83 ec 0c             	sub    esp,0xc
c00123b3:	89 c5                	mov    ebp,eax
c00123b5:	8b 0d d0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efd0
c00123bb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00123bf:	6a 01                	push   0x1
c00123c1:	e8 15 f7 ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c00123c6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00123cd:	6a 01                	push   0x1
c00123cf:	50                   	push   eax
c00123d0:	55                   	push   ebp
c00123d1:	81 cd 07 04 00 00    	or     ebp,0x407
c00123d7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00123db:	51                   	push   ecx
c00123dc:	e8 27 02 00 00       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123e1:	83 c4 1c             	add    esp,0x1c
c00123e4:	68 00 10 00 00       	push   0x1000
c00123e9:	6a 00                	push   0x0
c00123eb:	50                   	push   eax
c00123ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00123f0:	e8 a7 e3 fe ff       	call   c000079c <memset>
c00123f5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00123f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00123fc:	e8 9a fb ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c0012401:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012405:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012408:	83 c4 10             	add    esp,0x10
c001240b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001240e:	e9 40 ff ff ff       	jmp    c0012353 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012413:	90                   	nop

c0012414 <VAS::allocatePages(int, int)>:
c0012414:	55                   	push   ebp
c0012415:	57                   	push   edi
c0012416:	56                   	push   esi
c0012417:	53                   	push   ebx
c0012418:	83 ec 1c             	sub    esp,0x1c
c001241b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001241f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012424:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001242a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012430:	83 e0 01             	and    eax,0x1
c0012433:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0012437:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001243b:	0f 85 cc 00 00 00    	jne    c001250d <VAS::allocatePages(int, int)+0xf9>
c0012441:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012444:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012448:	85 c0                	test   eax,eax
c001244a:	0f 84 a1 00 00 00    	je     c00124f1 <VAS::allocatePages(int, int)+0xdd>
c0012450:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0012454:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012458:	c1 e6 0c             	shl    esi,0xc
c001245b:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001245f:	85 c0                	test   eax,eax
c0012461:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0012464:	7e 33                	jle    c0012499 <VAS::allocatePages(int, int)+0x85>
c0012466:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001246a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001246e:	81 cd 00 04 00 00    	or     ebp,0x400
c0012474:	e8 1d db ff ff       	call   c000ff96 <Phys::allocatePage()>
c0012479:	55                   	push   ebp
c001247a:	53                   	push   ebx
c001247b:	50                   	push   eax
c001247c:	57                   	push   edi
c001247d:	e8 90 fe ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001248a:	74 03                	je     c001248f <VAS::allocatePages(int, int)+0x7b>
c001248c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001248f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012495:	39 de                	cmp    esi,ebx
c0012497:	75 db                	jne    c0012474 <VAS::allocatePages(int, int)+0x60>
c0012499:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001249e:	75 12                	jne    c00124b2 <VAS::allocatePages(int, int)+0x9e>
c00124a0:	0f 20 d8             	mov    eax,cr3
c00124a3:	0f 22 d8             	mov    cr3,eax
c00124a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124aa:	83 c4 1c             	add    esp,0x1c
c00124ad:	5b                   	pop    ebx
c00124ae:	5e                   	pop    esi
c00124af:	5f                   	pop    edi
c00124b0:	5d                   	pop    ebp
c00124b1:	c3                   	ret    
c00124b2:	c1 ee 0a             	shr    esi,0xa
c00124b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124b9:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124bf:	c1 eb 0a             	shr    ebx,0xa
c00124c2:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c00124c8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ce:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124d4:	39 c3                	cmp    ebx,eax
c00124d6:	77 ce                	ja     c00124a6 <VAS::allocatePages(int, int)+0x92>
c00124d8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124db:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e1:	39 d8                	cmp    eax,ebx
c00124e3:	73 f3                	jae    c00124d8 <VAS::allocatePages(int, int)+0xc4>
c00124e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124e9:	83 c4 1c             	add    esp,0x1c
c00124ec:	5b                   	pop    ebx
c00124ed:	5e                   	pop    esi
c00124ee:	5f                   	pop    edi
c00124ef:	5d                   	pop    ebp
c00124f0:	c3                   	ret    
c00124f1:	83 ec 0c             	sub    esp,0xc
c00124f4:	68 9c af 02 c0       	push   0xc002af9c
c00124f9:	e8 9f 83 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00124fe:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012501:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012505:	83 c4 10             	add    esp,0x10
c0012508:	e9 43 ff ff ff       	jmp    c0012450 <VAS::allocatePages(int, int)+0x3c>
c001250d:	83 ec 0c             	sub    esp,0xc
c0012510:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012514:	e8 c2 f5 ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0012519:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0012525:	0f 87 9b 00 00 00    	ja     c00125c6 <VAS::allocatePages(int, int)+0x1b2>
c001252b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001252f:	85 d2                	test   edx,edx
c0012531:	7e 3c                	jle    c001256f <VAS::allocatePages(int, int)+0x15b>
c0012533:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012537:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001253b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001253f:	c1 e5 0c             	shl    ebp,0xc
c0012542:	81 ce 00 04 00 00    	or     esi,0x400
c0012548:	01 dd                	add    ebp,ebx
c001254a:	e8 47 da ff ff       	call   c000ff96 <Phys::allocatePage()>
c001254f:	56                   	push   esi
c0012550:	53                   	push   ebx
c0012551:	50                   	push   eax
c0012552:	57                   	push   edi
c0012553:	e8 ba fd ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012558:	83 c4 10             	add    esp,0x10
c001255b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012560:	74 03                	je     c0012565 <VAS::allocatePages(int, int)+0x151>
c0012562:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012565:	81 c3 00 10 00 00    	add    ebx,0x1000
c001256b:	39 dd                	cmp    ebp,ebx
c001256d:	75 db                	jne    c001254a <VAS::allocatePages(int, int)+0x136>
c001256f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012574:	0f 84 26 ff ff ff    	je     c00124a0 <VAS::allocatePages(int, int)+0x8c>
c001257a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001257e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012582:	89 d3                	mov    ebx,edx
c0012584:	c1 e0 0c             	shl    eax,0xc
c0012587:	c1 eb 0a             	shr    ebx,0xa
c001258a:	01 d0                	add    eax,edx
c001258c:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012592:	c1 e8 0a             	shr    eax,0xa
c0012595:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001259b:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125a0:	2d 00 00 40 00       	sub    eax,0x400000
c00125a5:	39 c3                	cmp    ebx,eax
c00125a7:	0f 87 f9 fe ff ff    	ja     c00124a6 <VAS::allocatePages(int, int)+0x92>
c00125ad:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125b0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125b6:	39 d8                	cmp    eax,ebx
c00125b8:	73 f3                	jae    c00125ad <VAS::allocatePages(int, int)+0x199>
c00125ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125be:	83 c4 1c             	add    esp,0x1c
c00125c1:	5b                   	pop    ebx
c00125c2:	5e                   	pop    esi
c00125c3:	5f                   	pop    edi
c00125c4:	5d                   	pop    ebp
c00125c5:	c3                   	ret    
c00125c6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00125cb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00125d1:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c00125d8:	0f 84 4d ff ff ff    	je     c001252b <VAS::allocatePages(int, int)+0x117>
c00125de:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c00125e6:	e9 40 ff ff ff       	jmp    c001252b <VAS::allocatePages(int, int)+0x117>
c00125eb:	90                   	nop

c00125ec <VAS::setCPUSpecific(unsigned long)>:
c00125ec:	83 ec 0c             	sub    esp,0xc
c00125ef:	6a 05                	push   0x5
c00125f1:	68 00 00 40 c2       	push   0xc2400000
c00125f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125fe:	e8 0f fd ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012603:	83 c4 1c             	add    esp,0x1c
c0012606:	c3                   	ret    
c0012607:	90                   	nop

c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012608:	55                   	push   ebp
c0012609:	57                   	push   edi
c001260a:	56                   	push   esi
c001260b:	53                   	push   ebx
c001260c:	83 ec 1c             	sub    esp,0x1c
c001260f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012614:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012618:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001261e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012622:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012628:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001262c:	83 e0 01             	and    eax,0x1
c001262f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012633:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012637:	85 c0                	test   eax,eax
c0012639:	7e 39                	jle    c0012674 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c001263b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001263f:	89 f3                	mov    ebx,esi
c0012641:	c1 e0 0c             	shl    eax,0xc
c0012644:	01 f0                	add    eax,esi
c0012646:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001264a:	55                   	push   ebp
c001264b:	53                   	push   ebx
c001264c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012650:	29 f0                	sub    eax,esi
c0012652:	01 d8                	add    eax,ebx
c0012654:	50                   	push   eax
c0012655:	57                   	push   edi
c0012656:	e8 b7 fc ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012663:	74 03                	je     c0012668 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0012665:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012668:	81 c3 00 10 00 00    	add    ebx,0x1000
c001266e:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0012672:	75 d6                	jne    c001264a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0012674:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012679:	75 10                	jne    c001268b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c001267b:	0f 20 d8             	mov    eax,cr3
c001267e:	0f 22 d8             	mov    cr3,eax
c0012681:	83 c4 1c             	add    esp,0x1c
c0012684:	89 f0                	mov    eax,esi
c0012686:	5b                   	pop    ebx
c0012687:	5e                   	pop    esi
c0012688:	5f                   	pop    edi
c0012689:	5d                   	pop    ebp
c001268a:	c3                   	ret    
c001268b:	89 f3                	mov    ebx,esi
c001268d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012691:	c1 eb 0a             	shr    ebx,0xa
c0012694:	c1 e0 0c             	shl    eax,0xc
c0012697:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001269d:	01 f0                	add    eax,esi
c001269f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126a5:	c1 e8 0a             	shr    eax,0xa
c00126a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126ad:	2d 00 00 40 00       	sub    eax,0x400000
c00126b2:	39 c3                	cmp    ebx,eax
c00126b4:	77 cb                	ja     c0012681 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00126b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126bf:	39 d8                	cmp    eax,ebx
c00126c1:	73 f3                	jae    c00126b6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00126c3:	83 c4 1c             	add    esp,0x1c
c00126c6:	89 f0                	mov    eax,esi
c00126c8:	5b                   	pop    ebx
c00126c9:	5e                   	pop    esi
c00126ca:	5f                   	pop    edi
c00126cb:	5d                   	pop    ebp
c00126cc:	c3                   	ret    
c00126cd:	90                   	nop

c00126ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c00126ce:	55                   	push   ebp
c00126cf:	57                   	push   edi
c00126d0:	56                   	push   esi
c00126d1:	53                   	push   ebx
c00126d2:	83 ec 1c             	sub    esp,0x1c
c00126d5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00126d9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00126dd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c00126e1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00126e5:	a9 ff 0f 00 00       	test   eax,0xfff
c00126ea:	75 4a                	jne    c0012736 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c00126ec:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00126f0:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00126f3:	c1 eb 16             	shr    ebx,0x16
c00126f6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c00126fd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012701:	74 4d                	je     c0012750 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012703:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012707:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001270b:	c1 e8 0a             	shr    eax,0xa
c001270e:	80 fa 01             	cmp    dl,0x1
c0012711:	19 d2                	sbb    edx,edx
c0012713:	c1 e3 0c             	shl    ebx,0xc
c0012716:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c001271a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012720:	25 fc 0f 00 00       	and    eax,0xffc
c0012725:	01 d8                	add    eax,ebx
c0012727:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c001272e:	83 c4 1c             	add    esp,0x1c
c0012731:	5b                   	pop    ebx
c0012732:	5e                   	pop    esi
c0012733:	5f                   	pop    edi
c0012734:	5d                   	pop    ebp
c0012735:	c3                   	ret    
c0012736:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001273a:	83 ec 0c             	sub    esp,0xc
c001273d:	68 c8 af 02 c0       	push   0xc002afc8
c0012742:	e8 56 81 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0012747:	83 c4 10             	add    esp,0x10
c001274a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001274e:	eb 9c                	jmp    c00126ec <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012750:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012754:	e8 3d d8 ff ff       	call   c000ff96 <Phys::allocatePage()>
c0012759:	83 ec 0c             	sub    esp,0xc
c001275c:	89 c5                	mov    ebp,eax
c001275e:	8b 0d d0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efd0
c0012764:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012768:	6a 01                	push   0x1
c001276a:	e8 6c f3 ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c001276f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012776:	6a 01                	push   0x1
c0012778:	50                   	push   eax
c0012779:	55                   	push   ebp
c001277a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012780:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012784:	51                   	push   ecx
c0012785:	e8 7e fe ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001278a:	83 c4 1c             	add    esp,0x1c
c001278d:	68 00 10 00 00       	push   0x1000
c0012792:	6a 00                	push   0x0
c0012794:	50                   	push   eax
c0012795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012799:	e8 fe df fe ff       	call   c000079c <memset>
c001279e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127a2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127a5:	e8 f1 f7 ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c00127aa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00127ad:	83 c4 10             	add    esp,0x10
c00127b0:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00127b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00127b7:	e9 47 ff ff ff       	jmp    c0012703 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c00127bc <VAS::VAS(bool)>:
c00127bc:	53                   	push   ebx
c00127bd:	83 ec 28             	sub    esp,0x28
c00127c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00127c8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00127d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00127de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127e2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00127e6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00127e9:	e8 a8 d7 ff ff       	call   c000ff96 <Phys::allocatePage()>
c00127ee:	89 c2                	mov    edx,eax
c00127f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127f4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00127f7:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c00127fd:	83 ec 0c             	sub    esp,0xc
c0012800:	6a 01                	push   0x1
c0012802:	e8 d4 f2 ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	89 c2                	mov    edx,eax
c001280c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012810:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012813:	83 ec 0c             	sub    esp,0xc
c0012816:	6a 03                	push   0x3
c0012818:	6a 01                	push   0x1
c001281a:	52                   	push   edx
c001281b:	50                   	push   eax
c001281c:	53                   	push   ebx
c001281d:	e8 e6 fd ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012822:	83 c4 20             	add    esp,0x20
c0012825:	89 c2                	mov    edx,eax
c0012827:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001282e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012836:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001283e:	7f 1c                	jg     c001285c <VAS::VAS(bool)+0xa0>
c0012840:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012844:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012847:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001284b:	c1 e2 02             	shl    edx,0x2
c001284e:	01 d0                	add    eax,edx
c0012850:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012856:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001285a:	eb da                	jmp    c0012836 <VAS::VAS(bool)+0x7a>
c001285c:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012864:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001286c:	7f 7a                	jg     c00128e8 <VAS::VAS(bool)+0x12c>
c001286e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012872:	2d 00 02 00 00       	sub    eax,0x200
c0012877:	c1 e0 0c             	shl    eax,0xc
c001287a:	83 c8 03             	or     eax,0x3
c001287d:	89 c2                	mov    edx,eax
c001287f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012884:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012890:	83 e0 10             	and    eax,0x10
c0012893:	84 c0                	test   al,al
c0012895:	74 07                	je     c001289e <VAS::VAS(bool)+0xe2>
c0012897:	b8 00 01 00 00       	mov    eax,0x100
c001289c:	eb 05                	jmp    c00128a3 <VAS::VAS(bool)+0xe7>
c001289e:	b8 00 00 00 00       	mov    eax,0x0
c00128a3:	09 d0                	or     eax,edx
c00128a5:	89 c1                	mov    ecx,eax
c00128a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128ab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128ae:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128b2:	c1 e2 02             	shl    edx,0x2
c00128b5:	01 d0                	add    eax,edx
c00128b7:	89 ca                	mov    edx,ecx
c00128b9:	89 10                	mov    DWORD PTR [eax],edx
c00128bb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128bf:	2d 40 03 00 00       	sub    eax,0x340
c00128c4:	83 f8 7f             	cmp    eax,0x7f
c00128c7:	77 16                	ja     c00128df <VAS::VAS(bool)+0x123>
c00128c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128cd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00128d4:	c1 e2 02             	shl    edx,0x2
c00128d7:	01 d0                	add    eax,edx
c00128d9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128df:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00128e3:	e9 7c ff ff ff       	jmp    c0012864 <VAS::VAS(bool)+0xa8>
c00128e8:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00128ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128f3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128f9:	83 e0 10             	and    eax,0x10
c00128fc:	84 c0                	test   al,al
c00128fe:	74 07                	je     c0012907 <VAS::VAS(bool)+0x14b>
c0012900:	b8 03 41 00 00       	mov    eax,0x4103
c0012905:	eb 05                	jmp    c001290c <VAS::VAS(bool)+0x150>
c0012907:	b8 03 40 00 00       	mov    eax,0x4003
c001290c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012910:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012913:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012919:	89 02                	mov    DWORD PTR [edx],eax
c001291b:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012920:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012926:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001292c:	83 ec 08             	sub    esp,0x8
c001292f:	50                   	push   eax
c0012930:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012934:	e8 b3 fc ff ff       	call   c00125ec <VAS::setCPUSpecific(unsigned long)>
c0012939:	83 c4 10             	add    esp,0x10
c001293c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012940:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012943:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012948:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012954:	83 e0 10             	and    eax,0x10
c0012957:	84 c0                	test   al,al
c0012959:	74 07                	je     c0012962 <VAS::VAS(bool)+0x1a6>
c001295b:	b8 00 01 00 00       	mov    eax,0x100
c0012960:	eb 05                	jmp    c0012967 <VAS::VAS(bool)+0x1ab>
c0012962:	b8 00 00 00 00       	mov    eax,0x0
c0012967:	09 c2                	or     edx,eax
c0012969:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001296d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012970:	05 fc 0f 00 00       	add    eax,0xffc
c0012975:	83 ca 03             	or     edx,0x3
c0012978:	89 10                	mov    DWORD PTR [eax],edx
c001297a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001297f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012985:	83 ec 0c             	sub    esp,0xc
c0012988:	50                   	push   eax
c0012989:	e8 74 1c 00 00       	call   c0014602 <Device::getName()>
c001298e:	83 c4 10             	add    esp,0x10
c0012991:	83 ec 08             	sub    esp,0x8
c0012994:	68 0d b1 02 c0       	push   0xc002b10d
c0012999:	50                   	push   eax
c001299a:	e8 45 df fe ff       	call   c00008e4 <strcmp>
c001299f:	83 c4 10             	add    esp,0x10
c00129a2:	85 c0                	test   eax,eax
c00129a4:	0f 94 c0             	sete   al
c00129a7:	84 c0                	test   al,al
c00129a9:	0f 84 87 00 00 00    	je     c0012a36 <VAS::VAS(bool)+0x27a>
c00129af:	fa                   	cli    
c00129b0:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00129b5:	40                   	inc    eax
c00129b6:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c00129bb:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00129c0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129c6:	05 7c 09 00 00       	add    eax,0x97c
c00129cb:	83 ec 0c             	sub    esp,0xc
c00129ce:	50                   	push   eax
c00129cf:	e8 d8 c9 ff ff       	call   c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129d4:	83 c4 10             	add    esp,0x10
c00129d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00129dc:	89 c3                	mov    ebx,eax
c00129de:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00129e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129e9:	05 7c 09 00 00       	add    eax,0x97c
c00129ee:	83 ec 0c             	sub    esp,0xc
c00129f1:	50                   	push   eax
c00129f2:	e8 b5 c9 ff ff       	call   c000f3ac <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00129f7:	83 c4 10             	add    esp,0x10
c00129fa:	83 ec 08             	sub    esp,0x8
c00129fd:	50                   	push   eax
c00129fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a02:	e8 75 f5 ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a0c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a11:	6a 11                	push   0x11
c0012a13:	53                   	push   ebx
c0012a14:	50                   	push   eax
c0012a15:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a19:	e8 f4 f8 ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a1e:	83 c4 10             	add    esp,0x10
c0012a21:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012a26:	48                   	dec    eax
c0012a27:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012a2c:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012a31:	85 c0                	test   eax,eax
c0012a33:	75 01                	jne    c0012a36 <VAS::VAS(bool)+0x27a>
c0012a35:	fb                   	sti    
c0012a36:	90                   	nop
c0012a37:	83 c4 28             	add    esp,0x28
c0012a3a:	5b                   	pop    ebx
c0012a3b:	c3                   	ret    

c0012a3c <VAS::evict(unsigned long)>:
c0012a3c:	55                   	push   ebp
c0012a3d:	57                   	push   edi
c0012a3e:	56                   	push   esi
c0012a3f:	53                   	push   ebx
c0012a40:	83 ec 1c             	sub    esp,0x1c
c0012a43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a47:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a4f:	e8 c8 f1 ff ff       	call   c0011c1c <Virt::allocateSwapfilePage()>
c0012a54:	89 c7                	mov    edi,eax
c0012a56:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c0012a5b:	85 c0                	test   eax,eax
c0012a5d:	7e 3d                	jle    c0012a9c <VAS::evict(unsigned long)+0x60>
c0012a5f:	89 ee                	mov    esi,ebp
c0012a61:	31 db                	xor    ebx,ebx
c0012a63:	83 ec 0c             	sub    esp,0xc
c0012a66:	57                   	push   edi
c0012a67:	e8 9e f1 ff ff       	call   c0011c0a <Virt::swapIDToSector(unsigned long)>
c0012a6c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012a6f:	01 d8                	add    eax,ebx
c0012a71:	6a 01                	push   0x1
c0012a73:	31 d2                	xor    edx,edx
c0012a75:	43                   	inc    ebx
c0012a76:	52                   	push   edx
c0012a77:	81 c6 00 02 00 00    	add    esi,0x200
c0012a7d:	50                   	push   eax
c0012a7e:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c0012a85:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c0012a8c:	e8 47 3e 00 00       	call   c00168d8 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a91:	83 c4 20             	add    esp,0x20
c0012a94:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c0012a9a:	7f c7                	jg     c0012a63 <VAS::evict(unsigned long)+0x27>
c0012a9c:	83 ec 08             	sub    esp,0x8
c0012a9f:	c1 e7 0b             	shl    edi,0xb
c0012aa2:	55                   	push   ebp
c0012aa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012aa7:	e8 d0 f4 ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0012aac:	83 c4 0c             	add    esp,0xc
c0012aaf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ab1:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012ab7:	09 d7                	or     edi,edx
c0012ab9:	89 38                	mov    DWORD PTR [eax],edi
c0012abb:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0012ac0:	40                   	inc    eax
c0012ac1:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0012ac6:	0f 20 da             	mov    edx,cr3
c0012ac9:	0f 22 da             	mov    cr3,edx
c0012acc:	50                   	push   eax
c0012acd:	55                   	push   ebp
c0012ace:	68 1b b1 02 c0       	push   0xc002b11b
c0012ad3:	e8 09 04 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012ad8:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0012add:	c7 44 24 40 30 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b130
c0012ae5:	8d 50 01             	lea    edx,[eax+0x1]
c0012ae8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012aec:	89 15 c4 ef 02 c0    	mov    DWORD PTR ds:0xc002efc4,edx
c0012af2:	83 c4 2c             	add    esp,0x2c
c0012af5:	5b                   	pop    ebx
c0012af6:	5e                   	pop    esi
c0012af7:	5f                   	pop    edi
c0012af8:	5d                   	pop    ebp
c0012af9:	e9 e3 03 00 00       	jmp    c0012ee1 <Dbg::kprintf(char const*, ...)>

c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012afe:	55                   	push   ebp
c0012aff:	57                   	push   edi
c0012b00:	56                   	push   esi
c0012b01:	53                   	push   ebx
c0012b02:	83 ec 0c             	sub    esp,0xc
c0012b05:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012b09:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012b0f:	0f 84 dc 00 00 00    	je     c0012bf1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b15:	56                   	push   esi
c0012b16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012b1a:	e8 5d f4 ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0012b1f:	5b                   	pop    ebx
c0012b20:	85 c0                	test   eax,eax
c0012b22:	5f                   	pop    edi
c0012b23:	89 c3                	mov    ebx,eax
c0012b25:	0f 84 c6 00 00 00    	je     c0012bf1 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012b2b:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b2d:	31 c0                	xor    eax,eax
c0012b2f:	89 fa                	mov    edx,edi
c0012b31:	81 e2 01 04 00 00    	and    edx,0x401
c0012b37:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012b3d:	0f 85 b0 00 00 00    	jne    c0012bf3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b43:	e8 4e d4 ff ff       	call   c000ff96 <Phys::allocatePage()>
c0012b48:	c1 ef 0b             	shr    edi,0xb
c0012b4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012b4d:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012b53:	09 c2                	or     edx,eax
c0012b55:	81 ca 01 08 00 00    	or     edx,0x801
c0012b5b:	89 13                	mov    DWORD PTR [ebx],edx
c0012b5d:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c0012b63:	85 c9                	test   ecx,ecx
c0012b65:	7e 3d                	jle    c0012ba4 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012b67:	89 f5                	mov    ebp,esi
c0012b69:	31 db                	xor    ebx,ebx
c0012b6b:	83 ec 0c             	sub    esp,0xc
c0012b6e:	57                   	push   edi
c0012b6f:	e8 96 f0 ff ff       	call   c0011c0a <Virt::swapIDToSector(unsigned long)>
c0012b74:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b77:	01 d8                	add    eax,ebx
c0012b79:	6a 01                	push   0x1
c0012b7b:	31 d2                	xor    edx,edx
c0012b7d:	43                   	inc    ebx
c0012b7e:	52                   	push   edx
c0012b7f:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b85:	50                   	push   eax
c0012b86:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c0012b8d:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c0012b94:	e8 d3 3c 00 00       	call   c001686c <LogicalDisk::read(unsigned long long, int, void*)>
c0012b99:	83 c4 20             	add    esp,0x20
c0012b9c:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c0012ba2:	7f c7                	jg     c0012b6b <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012ba4:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0012ba9:	48                   	dec    eax
c0012baa:	52                   	push   edx
c0012bab:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0012bb0:	50                   	push   eax
c0012bb1:	56                   	push   esi
c0012bb2:	68 41 b1 02 c0       	push   0xc002b141
c0012bb7:	e8 25 03 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012bbc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012bbf:	e8 28 f0 ff ff       	call   c0011bec <Virt::freeSwapfilePage(unsigned long)>
c0012bc4:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012bc9:	83 c4 10             	add    esp,0x10
c0012bcc:	48                   	dec    eax
c0012bcd:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012bd2:	85 c0                	test   eax,eax
c0012bd4:	75 01                	jne    c0012bd7 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012bd6:	fb                   	sti    
c0012bd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012bdb:	25 ff 0f 00 00       	and    eax,0xfff
c0012be0:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012be5:	77 14                	ja     c0012bfb <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012be7:	0f 20 d8             	mov    eax,cr3
c0012bea:	0f 22 d8             	mov    cr3,eax
c0012bed:	b0 01                	mov    al,0x1
c0012bef:	eb 02                	jmp    c0012bf3 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012bf1:	31 c0                	xor    eax,eax
c0012bf3:	83 c4 0c             	add    esp,0xc
c0012bf6:	5b                   	pop    ebx
c0012bf7:	5e                   	pop    esi
c0012bf8:	5f                   	pop    edi
c0012bf9:	5d                   	pop    ebp
c0012bfa:	c3                   	ret    
c0012bfb:	83 ec 0c             	sub    esp,0xc
c0012bfe:	68 56 b1 02 c0       	push   0xc002b156
c0012c03:	e8 d9 02 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012c08:	83 c4 10             	add    esp,0x10
c0012c0b:	eb da                	jmp    c0012be7 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012c0d:	90                   	nop

c0012c0e <VAS::scanForEviction()>:
c0012c0e:	57                   	push   edi
c0012c0f:	56                   	push   esi
c0012c10:	53                   	push   ebx
c0012c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012c15:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c18:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c1e:	75 0e                	jne    c0012c2e <VAS::scanForEviction()+0x20>
c0012c20:	89 da                	mov    edx,ebx
c0012c22:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c25:	c1 ea 16             	shr    edx,0x16
c0012c28:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c2c:	74 48                	je     c0012c76 <VAS::scanForEviction()+0x68>
c0012c2e:	53                   	push   ebx
c0012c2f:	56                   	push   esi
c0012c30:	e8 47 f3 ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c0012c35:	5a                   	pop    edx
c0012c36:	8b 38                	mov    edi,DWORD PTR [eax]
c0012c38:	59                   	pop    ecx
c0012c39:	89 fa                	mov    edx,edi
c0012c3b:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012c41:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012c47:	74 3d                	je     c0012c86 <VAS::scanForEviction()+0x78>
c0012c49:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012c4f:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012c55:	76 2a                	jbe    c0012c81 <VAS::scanForEviction()+0x73>
c0012c57:	31 db                	xor    ebx,ebx
c0012c59:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012c60:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012c66:	75 c6                	jne    c0012c2e <VAS::scanForEviction()+0x20>
c0012c68:	89 da                	mov    edx,ebx
c0012c6a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012c6d:	c1 ea 16             	shr    edx,0x16
c0012c70:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012c74:	75 b8                	jne    c0012c2e <VAS::scanForEviction()+0x20>
c0012c76:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012c7c:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c7f:	eb 97                	jmp    c0012c18 <VAS::scanForEviction()+0xa>
c0012c81:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c84:	eb 92                	jmp    c0012c18 <VAS::scanForEviction()+0xa>
c0012c86:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c8c:	74 bb                	je     c0012c49 <VAS::scanForEviction()+0x3b>
c0012c8e:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c94:	74 0a                	je     c0012ca0 <VAS::scanForEviction()+0x92>
c0012c96:	83 e7 df             	and    edi,0xffffffdf
c0012c99:	89 38                	mov    DWORD PTR [eax],edi
c0012c9b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c9e:	eb a9                	jmp    c0012c49 <VAS::scanForEviction()+0x3b>
c0012ca0:	83 ec 08             	sub    esp,0x8
c0012ca3:	53                   	push   ebx
c0012ca4:	56                   	push   esi
c0012ca5:	e8 92 fd ff ff       	call   c0012a3c <VAS::evict(unsigned long)>
c0012caa:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012cb1:	83 c4 10             	add    esp,0x10
c0012cb4:	89 f8                	mov    eax,edi
c0012cb6:	5b                   	pop    ebx
c0012cb7:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012cbc:	5e                   	pop    esi
c0012cbd:	5f                   	pop    edi
c0012cbe:	c3                   	ret    

c0012cbf <mapVASFirstTime>:
c0012cbf:	55                   	push   ebp
c0012cc0:	57                   	push   edi
c0012cc1:	56                   	push   esi
c0012cc2:	53                   	push   ebx
c0012cc3:	83 ec 0c             	sub    esp,0xc
c0012cc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ccb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012cce:	4a                   	dec    edx
c0012ccf:	0f 84 8e 00 00 00    	je     c0012d63 <mapVASFirstTime+0xa4>
c0012cd5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012cd8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012cdb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012ce0:	c1 e5 15             	shl    ebp,0x15
c0012ce3:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012ce8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012cee:	29 eb                	sub    ebx,ebp
c0012cf0:	29 ee                	sub    esi,ebp
c0012cf2:	e8 9f d2 ff ff       	call   c000ff96 <Phys::allocatePage()>
c0012cf7:	83 ec 0c             	sub    esp,0xc
c0012cfa:	68 03 04 00 00       	push   0x403
c0012cff:	6a 01                	push   0x1
c0012d01:	53                   	push   ebx
c0012d02:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012d08:	50                   	push   eax
c0012d09:	57                   	push   edi
c0012d0a:	e8 f9 f8 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d0f:	83 c4 20             	add    esp,0x20
c0012d12:	39 f3                	cmp    ebx,esi
c0012d14:	75 dc                	jne    c0012cf2 <mapVASFirstTime+0x33>
c0012d16:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012d1b:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012d20:	29 ee                	sub    esi,ebp
c0012d22:	29 e8                	sub    eax,ebp
c0012d24:	89 c5                	mov    ebp,eax
c0012d26:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012d2a:	19 db                	sbb    ebx,ebx
c0012d2c:	e8 65 d2 ff ff       	call   c000ff96 <Phys::allocatePage()>
c0012d31:	83 e3 04             	and    ebx,0x4
c0012d34:	83 ec 0c             	sub    esp,0xc
c0012d37:	81 c3 03 04 00 00    	add    ebx,0x403
c0012d3d:	53                   	push   ebx
c0012d3e:	6a 01                	push   0x1
c0012d40:	56                   	push   esi
c0012d41:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012d47:	50                   	push   eax
c0012d48:	57                   	push   edi
c0012d49:	e8 ba f8 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012d4e:	83 c4 20             	add    esp,0x20
c0012d51:	39 f5                	cmp    ebp,esi
c0012d53:	75 d1                	jne    c0012d26 <mapVASFirstTime+0x67>
c0012d55:	0f 20 d8             	mov    eax,cr3
c0012d58:	0f 22 d8             	mov    cr3,eax
c0012d5b:	83 c4 0c             	add    esp,0xc
c0012d5e:	5b                   	pop    ebx
c0012d5f:	5e                   	pop    esi
c0012d60:	5f                   	pop    edi
c0012d61:	5d                   	pop    ebp
c0012d62:	c3                   	ret    
c0012d63:	83 ec 0c             	sub    esp,0xc
c0012d66:	68 66 b1 02 c0       	push   0xc002b166
c0012d6b:	e8 71 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012d70:	83 c4 10             	add    esp,0x10
c0012d73:	83 c4 0c             	add    esp,0xc
c0012d76:	5b                   	pop    ebx
c0012d77:	5e                   	pop    esi
c0012d78:	5f                   	pop    edi
c0012d79:	5d                   	pop    ebp
c0012d7a:	c3                   	ret    

c0012d7b <__cxa_atexit>:
c0012d7b:	31 c0                	xor    eax,eax
c0012d7d:	c3                   	ret    

c0012d7e <__cxa_finalize>:
c0012d7e:	c3                   	ret    

c0012d7f <__stack_chk_fail>:
c0012d7f:	55                   	push   ebp
c0012d80:	89 e5                	mov    ebp,esp
c0012d82:	83 ec 14             	sub    esp,0x14
c0012d85:	68 7f b1 02 c0       	push   0xc002b17f
c0012d8a:	e8 52 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012d8f:	58                   	pop    eax
c0012d90:	5a                   	pop    edx
c0012d91:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d94:	68 cf b1 02 c0       	push   0xc002b1cf
c0012d99:	e8 43 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012d9e:	59                   	pop    ecx
c0012d9f:	58                   	pop    eax
c0012da0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012da3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012da6:	68 cf b1 02 c0       	push   0xc002b1cf
c0012dab:	e8 31 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012db0:	5a                   	pop    edx
c0012db1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012db4:	59                   	pop    ecx
c0012db5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012db7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dba:	68 cf b1 02 c0       	push   0xc002b1cf
c0012dbf:	e8 1d 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012dc4:	5a                   	pop    edx
c0012dc5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012dc8:	59                   	pop    ecx
c0012dc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dcb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012dcd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012dd0:	68 cf b1 02 c0       	push   0xc002b1cf
c0012dd5:	e8 07 01 00 00       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0012dda:	c7 04 24 d7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1d7
c0012de1:	e8 b7 7a 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0012de6:	83 c4 10             	add    esp,0x10
c0012de9:	c9                   	leave  
c0012dea:	c3                   	ret    

c0012deb <__cxa_pure_virtual>:
c0012deb:	83 ec 18             	sub    esp,0x18
c0012dee:	68 ef b1 02 c0       	push   0xc002b1ef
c0012df3:	e8 a5 7a 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0012df8:	83 c4 1c             	add    esp,0x1c
c0012dfb:	c3                   	ret    

c0012dfc <operator new[](unsigned long)>:
c0012dfc:	e9 29 cb ff ff       	jmp    c000f92a <malloc>

c0012e01 <operator delete(void*, unsigned long)>:
c0012e01:	e9 44 cb ff ff       	jmp    c000f94a <rfree>

c0012e06 <operator delete[](void*)>:
c0012e06:	e9 3f cb ff ff       	jmp    c000f94a <rfree>

c0012e0b <operator delete[](void*, unsigned long)>:
c0012e0b:	e9 3a cb ff ff       	jmp    c000f94a <rfree>

c0012e10 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012e10:	57                   	push   edi
c0012e11:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012e16:	56                   	push   esi
c0012e17:	be 04 b2 02 c0       	mov    esi,0xc002b204
c0012e1c:	53                   	push   ebx
c0012e1d:	83 ec 40             	sub    esp,0x40
c0012e20:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012e24:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012e28:	fc                   	cld    
c0012e29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012e2b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012e2f:	83 f9 3e             	cmp    ecx,0x3e
c0012e32:	7e 05                	jle    c0012e39 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012e34:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012e39:	89 df                	mov    edi,ebx
c0012e3b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012e3f:	eb 02                	jmp    c0012e43 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012e41:	89 c7                	mov    edi,eax
c0012e43:	31 d2                	xor    edx,edx
c0012e45:	46                   	inc    esi
c0012e46:	89 f8                	mov    eax,edi
c0012e48:	f7 f1                	div    ecx
c0012e4a:	39 cf                	cmp    edi,ecx
c0012e4c:	73 f3                	jae    c0012e41 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012e4e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e51:	eb 02                	jmp    c0012e55 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012e53:	89 c3                	mov    ebx,eax
c0012e55:	31 d2                	xor    edx,edx
c0012e57:	4e                   	dec    esi
c0012e58:	89 d8                	mov    eax,ebx
c0012e5a:	f7 f1                	div    ecx
c0012e5c:	39 cb                	cmp    ebx,ecx
c0012e5e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012e62:	88 16                	mov    BYTE PTR [esi],dl
c0012e64:	73 ed                	jae    c0012e53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012e66:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e6a:	83 c4 40             	add    esp,0x40
c0012e6d:	5b                   	pop    ebx
c0012e6e:	5e                   	pop    esi
c0012e6f:	5f                   	pop    edi
c0012e70:	c3                   	ret    

c0012e71 <Dbg::logc(char)>:
c0012e71:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e75:	ba fd 03 00 00       	mov    edx,0x3fd
c0012e7a:	ec                   	in     al,dx
c0012e7b:	a8 20                	test   al,0x20
c0012e7d:	74 fb                	je     c0012e7a <Dbg::logc(char)+0x9>
c0012e7f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e84:	88 c8                	mov    al,cl
c0012e86:	ee                   	out    dx,al
c0012e87:	c3                   	ret    

c0012e88 <Dbg::logs(char*)>:
c0012e88:	53                   	push   ebx
c0012e89:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e8d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e90:	84 c0                	test   al,al
c0012e92:	74 0f                	je     c0012ea3 <Dbg::logs(char*)+0x1b>
c0012e94:	50                   	push   eax
c0012e95:	43                   	inc    ebx
c0012e96:	e8 d6 ff ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012e9b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e9e:	5a                   	pop    edx
c0012e9f:	84 c0                	test   al,al
c0012ea1:	75 f1                	jne    c0012e94 <Dbg::logs(char*)+0xc>
c0012ea3:	5b                   	pop    ebx
c0012ea4:	c3                   	ret    

c0012ea5 <Dbg::logWriteInt(unsigned int)>:
c0012ea5:	83 ec 10             	sub    esp,0x10
c0012ea8:	6a 0a                	push   0xa
c0012eaa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012eae:	50                   	push   eax
c0012eaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012eb3:	e8 58 ff ff ff       	call   c0012e10 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012eb8:	50                   	push   eax
c0012eb9:	e8 ca ff ff ff       	call   c0012e88 <Dbg::logs(char*)>
c0012ebe:	83 c4 20             	add    esp,0x20
c0012ec1:	c3                   	ret    

c0012ec2 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012ec2:	83 ec 10             	sub    esp,0x10
c0012ec5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ec9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012ecd:	50                   	push   eax
c0012ece:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ed2:	e8 39 ff ff ff       	call   c0012e10 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012ed7:	50                   	push   eax
c0012ed8:	e8 ab ff ff ff       	call   c0012e88 <Dbg::logs(char*)>
c0012edd:	83 c4 20             	add    esp,0x20
c0012ee0:	c3                   	ret    

c0012ee1 <Dbg::kprintf(char const*, ...)>:
c0012ee1:	55                   	push   ebp
c0012ee2:	57                   	push   edi
c0012ee3:	56                   	push   esi
c0012ee4:	53                   	push   ebx
c0012ee5:	83 ec 0c             	sub    esp,0xc
c0012ee8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012eec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ef0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ef4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012ef7:	84 c0                	test   al,al
c0012ef9:	74 4a                	je     c0012f45 <Dbg::kprintf(char const*, ...)+0x64>
c0012efb:	31 db                	xor    ebx,ebx
c0012efd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012f00:	3c 25                	cmp    al,0x25
c0012f02:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012f05:	0f 85 e4 00 00 00    	jne    c0012fef <Dbg::kprintf(char const*, ...)+0x10e>
c0012f0b:	83 c3 02             	add    ebx,0x2
c0012f0e:	8a 07                	mov    al,BYTE PTR [edi]
c0012f10:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012f13:	83 e8 25             	sub    eax,0x25
c0012f16:	3c 53                	cmp    al,0x53
c0012f18:	0f 87 ba 00 00 00    	ja     c0012fd8 <Dbg::kprintf(char const*, ...)+0xf7>
c0012f1e:	0f b6 c0             	movzx  eax,al
c0012f21:	ff 24 85 44 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4dbc]
c0012f28:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f2c:	89 c8                	mov    eax,ecx
c0012f2e:	83 c1 04             	add    ecx,0x4
c0012f31:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f35:	ff 30                	push   DWORD PTR [eax]
c0012f37:	e8 4c ff ff ff       	call   c0012e88 <Dbg::logs(char*)>
c0012f3c:	58                   	pop    eax
c0012f3d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012f41:	84 c0                	test   al,al
c0012f43:	75 b8                	jne    c0012efd <Dbg::kprintf(char const*, ...)+0x1c>
c0012f45:	83 c4 0c             	add    esp,0xc
c0012f48:	5b                   	pop    ebx
c0012f49:	5e                   	pop    esi
c0012f4a:	5f                   	pop    edi
c0012f4b:	5d                   	pop    ebp
c0012f4c:	c3                   	ret    
c0012f4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f51:	89 d0                	mov    eax,edx
c0012f53:	83 c2 04             	add    edx,0x4
c0012f56:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f5a:	ff 30                	push   DWORD PTR [eax]
c0012f5c:	e8 44 ff ff ff       	call   c0012ea5 <Dbg::logWriteInt(unsigned int)>
c0012f61:	58                   	pop    eax
c0012f62:	eb d9                	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f64:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f68:	89 d0                	mov    eax,edx
c0012f6a:	83 c2 04             	add    edx,0x4
c0012f6d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012f70:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f74:	50                   	push   eax
c0012f75:	e8 f7 fe ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012f7a:	58                   	pop    eax
c0012f7b:	eb c0                	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f81:	89 c8                	mov    eax,ecx
c0012f83:	83 c1 04             	add    ecx,0x4
c0012f86:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f8a:	ff 30                	push   DWORD PTR [eax]
c0012f8c:	e8 14 ff ff ff       	call   c0012ea5 <Dbg::logWriteInt(unsigned int)>
c0012f91:	5f                   	pop    edi
c0012f92:	eb a9                	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012f94:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f98:	89 c8                	mov    eax,ecx
c0012f9a:	83 c1 04             	add    ecx,0x4
c0012f9d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012fa1:	6a 10                	push   0x10
c0012fa3:	ff 30                	push   DWORD PTR [eax]
c0012fa5:	e8 18 ff ff ff       	call   c0012ec2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012faa:	59                   	pop    ecx
c0012fab:	5f                   	pop    edi
c0012fac:	eb 8f                	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012fb2:	89 d0                	mov    eax,edx
c0012fb4:	83 c2 08             	add    edx,0x8
c0012fb7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012fbb:	6a 10                	push   0x10
c0012fbd:	ff 30                	push   DWORD PTR [eax]
c0012fbf:	e8 fe fe ff ff       	call   c0012ec2 <Dbg::logWriteIntBase(unsigned int, int)>
c0012fc4:	58                   	pop    eax
c0012fc5:	5a                   	pop    edx
c0012fc6:	e9 72 ff ff ff       	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fcb:	6a 25                	push   0x25
c0012fcd:	e8 9f fe ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012fd2:	58                   	pop    eax
c0012fd3:	e9 65 ff ff ff       	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fd8:	6a 25                	push   0x25
c0012fda:	e8 92 fe ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012fdf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012fe2:	50                   	push   eax
c0012fe3:	e8 89 fe ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012fe8:	5a                   	pop    edx
c0012fe9:	59                   	pop    ecx
c0012fea:	e9 4e ff ff ff       	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fef:	50                   	push   eax
c0012ff0:	89 eb                	mov    ebx,ebp
c0012ff2:	e8 7a fe ff ff       	call   c0012e71 <Dbg::logc(char)>
c0012ff7:	89 fd                	mov    ebp,edi
c0012ff9:	58                   	pop    eax
c0012ffa:	e9 3e ff ff ff       	jmp    c0012f3d <Dbg::kprintf(char const*, ...)+0x5c>
c0012fff:	90                   	nop

c0013000 <File::read(unsigned long long, void*, int*)>:
c0013000:	53                   	push   ebx
c0013001:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013005:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013009:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013010:	3c 19                	cmp    al,0x19
c0013012:	77 35                	ja     c0013049 <File::read(unsigned long long, void*, int*)+0x49>
c0013014:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c001301b:	85 c0                	test   eax,eax
c001301d:	74 2a                	je     c0013049 <File::read(unsigned long long, void*, int*)+0x49>
c001301f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013025:	85 c0                	test   eax,eax
c0013027:	74 20                	je     c0013049 <File::read(unsigned long long, void*, int*)+0x49>
c0013029:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001302d:	74 21                	je     c0013050 <File::read(unsigned long long, void*, int*)+0x50>
c001302f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013031:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013035:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001303b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001303f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013043:	5b                   	pop    ebx
c0013044:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013047:	ff e0                	jmp    eax
c0013049:	b8 0b 00 00 00       	mov    eax,0xb
c001304e:	eb 05                	jmp    c0013055 <File::read(unsigned long long, void*, int*)+0x55>
c0013050:	b8 05 00 00 00       	mov    eax,0x5
c0013055:	5b                   	pop    ebx
c0013056:	c3                   	ret    
c0013057:	90                   	nop

c0013058 <File::write(unsigned long long, void*, int*)>:
c0013058:	53                   	push   ebx
c0013059:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001305d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013061:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013068:	3c 19                	cmp    al,0x19
c001306a:	77 35                	ja     c00130a1 <File::write(unsigned long long, void*, int*)+0x49>
c001306c:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0013073:	85 c0                	test   eax,eax
c0013075:	74 2a                	je     c00130a1 <File::write(unsigned long long, void*, int*)+0x49>
c0013077:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001307d:	85 c0                	test   eax,eax
c001307f:	74 20                	je     c00130a1 <File::write(unsigned long long, void*, int*)+0x49>
c0013081:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013085:	74 21                	je     c00130a8 <File::write(unsigned long long, void*, int*)+0x50>
c0013087:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013089:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001308d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013093:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013097:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001309b:	5b                   	pop    ebx
c001309c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001309f:	ff e0                	jmp    eax
c00130a1:	b8 0b 00 00 00       	mov    eax,0xb
c00130a6:	eb 05                	jmp    c00130ad <File::write(unsigned long long, void*, int*)+0x55>
c00130a8:	b8 05 00 00 00       	mov    eax,0x5
c00130ad:	5b                   	pop    ebx
c00130ae:	c3                   	ret    
c00130af:	90                   	nop

c00130b0 <Directory::read(unsigned long long, void*, int*)>:
c00130b0:	53                   	push   ebx
c00130b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00130b5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00130b9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00130c0:	3c 19                	cmp    al,0x19
c00130c2:	77 35                	ja     c00130f9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130c4:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c00130cb:	85 c0                	test   eax,eax
c00130cd:	74 2a                	je     c00130f9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00130d5:	85 c0                	test   eax,eax
c00130d7:	74 20                	je     c00130f9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00130d9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00130dd:	74 21                	je     c0013100 <Directory::read(unsigned long long, void*, int*)+0x50>
c00130df:	8b 08                	mov    ecx,DWORD PTR [eax]
c00130e1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00130e5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00130eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00130ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00130f3:	5b                   	pop    ebx
c00130f4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00130f7:	ff e0                	jmp    eax
c00130f9:	b8 0b 00 00 00       	mov    eax,0xb
c00130fe:	eb 05                	jmp    c0013105 <Directory::read(unsigned long long, void*, int*)+0x55>
c0013100:	b8 05 00 00 00       	mov    eax,0x5
c0013105:	5b                   	pop    ebx
c0013106:	c3                   	ret    
c0013107:	90                   	nop

c0013108 <Directory::write(unsigned long long, void*, int*)>:
c0013108:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001310c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013113:	b8 0b 00 00 00       	mov    eax,0xb
c0013118:	80 fa 19             	cmp    dl,0x19
c001311b:	77 18                	ja     c0013135 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001311d:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013124:	85 d2                	test   edx,edx
c0013126:	74 0d                	je     c0013135 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013128:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001312f:	19 c0                	sbb    eax,eax
c0013131:	83 e0 0a             	and    eax,0xa
c0013134:	40                   	inc    eax
c0013135:	c3                   	ret    

c0013136 <File::isAtty()>:
c0013136:	31 c0                	xor    eax,eax
c0013138:	c3                   	ret    
c0013139:	90                   	nop

c001313a <Directory::isAtty()>:
c001313a:	31 c0                	xor    eax,eax
c001313c:	c3                   	ret    
c001313d:	90                   	nop

c001313e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001313e:	b8 0a 00 00 00       	mov    eax,0xa
c0013143:	c3                   	ret    

c0013144 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013144:	b8 0a 00 00 00       	mov    eax,0xa
c0013149:	c3                   	ret    

c001314a <Filesystem::getFileFirstSector(char const*)>:
c001314a:	31 c0                	xor    eax,eax
c001314c:	31 d2                	xor    edx,edx
c001314e:	c3                   	ret    
c001314f:	90                   	nop

c0013150 <File::~File()>:
c0013150:	83 ec 0c             	sub    esp,0xc
c0013153:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c0013158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001315c:	89 10                	mov    DWORD PTR [eax],edx
c001315e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013162:	83 ec 0c             	sub    esp,0xc
c0013165:	50                   	push   eax
c0013166:	e8 0f e7 ff ff       	call   c001187a <UnixFile::~UnixFile()>
c001316b:	83 c4 10             	add    esp,0x10
c001316e:	90                   	nop
c001316f:	83 c4 0c             	add    esp,0xc
c0013172:	c3                   	ret    
c0013173:	90                   	nop

c0013174 <File::~File()>:
c0013174:	83 ec 0c             	sub    esp,0xc
c0013177:	83 ec 0c             	sub    esp,0xc
c001317a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001317e:	e8 cd ff ff ff       	call   c0013150 <File::~File()>
c0013183:	83 c4 10             	add    esp,0x10
c0013186:	83 ec 08             	sub    esp,0x8
c0013189:	68 14 01 00 00       	push   0x114
c001318e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013192:	e8 6a fc ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0013197:	83 c4 10             	add    esp,0x10
c001319a:	83 c4 0c             	add    esp,0xc
c001319d:	c3                   	ret    

c001319e <Directory::~Directory()>:
c001319e:	83 ec 0c             	sub    esp,0xc
c00131a1:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c00131a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131aa:	89 10                	mov    DWORD PTR [eax],edx
c00131ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131b0:	83 ec 0c             	sub    esp,0xc
c00131b3:	50                   	push   eax
c00131b4:	e8 c1 e6 ff ff       	call   c001187a <UnixFile::~UnixFile()>
c00131b9:	83 c4 10             	add    esp,0x10
c00131bc:	90                   	nop
c00131bd:	83 c4 0c             	add    esp,0xc
c00131c0:	c3                   	ret    
c00131c1:	90                   	nop

c00131c2 <Directory::~Directory()>:
c00131c2:	83 ec 0c             	sub    esp,0xc
c00131c5:	83 ec 0c             	sub    esp,0xc
c00131c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131cc:	e8 cd ff ff ff       	call   c001319e <Directory::~Directory()>
c00131d1:	83 c4 10             	add    esp,0x10
c00131d4:	83 ec 08             	sub    esp,0x8
c00131d7:	68 14 01 00 00       	push   0x114
c00131dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131e0:	e8 1c fc ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00131e5:	83 c4 10             	add    esp,0x10
c00131e8:	83 c4 0c             	add    esp,0xc
c00131eb:	c3                   	ret    

c00131ec <Filesystem::Filesystem()>:
c00131ec:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c00131f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00131f5:	89 10                	mov    DWORD PTR [eax],edx
c00131f7:	8b 15 d4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efd4
c00131fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013201:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013208:	a3 d4 ef 02 c0       	mov    ds:0xc002efd4,eax
c001320d:	90                   	nop
c001320e:	c3                   	ret    
c001320f:	90                   	nop

c0013210 <Filesystem::~Filesystem()>:
c0013210:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0013215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013219:	89 10                	mov    DWORD PTR [eax],edx
c001321b:	90                   	nop
c001321c:	c3                   	ret    
c001321d:	90                   	nop

c001321e <Filesystem::~Filesystem()>:
c001321e:	83 ec 0c             	sub    esp,0xc
c0013221:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013225:	e8 e6 ff ff ff       	call   c0013210 <Filesystem::~Filesystem()>
c001322a:	83 c4 04             	add    esp,0x4
c001322d:	83 ec 08             	sub    esp,0x8
c0013230:	6a 08                	push   0x8
c0013232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013236:	e8 c6 fb ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001323b:	83 c4 10             	add    esp,0x10
c001323e:	83 c4 0c             	add    esp,0xc
c0013241:	c3                   	ret    

c0013242 <Fs::getcwd(Process*, char*, int)>:
c0013242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013246:	31 c0                	xor    eax,eax
c0013248:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001324b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001324f:	7d 15                	jge    c0013266 <Fs::getcwd(Process*, char*, int)+0x24>
c0013251:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013255:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001325c:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001325f:	84 c9                	test   cl,cl
c0013261:	74 06                	je     c0013269 <Fs::getcwd(Process*, char*, int)+0x27>
c0013263:	40                   	inc    eax
c0013264:	eb e2                	jmp    c0013248 <Fs::getcwd(Process*, char*, int)+0x6>
c0013266:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013269:	31 c0                	xor    eax,eax
c001326b:	c3                   	ret    

c001326c <Fs::initVFS()>:
c001326c:	83 ec 18             	sub    esp,0x18
c001326f:	6a 08                	push   0x8
c0013271:	e8 b4 c6 ff ff       	call   c000f92a <malloc>
c0013276:	89 04 24             	mov    DWORD PTR [esp],eax
c0013279:	e8 fc e3 00 00       	call   c002167a <FAT::FAT()>
c001327e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013285:	e8 a0 c6 ff ff       	call   c000f92a <malloc>
c001328a:	89 04 24             	mov    DWORD PTR [esp],eax
c001328d:	e8 40 f6 00 00       	call   c00228d2 <ISO9660::ISO9660()>
c0013292:	83 c4 1c             	add    esp,0x1c
c0013295:	c3                   	ret    

c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013296:	55                   	push   ebp
c0013297:	57                   	push   edi
c0013298:	56                   	push   esi
c0013299:	53                   	push   ebx
c001329a:	81 ec 10 04 00 00    	sub    esp,0x410
c00132a0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00132a7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00132ae:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00132b5:	68 00 04 00 00       	push   0x400
c00132ba:	6a 00                	push   0x0
c00132bc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00132c0:	56                   	push   esi
c00132c1:	e8 d6 d4 fe ff       	call   c000079c <memset>
c00132c6:	83 c4 10             	add    esp,0x10
c00132c9:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00132cd:	75 0b                	jne    c00132da <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00132cf:	50                   	push   eax
c00132d0:	50                   	push   eax
c00132d1:	57                   	push   edi
c00132d2:	56                   	push   esi
c00132d3:	e8 80 d5 fe ff       	call   c0000858 <strcpy>
c00132d8:	eb 41                	jmp    c001331b <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00132da:	8a 07                	mov    al,BYTE PTR [edi]
c00132dc:	3c 5c                	cmp    al,0x5c
c00132de:	74 04                	je     c00132e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00132e0:	3c 2f                	cmp    al,0x2f
c00132e2:	75 18                	jne    c00132fc <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00132e4:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00132e7:	3c 60                	cmp    al,0x60
c00132e9:	7e 03                	jle    c00132ee <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00132eb:	83 e8 20             	sub    eax,0x20
c00132ee:	88 04 24             	mov    BYTE PTR [esp],al
c00132f1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132f8:	50                   	push   eax
c00132f9:	50                   	push   eax
c00132fa:	eb 18                	jmp    c0013314 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c00132fc:	50                   	push   eax
c00132fd:	50                   	push   eax
c00132fe:	55                   	push   ebp
c00132ff:	56                   	push   esi
c0013300:	e8 53 d5 fe ff       	call   c0000858 <strcpy>
c0013305:	5a                   	pop    edx
c0013306:	59                   	pop    ecx
c0013307:	68 b1 cb 02 c0       	push   0xc002cbb1
c001330c:	56                   	push   esi
c001330d:	e8 86 d6 fe ff       	call   c0000998 <strcat>
c0013312:	5d                   	pop    ebp
c0013313:	58                   	pop    eax
c0013314:	57                   	push   edi
c0013315:	56                   	push   esi
c0013316:	e8 7d d6 fe ff       	call   c0000998 <strcat>
c001331b:	83 c4 10             	add    esp,0x10
c001331e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013321:	3c 60                	cmp    al,0x60
c0013323:	7e 03                	jle    c0013328 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0013325:	83 e8 20             	sub    eax,0x20
c0013328:	88 04 24             	mov    BYTE PTR [esp],al
c001332b:	88 03                	mov    BYTE PTR [ebx],al
c001332d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013334:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c001333a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c001333e:	bf 03 00 00 00       	mov    edi,0x3
c0013343:	b8 03 00 00 00       	mov    eax,0x3
c0013348:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c001334b:	84 d2                	test   dl,dl
c001334d:	0f 84 91 00 00 00    	je     c00133e4 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0013353:	8d 4f 01             	lea    ecx,[edi+0x1]
c0013356:	80 fa 5c             	cmp    dl,0x5c
c0013359:	74 05                	je     c0013360 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c001335b:	80 fa 2f             	cmp    dl,0x2f
c001335e:	75 12                	jne    c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013360:	89 c5                	mov    ebp,eax
c0013362:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013367:	74 09                	je     c0013372 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013369:	40                   	inc    eax
c001336a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001336e:	89 cf                	mov    edi,ecx
c0013370:	eb d6                	jmp    c0013348 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0013372:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013377:	75 5b                	jne    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013379:	80 fa 2e             	cmp    dl,0x2e
c001337c:	75 56                	jne    c00133d4 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c001337e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013382:	74 19                	je     c001339d <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013384:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013389:	74 53                	je     c00133de <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001338b:	89 f9                	mov    ecx,edi
c001338d:	41                   	inc    ecx
c001338e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013391:	80 fa 2f             	cmp    dl,0x2f
c0013394:	74 f7                	je     c001338d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013396:	80 fa 5c             	cmp    dl,0x5c
c0013399:	74 f2                	je     c001338d <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001339b:	eb d1                	jmp    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001339d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00133a2:	74 3a                	je     c00133de <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00133a4:	83 f8 03             	cmp    eax,0x3
c00133a7:	74 c5                	je     c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133a9:	41                   	inc    ecx
c00133aa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00133ad:	80 fa 2f             	cmp    dl,0x2f
c00133b0:	74 f7                	je     c00133a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133b2:	80 fa 5c             	cmp    dl,0x5c
c00133b5:	74 f2                	je     c00133a9 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00133b7:	48                   	dec    eax
c00133b8:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133bc:	75 06                	jne    c00133c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133be:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133c2:	eb f3                	jmp    c00133b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00133c4:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133c8:	74 07                	je     c00133d1 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00133ca:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133ce:	48                   	dec    eax
c00133cf:	eb f3                	jmp    c00133c4 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00133d1:	40                   	inc    eax
c00133d2:	eb 9a                	jmp    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d4:	80 fa 2f             	cmp    dl,0x2f
c00133d7:	74 95                	je     c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133d9:	80 fa 5c             	cmp    dl,0x5c
c00133dc:	74 90                	je     c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133de:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00133e1:	40                   	inc    eax
c00133e2:	eb 8a                	jmp    c001336e <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00133e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00133e8:	83 ec 0c             	sub    esp,0xc
c00133eb:	53                   	push   ebx
c00133ec:	e8 c7 d3 fe ff       	call   c00007b8 <strlen>
c00133f1:	83 c4 10             	add    esp,0x10
c00133f4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c00133f9:	75 26                	jne    c0013421 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c00133fb:	83 ec 0c             	sub    esp,0xc
c00133fe:	53                   	push   ebx
c00133ff:	e8 b4 d3 fe ff       	call   c00007b8 <strlen>
c0013404:	83 c4 10             	add    esp,0x10
c0013407:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001340c:	74 26                	je     c0013434 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	53                   	push   ebx
c0013412:	e8 a1 d3 fe ff       	call   c00007b8 <strlen>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001341f:	eb c7                	jmp    c00133e8 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013421:	83 ec 0c             	sub    esp,0xc
c0013424:	53                   	push   ebx
c0013425:	e8 8e d3 fe ff       	call   c00007b8 <strlen>
c001342a:	83 c4 10             	add    esp,0x10
c001342d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013432:	74 c7                	je     c00133fb <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0013434:	81 c4 0c 04 00 00    	add    esp,0x40c
c001343a:	5b                   	pop    ebx
c001343b:	5e                   	pop    esi
c001343c:	5f                   	pop    edi
c001343d:	5d                   	pop    ebp
c001343e:	c3                   	ret    
c001343f:	90                   	nop

c0013440 <File::File(char const*, Process*)>:
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013447:	83 ec 08             	sub    esp,0x8
c001344a:	6a 00                	push   0x0
c001344c:	50                   	push   eax
c001344d:	e8 46 e2 ff ff       	call   c0011698 <UnixFile::UnixFile(int)>
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c001345a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001345e:	89 10                	mov    DWORD PTR [eax],edx
c0013460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013464:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001346a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001346e:	83 c0 0d             	add    eax,0xd
c0013471:	83 ec 04             	sub    esp,0x4
c0013474:	52                   	push   edx
c0013475:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013479:	50                   	push   eax
c001347a:	e8 17 fe ff ff       	call   c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>
c001347f:	83 c4 10             	add    esp,0x10
c0013482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013486:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013489:	8d 50 bf             	lea    edx,[eax-0x41]
c001348c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013490:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001349e:	90                   	nop
c001349f:	83 c4 0c             	add    esp,0xc
c00134a2:	c3                   	ret    
c00134a3:	90                   	nop

c00134a4 <File::open(FileOpenMode)>:
c00134a4:	53                   	push   ebx
c00134a5:	b8 0b 00 00 00       	mov    eax,0xb
c00134aa:	83 ec 08             	sub    esp,0x8
c00134ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00134b1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00134b8:	80 fa 19             	cmp    dl,0x19
c00134bb:	77 40                	ja     c00134fd <File::open(FileOpenMode)+0x59>
c00134bd:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c00134c4:	85 d2                	test   edx,edx
c00134c6:	74 35                	je     c00134fd <File::open(FileOpenMode)+0x59>
c00134c8:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134ce:	85 d2                	test   edx,edx
c00134d0:	74 2b                	je     c00134fd <File::open(FileOpenMode)+0x59>
c00134d2:	b8 06 00 00 00       	mov    eax,0x6
c00134d7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00134db:	75 20                	jne    c00134fd <File::open(FileOpenMode)+0x59>
c00134dd:	8b 02                	mov    eax,DWORD PTR [edx]
c00134df:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00134e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00134e9:	51                   	push   ecx
c00134ea:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00134ed:	51                   	push   ecx
c00134ee:	52                   	push   edx
c00134ef:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00134f2:	83 c4 10             	add    esp,0x10
c00134f5:	85 c0                	test   eax,eax
c00134f7:	75 04                	jne    c00134fd <File::open(FileOpenMode)+0x59>
c00134f9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00134fd:	83 c4 08             	add    esp,0x8
c0013500:	5b                   	pop    ebx
c0013501:	c3                   	ret    

c0013502 <File::close()>:
c0013502:	53                   	push   ebx
c0013503:	b8 0b 00 00 00       	mov    eax,0xb
c0013508:	83 ec 08             	sub    esp,0x8
c001350b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001350f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013516:	80 fa 19             	cmp    dl,0x19
c0013519:	77 41                	ja     c001355c <File::close()+0x5a>
c001351b:	8b 1c 95 60 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013522:	85 db                	test   ebx,ebx
c0013524:	74 36                	je     c001355c <File::close()+0x5a>
c0013526:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001352d:	74 2d                	je     c001355c <File::close()+0x5a>
c001352f:	b8 05 00 00 00       	mov    eax,0x5
c0013534:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013538:	74 22                	je     c001355c <File::close()+0x5a>
c001353a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001353e:	8b 04 95 60 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ba0]
c0013545:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001354b:	53                   	push   ebx
c001354c:	53                   	push   ebx
c001354d:	8b 10                	mov    edx,DWORD PTR [eax]
c001354f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013555:	50                   	push   eax
c0013556:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013559:	83 c4 10             	add    esp,0x10
c001355c:	83 c4 08             	add    esp,0x8
c001355f:	5b                   	pop    ebx
c0013560:	c3                   	ret    
c0013561:	90                   	nop

c0013562 <File::seek(unsigned long long)>:
c0013562:	56                   	push   esi
c0013563:	53                   	push   ebx
c0013564:	b8 0b 00 00 00       	mov    eax,0xb
c0013569:	51                   	push   ecx
c001356a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001356e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0013572:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013579:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001357d:	80 fa 19             	cmp    dl,0x19
c0013580:	77 31                	ja     c00135b3 <File::seek(unsigned long long)+0x51>
c0013582:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013589:	85 d2                	test   edx,edx
c001358b:	74 26                	je     c00135b3 <File::seek(unsigned long long)+0x51>
c001358d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013593:	85 d2                	test   edx,edx
c0013595:	74 1c                	je     c00135b3 <File::seek(unsigned long long)+0x51>
c0013597:	b8 05 00 00 00       	mov    eax,0x5
c001359c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00135a0:	74 11                	je     c00135b3 <File::seek(unsigned long long)+0x51>
c00135a2:	8b 02                	mov    eax,DWORD PTR [edx]
c00135a4:	53                   	push   ebx
c00135a5:	51                   	push   ecx
c00135a6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00135ac:	52                   	push   edx
c00135ad:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	5a                   	pop    edx
c00135b4:	5b                   	pop    ebx
c00135b5:	5e                   	pop    esi
c00135b6:	c3                   	ret    
c00135b7:	90                   	nop

c00135b8 <File::tell(unsigned long long*)>:
c00135b8:	83 ec 0c             	sub    esp,0xc
c00135bb:	b8 0b 00 00 00       	mov    eax,0xb
c00135c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00135c4:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00135cb:	80 fa 19             	cmp    dl,0x19
c00135ce:	77 34                	ja     c0013604 <File::tell(unsigned long long*)+0x4c>
c00135d0:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c00135d7:	85 d2                	test   edx,edx
c00135d9:	74 29                	je     c0013604 <File::tell(unsigned long long*)+0x4c>
c00135db:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135e1:	85 d2                	test   edx,edx
c00135e3:	74 1f                	je     c0013604 <File::tell(unsigned long long*)+0x4c>
c00135e5:	b8 05 00 00 00       	mov    eax,0x5
c00135ea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00135ee:	74 14                	je     c0013604 <File::tell(unsigned long long*)+0x4c>
c00135f0:	50                   	push   eax
c00135f1:	8b 02                	mov    eax,DWORD PTR [edx]
c00135f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00135f7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00135fd:	52                   	push   edx
c00135fe:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013601:	83 c4 10             	add    esp,0x10
c0013604:	83 c4 0c             	add    esp,0xc
c0013607:	c3                   	ret    

c0013608 <File::rewind()>:
c0013608:	83 ec 10             	sub    esp,0x10
c001360b:	6a 00                	push   0x0
c001360d:	6a 00                	push   0x0
c001360f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013613:	e8 4a ff ff ff       	call   c0013562 <File::seek(unsigned long long)>
c0013618:	83 c4 1c             	add    esp,0x1c
c001361b:	c3                   	ret    

c001361c <File::unlink()>:
c001361c:	83 ec 0c             	sub    esp,0xc
c001361f:	b8 0b 00 00 00       	mov    eax,0xb
c0013624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013628:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001362f:	80 f9 19             	cmp    cl,0x19
c0013632:	77 2f                	ja     c0013663 <File::unlink()+0x47>
c0013634:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c001363b:	85 c9                	test   ecx,ecx
c001363d:	74 24                	je     c0013663 <File::unlink()+0x47>
c001363f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013645:	85 c9                	test   ecx,ecx
c0013647:	74 1a                	je     c0013663 <File::unlink()+0x47>
c0013649:	b8 06 00 00 00       	mov    eax,0x6
c001364e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013652:	75 0f                	jne    c0013663 <File::unlink()+0x47>
c0013654:	83 c2 0d             	add    edx,0xd
c0013657:	50                   	push   eax
c0013658:	50                   	push   eax
c0013659:	8b 01                	mov    eax,DWORD PTR [ecx]
c001365b:	52                   	push   edx
c001365c:	51                   	push   ecx
c001365d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013660:	83 c4 10             	add    esp,0x10
c0013663:	83 c4 0c             	add    esp,0xc
c0013666:	c3                   	ret    
c0013667:	90                   	nop

c0013668 <File::rename(char const*)>:
c0013668:	83 ec 0c             	sub    esp,0xc
c001366b:	b8 0b 00 00 00       	mov    eax,0xb
c0013670:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013674:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001367b:	80 f9 19             	cmp    cl,0x19
c001367e:	77 32                	ja     c00136b2 <File::rename(char const*)+0x4a>
c0013680:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013687:	85 c9                	test   ecx,ecx
c0013689:	74 27                	je     c00136b2 <File::rename(char const*)+0x4a>
c001368b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013691:	85 c9                	test   ecx,ecx
c0013693:	74 1d                	je     c00136b2 <File::rename(char const*)+0x4a>
c0013695:	b8 06 00 00 00       	mov    eax,0x6
c001369a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001369e:	75 12                	jne    c00136b2 <File::rename(char const*)+0x4a>
c00136a0:	83 c2 0d             	add    edx,0xd
c00136a3:	50                   	push   eax
c00136a4:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136aa:	52                   	push   edx
c00136ab:	51                   	push   ecx
c00136ac:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00136af:	83 c4 10             	add    esp,0x10
c00136b2:	83 c4 0c             	add    esp,0xc
c00136b5:	c3                   	ret    

c00136b6 <File::chfatattr(unsigned char, unsigned char)>:
c00136b6:	57                   	push   edi
c00136b7:	b8 0b 00 00 00       	mov    eax,0xb
c00136bc:	56                   	push   esi
c00136bd:	53                   	push   ebx
c00136be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136cd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00136d1:	80 f9 19             	cmp    cl,0x19
c00136d4:	77 37                	ja     c001370d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136d6:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c00136dd:	85 c9                	test   ecx,ecx
c00136df:	74 2c                	je     c001370d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e7:	85 c9                	test   ecx,ecx
c00136e9:	74 22                	je     c001370d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136eb:	b8 06 00 00 00       	mov    eax,0x6
c00136f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136f4:	75 17                	jne    c001370d <File::chfatattr(unsigned char, unsigned char)+0x57>
c00136f6:	8b 39                	mov    edi,DWORD PTR [ecx]
c00136f8:	89 f0                	mov    eax,esi
c00136fa:	83 c2 0d             	add    edx,0xd
c00136fd:	0f b6 f0             	movzx  esi,al
c0013700:	0f b6 db             	movzx  ebx,bl
c0013703:	56                   	push   esi
c0013704:	53                   	push   ebx
c0013705:	52                   	push   edx
c0013706:	51                   	push   ecx
c0013707:	ff 57 34             	call   DWORD PTR [edi+0x34]
c001370a:	83 c4 10             	add    esp,0x10
c001370d:	5b                   	pop    ebx
c001370e:	5e                   	pop    esi
c001370f:	5f                   	pop    edi
c0013710:	c3                   	ret    
c0013711:	90                   	nop

c0013712 <File::exists()>:
c0013712:	83 ec 0c             	sub    esp,0xc
c0013715:	31 c0                	xor    eax,eax
c0013717:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001371b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013722:	80 f9 19             	cmp    cl,0x19
c0013725:	77 24                	ja     c001374b <File::exists()+0x39>
c0013727:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c001372e:	85 c9                	test   ecx,ecx
c0013730:	74 19                	je     c001374b <File::exists()+0x39>
c0013732:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013738:	85 c9                	test   ecx,ecx
c001373a:	74 0f                	je     c001374b <File::exists()+0x39>
c001373c:	83 c2 0d             	add    edx,0xd
c001373f:	50                   	push   eax
c0013740:	50                   	push   eax
c0013741:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013743:	52                   	push   edx
c0013744:	51                   	push   ecx
c0013745:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	83 c4 0c             	add    esp,0xc
c001374e:	c3                   	ret    
c001374f:	90                   	nop

c0013750 <File::stat(unsigned long long*, bool*)>:
c0013750:	56                   	push   esi
c0013751:	53                   	push   ebx
c0013752:	50                   	push   eax
c0013753:	b8 0b 00 00 00       	mov    eax,0xb
c0013758:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001375c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013760:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013767:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001376b:	80 f9 19             	cmp    cl,0x19
c001376e:	77 3d                	ja     c00137ad <File::stat(unsigned long long*, bool*)+0x5d>
c0013770:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013777:	85 c9                	test   ecx,ecx
c0013779:	74 32                	je     c00137ad <File::stat(unsigned long long*, bool*)+0x5d>
c001377b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013781:	85 c9                	test   ecx,ecx
c0013783:	74 28                	je     c00137ad <File::stat(unsigned long long*, bool*)+0x5d>
c0013785:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013787:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001378b:	74 13                	je     c00137a0 <File::stat(unsigned long long*, bool*)+0x50>
c001378d:	83 ec 04             	sub    esp,0x4
c0013790:	56                   	push   esi
c0013791:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013797:	51                   	push   ecx
c0013798:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001379b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001379e:	eb 0a                	jmp    c00137aa <File::stat(unsigned long long*, bool*)+0x5a>
c00137a0:	53                   	push   ebx
c00137a1:	83 c2 0d             	add    edx,0xd
c00137a4:	56                   	push   esi
c00137a5:	52                   	push   edx
c00137a6:	51                   	push   ecx
c00137a7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00137aa:	83 c4 10             	add    esp,0x10
c00137ad:	5a                   	pop    edx
c00137ae:	5b                   	pop    ebx
c00137af:	5e                   	pop    esi
c00137b0:	c3                   	ret    

c00137b1 <Fs::setcwd(Process*, char*)>:
c00137b1:	55                   	push   ebp
c00137b2:	57                   	push   edi
c00137b3:	56                   	push   esi
c00137b4:	53                   	push   ebx
c00137b5:	81 ec 20 02 00 00    	sub    esp,0x220
c00137bb:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00137c2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00137c8:	57                   	push   edi
c00137c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00137d0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00137d4:	56                   	push   esi
c00137d5:	e8 bc fa ff ff       	call   c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>
c00137da:	89 34 24             	mov    DWORD PTR [esp],esi
c00137dd:	e8 d6 cf fe ff       	call   c00007b8 <strlen>
c00137e2:	83 c4 10             	add    esp,0x10
c00137e5:	83 f8 02             	cmp    eax,0x2
c00137e8:	77 17                	ja     c0013801 <Fs::setcwd(Process*, char*)+0x50>
c00137ea:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00137ef:	83 e8 41             	sub    eax,0x41
c00137f2:	83 f8 19             	cmp    eax,0x19
c00137f5:	76 24                	jbe    c001381b <Fs::setcwd(Process*, char*)+0x6a>
c00137f7:	b8 03 00 00 00       	mov    eax,0x3
c00137fc:	e9 e0 00 00 00       	jmp    c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c0013801:	83 ec 0c             	sub    esp,0xc
c0013804:	56                   	push   esi
c0013805:	e8 ae cf fe ff       	call   c00007b8 <strlen>
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	83 f8 03             	cmp    eax,0x3
c0013810:	75 34                	jne    c0013846 <Fs::setcwd(Process*, char*)+0x95>
c0013812:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013817:	75 2d                	jne    c0013846 <Fs::setcwd(Process*, char*)+0x95>
c0013819:	eb cf                	jmp    c00137ea <Fs::setcwd(Process*, char*)+0x39>
c001381b:	8b 14 85 60 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ba0]
c0013822:	b8 05 00 00 00       	mov    eax,0x5
c0013827:	85 d2                	test   edx,edx
c0013829:	0f 84 b2 00 00 00    	je     c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c001382f:	b8 06 00 00 00       	mov    eax,0x6
c0013834:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c001383b:	0f 85 92 00 00 00    	jne    c00138d3 <Fs::setcwd(Process*, char*)+0x122>
c0013841:	e9 9b 00 00 00       	jmp    c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c0013846:	83 ec 0c             	sub    esp,0xc
c0013849:	68 14 01 00 00       	push   0x114
c001384e:	e8 d7 c0 ff ff       	call   c000f92a <malloc>
c0013853:	83 c4 0c             	add    esp,0xc
c0013856:	89 c3                	mov    ebx,eax
c0013858:	55                   	push   ebp
c0013859:	56                   	push   esi
c001385a:	50                   	push   eax
c001385b:	e8 e0 fb ff ff       	call   c0013440 <File::File(char const*, Process*)>
c0013860:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0013865:	83 c4 0c             	add    esp,0xc
c0013868:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001386c:	50                   	push   eax
c001386d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013871:	50                   	push   eax
c0013872:	53                   	push   ebx
c0013873:	e8 d8 fe ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c0013878:	83 c4 10             	add    esp,0x10
c001387b:	83 f8 02             	cmp    eax,0x2
c001387e:	74 04                	je     c0013884 <Fs::setcwd(Process*, char*)+0xd3>
c0013880:	85 c0                	test   eax,eax
c0013882:	74 1c                	je     c00138a0 <Fs::setcwd(Process*, char*)+0xef>
c0013884:	b8 01 00 00 00       	mov    eax,0x1
c0013889:	85 db                	test   ebx,ebx
c001388b:	74 54                	je     c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c001388d:	83 ec 0c             	sub    esp,0xc
c0013890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013892:	53                   	push   ebx
c0013893:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013896:	83 c4 10             	add    esp,0x10
c0013899:	b8 01 00 00 00       	mov    eax,0x1
c001389e:	eb 41                	jmp    c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c00138a0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00138a5:	75 1c                	jne    c00138c3 <Fs::setcwd(Process*, char*)+0x112>
c00138a7:	b8 02 00 00 00       	mov    eax,0x2
c00138ac:	85 db                	test   ebx,ebx
c00138ae:	74 31                	je     c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c00138b0:	83 ec 0c             	sub    esp,0xc
c00138b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b5:	53                   	push   ebx
c00138b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	b8 02 00 00 00       	mov    eax,0x2
c00138c1:	eb 1e                	jmp    c00138e1 <Fs::setcwd(Process*, char*)+0x130>
c00138c3:	85 db                	test   ebx,ebx
c00138c5:	74 0c                	je     c00138d3 <Fs::setcwd(Process*, char*)+0x122>
c00138c7:	83 ec 0c             	sub    esp,0xc
c00138ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138cc:	53                   	push   ebx
c00138cd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138d0:	83 c4 10             	add    esp,0x10
c00138d3:	50                   	push   eax
c00138d4:	50                   	push   eax
c00138d5:	56                   	push   esi
c00138d6:	57                   	push   edi
c00138d7:	e8 7c cf fe ff       	call   c0000858 <strcpy>
c00138dc:	83 c4 10             	add    esp,0x10
c00138df:	31 c0                	xor    eax,eax
c00138e1:	81 c4 1c 02 00 00    	add    esp,0x21c
c00138e7:	5b                   	pop    ebx
c00138e8:	5e                   	pop    esi
c00138e9:	5f                   	pop    edi
c00138ea:	5d                   	pop    ebp
c00138eb:	c3                   	ret    

c00138ec <Directory::Directory(char const*, Process*)>:
c00138ec:	83 ec 0c             	sub    esp,0xc
c00138ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138f3:	83 ec 08             	sub    esp,0x8
c00138f6:	6a 00                	push   0x0
c00138f8:	50                   	push   eax
c00138f9:	e8 9a dd ff ff       	call   c0011698 <UnixFile::UnixFile(int)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0013906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390a:	89 10                	mov    DWORD PTR [eax],edx
c001390c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013910:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001391a:	83 c0 0d             	add    eax,0xd
c001391d:	83 ec 04             	sub    esp,0x4
c0013920:	52                   	push   edx
c0013921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013925:	50                   	push   eax
c0013926:	e8 6b f9 ff ff       	call   c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013932:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013935:	8d 50 bf             	lea    edx,[eax-0x41]
c0013938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001393c:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013946:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001394a:	90                   	nop
c001394b:	83 c4 0c             	add    esp,0xc
c001394e:	c3                   	ret    
c001394f:	90                   	nop

c0013950 <Directory::open()>:
c0013950:	53                   	push   ebx
c0013951:	b8 0b 00 00 00       	mov    eax,0xb
c0013956:	83 ec 08             	sub    esp,0x8
c0013959:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001395d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013964:	80 fa 19             	cmp    dl,0x19
c0013967:	77 3d                	ja     c00139a6 <Directory::open()+0x56>
c0013969:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013970:	85 d2                	test   edx,edx
c0013972:	74 32                	je     c00139a6 <Directory::open()+0x56>
c0013974:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001397a:	85 d2                	test   edx,edx
c001397c:	74 28                	je     c00139a6 <Directory::open()+0x56>
c001397e:	b8 06 00 00 00       	mov    eax,0x6
c0013983:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013987:	75 1d                	jne    c00139a6 <Directory::open()+0x56>
c0013989:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001398f:	50                   	push   eax
c0013990:	8b 02                	mov    eax,DWORD PTR [edx]
c0013992:	51                   	push   ecx
c0013993:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013996:	51                   	push   ecx
c0013997:	52                   	push   edx
c0013998:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c001399b:	83 c4 10             	add    esp,0x10
c001399e:	85 c0                	test   eax,eax
c00139a0:	75 04                	jne    c00139a6 <Directory::open()+0x56>
c00139a2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00139a6:	83 c4 08             	add    esp,0x8
c00139a9:	5b                   	pop    ebx
c00139aa:	c3                   	ret    
c00139ab:	90                   	nop

c00139ac <Directory::close()>:
c00139ac:	53                   	push   ebx
c00139ad:	b8 0b 00 00 00       	mov    eax,0xb
c00139b2:	83 ec 08             	sub    esp,0x8
c00139b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00139b9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00139c0:	80 fa 19             	cmp    dl,0x19
c00139c3:	77 41                	ja     c0013a06 <Directory::close()+0x5a>
c00139c5:	8b 1c 95 60 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0ba0]
c00139cc:	85 db                	test   ebx,ebx
c00139ce:	74 36                	je     c0013a06 <Directory::close()+0x5a>
c00139d0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00139d7:	74 2d                	je     c0013a06 <Directory::close()+0x5a>
c00139d9:	b8 05 00 00 00       	mov    eax,0x5
c00139de:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00139e2:	74 22                	je     c0013a06 <Directory::close()+0x5a>
c00139e4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00139e8:	8b 04 95 60 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ba0]
c00139ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00139f5:	53                   	push   ebx
c00139f6:	53                   	push   ebx
c00139f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00139f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00139ff:	50                   	push   eax
c0013a00:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013a03:	83 c4 10             	add    esp,0x10
c0013a06:	83 c4 08             	add    esp,0x8
c0013a09:	5b                   	pop    ebx
c0013a0a:	c3                   	ret    
c0013a0b:	90                   	nop

c0013a0c <Directory::unlink()>:
c0013a0c:	83 ec 0c             	sub    esp,0xc
c0013a0f:	b8 0b 00 00 00       	mov    eax,0xb
c0013a14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a18:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a1f:	80 f9 19             	cmp    cl,0x19
c0013a22:	77 2f                	ja     c0013a53 <Directory::unlink()+0x47>
c0013a24:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013a2b:	85 c9                	test   ecx,ecx
c0013a2d:	74 24                	je     c0013a53 <Directory::unlink()+0x47>
c0013a2f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a35:	85 c9                	test   ecx,ecx
c0013a37:	74 1a                	je     c0013a53 <Directory::unlink()+0x47>
c0013a39:	b8 06 00 00 00       	mov    eax,0x6
c0013a3e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a42:	75 0f                	jne    c0013a53 <Directory::unlink()+0x47>
c0013a44:	83 c2 0d             	add    edx,0xd
c0013a47:	50                   	push   eax
c0013a48:	50                   	push   eax
c0013a49:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a4b:	52                   	push   edx
c0013a4c:	51                   	push   ecx
c0013a4d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013a50:	83 c4 10             	add    esp,0x10
c0013a53:	83 c4 0c             	add    esp,0xc
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop

c0013a58 <Directory::rename(char const*)>:
c0013a58:	83 ec 0c             	sub    esp,0xc
c0013a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0013a60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a64:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a6b:	80 f9 19             	cmp    cl,0x19
c0013a6e:	77 32                	ja     c0013aa2 <Directory::rename(char const*)+0x4a>
c0013a70:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013a77:	85 c9                	test   ecx,ecx
c0013a79:	74 27                	je     c0013aa2 <Directory::rename(char const*)+0x4a>
c0013a7b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a81:	85 c9                	test   ecx,ecx
c0013a83:	74 1d                	je     c0013aa2 <Directory::rename(char const*)+0x4a>
c0013a85:	b8 06 00 00 00       	mov    eax,0x6
c0013a8a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a8e:	75 12                	jne    c0013aa2 <Directory::rename(char const*)+0x4a>
c0013a90:	83 c2 0d             	add    edx,0xd
c0013a93:	50                   	push   eax
c0013a94:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a9a:	52                   	push   edx
c0013a9b:	51                   	push   ecx
c0013a9c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a9f:	83 c4 10             	add    esp,0x10
c0013aa2:	83 c4 0c             	add    esp,0xc
c0013aa5:	c3                   	ret    

c0013aa6 <Directory::exists()>:
c0013aa6:	83 ec 0c             	sub    esp,0xc
c0013aa9:	31 c0                	xor    eax,eax
c0013aab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aaf:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ab6:	80 f9 19             	cmp    cl,0x19
c0013ab9:	77 24                	ja     c0013adf <Directory::exists()+0x39>
c0013abb:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013ac2:	85 c9                	test   ecx,ecx
c0013ac4:	74 19                	je     c0013adf <Directory::exists()+0x39>
c0013ac6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013acc:	85 c9                	test   ecx,ecx
c0013ace:	74 0f                	je     c0013adf <Directory::exists()+0x39>
c0013ad0:	83 c2 0d             	add    edx,0xd
c0013ad3:	50                   	push   eax
c0013ad4:	50                   	push   eax
c0013ad5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad7:	52                   	push   edx
c0013ad8:	51                   	push   ecx
c0013ad9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	83 c4 0c             	add    esp,0xc
c0013ae2:	c3                   	ret    
c0013ae3:	90                   	nop

c0013ae4 <Directory::read(dirent*)>:
c0013ae4:	83 ec 1c             	sub    esp,0x1c
c0013ae7:	b8 0b 00 00 00       	mov    eax,0xb
c0013aec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013af0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013af7:	80 fa 19             	cmp    dl,0x19
c0013afa:	77 30                	ja     c0013b2c <Directory::read(dirent*)+0x48>
c0013afc:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013b03:	85 d2                	test   edx,edx
c0013b05:	74 25                	je     c0013b2c <Directory::read(dirent*)+0x48>
c0013b07:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013b0e:	74 1c                	je     c0013b2c <Directory::read(dirent*)+0x48>
c0013b10:	83 ec 0c             	sub    esp,0xc
c0013b13:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b15:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013b19:	52                   	push   edx
c0013b1a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013b1e:	6a 00                	push   0x0
c0013b20:	68 10 01 00 00       	push   0x110
c0013b25:	51                   	push   ecx
c0013b26:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013b29:	83 c4 20             	add    esp,0x20
c0013b2c:	83 c4 1c             	add    esp,0x1c
c0013b2f:	c3                   	ret    

c0013b30 <Directory::create()>:
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	b8 0b 00 00 00       	mov    eax,0xb
c0013b38:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b3c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b43:	80 f9 19             	cmp    cl,0x19
c0013b46:	77 2f                	ja     c0013b77 <Directory::create()+0x47>
c0013b48:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013b4f:	85 c9                	test   ecx,ecx
c0013b51:	74 24                	je     c0013b77 <Directory::create()+0x47>
c0013b53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b59:	85 c9                	test   ecx,ecx
c0013b5b:	74 1a                	je     c0013b77 <Directory::create()+0x47>
c0013b5d:	b8 06 00 00 00       	mov    eax,0x6
c0013b62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b66:	75 0f                	jne    c0013b77 <Directory::create()+0x47>
c0013b68:	83 c2 0d             	add    edx,0xd
c0013b6b:	50                   	push   eax
c0013b6c:	50                   	push   eax
c0013b6d:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b6f:	52                   	push   edx
c0013b70:	51                   	push   ecx
c0013b71:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013b74:	83 c4 10             	add    esp,0x10
c0013b77:	83 c4 0c             	add    esp,0xc
c0013b7a:	c3                   	ret    
c0013b7b:	90                   	nop

c0013b7c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013b7c:	b8 0a 00 00 00       	mov    eax,0xa
c0013b81:	c3                   	ret    

c0013b82 <Bus::Bus(char const*)>:
c0013b82:	83 ec 0c             	sub    esp,0xc
c0013b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b89:	83 ec 08             	sub    esp,0x8
c0013b8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b90:	50                   	push   eax
c0013b91:	e8 70 09 00 00       	call   c0014506 <Device::Device(char const*)>
c0013b96:	83 c4 10             	add    esp,0x10
c0013b99:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c0013b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba2:	89 10                	mov    DWORD PTR [eax],edx
c0013ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba8:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013bb2:	90                   	nop
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <Bus::~Bus()>:
c0013bb8:	83 ec 0c             	sub    esp,0xc
c0013bbb:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c0013bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc4:	89 10                	mov    DWORD PTR [eax],edx
c0013bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bca:	83 ec 0c             	sub    esp,0xc
c0013bcd:	50                   	push   eax
c0013bce:	e8 15 06 00 00       	call   c00141e8 <Device::~Device()>
c0013bd3:	83 c4 10             	add    esp,0x10
c0013bd6:	90                   	nop
c0013bd7:	83 c4 0c             	add    esp,0xc
c0013bda:	c3                   	ret    
c0013bdb:	90                   	nop

c0013bdc <Bus::~Bus()>:
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	83 ec 0c             	sub    esp,0xc
c0013be2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013be6:	e8 cd ff ff ff       	call   c0013bb8 <Bus::~Bus()>
c0013beb:	83 c4 10             	add    esp,0x10
c0013bee:	83 ec 08             	sub    esp,0x8
c0013bf1:	68 58 01 00 00       	push   0x158
c0013bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bfa:	e8 02 f2 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0013bff:	83 c4 10             	add    esp,0x10
c0013c02:	83 c4 0c             	add    esp,0xc
c0013c05:	c3                   	ret    

c0013c06 <Buzzer::Buzzer(char const*)>:
c0013c06:	83 ec 0c             	sub    esp,0xc
c0013c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0d:	83 ec 08             	sub    esp,0x8
c0013c10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c14:	50                   	push   eax
c0013c15:	e8 ec 08 00 00       	call   c0014506 <Device::Device(char const*)>
c0013c1a:	83 c4 10             	add    esp,0x10
c0013c1d:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0013c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c26:	89 10                	mov    DWORD PTR [eax],edx
c0013c28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c2c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c3a:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013c44:	90                   	nop
c0013c45:	83 c4 0c             	add    esp,0xc
c0013c48:	c3                   	ret    
c0013c49:	90                   	nop

c0013c4a <Buzzer::~Buzzer()>:
c0013c4a:	83 ec 0c             	sub    esp,0xc
c0013c4d:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0013c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c56:	89 10                	mov    DWORD PTR [eax],edx
c0013c58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5c:	83 ec 0c             	sub    esp,0xc
c0013c5f:	50                   	push   eax
c0013c60:	e8 83 05 00 00       	call   c00141e8 <Device::~Device()>
c0013c65:	83 c4 10             	add    esp,0x10
c0013c68:	90                   	nop
c0013c69:	83 c4 0c             	add    esp,0xc
c0013c6c:	c3                   	ret    
c0013c6d:	90                   	nop

c0013c6e <Buzzer::~Buzzer()>:
c0013c6e:	83 ec 0c             	sub    esp,0xc
c0013c71:	83 ec 0c             	sub    esp,0xc
c0013c74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c78:	e8 cd ff ff ff       	call   c0013c4a <Buzzer::~Buzzer()>
c0013c7d:	83 c4 10             	add    esp,0x10
c0013c80:	83 ec 08             	sub    esp,0x8
c0013c83:	68 5c 01 00 00       	push   0x15c
c0013c88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c8c:	e8 70 f1 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0013c91:	83 c4 10             	add    esp,0x10
c0013c94:	83 c4 0c             	add    esp,0xc
c0013c97:	c3                   	ret    

c0013c98 <Buzzer::stop()>:
c0013c98:	83 ec 14             	sub    esp,0x14
c0013c9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c9f:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ca1:	6a 00                	push   0x0
c0013ca3:	50                   	push   eax
c0013ca4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ca7:	83 c4 1c             	add    esp,0x1c
c0013caa:	c3                   	ret    

c0013cab <beepThread(void*)>:
c0013cab:	53                   	push   ebx
c0013cac:	83 ec 08             	sub    esp,0x8
c0013caf:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0013cb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013cb8:	48                   	dec    eax
c0013cb9:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0013cbe:	75 01                	jne    c0013cc1 <beepThread(void*)+0x16>
c0013cc0:	fb                   	sti    
c0013cc1:	50                   	push   eax
c0013cc2:	50                   	push   eax
c0013cc3:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013cc8:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013cce:	52                   	push   edx
c0013ccf:	50                   	push   eax
c0013cd0:	e8 c2 aa 00 00       	call   c001e797 <nanoSleep(unsigned long long)>
c0013cd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cd8:	e8 bb ff ff ff       	call   c0013c98 <Buzzer::stop()>
c0013cdd:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013ce5:	83 c4 18             	add    esp,0x18
c0013ce8:	5b                   	pop    ebx
c0013ce9:	e9 a5 a9 00 00       	jmp    c001e693 <blockTask(TaskState)>

c0013cee <Buzzer::beep(int, int, bool)>:
c0013cee:	57                   	push   edi
c0013cef:	56                   	push   esi
c0013cf0:	53                   	push   ebx
c0013cf1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cf5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013cf9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cfd:	52                   	push   edx
c0013cfe:	52                   	push   edx
c0013cff:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d05:	56                   	push   esi
c0013d06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013d09:	83 c4 10             	add    esp,0x10
c0013d0c:	89 f8                	mov    eax,edi
c0013d0e:	84 c0                	test   al,al
c0013d10:	74 1f                	je     c0013d31 <Buzzer::beep(int, int, bool)+0x43>
c0013d12:	50                   	push   eax
c0013d13:	50                   	push   eax
c0013d14:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013d1a:	99                   	cdq    
c0013d1b:	52                   	push   edx
c0013d1c:	50                   	push   eax
c0013d1d:	e8 75 aa 00 00       	call   c001e797 <nanoSleep(unsigned long long)>
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013d29:	5b                   	pop    ebx
c0013d2a:	5e                   	pop    esi
c0013d2b:	5f                   	pop    edi
c0013d2c:	e9 67 ff ff ff       	jmp    c0013c98 <Buzzer::stop()>
c0013d31:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013d37:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0013d3c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013d44:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013d48:	c7 44 24 14 ab 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013cab
c0013d50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013d54:	5b                   	pop    ebx
c0013d55:	5e                   	pop    esi
c0013d56:	5f                   	pop    edi
c0013d57:	e9 f4 a4 00 00       	jmp    c001e250 <Process::createThread(void (*)(void*), void*, int)>

c0013d5c <User::loadClockSettings(int)>:
c0013d5c:	53                   	push   ebx
c0013d5d:	83 ec 14             	sub    esp,0x14
c0013d60:	68 14 01 00 00       	push   0x114
c0013d65:	e8 c0 bb ff ff       	call   c000f92a <malloc>
c0013d6a:	83 c4 0c             	add    esp,0xc
c0013d6d:	89 c3                	mov    ebx,eax
c0013d6f:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c0013d75:	68 90 b4 02 c0       	push   0xc002b490
c0013d7a:	50                   	push   eax
c0013d7b:	e8 c0 f6 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c0013d80:	58                   	pop    eax
c0013d81:	5a                   	pop    edx
c0013d82:	6a 01                	push   0x1
c0013d84:	53                   	push   ebx
c0013d85:	e8 1a f7 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c0013d8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d8d:	e8 70 f7 ff ff       	call   c0013502 <File::close()>
c0013d92:	83 c4 10             	add    esp,0x10
c0013d95:	85 db                	test   ebx,ebx
c0013d97:	74 0f                	je     c0013da8 <User::loadClockSettings(int)+0x4c>
c0013d99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013da2:	83 c4 08             	add    esp,0x8
c0013da5:	5b                   	pop    ebx
c0013da6:	ff e0                	jmp    eax
c0013da8:	83 c4 08             	add    esp,0x8
c0013dab:	5b                   	pop    ebx
c0013dac:	c3                   	ret    
c0013dad:	90                   	nop

c0013dae <Clock::Clock(char const*)>:
c0013dae:	83 ec 0c             	sub    esp,0xc
c0013db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013db5:	83 ec 08             	sub    esp,0x8
c0013db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dbc:	50                   	push   eax
c0013dbd:	e8 44 07 00 00       	call   c0014506 <Device::Device(char const*)>
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c0013dca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dce:	89 10                	mov    DWORD PTR [eax],edx
c0013dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013dd4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013dde:	90                   	nop
c0013ddf:	83 c4 0c             	add    esp,0xc
c0013de2:	c3                   	ret    
c0013de3:	90                   	nop

c0013de4 <Clock::~Clock()>:
c0013de4:	83 ec 0c             	sub    esp,0xc
c0013de7:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c0013dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df0:	89 10                	mov    DWORD PTR [eax],edx
c0013df2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013df6:	83 ec 0c             	sub    esp,0xc
c0013df9:	50                   	push   eax
c0013dfa:	e8 e9 03 00 00       	call   c00141e8 <Device::~Device()>
c0013dff:	83 c4 10             	add    esp,0x10
c0013e02:	90                   	nop
c0013e03:	83 c4 0c             	add    esp,0xc
c0013e06:	c3                   	ret    
c0013e07:	90                   	nop

c0013e08 <Clock::~Clock()>:
c0013e08:	83 ec 0c             	sub    esp,0xc
c0013e0b:	83 ec 0c             	sub    esp,0xc
c0013e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e12:	e8 cd ff ff ff       	call   c0013de4 <Clock::~Clock()>
c0013e17:	83 c4 10             	add    esp,0x10
c0013e1a:	83 ec 08             	sub    esp,0x8
c0013e1d:	68 58 01 00 00       	push   0x158
c0013e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e26:	e8 d6 ef ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0013e2b:	83 c4 10             	add    esp,0x10
c0013e2e:	83 c4 0c             	add    esp,0xc
c0013e31:	c3                   	ret    

c0013e32 <Clock::timeInSecondsLocal()>:
c0013e32:	53                   	push   ebx
c0013e33:	83 ec 14             	sub    esp,0x14
c0013e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013e3c:	50                   	push   eax
c0013e3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013e40:	0f b6 0d dc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efdc
c0013e47:	03 0d e0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efe0
c0013e4d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e53:	89 cb                	mov    ebx,ecx
c0013e55:	c1 fb 1f             	sar    ebx,0x1f
c0013e58:	01 c8                	add    eax,ecx
c0013e5a:	11 da                	adc    edx,ebx
c0013e5c:	83 c4 10             	add    esp,0x10
c0013e5f:	31 c9                	xor    ecx,ecx
c0013e61:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c0013e68:	74 05                	je     c0013e6f <Clock::timeInSecondsLocal()+0x3d>
c0013e6a:	b9 08 07 00 00       	mov    ecx,0x708
c0013e6f:	31 db                	xor    ebx,ebx
c0013e71:	01 c8                	add    eax,ecx
c0013e73:	11 da                	adc    edx,ebx
c0013e75:	83 c4 08             	add    esp,0x8
c0013e78:	5b                   	pop    ebx
c0013e79:	c3                   	ret    

c0013e7a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013e7a:	57                   	push   edi
c0013e7b:	56                   	push   esi
c0013e7c:	53                   	push   ebx
c0013e7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e8b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e8e:	0f b6 05 dc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002efdc
c0013e95:	03 05 e0 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efe0
c0013e9b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013ea1:	99                   	cdq    
c0013ea2:	29 c6                	sub    esi,eax
c0013ea4:	19 d7                	sbb    edi,edx
c0013ea6:	89 f0                	mov    eax,esi
c0013ea8:	89 fa                	mov    edx,edi
c0013eaa:	31 f6                	xor    esi,esi
c0013eac:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c0013eb3:	74 05                	je     c0013eba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013eb5:	be 08 07 00 00       	mov    esi,0x708
c0013eba:	31 ff                	xor    edi,edi
c0013ebc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013ec0:	29 f0                	sub    eax,esi
c0013ec2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ec6:	19 fa                	sbb    edx,edi
c0013ec8:	89 d8                	mov    eax,ebx
c0013eca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013ece:	5b                   	pop    ebx
c0013ecf:	5e                   	pop    esi
c0013ed0:	5f                   	pop    edi
c0013ed1:	ff e0                	jmp    eax

c0013ed3 <datetimeToSeconds(datetime_t)>:
c0013ed3:	55                   	push   ebp
c0013ed4:	57                   	push   edi
c0013ed5:	56                   	push   esi
c0013ed6:	53                   	push   ebx
c0013ed7:	83 ec 14             	sub    esp,0x14
c0013eda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013ede:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013ee2:	89 d3                	mov    ebx,edx
c0013ee4:	0f b6 c6             	movzx  eax,dh
c0013ee7:	c1 eb 10             	shr    ebx,0x10
c0013eea:	48                   	dec    eax
c0013eeb:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ef0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ef4:	0f b6 f5             	movzx  esi,ch
c0013ef7:	89 cf                	mov    edi,ecx
c0013ef9:	6b f6 3c             	imul   esi,esi,0x3c
c0013efc:	c1 ef 10             	shr    edi,0x10
c0013eff:	0f b6 c9             	movzx  ecx,cl
c0013f02:	89 f8                	mov    eax,edi
c0013f04:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f0a:	0f b6 f8             	movzx  edi,al
c0013f0d:	0f b6 d2             	movzx  edx,dl
c0013f10:	01 fe                	add    esi,edi
c0013f12:	01 f1                	add    ecx,esi
c0013f14:	0f b7 f3             	movzx  esi,bx
c0013f17:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013f1b:	c1 f9 1f             	sar    ecx,0x1f
c0013f1e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013f23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013f27:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013f2c:	8b 0c 8d 00 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b00]
c0013f33:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013f37:	76 29                	jbe    c0013f62 <datetimeToSeconds(datetime_t)+0x8f>
c0013f39:	f6 c3 03             	test   bl,0x3
c0013f3c:	75 24                	jne    c0013f62 <datetimeToSeconds(datetime_t)+0x8f>
c0013f3e:	31 d2                	xor    edx,edx
c0013f40:	bf 64 00 00 00       	mov    edi,0x64
c0013f45:	89 d8                	mov    eax,ebx
c0013f47:	66 f7 f7             	div    di
c0013f4a:	66 85 d2             	test   dx,dx
c0013f4d:	75 12                	jne    c0013f61 <datetimeToSeconds(datetime_t)+0x8e>
c0013f4f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013f55:	bf 90 01 00 00       	mov    edi,0x190
c0013f5a:	99                   	cdq    
c0013f5b:	f7 ff                	idiv   edi
c0013f5d:	85 d2                	test   edx,edx
c0013f5f:	75 01                	jne    c0013f62 <datetimeToSeconds(datetime_t)+0x8f>
c0013f61:	41                   	inc    ecx
c0013f62:	66 83 fb 46          	cmp    bx,0x46
c0013f66:	76 45                	jbe    c0013fad <datetimeToSeconds(datetime_t)+0xda>
c0013f68:	bb 46 00 00 00       	mov    ebx,0x46
c0013f6d:	bf 64 00 00 00       	mov    edi,0x64
c0013f72:	bd 90 01 00 00       	mov    ebp,0x190
c0013f77:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f7c:	f6 c3 03             	test   bl,0x3
c0013f7f:	75 23                	jne    c0013fa4 <datetimeToSeconds(datetime_t)+0xd1>
c0013f81:	89 d8                	mov    eax,ebx
c0013f83:	99                   	cdq    
c0013f84:	f7 ff                	idiv   edi
c0013f86:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f8b:	85 d2                	test   edx,edx
c0013f8d:	75 15                	jne    c0013fa4 <datetimeToSeconds(datetime_t)+0xd1>
c0013f8f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f95:	99                   	cdq    
c0013f96:	f7 fd                	idiv   ebp
c0013f98:	83 fa 01             	cmp    edx,0x1
c0013f9b:	19 c0                	sbb    eax,eax
c0013f9d:	f7 d0                	not    eax
c0013f9f:	05 6e 01 00 00       	add    eax,0x16e
c0013fa4:	01 c1                	add    ecx,eax
c0013fa6:	43                   	inc    ebx
c0013fa7:	39 f3                	cmp    ebx,esi
c0013fa9:	7c cc                	jl     c0013f77 <datetimeToSeconds(datetime_t)+0xa4>
c0013fab:	eb 35                	jmp    c0013fe2 <datetimeToSeconds(datetime_t)+0x10f>
c0013fad:	74 33                	je     c0013fe2 <datetimeToSeconds(datetime_t)+0x10f>
c0013faf:	b8 45 00 00 00       	mov    eax,0x45
c0013fb4:	89 c2                	mov    edx,eax
c0013fb6:	83 e2 03             	and    edx,0x3
c0013fb9:	39 f0                	cmp    eax,esi
c0013fbb:	7e 0f                	jle    c0013fcc <datetimeToSeconds(datetime_t)+0xf9>
c0013fbd:	83 fa 01             	cmp    edx,0x1
c0013fc0:	19 d2                	sbb    edx,edx
c0013fc2:	48                   	dec    eax
c0013fc3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013fca:	eb e8                	jmp    c0013fb4 <datetimeToSeconds(datetime_t)+0xe1>
c0013fcc:	b8 6d 01 00 00       	mov    eax,0x16d
c0013fd1:	85 d2                	test   edx,edx
c0013fd3:	75 0b                	jne    c0013fe0 <datetimeToSeconds(datetime_t)+0x10d>
c0013fd5:	66 83 fb 01          	cmp    bx,0x1
c0013fd9:	19 c0                	sbb    eax,eax
c0013fdb:	05 6e 01 00 00       	add    eax,0x16e
c0013fe0:	29 c1                	sub    ecx,eax
c0013fe2:	b8 80 51 01 00       	mov    eax,0x15180
c0013fe7:	f7 e9                	imul   ecx
c0013fe9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013fed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013ff1:	83 c4 14             	add    esp,0x14
c0013ff4:	5b                   	pop    ebx
c0013ff5:	5e                   	pop    esi
c0013ff6:	5f                   	pop    edi
c0013ff7:	5d                   	pop    ebp
c0013ff8:	c3                   	ret    
c0013ff9:	90                   	nop

c0013ffa <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013ffa:	57                   	push   edi
c0013ffb:	56                   	push   esi
c0013ffc:	53                   	push   ebx
c0013ffd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014001:	8b 06                	mov    eax,DWORD PTR [esi]
c0014003:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014006:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001400a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001400e:	e8 c0 fe ff ff       	call   c0013ed3 <datetimeToSeconds(datetime_t)>
c0014013:	59                   	pop    ecx
c0014014:	0f b6 0d dc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efdc
c001401b:	5b                   	pop    ebx
c001401c:	03 0d e0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efe0
c0014022:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014028:	89 cb                	mov    ebx,ecx
c001402a:	c1 fb 1f             	sar    ebx,0x1f
c001402d:	29 c8                	sub    eax,ecx
c001402f:	19 da                	sbb    edx,ebx
c0014031:	31 c9                	xor    ecx,ecx
c0014033:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c001403a:	74 05                	je     c0014041 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001403c:	b9 08 07 00 00       	mov    ecx,0x708
c0014041:	31 db                	xor    ebx,ebx
c0014043:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014047:	29 c8                	sub    eax,ecx
c0014049:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001404d:	19 da                	sbb    edx,ebx
c001404f:	89 f8                	mov    eax,edi
c0014051:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014055:	5b                   	pop    ebx
c0014056:	5e                   	pop    esi
c0014057:	5f                   	pop    edi
c0014058:	ff e0                	jmp    eax

c001405a <secondsToDatetime(unsigned long long)>:
c001405a:	55                   	push   ebp
c001405b:	57                   	push   edi
c001405c:	56                   	push   esi
c001405d:	53                   	push   ebx
c001405e:	83 ec 1c             	sub    esp,0x1c
c0014061:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014065:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014069:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001406d:	6a 00                	push   0x0
c001406f:	68 80 51 01 00       	push   0x15180
c0014074:	55                   	push   ebp
c0014075:	57                   	push   edi
c0014076:	e8 39 31 01 00       	call   c00271b4 <__udivdi3>
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014084:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014088:	6a 00                	push   0x0
c001408a:	68 80 51 01 00       	push   0x15180
c001408f:	55                   	push   ebp
c0014090:	57                   	push   edi
c0014091:	bf 10 0e 00 00       	mov    edi,0xe10
c0014096:	e8 19 32 01 00       	call   c00272b4 <__umoddi3>
c001409b:	83 c4 10             	add    esp,0x10
c001409e:	99                   	cdq    
c001409f:	f7 ff                	idiv   edi
c00140a1:	bf 3c 00 00 00       	mov    edi,0x3c
c00140a6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00140a9:	89 d0                	mov    eax,edx
c00140ab:	99                   	cdq    
c00140ac:	f7 ff                	idiv   edi
c00140ae:	85 db                	test   ebx,ebx
c00140b0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00140b3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00140b6:	79 11                	jns    c00140c9 <secondsToDatetime(unsigned long long)+0x6f>
c00140b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00140bc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00140c2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140c7:	eb 07                	jmp    c00140d0 <secondsToDatetime(unsigned long long)+0x76>
c00140c9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00140ce:	89 d8                	mov    eax,ebx
c00140d0:	bf b4 05 00 00       	mov    edi,0x5b4
c00140d5:	99                   	cdq    
c00140d6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00140db:	f7 f9                	idiv   ecx
c00140dd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00140e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00140e6:	31 d2                	xor    edx,edx
c00140e8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00140f0:	01 c3                	add    ebx,eax
c00140f2:	89 d8                	mov    eax,ebx
c00140f4:	f7 f1                	div    ecx
c00140f6:	31 d2                	xor    edx,edx
c00140f8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00140fb:	89 d8                	mov    eax,ebx
c00140fd:	f7 f7                	div    edi
c00140ff:	31 d2                	xor    edx,edx
c0014101:	29 c1                	sub    ecx,eax
c0014103:	89 d8                	mov    eax,ebx
c0014105:	f7 f5                	div    ebp
c0014107:	bd 6d 01 00 00       	mov    ebp,0x16d
c001410c:	29 c1                	sub    ecx,eax
c001410e:	31 d2                	xor    edx,edx
c0014110:	89 c8                	mov    eax,ecx
c0014112:	f7 f5                	div    ebp
c0014114:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014119:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001411d:	31 d2                	xor    edx,edx
c001411f:	89 c8                	mov    eax,ecx
c0014121:	f7 f5                	div    ebp
c0014123:	31 d2                	xor    edx,edx
c0014125:	01 c3                	add    ebx,eax
c0014127:	89 c8                	mov    eax,ecx
c0014129:	f7 f7                	div    edi
c001412b:	bf 99 00 00 00       	mov    edi,0x99
c0014130:	29 c3                	sub    ebx,eax
c0014132:	31 d2                	xor    edx,edx
c0014134:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001413c:	29 c3                	sub    ebx,eax
c001413e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014141:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014144:	bb 05 00 00 00       	mov    ebx,0x5
c0014149:	83 c1 02             	add    ecx,0x2
c001414c:	89 c8                	mov    eax,ecx
c001414e:	f7 f7                	div    edi
c0014150:	31 d2                	xor    edx,edx
c0014152:	89 c7                	mov    edi,eax
c0014154:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001415a:	83 c0 02             	add    eax,0x2
c001415d:	f7 f3                	div    ebx
c001415f:	89 eb                	mov    ebx,ebp
c0014161:	29 c3                	sub    ebx,eax
c0014163:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014169:	88 1e                	mov    BYTE PTR [esi],bl
c001416b:	19 c0                	sbb    eax,eax
c001416d:	31 d2                	xor    edx,edx
c001416f:	83 e0 0c             	and    eax,0xc
c0014172:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014176:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001417e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014182:	83 f9 01             	cmp    ecx,0x1
c0014185:	0f 96 c2             	setbe  dl
c0014188:	41                   	inc    ecx
c0014189:	01 d0                	add    eax,edx
c001418b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001418e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014192:	83 c4 1c             	add    esp,0x1c
c0014195:	89 f0                	mov    eax,esi
c0014197:	5b                   	pop    ebx
c0014198:	5e                   	pop    esi
c0014199:	5f                   	pop    edi
c001419a:	5d                   	pop    ebp
c001419b:	c2 04 00             	ret    0x4

c001419e <Clock::timeInDatetimeLocal()>:
c001419e:	53                   	push   ebx
c001419f:	83 ec 14             	sub    esp,0x14
c00141a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00141a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00141aa:	e8 83 fc ff ff       	call   c0013e32 <Clock::timeInSecondsLocal()>
c00141af:	83 c4 0c             	add    esp,0xc
c00141b2:	52                   	push   edx
c00141b3:	50                   	push   eax
c00141b4:	53                   	push   ebx
c00141b5:	e8 a0 fe ff ff       	call   c001405a <secondsToDatetime(unsigned long long)>
c00141ba:	89 d8                	mov    eax,ebx
c00141bc:	83 c4 14             	add    esp,0x14
c00141bf:	5b                   	pop    ebx
c00141c0:	c2 04 00             	ret    0x4
c00141c3:	90                   	nop

c00141c4 <Device::hibernate()>:
c00141c4:	c3                   	ret    
c00141c5:	90                   	nop

c00141c6 <Device::wake()>:
c00141c6:	c3                   	ret    
c00141c7:	90                   	nop

c00141c8 <Device::detect()>:
c00141c8:	c3                   	ret    
c00141c9:	90                   	nop

c00141ca <Device::disableLegacy()>:
c00141ca:	c3                   	ret    
c00141cb:	90                   	nop

c00141cc <Device::powerSaving(PowerSavingLevel)>:
c00141cc:	c3                   	ret    
c00141cd:	90                   	nop

c00141ce <DriverlessDevice::close(int, int, void*)>:
c00141ce:	31 c0                	xor    eax,eax
c00141d0:	c3                   	ret    
c00141d1:	90                   	nop

c00141d2 <DriverlessDevice::detect()>:
c00141d2:	c3                   	ret    
c00141d3:	90                   	nop

c00141d4 <DriverlessDevice::open(int, int, void*)>:
c00141d4:	83 ec 18             	sub    esp,0x18
c00141d7:	68 30 b5 02 c0       	push   0xc002b530
c00141dc:	e8 bc 66 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00141e1:	83 c8 ff             	or     eax,0xffffffff
c00141e4:	83 c4 1c             	add    esp,0x1c
c00141e7:	c3                   	ret    

c00141e8 <Device::~Device()>:
c00141e8:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c00141ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141f1:	89 10                	mov    DWORD PTR [eax],edx
c00141f3:	90                   	nop
c00141f4:	c3                   	ret    
c00141f5:	90                   	nop

c00141f6 <Device::~Device()>:
c00141f6:	83 ec 0c             	sub    esp,0xc
c00141f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00141fd:	e8 e6 ff ff ff       	call   c00141e8 <Device::~Device()>
c0014202:	83 c4 04             	add    esp,0x4
c0014205:	83 ec 08             	sub    esp,0x8
c0014208:	68 58 01 00 00       	push   0x158
c001420d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014211:	e8 eb eb ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0014216:	83 c4 10             	add    esp,0x10
c0014219:	83 c4 0c             	add    esp,0xc
c001421c:	c3                   	ret    
c001421d:	90                   	nop

c001421e <Device::findAndLoadDriver()>:
c001421e:	c3                   	ret    
c001421f:	90                   	nop

c0014220 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014220:	57                   	push   edi
c0014221:	b9 09 00 00 00       	mov    ecx,0x9
c0014226:	56                   	push   esi
c0014227:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001422b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001422f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014239:	81 c7 18 01 00 00    	add    edi,0x118
c001423f:	fc                   	cld    
c0014240:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014242:	5e                   	pop    esi
c0014243:	5f                   	pop    edi
c0014244:	c3                   	ret    
c0014245:	90                   	nop

c0014246 <Device::preOpenACPI(void*, char*, char*)>:
c0014246:	56                   	push   esi
c0014247:	53                   	push   ebx
c0014248:	83 ec 08             	sub    esp,0x8
c001424b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001424f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014253:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001425d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014261:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014267:	6a 1e                	push   0x1e
c0014269:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001426f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014273:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014279:	50                   	push   eax
c001427a:	e8 e9 c4 fe ff       	call   c0000768 <memcpy>
c001427f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014283:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014287:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001428f:	83 c4 14             	add    esp,0x14
c0014292:	5b                   	pop    ebx
c0014293:	5e                   	pop    esi
c0014294:	e9 cf c4 fe ff       	jmp    c0000768 <memcpy>
c0014299:	90                   	nop

c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001429a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001429e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142a3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142aa:	75 0b                	jne    c00142b7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00142ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142b2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00142b5:	eb 1e                	jmp    c00142d5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00142b7:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00142bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00142c2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00142c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00142d2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00142d5:	ff e0                	jmp    eax
c00142d7:	90                   	nop

c00142d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00142d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142dc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00142e1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00142e8:	75 0b                	jne    c00142f5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00142ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00142ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00142f0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00142f3:	eb 1e                	jmp    c0014313 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00142f5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00142fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014300:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014306:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014308:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001430c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014310:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014313:	ff e0                	jmp    eax
c0014315:	90                   	nop

c0014316 <Device::addChild(Device*)>:
c0014316:	53                   	push   ebx
c0014317:	83 ec 08             	sub    esp,0x8
c001431a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001431e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014322:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014328:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001432e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014330:	85 d2                	test   edx,edx
c0014332:	74 04                	je     c0014338 <Device::addChild(Device*)+0x22>
c0014334:	89 d3                	mov    ebx,edx
c0014336:	eb f6                	jmp    c001432e <Device::addChild(Device*)+0x18>
c0014338:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001433b:	83 ec 0c             	sub    esp,0xc
c001433e:	6a 08                	push   0x8
c0014340:	e8 e5 b5 ff ff       	call   c000f92a <malloc>
c0014345:	89 03                	mov    DWORD PTR [ebx],eax
c0014347:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001434d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014354:	83 c4 18             	add    esp,0x18
c0014357:	5b                   	pop    ebx
c0014358:	c3                   	ret    
c0014359:	90                   	nop

c001435a <Device::removeAllChildren()>:
c001435a:	56                   	push   esi
c001435b:	53                   	push   ebx
c001435c:	52                   	push   edx
c001435d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014361:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014367:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001436a:	74 17                	je     c0014383 <Device::removeAllChildren()+0x29>
c001436c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001436f:	85 c0                	test   eax,eax
c0014371:	74 0c                	je     c001437f <Device::removeAllChildren()+0x25>
c0014373:	83 ec 0c             	sub    esp,0xc
c0014376:	8b 10                	mov    edx,DWORD PTR [eax]
c0014378:	50                   	push   eax
c0014379:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001437c:	83 c4 10             	add    esp,0x10
c001437f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014381:	eb e4                	jmp    c0014367 <Device::removeAllChildren()+0xd>
c0014383:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001438f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014395:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001439c:	58                   	pop    eax
c001439d:	5b                   	pop    ebx
c001439e:	5e                   	pop    esi
c001439f:	c3                   	ret    

c00143a0 <Device::hibernateAll()>:
c00143a0:	53                   	push   ebx
c00143a1:	83 ec 14             	sub    esp,0x14
c00143a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143aa:	53                   	push   ebx
c00143ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00143ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143b4:	83 c4 10             	add    esp,0x10
c00143b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ba:	74 0f                	je     c00143cb <Device::hibernateAll()+0x2b>
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143c2:	e8 d9 ff ff ff       	call   c00143a0 <Device::hibernateAll()>
c00143c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143c9:	eb e9                	jmp    c00143b4 <Device::hibernateAll()+0x14>
c00143cb:	83 c4 08             	add    esp,0x8
c00143ce:	5b                   	pop    ebx
c00143cf:	c3                   	ret    

c00143d0 <Device::wakeAll()>:
c00143d0:	53                   	push   ebx
c00143d1:	83 ec 14             	sub    esp,0x14
c00143d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143da:	53                   	push   ebx
c00143db:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00143de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143e4:	83 c4 10             	add    esp,0x10
c00143e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143ea:	74 0f                	je     c00143fb <Device::wakeAll()+0x2b>
c00143ec:	83 ec 0c             	sub    esp,0xc
c00143ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143f2:	e8 d9 ff ff ff       	call   c00143d0 <Device::wakeAll()>
c00143f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143f9:	eb e9                	jmp    c00143e4 <Device::wakeAll()+0x14>
c00143fb:	83 c4 08             	add    esp,0x8
c00143fe:	5b                   	pop    ebx
c00143ff:	c3                   	ret    

c0014400 <Device::detectAll()>:
c0014400:	53                   	push   ebx
c0014401:	83 ec 14             	sub    esp,0x14
c0014404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014408:	8b 03                	mov    eax,DWORD PTR [ebx]
c001440a:	53                   	push   ebx
c001440b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001440e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014414:	83 c4 10             	add    esp,0x10
c0014417:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001441a:	74 0f                	je     c001442b <Device::detectAll()+0x2b>
c001441c:	83 ec 0c             	sub    esp,0xc
c001441f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014422:	e8 d9 ff ff ff       	call   c0014400 <Device::detectAll()>
c0014427:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014429:	eb e9                	jmp    c0014414 <Device::detectAll()+0x14>
c001442b:	83 c4 08             	add    esp,0x8
c001442e:	5b                   	pop    ebx
c001442f:	c3                   	ret    

c0014430 <Device::disableLegacyAll()>:
c0014430:	53                   	push   ebx
c0014431:	83 ec 14             	sub    esp,0x14
c0014434:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014438:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443a:	53                   	push   ebx
c001443b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001443e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001444a:	74 0f                	je     c001445b <Device::disableLegacyAll()+0x2b>
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014452:	e8 d9 ff ff ff       	call   c0014430 <Device::disableLegacyAll()>
c0014457:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014459:	eb e9                	jmp    c0014444 <Device::disableLegacyAll()+0x14>
c001445b:	83 c4 08             	add    esp,0x8
c001445e:	5b                   	pop    ebx
c001445f:	c3                   	ret    

c0014460 <Device::loadDriversForAll()>:
c0014460:	53                   	push   ebx
c0014461:	83 ec 08             	sub    esp,0x8
c0014464:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014468:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001446e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014470:	85 db                	test   ebx,ebx
c0014472:	74 12                	je     c0014486 <Device::loadDriversForAll()+0x26>
c0014474:	83 ec 0c             	sub    esp,0xc
c0014477:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001447a:	e8 e1 ff ff ff       	call   c0014460 <Device::loadDriversForAll()>
c001447f:	83 c4 10             	add    esp,0x10
c0014482:	89 d8                	mov    eax,ebx
c0014484:	eb e8                	jmp    c001446e <Device::loadDriversForAll()+0xe>
c0014486:	83 c4 08             	add    esp,0x8
c0014489:	5b                   	pop    ebx
c001448a:	c3                   	ret    
c001448b:	90                   	nop

c001448c <Device::closeAll()>:
c001448c:	53                   	push   ebx
c001448d:	83 ec 08             	sub    esp,0x8
c0014490:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014494:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014496:	6a 00                	push   0x0
c0014498:	6a 00                	push   0x0
c001449a:	6a 00                	push   0x0
c001449c:	53                   	push   ebx
c001449d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144a6:	83 c4 10             	add    esp,0x10
c00144a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ac:	74 0f                	je     c00144bd <Device::closeAll()+0x31>
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144b4:	e8 d3 ff ff ff       	call   c001448c <Device::closeAll()>
c00144b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144bb:	eb e9                	jmp    c00144a6 <Device::closeAll()+0x1a>
c00144bd:	83 c4 08             	add    esp,0x8
c00144c0:	5b                   	pop    ebx
c00144c1:	c3                   	ret    

c00144c2 <Device::powerSavingAll(PowerSavingLevel)>:
c00144c2:	56                   	push   esi
c00144c3:	53                   	push   ebx
c00144c4:	83 ec 0c             	sub    esp,0xc
c00144c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00144cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00144cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144d1:	56                   	push   esi
c00144d2:	53                   	push   ebx
c00144d3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00144d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144dc:	83 c4 10             	add    esp,0x10
c00144df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144e2:	74 0f                	je     c00144f3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00144e4:	52                   	push   edx
c00144e5:	52                   	push   edx
c00144e6:	56                   	push   esi
c00144e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144ea:	e8 d3 ff ff ff       	call   c00144c2 <Device::powerSavingAll(PowerSavingLevel)>
c00144ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f1:	eb e9                	jmp    c00144dc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00144f3:	58                   	pop    eax
c00144f4:	5b                   	pop    ebx
c00144f5:	5e                   	pop    esi
c00144f6:	c3                   	ret    
c00144f7:	90                   	nop

c00144f8 <Device::setName(char const*)>:
c00144f8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014500:	e9 53 c3 fe ff       	jmp    c0000858 <strcpy>
c0014505:	90                   	nop

c0014506 <Device::Device(char const*)>:
c0014506:	83 ec 1c             	sub    esp,0x1c
c0014509:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c001450e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014512:	89 10                	mov    DWORD PTR [eax],edx
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014522:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014526:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014534:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001453e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014542:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001454c:	83 ec 08             	sub    esp,0x8
c001454f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014553:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014557:	e8 9c ff ff ff       	call   c00144f8 <Device::setName(char const*)>
c001455c:	83 c4 10             	add    esp,0x10
c001455f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014567:	83 ec 0c             	sub    esp,0xc
c001456a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001456e:	e8 b7 b3 ff ff       	call   c000f92a <malloc>
c0014573:	83 c4 10             	add    esp,0x10
c0014576:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001457c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014583:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014587:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001458d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014591:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014597:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001459d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00145a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00145ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00145b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00145c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00145d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00145e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00145ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145f2:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c00145fc:	90                   	nop
c00145fd:	83 c4 1c             	add    esp,0x1c
c0014600:	c3                   	ret    
c0014601:	90                   	nop

c0014602 <Device::getName()>:
c0014602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014606:	05 d0 00 00 00       	add    eax,0xd0
c001460b:	c3                   	ret    

c001460c <DriverlessDevice::DriverlessDevice(char const*)>:
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014613:	83 ec 08             	sub    esp,0x8
c0014616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001461a:	50                   	push   eax
c001461b:	e8 e6 fe ff ff       	call   c0014506 <Device::Device(char const*)>
c0014620:	83 c4 10             	add    esp,0x10
c0014623:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c0014628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462c:	89 10                	mov    DWORD PTR [eax],edx
c001462e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014632:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001463c:	90                   	nop
c001463d:	83 c4 0c             	add    esp,0xc
c0014640:	c3                   	ret    
c0014641:	90                   	nop

c0014642 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014642:	57                   	push   edi
c0014643:	56                   	push   esi
c0014644:	53                   	push   ebx
c0014645:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014649:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001464d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014651:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014657:	75 0c                	jne    c0014665 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0014659:	52                   	push   edx
c001465a:	52                   	push   edx
c001465b:	53                   	push   ebx
c001465c:	56                   	push   esi
c001465d:	e8 a4 4a 01 00       	call   c0029106 <LinkedList<Device>::addElement(Device*)>
c0014662:	83 c4 10             	add    esp,0x10
c0014665:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001466b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001466e:	74 12                	je     c0014682 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014670:	50                   	push   eax
c0014671:	57                   	push   edi
c0014672:	56                   	push   esi
c0014673:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014676:	e8 c7 ff ff ff       	call   c0014642 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001467b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001467d:	83 c4 10             	add    esp,0x10
c0014680:	eb e9                	jmp    c001466b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014682:	5b                   	pop    ebx
c0014683:	5e                   	pop    esi
c0014684:	5f                   	pop    edi
c0014685:	c3                   	ret    

c0014686 <getDevicesOfType(DeviceType)>:
c0014686:	53                   	push   ebx
c0014687:	83 ec 14             	sub    esp,0x14
c001468a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001468e:	53                   	push   ebx
c001468f:	e8 4e 4b 01 00       	call   c00291e2 <LinkedList<Device>::LinkedList()>
c0014694:	83 c4 0c             	add    esp,0xc
c0014697:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001469b:	53                   	push   ebx
c001469c:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c00146a2:	e8 9b ff ff ff       	call   c0014642 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00146a7:	89 d8                	mov    eax,ebx
c00146a9:	83 c4 18             	add    esp,0x18
c00146ac:	5b                   	pop    ebx
c00146ad:	c2 04 00             	ret    0x4

c00146b0 <HardDiskController::HardDiskController(char const*)>:
c00146b0:	83 ec 0c             	sub    esp,0xc
c00146b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b7:	83 ec 08             	sub    esp,0x8
c00146ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146be:	50                   	push   eax
c00146bf:	e8 42 fe ff ff       	call   c0014506 <Device::Device(char const*)>
c00146c4:	83 c4 10             	add    esp,0x10
c00146c7:	ba b0 b5 02 c0       	mov    edx,0xc002b5b0
c00146cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d0:	89 10                	mov    DWORD PTR [eax],edx
c00146d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d6:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00146e0:	90                   	nop
c00146e1:	83 c4 0c             	add    esp,0xc
c00146e4:	c3                   	ret    
c00146e5:	90                   	nop

c00146e6 <HardDiskController::~HardDiskController()>:
c00146e6:	83 ec 0c             	sub    esp,0xc
c00146e9:	ba b0 b5 02 c0       	mov    edx,0xc002b5b0
c00146ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f2:	89 10                	mov    DWORD PTR [eax],edx
c00146f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f8:	83 ec 0c             	sub    esp,0xc
c00146fb:	50                   	push   eax
c00146fc:	e8 e7 fa ff ff       	call   c00141e8 <Device::~Device()>
c0014701:	83 c4 10             	add    esp,0x10
c0014704:	90                   	nop
c0014705:	83 c4 0c             	add    esp,0xc
c0014708:	c3                   	ret    
c0014709:	90                   	nop

c001470a <HardDiskController::~HardDiskController()>:
c001470a:	83 ec 0c             	sub    esp,0xc
c001470d:	83 ec 0c             	sub    esp,0xc
c0014710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014714:	e8 cd ff ff ff       	call   c00146e6 <HardDiskController::~HardDiskController()>
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	83 ec 08             	sub    esp,0x8
c001471f:	68 58 01 00 00       	push   0x158
c0014724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014728:	e8 d4 e6 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001472d:	83 c4 10             	add    esp,0x10
c0014730:	83 c4 0c             	add    esp,0xc
c0014733:	c3                   	ret    

c0014734 <PhysicalDisk::eject()>:
c0014734:	83 ec 18             	sub    esp,0x18
c0014737:	68 d4 b5 02 c0       	push   0xc002b5d4
c001473c:	e8 a0 e7 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014741:	83 c8 ff             	or     eax,0xffffffff
c0014744:	83 c4 1c             	add    esp,0x1c
c0014747:	c3                   	ret    

c0014748 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474f:	83 ec 08             	sub    esp,0x8
c0014752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014756:	50                   	push   eax
c0014757:	e8 aa fd ff ff       	call   c0014506 <Device::Device(char const*)>
c001475c:	83 c4 10             	add    esp,0x10
c001475f:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0014764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014768:	89 10                	mov    DWORD PTR [eax],edx
c001476a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001476e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014779:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014784:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014792:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014796:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001479c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147aa:	90                   	nop
c00147ab:	83 c4 0c             	add    esp,0xc
c00147ae:	c3                   	ret    
c00147af:	90                   	nop

c00147b0 <PhysicalDisk::startCache()>:
c00147b0:	56                   	push   esi
c00147b1:	53                   	push   ebx
c00147b2:	83 ec 10             	sub    esp,0x10
c00147b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00147b9:	6a 44                	push   0x44
c00147bb:	e8 6a b1 ff ff       	call   c000f92a <malloc>
c00147c0:	89 c6                	mov    esi,eax
c00147c2:	58                   	pop    eax
c00147c3:	5a                   	pop    edx
c00147c4:	53                   	push   ebx
c00147c5:	56                   	push   esi
c00147c6:	e8 cf 28 00 00       	call   c001709a <VCache::VCache(PhysicalDisk*)>
c00147cb:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00147d1:	83 c4 14             	add    esp,0x14
c00147d4:	5b                   	pop    ebx
c00147d5:	5e                   	pop    esi
c00147d6:	c3                   	ret    
c00147d7:	90                   	nop

c00147d8 <PhysicalDisk::~PhysicalDisk()>:
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	89 10                	mov    DWORD PTR [eax],edx
c00147e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	50                   	push   eax
c00147ee:	e8 f5 f9 ff ff       	call   c00141e8 <Device::~Device()>
c00147f3:	83 c4 10             	add    esp,0x10
c00147f6:	90                   	nop
c00147f7:	83 c4 0c             	add    esp,0xc
c00147fa:	c3                   	ret    
c00147fb:	90                   	nop

c00147fc <PhysicalDisk::~PhysicalDisk()>:
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	83 ec 0c             	sub    esp,0xc
c0014802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014806:	e8 cd ff ff ff       	call   c00147d8 <PhysicalDisk::~PhysicalDisk()>
c001480b:	83 c4 10             	add    esp,0x10
c001480e:	83 ec 08             	sub    esp,0x8
c0014811:	68 6c 01 00 00       	push   0x16c
c0014816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481a:	e8 e2 e5 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	83 c4 0c             	add    esp,0xc
c0014825:	c3                   	ret    

c0014826 <FPU::FPU(char const*)>:
c0014826:	83 ec 0c             	sub    esp,0xc
c0014829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001482d:	83 ec 08             	sub    esp,0x8
c0014830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014834:	50                   	push   eax
c0014835:	e8 cc fc ff ff       	call   c0014506 <Device::Device(char const*)>
c001483a:	83 c4 10             	add    esp,0x10
c001483d:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c0014842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014846:	89 10                	mov    DWORD PTR [eax],edx
c0014848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001484c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014856:	90                   	nop
c0014857:	83 c4 0c             	add    esp,0xc
c001485a:	c3                   	ret    
c001485b:	90                   	nop

c001485c <FPU::~FPU()>:
c001485c:	83 ec 0c             	sub    esp,0xc
c001485f:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c0014864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014868:	89 10                	mov    DWORD PTR [eax],edx
c001486a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486e:	83 ec 0c             	sub    esp,0xc
c0014871:	50                   	push   eax
c0014872:	e8 71 f9 ff ff       	call   c00141e8 <Device::~Device()>
c0014877:	83 c4 10             	add    esp,0x10
c001487a:	90                   	nop
c001487b:	83 c4 0c             	add    esp,0xc
c001487e:	c3                   	ret    
c001487f:	90                   	nop

c0014880 <FPU::~FPU()>:
c0014880:	83 ec 0c             	sub    esp,0xc
c0014883:	83 ec 0c             	sub    esp,0xc
c0014886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001488a:	e8 cd ff ff ff       	call   c001485c <FPU::~FPU()>
c001488f:	83 c4 10             	add    esp,0x10
c0014892:	83 ec 08             	sub    esp,0x8
c0014895:	68 58 01 00 00       	push   0x158
c001489a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001489e:	e8 5e e5 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00148a3:	83 c4 10             	add    esp,0x10
c00148a6:	83 c4 0c             	add    esp,0xc
c00148a9:	c3                   	ret    

c00148aa <setupFPU()>:
c00148aa:	53                   	push   ebx
c00148ab:	83 ec 08             	sub    esp,0x8
c00148ae:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c00148b4:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00148bb:	74 19                	je     c00148d6 <setupFPU()+0x2c>
c00148bd:	83 ec 0c             	sub    esp,0xc
c00148c0:	68 58 01 00 00       	push   0x158
c00148c5:	e8 60 b0 ff ff       	call   c000f92a <malloc>
c00148ca:	89 c3                	mov    ebx,eax
c00148cc:	89 04 24             	mov    DWORD PTR [esp],eax
c00148cf:	e8 60 14 01 00       	call   c0025d34 <AVX::AVX()>
c00148d4:	eb 5b                	jmp    c0014931 <setupFPU()+0x87>
c00148d6:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00148dc:	84 c0                	test   al,al
c00148de:	79 19                	jns    c00148f9 <setupFPU()+0x4f>
c00148e0:	83 ec 0c             	sub    esp,0xc
c00148e3:	68 58 01 00 00       	push   0x158
c00148e8:	e8 3d b0 ff ff       	call   c000f92a <malloc>
c00148ed:	89 c3                	mov    ebx,eax
c00148ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00148f2:	e8 63 15 01 00       	call   c0025e5a <SSE::SSE()>
c00148f7:	eb 38                	jmp    c0014931 <setupFPU()+0x87>
c00148f9:	a8 20                	test   al,0x20
c00148fb:	74 19                	je     c0014916 <setupFPU()+0x6c>
c00148fd:	83 ec 0c             	sub    esp,0xc
c0014900:	68 58 01 00 00       	push   0x158
c0014905:	e8 20 b0 ff ff       	call   c000f92a <malloc>
c001490a:	89 c3                	mov    ebx,eax
c001490c:	89 04 24             	mov    DWORD PTR [esp],eax
c001490f:	e8 b0 14 01 00       	call   c0025dc4 <MMX::MMX()>
c0014914:	eb 1b                	jmp    c0014931 <setupFPU()+0x87>
c0014916:	a8 10                	test   al,0x10
c0014918:	74 1c                	je     c0014936 <setupFPU()+0x8c>
c001491a:	83 ec 0c             	sub    esp,0xc
c001491d:	68 58 01 00 00       	push   0x158
c0014922:	e8 03 b0 ff ff       	call   c000f92a <malloc>
c0014927:	89 c3                	mov    ebx,eax
c0014929:	89 04 24             	mov    DWORD PTR [esp],eax
c001492c:	e8 b7 15 01 00       	call   c0025ee8 <x87::x87()>
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	eb 24                	jmp    c001495a <setupFPU()+0xb0>
c0014936:	83 e0 ef             	and    eax,0xffffffef
c0014939:	83 ec 0c             	sub    esp,0xc
c001493c:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014942:	68 34 b6 02 c0       	push   0xc002b634
c0014947:	e8 95 e5 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001494c:	0f 20 c0             	mov    eax,cr0
c001494f:	83 c8 04             	or     eax,0x4
c0014952:	0f 22 c0             	mov    cr0,eax
c0014955:	31 db                	xor    ebx,ebx
c0014957:	83 c4 10             	add    esp,0x10
c001495a:	89 d8                	mov    eax,ebx
c001495c:	83 c4 08             	add    esp,0x8
c001495f:	5b                   	pop    ebx
c0014960:	c3                   	ret    
c0014961:	90                   	nop

c0014962 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014962:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014966:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001496a:	c1 e0 04             	shl    eax,0x4
c001496d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014971:	8d 50 10             	lea    edx,[eax+0x10]
c0014974:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001497a:	74 08                	je     c0014984 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001497c:	83 c0 04             	add    eax,0x4
c001497f:	39 d0                	cmp    eax,edx
c0014981:	75 f1                	jne    c0014974 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014983:	c3                   	ret    
c0014984:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001498e:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014998:	eb e2                	jmp    c001497c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001499a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001499a:	57                   	push   edi
c001499b:	31 c0                	xor    eax,eax
c001499d:	56                   	push   esi
c001499e:	53                   	push   ebx
c001499f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00149a3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00149a7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00149ab:	89 da                	mov    edx,ebx
c00149ad:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00149b1:	c1 e2 04             	shl    edx,0x4
c00149b4:	01 ca                	add    edx,ecx
c00149b6:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c00149be:	74 16                	je     c00149d6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c00149c0:	40                   	inc    eax
c00149c1:	83 f8 04             	cmp    eax,0x4
c00149c4:	75 f0                	jne    c00149b6 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c00149c6:	c7 44 24 10 78 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b678
c00149ce:	5b                   	pop    ebx
c00149cf:	5e                   	pop    esi
c00149d0:	5f                   	pop    edi
c00149d1:	e9 c7 5e 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c00149d6:	8d 04 98             	lea    eax,[eax+ebx*4]
c00149d9:	8d 04 81             	lea    eax,[ecx+eax*4]
c00149dc:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c00149e2:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c00149e8:	5b                   	pop    ebx
c00149e9:	5e                   	pop    esi
c00149ea:	5f                   	pop    edi
c00149eb:	c3                   	ret    

c00149ec <doubleFault(regs*, void*)>:
c00149ec:	55                   	push   ebp
c00149ed:	89 e5                	mov    ebp,esp
c00149ef:	83 ec 08             	sub    esp,0x8
c00149f2:	83 ec 0c             	sub    esp,0xc
c00149f5:	68 b3 b6 02 c0       	push   0xc002b6b3
c00149fa:	e8 9e 5e 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00149ff:	83 c4 10             	add    esp,0x10
c0014a02:	90                   	nop
c0014a03:	c9                   	leave  
c0014a04:	c3                   	ret    
c0014a05:	90                   	nop

c0014a06 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014a06:	56                   	push   esi
c0014a07:	53                   	push   ebx
c0014a08:	50                   	push   eax
c0014a09:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a0d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a11:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014a16:	75 35                	jne    c0014a4d <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014a18:	8d 43 20             	lea    eax,[ebx+0x20]
c0014a1b:	31 d2                	xor    edx,edx
c0014a1d:	89 c1                	mov    ecx,eax
c0014a1f:	c1 e1 04             	shl    ecx,0x4
c0014a22:	01 f1                	add    ecx,esi
c0014a24:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014a2c:	74 3e                	je     c0014a6c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014a2e:	42                   	inc    edx
c0014a2f:	83 fa 04             	cmp    edx,0x4
c0014a32:	75 f0                	jne    c0014a24 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014a34:	83 ec 0c             	sub    esp,0xc
c0014a37:	68 f8 b6 02 c0       	push   0xc002b6f8
c0014a3c:	e8 5c 5e 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0014a41:	83 c4 10             	add    esp,0x10
c0014a44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014a49:	5a                   	pop    edx
c0014a4a:	5b                   	pop    ebx
c0014a4b:	5e                   	pop    esi
c0014a4c:	c3                   	ret    
c0014a4d:	83 ec 0c             	sub    esp,0xc
c0014a50:	56                   	push   esi
c0014a51:	e8 ac fb ff ff       	call   c0014602 <Device::getName()>
c0014a56:	83 c4 10             	add    esp,0x10
c0014a59:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a5c:	75 ba                	jne    c0014a18 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a5e:	83 fb 0f             	cmp    ebx,0xf
c0014a61:	7f 29                	jg     c0014a8c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014a63:	0f b6 9b a0 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f60]
c0014a6a:	eb ac                	jmp    c0014a18 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a6c:	8d 04 82             	lea    eax,[edx+eax*4]
c0014a6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014a73:	8d 04 86             	lea    eax,[esi+eax*4]
c0014a76:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014a7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014a80:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014a86:	89 d8                	mov    eax,ebx
c0014a88:	5a                   	pop    edx
c0014a89:	5b                   	pop    ebx
c0014a8a:	5e                   	pop    esi
c0014a8b:	c3                   	ret    
c0014a8c:	83 ec 0c             	sub    esp,0xc
c0014a8f:	68 c0 b6 02 c0       	push   0xc002b6c0
c0014a94:	e8 04 5e 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0014a99:	83 c4 10             	add    esp,0x10
c0014a9c:	e9 77 ff ff ff       	jmp    c0014a18 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014aa1:	90                   	nop

c0014aa2 <InterruptController::clearAllHandlers(int, bool)>:
c0014aa2:	56                   	push   esi
c0014aa3:	53                   	push   ebx
c0014aa4:	52                   	push   edx
c0014aa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014aa9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014aad:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ab2:	75 61                	jne    c0014b15 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ab4:	8d 46 20             	lea    eax,[esi+0x20]
c0014ab7:	c1 e6 04             	shl    esi,0x4
c0014aba:	c1 e0 04             	shl    eax,0x4
c0014abd:	01 de                	add    esi,ebx
c0014abf:	01 d8                	add    eax,ebx
c0014ac1:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014acb:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014ad5:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014adf:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014ae9:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014af3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014afd:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014b07:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014b11:	58                   	pop    eax
c0014b12:	5b                   	pop    ebx
c0014b13:	5e                   	pop    esi
c0014b14:	c3                   	ret    
c0014b15:	83 ec 0c             	sub    esp,0xc
c0014b18:	53                   	push   ebx
c0014b19:	e8 e4 fa ff ff       	call   c0014602 <Device::getName()>
c0014b1e:	83 c4 10             	add    esp,0x10
c0014b21:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b24:	75 8e                	jne    c0014ab4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b26:	83 fe 0f             	cmp    esi,0xf
c0014b29:	7f 09                	jg     c0014b34 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014b2b:	0f b6 b6 a0 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f60]
c0014b32:	eb 80                	jmp    c0014ab4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b34:	83 ec 0c             	sub    esp,0xc
c0014b37:	68 34 b7 02 c0       	push   0xc002b734
c0014b3c:	e8 5c 5d 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0014b41:	83 c4 10             	add    esp,0x10
c0014b44:	e9 6b ff ff ff       	jmp    c0014ab4 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014b49:	90                   	nop

c0014b4a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014b4a:	56                   	push   esi
c0014b4b:	53                   	push   ebx
c0014b4c:	52                   	push   edx
c0014b4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014b51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014b55:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b5a:	75 3a                	jne    c0014b96 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b60:	8d 50 20             	lea    edx,[eax+0x20]
c0014b63:	c1 e2 04             	shl    edx,0x4
c0014b66:	8d 04 16             	lea    eax,[esi+edx*1]
c0014b69:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014b6d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014b73:	74 0b                	je     c0014b80 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014b75:	83 c0 04             	add    eax,0x4
c0014b78:	39 d0                	cmp    eax,edx
c0014b7a:	75 f1                	jne    c0014b6d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014b7c:	58                   	pop    eax
c0014b7d:	5b                   	pop    ebx
c0014b7e:	5e                   	pop    esi
c0014b7f:	c3                   	ret    
c0014b80:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014b8a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014b94:	eb df                	jmp    c0014b75 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b96:	83 ec 0c             	sub    esp,0xc
c0014b99:	56                   	push   esi
c0014b9a:	e8 63 fa ff ff       	call   c0014602 <Device::getName()>
c0014b9f:	83 c4 10             	add    esp,0x10
c0014ba2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014ba5:	75 b5                	jne    c0014b5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014ba7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014bac:	7f 11                	jg     c0014bbf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014bae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bb2:	0f b6 80 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f60]
c0014bb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bbd:	eb 9d                	jmp    c0014b5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014bbf:	83 ec 0c             	sub    esp,0xc
c0014bc2:	68 34 b7 02 c0       	push   0xc002b734
c0014bc7:	e8 d1 5c 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0014bcc:	83 c4 10             	add    esp,0x10
c0014bcf:	eb 8b                	jmp    c0014b5c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014bd1 <nmiHandler(regs*, void*)>:
c0014bd1:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014bd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bda:	e9 95 a4 ff ff       	jmp    c000f074 <Computer::handleNMI()>

c0014bdf <int_handler>:
c0014bdf:	55                   	push   ebp
c0014be0:	57                   	push   edi
c0014be1:	56                   	push   esi
c0014be2:	53                   	push   ebx
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014bea:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c0014bf1:	74 0b                	je     c0014bfe <int_handler+0x1f>
c0014bf3:	fa                   	cli    
c0014bf4:	f4                   	hlt    
c0014bf5:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c0014bfc:	75 f5                	jne    c0014bf3 <int_handler+0x14>
c0014bfe:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014c03:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014c06:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014c0c:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014c12:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c15:	83 f8 17             	cmp    eax,0x17
c0014c18:	77 13                	ja     c0014c2d <int_handler+0x4e>
c0014c1a:	83 ec 08             	sub    esp,0x8
c0014c1d:	8b 17                	mov    edx,DWORD PTR [edi]
c0014c1f:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014c22:	0f b6 c0             	movzx  eax,al
c0014c25:	50                   	push   eax
c0014c26:	57                   	push   edi
c0014c27:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014c2a:	83 c4 10             	add    esp,0x10
c0014c2d:	83 c3 15             	add    ebx,0x15
c0014c30:	c1 e3 04             	shl    ebx,0x4
c0014c33:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014c37:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014c3e:	31 db                	xor    ebx,ebx
c0014c40:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014c44:	85 c0                	test   eax,eax
c0014c46:	74 13                	je     c0014c5b <int_handler+0x7c>
c0014c48:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014c4b:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014c4f:	74 1c                	je     c0014c6d <int_handler+0x8e>
c0014c51:	83 ec 08             	sub    esp,0x8
c0014c54:	52                   	push   edx
c0014c55:	56                   	push   esi
c0014c56:	ff d0                	call   eax
c0014c58:	83 c4 10             	add    esp,0x10
c0014c5b:	43                   	inc    ebx
c0014c5c:	83 fb 04             	cmp    ebx,0x4
c0014c5f:	75 df                	jne    c0014c40 <int_handler+0x61>
c0014c61:	83 c4 0c             	add    esp,0xc
c0014c64:	31 c0                	xor    eax,eax
c0014c66:	5b                   	pop    ebx
c0014c67:	31 d2                	xor    edx,edx
c0014c69:	5e                   	pop    esi
c0014c6a:	5f                   	pop    edi
c0014c6b:	5d                   	pop    ebp
c0014c6c:	c3                   	ret    
c0014c6d:	83 ec 08             	sub    esp,0x8
c0014c70:	52                   	push   edx
c0014c71:	56                   	push   esi
c0014c72:	ff d0                	call   eax
c0014c74:	83 c4 10             	add    esp,0x10
c0014c77:	83 c4 0c             	add    esp,0xc
c0014c7a:	5b                   	pop    ebx
c0014c7b:	5e                   	pop    esi
c0014c7c:	5f                   	pop    edi
c0014c7d:	5d                   	pop    ebp
c0014c7e:	c3                   	ret    
c0014c7f:	90                   	nop

c0014c80 <InterruptController::InterruptController(char const*)>:
c0014c80:	83 ec 1c             	sub    esp,0x1c
c0014c83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c87:	83 ec 08             	sub    esp,0x8
c0014c8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c8e:	50                   	push   eax
c0014c8f:	e8 72 f8 ff ff       	call   c0014506 <Device::Device(char const*)>
c0014c94:	83 c4 10             	add    esp,0x10
c0014c97:	ba f4 b9 02 c0       	mov    edx,0xc002b9f4
c0014c9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca0:	89 10                	mov    DWORD PTR [eax],edx
c0014ca2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ca6:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014cb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cb8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014cc0:	7f 5e                	jg     c0014d20 <InterruptController::InterruptController(char const*)+0xa0>
c0014cc2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014cca:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014ccf:	7f 49                	jg     c0014d1a <InterruptController::InterruptController(char const*)+0x9a>
c0014cd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cd9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014ce0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014ce4:	01 ca                	add    edx,ecx
c0014ce6:	83 c2 54             	add    edx,0x54
c0014ce9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014cf9:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014d00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014d04:	01 ca                	add    edx,ecx
c0014d06:	81 c2 54 04 00 00    	add    edx,0x454
c0014d0c:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014d14:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014d18:	eb b0                	jmp    c0014cca <InterruptController::InterruptController(char const*)+0x4a>
c0014d1a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014d1e:	eb 98                	jmp    c0014cb8 <InterruptController::InterruptController(char const*)+0x38>
c0014d20:	90                   	nop
c0014d21:	83 c4 1c             	add    esp,0x1c
c0014d24:	c3                   	ret    
c0014d25:	90                   	nop

c0014d26 <InterruptController::~InterruptController()>:
c0014d26:	83 ec 0c             	sub    esp,0xc
c0014d29:	ba f4 b9 02 c0       	mov    edx,0xc002b9f4
c0014d2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d32:	89 10                	mov    DWORD PTR [eax],edx
c0014d34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d38:	83 ec 0c             	sub    esp,0xc
c0014d3b:	50                   	push   eax
c0014d3c:	e8 a7 f4 ff ff       	call   c00141e8 <Device::~Device()>
c0014d41:	83 c4 10             	add    esp,0x10
c0014d44:	90                   	nop
c0014d45:	83 c4 0c             	add    esp,0xc
c0014d48:	c3                   	ret    
c0014d49:	90                   	nop

c0014d4a <InterruptController::~InterruptController()>:
c0014d4a:	83 ec 0c             	sub    esp,0xc
c0014d4d:	83 ec 0c             	sub    esp,0xc
c0014d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d54:	e8 cd ff ff ff       	call   c0014d26 <InterruptController::~InterruptController()>
c0014d59:	83 c4 10             	add    esp,0x10
c0014d5c:	83 ec 08             	sub    esp,0x8
c0014d5f:	68 58 21 00 00       	push   0x2158
c0014d64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d68:	e8 94 e0 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0014d6d:	83 c4 10             	add    esp,0x10
c0014d70:	83 c4 0c             	add    esp,0xc
c0014d73:	c3                   	ret    

c0014d74 <displayDebugInfo(regs*)>:
c0014d74:	55                   	push   ebp
c0014d75:	57                   	push   edi
c0014d76:	56                   	push   esi
c0014d77:	53                   	push   ebx
c0014d78:	83 ec 24             	sub    esp,0x24
c0014d7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014d7f:	0f 20 c2             	mov    edx,cr0
c0014d82:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014d86:	0f 20 d7             	mov    edi,cr2
c0014d89:	0f 20 de             	mov    esi,cr3
c0014d8c:	0f 20 e5             	mov    ebp,cr4
c0014d8f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014d92:	68 6e b7 02 c0       	push   0xc002b76e
c0014d97:	e8 45 e1 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014d9c:	59                   	pop    ecx
c0014d9d:	58                   	pop    eax
c0014d9e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014da1:	68 79 b7 02 c0       	push   0xc002b779
c0014da6:	e8 36 e1 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014dab:	58                   	pop    eax
c0014dac:	5a                   	pop    edx
c0014dad:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014db0:	68 84 b7 02 c0       	push   0xc002b784
c0014db5:	e8 27 e1 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014dba:	59                   	pop    ecx
c0014dbb:	58                   	pop    eax
c0014dbc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014dbf:	68 8f b7 02 c0       	push   0xc002b78f
c0014dc4:	e8 18 e1 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014dc9:	58                   	pop    eax
c0014dca:	5a                   	pop    edx
c0014dcb:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014dce:	68 9a b7 02 c0       	push   0xc002b79a
c0014dd3:	e8 09 e1 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014dd8:	59                   	pop    ecx
c0014dd9:	58                   	pop    eax
c0014dda:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ddd:	68 a5 b7 02 c0       	push   0xc002b7a5
c0014de2:	e8 fa e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014de7:	58                   	pop    eax
c0014de8:	5a                   	pop    edx
c0014de9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014dec:	68 b0 b7 02 c0       	push   0xc002b7b0
c0014df1:	e8 eb e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014df6:	59                   	pop    ecx
c0014df7:	58                   	pop    eax
c0014df8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014dfb:	68 bb b7 02 c0       	push   0xc002b7bb
c0014e00:	e8 dc e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e05:	58                   	pop    eax
c0014e06:	5a                   	pop    edx
c0014e07:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e0a:	68 c6 b7 02 c0       	push   0xc002b7c6
c0014e0f:	e8 cd e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e14:	59                   	pop    ecx
c0014e15:	58                   	pop    eax
c0014e16:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e19:	68 d5 b7 02 c0       	push   0xc002b7d5
c0014e1e:	e8 be e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e23:	58                   	pop    eax
c0014e24:	5a                   	pop    edx
c0014e25:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014e28:	68 e0 b7 02 c0       	push   0xc002b7e0
c0014e2d:	e8 af e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e32:	59                   	pop    ecx
c0014e33:	58                   	pop    eax
c0014e34:	57                   	push   edi
c0014e35:	68 eb b7 02 c0       	push   0xc002b7eb
c0014e3a:	e8 a2 e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e3f:	58                   	pop    eax
c0014e40:	5a                   	pop    edx
c0014e41:	56                   	push   esi
c0014e42:	68 f6 b7 02 c0       	push   0xc002b7f6
c0014e47:	e8 95 e0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0014e4c:	59                   	pop    ecx
c0014e4d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e58:	e8 a7 be ff ff       	call   c0010d04 <setActiveTerminal(VgaText*)>
c0014e5d:	58                   	pop    eax
c0014e5e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014e61:	5a                   	pop    edx
c0014e62:	c1 e0 05             	shl    eax,0x5
c0014e65:	05 00 de 02 c0       	add    eax,0xc002de00
c0014e6a:	50                   	push   eax
c0014e6b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e76:	e8 15 c2 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014e7b:	59                   	pop    ecx
c0014e7c:	58                   	pop    eax
c0014e7d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e82:	68 01 b8 02 c0       	push   0xc002b801
c0014e87:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e8d:	e8 fe c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014e92:	58                   	pop    eax
c0014e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e98:	5a                   	pop    edx
c0014e99:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e9c:	83 c0 0c             	add    eax,0xc
c0014e9f:	50                   	push   eax
c0014ea0:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ea5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eab:	e8 e0 c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014eb0:	59                   	pop    ecx
c0014eb1:	58                   	pop    eax
c0014eb2:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014eb7:	68 0a b8 02 c0       	push   0xc002b80a
c0014ebc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec2:	e8 c9 c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014ec7:	58                   	pop    eax
c0014ec8:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ecd:	5a                   	pop    edx
c0014ece:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014ed1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ed7:	e8 da c1 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014edc:	59                   	pop    ecx
c0014edd:	58                   	pop    eax
c0014ede:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ee3:	68 12 b8 02 c0       	push   0xc002b812
c0014ee8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eee:	e8 9d c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014ef3:	58                   	pop    eax
c0014ef4:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ef9:	5a                   	pop    edx
c0014efa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014efd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f03:	e8 ae c1 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014f08:	59                   	pop    ecx
c0014f09:	58                   	pop    eax
c0014f0a:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f0f:	68 1a b8 02 c0       	push   0xc002b81a
c0014f14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1a:	e8 71 c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014f1f:	58                   	pop    eax
c0014f20:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f25:	5a                   	pop    edx
c0014f26:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014f29:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f2f:	e8 82 c1 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014f34:	59                   	pop    ecx
c0014f35:	58                   	pop    eax
c0014f36:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f3b:	68 22 b8 02 c0       	push   0xc002b822
c0014f40:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f46:	e8 45 c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014f4b:	58                   	pop    eax
c0014f4c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f51:	5a                   	pop    edx
c0014f52:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014f55:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5b:	e8 56 c1 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014f60:	59                   	pop    ecx
c0014f61:	58                   	pop    eax
c0014f62:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f67:	68 2a b8 02 c0       	push   0xc002b82a
c0014f6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f72:	e8 19 c1 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014f77:	58                   	pop    eax
c0014f78:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f7d:	5a                   	pop    edx
c0014f7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f87:	e8 2a c1 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014f8c:	59                   	pop    ecx
c0014f8d:	58                   	pop    eax
c0014f8e:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f93:	68 32 b8 02 c0       	push   0xc002b832
c0014f98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9e:	e8 ed c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014fa3:	58                   	pop    eax
c0014fa4:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fa9:	5a                   	pop    edx
c0014faa:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb3:	e8 fe c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014fb8:	59                   	pop    ecx
c0014fb9:	58                   	pop    eax
c0014fba:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fbf:	68 3a b8 02 c0       	push   0xc002b83a
c0014fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fca:	e8 c1 c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014fcf:	58                   	pop    eax
c0014fd0:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fd5:	5a                   	pop    edx
c0014fd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014fda:	52                   	push   edx
c0014fdb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe1:	e8 d0 c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0014fe6:	59                   	pop    ecx
c0014fe7:	58                   	pop    eax
c0014fe8:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fed:	68 43 b8 02 c0       	push   0xc002b843
c0014ff2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff8:	e8 93 c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0014ffd:	58                   	pop    eax
c0014ffe:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015003:	5a                   	pop    edx
c0015004:	57                   	push   edi
c0015005:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500b:	e8 a6 c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015010:	59                   	pop    ecx
c0015011:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015016:	5f                   	pop    edi
c0015017:	68 4b b8 02 c0       	push   0xc002b84b
c001501c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015022:	e8 69 c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0015027:	58                   	pop    eax
c0015028:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001502d:	5a                   	pop    edx
c001502e:	56                   	push   esi
c001502f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015035:	e8 7c c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001503a:	59                   	pop    ecx
c001503b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015040:	5e                   	pop    esi
c0015041:	68 53 b8 02 c0       	push   0xc002b853
c0015046:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504c:	e8 3f c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0015051:	5f                   	pop    edi
c0015052:	58                   	pop    eax
c0015053:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015058:	55                   	push   ebp
c0015059:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001505f:	e8 52 c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015064:	58                   	pop    eax
c0015065:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001506a:	5a                   	pop    edx
c001506b:	68 5b b8 02 c0       	push   0xc002b85b
c0015070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015076:	e8 15 c0 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001507b:	0f 21 c0             	mov    eax,db0
c001507e:	59                   	pop    ecx
c001507f:	5e                   	pop    esi
c0015080:	50                   	push   eax
c0015081:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015086:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001508c:	e8 25 c0 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015091:	5f                   	pop    edi
c0015092:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015097:	5d                   	pop    ebp
c0015098:	68 64 b8 02 c0       	push   0xc002b864
c001509d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a3:	e8 e8 bf ff ff       	call   c0011090 <VgaText::puts(char const*)>
c00150a8:	0f 21 c8             	mov    eax,db1
c00150ab:	5a                   	pop    edx
c00150ac:	59                   	pop    ecx
c00150ad:	50                   	push   eax
c00150ae:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150b3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150b9:	e8 f8 bf ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c00150be:	5e                   	pop    esi
c00150bf:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150c4:	5f                   	pop    edi
c00150c5:	68 6c b8 02 c0       	push   0xc002b86c
c00150ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d0:	e8 bb bf ff ff       	call   c0011090 <VgaText::puts(char const*)>
c00150d5:	0f 21 d0             	mov    eax,db2
c00150d8:	5d                   	pop    ebp
c00150d9:	5a                   	pop    edx
c00150da:	50                   	push   eax
c00150db:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150e6:	e8 cb bf ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c00150eb:	59                   	pop    ecx
c00150ec:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150f1:	5e                   	pop    esi
c00150f2:	68 74 b8 02 c0       	push   0xc002b874
c00150f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fd:	e8 8e bf ff ff       	call   c0011090 <VgaText::puts(char const*)>
c0015102:	0f 21 d8             	mov    eax,db3
c0015105:	5f                   	pop    edi
c0015106:	5d                   	pop    ebp
c0015107:	50                   	push   eax
c0015108:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001510d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015113:	e8 9e bf ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015118:	58                   	pop    eax
c0015119:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001511e:	5a                   	pop    edx
c001511f:	68 7c b8 02 c0       	push   0xc002b87c
c0015124:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001512a:	e8 61 bf ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001512f:	0f 21 f0             	mov    eax,db6
c0015132:	59                   	pop    ecx
c0015133:	5e                   	pop    esi
c0015134:	50                   	push   eax
c0015135:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001513a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015140:	e8 71 bf ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015145:	5f                   	pop    edi
c0015146:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001514b:	5d                   	pop    ebp
c001514c:	68 84 b8 02 c0       	push   0xc002b884
c0015151:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015157:	e8 34 bf ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001515c:	0f 21 f8             	mov    eax,db7
c001515f:	5a                   	pop    edx
c0015160:	59                   	pop    ecx
c0015161:	50                   	push   eax
c0015162:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001516d:	e8 44 bf ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c0015172:	5e                   	pop    esi
c0015173:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015176:	e8 ea 88 00 00       	call   c001da65 <Thr::getDriverNameFromAddress(unsigned long)>
c001517b:	83 c4 10             	add    esp,0x10
c001517e:	85 c0                	test   eax,eax
c0015180:	74 7d                	je     c00151ff <displayDebugInfo(regs*)+0x48b>
c0015182:	89 c6                	mov    esi,eax
c0015184:	50                   	push   eax
c0015185:	50                   	push   eax
c0015186:	56                   	push   esi
c0015187:	68 8c b8 02 c0       	push   0xc002b88c
c001518c:	e8 50 dd ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015191:	5a                   	pop    edx
c0015192:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015197:	59                   	pop    ecx
c0015198:	68 9a b8 02 c0       	push   0xc002b89a
c001519d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151a3:	e8 e8 be ff ff       	call   c0011090 <VgaText::puts(char const*)>
c00151a8:	5f                   	pop    edi
c00151a9:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00151ae:	5d                   	pop    ebp
c00151af:	56                   	push   esi
c00151b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151b6:	e8 d5 be ff ff       	call   c0011090 <VgaText::puts(char const*)>
c00151bb:	58                   	pop    eax
c00151bc:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00151c1:	5a                   	pop    edx
c00151c2:	68 a6 b8 02 c0       	push   0xc002b8a6
c00151c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151cd:	e8 be be ff ff       	call   c0011090 <VgaText::puts(char const*)>
c00151d2:	59                   	pop    ecx
c00151d3:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00151d8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00151de:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00151e1:	e8 b6 88 00 00       	call   c001da9c <Thr::getDriverOffsetFromAddress(unsigned long)>
c00151e6:	5b                   	pop    ebx
c00151e7:	5d                   	pop    ebp
c00151e8:	50                   	push   eax
c00151e9:	57                   	push   edi
c00151ea:	e8 c7 be ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c00151ef:	58                   	pop    eax
c00151f0:	5a                   	pop    edx
c00151f1:	56                   	push   esi
c00151f2:	68 b2 b8 02 c0       	push   0xc002b8b2
c00151f7:	e8 e5 dc ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	fa                   	cli    
c0015200:	f4                   	hlt    
c0015201:	eb fe                	jmp    c0015201 <displayDebugInfo(regs*)+0x48d>

c0015203 <x87EmulHandler(regs*, void*)>:
c0015203:	83 ec 0c             	sub    esp,0xc
c0015206:	0f 20 c2             	mov    edx,cr0
c0015209:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520e:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015212:	75 4b                	jne    c001525f <x87EmulHandler(regs*, void*)+0x5c>
c0015214:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015219:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c001521f:	85 c0                	test   eax,eax
c0015221:	74 05                	je     c0015228 <x87EmulHandler(regs*, void*)+0x25>
c0015223:	83 e2 08             	and    edx,0x8
c0015226:	75 17                	jne    c001523f <x87EmulHandler(regs*, void*)+0x3c>
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001522f:	e8 a5 ae 00 00       	call   c00200d9 <Vm::x87Handler(regs*)>
c0015234:	83 c4 10             	add    esp,0x10
c0015237:	84 c0                	test   al,al
c0015239:	74 24                	je     c001525f <x87EmulHandler(regs*, void*)+0x5c>
c001523b:	83 c4 0c             	add    esp,0xc
c001523e:	c3                   	ret    
c001523f:	83 ec 0c             	sub    esp,0xc
c0015242:	68 d8 b8 02 c0       	push   0xc002b8d8
c0015247:	e8 95 dc ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001524c:	0f 06                	clts   
c001524e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015253:	83 c4 10             	add    esp,0x10
c0015256:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c001525b:	83 c4 0c             	add    esp,0xc
c001525e:	c3                   	ret    
c001525f:	83 ec 0c             	sub    esp,0xc
c0015262:	68 c2 b8 02 c0       	push   0xc002b8c2
c0015267:	e8 75 dc ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001526c:	5a                   	pop    edx
c001526d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015271:	e8 fe fa ff ff       	call   c0014d74 <displayDebugInfo(regs*)>

c0015276 <gpFault(regs*, void*)>:
c0015276:	53                   	push   ebx
c0015277:	83 ec 14             	sub    esp,0x14
c001527a:	c7 05 e4 ef 02 c0 56 f4 01 c0 	mov    DWORD PTR ds:0xc002efe4,0xc001f456
c0015284:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015288:	53                   	push   ebx
c0015289:	e8 c8 a1 00 00       	call   c001f456 <Vm::faultHandler(regs*)>
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	84 c0                	test   al,al
c0015293:	74 05                	je     c001529a <gpFault(regs*, void*)+0x24>
c0015295:	83 c4 08             	add    esp,0x8
c0015298:	5b                   	pop    ebx
c0015299:	c3                   	ret    
c001529a:	83 ec 0c             	sub    esp,0xc
c001529d:	68 e5 b8 02 c0       	push   0xc002b8e5
c00152a2:	e8 3a dc ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00152a7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00152aa:	e8 c5 fa ff ff       	call   c0014d74 <displayDebugInfo(regs*)>

c00152af <pgFault(regs*, void*)>:
c00152af:	83 ec 14             	sub    esp,0x14
c00152b2:	0f 20 d0             	mov    eax,cr2
c00152b5:	50                   	push   eax
c00152b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152be:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00152c4:	e8 35 d8 ff ff       	call   c0012afe <VAS::tryLoadBackOffDisk(unsigned long)>
c00152c9:	83 c4 10             	add    esp,0x10
c00152cc:	84 c0                	test   al,al
c00152ce:	74 04                	je     c00152d4 <pgFault(regs*, void*)+0x25>
c00152d0:	83 c4 0c             	add    esp,0xc
c00152d3:	c3                   	ret    
c00152d4:	83 ec 0c             	sub    esp,0xc
c00152d7:	68 00 b9 02 c0       	push   0xc002b900
c00152dc:	e8 00 dc ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00152e1:	58                   	pop    eax
c00152e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152e6:	e8 89 fa ff ff       	call   c0014d74 <displayDebugInfo(regs*)>

c00152eb <otherISRHandler(regs*, void*)>:
c00152eb:	53                   	push   ebx
c00152ec:	83 ec 0c             	sub    esp,0xc
c00152ef:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00152f3:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00152f6:	50                   	push   eax
c00152f7:	50                   	push   eax
c00152f8:	68 0d b9 02 c0       	push   0xc002b90d
c00152fd:	e8 df db ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015302:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015305:	e8 6a fa ff ff       	call   c0014d74 <displayDebugInfo(regs*)>

c001530a <opcodeFault(regs*, void*)>:
c001530a:	55                   	push   ebp
c001530b:	89 e5                	mov    ebp,esp
c001530d:	56                   	push   esi
c001530e:	53                   	push   ebx
c001530f:	83 ec 40             	sub    esp,0x40
c0015312:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015317:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001531d:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015323:	84 c0                	test   al,al
c0015325:	74 24                	je     c001534b <opcodeFault(regs*, void*)+0x41>
c0015327:	83 ec 0c             	sub    esp,0xc
c001532a:	68 2c b9 02 c0       	push   0xc002b92c
c001532f:	e8 ad db ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015334:	83 c4 10             	add    esp,0x10
c0015337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001533d:	8d 50 19             	lea    edx,[eax+0x19]
c0015340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015343:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015346:	e9 d5 05 00 00       	jmp    c0015920 <opcodeFault(regs*, void*)+0x616>
c001534b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015351:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015354:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015358:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001535f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015362:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8a 00                	mov    al,BYTE PTR [eax]
c001536a:	3c f0                	cmp    al,0xf0
c001536c:	75 17                	jne    c0015385 <opcodeFault(regs*, void*)+0x7b>
c001536e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015374:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015377:	8d 50 01             	lea    edx,[eax+0x1]
c001537a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001537d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015380:	e9 da 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c0015385:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015388:	8a 00                	mov    al,BYTE PTR [eax]
c001538a:	3c f2                	cmp    al,0xf2
c001538c:	74 09                	je     c0015397 <opcodeFault(regs*, void*)+0x8d>
c001538e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015391:	8a 00                	mov    al,BYTE PTR [eax]
c0015393:	3c f3                	cmp    al,0xf3
c0015395:	75 1b                	jne    c00153b2 <opcodeFault(regs*, void*)+0xa8>
c0015397:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001539b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001539e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153a4:	8d 50 01             	lea    edx,[eax+0x1]
c00153a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153aa:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153ad:	e9 ad 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b5:	8a 00                	mov    al,BYTE PTR [eax]
c00153b7:	3c 66                	cmp    al,0x66
c00153b9:	75 1f                	jne    c00153da <opcodeFault(regs*, void*)+0xd0>
c00153bb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153bf:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00153c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153cc:	8d 50 01             	lea    edx,[eax+0x1]
c00153cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153d5:	e9 85 00 00 00       	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153dd:	8a 00                	mov    al,BYTE PTR [eax]
c00153df:	3c 67                	cmp    al,0x67
c00153e1:	75 18                	jne    c00153fb <opcodeFault(regs*, void*)+0xf1>
c00153e3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153e7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f0:	8d 50 01             	lea    edx,[eax+0x1]
c00153f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f9:	eb 64                	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c00153fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fe:	8a 00                	mov    al,BYTE PTR [eax]
c0015400:	3c 2e                	cmp    al,0x2e
c0015402:	74 09                	je     c001540d <opcodeFault(regs*, void*)+0x103>
c0015404:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015407:	8a 00                	mov    al,BYTE PTR [eax]
c0015409:	3c 3e                	cmp    al,0x3e
c001540b:	75 18                	jne    c0015425 <opcodeFault(regs*, void*)+0x11b>
c001540d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015411:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015417:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541a:	8d 50 01             	lea    edx,[eax+0x1]
c001541d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015420:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015423:	eb 3a                	jmp    c001545f <opcodeFault(regs*, void*)+0x155>
c0015425:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015428:	8a 00                	mov    al,BYTE PTR [eax]
c001542a:	3c 36                	cmp    al,0x36
c001542c:	74 1b                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c001542e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015431:	8a 00                	mov    al,BYTE PTR [eax]
c0015433:	3c 26                	cmp    al,0x26
c0015435:	74 12                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c0015437:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001543a:	8a 00                	mov    al,BYTE PTR [eax]
c001543c:	3c 64                	cmp    al,0x64
c001543e:	74 09                	je     c0015449 <opcodeFault(regs*, void*)+0x13f>
c0015440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015443:	8a 00                	mov    al,BYTE PTR [eax]
c0015445:	3c 65                	cmp    al,0x65
c0015447:	75 16                	jne    c001545f <opcodeFault(regs*, void*)+0x155>
c0015449:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001544d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015453:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015456:	8d 50 01             	lea    edx,[eax+0x1]
c0015459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015462:	8a 00                	mov    al,BYTE PTR [eax]
c0015464:	3c 0f                	cmp    al,0xf
c0015466:	0f 85 ad 00 00 00    	jne    c0015519 <opcodeFault(regs*, void*)+0x20f>
c001546c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546f:	40                   	inc    eax
c0015470:	8a 00                	mov    al,BYTE PTR [eax]
c0015472:	3c c2                	cmp    al,0xc2
c0015474:	74 0e                	je     c0015484 <opcodeFault(regs*, void*)+0x17a>
c0015476:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015479:	40                   	inc    eax
c001547a:	8a 00                	mov    al,BYTE PTR [eax]
c001547c:	3c c3                	cmp    al,0xc3
c001547e:	0f 85 95 00 00 00    	jne    c0015519 <opcodeFault(regs*, void*)+0x20f>
c0015484:	83 ec 0c             	sub    esp,0xc
c0015487:	68 4f b9 02 c0       	push   0xc002b94f
c001548c:	e8 50 da ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015491:	83 c4 10             	add    esp,0x10
c0015494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015497:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001549a:	8d 50 01             	lea    edx,[eax+0x1]
c001549d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154a3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a9:	8a 00                	mov    al,BYTE PTR [eax]
c00154ab:	8d 50 fe             	lea    edx,[eax-0x2]
c00154ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b1:	88 10                	mov    BYTE PTR [eax],dl
c00154b3:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00154b6:	50                   	push   eax
c00154b7:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00154ba:	50                   	push   eax
c00154bb:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00154be:	50                   	push   eax
c00154bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00154c2:	e8 9d 4a 00 00       	call   c0019f64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00154c7:	83 c4 10             	add    esp,0x10
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d0:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154d3:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00154d6:	01 d0                	add    eax,edx
c00154d8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e1:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00154e4:	48                   	dec    eax
c00154e5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00154e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154eb:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00154ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f4:	83 ec 04             	sub    esp,0x4
c00154f7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00154fa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00154fd:	50                   	push   eax
c00154fe:	e8 b1 ac fe ff       	call   c00001b4 <voodooXADD>
c0015503:	83 c4 10             	add    esp,0x10
c0015506:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015509:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001550c:	01 c2                	add    edx,eax
c001550e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015511:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015514:	e9 07 04 00 00       	jmp    c0015920 <opcodeFault(regs*, void*)+0x616>
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8a 00                	mov    al,BYTE PTR [eax]
c001551e:	3c 0f                	cmp    al,0xf
c0015520:	0f 85 8b 01 00 00    	jne    c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015529:	40                   	inc    eax
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c c7                	cmp    al,0xc7
c001552e:	0f 86 7d 01 00 00    	jbe    c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015534:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015537:	40                   	inc    eax
c0015538:	8a 00                	mov    al,BYTE PTR [eax]
c001553a:	3c cf                	cmp    al,0xcf
c001553c:	0f 87 6f 01 00 00    	ja     c00156b1 <opcodeFault(regs*, void*)+0x3a7>
c0015542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015545:	40                   	inc    eax
c0015546:	8a 00                	mov    al,BYTE PTR [eax]
c0015548:	83 c0 38             	add    eax,0x38
c001554b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001554e:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015552:	75 0b                	jne    c001555f <opcodeFault(regs*, void*)+0x255>
c0015554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015557:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001555a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001555d:	eb 75                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c001555f:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015563:	75 0b                	jne    c0015570 <opcodeFault(regs*, void*)+0x266>
c0015565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015568:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001556b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556e:	eb 64                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015570:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015574:	75 0b                	jne    c0015581 <opcodeFault(regs*, void*)+0x277>
c0015576:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015579:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001557c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001557f:	eb 53                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015581:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015585:	75 0b                	jne    c0015592 <opcodeFault(regs*, void*)+0x288>
c0015587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001558d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015590:	eb 42                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c0015592:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015596:	75 0b                	jne    c00155a3 <opcodeFault(regs*, void*)+0x299>
c0015598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c001559e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155a1:	eb 31                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155a3:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155a7:	75 0b                	jne    c00155b4 <opcodeFault(regs*, void*)+0x2aa>
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00155af:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155b2:	eb 20                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155b4:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155b8:	75 0b                	jne    c00155c5 <opcodeFault(regs*, void*)+0x2bb>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00155c0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155c3:	eb 0f                	jmp    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155c5:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155c9:	75 09                	jne    c00155d4 <opcodeFault(regs*, void*)+0x2ca>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00155d1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00155d4:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00155d8:	74 10                	je     c00155ea <opcodeFault(regs*, void*)+0x2e0>
c00155da:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00155e1:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00155e8:	eb 2d                	jmp    c0015617 <opcodeFault(regs*, void*)+0x30d>
c00155ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155ed:	c1 e0 18             	shl    eax,0x18
c00155f0:	89 c2                	mov    edx,eax
c00155f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00155f5:	c1 e0 08             	shl    eax,0x8
c00155f8:	25 00 00 ff 00       	and    eax,0xff0000
c00155fd:	09 c2                	or     edx,eax
c00155ff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015602:	c1 e8 08             	shr    eax,0x8
c0015605:	25 00 ff 00 00       	and    eax,0xff00
c001560a:	09 c2                	or     edx,eax
c001560c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001560f:	c1 e8 18             	shr    eax,0x18
c0015612:	09 d0                	or     eax,edx
c0015614:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015617:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001561b:	75 0b                	jne    c0015628 <opcodeFault(regs*, void*)+0x31e>
c001561d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015620:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015623:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015626:	eb 75                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c0015628:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001562c:	75 0b                	jne    c0015639 <opcodeFault(regs*, void*)+0x32f>
c001562e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015631:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015634:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015637:	eb 64                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c0015639:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001563d:	75 0b                	jne    c001564a <opcodeFault(regs*, void*)+0x340>
c001563f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015642:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015645:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015648:	eb 53                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001564a:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001564e:	75 0b                	jne    c001565b <opcodeFault(regs*, void*)+0x351>
c0015650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015653:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015656:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015659:	eb 42                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001565b:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001565f:	75 0b                	jne    c001566c <opcodeFault(regs*, void*)+0x362>
c0015661:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015664:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015667:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001566a:	eb 31                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001566c:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015670:	75 0b                	jne    c001567d <opcodeFault(regs*, void*)+0x373>
c0015672:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015675:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015678:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001567b:	eb 20                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001567d:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015681:	75 0b                	jne    c001568e <opcodeFault(regs*, void*)+0x384>
c0015683:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015686:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015689:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001568c:	eb 0f                	jmp    c001569d <opcodeFault(regs*, void*)+0x393>
c001568e:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015692:	75 09                	jne    c001569d <opcodeFault(regs*, void*)+0x393>
c0015694:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015697:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001569a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001569d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156a3:	8d 50 02             	lea    edx,[eax+0x2]
c00156a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156ac:	e9 6f 02 00 00       	jmp    c0015920 <opcodeFault(regs*, void*)+0x616>
c00156b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b4:	8a 00                	mov    al,BYTE PTR [eax]
c00156b6:	3c 0f                	cmp    al,0xf
c00156b8:	0f 85 8d 01 00 00    	jne    c001584b <opcodeFault(regs*, void*)+0x541>
c00156be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156c1:	40                   	inc    eax
c00156c2:	8a 00                	mov    al,BYTE PTR [eax]
c00156c4:	3c c7                	cmp    al,0xc7
c00156c6:	0f 85 7f 01 00 00    	jne    c001584b <opcodeFault(regs*, void*)+0x541>
c00156cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00156cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00156d5:	8d 50 01             	lea    edx,[eax+0x1]
c00156d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00156de:	8d 45 ba             	lea    eax,[ebp-0x46]
c00156e1:	50                   	push   eax
c00156e2:	8d 45 bb             	lea    eax,[ebp-0x45]
c00156e5:	50                   	push   eax
c00156e6:	8d 45 bc             	lea    eax,[ebp-0x44]
c00156e9:	50                   	push   eax
c00156ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00156ed:	e8 72 48 00 00       	call   c0019f64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00156f2:	83 c4 10             	add    esp,0x10
c00156f5:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00156f8:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00156fb:	83 f0 01             	xor    eax,0x1
c00156fe:	84 c0                	test   al,al
c0015700:	0f 84 45 01 00 00    	je     c001584b <opcodeFault(regs*, void*)+0x541>
c0015706:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015709:	3c 01                	cmp    al,0x1
c001570b:	0f 85 3a 01 00 00    	jne    c001584b <opcodeFault(regs*, void*)+0x541>
c0015711:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015714:	83 f0 01             	xor    eax,0x1
c0015717:	84 c0                	test   al,al
c0015719:	0f 84 2c 01 00 00    	je     c001584b <opcodeFault(regs*, void*)+0x541>
c001571f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015722:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015725:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015728:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001572f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015732:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015735:	89 c2                	mov    edx,eax
c0015737:	b8 00 00 00 00       	mov    eax,0x0
c001573c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001573f:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015748:	ba 00 00 00 00       	mov    edx,0x0
c001574d:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0015750:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015759:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001575c:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0015763:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015766:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015769:	89 c2                	mov    edx,eax
c001576b:	b8 00 00 00 00       	mov    eax,0x0
c0015770:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015773:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015779:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001577c:	ba 00 00 00 00       	mov    edx,0x0
c0015781:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015784:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015787:	fa                   	cli    
c0015788:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001578d:	40                   	inc    eax
c001578e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015793:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015796:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015799:	8b 00                	mov    eax,DWORD PTR [eax]
c001579b:	89 c1                	mov    ecx,eax
c001579d:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00157a0:	89 cb                	mov    ebx,ecx
c00157a2:	89 d0                	mov    eax,edx
c00157a4:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00157a7:	89 c6                	mov    esi,eax
c00157a9:	89 f0                	mov    eax,esi
c00157ab:	09 d8                	or     eax,ebx
c00157ad:	85 c0                	test   eax,eax
c00157af:	75 21                	jne    c00157d2 <opcodeFault(regs*, void*)+0x4c8>
c00157b1:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00157b4:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00157b7:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00157ba:	89 01                	mov    DWORD PTR [ecx],eax
c00157bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00157bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00157c5:	83 c8 40             	or     eax,0x40
c00157c8:	89 c2                	mov    edx,eax
c00157ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cd:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00157d0:	eb 3e                	jmp    c0015810 <opcodeFault(regs*, void*)+0x506>
c00157d2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00157d5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00157d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00157da:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157dd:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157e0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00157e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157ec:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ef:	89 d0                	mov    eax,edx
c00157f1:	31 d2                	xor    edx,edx
c00157f3:	89 c3                	mov    ebx,eax
c00157f5:	89 d6                	mov    esi,edx
c00157f7:	89 da                	mov    edx,ebx
c00157f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fc:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00157ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015802:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015805:	83 e0 bf             	and    eax,0xffffffbf
c0015808:	89 c2                	mov    edx,eax
c001580a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001580d:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015810:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015815:	48                   	dec    eax
c0015816:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001581b:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015820:	85 c0                	test   eax,eax
c0015822:	75 01                	jne    c0015825 <opcodeFault(regs*, void*)+0x51b>
c0015824:	fb                   	sti    
c0015825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015828:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001582b:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c001582e:	01 c2                	add    edx,eax
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015836:	83 ec 0c             	sub    esp,0xc
c0015839:	68 5e b9 02 c0       	push   0xc002b95e
c001583e:	e8 9e d6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015843:	83 c4 10             	add    esp,0x10
c0015846:	e9 d5 00 00 00       	jmp    c0015920 <opcodeFault(regs*, void*)+0x616>
c001584b:	83 ec 0c             	sub    esp,0xc
c001584e:	68 71 b9 02 c0       	push   0xc002b971
c0015853:	e8 89 d6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001585e:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015864:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015867:	c1 e0 04             	shl    eax,0x4
c001586a:	01 d0                	add    eax,edx
c001586c:	83 c0 03             	add    eax,0x3
c001586f:	8a 00                	mov    al,BYTE PTR [eax]
c0015871:	0f b6 d8             	movzx  ebx,al
c0015874:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015877:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001587a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001587d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015880:	c1 e0 04             	shl    eax,0x4
c0015883:	01 d0                	add    eax,edx
c0015885:	83 c0 02             	add    eax,0x2
c0015888:	8a 00                	mov    al,BYTE PTR [eax]
c001588a:	0f b6 c8             	movzx  ecx,al
c001588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015890:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015896:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015899:	c1 e0 04             	shl    eax,0x4
c001589c:	01 d0                	add    eax,edx
c001589e:	40                   	inc    eax
c001589f:	8a 00                	mov    al,BYTE PTR [eax]
c00158a1:	0f b6 d0             	movzx  edx,al
c00158a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158a7:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00158aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b0:	c1 e0 04             	shl    eax,0x4
c00158b3:	01 f0                	add    eax,esi
c00158b5:	8a 00                	mov    al,BYTE PTR [eax]
c00158b7:	0f b6 c0             	movzx  eax,al
c00158ba:	83 ec 0c             	sub    esp,0xc
c00158bd:	53                   	push   ebx
c00158be:	51                   	push   ecx
c00158bf:	52                   	push   edx
c00158c0:	50                   	push   eax
c00158c1:	68 84 b9 02 c0       	push   0xc002b984
c00158c6:	e8 16 d6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00158cb:	83 c4 20             	add    esp,0x20
c00158ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158d4:	83 c0 03             	add    eax,0x3
c00158d7:	8a 00                	mov    al,BYTE PTR [eax]
c00158d9:	0f b6 d8             	movzx  ebx,al
c00158dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158df:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158e2:	83 c0 02             	add    eax,0x2
c00158e5:	8a 00                	mov    al,BYTE PTR [eax]
c00158e7:	0f b6 c8             	movzx  ecx,al
c00158ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158f0:	40                   	inc    eax
c00158f1:	8a 00                	mov    al,BYTE PTR [eax]
c00158f3:	0f b6 d0             	movzx  edx,al
c00158f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158fc:	8a 00                	mov    al,BYTE PTR [eax]
c00158fe:	0f b6 c0             	movzx  eax,al
c0015901:	83 ec 0c             	sub    esp,0xc
c0015904:	53                   	push   ebx
c0015905:	51                   	push   ecx
c0015906:	52                   	push   edx
c0015907:	50                   	push   eax
c0015908:	68 ac b9 02 c0       	push   0xc002b9ac
c001590d:	e8 cf d5 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0015912:	83 c4 20             	add    esp,0x20
c0015915:	83 ec 0c             	sub    esp,0xc
c0015918:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001591b:	e8 54 f4 ff ff       	call   c0014d74 <displayDebugInfo(regs*)>
c0015920:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015923:	5b                   	pop    ebx
c0015924:	5e                   	pop    esi
c0015925:	5d                   	pop    ebp
c0015926:	c3                   	ret    

c0015927 <displayProgramFault(char const*)>:
c0015927:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001592c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001592f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015935:	85 c0                	test   eax,eax
c0015937:	74 15                	je     c001594e <displayProgramFault(char const*)+0x27>
c0015939:	83 ec 0c             	sub    esp,0xc
c001593c:	6a 04                	push   0x4
c001593e:	6a 0f                	push   0xf
c0015940:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015944:	50                   	push   eax
c0015945:	e8 88 b4 ff ff       	call   c0010dd2 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001594a:	83 c4 1c             	add    esp,0x1c
c001594d:	c3                   	ret    
c001594e:	c3                   	ret    

c001594f <setupInterruptController()>:
c001594f:	55                   	push   ebp
c0015950:	89 e5                	mov    ebp,esp
c0015952:	53                   	push   ebx
c0015953:	83 ec 24             	sub    esp,0x24
c0015956:	b8 00 00 00 00       	mov    eax,0x0
c001595b:	85 c0                	test   eax,eax
c001595d:	0f 95 c0             	setne  al
c0015960:	84 c0                	test   al,al
c0015962:	74 5b                	je     c00159bf <setupInterruptController()+0x70>
c0015964:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001596b:	83 ec 0c             	sub    esp,0xc
c001596e:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015971:	e8 b4 9f ff ff       	call   c000f92a <malloc>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	89 c3                	mov    ebx,eax
c001597b:	83 ec 0c             	sub    esp,0xc
c001597e:	53                   	push   ebx
c001597f:	e8 a2 07 01 00       	call   c0026126 <APIC::APIC()>
c0015984:	83 c4 10             	add    esp,0x10
c0015987:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001598a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001598d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015990:	8b 00                	mov    eax,DWORD PTR [eax]
c0015992:	83 c0 08             	add    eax,0x8
c0015995:	8b 00                	mov    eax,DWORD PTR [eax]
c0015997:	6a 00                	push   0x0
c0015999:	6a 00                	push   0x0
c001599b:	6a 00                	push   0x0
c001599d:	52                   	push   edx
c001599e:	ff d0                	call   eax
c00159a0:	83 c4 10             	add    esp,0x10
c00159a3:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00159a8:	83 ec 08             	sub    esp,0x8
c00159ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00159ae:	50                   	push   eax
c00159af:	e8 62 e9 ff ff       	call   c0014316 <Device::addChild(Device*)>
c00159b4:	83 c4 10             	add    esp,0x10
c00159b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00159ba:	e9 89 03 00 00       	jmp    c0015d48 <setupInterruptController()+0x3f9>
c00159bf:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c00159c4:	84 c0                	test   al,al
c00159c6:	75 24                	jne    c00159ec <setupInterruptController()+0x9d>
c00159c8:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00159cd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00159d3:	83 e2 fe             	and    edx,0xfffffffe
c00159d6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	68 d1 b9 02 c0       	push   0xc002b9d1
c00159e4:	e8 f8 d4 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00159f1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00159f7:	83 e0 01             	and    eax,0x1
c00159fa:	84 c0                	test   al,al
c00159fc:	0f 95 c0             	setne  al
c00159ff:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a02:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a09:	83 ec 0c             	sub    esp,0xc
c0015a0c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a0f:	e8 16 9f ff ff       	call   c000f92a <malloc>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	89 c3                	mov    ebx,eax
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	53                   	push   ebx
c0015a1d:	e8 5c 0c 01 00       	call   c002667e <PIC::PIC()>
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a28:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a30:	83 c0 08             	add    eax,0x8
c0015a33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a35:	6a 00                	push   0x0
c0015a37:	6a 00                	push   0x0
c0015a39:	6a 00                	push   0x0
c0015a3b:	52                   	push   edx
c0015a3c:	ff d0                	call   eax
c0015a3e:	83 c4 10             	add    esp,0x10
c0015a41:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015a45:	74 73                	je     c0015aba <setupInterruptController()+0x16b>
c0015a47:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a4a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4f:	83 c0 0c             	add    eax,0xc
c0015a52:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a54:	6a 00                	push   0x0
c0015a56:	6a 00                	push   0x0
c0015a58:	6a 00                	push   0x0
c0015a5a:	52                   	push   edx
c0015a5b:	ff d0                	call   eax
c0015a5d:	83 c4 10             	add    esp,0x10
c0015a60:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a64:	74 15                	je     c0015a7b <setupInterruptController()+0x12c>
c0015a66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6b:	83 c0 04             	add    eax,0x4
c0015a6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a70:	83 ec 0c             	sub    esp,0xc
c0015a73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a76:	ff d0                	call   eax
c0015a78:	83 c4 10             	add    esp,0x10
c0015a7b:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015a82:	83 ec 0c             	sub    esp,0xc
c0015a85:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015a88:	e8 9d 9e ff ff       	call   c000f92a <malloc>
c0015a8d:	83 c4 10             	add    esp,0x10
c0015a90:	89 c3                	mov    ebx,eax
c0015a92:	83 ec 0c             	sub    esp,0xc
c0015a95:	53                   	push   ebx
c0015a96:	e8 8b 06 01 00       	call   c0026126 <APIC::APIC()>
c0015a9b:	83 c4 10             	add    esp,0x10
c0015a9e:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015aa1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa9:	83 c0 08             	add    eax,0x8
c0015aac:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aae:	6a 00                	push   0x0
c0015ab0:	6a 00                	push   0x0
c0015ab2:	6a 00                	push   0x0
c0015ab4:	52                   	push   edx
c0015ab5:	ff d0                	call   eax
c0015ab7:	83 c4 10             	add    esp,0x10
c0015aba:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015abf:	83 ec 08             	sub    esp,0x8
c0015ac2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac5:	50                   	push   eax
c0015ac6:	e8 4b e8 ff ff       	call   c0014316 <Device::addChild(Device*)>
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	c7 05 e8 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efe8,0x0
c0015ad8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015add:	83 c0 24             	add    eax,0x24
c0015ae0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae2:	6a 00                	push   0x0
c0015ae4:	68 eb 52 01 c0       	push   0xc00152eb
c0015ae9:	6a 00                	push   0x0
c0015aeb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aee:	ff d0                	call   eax
c0015af0:	83 c4 10             	add    esp,0x10
c0015af3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015af6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af8:	83 c0 24             	add    eax,0x24
c0015afb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015afd:	6a 00                	push   0x0
c0015aff:	68 eb 52 01 c0       	push   0xc00152eb
c0015b04:	6a 01                	push   0x1
c0015b06:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b09:	ff d0                	call   eax
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b13:	83 c0 24             	add    eax,0x24
c0015b16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b18:	6a 00                	push   0x0
c0015b1a:	68 d1 4b 01 c0       	push   0xc0014bd1
c0015b1f:	6a 02                	push   0x2
c0015b21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b24:	ff d0                	call   eax
c0015b26:	83 c4 10             	add    esp,0x10
c0015b29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b2c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b2e:	83 c0 24             	add    eax,0x24
c0015b31:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b33:	6a 00                	push   0x0
c0015b35:	68 eb 52 01 c0       	push   0xc00152eb
c0015b3a:	6a 03                	push   0x3
c0015b3c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3f:	ff d0                	call   eax
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	83 c0 24             	add    eax,0x24
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	6a 00                	push   0x0
c0015b50:	68 eb 52 01 c0       	push   0xc00152eb
c0015b55:	6a 04                	push   0x4
c0015b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5a:	ff d0                	call   eax
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	83 c0 24             	add    eax,0x24
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	6a 00                	push   0x0
c0015b6b:	68 eb 52 01 c0       	push   0xc00152eb
c0015b70:	6a 05                	push   0x5
c0015b72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b75:	ff d0                	call   eax
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	83 c0 24             	add    eax,0x24
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	6a 00                	push   0x0
c0015b86:	68 0a 53 01 c0       	push   0xc001530a
c0015b8b:	6a 06                	push   0x6
c0015b8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b90:	ff d0                	call   eax
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	83 c0 24             	add    eax,0x24
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	6a 00                	push   0x0
c0015ba1:	68 03 52 01 c0       	push   0xc0015203
c0015ba6:	6a 07                	push   0x7
c0015ba8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bab:	ff d0                	call   eax
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	83 c0 24             	add    eax,0x24
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	6a 00                	push   0x0
c0015bbc:	68 ec 49 01 c0       	push   0xc00149ec
c0015bc1:	6a 08                	push   0x8
c0015bc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc6:	ff d0                	call   eax
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	83 c0 24             	add    eax,0x24
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	6a 00                	push   0x0
c0015bd7:	68 eb 52 01 c0       	push   0xc00152eb
c0015bdc:	6a 09                	push   0x9
c0015bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be1:	ff d0                	call   eax
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	83 c0 24             	add    eax,0x24
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	6a 00                	push   0x0
c0015bf2:	68 eb 52 01 c0       	push   0xc00152eb
c0015bf7:	6a 0a                	push   0xa
c0015bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfc:	ff d0                	call   eax
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	83 c0 24             	add    eax,0x24
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	6a 00                	push   0x0
c0015c0d:	68 eb 52 01 c0       	push   0xc00152eb
c0015c12:	6a 0b                	push   0xb
c0015c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c17:	ff d0                	call   eax
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	83 c0 24             	add    eax,0x24
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	6a 00                	push   0x0
c0015c28:	68 eb 52 01 c0       	push   0xc00152eb
c0015c2d:	6a 0c                	push   0xc
c0015c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c32:	ff d0                	call   eax
c0015c34:	83 c4 10             	add    esp,0x10
c0015c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	83 c0 24             	add    eax,0x24
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	6a 00                	push   0x0
c0015c43:	68 76 52 01 c0       	push   0xc0015276
c0015c48:	6a 0d                	push   0xd
c0015c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4d:	ff d0                	call   eax
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	83 c0 24             	add    eax,0x24
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	6a 00                	push   0x0
c0015c5e:	68 af 52 01 c0       	push   0xc00152af
c0015c63:	6a 0e                	push   0xe
c0015c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c68:	ff d0                	call   eax
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	83 c0 24             	add    eax,0x24
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	6a 00                	push   0x0
c0015c79:	68 eb 52 01 c0       	push   0xc00152eb
c0015c7e:	6a 0f                	push   0xf
c0015c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c83:	ff d0                	call   eax
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	83 c0 24             	add    eax,0x24
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	6a 00                	push   0x0
c0015c94:	68 eb 52 01 c0       	push   0xc00152eb
c0015c99:	6a 10                	push   0x10
c0015c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9e:	ff d0                	call   eax
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca8:	83 c0 24             	add    eax,0x24
c0015cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cad:	6a 00                	push   0x0
c0015caf:	68 eb 52 01 c0       	push   0xc00152eb
c0015cb4:	6a 11                	push   0x11
c0015cb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb9:	ff d0                	call   eax
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc3:	83 c0 24             	add    eax,0x24
c0015cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc8:	6a 00                	push   0x0
c0015cca:	68 eb 52 01 c0       	push   0xc00152eb
c0015ccf:	6a 12                	push   0x12
c0015cd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd4:	ff d0                	call   eax
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	83 c0 24             	add    eax,0x24
c0015ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce3:	6a 00                	push   0x0
c0015ce5:	68 eb 52 01 c0       	push   0xc00152eb
c0015cea:	6a 13                	push   0x13
c0015cec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cef:	ff d0                	call   eax
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf9:	83 c0 24             	add    eax,0x24
c0015cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfe:	6a 00                	push   0x0
c0015d00:	68 eb 52 01 c0       	push   0xc00152eb
c0015d05:	6a 14                	push   0x14
c0015d07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0a:	ff d0                	call   eax
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d14:	83 c0 24             	add    eax,0x24
c0015d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d19:	6a 00                	push   0x0
c0015d1b:	68 eb 52 01 c0       	push   0xc00152eb
c0015d20:	6a 1e                	push   0x1e
c0015d22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d25:	ff d0                	call   eax
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2f:	83 c0 24             	add    eax,0x24
c0015d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d34:	6a 00                	push   0x0
c0015d36:	68 db ca 01 c0       	push   0xc001cadb
c0015d3b:	6a 60                	push   0x60
c0015d3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d40:	ff d0                	call   eax
c0015d42:	83 c4 10             	add    esp,0x10
c0015d45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d4b:	c9                   	leave  
c0015d4c:	c3                   	ret    
c0015d4d:	90                   	nop

c0015d4e <InterruptController::convertLegacyIRQNumber(int)>:
c0015d4e:	55                   	push   ebp
c0015d4f:	89 e5                	mov    ebp,esp
c0015d51:	83 ec 08             	sub    esp,0x8
c0015d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d57:	83 ec 0c             	sub    esp,0xc
c0015d5a:	50                   	push   eax
c0015d5b:	e8 a2 e8 ff ff       	call   c0014602 <Device::getName()>
c0015d60:	83 c4 10             	add    esp,0x10
c0015d63:	8a 00                	mov    al,BYTE PTR [eax]
c0015d65:	3c 41                	cmp    al,0x41
c0015d67:	0f 94 c0             	sete   al
c0015d6a:	84 c0                	test   al,al
c0015d6c:	74 28                	je     c0015d96 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d6e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015d72:	7f 12                	jg     c0015d86 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d77:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c0015d7c:	8a 00                	mov    al,BYTE PTR [eax]
c0015d7e:	0f b6 c0             	movzx  eax,al
c0015d81:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015d84:	eb 10                	jmp    c0015d96 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015d86:	83 ec 0c             	sub    esp,0xc
c0015d89:	68 c0 b6 02 c0       	push   0xc002b6c0
c0015d8e:	e8 0a 4b 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d99:	c9                   	leave  
c0015d9a:	c3                   	ret    
c0015d9b:	90                   	nop

c0015d9c <startGUI(void*)>:
c0015d9c:	55                   	push   ebp
c0015d9d:	89 e5                	mov    ebp,esp
c0015d9f:	53                   	push   ebx
c0015da0:	83 ec 04             	sub    esp,0x4
c0015da3:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015da8:	48                   	dec    eax
c0015da9:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015dae:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015db3:	85 c0                	test   eax,eax
c0015db5:	75 01                	jne    c0015db8 <startGUI(void*)+0x1c>
c0015db7:	fb                   	sti    
c0015db8:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015dbe:	83 ec 08             	sub    esp,0x8
c0015dc1:	6a 01                	push   0x1
c0015dc3:	68 34 ba 02 c0       	push   0xc002ba34
c0015dc8:	e8 e9 7c 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c0015dcd:	83 c4 10             	add    esp,0x10
c0015dd0:	83 ec 08             	sub    esp,0x8
c0015dd3:	53                   	push   ebx
c0015dd4:	50                   	push   eax
c0015dd5:	e8 07 7f 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c0015dda:	83 c4 10             	add    esp,0x10
c0015ddd:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015de3:	83 ec 08             	sub    esp,0x8
c0015de6:	6a 01                	push   0x1
c0015de8:	68 4e ba 02 c0       	push   0xc002ba4e
c0015ded:	e8 c4 7c 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c0015df2:	83 c4 10             	add    esp,0x10
c0015df5:	83 ec 08             	sub    esp,0x8
c0015df8:	53                   	push   ebx
c0015df9:	50                   	push   eax
c0015dfa:	e8 e2 7e 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	90                   	nop
c0015e03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e06:	c9                   	leave  
c0015e07:	c3                   	ret    

c0015e08 <startGUIVESA(void*)>:
c0015e08:	55                   	push   ebp
c0015e09:	89 e5                	mov    ebp,esp
c0015e0b:	53                   	push   ebx
c0015e0c:	83 ec 04             	sub    esp,0x4
c0015e0f:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015e14:	48                   	dec    eax
c0015e15:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015e1a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015e1f:	85 c0                	test   eax,eax
c0015e21:	75 01                	jne    c0015e24 <startGUIVESA(void*)+0x1c>
c0015e23:	fb                   	sti    
c0015e24:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015e2a:	83 ec 08             	sub    esp,0x8
c0015e2d:	6a 01                	push   0x1
c0015e2f:	68 68 ba 02 c0       	push   0xc002ba68
c0015e34:	e8 7d 7c 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c0015e39:	83 c4 10             	add    esp,0x10
c0015e3c:	83 ec 08             	sub    esp,0x8
c0015e3f:	53                   	push   ebx
c0015e40:	50                   	push   eax
c0015e41:	e8 9b 7e 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015e4f:	83 ec 08             	sub    esp,0x8
c0015e52:	6a 01                	push   0x1
c0015e54:	68 4e ba 02 c0       	push   0xc002ba4e
c0015e59:	e8 58 7c 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c0015e5e:	83 c4 10             	add    esp,0x10
c0015e61:	83 ec 08             	sub    esp,0x8
c0015e64:	53                   	push   ebx
c0015e65:	50                   	push   eax
c0015e66:	e8 76 7e 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c0015e6b:	83 c4 10             	add    esp,0x10
c0015e6e:	90                   	nop
c0015e6f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e72:	c9                   	leave  
c0015e73:	c3                   	ret    

c0015e74 <sendKeyToTerminal(unsigned char)>:
c0015e74:	55                   	push   ebp
c0015e75:	89 e5                	mov    ebp,esp
c0015e77:	83 ec 28             	sub    esp,0x28
c0015e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015e80:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0015e85:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015e89:	83 ec 08             	sub    esp,0x8
c0015e8c:	52                   	push   edx
c0015e8d:	50                   	push   eax
c0015e8e:	e8 17 b4 ff ff       	call   c00112aa <VgaText::receiveKey(unsigned char)>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e9a:	0f 85 8f 00 00 00    	jne    c0015f2f <sendKeyToTerminal(unsigned char)+0xbb>
c0015ea0:	fa                   	cli    
c0015ea1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015ea6:	40                   	inc    eax
c0015ea7:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015eac:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015eb1:	40                   	inc    eax
c0015eb2:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0015eb7:	a1 00 f0 02 c0       	mov    eax,ds:0xc002f000
c0015ebc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ebf:	c7 05 00 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f000,0x0
c0015ec9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ecd:	74 1f                	je     c0015eee <sendKeyToTerminal(unsigned char)+0x7a>
c0015ecf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ed2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015ed5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015ed8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015edb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ede:	83 ec 0c             	sub    esp,0xc
c0015ee1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015ee4:	e8 6f 8a 00 00       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	eb db                	jmp    c0015ec9 <sendKeyToTerminal(unsigned char)+0x55>
c0015eee:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015ef3:	48                   	dec    eax
c0015ef4:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0015ef9:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015efe:	85 c0                	test   eax,eax
c0015f00:	75 18                	jne    c0015f1a <sendKeyToTerminal(unsigned char)+0xa6>
c0015f02:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c0015f07:	85 c0                	test   eax,eax
c0015f09:	74 0f                	je     c0015f1a <sendKeyToTerminal(unsigned char)+0xa6>
c0015f0b:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c0015f15:	e8 7a 85 00 00       	call   c001e494 <schedule()>
c0015f1a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015f1f:	48                   	dec    eax
c0015f20:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015f25:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015f2a:	85 c0                	test   eax,eax
c0015f2c:	75 01                	jne    c0015f2f <sendKeyToTerminal(unsigned char)+0xbb>
c0015f2e:	fb                   	sti    
c0015f2f:	90                   	nop
c0015f30:	c9                   	leave  
c0015f31:	c3                   	ret    

c0015f32 <sendKeyboardToken(KeyboardToken)>:
c0015f32:	55                   	push   ebp
c0015f33:	89 e5                	mov    ebp,esp
c0015f35:	83 ec 18             	sub    esp,0x18
c0015f38:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3e:	0f b7 c0             	movzx  eax,ax
c0015f41:	83 f2 01             	xor    edx,0x1
c0015f44:	88 90 20 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0fe0],dl
c0015f4a:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0015f4f:	85 c0                	test   eax,eax
c0015f51:	74 24                	je     c0015f77 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f53:	8b 0d 08 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f008
c0015f59:	83 ec 04             	sub    esp,0x4
c0015f5c:	68 20 f0 02 c0       	push   0xc002f020
c0015f61:	83 ec 08             	sub    esp,0x8
c0015f64:	89 e2                	mov    edx,esp
c0015f66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f69:	89 02                	mov    DWORD PTR [edx],eax
c0015f6b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f6e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f72:	ff d1                	call   ecx
c0015f74:	83 c4 10             	add    esp,0x10
c0015f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7a:	66 3d 03 02          	cmp    ax,0x203
c0015f7e:	75 07                	jne    c0015f87 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f80:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0015f85:	84 c0                	test   al,al
c0015f87:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f8b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f8e:	a0 28 f4 02 c0       	mov    al,ds:0xc002f428
c0015f93:	38 c2                	cmp    dl,al
c0015f95:	74 1c                	je     c0015fb3 <sendKeyboardToken(KeyboardToken)+0x81>
c0015f97:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f9a:	a2 28 f4 02 c0       	mov    ds:0xc002f428,al
c0015f9f:	a0 28 f4 02 c0       	mov    al,ds:0xc002f428
c0015fa4:	0f b6 c0             	movzx  eax,al
c0015fa7:	83 ec 0c             	sub    esp,0xc
c0015faa:	50                   	push   eax
c0015fab:	e8 82 a6 ff ff       	call   c0010632 <setTerminalScrollLock(bool)>
c0015fb0:	83 c4 10             	add    esp,0x10
c0015fb3:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fb6:	84 c0                	test   al,al
c0015fb8:	0f 84 ae 00 00 00    	je     c001606c <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc1:	66 3d 10 03          	cmp    ax,0x310
c0015fc5:	75 06                	jne    c0015fcd <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fc7:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd0:	66 3d 11 03          	cmp    ax,0x311
c0015fd4:	75 06                	jne    c0015fdc <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fd6:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fdf:	66 3d 12 03          	cmp    ax,0x312
c0015fe3:	75 06                	jne    c0015feb <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fe5:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fee:	66 3d 13 03          	cmp    ax,0x313
c0015ff2:	75 06                	jne    c0015ffa <sendKeyboardToken(KeyboardToken)+0xc8>
c0015ff4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffd:	66 3d 14 03          	cmp    ax,0x314
c0016001:	75 06                	jne    c0016009 <sendKeyboardToken(KeyboardToken)+0xd7>
c0016003:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0016009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600c:	66 3d 15 03          	cmp    ax,0x315
c0016010:	75 06                	jne    c0016018 <sendKeyboardToken(KeyboardToken)+0xe6>
c0016012:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001601b:	66 3d 16 03          	cmp    ax,0x316
c001601f:	75 06                	jne    c0016027 <sendKeyboardToken(KeyboardToken)+0xf5>
c0016021:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001602a:	66 3d 17 03          	cmp    ax,0x317
c001602e:	75 06                	jne    c0016036 <sendKeyboardToken(KeyboardToken)+0x104>
c0016030:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016036:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016039:	66 3d 18 03          	cmp    ax,0x318
c001603d:	75 06                	jne    c0016045 <sendKeyboardToken(KeyboardToken)+0x113>
c001603f:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0016045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016048:	66 3d 19 03          	cmp    ax,0x319
c001604c:	75 06                	jne    c0016054 <sendKeyboardToken(KeyboardToken)+0x122>
c001604e:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0016054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016057:	66 3d 1a 03          	cmp    ax,0x31a
c001605b:	0f 85 c9 00 00 00    	jne    c001612a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016061:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016067:	e9 be 00 00 00       	jmp    c001612a <sendKeyboardToken(KeyboardToken)+0x1f8>
c001606c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606f:	66 3d 10 03          	cmp    ax,0x310
c0016073:	75 0a                	jne    c001607f <sendKeyboardToken(KeyboardToken)+0x14d>
c0016075:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001607b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016082:	66 3d 11 03          	cmp    ax,0x311
c0016086:	75 0a                	jne    c0016092 <sendKeyboardToken(KeyboardToken)+0x160>
c0016088:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001608e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016095:	66 3d 12 03          	cmp    ax,0x312
c0016099:	75 0a                	jne    c00160a5 <sendKeyboardToken(KeyboardToken)+0x173>
c001609b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00160a1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a8:	66 3d 13 03          	cmp    ax,0x313
c00160ac:	75 0a                	jne    c00160b8 <sendKeyboardToken(KeyboardToken)+0x186>
c00160ae:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160bb:	66 3d 14 03          	cmp    ax,0x314
c00160bf:	75 0a                	jne    c00160cb <sendKeyboardToken(KeyboardToken)+0x199>
c00160c1:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ce:	66 3d 15 03          	cmp    ax,0x315
c00160d2:	75 0a                	jne    c00160de <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160d4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160da:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e1:	66 3d 16 03          	cmp    ax,0x316
c00160e5:	75 0a                	jne    c00160f1 <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160e7:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160ed:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f4:	66 3d 17 03          	cmp    ax,0x317
c00160f8:	75 0a                	jne    c0016104 <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160fa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016100:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016107:	66 3d 18 03          	cmp    ax,0x318
c001610b:	75 0a                	jne    c0016117 <sendKeyboardToken(KeyboardToken)+0x1e5>
c001610d:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016113:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611a:	66 3d 19 03          	cmp    ax,0x319
c001611e:	75 0a                	jne    c001612a <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016120:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016126:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001612a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612d:	66 3d 00 02          	cmp    ax,0x200
c0016131:	75 2c                	jne    c001615f <sendKeyboardToken(KeyboardToken)+0x22d>
c0016133:	a0 20 f4 02 c0       	mov    al,ds:0xc002f420
c0016138:	83 f0 01             	xor    eax,0x1
c001613b:	84 c0                	test   al,al
c001613d:	74 20                	je     c001615f <sendKeyboardToken(KeyboardToken)+0x22d>
c001613f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0016144:	6a 01                	push   0x1
c0016146:	6a 00                	push   0x0
c0016148:	68 9c 5d 01 c0       	push   0xc0015d9c
c001614d:	50                   	push   eax
c001614e:	e8 fd 80 00 00       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c0016153:	83 c4 10             	add    esp,0x10
c0016156:	c6 05 20 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f420,0x1
c001615d:	eb 33                	jmp    c0016192 <sendKeyboardToken(KeyboardToken)+0x260>
c001615f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016162:	66 3d 01 02          	cmp    ax,0x201
c0016166:	75 2a                	jne    c0016192 <sendKeyboardToken(KeyboardToken)+0x260>
c0016168:	a0 20 f4 02 c0       	mov    al,ds:0xc002f420
c001616d:	83 f0 01             	xor    eax,0x1
c0016170:	84 c0                	test   al,al
c0016172:	74 1e                	je     c0016192 <sendKeyboardToken(KeyboardToken)+0x260>
c0016174:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0016179:	6a 01                	push   0x1
c001617b:	6a 00                	push   0x0
c001617d:	68 08 5e 01 c0       	push   0xc0015e08
c0016182:	50                   	push   eax
c0016183:	e8 c8 80 00 00       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c0016188:	83 c4 10             	add    esp,0x10
c001618b:	c6 05 20 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f420,0x1
c0016192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016195:	66 3d 1d 03          	cmp    ax,0x31d
c0016199:	75 06                	jne    c00161a1 <sendKeyboardToken(KeyboardToken)+0x26f>
c001619b:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00161a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161a4:	66 3d 1c 03          	cmp    ax,0x31c
c00161a8:	75 06                	jne    c00161b0 <sendKeyboardToken(KeyboardToken)+0x27e>
c00161aa:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161b3:	66 3d 1b 03          	cmp    ax,0x31b
c00161b7:	75 06                	jne    c00161bf <sendKeyboardToken(KeyboardToken)+0x28d>
c00161b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c2:	66 3d 1e 03          	cmp    ax,0x31e
c00161c6:	75 06                	jne    c00161ce <sendKeyboardToken(KeyboardToken)+0x29c>
c00161c8:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161d1:	66 3d 1f 03          	cmp    ax,0x31f
c00161d5:	75 06                	jne    c00161dd <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161d7:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161e0:	66 3d 1a 03          	cmp    ax,0x31a
c00161e4:	75 06                	jne    c00161ec <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161e6:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161ec:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161f0:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161f3:	83 f0 01             	xor    eax,0x1
c00161f6:	84 c0                	test   al,al
c00161f8:	74 77                	je     c0016271 <sendKeyboardToken(KeyboardToken)+0x33f>
c00161fa:	a0 21 f1 02 c0       	mov    al,ds:0xc002f121
c00161ff:	84 c0                	test   al,al
c0016201:	74 41                	je     c0016244 <sendKeyboardToken(KeyboardToken)+0x312>
c0016203:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016207:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001620b:	74 2b                	je     c0016238 <sendKeyboardToken(KeyboardToken)+0x306>
c001620d:	8b 15 24 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f424
c0016213:	89 d0                	mov    eax,edx
c0016215:	c1 e0 02             	shl    eax,0x2
c0016218:	01 d0                	add    eax,edx
c001621a:	01 c0                	add    eax,eax
c001621c:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c0016221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016224:	0f b7 c0             	movzx  eax,ax
c0016227:	8d 50 d0             	lea    edx,[eax-0x30]
c001622a:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001622f:	01 d0                	add    eax,edx
c0016231:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c0016236:	eb 6d                	jmp    c00162a5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016238:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c0016242:	eb 61                	jmp    c00162a5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016244:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0016249:	85 c0                	test   eax,eax
c001624b:	74 18                	je     c0016265 <sendKeyboardToken(KeyboardToken)+0x333>
c001624d:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0016252:	0f b6 c0             	movzx  eax,al
c0016255:	83 ec 0c             	sub    esp,0xc
c0016258:	50                   	push   eax
c0016259:	e8 16 fc ff ff       	call   c0015e74 <sendKeyToTerminal(unsigned char)>
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016265:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c001626f:	eb 34                	jmp    c00162a5 <sendKeyboardToken(KeyboardToken)+0x373>
c0016271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016274:	66 3d 01 01          	cmp    ax,0x101
c0016278:	75 2b                	jne    c00162a5 <sendKeyboardToken(KeyboardToken)+0x373>
c001627a:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001627f:	85 c0                	test   eax,eax
c0016281:	74 18                	je     c001629b <sendKeyboardToken(KeyboardToken)+0x369>
c0016283:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0016288:	0f b6 c0             	movzx  eax,al
c001628b:	83 ec 0c             	sub    esp,0xc
c001628e:	50                   	push   eax
c001628f:	e8 e0 fb ff ff       	call   c0015e74 <sendKeyToTerminal(unsigned char)>
c0016294:	83 c4 10             	add    esp,0x10
c0016297:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001629b:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c00162a5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a8:	83 f0 01             	xor    eax,0x1
c00162ab:	84 c0                	test   al,al
c00162ad:	74 4c                	je     c00162fb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162af:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b2:	83 f0 01             	xor    eax,0x1
c00162b5:	84 c0                	test   al,al
c00162b7:	74 42                	je     c00162fb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b9:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c00162be:	83 f0 01             	xor    eax,0x1
c00162c1:	84 c0                	test   al,al
c00162c3:	74 36                	je     c00162fb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c8:	66 83 f8 1f          	cmp    ax,0x1f
c00162cc:	76 09                	jbe    c00162d7 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d1:	66 83 f8 7e          	cmp    ax,0x7e
c00162d5:	76 12                	jbe    c00162e9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162da:	66 83 f8 0a          	cmp    ax,0xa
c00162de:	74 09                	je     c00162e9 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e3:	66 83 f8 08          	cmp    ax,0x8
c00162e7:	75 12                	jne    c00162fb <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ec:	0f b6 c0             	movzx  eax,al
c00162ef:	83 ec 0c             	sub    esp,0xc
c00162f2:	50                   	push   eax
c00162f3:	e8 7c fb ff ff       	call   c0015e74 <sendKeyToTerminal(unsigned char)>
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162fe:	83 f0 01             	xor    eax,0x1
c0016301:	84 c0                	test   al,al
c0016303:	74 4f                	je     c0016354 <sendKeyboardToken(KeyboardToken)+0x422>
c0016305:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016308:	83 f0 01             	xor    eax,0x1
c001630b:	84 c0                	test   al,al
c001630d:	74 45                	je     c0016354 <sendKeyboardToken(KeyboardToken)+0x422>
c001630f:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0016314:	84 c0                	test   al,al
c0016316:	74 3c                	je     c0016354 <sendKeyboardToken(KeyboardToken)+0x422>
c0016318:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631b:	66 83 f8 3f          	cmp    ax,0x3f
c001631f:	76 33                	jbe    c0016354 <sendKeyboardToken(KeyboardToken)+0x422>
c0016321:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016324:	66 83 f8 7f          	cmp    ax,0x7f
c0016328:	77 2a                	ja     c0016354 <sendKeyboardToken(KeyboardToken)+0x422>
c001632a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632d:	88 c2                	mov    dl,al
c001632f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016332:	66 83 f8 5f          	cmp    ax,0x5f
c0016336:	76 04                	jbe    c001633c <sendKeyboardToken(KeyboardToken)+0x40a>
c0016338:	b0 20                	mov    al,0x20
c001633a:	eb 02                	jmp    c001633e <sendKeyboardToken(KeyboardToken)+0x40c>
c001633c:	b0 00                	mov    al,0x0
c001633e:	29 c2                	sub    edx,eax
c0016340:	88 d0                	mov    al,dl
c0016342:	83 e8 40             	sub    eax,0x40
c0016345:	0f b6 c0             	movzx  eax,al
c0016348:	83 ec 0c             	sub    esp,0xc
c001634b:	50                   	push   eax
c001634c:	e8 23 fb ff ff       	call   c0015e74 <sendKeyToTerminal(unsigned char)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016357:	66 3d 00 03          	cmp    ax,0x300
c001635b:	75 0f                	jne    c001636c <sendKeyboardToken(KeyboardToken)+0x43a>
c001635d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016360:	83 f0 01             	xor    eax,0x1
c0016363:	84 c0                	test   al,al
c0016365:	74 05                	je     c001636c <sendKeyboardToken(KeyboardToken)+0x43a>
c0016367:	e8 3e aa ff ff       	call   c0010daa <doTerminalCycle()>
c001636c:	90                   	nop
c001636d:	c9                   	leave  
c001636e:	c3                   	ret    

c001636f <clearInternalKeybuffer(VgaText*)>:
c001636f:	55                   	push   ebp
c0016370:	89 e5                	mov    ebp,esp
c0016372:	83 ec 08             	sub    esp,0x8
c0016375:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016378:	05 98 01 00 00       	add    eax,0x198
c001637d:	83 ec 0c             	sub    esp,0xc
c0016380:	50                   	push   eax
c0016381:	e8 32 a4 fe ff       	call   c00007b8 <strlen>
c0016386:	83 c4 10             	add    esp,0x10
c0016389:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001638c:	81 c2 98 01 00 00    	add    edx,0x198
c0016392:	83 ec 04             	sub    esp,0x4
c0016395:	50                   	push   eax
c0016396:	6a 00                	push   0x0
c0016398:	52                   	push   edx
c0016399:	e8 fe a3 fe ff       	call   c000079c <memset>
c001639e:	83 c4 10             	add    esp,0x10
c00163a1:	90                   	nop
c00163a2:	c9                   	leave  
c00163a3:	c3                   	ret    

c00163a4 <readKeyboard(VgaText*, char*, unsigned long)>:
c00163a4:	55                   	push   ebp
c00163a5:	89 e5                	mov    ebp,esp
c00163a7:	83 ec 18             	sub    esp,0x18
c00163aa:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c00163af:	85 c0                	test   eax,eax
c00163b1:	74 2a                	je     c00163dd <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c00163b3:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c00163b9:	8b 0d 08 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f008
c00163bf:	83 ec 04             	sub    esp,0x4
c00163c2:	68 20 f0 02 c0       	push   0xc002f020
c00163c7:	83 ec 08             	sub    esp,0x8
c00163ca:	89 e2                	mov    edx,esp
c00163cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00163cf:	89 02                	mov    DWORD PTR [edx],eax
c00163d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00163d4:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00163d8:	ff d1                	call   ecx
c00163da:	83 c4 10             	add    esp,0x10
c00163dd:	83 ec 0c             	sub    esp,0xc
c00163e0:	68 83 ba 02 c0       	push   0xc002ba83
c00163e5:	e8 f7 ca ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	fb                   	sti    
c00163ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163f5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163f9:	0f 84 a1 00 00 00    	je     c00164a0 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c00163ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016402:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016408:	84 c0                	test   al,al
c001640a:	75 28                	jne    c0016434 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c001640c:	fa                   	cli    
c001640d:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016412:	40                   	inc    eax
c0016413:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016418:	e8 77 80 00 00       	call   c001e494 <schedule()>
c001641d:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016422:	48                   	dec    eax
c0016423:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016428:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001642d:	85 c0                	test   eax,eax
c001642f:	75 ce                	jne    c00163ff <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016431:	fb                   	sti    
c0016432:	eb cb                	jmp    c00163ff <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016434:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0016437:	8d 50 01             	lea    edx,[eax+0x1]
c001643a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001643d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016440:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0016446:	88 10                	mov    BYTE PTR [eax],dl
c0016448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001644b:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016451:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0016454:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016457:	05 98 01 00 00       	add    eax,0x198
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	50                   	push   eax
c0016460:	e8 53 a3 fe ff       	call   c00007b8 <strlen>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001646b:	81 c2 98 01 00 00    	add    edx,0x198
c0016471:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016474:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016477:	81 c2 98 01 00 00    	add    edx,0x198
c001647d:	83 ec 04             	sub    esp,0x4
c0016480:	50                   	push   eax
c0016481:	51                   	push   ecx
c0016482:	52                   	push   edx
c0016483:	e8 18 a2 fe ff       	call   c00006a0 <memmove>
c0016488:	83 c4 10             	add    esp,0x10
c001648b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001648e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016491:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016495:	0f 85 5a ff ff ff    	jne    c00163f5 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c001649b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001649e:	eb 03                	jmp    c00164a3 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00164a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00164a3:	c9                   	leave  
c00164a4:	c3                   	ret    
c00164a5:	90                   	nop

c00164a6 <Keyboard::Keyboard(char const*)>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ad:	83 ec 08             	sub    esp,0x8
c00164b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b4:	50                   	push   eax
c00164b5:	e8 4c e0 ff ff       	call   c0014506 <Device::Device(char const*)>
c00164ba:	83 c4 10             	add    esp,0x10
c00164bd:	ba a4 ba 02 c0       	mov    edx,0xc002baa4
c00164c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164c6:	89 10                	mov    DWORD PTR [eax],edx
c00164c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00164d6:	c6 05 04 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f004,0x1
c00164dd:	90                   	nop
c00164de:	83 c4 0c             	add    esp,0xc
c00164e1:	c3                   	ret    

c00164e2 <Keyboard::~Keyboard()>:
c00164e2:	83 ec 0c             	sub    esp,0xc
c00164e5:	ba a4 ba 02 c0       	mov    edx,0xc002baa4
c00164ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164ee:	89 10                	mov    DWORD PTR [eax],edx
c00164f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f4:	83 ec 0c             	sub    esp,0xc
c00164f7:	50                   	push   eax
c00164f8:	e8 eb dc ff ff       	call   c00141e8 <Device::~Device()>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	90                   	nop
c0016501:	83 c4 0c             	add    esp,0xc
c0016504:	c3                   	ret    
c0016505:	90                   	nop

c0016506 <Keyboard::~Keyboard()>:
c0016506:	83 ec 0c             	sub    esp,0xc
c0016509:	83 ec 0c             	sub    esp,0xc
c001650c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016510:	e8 cd ff ff ff       	call   c00164e2 <Keyboard::~Keyboard()>
c0016515:	83 c4 10             	add    esp,0x10
c0016518:	83 ec 08             	sub    esp,0x8
c001651b:	68 5c 01 00 00       	push   0x15c
c0016520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016524:	e8 d8 c8 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0016529:	83 c4 10             	add    esp,0x10
c001652c:	83 c4 0c             	add    esp,0xc
c001652f:	c3                   	ret    

c0016530 <LogicalDisk::close(int, int, void*)>:
c0016530:	83 c8 ff             	or     eax,0xffffffff
c0016533:	c3                   	ret    

c0016534 <LogicalDisk::~LogicalDisk()>:
c0016534:	83 ec 0c             	sub    esp,0xc
c0016537:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c001653c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016540:	89 10                	mov    DWORD PTR [eax],edx
c0016542:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016546:	83 ec 0c             	sub    esp,0xc
c0016549:	50                   	push   eax
c001654a:	e8 99 dc ff ff       	call   c00141e8 <Device::~Device()>
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	90                   	nop
c0016553:	83 c4 0c             	add    esp,0xc
c0016556:	c3                   	ret    
c0016557:	90                   	nop

c0016558 <LogicalDisk::~LogicalDisk()>:
c0016558:	83 ec 0c             	sub    esp,0xc
c001655b:	83 ec 0c             	sub    esp,0xc
c001655e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016562:	e8 cd ff ff ff       	call   c0016534 <LogicalDisk::~LogicalDisk()>
c0016567:	83 c4 10             	add    esp,0x10
c001656a:	83 ec 08             	sub    esp,0x8
c001656d:	68 74 01 00 00       	push   0x174
c0016572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016576:	e8 86 c8 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001657b:	83 c4 10             	add    esp,0x10
c001657e:	83 c4 0c             	add    esp,0xc
c0016581:	c3                   	ret    

c0016582 <LogicalDisk::open(int, int, void*)>:
c0016582:	83 ec 18             	sub    esp,0x18
c0016585:	68 d0 ba 02 c0       	push   0xc002bad0
c001658a:	e8 0e 43 00 00       	call   c001a89d <Krnl::panic(char const*)>
c001658f:	83 c8 ff             	or     eax,0xffffffff
c0016592:	83 c4 1c             	add    esp,0x1c
c0016595:	c3                   	ret    

c0016596 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016596:	53                   	push   ebx
c0016597:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001659b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001659f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00165a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00165af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00165b5:	77 10                	ja     c00165c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00165b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00165bd:	89 d3                	mov    ebx,edx
c00165bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00165c5:	72 05                	jb     c00165cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00165c7:	83 c8 ff             	or     eax,0xffffffff
c00165ca:	89 c2                	mov    edx,eax
c00165cc:	5b                   	pop    ebx
c00165cd:	c3                   	ret    

c00165ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00165ce:	56                   	push   esi
c00165cf:	83 c8 ff             	or     eax,0xffffffff
c00165d2:	53                   	push   ebx
c00165d3:	89 c2                	mov    edx,eax
c00165d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00165d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00165dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00165e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00165e7:	77 27                	ja     c0016610 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165e9:	89 d8                	mov    eax,ebx
c00165eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00165f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00165f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00165fc:	89 c2                	mov    edx,eax
c00165fe:	73 10                	jae    c0016610 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016600:	89 c8                	mov    eax,ecx
c0016602:	89 da                	mov    edx,ebx
c0016604:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001660a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016610:	5b                   	pop    ebx
c0016611:	5e                   	pop    esi
c0016612:	c3                   	ret    
c0016613:	90                   	nop

c0016614 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016614:	83 ec 1c             	sub    esp,0x1c
c0016617:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001661b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001661f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016623:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016627:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001662b:	89 04 24             	mov    DWORD PTR [esp],eax
c001662e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016632:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663a:	83 ec 08             	sub    esp,0x8
c001663d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016641:	50                   	push   eax
c0016642:	e8 bf de ff ff       	call   c0014506 <Device::Device(char const*)>
c0016647:	83 c4 10             	add    esp,0x10
c001664a:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c001664f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016653:	89 10                	mov    DWORD PTR [eax],edx
c0016655:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016659:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016664:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001666b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016679:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001667d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016681:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016685:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001668b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016691:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016695:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016698:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001669c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00166a2:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00166a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ac:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00166b0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00166b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ba:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00166c4:	90                   	nop
c00166c5:	83 c4 1c             	add    esp,0x1c
c00166c8:	c3                   	ret    
c00166c9:	90                   	nop

c00166ca <LogicalDisk::assignDriveLetter()>:
c00166ca:	55                   	push   ebp
c00166cb:	57                   	push   edi
c00166cc:	56                   	push   esi
c00166cd:	53                   	push   ebx
c00166ce:	83 ec 14             	sub    esp,0x14
c00166d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00166d5:	8b 3d 40 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f440
c00166db:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00166e1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00166e5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00166eb:	8b 3d 44 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f444
c00166f1:	3c 01                	cmp    al,0x1
c00166f3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00166f7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00166fb:	19 c0                	sbb    eax,eax
c00166fd:	83 e0 02             	and    eax,0x2
c0016700:	83 c0 41             	add    eax,0x41
c0016703:	0f be e8             	movsx  ebp,al
c0016706:	3c 43                	cmp    al,0x43
c0016708:	75 10                	jne    c001671a <LogicalDisk::assignDriveLetter()+0x50>
c001670a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016711:	75 5d                	jne    c0016770 <LogicalDisk::assignDriveLetter()+0xa6>
c0016713:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016718:	75 56                	jne    c0016770 <LogicalDisk::assignDriveLetter()+0xa6>
c001671a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001671d:	ba 01 00 00 00       	mov    edx,0x1
c0016722:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016726:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001672a:	d3 e2                	shl    edx,cl
c001672c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016730:	89 d7                	mov    edi,edx
c0016732:	89 d6                	mov    esi,edx
c0016734:	c1 ff 1f             	sar    edi,0x1f
c0016737:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001673b:	21 f9                	and    ecx,edi
c001673d:	09 d1                	or     ecx,edx
c001673f:	75 2f                	jne    c0016770 <LogicalDisk::assignDriveLetter()+0xa6>
c0016741:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016745:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016749:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001674f:	09 f2                	or     edx,esi
c0016751:	89 15 40 f4 02 c0    	mov    DWORD PTR ds:0xc002f440,edx
c0016757:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001675b:	09 fa                	or     edx,edi
c001675d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016761:	89 15 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,edx
c0016767:	89 1c bd 60 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0ba0],ebx
c001676e:	eb 08                	jmp    c0016778 <LogicalDisk::assignDriveLetter()+0xae>
c0016770:	45                   	inc    ebp
c0016771:	40                   	inc    eax
c0016772:	3c 5b                	cmp    al,0x5b
c0016774:	75 90                	jne    c0016706 <LogicalDisk::assignDriveLetter()+0x3c>
c0016776:	31 c0                	xor    eax,eax
c0016778:	83 c4 14             	add    esp,0x14
c001677b:	5b                   	pop    ebx
c001677c:	5e                   	pop    esi
c001677d:	5f                   	pop    edi
c001677e:	5d                   	pop    ebp
c001677f:	c3                   	ret    

c0016780 <LogicalDisk::mount()>:
c0016780:	56                   	push   esi
c0016781:	53                   	push   ebx
c0016782:	50                   	push   eax
c0016783:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016787:	8b 1d d4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd4
c001678d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016797:	85 db                	test   ebx,ebx
c0016799:	74 50                	je     c00167eb <LogicalDisk::mount()+0x6b>
c001679b:	50                   	push   eax
c001679c:	50                   	push   eax
c001679d:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c00167a3:	68 f4 ba 02 c0       	push   0xc002baf4
c00167a8:	e8 34 c7 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00167ad:	83 c4 0c             	add    esp,0xc
c00167b0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00167b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00167b9:	83 e8 41             	sub    eax,0x41
c00167bc:	50                   	push   eax
c00167bd:	56                   	push   esi
c00167be:	53                   	push   ebx
c00167bf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00167c2:	83 c4 10             	add    esp,0x10
c00167c5:	84 c0                	test   al,al
c00167c7:	74 08                	je     c00167d1 <LogicalDisk::mount()+0x51>
c00167c9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00167cf:	eb 1c                	jmp    c00167ed <LogicalDisk::mount()+0x6d>
c00167d1:	51                   	push   ecx
c00167d2:	51                   	push   ecx
c00167d3:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c00167d9:	68 0f bb 02 c0       	push   0xc002bb0f
c00167de:	e8 fe c6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00167e3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00167e6:	83 c4 10             	add    esp,0x10
c00167e9:	eb ac                	jmp    c0016797 <LogicalDisk::mount()+0x17>
c00167eb:	31 c0                	xor    eax,eax
c00167ed:	5a                   	pop    edx
c00167ee:	5b                   	pop    ebx
c00167ef:	5e                   	pop    esi
c00167f0:	c3                   	ret    
c00167f1:	90                   	nop

c00167f2 <LogicalDisk::unmount()>:
c00167f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016800:	c3                   	ret    
c0016801:	90                   	nop

c0016802 <LogicalDisk::eject()>:
c0016802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016806:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001680c:	8b 10                	mov    edx,DWORD PTR [eax]
c001680e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016812:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016815:	90                   	nop

c0016816 <LogicalDisk::unassignDriveLetter()>:
c0016816:	57                   	push   edi
c0016817:	56                   	push   esi
c0016818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001681c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016823:	84 c9                	test   cl,cl
c0016825:	75 0f                	jne    c0016836 <LogicalDisk::unassignDriveLetter()+0x20>
c0016827:	c7 44 24 0c 2a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb2a
c001682f:	5e                   	pop    esi
c0016830:	5f                   	pop    edi
c0016831:	e9 67 40 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c0016836:	83 e9 41             	sub    ecx,0x41
c0016839:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016840:	b8 01 00 00 00       	mov    eax,0x1
c0016845:	c7 04 8d 60 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0ba0],0x0
c0016850:	d3 e0                	shl    eax,cl
c0016852:	89 c7                	mov    edi,eax
c0016854:	f7 d0                	not    eax
c0016856:	c1 ff 1f             	sar    edi,0x1f
c0016859:	21 05 40 f4 02 c0    	and    DWORD PTR ds:0xc002f440,eax
c001685f:	89 fe                	mov    esi,edi
c0016861:	f7 d6                	not    esi
c0016863:	21 35 44 f4 02 c0    	and    DWORD PTR ds:0xc002f444,esi
c0016869:	5e                   	pop    esi
c001686a:	5f                   	pop    edi
c001686b:	c3                   	ret    

c001686c <LogicalDisk::read(unsigned long long, int, void*)>:
c001686c:	57                   	push   edi
c001686d:	56                   	push   esi
c001686e:	53                   	push   ebx
c001686f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016877:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001687b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001687f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016885:	77 41                	ja     c00168c8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016887:	99                   	cdq    
c0016888:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001688e:	01 c8                	add    eax,ecx
c0016890:	11 da                	adc    edx,ebx
c0016892:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016898:	19 d7                	sbb    edi,edx
c001689a:	72 33                	jb     c00168cf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001689c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168a2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168ac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168b0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168c0:	5b                   	pop    ebx
c00168c1:	5e                   	pop    esi
c00168c2:	5f                   	pop    edi
c00168c3:	e9 f8 0a 00 00       	jmp    c00173c0 <VCache::read(unsigned long long, int, void*)>
c00168c8:	b8 05 00 00 00       	mov    eax,0x5
c00168cd:	eb 05                	jmp    c00168d4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00168cf:	b8 07 00 00 00       	mov    eax,0x7
c00168d4:	5b                   	pop    ebx
c00168d5:	5e                   	pop    esi
c00168d6:	5f                   	pop    edi
c00168d7:	c3                   	ret    

c00168d8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00168d8:	57                   	push   edi
c00168d9:	56                   	push   esi
c00168da:	53                   	push   ebx
c00168db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00168df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00168e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00168e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00168eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00168f1:	77 41                	ja     c0016934 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00168f3:	99                   	cdq    
c00168f4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00168fa:	01 c8                	add    eax,ecx
c00168fc:	11 da                	adc    edx,ebx
c00168fe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016904:	19 d7                	sbb    edi,edx
c0016906:	72 33                	jb     c001693b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016908:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001690e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016914:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016918:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001691c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016922:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001692c:	5b                   	pop    ebx
c001692d:	5e                   	pop    esi
c001692e:	5f                   	pop    edi
c001692f:	e9 96 09 00 00       	jmp    c00172ca <VCache::write(unsigned long long, int, void*)>
c0016934:	b8 05 00 00 00       	mov    eax,0x5
c0016939:	eb 05                	jmp    c0016940 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001693b:	b8 07 00 00 00       	mov    eax,0x7
c0016940:	5b                   	pop    ebx
c0016941:	5e                   	pop    esi
c0016942:	5f                   	pop    edi
c0016943:	c3                   	ret    

c0016944 <Mouse::Mouse(char const*)>:
c0016944:	83 ec 0c             	sub    esp,0xc
c0016947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001694b:	83 ec 08             	sub    esp,0x8
c001694e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016952:	50                   	push   eax
c0016953:	e8 ae db ff ff       	call   c0014506 <Device::Device(char const*)>
c0016958:	83 c4 10             	add    esp,0x10
c001695b:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c0016960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016964:	89 10                	mov    DWORD PTR [eax],edx
c0016966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001696a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016974:	90                   	nop
c0016975:	83 c4 0c             	add    esp,0xc
c0016978:	c3                   	ret    
c0016979:	90                   	nop

c001697a <Mouse::~Mouse()>:
c001697a:	83 ec 0c             	sub    esp,0xc
c001697d:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c0016982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016986:	89 10                	mov    DWORD PTR [eax],edx
c0016988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001698c:	83 ec 0c             	sub    esp,0xc
c001698f:	50                   	push   eax
c0016990:	e8 53 d8 ff ff       	call   c00141e8 <Device::~Device()>
c0016995:	83 c4 10             	add    esp,0x10
c0016998:	90                   	nop
c0016999:	83 c4 0c             	add    esp,0xc
c001699c:	c3                   	ret    
c001699d:	90                   	nop

c001699e <Mouse::~Mouse()>:
c001699e:	83 ec 0c             	sub    esp,0xc
c00169a1:	83 ec 0c             	sub    esp,0xc
c00169a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169a8:	e8 cd ff ff ff       	call   c001697a <Mouse::~Mouse()>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	83 ec 08             	sub    esp,0x8
c00169b3:	68 58 01 00 00       	push   0x158
c00169b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00169bc:	e8 40 c4 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	83 c4 0c             	add    esp,0xc
c00169c7:	c3                   	ret    

c00169c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00169c8:	55                   	push   ebp
c00169c9:	57                   	push   edi
c00169ca:	56                   	push   esi
c00169cb:	53                   	push   ebx
c00169cc:	81 ec 20 01 00 00    	sub    esp,0x120
c00169d2:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00169d9:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00169e0:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00169e7:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00169ee:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00169f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00169fa:	56                   	push   esi
c00169fb:	68 a4 bb 02 c0       	push   0xc002bba4
c0016a00:	e8 dc c4 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0016a05:	58                   	pop    eax
c0016a06:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a0d:	e8 f0 db ff ff       	call   c0014602 <Device::getName()>
c0016a12:	5a                   	pop    edx
c0016a13:	59                   	pop    ecx
c0016a14:	50                   	push   eax
c0016a15:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016a19:	53                   	push   ebx
c0016a1a:	e8 39 9e fe ff       	call   c0000858 <strcpy>
c0016a1f:	5d                   	pop    ebp
c0016a20:	58                   	pop    eax
c0016a21:	68 d5 bb 02 c0       	push   0xc002bbd5
c0016a26:	53                   	push   ebx
c0016a27:	e8 6c 9f fe ff       	call   c0000998 <strcat>
c0016a2c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016a33:	e8 f2 8e ff ff       	call   c000f92a <malloc>
c0016a38:	83 c4 0c             	add    esp,0xc
c0016a3b:	89 c5                	mov    ebp,eax
c0016a3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a41:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016a45:	57                   	push   edi
c0016a46:	56                   	push   esi
c0016a47:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016a4e:	53                   	push   ebx
c0016a4f:	50                   	push   eax
c0016a50:	e8 bf fb ff ff       	call   c0016614 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016a55:	83 c4 14             	add    esp,0x14
c0016a58:	55                   	push   ebp
c0016a59:	e8 6c fc ff ff       	call   c00166ca <LogicalDisk::assignDriveLetter()>
c0016a5e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016a61:	0f be d8             	movsx  ebx,al
c0016a64:	e8 17 fd ff ff       	call   c0016780 <LogicalDisk::mount()>
c0016a69:	58                   	pop    eax
c0016a6a:	5a                   	pop    edx
c0016a6b:	55                   	push   ebp
c0016a6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a73:	e8 9e d8 ff ff       	call   c0014316 <Device::addChild(Device*)>
c0016a78:	59                   	pop    ecx
c0016a79:	5e                   	pop    esi
c0016a7a:	53                   	push   ebx
c0016a7b:	68 e0 bb 02 c0       	push   0xc002bbe0
c0016a80:	e8 5c c4 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0016a85:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a8b:	5b                   	pop    ebx
c0016a8c:	5e                   	pop    esi
c0016a8d:	5f                   	pop    edi
c0016a8e:	5d                   	pop    ebp
c0016a8f:	c3                   	ret    

c0016a90 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a90:	55                   	push   ebp
c0016a91:	57                   	push   edi
c0016a92:	56                   	push   esi
c0016a93:	53                   	push   ebx
c0016a94:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a9a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016aa1:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016aa7:	3d 00 02 00 00       	cmp    eax,0x200
c0016aac:	74 27                	je     c0016ad5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016aae:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016ab4:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016aba:	83 ec 10             	sub    esp,0x10
c0016abd:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016ac1:	99                   	cdq    
c0016ac2:	c1 e6 0a             	shl    esi,0xa
c0016ac5:	52                   	push   edx
c0016ac6:	89 fd                	mov    ebp,edi
c0016ac8:	50                   	push   eax
c0016ac9:	55                   	push   ebp
c0016aca:	56                   	push   esi
c0016acb:	e8 e4 06 01 00       	call   c00271b4 <__udivdi3>
c0016ad0:	e9 b1 00 00 00       	jmp    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ada:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016ade:	56                   	push   esi
c0016adf:	6a 01                	push   0x1
c0016ae1:	6a 00                	push   0x0
c0016ae3:	6a 00                	push   0x0
c0016ae5:	53                   	push   ebx
c0016ae6:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016ae9:	83 c4 20             	add    esp,0x20
c0016aec:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016af4:	75 0a                	jne    c0016b00 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016af6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016afe:	74 2c                	je     c0016b2c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016b00:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b06:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b0c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b12:	83 ec 10             	sub    esp,0x10
c0016b15:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b19:	89 f7                	mov    edi,esi
c0016b1b:	c1 e0 0a             	shl    eax,0xa
c0016b1e:	c1 ff 1f             	sar    edi,0x1f
c0016b21:	57                   	push   edi
c0016b22:	56                   	push   esi
c0016b23:	52                   	push   edx
c0016b24:	50                   	push   eax
c0016b25:	e8 8a 06 01 00       	call   c00271b4 <__udivdi3>
c0016b2a:	eb 5a                	jmp    c0016b86 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016b2c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016b33:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016b3a:	83 e1 7f             	and    ecx,0x7f
c0016b3d:	83 e0 7f             	and    eax,0x7f
c0016b40:	01 c1                	add    ecx,eax
c0016b42:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016b49:	83 e0 7f             	and    eax,0x7f
c0016b4c:	01 c1                	add    ecx,eax
c0016b4e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016b55:	83 e0 7f             	and    eax,0x7f
c0016b58:	00 c1                	add    cl,al
c0016b5a:	74 41                	je     c0016b9d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016b5c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016b62:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016b68:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b6e:	83 ec 10             	sub    esp,0x10
c0016b71:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b75:	89 f7                	mov    edi,esi
c0016b77:	c1 e0 0a             	shl    eax,0xa
c0016b7a:	c1 ff 1f             	sar    edi,0x1f
c0016b7d:	57                   	push   edi
c0016b7e:	56                   	push   esi
c0016b7f:	52                   	push   edx
c0016b80:	50                   	push   eax
c0016b81:	e8 2e 06 01 00       	call   c00271b4 <__udivdi3>
c0016b86:	83 c4 14             	add    esp,0x14
c0016b89:	52                   	push   edx
c0016b8a:	50                   	push   eax
c0016b8b:	6a 00                	push   0x0
c0016b8d:	6a 00                	push   0x0
c0016b8f:	53                   	push   ebx
c0016b90:	e8 33 fe ff ff       	call   c00169c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b95:	83 c4 20             	add    esp,0x20
c0016b98:	e9 79 01 00 00       	jmp    c0016d16 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b9d:	89 f0                	mov    eax,esi
c0016b9f:	31 f6                	xor    esi,esi
c0016ba1:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016ba8:	75 02                	jne    c0016bac <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016baa:	89 f1                	mov    ecx,esi
c0016bac:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016bb3:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016bba:	c1 e2 08             	shl    edx,0x8
c0016bbd:	c1 e7 10             	shl    edi,0x10
c0016bc0:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016bc8:	09 fa                	or     edx,edi
c0016bca:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016bd2:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016bd9:	83 c0 10             	add    eax,0x10
c0016bdc:	09 fa                	or     edx,edi
c0016bde:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016be5:	c1 e7 18             	shl    edi,0x18
c0016be8:	09 fa                	or     edx,edi
c0016bea:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016bf1:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016bf5:	c1 e7 10             	shl    edi,0x10
c0016bf8:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016bff:	c1 e2 08             	shl    edx,0x8
c0016c02:	09 fa                	or     edx,edi
c0016c04:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016c0b:	09 fa                	or     edx,edi
c0016c0d:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016c14:	c1 e7 18             	shl    edi,0x18
c0016c17:	09 fa                	or     edx,edi
c0016c19:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016c1d:	46                   	inc    esi
c0016c1e:	83 fe 04             	cmp    esi,0x4
c0016c21:	0f 85 7a ff ff ff    	jne    c0016ba1 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2b:	83 f0 01             	xor    eax,0x1
c0016c2e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016c32:	75 57                	jne    c0016c8b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016c38:	83 f0 01             	xor    eax,0x1
c0016c3b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016c3f:	75 4a                	jne    c0016c8b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016c41:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016c45:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016c4d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016c55:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016c5b:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016c61:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016c67:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c6b:	89 f7                	mov    edi,esi
c0016c6d:	c1 e0 0a             	shl    eax,0xa
c0016c70:	c1 ff 1f             	sar    edi,0x1f
c0016c73:	57                   	push   edi
c0016c74:	56                   	push   esi
c0016c75:	52                   	push   edx
c0016c76:	50                   	push   eax
c0016c77:	e8 38 05 01 00       	call   c00271b4 <__udivdi3>
c0016c7c:	83 c4 10             	add    esp,0x10
c0016c7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c83:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c87:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c8b:	84 c9                	test   cl,cl
c0016c8d:	74 53                	je     c0016ce2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c8f:	0f b6 c9             	movzx  ecx,cl
c0016c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c96:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c9a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c9e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016ca2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016caa:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016cae:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016cba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016cc2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016cc6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016cca:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016cce:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016cd2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016cd6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016cda:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016cde:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016ce2:	31 ed                	xor    ebp,ebp
c0016ce4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016ce8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016cec:	89 f8                	mov    eax,edi
c0016cee:	09 f0                	or     eax,esi
c0016cf0:	74 1e                	je     c0016d10 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016cf2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016cf6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016cfa:	89 d1                	mov    ecx,edx
c0016cfc:	09 c1                	or     ecx,eax
c0016cfe:	74 10                	je     c0016d10 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	57                   	push   edi
c0016d04:	56                   	push   esi
c0016d05:	52                   	push   edx
c0016d06:	50                   	push   eax
c0016d07:	53                   	push   ebx
c0016d08:	e8 bb fc ff ff       	call   c00169c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016d0d:	83 c4 20             	add    esp,0x20
c0016d10:	45                   	inc    ebp
c0016d11:	83 fd 04             	cmp    ebp,0x4
c0016d14:	75 ce                	jne    c0016ce4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016d16:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016d1c:	5b                   	pop    ebx
c0016d1d:	5e                   	pop    esi
c0016d1e:	5f                   	pop    edi
c0016d1f:	5d                   	pop    ebp
c0016d20:	c3                   	ret    
c0016d21:	90                   	nop

c0016d22 <Serial::Serial(char const*)>:
c0016d22:	83 ec 0c             	sub    esp,0xc
c0016d25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d29:	83 ec 08             	sub    esp,0x8
c0016d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d30:	50                   	push   eax
c0016d31:	e8 d0 d7 ff ff       	call   c0014506 <Device::Device(char const*)>
c0016d36:	83 c4 10             	add    esp,0x10
c0016d39:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c0016d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d42:	89 10                	mov    DWORD PTR [eax],edx
c0016d44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d48:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016d52:	90                   	nop
c0016d53:	83 c4 0c             	add    esp,0xc
c0016d56:	c3                   	ret    
c0016d57:	90                   	nop

c0016d58 <Serial::~Serial()>:
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c0016d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d64:	89 10                	mov    DWORD PTR [eax],edx
c0016d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	50                   	push   eax
c0016d6e:	e8 75 d4 ff ff       	call   c00141e8 <Device::~Device()>
c0016d73:	83 c4 10             	add    esp,0x10
c0016d76:	90                   	nop
c0016d77:	83 c4 0c             	add    esp,0xc
c0016d7a:	c3                   	ret    
c0016d7b:	90                   	nop

c0016d7c <Serial::~Serial()>:
c0016d7c:	83 ec 0c             	sub    esp,0xc
c0016d7f:	83 ec 0c             	sub    esp,0xc
c0016d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d86:	e8 cd ff ff ff       	call   c0016d58 <Serial::~Serial()>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	83 ec 08             	sub    esp,0x8
c0016d91:	68 58 01 00 00       	push   0x158
c0016d96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9a:	e8 62 c0 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	83 c4 0c             	add    esp,0xc
c0016da5:	c3                   	ret    

c0016da6 <Timer::Timer(char const*)>:
c0016da6:	83 ec 0c             	sub    esp,0xc
c0016da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dad:	83 ec 08             	sub    esp,0x8
c0016db0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db4:	50                   	push   eax
c0016db5:	e8 4c d7 ff ff       	call   c0014506 <Device::Device(char const*)>
c0016dba:	83 c4 10             	add    esp,0x10
c0016dbd:	ba 50 bc 02 c0       	mov    edx,0xc002bc50
c0016dc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dc6:	89 10                	mov    DWORD PTR [eax],edx
c0016dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dcc:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016dd6:	90                   	nop
c0016dd7:	83 c4 0c             	add    esp,0xc
c0016dda:	c3                   	ret    
c0016ddb:	90                   	nop

c0016ddc <Timer::~Timer()>:
c0016ddc:	83 ec 0c             	sub    esp,0xc
c0016ddf:	ba 50 bc 02 c0       	mov    edx,0xc002bc50
c0016de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016de8:	89 10                	mov    DWORD PTR [eax],edx
c0016dea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016dee:	83 ec 0c             	sub    esp,0xc
c0016df1:	50                   	push   eax
c0016df2:	e8 f1 d3 ff ff       	call   c00141e8 <Device::~Device()>
c0016df7:	83 c4 10             	add    esp,0x10
c0016dfa:	90                   	nop
c0016dfb:	83 c4 0c             	add    esp,0xc
c0016dfe:	c3                   	ret    
c0016dff:	90                   	nop

c0016e00 <Timer::~Timer()>:
c0016e00:	83 ec 0c             	sub    esp,0xc
c0016e03:	83 ec 0c             	sub    esp,0xc
c0016e06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e0a:	e8 cd ff ff ff       	call   c0016ddc <Timer::~Timer()>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	83 ec 08             	sub    esp,0x8
c0016e15:	68 5c 01 00 00       	push   0x15c
c0016e1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016e1e:	e8 de bf ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0016e23:	83 c4 10             	add    esp,0x10
c0016e26:	83 c4 0c             	add    esp,0xc
c0016e29:	c3                   	ret    

c0016e2a <Timer::read()>:
c0016e2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016e2e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016e34:	c3                   	ret    

c0016e35 <timerHandler(unsigned long long)>:
c0016e35:	55                   	push   ebp
c0016e36:	57                   	push   edi
c0016e37:	56                   	push   esi
c0016e38:	53                   	push   ebx
c0016e39:	83 ec 0c             	sub    esp,0xc
c0016e3c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e40:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016e44:	01 35 d0 f4 02 c0    	add    DWORD PTR ds:0xc002f4d0,esi
c0016e4a:	11 3d d4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4d4,edi
c0016e50:	80 3d 4d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4d,0x0
c0016e57:	0f 84 42 01 00 00    	je     c0016f9f <timerHandler(unsigned long long)+0x16a>
c0016e5d:	fa                   	cli    
c0016e5e:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c0016e6d:	68 98 23 03 c0       	push   0xc0032398
c0016e72:	e8 c3 23 01 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e77:	83 c4 10             	add    esp,0x10
c0016e7a:	84 c0                	test   al,al
c0016e7c:	0f 85 a2 00 00 00    	jne    c0016f24 <timerHandler(unsigned long long)+0xef>
c0016e82:	83 ec 0c             	sub    esp,0xc
c0016e85:	68 98 23 03 c0       	push   0xc0032398
c0016e8a:	e8 c7 23 01 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e8f:	83 c4 10             	add    esp,0x10
c0016e92:	89 c3                	mov    ebx,eax
c0016e94:	83 ec 0c             	sub    esp,0xc
c0016e97:	68 98 23 03 c0       	push   0xc0032398
c0016e9c:	e8 b5 23 01 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ea1:	c7 04 24 98 23 03 c0 	mov    DWORD PTR [esp],0xc0032398
c0016ea8:	89 c5                	mov    ebp,eax
c0016eaa:	e8 af 23 01 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016eaf:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016eb2:	83 c4 10             	add    esp,0x10
c0016eb5:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016eb8:	39 15 d0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4d0,edx
c0016ebe:	a1 d4 f4 02 c0       	mov    eax,ds:0xc002f4d4
c0016ec3:	19 c8                	sbb    eax,ecx
c0016ec5:	72 21                	jb     c0016ee8 <timerHandler(unsigned long long)+0xb3>
c0016ec7:	83 ec 0c             	sub    esp,0xc
c0016eca:	55                   	push   ebp
c0016ecb:	e8 88 7a 00 00       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c0016ed0:	83 c4 10             	add    esp,0x10
c0016ed3:	39 eb                	cmp    ebx,ebp
c0016ed5:	75 21                	jne    c0016ef8 <timerHandler(unsigned long long)+0xc3>
c0016ed7:	83 ec 0c             	sub    esp,0xc
c0016eda:	68 98 23 03 c0       	push   0xc0032398
c0016edf:	e8 72 23 01 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016ee4:	89 c3                	mov    ebx,eax
c0016ee6:	eb 0d                	jmp    c0016ef5 <timerHandler(unsigned long long)+0xc0>
c0016ee8:	50                   	push   eax
c0016ee9:	50                   	push   eax
c0016eea:	55                   	push   ebp
c0016eeb:	68 98 23 03 c0       	push   0xc0032398
c0016ef0:	e8 17 24 01 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016ef5:	83 c4 10             	add    esp,0x10
c0016ef8:	83 ec 0c             	sub    esp,0xc
c0016efb:	68 98 23 03 c0       	push   0xc0032398
c0016f00:	e8 35 23 01 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016f05:	83 c4 10             	add    esp,0x10
c0016f08:	84 c0                	test   al,al
c0016f0a:	75 18                	jne    c0016f24 <timerHandler(unsigned long long)+0xef>
c0016f0c:	83 ec 0c             	sub    esp,0xc
c0016f0f:	68 98 23 03 c0       	push   0xc0032398
c0016f14:	e8 3d 23 01 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f19:	83 c4 10             	add    esp,0x10
c0016f1c:	39 d8                	cmp    eax,ebx
c0016f1e:	0f 85 70 ff ff ff    	jne    c0016e94 <timerHandler(unsigned long long)+0x5f>
c0016f24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f29:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016f2d:	74 3d                	je     c0016f6c <timerHandler(unsigned long long)+0x137>
c0016f2f:	80 3d 4c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4c,0x0
c0016f36:	74 34                	je     c0016f6c <timerHandler(unsigned long long)+0x137>
c0016f38:	fa                   	cli    
c0016f39:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0016f3f:	31 d2                	xor    edx,edx
c0016f41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f46:	89 f9                	mov    ecx,edi
c0016f48:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016f4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f50:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016f53:	39 c6                	cmp    esi,eax
c0016f55:	19 d1                	sbb    ecx,edx
c0016f57:	72 05                	jb     c0016f5e <timerHandler(unsigned long long)+0x129>
c0016f59:	e8 36 75 00 00       	call   c001e494 <schedule()>
c0016f5e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016f63:	48                   	dec    eax
c0016f64:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016f69:	75 01                	jne    c0016f6c <timerHandler(unsigned long long)+0x137>
c0016f6b:	fb                   	sti    
c0016f6c:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0016f71:	48                   	dec    eax
c0016f72:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0016f77:	75 18                	jne    c0016f91 <timerHandler(unsigned long long)+0x15c>
c0016f79:	83 3d 80 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032380,0x0
c0016f80:	74 0f                	je     c0016f91 <timerHandler(unsigned long long)+0x15c>
c0016f82:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c0016f8c:	e8 03 75 00 00       	call   c001e494 <schedule()>
c0016f91:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016f96:	48                   	dec    eax
c0016f97:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016f9c:	75 01                	jne    c0016f9f <timerHandler(unsigned long long)+0x16a>
c0016f9e:	fb                   	sti    
c0016f9f:	83 c4 0c             	add    esp,0xc
c0016fa2:	5b                   	pop    ebx
c0016fa3:	5e                   	pop    esi
c0016fa4:	5f                   	pop    edi
c0016fa5:	5d                   	pop    ebp
c0016fa6:	c3                   	ret    

c0016fa7 <setupTimer(int)>:
c0016fa7:	57                   	push   edi
c0016fa8:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016fad:	56                   	push   esi
c0016fae:	53                   	push   ebx
c0016faf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016fb3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fb9:	83 ec 0c             	sub    esp,0xc
c0016fbc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fc2:	e8 3b d6 ff ff       	call   c0014602 <Device::getName()>
c0016fc7:	83 c4 10             	add    esp,0x10
c0016fca:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016fcd:	0f 85 8d 00 00 00    	jne    c0017060 <setupTimer(int)+0xb9>
c0016fd3:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016fd8:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016fdf:	74 7f                	je     c0017060 <setupTimer(int)+0xb9>
c0016fe1:	83 ec 0c             	sub    esp,0xc
c0016fe4:	68 5c 01 00 00       	push   0x15c
c0016fe9:	e8 3c 89 ff ff       	call   c000f92a <malloc>
c0016fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0016ff1:	89 c3                	mov    ebx,eax
c0016ff3:	e8 90 fd 00 00       	call   c0026d88 <PIT::PIT()>
c0016ff8:	59                   	pop    ecx
c0016ff9:	5f                   	pop    edi
c0016ffa:	53                   	push   ebx
c0016ffb:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0017001:	e8 10 d3 ff ff       	call   c0014316 <Device::addChild(Device*)>
c0017006:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017008:	6a 00                	push   0x0
c001700a:	6a 00                	push   0x0
c001700c:	56                   	push   esi
c001700d:	53                   	push   ebx
c001700e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017011:	83 c4 14             	add    esp,0x14
c0017014:	68 60 01 00 00       	push   0x160
c0017019:	e8 0c 89 ff ff       	call   c000f92a <malloc>
c001701e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017021:	89 c7                	mov    edi,eax
c0017023:	e8 10 fc 00 00       	call   c0026c38 <APICTimer::APICTimer()>
c0017028:	6a 00                	push   0x0
c001702a:	6a 00                	push   0x0
c001702c:	56                   	push   esi
c001702d:	57                   	push   edi
c001702e:	e8 07 fb 00 00       	call   c0026b3a <APICTimer::open(int, int, void*)>
c0017033:	83 c4 20             	add    esp,0x20
c0017036:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017038:	6a 00                	push   0x0
c001703a:	6a 00                	push   0x0
c001703c:	6a 00                	push   0x0
c001703e:	53                   	push   ebx
c001703f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017042:	58                   	pop    eax
c0017043:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017048:	5a                   	pop    edx
c0017049:	57                   	push   edi
c001704a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017050:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0017056:	e8 bb d2 ff ff       	call   c0014316 <Device::addChild(Device*)>
c001705b:	83 c4 10             	add    esp,0x10
c001705e:	eb 33                	jmp    c0017093 <setupTimer(int)+0xec>
c0017060:	83 ec 0c             	sub    esp,0xc
c0017063:	68 5c 01 00 00       	push   0x15c
c0017068:	e8 bd 88 ff ff       	call   c000f92a <malloc>
c001706d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017070:	89 c3                	mov    ebx,eax
c0017072:	e8 11 fd 00 00       	call   c0026d88 <PIT::PIT()>
c0017077:	58                   	pop    eax
c0017078:	5a                   	pop    edx
c0017079:	53                   	push   ebx
c001707a:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0017080:	e8 91 d2 ff ff       	call   c0014316 <Device::addChild(Device*)>
c0017085:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017087:	6a 00                	push   0x0
c0017089:	6a 00                	push   0x0
c001708b:	56                   	push   esi
c001708c:	53                   	push   ebx
c001708d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017090:	83 c4 20             	add    esp,0x20
c0017093:	89 d8                	mov    eax,ebx
c0017095:	5b                   	pop    ebx
c0017096:	5e                   	pop    esi
c0017097:	5f                   	pop    edi
c0017098:	c3                   	ret    
c0017099:	90                   	nop

c001709a <VCache::VCache(PhysicalDisk*)>:
c001709a:	53                   	push   ebx
c001709b:	83 ec 18             	sub    esp,0x18
c001709e:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c00170a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a7:	89 10                	mov    DWORD PTR [eax],edx
c00170a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ad:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00170b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b8:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00170bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c3:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00170ca:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00170d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d5:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00170dc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00170e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00170ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f2:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00170f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fa:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017101:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017108:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001710c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017110:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017114:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017120:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017124:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001712b:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017133:	83 ec 0c             	sub    esp,0xc
c0017136:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001713a:	e8 eb 87 ff ff       	call   c000f92a <malloc>
c001713f:	83 c4 10             	add    esp,0x10
c0017142:	89 c3                	mov    ebx,eax
c0017144:	83 ec 0c             	sub    esp,0xc
c0017147:	53                   	push   ebx
c0017148:	e8 f1 70 00 00       	call   c001e23e <Mutex::Mutex()>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017154:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017157:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001715b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001715f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017166:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001716d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017171:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0017177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001717b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001717e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017182:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0017188:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001718e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017192:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0017195:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001719c:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00171a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171a4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171aa:	05 00 01 00 00       	add    eax,0x100
c00171af:	c1 e0 04             	shl    eax,0x4
c00171b2:	83 ec 0c             	sub    esp,0xc
c00171b5:	50                   	push   eax
c00171b6:	e8 6f 87 ff ff       	call   c000f92a <malloc>
c00171bb:	83 c4 10             	add    esp,0x10
c00171be:	89 c2                	mov    edx,eax
c00171c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171c4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00171c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171cb:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c00171d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171d6:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00171da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00171de:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00171e4:	c1 e0 07             	shl    eax,0x7
c00171e7:	83 ec 0c             	sub    esp,0xc
c00171ea:	50                   	push   eax
c00171eb:	e8 3a 87 ff ff       	call   c000f92a <malloc>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	89 c2                	mov    edx,eax
c00171f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171f9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00171fc:	90                   	nop
c00171fd:	83 c4 18             	add    esp,0x18
c0017200:	5b                   	pop    ebx
c0017201:	c3                   	ret    

c0017202 <VCache::invalidateReadBuffer()>:
c0017202:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017206:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c001720c:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017210:	c3                   	ret    
c0017211:	90                   	nop

c0017212 <VCache::writeWriteBuffer()>:
c0017212:	53                   	push   ebx
c0017213:	83 ec 14             	sub    esp,0x14
c0017216:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001721a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001721d:	8b 10                	mov    edx,DWORD PTR [eax]
c001721f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017222:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017225:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017228:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001722b:	50                   	push   eax
c001722c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c001722f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0017236:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c001723d:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017241:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0017248:	83 c4 28             	add    esp,0x28
c001724b:	5b                   	pop    ebx
c001724c:	c3                   	ret    
c001724d:	90                   	nop

c001724e <VCache::~VCache()>:
c001724e:	83 ec 0c             	sub    esp,0xc
c0017251:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0017256:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001725a:	89 10                	mov    DWORD PTR [eax],edx
c001725c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017260:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0017263:	84 c0                	test   al,al
c0017265:	74 0f                	je     c0017276 <VCache::~VCache()+0x28>
c0017267:	83 ec 0c             	sub    esp,0xc
c001726a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001726e:	e8 9f ff ff ff       	call   c0017212 <VCache::writeWriteBuffer()>
c0017273:	83 c4 10             	add    esp,0x10
c0017276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001727a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001727d:	83 ec 0c             	sub    esp,0xc
c0017280:	50                   	push   eax
c0017281:	e8 b4 86 ff ff       	call   c000f93a <free>
c0017286:	83 c4 10             	add    esp,0x10
c0017289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001728d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017290:	83 ec 0c             	sub    esp,0xc
c0017293:	50                   	push   eax
c0017294:	e8 a1 86 ff ff       	call   c000f93a <free>
c0017299:	83 c4 10             	add    esp,0x10
c001729c:	90                   	nop
c001729d:	83 c4 0c             	add    esp,0xc
c00172a0:	c3                   	ret    
c00172a1:	90                   	nop

c00172a2 <VCache::~VCache()>:
c00172a2:	83 ec 0c             	sub    esp,0xc
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172ac:	e8 9d ff ff ff       	call   c001724e <VCache::~VCache()>
c00172b1:	83 c4 10             	add    esp,0x10
c00172b4:	83 ec 08             	sub    esp,0x8
c00172b7:	6a 44                	push   0x44
c00172b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00172bd:	e8 3f bb ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00172c2:	83 c4 10             	add    esp,0x10
c00172c5:	83 c4 0c             	add    esp,0xc
c00172c8:	c3                   	ret    
c00172c9:	90                   	nop

c00172ca <VCache::write(unsigned long long, int, void*)>:
c00172ca:	55                   	push   ebp
c00172cb:	57                   	push   edi
c00172cc:	56                   	push   esi
c00172cd:	53                   	push   ebx
c00172ce:	83 ec 28             	sub    esp,0x28
c00172d1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00172d5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00172d9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00172dd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00172e1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172e4:	e8 e3 74 00 00       	call   c001e7cc <Semaphore::acquire()>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00172f0:	74 0c                	je     c00172fe <VCache::write(unsigned long long, int, void*)+0x34>
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	53                   	push   ebx
c00172f6:	e8 07 ff ff ff       	call   c0017202 <VCache::invalidateReadBuffer()>
c00172fb:	83 c4 10             	add    esp,0x10
c00172fe:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017302:	74 66                	je     c001736a <VCache::write(unsigned long long, int, void*)+0xa0>
c0017304:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017307:	99                   	cdq    
c0017308:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001730c:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001730f:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017312:	89 c1                	mov    ecx,eax
c0017314:	89 d0                	mov    eax,edx
c0017316:	31 f1                	xor    ecx,esi
c0017318:	31 f8                	xor    eax,edi
c001731a:	89 ca                	mov    edx,ecx
c001731c:	09 c2                	or     edx,eax
c001731e:	75 3e                	jne    c001735e <VCache::write(unsigned long long, int, void*)+0x94>
c0017320:	83 fd 01             	cmp    ebp,0x1
c0017323:	75 39                	jne    c001735e <VCache::write(unsigned long long, int, void*)+0x94>
c0017325:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017328:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001732e:	51                   	push   ecx
c001732f:	50                   	push   eax
c0017330:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017334:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017338:	0f af c8             	imul   ecx,eax
c001733b:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001733e:	51                   	push   ecx
c001733f:	e8 24 94 fe ff       	call   c0000768 <memcpy>
c0017344:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017347:	83 c4 10             	add    esp,0x10
c001734a:	40                   	inc    eax
c001734b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001734e:	83 c0 80             	add    eax,0xffffff80
c0017351:	75 57                	jne    c00173aa <VCache::write(unsigned long long, int, void*)+0xe0>
c0017353:	83 ec 0c             	sub    esp,0xc
c0017356:	53                   	push   ebx
c0017357:	e8 b6 fe ff ff       	call   c0017212 <VCache::writeWriteBuffer()>
c001735c:	eb 34                	jmp    c0017392 <VCache::write(unsigned long long, int, void*)+0xc8>
c001735e:	83 ec 0c             	sub    esp,0xc
c0017361:	53                   	push   ebx
c0017362:	e8 ab fe ff ff       	call   c0017212 <VCache::writeWriteBuffer()>
c0017367:	83 c4 10             	add    esp,0x10
c001736a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001736d:	83 fd 7f             	cmp    ebp,0x7f
c0017370:	7f 25                	jg     c0017397 <VCache::write(unsigned long long, int, void*)+0xcd>
c0017372:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0017375:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0017378:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001737b:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001737f:	52                   	push   edx
c0017380:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0017386:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001738a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001738d:	e8 d6 93 fe ff       	call   c0000768 <memcpy>
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	eb 13                	jmp    c00173aa <VCache::write(unsigned long long, int, void*)+0xe0>
c0017397:	83 ec 0c             	sub    esp,0xc
c001739a:	8b 10                	mov    edx,DWORD PTR [eax]
c001739c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173a0:	55                   	push   ebp
c00173a1:	57                   	push   edi
c00173a2:	56                   	push   esi
c00173a3:	50                   	push   eax
c00173a4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00173a7:	83 c4 20             	add    esp,0x20
c00173aa:	83 ec 0c             	sub    esp,0xc
c00173ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173b0:	e8 51 7b 00 00       	call   c001ef06 <Semaphore::release()>
c00173b5:	83 c4 2c             	add    esp,0x2c
c00173b8:	31 c0                	xor    eax,eax
c00173ba:	5b                   	pop    ebx
c00173bb:	5e                   	pop    esi
c00173bc:	5f                   	pop    edi
c00173bd:	5d                   	pop    ebp
c00173be:	c3                   	ret    
c00173bf:	90                   	nop

c00173c0 <VCache::read(unsigned long long, int, void*)>:
c00173c0:	55                   	push   ebp
c00173c1:	57                   	push   edi
c00173c2:	56                   	push   esi
c00173c3:	53                   	push   ebx
c00173c4:	83 ec 28             	sub    esp,0x28
c00173c7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00173cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173cf:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00173d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173d7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00173db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00173df:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c00173e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173e6:	e8 e1 73 00 00       	call   c001e7cc <Semaphore::acquire()>
c00173eb:	83 c4 10             	add    esp,0x10
c00173ee:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00173f2:	74 0c                	je     c0017400 <VCache::read(unsigned long long, int, void*)+0x40>
c00173f4:	83 ec 0c             	sub    esp,0xc
c00173f7:	53                   	push   ebx
c00173f8:	e8 15 fe ff ff       	call   c0017212 <VCache::writeWriteBuffer()>
c00173fd:	83 c4 10             	add    esp,0x10
c0017400:	83 fe 01             	cmp    esi,0x1
c0017403:	0f 85 80 00 00 00    	jne    c0017489 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017409:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001740c:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017413:	75 74                	jne    c0017489 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017415:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017418:	89 d1                	mov    ecx,edx
c001741a:	f7 d9                	neg    ecx
c001741c:	89 cf                	mov    edi,ecx
c001741e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017422:	c1 ff 1f             	sar    edi,0x1f
c0017425:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017428:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001742c:	89 ce                	mov    esi,ecx
c001742e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017432:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0017436:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001743a:	89 cf                	mov    edi,ecx
c001743c:	74 0a                	je     c0017448 <VCache::read(unsigned long long, int, void*)+0x88>
c001743e:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017441:	75 05                	jne    c0017448 <VCache::read(unsigned long long, int, void*)+0x88>
c0017443:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0017446:	74 1c                	je     c0017464 <VCache::read(unsigned long long, int, void*)+0xa4>
c0017448:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001744c:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c001744f:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0017452:	83 ec 0c             	sub    esp,0xc
c0017455:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017457:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001745a:	52                   	push   edx
c001745b:	57                   	push   edi
c001745c:	56                   	push   esi
c001745d:	50                   	push   eax
c001745e:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0017461:	83 c4 20             	add    esp,0x20
c0017464:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017467:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001746d:	50                   	push   eax
c001746e:	52                   	push   edx
c001746f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017472:	48                   	dec    eax
c0017473:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0017477:	0f af c2             	imul   eax,edx
c001747a:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001747d:	50                   	push   eax
c001747e:	55                   	push   ebp
c001747f:	e8 e4 92 fe ff       	call   c0000768 <memcpy>
c0017484:	83 c4 10             	add    esp,0x10
c0017487:	eb 21                	jmp    c00174aa <VCache::read(unsigned long long, int, void*)+0xea>
c0017489:	83 ec 0c             	sub    esp,0xc
c001748c:	53                   	push   ebx
c001748d:	e8 70 fd ff ff       	call   c0017202 <VCache::invalidateReadBuffer()>
c0017492:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017495:	8b 10                	mov    edx,DWORD PTR [eax]
c0017497:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001749a:	56                   	push   esi
c001749b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001749f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174a3:	50                   	push   eax
c00174a4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00174a7:	83 c4 20             	add    esp,0x20
c00174aa:	83 ec 0c             	sub    esp,0xc
c00174ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00174b0:	e8 51 7a 00 00       	call   c001ef06 <Semaphore::release()>
c00174b5:	83 c4 2c             	add    esp,0x2c
c00174b8:	31 c0                	xor    eax,eax
c00174ba:	5b                   	pop    ebx
c00174bb:	5e                   	pop    esi
c00174bc:	5f                   	pop    edi
c00174bd:	5d                   	pop    ebp
c00174be:	c3                   	ret    
c00174bf:	90                   	nop

c00174c0 <Video::putrect(int, int, int, int, unsigned int)>:
c00174c0:	55                   	push   ebp
c00174c1:	57                   	push   edi
c00174c2:	56                   	push   esi
c00174c3:	53                   	push   ebx
c00174c4:	83 ec 1c             	sub    esp,0x1c
c00174c7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00174cb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174cf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00174d3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00174d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174df:	01 df                	add    edi,ebx
c00174e1:	39 fb                	cmp    ebx,edi
c00174e3:	7d 1f                	jge    c0017504 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c00174e5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174e9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00174ed:	7d 12                	jge    c0017501 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00174ef:	8b 16                	mov    edx,DWORD PTR [esi]
c00174f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00174f5:	53                   	push   ebx
c00174f6:	55                   	push   ebp
c00174f7:	45                   	inc    ebp
c00174f8:	56                   	push   esi
c00174f9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00174fc:	83 c4 10             	add    esp,0x10
c00174ff:	eb e8                	jmp    c00174e9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017501:	43                   	inc    ebx
c0017502:	eb dd                	jmp    c00174e1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017504:	83 c4 1c             	add    esp,0x1c
c0017507:	5b                   	pop    ebx
c0017508:	5e                   	pop    esi
c0017509:	5f                   	pop    edi
c001750a:	5d                   	pop    ebp
c001750b:	c3                   	ret    

c001750c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001750c:	55                   	push   ebp
c001750d:	57                   	push   edi
c001750e:	31 ff                	xor    edi,edi
c0017510:	56                   	push   esi
c0017511:	53                   	push   ebx
c0017512:	83 ec 1c             	sub    esp,0x1c
c0017515:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017519:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001751d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017524:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017529:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001752d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017531:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017535:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017538:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001753c:	01 f9                	add    ecx,edi
c001753e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017542:	7d 2f                	jge    c0017573 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017544:	31 f6                	xor    esi,esi
c0017546:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001754a:	01 f2                	add    edx,esi
c001754c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0017550:	7d 1a                	jge    c001756c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0017552:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017555:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017558:	46                   	inc    esi
c0017559:	51                   	push   ecx
c001755a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001755e:	52                   	push   edx
c001755f:	55                   	push   ebp
c0017560:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001756a:	eb da                	jmp    c0017546 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c001756c:	47                   	inc    edi
c001756d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017571:	eb c5                	jmp    c0017538 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0017573:	83 c4 1c             	add    esp,0x1c
c0017576:	5b                   	pop    ebx
c0017577:	5e                   	pop    esi
c0017578:	5f                   	pop    edi
c0017579:	5d                   	pop    ebp
c001757a:	c3                   	ret    
c001757b:	90                   	nop

c001757c <Video::blit(unsigned int*, int, int, int, int)>:
c001757c:	55                   	push   ebp
c001757d:	57                   	push   edi
c001757e:	56                   	push   esi
c001757f:	53                   	push   ebx
c0017580:	83 ec 1c             	sub    esp,0x1c
c0017583:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017587:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001758b:	85 c0                	test   eax,eax
c001758d:	79 02                	jns    c0017591 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c001758f:	31 c0                	xor    eax,eax
c0017591:	c1 e0 02             	shl    eax,0x2
c0017594:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001759c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175a0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00175a4:	39 d8                	cmp    eax,ebx
c00175a6:	7e 49                	jle    c00175f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00175a8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00175ae:	7c 41                	jl     c00175f1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00175b0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00175b4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00175b8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00175bc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00175c0:	39 f9                	cmp    ecx,edi
c00175c2:	7e 22                	jle    c00175e6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00175c4:	83 c5 04             	add    ebp,0x4
c00175c7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00175cd:	7c 14                	jl     c00175e3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c00175cf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00175d1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00175d4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00175dc:	56                   	push   esi
c00175dd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	47                   	inc    edi
c00175e4:	eb d2                	jmp    c00175b8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c00175e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00175ea:	43                   	inc    ebx
c00175eb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00175ef:	eb ab                	jmp    c001759c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00175f1:	83 c4 1c             	add    esp,0x1c
c00175f4:	5b                   	pop    ebx
c00175f5:	5e                   	pop    esi
c00175f6:	5f                   	pop    edi
c00175f7:	5d                   	pop    ebp
c00175f8:	c3                   	ret    
c00175f9:	90                   	nop

c00175fa <Video::clearScreen(unsigned int)>:
c00175fa:	57                   	push   edi
c00175fb:	56                   	push   esi
c00175fc:	53                   	push   ebx
c00175fd:	31 db                	xor    ebx,ebx
c00175ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017603:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017609:	7e 1f                	jle    c001762a <Video::clearScreen(unsigned int)+0x30>
c001760b:	31 ff                	xor    edi,edi
c001760d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017613:	7e 12                	jle    c0017627 <Video::clearScreen(unsigned int)+0x2d>
c0017615:	8b 06                	mov    eax,DWORD PTR [esi]
c0017617:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001761b:	53                   	push   ebx
c001761c:	57                   	push   edi
c001761d:	47                   	inc    edi
c001761e:	56                   	push   esi
c001761f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	eb e6                	jmp    c001760d <Video::clearScreen(unsigned int)+0x13>
c0017627:	43                   	inc    ebx
c0017628:	eb d9                	jmp    c0017603 <Video::clearScreen(unsigned int)+0x9>
c001762a:	5b                   	pop    ebx
c001762b:	5e                   	pop    esi
c001762c:	5f                   	pop    edi
c001762d:	c3                   	ret    

c001762e <Video::putpixel(int, int, unsigned int)>:
c001762e:	c7 44 24 04 88 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc88
c0017636:	e9 62 32 00 00       	jmp    c001a89d <Krnl::panic(char const*)>
c001763b:	90                   	nop

c001763c <Video::Video(char const*)>:
c001763c:	83 ec 0c             	sub    esp,0xc
c001763f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017643:	83 ec 08             	sub    esp,0x8
c0017646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001764a:	50                   	push   eax
c001764b:	e8 b6 ce ff ff       	call   c0014506 <Device::Device(char const*)>
c0017650:	83 c4 10             	add    esp,0x10
c0017653:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c0017658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001765c:	89 10                	mov    DWORD PTR [eax],edx
c001765e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017662:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001766c:	90                   	nop
c001766d:	83 c4 0c             	add    esp,0xc
c0017670:	c3                   	ret    
c0017671:	90                   	nop

c0017672 <Video::~Video()>:
c0017672:	83 ec 0c             	sub    esp,0xc
c0017675:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c001767a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001767e:	89 10                	mov    DWORD PTR [eax],edx
c0017680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017684:	83 ec 0c             	sub    esp,0xc
c0017687:	50                   	push   eax
c0017688:	e8 5b cb ff ff       	call   c00141e8 <Device::~Device()>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	90                   	nop
c0017691:	83 c4 0c             	add    esp,0xc
c0017694:	c3                   	ret    
c0017695:	90                   	nop

c0017696 <Video::~Video()>:
c0017696:	83 ec 0c             	sub    esp,0xc
c0017699:	83 ec 0c             	sub    esp,0xc
c001769c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176a0:	e8 cd ff ff ff       	call   c0017672 <Video::~Video()>
c00176a5:	83 c4 10             	add    esp,0x10
c00176a8:	83 ec 08             	sub    esp,0x8
c00176ab:	68 64 01 00 00       	push   0x164
c00176b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176b4:	e8 48 b7 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	83 c4 0c             	add    esp,0xc
c00176bf:	c3                   	ret    

c00176c0 <Video::isMonochrome()>:
c00176c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00176ca:	c3                   	ret    
c00176cb:	90                   	nop

c00176cc <Video::getWidth()>:
c00176cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176d0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00176d6:	c3                   	ret    
c00176d7:	90                   	nop

c00176d8 <Video::getHeight()>:
c00176d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176dc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00176e2:	c3                   	ret    
c00176e3:	90                   	nop

c00176e4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00176e4:	55                   	push   ebp
c00176e5:	57                   	push   edi
c00176e6:	56                   	push   esi
c00176e7:	53                   	push   ebx
c00176e8:	83 ec 2c             	sub    esp,0x2c
c00176eb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00176ef:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00176f3:	83 f8 01             	cmp    eax,0x1
c00176f6:	19 c9                	sbb    ecx,ecx
c00176f8:	31 db                	xor    ebx,ebx
c00176fa:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00176fe:	89 cd                	mov    ebp,ecx
c0017700:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017708:	f7 d5                	not    ebp
c001770a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017710:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017714:	01 d8                	add    eax,ebx
c0017716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001771a:	56                   	push   esi
c001771b:	e8 b8 ff ff ff       	call   c00176d8 <Video::getHeight()>
c0017720:	59                   	pop    ecx
c0017721:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017725:	7e 70                	jle    c0017797 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017727:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001772b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001772f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017732:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017736:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001773a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017741:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017745:	89 f8                	mov    eax,edi
c0017747:	83 c0 20             	add    eax,0x20
c001774a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001774e:	56                   	push   esi
c001774f:	e8 78 ff ff ff       	call   c00176cc <Video::getWidth()>
c0017754:	5a                   	pop    edx
c0017755:	39 c7                	cmp    edi,eax
c0017757:	7d 34                	jge    c001778d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017759:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001775e:	74 05                	je     c0017765 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017760:	8b 06                	mov    eax,DWORD PTR [esi]
c0017762:	55                   	push   ebp
c0017763:	eb 0d                	jmp    c0017772 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0017765:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001776a:	74 12                	je     c001777e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001776c:	8b 06                	mov    eax,DWORD PTR [esi]
c001776e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017772:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017776:	57                   	push   edi
c0017777:	56                   	push   esi
c0017778:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001777b:	83 c4 10             	add    esp,0x10
c001777e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0017782:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0017786:	47                   	inc    edi
c0017787:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001778b:	75 c1                	jne    c001774e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001778d:	43                   	inc    ebx
c001778e:	83 fb 20             	cmp    ebx,0x20
c0017791:	0f 85 79 ff ff ff    	jne    c0017710 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017797:	83 c4 2c             	add    esp,0x2c
c001779a:	5b                   	pop    ebx
c001779b:	5e                   	pop    esi
c001779c:	5f                   	pop    edi
c001779d:	5d                   	pop    ebp
c001779e:	c3                   	ret    
c001779f:	90                   	nop

c00177a0 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00177a0:	55                   	push   ebp
c00177a1:	57                   	push   edi
c00177a2:	56                   	push   esi
c00177a3:	53                   	push   ebx
c00177a4:	83 ec 28             	sub    esp,0x28
c00177a7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00177ab:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00177af:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00177b3:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00177b7:	c1 e7 08             	shl    edi,0x8
c00177ba:	01 c7                	add    edi,eax
c00177bc:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00177c0:	c1 e0 08             	shl    eax,0x8
c00177c3:	01 d0                	add    eax,edx
c00177c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00177c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00177cd:	0f af c7             	imul   eax,edi
c00177d0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00177d7:	50                   	push   eax
c00177d8:	e8 4d 81 ff ff       	call   c000f92a <malloc>
c00177dd:	83 c4 10             	add    esp,0x10
c00177e0:	89 c5                	mov    ebp,eax
c00177e2:	85 c0                	test   eax,eax
c00177e4:	75 15                	jne    c00177fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c00177e6:	83 ec 0c             	sub    esp,0xc
c00177e9:	68 a9 bc 02 c0       	push   0xc002bca9
c00177ee:	e8 ee b6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00177f3:	83 c4 10             	add    esp,0x10
c00177f6:	e9 1c 01 00 00       	jmp    c0017917 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00177fb:	be 12 00 00 00       	mov    esi,0x12
c0017800:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017804:	74 11                	je     c0017817 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017806:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001780a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001780e:	c1 fe 03             	sar    esi,0x3
c0017811:	0f af f0             	imul   esi,eax
c0017814:	83 c6 12             	add    esi,0x12
c0017817:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001781b:	74 04                	je     c0017821 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001781d:	85 ff                	test   edi,edi
c001781f:	75 12                	jne    c0017833 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017821:	83 ec 0c             	sub    esp,0xc
c0017824:	68 c0 bc 02 c0       	push   0xc002bcc0
c0017829:	e8 b3 b6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001782e:	e9 ce 00 00 00       	jmp    c0017901 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017833:	52                   	push   edx
c0017834:	52                   	push   edx
c0017835:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017839:	50                   	push   eax
c001783a:	68 d5 bc 02 c0       	push   0xc002bcd5
c001783f:	e8 9d b6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0017844:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	80 fa 02             	cmp    dl,0x2
c001784e:	0f 85 98 00 00 00    	jne    c00178ec <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0017854:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017859:	75 10                	jne    c001786b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001785b:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001785f:	75 0a                	jne    c001786b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017861:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0017864:	83 e8 18             	sub    eax,0x18
c0017867:	a8 f7                	test   al,0xf7
c0017869:	74 0a                	je     c0017875 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c001786b:	83 ec 0c             	sub    esp,0xc
c001786e:	68 e2 bc 02 c0       	push   0xc002bce2
c0017873:	eb 7f                	jmp    c00178f4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0017875:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001787d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017885:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017889:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017891:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017895:	75 0c                	jne    c00178a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017897:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001789c:	c1 e0 18             	shl    eax,0x18
c001789f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178a3:	41                   	inc    ecx
c00178a4:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00178a9:	c1 e2 10             	shl    edx,0x10
c00178ac:	89 d0                	mov    eax,edx
c00178ae:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00178b3:	c1 e2 08             	shl    edx,0x8
c00178b6:	09 c2                	or     edx,eax
c00178b8:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00178bc:	09 c2                	or     edx,eax
c00178be:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00178c2:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c00178c6:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c00178ca:	c1 f8 03             	sar    eax,0x3
c00178cd:	01 c6                	add    esi,eax
c00178cf:	89 c8                	mov    eax,ecx
c00178d1:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00178d5:	39 c7                	cmp    edi,eax
c00178d7:	7f b0                	jg     c0017889 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c00178d9:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00178dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178e1:	39 14 24             	cmp    DWORD PTR [esp],edx
c00178e4:	7e 22                	jle    c0017908 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c00178e6:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00178ea:	eb 99                	jmp    c0017885 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c00178ec:	50                   	push   eax
c00178ed:	50                   	push   eax
c00178ee:	52                   	push   edx
c00178ef:	68 f0 bc 02 c0       	push   0xc002bcf0
c00178f4:	e8 e8 b5 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00178f9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00178fc:	e8 39 80 ff ff       	call   c000f93a <free>
c0017901:	83 c4 10             	add    esp,0x10
c0017904:	31 ed                	xor    ebp,ebp
c0017906:	eb 0f                	jmp    c0017917 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017908:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001790c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001790f:	89 38                	mov    DWORD PTR [eax],edi
c0017911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017915:	89 08                	mov    DWORD PTR [eax],ecx
c0017917:	83 c4 1c             	add    esp,0x1c
c001791a:	89 e8                	mov    eax,ebp
c001791c:	5b                   	pop    ebx
c001791d:	5e                   	pop    esi
c001791e:	5f                   	pop    edi
c001791f:	5d                   	pop    ebp
c0017920:	c3                   	ret    
c0017921:	90                   	nop

c0017922 <Video::putTGA(int, int, unsigned char*, int)>:
c0017922:	55                   	push   ebp
c0017923:	57                   	push   edi
c0017924:	56                   	push   esi
c0017925:	53                   	push   ebx
c0017926:	83 ec 28             	sub    esp,0x28
c0017929:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001792d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017931:	50                   	push   eax
c0017932:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017936:	50                   	push   eax
c0017937:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001793b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001793f:	56                   	push   esi
c0017940:	e8 5b fe ff ff       	call   c00177a0 <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017945:	83 c4 20             	add    esp,0x20
c0017948:	85 c0                	test   eax,eax
c001794a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001794e:	74 35                	je     c0017985 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017950:	89 c7                	mov    edi,eax
c0017952:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017956:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001795a:	39 d8                	cmp    eax,ebx
c001795c:	7e 27                	jle    c0017985 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001795e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017962:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017966:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001796a:	39 e8                	cmp    eax,ebp
c001796c:	7e 14                	jle    c0017982 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001796e:	8b 06                	mov    eax,DWORD PTR [esi]
c0017970:	83 c7 04             	add    edi,0x4
c0017973:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0017976:	53                   	push   ebx
c0017977:	55                   	push   ebp
c0017978:	45                   	inc    ebp
c0017979:	56                   	push   esi
c001797a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	eb e0                	jmp    c0017962 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0017982:	43                   	inc    ebx
c0017983:	eb cd                	jmp    c0017952 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0017985:	83 c4 1c             	add    esp,0x1c
c0017988:	5b                   	pop    ebx
c0017989:	5e                   	pop    esi
c001798a:	5f                   	pop    edi
c001798b:	5d                   	pop    ebp
c001798c:	c3                   	ret    
c001798d:	90                   	nop

c001798e <ACPI::close(int, int, void*)>:
c001798e:	83 ec 1c             	sub    esp,0x1c
c0017991:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017999:	74 0a                	je     c00179a5 <ACPI::close(int, int, void*)+0x17>
c001799b:	b8 00 00 00 00       	mov    eax,0x0
c00179a0:	e9 9a 00 00 00       	jmp    c0017a3f <ACPI::close(int, int, void*)+0xb1>
c00179a5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00179aa:	75 37                	jne    c00179e3 <ACPI::close(int, int, void*)+0x55>
c00179ac:	83 ec 0c             	sub    esp,0xc
c00179af:	68 4c bd 02 c0       	push   0xc002bd4c
c00179b4:	e8 28 b5 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00179b9:	83 c4 10             	add    esp,0x10
c00179bc:	a1 08 15 03 c0       	mov    eax,ds:0xc0031508
c00179c1:	85 c0                	test   eax,eax
c00179c3:	74 07                	je     c00179cc <ACPI::close(int, int, void*)+0x3e>
c00179c5:	a1 08 15 03 c0       	mov    eax,ds:0xc0031508
c00179ca:	ff d0                	call   eax
c00179cc:	83 ec 0c             	sub    esp,0xc
c00179cf:	68 c0 be 02 c0       	push   0xc002bec0
c00179d4:	e8 c4 2e 00 00       	call   c001a89d <Krnl::panic(char const*)>
c00179d9:	83 c4 10             	add    esp,0x10
c00179dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00179e1:	eb 5c                	jmp    c0017a3f <ACPI::close(int, int, void*)+0xb1>
c00179e3:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00179e8:	75 50                	jne    c0017a3a <ACPI::close(int, int, void*)+0xac>
c00179ea:	a1 04 15 03 c0       	mov    eax,ds:0xc0031504
c00179ef:	85 c0                	test   eax,eax
c00179f1:	74 07                	je     c00179fa <ACPI::close(int, int, void*)+0x6c>
c00179f3:	a1 04 15 03 c0       	mov    eax,ds:0xc0031504
c00179f8:	ff d0                	call   eax
c00179fa:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00179ff:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017a04:	83 e0 02             	and    eax,0x2
c0017a07:	74 1c                	je     c0017a25 <ACPI::close(int, int, void*)+0x97>
c0017a09:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017a10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a14:	89 c2                	mov    edx,eax
c0017a16:	ec                   	in     al,dx
c0017a17:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017a1b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017a1f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017a23:	eb da                	jmp    c00179ff <ACPI::close(int, int, void*)+0x71>
c0017a25:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017a2c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017a31:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017a35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017a39:	ee                   	out    dx,al
c0017a3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017a3f:	83 c4 1c             	add    esp,0x1c
c0017a42:	c3                   	ret    

c0017a43 <findRSDP()>:
c0017a43:	83 ec 1c             	sub    esp,0x1c
c0017a46:	83 ec 0c             	sub    esp,0xc
c0017a49:	68 59 bd 02 c0       	push   0xc002bd59
c0017a4e:	e8 8e b4 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017a5b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a61:	83 e0 04             	and    eax,0x4
c0017a64:	84 c0                	test   al,al
c0017a66:	75 07                	jne    c0017a6f <findRSDP()+0x2c>
c0017a68:	b8 00 00 00 00       	mov    eax,0x0
c0017a6d:	eb 6a                	jmp    c0017ad9 <findRSDP()+0x96>
c0017a6f:	a1 94 ee 02 c0       	mov    eax,ds:0xc002ee94
c0017a74:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017a79:	7f 1b                	jg     c0017a96 <findRSDP()+0x53>
c0017a7b:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017a80:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a86:	83 e2 fb             	and    edx,0xfffffffb
c0017a89:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a8f:	b8 00 00 00 00       	mov    eax,0x0
c0017a94:	eb 43                	jmp    c0017ad9 <findRSDP()+0x96>
c0017a96:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017a9e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017aa6:	77 2c                	ja     c0017ad4 <findRSDP()+0x91>
c0017aa8:	83 ec 04             	sub    esp,0x4
c0017aab:	6a 08                	push   0x8
c0017aad:	68 67 bd 02 c0       	push   0xc002bd67
c0017ab2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017ab6:	e8 a9 8b fe ff       	call   c0000664 <memcmp>
c0017abb:	83 c4 10             	add    esp,0x10
c0017abe:	85 c0                	test   eax,eax
c0017ac0:	0f 94 c0             	sete   al
c0017ac3:	84 c0                	test   al,al
c0017ac5:	74 06                	je     c0017acd <findRSDP()+0x8a>
c0017ac7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017acb:	eb 0c                	jmp    c0017ad9 <findRSDP()+0x96>
c0017acd:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017ad2:	eb ca                	jmp    c0017a9e <findRSDP()+0x5b>
c0017ad4:	b8 00 00 00 00       	mov    eax,0x0
c0017ad9:	83 c4 1c             	add    esp,0x1c
c0017adc:	c3                   	ret    

c0017add <loadACPITables(unsigned char*)>:
c0017add:	56                   	push   esi
c0017ade:	53                   	push   ebx
c0017adf:	83 ec 44             	sub    esp,0x44
c0017ae2:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017ae7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aed:	83 e0 04             	and    eax,0x4
c0017af0:	84 c0                	test   al,al
c0017af2:	0f 84 03 02 00 00    	je     c0017cfb <loadACPITables(unsigned char*)+0x21e>
c0017af8:	a0 20 17 03 c0       	mov    al,ds:0xc0031720
c0017afd:	84 c0                	test   al,al
c0017aff:	74 75                	je     c0017b76 <loadACPITables(unsigned char*)+0x99>
c0017b01:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b10:	83 e8 24             	sub    eax,0x24
c0017b13:	c1 e8 03             	shr    eax,0x3
c0017b16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b1a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017b22:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b26:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017b2a:	0f 8d b2 00 00 00    	jge    c0017be2 <loadACPITables(unsigned char*)+0x105>
c0017b30:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b34:	83 c0 24             	add    eax,0x24
c0017b37:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017b3b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b3f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017b43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017b47:	c1 e0 03             	shl    eax,0x3
c0017b4a:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017b4e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017b52:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b57:	89 c1                	mov    ecx,eax
c0017b59:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017b5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b61:	89 15 0c 15 03 c0    	mov    DWORD PTR ds:0xc003150c,edx
c0017b67:	89 ca                	mov    edx,ecx
c0017b69:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017b70:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017b74:	eb ac                	jmp    c0017b22 <loadACPITables(unsigned char*)+0x45>
c0017b76:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017b7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017b85:	83 e8 24             	sub    eax,0x24
c0017b88:	c1 e8 02             	shr    eax,0x2
c0017b8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b8f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017b97:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b9b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017b9f:	7d 41                	jge    c0017be2 <loadACPITables(unsigned char*)+0x105>
c0017ba1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ba5:	83 c0 24             	add    eax,0x24
c0017ba8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017bb4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017bb8:	c1 e0 02             	shl    eax,0x2
c0017bbb:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017bbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017bc3:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017bc5:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017bca:	8d 50 01             	lea    edx,[eax+0x1]
c0017bcd:	89 15 0c 15 03 c0    	mov    DWORD PTR ds:0xc003150c,edx
c0017bd3:	89 ca                	mov    edx,ecx
c0017bd5:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017bdc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017be0:	eb b5                	jmp    c0017b97 <loadACPITables(unsigned char*)+0xba>
c0017be2:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017bea:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017bef:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017bf3:	0f 8d 03 01 00 00    	jge    c0017cfc <loadACPITables(unsigned char*)+0x21f>
c0017bf9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017bfd:	8b 04 c5 24 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceadc]
c0017c04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c14:	25 ff 0f 00 00       	and    eax,0xfff
c0017c19:	89 c6                	mov    esi,eax
c0017c1b:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017c21:	83 ec 0c             	sub    esp,0xc
c0017c24:	6a 01                	push   0x1
c0017c26:	e8 b0 9e ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c32:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	6a 01                	push   0x1
c0017c3d:	6a 01                	push   0x1
c0017c3f:	50                   	push   eax
c0017c40:	52                   	push   edx
c0017c41:	53                   	push   ebx
c0017c42:	e8 c1 a9 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c47:	83 c4 20             	add    esp,0x20
c0017c4a:	09 f0                	or     eax,esi
c0017c4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c50:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c54:	c1 e0 03             	shl    eax,0x3
c0017c57:	05 20 15 03 c0       	add    eax,0xc0031520
c0017c5c:	83 ec 04             	sub    esp,0x4
c0017c5f:	6a 04                	push   0x4
c0017c61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017c65:	50                   	push   eax
c0017c66:	e8 fd 8a fe ff       	call   c0000768 <memcpy>
c0017c6b:	83 c4 10             	add    esp,0x10
c0017c6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017c75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c7d:	05 00 10 00 00       	add    eax,0x1000
c0017c82:	c1 e8 0c             	shr    eax,0xc
c0017c85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017c89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c8d:	89 04 24             	mov    DWORD PTR [esp],eax
c0017c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c94:	25 ff 0f 00 00       	and    eax,0xfff
c0017c99:	89 c6                	mov    esi,eax
c0017c9b:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017ca1:	83 ec 0c             	sub    esp,0xc
c0017ca4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017ca8:	e8 2e 9e ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0017cad:	83 c4 10             	add    esp,0x10
c0017cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cb4:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cba:	83 ec 0c             	sub    esp,0xc
c0017cbd:	6a 01                	push   0x1
c0017cbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cc3:	50                   	push   eax
c0017cc4:	52                   	push   edx
c0017cc5:	53                   	push   ebx
c0017cc6:	e8 3d a9 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017ccb:	83 c4 20             	add    esp,0x20
c0017cce:	09 f0                	or     eax,esi
c0017cd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cd4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017cd7:	83 ec 0c             	sub    esp,0xc
c0017cda:	50                   	push   eax
c0017cdb:	e8 bb a2 ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c0017ce0:	83 c4 10             	add    esp,0x10
c0017ce3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ce7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017ceb:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017cf2:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017cf6:	e9 ef fe ff ff       	jmp    c0017bea <loadACPITables(unsigned char*)+0x10d>
c0017cfb:	90                   	nop
c0017cfc:	83 c4 44             	add    esp,0x44
c0017cff:	5b                   	pop    ebx
c0017d00:	5e                   	pop    esi
c0017d01:	c3                   	ret    

c0017d02 <findRSDT(unsigned char*)>:
c0017d02:	56                   	push   esi
c0017d03:	53                   	push   ebx
c0017d04:	83 ec 44             	sub    esp,0x44
c0017d07:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017d0c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d12:	83 e0 04             	and    eax,0x4
c0017d15:	84 c0                	test   al,al
c0017d17:	75 0a                	jne    c0017d23 <findRSDT(unsigned char*)+0x21>
c0017d19:	b8 00 00 00 00       	mov    eax,0x0
c0017d1e:	e9 f5 00 00 00       	jmp    c0017e18 <findRSDT(unsigned char*)+0x116>
c0017d23:	83 ec 04             	sub    esp,0x4
c0017d26:	6a 24                	push   0x24
c0017d28:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017d2c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017d30:	50                   	push   eax
c0017d31:	e8 32 8a fe ff       	call   c0000768 <memcpy>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017d3d:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017d41:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017d49:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017d4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d51:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017d59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d61:	25 ff 0f 00 00       	and    eax,0xfff
c0017d66:	89 c6                	mov    esi,eax
c0017d68:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017d6e:	83 ec 0c             	sub    esp,0xc
c0017d71:	6a 02                	push   0x2
c0017d73:	e8 63 9d ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0017d78:	83 c4 10             	add    esp,0x10
c0017d7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017d7f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d85:	83 ec 0c             	sub    esp,0xc
c0017d88:	6a 01                	push   0x1
c0017d8a:	6a 02                	push   0x2
c0017d8c:	50                   	push   eax
c0017d8d:	52                   	push   edx
c0017d8e:	53                   	push   ebx
c0017d8f:	e8 74 a8 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d94:	83 c4 20             	add    esp,0x20
c0017d97:	09 f0                	or     eax,esi
c0017d99:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017d9d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017da1:	25 ff 0f 00 00       	and    eax,0xfff
c0017da6:	89 c6                	mov    esi,eax
c0017da8:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017dae:	83 ec 0c             	sub    esp,0xc
c0017db1:	6a 02                	push   0x2
c0017db3:	e8 23 9d ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0017db8:	83 c4 10             	add    esp,0x10
c0017dbb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017dbf:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017dc5:	83 ec 0c             	sub    esp,0xc
c0017dc8:	6a 01                	push   0x1
c0017dca:	6a 02                	push   0x2
c0017dcc:	50                   	push   eax
c0017dcd:	52                   	push   edx
c0017dce:	53                   	push   ebx
c0017dcf:	e8 34 a8 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017dd4:	83 c4 20             	add    esp,0x20
c0017dd7:	09 f0                	or     eax,esi
c0017dd9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ddd:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017de2:	75 11                	jne    c0017df5 <findRSDT(unsigned char*)+0xf3>
c0017de4:	c6 05 20 17 03 c0 00 	mov    BYTE PTR ds:0xc0031720,0x0
c0017deb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017def:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017df3:	eb 1f                	jmp    c0017e14 <findRSDT(unsigned char*)+0x112>
c0017df5:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017dfa:	75 11                	jne    c0017e0d <findRSDT(unsigned char*)+0x10b>
c0017dfc:	c6 05 20 17 03 c0 01 	mov    BYTE PTR ds:0xc0031720,0x1
c0017e03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e07:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017e0b:	eb 07                	jmp    c0017e14 <findRSDT(unsigned char*)+0x112>
c0017e0d:	b8 00 00 00 00       	mov    eax,0x0
c0017e12:	eb 04                	jmp    c0017e18 <findRSDT(unsigned char*)+0x116>
c0017e14:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e18:	83 c4 44             	add    esp,0x44
c0017e1b:	5b                   	pop    ebx
c0017e1c:	5e                   	pop    esi
c0017e1d:	c3                   	ret    

c0017e1e <findDataTable(unsigned char*, char*)>:
c0017e1e:	83 ec 1c             	sub    esp,0x1c
c0017e21:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017e26:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e2c:	83 e0 04             	and    eax,0x4
c0017e2f:	84 c0                	test   al,al
c0017e31:	75 07                	jne    c0017e3a <findDataTable(unsigned char*, char*)+0x1c>
c0017e33:	b8 00 00 00 00       	mov    eax,0x0
c0017e38:	eb 7c                	jmp    c0017eb6 <findDataTable(unsigned char*, char*)+0x98>
c0017e3a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017e42:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017e47:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017e4b:	7d 3a                	jge    c0017e87 <findDataTable(unsigned char*, char*)+0x69>
c0017e4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e51:	c1 e0 03             	shl    eax,0x3
c0017e54:	05 20 15 03 c0       	add    eax,0xc0031520
c0017e59:	83 ec 04             	sub    esp,0x4
c0017e5c:	6a 04                	push   0x4
c0017e5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e62:	50                   	push   eax
c0017e63:	e8 fc 87 fe ff       	call   c0000664 <memcmp>
c0017e68:	83 c4 10             	add    esp,0x10
c0017e6b:	85 c0                	test   eax,eax
c0017e6d:	0f 94 c0             	sete   al
c0017e70:	84 c0                	test   al,al
c0017e72:	74 0d                	je     c0017e81 <findDataTable(unsigned char*, char*)+0x63>
c0017e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e78:	8b 04 c5 24 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceadc]
c0017e7f:	eb 35                	jmp    c0017eb6 <findDataTable(unsigned char*, char*)+0x98>
c0017e81:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e85:	eb bb                	jmp    c0017e42 <findDataTable(unsigned char*, char*)+0x24>
c0017e87:	a0 20 17 03 c0       	mov    al,ds:0xc0031720
c0017e8c:	84 c0                	test   al,al
c0017e8e:	74 07                	je     c0017e97 <findDataTable(unsigned char*, char*)+0x79>
c0017e90:	b8 58 00 00 00       	mov    eax,0x58
c0017e95:	eb 05                	jmp    c0017e9c <findDataTable(unsigned char*, char*)+0x7e>
c0017e97:	b8 52 00 00 00       	mov    eax,0x52
c0017e9c:	83 ec 04             	sub    esp,0x4
c0017e9f:	50                   	push   eax
c0017ea0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea4:	68 e4 be 02 c0       	push   0xc002bee4
c0017ea9:	e8 33 b0 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	b8 00 00 00 00       	mov    eax,0x0
c0017eb6:	83 c4 1c             	add    esp,0x1c
c0017eb9:	c3                   	ret    

c0017eba <scanMADT()>:
c0017eba:	53                   	push   ebx
c0017ebb:	83 ec 38             	sub    esp,0x38
c0017ebe:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017ec3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017ec9:	83 e0 04             	and    eax,0x4
c0017ecc:	84 c0                	test   al,al
c0017ece:	0f 84 63 04 00 00    	je     c0018337 <scanMADT()+0x47d>
c0017ed4:	e8 6a fb ff ff       	call   c0017a43 <findRSDP()>
c0017ed9:	a3 2c 17 03 c0       	mov    ds:0xc003172c,eax
c0017ede:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017ee3:	85 c0                	test   eax,eax
c0017ee5:	75 19                	jne    c0017f00 <scanMADT()+0x46>
c0017ee7:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017eec:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ef2:	83 e2 fb             	and    edx,0xfffffffb
c0017ef5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017efb:	e9 3b 04 00 00       	jmp    c001833b <scanMADT()+0x481>
c0017f00:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017f05:	83 ec 0c             	sub    esp,0xc
c0017f08:	50                   	push   eax
c0017f09:	e8 f4 fd ff ff       	call   c0017d02 <findRSDT(unsigned char*)>
c0017f0e:	83 c4 10             	add    esp,0x10
c0017f11:	a3 28 17 03 c0       	mov    ds:0xc0031728,eax
c0017f16:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017f1b:	85 c0                	test   eax,eax
c0017f1d:	75 19                	jne    c0017f38 <scanMADT()+0x7e>
c0017f1f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017f24:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f2a:	83 e2 fb             	and    edx,0xfffffffb
c0017f2d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f33:	e9 03 04 00 00       	jmp    c001833b <scanMADT()+0x481>
c0017f38:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017f3d:	83 ec 0c             	sub    esp,0xc
c0017f40:	50                   	push   eax
c0017f41:	e8 97 fb ff ff       	call   c0017add <loadACPITables(unsigned char*)>
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017f4e:	83 ec 08             	sub    esp,0x8
c0017f51:	68 70 bd 02 c0       	push   0xc002bd70
c0017f56:	50                   	push   eax
c0017f57:	e8 c2 fe ff ff       	call   c0017e1e <findDataTable(unsigned char*, char*)>
c0017f5c:	83 c4 10             	add    esp,0x10
c0017f5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f63:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f68:	75 19                	jne    c0017f83 <scanMADT()+0xc9>
c0017f6a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017f6f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f75:	83 e2 fe             	and    edx,0xfffffffe
c0017f78:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f7e:	e9 b8 03 00 00       	jmp    c001833b <scanMADT()+0x481>
c0017f83:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f8f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f92:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f96:	0f 87 9f 03 00 00    	ja     c001833b <scanMADT()+0x481>
c0017f9c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017fa4:	0f 87 91 03 00 00    	ja     c001833b <scanMADT()+0x481>
c0017faa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017fb2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fb6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fc1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fc5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017fc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fcd:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fd8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017fdc:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017fe0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017fe5:	0f 86 4f 03 00 00    	jbe    c001833a <scanMADT()+0x480>
c0017feb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017ff0:	75 57                	jne    c0018049 <scanMADT()+0x18f>
c0017ff2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017ffd:	8a 15 20 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031920
c0018003:	0f b6 d2             	movzx  edx,dl
c0018006:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001800a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001800e:	88 82 60 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6a0],al
c0018014:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018018:	8d 50 01             	lea    edx,[eax+0x1]
c001801b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001801f:	8a 15 20 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031920
c0018025:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018028:	88 0d 20 19 03 c0    	mov    BYTE PTR ds:0xc0031920,cl
c001802e:	0f b6 d2             	movzx  edx,dl
c0018031:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0018035:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018039:	88 82 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],al
c001803f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018044:	e9 da 02 00 00       	jmp    c0018323 <scanMADT()+0x469>
c0018049:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001804e:	0f 85 14 01 00 00    	jne    c0018168 <scanMADT()+0x2ae>
c0018054:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018058:	8d 50 01             	lea    edx,[eax+0x1]
c001805b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001805f:	8a 15 e0 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317e0
c0018065:	0f b6 d2             	movzx  edx,dl
c0018068:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001806c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0018070:	88 82 00 18 03 c0    	mov    BYTE PTR [edx-0x3ffce800],al
c0018076:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001807a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001807e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018082:	01 d0                	add    eax,edx
c0018084:	83 c0 2c             	add    eax,0x2c
c0018087:	8a 00                	mov    al,BYTE PTR [eax]
c0018089:	0f b6 d0             	movzx  edx,al
c001808c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018090:	8d 48 01             	lea    ecx,[eax+0x1]
c0018093:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018097:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001809b:	0f b6 c0             	movzx  eax,al
c001809e:	c1 e0 08             	shl    eax,0x8
c00180a1:	89 d1                	mov    ecx,edx
c00180a3:	09 c1                	or     ecx,eax
c00180a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a9:	8d 50 02             	lea    edx,[eax+0x2]
c00180ac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b4:	0f b6 c0             	movzx  eax,al
c00180b7:	c1 e0 10             	shl    eax,0x10
c00180ba:	09 c1                	or     ecx,eax
c00180bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c0:	8d 50 03             	lea    edx,[eax+0x3]
c00180c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180c7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180cb:	0f b6 c0             	movzx  eax,al
c00180ce:	c1 e0 18             	shl    eax,0x18
c00180d1:	09 c1                	or     ecx,eax
c00180d3:	89 ca                	mov    edx,ecx
c00180d5:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c00180da:	0f b6 c0             	movzx  eax,al
c00180dd:	89 14 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],edx
c00180e4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180e9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f1:	01 d0                	add    eax,edx
c00180f3:	83 c0 2c             	add    eax,0x2c
c00180f6:	8a 00                	mov    al,BYTE PTR [eax]
c00180f8:	0f b6 d0             	movzx  edx,al
c00180fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ff:	8d 48 01             	lea    ecx,[eax+0x1]
c0018102:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018106:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001810a:	0f b6 c0             	movzx  eax,al
c001810d:	c1 e0 08             	shl    eax,0x8
c0018110:	89 d1                	mov    ecx,edx
c0018112:	09 c1                	or     ecx,eax
c0018114:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018118:	8d 50 02             	lea    edx,[eax+0x2]
c001811b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001811f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018123:	0f b6 c0             	movzx  eax,al
c0018126:	c1 e0 10             	shl    eax,0x10
c0018129:	09 c1                	or     ecx,eax
c001812b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001812f:	8d 50 03             	lea    edx,[eax+0x3]
c0018132:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018136:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001813a:	0f b6 c0             	movzx  eax,al
c001813d:	c1 e0 18             	shl    eax,0x18
c0018140:	09 c1                	or     ecx,eax
c0018142:	89 ca                	mov    edx,ecx
c0018144:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c0018149:	0f b6 c0             	movzx  eax,al
c001814c:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c0018153:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018158:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c001815d:	40                   	inc    eax
c001815e:	a2 e0 17 03 c0       	mov    ds:0xc00317e0,al
c0018163:	e9 bb 01 00 00       	jmp    c0018323 <scanMADT()+0x469>
c0018168:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001816d:	0f 85 e9 00 00 00    	jne    c001825c <scanMADT()+0x3a2>
c0018173:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018177:	8d 50 01             	lea    edx,[eax+0x1]
c001817a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001817e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018182:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018186:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c001818a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001818e:	8d 50 01             	lea    edx,[eax+0x1]
c0018191:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018195:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018199:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001819d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00181a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181a9:	01 d0                	add    eax,edx
c00181ab:	83 c0 2c             	add    eax,0x2c
c00181ae:	8a 00                	mov    al,BYTE PTR [eax]
c00181b0:	0f b6 d0             	movzx  edx,al
c00181b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00181ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181be:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181c2:	0f b6 c0             	movzx  eax,al
c00181c5:	c1 e0 08             	shl    eax,0x8
c00181c8:	89 d1                	mov    ecx,edx
c00181ca:	09 c1                	or     ecx,eax
c00181cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d0:	8d 50 02             	lea    edx,[eax+0x2]
c00181d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181db:	0f b6 c0             	movzx  eax,al
c00181de:	c1 e0 10             	shl    eax,0x10
c00181e1:	09 c1                	or     ecx,eax
c00181e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e7:	8d 50 03             	lea    edx,[eax+0x3]
c00181ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181f2:	0f b6 c0             	movzx  eax,al
c00181f5:	c1 e0 18             	shl    eax,0x18
c00181f8:	09 c8                	or     eax,ecx
c00181fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181fe:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018203:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018207:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001820b:	01 d0                	add    eax,edx
c001820d:	83 c0 2c             	add    eax,0x2c
c0018210:	8a 00                	mov    al,BYTE PTR [eax]
c0018212:	0f b6 c0             	movzx  eax,al
c0018215:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018219:	8d 4a 01             	lea    ecx,[edx+0x1]
c001821c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018220:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018224:	0f b6 d2             	movzx  edx,dl
c0018227:	c1 e2 08             	shl    edx,0x8
c001822a:	09 d0                	or     eax,edx
c001822c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0018231:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018236:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001823b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001823f:	88 90 a0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f60],dl
c0018245:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001824a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001824f:	66 89 84 12 c0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce840],ax
c0018257:	e9 c7 00 00 00       	jmp    c0018323 <scanMADT()+0x469>
c001825c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0018261:	0f 85 b0 00 00 00    	jne    c0018317 <scanMADT()+0x45d>
c0018267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001826b:	8d 50 01             	lea    edx,[eax+0x1]
c001826e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018272:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018276:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001827a:	0f b6 c0             	movzx  eax,al
c001827d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018281:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018285:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018289:	01 d0                	add    eax,edx
c001828b:	83 c0 2c             	add    eax,0x2c
c001828e:	8a 00                	mov    al,BYTE PTR [eax]
c0018290:	0f b6 d0             	movzx  edx,al
c0018293:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018297:	8d 48 01             	lea    ecx,[eax+0x1]
c001829a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001829e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00182a2:	0f b6 c0             	movzx  eax,al
c00182a5:	c1 e0 08             	shl    eax,0x8
c00182a8:	09 d0                	or     eax,edx
c00182aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00182ae:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00182b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182b7:	8d 50 01             	lea    edx,[eax+0x1]
c00182ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00182be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00182c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00182c6:	0f b6 c0             	movzx  eax,al
c00182c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00182cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182d1:	c1 e0 08             	shl    eax,0x8
c00182d4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00182d8:	89 c1                	mov    ecx,eax
c00182da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00182de:	c1 e0 18             	shl    eax,0x18
c00182e1:	89 c3                	mov    ebx,eax
c00182e3:	a1 30 17 03 c0       	mov    eax,ds:0xc0031730
c00182e8:	8d 50 01             	lea    edx,[eax+0x1]
c00182eb:	89 15 30 17 03 c0    	mov    DWORD PTR ds:0xc0031730,edx
c00182f1:	09 d9                	or     ecx,ebx
c00182f3:	89 ca                	mov    edx,ecx
c00182f5:	89 14 85 40 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8c0],edx
c00182fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018300:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018304:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018308:	68 14 bf 02 c0       	push   0xc002bf14
c001830d:	e8 cf ab ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018312:	83 c4 10             	add    esp,0x10
c0018315:	eb 0c                	jmp    c0018323 <scanMADT()+0x469>
c0018317:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001831c:	75 05                	jne    c0018323 <scanMADT()+0x469>
c001831e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0018323:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018328:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001832c:	01 d0                	add    eax,edx
c001832e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018332:	e9 54 fc ff ff       	jmp    c0017f8b <scanMADT()+0xd1>
c0018337:	90                   	nop
c0018338:	eb 01                	jmp    c001833b <scanMADT()+0x481>
c001833a:	90                   	nop
c001833b:	83 c4 38             	add    esp,0x38
c001833e:	5b                   	pop    ebx
c001833f:	c3                   	ret    

c0018340 <ACPI::ACPI()>:
c0018340:	83 ec 0c             	sub    esp,0xc
c0018343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018347:	83 ec 08             	sub    esp,0x8
c001834a:	68 75 bd 02 c0       	push   0xc002bd75
c001834f:	50                   	push   eax
c0018350:	e8 b1 c1 ff ff       	call   c0014506 <Device::Device(char const*)>
c0018355:	83 c4 10             	add    esp,0x10
c0018358:	ba b0 bf 02 c0       	mov    edx,0xc002bfb0
c001835d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018361:	89 10                	mov    DWORD PTR [eax],edx
c0018363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018367:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001836e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018372:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001837c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018380:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c001838a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001838e:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018399:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00183a0:	e8 15 fb ff ff       	call   c0017eba <scanMADT()>
c00183a5:	90                   	nop
c00183a6:	83 c4 0c             	add    esp,0xc
c00183a9:	c3                   	ret    

c00183aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00183aa:	83 ec 2c             	sub    esp,0x2c
c00183ad:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00183b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00183b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00183b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00183bd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00183c2:	88 d0                	mov    al,dl
c00183c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00183cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00183d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00183df:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00183e3:	0f 8d 97 00 00 00    	jge    c0018480 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00183e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183f1:	83 c2 2a             	add    edx,0x2a
c00183f4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183f8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183fd:	75 78                	jne    c0018477 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018403:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018407:	83 c2 2a             	add    edx,0x2a
c001840a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001840e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0018412:	75 63                	jne    c0018477 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018414:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018419:	74 3a                	je     c0018455 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001841b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001841f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018423:	83 c2 2a             	add    edx,0x2a
c0018426:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001842a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001842e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0018431:	39 c2                	cmp    edx,eax
c0018433:	74 10                	je     c0018445 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018435:	83 ec 0c             	sub    esp,0xc
c0018438:	68 50 bf 02 c0       	push   0xc002bf50
c001843d:	e8 5b 24 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0018442:	83 c4 10             	add    esp,0x10
c0018445:	83 ec 0c             	sub    esp,0xc
c0018448:	68 7a bd 02 c0       	push   0xc002bd7a
c001844d:	e8 4b 24 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018459:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001845d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018461:	83 c2 2a             	add    edx,0x2a
c0018464:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018468:	8b 02                	mov    eax,DWORD PTR [edx]
c001846a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001846d:	89 01                	mov    DWORD PTR [ecx],eax
c001846f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018472:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018477:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001847b:	e9 55 ff ff ff       	jmp    c00183d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0018480:	90                   	nop
c0018481:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018485:	83 c4 2c             	add    esp,0x2c
c0018488:	c2 04 00             	ret    0x4
c001848b:	90                   	nop

c001848c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001848c:	83 ec 1c             	sub    esp,0x1c
c001848f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018493:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018497:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001849b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00184a0:	88 c8                	mov    al,cl
c00184a2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184a6:	88 d0                	mov    al,dl
c00184a8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00184ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ba:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184bd:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00184c1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00184c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184d3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00184d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00184da:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00184df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184e3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184e9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00184ed:	8d 48 01             	lea    ecx,[eax+0x1]
c00184f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184f4:	83 c2 2a             	add    edx,0x2a
c00184f7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ff:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018509:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001850c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018510:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018518:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001851e:	8d 50 01             	lea    edx,[eax+0x1]
c0018521:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018525:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001852b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001852f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018535:	3d 00 02 00 00       	cmp    eax,0x200
c001853a:	75 10                	jne    c001854c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c001853c:	83 ec 0c             	sub    esp,0xc
c001853f:	68 89 bd 02 c0       	push   0xc002bd89
c0018544:	e8 54 23 00 00       	call   c001a89d <Krnl::panic(char const*)>
c0018549:	83 c4 10             	add    esp,0x10
c001854c:	90                   	nop
c001854d:	83 c4 1c             	add    esp,0x1c
c0018550:	c3                   	ret    
c0018551:	90                   	nop

c0018552 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018552:	b8 00 00 00 00       	mov    eax,0x0
c0018557:	c3                   	ret    

c0018558 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018558:	83 ec 1c             	sub    esp,0x1c
c001855b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001855f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018562:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018566:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001856b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018570:	83 ec 08             	sub    esp,0x8
c0018573:	52                   	push   edx
c0018574:	50                   	push   eax
c0018575:	e8 c6 69 ff ff       	call   c000ef40 <Computer::readCMOS(unsigned char)>
c001857a:	83 c4 10             	add    esp,0x10
c001857d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018581:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018586:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001858b:	83 ec 04             	sub    esp,0x4
c001858e:	6a 01                	push   0x1
c0018590:	52                   	push   edx
c0018591:	50                   	push   eax
c0018592:	e8 bf 6a ff ff       	call   c000f056 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	90                   	nop
c001859b:	83 c4 1c             	add    esp,0x1c
c001859e:	c3                   	ret    
c001859f:	90                   	nop

c00185a0 <ACPI::sleep()>:
c00185a0:	83 ec 0c             	sub    esp,0xc
c00185a3:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c00185a8:	85 c0                	test   eax,eax
c00185aa:	74 07                	je     c00185b3 <ACPI::sleep()+0x13>
c00185ac:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c00185b1:	ff d0                	call   eax
c00185b3:	90                   	nop
c00185b4:	83 c4 0c             	add    esp,0xc
c00185b7:	c3                   	ret    

c00185b8 <ACPI::open(int, int, void*)>:
c00185b8:	57                   	push   edi
c00185b9:	56                   	push   esi
c00185ba:	53                   	push   ebx
c00185bb:	83 ec 60             	sub    esp,0x60
c00185be:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185c2:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00185c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185cd:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00185d4:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00185d9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00185df:	83 e0 04             	and    eax,0x4
c00185e2:	84 c0                	test   al,al
c00185e4:	74 47                	je     c001862d <ACPI::open(int, int, void*)+0x75>
c00185e6:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c00185eb:	83 ec 08             	sub    esp,0x8
c00185ee:	68 a6 bd 02 c0       	push   0xc002bda6
c00185f3:	50                   	push   eax
c00185f4:	e8 25 f8 ff ff       	call   c0017e1e <findDataTable(unsigned char*, char*)>
c00185f9:	83 c4 10             	add    esp,0x10
c00185fc:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0018600:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c0018605:	74 26                	je     c001862d <ACPI::open(int, int, void*)+0x75>
c0018607:	83 ec 0c             	sub    esp,0xc
c001860a:	68 ab bd 02 c0       	push   0xc002bdab
c001860f:	e8 cd a8 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018614:	83 c4 10             	add    esp,0x10
c0018617:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001861b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018622:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018626:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001862d:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c0018635:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0018639:	8a 00                	mov    al,BYTE PTR [eax]
c001863b:	3c 01                	cmp    al,0x1
c001863d:	75 28                	jne    c0018667 <ACPI::open(int, int, void*)+0xaf>
c001863f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018643:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001864a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001864e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	68 bc bd 02 c0       	push   0xc002bdbc
c001865d:	e8 7f a8 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018662:	83 c4 10             	add    esp,0x10
c0018665:	eb 25                	jmp    c001868c <ACPI::open(int, int, void*)+0xd4>
c0018667:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001866b:	8a 00                	mov    al,BYTE PTR [eax]
c001866d:	3c 02                	cmp    al,0x2
c001866f:	75 1b                	jne    c001868c <ACPI::open(int, int, void*)+0xd4>
c0018671:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018675:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001867c:	83 ec 0c             	sub    esp,0xc
c001867f:	68 c4 bd 02 c0       	push   0xc002bdc4
c0018684:	e8 58 a8 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018689:	83 c4 10             	add    esp,0x10
c001868c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018690:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018696:	83 f0 01             	xor    eax,0x1
c0018699:	84 c0                	test   al,al
c001869b:	74 6a                	je     c0018707 <ACPI::open(int, int, void*)+0x14f>
c001869d:	83 ec 0c             	sub    esp,0xc
c00186a0:	68 cc bd 02 c0       	push   0xc002bdcc
c00186a5:	e8 37 a8 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00186aa:	83 c4 10             	add    esp,0x10
c00186ad:	e8 9e 7a fe ff       	call   c0000150 <manualPCIProbe>
c00186b2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00186b6:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c00186bb:	75 28                	jne    c00186e5 <ACPI::open(int, int, void*)+0x12d>
c00186bd:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186c1:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186c8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186cc:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186d3:	83 ec 0c             	sub    esp,0xc
c00186d6:	68 da bd 02 c0       	push   0xc002bdda
c00186db:	e8 01 a8 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00186e0:	83 c4 10             	add    esp,0x10
c00186e3:	eb 22                	jmp    c0018707 <ACPI::open(int, int, void*)+0x14f>
c00186e5:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c00186ea:	75 1b                	jne    c0018707 <ACPI::open(int, int, void*)+0x14f>
c00186ec:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186f0:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186f7:	83 ec 0c             	sub    esp,0xc
c00186fa:	68 e4 bd 02 c0       	push   0xc002bde4
c00186ff:	e8 dd a7 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018704:	83 c4 10             	add    esp,0x10
c0018707:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001870b:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018711:	84 c0                	test   al,al
c0018713:	74 13                	je     c0018728 <ACPI::open(int, int, void*)+0x170>
c0018715:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018719:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001871f:	83 f0 01             	xor    eax,0x1
c0018722:	0f b6 c0             	movzx  eax,al
c0018725:	40                   	inc    eax
c0018726:	eb 05                	jmp    c001872d <ACPI::open(int, int, void*)+0x175>
c0018728:	b8 00 00 00 00       	mov    eax,0x0
c001872d:	83 ec 08             	sub    esp,0x8
c0018730:	50                   	push   eax
c0018731:	68 ee bd 02 c0       	push   0xc002bdee
c0018736:	e8 a6 a7 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001873b:	83 c4 10             	add    esp,0x10
c001873e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018742:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018748:	84 c0                	test   al,al
c001874a:	74 67                	je     c00187b3 <ACPI::open(int, int, void*)+0x1fb>
c001874c:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001875b:	e8 ca 71 ff ff       	call   c000f92a <malloc>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	89 c3                	mov    ebx,eax
c0018765:	83 ec 0c             	sub    esp,0xc
c0018768:	53                   	push   ebx
c0018769:	e8 9c a8 00 00       	call   c002300a <PCI::PCI()>
c001876e:	83 c4 10             	add    esp,0x10
c0018771:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c0018775:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018779:	83 ec 08             	sub    esp,0x8
c001877c:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0018780:	50                   	push   eax
c0018781:	e8 90 bb ff ff       	call   c0014316 <Device::addChild(Device*)>
c0018786:	83 c4 10             	add    esp,0x10
c0018789:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001878d:	8b 00                	mov    eax,DWORD PTR [eax]
c001878f:	83 c0 08             	add    eax,0x8
c0018792:	8b 00                	mov    eax,DWORD PTR [eax]
c0018794:	6a 00                	push   0x0
c0018796:	6a 00                	push   0x0
c0018798:	6a 00                	push   0x0
c001879a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001879e:	ff d0                	call   eax
c00187a0:	83 c4 10             	add    esp,0x10
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	68 f7 bd 02 c0       	push   0xc002bdf7
c00187ab:	e8 31 a7 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 ec 0c             	sub    esp,0xc
c00187b6:	68 02 be 02 c0       	push   0xc002be02
c00187bb:	e8 7f 48 00 00       	call   c001d03f <Thr::loadKernelSymbolTable(char const*)>
c00187c0:	83 c4 10             	add    esp,0x10
c00187c3:	83 ec 0c             	sub    esp,0xc
c00187c6:	6a 0c                	push   0xc
c00187c8:	e8 4d 95 ff ff       	call   c0011d1a <Virt::setupPageSwapping(int)>
c00187cd:	83 c4 10             	add    esp,0x10
c00187d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00187d4:	83 ec 08             	sub    esp,0x8
c00187d7:	6a 12                	push   0x12
c00187d9:	50                   	push   eax
c00187da:	e8 a7 be ff ff       	call   c0014686 <getDevicesOfType(DeviceType)>
c00187df:	83 c4 0c             	add    esp,0xc
c00187e2:	83 ec 0c             	sub    esp,0xc
c00187e5:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187e9:	50                   	push   eax
c00187ea:	e8 41 0c 01 00       	call   c0029430 <LinkedList<Device>::isEmpty()>
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	83 f0 01             	xor    eax,0x1
c00187f5:	84 c0                	test   al,al
c00187f7:	0f 84 fd 00 00 00    	je     c00188fa <ACPI::open(int, int, void*)+0x342>
c00187fd:	83 ec 0c             	sub    esp,0xc
c0018800:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018804:	50                   	push   eax
c0018805:	e8 42 0c 01 00       	call   c002944c <LinkedList<Device>::getFirstElement()>
c001880a:	83 c4 10             	add    esp,0x10
c001880d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018811:	83 ec 0c             	sub    esp,0xc
c0018814:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018818:	50                   	push   eax
c0018819:	e8 36 0c 01 00       	call   c0029454 <LinkedList<Device>::removeFirst()>
c001881e:	83 c4 10             	add    esp,0x10
c0018821:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018825:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0018829:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001882d:	83 ec 0c             	sub    esp,0xc
c0018830:	50                   	push   eax
c0018831:	e8 cc bd ff ff       	call   c0014602 <Device::getName()>
c0018836:	83 c4 10             	add    esp,0x10
c0018839:	83 ec 08             	sub    esp,0x8
c001883c:	50                   	push   eax
c001883d:	68 80 bf 02 c0       	push   0xc002bf80
c0018842:	e8 9a a6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018847:	83 c4 10             	add    esp,0x10
c001884a:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001884e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018852:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0018858:	ba 09 00 00 00       	mov    edx,0x9
c001885d:	fc                   	cld    
c001885e:	89 c7                	mov    edi,eax
c0018860:	89 de                	mov    esi,ebx
c0018862:	89 d1                	mov    ecx,edx
c0018864:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018866:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001886a:	0f b6 c0             	movzx  eax,al
c001886d:	83 ec 08             	sub    esp,0x8
c0018870:	50                   	push   eax
c0018871:	68 20 be 02 c0       	push   0xc002be20
c0018876:	e8 66 a6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001887b:	83 c4 10             	add    esp,0x10
c001887e:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018882:	0f b6 c0             	movzx  eax,al
c0018885:	83 ec 08             	sub    esp,0x8
c0018888:	50                   	push   eax
c0018889:	68 32 be 02 c0       	push   0xc002be32
c001888e:	e8 4e a6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0018893:	83 c4 10             	add    esp,0x10
c0018896:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c001889b:	0f b7 c0             	movzx  eax,ax
c001889e:	83 ec 08             	sub    esp,0x8
c00188a1:	50                   	push   eax
c00188a2:	68 44 be 02 c0       	push   0xc002be44
c00188a7:	e8 35 a6 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00188ac:	83 c4 10             	add    esp,0x10
c00188af:	83 ec 0c             	sub    esp,0xc
c00188b2:	83 ec 24             	sub    esp,0x24
c00188b5:	89 e0                	mov    eax,esp
c00188b7:	89 c3                	mov    ebx,eax
c00188b9:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188bd:	ba 09 00 00 00       	mov    edx,0x9
c00188c2:	89 df                	mov    edi,ebx
c00188c4:	89 c6                	mov    esi,eax
c00188c6:	89 d1                	mov    ecx,edx
c00188c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188ca:	e8 9d aa 00 00       	call   c002336c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c00188cf:	83 c4 30             	add    esp,0x30
c00188d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00188d6:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00188db:	0f 84 01 ff ff ff    	je     c00187e2 <ACPI::open(int, int, void*)+0x22a>
c00188e1:	83 ec 08             	sub    esp,0x8
c00188e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00188e8:	68 56 be 02 c0       	push   0xc002be56
c00188ed:	e8 ef a5 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00188f2:	83 c4 10             	add    esp,0x10
c00188f5:	e9 e8 fe ff ff       	jmp    c00187e2 <ACPI::open(int, int, void*)+0x22a>
c00188fa:	83 ec 0c             	sub    esp,0xc
c00188fd:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018901:	50                   	push   eax
c0018902:	e8 27 0b 01 00       	call   c002942e <LinkedList<Device>::~LinkedList()>
c0018907:	83 c4 10             	add    esp,0x10
c001890a:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0018910:	83 ec 08             	sub    esp,0x8
c0018913:	6a 01                	push   0x1
c0018915:	68 62 be 02 c0       	push   0xc002be62
c001891a:	e8 97 51 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c001891f:	83 c4 10             	add    esp,0x10
c0018922:	83 ec 08             	sub    esp,0x8
c0018925:	53                   	push   ebx
c0018926:	50                   	push   eax
c0018927:	e8 b5 53 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c001892c:	83 c4 10             	add    esp,0x10
c001892f:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0018935:	83 ec 08             	sub    esp,0x8
c0018938:	6a 01                	push   0x1
c001893a:	68 7f be 02 c0       	push   0xc002be7f
c001893f:	e8 72 51 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c0018944:	83 c4 10             	add    esp,0x10
c0018947:	83 ec 08             	sub    esp,0x8
c001894a:	53                   	push   ebx
c001894b:	50                   	push   eax
c001894c:	e8 90 53 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c0018951:	83 c4 10             	add    esp,0x10
c0018954:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018959:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001895f:	83 e0 04             	and    eax,0x4
c0018962:	84 c0                	test   al,al
c0018964:	0f 84 d3 00 00 00    	je     c0018a3d <ACPI::open(int, int, void*)+0x485>
c001896a:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c0018972:	83 ec 0c             	sub    esp,0xc
c0018975:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0018979:	e8 ac 6f ff ff       	call   c000f92a <malloc>
c001897e:	83 c4 10             	add    esp,0x10
c0018981:	89 c3                	mov    ebx,eax
c0018983:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0018988:	83 ec 04             	sub    esp,0x4
c001898b:	50                   	push   eax
c001898c:	68 9c be 02 c0       	push   0xc002be9c
c0018991:	53                   	push   ebx
c0018992:	e8 a9 aa ff ff       	call   c0013440 <File::File(char const*, Process*)>
c0018997:	83 c4 10             	add    esp,0x10
c001899a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001899e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189a3:	74 17                	je     c00189bc <ACPI::open(int, int, void*)+0x404>
c00189a5:	83 ec 0c             	sub    esp,0xc
c00189a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00189ac:	e8 61 ad ff ff       	call   c0013712 <File::exists()>
c00189b1:	83 c4 10             	add    esp,0x10
c00189b4:	84 c0                	test   al,al
c00189b6:	74 04                	je     c00189bc <ACPI::open(int, int, void*)+0x404>
c00189b8:	b0 01                	mov    al,0x1
c00189ba:	eb 02                	jmp    c00189be <ACPI::open(int, int, void*)+0x406>
c00189bc:	b0 00                	mov    al,0x0
c00189be:	84 c0                	test   al,al
c00189c0:	74 22                	je     c00189e4 <ACPI::open(int, int, void*)+0x42c>
c00189c2:	83 ec 08             	sub    esp,0x8
c00189c5:	6a 01                	push   0x1
c00189c7:	68 9c be 02 c0       	push   0xc002be9c
c00189cc:	e8 e5 50 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c00189d1:	83 c4 10             	add    esp,0x10
c00189d4:	83 ec 08             	sub    esp,0x8
c00189d7:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00189db:	50                   	push   eax
c00189dc:	e8 00 53 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c00189e1:	83 c4 10             	add    esp,0x10
c00189e4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189e9:	74 1e                	je     c0018a09 <ACPI::open(int, int, void*)+0x451>
c00189eb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00189f0:	74 17                	je     c0018a09 <ACPI::open(int, int, void*)+0x451>
c00189f2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00189f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00189f8:	83 c0 08             	add    eax,0x8
c00189fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00189fd:	83 ec 0c             	sub    esp,0xc
c0018a00:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018a04:	ff d0                	call   eax
c0018a06:	83 c4 10             	add    esp,0x10
c0018a09:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0018a0e:	83 ec 08             	sub    esp,0x8
c0018a11:	68 b9 be 02 c0       	push   0xc002beb9
c0018a16:	50                   	push   eax
c0018a17:	e8 02 f4 ff ff       	call   c0017e1e <findDataTable(unsigned char*, char*)>
c0018a1c:	83 c4 10             	add    esp,0x10
c0018a1f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a23:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0018a28:	74 13                	je     c0018a3d <ACPI::open(int, int, void*)+0x485>
c0018a2a:	83 ec 08             	sub    esp,0x8
c0018a2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0018a31:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0018a35:	e8 1e fb ff ff       	call   c0018558 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a3a:	83 c4 10             	add    esp,0x10
c0018a3d:	b8 00 00 00 00       	mov    eax,0x0
c0018a42:	83 c4 60             	add    esp,0x60
c0018a45:	5b                   	pop    ebx
c0018a46:	5e                   	pop    esi
c0018a47:	5f                   	pop    edi
c0018a48:	c3                   	ret    
c0018a49:	90                   	nop

c0018a4a <CPU::close(int, int, void*)>:
c0018a4a:	31 c0                	xor    eax,eax
c0018a4c:	c3                   	ret    
c0018a4d:	90                   	nop

c0018a4e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018a4e:	55                   	push   ebp
c0018a4f:	57                   	push   edi
c0018a50:	56                   	push   esi
c0018a51:	53                   	push   ebx
c0018a52:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018a56:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018a5a:	89 ce                	mov    esi,ecx
c0018a5c:	89 d5                	mov    ebp,edx
c0018a5e:	80 f9 04             	cmp    cl,0x4
c0018a61:	75 28                	jne    c0018a8b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018a63:	8d 42 f9             	lea    eax,[edx-0x7]
c0018a66:	3c 03                	cmp    al,0x3
c0018a68:	0f 86 63 01 00 00    	jbe    c0018bd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a6e:	80 fa 03             	cmp    dl,0x3
c0018a71:	0f 84 5a 01 00 00    	je     c0018bd1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018a77:	8d 7a f2             	lea    edi,[edx-0xe]
c0018a7a:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018a7f:	89 fb                	mov    ebx,edi
c0018a81:	80 fb 01             	cmp    bl,0x1
c0018a84:	77 4e                	ja     c0018ad4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a86:	e9 52 01 00 00       	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a8b:	80 f9 05             	cmp    cl,0x5
c0018a8e:	75 4d                	jne    c0018add <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a90:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018a95:	80 fa 03             	cmp    dl,0x3
c0018a98:	0f 86 3f 01 00 00    	jbe    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a9e:	8d 7a fa             	lea    edi,[edx-0x6]
c0018aa1:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018aa6:	89 fb                	mov    ebx,edi
c0018aa8:	80 fb 01             	cmp    bl,0x1
c0018aab:	0f 86 2c 01 00 00    	jbe    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ab1:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018ab6:	80 fa 08             	cmp    dl,0x8
c0018ab9:	0f 84 1e 01 00 00    	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018abf:	89 d7                	mov    edi,edx
c0018ac1:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018ac6:	83 e7 fb             	and    edi,0xfffffffb
c0018ac9:	89 fb                	mov    ebx,edi
c0018acb:	80 fb 09             	cmp    bl,0x9
c0018ace:	0f 84 09 01 00 00    	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad4:	31 c0                	xor    eax,eax
c0018ad6:	89 eb                	mov    ebx,ebp
c0018ad8:	0f b6 fb             	movzx  edi,bl
c0018adb:	eb 30                	jmp    c0018b0d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018add:	31 c0                	xor    eax,eax
c0018adf:	80 f9 06             	cmp    cl,0x6
c0018ae2:	75 f2                	jne    c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae4:	80 fa 0a             	cmp    dl,0xa
c0018ae7:	77 ed                	ja     c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018ae9:	bf de 05 00 00       	mov    edi,0x5de
c0018aee:	0f a3 d7             	bt     edi,edx
c0018af1:	73 e3                	jae    c0018ad6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018af3:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018af8:	e9 e0 00 00 00       	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afd:	39 c7                	cmp    edi,eax
c0018aff:	0f 84 d3 00 00 00    	je     c0018bd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b05:	40                   	inc    eax
c0018b06:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b0b:	74 09                	je     c0018b16 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b0d:	89 f3                	mov    ebx,esi
c0018b0f:	80 fb 0f             	cmp    bl,0xf
c0018b12:	75 f1                	jne    c0018b05 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b14:	eb e7                	jmp    c0018afd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b16:	80 f9 10             	cmp    cl,0x10
c0018b19:	75 14                	jne    c0018b2f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b1b:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b1e:	83 e0 fb             	and    eax,0xfffffffb
c0018b21:	3c 02                	cmp    al,0x2
c0018b23:	76 34                	jbe    c0018b59 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b25:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b2a:	80 fa 02             	cmp    dl,0x2
c0018b2d:	eb 24                	jmp    c0018b53 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b2f:	80 f9 11             	cmp    cl,0x11
c0018b32:	75 13                	jne    c0018b47 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b34:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b39:	80 fa 03             	cmp    dl,0x3
c0018b3c:	0f 85 9b 00 00 00    	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b42:	e9 91 00 00 00       	jmp    c0018bd8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b47:	80 f9 12             	cmp    cl,0x12
c0018b4a:	75 14                	jne    c0018b60 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018b4c:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b51:	fe ca                	dec    dl
c0018b53:	0f 85 84 00 00 00    	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b59:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018b5e:	eb 7d                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b60:	80 f9 14             	cmp    cl,0x14
c0018b63:	75 12                	jne    c0018b77 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018b65:	4a                   	dec    edx
c0018b66:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b6b:	80 fa 01             	cmp    dl,0x1
c0018b6e:	77 6d                	ja     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b70:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018b75:	eb 66                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b77:	80 f9 15             	cmp    cl,0x15
c0018b7a:	75 31                	jne    c0018bad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018b7c:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018b81:	80 fa 01             	cmp    dl,0x1
c0018b84:	74 57                	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b86:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b8b:	80 fa 13             	cmp    dl,0x13
c0018b8e:	76 0c                	jbe    c0018b9c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b90:	80 fa 30             	cmp    dl,0x30
c0018b93:	75 48                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b95:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018b9a:	eb 41                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b9c:	b9 04 00 09 00       	mov    ecx,0x90004
c0018ba1:	0f a3 d1             	bt     ecx,edx
c0018ba4:	73 37                	jae    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba6:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018bab:	eb 30                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bad:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018bb2:	80 f9 16             	cmp    cl,0x16
c0018bb5:	75 26                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb7:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018bbc:	84 d2                	test   dl,dl
c0018bbe:	74 1d                	je     c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc0:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018bc5:	80 fa 30             	cmp    dl,0x30
c0018bc8:	75 13                	jne    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bca:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018bcf:	eb 0c                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd1:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018bd6:	eb 05                	jmp    c0018bdd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd8:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018bdd:	5b                   	pop    ebx
c0018bde:	5e                   	pop    esi
c0018bdf:	5f                   	pop    edi
c0018be0:	5d                   	pop    ebp
c0018be1:	c3                   	ret    

c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018be2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018be6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018bea:	80 f9 04             	cmp    cl,0x4
c0018bed:	75 6b                	jne    c0018c5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018bef:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018bf4:	80 fa 01             	cmp    dl,0x1
c0018bf7:	0f 86 92 02 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfd:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018c02:	80 fa 02             	cmp    dl,0x2
c0018c05:	0f 84 84 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0b:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018c10:	80 fa 03             	cmp    dl,0x3
c0018c13:	0f 84 76 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c19:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018c1e:	80 fa 04             	cmp    dl,0x4
c0018c21:	0f 84 68 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c27:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018c2c:	80 fa 05             	cmp    dl,0x5
c0018c2f:	0f 84 5a 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018c3a:	80 fa 07             	cmp    dl,0x7
c0018c3d:	0f 84 4c 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c43:	83 ea 08             	sub    edx,0x8
c0018c46:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018c4b:	80 fa 01             	cmp    dl,0x1
c0018c4e:	0f 87 3b 02 00 00    	ja     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c54:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018c59:	c3                   	ret    
c0018c5a:	80 f9 05             	cmp    cl,0x5
c0018c5d:	75 45                	jne    c0018ca4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018c5f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018c62:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018c67:	80 f9 02             	cmp    cl,0x2
c0018c6a:	0f 86 1f 02 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c70:	80 fa 04             	cmp    dl,0x4
c0018c73:	0f 84 f3 01 00 00    	je     c0018e6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018c79:	80 fa 07             	cmp    dl,0x7
c0018c7c:	0f 84 0d 02 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c82:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018c87:	80 fa 08             	cmp    dl,0x8
c0018c8a:	0f 84 ff 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c90:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018c95:	80 fa 09             	cmp    dl,0x9
c0018c98:	0f 85 f1 01 00 00    	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c9e:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018ca3:	c3                   	ret    
c0018ca4:	80 f9 06             	cmp    cl,0x6
c0018ca7:	0f 85 85 01 00 00    	jne    c0018e32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018cad:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018cb2:	80 fa 01             	cmp    dl,0x1
c0018cb5:	0f 84 d4 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cbb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018cbe:	3c 01                	cmp    al,0x1
c0018cc0:	0f 86 ac 01 00 00    	jbe    c0018e72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018cc6:	80 fa 03             	cmp    dl,0x3
c0018cc9:	0f 84 a3 01 00 00    	je     c0018e72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ccf:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018cd2:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018cd7:	80 f9 01             	cmp    cl,0x1
c0018cda:	0f 86 af 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce0:	80 fa 09             	cmp    dl,0x9
c0018ce3:	0f 84 8f 01 00 00    	je     c0018e78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ce9:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018cec:	80 f9 01             	cmp    cl,0x1
c0018cef:	0f 86 9a 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf5:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018cfa:	80 fa 0d             	cmp    dl,0xd
c0018cfd:	0f 84 8c 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d03:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018d08:	80 fa 0e             	cmp    dl,0xe
c0018d0b:	0f 84 7e 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d11:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d16:	80 fa 0f             	cmp    dl,0xf
c0018d19:	0f 84 70 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1f:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018d24:	80 fa 15             	cmp    dl,0x15
c0018d27:	0f 84 62 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d30:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018d35:	80 f9 01             	cmp    cl,0x1
c0018d38:	0f 86 51 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d3e:	80 fa 1a             	cmp    dl,0x1a
c0018d41:	0f 84 37 01 00 00    	je     c0018e7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018d47:	80 fa 1c             	cmp    dl,0x1c
c0018d4a:	0f 84 34 01 00 00    	je     c0018e84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018d50:	80 fa 1d             	cmp    dl,0x1d
c0018d53:	0f 84 36 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d59:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018d5e:	80 fa 25             	cmp    dl,0x25
c0018d61:	0f 84 28 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d67:	8d 4a da             	lea    ecx,[edx-0x26]
c0018d6a:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d6f:	80 f9 01             	cmp    cl,0x1
c0018d72:	0f 86 17 01 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d78:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018d7d:	80 fa 2a             	cmp    dl,0x2a
c0018d80:	0f 84 09 01 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d86:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018d8b:	80 fa 2c             	cmp    dl,0x2c
c0018d8e:	0f 84 fb 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d94:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018d99:	80 fa 2d             	cmp    dl,0x2d
c0018d9c:	0f 84 ed 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da2:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018da7:	80 fa 2e             	cmp    dl,0x2e
c0018daa:	0f 84 df 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db0:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018db5:	80 fa 2f             	cmp    dl,0x2f
c0018db8:	0f 84 d1 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dbe:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018dc1:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018dc6:	80 f9 01             	cmp    cl,0x1
c0018dc9:	0f 86 c0 00 00 00    	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcf:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018dd4:	80 fa 37             	cmp    dl,0x37
c0018dd7:	0f 84 b2 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ddd:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018de2:	80 fa 3a             	cmp    dl,0x3a
c0018de5:	0f 84 a4 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018deb:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018df0:	80 fa 3c             	cmp    dl,0x3c
c0018df3:	0f 84 96 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df9:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018dfe:	80 fa 3d             	cmp    dl,0x3d
c0018e01:	0f 84 88 00 00 00    	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e07:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018e0c:	80 fa 3e             	cmp    dl,0x3e
c0018e0f:	74 7e                	je     c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e11:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e14:	3c 01                	cmp    al,0x1
c0018e16:	76 72                	jbe    c0018e8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e18:	80 fa 3f             	cmp    dl,0x3f
c0018e1b:	74 6d                	je     c0018e8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e1d:	80 fa 4a             	cmp    dl,0x4a
c0018e20:	74 0a                	je     c0018e2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e22:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018e27:	80 fa 4d             	cmp    dl,0x4d
c0018e2a:	75 63                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2c:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018e31:	c3                   	ret    
c0018e32:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018e37:	80 f9 0b             	cmp    cl,0xb
c0018e3a:	75 0a                	jne    c0018e46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e3c:	fe ca                	dec    dl
c0018e3e:	75 4f                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e40:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018e45:	c3                   	ret    
c0018e46:	80 f9 0f             	cmp    cl,0xf
c0018e49:	75 44                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4b:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018e50:	80 fa 02             	cmp    dl,0x2
c0018e53:	76 3a                	jbe    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e55:	8d 42 fd             	lea    eax,[edx-0x3]
c0018e58:	3c 01                	cmp    al,0x1
c0018e5a:	76 0a                	jbe    c0018e66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018e5c:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018e61:	80 fa 06             	cmp    dl,0x6
c0018e64:	75 29                	jne    c0018e8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e66:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018e6b:	c3                   	ret    
c0018e6c:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018e71:	c3                   	ret    
c0018e72:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018e77:	c3                   	ret    
c0018e78:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018e7d:	c3                   	ret    
c0018e7e:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018e83:	c3                   	ret    
c0018e84:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018e89:	c3                   	ret    
c0018e8a:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018e8f:	c3                   	ret    

c0018e90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e90:	60                   	pusha  
c0018e91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e9d:	9c                   	pushf  
c0018e9e:	fa                   	cli    
c0018e9f:	0f 09                	wbinvd 
c0018ea1:	0f 30                	wrmsr  
c0018ea3:	9d                   	popf   
c0018ea4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ea8:	89 02                	mov    DWORD PTR [edx],eax
c0018eaa:	61                   	popa   
c0018eab:	c3                   	ret    

c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018eac:	60                   	pusha  
c0018ead:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018eb1:	9c                   	pushf  
c0018eb2:	fa                   	cli    
c0018eb3:	0f 09                	wbinvd 
c0018eb5:	31 c0                	xor    eax,eax
c0018eb7:	31 d2                	xor    edx,edx
c0018eb9:	0f 32                	rdmsr  
c0018ebb:	9d                   	popf   
c0018ebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018ec0:	89 02                	mov    DWORD PTR [edx],eax
c0018ec2:	61                   	popa   
c0018ec3:	c3                   	ret    

c0018ec4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018ec4:	56                   	push   esi
c0018ec5:	53                   	push   ebx
c0018ec6:	83 ec 10             	sub    esp,0x10
c0018ec9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ecd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018ed2:	75 5d                	jne    c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ed4:	83 f8 08             	cmp    eax,0x8
c0018ed7:	75 09                	jne    c0018ee2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018ed9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018ede:	7e 13                	jle    c0018ef3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ee0:	eb 30                	jmp    c0018f12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ee2:	83 f8 06             	cmp    eax,0x6
c0018ee5:	7c 4a                	jl     c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ee7:	83 f8 07             	cmp    eax,0x7
c0018eea:	7e 07                	jle    c0018ef3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018eec:	83 f8 09             	cmp    eax,0x9
c0018eef:	74 21                	je     c0018f12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ef1:	eb 3e                	jmp    c0018f31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ef3:	89 e6                	mov    esi,esp
c0018ef5:	8b 1d 88 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee88
c0018efb:	56                   	push   esi
c0018efc:	c1 eb 15             	shr    ebx,0x15
c0018eff:	68 82 00 00 c0       	push   0xc0000082
c0018f04:	83 e3 7e             	and    ebx,0x7e
c0018f07:	e8 a0 ff ff ff       	call   c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f0c:	56                   	push   esi
c0018f0d:	6a 00                	push   0x0
c0018f0f:	53                   	push   ebx
c0018f10:	eb 12                	jmp    c0018f24 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f12:	89 e3                	mov    ebx,esp
c0018f14:	53                   	push   ebx
c0018f15:	68 82 00 00 c0       	push   0xc0000082
c0018f1a:	e8 8d ff ff ff       	call   c0018eac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f1f:	53                   	push   ebx
c0018f20:	6a 00                	push   0x0
c0018f22:	6a 00                	push   0x0
c0018f24:	68 82 00 00 c0       	push   0xc0000082
c0018f29:	e8 62 ff ff ff       	call   c0018e90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f2e:	83 c4 18             	add    esp,0x18
c0018f31:	83 c4 10             	add    esp,0x10
c0018f34:	5b                   	pop    ebx
c0018f35:	5e                   	pop    esi
c0018f36:	c3                   	ret    
c0018f37:	90                   	nop

c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f38:	55                   	push   ebp
c0018f39:	57                   	push   edi
c0018f3a:	56                   	push   esi
c0018f3b:	53                   	push   ebx
c0018f3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018f44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018f48:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018f4c:	39 05 60 e3 02 c0    	cmp    DWORD PTR ds:0xc002e360,eax
c0018f52:	75 23                	jne    c0018f77 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018f54:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0018f59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018f5d:	89 06                	mov    DWORD PTR [esi],eax
c0018f5f:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0018f64:	89 07                	mov    DWORD PTR [edi],eax
c0018f66:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c0018f6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018f6e:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c0018f73:	89 02                	mov    DWORD PTR [edx],eax
c0018f75:	eb 3f                	jmp    c0018fb6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018f77:	31 c9                	xor    ecx,ecx
c0018f79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f7d:	0f a2                	cpuid  
c0018f7f:	89 06                	mov    DWORD PTR [esi],eax
c0018f81:	89 1f                	mov    DWORD PTR [edi],ebx
c0018f83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f87:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f8a:	89 10                	mov    DWORD PTR [eax],edx
c0018f8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f90:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c0018f95:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f97:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c0018f9c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f9e:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c0018fa3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018fa6:	a3 84 19 03 c0       	mov    ds:0xc0031984,eax
c0018fab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018faf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018fb1:	a3 80 19 03 c0       	mov    ds:0xc0031980,eax
c0018fb6:	5b                   	pop    ebx
c0018fb7:	5e                   	pop    esi
c0018fb8:	5f                   	pop    edi
c0018fb9:	5d                   	pop    ebp
c0018fba:	c3                   	ret    
c0018fbb:	90                   	nop

c0018fbc <CPU::cpuidCheckEDX(unsigned int)>:
c0018fbc:	83 ec 10             	sub    esp,0x10
c0018fbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc3:	50                   	push   eax
c0018fc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc8:	50                   	push   eax
c0018fc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fcd:	50                   	push   eax
c0018fce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd2:	50                   	push   eax
c0018fd3:	6a 01                	push   0x1
c0018fd5:	e8 5e ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fde:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018fe2:	0f 95 c0             	setne  al
c0018fe5:	83 c4 24             	add    esp,0x24
c0018fe8:	c3                   	ret    
c0018fe9:	90                   	nop

c0018fea <CPU::cpuidCheckECX(unsigned int)>:
c0018fea:	83 ec 10             	sub    esp,0x10
c0018fed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff1:	50                   	push   eax
c0018ff2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ff6:	50                   	push   eax
c0018ff7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018ffb:	50                   	push   eax
c0018ffc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019000:	50                   	push   eax
c0019001:	6a 01                	push   0x1
c0019003:	e8 30 ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019008:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001900c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019010:	0f 95 c0             	setne  al
c0019013:	83 c4 24             	add    esp,0x24
c0019016:	c3                   	ret    
c0019017:	90                   	nop

c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019018:	83 ec 10             	sub    esp,0x10
c001901b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001901f:	50                   	push   eax
c0019020:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019024:	50                   	push   eax
c0019025:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019029:	50                   	push   eax
c001902a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902e:	50                   	push   eax
c001902f:	6a 07                	push   0x7
c0019031:	e8 02 ff ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019036:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001903e:	0f 95 c0             	setne  al
c0019041:	83 c4 24             	add    esp,0x24
c0019044:	c3                   	ret    
c0019045:	90                   	nop

c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0019046:	83 ec 10             	sub    esp,0x10
c0019049:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001904d:	50                   	push   eax
c001904e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019052:	50                   	push   eax
c0019053:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019057:	50                   	push   eax
c0019058:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905c:	50                   	push   eax
c001905d:	6a 07                	push   0x7
c001905f:	e8 d4 fe ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019064:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019068:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001906c:	0f 95 c0             	setne  al
c001906f:	83 c4 24             	add    esp,0x24
c0019072:	c3                   	ret    
c0019073:	90                   	nop

c0019074 <CPU::CPU()>:
c0019074:	83 ec 0c             	sub    esp,0xc
c0019077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001907b:	83 ec 08             	sub    esp,0x8
c001907e:	68 c6 c2 02 c0       	push   0xc002c2c6
c0019083:	50                   	push   eax
c0019084:	e8 7d b4 ff ff       	call   c0014506 <Device::Device(char const*)>
c0019089:	83 c4 10             	add    esp,0x10
c001908c:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c0019091:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019095:	89 10                	mov    DWORD PTR [eax],edx
c0019097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00190a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190a9:	05 78 01 00 00       	add    eax,0x178
c00190ae:	83 ec 0c             	sub    esp,0xc
c00190b1:	50                   	push   eax
c00190b2:	e8 89 60 ff ff       	call   c000f140 <GDT::GDT()>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190be:	05 7c 09 00 00       	add    eax,0x97c
c00190c3:	83 ec 0c             	sub    esp,0xc
c00190c6:	50                   	push   eax
c00190c7:	e8 de 62 ff ff       	call   c000f3aa <IDT::IDT()>
c00190cc:	83 c4 10             	add    esp,0x10
c00190cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190d3:	05 7c 11 00 00       	add    eax,0x117c
c00190d8:	83 ec 0c             	sub    esp,0xc
c00190db:	50                   	push   eax
c00190dc:	e8 2b 83 ff ff       	call   c001140c <TSS::TSS()>
c00190e1:	83 c4 10             	add    esp,0x10
c00190e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190e8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00190ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00190fd:	90                   	nop
c00190fe:	83 c4 0c             	add    esp,0xc
c0019101:	c3                   	ret    

c0019102 <CPU::displayFeatures()>:
c0019102:	53                   	push   ebx
c0019103:	83 ec 10             	sub    esp,0x10
c0019106:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001910a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019110:	68 d4 bf 02 c0       	push   0xc002bfd4
c0019115:	e8 c7 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001911a:	59                   	pop    ecx
c001911b:	58                   	pop    eax
c001911c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019122:	50                   	push   eax
c0019123:	68 e5 bf 02 c0       	push   0xc002bfe5
c0019128:	e8 b4 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001912d:	58                   	pop    eax
c001912e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019134:	5a                   	pop    edx
c0019135:	c1 e8 0e             	shr    eax,0xe
c0019138:	0f b6 c0             	movzx  eax,al
c001913b:	50                   	push   eax
c001913c:	68 f6 bf 02 c0       	push   0xc002bff6
c0019141:	e8 9b 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019146:	59                   	pop    ecx
c0019147:	58                   	pop    eax
c0019148:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001914e:	66 c1 e8 06          	shr    ax,0x6
c0019152:	0f b6 c0             	movzx  eax,al
c0019155:	50                   	push   eax
c0019156:	68 07 c0 02 c0       	push   0xc002c007
c001915b:	e8 81 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019160:	c7 04 24 b4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4b4
c0019167:	e8 75 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001916c:	83 c4 10             	add    esp,0x10
c001916f:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019174:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001917b:	74 05                	je     c0019182 <CPU::displayFeatures()+0x80>
c001917d:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019182:	52                   	push   edx
c0019183:	52                   	push   edx
c0019184:	50                   	push   eax
c0019185:	68 18 c0 02 c0       	push   0xc002c018
c001918a:	e8 52 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001918f:	83 c4 10             	add    esp,0x10
c0019192:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019197:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c001919e:	78 05                	js     c00191a5 <CPU::displayFeatures()+0xa3>
c00191a0:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191a5:	51                   	push   ecx
c00191a6:	51                   	push   ecx
c00191a7:	50                   	push   eax
c00191a8:	68 2f c0 02 c0       	push   0xc002c02f
c00191ad:	e8 2f 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00191b2:	83 c4 10             	add    esp,0x10
c00191b5:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00191ba:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00191c1:	75 05                	jne    c00191c8 <CPU::displayFeatures()+0xc6>
c00191c3:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191c8:	52                   	push   edx
c00191c9:	52                   	push   edx
c00191ca:	50                   	push   eax
c00191cb:	68 46 c0 02 c0       	push   0xc002c046
c00191d0:	e8 0c 9d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00191dd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c00191e4:	75 05                	jne    c00191eb <CPU::displayFeatures()+0xe9>
c00191e6:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191eb:	51                   	push   ecx
c00191ec:	51                   	push   ecx
c00191ed:	50                   	push   eax
c00191ee:	68 5d c0 02 c0       	push   0xc002c05d
c00191f3:	e8 e9 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00191f8:	83 c4 10             	add    esp,0x10
c00191fb:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019200:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019207:	75 05                	jne    c001920e <CPU::displayFeatures()+0x10c>
c0019209:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001920e:	52                   	push   edx
c001920f:	52                   	push   edx
c0019210:	50                   	push   eax
c0019211:	68 74 c0 02 c0       	push   0xc002c074
c0019216:	e8 c6 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019223:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001922a:	75 05                	jne    c0019231 <CPU::displayFeatures()+0x12f>
c001922c:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019231:	51                   	push   ecx
c0019232:	51                   	push   ecx
c0019233:	50                   	push   eax
c0019234:	68 8b c0 02 c0       	push   0xc002c08b
c0019239:	e8 a3 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001923e:	83 c4 10             	add    esp,0x10
c0019241:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019246:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001924d:	75 05                	jne    c0019254 <CPU::displayFeatures()+0x152>
c001924f:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019254:	52                   	push   edx
c0019255:	52                   	push   edx
c0019256:	50                   	push   eax
c0019257:	68 a2 c0 02 c0       	push   0xc002c0a2
c001925c:	e8 80 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019261:	83 c4 10             	add    esp,0x10
c0019264:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019269:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019270:	75 05                	jne    c0019277 <CPU::displayFeatures()+0x175>
c0019272:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019277:	51                   	push   ecx
c0019278:	51                   	push   ecx
c0019279:	50                   	push   eax
c001927a:	68 b9 c0 02 c0       	push   0xc002c0b9
c001927f:	e8 5d 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019284:	83 c4 10             	add    esp,0x10
c0019287:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001928c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019293:	75 05                	jne    c001929a <CPU::displayFeatures()+0x198>
c0019295:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001929a:	52                   	push   edx
c001929b:	52                   	push   edx
c001929c:	50                   	push   eax
c001929d:	68 d0 c0 02 c0       	push   0xc002c0d0
c00192a2:	e8 3a 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00192a7:	83 c4 10             	add    esp,0x10
c00192aa:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00192af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00192b6:	75 05                	jne    c00192bd <CPU::displayFeatures()+0x1bb>
c00192b8:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00192bd:	51                   	push   ecx
c00192be:	51                   	push   ecx
c00192bf:	50                   	push   eax
c00192c0:	68 e7 c0 02 c0       	push   0xc002c0e7
c00192c5:	e8 17 9c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00192ca:	83 c4 10             	add    esp,0x10
c00192cd:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00192d2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00192d9:	75 05                	jne    c00192e0 <CPU::displayFeatures()+0x1de>
c00192db:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00192e0:	52                   	push   edx
c00192e1:	52                   	push   edx
c00192e2:	50                   	push   eax
c00192e3:	68 fe c0 02 c0       	push   0xc002c0fe
c00192e8:	e8 f4 9b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00192ed:	83 c4 10             	add    esp,0x10
c00192f0:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00192f5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00192fc:	75 05                	jne    c0019303 <CPU::displayFeatures()+0x201>
c00192fe:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019303:	51                   	push   ecx
c0019304:	51                   	push   ecx
c0019305:	50                   	push   eax
c0019306:	68 15 c1 02 c0       	push   0xc002c115
c001930b:	e8 d1 9b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019310:	83 c4 10             	add    esp,0x10
c0019313:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019318:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001931f:	75 05                	jne    c0019326 <CPU::displayFeatures()+0x224>
c0019321:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019326:	52                   	push   edx
c0019327:	52                   	push   edx
c0019328:	50                   	push   eax
c0019329:	68 2c c1 02 c0       	push   0xc002c12c
c001932e:	e8 ae 9b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001933b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019342:	78 05                	js     c0019349 <CPU::displayFeatures()+0x247>
c0019344:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019349:	51                   	push   ecx
c001934a:	51                   	push   ecx
c001934b:	50                   	push   eax
c001934c:	68 43 c1 02 c0       	push   0xc002c143
c0019351:	e8 8b 9b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019356:	83 c4 10             	add    esp,0x10
c0019359:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001935e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019365:	75 05                	jne    c001936c <CPU::displayFeatures()+0x26a>
c0019367:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001936c:	52                   	push   edx
c001936d:	52                   	push   edx
c001936e:	50                   	push   eax
c001936f:	68 5a c1 02 c0       	push   0xc002c15a
c0019374:	e8 68 9b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0019379:	83 c4 18             	add    esp,0x18
c001937c:	5b                   	pop    ebx
c001937d:	c3                   	ret    

c001937e <CPU::detectFeatures()>:
c001937e:	55                   	push   ebp
c001937f:	57                   	push   edi
c0019380:	56                   	push   esi
c0019381:	53                   	push   ebx
c0019382:	83 ec 50             	sub    esp,0x50
c0019385:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019389:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019393:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001939a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00193a0:	6a 0d                	push   0xd
c00193a2:	6a 00                	push   0x0
c00193a4:	57                   	push   edi
c00193a5:	e8 f2 73 fe ff       	call   c000079c <memset>
c00193aa:	83 c4 10             	add    esp,0x10
c00193ad:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00193b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00193b9:	0f 84 20 09 00 00    	je     c0019cdf <CPU::detectFeatures()+0x961>
c00193bf:	83 ec 0c             	sub    esp,0xc
c00193c2:	6a 10                	push   0x10
c00193c4:	e8 f3 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00193c9:	83 e0 01             	and    eax,0x1
c00193cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00193cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193d5:	83 e0 fd             	and    eax,0xfffffffd
c00193d8:	09 d0                	or     eax,edx
c00193da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00193e0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00193e7:	e8 d0 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00193ec:	83 e0 01             	and    eax,0x1
c00193ef:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00193f6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00193fc:	83 e0 fb             	and    eax,0xfffffffb
c00193ff:	09 d0                	or     eax,edx
c0019401:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019407:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001940e:	e8 a9 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c0019413:	83 e0 01             	and    eax,0x1
c0019416:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001941d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019423:	83 e0 f7             	and    eax,0xfffffff7
c0019426:	09 d0                	or     eax,edx
c0019428:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001942e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019435:	e8 82 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c001943a:	83 e0 01             	and    eax,0x1
c001943d:	c1 e0 04             	shl    eax,0x4
c0019440:	88 c2                	mov    dl,al
c0019442:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019448:	83 e0 ef             	and    eax,0xffffffef
c001944b:	09 d0                	or     eax,edx
c001944d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019453:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001945a:	e8 5d fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c001945f:	83 e0 01             	and    eax,0x1
c0019462:	c1 e0 05             	shl    eax,0x5
c0019465:	88 c2                	mov    dl,al
c0019467:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001946d:	83 e0 df             	and    eax,0xffffffdf
c0019470:	09 d0                	or     eax,edx
c0019472:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019478:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001947f:	e8 38 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c0019484:	83 e0 01             	and    eax,0x1
c0019487:	8d 14 00             	lea    edx,[eax+eax*1]
c001948a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019490:	83 e0 fd             	and    eax,0xfffffffd
c0019493:	09 d0                	or     eax,edx
c0019495:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001949b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00194a2:	e8 15 fb ff ff       	call   c0018fbc <CPU::cpuidCheckEDX(unsigned int)>
c00194a7:	83 e0 01             	and    eax,0x1
c00194aa:	c1 e0 06             	shl    eax,0x6
c00194ad:	88 c2                	mov    dl,al
c00194af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00194b5:	83 e0 bf             	and    eax,0xffffffbf
c00194b8:	09 d0                	or     eax,edx
c00194ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00194c0:	58                   	pop    eax
c00194c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00194c5:	56                   	push   esi
c00194c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00194ca:	55                   	push   ebp
c00194cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00194cf:	50                   	push   eax
c00194d0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00194d4:	52                   	push   edx
c00194d5:	6a 00                	push   0x0
c00194d7:	e8 5c fa ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00194dc:	83 c4 1c             	add    esp,0x1c
c00194df:	6a 04                	push   0x4
c00194e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00194e5:	50                   	push   eax
c00194e6:	57                   	push   edi
c00194e7:	e8 7c 72 fe ff       	call   c0000768 <memcpy>
c00194ec:	83 c4 0c             	add    esp,0xc
c00194ef:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00194f5:	6a 04                	push   0x4
c00194f7:	56                   	push   esi
c00194f8:	50                   	push   eax
c00194f9:	e8 6a 72 fe ff       	call   c0000768 <memcpy>
c00194fe:	83 c4 0c             	add    esp,0xc
c0019501:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019507:	6a 04                	push   0x4
c0019509:	55                   	push   ebp
c001950a:	50                   	push   eax
c001950b:	e8 58 72 fe ff       	call   c0000768 <memcpy>
c0019510:	58                   	pop    eax
c0019511:	5a                   	pop    edx
c0019512:	68 71 c1 02 c0       	push   0xc002c171
c0019517:	57                   	push   edi
c0019518:	e8 c7 73 fe ff       	call   c00008e4 <strcmp>
c001951d:	83 c4 10             	add    esp,0x10
c0019520:	85 c0                	test   eax,eax
c0019522:	75 0f                	jne    c0019533 <CPU::detectFeatures()+0x1b5>
c0019524:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001952e:	e9 22 02 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019533:	50                   	push   eax
c0019534:	50                   	push   eax
c0019535:	68 7e c1 02 c0       	push   0xc002c17e
c001953a:	57                   	push   edi
c001953b:	e8 a4 73 fe ff       	call   c00008e4 <strcmp>
c0019540:	83 c4 10             	add    esp,0x10
c0019543:	85 c0                	test   eax,eax
c0019545:	74 dd                	je     c0019524 <CPU::detectFeatures()+0x1a6>
c0019547:	51                   	push   ecx
c0019548:	51                   	push   ecx
c0019549:	68 8b c1 02 c0       	push   0xc002c18b
c001954e:	57                   	push   edi
c001954f:	e8 90 73 fe ff       	call   c00008e4 <strcmp>
c0019554:	83 c4 10             	add    esp,0x10
c0019557:	85 c0                	test   eax,eax
c0019559:	74 2a                	je     c0019585 <CPU::detectFeatures()+0x207>
c001955b:	52                   	push   edx
c001955c:	52                   	push   edx
c001955d:	68 98 c1 02 c0       	push   0xc002c198
c0019562:	57                   	push   edi
c0019563:	e8 7c 73 fe ff       	call   c00008e4 <strcmp>
c0019568:	83 c4 10             	add    esp,0x10
c001956b:	85 c0                	test   eax,eax
c001956d:	74 16                	je     c0019585 <CPU::detectFeatures()+0x207>
c001956f:	50                   	push   eax
c0019570:	50                   	push   eax
c0019571:	68 a5 c1 02 c0       	push   0xc002c1a5
c0019576:	57                   	push   edi
c0019577:	e8 68 73 fe ff       	call   c00008e4 <strcmp>
c001957c:	83 c4 10             	add    esp,0x10
c001957f:	85 c0                	test   eax,eax
c0019581:	74 48                	je     c00195cb <CPU::detectFeatures()+0x24d>
c0019583:	eb 0f                	jmp    c0019594 <CPU::detectFeatures()+0x216>
c0019585:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001958f:	e9 c1 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019594:	50                   	push   eax
c0019595:	50                   	push   eax
c0019596:	68 b2 c1 02 c0       	push   0xc002c1b2
c001959b:	57                   	push   edi
c001959c:	e8 43 73 fe ff       	call   c00008e4 <strcmp>
c00195a1:	83 c4 10             	add    esp,0x10
c00195a4:	85 c0                	test   eax,eax
c00195a6:	74 23                	je     c00195cb <CPU::detectFeatures()+0x24d>
c00195a8:	50                   	push   eax
c00195a9:	50                   	push   eax
c00195aa:	68 bf c1 02 c0       	push   0xc002c1bf
c00195af:	57                   	push   edi
c00195b0:	e8 2f 73 fe ff       	call   c00008e4 <strcmp>
c00195b5:	83 c4 10             	add    esp,0x10
c00195b8:	85 c0                	test   eax,eax
c00195ba:	75 1e                	jne    c00195da <CPU::detectFeatures()+0x25c>
c00195bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00195c6:	e9 8a 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00195cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00195d5:	e9 7b 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00195da:	50                   	push   eax
c00195db:	50                   	push   eax
c00195dc:	68 cc c1 02 c0       	push   0xc002c1cc
c00195e1:	57                   	push   edi
c00195e2:	e8 fd 72 fe ff       	call   c00008e4 <strcmp>
c00195e7:	83 c4 10             	add    esp,0x10
c00195ea:	85 c0                	test   eax,eax
c00195ec:	75 0f                	jne    c00195fd <CPU::detectFeatures()+0x27f>
c00195ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00195f8:	e9 58 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00195fd:	50                   	push   eax
c00195fe:	50                   	push   eax
c00195ff:	68 8b c1 02 c0       	push   0xc002c18b
c0019604:	57                   	push   edi
c0019605:	e8 da 72 fe ff       	call   c00008e4 <strcmp>
c001960a:	83 c4 10             	add    esp,0x10
c001960d:	85 c0                	test   eax,eax
c001960f:	75 0f                	jne    c0019620 <CPU::detectFeatures()+0x2a2>
c0019611:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001961b:	e9 35 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019620:	50                   	push   eax
c0019621:	50                   	push   eax
c0019622:	68 d9 c1 02 c0       	push   0xc002c1d9
c0019627:	57                   	push   edi
c0019628:	e8 b7 72 fe ff       	call   c00008e4 <strcmp>
c001962d:	83 c4 10             	add    esp,0x10
c0019630:	85 c0                	test   eax,eax
c0019632:	75 0f                	jne    c0019643 <CPU::detectFeatures()+0x2c5>
c0019634:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001963e:	e9 12 01 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019643:	51                   	push   ecx
c0019644:	51                   	push   ecx
c0019645:	68 e6 c1 02 c0       	push   0xc002c1e6
c001964a:	57                   	push   edi
c001964b:	e8 94 72 fe ff       	call   c00008e4 <strcmp>
c0019650:	83 c4 10             	add    esp,0x10
c0019653:	85 c0                	test   eax,eax
c0019655:	75 0f                	jne    c0019666 <CPU::detectFeatures()+0x2e8>
c0019657:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019661:	e9 ef 00 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019666:	52                   	push   edx
c0019667:	52                   	push   edx
c0019668:	68 f3 c1 02 c0       	push   0xc002c1f3
c001966d:	57                   	push   edi
c001966e:	e8 71 72 fe ff       	call   c00008e4 <strcmp>
c0019673:	83 c4 10             	add    esp,0x10
c0019676:	85 c0                	test   eax,eax
c0019678:	75 0f                	jne    c0019689 <CPU::detectFeatures()+0x30b>
c001967a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019684:	e9 cc 00 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c0019689:	50                   	push   eax
c001968a:	50                   	push   eax
c001968b:	68 00 c2 02 c0       	push   0xc002c200
c0019690:	57                   	push   edi
c0019691:	e8 4e 72 fe ff       	call   c00008e4 <strcmp>
c0019696:	83 c4 10             	add    esp,0x10
c0019699:	85 c0                	test   eax,eax
c001969b:	75 0f                	jne    c00196ac <CPU::detectFeatures()+0x32e>
c001969d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196a7:	e9 a9 00 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00196ac:	50                   	push   eax
c00196ad:	50                   	push   eax
c00196ae:	68 0d c2 02 c0       	push   0xc002c20d
c00196b3:	57                   	push   edi
c00196b4:	e8 2b 72 fe ff       	call   c00008e4 <strcmp>
c00196b9:	83 c4 10             	add    esp,0x10
c00196bc:	85 c0                	test   eax,eax
c00196be:	75 0f                	jne    c00196cf <CPU::detectFeatures()+0x351>
c00196c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00196ca:	e9 86 00 00 00       	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00196cf:	50                   	push   eax
c00196d0:	50                   	push   eax
c00196d1:	68 1a c2 02 c0       	push   0xc002c21a
c00196d6:	57                   	push   edi
c00196d7:	e8 08 72 fe ff       	call   c00008e4 <strcmp>
c00196dc:	83 c4 10             	add    esp,0x10
c00196df:	85 c0                	test   eax,eax
c00196e1:	75 0c                	jne    c00196ef <CPU::detectFeatures()+0x371>
c00196e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00196ed:	eb 66                	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c00196ef:	50                   	push   eax
c00196f0:	50                   	push   eax
c00196f1:	68 27 c2 02 c0       	push   0xc002c227
c00196f6:	57                   	push   edi
c00196f7:	e8 e8 71 fe ff       	call   c00008e4 <strcmp>
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	85 c0                	test   eax,eax
c0019701:	75 0c                	jne    c001970f <CPU::detectFeatures()+0x391>
c0019703:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001970d:	eb 46                	jmp    c0019755 <CPU::detectFeatures()+0x3d7>
c001970f:	50                   	push   eax
c0019710:	50                   	push   eax
c0019711:	68 34 c2 02 c0       	push   0xc002c234
c0019716:	57                   	push   edi
c0019717:	e8 c8 71 fe ff       	call   c00008e4 <strcmp>
c001971c:	83 c4 10             	add    esp,0x10
c001971f:	85 c0                	test   eax,eax
c0019721:	74 e0                	je     c0019703 <CPU::detectFeatures()+0x385>
c0019723:	50                   	push   eax
c0019724:	50                   	push   eax
c0019725:	68 41 c2 02 c0       	push   0xc002c241
c001972a:	57                   	push   edi
c001972b:	e8 b4 71 fe ff       	call   c00008e4 <strcmp>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	85 c0                	test   eax,eax
c0019735:	74 cc                	je     c0019703 <CPU::detectFeatures()+0x385>
c0019737:	51                   	push   ecx
c0019738:	51                   	push   ecx
c0019739:	68 4e c2 02 c0       	push   0xc002c24e
c001973e:	57                   	push   edi
c001973f:	e8 a0 71 fe ff       	call   c00008e4 <strcmp>
c0019744:	83 c4 10             	add    esp,0x10
c0019747:	85 c0                	test   eax,eax
c0019749:	74 b8                	je     c0019703 <CPU::detectFeatures()+0x385>
c001974b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019755:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001975a:	0f 86 be 00 00 00    	jbe    c001981e <CPU::detectFeatures()+0x4a0>
c0019760:	83 ec 0c             	sub    esp,0xc
c0019763:	68 80 00 00 00       	push   0x80
c0019768:	e8 ab f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001976d:	83 e0 01             	and    eax,0x1
c0019770:	c1 e0 06             	shl    eax,0x6
c0019773:	88 c2                	mov    dl,al
c0019775:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001977b:	83 e0 bf             	and    eax,0xffffffbf
c001977e:	09 d0                	or     eax,edx
c0019780:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019786:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001978d:	e8 86 f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019792:	83 e0 01             	and    eax,0x1
c0019795:	c1 e0 04             	shl    eax,0x4
c0019798:	88 c2                	mov    dl,al
c001979a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197a0:	83 e0 ef             	and    eax,0xffffffef
c00197a3:	09 d0                	or     eax,edx
c00197a5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00197b2:	e8 61 f8 ff ff       	call   c0019018 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197b7:	c1 e0 07             	shl    eax,0x7
c00197ba:	88 c2                	mov    dl,al
c00197bc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197c2:	83 e0 7f             	and    eax,0x7f
c00197c5:	09 d0                	or     eax,edx
c00197c7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00197d4:	e8 6d f8 ff ff       	call   c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00197d9:	83 e0 01             	and    eax,0x1
c00197dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00197e3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197e9:	83 e0 f7             	and    eax,0xfffffff7
c00197ec:	09 d0                	or     eax,edx
c00197ee:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00197fb:	e8 46 f8 ff ff       	call   c0019046 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019800:	83 c4 10             	add    esp,0x10
c0019803:	83 e0 01             	and    eax,0x1
c0019806:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001980d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019813:	83 e0 fb             	and    eax,0xfffffffb
c0019816:	09 d0                	or     eax,edx
c0019818:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001981e:	83 ec 0c             	sub    esp,0xc
c0019821:	56                   	push   esi
c0019822:	55                   	push   ebp
c0019823:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019827:	57                   	push   edi
c0019828:	8d 44 24 28          	lea    eax,[esp+0x28]
c001982c:	50                   	push   eax
c001982d:	6a 01                	push   0x1
c001982f:	e8 04 f7 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019834:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019838:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001983e:	88 ca                	mov    dl,cl
c0019840:	83 e0 f0             	and    eax,0xfffffff0
c0019843:	83 e2 0f             	and    edx,0xf
c0019846:	09 d0                	or     eax,edx
c0019848:	88 ca                	mov    dl,cl
c001984a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019850:	c0 ea 04             	shr    dl,0x4
c0019853:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019857:	0f b6 c2             	movzx  eax,dl
c001985a:	83 c4 20             	add    esp,0x20
c001985d:	c1 e0 06             	shl    eax,0x6
c0019860:	89 c5                	mov    ebp,eax
c0019862:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019868:	66 25 3f c0          	and    ax,0xc03f
c001986c:	09 e8                	or     eax,ebp
c001986e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019875:	89 c8                	mov    eax,ecx
c0019877:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001987d:	c1 e8 08             	shr    eax,0x8
c0019880:	83 e2 3f             	and    edx,0x3f
c0019883:	83 e0 0f             	and    eax,0xf
c0019886:	89 c5                	mov    ebp,eax
c0019888:	c1 e5 06             	shl    ebp,0x6
c001988b:	09 d5                	or     ebp,edx
c001988d:	89 ea                	mov    edx,ebp
c001988f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019895:	88 c2                	mov    dl,al
c0019897:	c0 ea 02             	shr    dl,0x2
c001989a:	89 d5                	mov    ebp,edx
c001989c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00198a2:	83 e2 c0             	and    edx,0xffffffc0
c00198a5:	09 d5                	or     ebp,edx
c00198a7:	89 ea                	mov    edx,ebp
c00198a9:	89 cd                	mov    ebp,ecx
c00198ab:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00198b1:	c1 ed 0c             	shr    ebp,0xc
c00198b4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00198ba:	83 e5 03             	and    ebp,0x3
c00198bd:	83 e2 cf             	and    edx,0xffffffcf
c00198c0:	c1 e5 04             	shl    ebp,0x4
c00198c3:	09 d5                	or     ebp,edx
c00198c5:	3c 06                	cmp    al,0x6
c00198c7:	89 ea                	mov    edx,ebp
c00198c9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00198cf:	74 04                	je     c00198d5 <CPU::detectFeatures()+0x557>
c00198d1:	3c 0f                	cmp    al,0xf
c00198d3:	75 5c                	jne    c0019931 <CPU::detectFeatures()+0x5b3>
c00198d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00198d9:	89 cd                	mov    ebp,ecx
c00198db:	c1 ed 10             	shr    ebp,0x10
c00198de:	c1 e5 04             	shl    ebp,0x4
c00198e1:	09 ea                	or     edx,ebp
c00198e3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00198e9:	0f b6 d2             	movzx  edx,dl
c00198ec:	66 81 e5 3f c0       	and    bp,0xc03f
c00198f1:	c1 e2 06             	shl    edx,0x6
c00198f4:	09 ea                	or     edx,ebp
c00198f6:	3c 0f                	cmp    al,0xf
c00198f8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00198ff:	75 30                	jne    c0019931 <CPU::detectFeatures()+0x5b3>
c0019901:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019907:	c1 e9 14             	shr    ecx,0x14
c001990a:	83 e0 3f             	and    eax,0x3f
c001990d:	83 c1 0f             	add    ecx,0xf
c0019910:	88 ca                	mov    dl,cl
c0019912:	c0 e9 02             	shr    cl,0x2
c0019915:	c1 e2 06             	shl    edx,0x6
c0019918:	09 d0                	or     eax,edx
c001991a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019920:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019926:	83 e0 c0             	and    eax,0xffffffc0
c0019929:	09 c1                	or     ecx,eax
c001992b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019931:	83 ec 0c             	sub    esp,0xc
c0019934:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001993b:	56                   	push   esi
c001993c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019940:	50                   	push   eax
c0019941:	57                   	push   edi
c0019942:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019946:	55                   	push   ebp
c0019947:	68 00 00 00 80       	push   0x80000000
c001994c:	e8 e7 f5 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019951:	83 c4 20             	add    esp,0x20
c0019954:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001995c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019960:	76 1e                	jbe    c0019980 <CPU::detectFeatures()+0x602>
c0019962:	83 ec 0c             	sub    esp,0xc
c0019965:	56                   	push   esi
c0019966:	50                   	push   eax
c0019967:	57                   	push   edi
c0019968:	55                   	push   ebp
c0019969:	68 01 00 00 80       	push   0x80000001
c001996e:	e8 c5 f5 ff ff       	call   c0018f38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019973:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001997d:	83 c4 20             	add    esp,0x20
c0019980:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019986:	83 f8 01             	cmp    eax,0x1
c0019989:	75 6f                	jne    c00199fa <CPU::detectFeatures()+0x67c>
c001998b:	51                   	push   ecx
c001998c:	51                   	push   ecx
c001998d:	68 5a c2 02 c0       	push   0xc002c25a
c0019992:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019996:	56                   	push   esi
c0019997:	e8 bc 6e fe ff       	call   c0000858 <strcpy>
c001999c:	5f                   	pop    edi
c001999d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199a3:	5d                   	pop    ebp
c00199a4:	66 c1 e8 06          	shr    ax,0x6
c00199a8:	0f b6 c0             	movzx  eax,al
c00199ab:	50                   	push   eax
c00199ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00199b2:	c1 e8 0e             	shr    eax,0xe
c00199b5:	0f b6 c0             	movzx  eax,al
c00199b8:	50                   	push   eax
c00199b9:	e8 24 f2 ff ff       	call   c0018be2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00199be:	5a                   	pop    edx
c00199bf:	59                   	pop    ecx
c00199c0:	50                   	push   eax
c00199c1:	56                   	push   esi
c00199c2:	e8 d1 6f fe ff       	call   c0000998 <strcat>
c00199c7:	5f                   	pop    edi
c00199c8:	5d                   	pop    ebp
c00199c9:	56                   	push   esi
c00199ca:	53                   	push   ebx
c00199cb:	e8 28 ab ff ff       	call   c00144f8 <Device::setName(char const*)>
c00199d0:	58                   	pop    eax
c00199d1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00199d7:	5a                   	pop    edx
c00199d8:	68 61 c2 02 c0       	push   0xc002c261
c00199dd:	50                   	push   eax
c00199de:	e8 01 6f fe ff       	call   c00008e4 <strcmp>
c00199e3:	83 c4 10             	add    esp,0x10
c00199e6:	85 c0                	test   eax,eax
c00199e8:	0f 85 71 03 00 00    	jne    c0019d5f <CPU::detectFeatures()+0x9e1>
c00199ee:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00199f5:	e9 65 03 00 00       	jmp    c0019d5f <CPU::detectFeatures()+0x9e1>
c00199fa:	83 f8 02             	cmp    eax,0x2
c00199fd:	0f 85 b5 00 00 00    	jne    c0019ab8 <CPU::detectFeatures()+0x73a>
c0019a03:	57                   	push   edi
c0019a04:	57                   	push   edi
c0019a05:	68 73 c2 02 c0       	push   0xc002c273
c0019a0a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a0e:	56                   	push   esi
c0019a0f:	e8 44 6e fe ff       	call   c0000858 <strcpy>
c0019a14:	5d                   	pop    ebp
c0019a15:	58                   	pop    eax
c0019a16:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a1c:	66 c1 e8 06          	shr    ax,0x6
c0019a20:	0f b6 c0             	movzx  eax,al
c0019a23:	50                   	push   eax
c0019a24:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a2a:	c1 e8 0e             	shr    eax,0xe
c0019a2d:	0f b6 c0             	movzx  eax,al
c0019a30:	50                   	push   eax
c0019a31:	e8 18 f0 ff ff       	call   c0018a4e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a36:	5a                   	pop    edx
c0019a37:	59                   	pop    ecx
c0019a38:	50                   	push   eax
c0019a39:	56                   	push   esi
c0019a3a:	e8 59 6f fe ff       	call   c0000998 <strcat>
c0019a3f:	5f                   	pop    edi
c0019a40:	5d                   	pop    ebp
c0019a41:	56                   	push   esi
c0019a42:	53                   	push   ebx
c0019a43:	e8 b0 aa ff ff       	call   c00144f8 <Device::setName(char const*)>
c0019a48:	58                   	pop    eax
c0019a49:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a4f:	5a                   	pop    edx
c0019a50:	68 78 c2 02 c0       	push   0xc002c278
c0019a55:	50                   	push   eax
c0019a56:	e8 89 6e fe ff       	call   c00008e4 <strcmp>
c0019a5b:	83 c4 10             	add    esp,0x10
c0019a5e:	85 c0                	test   eax,eax
c0019a60:	75 20                	jne    c0019a82 <CPU::detectFeatures()+0x704>
c0019a62:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0019a68:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019a6e:	a8 01                	test   al,0x1
c0019a70:	74 10                	je     c0019a82 <CPU::detectFeatures()+0x704>
c0019a72:	83 e0 fe             	and    eax,0xfffffffe
c0019a75:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019a7b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019a82:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a88:	c1 e8 0e             	shr    eax,0xe
c0019a8b:	3c 05                	cmp    al,0x5
c0019a8d:	0f 85 cc 02 00 00    	jne    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019a93:	56                   	push   esi
c0019a94:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019a9a:	83 e0 0f             	and    eax,0xf
c0019a9d:	50                   	push   eax
c0019a9e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019aa4:	66 c1 e8 06          	shr    ax,0x6
c0019aa8:	0f b6 c0             	movzx  eax,al
c0019aab:	50                   	push   eax
c0019aac:	6a 05                	push   0x5
c0019aae:	e8 11 f4 ff ff       	call   c0018ec4 <CPU::AMD_K6_writeback(int, int, int)>
c0019ab3:	e9 1f 02 00 00       	jmp    c0019cd7 <CPU::detectFeatures()+0x959>
c0019ab8:	8d 50 fd             	lea    edx,[eax-0x3]
c0019abb:	83 fa 01             	cmp    edx,0x1
c0019abe:	76 09                	jbe    c0019ac9 <CPU::detectFeatures()+0x74b>
c0019ac0:	83 f8 06             	cmp    eax,0x6
c0019ac3:	0f 85 91 01 00 00    	jne    c0019c5a <CPU::detectFeatures()+0x8dc>
c0019ac9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019acf:	c1 ea 0e             	shr    edx,0xe
c0019ad2:	80 fa 05             	cmp    dl,0x5
c0019ad5:	75 7b                	jne    c0019b52 <CPU::detectFeatures()+0x7d4>
c0019ad7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019add:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019ae2:	66 81 fa 00 01       	cmp    dx,0x100
c0019ae7:	75 0c                	jne    c0019af5 <CPU::detectFeatures()+0x777>
c0019ae9:	51                   	push   ecx
c0019aea:	51                   	push   ecx
c0019aeb:	68 7f c2 02 c0       	push   0xc002c27f
c0019af0:	e9 dc 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019af5:	66 81 fa 00 02       	cmp    dx,0x200
c0019afa:	75 0c                	jne    c0019b08 <CPU::detectFeatures()+0x78a>
c0019afc:	52                   	push   edx
c0019afd:	52                   	push   edx
c0019afe:	68 92 c2 02 c0       	push   0xc002c292
c0019b03:	e9 c9 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b08:	66 81 fa 40 02       	cmp    dx,0x240
c0019b0d:	75 0c                	jne    c0019b1b <CPU::detectFeatures()+0x79d>
c0019b0f:	50                   	push   eax
c0019b10:	50                   	push   eax
c0019b11:	68 a4 c2 02 c0       	push   0xc002c2a4
c0019b16:	e9 b6 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b1b:	83 f8 06             	cmp    eax,0x6
c0019b1e:	75 0c                	jne    c0019b2c <CPU::detectFeatures()+0x7ae>
c0019b20:	50                   	push   eax
c0019b21:	50                   	push   eax
c0019b22:	68 b6 c2 02 c0       	push   0xc002c2b6
c0019b27:	e9 a5 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b2c:	83 f8 04             	cmp    eax,0x4
c0019b2f:	75 0c                	jne    c0019b3d <CPU::detectFeatures()+0x7bf>
c0019b31:	50                   	push   eax
c0019b32:	50                   	push   eax
c0019b33:	68 c2 c2 02 c0       	push   0xc002c2c2
c0019b38:	e9 94 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b3d:	83 f8 03             	cmp    eax,0x3
c0019b40:	0f 85 19 02 00 00    	jne    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019b46:	50                   	push   eax
c0019b47:	50                   	push   eax
c0019b48:	68 ca c2 02 c0       	push   0xc002c2ca
c0019b4d:	e9 7f 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b52:	80 fa 06             	cmp    dl,0x6
c0019b55:	0f 85 db 00 00 00    	jne    c0019c36 <CPU::detectFeatures()+0x8b8>
c0019b5b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b61:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b66:	66 81 fa 80 01       	cmp    dx,0x180
c0019b6b:	75 0c                	jne    c0019b79 <CPU::detectFeatures()+0x7fb>
c0019b6d:	50                   	push   eax
c0019b6e:	50                   	push   eax
c0019b6f:	68 d5 c2 02 c0       	push   0xc002c2d5
c0019b74:	e9 58 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b79:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019b7f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019b84:	75 0c                	jne    c0019b92 <CPU::detectFeatures()+0x814>
c0019b86:	50                   	push   eax
c0019b87:	50                   	push   eax
c0019b88:	68 e5 c2 02 c0       	push   0xc002c2e5
c0019b8d:	e9 3f 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019b92:	66 81 fa 40 02       	cmp    dx,0x240
c0019b97:	75 0c                	jne    c0019ba5 <CPU::detectFeatures()+0x827>
c0019b99:	55                   	push   ebp
c0019b9a:	55                   	push   ebp
c0019b9b:	68 ec c2 02 c0       	push   0xc002c2ec
c0019ba0:	e9 2c 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019ba5:	66 81 fa 80 02       	cmp    dx,0x280
c0019baa:	75 0c                	jne    c0019bb8 <CPU::detectFeatures()+0x83a>
c0019bac:	57                   	push   edi
c0019bad:	57                   	push   edi
c0019bae:	68 f5 c2 02 c0       	push   0xc002c2f5
c0019bb3:	e9 19 01 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019bb8:	66 81 fa 40 03       	cmp    dx,0x340
c0019bbd:	74 ed                	je     c0019bac <CPU::detectFeatures()+0x82e>
c0019bbf:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019bc4:	75 0c                	jne    c0019bd2 <CPU::detectFeatures()+0x854>
c0019bc6:	56                   	push   esi
c0019bc7:	56                   	push   esi
c0019bc8:	68 fc c2 02 c0       	push   0xc002c2fc
c0019bcd:	e9 ff 00 00 00       	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019bd2:	83 f8 06             	cmp    eax,0x6
c0019bd5:	0f 84 45 ff ff ff    	je     c0019b20 <CPU::detectFeatures()+0x7a2>
c0019bdb:	83 f8 04             	cmp    eax,0x4
c0019bde:	0f 84 4d ff ff ff    	je     c0019b31 <CPU::detectFeatures()+0x7b3>
c0019be4:	83 f8 03             	cmp    eax,0x3
c0019be7:	0f 85 72 01 00 00    	jne    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019bed:	51                   	push   ecx
c0019bee:	51                   	push   ecx
c0019bef:	68 05 c3 02 c0       	push   0xc002c305
c0019bf4:	53                   	push   ebx
c0019bf5:	e8 fe a8 ff ff       	call   c00144f8 <Device::setName(char const*)>
c0019bfa:	b1 c1                	mov    cl,0xc1
c0019bfc:	88 c8                	mov    al,cl
c0019bfe:	e6 22                	out    0x22,al
c0019c00:	e4 23                	in     al,0x23
c0019c02:	88 c2                	mov    dl,al
c0019c04:	88 c8                	mov    al,cl
c0019c06:	e6 22                	out    0x22,al
c0019c08:	88 d0                	mov    al,dl
c0019c0a:	83 c8 10             	or     eax,0x10
c0019c0d:	e6 23                	out    0x23,al
c0019c0f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c16:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c19:	89 d0                	mov    eax,edx
c0019c1b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c21:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c25:	40                   	inc    eax
c0019c26:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c2c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c31:	e9 a1 00 00 00       	jmp    c0019cd7 <CPU::detectFeatures()+0x959>
c0019c36:	83 f8 06             	cmp    eax,0x6
c0019c39:	0f 84 e1 fe ff ff    	je     c0019b20 <CPU::detectFeatures()+0x7a2>
c0019c3f:	83 f8 04             	cmp    eax,0x4
c0019c42:	0f 84 e9 fe ff ff    	je     c0019b31 <CPU::detectFeatures()+0x7b3>
c0019c48:	83 f8 03             	cmp    eax,0x3
c0019c4b:	0f 85 0e 01 00 00    	jne    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019c51:	52                   	push   edx
c0019c52:	52                   	push   edx
c0019c53:	68 10 c3 02 c0       	push   0xc002c310
c0019c58:	eb 77                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019c5a:	83 f8 07             	cmp    eax,0x7
c0019c5d:	75 09                	jne    c0019c68 <CPU::detectFeatures()+0x8ea>
c0019c5f:	50                   	push   eax
c0019c60:	50                   	push   eax
c0019c61:	68 1a c3 02 c0       	push   0xc002c31a
c0019c66:	eb 69                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019c68:	83 f8 0a             	cmp    eax,0xa
c0019c6b:	75 09                	jne    c0019c76 <CPU::detectFeatures()+0x8f8>
c0019c6d:	50                   	push   eax
c0019c6e:	50                   	push   eax
c0019c6f:	68 25 c3 02 c0       	push   0xc002c325
c0019c74:	eb 5b                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019c76:	83 f8 0b             	cmp    eax,0xb
c0019c79:	75 09                	jne    c0019c84 <CPU::detectFeatures()+0x906>
c0019c7b:	50                   	push   eax
c0019c7c:	50                   	push   eax
c0019c7d:	68 2d c3 02 c0       	push   0xc002c32d
c0019c82:	eb 4d                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019c84:	83 f8 08             	cmp    eax,0x8
c0019c87:	75 09                	jne    c0019c92 <CPU::detectFeatures()+0x914>
c0019c89:	50                   	push   eax
c0019c8a:	50                   	push   eax
c0019c8b:	68 36 c3 02 c0       	push   0xc002c336
c0019c90:	eb 3f                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019c92:	83 f8 09             	cmp    eax,0x9
c0019c95:	75 09                	jne    c0019ca0 <CPU::detectFeatures()+0x922>
c0019c97:	50                   	push   eax
c0019c98:	50                   	push   eax
c0019c99:	68 3e c3 02 c0       	push   0xc002c33e
c0019c9e:	eb 31                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019ca0:	83 f8 05             	cmp    eax,0x5
c0019ca3:	75 09                	jne    c0019cae <CPU::detectFeatures()+0x930>
c0019ca5:	50                   	push   eax
c0019ca6:	50                   	push   eax
c0019ca7:	68 46 c3 02 c0       	push   0xc002c346
c0019cac:	eb 23                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019cae:	83 f8 0c             	cmp    eax,0xc
c0019cb1:	75 09                	jne    c0019cbc <CPU::detectFeatures()+0x93e>
c0019cb3:	55                   	push   ebp
c0019cb4:	55                   	push   ebp
c0019cb5:	68 54 c3 02 c0       	push   0xc002c354
c0019cba:	eb 15                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019cbc:	83 f8 0d             	cmp    eax,0xd
c0019cbf:	75 09                	jne    c0019cca <CPU::detectFeatures()+0x94c>
c0019cc1:	57                   	push   edi
c0019cc2:	57                   	push   edi
c0019cc3:	68 5f c3 02 c0       	push   0xc002c35f
c0019cc8:	eb 07                	jmp    c0019cd1 <CPU::detectFeatures()+0x953>
c0019cca:	56                   	push   esi
c0019ccb:	56                   	push   esi
c0019ccc:	68 73 c3 02 c0       	push   0xc002c373
c0019cd1:	53                   	push   ebx
c0019cd2:	e8 21 a8 ff ff       	call   c00144f8 <Device::setName(char const*)>
c0019cd7:	83 c4 10             	add    esp,0x10
c0019cda:	e9 80 00 00 00       	jmp    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019cdf:	51                   	push   ecx
c0019ce0:	51                   	push   ecx
c0019ce1:	68 bf c1 02 c0       	push   0xc002c1bf
c0019ce6:	57                   	push   edi
c0019ce7:	e8 6c 6b fe ff       	call   c0000858 <strcpy>
c0019cec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019cf6:	e8 b3 65 fe ff       	call   c00002ae <is486>
c0019cfb:	83 c4 10             	add    esp,0x10
c0019cfe:	85 c0                	test   eax,eax
c0019d00:	74 2b                	je     c0019d2d <CPU::detectFeatures()+0x9af>
c0019d02:	52                   	push   edx
c0019d03:	52                   	push   edx
c0019d04:	68 7f c3 02 c0       	push   0xc002c37f
c0019d09:	53                   	push   ebx
c0019d0a:	e8 e9 a7 ff ff       	call   c00144f8 <Device::setName(char const*)>
c0019d0f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d16:	0f 20 c0             	mov    eax,cr0
c0019d19:	83 e0 14             	and    eax,0x14
c0019d1c:	83 c4 10             	add    esp,0x10
c0019d1f:	83 f8 04             	cmp    eax,0x4
c0019d22:	75 1f                	jne    c0019d43 <CPU::detectFeatures()+0x9c5>
c0019d24:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d2b:	eb 32                	jmp    c0019d5f <CPU::detectFeatures()+0x9e1>
c0019d2d:	50                   	push   eax
c0019d2e:	50                   	push   eax
c0019d2f:	68 8a c3 02 c0       	push   0xc002c38a
c0019d34:	53                   	push   ebx
c0019d35:	e8 be a7 ff ff       	call   c00144f8 <Device::setName(char const*)>
c0019d3a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019d41:	eb d3                	jmp    c0019d16 <CPU::detectFeatures()+0x998>
c0019d43:	e8 41 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019d48:	83 e0 01             	and    eax,0x1
c0019d4b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019d4e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019d54:	83 e0 fd             	and    eax,0xfffffffd
c0019d57:	09 d0                	or     eax,edx
c0019d59:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019d5f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019d66:	83 c4 4c             	add    esp,0x4c
c0019d69:	5b                   	pop    ebx
c0019d6a:	5e                   	pop    esi
c0019d6b:	5f                   	pop    edi
c0019d6c:	5d                   	pop    ebp
c0019d6d:	c3                   	ret    

c0019d6e <CPU::setupSMEP()>:
c0019d6e:	0f 20 e0             	mov    eax,cr4
c0019d71:	0d 00 00 10 00       	or     eax,0x100000
c0019d76:	0f 22 e0             	mov    cr4,eax
c0019d79:	c3                   	ret    

c0019d7a <CPU::setupUMIP()>:
c0019d7a:	0f 20 e0             	mov    eax,cr4
c0019d7d:	80 cc 08             	or     ah,0x8
c0019d80:	0f 22 e0             	mov    cr4,eax
c0019d83:	c3                   	ret    

c0019d84 <CPU::setupTSC()>:
c0019d84:	0f 20 e0             	mov    eax,cr4
c0019d87:	83 c8 04             	or     eax,0x4
c0019d8a:	0f 22 e0             	mov    cr4,eax
c0019d8d:	c3                   	ret    

c0019d8e <CPU::setupLargePages()>:
c0019d8e:	0f 20 e0             	mov    eax,cr4
c0019d91:	83 c8 10             	or     eax,0x10
c0019d94:	0f 22 e0             	mov    cr4,eax
c0019d97:	c3                   	ret    

c0019d98 <CPU::setupPAT()>:
c0019d98:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0019d9d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019da4:	74 2c                	je     c0019dd2 <CPU::setupPAT()+0x3a>
c0019da6:	53                   	push   ebx
c0019da7:	83 ec 10             	sub    esp,0x10
c0019daa:	68 77 02 00 00       	push   0x277
c0019daf:	50                   	push   eax
c0019db0:	e8 1b 51 ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c0019db5:	83 e2 f8             	and    edx,0xfffffff8
c0019db8:	83 ca 01             	or     edx,0x1
c0019dbb:	52                   	push   edx
c0019dbc:	50                   	push   eax
c0019dbd:	68 77 02 00 00       	push   0x277
c0019dc2:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0019dc8:	e8 2f 51 ff ff       	call   c000eefc <Computer::wrmsr(unsigned int, unsigned long long)>
c0019dcd:	83 c4 28             	add    esp,0x28
c0019dd0:	5b                   	pop    ebx
c0019dd1:	c3                   	ret    
c0019dd2:	c3                   	ret    
c0019dd3:	90                   	nop

c0019dd4 <CPU::setupMTRR()>:
c0019dd4:	c3                   	ret    
c0019dd5:	90                   	nop

c0019dd6 <CPU::setupGlobalPages()>:
c0019dd6:	0f 20 e0             	mov    eax,cr4
c0019dd9:	0c 80                	or     al,0x80
c0019ddb:	0f 22 e0             	mov    cr4,eax
c0019dde:	c3                   	ret    
c0019ddf:	90                   	nop

c0019de0 <CPU::allowUsermodeDataAccess()>:
c0019de0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019de4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019deb:	74 03                	je     c0019df0 <CPU::allowUsermodeDataAccess()+0x10>
c0019ded:	0f 01 cb             	stac   
c0019df0:	c3                   	ret    
c0019df1:	90                   	nop

c0019df2 <CPU::prohibitUsermodeDataAccess()>:
c0019df2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019dfd:	74 03                	je     c0019e02 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019dff:	0f 01 ca             	clac   
c0019e02:	c3                   	ret    
c0019e03:	90                   	nop

c0019e04 <CPU::setupSMAP()>:
c0019e04:	0f 20 e0             	mov    eax,cr4
c0019e07:	0d 00 00 20 00       	or     eax,0x200000
c0019e0c:	0f 22 e0             	mov    cr4,eax
c0019e0f:	eb e1                	jmp    c0019df2 <CPU::prohibitUsermodeDataAccess()>
c0019e11:	90                   	nop

c0019e12 <CPU::setupFeatures()>:
c0019e12:	83 ec 0c             	sub    esp,0xc
c0019e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e19:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e20:	74 07                	je     c0019e29 <CPU::setupFeatures()+0x17>
c0019e22:	52                   	push   edx
c0019e23:	e8 46 ff ff ff       	call   c0019d6e <CPU::setupSMEP()>
c0019e28:	58                   	pop    eax
c0019e29:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e30:	74 07                	je     c0019e39 <CPU::setupFeatures()+0x27>
c0019e32:	52                   	push   edx
c0019e33:	e8 cc ff ff ff       	call   c0019e04 <CPU::setupSMAP()>
c0019e38:	58                   	pop    eax
c0019e39:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019e40:	74 07                	je     c0019e49 <CPU::setupFeatures()+0x37>
c0019e42:	52                   	push   edx
c0019e43:	e8 32 ff ff ff       	call   c0019d7a <CPU::setupUMIP()>
c0019e48:	58                   	pop    eax
c0019e49:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019e50:	74 07                	je     c0019e59 <CPU::setupFeatures()+0x47>
c0019e52:	52                   	push   edx
c0019e53:	e8 2c ff ff ff       	call   c0019d84 <CPU::setupTSC()>
c0019e58:	58                   	pop    eax
c0019e59:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019e60:	74 07                	je     c0019e69 <CPU::setupFeatures()+0x57>
c0019e62:	52                   	push   edx
c0019e63:	e8 26 ff ff ff       	call   c0019d8e <CPU::setupLargePages()>
c0019e68:	59                   	pop    ecx
c0019e69:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019e70:	74 07                	je     c0019e79 <CPU::setupFeatures()+0x67>
c0019e72:	52                   	push   edx
c0019e73:	e8 5e ff ff ff       	call   c0019dd6 <CPU::setupGlobalPages()>
c0019e78:	58                   	pop    eax
c0019e79:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019e80:	74 0c                	je     c0019e8e <CPU::setupFeatures()+0x7c>
c0019e82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019e86:	83 c4 0c             	add    esp,0xc
c0019e89:	e9 0a ff ff ff       	jmp    c0019d98 <CPU::setupPAT()>
c0019e8e:	83 c4 0c             	add    esp,0xc
c0019e91:	c3                   	ret    

c0019e92 <CPU::open(int, int, void*)>:
c0019e92:	57                   	push   edi
c0019e93:	56                   	push   esi
c0019e94:	53                   	push   ebx
c0019e95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e9d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ea3:	83 ec 0c             	sub    esp,0xc
c0019ea6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019eac:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019eb2:	50                   	push   eax
c0019eb3:	e8 04 53 ff ff       	call   c000f1bc <GDT::setup()>
c0019eb8:	83 c4 0c             	add    esp,0xc
c0019ebb:	6a 00                	push   0x0
c0019ebd:	68 ef be ad de       	push   0xdeadbeef
c0019ec2:	57                   	push   edi
c0019ec3:	e8 84 75 ff ff       	call   c001144c <TSS::setup(unsigned long, unsigned long)>
c0019ec8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ecb:	e8 5c 75 ff ff       	call   c001142c <TSS::flush()>
c0019ed0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019ed6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019ed9:	e8 42 55 ff ff       	call   c000f420 <IDT::setup()>
c0019ede:	b8 00 04 00 00       	mov    eax,0x400
c0019ee3:	0f 23 f8             	mov    db7,eax
c0019ee6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019ef0:	e8 a1 60 ff ff       	call   c000ff96 <Phys::allocatePage()>
c0019ef5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019efb:	89 30                	mov    DWORD PTR [eax],esi
c0019efd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f03:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f06:	58                   	pop    eax
c0019f07:	5a                   	pop    edx
c0019f08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f12:	e8 d5 86 ff ff       	call   c00125ec <VAS::setCPUSpecific(unsigned long)>
c0019f17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f1a:	e8 5f f4 ff ff       	call   c001937e <CPU::detectFeatures()>
c0019f1f:	e8 2b ba ff ff       	call   c001594f <setupInterruptController()>
c0019f24:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f2a:	a1 60 ee 02 c0       	mov    eax,ds:0xc002ee60
c0019f2f:	83 e0 10             	and    eax,0x10
c0019f32:	83 f8 01             	cmp    eax,0x1
c0019f35:	19 c0                	sbb    eax,eax
c0019f37:	83 e0 46             	and    eax,0x46
c0019f3a:	83 c0 1e             	add    eax,0x1e
c0019f3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f40:	e8 62 d0 ff ff       	call   c0016fa7 <setupTimer(int)>
c0019f45:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019f4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f4e:	e8 bf fe ff ff       	call   c0019e12 <CPU::setupFeatures()>
c0019f53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f56:	e8 a7 f1 ff ff       	call   c0019102 <CPU::displayFeatures()>
c0019f5b:	83 c4 10             	add    esp,0x10
c0019f5e:	31 c0                	xor    eax,eax
c0019f60:	5b                   	pop    ebx
c0019f61:	5e                   	pop    esi
c0019f62:	5f                   	pop    edi
c0019f63:	c3                   	ret    

c0019f64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019f64:	57                   	push   edi
c0019f65:	56                   	push   esi
c0019f66:	53                   	push   ebx
c0019f67:	51                   	push   ecx
c0019f68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019f6c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019f6f:	0f 02 c0             	lar    eax,ax
c0019f72:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019f75:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019f79:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019f7c:	88 ca                	mov    dl,cl
c0019f7e:	c0 ea 06             	shr    dl,0x6
c0019f81:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019f85:	89 ca                	mov    edx,ecx
c0019f87:	66 c1 ea 03          	shr    dx,0x3
c0019f8b:	83 e2 07             	and    edx,0x7
c0019f8e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f93:	88 17                	mov    BYTE PTR [edi],dl
c0019f95:	0f 84 a6 01 00 00    	je     c001a141 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f9b:	83 e1 07             	and    ecx,0x7
c0019f9e:	80 f9 04             	cmp    cl,0x4
c0019fa1:	0f 84 98 00 00 00    	je     c001a03f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019fa7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019fac:	0f 95 c0             	setne  al
c0019faf:	80 f9 05             	cmp    cl,0x5
c0019fb2:	0f 95 c2             	setne  dl
c0019fb5:	08 c2                	or     dl,al
c0019fb7:	74 79                	je     c001a032 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019fb9:	84 c9                	test   cl,cl
c0019fbb:	75 05                	jne    c0019fc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019fbd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019fc0:	eb 3c                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fc2:	80 f9 01             	cmp    cl,0x1
c0019fc5:	75 05                	jne    c0019fcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019fc7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019fca:	eb 32                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fcc:	80 f9 02             	cmp    cl,0x2
c0019fcf:	75 05                	jne    c0019fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019fd1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019fd4:	eb 28                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fd6:	31 c0                	xor    eax,eax
c0019fd8:	80 f9 03             	cmp    cl,0x3
c0019fdb:	75 05                	jne    c0019fe2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019fdd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019fe0:	eb 1c                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fe2:	80 f9 05             	cmp    cl,0x5
c0019fe5:	75 05                	jne    c0019fec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019fe7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019fea:	eb 12                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019fec:	80 f9 06             	cmp    cl,0x6
c0019fef:	75 05                	jne    c0019ff6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019ff1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019ff4:	eb 08                	jmp    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ff6:	80 f9 07             	cmp    cl,0x7
c0019ff9:	75 03                	jne    c0019ffe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019ffb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019ffe:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a003:	75 10                	jne    c001a015 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a005:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a009:	b9 03 00 00 00       	mov    ecx,0x3
c001a00e:	01 d0                	add    eax,edx
c001a010:	e9 37 01 00 00       	jmp    c001a14c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a015:	b9 02 00 00 00       	mov    ecx,0x2
c001a01a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a01f:	0f 85 27 01 00 00    	jne    c001a14c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a025:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a028:	b9 06 00 00 00       	mov    ecx,0x6
c001a02d:	e9 1a 01 00 00       	jmp    c001a14c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a032:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a035:	b9 06 00 00 00       	mov    ecx,0x6
c001a03a:	e9 0f 01 00 00       	jmp    c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a03f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a042:	88 ca                	mov    dl,cl
c001a044:	c0 ea 06             	shr    dl,0x6
c001a047:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a04b:	89 ca                	mov    edx,ecx
c001a04d:	66 c1 ea 03          	shr    dx,0x3
c001a051:	83 e2 07             	and    edx,0x7
c001a054:	80 e1 07             	and    cl,0x7
c001a057:	75 05                	jne    c001a05e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a059:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a05c:	eb 4c                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a05e:	80 f9 01             	cmp    cl,0x1
c001a061:	75 05                	jne    c001a068 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a063:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a066:	eb 42                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a068:	80 f9 02             	cmp    cl,0x2
c001a06b:	75 05                	jne    c001a072 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a06d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a070:	eb 38                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a072:	80 f9 03             	cmp    cl,0x3
c001a075:	75 05                	jne    c001a07c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a077:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a07a:	eb 2e                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a07c:	80 f9 04             	cmp    cl,0x4
c001a07f:	75 12                	jne    c001a093 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a081:	f6 c4 60             	test   ah,0x60
c001a084:	75 08                	jne    c001a08e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a086:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a089:	8d 78 14             	lea    edi,[eax+0x14]
c001a08c:	eb 1c                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a08e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a091:	eb 17                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a093:	80 f9 05             	cmp    cl,0x5
c001a096:	75 05                	jne    c001a09d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a098:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a09b:	eb 0d                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a09d:	80 f9 06             	cmp    cl,0x6
c001a0a0:	75 05                	jne    c001a0a7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a0a2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a0a5:	eb 03                	jmp    c001a0aa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0a7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a0aa:	84 d2                	test   dl,dl
c001a0ac:	75 05                	jne    c001a0b3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a0ae:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a0b1:	eb 3c                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0b3:	80 fa 01             	cmp    dl,0x1
c001a0b6:	75 05                	jne    c001a0bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a0b8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a0bb:	eb 32                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0bd:	80 fa 02             	cmp    dl,0x2
c001a0c0:	75 05                	jne    c001a0c7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a0c2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a0c5:	eb 28                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0c7:	80 fa 03             	cmp    dl,0x3
c001a0ca:	75 05                	jne    c001a0d1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a0cc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a0cf:	eb 1e                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d1:	31 c0                	xor    eax,eax
c001a0d3:	80 fa 04             	cmp    dl,0x4
c001a0d6:	74 17                	je     c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0d8:	80 fa 05             	cmp    dl,0x5
c001a0db:	75 05                	jne    c001a0e2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a0dd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a0e0:	eb 0d                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0e2:	80 fa 06             	cmp    dl,0x6
c001a0e5:	75 05                	jne    c001a0ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a0e7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a0ea:	eb 03                	jmp    c001a0ef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a0ec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a0ef:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a0f4:	0f 94 c2             	sete   dl
c001a0f7:	80 f9 05             	cmp    cl,0x5
c001a0fa:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a0fe:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a103:	d3 e0                	shl    eax,cl
c001a105:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a109:	74 0a                	je     c001a115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a10b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a10e:	b9 07 00 00 00       	mov    ecx,0x7
c001a113:	eb 37                	jmp    c001a14c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a115:	01 f8                	add    eax,edi
c001a117:	b9 03 00 00 00       	mov    ecx,0x3
c001a11c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a121:	74 2b                	je     c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a123:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a128:	75 0d                	jne    c001a137 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a12a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a12e:	01 c8                	add    eax,ecx
c001a130:	b9 04 00 00 00       	mov    ecx,0x4
c001a135:	eb 17                	jmp    c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a137:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a13a:	b9 07 00 00 00       	mov    ecx,0x7
c001a13f:	eb 0d                	jmp    c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a141:	b9 02 00 00 00       	mov    ecx,0x2
c001a146:	b2 01                	mov    dl,0x1
c001a148:	31 c0                	xor    eax,eax
c001a14a:	eb 02                	jmp    c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a14c:	31 d2                	xor    edx,edx
c001a14e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a152:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a154:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a158:	88 11                	mov    BYTE PTR [ecx],dl
c001a15a:	5a                   	pop    edx
c001a15b:	5b                   	pop    ebx
c001a15c:	5e                   	pop    esi
c001a15d:	5f                   	pop    edi
c001a15e:	c3                   	ret    

c001a15f <Krnl::smpEntry()>:
c001a15f:	eb fe                	jmp    c001a15f <Krnl::smpEntry()>

c001a161 <Krnl::startCPU(int)>:
c001a161:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001a166:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a16d:	0f 84 36 01 00 00    	je     c001a2a9 <Krnl::startCPU(int)+0x148>
c001a173:	53                   	push   ebx
c001a174:	83 ec 10             	sub    esp,0x10
c001a177:	fa                   	cli    
c001a178:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001a17e:	6a 1b                	push   0x1b
c001a180:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001a186:	e8 45 4d ff ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c001a18b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a190:	89 c3                	mov    ebx,eax
c001a192:	58                   	pop    eax
c001a193:	5a                   	pop    edx
c001a194:	53                   	push   ebx
c001a195:	68 c4 c3 02 c0       	push   0xc002c3c4
c001a19a:	e8 42 8d ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001a19f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1ad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1b7:	c1 e0 18             	shl    eax,0x18
c001a1ba:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a1c0:	83 c4 10             	add    esp,0x10
c001a1c3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a1c9:	09 c2                	or     edx,eax
c001a1cb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a1d1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a1d7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1dd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a1e3:	80 cd c5             	or     ch,0xc5
c001a1e6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1ec:	f3 90                	pause  
c001a1ee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1f0:	0f ba e1 0c          	bt     ecx,0xc
c001a1f4:	72 f6                	jb     c001a1ec <Krnl::startCPU(int)+0x8b>
c001a1f6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1fc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a202:	09 c1                	or     ecx,eax
c001a204:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a20a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a210:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a216:	80 cd 85             	or     ch,0x85
c001a219:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a21f:	f3 90                	pause  
c001a221:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a223:	0f ba e1 0c          	bt     ecx,0xc
c001a227:	72 f6                	jb     c001a21f <Krnl::startCPU(int)+0xbe>
c001a229:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a233:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a239:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a23f:	09 c1                	or     ecx,eax
c001a241:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a247:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a24d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a253:	81 c9 02 06 00 00    	or     ecx,0x602
c001a259:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a25f:	f3 90                	pause  
c001a261:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a263:	0f ba e1 0c          	bt     ecx,0xc
c001a267:	72 f6                	jb     c001a25f <Krnl::startCPU(int)+0xfe>
c001a269:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a273:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a279:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a27f:	09 c8                	or     eax,ecx
c001a281:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a287:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a28d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a292:	0d 02 06 00 00       	or     eax,0x602
c001a297:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a29d:	f3 90                	pause  
c001a29f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a2a1:	0f ba e0 0c          	bt     eax,0xc
c001a2a5:	72 f6                	jb     c001a29d <Krnl::startCPU(int)+0x13c>
c001a2a7:	eb fe                	jmp    c001a2a7 <Krnl::startCPU(int)+0x146>
c001a2a9:	c3                   	ret    

c001a2aa <Krnl::startCPUs()>:
c001a2aa:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001a2af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a2b5:	88 c2                	mov    dl,al
c001a2b7:	83 e2 0a             	and    edx,0xa
c001a2ba:	80 fa 0a             	cmp    dl,0xa
c001a2bd:	75 09                	jne    c001a2c8 <Krnl::startCPUs()+0x1e>
c001a2bf:	a8 01                	test   al,0x1
c001a2c1:	74 05                	je     c001a2c8 <Krnl::startCPUs()+0x1e>
c001a2c3:	e9 d3 5e fe ff       	jmp    c000019b <prepareTramp>
c001a2c8:	c3                   	ret    
c001a2c9:	90                   	nop

c001a2ca <EnvVarContainer::getEnv(char const*)>:
c001a2ca:	57                   	push   edi
c001a2cb:	56                   	push   esi
c001a2cc:	53                   	push   ebx
c001a2cd:	31 db                	xor    ebx,ebx
c001a2cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a2d3:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a2d5:	7e 2b                	jle    c001a302 <EnvVarContainer::getEnv(char const*)+0x38>
c001a2d7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a2de:	50                   	push   eax
c001a2df:	50                   	push   eax
c001a2e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a2e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a2ea:	e8 f5 65 fe ff       	call   c00008e4 <strcmp>
c001a2ef:	83 c4 10             	add    esp,0x10
c001a2f2:	85 c0                	test   eax,eax
c001a2f4:	75 09                	jne    c001a2ff <EnvVarContainer::getEnv(char const*)+0x35>
c001a2f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a2f9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a2fd:	eb 05                	jmp    c001a304 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a2ff:	43                   	inc    ebx
c001a300:	eb d1                	jmp    c001a2d3 <EnvVarContainer::getEnv(char const*)+0x9>
c001a302:	31 c0                	xor    eax,eax
c001a304:	5b                   	pop    ebx
c001a305:	5e                   	pop    esi
c001a306:	5f                   	pop    edi
c001a307:	c3                   	ret    

c001a308 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a308:	57                   	push   edi
c001a309:	56                   	push   esi
c001a30a:	53                   	push   ebx
c001a30b:	83 ec 1c             	sub    esp,0x1c
c001a30e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a312:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a316:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a31a:	57                   	push   edi
c001a31b:	e8 98 64 fe ff       	call   c00007b8 <strlen>
c001a320:	40                   	inc    eax
c001a321:	89 04 24             	mov    DWORD PTR [esp],eax
c001a324:	e8 01 56 ff ff       	call   c000f92a <malloc>
c001a329:	89 34 24             	mov    DWORD PTR [esp],esi
c001a32c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a330:	e8 83 64 fe ff       	call   c00007b8 <strlen>
c001a335:	40                   	inc    eax
c001a336:	89 04 24             	mov    DWORD PTR [esp],eax
c001a339:	e8 ec 55 ff ff       	call   c000f92a <malloc>
c001a33e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a341:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a345:	e8 6e 64 fe ff       	call   c00007b8 <strlen>
c001a34a:	83 c4 0c             	add    esp,0xc
c001a34d:	40                   	inc    eax
c001a34e:	50                   	push   eax
c001a34f:	6a 00                	push   0x0
c001a351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a355:	e8 42 64 fe ff       	call   c000079c <memset>
c001a35a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a35d:	e8 56 64 fe ff       	call   c00007b8 <strlen>
c001a362:	83 c4 0c             	add    esp,0xc
c001a365:	40                   	inc    eax
c001a366:	50                   	push   eax
c001a367:	57                   	push   edi
c001a368:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a36c:	e8 f7 63 fe ff       	call   c0000768 <memcpy>
c001a371:	89 34 24             	mov    DWORD PTR [esp],esi
c001a374:	e8 3f 64 fe ff       	call   c00007b8 <strlen>
c001a379:	83 c4 0c             	add    esp,0xc
c001a37c:	40                   	inc    eax
c001a37d:	50                   	push   eax
c001a37e:	6a 00                	push   0x0
c001a380:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a384:	e8 13 64 fe ff       	call   c000079c <memset>
c001a389:	89 34 24             	mov    DWORD PTR [esp],esi
c001a38c:	e8 27 64 fe ff       	call   c00007b8 <strlen>
c001a391:	83 c4 0c             	add    esp,0xc
c001a394:	40                   	inc    eax
c001a395:	50                   	push   eax
c001a396:	56                   	push   esi
c001a397:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a39b:	e8 c8 63 fe ff       	call   c0000768 <memcpy>
c001a3a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a3a2:	40                   	inc    eax
c001a3a3:	89 03                	mov    DWORD PTR [ebx],eax
c001a3a5:	c1 e0 03             	shl    eax,0x3
c001a3a8:	5a                   	pop    edx
c001a3a9:	59                   	pop    ecx
c001a3aa:	50                   	push   eax
c001a3ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a3ae:	e8 63 55 ff ff       	call   c000f916 <realloc>
c001a3b3:	83 c4 0c             	add    esp,0xc
c001a3b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a3b9:	6a 08                	push   0x8
c001a3bb:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a3bf:	52                   	push   edx
c001a3c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a3c2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a3c6:	50                   	push   eax
c001a3c7:	e8 9c 63 fe ff       	call   c0000768 <memcpy>
c001a3cc:	83 c4 20             	add    esp,0x20
c001a3cf:	5b                   	pop    ebx
c001a3d0:	5e                   	pop    esi
c001a3d1:	5f                   	pop    edi
c001a3d2:	c3                   	ret    
c001a3d3:	90                   	nop

c001a3d4 <EnvVarContainer::deleteEnv(char const*)>:
c001a3d4:	c3                   	ret    
c001a3d5:	90                   	nop

c001a3d6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a3d6:	55                   	push   ebp
c001a3d7:	57                   	push   edi
c001a3d8:	56                   	push   esi
c001a3d9:	53                   	push   ebx
c001a3da:	81 ec 38 01 00 00    	sub    esp,0x138
c001a3e0:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a3e7:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a3ee:	68 14 01 00 00       	push   0x114
c001a3f3:	e8 32 55 ff ff       	call   c000f92a <malloc>
c001a3f8:	83 c4 0c             	add    esp,0xc
c001a3fb:	89 c7                	mov    edi,eax
c001a3fd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a400:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a407:	50                   	push   eax
c001a408:	e8 33 90 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001a40d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a410:	e8 fd 92 ff ff       	call   c0013712 <File::exists()>
c001a415:	83 c4 10             	add    esp,0x10
c001a418:	84 c0                	test   al,al
c001a41a:	75 31                	jne    c001a44d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a41c:	51                   	push   ecx
c001a41d:	51                   	push   ecx
c001a41e:	6a 12                	push   0x12
c001a420:	57                   	push   edi
c001a421:	e8 7e 90 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001a426:	8b 07                	mov    eax,DWORD PTR [edi]
c001a428:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a42b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a42e:	e8 85 63 fe ff       	call   c00007b8 <strlen>
c001a433:	5a                   	pop    edx
c001a434:	31 d2                	xor    edx,edx
c001a436:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a43a:	51                   	push   ecx
c001a43b:	55                   	push   ebp
c001a43c:	52                   	push   edx
c001a43d:	50                   	push   eax
c001a43e:	57                   	push   edi
c001a43f:	ff d3                	call   ebx
c001a441:	83 c4 14             	add    esp,0x14
c001a444:	57                   	push   edi
c001a445:	e8 b8 90 ff ff       	call   c0013502 <File::close()>
c001a44a:	83 c4 10             	add    esp,0x10
c001a44d:	31 db                	xor    ebx,ebx
c001a44f:	50                   	push   eax
c001a450:	31 ed                	xor    ebp,ebp
c001a452:	68 00 01 00 00       	push   0x100
c001a457:	6a 00                	push   0x0
c001a459:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a45d:	50                   	push   eax
c001a45e:	e8 39 63 fe ff       	call   c000079c <memset>
c001a463:	58                   	pop    eax
c001a464:	5a                   	pop    edx
c001a465:	6a 01                	push   0x1
c001a467:	57                   	push   edi
c001a468:	e8 37 90 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	83 ec 0c             	sub    esp,0xc
c001a473:	8b 07                	mov    eax,DWORD PTR [edi]
c001a475:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a479:	51                   	push   ecx
c001a47a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a47e:	52                   	push   edx
c001a47f:	6a 00                	push   0x0
c001a481:	6a 01                	push   0x1
c001a483:	57                   	push   edi
c001a484:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a487:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a48b:	83 c4 20             	add    esp,0x20
c001a48e:	3c 0d                	cmp    al,0xd
c001a490:	0f 84 12 01 00 00    	je     c001a5a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a496:	85 db                	test   ebx,ebx
c001a498:	0f 84 fd 00 00 00    	je     c001a59b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a49e:	3c 0a                	cmp    al,0xa
c001a4a0:	74 13                	je     c001a4b5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4a2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a4a7:	74 0c                	je     c001a4b5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a4a9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a4af:	0f 8e e6 00 00 00    	jle    c001a59b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a4b5:	83 ec 0c             	sub    esp,0xc
c001a4b8:	8d 53 01             	lea    edx,[ebx+0x1]
c001a4bb:	29 dd                	sub    ebp,ebx
c001a4bd:	52                   	push   edx
c001a4be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a4c2:	e8 63 54 ff ff       	call   c000f92a <malloc>
c001a4c7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a4ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a4ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a4d1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a4d5:	e8 50 54 ff ff       	call   c000f92a <malloc>
c001a4da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a4de:	83 c4 0c             	add    esp,0xc
c001a4e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4e5:	52                   	push   edx
c001a4e6:	6a 00                	push   0x0
c001a4e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a4ec:	e8 ab 62 fe ff       	call   c000079c <memset>
c001a4f1:	83 c4 0c             	add    esp,0xc
c001a4f4:	53                   	push   ebx
c001a4f5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a4f9:	55                   	push   ebp
c001a4fa:	01 eb                	add    ebx,ebp
c001a4fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a500:	e8 63 62 fe ff       	call   c0000768 <memcpy>
c001a505:	83 c4 0c             	add    esp,0xc
c001a508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a50c:	51                   	push   ecx
c001a50d:	6a 00                	push   0x0
c001a50f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a513:	e8 84 62 fe ff       	call   c000079c <memset>
c001a518:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a51b:	e8 98 62 fe ff       	call   c00007b8 <strlen>
c001a520:	83 c4 0c             	add    esp,0xc
c001a523:	50                   	push   eax
c001a524:	53                   	push   ebx
c001a525:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a529:	e8 3a 62 fe ff       	call   c0000768 <memcpy>
c001a52e:	5b                   	pop    ebx
c001a52f:	58                   	pop    eax
c001a530:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a534:	68 d5 c3 02 c0       	push   0xc002c3d5
c001a539:	e8 a3 89 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001a53e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a540:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a543:	40                   	inc    eax
c001a544:	83 c4 10             	add    esp,0x10
c001a547:	89 06                	mov    DWORD PTR [esi],eax
c001a549:	85 d2                	test   edx,edx
c001a54b:	75 0c                	jne    c001a559 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a54d:	83 ec 0c             	sub    esp,0xc
c001a550:	6a 08                	push   0x8
c001a552:	e8 d3 53 ff ff       	call   c000f92a <malloc>
c001a557:	eb 0c                	jmp    c001a565 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a559:	c1 e0 03             	shl    eax,0x3
c001a55c:	51                   	push   ecx
c001a55d:	51                   	push   ecx
c001a55e:	50                   	push   eax
c001a55f:	52                   	push   edx
c001a560:	e8 b1 53 ff ff       	call   c000f916 <realloc>
c001a565:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a568:	83 c4 10             	add    esp,0x10
c001a56b:	31 db                	xor    ebx,ebx
c001a56d:	52                   	push   edx
c001a56e:	6a 08                	push   0x8
c001a570:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a574:	50                   	push   eax
c001a575:	8b 16                	mov    edx,DWORD PTR [esi]
c001a577:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a57a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a57e:	50                   	push   eax
c001a57f:	e8 e4 61 fe ff       	call   c0000768 <memcpy>
c001a584:	83 c4 0c             	add    esp,0xc
c001a587:	68 00 01 00 00       	push   0x100
c001a58c:	6a 00                	push   0x0
c001a58e:	55                   	push   ebp
c001a58f:	31 ed                	xor    ebp,ebp
c001a591:	e8 06 62 fe ff       	call   c000079c <memset>
c001a596:	83 c4 10             	add    esp,0x10
c001a599:	eb 0d                	jmp    c001a5a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a59b:	3c 3d                	cmp    al,0x3d
c001a59d:	74 07                	je     c001a5a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a59f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a5a3:	45                   	inc    ebp
c001a5a4:	eb 02                	jmp    c001a5a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a5a6:	89 eb                	mov    ebx,ebp
c001a5a8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5ad:	0f 85 bd fe ff ff    	jne    c001a470 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a5b3:	50                   	push   eax
c001a5b4:	50                   	push   eax
c001a5b5:	ff 36                	push   DWORD PTR [esi]
c001a5b7:	68 e3 c3 02 c0       	push   0xc002c3e3
c001a5bc:	e8 20 89 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001a5c1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a5c7:	5b                   	pop    ebx
c001a5c8:	5e                   	pop    esi
c001a5c9:	5f                   	pop    edi
c001a5ca:	5d                   	pop    ebp
c001a5cb:	c3                   	ret    

c001a5cc <EnvVarContainer::__loadSystem()>:
c001a5cc:	83 ec 10             	sub    esp,0x10
c001a5cf:	68 80 e3 02 c0       	push   0xc002e380
c001a5d4:	68 0e c4 02 c0       	push   0xc002c40e
c001a5d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5dd:	e8 f4 fd ff ff       	call   c001a3d6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a5e2:	83 c4 1c             	add    esp,0x1c
c001a5e5:	c3                   	ret    

c001a5e6 <EnvVarContainer::__loadUser()>:
c001a5e6:	c3                   	ret    
c001a5e7:	90                   	nop

c001a5e8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a5e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a5f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a5fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a5fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a601:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a608:	90                   	nop
c001a609:	c3                   	ret    

c001a60a <EnvVarContainer::~EnvVarContainer()>:
c001a60a:	83 ec 0c             	sub    esp,0xc
c001a60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a611:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a614:	85 c0                	test   eax,eax
c001a616:	74 1d                	je     c001a635 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a61c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a61e:	85 c0                	test   eax,eax
c001a620:	74 13                	je     c001a635 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a626:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a629:	83 ec 0c             	sub    esp,0xc
c001a62c:	50                   	push   eax
c001a62d:	e8 08 53 ff ff       	call   c000f93a <free>
c001a632:	83 c4 10             	add    esp,0x10
c001a635:	90                   	nop
c001a636:	83 c4 0c             	add    esp,0xc
c001a639:	c3                   	ret    

c001a63a <Krnl::getEnv(Process*, char const*)>:
c001a63a:	53                   	push   ebx
c001a63b:	83 ec 08             	sub    esp,0x8
c001a63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a642:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a646:	39 05 b0 23 03 c0    	cmp    DWORD PTR ds:0xc00323b0,eax
c001a64c:	74 04                	je     c001a652 <Krnl::getEnv(Process*, char const*)+0x18>
c001a64e:	85 c0                	test   eax,eax
c001a650:	75 0b                	jne    c001a65d <Krnl::getEnv(Process*, char const*)+0x23>
c001a652:	a1 94 19 03 c0       	mov    eax,ds:0xc0031994
c001a657:	85 c0                	test   eax,eax
c001a659:	75 19                	jne    c001a674 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a65b:	eb 27                	jmp    c001a684 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a65d:	52                   	push   edx
c001a65e:	52                   	push   edx
c001a65f:	53                   	push   ebx
c001a660:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a666:	e8 5f fc ff ff       	call   c001a2ca <EnvVarContainer::getEnv(char const*)>
c001a66b:	83 c4 10             	add    esp,0x10
c001a66e:	85 c0                	test   eax,eax
c001a670:	75 28                	jne    c001a69a <Krnl::getEnv(Process*, char const*)+0x60>
c001a672:	eb de                	jmp    c001a652 <Krnl::getEnv(Process*, char const*)+0x18>
c001a674:	52                   	push   edx
c001a675:	52                   	push   edx
c001a676:	53                   	push   ebx
c001a677:	50                   	push   eax
c001a678:	e8 4d fc ff ff       	call   c001a2ca <EnvVarContainer::getEnv(char const*)>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	85 c0                	test   eax,eax
c001a682:	75 16                	jne    c001a69a <Krnl::getEnv(Process*, char const*)+0x60>
c001a684:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a688:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a68d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a691:	83 c4 08             	add    esp,0x8
c001a694:	5b                   	pop    ebx
c001a695:	e9 30 fc ff ff       	jmp    c001a2ca <EnvVarContainer::getEnv(char const*)>
c001a69a:	83 c4 08             	add    esp,0x8
c001a69d:	5b                   	pop    ebx
c001a69e:	c3                   	ret    

c001a69f <Krnl::setEnvSystem(char const*, char const*)>:
c001a69f:	83 ec 10             	sub    esp,0x10
c001a6a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6aa:	ff 35 98 19 03 c0    	push   DWORD PTR ds:0xc0031998
c001a6b0:	e8 53 fc ff ff       	call   c001a308 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6b5:	83 c4 1c             	add    esp,0x1c
c001a6b8:	c3                   	ret    

c001a6b9 <Krnl::setEnvUser(char const*, char const*)>:
c001a6b9:	a1 94 19 03 c0       	mov    eax,ds:0xc0031994
c001a6be:	85 c0                	test   eax,eax
c001a6c0:	74 15                	je     c001a6d7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a6c2:	83 ec 10             	sub    esp,0x10
c001a6c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a6cd:	50                   	push   eax
c001a6ce:	e8 35 fc ff ff       	call   c001a308 <EnvVarContainer::setEnv(char const*, char const*)>
c001a6d3:	83 c4 1c             	add    esp,0x1c
c001a6d6:	c3                   	ret    
c001a6d7:	c3                   	ret    

c001a6d8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6dc:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a6e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a6e6:	e9 1d fc ff ff       	jmp    c001a308 <EnvVarContainer::setEnv(char const*, char const*)>

c001a6eb <Krnl::deleteEnvSystem(char const*)>:
c001a6eb:	c3                   	ret    

c001a6ec <Krnl::deleteEnvUser(char const*)>:
c001a6ec:	c3                   	ret    

c001a6ed <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a6ed:	c3                   	ret    

c001a6ee <Krnl::newProcessEnv(Process*)>:
c001a6ee:	83 ec 28             	sub    esp,0x28
c001a6f1:	6a 0c                	push   0xc
c001a6f3:	e8 32 52 ff ff       	call   c000f92a <malloc>
c001a6f8:	5a                   	pop    edx
c001a6f9:	59                   	pop    ecx
c001a6fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a6fe:	50                   	push   eax
c001a6ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a703:	e8 e0 fe ff ff       	call   c001a5e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a70c:	83 c4 2c             	add    esp,0x2c
c001a70f:	c3                   	ret    

c001a710 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a710:	56                   	push   esi
c001a711:	53                   	push   ebx
c001a712:	83 ec 10             	sub    esp,0x10
c001a715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a719:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a71f:	6a 0c                	push   0xc
c001a721:	e8 04 52 ff ff       	call   c000f92a <malloc>
c001a726:	89 c3                	mov    ebx,eax
c001a728:	58                   	pop    eax
c001a729:	5a                   	pop    edx
c001a72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a72e:	53                   	push   ebx
c001a72f:	e8 b4 fe ff ff       	call   c001a5e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a734:	8b 06                	mov    eax,DWORD PTR [esi]
c001a736:	89 03                	mov    DWORD PTR [ebx],eax
c001a738:	c1 e0 03             	shl    eax,0x3
c001a73b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a73e:	e8 e7 51 ff ff       	call   c000f92a <malloc>
c001a743:	83 c4 0c             	add    esp,0xc
c001a746:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a749:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a74b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a752:	52                   	push   edx
c001a753:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a756:	50                   	push   eax
c001a757:	e8 0c 60 fe ff       	call   c0000768 <memcpy>
c001a75c:	89 d8                	mov    eax,ebx
c001a75e:	83 c4 14             	add    esp,0x14
c001a761:	5b                   	pop    ebx
c001a762:	5e                   	pop    esi
c001a763:	c3                   	ret    

c001a764 <Krnl::loadSystemEnv()>:
c001a764:	53                   	push   ebx
c001a765:	83 ec 14             	sub    esp,0x14
c001a768:	6a 0c                	push   0xc
c001a76a:	e8 bb 51 ff ff       	call   c000f92a <malloc>
c001a76f:	89 c3                	mov    ebx,eax
c001a771:	58                   	pop    eax
c001a772:	5a                   	pop    edx
c001a773:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001a779:	53                   	push   ebx
c001a77a:	e8 69 fe ff ff       	call   c001a5e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a77f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a782:	89 1d 98 19 03 c0    	mov    DWORD PTR ds:0xc0031998,ebx
c001a788:	e8 3f fe ff ff       	call   c001a5cc <EnvVarContainer::__loadSystem()>
c001a78d:	83 c4 18             	add    esp,0x18
c001a790:	5b                   	pop    ebx
c001a791:	c3                   	ret    

c001a792 <Krnl::loadUserEnv()>:
c001a792:	53                   	push   ebx
c001a793:	83 ec 14             	sub    esp,0x14
c001a796:	6a 0c                	push   0xc
c001a798:	e8 8d 51 ff ff       	call   c000f92a <malloc>
c001a79d:	89 c3                	mov    ebx,eax
c001a79f:	58                   	pop    eax
c001a7a0:	5a                   	pop    edx
c001a7a1:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001a7a7:	53                   	push   ebx
c001a7a8:	e8 3b fe ff ff       	call   c001a5e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a7ad:	89 1d 94 19 03 c0    	mov    DWORD PTR ds:0xc0031994,ebx
c001a7b3:	83 c4 18             	add    esp,0x18
c001a7b6:	5b                   	pop    ebx
c001a7b7:	c3                   	ret    

c001a7b8 <Krnl::flushEnv()>:
c001a7b8:	c3                   	ret    

c001a7b9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a7b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7bd:	8b 15 94 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031994
c001a7c3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a7c9:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a7ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001a7d0:	03 01                	add    eax,DWORD PTR [ecx]
c001a7d2:	85 d2                	test   edx,edx
c001a7d4:	74 02                	je     c001a7d8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a7d6:	03 02                	add    eax,DWORD PTR [edx]
c001a7d8:	c3                   	ret    

c001a7d9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a7d9:	57                   	push   edi
c001a7da:	8b 0d 94 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031994
c001a7e0:	56                   	push   esi
c001a7e1:	85 c9                	test   ecx,ecx
c001a7e3:	53                   	push   ebx
c001a7e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a7e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a7ec:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a7f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a7f6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a7f8:	75 47                	jne    c001a841 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a7fa:	39 c3                	cmp    ebx,eax
c001a7fc:	7c 47                	jl     c001a845 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a7fe:	8b 15 98 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031998
c001a804:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a806:	01 c1                	add    ecx,eax
c001a808:	39 d9                	cmp    ecx,ebx
c001a80a:	7e 6c                	jle    c001a878 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a80c:	51                   	push   ecx
c001a80d:	89 d9                	mov    ecx,ebx
c001a80f:	29 c1                	sub    ecx,eax
c001a811:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a814:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a818:	53                   	push   ebx
c001a819:	68 30 c4 02 c0       	push   0xc002c430
c001a81e:	e8 be 86 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001a823:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a829:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a82b:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a830:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a833:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a837:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a83a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a83d:	89 06                	mov    DWORD PTR [esi],eax
c001a83f:	eb 51                	jmp    c001a892 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a841:	39 c3                	cmp    ebx,eax
c001a843:	7d 05                	jge    c001a84a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a845:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a848:	eb 20                	jmp    c001a86a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a84a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a84c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a84f:	39 da                	cmp    edx,ebx
c001a851:	7e 04                	jle    c001a857 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a853:	29 c3                	sub    ebx,eax
c001a855:	eb 10                	jmp    c001a867 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a857:	8b 0d 98 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031998
c001a85d:	03 11                	add    edx,DWORD PTR [ecx]
c001a85f:	39 da                	cmp    edx,ebx
c001a861:	7e 15                	jle    c001a878 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a863:	29 c3                	sub    ebx,eax
c001a865:	29 fb                	sub    ebx,edi
c001a867:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a86a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a86e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a871:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a874:	89 06                	mov    DWORD PTR [esi],eax
c001a876:	eb 1d                	jmp    c001a895 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a878:	83 ec 0c             	sub    esp,0xc
c001a87b:	68 44 c4 02 c0       	push   0xc002c444
c001a880:	e8 18 00 00 00       	call   c001a89d <Krnl::panic(char const*)>
c001a885:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a88b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a892:	83 c4 10             	add    esp,0x10
c001a895:	89 f0                	mov    eax,esi
c001a897:	5b                   	pop    ebx
c001a898:	5e                   	pop    esi
c001a899:	5f                   	pop    edi
c001a89a:	c2 04 00             	ret    0x4

c001a89d <Krnl::panic(char const*)>:
c001a89d:	55                   	push   ebp
c001a89e:	89 e5                	mov    ebp,esp
c001a8a0:	53                   	push   ebx
c001a8a1:	83 ec 0c             	sub    esp,0xc
c001a8a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a8a7:	fa                   	cli    
c001a8a8:	c6 05 a4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a4,0x1
c001a8af:	53                   	push   ebx
c001a8b0:	c6 05 84 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd84,0x0
c001a8b7:	68 5e c4 02 c0       	push   0xc002c45e
c001a8bc:	e8 20 86 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001a8c1:	58                   	pop    eax
c001a8c2:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a8c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8cd:	e8 32 64 ff ff       	call   c0010d04 <setActiveTerminal(VgaText*)>
c001a8d2:	83 c4 0c             	add    esp,0xc
c001a8d5:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a8da:	6a 01                	push   0x1
c001a8dc:	6a 0f                	push   0xf
c001a8de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8e4:	e8 b9 5e ff ff       	call   c00107a2 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a8e9:	58                   	pop    eax
c001a8ea:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a8ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8f5:	e8 50 66 ff ff       	call   c0010f4a <VgaText::clearScreen()>
c001a8fa:	58                   	pop    eax
c001a8fb:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a900:	5a                   	pop    edx
c001a901:	68 77 c4 02 c0       	push   0xc002c477
c001a906:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a90c:	e8 7f 67 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a911:	59                   	pop    ecx
c001a912:	58                   	pop    eax
c001a913:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a918:	68 1c c5 02 c0       	push   0xc002c51c
c001a91d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a923:	e8 68 67 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a928:	58                   	pop    eax
c001a929:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a92e:	5a                   	pop    edx
c001a92f:	68 93 c4 02 c0       	push   0xc002c493
c001a934:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a93a:	e8 51 67 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a93f:	59                   	pop    ecx
c001a940:	58                   	pop    eax
c001a941:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a946:	53                   	push   ebx
c001a947:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94d:	e8 3e 67 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a952:	58                   	pop    eax
c001a953:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a958:	5a                   	pop    edx
c001a959:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a95e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a964:	e8 27 67 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a969:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c001a96e:	83 c4 10             	add    esp,0x10
c001a971:	85 c0                	test   eax,eax
c001a973:	74 02                	je     c001a977 <Krnl::panic(char const*)+0xda>
c001a975:	ff d0                	call   eax
c001a977:	83 ec 0c             	sub    esp,0xc
c001a97a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a97d:	e8 e3 30 00 00       	call   c001da65 <Thr::getDriverNameFromAddress(unsigned long)>
c001a982:	83 c4 10             	add    esp,0x10
c001a985:	89 c3                	mov    ebx,eax
c001a987:	85 c0                	test   eax,eax
c001a989:	0f 84 50 02 00 00    	je     c001abdf <Krnl::panic(char const*)+0x342>
c001a98f:	83 ec 08             	sub    esp,0x8
c001a992:	8b 15 b0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323b0
c001a998:	68 58 c5 02 c0       	push   0xc002c558
c001a99d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9a3:	e8 e8 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a9a8:	58                   	pop    eax
c001a9a9:	5a                   	pop    edx
c001a9aa:	8b 15 b0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323b0
c001a9b0:	68 93 c4 02 c0       	push   0xc002c493
c001a9b5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9bb:	e8 d0 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a9c0:	59                   	pop    ecx
c001a9c1:	58                   	pop    eax
c001a9c2:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a9c7:	53                   	push   ebx
c001a9c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9ce:	e8 bd 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a9d3:	83 c4 10             	add    esp,0x10
c001a9d6:	83 ec 08             	sub    esp,0x8
c001a9d9:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a9de:	68 b2 c4 02 c0       	push   0xc002c4b2
c001a9e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9e9:	e8 a2 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001a9ee:	58                   	pop    eax
c001a9ef:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a9f4:	5a                   	pop    edx
c001a9f5:	68 b0 c5 02 c0       	push   0xc002c5b0
c001a9fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa00:	e8 8b 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aa05:	59                   	pop    ecx
c001aa06:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa0b:	5b                   	pop    ebx
c001aa0c:	68 f0 c5 02 c0       	push   0xc002c5f0
c001aa11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa17:	e8 74 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aa1c:	58                   	pop    eax
c001aa1d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa22:	5a                   	pop    edx
c001aa23:	68 9e c4 02 c0       	push   0xc002c49e
c001aa28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2e:	e8 5d 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aa33:	59                   	pop    ecx
c001aa34:	5b                   	pop    ebx
c001aa35:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa38:	68 b6 c4 02 c0       	push   0xc002c4b6
c001aa3d:	e8 9f 84 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001aa42:	58                   	pop    eax
c001aa43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa46:	5a                   	pop    edx
c001aa47:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa4a:	68 bf c4 02 c0       	push   0xc002c4bf
c001aa4f:	e8 8d 84 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001aa54:	59                   	pop    ecx
c001aa55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aa58:	5b                   	pop    ebx
c001aa59:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa5b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aa5e:	68 c8 c4 02 c0       	push   0xc002c4c8
c001aa63:	e8 79 84 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001aa68:	58                   	pop    eax
c001aa69:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa6e:	5a                   	pop    edx
c001aa6f:	68 34 c6 02 c0       	push   0xc002c634
c001aa74:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7a:	e8 11 66 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aa7f:	59                   	pop    ecx
c001aa80:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa85:	5b                   	pop    ebx
c001aa86:	68 d1 c4 02 c0       	push   0xc002c4d1
c001aa8b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa91:	e8 fa 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aa96:	0f 20 c0             	mov    eax,cr0
c001aa99:	5a                   	pop    edx
c001aa9a:	59                   	pop    ecx
c001aa9b:	50                   	push   eax
c001aa9c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aaa1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa7:	e8 0a 66 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001aaac:	5b                   	pop    ebx
c001aaad:	58                   	pop    eax
c001aaae:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aab3:	68 db c4 02 c0       	push   0xc002c4db
c001aab8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aabe:	e8 cd 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aac3:	0f 20 d0             	mov    eax,cr2
c001aac6:	5a                   	pop    edx
c001aac7:	59                   	pop    ecx
c001aac8:	50                   	push   eax
c001aac9:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aace:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad4:	e8 dd 65 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001aad9:	5b                   	pop    ebx
c001aada:	58                   	pop    eax
c001aadb:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aae0:	68 e5 c4 02 c0       	push   0xc002c4e5
c001aae5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaeb:	e8 a0 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aaf0:	0f 20 d8             	mov    eax,cr3
c001aaf3:	5a                   	pop    edx
c001aaf4:	59                   	pop    ecx
c001aaf5:	50                   	push   eax
c001aaf6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aafb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab01:	e8 b0 65 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001ab06:	5b                   	pop    ebx
c001ab07:	58                   	pop    eax
c001ab08:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab0d:	68 f8 c4 02 c0       	push   0xc002c4f8
c001ab12:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab18:	e8 73 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001ab1d:	0f 20 e0             	mov    eax,cr4
c001ab20:	5a                   	pop    edx
c001ab21:	59                   	pop    ecx
c001ab22:	50                   	push   eax
c001ab23:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab28:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab2e:	e8 83 65 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001ab33:	5b                   	pop    ebx
c001ab34:	58                   	pop    eax
c001ab35:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab3a:	68 02 c5 02 c0       	push   0xc002c502
c001ab3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab45:	e8 46 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001ab4a:	5a                   	pop    edx
c001ab4b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab50:	59                   	pop    ecx
c001ab51:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab57:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001ab5a:	50                   	push   eax
c001ab5b:	e8 56 65 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001ab60:	5b                   	pop    ebx
c001ab61:	58                   	pop    eax
c001ab62:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab67:	68 19 c5 02 c0       	push   0xc002c519
c001ab6c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab72:	e8 19 65 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001ab77:	5a                   	pop    edx
c001ab78:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab7d:	59                   	pop    ecx
c001ab7e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab87:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab8a:	50                   	push   eax
c001ab8b:	e8 26 65 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001ab90:	5b                   	pop    ebx
c001ab91:	58                   	pop    eax
c001ab92:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab97:	68 19 c5 02 c0       	push   0xc002c519
c001ab9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aba2:	e8 e9 64 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001aba7:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001abac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abb5:	8b 12                	mov    edx,DWORD PTR [edx]
c001abb7:	59                   	pop    ecx
c001abb8:	5b                   	pop    ebx
c001abb9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abbc:	50                   	push   eax
c001abbd:	e8 f4 64 ff ff       	call   c00110b6 <VgaText::putx(unsigned int)>
c001abc2:	83 c4 10             	add    esp,0x10
c001abc5:	b2 fe                	mov    dl,0xfe
c001abc7:	e4 60                	in     al,0x60
c001abc9:	3c 1c                	cmp    al,0x1c
c001abcb:	74 04                	je     c001abd1 <Krnl::panic(char const*)+0x334>
c001abcd:	3c 5a                	cmp    al,0x5a
c001abcf:	75 f6                	jne    c001abc7 <Krnl::panic(char const*)+0x32a>
c001abd1:	e4 64                	in     al,0x64
c001abd3:	a8 02                	test   al,0x2
c001abd5:	75 fa                	jne    c001abd1 <Krnl::panic(char const*)+0x334>
c001abd7:	88 d0                	mov    al,dl
c001abd9:	e6 64                	out    0x64,al
c001abdb:	fa                   	cli    
c001abdc:	f4                   	hlt    
c001abdd:	eb e8                	jmp    c001abc7 <Krnl::panic(char const*)+0x32a>
c001abdf:	50                   	push   eax
c001abe0:	50                   	push   eax
c001abe1:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001abe6:	68 84 c5 02 c0       	push   0xc002c584
c001abeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abf1:	e8 9a 64 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001abf6:	58                   	pop    eax
c001abf7:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001abfc:	5a                   	pop    edx
c001abfd:	68 93 c4 02 c0       	push   0xc002c493
c001ac02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac08:	e8 83 64 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001ac0d:	59                   	pop    ecx
c001ac0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac13:	5b                   	pop    ebx
c001ac14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac17:	83 c0 0c             	add    eax,0xc
c001ac1a:	50                   	push   eax
c001ac1b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ac20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac26:	e8 65 64 ff ff       	call   c0011090 <VgaText::puts(char const*)>
c001ac2b:	83 c4 10             	add    esp,0x10
c001ac2e:	e9 a3 fd ff ff       	jmp    c001a9d6 <Krnl::panic(char const*)+0x139>

c001ac33 <Net::switchEndian16(unsigned short)>:
c001ac33:	83 ec 04             	sub    esp,0x4
c001ac36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac3a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac3e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac42:	c1 f8 08             	sar    eax,0x8
c001ac45:	89 c2                	mov    edx,eax
c001ac47:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac4b:	c1 e0 08             	shl    eax,0x8
c001ac4e:	09 d0                	or     eax,edx
c001ac50:	83 c4 04             	add    esp,0x4
c001ac53:	c3                   	ret    

c001ac54 <Net::switchEndian32(unsigned int)>:
c001ac54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac58:	c1 e8 18             	shr    eax,0x18
c001ac5b:	89 c2                	mov    edx,eax
c001ac5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac61:	c1 e0 08             	shl    eax,0x8
c001ac64:	25 00 00 ff 00       	and    eax,0xff0000
c001ac69:	09 c2                	or     edx,eax
c001ac6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac6f:	c1 e8 08             	shr    eax,0x8
c001ac72:	25 00 ff 00 00       	and    eax,0xff00
c001ac77:	09 c2                	or     edx,eax
c001ac79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac7d:	c1 e0 18             	shl    eax,0x18
c001ac80:	09 d0                	or     eax,edx
c001ac82:	c3                   	ret    

c001ac83 <Net::crc32Calc(unsigned char*, int)>:
c001ac83:	83 ec 10             	sub    esp,0x10
c001ac86:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ac8b:	75 07                	jne    c001ac94 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ac8d:	b8 00 00 00 00       	mov    eax,0x0
c001ac92:	eb 7c                	jmp    c001ad10 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac94:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001ac99:	7f 07                	jg     c001aca2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001ac9b:	b8 00 00 00 00       	mov    eax,0x0
c001aca0:	eb 6e                	jmp    c001ad10 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aca2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001acaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001acb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acb6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001acba:	7d 4e                	jge    c001ad0a <Net::crc32Calc(unsigned char*, int)+0x87>
c001acbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acc0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001acc4:	01 d0                	add    eax,edx
c001acc6:	8a 00                	mov    al,BYTE PTR [eax]
c001acc8:	0f b6 c0             	movzx  eax,al
c001accb:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001accf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acd7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001acdc:	7f 26                	jg     c001ad04 <Net::crc32Calc(unsigned char*, int)+0x81>
c001acde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ace2:	83 e0 01             	and    eax,0x1
c001ace5:	74 0d                	je     c001acf4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ace7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aceb:	d1 e8                	shr    eax,1
c001aced:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001acf2:	eb 06                	jmp    c001acfa <Net::crc32Calc(unsigned char*, int)+0x77>
c001acf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acf8:	d1 e8                	shr    eax,1
c001acfa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acfe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad02:	eb d3                	jmp    c001acd7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad08:	eb a8                	jmp    c001acb2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad0e:	f7 d0                	not    eax
c001ad10:	83 c4 10             	add    esp,0x10
c001ad13:	c3                   	ret    

c001ad14 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad14:	83 ec 1c             	sub    esp,0x1c
c001ad17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad27:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ad2c:	7f 14                	jg     c001ad42 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ad2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad32:	8d 50 01             	lea    edx,[eax+0x1]
c001ad35:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad39:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ad3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad40:	eb e5                	jmp    c001ad27 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ad42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad46:	8d 50 01             	lea    edx,[eax+0x1]
c001ad49:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad4d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ad50:	83 ec 04             	sub    esp,0x4
c001ad53:	6a 06                	push   0x6
c001ad55:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ad59:	50                   	push   eax
c001ad5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad5e:	e8 05 5a fe ff       	call   c0000768 <memcpy>
c001ad63:	83 c4 10             	add    esp,0x10
c001ad66:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad6b:	83 ec 04             	sub    esp,0x4
c001ad6e:	6a 06                	push   0x6
c001ad70:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ad74:	50                   	push   eax
c001ad75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ad79:	e8 ea 59 fe ff       	call   c0000768 <memcpy>
c001ad7e:	83 c4 10             	add    esp,0x10
c001ad81:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ad86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad8a:	0f b7 c0             	movzx  eax,ax
c001ad8d:	c1 f8 08             	sar    eax,0x8
c001ad90:	89 c1                	mov    ecx,eax
c001ad92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad96:	8d 50 01             	lea    edx,[eax+0x1]
c001ad99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ad9d:	88 ca                	mov    dl,cl
c001ad9f:	88 10                	mov    BYTE PTR [eax],dl
c001ada1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ada5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ada9:	8d 48 01             	lea    ecx,[eax+0x1]
c001adac:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001adb0:	88 10                	mov    BYTE PTR [eax],dl
c001adb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001adb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001adba:	83 ec 04             	sub    esp,0x4
c001adbd:	52                   	push   edx
c001adbe:	50                   	push   eax
c001adbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001adc3:	e8 a0 59 fe ff       	call   c0000768 <memcpy>
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adcf:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001add3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001add7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001addb:	83 ec 08             	sub    esp,0x8
c001adde:	50                   	push   eax
c001addf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ade3:	e8 9b fe ff ff       	call   c001ac83 <Net::crc32Calc(unsigned char*, int)>
c001ade8:	83 c4 10             	add    esp,0x10
c001adeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf3:	c1 e8 18             	shr    eax,0x18
c001adf6:	89 c1                	mov    ecx,eax
c001adf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001adfc:	8d 50 01             	lea    edx,[eax+0x1]
c001adff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae03:	88 ca                	mov    dl,cl
c001ae05:	88 10                	mov    BYTE PTR [eax],dl
c001ae07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae0b:	c1 e8 10             	shr    eax,0x10
c001ae0e:	89 c1                	mov    ecx,eax
c001ae10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae14:	8d 50 01             	lea    edx,[eax+0x1]
c001ae17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae1b:	88 ca                	mov    dl,cl
c001ae1d:	88 10                	mov    BYTE PTR [eax],dl
c001ae1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae23:	c1 e8 08             	shr    eax,0x8
c001ae26:	89 c1                	mov    ecx,eax
c001ae28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ae2f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae33:	88 ca                	mov    dl,cl
c001ae35:	88 10                	mov    BYTE PTR [eax],dl
c001ae37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ae3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ae3e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ae42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ae46:	88 10                	mov    BYTE PTR [eax],dl
c001ae48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae4c:	83 c4 1c             	add    esp,0x1c
c001ae4f:	c3                   	ret    

c001ae50 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae50:	83 ec 2c             	sub    esp,0x2c
c001ae53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae5b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ae60:	83 ec 04             	sub    esp,0x4
c001ae63:	6a 06                	push   0x6
c001ae65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae6d:	83 c0 0e             	add    eax,0xe
c001ae70:	50                   	push   eax
c001ae71:	e8 f2 58 fe ff       	call   c0000768 <memcpy>
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae7e:	83 ec 04             	sub    esp,0x4
c001ae81:	6a 06                	push   0x6
c001ae83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ae8b:	83 c0 08             	add    eax,0x8
c001ae8e:	50                   	push   eax
c001ae8f:	e8 d4 58 fe ff       	call   c0000768 <memcpy>
c001ae94:	83 c4 10             	add    esp,0x10
c001ae97:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ae9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aea0:	8d 50 01             	lea    edx,[eax+0x1]
c001aea3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aea7:	8a 00                	mov    al,BYTE PTR [eax]
c001aea9:	0f b6 c0             	movzx  eax,al
c001aeac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001aeb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aeb5:	8d 50 01             	lea    edx,[eax+0x1]
c001aeb8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aebc:	8a 00                	mov    al,BYTE PTR [eax]
c001aebe:	0f b6 c0             	movzx  eax,al
c001aec1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001aec6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001aecb:	c1 e0 08             	shl    eax,0x8
c001aece:	89 c2                	mov    edx,eax
c001aed0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aed4:	09 d0                	or     eax,edx
c001aed6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001aeda:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aede:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001aee3:	75 3a                	jne    c001af1f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001aee5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aee9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aeec:	66 3d dc 05          	cmp    ax,0x5dc
c001aef0:	77 10                	ja     c001af02 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001aef2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aef6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aef9:	0f b7 c0             	movzx  eax,ax
c001aefc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af00:	eb 1d                	jmp    c001af1f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001af02:	83 ec 0c             	sub    esp,0xc
c001af05:	68 5c c6 02 c0       	push   0xc002c65c
c001af0a:	e8 d2 7f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001af0f:	83 c4 10             	add    esp,0x10
c001af12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af16:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af1a:	e9 c0 00 00 00       	jmp    c001afdf <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001af1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001af23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af27:	8b 00                	mov    eax,DWORD PTR [eax]
c001af29:	83 ec 04             	sub    esp,0x4
c001af2c:	52                   	push   edx
c001af2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af31:	50                   	push   eax
c001af32:	e8 31 58 fe ff       	call   c0000768 <memcpy>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af3e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001af42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af46:	8d 50 01             	lea    edx,[eax+0x1]
c001af49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af4d:	8a 00                	mov    al,BYTE PTR [eax]
c001af4f:	0f b6 c0             	movzx  eax,al
c001af52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001af56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af5a:	8d 50 01             	lea    edx,[eax+0x1]
c001af5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af61:	8a 00                	mov    al,BYTE PTR [eax]
c001af63:	0f b6 c0             	movzx  eax,al
c001af66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001af6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af6e:	8d 50 01             	lea    edx,[eax+0x1]
c001af71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af75:	8a 00                	mov    al,BYTE PTR [eax]
c001af77:	0f b6 c0             	movzx  eax,al
c001af7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001af82:	8d 50 01             	lea    edx,[eax+0x1]
c001af85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001af89:	8a 00                	mov    al,BYTE PTR [eax]
c001af8b:	0f b6 c0             	movzx  eax,al
c001af8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001af96:	c1 e0 18             	shl    eax,0x18
c001af99:	89 c2                	mov    edx,eax
c001af9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af9f:	c1 e0 10             	shl    eax,0x10
c001afa2:	09 c2                	or     edx,eax
c001afa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afa8:	c1 e0 08             	shl    eax,0x8
c001afab:	09 d0                	or     eax,edx
c001afad:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001afb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001afb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afb9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001afbd:	83 e8 04             	sub    eax,0x4
c001afc0:	83 ec 08             	sub    esp,0x8
c001afc3:	50                   	push   eax
c001afc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001afc8:	e8 b6 fc ff ff       	call   c001ac83 <Net::crc32Calc(unsigned char*, int)>
c001afcd:	83 c4 10             	add    esp,0x10
c001afd0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001afd4:	0f 94 c2             	sete   dl
c001afd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afdb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001afde:	90                   	nop
c001afdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afe3:	83 c4 2c             	add    esp,0x2c
c001afe6:	c2 04 00             	ret    0x4

c001afe9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001afe9:	55                   	push   ebp
c001afea:	57                   	push   edi
c001afeb:	56                   	push   esi
c001afec:	53                   	push   ebx
c001afed:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aff3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001affa:	8a 1e                	mov    bl,BYTE PTR [esi]
c001affc:	8d 6e 01             	lea    ebp,[esi+0x1]
c001afff:	80 fb 40             	cmp    bl,0x40
c001b002:	75 1b                	jne    c001b01f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b004:	8a 16                	mov    dl,BYTE PTR [esi]
c001b006:	84 d2                	test   dl,dl
c001b008:	0f 84 f1 00 00 00    	je     c001b0ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b00e:	8d 46 01             	lea    eax,[esi+0x1]
c001b011:	80 fa 3a             	cmp    dl,0x3a
c001b014:	74 04                	je     c001b01a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b016:	89 c6                	mov    esi,eax
c001b018:	eb ea                	jmp    c001b004 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b01a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b01d:	89 c6                	mov    esi,eax
c001b01f:	50                   	push   eax
c001b020:	6a 40                	push   0x40
c001b022:	6a 00                	push   0x0
c001b024:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b028:	50                   	push   eax
c001b029:	e8 6e 57 fe ff       	call   c000079c <memset>
c001b02e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b035:	31 c0                	xor    eax,eax
c001b037:	83 c4 10             	add    esp,0x10
c001b03a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b03c:	84 c9                	test   cl,cl
c001b03e:	0f 84 bb 00 00 00    	je     c001b0ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b044:	3d c7 00 00 00       	cmp    eax,0xc7
c001b049:	0f 8f b0 00 00 00    	jg     c001b0ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b04f:	80 f9 0a             	cmp    cl,0xa
c001b052:	0f 85 98 00 00 00    	jne    c001b0f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b058:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b05d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b061:	a8 df                	test   al,0xdf
c001b063:	0f 94 c1             	sete   cl
c001b066:	3c 23                	cmp    al,0x23
c001b068:	0f 94 c2             	sete   dl
c001b06b:	08 d1                	or     cl,dl
c001b06d:	75 4a                	jne    c001b0b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b06f:	8d 50 f7             	lea    edx,[eax-0x9]
c001b072:	80 fa 01             	cmp    dl,0x1
c001b075:	76 42                	jbe    c001b0b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b077:	3c 5b                	cmp    al,0x5b
c001b079:	75 42                	jne    c001b0bd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b07b:	80 fb 40             	cmp    bl,0x40
c001b07e:	75 39                	jne    c001b0b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b080:	83 ec 0c             	sub    esp,0xc
c001b083:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b087:	52                   	push   edx
c001b088:	e8 2b 57 fe ff       	call   c00007b8 <strlen>
c001b08d:	83 c4 10             	add    esp,0x10
c001b090:	83 f8 3f             	cmp    eax,0x3f
c001b093:	77 6a                	ja     c001b0ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b095:	50                   	push   eax
c001b096:	50                   	push   eax
c001b097:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b09b:	52                   	push   edx
c001b09c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0a0:	52                   	push   edx
c001b0a1:	e8 b2 57 fe ff       	call   c0000858 <strcpy>
c001b0a6:	58                   	pop    eax
c001b0a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0ab:	52                   	push   edx
c001b0ac:	e8 07 57 fe ff       	call   c00007b8 <strlen>
c001b0b1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0b6:	83 c4 10             	add    esp,0x10
c001b0b9:	31 d2                	xor    edx,edx
c001b0bb:	eb 3a                	jmp    c001b0f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0bd:	80 fb 40             	cmp    bl,0x40
c001b0c0:	74 06                	je     c001b0c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0c2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0c6:	eb 20                	jmp    c001b0e8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0c8:	50                   	push   eax
c001b0c9:	50                   	push   eax
c001b0ca:	55                   	push   ebp
c001b0cb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0cf:	50                   	push   eax
c001b0d0:	e8 0f 58 fe ff       	call   c00008e4 <strcmp>
c001b0d5:	83 c4 10             	add    esp,0x10
c001b0d8:	85 c0                	test   eax,eax
c001b0da:	75 dd                	jne    c001b0b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0dc:	eb e4                	jmp    c001b0c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0de:	8d 50 01             	lea    edx,[eax+0x1]
c001b0e1:	80 f9 3d             	cmp    cl,0x3d
c001b0e4:	74 1d                	je     c001b103 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0e6:	89 d0                	mov    eax,edx
c001b0e8:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0ea:	84 c9                	test   cl,cl
c001b0ec:	75 f0                	jne    c001b0de <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0ee:	eb 0f                	jmp    c001b0ff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0f0:	8d 50 01             	lea    edx,[eax+0x1]
c001b0f3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b0f7:	47                   	inc    edi
c001b0f8:	89 d0                	mov    eax,edx
c001b0fa:	e9 3b ff ff ff       	jmp    c001b03a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b0ff:	31 c0                	xor    eax,eax
c001b101:	eb 33                	jmp    c001b136 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b107:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b10a:	50                   	push   eax
c001b10b:	50                   	push   eax
c001b10c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b110:	50                   	push   eax
c001b111:	56                   	push   esi
c001b112:	e8 cd 57 fe ff       	call   c00008e4 <strcmp>
c001b117:	83 c4 10             	add    esp,0x10
c001b11a:	85 c0                	test   eax,eax
c001b11c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b120:	75 97                	jne    c001b0b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b122:	51                   	push   ecx
c001b123:	51                   	push   ecx
c001b124:	52                   	push   edx
c001b125:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b12c:	e8 27 57 fe ff       	call   c0000858 <strcpy>
c001b131:	83 c4 10             	add    esp,0x10
c001b134:	b0 01                	mov    al,0x1
c001b136:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b13c:	5b                   	pop    ebx
c001b13d:	5e                   	pop    esi
c001b13e:	5f                   	pop    edi
c001b13f:	5d                   	pop    ebp
c001b140:	c3                   	ret    

c001b141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b141:	57                   	push   edi
c001b142:	56                   	push   esi
c001b143:	53                   	push   ebx
c001b144:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b14a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b151:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b158:	53                   	push   ebx
c001b159:	e8 5a 56 fe ff       	call   c00007b8 <strlen>
c001b15e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b161:	89 c7                	mov    edi,eax
c001b163:	e8 50 56 fe ff       	call   c00007b8 <strlen>
c001b168:	83 c4 10             	add    esp,0x10
c001b16b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b16f:	3d ff 00 00 00       	cmp    eax,0xff
c001b174:	0f 87 d3 00 00 00    	ja     c001b24d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b17a:	57                   	push   edi
c001b17b:	57                   	push   edi
c001b17c:	56                   	push   esi
c001b17d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b181:	56                   	push   esi
c001b182:	e8 d1 56 fe ff       	call   c0000858 <strcpy>
c001b187:	58                   	pop    eax
c001b188:	5a                   	pop    edx
c001b189:	68 b1 cb 02 c0       	push   0xc002cbb1
c001b18e:	56                   	push   esi
c001b18f:	e8 04 58 fe ff       	call   c0000998 <strcat>
c001b194:	59                   	pop    ecx
c001b195:	5f                   	pop    edi
c001b196:	53                   	push   ebx
c001b197:	56                   	push   esi
c001b198:	e8 fb 57 fe ff       	call   c0000998 <strcat>
c001b19d:	58                   	pop    eax
c001b19e:	5a                   	pop    edx
c001b19f:	68 a8 c6 02 c0       	push   0xc002c6a8
c001b1a4:	56                   	push   esi
c001b1a5:	e8 ee 57 fe ff       	call   c0000998 <strcat>
c001b1aa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b1b1:	e8 74 47 ff ff       	call   c000f92a <malloc>
c001b1b6:	83 c4 0c             	add    esp,0xc
c001b1b9:	89 c3                	mov    ebx,eax
c001b1bb:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001b1c1:	56                   	push   esi
c001b1c2:	50                   	push   eax
c001b1c3:	e8 78 82 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	85 db                	test   ebx,ebx
c001b1cd:	74 7e                	je     c001b24d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1cf:	51                   	push   ecx
c001b1d0:	51                   	push   ecx
c001b1d1:	6a 01                	push   0x1
c001b1d3:	53                   	push   ebx
c001b1d4:	e8 cb 82 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	85 c0                	test   eax,eax
c001b1de:	74 08                	je     c001b1e8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1e0:	83 ec 0c             	sub    esp,0xc
c001b1e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1e5:	53                   	push   ebx
c001b1e6:	eb 5f                	jmp    c001b247 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1e8:	52                   	push   edx
c001b1e9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1ed:	50                   	push   eax
c001b1ee:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1f2:	50                   	push   eax
c001b1f3:	53                   	push   ebx
c001b1f4:	e8 57 85 ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c001b1f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b1fd:	83 c4 10             	add    esp,0x10
c001b200:	89 c1                	mov    ecx,eax
c001b202:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b206:	74 31                	je     c001b239 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b208:	83 ec 0c             	sub    esp,0xc
c001b20b:	50                   	push   eax
c001b20c:	e8 19 47 ff ff       	call   c000f92a <malloc>
c001b211:	89 c6                	mov    esi,eax
c001b213:	58                   	pop    eax
c001b214:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b216:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b21a:	52                   	push   edx
c001b21b:	56                   	push   esi
c001b21c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b220:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b224:	53                   	push   ebx
c001b225:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b228:	83 c4 20             	add    esp,0x20
c001b22b:	85 c0                	test   eax,eax
c001b22d:	75 0a                	jne    c001b239 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b22f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b233:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b237:	74 18                	je     c001b251 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b239:	83 ec 0c             	sub    esp,0xc
c001b23c:	53                   	push   ebx
c001b23d:	e8 c0 82 ff ff       	call   c0013502 <File::close()>
c001b242:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b247:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	31 c0                	xor    eax,eax
c001b24f:	eb 3b                	jmp    c001b28c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b251:	83 ec 0c             	sub    esp,0xc
c001b254:	53                   	push   ebx
c001b255:	e8 a8 82 ff ff       	call   c0013502 <File::close()>
c001b25a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b25c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b25f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b262:	83 c4 0c             	add    esp,0xc
c001b265:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b26c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b273:	56                   	push   esi
c001b274:	e8 70 fd ff ff       	call   c001afe9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b279:	89 34 24             	mov    DWORD PTR [esp],esi
c001b27c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b280:	e8 b5 46 ff ff       	call   c000f93a <free>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b28c:	81 c4 20 01 00 00    	add    esp,0x120
c001b292:	5b                   	pop    ebx
c001b293:	5e                   	pop    esi
c001b294:	5f                   	pop    edi
c001b295:	c3                   	ret    

c001b296 <Reg::getLine(char*, char*, char*)>:
c001b296:	57                   	push   edi
c001b297:	56                   	push   esi
c001b298:	53                   	push   ebx
c001b299:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b29d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2a5:	57                   	push   edi
c001b2a6:	56                   	push   esi
c001b2a7:	53                   	push   ebx
c001b2a8:	68 ad c6 02 c0       	push   0xc002c6ad
c001b2ad:	e8 8f fe ff ff       	call   c001b141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	84 c0                	test   al,al
c001b2b7:	75 10                	jne    c001b2c9 <Reg::getLine(char*, char*, char*)+0x33>
c001b2b9:	57                   	push   edi
c001b2ba:	56                   	push   esi
c001b2bb:	53                   	push   ebx
c001b2bc:	68 d2 c6 02 c0       	push   0xc002c6d2
c001b2c1:	e8 7b fe ff ff       	call   c001b141 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2c6:	83 c4 10             	add    esp,0x10
c001b2c9:	5b                   	pop    ebx
c001b2ca:	5e                   	pop    esi
c001b2cb:	5f                   	pop    edi
c001b2cc:	c3                   	ret    

c001b2cd <Reg::readInt(char*, char*, int*)>:
c001b2cd:	55                   	push   ebp
c001b2ce:	57                   	push   edi
c001b2cf:	56                   	push   esi
c001b2d0:	53                   	push   ebx
c001b2d1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2d7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2db:	57                   	push   edi
c001b2dc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2ea:	e8 a7 ff ff ff       	call   c001b296 <Reg::getLine(char*, char*, char*)>
c001b2ef:	83 c4 10             	add    esp,0x10
c001b2f2:	84 c0                	test   al,al
c001b2f4:	0f 84 b3 00 00 00    	je     c001b3ad <Reg::readInt(char*, char*, int*)+0xe0>
c001b2fa:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b2fe:	80 fa 2b             	cmp    dl,0x2b
c001b301:	74 0c                	je     c001b30f <Reg::readInt(char*, char*, int*)+0x42>
c001b303:	80 fa 2d             	cmp    dl,0x2d
c001b306:	75 0e                	jne    c001b316 <Reg::readInt(char*, char*, int*)+0x49>
c001b308:	ba 01 00 00 00       	mov    edx,0x1
c001b30d:	eb 0b                	jmp    c001b31a <Reg::readInt(char*, char*, int*)+0x4d>
c001b30f:	ba 01 00 00 00       	mov    edx,0x1
c001b314:	eb 02                	jmp    c001b318 <Reg::readInt(char*, char*, int*)+0x4b>
c001b316:	31 d2                	xor    edx,edx
c001b318:	31 c0                	xor    eax,eax
c001b31a:	be 0a 00 00 00       	mov    esi,0xa
c001b31f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b324:	75 20                	jne    c001b346 <Reg::readInt(char*, char*, int*)+0x79>
c001b326:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b32a:	80 f9 78             	cmp    cl,0x78
c001b32d:	75 0a                	jne    c001b339 <Reg::readInt(char*, char*, int*)+0x6c>
c001b32f:	83 c2 02             	add    edx,0x2
c001b332:	be 10 00 00 00       	mov    esi,0x10
c001b337:	eb 0d                	jmp    c001b346 <Reg::readInt(char*, char*, int*)+0x79>
c001b339:	80 f9 62             	cmp    cl,0x62
c001b33c:	75 08                	jne    c001b346 <Reg::readInt(char*, char*, int*)+0x79>
c001b33e:	83 c2 02             	add    edx,0x2
c001b341:	be 02 00 00 00       	mov    esi,0x2
c001b346:	01 d7                	add    edi,edx
c001b348:	31 d2                	xor    edx,edx
c001b34a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b34c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b350:	80 fb 0d             	cmp    bl,0xd
c001b353:	0f 94 c3             	sete   bl
c001b356:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b35b:	0f 94 c1             	sete   cl
c001b35e:	08 cb                	or     bl,cl
c001b360:	75 3a                	jne    c001b39c <Reg::readInt(char*, char*, int*)+0xcf>
c001b362:	0f af d6             	imul   edx,esi
c001b365:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b36a:	83 fe 10             	cmp    esi,0x10
c001b36d:	75 26                	jne    c001b395 <Reg::readInt(char*, char*, int*)+0xc8>
c001b36f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b373:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b376:	89 e9                	mov    ecx,ebp
c001b378:	80 f9 05             	cmp    cl,0x5
c001b37b:	77 06                	ja     c001b383 <Reg::readInt(char*, char*, int*)+0xb6>
c001b37d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b381:	eb 16                	jmp    c001b399 <Reg::readInt(char*, char*, int*)+0xcc>
c001b383:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b387:	83 e9 61             	sub    ecx,0x61
c001b38a:	80 f9 05             	cmp    cl,0x5
c001b38d:	77 06                	ja     c001b395 <Reg::readInt(char*, char*, int*)+0xc8>
c001b38f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b393:	eb 04                	jmp    c001b399 <Reg::readInt(char*, char*, int*)+0xcc>
c001b395:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b399:	47                   	inc    edi
c001b39a:	eb ae                	jmp    c001b34a <Reg::readInt(char*, char*, int*)+0x7d>
c001b39c:	84 c0                	test   al,al
c001b39e:	74 02                	je     c001b3a2 <Reg::readInt(char*, char*, int*)+0xd5>
c001b3a0:	f7 da                	neg    edx
c001b3a2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b3a9:	89 10                	mov    DWORD PTR [eax],edx
c001b3ab:	88 d8                	mov    al,bl
c001b3ad:	81 c4 ec 00 00 00    	add    esp,0xec
c001b3b3:	5b                   	pop    ebx
c001b3b4:	5e                   	pop    esi
c001b3b5:	5f                   	pop    edi
c001b3b6:	5d                   	pop    ebp
c001b3b7:	c3                   	ret    

c001b3b8 <Reg::readString(char*, char*, char*, int)>:
c001b3b8:	57                   	push   edi
c001b3b9:	56                   	push   esi
c001b3ba:	53                   	push   ebx
c001b3bb:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3c1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3c8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3cc:	57                   	push   edi
c001b3cd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3d4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3db:	e8 b6 fe ff ff       	call   c001b296 <Reg::getLine(char*, char*, char*)>
c001b3e0:	83 c4 10             	add    esp,0x10
c001b3e3:	89 c6                	mov    esi,eax
c001b3e5:	84 c0                	test   al,al
c001b3e7:	74 44                	je     c001b42d <Reg::readString(char*, char*, char*, int)+0x75>
c001b3e9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3f0:	31 c0                	xor    eax,eax
c001b3f2:	4a                   	dec    edx
c001b3f3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b3f6:	84 c9                	test   cl,cl
c001b3f8:	74 0f                	je     c001b409 <Reg::readString(char*, char*, char*, int)+0x51>
c001b3fa:	39 c2                	cmp    edx,eax
c001b3fc:	7e 0b                	jle    c001b409 <Reg::readString(char*, char*, char*, int)+0x51>
c001b3fe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b401:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b406:	40                   	inc    eax
c001b407:	eb ea                	jmp    c001b3f3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b409:	83 ec 0c             	sub    esp,0xc
c001b40c:	53                   	push   ebx
c001b40d:	e8 a6 53 fe ff       	call   c00007b8 <strlen>
c001b412:	83 c4 10             	add    esp,0x10
c001b415:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b41a:	75 11                	jne    c001b42d <Reg::readString(char*, char*, char*, int)+0x75>
c001b41c:	83 ec 0c             	sub    esp,0xc
c001b41f:	53                   	push   ebx
c001b420:	e8 93 53 fe ff       	call   c00007b8 <strlen>
c001b425:	83 c4 10             	add    esp,0x10
c001b428:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b42d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b433:	89 f0                	mov    eax,esi
c001b435:	5b                   	pop    ebx
c001b436:	5e                   	pop    esi
c001b437:	5f                   	pop    edi
c001b438:	c3                   	ret    

c001b439 <Reg::readBool(char*, char*, bool*)>:
c001b439:	83 ec 20             	sub    esp,0x20
c001b43c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b440:	50                   	push   eax
c001b441:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b445:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b449:	e8 7f fe ff ff       	call   c001b2cd <Reg::readInt(char*, char*, int*)>
c001b44e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b453:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b457:	0f 95 02             	setne  BYTE PTR [edx]
c001b45a:	83 c4 2c             	add    esp,0x2c
c001b45d:	c3                   	ret    

c001b45e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b45e:	53                   	push   ebx
c001b45f:	83 ec 1c             	sub    esp,0x1c
c001b462:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b466:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b46a:	50                   	push   eax
c001b46b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b46f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b473:	e8 c1 ff ff ff       	call   c001b439 <Reg::readBool(char*, char*, bool*)>
c001b478:	83 c4 10             	add    esp,0x10
c001b47b:	84 c0                	test   al,al
c001b47d:	74 04                	je     c001b483 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b47f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b483:	88 d8                	mov    al,bl
c001b485:	83 c4 18             	add    esp,0x18
c001b488:	5b                   	pop    ebx
c001b489:	c3                   	ret    

c001b48a <Reg::readIntWithDefault(char*, char*, int)>:
c001b48a:	53                   	push   ebx
c001b48b:	83 ec 1c             	sub    esp,0x1c
c001b48e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b492:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b496:	50                   	push   eax
c001b497:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b49f:	e8 29 fe ff ff       	call   c001b2cd <Reg::readInt(char*, char*, int*)>
c001b4a4:	83 c4 10             	add    esp,0x10
c001b4a7:	84 c0                	test   al,al
c001b4a9:	74 04                	je     c001b4af <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b4ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b4af:	89 d8                	mov    eax,ebx
c001b4b1:	83 c4 18             	add    esp,0x18
c001b4b4:	5b                   	pop    ebx
c001b4b5:	c3                   	ret    

c001b4b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4b6:	57                   	push   edi
c001b4b7:	56                   	push   esi
c001b4b8:	53                   	push   ebx
c001b4b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b4bd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b4c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b4c5:	56                   	push   esi
c001b4c6:	53                   	push   ebx
c001b4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4cf:	e8 e4 fe ff ff       	call   c001b3b8 <Reg::readString(char*, char*, char*, int)>
c001b4d4:	83 c4 10             	add    esp,0x10
c001b4d7:	84 c0                	test   al,al
c001b4d9:	75 1b                	jne    c001b4f6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b4db:	50                   	push   eax
c001b4dc:	56                   	push   esi
c001b4dd:	4e                   	dec    esi
c001b4de:	6a 00                	push   0x0
c001b4e0:	53                   	push   ebx
c001b4e1:	e8 b6 52 fe ff       	call   c000079c <memset>
c001b4e6:	83 c4 0c             	add    esp,0xc
c001b4e9:	56                   	push   esi
c001b4ea:	57                   	push   edi
c001b4eb:	53                   	push   ebx
c001b4ec:	89 fb                	mov    ebx,edi
c001b4ee:	e8 75 52 fe ff       	call   c0000768 <memcpy>
c001b4f3:	83 c4 10             	add    esp,0x10
c001b4f6:	89 d8                	mov    eax,ebx
c001b4f8:	5b                   	pop    ebx
c001b4f9:	5e                   	pop    esi
c001b4fa:	5f                   	pop    edi
c001b4fb:	c3                   	ret    

c001b4fc <Sys::eject(regs*)>:
c001b4fc:	83 ec 0c             	sub    esp,0xc
c001b4ff:	83 ca ff             	or     edx,0xffffffff
c001b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b506:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b509:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b50e:	83 e9 41             	sub    ecx,0x41
c001b511:	83 f9 19             	cmp    ecx,0x19
c001b514:	77 18                	ja     c001b52e <Sys::eject(regs*)+0x32>
c001b516:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c001b51d:	85 c9                	test   ecx,ecx
c001b51f:	74 0d                	je     c001b52e <Sys::eject(regs*)+0x32>
c001b521:	83 ec 0c             	sub    esp,0xc
c001b524:	51                   	push   ecx
c001b525:	e8 d8 b2 ff ff       	call   c0016802 <LogicalDisk::eject()>
c001b52a:	83 c4 10             	add    esp,0x10
c001b52d:	99                   	cdq    
c001b52e:	83 c4 0c             	add    esp,0xc
c001b531:	c3                   	ret    

c001b532 <Sys::exit(regs*)>:
c001b532:	83 ec 18             	sub    esp,0x18
c001b535:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b539:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b53c:	e8 86 38 00 00       	call   c001edc7 <terminateTask(int)>
c001b541:	83 c8 ff             	or     eax,0xffffffff
c001b544:	83 c4 1c             	add    esp,0x1c
c001b547:	89 c2                	mov    edx,eax
c001b549:	c3                   	ret    

c001b54a <Sys::getCwd(regs*)>:
c001b54a:	83 ec 10             	sub    esp,0x10
c001b54d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b551:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b554:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b55c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b55f:	e8 de 7c ff ff       	call   c0013242 <Fs::getcwd(Process*, char*, int)>
c001b564:	83 c4 1c             	add    esp,0x1c
c001b567:	99                   	cdq    
c001b568:	c3                   	ret    

c001b569 <Sys::getPID(regs*)>:
c001b569:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b56e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b571:	8b 00                	mov    eax,DWORD PTR [eax]
c001b573:	99                   	cdq    
c001b574:	c3                   	ret    

c001b575 <Sys::getRAMData(regs*)>:
c001b575:	8b 0d 94 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee94
c001b57b:	6b 05 90 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee90,0x64
c001b582:	99                   	cdq    
c001b583:	f7 f9                	idiv   ecx
c001b585:	c1 e0 18             	shl    eax,0x18
c001b588:	09 c8                	or     eax,ecx
c001b58a:	99                   	cdq    
c001b58b:	c3                   	ret    

c001b58c <Sys::getVGAPtr(regs*)>:
c001b58c:	56                   	push   esi
c001b58d:	53                   	push   ebx
c001b58e:	83 ec 10             	sub    esp,0x10
c001b591:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b595:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b598:	e8 0c 33 00 00       	call   c001e8a9 <Thr::processFromPID(int)>
c001b59d:	83 c4 10             	add    esp,0x10
c001b5a0:	89 c1                	mov    ecx,eax
c001b5a2:	b8 01 00 00 00       	mov    eax,0x1
c001b5a7:	85 c9                	test   ecx,ecx
c001b5a9:	74 5d                	je     c001b608 <Sys::getVGAPtr(regs*)+0x7c>
c001b5ab:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b5b1:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c001b5b5:	74 0c                	je     c001b5c3 <Sys::getVGAPtr(regs*)+0x37>
c001b5b7:	83 ec 0c             	sub    esp,0xc
c001b5ba:	53                   	push   ebx
c001b5bb:	e8 44 57 ff ff       	call   c0010d04 <setActiveTerminal(VgaText*)>
c001b5c0:	83 c4 10             	add    esp,0x10
c001b5c3:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5c9:	50                   	push   eax
c001b5ca:	68 a0 0f 00 00       	push   0xfa0
c001b5cf:	ff 73 8a             	push   DWORD PTR [ebx-0x76]
c001b5d2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b5d5:	e8 8e 51 fe ff       	call   c0000768 <memcpy>
c001b5da:	8b 53 92             	mov    edx,DWORD PTR [ebx-0x6e]
c001b5dd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5e0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5e6:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5e9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5ec:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5f2:	58                   	pop    eax
c001b5f3:	5a                   	pop    edx
c001b5f4:	53                   	push   ebx
c001b5f5:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b5f8:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5fd:	50                   	push   eax
c001b5fe:	e8 55 52 fe ff       	call   c0000858 <strcpy>
c001b603:	83 c4 10             	add    esp,0x10
c001b606:	31 c0                	xor    eax,eax
c001b608:	59                   	pop    ecx
c001b609:	31 d2                	xor    edx,edx
c001b60b:	5b                   	pop    ebx
c001b60c:	5e                   	pop    esi
c001b60d:	c3                   	ret    

c001b60e <Sys::loadDLL(regs*)>:
c001b60e:	56                   	push   esi
c001b60f:	53                   	push   ebx
c001b610:	31 d2                	xor    edx,edx
c001b612:	51                   	push   ecx
c001b613:	b8 01 00 00 00       	mov    eax,0x1
c001b618:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b61c:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b620:	0f 84 8c 00 00 00    	je     c001b6b2 <Sys::loadDLL(regs*)+0xa4>
c001b626:	83 ec 0c             	sub    esp,0xc
c001b629:	68 14 01 00 00       	push   0x114
c001b62e:	e8 f7 42 ff ff       	call   c000f92a <malloc>
c001b633:	83 c4 0c             	add    esp,0xc
c001b636:	89 c3                	mov    ebx,eax
c001b638:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b63d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b640:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b643:	53                   	push   ebx
c001b644:	e8 f7 7d ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001b649:	83 c4 10             	add    esp,0x10
c001b64c:	31 d2                	xor    edx,edx
c001b64e:	b8 02 00 00 00       	mov    eax,0x2
c001b653:	85 db                	test   ebx,ebx
c001b655:	74 5b                	je     c001b6b2 <Sys::loadDLL(regs*)+0xa4>
c001b657:	83 ec 0c             	sub    esp,0xc
c001b65a:	53                   	push   ebx
c001b65b:	e8 b2 80 ff ff       	call   c0013712 <File::exists()>
c001b660:	83 c4 10             	add    esp,0x10
c001b663:	84 c0                	test   al,al
c001b665:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b667:	75 11                	jne    c001b67a <Sys::loadDLL(regs*)+0x6c>
c001b669:	83 ec 0c             	sub    esp,0xc
c001b66c:	53                   	push   ebx
c001b66d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	b8 03 00 00 00       	mov    eax,0x3
c001b678:	eb 36                	jmp    c001b6b0 <Sys::loadDLL(regs*)+0xa2>
c001b67a:	83 ec 0c             	sub    esp,0xc
c001b67d:	53                   	push   ebx
c001b67e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b681:	58                   	pop    eax
c001b682:	5a                   	pop    edx
c001b683:	6a 00                	push   0x0
c001b685:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b688:	e8 29 24 00 00       	call   c001dab6 <Thr::loadDLL(char const*, bool)>
c001b68d:	83 c4 10             	add    esp,0x10
c001b690:	89 c1                	mov    ecx,eax
c001b692:	31 d2                	xor    edx,edx
c001b694:	b8 04 00 00 00       	mov    eax,0x4
c001b699:	85 c9                	test   ecx,ecx
c001b69b:	74 15                	je     c001b6b2 <Sys::loadDLL(regs*)+0xa4>
c001b69d:	53                   	push   ebx
c001b69e:	53                   	push   ebx
c001b69f:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001b6a5:	51                   	push   ecx
c001b6a6:	e8 36 26 00 00       	call   c001dce1 <Thr::executeDLL(unsigned long, void*)>
c001b6ab:	83 c4 10             	add    esp,0x10
c001b6ae:	31 c0                	xor    eax,eax
c001b6b0:	31 d2                	xor    edx,edx
c001b6b2:	59                   	pop    ecx
c001b6b3:	5b                   	pop    ebx
c001b6b4:	5e                   	pop    esi
c001b6b5:	c3                   	ret    

c001b6b6 <Sys::read(regs*)>:
c001b6b6:	57                   	push   edi
c001b6b7:	56                   	push   esi
c001b6b8:	53                   	push   ebx
c001b6b9:	83 ec 10             	sub    esp,0x10
c001b6bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6c3:	83 f8 02             	cmp    eax,0x2
c001b6c6:	77 10                	ja     c001b6d8 <Sys::read(regs*)+0x22>
c001b6c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6d0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6d6:	eb 0e                	jmp    c001b6e6 <Sys::read(regs*)+0x30>
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	50                   	push   eax
c001b6dc:	e8 a4 62 ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001b6e1:	83 c4 10             	add    esp,0x10
c001b6e4:	89 c1                	mov    ecx,eax
c001b6e6:	83 c8 ff             	or     eax,0xffffffff
c001b6e9:	85 c9                	test   ecx,ecx
c001b6eb:	89 c2                	mov    edx,eax
c001b6ed:	74 28                	je     c001b717 <Sys::read(regs*)+0x61>
c001b6ef:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6f7:	31 ff                	xor    edi,edi
c001b6f9:	83 ec 0c             	sub    esp,0xc
c001b6fc:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6fe:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b702:	52                   	push   edx
c001b703:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b706:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b709:	57                   	push   edi
c001b70a:	56                   	push   esi
c001b70b:	51                   	push   ecx
c001b70c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b70f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b713:	83 c4 20             	add    esp,0x20
c001b716:	99                   	cdq    
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	5b                   	pop    ebx
c001b71b:	5e                   	pop    esi
c001b71c:	5f                   	pop    edi
c001b71d:	c3                   	ret    

c001b71e <Sys::sbrk(regs*)>:
c001b71e:	56                   	push   esi
c001b71f:	53                   	push   ebx
c001b720:	50                   	push   eax
c001b721:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b726:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b72a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b72d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b730:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b736:	85 db                	test   ebx,ebx
c001b738:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b73b:	74 02                	je     c001b73f <Sys::sbrk(regs*)+0x21>
c001b73d:	79 06                	jns    c001b745 <Sys::sbrk(regs*)+0x27>
c001b73f:	89 f0                	mov    eax,esi
c001b741:	31 d2                	xor    edx,edx
c001b743:	eb 2a                	jmp    c001b76f <Sys::sbrk(regs*)+0x51>
c001b745:	83 c8 ff             	or     eax,0xffffffff
c001b748:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b74e:	89 c2                	mov    edx,eax
c001b750:	77 1d                	ja     c001b76f <Sys::sbrk(regs*)+0x51>
c001b752:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b758:	50                   	push   eax
c001b759:	c1 ea 0c             	shr    edx,0xc
c001b75c:	68 07 0c 00 00       	push   0xc07
c001b761:	52                   	push   edx
c001b762:	51                   	push   ecx
c001b763:	e8 ac 6c ff ff       	call   c0012414 <VAS::allocatePages(int, int)>
c001b768:	89 f0                	mov    eax,esi
c001b76a:	31 d2                	xor    edx,edx
c001b76c:	83 c4 10             	add    esp,0x10
c001b76f:	59                   	pop    ecx
c001b770:	5b                   	pop    ebx
c001b771:	5e                   	pop    esi
c001b772:	c3                   	ret    

c001b773 <Sys::setCwd(regs*)>:
c001b773:	83 ec 14             	sub    esp,0x14
c001b776:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b77a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b77d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b782:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b785:	e8 27 80 ff ff       	call   c00137b1 <Fs::setcwd(Process*, char*)>
c001b78a:	83 c4 1c             	add    esp,0x1c
c001b78d:	99                   	cdq    
c001b78e:	c3                   	ret    

c001b78f <Sys::setTime(regs*)>:
c001b78f:	55                   	push   ebp
c001b790:	31 d2                	xor    edx,edx
c001b792:	57                   	push   edi
c001b793:	bf 18 00 00 00       	mov    edi,0x18
c001b798:	56                   	push   esi
c001b799:	53                   	push   ebx
c001b79a:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b79f:	83 ec 30             	sub    esp,0x30
c001b7a2:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b7a6:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b7a9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7ac:	f7 f3                	div    ebx
c001b7ae:	89 d6                	mov    esi,edx
c001b7b0:	31 d2                	xor    edx,edx
c001b7b2:	f7 f3                	div    ebx
c001b7b4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7b7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7bb:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7c0:	31 d2                	xor    edx,edx
c001b7c2:	f7 f3                	div    ebx
c001b7c4:	31 d2                	xor    edx,edx
c001b7c6:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7cb:	f7 f7                	div    edi
c001b7cd:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7d0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7d4:	0f b7 cd             	movzx  ecx,bp
c001b7d7:	56                   	push   esi
c001b7d8:	89 c7                	mov    edi,eax
c001b7da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7de:	c1 e6 10             	shl    esi,0x10
c001b7e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7e5:	83 e7 1f             	and    edi,0x1f
c001b7e8:	51                   	push   ecx
c001b7e9:	47                   	inc    edi
c001b7ea:	c1 e8 05             	shr    eax,0x5
c001b7ed:	31 d2                	xor    edx,edx
c001b7ef:	f7 f3                	div    ebx
c001b7f1:	31 db                	xor    ebx,ebx
c001b7f3:	52                   	push   edx
c001b7f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7f8:	57                   	push   edi
c001b7f9:	68 ed c6 02 c0       	push   0xc002c6ed
c001b7fe:	e8 de 76 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001b803:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b807:	89 f8                	mov    eax,edi
c001b809:	31 c9                	xor    ecx,ecx
c001b80b:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b80f:	88 c1                	mov    cl,al
c001b811:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b817:	88 d5                	mov    ch,dl
c001b819:	c1 e0 10             	shl    eax,0x10
c001b81c:	0f b7 d1             	movzx  edx,cx
c001b81f:	09 c2                	or     edx,eax
c001b821:	89 d8                	mov    eax,ebx
c001b823:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b828:	09 f0                	or     eax,esi
c001b82a:	89 c3                	mov    ebx,eax
c001b82c:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b830:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b834:	83 c4 18             	add    esp,0x18
c001b837:	53                   	push   ebx
c001b838:	52                   	push   edx
c001b839:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b83d:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b841:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b845:	e8 89 86 ff ff       	call   c0013ed3 <datetimeToSeconds(datetime_t)>
c001b84a:	83 c4 0c             	add    esp,0xc
c001b84d:	52                   	push   edx
c001b84e:	50                   	push   eax
c001b84f:	56                   	push   esi
c001b850:	e8 05 88 ff ff       	call   c001405a <secondsToDatetime(unsigned long long)>
c001b855:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b859:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b85d:	51                   	push   ecx
c001b85e:	89 d6                	mov    esi,edx
c001b860:	51                   	push   ecx
c001b861:	c1 ee 10             	shr    esi,0x10
c001b864:	89 f3                	mov    ebx,esi
c001b866:	0f b6 f3             	movzx  esi,bl
c001b869:	56                   	push   esi
c001b86a:	0f b6 f6             	movzx  esi,dh
c001b86d:	0f b6 d2             	movzx  edx,dl
c001b870:	56                   	push   esi
c001b871:	52                   	push   edx
c001b872:	89 c2                	mov    edx,eax
c001b874:	c1 ea 10             	shr    edx,0x10
c001b877:	52                   	push   edx
c001b878:	0f b6 d4             	movzx  edx,ah
c001b87b:	0f b6 c0             	movzx  eax,al
c001b87e:	52                   	push   edx
c001b87f:	50                   	push   eax
c001b880:	68 09 c7 02 c0       	push   0xc002c709
c001b885:	e8 57 76 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001b88a:	83 c4 2c             	add    esp,0x2c
c001b88d:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001b892:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b896:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b89a:	53                   	push   ebx
c001b89b:	51                   	push   ecx
c001b89c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b8a2:	e8 53 87 ff ff       	call   c0013ffa <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b8a7:	83 f0 01             	xor    eax,0x1
c001b8aa:	31 d2                	xor    edx,edx
c001b8ac:	0f b6 c0             	movzx  eax,al
c001b8af:	83 c4 3c             	add    esp,0x3c
c001b8b2:	5b                   	pop    ebx
c001b8b3:	5e                   	pop    esi
c001b8b4:	5f                   	pop    edi
c001b8b5:	5d                   	pop    ebp
c001b8b6:	c3                   	ret    

c001b8b7 <Sys::timezone(regs*)>:
c001b8b7:	53                   	push   ebx
c001b8b8:	83 ec 08             	sub    esp,0x8
c001b8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8bf:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8c3:	75 17                	jne    c001b8dc <Sys::timezone(regs*)+0x25>
c001b8c5:	83 ec 0c             	sub    esp,0xc
c001b8c8:	68 25 c7 02 c0       	push   0xc002c725
c001b8cd:	e8 0f 76 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001b8d2:	83 c8 ff             	or     eax,0xffffffff
c001b8d5:	83 c4 10             	add    esp,0x10
c001b8d8:	89 c2                	mov    edx,eax
c001b8da:	eb 20                	jmp    c001b8fc <Sys::timezone(regs*)+0x45>
c001b8dc:	83 ec 0c             	sub    esp,0xc
c001b8df:	68 5d c7 02 c0       	push   0xc002c75d
c001b8e4:	e8 f8 75 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001b8e9:	58                   	pop    eax
c001b8ea:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8ed:	e8 6a 84 ff ff       	call   c0013d5c <User::loadClockSettings(int)>
c001b8f2:	83 c4 10             	add    esp,0x10
c001b8f5:	b8 01 00 00 00       	mov    eax,0x1
c001b8fa:	31 d2                	xor    edx,edx
c001b8fc:	83 c4 08             	add    esp,0x8
c001b8ff:	5b                   	pop    ebx
c001b900:	c3                   	ret    

c001b901 <Sys::write(regs*)>:
c001b901:	57                   	push   edi
c001b902:	56                   	push   esi
c001b903:	53                   	push   ebx
c001b904:	83 ec 10             	sub    esp,0x10
c001b907:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b90b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b90e:	83 f8 02             	cmp    eax,0x2
c001b911:	77 10                	ja     c001b923 <Sys::write(regs*)+0x22>
c001b913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b918:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b91b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b921:	eb 0e                	jmp    c001b931 <Sys::write(regs*)+0x30>
c001b923:	83 ec 0c             	sub    esp,0xc
c001b926:	50                   	push   eax
c001b927:	e8 59 60 ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001b92c:	83 c4 10             	add    esp,0x10
c001b92f:	89 c1                	mov    ecx,eax
c001b931:	83 c8 ff             	or     eax,0xffffffff
c001b934:	85 c9                	test   ecx,ecx
c001b936:	89 c2                	mov    edx,eax
c001b938:	74 28                	je     c001b962 <Sys::write(regs*)+0x61>
c001b93a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b942:	31 ff                	xor    edi,edi
c001b944:	83 ec 0c             	sub    esp,0xc
c001b947:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b949:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b94d:	52                   	push   edx
c001b94e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b951:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b954:	57                   	push   edi
c001b955:	56                   	push   esi
c001b956:	51                   	push   ecx
c001b957:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b95e:	83 c4 20             	add    esp,0x20
c001b961:	99                   	cdq    
c001b962:	83 c4 10             	add    esp,0x10
c001b965:	5b                   	pop    ebx
c001b966:	5e                   	pop    esi
c001b967:	5f                   	pop    edi
c001b968:	c3                   	ret    

c001b969 <Sys::wsbe(regs*)>:
c001b969:	57                   	push   edi
c001b96a:	b9 0b 00 00 00       	mov    ecx,0xb
c001b96f:	56                   	push   esi
c001b970:	be 9c c7 02 c0       	mov    esi,0xc002c79c
c001b975:	53                   	push   ebx
c001b976:	83 ec 30             	sub    esp,0x30
c001b979:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b97d:	fc                   	cld    
c001b97e:	83 ec 0c             	sub    esp,0xc
c001b981:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b983:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b987:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b98f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b995:	8b 06                	mov    eax,DWORD PTR [esi]
c001b997:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b99a:	57                   	push   edi
c001b99b:	e8 18 4e fe ff       	call   c00007b8 <strlen>
c001b9a0:	5a                   	pop    edx
c001b9a1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b9a5:	52                   	push   edx
c001b9a6:	31 d2                	xor    edx,edx
c001b9a8:	57                   	push   edi
c001b9a9:	52                   	push   edx
c001b9aa:	50                   	push   eax
c001b9ab:	56                   	push   esi
c001b9ac:	ff d3                	call   ebx
c001b9ae:	83 c4 14             	add    esp,0x14
c001b9b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b9b5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9b8:	e8 0a 34 00 00       	call   c001edc7 <terminateTask(int)>
c001b9bd:	83 c4 40             	add    esp,0x40
c001b9c0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9c5:	5b                   	pop    ebx
c001b9c6:	31 d2                	xor    edx,edx
c001b9c8:	5e                   	pop    esi
c001b9c9:	5f                   	pop    edi
c001b9ca:	c3                   	ret    

c001b9cb <Sys::yield(regs*)>:
c001b9cb:	57                   	push   edi
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	fa                   	cli    
c001b9cf:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001b9d5:	e8 ba 2a 00 00       	call   c001e494 <schedule()>
c001b9da:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001b9df:	48                   	dec    eax
c001b9e0:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001b9e5:	75 01                	jne    c001b9e8 <Sys::yield(regs*)+0x1d>
c001b9e7:	fb                   	sti    
c001b9e8:	8b 35 d0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4d0
c001b9ee:	8b 3d d4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4d4
c001b9f4:	89 f0                	mov    eax,esi
c001b9f6:	89 fb                	mov    ebx,edi
c001b9f8:	89 f1                	mov    ecx,esi
c001b9fa:	c1 e0 07             	shl    eax,0x7
c001b9fd:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba01:	25 80 30 0f 00       	and    eax,0xf3080
c001ba06:	c1 eb 17             	shr    ebx,0x17
c001ba09:	31 c8                	xor    eax,ecx
c001ba0b:	89 da                	mov    edx,ebx
c001ba0d:	5b                   	pop    ebx
c001ba0e:	5e                   	pop    esi
c001ba0f:	5f                   	pop    edi
c001ba10:	c3                   	ret    

c001ba11 <sysCallSeekDir(regs*)>:
c001ba11:	31 c0                	xor    eax,eax
c001ba13:	31 d2                	xor    edx,edx
c001ba15:	c3                   	ret    

c001ba16 <sysCallTellDir(regs*)>:
c001ba16:	31 c0                	xor    eax,eax
c001ba18:	31 d2                	xor    edx,edx
c001ba1a:	c3                   	ret    

c001ba1b <sysCallVerify(regs*)>:
c001ba1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba1f:	31 d2                	xor    edx,edx
c001ba21:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba24:	c3                   	ret    

c001ba25 <sysFormatDisk(regs*)>:
c001ba25:	56                   	push   esi
c001ba26:	53                   	push   ebx
c001ba27:	53                   	push   ebx
c001ba28:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba2c:	8b 1d d4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd4
c001ba32:	eb 25                	jmp    c001ba59 <sysFormatDisk(regs*)+0x34>
c001ba34:	83 ec 0c             	sub    esp,0xc
c001ba37:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba3a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba3c:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba3f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba42:	50                   	push   eax
c001ba43:	ff 34 85 60 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ba0]
c001ba4a:	53                   	push   ebx
c001ba4b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba4e:	83 c4 20             	add    esp,0x20
c001ba51:	83 f8 08             	cmp    eax,0x8
c001ba54:	75 12                	jne    c001ba68 <sysFormatDisk(regs*)+0x43>
c001ba56:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba59:	85 db                	test   ebx,ebx
c001ba5b:	75 d7                	jne    c001ba34 <sysFormatDisk(regs*)+0xf>
c001ba5d:	59                   	pop    ecx
c001ba5e:	b8 03 00 00 00       	mov    eax,0x3
c001ba63:	31 d2                	xor    edx,edx
c001ba65:	5b                   	pop    ebx
c001ba66:	5e                   	pop    esi
c001ba67:	c3                   	ret    
c001ba68:	85 c0                	test   eax,eax
c001ba6a:	74 1b                	je     c001ba87 <sysFormatDisk(regs*)+0x62>
c001ba6c:	83 f8 09             	cmp    eax,0x9
c001ba6f:	74 0b                	je     c001ba7c <sysFormatDisk(regs*)+0x57>
c001ba71:	59                   	pop    ecx
c001ba72:	b8 02 00 00 00       	mov    eax,0x2
c001ba77:	31 d2                	xor    edx,edx
c001ba79:	5b                   	pop    ebx
c001ba7a:	5e                   	pop    esi
c001ba7b:	c3                   	ret    
c001ba7c:	59                   	pop    ecx
c001ba7d:	b8 01 00 00 00       	mov    eax,0x1
c001ba82:	31 d2                	xor    edx,edx
c001ba84:	5b                   	pop    ebx
c001ba85:	5e                   	pop    esi
c001ba86:	c3                   	ret    
c001ba87:	59                   	pop    ecx
c001ba88:	31 c0                	xor    eax,eax
c001ba8a:	31 d2                	xor    edx,edx
c001ba8c:	5b                   	pop    ebx
c001ba8d:	5e                   	pop    esi
c001ba8e:	c3                   	ret    

c001ba8f <sysSetDiskVolumeLabel(regs*)>:
c001ba8f:	56                   	push   esi
c001ba90:	53                   	push   ebx
c001ba91:	53                   	push   ebx
c001ba92:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba96:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba99:	83 f8 19             	cmp    eax,0x19
c001ba9c:	77 29                	ja     c001bac7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001ba9e:	8b 0c 85 60 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0ba0]
c001baa5:	85 c9                	test   ecx,ecx
c001baa7:	74 1e                	je     c001bac7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001baa9:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001baac:	85 d2                	test   edx,edx
c001baae:	74 17                	je     c001bac7 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bab0:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bab6:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bab8:	52                   	push   edx
c001bab9:	50                   	push   eax
c001baba:	51                   	push   ecx
c001babb:	53                   	push   ebx
c001babc:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001babf:	83 c4 10             	add    esp,0x10
c001bac2:	99                   	cdq    
c001bac3:	59                   	pop    ecx
c001bac4:	5b                   	pop    ebx
c001bac5:	5e                   	pop    esi
c001bac6:	c3                   	ret    
c001bac7:	59                   	pop    ecx
c001bac8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bacd:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad2:	5b                   	pop    ebx
c001bad3:	5e                   	pop    esi
c001bad4:	c3                   	ret    

c001bad5 <sysGetDiskVolumeLabel(regs*)>:
c001bad5:	57                   	push   edi
c001bad6:	56                   	push   esi
c001bad7:	53                   	push   ebx
c001bad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001badc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001badf:	83 fa 19             	cmp    edx,0x19
c001bae2:	77 34                	ja     c001bb18 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bae4:	8b 0c 95 60 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0ba0]
c001baeb:	85 c9                	test   ecx,ecx
c001baed:	74 29                	je     c001bb18 <sysGetDiskVolumeLabel(regs*)+0x43>
c001baef:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001baf2:	85 db                	test   ebx,ebx
c001baf4:	74 22                	je     c001bb18 <sysGetDiskVolumeLabel(regs*)+0x43>
c001baf6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001baf9:	85 c0                	test   eax,eax
c001bafb:	74 1b                	je     c001bb18 <sysGetDiskVolumeLabel(regs*)+0x43>
c001bafd:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bb03:	83 ec 0c             	sub    esp,0xc
c001bb06:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bb08:	50                   	push   eax
c001bb09:	53                   	push   ebx
c001bb0a:	52                   	push   edx
c001bb0b:	51                   	push   ecx
c001bb0c:	56                   	push   esi
c001bb0d:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb10:	83 c4 20             	add    esp,0x20
c001bb13:	99                   	cdq    
c001bb14:	5b                   	pop    ebx
c001bb15:	5e                   	pop    esi
c001bb16:	5f                   	pop    edi
c001bb17:	c3                   	ret    
c001bb18:	5b                   	pop    ebx
c001bb19:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb1e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb23:	5e                   	pop    esi
c001bb24:	5f                   	pop    edi
c001bb25:	c3                   	ret    

c001bb26 <sysShutdown(regs*)>:
c001bb26:	83 ec 0c             	sub    esp,0xc
c001bb29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb30:	85 c0                	test   eax,eax
c001bb32:	74 18                	je     c001bb4c <sysShutdown(regs*)+0x26>
c001bb34:	83 f8 01             	cmp    eax,0x1
c001bb37:	74 38                	je     c001bb71 <sysShutdown(regs*)+0x4b>
c001bb39:	83 f8 02             	cmp    eax,0x2
c001bb3c:	74 24                	je     c001bb62 <sysShutdown(regs*)+0x3c>
c001bb3e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb43:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb48:	83 c4 0c             	add    esp,0xc
c001bb4b:	c3                   	ret    
c001bb4c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001bb51:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb53:	6a 00                	push   0x0
c001bb55:	6a 00                	push   0x0
c001bb57:	6a 00                	push   0x0
c001bb59:	50                   	push   eax
c001bb5a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb5d:	83 c4 10             	add    esp,0x10
c001bb60:	eb dc                	jmp    c001bb3e <sysShutdown(regs*)+0x18>
c001bb62:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001bb67:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb69:	6a 00                	push   0x0
c001bb6b:	6a 00                	push   0x0
c001bb6d:	6a 01                	push   0x1
c001bb6f:	eb e8                	jmp    c001bb59 <sysShutdown(regs*)+0x33>
c001bb71:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c001bb76:	85 c0                	test   eax,eax
c001bb78:	74 02                	je     c001bb7c <sysShutdown(regs*)+0x56>
c001bb7a:	ff d0                	call   eax
c001bb7c:	31 c0                	xor    eax,eax
c001bb7e:	31 d2                	xor    edx,edx
c001bb80:	83 c4 0c             	add    esp,0xc
c001bb83:	c3                   	ret    

c001bb84 <sysCallRealpath(regs*)>:
c001bb84:	83 ec 0c             	sub    esp,0xc
c001bb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8b:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb8e:	85 d2                	test   edx,edx
c001bb90:	74 07                	je     c001bb99 <sysCallRealpath(regs*)+0x15>
c001bb92:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb95:	85 c0                	test   eax,eax
c001bb97:	75 0b                	jne    c001bba4 <sysCallRealpath(regs*)+0x20>
c001bb99:	b8 01 00 00 00       	mov    eax,0x1
c001bb9e:	31 d2                	xor    edx,edx
c001bba0:	83 c4 0c             	add    esp,0xc
c001bba3:	c3                   	ret    
c001bba4:	51                   	push   ecx
c001bba5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbab:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbae:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bbb4:	51                   	push   ecx
c001bbb5:	52                   	push   edx
c001bbb6:	50                   	push   eax
c001bbb7:	e8 da 76 ff ff       	call   c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	31 c0                	xor    eax,eax
c001bbc1:	31 d2                	xor    edx,edx
c001bbc3:	83 c4 0c             	add    esp,0xc
c001bbc6:	c3                   	ret    

c001bbc7 <sysCallGetArgc(regs*)>:
c001bbc7:	83 ec 14             	sub    esp,0x14
c001bbca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbd2:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbd8:	68 c8 c7 02 c0       	push   0xc002c7c8
c001bbdd:	e8 ff 72 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bbe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbe7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbea:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbf0:	83 c4 1c             	add    esp,0x1c
c001bbf3:	99                   	cdq    
c001bbf4:	c3                   	ret    

c001bbf5 <sysCallReadDir(regs*)>:
c001bbf5:	53                   	push   ebx
c001bbf6:	83 ec 18             	sub    esp,0x18
c001bbf9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bbfd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc00:	83 f8 02             	cmp    eax,0x2
c001bc03:	76 53                	jbe    c001bc58 <sysCallReadDir(regs*)+0x63>
c001bc05:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc08:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc0e:	77 4f                	ja     c001bc5f <sysCallReadDir(regs*)+0x6a>
c001bc10:	83 ec 0c             	sub    esp,0xc
c001bc13:	50                   	push   eax
c001bc14:	e8 6c 5d ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bc19:	83 c4 10             	add    esp,0x10
c001bc1c:	85 c0                	test   eax,eax
c001bc1e:	74 50                	je     c001bc70 <sysCallReadDir(regs*)+0x7b>
c001bc20:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc28:	83 ec 0c             	sub    esp,0xc
c001bc2b:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc2d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc31:	51                   	push   ecx
c001bc32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc35:	6a 00                	push   0x0
c001bc37:	68 10 01 00 00       	push   0x110
c001bc3c:	50                   	push   eax
c001bc3d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc40:	83 c4 20             	add    esp,0x20
c001bc43:	85 c0                	test   eax,eax
c001bc45:	74 38                	je     c001bc7f <sysCallReadDir(regs*)+0x8a>
c001bc47:	83 f8 07             	cmp    eax,0x7
c001bc4a:	74 0c                	je     c001bc58 <sysCallReadDir(regs*)+0x63>
c001bc4c:	b8 02 00 00 00       	mov    eax,0x2
c001bc51:	31 d2                	xor    edx,edx
c001bc53:	83 c4 18             	add    esp,0x18
c001bc56:	5b                   	pop    ebx
c001bc57:	c3                   	ret    
c001bc58:	b8 01 00 00 00       	mov    eax,0x1
c001bc5d:	eb f2                	jmp    c001bc51 <sysCallReadDir(regs*)+0x5c>
c001bc5f:	83 ec 08             	sub    esp,0x8
c001bc62:	52                   	push   edx
c001bc63:	68 ec c8 02 c0       	push   0xc002c8ec
c001bc68:	e8 74 72 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bc6d:	83 c4 10             	add    esp,0x10
c001bc70:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc75:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc7a:	83 c4 18             	add    esp,0x18
c001bc7d:	5b                   	pop    ebx
c001bc7e:	c3                   	ret    
c001bc7f:	31 c0                	xor    eax,eax
c001bc81:	eb ce                	jmp    c001bc51 <sysCallReadDir(regs*)+0x5c>

c001bc83 <sysCallIsATTY(regs*)>:
c001bc83:	83 ec 0c             	sub    esp,0xc
c001bc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc8a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc8d:	83 f8 02             	cmp    eax,0x2
c001bc90:	76 07                	jbe    c001bc99 <sysCallIsATTY(regs*)+0x16>
c001bc92:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc97:	75 26                	jne    c001bcbf <sysCallIsATTY(regs*)+0x3c>
c001bc99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bca1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bca7:	85 c0                	test   eax,eax
c001bca9:	74 24                	je     c001bccf <sysCallIsATTY(regs*)+0x4c>
c001bcab:	83 ec 0c             	sub    esp,0xc
c001bcae:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcb0:	50                   	push   eax
c001bcb1:	ff 12                	call   DWORD PTR [edx]
c001bcb3:	31 d2                	xor    edx,edx
c001bcb5:	0f b6 c0             	movzx  eax,al
c001bcb8:	83 c4 10             	add    esp,0x10
c001bcbb:	83 c4 0c             	add    esp,0xc
c001bcbe:	c3                   	ret    
c001bcbf:	83 ec 0c             	sub    esp,0xc
c001bcc2:	50                   	push   eax
c001bcc3:	e8 bd 5c ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bcc8:	83 c4 10             	add    esp,0x10
c001bccb:	85 c0                	test   eax,eax
c001bccd:	75 dc                	jne    c001bcab <sysCallIsATTY(regs*)+0x28>
c001bccf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcd9:	83 c4 0c             	add    esp,0xc
c001bcdc:	c3                   	ret    

c001bcdd <sysCallSeek(regs*)>:
c001bcdd:	53                   	push   ebx
c001bcde:	83 ec 08             	sub    esp,0x8
c001bce1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bce5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bce8:	83 f8 02             	cmp    eax,0x2
c001bceb:	76 4a                	jbe    c001bd37 <sysCallSeek(regs*)+0x5a>
c001bced:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf2:	77 32                	ja     c001bd26 <sysCallSeek(regs*)+0x49>
c001bcf4:	83 ec 0c             	sub    esp,0xc
c001bcf7:	50                   	push   eax
c001bcf8:	e8 88 5c ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bcfd:	83 c4 0c             	add    esp,0xc
c001bd00:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd03:	31 db                	xor    ebx,ebx
c001bd05:	53                   	push   ebx
c001bd06:	51                   	push   ecx
c001bd07:	50                   	push   eax
c001bd08:	e8 55 78 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001bd0d:	83 c4 10             	add    esp,0x10
c001bd10:	85 c0                	test   eax,eax
c001bd12:	0f 95 c0             	setne  al
c001bd15:	31 d2                	xor    edx,edx
c001bd17:	0f b6 c0             	movzx  eax,al
c001bd1a:	f7 d8                	neg    eax
c001bd1c:	83 d2 00             	adc    edx,0x0
c001bd1f:	83 c4 08             	add    esp,0x8
c001bd22:	f7 da                	neg    edx
c001bd24:	5b                   	pop    ebx
c001bd25:	c3                   	ret    
c001bd26:	83 ec 08             	sub    esp,0x8
c001bd29:	50                   	push   eax
c001bd2a:	68 d3 c7 02 c0       	push   0xc002c7d3
c001bd2f:	e8 ad 71 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bd34:	83 c4 10             	add    esp,0x10
c001bd37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd41:	83 c4 08             	add    esp,0x8
c001bd44:	5b                   	pop    ebx
c001bd45:	c3                   	ret    

c001bd46 <sysCallTell(regs*)>:
c001bd46:	53                   	push   ebx
c001bd47:	83 ec 08             	sub    esp,0x8
c001bd4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd51:	83 f8 02             	cmp    eax,0x2
c001bd54:	76 5e                	jbe    c001bdb4 <sysCallTell(regs*)+0x6e>
c001bd56:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd5b:	77 2d                	ja     c001bd8a <sysCallTell(regs*)+0x44>
c001bd5d:	83 ec 0c             	sub    esp,0xc
c001bd60:	50                   	push   eax
c001bd61:	e8 1f 5c ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bd66:	5a                   	pop    edx
c001bd67:	59                   	pop    ecx
c001bd68:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd6b:	50                   	push   eax
c001bd6c:	e8 47 78 ff ff       	call   c00135b8 <File::tell(unsigned long long*)>
c001bd71:	83 c4 10             	add    esp,0x10
c001bd74:	85 c0                	test   eax,eax
c001bd76:	0f 95 c0             	setne  al
c001bd79:	31 d2                	xor    edx,edx
c001bd7b:	0f b6 c0             	movzx  eax,al
c001bd7e:	f7 d8                	neg    eax
c001bd80:	83 d2 00             	adc    edx,0x0
c001bd83:	83 c4 08             	add    esp,0x8
c001bd86:	f7 da                	neg    edx
c001bd88:	5b                   	pop    ebx
c001bd89:	c3                   	ret    
c001bd8a:	83 ec 08             	sub    esp,0x8
c001bd8d:	50                   	push   eax
c001bd8e:	68 ed c7 02 c0       	push   0xc002c7ed
c001bd93:	e8 49 71 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bd98:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bd9b:	83 c4 10             	add    esp,0x10
c001bd9e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bda4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdab:	31 d2                	xor    edx,edx
c001bdad:	31 c0                	xor    eax,eax
c001bdaf:	83 c4 08             	add    esp,0x8
c001bdb2:	5b                   	pop    ebx
c001bdb3:	c3                   	ret    
c001bdb4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdb9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdbe:	83 c4 08             	add    esp,0x8
c001bdc1:	5b                   	pop    ebx
c001bdc2:	c3                   	ret    

c001bdc3 <sysCallSize(regs*)>:
c001bdc3:	53                   	push   ebx
c001bdc4:	83 ec 18             	sub    esp,0x18
c001bdc7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdcb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdce:	83 f8 02             	cmp    eax,0x2
c001bdd1:	76 64                	jbe    c001be37 <sysCallSize(regs*)+0x74>
c001bdd3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdd8:	77 33                	ja     c001be0d <sysCallSize(regs*)+0x4a>
c001bdda:	83 ec 0c             	sub    esp,0xc
c001bddd:	50                   	push   eax
c001bdde:	e8 a2 5b ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bde3:	83 c4 0c             	add    esp,0xc
c001bde6:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdea:	52                   	push   edx
c001bdeb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdee:	50                   	push   eax
c001bdef:	e8 5c 79 ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c001bdf4:	83 c4 10             	add    esp,0x10
c001bdf7:	85 c0                	test   eax,eax
c001bdf9:	0f 95 c0             	setne  al
c001bdfc:	31 d2                	xor    edx,edx
c001bdfe:	0f b6 c0             	movzx  eax,al
c001be01:	f7 d8                	neg    eax
c001be03:	83 d2 00             	adc    edx,0x0
c001be06:	83 c4 18             	add    esp,0x18
c001be09:	f7 da                	neg    edx
c001be0b:	5b                   	pop    ebx
c001be0c:	c3                   	ret    
c001be0d:	83 ec 08             	sub    esp,0x8
c001be10:	50                   	push   eax
c001be11:	68 07 c8 02 c0       	push   0xc002c807
c001be16:	e8 c6 70 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001be1b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be1e:	83 c4 10             	add    esp,0x10
c001be21:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be27:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be2e:	31 d2                	xor    edx,edx
c001be30:	31 c0                	xor    eax,eax
c001be32:	83 c4 18             	add    esp,0x18
c001be35:	5b                   	pop    ebx
c001be36:	c3                   	ret    
c001be37:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be3c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be41:	83 c4 18             	add    esp,0x18
c001be44:	5b                   	pop    ebx
c001be45:	c3                   	ret    

c001be46 <sysCallSizeFromFilename(regs*)>:
c001be46:	57                   	push   edi
c001be47:	56                   	push   esi
c001be48:	53                   	push   ebx
c001be49:	83 ec 20             	sub    esp,0x20
c001be4c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be50:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be53:	83 fb 02             	cmp    ebx,0x2
c001be56:	0f 86 99 00 00 00    	jbe    c001bef5 <sysCallSizeFromFilename(regs*)+0xaf>
c001be5c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be62:	77 65                	ja     c001bec9 <sysCallSizeFromFilename(regs*)+0x83>
c001be64:	83 ec 0c             	sub    esp,0xc
c001be67:	68 14 01 00 00       	push   0x114
c001be6c:	e8 b9 3a ff ff       	call   c000f92a <malloc>
c001be71:	83 c4 0c             	add    esp,0xc
c001be74:	89 c6                	mov    esi,eax
c001be76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be7e:	53                   	push   ebx
c001be7f:	56                   	push   esi
c001be80:	e8 bb 75 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001be85:	83 c4 0c             	add    esp,0xc
c001be88:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be8c:	50                   	push   eax
c001be8d:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be90:	56                   	push   esi
c001be91:	e8 ba 78 ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c001be96:	83 c4 10             	add    esp,0x10
c001be99:	85 f6                	test   esi,esi
c001be9b:	74 14                	je     c001beb1 <sysCallSizeFromFilename(regs*)+0x6b>
c001be9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bea1:	8b 16                	mov    edx,DWORD PTR [esi]
c001bea3:	83 ec 0c             	sub    esp,0xc
c001bea6:	56                   	push   esi
c001bea7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beaa:	83 c4 10             	add    esp,0x10
c001bead:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb1:	85 c0                	test   eax,eax
c001beb3:	0f 95 c0             	setne  al
c001beb6:	31 d2                	xor    edx,edx
c001beb8:	0f b6 c0             	movzx  eax,al
c001bebb:	f7 d8                	neg    eax
c001bebd:	83 d2 00             	adc    edx,0x0
c001bec0:	83 c4 20             	add    esp,0x20
c001bec3:	f7 da                	neg    edx
c001bec5:	5b                   	pop    ebx
c001bec6:	5e                   	pop    esi
c001bec7:	5f                   	pop    edi
c001bec8:	c3                   	ret    
c001bec9:	83 ec 08             	sub    esp,0x8
c001becc:	53                   	push   ebx
c001becd:	68 07 c8 02 c0       	push   0xc002c807
c001bed2:	e8 0a 70 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bed7:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001beda:	83 c4 10             	add    esp,0x10
c001bedd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bee3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001beea:	31 d2                	xor    edx,edx
c001beec:	83 c4 20             	add    esp,0x20
c001beef:	31 c0                	xor    eax,eax
c001bef1:	5b                   	pop    ebx
c001bef2:	5e                   	pop    esi
c001bef3:	5f                   	pop    edi
c001bef4:	c3                   	ret    
c001bef5:	83 c4 20             	add    esp,0x20
c001bef8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001befd:	5b                   	pop    ebx
c001befe:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf03:	5e                   	pop    esi
c001bf04:	5f                   	pop    edi
c001bf05:	c3                   	ret    

c001bf06 <sysCallClose(regs*)>:
c001bf06:	53                   	push   ebx
c001bf07:	83 ec 08             	sub    esp,0x8
c001bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf11:	83 f8 02             	cmp    eax,0x2
c001bf14:	76 50                	jbe    c001bf66 <sysCallClose(regs*)+0x60>
c001bf16:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf1b:	74 58                	je     c001bf75 <sysCallClose(regs*)+0x6f>
c001bf1d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf22:	74 60                	je     c001bf84 <sysCallClose(regs*)+0x7e>
c001bf24:	77 2f                	ja     c001bf55 <sysCallClose(regs*)+0x4f>
c001bf26:	83 ec 0c             	sub    esp,0xc
c001bf29:	50                   	push   eax
c001bf2a:	e8 56 5a ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001bf2f:	89 c3                	mov    ebx,eax
c001bf31:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf34:	e8 c9 75 ff ff       	call   c0013502 <File::close()>
c001bf39:	83 c4 10             	add    esp,0x10
c001bf3c:	85 db                	test   ebx,ebx
c001bf3e:	74 0c                	je     c001bf4c <sysCallClose(regs*)+0x46>
c001bf40:	83 ec 0c             	sub    esp,0xc
c001bf43:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf45:	53                   	push   ebx
c001bf46:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	31 c0                	xor    eax,eax
c001bf4e:	31 d2                	xor    edx,edx
c001bf50:	83 c4 08             	add    esp,0x8
c001bf53:	5b                   	pop    ebx
c001bf54:	c3                   	ret    
c001bf55:	83 ec 08             	sub    esp,0x8
c001bf58:	50                   	push   eax
c001bf59:	68 10 c9 02 c0       	push   0xc002c910
c001bf5e:	e8 7e 6f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bf63:	83 c4 10             	add    esp,0x10
c001bf66:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf70:	83 c4 08             	add    esp,0x8
c001bf73:	5b                   	pop    ebx
c001bf74:	c3                   	ret    
c001bf75:	83 ec 0c             	sub    esp,0xc
c001bf78:	68 22 c8 02 c0       	push   0xc002c822
c001bf7d:	e8 5f 6f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001bf82:	eb c5                	jmp    c001bf49 <sysCallClose(regs*)+0x43>
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	68 30 c8 02 c0       	push   0xc002c830
c001bf8c:	eb ef                	jmp    c001bf7d <sysCallClose(regs*)+0x77>

c001bf8e <sysCallOpenDir(regs*)>:
c001bf8e:	56                   	push   esi
c001bf8f:	53                   	push   ebx
c001bf90:	53                   	push   ebx
c001bf91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf95:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf98:	85 f6                	test   esi,esi
c001bf9a:	74 59                	je     c001bff5 <sysCallOpenDir(regs*)+0x67>
c001bf9c:	83 ec 0c             	sub    esp,0xc
c001bf9f:	68 14 01 00 00       	push   0x114
c001bfa4:	e8 81 39 ff ff       	call   c000f92a <malloc>
c001bfa9:	83 c4 0c             	add    esp,0xc
c001bfac:	89 c6                	mov    esi,eax
c001bfae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfb9:	56                   	push   esi
c001bfba:	e8 2d 79 ff ff       	call   c00138ec <Directory::Directory(char const*, Process*)>
c001bfbf:	83 c4 10             	add    esp,0x10
c001bfc2:	85 f6                	test   esi,esi
c001bfc4:	74 2f                	je     c001bff5 <sysCallOpenDir(regs*)+0x67>
c001bfc6:	83 ec 0c             	sub    esp,0xc
c001bfc9:	56                   	push   esi
c001bfca:	e8 81 79 ff ff       	call   c0013950 <Directory::open()>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	85 c0                	test   eax,eax
c001bfd4:	75 1f                	jne    c001bff5 <sysCallOpenDir(regs*)+0x67>
c001bfd6:	83 ec 0c             	sub    esp,0xc
c001bfd9:	56                   	push   esi
c001bfda:	e8 b1 56 ff ff       	call   c0011690 <UnixFile::getFileDescriptor()>
c001bfdf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfe2:	83 c4 10             	add    esp,0x10
c001bfe5:	89 02                	mov    DWORD PTR [edx],eax
c001bfe7:	c1 f8 1f             	sar    eax,0x1f
c001bfea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bfed:	31 c0                	xor    eax,eax
c001bfef:	59                   	pop    ecx
c001bff0:	31 d2                	xor    edx,edx
c001bff2:	5b                   	pop    ebx
c001bff3:	5e                   	pop    esi
c001bff4:	c3                   	ret    
c001bff5:	59                   	pop    ecx
c001bff6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bffb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c000:	5b                   	pop    ebx
c001c001:	5e                   	pop    esi
c001c002:	c3                   	ret    

c001c003 <sysCallCloseDir(regs*)>:
c001c003:	53                   	push   ebx
c001c004:	83 ec 08             	sub    esp,0x8
c001c007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c00b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c00e:	83 f8 02             	cmp    eax,0x2
c001c011:	76 47                	jbe    c001c05a <sysCallCloseDir(regs*)+0x57>
c001c013:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c018:	77 2f                	ja     c001c049 <sysCallCloseDir(regs*)+0x46>
c001c01a:	83 ec 0c             	sub    esp,0xc
c001c01d:	50                   	push   eax
c001c01e:	e8 62 59 ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001c023:	89 c3                	mov    ebx,eax
c001c025:	89 04 24             	mov    DWORD PTR [esp],eax
c001c028:	e8 7f 79 ff ff       	call   c00139ac <Directory::close()>
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	85 db                	test   ebx,ebx
c001c032:	74 0c                	je     c001c040 <sysCallCloseDir(regs*)+0x3d>
c001c034:	83 ec 0c             	sub    esp,0xc
c001c037:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c039:	53                   	push   ebx
c001c03a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c03d:	83 c4 10             	add    esp,0x10
c001c040:	31 c0                	xor    eax,eax
c001c042:	31 d2                	xor    edx,edx
c001c044:	83 c4 08             	add    esp,0x8
c001c047:	5b                   	pop    ebx
c001c048:	c3                   	ret    
c001c049:	83 ec 08             	sub    esp,0x8
c001c04c:	50                   	push   eax
c001c04d:	68 38 c9 02 c0       	push   0xc002c938
c001c052:	e8 8a 6e ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c057:	83 c4 10             	add    esp,0x10
c001c05a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c05f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c064:	83 c4 08             	add    esp,0x8
c001c067:	5b                   	pop    ebx
c001c068:	c3                   	ret    

c001c069 <sysCallMakeDir(regs*)>:
c001c069:	56                   	push   esi
c001c06a:	53                   	push   ebx
c001c06b:	83 ec 10             	sub    esp,0x10
c001c06e:	68 14 01 00 00       	push   0x114
c001c073:	e8 b2 38 ff ff       	call   c000f92a <malloc>
c001c078:	83 c4 0c             	add    esp,0xc
c001c07b:	89 c3                	mov    ebx,eax
c001c07d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c082:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c085:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c089:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c08c:	53                   	push   ebx
c001c08d:	e8 5a 78 ff ff       	call   c00138ec <Directory::Directory(char const*, Process*)>
c001c092:	83 c4 10             	add    esp,0x10
c001c095:	85 db                	test   ebx,ebx
c001c097:	74 32                	je     c001c0cb <sysCallMakeDir(regs*)+0x62>
c001c099:	83 ec 0c             	sub    esp,0xc
c001c09c:	53                   	push   ebx
c001c09d:	e8 8e 7a ff ff       	call   c0013b30 <Directory::create()>
c001c0a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0a5:	89 c6                	mov    esi,eax
c001c0a7:	e8 00 79 ff ff       	call   c00139ac <Directory::close()>
c001c0ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0ae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0b4:	83 c4 10             	add    esp,0x10
c001c0b7:	31 c0                	xor    eax,eax
c001c0b9:	59                   	pop    ecx
c001c0ba:	85 f6                	test   esi,esi
c001c0bc:	5b                   	pop    ebx
c001c0bd:	0f 95 c0             	setne  al
c001c0c0:	5e                   	pop    esi
c001c0c1:	31 d2                	xor    edx,edx
c001c0c3:	f7 d8                	neg    eax
c001c0c5:	83 d2 00             	adc    edx,0x0
c001c0c8:	f7 da                	neg    edx
c001c0ca:	c3                   	ret    
c001c0cb:	59                   	pop    ecx
c001c0cc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0d1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0d6:	5b                   	pop    ebx
c001c0d7:	5e                   	pop    esi
c001c0d8:	c3                   	ret    

c001c0d9 <sysCallWait(regs*)>:
c001c0d9:	83 ec 10             	sub    esp,0x10
c001c0dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0e0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0e3:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0e6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0e9:	e8 d2 25 00 00       	call   c001e6c0 <waitTask(int, int*, int)>
c001c0ee:	83 c4 1c             	add    esp,0x1c
c001c0f1:	99                   	cdq    
c001c0f2:	c3                   	ret    

c001c0f3 <sysCallNotImpl(regs*)>:
c001c0f3:	83 ec 18             	sub    esp,0x18
c001c0f6:	68 3e c8 02 c0       	push   0xc002c83e
c001c0fb:	e8 9d e7 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001c100:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c105:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c10a:	83 c4 1c             	add    esp,0x1c
c001c10d:	c3                   	ret    

c001c10e <sysPanic(regs*)>:
c001c10e:	83 ec 18             	sub    esp,0x18
c001c111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c115:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c118:	e8 80 e7 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001c11d:	c7 04 24 58 c8 02 c0 	mov    DWORD PTR [esp],0xc002c858
c001c124:	e8 74 e7 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001c129:	b8 01 00 00 00       	mov    eax,0x1
c001c12e:	31 d2                	xor    edx,edx
c001c130:	83 c4 1c             	add    esp,0x1c
c001c133:	c3                   	ret    

c001c134 <sysCallRmdir(regs*)>:
c001c134:	56                   	push   esi
c001c135:	53                   	push   ebx
c001c136:	83 ec 20             	sub    esp,0x20
c001c139:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c13d:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c140:	68 14 01 00 00       	push   0x114
c001c145:	e8 e0 37 ff ff       	call   c000f92a <malloc>
c001c14a:	83 c4 0c             	add    esp,0xc
c001c14d:	89 c3                	mov    ebx,eax
c001c14f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c154:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c157:	56                   	push   esi
c001c158:	53                   	push   ebx
c001c159:	e8 e2 72 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001c15e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c161:	e8 b6 74 ff ff       	call   c001361c <File::unlink()>
c001c166:	83 c4 10             	add    esp,0x10
c001c169:	85 db                	test   ebx,ebx
c001c16b:	74 14                	je     c001c181 <sysCallRmdir(regs*)+0x4d>
c001c16d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c171:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c173:	83 ec 0c             	sub    esp,0xc
c001c176:	53                   	push   ebx
c001c177:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c17a:	83 c4 10             	add    esp,0x10
c001c17d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c181:	85 c0                	test   eax,eax
c001c183:	0f 95 c0             	setne  al
c001c186:	31 d2                	xor    edx,edx
c001c188:	0f b6 c0             	movzx  eax,al
c001c18b:	f7 d8                	neg    eax
c001c18d:	83 d2 00             	adc    edx,0x0
c001c190:	83 c4 14             	add    esp,0x14
c001c193:	f7 da                	neg    edx
c001c195:	5b                   	pop    ebx
c001c196:	5e                   	pop    esi
c001c197:	c3                   	ret    

c001c198 <sysCallUnlink(regs*)>:
c001c198:	56                   	push   esi
c001c199:	53                   	push   ebx
c001c19a:	83 ec 20             	sub    esp,0x20
c001c19d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1a1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1a4:	68 14 01 00 00       	push   0x114
c001c1a9:	e8 7c 37 ff ff       	call   c000f92a <malloc>
c001c1ae:	83 c4 0c             	add    esp,0xc
c001c1b1:	89 c3                	mov    ebx,eax
c001c1b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1b8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1bb:	56                   	push   esi
c001c1bc:	53                   	push   ebx
c001c1bd:	e8 7e 72 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001c1c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1c5:	e8 52 74 ff ff       	call   c001361c <File::unlink()>
c001c1ca:	83 c4 10             	add    esp,0x10
c001c1cd:	85 db                	test   ebx,ebx
c001c1cf:	74 14                	je     c001c1e5 <sysCallUnlink(regs*)+0x4d>
c001c1d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1d5:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1d7:	83 ec 0c             	sub    esp,0xc
c001c1da:	53                   	push   ebx
c001c1db:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1de:	83 c4 10             	add    esp,0x10
c001c1e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1e5:	85 c0                	test   eax,eax
c001c1e7:	0f 95 c0             	setne  al
c001c1ea:	31 d2                	xor    edx,edx
c001c1ec:	0f b6 c0             	movzx  eax,al
c001c1ef:	f7 d8                	neg    eax
c001c1f1:	83 d2 00             	adc    edx,0x0
c001c1f4:	83 c4 14             	add    esp,0x14
c001c1f7:	f7 da                	neg    edx
c001c1f9:	5b                   	pop    ebx
c001c1fa:	5e                   	pop    esi
c001c1fb:	c3                   	ret    

c001c1fc <sysCallGetArgv(regs*)>:
c001c1fc:	83 ec 0c             	sub    esp,0xc
c001c1ff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c203:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c206:	85 c0                	test   eax,eax
c001c208:	78 2b                	js     c001c235 <sysCallGetArgv(regs*)+0x39>
c001c20a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c210:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c213:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c219:	7d 1a                	jge    c001c235 <sysCallGetArgv(regs*)+0x39>
c001c21b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c222:	85 c0                	test   eax,eax
c001c224:	74 17                	je     c001c23d <sysCallGetArgv(regs*)+0x41>
c001c226:	83 ec 08             	sub    esp,0x8
c001c229:	50                   	push   eax
c001c22a:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c22d:	e8 26 46 fe ff       	call   c0000858 <strcpy>
c001c232:	83 c4 10             	add    esp,0x10
c001c235:	31 c0                	xor    eax,eax
c001c237:	31 d2                	xor    edx,edx
c001c239:	83 c4 0c             	add    esp,0xc
c001c23c:	c3                   	ret    
c001c23d:	b8 01 00 00 00       	mov    eax,0x1
c001c242:	31 d2                	xor    edx,edx
c001c244:	83 c4 0c             	add    esp,0xc
c001c247:	c3                   	ret    

c001c248 <sysCallTTYName(regs*)>:
c001c248:	56                   	push   esi
c001c249:	53                   	push   ebx
c001c24a:	53                   	push   ebx
c001c24b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c24f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c252:	85 c0                	test   eax,eax
c001c254:	74 5f                	je     c001c2b5 <sysCallTTYName(regs*)+0x6d>
c001c256:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c259:	83 f8 02             	cmp    eax,0x2
c001c25c:	77 3e                	ja     c001c29c <sysCallTTYName(regs*)+0x54>
c001c25e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c263:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c266:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c26c:	85 db                	test   ebx,ebx
c001c26e:	74 45                	je     c001c2b5 <sysCallTTYName(regs*)+0x6d>
c001c270:	83 ec 0c             	sub    esp,0xc
c001c273:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c275:	53                   	push   ebx
c001c276:	ff 10                	call   DWORD PTR [eax]
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	84 c0                	test   al,al
c001c27d:	74 41                	je     c001c2c0 <sysCallTTYName(regs*)+0x78>
c001c27f:	83 ec 08             	sub    esp,0x8
c001c282:	81 c3 82 00 00 00    	add    ebx,0x82
c001c288:	53                   	push   ebx
c001c289:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c28c:	e8 c7 45 fe ff       	call   c0000858 <strcpy>
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	31 c0                	xor    eax,eax
c001c296:	59                   	pop    ecx
c001c297:	31 d2                	xor    edx,edx
c001c299:	5b                   	pop    ebx
c001c29a:	5e                   	pop    esi
c001c29b:	c3                   	ret    
c001c29c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c2a1:	74 bb                	je     c001c25e <sysCallTTYName(regs*)+0x16>
c001c2a3:	83 ec 0c             	sub    esp,0xc
c001c2a6:	50                   	push   eax
c001c2a7:	e8 d9 56 ff ff       	call   c0011985 <getFromFileDescriptor(int)>
c001c2ac:	83 c4 10             	add    esp,0x10
c001c2af:	89 c3                	mov    ebx,eax
c001c2b1:	85 db                	test   ebx,ebx
c001c2b3:	75 bb                	jne    c001c270 <sysCallTTYName(regs*)+0x28>
c001c2b5:	59                   	pop    ecx
c001c2b6:	b8 01 00 00 00       	mov    eax,0x1
c001c2bb:	31 d2                	xor    edx,edx
c001c2bd:	5b                   	pop    ebx
c001c2be:	5e                   	pop    esi
c001c2bf:	c3                   	ret    
c001c2c0:	59                   	pop    ecx
c001c2c1:	b8 02 00 00 00       	mov    eax,0x2
c001c2c6:	31 d2                	xor    edx,edx
c001c2c8:	5b                   	pop    ebx
c001c2c9:	5e                   	pop    esi
c001c2ca:	c3                   	ret    

c001c2cb <sysCallUSleep(regs*)>:
c001c2cb:	83 ec 14             	sub    esp,0x14
c001c2ce:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2d3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2d7:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2de:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2e1:	01 ca                	add    edx,ecx
c001c2e3:	52                   	push   edx
c001c2e4:	50                   	push   eax
c001c2e5:	e8 ad 24 00 00       	call   c001e797 <nanoSleep(unsigned long long)>
c001c2ea:	31 c0                	xor    eax,eax
c001c2ec:	31 d2                	xor    edx,edx
c001c2ee:	83 c4 1c             	add    esp,0x1c
c001c2f1:	c3                   	ret    

c001c2f2 <sysCallSpawn(regs*)>:
c001c2f2:	56                   	push   esi
c001c2f3:	53                   	push   ebx
c001c2f4:	50                   	push   eax
c001c2f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2f9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2fc:	85 c0                	test   eax,eax
c001c2fe:	75 08                	jne    c001c308 <sysCallSpawn(regs*)+0x16>
c001c300:	59                   	pop    ecx
c001c301:	31 c0                	xor    eax,eax
c001c303:	31 d2                	xor    edx,edx
c001c305:	5b                   	pop    ebx
c001c306:	5e                   	pop    esi
c001c307:	c3                   	ret    
c001c308:	83 ec 08             	sub    esp,0x8
c001c30b:	50                   	push   eax
c001c30c:	68 67 c8 02 c0       	push   0xc002c867
c001c311:	e8 cb 6b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c316:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c31d:	e8 08 36 ff ff       	call   c000f92a <malloc>
c001c322:	83 c4 10             	add    esp,0x10
c001c325:	89 c6                	mov    esi,eax
c001c327:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c32a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c32d:	85 c0                	test   eax,eax
c001c32f:	75 32                	jne    c001c363 <sysCallSpawn(regs*)+0x71>
c001c331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c336:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c339:	52                   	push   edx
c001c33a:	50                   	push   eax
c001c33b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c33e:	56                   	push   esi
c001c33f:	e8 30 1b 00 00       	call   c001de74 <Process::Process(char const*, Process*, char**)>
c001c344:	83 c4 10             	add    esp,0x10
c001c347:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c34e:	75 b0                	jne    c001c300 <sysCallSpawn(regs*)+0xe>
c001c350:	83 ec 0c             	sub    esp,0xc
c001c353:	56                   	push   esi
c001c354:	e8 fd 1f 00 00       	call   c001e356 <Process::createUserThread()>
c001c359:	8b 06                	mov    eax,DWORD PTR [esi]
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	99                   	cdq    
c001c35f:	59                   	pop    ecx
c001c360:	5b                   	pop    ebx
c001c361:	5e                   	pop    esi
c001c362:	c3                   	ret    
c001c363:	31 c0                	xor    eax,eax
c001c365:	eb d2                	jmp    c001c339 <sysCallSpawn(regs*)+0x47>

c001c367 <sysCallGetEnv(regs*)>:
c001c367:	55                   	push   ebp
c001c368:	57                   	push   edi
c001c369:	56                   	push   esi
c001c36a:	53                   	push   ebx
c001c36b:	83 ec 28             	sub    esp,0x28
c001c36e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c372:	68 75 c8 02 c0       	push   0xc002c875
c001c377:	e8 65 6b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c37c:	5f                   	pop    edi
c001c37d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c380:	5d                   	pop    ebp
c001c381:	53                   	push   ebx
c001c382:	68 a2 cb 02 c0       	push   0xc002cba2
c001c387:	e8 55 6b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c38c:	58                   	pop    eax
c001c38d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c390:	5a                   	pop    edx
c001c391:	57                   	push   edi
c001c392:	68 7e c8 02 c0       	push   0xc002c87e
c001c397:	e8 45 6b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c39c:	59                   	pop    ecx
c001c39d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3a2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3a5:	e8 0f e4 ff ff       	call   c001a7b9 <Krnl::getProcessTotalEnvCount(Process*)>
c001c3aa:	5a                   	pop    edx
c001c3ab:	89 c5                	mov    ebp,eax
c001c3ad:	59                   	pop    ecx
c001c3ae:	50                   	push   eax
c001c3af:	68 88 c8 02 c0       	push   0xc002c888
c001c3b4:	e8 28 6b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c3b9:	83 c4 10             	add    esp,0x10
c001c3bc:	39 ef                	cmp    edi,ebp
c001c3be:	7c 15                	jl     c001c3d5 <sysCallGetEnv(regs*)+0x6e>
c001c3c0:	85 db                	test   ebx,ebx
c001c3c2:	75 0c                	jne    c001c3d0 <sysCallGetEnv(regs*)+0x69>
c001c3c4:	83 c4 1c             	add    esp,0x1c
c001c3c7:	31 c0                	xor    eax,eax
c001c3c9:	5b                   	pop    ebx
c001c3ca:	31 d2                	xor    edx,edx
c001c3cc:	5e                   	pop    esi
c001c3cd:	5f                   	pop    edi
c001c3ce:	5d                   	pop    ebp
c001c3cf:	c3                   	ret    
c001c3d0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3d3:	eb ef                	jmp    c001c3c4 <sysCallGetEnv(regs*)+0x5d>
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	68 94 c8 02 c0       	push   0xc002c894
c001c3dd:	e8 ff 6a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c3e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3e6:	83 c4 0c             	add    esp,0xc
c001c3e9:	57                   	push   edi
c001c3ea:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3f0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3f3:	50                   	push   eax
c001c3f4:	e8 e0 e3 ff ff       	call   c001a7d9 <Krnl::getProcessEnvPair(Process*, int)>
c001c3f9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c3fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c401:	68 53 cc 02 c0       	push   0xc002cc53
c001c406:	e8 d6 6a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c411:	85 f6                	test   esi,esi
c001c413:	75 47                	jne    c001c45c <sysCallGetEnv(regs*)+0xf5>
c001c415:	83 ec 0c             	sub    esp,0xc
c001c418:	55                   	push   ebp
c001c419:	e8 9a 43 fe ff       	call   c00007b8 <strlen>
c001c41e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c421:	89 c3                	mov    ebx,eax
c001c423:	e8 90 43 fe ff       	call   c00007b8 <strlen>
c001c428:	5a                   	pop    edx
c001c429:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c42d:	59                   	pop    ecx
c001c42e:	50                   	push   eax
c001c42f:	68 97 c8 02 c0       	push   0xc002c897
c001c434:	e8 a8 6a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c439:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c43c:	e8 77 43 fe ff       	call   c00007b8 <strlen>
c001c441:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c444:	89 c3                	mov    ebx,eax
c001c446:	e8 6d 43 fe ff       	call   c00007b8 <strlen>
c001c44b:	83 c4 10             	add    esp,0x10
c001c44e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c452:	83 c4 1c             	add    esp,0x1c
c001c455:	31 d2                	xor    edx,edx
c001c457:	5b                   	pop    ebx
c001c458:	5e                   	pop    esi
c001c459:	5f                   	pop    edi
c001c45a:	5d                   	pop    ebp
c001c45b:	c3                   	ret    
c001c45c:	83 ec 0c             	sub    esp,0xc
c001c45f:	68 6d cc 02 c0       	push   0xc002cc6d
c001c464:	e8 78 6a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c469:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c46c:	58                   	pop    eax
c001c46d:	5a                   	pop    edx
c001c46e:	55                   	push   ebp
c001c46f:	53                   	push   ebx
c001c470:	e8 e3 43 fe ff       	call   c0000858 <strcpy>
c001c475:	59                   	pop    ecx
c001c476:	5e                   	pop    esi
c001c477:	68 a1 c8 02 c0       	push   0xc002c8a1
c001c47c:	53                   	push   ebx
c001c47d:	e8 16 45 fe ff       	call   c0000998 <strcat>
c001c482:	5d                   	pop    ebp
c001c483:	58                   	pop    eax
c001c484:	57                   	push   edi
c001c485:	53                   	push   ebx
c001c486:	e8 0d 45 fe ff       	call   c0000998 <strcat>
c001c48b:	c7 04 24 87 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc87
c001c492:	e8 4a 6a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c497:	83 c4 10             	add    esp,0x10
c001c49a:	e9 25 ff ff ff       	jmp    c001c3c4 <sysCallGetEnv(regs*)+0x5d>

c001c49f <sysAppSettings(regs*)>:
c001c49f:	53                   	push   ebx
c001c4a0:	83 ec 08             	sub    esp,0x8
c001c4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c4aa:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c4b0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c4b5:	66 3d c0 09          	cmp    ax,0x9c0
c001c4b9:	75 2f                	jne    c001c4ea <sysAppSettings(regs*)+0x4b>
c001c4bb:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c4c1:	83 e0 1f             	and    eax,0x1f
c001c4c4:	3c 01                	cmp    al,0x1
c001c4c6:	74 2e                	je     c001c4f6 <sysAppSettings(regs*)+0x57>
c001c4c8:	3c 07                	cmp    al,0x7
c001c4ca:	0f 84 bd 00 00 00    	je     c001c58d <sysAppSettings(regs*)+0xee>
c001c4d0:	84 c0                	test   al,al
c001c4d2:	0f 84 dc 00 00 00    	je     c001c5b4 <sysAppSettings(regs*)+0x115>
c001c4d8:	3c 08                	cmp    al,0x8
c001c4da:	74 6d                	je     c001c549 <sysAppSettings(regs*)+0xaa>
c001c4dc:	0f b6 c0             	movzx  eax,al
c001c4df:	83 c4 08             	add    esp,0x8
c001c4e2:	05 e8 03 00 00       	add    eax,0x3e8
c001c4e7:	5b                   	pop    ebx
c001c4e8:	99                   	cdq    
c001c4e9:	c3                   	ret    
c001c4ea:	b8 01 00 00 00       	mov    eax,0x1
c001c4ef:	31 d2                	xor    edx,edx
c001c4f1:	83 c4 08             	add    esp,0x8
c001c4f4:	5b                   	pop    ebx
c001c4f5:	c3                   	ret    
c001c4f6:	51                   	push   ecx
c001c4f7:	68 00 01 00 00       	push   0x100
c001c4fc:	6a 00                	push   0x0
c001c4fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c503:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c506:	83 c0 0c             	add    eax,0xc
c001c509:	50                   	push   eax
c001c50a:	e8 8d 42 fe ff       	call   c000079c <memset>
c001c50f:	83 c4 0c             	add    esp,0xc
c001c512:	68 ff 00 00 00       	push   0xff
c001c517:	53                   	push   ebx
c001c518:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c51d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c520:	83 c0 0c             	add    eax,0xc
c001c523:	50                   	push   eax
c001c524:	e8 3f 42 fe ff       	call   c0000768 <memcpy>
c001c529:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c52e:	5b                   	pop    ebx
c001c52f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c532:	5a                   	pop    edx
c001c533:	8d 50 0c             	lea    edx,[eax+0xc]
c001c536:	52                   	push   edx
c001c537:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c53d:	e8 6e 46 ff ff       	call   c0010bb0 <VgaText::setTitle(char*)>
c001c542:	83 c4 10             	add    esp,0x10
c001c545:	31 c0                	xor    eax,eax
c001c547:	eb a6                	jmp    c001c4ef <sysAppSettings(regs*)+0x50>
c001c549:	83 ec 08             	sub    esp,0x8
c001c54c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c552:	83 e0 0f             	and    eax,0xf
c001c555:	50                   	push   eax
c001c556:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c55b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c55e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c564:	e8 39 46 ff ff       	call   c0010ba2 <VgaText::setTitleColour(VgaColour)>
c001c569:	58                   	pop    eax
c001c56a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c570:	5a                   	pop    edx
c001c571:	c1 e8 04             	shr    eax,0x4
c001c574:	83 e0 0f             	and    eax,0xf
c001c577:	50                   	push   eax
c001c578:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c57d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c580:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c586:	e8 09 46 ff ff       	call   c0010b94 <VgaText::setTitleTextColour(VgaColour)>
c001c58b:	eb b5                	jmp    c001c542 <sysAppSettings(regs*)+0xa3>
c001c58d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c592:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c595:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c59b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c5a1:	c0 e8 06             	shr    al,0x6
c001c5a4:	83 e0 01             	and    eax,0x1
c001c5a7:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c5ad:	31 c0                	xor    eax,eax
c001c5af:	e9 3b ff ff ff       	jmp    c001c4ef <sysAppSettings(regs*)+0x50>
c001c5b4:	b8 02 00 00 00       	mov    eax,0x2
c001c5b9:	e9 31 ff ff ff       	jmp    c001c4ef <sysAppSettings(regs*)+0x50>

c001c5be <sysSetFatAttrib(regs*)>:
c001c5be:	57                   	push   edi
c001c5bf:	56                   	push   esi
c001c5c0:	53                   	push   ebx
c001c5c1:	83 ec 1c             	sub    esp,0x1c
c001c5c4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5c8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5cb:	68 14 01 00 00       	push   0x114
c001c5d0:	e8 55 33 ff ff       	call   c000f92a <malloc>
c001c5d5:	83 c4 0c             	add    esp,0xc
c001c5d8:	89 c3                	mov    ebx,eax
c001c5da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5df:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5e2:	57                   	push   edi
c001c5e3:	53                   	push   ebx
c001c5e4:	e8 57 6e ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001c5e9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5ec:	83 c4 0c             	add    esp,0xc
c001c5ef:	0f b6 d4             	movzx  edx,ah
c001c5f2:	0f b6 c0             	movzx  eax,al
c001c5f5:	52                   	push   edx
c001c5f6:	50                   	push   eax
c001c5f7:	53                   	push   ebx
c001c5f8:	e8 b9 70 ff ff       	call   c00136b6 <File::chfatattr(unsigned char, unsigned char)>
c001c5fd:	83 c4 10             	add    esp,0x10
c001c600:	85 db                	test   ebx,ebx
c001c602:	74 14                	je     c001c618 <sysSetFatAttrib(regs*)+0x5a>
c001c604:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c608:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c60a:	83 ec 0c             	sub    esp,0xc
c001c60d:	53                   	push   ebx
c001c60e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c611:	83 c4 10             	add    esp,0x10
c001c614:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c618:	85 c0                	test   eax,eax
c001c61a:	0f 95 c0             	setne  al
c001c61d:	31 d2                	xor    edx,edx
c001c61f:	0f b6 c0             	movzx  eax,al
c001c622:	f7 d8                	neg    eax
c001c624:	83 d2 00             	adc    edx,0x0
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	f7 da                	neg    edx
c001c62c:	5b                   	pop    ebx
c001c62d:	5e                   	pop    esi
c001c62e:	5f                   	pop    edi
c001c62f:	c3                   	ret    

c001c630 <sysPipe(regs*)>:
c001c630:	57                   	push   edi
c001c631:	56                   	push   esi
c001c632:	53                   	push   ebx
c001c633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c63d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c640:	6a 20                	push   0x20
c001c642:	e8 e3 32 ff ff       	call   c000f92a <malloc>
c001c647:	89 c3                	mov    ebx,eax
c001c649:	58                   	pop    eax
c001c64a:	5a                   	pop    edx
c001c64b:	68 00 50 00 00       	push   0x5000
c001c650:	53                   	push   ebx
c001c651:	e8 02 3f ff ff       	call   c0010558 <Pipe::Pipe(int)>
c001c656:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c659:	e8 32 50 ff ff       	call   c0011690 <UnixFile::getFileDescriptor()>
c001c65e:	89 07                	mov    DWORD PTR [edi],eax
c001c660:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c663:	e8 28 50 ff ff       	call   c0011690 <UnixFile::getFileDescriptor()>
c001c668:	83 c4 10             	add    esp,0x10
c001c66b:	89 06                	mov    DWORD PTR [esi],eax
c001c66d:	31 d2                	xor    edx,edx
c001c66f:	5b                   	pop    ebx
c001c670:	31 c0                	xor    eax,eax
c001c672:	5e                   	pop    esi
c001c673:	5f                   	pop    edi
c001c674:	c3                   	ret    

c001c675 <sysGetUnixTime(regs*)>:
c001c675:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001c67a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c680:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c684:	e9 a9 77 ff ff       	jmp    c0013e32 <Clock::timeInSecondsLocal()>

c001c689 <string_ends_with(char const*, char const*)>:
c001c689:	57                   	push   edi
c001c68a:	56                   	push   esi
c001c68b:	53                   	push   ebx
c001c68c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c690:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c694:	83 ec 0c             	sub    esp,0xc
c001c697:	53                   	push   ebx
c001c698:	e8 1b 41 fe ff       	call   c00007b8 <strlen>
c001c69d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c6a0:	89 c6                	mov    esi,eax
c001c6a2:	e8 11 41 fe ff       	call   c00007b8 <strlen>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	39 c6                	cmp    esi,eax
c001c6ac:	7d 06                	jge    c001c6b4 <string_ends_with(char const*, char const*)+0x2b>
c001c6ae:	5b                   	pop    ebx
c001c6af:	31 c0                	xor    eax,eax
c001c6b1:	5e                   	pop    esi
c001c6b2:	5f                   	pop    edi
c001c6b3:	c3                   	ret    
c001c6b4:	83 ec 08             	sub    esp,0x8
c001c6b7:	29 c6                	sub    esi,eax
c001c6b9:	57                   	push   edi
c001c6ba:	01 f3                	add    ebx,esi
c001c6bc:	53                   	push   ebx
c001c6bd:	e8 22 42 fe ff       	call   c00008e4 <strcmp>
c001c6c2:	83 c4 10             	add    esp,0x10
c001c6c5:	85 c0                	test   eax,eax
c001c6c7:	5b                   	pop    ebx
c001c6c8:	0f 94 c0             	sete   al
c001c6cb:	5e                   	pop    esi
c001c6cc:	0f b6 c0             	movzx  eax,al
c001c6cf:	5f                   	pop    edi
c001c6d0:	c3                   	ret    

c001c6d1 <sysCallOpen(regs*)>:
c001c6d1:	56                   	push   esi
c001c6d2:	53                   	push   ebx
c001c6d3:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6d9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6e0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6e3:	85 c9                	test   ecx,ecx
c001c6e5:	0f 84 b3 00 00 00    	je     c001c79e <sysCallOpen(regs*)+0xcd>
c001c6eb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6ee:	85 c0                	test   eax,eax
c001c6f0:	0f 84 a8 00 00 00    	je     c001c79e <sysCallOpen(regs*)+0xcd>
c001c6f6:	52                   	push   edx
c001c6f7:	68 a3 c8 02 c0       	push   0xc002c8a3
c001c6fc:	50                   	push   eax
c001c6fd:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c701:	56                   	push   esi
c001c702:	e8 8f 6b ff ff       	call   c0013296 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c707:	89 34 24             	mov    DWORD PTR [esp],esi
c001c70a:	e8 a9 40 fe ff       	call   c00007b8 <strlen>
c001c70f:	83 c4 10             	add    esp,0x10
c001c712:	48                   	dec    eax
c001c713:	74 1d                	je     c001c732 <sysCallOpen(regs*)+0x61>
c001c715:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c718:	eb 0f                	jmp    c001c729 <sysCallOpen(regs*)+0x58>
c001c71a:	80 fa 3a             	cmp    dl,0x3a
c001c71d:	74 0f                	je     c001c72e <sysCallOpen(regs*)+0x5d>
c001c71f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c723:	48                   	dec    eax
c001c724:	74 0c                	je     c001c732 <sysCallOpen(regs*)+0x61>
c001c726:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c729:	80 fa 2e             	cmp    dl,0x2e
c001c72c:	75 ec                	jne    c001c71a <sysCallOpen(regs*)+0x49>
c001c72e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c732:	83 ec 08             	sub    esp,0x8
c001c735:	68 a7 c8 02 c0       	push   0xc002c8a7
c001c73a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c73d:	e8 47 ff ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c742:	83 c4 10             	add    esp,0x10
c001c745:	85 c0                	test   eax,eax
c001c747:	75 17                	jne    c001c760 <sysCallOpen(regs*)+0x8f>
c001c749:	83 ec 08             	sub    esp,0x8
c001c74c:	68 c8 c8 02 c0       	push   0xc002c8c8
c001c751:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c754:	e8 30 ff ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	85 c0                	test   eax,eax
c001c75e:	74 51                	je     c001c7b1 <sysCallOpen(regs*)+0xe0>
c001c760:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c763:	83 ec 08             	sub    esp,0x8
c001c766:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c773:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c776:	ff 30                	push   DWORD PTR [eax]
c001c778:	68 ac c8 02 c0       	push   0xc002c8ac
c001c77d:	e8 5f 67 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c782:	c7 04 24 bb c8 02 c0 	mov    DWORD PTR [esp],0xc002c8bb
c001c789:	e8 53 67 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001c78e:	83 c4 10             	add    esp,0x10
c001c791:	81 c4 04 01 00 00    	add    esp,0x104
c001c797:	31 c0                	xor    eax,eax
c001c799:	31 d2                	xor    edx,edx
c001c79b:	5b                   	pop    ebx
c001c79c:	5e                   	pop    esi
c001c79d:	c3                   	ret    
c001c79e:	81 c4 04 01 00 00    	add    esp,0x104
c001c7a4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c7ae:	5b                   	pop    ebx
c001c7af:	5e                   	pop    esi
c001c7b0:	c3                   	ret    
c001c7b1:	83 ec 08             	sub    esp,0x8
c001c7b4:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c7b9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7bc:	e8 23 41 fe ff       	call   c00008e4 <strcmp>
c001c7c1:	83 c4 10             	add    esp,0x10
c001c7c4:	85 c0                	test   eax,eax
c001c7c6:	74 98                	je     c001c760 <sysCallOpen(regs*)+0x8f>
c001c7c8:	83 ec 08             	sub    esp,0x8
c001c7cb:	68 a7 c8 02 c0       	push   0xc002c8a7
c001c7d0:	56                   	push   esi
c001c7d1:	e8 b3 fe ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c7d6:	83 c4 10             	add    esp,0x10
c001c7d9:	85 c0                	test   eax,eax
c001c7db:	75 83                	jne    c001c760 <sysCallOpen(regs*)+0x8f>
c001c7dd:	83 ec 08             	sub    esp,0x8
c001c7e0:	68 cd c8 02 c0       	push   0xc002c8cd
c001c7e5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7e8:	e8 9c fe ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c7ed:	83 c4 10             	add    esp,0x10
c001c7f0:	85 c0                	test   eax,eax
c001c7f2:	0f 85 d9 00 00 00    	jne    c001c8d1 <sysCallOpen(regs*)+0x200>
c001c7f8:	83 ec 08             	sub    esp,0x8
c001c7fb:	68 d2 c8 02 c0       	push   0xc002c8d2
c001c800:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c803:	e8 81 fe ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c808:	83 c4 10             	add    esp,0x10
c001c80b:	85 c0                	test   eax,eax
c001c80d:	0f 85 be 00 00 00    	jne    c001c8d1 <sysCallOpen(regs*)+0x200>
c001c813:	83 ec 08             	sub    esp,0x8
c001c816:	68 ce c8 02 c0       	push   0xc002c8ce
c001c81b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c81e:	e8 c1 40 fe ff       	call   c00008e4 <strcmp>
c001c823:	83 c4 10             	add    esp,0x10
c001c826:	85 c0                	test   eax,eax
c001c828:	0f 84 a3 00 00 00    	je     c001c8d1 <sysCallOpen(regs*)+0x200>
c001c82e:	83 ec 08             	sub    esp,0x8
c001c831:	68 cd c8 02 c0       	push   0xc002c8cd
c001c836:	56                   	push   esi
c001c837:	e8 4d fe ff ff       	call   c001c689 <string_ends_with(char const*, char const*)>
c001c83c:	83 c4 10             	add    esp,0x10
c001c83f:	85 c0                	test   eax,eax
c001c841:	0f 85 8a 00 00 00    	jne    c001c8d1 <sysCallOpen(regs*)+0x200>
c001c847:	83 ec 0c             	sub    esp,0xc
c001c84a:	68 14 01 00 00       	push   0x114
c001c84f:	e8 d6 30 ff ff       	call   c000f92a <malloc>
c001c854:	83 c4 0c             	add    esp,0xc
c001c857:	89 c6                	mov    esi,eax
c001c859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c85e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c861:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c864:	56                   	push   esi
c001c865:	e8 d6 6b ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001c86a:	83 c4 10             	add    esp,0x10
c001c86d:	85 f6                	test   esi,esi
c001c86f:	0f 84 29 ff ff ff    	je     c001c79e <sysCallOpen(regs*)+0xcd>
c001c875:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c878:	0f b6 c2             	movzx  eax,dl
c001c87b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c87e:	89 d0                	mov    eax,edx
c001c880:	83 e0 01             	and    eax,0x1
c001c883:	f6 c2 02             	test   dl,0x2
c001c886:	74 03                	je     c001c88b <sysCallOpen(regs*)+0x1ba>
c001c888:	83 c8 02             	or     eax,0x2
c001c88b:	f6 c2 04             	test   dl,0x4
c001c88e:	74 03                	je     c001c893 <sysCallOpen(regs*)+0x1c2>
c001c890:	83 c8 04             	or     eax,0x4
c001c893:	f6 c2 08             	test   dl,0x8
c001c896:	74 03                	je     c001c89b <sysCallOpen(regs*)+0x1ca>
c001c898:	83 c8 0a             	or     eax,0xa
c001c89b:	83 e2 10             	and    edx,0x10
c001c89e:	74 03                	je     c001c8a3 <sysCallOpen(regs*)+0x1d2>
c001c8a0:	83 c8 12             	or     eax,0x12
c001c8a3:	83 ec 08             	sub    esp,0x8
c001c8a6:	50                   	push   eax
c001c8a7:	56                   	push   esi
c001c8a8:	e8 f7 6b ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001c8ad:	83 c4 10             	add    esp,0x10
c001c8b0:	85 c0                	test   eax,eax
c001c8b2:	0f 85 e6 fe ff ff    	jne    c001c79e <sysCallOpen(regs*)+0xcd>
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	56                   	push   esi
c001c8bc:	e8 cf 4d ff ff       	call   c0011690 <UnixFile::getFileDescriptor()>
c001c8c1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8c4:	89 02                	mov    DWORD PTR [edx],eax
c001c8c6:	c1 f8 1f             	sar    eax,0x1f
c001c8c9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8cc:	e9 bd fe ff ff       	jmp    c001c78e <sysCallOpen(regs*)+0xbd>
c001c8d1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8d4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8e1:	e9 ab fe ff ff       	jmp    c001c791 <sysCallOpen(regs*)+0xc0>

c001c8e6 <Sys::loadSyscalls()>:
c001c8e6:	c7 05 c0 19 03 c0 cb b9 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001b9cb
c001c8f0:	c7 05 c4 19 03 c0 32 b5 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001b532
c001c8fa:	c7 05 c8 19 03 c0 1e b7 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001b71e
c001c904:	c7 05 cc 19 03 c0 01 b9 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001b901
c001c90e:	c7 05 d0 19 03 c0 b6 b6 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001b6b6
c001c918:	c7 05 d4 19 03 c0 69 b5 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001b569
c001c922:	c7 05 d8 19 03 c0 4a b5 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001b54a
c001c92c:	c7 05 dc 19 03 c0 73 b7 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001b773
c001c936:	c7 05 e4 19 03 c0 06 bf 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001bf06
c001c940:	c7 05 e0 19 03 c0 d1 c6 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001c6d1
c001c94a:	c7 05 e8 19 03 c0 8e bf 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001bf8e
c001c954:	c7 05 ec 19 03 c0 f5 bb 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001bbf5
c001c95e:	c7 05 f0 19 03 c0 11 ba 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001ba11
c001c968:	c7 05 f4 19 03 c0 16 ba 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001ba16
c001c972:	c7 05 f8 19 03 c0 69 c0 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001c069
c001c97c:	c7 05 fc 19 03 c0 03 c0 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001c003
c001c986:	c7 05 00 1a 03 c0 dd bc 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001bcdd
c001c990:	c7 05 04 1a 03 c0 46 bd 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bd46
c001c99a:	c7 05 08 1a 03 c0 c3 bd 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001bdc3
c001c9a4:	c7 05 0c 1a 03 c0 1b ba 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001ba1b
c001c9ae:	c7 05 10 1a 03 c0 d9 c0 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001c0d9
c001c9b8:	c7 05 14 1a 03 c0 f3 c0 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001c0f3
c001c9c2:	c7 05 18 1a 03 c0 f3 c0 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c0f3
c001c9cc:	c7 05 1c 1a 03 c0 34 c1 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001c134
c001c9d6:	c7 05 20 1a 03 c0 98 c1 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001c198
c001c9e0:	c7 05 24 1a 03 c0 c7 bb 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001bbc7
c001c9ea:	c7 05 28 1a 03 c0 fc c1 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001c1fc
c001c9f4:	c7 05 2c 1a 03 c0 84 bb 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001bb84
c001c9fe:	c7 05 30 1a 03 c0 48 c2 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001c248
c001ca08:	c7 05 34 1a 03 c0 83 bc 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001bc83
c001ca12:	c7 05 38 1a 03 c0 cb c2 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c2cb
c001ca1c:	c7 05 3c 1a 03 c0 46 be 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001be46
c001ca26:	c7 05 40 1a 03 c0 f2 c2 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001c2f2
c001ca30:	c7 05 44 1a 03 c0 67 c3 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001c367
c001ca3a:	c7 05 48 1a 03 c0 9f c4 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c49f
c001ca44:	c7 05 4c 1a 03 c0 25 ba 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001ba25
c001ca4e:	c7 05 50 1a 03 c0 8f ba 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001ba8f
c001ca58:	c7 05 54 1a 03 c0 d5 ba 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001bad5
c001ca62:	c7 05 58 1a 03 c0 be c5 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001c5be
c001ca6c:	c7 05 5c 1a 03 c0 0e c1 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001c10e
c001ca76:	c7 05 60 1a 03 c0 26 bb 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001bb26
c001ca80:	c7 05 64 1a 03 c0 30 c6 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001c630
c001ca8a:	c7 05 68 1a 03 c0 75 c6 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001c675
c001ca94:	c7 05 6c 1a 03 c0 0e b6 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001b60e
c001ca9e:	c7 05 70 1a 03 c0 8f b7 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001b78f
c001caa8:	c7 05 74 1a 03 c0 b7 b8 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001b8b7
c001cab2:	c7 05 78 1a 03 c0 fc b4 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001b4fc
c001cabc:	c7 05 7c 1a 03 c0 69 b9 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001b969
c001cac6:	c7 05 80 1a 03 c0 75 b5 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001b575
c001cad0:	c7 05 84 1a 03 c0 8c b5 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001b58c
c001cada:	c3                   	ret    

c001cadb <Sys::systemCall(regs*, void*)>:
c001cadb:	53                   	push   ebx
c001cadc:	83 ec 08             	sub    esp,0x8
c001cadf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cae3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cae6:	83 f8 7f             	cmp    eax,0x7f
c001cae9:	77 16                	ja     c001cb01 <Sys::systemCall(regs*, void*)+0x26>
c001caeb:	8b 14 85 c0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce640]
c001caf2:	85 d2                	test   edx,edx
c001caf4:	74 0b                	je     c001cb01 <Sys::systemCall(regs*, void*)+0x26>
c001caf6:	83 ec 0c             	sub    esp,0xc
c001caf9:	53                   	push   ebx
c001cafa:	ff d2                	call   edx
c001cafc:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001caff:	eb 0d                	jmp    c001cb0e <Sys::systemCall(regs*, void*)+0x33>
c001cb01:	52                   	push   edx
c001cb02:	52                   	push   edx
c001cb03:	50                   	push   eax
c001cb04:	68 d7 c8 02 c0       	push   0xc002c8d7
c001cb09:	e8 d3 63 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cb0e:	83 c4 10             	add    esp,0x10
c001cb11:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb16:	31 d2                	xor    edx,edx
c001cb18:	83 c4 08             	add    esp,0x8
c001cb1b:	5b                   	pop    ebx
c001cb1c:	c3                   	ret    

c001cb1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb1d:	55                   	push   ebp
c001cb1e:	57                   	push   edi
c001cb1f:	56                   	push   esi
c001cb20:	53                   	push   ebx
c001cb21:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb27:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb2e:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb35:	85 c0                	test   eax,eax
c001cb37:	0f 95 c1             	setne  cl
c001cb3a:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb42:	0f 94 c2             	sete   dl
c001cb45:	84 d1                	test   cl,dl
c001cb47:	74 23                	je     c001cb6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb49:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb4f:	74 1b                	je     c001cb6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb51:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb57:	89 da                	mov    edx,ebx
c001cb59:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb5f:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb65:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb6c:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001cb73:	05 ff 0f 00 00       	add    eax,0xfff
c001cb78:	83 ec 0c             	sub    esp,0xc
c001cb7b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb7f:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001cb85:	c1 e8 0c             	shr    eax,0xc
c001cb88:	89 ef                	mov    edi,ebp
c001cb8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb8e:	c1 ef 0c             	shr    edi,0xc
c001cb91:	6a 01                	push   0x1
c001cb93:	e8 43 4f ff ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c001cb98:	89 c6                	mov    esi,eax
c001cb9a:	58                   	pop    eax
c001cb9b:	5a                   	pop    edx
c001cb9c:	57                   	push   edi
c001cb9d:	68 5b c9 02 c0       	push   0xc002c95b
c001cba2:	e8 3a 63 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cba7:	59                   	pop    ecx
c001cba8:	58                   	pop    eax
c001cba9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cbad:	68 6d c9 02 c0       	push   0xc002c96d
c001cbb2:	e8 2a 63 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cbb7:	83 c4 10             	add    esp,0x10
c001cbba:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbc0:	0f 86 31 01 00 00    	jbe    c001ccf7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cbc6:	c1 e7 0c             	shl    edi,0xc
c001cbc9:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001cbcc:	89 df                	mov    edi,ebx
c001cbce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbd2:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbd9:	01 dd                	add    ebp,ebx
c001cbdb:	29 fd                	sub    ebp,edi
c001cbdd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001cbe1:	0f 84 0e 01 00 00    	je     c001ccf5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d8>
c001cbe7:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cbed:	76 05                	jbe    c001cbf4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001cbef:	bd 00 10 00 00       	mov    ebp,0x1000
c001cbf4:	83 ec 0c             	sub    esp,0xc
c001cbf7:	31 d2                	xor    edx,edx
c001cbf9:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc00:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc02:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc06:	50                   	push   eax
c001cc07:	8d 44 24 30          	lea    eax,[esp+0x30]
c001cc0b:	50                   	push   eax
c001cc0c:	52                   	push   edx
c001cc0d:	55                   	push   ebp
c001cc0e:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc15:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc18:	83 c4 20             	add    esp,0x20
c001cc1b:	85 c0                	test   eax,eax
c001cc1d:	74 0a                	je     c001cc29 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001cc1f:	53                   	push   ebx
c001cc20:	53                   	push   ebx
c001cc21:	50                   	push   eax
c001cc22:	68 7f c9 02 c0       	push   0xc002c97f
c001cc27:	eb 0f                	jmp    c001cc38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001cc29:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc2d:	74 20                	je     c001cc4f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001cc2f:	51                   	push   ecx
c001cc30:	51                   	push   ecx
c001cc31:	6a 00                	push   0x0
c001cc33:	68 aa c9 02 c0       	push   0xc002c9aa
c001cc38:	e8 a4 62 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cc3d:	89 34 24             	mov    DWORD PTR [esp],esi
c001cc40:	e8 56 53 ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c001cc45:	83 c4 10             	add    esp,0x10
c001cc48:	31 c0                	xor    eax,eax
c001cc4a:	e9 6d 01 00 00       	jmp    c001cdbc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001cc4f:	fa                   	cli    
c001cc50:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001cc56:	e8 3b 33 ff ff       	call   c000ff96 <Phys::allocatePage()>
c001cc5b:	6a 07                	push   0x7
c001cc5d:	89 c5                	mov    ebp,eax
c001cc5f:	56                   	push   esi
c001cc60:	50                   	push   eax
c001cc61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc69:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc6f:	e8 9e 56 ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc74:	83 c4 0c             	add    esp,0xc
c001cc77:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc7e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc84:	6a 00                	push   0x0
c001cc86:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc8e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc94:	e8 d3 54 ff ff       	call   c001216c <VAS::mapOtherVASIn(bool, VAS*)>
c001cc99:	58                   	pop    eax
c001cc9a:	5a                   	pop    edx
c001cc9b:	68 07 0c 00 00       	push   0xc07
c001cca0:	57                   	push   edi
c001cca1:	55                   	push   ebp
c001cca2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cca9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccaf:	6a 00                	push   0x0
c001ccb1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccb6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccb9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccbf:	e8 0a 5a ff ff       	call   c00126ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccc4:	83 c4 1c             	add    esp,0x1c
c001ccc7:	68 00 10 00 00       	push   0x1000
c001cccc:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ccd0:	50                   	push   eax
c001ccd1:	56                   	push   esi
c001ccd2:	e8 91 3a fe ff       	call   c0000768 <memcpy>
c001ccd7:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	48                   	dec    eax
c001cce0:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001cce5:	85 c0                	test   eax,eax
c001cce7:	75 01                	jne    c001ccea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001cce9:	fb                   	sti    
c001ccea:	81 c7 00 10 00 00    	add    edi,0x1000
c001ccf0:	e9 dd fe ff ff       	jmp    c001cbd2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ccf5:	89 fb                	mov    ebx,edi
c001ccf7:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ccff:	0f 86 a9 00 00 00    	jbe    c001cdae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cd05:	fa                   	cli    
c001cd06:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001cd0c:	51                   	push   ecx
c001cd0d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd14:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd1a:	6a 00                	push   0x0
c001cd1c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd21:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd24:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd2a:	e8 3d 54 ff ff       	call   c001216c <VAS::mapOtherVASIn(bool, VAS*)>
c001cd2f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001cd33:	c1 e7 0c             	shl    edi,0xc
c001cd36:	01 df                	add    edi,ebx
c001cd38:	83 c4 10             	add    esp,0x10
c001cd3b:	39 df                	cmp    edi,ebx
c001cd3d:	74 61                	je     c001cda0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cd3f:	e8 52 32 ff ff       	call   c000ff96 <Phys::allocatePage()>
c001cd44:	6a 07                	push   0x7
c001cd46:	89 c5                	mov    ebp,eax
c001cd48:	56                   	push   esi
c001cd49:	50                   	push   eax
c001cd4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd4f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd52:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd58:	e8 b5 55 ff ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd5d:	58                   	pop    eax
c001cd5e:	5a                   	pop    edx
c001cd5f:	68 07 0c 00 00       	push   0xc07
c001cd64:	53                   	push   ebx
c001cd65:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd6b:	55                   	push   ebp
c001cd6c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd73:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd79:	6a 00                	push   0x0
c001cd7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd83:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd89:	e8 40 59 ff ff       	call   c00126ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd8e:	83 c4 1c             	add    esp,0x1c
c001cd91:	68 00 10 00 00       	push   0x1000
c001cd96:	6a 00                	push   0x0
c001cd98:	56                   	push   esi
c001cd99:	e8 fe 39 fe ff       	call   c000079c <memset>
c001cd9e:	eb 98                	jmp    c001cd38 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cda0:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001cda5:	48                   	dec    eax
c001cda6:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001cdab:	75 01                	jne    c001cdae <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cdad:	fb                   	sti    
c001cdae:	83 ec 0c             	sub    esp,0xc
c001cdb1:	56                   	push   esi
c001cdb2:	e8 e4 51 ff ff       	call   c0011f9b <Virt::freeKernelVirtualPages(unsigned long)>
c001cdb7:	83 c4 10             	add    esp,0x10
c001cdba:	b0 01                	mov    al,0x1
c001cdbc:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdc2:	5b                   	pop    ebx
c001cdc3:	5e                   	pop    esi
c001cdc4:	5f                   	pop    edi
c001cdc5:	5d                   	pop    ebp
c001cdc6:	c3                   	ret    

c001cdc7 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cdc7:	55                   	push   ebp
c001cdc8:	57                   	push   edi
c001cdc9:	56                   	push   esi
c001cdca:	53                   	push   ebx
c001cdcb:	83 ec 48             	sub    esp,0x48
c001cdce:	68 14 01 00 00       	push   0x114
c001cdd3:	e8 52 2b ff ff       	call   c000f92a <malloc>
c001cdd8:	83 c4 0c             	add    esp,0xc
c001cddb:	89 c6                	mov    esi,eax
c001cddd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cde1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cde5:	50                   	push   eax
c001cde6:	e8 55 66 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001cdeb:	58                   	pop    eax
c001cdec:	5a                   	pop    edx
c001cded:	6a 01                	push   0x1
c001cdef:	56                   	push   esi
c001cdf0:	e8 af 66 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001cdf5:	83 c4 10             	add    esp,0x10
c001cdf8:	85 c0                	test   eax,eax
c001cdfa:	0f 85 47 01 00 00    	jne    c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce00:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce08:	83 ec 0c             	sub    esp,0xc
c001ce0b:	6a 34                	push   0x34
c001ce0d:	e8 18 2b ff ff       	call   c000f92a <malloc>
c001ce12:	89 c3                	mov    ebx,eax
c001ce14:	58                   	pop    eax
c001ce15:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce17:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce1b:	57                   	push   edi
c001ce1c:	53                   	push   ebx
c001ce1d:	6a 00                	push   0x0
c001ce1f:	6a 34                	push   0x34
c001ce21:	56                   	push   esi
c001ce22:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce25:	83 c4 20             	add    esp,0x20
c001ce28:	85 c0                	test   eax,eax
c001ce2a:	0f 85 17 01 00 00    	jne    c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce30:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce36:	0f 85 0b 01 00 00    	jne    c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce3c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce3f:	85 c0                	test   eax,eax
c001ce41:	0f 84 00 01 00 00    	je     c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce47:	31 d2                	xor    edx,edx
c001ce49:	55                   	push   ebp
c001ce4a:	52                   	push   edx
c001ce4b:	50                   	push   eax
c001ce4c:	56                   	push   esi
c001ce4d:	e8 10 67 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001ce52:	83 c4 10             	add    esp,0x10
c001ce55:	85 c0                	test   eax,eax
c001ce57:	0f 85 ea 00 00 00    	jne    c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce5d:	83 ec 0c             	sub    esp,0xc
c001ce60:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce63:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce67:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce6b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce6f:	0f af c2             	imul   eax,edx
c001ce72:	50                   	push   eax
c001ce73:	e8 b2 2a ff ff       	call   c000f92a <malloc>
c001ce78:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce7a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce7e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce81:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce85:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce89:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce8d:	0f af c2             	imul   eax,edx
c001ce90:	99                   	cdq    
c001ce91:	52                   	push   edx
c001ce92:	50                   	push   eax
c001ce93:	56                   	push   esi
c001ce94:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce97:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce9a:	83 c4 20             	add    esp,0x20
c001ce9d:	85 c0                	test   eax,eax
c001ce9f:	0f 84 a2 00 00 00    	je     c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cea5:	31 d2                	xor    edx,edx
c001cea7:	51                   	push   ecx
c001cea8:	52                   	push   edx
c001cea9:	50                   	push   eax
c001ceaa:	56                   	push   esi
c001ceab:	e8 b2 66 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	85 c0                	test   eax,eax
c001ceb5:	0f 85 8c 00 00 00    	jne    c001cf47 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cebb:	83 ec 0c             	sub    esp,0xc
c001cebe:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cec2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cec6:	31 ed                	xor    ebp,ebp
c001cec8:	0f af c2             	imul   eax,edx
c001cecb:	50                   	push   eax
c001cecc:	e8 59 2a ff ff       	call   c000f92a <malloc>
c001ced1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ced3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced7:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ceda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cede:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cee2:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cee6:	0f af c2             	imul   eax,edx
c001cee9:	99                   	cdq    
c001ceea:	52                   	push   edx
c001ceeb:	50                   	push   eax
c001ceec:	56                   	push   esi
c001ceed:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cef0:	83 c4 20             	add    esp,0x20
c001cef3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cefb:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001ceff:	0f 86 80 00 00 00    	jbe    c001cf85 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf05:	0f b7 fd             	movzx  edi,bp
c001cf08:	c1 e7 05             	shl    edi,0x5
c001cf0b:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf0f:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf12:	75 6b                	jne    c001cf7f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf14:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf22:	52                   	push   edx
c001cf23:	31 d2                	xor    edx,edx
c001cf25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf28:	52                   	push   edx
c001cf29:	50                   	push   eax
c001cf2a:	56                   	push   esi
c001cf2b:	e8 32 66 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	85 c0                	test   eax,eax
c001cf35:	74 17                	je     c001cf4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf37:	83 ec 0c             	sub    esp,0xc
c001cf3a:	68 d6 c9 02 c0       	push   0xc002c9d6
c001cf3f:	e8 9d 5f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cf44:	83 c4 10             	add    esp,0x10
c001cf47:	31 c0                	xor    eax,eax
c001cf49:	e9 87 00 00 00       	jmp    c001cfd5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf4e:	83 ec 0c             	sub    esp,0xc
c001cf51:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf54:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf57:	50                   	push   eax
c001cf58:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf60:	56                   	push   esi
c001cf61:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf65:	e8 b3 fb ff ff       	call   c001cb1d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf6e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf72:	83 c4 20             	add    esp,0x20
c001cf75:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf79:	73 04                	jae    c001cf7f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf7f:	45                   	inc    ebp
c001cf80:	e9 76 ff ff ff       	jmp    c001cefb <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf85:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf8d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf91:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf97:	83 ec 0c             	sub    esp,0xc
c001cf9a:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cfa0:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfa5:	05 00 10 00 00       	add    eax,0x1000
c001cfaa:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfb1:	e8 84 29 ff ff       	call   c000f93a <free>
c001cfb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfb9:	e8 7c 29 ff ff       	call   c000f93a <free>
c001cfbe:	58                   	pop    eax
c001cfbf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfc3:	e8 72 29 ff ff       	call   c000f93a <free>
c001cfc8:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfcb:	e8 32 65 ff ff       	call   c0013502 <File::close()>
c001cfd0:	83 c4 10             	add    esp,0x10
c001cfd3:	b0 01                	mov    al,0x1
c001cfd5:	83 c4 3c             	add    esp,0x3c
c001cfd8:	5b                   	pop    ebx
c001cfd9:	5e                   	pop    esi
c001cfda:	5f                   	pop    edi
c001cfdb:	5d                   	pop    ebp
c001cfdc:	c3                   	ret    

c001cfdd <Thr::runtimeReferenceHelper()>:
c001cfdd:	83 ec 18             	sub    esp,0x18
c001cfe0:	68 de c9 02 c0       	push   0xc002c9de
c001cfe5:	e8 f7 5e ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001cfea:	fa                   	cli    
c001cfeb:	83 c4 10             	add    esp,0x10
c001cfee:	eb fe                	jmp    c001cfee <Thr::runtimeReferenceHelper()+0x11>

c001cff0 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cff0:	57                   	push   edi
c001cff1:	56                   	push   esi
c001cff2:	53                   	push   ebx
c001cff3:	31 db                	xor    ebx,ebx
c001cff5:	39 1d 60 23 03 c0    	cmp    DWORD PTR ds:0xc0032360,ebx
c001cffb:	7e 3c                	jle    c001d039 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cffd:	8b 34 9d e0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd20]
c001d004:	31 ff                	xor    edi,edi
c001d006:	39 3c 9d e0 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde20],edi
c001d00d:	7e 27                	jle    c001d036 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d00f:	50                   	push   eax
c001d010:	50                   	push   eax
c001d011:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d015:	8b 06                	mov    eax,DWORD PTR [esi]
c001d017:	03 04 9d 60 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdda0]
c001d01e:	50                   	push   eax
c001d01f:	e8 c0 38 fe ff       	call   c00008e4 <strcmp>
c001d024:	83 c4 10             	add    esp,0x10
c001d027:	85 c0                	test   eax,eax
c001d029:	75 05                	jne    c001d030 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d02b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d02e:	eb 0b                	jmp    c001d03b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d030:	83 c6 10             	add    esi,0x10
c001d033:	47                   	inc    edi
c001d034:	eb d0                	jmp    c001d006 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d036:	43                   	inc    ebx
c001d037:	eb bc                	jmp    c001cff5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d039:	31 c0                	xor    eax,eax
c001d03b:	5b                   	pop    ebx
c001d03c:	5e                   	pop    esi
c001d03d:	5f                   	pop    edi
c001d03e:	c3                   	ret    

c001d03f <Thr::loadKernelSymbolTable(char const*)>:
c001d03f:	55                   	push   ebp
c001d040:	57                   	push   edi
c001d041:	56                   	push   esi
c001d042:	53                   	push   ebx
c001d043:	83 ec 68             	sub    esp,0x68
c001d046:	8b 35 b0 23 03 c0    	mov    esi,DWORD PTR ds:0xc00323b0
c001d04c:	68 14 01 00 00       	push   0x114
c001d051:	e8 d4 28 ff ff       	call   c000f92a <malloc>
c001d056:	83 c4 0c             	add    esp,0xc
c001d059:	89 c3                	mov    ebx,eax
c001d05b:	56                   	push   esi
c001d05c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d060:	50                   	push   eax
c001d061:	e8 da 63 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001d066:	5e                   	pop    esi
c001d067:	5f                   	pop    edi
c001d068:	6a 01                	push   0x1
c001d06a:	53                   	push   ebx
c001d06b:	e8 34 64 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001d070:	83 c4 10             	add    esp,0x10
c001d073:	85 c0                	test   eax,eax
c001d075:	74 0a                	je     c001d081 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d077:	83 ec 0c             	sub    esp,0xc
c001d07a:	68 00 ca 02 c0       	push   0xc002ca00
c001d07f:	eb 34                	jmp    c001d0b5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d081:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d089:	83 ec 0c             	sub    esp,0xc
c001d08c:	6a 34                	push   0x34
c001d08e:	e8 97 28 ff ff       	call   c000f92a <malloc>
c001d093:	59                   	pop    ecx
c001d094:	89 c7                	mov    edi,eax
c001d096:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d09a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d09c:	56                   	push   esi
c001d09d:	57                   	push   edi
c001d09e:	6a 00                	push   0x0
c001d0a0:	6a 34                	push   0x34
c001d0a2:	53                   	push   ebx
c001d0a3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0a6:	83 c4 20             	add    esp,0x20
c001d0a9:	85 c0                	test   eax,eax
c001d0ab:	74 17                	je     c001d0c4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d0ad:	83 ec 0c             	sub    esp,0xc
c001d0b0:	68 17 ca 02 c0       	push   0xc002ca17
c001d0b5:	e8 e3 d7 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d0ba:	83 c4 10             	add    esp,0x10
c001d0bd:	31 c0                	xor    eax,eax
c001d0bf:	e9 31 02 00 00       	jmp    c001d2f5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0c4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0ca:	75 e1                	jne    c001d0ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0cc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0cf:	85 c0                	test   eax,eax
c001d0d1:	74 da                	je     c001d0ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0d3:	52                   	push   edx
c001d0d4:	31 d2                	xor    edx,edx
c001d0d6:	52                   	push   edx
c001d0d7:	50                   	push   eax
c001d0d8:	53                   	push   ebx
c001d0d9:	e8 84 64 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d0de:	83 c4 10             	add    esp,0x10
c001d0e1:	85 c0                	test   eax,eax
c001d0e3:	75 c8                	jne    c001d0ad <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0e5:	83 ec 0c             	sub    esp,0xc
c001d0e8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0ec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0f0:	31 ed                	xor    ebp,ebp
c001d0f2:	0f af c2             	imul   eax,edx
c001d0f5:	50                   	push   eax
c001d0f6:	e8 2f 28 ff ff       	call   c000f92a <malloc>
c001d0fb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d101:	89 34 24             	mov    DWORD PTR [esp],esi
c001d104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d108:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d10c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d110:	0f af c2             	imul   eax,edx
c001d113:	99                   	cdq    
c001d114:	52                   	push   edx
c001d115:	50                   	push   eax
c001d116:	53                   	push   ebx
c001d117:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d11a:	83 c4 20             	add    esp,0x20
c001d11d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d125:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d12d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d135:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d13d:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d141:	0f 86 aa 00 00 00    	jbe    c001d1f1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d147:	0f b7 f5             	movzx  esi,bp
c001d14a:	6b f6 28             	imul   esi,esi,0x28
c001d14d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d151:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d158:	50                   	push   eax
c001d159:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d15d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d161:	8b 16                	mov    edx,DWORD PTR [esi]
c001d163:	6b c0 28             	imul   eax,eax,0x28
c001d166:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d16a:	89 d0                	mov    eax,edx
c001d16c:	31 d2                	xor    edx,edx
c001d16e:	52                   	push   edx
c001d16f:	50                   	push   eax
c001d170:	53                   	push   ebx
c001d171:	e8 ec 63 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d176:	83 c4 0c             	add    esp,0xc
c001d179:	6a 20                	push   0x20
c001d17b:	6a 00                	push   0x0
c001d17d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d181:	52                   	push   edx
c001d182:	e8 15 36 fe ff       	call   c000079c <memset>
c001d187:	58                   	pop    eax
c001d188:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d18a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d18e:	51                   	push   ecx
c001d18f:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d193:	52                   	push   edx
c001d194:	6a 00                	push   0x0
c001d196:	6a 1f                	push   0x1f
c001d198:	53                   	push   ebx
c001d199:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d19c:	83 c4 18             	add    esp,0x18
c001d19f:	68 2e ca 02 c0       	push   0xc002ca2e
c001d1a4:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1a8:	52                   	push   edx
c001d1a9:	e8 36 37 fe ff       	call   c00008e4 <strcmp>
c001d1ae:	83 c4 10             	add    esp,0x10
c001d1b1:	85 c0                	test   eax,eax
c001d1b3:	75 0f                	jne    c001d1c4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d1b5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1b8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1c4:	50                   	push   eax
c001d1c5:	50                   	push   eax
c001d1c6:	68 36 ca 02 c0       	push   0xc002ca36
c001d1cb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1cf:	50                   	push   eax
c001d1d0:	e8 0f 37 fe ff       	call   c00008e4 <strcmp>
c001d1d5:	83 c4 10             	add    esp,0x10
c001d1d8:	85 c0                	test   eax,eax
c001d1da:	75 0f                	jne    c001d1eb <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1dc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1eb:	45                   	inc    ebp
c001d1ec:	e9 4c ff ff ff       	jmp    c001d13d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1f6:	75 10                	jne    c001d208 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1f8:	83 ec 0c             	sub    esp,0xc
c001d1fb:	68 3e ca 02 c0       	push   0xc002ca3e
c001d200:	e8 98 d6 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d205:	83 c4 10             	add    esp,0x10
c001d208:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d20d:	75 10                	jne    c001d21f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d20f:	83 ec 0c             	sub    esp,0xc
c001d212:	68 3e ca 02 c0       	push   0xc002ca3e
c001d217:	e8 81 d6 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d21c:	83 c4 10             	add    esp,0x10
c001d21f:	31 d2                	xor    edx,edx
c001d221:	50                   	push   eax
c001d222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d226:	52                   	push   edx
c001d227:	50                   	push   eax
c001d228:	53                   	push   ebx
c001d229:	e8 34 63 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d22e:	5a                   	pop    edx
c001d22f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d233:	e8 f2 26 ff ff       	call   c000f92a <malloc>
c001d238:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d23c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d240:	31 c9                	xor    ecx,ecx
c001d242:	5e                   	pop    esi
c001d243:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d245:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d249:	55                   	push   ebp
c001d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d24e:	51                   	push   ecx
c001d24f:	52                   	push   edx
c001d250:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d254:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d258:	53                   	push   ebx
c001d259:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d25c:	83 c4 14             	add    esp,0x14
c001d25f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d263:	e8 c2 26 ff ff       	call   c000f92a <malloc>
c001d268:	89 c6                	mov    esi,eax
c001d26a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d26c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d26f:	56                   	push   esi
c001d270:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d274:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d278:	51                   	push   ecx
c001d279:	52                   	push   edx
c001d27a:	53                   	push   ebx
c001d27b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d27e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d282:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c001d288:	83 c4 1c             	add    esp,0x1c
c001d28b:	c1 e8 04             	shr    eax,0x4
c001d28e:	89 04 95 e0 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde20],eax
c001d295:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d299:	31 d2                	xor    edx,edx
c001d29b:	52                   	push   edx
c001d29c:	50                   	push   eax
c001d29d:	53                   	push   ebx
c001d29e:	e8 bf 62 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d2a3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2a5:	31 d2                	xor    edx,edx
c001d2a7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2aa:	56                   	push   esi
c001d2ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2af:	52                   	push   edx
c001d2b0:	50                   	push   eax
c001d2b1:	53                   	push   ebx
c001d2b2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2b5:	83 c4 14             	add    esp,0x14
c001d2b8:	53                   	push   ebx
c001d2b9:	e8 44 62 ff ff       	call   c0013502 <File::close()>
c001d2be:	5d                   	pop    ebp
c001d2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2c3:	e8 72 26 ff ff       	call   c000f93a <free>
c001d2c8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2cb:	e8 6a 26 ff ff       	call   c000f93a <free>
c001d2d0:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001d2d5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2d9:	8d 50 01             	lea    edx,[eax+0x1]
c001d2dc:	89 0c 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],ecx
c001d2e3:	89 34 85 60 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdda0],esi
c001d2ea:	89 15 60 23 03 c0    	mov    DWORD PTR ds:0xc0032360,edx
c001d2f0:	83 c4 10             	add    esp,0x10
c001d2f3:	b0 01                	mov    al,0x1
c001d2f5:	83 c4 5c             	add    esp,0x5c
c001d2f8:	5b                   	pop    ebx
c001d2f9:	5e                   	pop    esi
c001d2fa:	5f                   	pop    edi
c001d2fb:	5d                   	pop    ebp
c001d2fc:	c3                   	ret    

c001d2fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2fd:	55                   	push   ebp
c001d2fe:	57                   	push   edi
c001d2ff:	56                   	push   esi
c001d300:	53                   	push   ebx
c001d301:	81 ec 68 03 00 00    	sub    esp,0x368
c001d307:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d30e:	8b 1d b0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323b0
c001d314:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d318:	68 14 01 00 00       	push   0x114
c001d31d:	e8 08 26 ff ff       	call   c000f92a <malloc>
c001d322:	83 c4 0c             	add    esp,0xc
c001d325:	89 c5                	mov    ebp,eax
c001d327:	53                   	push   ebx
c001d328:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d32f:	50                   	push   eax
c001d330:	e8 0b 61 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001d335:	5e                   	pop    esi
c001d336:	5f                   	pop    edi
c001d337:	6a 01                	push   0x1
c001d339:	55                   	push   ebp
c001d33a:	e8 65 61 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001d33f:	83 c4 10             	add    esp,0x10
c001d342:	85 c0                	test   eax,eax
c001d344:	0f 85 a7 06 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d34a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d352:	83 ec 0c             	sub    esp,0xc
c001d355:	6a 34                	push   0x34
c001d357:	e8 ce 25 ff ff       	call   c000f92a <malloc>
c001d35c:	5b                   	pop    ebx
c001d35d:	89 c7                	mov    edi,eax
c001d35f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d363:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d366:	53                   	push   ebx
c001d367:	57                   	push   edi
c001d368:	6a 00                	push   0x0
c001d36a:	6a 34                	push   0x34
c001d36c:	55                   	push   ebp
c001d36d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d370:	83 c4 20             	add    esp,0x20
c001d373:	85 c0                	test   eax,eax
c001d375:	0f 85 76 06 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d37b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d381:	0f 85 6a 06 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d387:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d38a:	85 c0                	test   eax,eax
c001d38c:	0f 84 5f 06 00 00    	je     c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d392:	31 d2                	xor    edx,edx
c001d394:	51                   	push   ecx
c001d395:	52                   	push   edx
c001d396:	50                   	push   eax
c001d397:	55                   	push   ebp
c001d398:	e8 c5 61 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d39d:	83 c4 10             	add    esp,0x10
c001d3a0:	85 c0                	test   eax,eax
c001d3a2:	0f 85 49 06 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d3ae:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3b6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3ba:	0f af c2             	imul   eax,edx
c001d3bd:	50                   	push   eax
c001d3be:	e8 67 25 ff ff       	call   c000f92a <malloc>
c001d3c3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3d1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3d5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d9:	0f af c2             	imul   eax,edx
c001d3dc:	99                   	cdq    
c001d3dd:	52                   	push   edx
c001d3de:	50                   	push   eax
c001d3df:	55                   	push   ebp
c001d3e0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3e3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3e6:	83 c4 20             	add    esp,0x20
c001d3e9:	85 c0                	test   eax,eax
c001d3eb:	0f 84 00 06 00 00    	je     c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3f1:	52                   	push   edx
c001d3f2:	31 d2                	xor    edx,edx
c001d3f4:	52                   	push   edx
c001d3f5:	50                   	push   eax
c001d3f6:	55                   	push   ebp
c001d3f7:	e8 66 61 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d3fc:	83 c4 10             	add    esp,0x10
c001d3ff:	85 c0                	test   eax,eax
c001d401:	0f 85 ea 05 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d407:	83 ec 0c             	sub    esp,0xc
c001d40a:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d40e:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d412:	31 f6                	xor    esi,esi
c001d414:	0f af c2             	imul   eax,edx
c001d417:	50                   	push   eax
c001d418:	e8 0d 25 ff ff       	call   c000f92a <malloc>
c001d41d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d420:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d424:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d427:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d42b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d42f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d433:	0f af c2             	imul   eax,edx
c001d436:	99                   	cdq    
c001d437:	52                   	push   edx
c001d438:	50                   	push   eax
c001d439:	55                   	push   ebp
c001d43a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d43d:	83 c4 20             	add    esp,0x20
c001d440:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d444:	0f 86 8a 00 00 00    	jbe    c001d4d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d44a:	0f b7 de             	movzx  ebx,si
c001d44d:	c1 e3 05             	shl    ebx,0x5
c001d450:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d454:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d457:	75 75                	jne    c001d4ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d459:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d45c:	31 d2                	xor    edx,edx
c001d45e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d462:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d465:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d469:	50                   	push   eax
c001d46a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d46d:	52                   	push   edx
c001d46e:	50                   	push   eax
c001d46f:	55                   	push   ebp
c001d470:	e8 ed 60 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d475:	83 c4 10             	add    esp,0x10
c001d478:	85 c0                	test   eax,eax
c001d47a:	0f 85 71 05 00 00    	jne    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d480:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d487:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d48a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d48e:	31 d2                	xor    edx,edx
c001d490:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d494:	83 ec 0c             	sub    esp,0xc
c001d497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d49b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d4a2:	50                   	push   eax
c001d4a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4ab:	52                   	push   edx
c001d4ac:	50                   	push   eax
c001d4ad:	55                   	push   ebp
c001d4ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4b1:	83 c4 1c             	add    esp,0x1c
c001d4b4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4b7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4ba:	50                   	push   eax
c001d4bb:	6a 00                	push   0x0
c001d4bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4c1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4c5:	50                   	push   eax
c001d4c6:	e8 d1 32 fe ff       	call   c000079c <memset>
c001d4cb:	83 c4 10             	add    esp,0x10
c001d4ce:	46                   	inc    esi
c001d4cf:	e9 6c ff ff ff       	jmp    c001d440 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4d4:	53                   	push   ebx
c001d4d5:	31 db                	xor    ebx,ebx
c001d4d7:	68 00 01 00 00       	push   0x100
c001d4dc:	6a 00                	push   0x0
c001d4de:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4e2:	50                   	push   eax
c001d4e3:	e8 b4 32 fe ff       	call   c000079c <memset>
c001d4e8:	83 c4 0c             	add    esp,0xc
c001d4eb:	68 00 01 00 00       	push   0x100
c001d4f0:	6a 00                	push   0x0
c001d4f2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4f9:	50                   	push   eax
c001d4fa:	e8 9d 32 fe ff       	call   c000079c <memset>
c001d4ff:	83 c4 10             	add    esp,0x10
c001d502:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d50a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d512:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d51a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d522:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d52a:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d52e:	0f 86 30 01 00 00    	jbe    c001d664 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d534:	0f b7 f3             	movzx  esi,bx
c001d537:	6b f6 28             	imul   esi,esi,0x28
c001d53a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d53e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d545:	52                   	push   edx
c001d546:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d54a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d54e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d550:	6b d2 28             	imul   edx,edx,0x28
c001d553:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d557:	31 d2                	xor    edx,edx
c001d559:	52                   	push   edx
c001d55a:	50                   	push   eax
c001d55b:	55                   	push   ebp
c001d55c:	e8 01 60 ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d561:	83 c4 0c             	add    esp,0xc
c001d564:	6a 20                	push   0x20
c001d566:	6a 00                	push   0x0
c001d568:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d56f:	51                   	push   ecx
c001d570:	e8 27 32 fe ff       	call   c000079c <memset>
c001d575:	59                   	pop    ecx
c001d576:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d579:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d57d:	52                   	push   edx
c001d57e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d585:	51                   	push   ecx
c001d586:	6a 00                	push   0x0
c001d588:	6a 1f                	push   0x1f
c001d58a:	55                   	push   ebp
c001d58b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d58e:	83 c4 1c             	add    esp,0x1c
c001d591:	6a 09                	push   0x9
c001d593:	68 58 ca 02 c0       	push   0xc002ca58
c001d598:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d59f:	51                   	push   ecx
c001d5a0:	e8 bf 30 fe ff       	call   c0000664 <memcmp>
c001d5a5:	83 c4 10             	add    esp,0x10
c001d5a8:	85 c0                	test   eax,eax
c001d5aa:	75 21                	jne    c001d5cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5b4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5bc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5bf:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5c6:	89 d0                	mov    eax,edx
c001d5c8:	40                   	inc    eax
c001d5c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5cd:	50                   	push   eax
c001d5ce:	6a 09                	push   0x9
c001d5d0:	68 62 ca 02 c0       	push   0xc002ca62
c001d5d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5dc:	50                   	push   eax
c001d5dd:	e8 82 30 fe ff       	call   c0000664 <memcmp>
c001d5e2:	83 c4 10             	add    esp,0x10
c001d5e5:	85 c0                	test   eax,eax
c001d5e7:	75 21                	jne    c001d60a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5f1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5f5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5f9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5fc:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d603:	89 d0                	mov    eax,edx
c001d605:	40                   	inc    eax
c001d606:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d60a:	50                   	push   eax
c001d60b:	50                   	push   eax
c001d60c:	68 2e ca 02 c0       	push   0xc002ca2e
c001d611:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d618:	50                   	push   eax
c001d619:	e8 c6 32 fe ff       	call   c00008e4 <strcmp>
c001d61e:	83 c4 10             	add    esp,0x10
c001d621:	85 c0                	test   eax,eax
c001d623:	75 0f                	jne    c001d634 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d625:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d628:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d62c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d630:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d634:	50                   	push   eax
c001d635:	50                   	push   eax
c001d636:	68 36 ca 02 c0       	push   0xc002ca36
c001d63b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d642:	50                   	push   eax
c001d643:	e8 9c 32 fe ff       	call   c00008e4 <strcmp>
c001d648:	83 c4 10             	add    esp,0x10
c001d64b:	85 c0                	test   eax,eax
c001d64d:	75 0f                	jne    c001d65e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d64f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d652:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d65a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d65e:	43                   	inc    ebx
c001d65f:	e9 c6 fe ff ff       	jmp    c001d52a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d664:	31 d2                	xor    edx,edx
c001d666:	50                   	push   eax
c001d667:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d66b:	52                   	push   edx
c001d66c:	50                   	push   eax
c001d66d:	55                   	push   ebp
c001d66e:	e8 ef 5e ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d673:	58                   	pop    eax
c001d674:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d678:	e8 ad 22 ff ff       	call   c000f92a <malloc>
c001d67d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d680:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d684:	31 d2                	xor    edx,edx
c001d686:	58                   	pop    eax
c001d687:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d68b:	53                   	push   ebx
c001d68c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d690:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d694:	52                   	push   edx
c001d695:	50                   	push   eax
c001d696:	55                   	push   ebp
c001d697:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d69a:	83 c4 14             	add    esp,0x14
c001d69d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d6a1:	e8 84 22 ff ff       	call   c000f92a <malloc>
c001d6a6:	31 d2                	xor    edx,edx
c001d6a8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d6ac:	83 c4 0c             	add    esp,0xc
c001d6af:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6b3:	52                   	push   edx
c001d6b4:	50                   	push   eax
c001d6b5:	55                   	push   ebp
c001d6b6:	e8 a7 5e ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d6bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6be:	31 d2                	xor    edx,edx
c001d6c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6c3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6cb:	52                   	push   edx
c001d6cc:	50                   	push   eax
c001d6cd:	55                   	push   ebp
c001d6ce:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6d1:	83 c4 20             	add    esp,0x20
c001d6d4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6e0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6e4:	0f 84 0b 03 00 00    	je     c001d9f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6ea:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6f1:	31 d2                	xor    edx,edx
c001d6f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6f7:	c1 e8 03             	shr    eax,0x3
c001d6fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6fe:	51                   	push   ecx
c001d6ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d703:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d707:	52                   	push   edx
c001d708:	50                   	push   eax
c001d709:	55                   	push   ebp
c001d70a:	e8 53 5e ff ff       	call   c0013562 <File::seek(unsigned long long)>
c001d70f:	5b                   	pop    ebx
c001d710:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d714:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d71b:	e8 0a 22 ff ff       	call   c000f92a <malloc>
c001d720:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d723:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d727:	31 d2                	xor    edx,edx
c001d729:	5e                   	pop    esi
c001d72a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d72e:	50                   	push   eax
c001d72f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d737:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d73e:	52                   	push   edx
c001d73f:	50                   	push   eax
c001d740:	55                   	push   ebp
c001d741:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d744:	83 c4 20             	add    esp,0x20
c001d747:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d74f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d753:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d757:	0f 8d 7c 02 00 00    	jge    c001d9d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d75d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d761:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d765:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d76a:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d76d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d771:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d775:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d779:	89 d8                	mov    eax,ebx
c001d77b:	c1 e8 08             	shr    eax,0x8
c001d77e:	89 c6                	mov    esi,eax
c001d780:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d784:	c1 e6 04             	shl    esi,0x4
c001d787:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d78b:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d78e:	85 d2                	test   edx,edx
c001d790:	0f 85 bf 00 00 00    	jne    c001d855 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d796:	83 ec 0c             	sub    esp,0xc
c001d799:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d79d:	03 06                	add    eax,DWORD PTR [esi]
c001d79f:	50                   	push   eax
c001d7a0:	e8 4b f8 ff ff       	call   c001cff0 <Thr::getAddressOfKernelSymbol(char const*)>
c001d7a5:	83 c4 10             	add    esp,0x10
c001d7a8:	89 c2                	mov    edx,eax
c001d7aa:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d7af:	85 c0                	test   eax,eax
c001d7b1:	0f 85 9e 00 00 00    	jne    c001d855 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7b7:	83 ec 0c             	sub    esp,0xc
c001d7ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7be:	03 06                	add    eax,DWORD PTR [esi]
c001d7c0:	50                   	push   eax
c001d7c1:	e8 16 0e ff ff       	call   c000e5dc <Krnl::resolveCompatibilitySymbol(char*)>
c001d7c6:	83 c4 10             	add    esp,0x10
c001d7c9:	89 c2                	mov    edx,eax
c001d7cb:	85 c0                	test   eax,eax
c001d7cd:	0f 85 82 00 00 00    	jne    c001d855 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7d3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7d7:	50                   	push   eax
c001d7d8:	50                   	push   eax
c001d7d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7dd:	03 06                	add    eax,DWORD PTR [esi]
c001d7df:	50                   	push   eax
c001d7e0:	68 6c ca 02 c0       	push   0xc002ca6c
c001d7e5:	e8 f7 56 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001d7ea:	58                   	pop    eax
c001d7eb:	5a                   	pop    edx
c001d7ec:	68 86 ca 02 c0       	push   0xc002ca86
c001d7f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f8:	50                   	push   eax
c001d7f9:	e8 5a 30 fe ff       	call   c0000858 <strcpy>
c001d7fe:	59                   	pop    ecx
c001d7ff:	58                   	pop    eax
c001d800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d804:	03 06                	add    eax,DWORD PTR [esi]
c001d806:	50                   	push   eax
c001d807:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d80e:	50                   	push   eax
c001d80f:	e8 84 31 fe ff       	call   c0000998 <strcat>
c001d814:	58                   	pop    eax
c001d815:	5a                   	pop    edx
c001d816:	68 1c cb 02 c0       	push   0xc002cb1c
c001d81b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d822:	50                   	push   eax
c001d823:	e8 70 31 fe ff       	call   c0000998 <strcat>
c001d828:	83 c4 10             	add    esp,0x10
c001d82b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d830:	0f 84 5d 01 00 00    	je     c001d993 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d836:	83 ec 0c             	sub    esp,0xc
c001d839:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d840:	50                   	push   eax
c001d841:	e8 57 d0 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d846:	83 c4 10             	add    esp,0x10
c001d849:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d84d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d851:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d855:	80 fb 01             	cmp    bl,0x1
c001d858:	0f 85 88 00 00 00    	jne    c001d8e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d85e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d865:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d869:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d86d:	01 ce                	add    esi,ecx
c001d86f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d875:	0f 94 c0             	sete   al
c001d878:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d87e:	0f 94 c3             	sete   bl
c001d881:	09 c3                	or     ebx,eax
c001d883:	8b 06                	mov    eax,DWORD PTR [esi]
c001d885:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d88a:	74 41                	je     c001d8cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d88c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d88f:	84 db                	test   bl,bl
c001d891:	75 15                	jne    c001d8a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d893:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d897:	66 83 f8 0c          	cmp    ax,0xc
c001d89b:	76 05                	jbe    c001d8a2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d89d:	b8 0c 00 00 00       	mov    eax,0xc
c001d8a2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8a6:	76 37                	jbe    c001d8df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8a8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d8ac:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8b1:	0f 84 dc 00 00 00    	je     c001d993 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8b7:	83 ec 0c             	sub    esp,0xc
c001d8ba:	68 9d ca 02 c0       	push   0xc002ca9d
c001d8bf:	e8 d9 cf ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8cb:	eb 12                	jmp    c001d8df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8cd:	01 c1                	add    ecx,eax
c001d8cf:	84 db                	test   bl,bl
c001d8d1:	75 0c                	jne    c001d8df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8d7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8db:	77 02                	ja     c001d8df <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8dd:	01 d1                	add    ecx,edx
c001d8df:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8e1:	e9 ea 00 00 00       	jmp    c001d9d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8e6:	80 fb 02             	cmp    bl,0x2
c001d8e9:	75 7c                	jne    c001d967 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8eb:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8f2:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8f6:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8fa:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d900:	74 20                	je     c001d922 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d902:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d908:	74 18                	je     c001d922 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d90a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d90e:	b9 0a 00 00 00       	mov    ecx,0xa
c001d913:	66 83 f8 0e          	cmp    ax,0xe
c001d917:	77 03                	ja     c001d91c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d919:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d91c:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d920:	76 1f                	jbe    c001d941 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d922:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d926:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d92b:	74 66                	je     c001d993 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d92d:	83 ec 0c             	sub    esp,0xc
c001d930:	68 b9 ca 02 c0       	push   0xc002cab9
c001d935:	e8 63 cf ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d93a:	83 c4 10             	add    esp,0x10
c001d93d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d941:	8b 06                	mov    eax,DWORD PTR [esi]
c001d943:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d948:	74 13                	je     c001d95d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d94a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d94e:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d955:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d959:	01 c8                	add    eax,ecx
c001d95b:	eb 04                	jmp    c001d961 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d95d:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d961:	01 c2                	add    edx,eax
c001d963:	89 16                	mov    DWORD PTR [esi],edx
c001d965:	eb 69                	jmp    c001d9d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d967:	0f b6 db             	movzx  ebx,bl
c001d96a:	50                   	push   eax
c001d96b:	50                   	push   eax
c001d96c:	53                   	push   ebx
c001d96d:	68 d5 ca 02 c0       	push   0xc002cad5
c001d972:	e8 6a 55 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001d977:	83 c4 10             	add    esp,0x10
c001d97a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d97f:	74 12                	je     c001d993 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d981:	83 ec 0c             	sub    esp,0xc
c001d984:	68 e0 ca 02 c0       	push   0xc002cae0
c001d989:	e8 0f cf ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001d98e:	83 c4 10             	add    esp,0x10
c001d991:	eb 3d                	jmp    c001d9d0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d993:	83 ec 0c             	sub    esp,0xc
c001d996:	55                   	push   ebp
c001d997:	e8 66 5b ff ff       	call   c0013502 <File::close()>
c001d99c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d99f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9a5:	59                   	pop    ecx
c001d9a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9aa:	e8 8b 1f ff ff       	call   c000f93a <free>
c001d9af:	5b                   	pop    ebx
c001d9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9b4:	e8 81 1f ff ff       	call   c000f93a <free>
c001d9b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9bc:	e8 79 1f ff ff       	call   c000f93a <free>
c001d9c1:	5e                   	pop    esi
c001d9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9c6:	e8 6f 1f ff ff       	call   c000f93a <free>
c001d9cb:	83 c4 10             	add    esp,0x10
c001d9ce:	eb 21                	jmp    c001d9f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9d4:	e9 76 fd ff ff       	jmp    c001d74f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9d9:	83 ec 0c             	sub    esp,0xc
c001d9dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9e0:	e8 55 1f ff ff       	call   c000f93a <free>
c001d9e5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9e9:	83 c4 10             	add    esp,0x10
c001d9ec:	e9 eb fc ff ff       	jmp    c001d6dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9f1:	31 c0                	xor    eax,eax
c001d9f3:	eb 33                	jmp    c001da28 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9f5:	83 ec 0c             	sub    esp,0xc
c001d9f8:	55                   	push   ebp
c001d9f9:	e8 04 5b ff ff       	call   c0013502 <File::close()>
c001d9fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001da01:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001da04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da07:	58                   	pop    eax
c001da08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da0c:	e8 29 1f ff ff       	call   c000f93a <free>
c001da11:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da14:	e8 21 1f ff ff       	call   c000f93a <free>
c001da19:	5a                   	pop    edx
c001da1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da1e:	e8 17 1f ff ff       	call   c000f93a <free>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	b0 01                	mov    al,0x1
c001da28:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da2e:	5b                   	pop    ebx
c001da2f:	5e                   	pop    esi
c001da30:	5f                   	pop    edi
c001da31:	5d                   	pop    ebp
c001da32:	c3                   	ret    

c001da33 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da33:	56                   	push   esi
c001da34:	31 d2                	xor    edx,edx
c001da36:	53                   	push   ebx
c001da37:	8b 1d c0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bc0
c001da3d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da41:	39 d3                	cmp    ebx,edx
c001da43:	7e 1b                	jle    c001da60 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da45:	8b 04 95 e0 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce220]
c001da4c:	39 c8                	cmp    eax,ecx
c001da4e:	77 0d                	ja     c001da5d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da50:	8b 34 95 e0 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce420]
c001da57:	01 c6                	add    esi,eax
c001da59:	39 ce                	cmp    esi,ecx
c001da5b:	77 05                	ja     c001da62 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da5d:	42                   	inc    edx
c001da5e:	eb e1                	jmp    c001da41 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da60:	31 c0                	xor    eax,eax
c001da62:	5b                   	pop    ebx
c001da63:	5e                   	pop    esi
c001da64:	c3                   	ret    

c001da65 <Thr::getDriverNameFromAddress(unsigned long)>:
c001da65:	53                   	push   ebx
c001da66:	31 c0                	xor    eax,eax
c001da68:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da6c:	8b 1d c0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bc0
c001da72:	39 c3                	cmp    ebx,eax
c001da74:	7e 22                	jle    c001da98 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da76:	8b 14 85 e0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce220]
c001da7d:	39 ca                	cmp    edx,ecx
c001da7f:	77 14                	ja     c001da95 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da81:	03 14 85 e0 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce420]
c001da88:	39 ca                	cmp    edx,ecx
c001da8a:	76 09                	jbe    c001da95 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da8c:	8b 04 85 e0 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce020]
c001da93:	eb 05                	jmp    c001da9a <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da95:	40                   	inc    eax
c001da96:	eb da                	jmp    c001da72 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da98:	31 c0                	xor    eax,eax
c001da9a:	5b                   	pop    ebx
c001da9b:	c3                   	ret    

c001da9c <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da9c:	53                   	push   ebx
c001da9d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001daa1:	53                   	push   ebx
c001daa2:	e8 8c ff ff ff       	call   c001da33 <Thr::getDriverBaseFromAddress(unsigned long)>
c001daa7:	5a                   	pop    edx
c001daa8:	31 d2                	xor    edx,edx
c001daaa:	85 c0                	test   eax,eax
c001daac:	74 04                	je     c001dab2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001daae:	89 da                	mov    edx,ebx
c001dab0:	29 c2                	sub    edx,eax
c001dab2:	89 d0                	mov    eax,edx
c001dab4:	5b                   	pop    ebx
c001dab5:	c3                   	ret    

c001dab6 <Thr::loadDLL(char const*, bool)>:
c001dab6:	55                   	push   ebp
c001dab7:	57                   	push   edi
c001dab8:	56                   	push   esi
c001dab9:	53                   	push   ebx
c001daba:	81 ec 34 01 00 00    	sub    esp,0x134
c001dac0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dac7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dace:	56                   	push   esi
c001dacf:	68 f8 ca 02 c0       	push   0xc002caf8
c001dad4:	e8 08 54 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001dad9:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dae0:	e8 45 1e ff ff       	call   c000f92a <malloc>
c001dae5:	83 c4 0c             	add    esp,0xc
c001dae8:	89 c3                	mov    ebx,eax
c001daea:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001daf0:	56                   	push   esi
c001daf1:	50                   	push   eax
c001daf2:	e8 49 59 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001daf7:	83 c4 10             	add    esp,0x10
c001dafa:	85 db                	test   ebx,ebx
c001dafc:	75 3c                	jne    c001db3a <Thr::loadDLL(char const*, bool)+0x84>
c001dafe:	89 f8                	mov    eax,edi
c001db00:	84 c0                	test   al,al
c001db02:	0f 84 cc 01 00 00    	je     c001dcd4 <Thr::loadDLL(char const*, bool)+0x21e>
c001db08:	55                   	push   ebp
c001db09:	55                   	push   ebp
c001db0a:	68 09 cb 02 c0       	push   0xc002cb09
c001db0f:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001db13:	55                   	push   ebp
c001db14:	e8 3f 2d fe ff       	call   c0000858 <strcpy>
c001db19:	58                   	pop    eax
c001db1a:	5a                   	pop    edx
c001db1b:	56                   	push   esi
c001db1c:	55                   	push   ebp
c001db1d:	e8 76 2e fe ff       	call   c0000998 <strcat>
c001db22:	59                   	pop    ecx
c001db23:	58                   	pop    eax
c001db24:	68 1c cb 02 c0       	push   0xc002cb1c
c001db29:	55                   	push   ebp
c001db2a:	e8 69 2e fe ff       	call   c0000998 <strcat>
c001db2f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db32:	e8 66 cd ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001db37:	83 c4 10             	add    esp,0x10
c001db3a:	51                   	push   ecx
c001db3b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db3f:	50                   	push   eax
c001db40:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db44:	50                   	push   eax
c001db45:	53                   	push   ebx
c001db46:	e8 05 5c ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c001db4b:	83 c4 10             	add    esp,0x10
c001db4e:	85 db                	test   ebx,ebx
c001db50:	74 0c                	je     c001db5e <Thr::loadDLL(char const*, bool)+0xa8>
c001db52:	83 ec 0c             	sub    esp,0xc
c001db55:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db57:	53                   	push   ebx
c001db58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db5b:	83 c4 10             	add    esp,0x10
c001db5e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db63:	75 0a                	jne    c001db6f <Thr::loadDLL(char const*, bool)+0xb9>
c001db65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db69:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db6d:	75 3c                	jne    c001dbab <Thr::loadDLL(char const*, bool)+0xf5>
c001db6f:	89 f8                	mov    eax,edi
c001db71:	84 c0                	test   al,al
c001db73:	0f 84 43 01 00 00    	je     c001dcbc <Thr::loadDLL(char const*, bool)+0x206>
c001db79:	51                   	push   ecx
c001db7a:	51                   	push   ecx
c001db7b:	68 09 cb 02 c0       	push   0xc002cb09
c001db80:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db84:	53                   	push   ebx
c001db85:	e8 ce 2c fe ff       	call   c0000858 <strcpy>
c001db8a:	5d                   	pop    ebp
c001db8b:	58                   	pop    eax
c001db8c:	56                   	push   esi
c001db8d:	53                   	push   ebx
c001db8e:	e8 05 2e fe ff       	call   c0000998 <strcat>
c001db93:	58                   	pop    eax
c001db94:	5a                   	pop    edx
c001db95:	68 1c cb 02 c0       	push   0xc002cb1c
c001db9a:	53                   	push   ebx
c001db9b:	e8 f8 2d fe ff       	call   c0000998 <strcat>
c001dba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dba3:	e8 f5 cc ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001dba8:	83 c4 10             	add    esp,0x10
c001dbab:	52                   	push   edx
c001dbac:	6a 03                	push   0x3
c001dbae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dbb6:	05 ff 0f 00 00       	add    eax,0xfff
c001dbbb:	83 d2 00             	adc    edx,0x0
c001dbbe:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dbc2:	50                   	push   eax
c001dbc3:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c001dbc9:	e8 46 48 ff ff       	call   c0012414 <VAS::allocatePages(int, int)>
c001dbce:	59                   	pop    ecx
c001dbcf:	89 c3                	mov    ebx,eax
c001dbd1:	5d                   	pop    ebp
c001dbd2:	50                   	push   eax
c001dbd3:	68 1e cb 02 c0       	push   0xc002cb1e
c001dbd8:	e8 04 53 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001dbdd:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbe0:	e8 d3 2b fe ff       	call   c00007b8 <strlen>
c001dbe5:	8b 2d c0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031bc0
c001dbeb:	40                   	inc    eax
c001dbec:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbef:	e8 36 1d ff ff       	call   c000f92a <malloc>
c001dbf4:	89 04 ad e0 1f 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce020],eax
c001dbfb:	58                   	pop    eax
c001dbfc:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c001dc01:	5a                   	pop    edx
c001dc02:	56                   	push   esi
c001dc03:	ff 34 85 e0 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce020]
c001dc0a:	e8 49 2c fe ff       	call   c0000858 <strcpy>
c001dc0f:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c001dc14:	8d 50 01             	lea    edx,[eax+0x1]
c001dc17:	89 1c 85 e0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce220],ebx
c001dc1e:	89 15 c0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc0,edx
c001dc24:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc28:	83 c4 0c             	add    esp,0xc
c001dc2b:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c001dc32:	6a 01                	push   0x1
c001dc34:	53                   	push   ebx
c001dc35:	56                   	push   esi
c001dc36:	e8 c2 f6 ff ff       	call   c001d2fd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc3b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc3f:	83 c4 10             	add    esp,0x10
c001dc42:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc47:	0f 85 83 00 00 00    	jne    c001dcd0 <Thr::loadDLL(char const*, bool)+0x21a>
c001dc4d:	89 f8                	mov    eax,edi
c001dc4f:	84 c0                	test   al,al
c001dc51:	74 6d                	je     c001dcc0 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc53:	83 ec 0c             	sub    esp,0xc
c001dc56:	68 2b cb 02 c0       	push   0xc002cb2b
c001dc5b:	e8 3d cc ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001dc60:	83 c4 10             	add    esp,0x10
c001dc63:	eb 5b                	jmp    c001dcc0 <Thr::loadDLL(char const*, bool)+0x20a>
c001dc65:	89 ee                	mov    esi,ebp
c001dc67:	50                   	push   eax
c001dc68:	c1 e6 0c             	shl    esi,0xc
c001dc6b:	50                   	push   eax
c001dc6c:	01 de                	add    esi,ebx
c001dc6e:	56                   	push   esi
c001dc6f:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c001dc75:	e8 02 43 ff ff       	call   c0011f7c <VAS::getPageTableEntry(unsigned long)>
c001dc7a:	83 c4 10             	add    esp,0x10
c001dc7d:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc80:	75 0c                	jne    c001dc8e <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc82:	83 ec 0c             	sub    esp,0xc
c001dc85:	56                   	push   esi
c001dc86:	e8 81 22 ff ff       	call   c000ff0c <Phys::freePage(unsigned long)>
c001dc8b:	83 c4 10             	add    esp,0x10
c001dc8e:	45                   	inc    ebp
c001dc8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc93:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc97:	05 ff 0f 00 00       	add    eax,0xfff
c001dc9c:	bf 00 00 00 00       	mov    edi,0x0
c001dca1:	83 d2 00             	adc    edx,0x0
c001dca4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dca8:	c1 ea 0c             	shr    edx,0xc
c001dcab:	39 c5                	cmp    ebp,eax
c001dcad:	89 d1                	mov    ecx,edx
c001dcaf:	89 f8                	mov    eax,edi
c001dcb1:	19 c8                	sbb    eax,ecx
c001dcb3:	72 b0                	jb     c001dc65 <Thr::loadDLL(char const*, bool)+0x1af>
c001dcb5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dcba:	75 18                	jne    c001dcd4 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcbc:	31 db                	xor    ebx,ebx
c001dcbe:	eb 14                	jmp    c001dcd4 <Thr::loadDLL(char const*, bool)+0x21e>
c001dcc0:	83 ec 0c             	sub    esp,0xc
c001dcc3:	68 4a cb 02 c0       	push   0xc002cb4a
c001dcc8:	e8 d0 cb ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001dccd:	83 c4 10             	add    esp,0x10
c001dcd0:	31 ed                	xor    ebp,ebp
c001dcd2:	eb bb                	jmp    c001dc8f <Thr::loadDLL(char const*, bool)+0x1d9>
c001dcd4:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcda:	89 d8                	mov    eax,ebx
c001dcdc:	5b                   	pop    ebx
c001dcdd:	5e                   	pop    esi
c001dcde:	5f                   	pop    edi
c001dcdf:	5d                   	pop    ebp
c001dce0:	c3                   	ret    

c001dce1 <Thr::executeDLL(unsigned long, void*)>:
c001dce1:	56                   	push   esi
c001dce2:	53                   	push   ebx
c001dce3:	52                   	push   edx
c001dce4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dce8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dcec:	85 db                	test   ebx,ebx
c001dcee:	75 10                	jne    c001dd00 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dcf0:	83 ec 0c             	sub    esp,0xc
c001dcf3:	68 66 cb 02 c0       	push   0xc002cb66
c001dcf8:	e8 a0 cb ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001dcfd:	83 c4 10             	add    esp,0x10
c001dd00:	50                   	push   eax
c001dd01:	50                   	push   eax
c001dd02:	53                   	push   ebx
c001dd03:	68 90 cb 02 c0       	push   0xc002cb90
c001dd08:	e8 d4 51 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001dd0d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd11:	89 d8                	mov    eax,ebx
c001dd13:	83 c4 14             	add    esp,0x14
c001dd16:	5b                   	pop    ebx
c001dd17:	5e                   	pop    esi
c001dd18:	ff e0                	jmp    eax

c001dd1a <userModeEntryPoint(void*)>:
c001dd1a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001dd1f:	48                   	dec    eax
c001dd20:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001dd25:	75 01                	jne    c001dd28 <userModeEntryPoint(void*)+0xe>
c001dd27:	fb                   	sti    
c001dd28:	fb                   	sti    
c001dd29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd31:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd3b:	e9 ea 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd40 <changeTSS>:
c001dd40:	83 ec 14             	sub    esp,0x14
c001dd43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd48:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd4b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd50:	c1 e2 15             	shl    edx,0x15
c001dd53:	29 d0                	sub    eax,edx
c001dd55:	50                   	push   eax
c001dd56:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001dd5b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd61:	05 7c 11 00 00       	add    eax,0x117c
c001dd66:	50                   	push   eax
c001dd67:	e8 ae 36 ff ff       	call   c001141a <TSS::setESP(unsigned long)>
c001dd6c:	83 c4 1c             	add    esp,0x1c
c001dd6f:	c3                   	ret    

c001dd70 <switchToThread(ThreadControlBlock*)>:
c001dd70:	57                   	push   edi
c001dd71:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001dd76:	56                   	push   esi
c001dd77:	85 c0                	test   eax,eax
c001dd79:	53                   	push   ebx
c001dd7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd7e:	0f 85 88 00 00 00    	jne    c001de0c <switchToThread(ThreadControlBlock*)+0x9c>
c001dd84:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd87:	3c ff                	cmp    al,0xff
c001dd89:	74 7d                	je     c001de08 <switchToThread(ThreadControlBlock*)+0x98>
c001dd8b:	0f b6 d0             	movzx  edx,al
c001dd8e:	b8 84 03 00 00       	mov    eax,0x384
c001dd93:	29 d0                	sub    eax,edx
c001dd95:	c1 e0 10             	shl    eax,0x10
c001dd98:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd9b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd9e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001dda3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dda9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddb0:	74 4a                	je     c001ddfc <switchToThread(ThreadControlBlock*)+0x8c>
c001ddb2:	0f 31                	rdtsc  
c001ddb4:	a3 c8 23 03 c0       	mov    ds:0xc00323c8,eax
c001ddb9:	89 c6                	mov    esi,eax
c001ddbb:	89 d7                	mov    edi,edx
c001ddbd:	2b 35 b8 23 03 c0    	sub    esi,DWORD PTR ds:0xc00323b8
c001ddc3:	89 15 cc 23 03 c0    	mov    DWORD PTR ds:0xc00323cc,edx
c001ddc9:	1b 3d bc 23 03 c0    	sbb    edi,DWORD PTR ds:0xc00323bc
c001ddcf:	89 35 c0 23 03 c0    	mov    DWORD PTR ds:0xc00323c0,esi
c001ddd5:	a3 b8 23 03 c0       	mov    ds:0xc00323b8,eax
c001ddda:	89 3d c4 23 03 c0    	mov    DWORD PTR ds:0xc00323c4,edi
c001dde0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dde6:	89 15 bc 23 03 c0    	mov    DWORD PTR ds:0xc00323bc,edx
c001ddec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ddef:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ddf2:	01 c6                	add    esi,eax
c001ddf4:	11 d7                	adc    edi,edx
c001ddf6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001ddf9:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001ddfc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001de00:	5b                   	pop    ebx
c001de01:	5e                   	pop    esi
c001de02:	5f                   	pop    edi
c001de03:	e9 5a 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de08:	31 c0                	xor    eax,eax
c001de0a:	eb 8f                	jmp    c001dd9b <switchToThread(ThreadControlBlock*)+0x2b>
c001de0c:	5b                   	pop    ebx
c001de0d:	c7 05 80 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x1
c001de17:	5e                   	pop    esi
c001de18:	5f                   	pop    edi
c001de19:	c3                   	ret    

c001de1a <Process::addArgs(char**)>:
c001de1a:	57                   	push   edi
c001de1b:	56                   	push   esi
c001de1c:	53                   	push   ebx
c001de1d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de21:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de25:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de2f:	85 ff                	test   edi,edi
c001de31:	74 3d                	je     c001de70 <Process::addArgs(char**)+0x56>
c001de33:	8b 07                	mov    eax,DWORD PTR [edi]
c001de35:	85 c0                	test   eax,eax
c001de37:	74 37                	je     c001de70 <Process::addArgs(char**)+0x56>
c001de39:	31 db                	xor    ebx,ebx
c001de3b:	83 ec 0c             	sub    esp,0xc
c001de3e:	50                   	push   eax
c001de3f:	e8 74 29 fe ff       	call   c00007b8 <strlen>
c001de44:	40                   	inc    eax
c001de45:	89 04 24             	mov    DWORD PTR [esp],eax
c001de48:	e8 dd 1a ff ff       	call   c000f92a <malloc>
c001de4d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de54:	5a                   	pop    edx
c001de55:	59                   	pop    ecx
c001de56:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de59:	43                   	inc    ebx
c001de5a:	50                   	push   eax
c001de5b:	e8 f8 29 fe ff       	call   c0000858 <strcpy>
c001de60:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de66:	83 c4 10             	add    esp,0x10
c001de69:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de6c:	85 c0                	test   eax,eax
c001de6e:	75 cb                	jne    c001de3b <Process::addArgs(char**)+0x21>
c001de70:	5b                   	pop    ebx
c001de71:	5e                   	pop    esi
c001de72:	5f                   	pop    edi
c001de73:	c3                   	ret    

c001de74 <Process::Process(char const*, Process*, char**)>:
c001de74:	56                   	push   esi
c001de75:	53                   	push   ebx
c001de76:	83 ec 14             	sub    esp,0x14
c001de79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de7d:	05 0c 02 00 00       	add    eax,0x20c
c001de82:	bb 07 00 00 00       	mov    ebx,0x7
c001de87:	89 c6                	mov    esi,eax
c001de89:	85 db                	test   ebx,ebx
c001de8b:	78 12                	js     c001de9f <Process::Process(char const*, Process*, char**)+0x2b>
c001de8d:	83 ec 0c             	sub    esp,0xc
c001de90:	56                   	push   esi
c001de91:	e8 bc b6 00 00       	call   c0029552 <ThreadControlBlock::ThreadControlBlock()>
c001de96:	83 c4 10             	add    esp,0x10
c001de99:	83 c6 63             	add    esi,0x63
c001de9c:	4b                   	dec    ebx
c001de9d:	eb ea                	jmp    c001de89 <Process::Process(char const*, Process*, char**)+0x15>
c001de9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dea3:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001deaa:	83 ec 0c             	sub    esp,0xc
c001dead:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001deb1:	e8 38 c8 ff ff       	call   c001a6ee <Krnl::newProcessEnv(Process*)>
c001deb6:	83 c4 10             	add    esp,0x10
c001deb9:	89 c2                	mov    edx,eax
c001debb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001debf:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec9:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ded2:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001ded7:	8d 50 01             	lea    edx,[eax+0x1]
c001deda:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001dee0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dee4:	89 02                	mov    DWORD PTR [edx],eax
c001dee6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001deee:	83 ec 0c             	sub    esp,0xc
c001def1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001def5:	e8 30 1a ff ff       	call   c000f92a <malloc>
c001defa:	83 c4 10             	add    esp,0x10
c001defd:	89 c3                	mov    ebx,eax
c001deff:	83 ec 08             	sub    esp,0x8
c001df02:	6a 00                	push   0x0
c001df04:	53                   	push   ebx
c001df05:	e8 b2 48 ff ff       	call   c00127bc <VAS::VAS(bool)>
c001df0a:	83 c4 10             	add    esp,0x10
c001df0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df11:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df1b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df2d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df37:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df3d:	85 c0                	test   eax,eax
c001df3f:	74 42                	je     c001df83 <Process::Process(char const*, Process*, char**)+0x10f>
c001df41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df45:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df4b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df55:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df65:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df6f:	05 0c 01 00 00       	add    eax,0x10c
c001df74:	83 ec 08             	sub    esp,0x8
c001df77:	52                   	push   edx
c001df78:	50                   	push   eax
c001df79:	e8 da 28 fe ff       	call   c0000858 <strcpy>
c001df7e:	83 c4 10             	add    esp,0x10
c001df81:	eb 63                	jmp    c001dfe6 <Process::Process(char const*, Process*, char**)+0x172>
c001df83:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df8b:	83 ec 0c             	sub    esp,0xc
c001df8e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df92:	e8 93 19 ff ff       	call   c000f92a <malloc>
c001df97:	83 c4 10             	add    esp,0x10
c001df9a:	89 c3                	mov    ebx,eax
c001df9c:	83 ec 08             	sub    esp,0x8
c001df9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dfa3:	53                   	push   ebx
c001dfa4:	e8 53 31 ff ff       	call   c00110fc <VgaText::VgaText(char const*)>
c001dfa9:	83 c4 10             	add    esp,0x10
c001dfac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfb0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfba:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfc0:	83 ec 0c             	sub    esp,0xc
c001dfc3:	50                   	push   eax
c001dfc4:	e8 6a 26 ff ff       	call   c0010633 <addToTerminalCycle(VgaText*)>
c001dfc9:	83 c4 10             	add    esp,0x10
c001dfcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfd0:	05 0c 01 00 00       	add    eax,0x10c
c001dfd5:	83 ec 08             	sub    esp,0x8
c001dfd8:	68 af cb 02 c0       	push   0xc002cbaf
c001dfdd:	50                   	push   eax
c001dfde:	e8 75 28 fe ff       	call   c0000858 <strcpy>
c001dfe3:	83 c4 10             	add    esp,0x10
c001dfe6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfea:	83 c0 0c             	add    eax,0xc
c001dfed:	83 ec 08             	sub    esp,0x8
c001dff0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dff4:	50                   	push   eax
c001dff5:	e8 5e 28 fe ff       	call   c0000858 <strcpy>
c001dffa:	83 c4 10             	add    esp,0x10
c001dffd:	83 ec 08             	sub    esp,0x8
c001e000:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e004:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e008:	e8 0d fe ff ff       	call   c001de1a <Process::addArgs(char**)>
c001e00d:	83 c4 10             	add    esp,0x10
c001e010:	83 ec 08             	sub    esp,0x8
c001e013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e017:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e01b:	e8 a7 ed ff ff       	call   c001cdc7 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e020:	83 c4 10             	add    esp,0x10
c001e023:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e027:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e02b:	83 f0 01             	xor    eax,0x1
c001e02e:	88 c2                	mov    dl,al
c001e030:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e034:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e03a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e03f:	83 ec 08             	sub    esp,0x8
c001e042:	50                   	push   eax
c001e043:	68 dc cc 02 c0       	push   0xc002ccdc
c001e048:	e8 94 4e ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e04d:	83 c4 10             	add    esp,0x10
c001e050:	90                   	nop
c001e051:	83 c4 14             	add    esp,0x14
c001e054:	5b                   	pop    ebx
c001e055:	5e                   	pop    esi
c001e056:	c3                   	ret    
c001e057:	90                   	nop

c001e058 <Process::Process(bool, char const*, Process*, char**)>:
c001e058:	56                   	push   esi
c001e059:	53                   	push   ebx
c001e05a:	83 ec 24             	sub    esp,0x24
c001e05d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e061:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e065:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e069:	05 0c 02 00 00       	add    eax,0x20c
c001e06e:	bb 07 00 00 00       	mov    ebx,0x7
c001e073:	89 c6                	mov    esi,eax
c001e075:	85 db                	test   ebx,ebx
c001e077:	78 12                	js     c001e08b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e079:	83 ec 0c             	sub    esp,0xc
c001e07c:	56                   	push   esi
c001e07d:	e8 d0 b4 00 00       	call   c0029552 <ThreadControlBlock::ThreadControlBlock()>
c001e082:	83 c4 10             	add    esp,0x10
c001e085:	83 c6 63             	add    esi,0x63
c001e088:	4b                   	dec    ebx
c001e089:	eb ea                	jmp    c001e075 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e08b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e08f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e096:	83 ec 0c             	sub    esp,0xc
c001e099:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e09d:	e8 4c c6 ff ff       	call   c001a6ee <Krnl::newProcessEnv(Process*)>
c001e0a2:	83 c4 10             	add    esp,0x10
c001e0a5:	89 c2                	mov    edx,eax
c001e0a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0ab:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0be:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001e0c3:	8d 50 01             	lea    edx,[eax+0x1]
c001e0c6:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001e0cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0d0:	89 02                	mov    DWORD PTR [edx],eax
c001e0d2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0da:	83 ec 0c             	sub    esp,0xc
c001e0dd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0e1:	e8 44 18 ff ff       	call   c000f92a <malloc>
c001e0e6:	83 c4 10             	add    esp,0x10
c001e0e9:	89 c3                	mov    ebx,eax
c001e0eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0f0:	83 ec 08             	sub    esp,0x8
c001e0f3:	50                   	push   eax
c001e0f4:	53                   	push   ebx
c001e0f5:	e8 c2 46 ff ff       	call   c00127bc <VAS::VAS(bool)>
c001e0fa:	83 c4 10             	add    esp,0x10
c001e0fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e101:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e107:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e10b:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e115:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e119:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e11d:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e123:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e127:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e12d:	85 c0                	test   eax,eax
c001e12f:	74 42                	je     c001e173 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e131:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e135:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e13b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e141:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e145:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e14b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e14f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e155:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e15b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e15f:	05 0c 01 00 00       	add    eax,0x10c
c001e164:	83 ec 08             	sub    esp,0x8
c001e167:	52                   	push   edx
c001e168:	50                   	push   eax
c001e169:	e8 ea 26 fe ff       	call   c0000858 <strcpy>
c001e16e:	83 c4 10             	add    esp,0x10
c001e171:	eb 63                	jmp    c001e1d6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e173:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e17b:	83 ec 0c             	sub    esp,0xc
c001e17e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e182:	e8 a3 17 ff ff       	call   c000f92a <malloc>
c001e187:	83 c4 10             	add    esp,0x10
c001e18a:	89 c3                	mov    ebx,eax
c001e18c:	83 ec 08             	sub    esp,0x8
c001e18f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e193:	53                   	push   ebx
c001e194:	e8 63 2f ff ff       	call   c00110fc <VgaText::VgaText(char const*)>
c001e199:	83 c4 10             	add    esp,0x10
c001e19c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1a0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1b0:	83 ec 0c             	sub    esp,0xc
c001e1b3:	50                   	push   eax
c001e1b4:	e8 7a 24 ff ff       	call   c0010633 <addToTerminalCycle(VgaText*)>
c001e1b9:	83 c4 10             	add    esp,0x10
c001e1bc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1c0:	05 0c 01 00 00       	add    eax,0x10c
c001e1c5:	83 ec 08             	sub    esp,0x8
c001e1c8:	68 af cb 02 c0       	push   0xc002cbaf
c001e1cd:	50                   	push   eax
c001e1ce:	e8 85 26 fe ff       	call   c0000858 <strcpy>
c001e1d3:	83 c4 10             	add    esp,0x10
c001e1d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1da:	83 c0 0c             	add    eax,0xc
c001e1dd:	83 ec 08             	sub    esp,0x8
c001e1e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1e4:	50                   	push   eax
c001e1e5:	e8 6e 26 fe ff       	call   c0000858 <strcpy>
c001e1ea:	83 c4 10             	add    esp,0x10
c001e1ed:	83 ec 08             	sub    esp,0x8
c001e1f0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1f4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1f8:	e8 1d fc ff ff       	call   c001de1a <Process::addArgs(char**)>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	90                   	nop
c001e201:	83 c4 24             	add    esp,0x24
c001e204:	5b                   	pop    ebx
c001e205:	5e                   	pop    esi
c001e206:	c3                   	ret    

c001e207 <taskStartupFunction>:
c001e207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e20c:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e20f:	c3                   	ret    

c001e210 <Semaphore::Semaphore(int)>:
c001e210:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e214:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e218:	89 10                	mov    DWORD PTR [eax],edx
c001e21a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e21e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e225:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e229:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e234:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e23b:	90                   	nop
c001e23c:	c3                   	ret    
c001e23d:	90                   	nop

c001e23e <Mutex::Mutex()>:
c001e23e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e242:	6a 01                	push   0x1
c001e244:	50                   	push   eax
c001e245:	e8 c6 ff ff ff       	call   c001e210 <Semaphore::Semaphore(int)>
c001e24a:	83 c4 08             	add    esp,0x8
c001e24d:	90                   	nop
c001e24e:	c3                   	ret    
c001e24f:	90                   	nop

c001e250 <Process::createThread(void (*)(void*), void*, int)>:
c001e250:	55                   	push   ebp
c001e251:	31 c9                	xor    ecx,ecx
c001e253:	57                   	push   edi
c001e254:	56                   	push   esi
c001e255:	53                   	push   ebx
c001e256:	83 ec 1c             	sub    esp,0x1c
c001e259:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e25d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e264:	89 f2                	mov    edx,esi
c001e266:	0f b7 c2             	movzx  eax,dx
c001e269:	83 e2 01             	and    edx,0x1
c001e26c:	74 16                	je     c001e284 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e26e:	d1 f8                	sar    eax,1
c001e270:	41                   	inc    ecx
c001e271:	89 c2                	mov    edx,eax
c001e273:	83 f9 10             	cmp    ecx,0x10
c001e276:	75 ee                	jne    c001e266 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e278:	83 c4 1c             	add    esp,0x1c
c001e27b:	31 db                	xor    ebx,ebx
c001e27d:	89 d8                	mov    eax,ebx
c001e27f:	5b                   	pop    ebx
c001e280:	5e                   	pop    esi
c001e281:	5f                   	pop    edi
c001e282:	5d                   	pop    ebp
c001e283:	c3                   	ret    
c001e284:	b8 01 00 00 00       	mov    eax,0x1
c001e289:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e28c:	d3 e0                	shl    eax,cl
c001e28e:	09 c6                	or     esi,eax
c001e290:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e293:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e29a:	89 c6                	mov    esi,eax
c001e29c:	c1 e6 05             	shl    esi,0x5
c001e29f:	01 f0                	add    eax,esi
c001e2a1:	01 d8                	add    eax,ebx
c001e2a3:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e2aa:	75 0a                	jne    c001e2b6 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e2ac:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2b6:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2bc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2c0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2c3:	01 ca                	add    edx,ecx
c001e2c5:	83 ec 08             	sub    esp,0x8
c001e2c8:	89 d0                	mov    eax,edx
c001e2ca:	c1 e0 05             	shl    eax,0x5
c001e2cd:	01 d0                	add    eax,edx
c001e2cf:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2d7:	01 d8                	add    eax,ebx
c001e2d9:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2df:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e2e5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2eb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2f1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2f7:	89 cd                	mov    ebp,ecx
c001e2f9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2fd:	f7 dd                	neg    ebp
c001e2ff:	c1 e5 15             	shl    ebp,0x15
c001e302:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e308:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e30e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e318:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e31e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e328:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e336:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e33d:	53                   	push   ebx
c001e33e:	68 a4 23 03 c0       	push   0xc00323a4
c001e343:	e8 c4 af 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e348:	89 d8                	mov    eax,ebx
c001e34a:	83 c4 10             	add    esp,0x10
c001e34d:	83 c4 1c             	add    esp,0x1c
c001e350:	5b                   	pop    ebx
c001e351:	5e                   	pop    esi
c001e352:	5f                   	pop    edi
c001e353:	5d                   	pop    ebp
c001e354:	c3                   	ret    
c001e355:	90                   	nop

c001e356 <Process::createUserThread()>:
c001e356:	83 ec 0c             	sub    esp,0xc
c001e359:	68 80 00 00 00       	push   0x80
c001e35e:	6a 00                	push   0x0
c001e360:	68 1a dd 01 c0       	push   0xc001dd1a
c001e365:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e369:	e8 e2 fe ff ff       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c001e36e:	83 c4 1c             	add    esp,0x1c
c001e371:	c3                   	ret    

c001e372 <setupMultitasking(void (*)())>:
c001e372:	56                   	push   esi
c001e373:	53                   	push   ebx
c001e374:	51                   	push   ecx
c001e375:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e379:	eb 10                	jmp    c001e38b <setupMultitasking(void (*)())+0x19>
c001e37b:	83 ec 0c             	sub    esp,0xc
c001e37e:	68 a4 23 03 c0       	push   0xc00323a4
c001e383:	e8 d6 ae 00 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e388:	83 c4 10             	add    esp,0x10
c001e38b:	83 ec 0c             	sub    esp,0xc
c001e38e:	68 a4 23 03 c0       	push   0xc00323a4
c001e393:	e8 a2 ae 00 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e398:	83 c4 10             	add    esp,0x10
c001e39b:	84 c0                	test   al,al
c001e39d:	74 dc                	je     c001e37b <setupMultitasking(void (*)())+0x9>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	68 3f 07 00 00       	push   0x73f
c001e3a7:	e8 7e 15 ff ff       	call   c000f92a <malloc>
c001e3ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3b3:	89 c3                	mov    ebx,eax
c001e3b5:	6a 00                	push   0x0
c001e3b7:	68 b3 cb 02 c0       	push   0xc002cbb3
c001e3bc:	6a 01                	push   0x1
c001e3be:	50                   	push   eax
c001e3bf:	e8 94 fc ff ff       	call   c001e058 <Process::Process(bool, char const*, Process*, char**)>
c001e3c4:	83 c4 18             	add    esp,0x18
c001e3c7:	89 1d b0 23 03 c0    	mov    DWORD PTR ds:0xc00323b0,ebx
c001e3cd:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3d3:	68 04 cd 02 c0       	push   0xc002cd04
c001e3d8:	e8 04 4b ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e3dd:	58                   	pop    eax
c001e3de:	5a                   	pop    edx
c001e3df:	6a 63                	push   0x63
c001e3e1:	68 38 cd 02 c0       	push   0xc002cd38
c001e3e6:	e8 f6 4a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e3eb:	59                   	pop    ecx
c001e3ec:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3f2:	e8 0d 29 ff ff       	call   c0010d04 <setActiveTerminal(VgaText*)>
c001e3f7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3ff:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e409:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e40f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e412:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e41c:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e422:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e428:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e432:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e43c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e446:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e44c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e456:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e45c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e466:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e46c:	58                   	pop    eax
c001e46d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e473:	5a                   	pop    edx
c001e474:	68 af cb 02 c0       	push   0xc002cbaf
c001e479:	50                   	push   eax
c001e47a:	e8 d9 23 fe ff       	call   c0000858 <strcpy>
c001e47f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e486:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e48a:	83 c4 14             	add    esp,0x14
c001e48d:	5b                   	pop    ebx
c001e48e:	5e                   	pop    esi
c001e48f:	e9 c0 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e494 <schedule()>:
c001e494:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e499:	85 c0                	test   eax,eax
c001e49b:	74 0b                	je     c001e4a8 <schedule()+0x14>
c001e49d:	c7 05 80 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x1
c001e4a7:	c3                   	ret    
c001e4a8:	53                   	push   ebx
c001e4a9:	83 ec 14             	sub    esp,0x14
c001e4ac:	68 a4 23 03 c0       	push   0xc00323a4
c001e4b1:	e8 84 ad 00 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4b6:	83 c4 10             	add    esp,0x10
c001e4b9:	84 c0                	test   al,al
c001e4bb:	75 38                	jne    c001e4f5 <schedule()+0x61>
c001e4bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4c5:	4a                   	dec    edx
c001e4c6:	74 32                	je     c001e4fa <schedule()+0x66>
c001e4c8:	83 ec 0c             	sub    esp,0xc
c001e4cb:	68 a4 23 03 c0       	push   0xc00323a4
c001e4d0:	e8 81 ad 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d5:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e4dc:	89 c3                	mov    ebx,eax
c001e4de:	e8 7b ad 00 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4e3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4ed:	e8 7e f8 ff ff       	call   c001dd70 <switchToThread(ThreadControlBlock*)>
c001e4f2:	83 c4 10             	add    esp,0x10
c001e4f5:	83 c4 08             	add    esp,0x8
c001e4f8:	5b                   	pop    ebx
c001e4f9:	c3                   	ret    
c001e4fa:	83 ec 08             	sub    esp,0x8
c001e4fd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e504:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e50a:	68 a4 23 03 c0       	push   0xc00323a4
c001e50f:	e8 f8 ad 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e514:	83 c4 10             	add    esp,0x10
c001e517:	eb af                	jmp    c001e4c8 <schedule()+0x34>
c001e519:	90                   	nop

c001e51a <Semaphore::tryAcquire()>:
c001e51a:	53                   	push   ebx
c001e51b:	83 ec 08             	sub    esp,0x8
c001e51e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e522:	fa                   	cli    
c001e523:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e528:	8d 50 01             	lea    edx,[eax+0x1]
c001e52b:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001e531:	8b 15 84 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032384
c001e537:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e53a:	89 1d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ebx
c001e540:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e543:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e545:	7c 2a                	jl     c001e571 <Semaphore::tryAcquire()+0x57>
c001e547:	89 15 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,edx
c001e54d:	85 d2                	test   edx,edx
c001e54f:	75 0a                	jne    c001e55b <Semaphore::tryAcquire()+0x41>
c001e551:	8b 15 80 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032380
c001e557:	85 d2                	test   edx,edx
c001e559:	75 5b                	jne    c001e5b6 <Semaphore::tryAcquire()+0x9c>
c001e55b:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e560:	85 c0                	test   eax,eax
c001e562:	74 07                	je     c001e56b <Semaphore::tryAcquire()+0x51>
c001e564:	31 c0                	xor    eax,eax
c001e566:	83 c4 08             	add    esp,0x8
c001e569:	5b                   	pop    ebx
c001e56a:	c3                   	ret    
c001e56b:	fb                   	sti    
c001e56c:	83 c4 08             	add    esp,0x8
c001e56f:	5b                   	pop    ebx
c001e570:	c3                   	ret    
c001e571:	43                   	inc    ebx
c001e572:	89 15 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,edx
c001e578:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e57b:	85 d2                	test   edx,edx
c001e57d:	75 1f                	jne    c001e59e <Semaphore::tryAcquire()+0x84>
c001e57f:	8b 0d 80 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032380
c001e585:	85 c9                	test   ecx,ecx
c001e587:	74 15                	je     c001e59e <Semaphore::tryAcquire()+0x84>
c001e589:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e593:	e8 fc fe ff ff       	call   c001e494 <schedule()>
c001e598:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e59d:	48                   	dec    eax
c001e59e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e5a3:	85 c0                	test   eax,eax
c001e5a5:	75 08                	jne    c001e5af <Semaphore::tryAcquire()+0x95>
c001e5a7:	fb                   	sti    
c001e5a8:	b0 01                	mov    al,0x1
c001e5aa:	83 c4 08             	add    esp,0x8
c001e5ad:	5b                   	pop    ebx
c001e5ae:	c3                   	ret    
c001e5af:	b0 01                	mov    al,0x1
c001e5b1:	83 c4 08             	add    esp,0x8
c001e5b4:	5b                   	pop    ebx
c001e5b5:	c3                   	ret    
c001e5b6:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e5c0:	e8 cf fe ff ff       	call   c001e494 <schedule()>
c001e5c5:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e5ca:	48                   	dec    eax
c001e5cb:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e5d0:	85 c0                	test   eax,eax
c001e5d2:	75 90                	jne    c001e564 <Semaphore::tryAcquire()+0x4a>
c001e5d4:	eb 95                	jmp    c001e56b <Semaphore::tryAcquire()+0x51>

c001e5d6 <Semaphore::assertLocked(char const*)>:
c001e5d6:	83 ec 0c             	sub    esp,0xc
c001e5d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5dd:	fa                   	cli    
c001e5de:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e5e4:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e5e9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5ec:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001e5f2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5f4:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5f7:	7c 24                	jl     c001e61d <Semaphore::assertLocked(char const*)+0x47>
c001e5f9:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e5fe:	85 c0                	test   eax,eax
c001e600:	75 09                	jne    c001e60b <Semaphore::assertLocked(char const*)+0x35>
c001e602:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e607:	85 c0                	test   eax,eax
c001e609:	75 29                	jne    c001e634 <Semaphore::assertLocked(char const*)+0x5e>
c001e60b:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e610:	48                   	dec    eax
c001e611:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e616:	75 01                	jne    c001e619 <Semaphore::assertLocked(char const*)+0x43>
c001e618:	fb                   	sti    
c001e619:	83 c4 0c             	add    esp,0xc
c001e61c:	c3                   	ret    
c001e61d:	83 ec 0c             	sub    esp,0xc
c001e620:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e624:	e8 74 c2 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001e629:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e62e:	83 c4 10             	add    esp,0x10
c001e631:	48                   	dec    eax
c001e632:	eb c5                	jmp    c001e5f9 <Semaphore::assertLocked(char const*)+0x23>
c001e634:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e63e:	e8 51 fe ff ff       	call   c001e494 <schedule()>
c001e643:	eb c6                	jmp    c001e60b <Semaphore::assertLocked(char const*)+0x35>

c001e645 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e645:	83 ec 14             	sub    esp,0x14
c001e648:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c001e64e:	68 5c cd 02 c0       	push   0xc002cd5c
c001e653:	e8 89 48 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e65d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e661:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e664:	e8 2b fe ff ff       	call   c001e494 <schedule()>
c001e669:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e66e:	83 c4 10             	add    esp,0x10
c001e671:	48                   	dec    eax
c001e672:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e677:	85 c0                	test   eax,eax
c001e679:	75 06                	jne    c001e681 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e67b:	fb                   	sti    
c001e67c:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e681:	83 ec 08             	sub    esp,0x8
c001e684:	50                   	push   eax
c001e685:	68 90 cd 02 c0       	push   0xc002cd90
c001e68a:	e8 52 48 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e68f:	83 c4 1c             	add    esp,0x1c
c001e692:	c3                   	ret    

c001e693 <blockTask(TaskState)>:
c001e693:	83 ec 0c             	sub    esp,0xc
c001e696:	fa                   	cli    
c001e697:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e69d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e6a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6a9:	e8 e6 fd ff ff       	call   c001e494 <schedule()>
c001e6ae:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e6b3:	48                   	dec    eax
c001e6b4:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e6b9:	75 01                	jne    c001e6bc <blockTask(TaskState)+0x29>
c001e6bb:	fb                   	sti    
c001e6bc:	83 c4 0c             	add    esp,0xc
c001e6bf:	c3                   	ret    

c001e6c0 <waitTask(int, int*, int)>:
c001e6c0:	83 ec 18             	sub    esp,0x18
c001e6c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6cc:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6cf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d8:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6db:	6a 07                	push   0x7
c001e6dd:	e8 b1 ff ff ff       	call   c001e693 <blockTask(TaskState)>
c001e6e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e7:	83 c4 10             	add    esp,0x10
c001e6ea:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6ed:	85 d2                	test   edx,edx
c001e6ef:	74 0a                	je     c001e6fb <waitTask(int, int*, int)+0x3b>
c001e6f1:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6f4:	89 02                	mov    DWORD PTR [edx],eax
c001e6f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6fb:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6fe:	83 c4 0c             	add    esp,0xc
c001e701:	c3                   	ret    

c001e702 <nanoSleepUntil(unsigned long long)>:
c001e702:	83 ec 0c             	sub    esp,0xc
c001e705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e709:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e70d:	3b 05 d0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4d0
c001e713:	89 d1                	mov    ecx,edx
c001e715:	1b 0d d4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4d4
c001e71b:	73 04                	jae    c001e721 <nanoSleepUntil(unsigned long long)+0x1f>
c001e71d:	83 c4 0c             	add    esp,0xc
c001e720:	c3                   	ret    
c001e721:	fa                   	cli    
c001e722:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e728:	83 ec 08             	sub    esp,0x8
c001e72b:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001e731:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e737:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e73a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e73d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e743:	68 98 23 03 c0       	push   0xc0032398
c001e748:	e8 bf ab 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e74d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e754:	e8 3a ff ff ff       	call   c001e693 <blockTask(TaskState)>
c001e759:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e75e:	83 c4 10             	add    esp,0x10
c001e761:	48                   	dec    eax
c001e762:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e767:	85 c0                	test   eax,eax
c001e769:	75 09                	jne    c001e774 <nanoSleepUntil(unsigned long long)+0x72>
c001e76b:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e770:	85 c0                	test   eax,eax
c001e772:	75 12                	jne    c001e786 <nanoSleepUntil(unsigned long long)+0x84>
c001e774:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e779:	48                   	dec    eax
c001e77a:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e77f:	75 9c                	jne    c001e71d <nanoSleepUntil(unsigned long long)+0x1b>
c001e781:	fb                   	sti    
c001e782:	83 c4 0c             	add    esp,0xc
c001e785:	c3                   	ret    
c001e786:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e790:	e8 ff fc ff ff       	call   c001e494 <schedule()>
c001e795:	eb dd                	jmp    c001e774 <nanoSleepUntil(unsigned long long)+0x72>

c001e797 <nanoSleep(unsigned long long)>:
c001e797:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c001e79c:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c001e7a2:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e7a6:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e7aa:	e9 53 ff ff ff       	jmp    c001e702 <nanoSleepUntil(unsigned long long)>

c001e7af <sleep(unsigned long long)>:
c001e7af:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7b7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7bc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7c0:	01 ca                	add    edx,ecx
c001e7c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7ca:	eb cb                	jmp    c001e797 <nanoSleep(unsigned long long)>

c001e7cc <Semaphore::acquire()>:
c001e7cc:	83 ec 0c             	sub    esp,0xc
c001e7cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7d3:	fa                   	cli    
c001e7d4:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e7d9:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e7df:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7e2:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001e7e8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7eb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7ed:	7d 28                	jge    c001e817 <Semaphore::acquire()+0x4b>
c001e7ef:	41                   	inc    ecx
c001e7f0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7f3:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e7f8:	85 c0                	test   eax,eax
c001e7fa:	75 09                	jne    c001e805 <Semaphore::acquire()+0x39>
c001e7fc:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e801:	85 c0                	test   eax,eax
c001e803:	75 4e                	jne    c001e853 <Semaphore::acquire()+0x87>
c001e805:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e80a:	48                   	dec    eax
c001e80b:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e810:	75 01                	jne    c001e813 <Semaphore::acquire()+0x47>
c001e812:	fb                   	sti    
c001e813:	83 c4 0c             	add    esp,0xc
c001e816:	c3                   	ret    
c001e817:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e81c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e823:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e826:	85 c9                	test   ecx,ecx
c001e828:	74 3a                	je     c001e864 <Semaphore::acquire()+0x98>
c001e82a:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e82d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e833:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e836:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e83b:	83 ec 0c             	sub    esp,0xc
c001e83e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e841:	6a 05                	push   0x5
c001e843:	e8 4b fe ff ff       	call   c001e693 <blockTask(TaskState)>
c001e848:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e84d:	83 c4 10             	add    esp,0x10
c001e850:	48                   	dec    eax
c001e851:	eb a0                	jmp    c001e7f3 <Semaphore::acquire()+0x27>
c001e853:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e85d:	e8 32 fc ff ff       	call   c001e494 <schedule()>
c001e862:	eb a1                	jmp    c001e805 <Semaphore::acquire()+0x39>
c001e864:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e869:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e86c:	eb c8                	jmp    c001e836 <Semaphore::acquire()+0x6a>

c001e86e <taskReturned>:
c001e86e:	83 ec 18             	sub    esp,0x18
c001e871:	68 c4 cd 02 c0       	push   0xc002cdc4
c001e876:	e8 22 c0 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001e87b:	83 c4 10             	add    esp,0x10
c001e87e:	83 ec 0c             	sub    esp,0xc
c001e881:	6a 02                	push   0x2
c001e883:	e8 0b fe ff ff       	call   c001e693 <blockTask(TaskState)>
c001e888:	fa                   	cli    
c001e889:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e88f:	e8 00 fc ff ff       	call   c001e494 <schedule()>
c001e894:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e899:	83 c4 10             	add    esp,0x10
c001e89c:	48                   	dec    eax
c001e89d:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e8a2:	85 c0                	test   eax,eax
c001e8a4:	75 d8                	jne    c001e87e <taskReturned+0x10>
c001e8a6:	fb                   	sti    
c001e8a7:	eb d5                	jmp    c001e87e <taskReturned+0x10>

c001e8a9 <Thr::processFromPID(int)>:
c001e8a9:	57                   	push   edi
c001e8aa:	56                   	push   esi
c001e8ab:	53                   	push   ebx
c001e8ac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8b0:	83 ec 0c             	sub    esp,0xc
c001e8b3:	68 ba cb 02 c0       	push   0xc002cbba
c001e8b8:	e8 24 46 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e8bd:	fa                   	cli    
c001e8be:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e8c4:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e8cb:	e8 86 a9 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	89 c7                	mov    edi,eax
c001e8d5:	eb 14                	jmp    c001e8eb <Thr::processFromPID(int)+0x42>
c001e8d7:	83 ec 0c             	sub    esp,0xc
c001e8da:	68 a4 23 03 c0       	push   0xc00323a4
c001e8df:	e8 72 a9 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8e4:	83 c4 10             	add    esp,0x10
c001e8e7:	39 f8                	cmp    eax,edi
c001e8e9:	74 49                	je     c001e934 <Thr::processFromPID(int)+0x8b>
c001e8eb:	83 ec 0c             	sub    esp,0xc
c001e8ee:	68 a4 23 03 c0       	push   0xc00323a4
c001e8f3:	e8 5e a9 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8f8:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e8ff:	89 c3                	mov    ebx,eax
c001e901:	e8 58 a9 00 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e906:	58                   	pop    eax
c001e907:	5a                   	pop    edx
c001e908:	53                   	push   ebx
c001e909:	68 a4 23 03 c0       	push   0xc00323a4
c001e90e:	e8 f9 a9 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e913:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e916:	83 c4 10             	add    esp,0x10
c001e919:	39 30                	cmp    DWORD PTR [eax],esi
c001e91b:	75 ba                	jne    c001e8d7 <Thr::processFromPID(int)+0x2e>
c001e91d:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e922:	48                   	dec    eax
c001e923:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e928:	74 07                	je     c001e931 <Thr::processFromPID(int)+0x88>
c001e92a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e92d:	5b                   	pop    ebx
c001e92e:	5e                   	pop    esi
c001e92f:	5f                   	pop    edi
c001e930:	c3                   	ret    
c001e931:	fb                   	sti    
c001e932:	eb f6                	jmp    c001e92a <Thr::processFromPID(int)+0x81>
c001e934:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e939:	48                   	dec    eax
c001e93a:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e93f:	75 01                	jne    c001e942 <Thr::processFromPID(int)+0x99>
c001e941:	fb                   	sti    
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	68 d5 cb 02 c0       	push   0xc002cbd5
c001e94a:	e8 92 45 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e94f:	83 c4 10             	add    esp,0x10
c001e952:	31 c0                	xor    eax,eax
c001e954:	5b                   	pop    ebx
c001e955:	5e                   	pop    esi
c001e956:	5f                   	pop    edi
c001e957:	c3                   	ret    

c001e958 <unblockTask(ThreadControlBlock*)>:
c001e958:	53                   	push   ebx
c001e959:	83 ec 08             	sub    esp,0x8
c001e95c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e960:	fa                   	cli    
c001e961:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e967:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e96a:	85 c0                	test   eax,eax
c001e96c:	74 66                	je     c001e9d4 <unblockTask(ThreadControlBlock*)+0x7c>
c001e96e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e971:	48                   	dec    eax
c001e972:	74 31                	je     c001e9a5 <unblockTask(ThreadControlBlock*)+0x4d>
c001e974:	83 ec 0c             	sub    esp,0xc
c001e977:	68 a4 23 03 c0       	push   0xc00323a4
c001e97c:	e8 d5 a8 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e981:	83 c4 10             	add    esp,0x10
c001e984:	85 c0                	test   eax,eax
c001e986:	75 17                	jne    c001e99f <unblockTask(ThreadControlBlock*)+0x47>
c001e988:	eb 68                	jmp    c001e9f2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e98a:	83 ec 08             	sub    esp,0x8
c001e98d:	50                   	push   eax
c001e98e:	68 a4 23 03 c0       	push   0xc00323a4
c001e993:	e8 5c ac 00 00       	call   c00295f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e998:	83 c4 10             	add    esp,0x10
c001e99b:	85 c0                	test   eax,eax
c001e99d:	74 53                	je     c001e9f2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e99f:	39 c3                	cmp    ebx,eax
c001e9a1:	75 e7                	jne    c001e98a <unblockTask(ThreadControlBlock*)+0x32>
c001e9a3:	eb 1c                	jmp    c001e9c1 <unblockTask(ThreadControlBlock*)+0x69>
c001e9a5:	83 ec 0c             	sub    esp,0xc
c001e9a8:	68 b4 ce 02 c0       	push   0xc002ceb4
c001e9ad:	e8 2f 45 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e9b2:	c7 04 24 40 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce40
c001e9b9:	e8 23 45 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e9be:	83 c4 10             	add    esp,0x10
c001e9c1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e9c6:	48                   	dec    eax
c001e9c7:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e9cc:	75 01                	jne    c001e9cf <unblockTask(ThreadControlBlock*)+0x77>
c001e9ce:	fb                   	sti    
c001e9cf:	83 c4 08             	add    esp,0x8
c001e9d2:	5b                   	pop    ebx
c001e9d3:	c3                   	ret    
c001e9d4:	83 ec 0c             	sub    esp,0xc
c001e9d7:	68 f8 cd 02 c0       	push   0xc002cdf8
c001e9dc:	e8 00 45 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e9e1:	c7 04 24 40 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce40
c001e9e8:	e8 f4 44 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001e9ed:	83 c4 10             	add    esp,0x10
c001e9f0:	eb cf                	jmp    c001e9c1 <unblockTask(ThreadControlBlock*)+0x69>
c001e9f2:	83 ec 08             	sub    esp,0x8
c001e9f5:	53                   	push   ebx
c001e9f6:	68 a4 23 03 c0       	push   0xc00323a4
c001e9fb:	e8 0c a9 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ea00:	83 c4 10             	add    esp,0x10
c001ea03:	eb bc                	jmp    c001e9c1 <unblockTask(ThreadControlBlock*)+0x69>

c001ea05 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea05:	55                   	push   ebp
c001ea06:	57                   	push   edi
c001ea07:	56                   	push   esi
c001ea08:	53                   	push   ebx
c001ea09:	83 ec 1c             	sub    esp,0x1c
c001ea0c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea10:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea13:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea19:	85 ff                	test   edi,edi
c001ea1b:	7e 20                	jle    c001ea3d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea1d:	31 f6                	xor    esi,esi
c001ea1f:	83 ec 0c             	sub    esp,0xc
c001ea22:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea29:	46                   	inc    esi
c001ea2a:	e8 0b 0f ff ff       	call   c000f93a <free>
c001ea2f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea32:	83 c4 10             	add    esp,0x10
c001ea35:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea3b:	7f e2                	jg     c001ea1f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea3d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea47:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea4c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea4f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea52:	d3 c0                	rol    eax,cl
c001ea54:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea5b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea5e:	89 f7                	mov    edi,esi
c001ea60:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea68:	0f 85 74 01 00 00    	jne    c001ebe2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea6e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea74:	85 ed                	test   ebp,ebp
c001ea76:	74 1b                	je     c001ea93 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea78:	83 ec 0c             	sub    esp,0xc
c001ea7b:	55                   	push   ebp
c001ea7c:	e8 89 bb ff ff       	call   c001a60a <EnvVarContainer::~EnvVarContainer()>
c001ea81:	59                   	pop    ecx
c001ea82:	5e                   	pop    esi
c001ea83:	6a 0c                	push   0xc
c001ea85:	55                   	push   ebp
c001ea86:	e8 76 43 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001ea8b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea8e:	83 c4 10             	add    esp,0x10
c001ea91:	89 f7                	mov    edi,esi
c001ea93:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea99:	85 c0                	test   eax,eax
c001ea9b:	0f 84 aa 00 00 00    	je     c001eb4b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eaa1:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eaa4:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eaa8:	31 c9                	xor    ecx,ecx
c001eaaa:	eb 10                	jmp    c001eabc <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eaac:	41                   	inc    ecx
c001eaad:	83 f9 10             	cmp    ecx,0x10
c001eab0:	0f 84 95 00 00 00    	je     c001eb4b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eab6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eabc:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eac3:	d3 fa                	sar    edx,cl
c001eac5:	83 e2 01             	and    edx,0x1
c001eac8:	74 e2                	je     c001eaac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eaca:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eacd:	01 ca                	add    edx,ecx
c001eacf:	89 d5                	mov    ebp,edx
c001ead1:	c1 e5 05             	shl    ebp,0x5
c001ead4:	01 ea                	add    edx,ebp
c001ead6:	01 d0                	add    eax,edx
c001ead8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eade:	83 fd 07             	cmp    ebp,0x7
c001eae1:	75 c9                	jne    c001eaac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eae3:	05 40 02 00 00       	add    eax,0x240
c001eae8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eaeb:	83 fd ff             	cmp    ebp,0xffffffff
c001eaee:	0f 8c 08 01 00 00    	jl     c001ebfc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eaf4:	0f 84 b9 01 00 00    	je     c001ecb3 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eafa:	85 ed                	test   ebp,ebp
c001eafc:	0f 84 a0 01 00 00    	je     c001eca2 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eb02:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb04:	75 a6                	jne    c001eaac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb06:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb0c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb10:	01 d0                	add    eax,edx
c001eb12:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb16:	83 ec 0c             	sub    esp,0xc
c001eb19:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb1f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb22:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb28:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb2f:	50                   	push   eax
c001eb30:	e8 23 fe ff ff       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c001eb35:	83 c4 10             	add    esp,0x10
c001eb38:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb3b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb3f:	89 f7                	mov    edi,esi
c001eb41:	41                   	inc    ecx
c001eb42:	83 f9 10             	cmp    ecx,0x10
c001eb45:	0f 85 6b ff ff ff    	jne    c001eab6 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb4b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb51:	85 c0                	test   eax,eax
c001eb53:	74 5d                	je     c001ebb2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb55:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb5b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb61:	74 4f                	je     c001ebb2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	68 a4 23 03 c0       	push   0xc00323a4
c001eb6b:	e8 e6 a6 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb70:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001eb77:	89 c7                	mov    edi,eax
c001eb79:	e8 bc a6 00 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb7e:	83 c4 10             	add    esp,0x10
c001eb81:	84 c0                	test   al,al
c001eb83:	0f 84 e4 00 00 00    	je     c001ec6d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb89:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb8c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb92:	85 d2                	test   edx,edx
c001eb94:	74 0f                	je     c001eba5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb96:	83 ec 0c             	sub    esp,0xc
c001eb99:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb9b:	52                   	push   edx
c001eb9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eba2:	83 c4 10             	add    esp,0x10
c001eba5:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ebaf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ebb2:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ebb8:	85 db                	test   ebx,ebx
c001ebba:	74 16                	je     c001ebd2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ebbc:	83 ec 0c             	sub    esp,0xc
c001ebbf:	53                   	push   ebx
c001ebc0:	e8 d1 35 ff ff       	call   c0012196 <VAS::~VAS()>
c001ebc5:	58                   	pop    eax
c001ebc6:	5a                   	pop    edx
c001ebc7:	6a 14                	push   0x14
c001ebc9:	53                   	push   ebx
c001ebca:	e8 32 42 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	83 ec 0c             	sub    esp,0xc
c001ebd5:	68 ec cb 02 c0       	push   0xc002cbec
c001ebda:	e8 02 43 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ebdf:	83 c4 10             	add    esp,0x10
c001ebe2:	83 ec 08             	sub    esp,0x8
c001ebe5:	68 3f 07 00 00       	push   0x73f
c001ebea:	68 fa cb 02 c0       	push   0xc002cbfa
c001ebef:	e8 ed 42 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ebf4:	83 c4 2c             	add    esp,0x2c
c001ebf7:	5b                   	pop    ebx
c001ebf8:	5e                   	pop    esi
c001ebf9:	5f                   	pop    edi
c001ebfa:	5d                   	pop    ebp
c001ebfb:	c3                   	ret    
c001ebfc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ec00:	83 ec 0c             	sub    esp,0xc
c001ec03:	68 f8 ce 02 c0       	push   0xc002cef8
c001ec08:	e8 90 bc ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001ec0d:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	89 f7                	mov    edi,esi
c001ec15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec19:	e9 8e fe ff ff       	jmp    c001eaac <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec1e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec24:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec2a:	75 1c                	jne    c001ec48 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec2c:	83 ec 0c             	sub    esp,0xc
c001ec2f:	68 60 cf 02 c0       	push   0xc002cf60
c001ec34:	e8 a8 42 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ec39:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec40:	e8 4e fa ff ff       	call   c001e693 <blockTask(TaskState)>
c001ec45:	83 c4 10             	add    esp,0x10
c001ec48:	83 ec 08             	sub    esp,0x8
c001ec4b:	56                   	push   esi
c001ec4c:	68 a4 23 03 c0       	push   0xc00323a4
c001ec51:	e8 b6 a6 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec56:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001ec5d:	e8 f4 a5 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	39 f8                	cmp    eax,edi
c001ec67:	0f 84 1c ff ff ff    	je     c001eb89 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	68 a4 23 03 c0       	push   0xc00323a4
c001ec75:	e8 dc a5 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec7a:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001ec81:	89 c6                	mov    esi,eax
c001ec83:	e8 d6 a5 00 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec88:	83 c4 10             	add    esp,0x10
c001ec8b:	39 f3                	cmp    ebx,esi
c001ec8d:	74 b9                	je     c001ec48 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec8f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec92:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec95:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec9b:	75 ab                	jne    c001ec48 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec9d:	e9 7c ff ff ff       	jmp    c001ec1e <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001eca2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eca6:	83 ec 0c             	sub    esp,0xc
c001eca9:	68 2c cf 02 c0       	push   0xc002cf2c
c001ecae:	e9 55 ff ff ff       	jmp    c001ec08 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ecb3:	8b 36                	mov    esi,DWORD PTR [esi]
c001ecb5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecb9:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ecbc:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecbf:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ecc5:	01 d7                	add    edi,edx
c001ecc7:	89 f8                	mov    eax,edi
c001ecc9:	e9 44 fe ff ff       	jmp    c001eb12 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecce <cleanerTaskFunction(void*)>:
c001ecce:	53                   	push   ebx
c001eccf:	83 ec 08             	sub    esp,0x8
c001ecd2:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ecd7:	48                   	dec    eax
c001ecd8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ecdd:	75 01                	jne    c001ece0 <cleanerTaskFunction(void*)+0x12>
c001ecdf:	fb                   	sti    
c001ece0:	fa                   	cli    
c001ece1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ece6:	80 3d 6c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003236c,0x0
c001eced:	8d 50 01             	lea    edx,[eax+0x1]
c001ecf0:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001ecf6:	0f 84 b9 00 00 00    	je     c001edb5 <cleanerTaskFunction(void*)+0xe7>
c001ecfc:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ed01:	85 c0                	test   eax,eax
c001ed03:	75 01                	jne    c001ed06 <cleanerTaskFunction(void*)+0x38>
c001ed05:	fb                   	sti    
c001ed06:	c6 05 6c 23 03 c0 00 	mov    BYTE PTR ds:0xc003236c,0x0
c001ed0d:	fa                   	cli    
c001ed0e:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ed14:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001ed1a:	fa                   	cli    
c001ed1b:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ed21:	eb 3e                	jmp    c001ed61 <cleanerTaskFunction(void*)+0x93>
c001ed23:	83 ec 0c             	sub    esp,0xc
c001ed26:	68 8c 23 03 c0       	push   0xc003238c
c001ed2b:	e8 26 a5 00 00       	call   c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed30:	c7 04 24 8c 23 03 c0 	mov    DWORD PTR [esp],0xc003238c
c001ed37:	89 c3                	mov    ebx,eax
c001ed39:	e8 20 a5 00 00       	call   c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed3e:	c7 04 24 10 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc10
c001ed45:	e8 97 41 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ed4a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed4d:	e8 b3 fc ff ff       	call   c001ea05 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed52:	c7 04 24 29 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc29
c001ed59:	e8 83 41 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ed5e:	83 c4 10             	add    esp,0x10
c001ed61:	83 ec 0c             	sub    esp,0xc
c001ed64:	68 8c 23 03 c0       	push   0xc003238c
c001ed69:	e8 cc a4 00 00       	call   c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed6e:	83 c4 10             	add    esp,0x10
c001ed71:	84 c0                	test   al,al
c001ed73:	74 ae                	je     c001ed23 <cleanerTaskFunction(void*)+0x55>
c001ed75:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ed7a:	48                   	dec    eax
c001ed7b:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ed80:	75 01                	jne    c001ed83 <cleanerTaskFunction(void*)+0xb5>
c001ed82:	fb                   	sti    
c001ed83:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ed88:	48                   	dec    eax
c001ed89:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ed8e:	0f 85 3e ff ff ff    	jne    c001ecd2 <cleanerTaskFunction(void*)+0x4>
c001ed94:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001ed99:	85 c0                	test   eax,eax
c001ed9b:	0f 84 31 ff ff ff    	je     c001ecd2 <cleanerTaskFunction(void*)+0x4>
c001eda1:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001edab:	e8 e4 f6 ff ff       	call   c001e494 <schedule()>
c001edb0:	e9 1d ff ff ff       	jmp    c001ecd2 <cleanerTaskFunction(void*)+0x4>
c001edb5:	83 ec 0c             	sub    esp,0xc
c001edb8:	6a 02                	push   0x2
c001edba:	e8 86 f8 ff ff       	call   c001e645 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edbf:	83 c4 10             	add    esp,0x10
c001edc2:	e9 3f ff ff ff       	jmp    c001ed06 <cleanerTaskFunction(void*)+0x38>

c001edc7 <terminateTask(int)>:
c001edc7:	83 ec 14             	sub    esp,0x14
c001edca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edcf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edd2:	83 c0 0c             	add    eax,0xc
c001edd5:	50                   	push   eax
c001edd6:	68 88 cf 02 c0       	push   0xc002cf88
c001eddb:	e8 01 41 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ede0:	fa                   	cli    
c001ede1:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ede7:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001eded:	fa                   	cli    
c001edee:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001edf4:	c7 04 24 3c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc3c
c001edfb:	e8 e1 40 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ee00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee09:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee11:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee14:	5a                   	pop    edx
c001ee15:	59                   	pop    ecx
c001ee16:	50                   	push   eax
c001ee17:	68 8c 23 03 c0       	push   0xc003238c
c001ee1c:	e8 eb a4 00 00       	call   c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee26:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee2d:	c7 04 24 56 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc56
c001ee34:	e8 a8 40 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ee39:	83 c4 10             	add    esp,0x10
c001ee3c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee41:	85 c0                	test   eax,eax
c001ee43:	0f 84 8d 00 00 00    	je     c001eed6 <terminateTask(int)+0x10f>
c001ee49:	83 ec 0c             	sub    esp,0xc
c001ee4c:	68 70 cc 02 c0       	push   0xc002cc70
c001ee51:	e8 8b 40 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ee56:	58                   	pop    eax
c001ee57:	c6 05 6c 23 03 c0 01 	mov    BYTE PTR ds:0xc003236c,0x1
c001ee5e:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001ee64:	e8 ef fa ff ff       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c001ee69:	c7 04 24 8a cc 02 c0 	mov    DWORD PTR [esp],0xc002cc8a
c001ee70:	e8 6c 40 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001ee75:	83 c4 10             	add    esp,0x10
c001ee78:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ee7d:	48                   	dec    eax
c001ee7e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ee83:	75 01                	jne    c001ee86 <terminateTask(int)+0xbf>
c001ee85:	fb                   	sti    
c001ee86:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ee8b:	48                   	dec    eax
c001ee8c:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ee91:	75 09                	jne    c001ee9c <terminateTask(int)+0xd5>
c001ee93:	83 3d 80 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032380,0x0
c001ee9a:	75 4c                	jne    c001eee8 <terminateTask(int)+0x121>
c001ee9c:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001eea1:	48                   	dec    eax
c001eea2:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001eea7:	75 01                	jne    c001eeaa <terminateTask(int)+0xe3>
c001eea9:	fb                   	sti    
c001eeaa:	83 ec 0c             	sub    esp,0xc
c001eead:	68 c2 cc 02 c0       	push   0xc002ccc2
c001eeb2:	e8 2a 40 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001eeb7:	83 c4 10             	add    esp,0x10
c001eeba:	fa                   	cli    
c001eebb:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001eec1:	e8 ce f5 ff ff       	call   c001e494 <schedule()>
c001eec6:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001eecb:	48                   	dec    eax
c001eecc:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001eed1:	75 e7                	jne    c001eeba <terminateTask(int)+0xf3>
c001eed3:	fb                   	sti    
c001eed4:	eb e4                	jmp    c001eeba <terminateTask(int)+0xf3>
c001eed6:	83 ec 0c             	sub    esp,0xc
c001eed9:	68 a4 cc 02 c0       	push   0xc002cca4
c001eede:	e8 fe 3f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001eee3:	83 c4 10             	add    esp,0x10
c001eee6:	eb 90                	jmp    c001ee78 <terminateTask(int)+0xb1>
c001eee8:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001eef2:	e8 9d f5 ff ff       	call   c001e494 <schedule()>
c001eef7:	eb a3                	jmp    c001ee9c <terminateTask(int)+0xd5>

c001eef9 <Thr::terminateFromIRQ(int)>:
c001eef9:	83 ec 18             	sub    esp,0x18
c001eefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef00:	e8 c2 fe ff ff       	call   c001edc7 <terminateTask(int)>
c001ef05:	90                   	nop

c001ef06 <Semaphore::release()>:
c001ef06:	83 ec 0c             	sub    esp,0xc
c001ef09:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef0d:	fa                   	cli    
c001ef0e:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ef13:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ef19:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef1c:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001ef22:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef25:	85 c9                	test   ecx,ecx
c001ef27:	74 3c                	je     c001ef65 <Semaphore::release()+0x5f>
c001ef29:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef2c:	83 ec 0c             	sub    esp,0xc
c001ef2f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef32:	51                   	push   ecx
c001ef33:	e8 20 fa ff ff       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c001ef38:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ef3d:	83 c4 10             	add    esp,0x10
c001ef40:	48                   	dec    eax
c001ef41:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ef46:	85 c0                	test   eax,eax
c001ef48:	75 09                	jne    c001ef53 <Semaphore::release()+0x4d>
c001ef4a:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001ef4f:	85 c0                	test   eax,eax
c001ef51:	75 17                	jne    c001ef6a <Semaphore::release()+0x64>
c001ef53:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ef58:	48                   	dec    eax
c001ef59:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ef5e:	75 01                	jne    c001ef61 <Semaphore::release()+0x5b>
c001ef60:	fb                   	sti    
c001ef61:	83 c4 0c             	add    esp,0xc
c001ef64:	c3                   	ret    
c001ef65:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef68:	eb d7                	jmp    c001ef41 <Semaphore::release()+0x3b>
c001ef6a:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001ef74:	e8 1b f5 ff ff       	call   c001e494 <schedule()>
c001ef79:	eb d8                	jmp    c001ef53 <Semaphore::release()+0x4d>

c001ef7b <__static_initialization_and_destruction_0(int, int)>:
c001ef7b:	83 ec 0c             	sub    esp,0xc
c001ef7e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef83:	0f 85 88 00 00 00    	jne    c001f011 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef89:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef91:	75 7e                	jne    c001f011 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef93:	83 ec 0c             	sub    esp,0xc
c001ef96:	68 a4 23 03 c0       	push   0xc00323a4
c001ef9b:	e8 fc a5 00 00       	call   c002959c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efa0:	83 c4 10             	add    esp,0x10
c001efa3:	83 ec 04             	sub    esp,0x4
c001efa6:	68 70 dd 02 c0       	push   0xc002dd70
c001efab:	68 a4 23 03 c0       	push   0xc00323a4
c001efb0:	68 50 95 02 c0       	push   0xc0029550
c001efb5:	e8 c1 3d ff ff       	call   c0012d7b <__cxa_atexit>
c001efba:	83 c4 10             	add    esp,0x10
c001efbd:	83 ec 0c             	sub    esp,0xc
c001efc0:	68 98 23 03 c0       	push   0xc0032398
c001efc5:	e8 d2 a5 00 00       	call   c002959c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efca:	83 c4 10             	add    esp,0x10
c001efcd:	83 ec 04             	sub    esp,0x4
c001efd0:	68 70 dd 02 c0       	push   0xc002dd70
c001efd5:	68 98 23 03 c0       	push   0xc0032398
c001efda:	68 50 95 02 c0       	push   0xc0029550
c001efdf:	e8 97 3d ff ff       	call   c0012d7b <__cxa_atexit>
c001efe4:	83 c4 10             	add    esp,0x10
c001efe7:	83 ec 0c             	sub    esp,0xc
c001efea:	68 8c 23 03 c0       	push   0xc003238c
c001efef:	e8 a8 a5 00 00       	call   c002959c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eff4:	83 c4 10             	add    esp,0x10
c001eff7:	83 ec 04             	sub    esp,0x4
c001effa:	68 70 dd 02 c0       	push   0xc002dd70
c001efff:	68 8c 23 03 c0       	push   0xc003238c
c001f004:	68 50 95 02 c0       	push   0xc0029550
c001f009:	e8 6d 3d ff ff       	call   c0012d7b <__cxa_atexit>
c001f00e:	83 c4 10             	add    esp,0x10
c001f011:	90                   	nop
c001f012:	83 c4 0c             	add    esp,0xc
c001f015:	c3                   	ret    

c001f016 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f016:	83 ec 0c             	sub    esp,0xc
c001f019:	83 ec 08             	sub    esp,0x8
c001f01c:	68 ff ff 00 00       	push   0xffff
c001f021:	6a 01                	push   0x1
c001f023:	e8 53 ff ff ff       	call   c001ef7b <__static_initialization_and_destruction_0(int, int)>
c001f028:	83 c4 10             	add    esp,0x10
c001f02b:	83 c4 0c             	add    esp,0xc
c001f02e:	c3                   	ret    

c001f02f <Vm::inbv(unsigned short)>:
c001f02f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f033:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f038:	75 06                	jne    c001f040 <Vm::inbv(unsigned short)+0x11>
c001f03a:	a0 ec 23 03 c0       	mov    al,ds:0xc00323ec
c001f03f:	c3                   	ret    
c001f040:	ec                   	in     al,dx
c001f041:	c3                   	ret    

c001f042 <Vm::outbv(unsigned short, unsigned char)>:
c001f042:	53                   	push   ebx
c001f043:	83 ec 08             	sub    esp,0x8
c001f046:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f04a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f04e:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f053:	75 38                	jne    c001f08d <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f055:	0f b6 c3             	movzx  eax,bl
c001f058:	51                   	push   ecx
c001f059:	51                   	push   ecx
c001f05a:	50                   	push   eax
c001f05b:	68 a7 cf 02 c0       	push   0xc002cfa7
c001f060:	e8 7c 3e ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f065:	8b 15 ec 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323ec
c001f06b:	83 c4 10             	add    esp,0x10
c001f06e:	8d 42 01             	lea    eax,[edx+0x1]
c001f071:	88 9a 00 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdc00],bl
c001f077:	a3 ec 23 03 c0       	mov    ds:0xc00323ec,eax
c001f07c:	83 f8 20             	cmp    eax,0x20
c001f07f:	75 0f                	jne    c001f090 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f081:	c7 05 ec 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x1f
c001f08b:	eb 03                	jmp    c001f090 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f08d:	88 d8                	mov    al,bl
c001f08f:	ee                   	out    dx,al
c001f090:	83 c4 08             	add    esp,0x8
c001f093:	5b                   	pop    ebx
c001f094:	c3                   	ret    

c001f095 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f095:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f09a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f09f:	c1 e0 04             	shl    eax,0x4
c001f0a2:	01 d0                	add    eax,edx
c001f0a4:	c3                   	ret    

c001f0a5 <Vm::getSegment(unsigned int)>:
c001f0a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0a9:	c1 e8 10             	shr    eax,0x10
c001f0ac:	c3                   	ret    

c001f0ad <Vm::getOffset(unsigned int)>:
c001f0ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0b1:	c3                   	ret    

c001f0b2 <Vm::mainloop2()>:
c001f0b2:	83 ec 18             	sub    esp,0x18
c001f0b5:	fa                   	cli    
c001f0b6:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f0bc:	6a 02                	push   0x2
c001f0be:	c6 05 e5 23 03 c0 01 	mov    BYTE PTR ds:0xc00323e5,0x1
c001f0c5:	e8 7b f5 ff ff       	call   c001e645 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0cf:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0d3:	52                   	push   edx
c001f0d4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0d8:	52                   	push   edx
c001f0d9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0dd:	52                   	push   edx
c001f0de:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f0e2:	50                   	push   eax
c001f0e3:	e8 12 12 fe ff       	call   c00002fa <goToVM86>
c001f0e8:	83 c4 2c             	add    esp,0x2c
c001f0eb:	c3                   	ret    

c001f0ec <Vm::mainVm8086Loop(void*)>:
c001f0ec:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f0f1:	48                   	dec    eax
c001f0f2:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f0f7:	75 01                	jne    c001f0fa <Vm::mainVm8086Loop(void*)+0xe>
c001f0f9:	fb                   	sti    
c001f0fa:	eb b6                	jmp    c001f0b2 <Vm::mainloop2()>

c001f0fc <Vm::mainloop3(unsigned long)>:
c001f0fc:	83 ec 18             	sub    esp,0x18
c001f0ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f103:	fa                   	cli    
c001f104:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f10a:	6a 02                	push   0x2
c001f10c:	c6 05 e4 23 03 c0 01 	mov    BYTE PTR ds:0xc00323e4,0x1
c001f113:	a3 e0 23 03 c0       	mov    ds:0xc00323e0,eax
c001f118:	e8 28 f5 ff ff       	call   c001e645 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f11d:	83 c4 1c             	add    esp,0x1c
c001f120:	eb 90                	jmp    c001f0b2 <Vm::mainloop2()>

c001f122 <Vm::initialise8086()>:
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	68 80 00 00 00       	push   0x80
c001f12a:	6a 00                	push   0x0
c001f12c:	68 ec f0 01 c0       	push   0xc001f0ec
c001f131:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001f137:	e8 14 f1 ff ff       	call   c001e250 <Process::createThread(void (*)(void*), void*, int)>
c001f13c:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f143:	a3 e8 23 03 c0       	mov    ds:0xc00323e8,eax
c001f148:	68 00 01 00 00       	push   0x100
c001f14d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001f152:	6a 00                	push   0x0
c001f154:	6a 00                	push   0x0
c001f156:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f15c:	e8 a7 34 ff ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f161:	83 c4 2c             	add    esp,0x2c
c001f164:	c3                   	ret    

c001f165 <Vm::finish8086()>:
c001f165:	53                   	push   ebx
c001f166:	83 ec 08             	sub    esp,0x8
c001f169:	fa                   	cli    
c001f16a:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f170:	80 3d e4 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323e4,0x0
c001f177:	75 15                	jne    c001f18e <Vm::finish8086()+0x29>
c001f179:	e8 16 f3 ff ff       	call   c001e494 <schedule()>
c001f17e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f183:	48                   	dec    eax
c001f184:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f189:	75 de                	jne    c001f169 <Vm::finish8086()+0x4>
c001f18b:	fb                   	sti    
c001f18c:	eb db                	jmp    c001f169 <Vm::finish8086()+0x4>
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	8b 1d e0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323e0
c001f197:	ff 35 e8 23 03 c0    	push   DWORD PTR ds:0xc00323e8
c001f19d:	c6 05 e4 23 03 c0 00 	mov    BYTE PTR ds:0xc00323e4,0x0
c001f1a4:	e8 af f7 ff ff       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c001f1a9:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f1ae:	83 c4 10             	add    esp,0x10
c001f1b1:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1b4:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001f1ba:	85 d2                	test   edx,edx
c001f1bc:	75 01                	jne    c001f1bf <Vm::finish8086()+0x5a>
c001f1be:	fb                   	sti    
c001f1bf:	89 d8                	mov    eax,ebx
c001f1c1:	83 c4 08             	add    esp,0x8
c001f1c4:	5b                   	pop    ebx
c001f1c5:	c3                   	ret    

c001f1c6 <Vm::getOutput8086(unsigned char*)>:
c001f1c6:	83 ec 10             	sub    esp,0x10
c001f1c9:	ff 35 ec 23 03 c0    	push   DWORD PTR ds:0xc00323ec
c001f1cf:	68 00 24 03 c0       	push   0xc0032400
c001f1d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d8:	e8 8b 15 fe ff       	call   c0000768 <memcpy>
c001f1dd:	a1 ec 23 03 c0       	mov    eax,ds:0xc00323ec
c001f1e2:	c7 05 ec 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x0
c001f1ec:	83 c4 1c             	add    esp,0x1c
c001f1ef:	c3                   	ret    

c001f1f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f1f0:	55                   	push   ebp
c001f1f1:	57                   	push   edi
c001f1f2:	56                   	push   esi
c001f1f3:	53                   	push   ebx
c001f1f4:	83 ec 2c             	sub    esp,0x2c
c001f1f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1fb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f1ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f203:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f207:	fa                   	cli    
c001f208:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f20e:	0f b6 35 e5 23 03 c0 	movzx  esi,BYTE PTR ds:0xc00323e5
c001f215:	89 f0                	mov    eax,esi
c001f217:	84 c0                	test   al,al
c001f219:	75 1d                	jne    c001f238 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f21b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f21f:	e8 70 f2 ff ff       	call   c001e494 <schedule()>
c001f224:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f229:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f22d:	48                   	dec    eax
c001f22e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f233:	75 d2                	jne    c001f207 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f235:	fb                   	sti    
c001f236:	eb cf                	jmp    c001f207 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f238:	a1 e8 23 03 c0       	mov    eax,ds:0xc00323e8
c001f23d:	c7 05 ec 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x0
c001f247:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f24b:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f24f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f253:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f257:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f25b:	50                   	push   eax
c001f25c:	6a 20                	push   0x20
c001f25e:	6a 00                	push   0x0
c001f260:	68 00 24 03 c0       	push   0xc0032400
c001f265:	e8 32 15 fe ff       	call   c000079c <memset>
c001f26a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f271:	e8 b4 06 ff ff       	call   c000f92a <malloc>
c001f276:	83 c4 0c             	add    esp,0xc
c001f279:	89 c3                	mov    ebx,eax
c001f27b:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001f281:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f285:	50                   	push   eax
c001f286:	e8 b5 41 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	85 db                	test   ebx,ebx
c001f290:	75 0a                	jne    c001f29c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	68 c3 cf 02 c0       	push   0xc002cfc3
c001f29a:	eb 3e                	jmp    c001f2da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f29c:	50                   	push   eax
c001f29d:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f2a1:	50                   	push   eax
c001f2a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f2a6:	50                   	push   eax
c001f2a7:	53                   	push   ebx
c001f2a8:	e8 a3 44 ff ff       	call   c0013750 <File::stat(unsigned long long*, bool*)>
c001f2ad:	83 c4 10             	add    esp,0x10
c001f2b0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f2b5:	74 0a                	je     c001f2c1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2b7:	83 ec 0c             	sub    esp,0xc
c001f2ba:	68 d7 cf 02 c0       	push   0xc002cfd7
c001f2bf:	eb 19                	jmp    c001f2da <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2c1:	51                   	push   ecx
c001f2c2:	51                   	push   ecx
c001f2c3:	6a 01                	push   0x1
c001f2c5:	53                   	push   ebx
c001f2c6:	e8 d9 41 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c001f2cb:	83 c4 10             	add    esp,0x10
c001f2ce:	85 c0                	test   eax,eax
c001f2d0:	74 24                	je     c001f2f6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2d2:	83 ec 0c             	sub    esp,0xc
c001f2d5:	68 f0 cf 02 c0       	push   0xc002cff0
c001f2da:	e8 be b5 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001f2df:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f2e4:	83 c4 10             	add    esp,0x10
c001f2e7:	48                   	dec    eax
c001f2e8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f2ed:	85 c0                	test   eax,eax
c001f2ef:	75 01                	jne    c001f2f2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f2f1:	fb                   	sti    
c001f2f2:	31 f6                	xor    esi,esi
c001f2f4:	eb 58                	jmp    c001f34e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f2f6:	0f b7 ed             	movzx  ebp,bp
c001f2f9:	50                   	push   eax
c001f2fa:	0f b7 ff             	movzx  edi,di
c001f2fd:	50                   	push   eax
c001f2fe:	55                   	push   ebp
c001f2ff:	57                   	push   edi
c001f300:	e8 90 fd ff ff       	call   c001f095 <Vm::realToLinear(unsigned short, unsigned short)>
c001f305:	5a                   	pop    edx
c001f306:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f308:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f30c:	51                   	push   ecx
c001f30d:	50                   	push   eax
c001f30e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f312:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f316:	53                   	push   ebx
c001f317:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f31a:	83 c4 14             	add    esp,0x14
c001f31d:	53                   	push   ebx
c001f31e:	e8 df 41 ff ff       	call   c0013502 <File::close()>
c001f323:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f328:	83 c4 10             	add    esp,0x10
c001f32b:	48                   	dec    eax
c001f32c:	c6 05 e5 23 03 c0 00 	mov    BYTE PTR ds:0xc00323e5,0x0
c001f333:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f338:	85 c0                	test   eax,eax
c001f33a:	75 01                	jne    c001f33d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f33c:	fb                   	sti    
c001f33d:	83 ec 0c             	sub    esp,0xc
c001f340:	ff 35 e8 23 03 c0    	push   DWORD PTR ds:0xc00323e8
c001f346:	e8 0d f6 ff ff       	call   c001e958 <unblockTask(ThreadControlBlock*)>
c001f34b:	83 c4 10             	add    esp,0x10
c001f34e:	83 c4 2c             	add    esp,0x2c
c001f351:	89 f0                	mov    eax,esi
c001f353:	5b                   	pop    ebx
c001f354:	5e                   	pop    esi
c001f355:	5f                   	pop    edi
c001f356:	5d                   	pop    ebp
c001f357:	c3                   	ret    

c001f358 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f358:	57                   	push   edi
c001f359:	56                   	push   esi
c001f35a:	53                   	push   ebx
c001f35b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f35f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f363:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f367:	83 e8 06             	sub    eax,0x6
c001f36a:	0f b7 c0             	movzx  eax,ax
c001f36d:	50                   	push   eax
c001f36e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f373:	50                   	push   eax
c001f374:	e8 1c fd ff ff       	call   c001f095 <Vm::realToLinear(unsigned short, unsigned short)>
c001f379:	5a                   	pop    edx
c001f37a:	5e                   	pop    esi
c001f37b:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f37e:	8d 56 fa             	lea    edx,[esi-0x6]
c001f381:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f387:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f38a:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f38d:	83 c2 02             	add    edx,0x2
c001f390:	66 89 10             	mov    WORD PTR [eax],dx
c001f393:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f396:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f39a:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f39d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f3a1:	89 d6                	mov    esi,edx
c001f3a3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f3a9:	66 81 e6 ff fd       	and    si,0xfdff
c001f3ae:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f3b2:	74 07                	je     c001f3bb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f3b4:	89 d6                	mov    esi,edx
c001f3b6:	66 81 ce 00 02       	or     si,0x200
c001f3bb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3c4:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3c8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3d0:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3d3:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3db:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3de:	5b                   	pop    ebx
c001f3df:	5e                   	pop    esi
c001f3e0:	5f                   	pop    edi
c001f3e1:	c3                   	ret    

c001f3e2 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f3e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3e7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3ec:	c1 e0 04             	shl    eax,0x4
c001f3ef:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f3f2:	c3                   	ret    

c001f3f3 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f3f3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3f8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3fd:	c1 e0 04             	shl    eax,0x4
c001f400:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f404:	c3                   	ret    

c001f405 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f405:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f40a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f40f:	c1 e0 04             	shl    eax,0x4
c001f412:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f415:	c3                   	ret    

c001f416 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f416:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f41b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f420:	c1 e0 04             	shl    eax,0x4
c001f423:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f427:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f42a:	c3                   	ret    

c001f42b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f42b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f430:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f435:	c1 e0 04             	shl    eax,0x4
c001f438:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f43c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f440:	c3                   	ret    

c001f441 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f441:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f446:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f44b:	c1 e0 04             	shl    eax,0x4
c001f44e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f452:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f455:	c3                   	ret    

c001f456 <Vm::faultHandler(regs*)>:
c001f456:	55                   	push   ebp
c001f457:	57                   	push   edi
c001f458:	56                   	push   esi
c001f459:	53                   	push   ebx
c001f45a:	83 ec 1c             	sub    esp,0x1c
c001f45d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f461:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f464:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f467:	0f b7 c1             	movzx  eax,cx
c001f46a:	50                   	push   eax
c001f46b:	0f b7 c3             	movzx  eax,bx
c001f46e:	c1 e3 04             	shl    ebx,0x4
c001f471:	50                   	push   eax
c001f472:	e8 1e fc ff ff       	call   c001f095 <Vm::realToLinear(unsigned short, unsigned short)>
c001f477:	5a                   	pop    edx
c001f478:	89 c5                	mov    ebp,eax
c001f47a:	5e                   	pop    esi
c001f47b:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f47f:	50                   	push   eax
c001f480:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f484:	50                   	push   eax
c001f485:	e8 0b fc ff ff       	call   c001f095 <Vm::realToLinear(unsigned short, unsigned short)>
c001f48a:	01 cb                	add    ebx,ecx
c001f48c:	89 c6                	mov    esi,eax
c001f48e:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f492:	50                   	push   eax
c001f493:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f497:	50                   	push   eax
c001f498:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f49c:	50                   	push   eax
c001f49d:	55                   	push   ebp
c001f49e:	53                   	push   ebx
c001f49f:	b3 06                	mov    bl,0x6
c001f4a1:	68 09 d0 02 c0       	push   0xc002d009
c001f4a6:	e8 36 3a ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f4ab:	83 c4 20             	add    esp,0x20
c001f4ae:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f4b3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4b8:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4bc:	3c 9d                	cmp    al,0x9d
c001f4be:	0f 84 d7 02 00 00    	je     c001f79b <Vm::faultHandler(regs*)+0x345>
c001f4c4:	0f 87 a3 00 00 00    	ja     c001f56d <Vm::faultHandler(regs*)+0x117>
c001f4ca:	3c 66                	cmp    al,0x66
c001f4cc:	0f 84 15 02 00 00    	je     c001f6e7 <Vm::faultHandler(regs*)+0x291>
c001f4d2:	77 5f                	ja     c001f533 <Vm::faultHandler(regs*)+0xdd>
c001f4d4:	3c 36                	cmp    al,0x36
c001f4d6:	0f 84 f1 01 00 00    	je     c001f6cd <Vm::faultHandler(regs*)+0x277>
c001f4dc:	77 28                	ja     c001f506 <Vm::faultHandler(regs*)+0xb0>
c001f4de:	3c 26                	cmp    al,0x26
c001f4e0:	0f 84 99 01 00 00    	je     c001f67f <Vm::faultHandler(regs*)+0x229>
c001f4e6:	3c 2e                	cmp    al,0x2e
c001f4e8:	0f 85 3b 07 00 00    	jne    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f4ee:	83 ec 0c             	sub    esp,0xc
c001f4f1:	31 db                	xor    ebx,ebx
c001f4f3:	68 1e d0 02 c0       	push   0xc002d01e
c001f4f8:	e8 e4 39 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f4fd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f500:	83 c4 10             	add    esp,0x10
c001f503:	45                   	inc    ebp
c001f504:	eb b2                	jmp    c001f4b8 <Vm::faultHandler(regs*)+0x62>
c001f506:	3c 64                	cmp    al,0x64
c001f508:	0f 84 8b 01 00 00    	je     c001f699 <Vm::faultHandler(regs*)+0x243>
c001f50e:	0f 87 9f 01 00 00    	ja     c001f6b3 <Vm::faultHandler(regs*)+0x25d>
c001f514:	3c 3e                	cmp    al,0x3e
c001f516:	0f 85 0d 07 00 00    	jne    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f51c:	83 ec 0c             	sub    esp,0xc
c001f51f:	b3 01                	mov    bl,0x1
c001f521:	68 22 d0 02 c0       	push   0xc002d022
c001f526:	e8 b6 39 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f52b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f52e:	83 c4 10             	add    esp,0x10
c001f531:	eb d0                	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f533:	3c 6d                	cmp    al,0x6d
c001f535:	0f 84 af 03 00 00    	je     c001f8ea <Vm::faultHandler(regs*)+0x494>
c001f53b:	77 15                	ja     c001f552 <Vm::faultHandler(regs*)+0xfc>
c001f53d:	3c 67                	cmp    al,0x67
c001f53f:	0f 84 bf 01 00 00    	je     c001f704 <Vm::faultHandler(regs*)+0x2ae>
c001f545:	3c 6c                	cmp    al,0x6c
c001f547:	0f 84 3f 03 00 00    	je     c001f88c <Vm::faultHandler(regs*)+0x436>
c001f54d:	e9 d7 06 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f552:	3c 6f                	cmp    al,0x6f
c001f554:	0f 84 a4 04 00 00    	je     c001f9fe <Vm::faultHandler(regs*)+0x5a8>
c001f55a:	0f 82 11 04 00 00    	jb     c001f971 <Vm::faultHandler(regs*)+0x51b>
c001f560:	3c 9c                	cmp    al,0x9c
c001f562:	0f 84 ba 01 00 00    	je     c001f722 <Vm::faultHandler(regs*)+0x2cc>
c001f568:	e9 bc 06 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f56d:	3c ec                	cmp    al,0xec
c001f56f:	0f 84 24 06 00 00    	je     c001fb99 <Vm::faultHandler(regs*)+0x743>
c001f575:	0f 87 93 00 00 00    	ja     c001f60e <Vm::faultHandler(regs*)+0x1b8>
c001f57b:	3c e4                	cmp    al,0xe4
c001f57d:	0f 84 5c 05 00 00    	je     c001fadf <Vm::faultHandler(regs*)+0x689>
c001f583:	77 6a                	ja     c001f5ef <Vm::faultHandler(regs*)+0x199>
c001f585:	3c cd                	cmp    al,0xcd
c001f587:	0f 84 7e 02 00 00    	je     c001f80b <Vm::faultHandler(regs*)+0x3b5>
c001f58d:	3c cf                	cmp    al,0xcf
c001f58f:	0f 85 94 06 00 00    	jne    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f595:	83 ec 0c             	sub    esp,0xc
c001f598:	68 66 d0 02 c0       	push   0xc002d066
c001f59d:	e8 3f 39 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f5a2:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f5a5:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f5a8:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f5ac:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f5af:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f5b3:	0d 00 02 02 00       	or     eax,0x20200
c001f5b8:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5bb:	56                   	push   esi
c001f5bc:	53                   	push   ebx
c001f5bd:	52                   	push   edx
c001f5be:	68 6c d0 02 c0       	push   0xc002d06c
c001f5c3:	e8 19 39 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f5c8:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5d2:	66 c1 e8 09          	shr    ax,0x9
c001f5d6:	83 e0 01             	and    eax,0x1
c001f5d9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5dc:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5df:	83 c0 06             	add    eax,0x6
c001f5e2:	25 ff ff 00 00       	and    eax,0xffff
c001f5e7:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f5ea:	e9 95 02 00 00       	jmp    c001f884 <Vm::faultHandler(regs*)+0x42e>
c001f5ef:	3c e6                	cmp    al,0xe6
c001f5f1:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f5f5:	0f 84 4e 05 00 00    	je     c001fb49 <Vm::faultHandler(regs*)+0x6f3>
c001f5fb:	0f 82 0a 05 00 00    	jb     c001fb0b <Vm::faultHandler(regs*)+0x6b5>
c001f601:	3c e7                	cmp    al,0xe7
c001f603:	0f 84 69 05 00 00    	je     c001fb72 <Vm::faultHandler(regs*)+0x71c>
c001f609:	e9 1b 06 00 00       	jmp    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f60e:	3c ef                	cmp    al,0xef
c001f610:	0f 84 e6 05 00 00    	je     c001fbfc <Vm::faultHandler(regs*)+0x7a6>
c001f616:	77 37                	ja     c001f64f <Vm::faultHandler(regs*)+0x1f9>
c001f618:	3c ed                	cmp    al,0xed
c001f61a:	0f 84 a3 05 00 00    	je     c001fbc3 <Vm::faultHandler(regs*)+0x76d>
c001f620:	3c ee                	cmp    al,0xee
c001f622:	0f 85 01 06 00 00    	jne    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f628:	52                   	push   edx
c001f629:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f62c:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f62f:	68 07 d1 02 c0       	push   0xc002d107
c001f634:	e8 a8 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f639:	59                   	pop    ecx
c001f63a:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f63e:	5b                   	pop    ebx
c001f63f:	50                   	push   eax
c001f640:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f644:	50                   	push   eax
c001f645:	e8 f8 f9 ff ff       	call   c001f042 <Vm::outbv(unsigned short, unsigned char)>
c001f64a:	e9 a5 05 00 00       	jmp    c001fbf4 <Vm::faultHandler(regs*)+0x79e>
c001f64f:	3c fa                	cmp    al,0xfa
c001f651:	0f 84 f7 01 00 00    	je     c001f84e <Vm::faultHandler(regs*)+0x3f8>
c001f657:	3c fb                	cmp    al,0xfb
c001f659:	0f 84 0a 02 00 00    	je     c001f869 <Vm::faultHandler(regs*)+0x413>
c001f65f:	3c f3                	cmp    al,0xf3
c001f661:	0f 85 c2 05 00 00    	jne    c001fc29 <Vm::faultHandler(regs*)+0x7d3>
c001f667:	83 ec 0c             	sub    esp,0xc
c001f66a:	68 3f d0 02 c0       	push   0xc002d03f
c001f66f:	e8 6d 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f674:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f677:	83 c4 10             	add    esp,0x10
c001f67a:	e9 84 fe ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f67f:	83 ec 0c             	sub    esp,0xc
c001f682:	b3 02                	mov    bl,0x2
c001f684:	68 1a d0 02 c0       	push   0xc002d01a
c001f689:	e8 53 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f68e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f691:	83 c4 10             	add    esp,0x10
c001f694:	e9 6a fe ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f699:	83 ec 0c             	sub    esp,0xc
c001f69c:	b3 03                	mov    bl,0x3
c001f69e:	68 26 d0 02 c0       	push   0xc002d026
c001f6a3:	e8 39 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f6a8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6ab:	83 c4 10             	add    esp,0x10
c001f6ae:	e9 50 fe ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f6b3:	83 ec 0c             	sub    esp,0xc
c001f6b6:	b3 04                	mov    bl,0x4
c001f6b8:	68 2a d0 02 c0       	push   0xc002d02a
c001f6bd:	e8 1f 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f6c2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6c5:	83 c4 10             	add    esp,0x10
c001f6c8:	e9 36 fe ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f6cd:	83 ec 0c             	sub    esp,0xc
c001f6d0:	b3 05                	mov    bl,0x5
c001f6d2:	68 2e d0 02 c0       	push   0xc002d02e
c001f6d7:	e8 05 38 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f6dc:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6df:	83 c4 10             	add    esp,0x10
c001f6e2:	e9 1c fe ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f6e7:	83 ec 0c             	sub    esp,0xc
c001f6ea:	68 32 d0 02 c0       	push   0xc002d032
c001f6ef:	e8 ed 37 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f6f4:	83 c4 10             	add    esp,0x10
c001f6f7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6fa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6ff:	e9 ff fd ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f704:	50                   	push   eax
c001f705:	50                   	push   eax
c001f706:	6a 01                	push   0x1
c001f708:	68 37 d0 02 c0       	push   0xc002d037
c001f70d:	e8 cf 37 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f712:	83 c4 10             	add    esp,0x10
c001f715:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f718:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f71d:	e9 e1 fd ff ff       	jmp    c001f503 <Vm::faultHandler(regs*)+0xad>
c001f722:	83 ec 0c             	sub    esp,0xc
c001f725:	68 45 d0 02 c0       	push   0xc002d045
c001f72a:	e8 b2 37 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f72f:	83 c4 10             	add    esp,0x10
c001f732:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f735:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f73a:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f73d:	74 2f                	je     c001f76e <Vm::faultHandler(regs*)+0x318>
c001f73f:	83 ea 04             	sub    edx,0x4
c001f742:	25 ff 0d 00 00       	and    eax,0xdff
c001f747:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f74d:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f750:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f753:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f759:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f75d:	0f 84 bf 04 00 00    	je     c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f763:	80 cc 02             	or     ah,0x2
c001f766:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f769:	e9 b4 04 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f76e:	83 ea 02             	sub    edx,0x2
c001f771:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f777:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f77a:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f77e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f784:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f788:	74 05                	je     c001f78f <Vm::faultHandler(regs*)+0x339>
c001f78a:	80 cc 02             	or     ah,0x2
c001f78d:	eb 03                	jmp    c001f792 <Vm::faultHandler(regs*)+0x33c>
c001f78f:	80 e4 fd             	and    ah,0xfd
c001f792:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f796:	e9 87 04 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	68 4c d0 02 c0       	push   0xc002d04c
c001f7a3:	e8 39 37 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f7a8:	83 c4 10             	add    esp,0x10
c001f7ab:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7b0:	74 28                	je     c001f7da <Vm::faultHandler(regs*)+0x384>
c001f7b2:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7b4:	25 ff 0d 00 00       	and    eax,0xdff
c001f7b9:	0d 00 02 02 00       	or     eax,0x20200
c001f7be:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7c1:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7c9:	c1 e8 09             	shr    eax,0x9
c001f7cc:	83 e0 01             	and    eax,0x1
c001f7cf:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7d2:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7d5:	83 c0 04             	add    eax,0x4
c001f7d8:	eb 24                	jmp    c001f7fe <Vm::faultHandler(regs*)+0x3a8>
c001f7da:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7dd:	0d 00 02 02 00       	or     eax,0x20200
c001f7e2:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7e5:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f7e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7ee:	66 c1 e8 09          	shr    ax,0x9
c001f7f2:	83 e0 01             	and    eax,0x1
c001f7f5:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7f8:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7fb:	83 c0 02             	add    eax,0x2
c001f7fe:	25 ff ff 00 00       	and    eax,0xffff
c001f803:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f806:	e9 17 04 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f80b:	53                   	push   ebx
c001f80c:	53                   	push   ebx
c001f80d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f811:	50                   	push   eax
c001f812:	68 52 d0 02 c0       	push   0xc002d052
c001f817:	e8 c5 36 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f81c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f820:	83 c4 10             	add    esp,0x10
c001f823:	3c ee                	cmp    al,0xee
c001f825:	75 10                	jne    c001f837 <Vm::faultHandler(regs*)+0x3e1>
c001f827:	83 ec 0c             	sub    esp,0xc
c001f82a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f82d:	e8 ca f8 ff ff       	call   c001f0fc <Vm::mainloop3(unsigned long)>
c001f832:	e9 c0 03 00 00       	jmp    c001fbf7 <Vm::faultHandler(regs*)+0x7a1>
c001f837:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f83b:	83 ec 0c             	sub    esp,0xc
c001f83e:	53                   	push   ebx
c001f83f:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f843:	53                   	push   ebx
c001f844:	55                   	push   ebp
c001f845:	50                   	push   eax
c001f846:	57                   	push   edi
c001f847:	e8 0c fb ff ff       	call   c001f358 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f84c:	eb 36                	jmp    c001f884 <Vm::faultHandler(regs*)+0x42e>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	68 5c d0 02 c0       	push   0xc002d05c
c001f856:	e8 86 36 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f85b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f860:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f864:	e9 8b 03 00 00       	jmp    c001fbf4 <Vm::faultHandler(regs*)+0x79e>
c001f869:	83 ec 0c             	sub    esp,0xc
c001f86c:	68 61 d0 02 c0       	push   0xc002d061
c001f871:	e8 6b 36 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f876:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f87b:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f87f:	e9 70 03 00 00       	jmp    c001fbf4 <Vm::faultHandler(regs*)+0x79e>
c001f884:	83 c4 20             	add    esp,0x20
c001f887:	e9 99 03 00 00       	jmp    c001fc25 <Vm::faultHandler(regs*)+0x7cf>
c001f88c:	83 ec 0c             	sub    esp,0xc
c001f88f:	68 9f d0 02 c0       	push   0xc002d09f
c001f894:	e8 48 36 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f899:	83 c4 10             	add    esp,0x10
c001f89c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f89f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8a4:	74 0d                	je     c001f8b3 <Vm::faultHandler(regs*)+0x45d>
c001f8a6:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8ad:	0f 87 9e 01 00 00    	ja     c001fa51 <Vm::faultHandler(regs*)+0x5fb>
c001f8b3:	83 ec 0c             	sub    esp,0xc
c001f8b6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8ba:	0f b7 db             	movzx  ebx,bx
c001f8bd:	50                   	push   eax
c001f8be:	e8 6c f7 ff ff       	call   c001f02f <Vm::inbv(unsigned short)>
c001f8c3:	83 c4 0c             	add    esp,0xc
c001f8c6:	0f b6 c0             	movzx  eax,al
c001f8c9:	50                   	push   eax
c001f8ca:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8ce:	50                   	push   eax
c001f8cf:	53                   	push   ebx
c001f8d0:	e8 41 fb ff ff       	call   c001f416 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8d5:	83 c4 10             	add    esp,0x10
c001f8d8:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8db:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8df:	74 03                	je     c001f8e4 <Vm::faultHandler(regs*)+0x48e>
c001f8e1:	48                   	dec    eax
c001f8e2:	eb 01                	jmp    c001f8e5 <Vm::faultHandler(regs*)+0x48f>
c001f8e4:	40                   	inc    eax
c001f8e5:	0f b7 c0             	movzx  eax,ax
c001f8e8:	eb 7f                	jmp    c001f969 <Vm::faultHandler(regs*)+0x513>
c001f8ea:	83 ec 0c             	sub    esp,0xc
c001f8ed:	68 d1 d0 02 c0       	push   0xc002d0d1
c001f8f2:	e8 ea 35 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f8f7:	83 c4 10             	add    esp,0x10
c001f8fa:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8fd:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f902:	74 0d                	je     c001f911 <Vm::faultHandler(regs*)+0x4bb>
c001f904:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f90b:	0f 87 40 01 00 00    	ja     c001fa51 <Vm::faultHandler(regs*)+0x5fb>
c001f911:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f914:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f918:	0f b7 db             	movzx  ebx,bx
c001f91b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f920:	74 20                	je     c001f942 <Vm::faultHandler(regs*)+0x4ec>
c001f922:	ed                   	in     eax,dx
c001f923:	51                   	push   ecx
c001f924:	50                   	push   eax
c001f925:	56                   	push   esi
c001f926:	53                   	push   ebx
c001f927:	e8 15 fb ff ff       	call   c001f441 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f92c:	83 c4 10             	add    esp,0x10
c001f92f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f932:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f936:	74 05                	je     c001f93d <Vm::faultHandler(regs*)+0x4e7>
c001f938:	83 e8 04             	sub    eax,0x4
c001f93b:	eb 27                	jmp    c001f964 <Vm::faultHandler(regs*)+0x50e>
c001f93d:	83 c0 04             	add    eax,0x4
c001f940:	eb 22                	jmp    c001f964 <Vm::faultHandler(regs*)+0x50e>
c001f942:	66 ed                	in     ax,dx
c001f944:	0f b7 c0             	movzx  eax,ax
c001f947:	52                   	push   edx
c001f948:	50                   	push   eax
c001f949:	56                   	push   esi
c001f94a:	53                   	push   ebx
c001f94b:	e8 db fa ff ff       	call   c001f42b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f956:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f95a:	74 05                	je     c001f961 <Vm::faultHandler(regs*)+0x50b>
c001f95c:	83 e8 02             	sub    eax,0x2
c001f95f:	eb 03                	jmp    c001f964 <Vm::faultHandler(regs*)+0x50e>
c001f961:	83 c0 02             	add    eax,0x2
c001f964:	25 ff ff 00 00       	and    eax,0xffff
c001f969:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f96c:	e9 b1 02 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f971:	83 ec 0c             	sub    esp,0xc
c001f974:	4b                   	dec    ebx
c001f975:	68 d7 d0 02 c0       	push   0xc002d0d7
c001f97a:	e8 62 35 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001f97f:	83 c4 10             	add    esp,0x10
c001f982:	80 fb 05             	cmp    bl,0x5
c001f985:	77 0a                	ja     c001f991 <Vm::faultHandler(regs*)+0x53b>
c001f987:	0f b6 db             	movzx  ebx,bl
c001f98a:	ff 24 9d 48 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2eb8]
c001f991:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f995:	eb 1b                	jmp    c001f9b2 <Vm::faultHandler(regs*)+0x55c>
c001f997:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f99b:	eb 15                	jmp    c001f9b2 <Vm::faultHandler(regs*)+0x55c>
c001f99d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f9a1:	eb 0f                	jmp    c001f9b2 <Vm::faultHandler(regs*)+0x55c>
c001f9a3:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f9a7:	eb 09                	jmp    c001f9b2 <Vm::faultHandler(regs*)+0x55c>
c001f9a9:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f9ac:	eb 04                	jmp    c001f9b2 <Vm::faultHandler(regs*)+0x55c>
c001f9ae:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9b2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9b7:	74 0d                	je     c001f9c6 <Vm::faultHandler(regs*)+0x570>
c001f9b9:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9c0:	0f 87 8b 00 00 00    	ja     c001fa51 <Vm::faultHandler(regs*)+0x5fb>
c001f9c6:	53                   	push   ebx
c001f9c7:	53                   	push   ebx
c001f9c8:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9cc:	52                   	push   edx
c001f9cd:	50                   	push   eax
c001f9ce:	e8 0f fa ff ff       	call   c001f3e2 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9d3:	5e                   	pop    esi
c001f9d4:	0f b6 c0             	movzx  eax,al
c001f9d7:	5d                   	pop    ebp
c001f9d8:	50                   	push   eax
c001f9d9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9dd:	50                   	push   eax
c001f9de:	e8 5f f6 ff ff       	call   c001f042 <Vm::outbv(unsigned short, unsigned char)>
c001f9e3:	83 c4 10             	add    esp,0x10
c001f9e6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f9e9:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9ed:	74 03                	je     c001f9f2 <Vm::faultHandler(regs*)+0x59c>
c001f9ef:	48                   	dec    eax
c001f9f0:	eb 01                	jmp    c001f9f3 <Vm::faultHandler(regs*)+0x59d>
c001f9f2:	40                   	inc    eax
c001f9f3:	0f b7 c0             	movzx  eax,ax
c001f9f6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f9f9:	e9 24 02 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001f9fe:	83 ec 0c             	sub    esp,0xc
c001fa01:	4b                   	dec    ebx
c001fa02:	68 d7 d0 02 c0       	push   0xc002d0d7
c001fa07:	e8 d5 34 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fa0c:	83 c4 10             	add    esp,0x10
c001fa0f:	80 fb 05             	cmp    bl,0x5
c001fa12:	77 0a                	ja     c001fa1e <Vm::faultHandler(regs*)+0x5c8>
c001fa14:	0f b6 db             	movzx  ebx,bl
c001fa17:	ff 24 9d 60 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ea0]
c001fa1e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa22:	eb 1b                	jmp    c001fa3f <Vm::faultHandler(regs*)+0x5e9>
c001fa24:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa28:	eb 15                	jmp    c001fa3f <Vm::faultHandler(regs*)+0x5e9>
c001fa2a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa2e:	eb 0f                	jmp    c001fa3f <Vm::faultHandler(regs*)+0x5e9>
c001fa30:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa34:	eb 09                	jmp    c001fa3f <Vm::faultHandler(regs*)+0x5e9>
c001fa36:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa39:	eb 04                	jmp    c001fa3f <Vm::faultHandler(regs*)+0x5e9>
c001fa3b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa3f:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa42:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa47:	74 39                	je     c001fa82 <Vm::faultHandler(regs*)+0x62c>
c001fa49:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa4f:	76 31                	jbe    c001fa82 <Vm::faultHandler(regs*)+0x62c>
c001fa51:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa55:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa59:	51                   	push   ecx
c001fa5a:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa5e:	51                   	push   ecx
c001fa5f:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa63:	51                   	push   ecx
c001fa64:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa68:	51                   	push   ecx
c001fa69:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa6d:	52                   	push   edx
c001fa6e:	50                   	push   eax
c001fa6f:	50                   	push   eax
c001fa70:	68 a4 d0 02 c0       	push   0xc002d0a4
c001fa75:	e8 67 34 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fa7a:	83 c4 20             	add    esp,0x20
c001fa7d:	e9 fb 01 00 00       	jmp    c001fc7d <Vm::faultHandler(regs*)+0x827>
c001fa82:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fa85:	0f b7 d3             	movzx  edx,bx
c001fa88:	81 e6 00 04 00 00    	and    esi,0x400
c001fa8e:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa91:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa96:	74 1d                	je     c001fab5 <Vm::faultHandler(regs*)+0x65f>
c001fa98:	51                   	push   ecx
c001fa99:	51                   	push   ecx
c001fa9a:	52                   	push   edx
c001fa9b:	50                   	push   eax
c001fa9c:	e8 64 f9 ff ff       	call   c001f405 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001faa1:	83 c4 10             	add    esp,0x10
c001faa4:	89 ea                	mov    edx,ebp
c001faa6:	ef                   	out    dx,eax
c001faa7:	85 f6                	test   esi,esi
c001faa9:	74 05                	je     c001fab0 <Vm::faultHandler(regs*)+0x65a>
c001faab:	83 eb 04             	sub    ebx,0x4
c001faae:	eb 21                	jmp    c001fad1 <Vm::faultHandler(regs*)+0x67b>
c001fab0:	83 c3 04             	add    ebx,0x4
c001fab3:	eb 1c                	jmp    c001fad1 <Vm::faultHandler(regs*)+0x67b>
c001fab5:	51                   	push   ecx
c001fab6:	51                   	push   ecx
c001fab7:	52                   	push   edx
c001fab8:	50                   	push   eax
c001fab9:	e8 35 f9 ff ff       	call   c001f3f3 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fabe:	83 c4 10             	add    esp,0x10
c001fac1:	89 ea                	mov    edx,ebp
c001fac3:	66 ef                	out    dx,ax
c001fac5:	85 f6                	test   esi,esi
c001fac7:	74 05                	je     c001face <Vm::faultHandler(regs*)+0x678>
c001fac9:	83 eb 02             	sub    ebx,0x2
c001facc:	eb 03                	jmp    c001fad1 <Vm::faultHandler(regs*)+0x67b>
c001face:	83 c3 02             	add    ebx,0x2
c001fad1:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fad7:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fada:	e9 43 01 00 00       	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001fadf:	53                   	push   ebx
c001fae0:	53                   	push   ebx
c001fae1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fae5:	50                   	push   eax
c001fae6:	68 dd d0 02 c0       	push   0xc002d0dd
c001faeb:	e8 f1 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001faf0:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001faf7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fafb:	89 04 24             	mov    DWORD PTR [esp],eax
c001fafe:	e8 2c f5 ff ff       	call   c001f02f <Vm::inbv(unsigned short)>
c001fb03:	0f b6 c0             	movzx  eax,al
c001fb06:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb09:	eb 5e                	jmp    c001fb69 <Vm::faultHandler(regs*)+0x713>
c001fb0b:	51                   	push   ecx
c001fb0c:	51                   	push   ecx
c001fb0d:	53                   	push   ebx
c001fb0e:	68 e3 d0 02 c0       	push   0xc002d0e3
c001fb13:	e8 c9 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fb18:	83 c4 10             	add    esp,0x10
c001fb1b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb20:	74 07                	je     c001fb29 <Vm::faultHandler(regs*)+0x6d3>
c001fb22:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb26:	ed                   	in     eax,dx
c001fb27:	eb 14                	jmp    c001fb3d <Vm::faultHandler(regs*)+0x6e7>
c001fb29:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb2c:	66 31 db             	xor    bx,bx
c001fb2f:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb32:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb36:	66 ed                	in     ax,dx
c001fb38:	0f b7 c0             	movzx  eax,ax
c001fb3b:	09 d8                	or     eax,ebx
c001fb3d:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb40:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb44:	e9 dc 00 00 00       	jmp    c001fc25 <Vm::faultHandler(regs*)+0x7cf>
c001fb49:	50                   	push   eax
c001fb4a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb4d:	53                   	push   ebx
c001fb4e:	68 e9 d0 02 c0       	push   0xc002d0e9
c001fb53:	e8 89 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fb58:	58                   	pop    eax
c001fb59:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb5d:	5a                   	pop    edx
c001fb5e:	50                   	push   eax
c001fb5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb63:	50                   	push   eax
c001fb64:	e8 d9 f4 ff ff       	call   c001f042 <Vm::outbv(unsigned short, unsigned char)>
c001fb69:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb6d:	e9 85 00 00 00       	jmp    c001fbf7 <Vm::faultHandler(regs*)+0x7a1>
c001fb72:	50                   	push   eax
c001fb73:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb76:	53                   	push   ebx
c001fb77:	68 f2 d0 02 c0       	push   0xc002d0f2
c001fb7c:	e8 60 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb88:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb8d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb90:	74 03                	je     c001fb95 <Vm::faultHandler(regs*)+0x73f>
c001fb92:	ef                   	out    dx,eax
c001fb93:	eb ab                	jmp    c001fb40 <Vm::faultHandler(regs*)+0x6ea>
c001fb95:	66 ef                	out    dx,ax
c001fb97:	eb a7                	jmp    c001fb40 <Vm::faultHandler(regs*)+0x6ea>
c001fb99:	55                   	push   ebp
c001fb9a:	55                   	push   ebp
c001fb9b:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb9e:	68 fb d0 02 c0       	push   0xc002d0fb
c001fba3:	e8 39 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fba8:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fbaf:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbb3:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbb6:	e8 74 f4 ff ff       	call   c001f02f <Vm::inbv(unsigned short)>
c001fbbb:	0f b6 c0             	movzx  eax,al
c001fbbe:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbc1:	eb 31                	jmp    c001fbf4 <Vm::faultHandler(regs*)+0x79e>
c001fbc3:	56                   	push   esi
c001fbc4:	56                   	push   esi
c001fbc5:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbc8:	68 01 d1 02 c0       	push   0xc002d101
c001fbcd:	e8 0f 33 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fbd2:	83 c4 10             	add    esp,0x10
c001fbd5:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbd8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbdd:	74 03                	je     c001fbe2 <Vm::faultHandler(regs*)+0x78c>
c001fbdf:	ed                   	in     eax,dx
c001fbe0:	eb 0d                	jmp    c001fbef <Vm::faultHandler(regs*)+0x799>
c001fbe2:	66 ed                	in     ax,dx
c001fbe4:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fbe7:	0f b7 c0             	movzx  eax,ax
c001fbea:	66 31 d2             	xor    dx,dx
c001fbed:	09 d0                	or     eax,edx
c001fbef:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbf2:	eb 2e                	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001fbf4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	eb 29                	jmp    c001fc25 <Vm::faultHandler(regs*)+0x7cf>
c001fbfc:	50                   	push   eax
c001fbfd:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fc00:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fc03:	68 10 d1 02 c0       	push   0xc002d110
c001fc08:	e8 d4 32 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc13:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc18:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc1b:	74 03                	je     c001fc20 <Vm::faultHandler(regs*)+0x7ca>
c001fc1d:	ef                   	out    dx,eax
c001fc1e:	eb 02                	jmp    c001fc22 <Vm::faultHandler(regs*)+0x7cc>
c001fc20:	66 ef                	out    dx,ax
c001fc22:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc25:	b0 01                	mov    al,0x1
c001fc27:	eb 56                	jmp    c001fc7f <Vm::faultHandler(regs*)+0x829>
c001fc29:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc2d:	51                   	push   ecx
c001fc2e:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc32:	51                   	push   ecx
c001fc33:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc37:	51                   	push   ecx
c001fc38:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc3c:	51                   	push   ecx
c001fc3d:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc41:	52                   	push   edx
c001fc42:	50                   	push   eax
c001fc43:	50                   	push   eax
c001fc44:	68 19 d1 02 c0       	push   0xc002d119
c001fc49:	e8 93 32 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c001fc4e:	83 c4 20             	add    esp,0x20
c001fc51:	83 ec 0c             	sub    esp,0xc
c001fc54:	6a 60                	push   0x60
c001fc56:	e8 d4 f3 ff ff       	call   c001f02f <Vm::inbv(unsigned short)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	3c 1c                	cmp    al,0x1c
c001fc60:	74 04                	je     c001fc66 <Vm::faultHandler(regs*)+0x810>
c001fc62:	3c 5a                	cmp    al,0x5a
c001fc64:	75 eb                	jne    c001fc51 <Vm::faultHandler(regs*)+0x7fb>
c001fc66:	3c 1c                	cmp    al,0x1c
c001fc68:	74 04                	je     c001fc6e <Vm::faultHandler(regs*)+0x818>
c001fc6a:	3c 5a                	cmp    al,0x5a
c001fc6c:	75 0f                	jne    c001fc7d <Vm::faultHandler(regs*)+0x827>
c001fc6e:	83 ec 0c             	sub    esp,0xc
c001fc71:	6a 60                	push   0x60
c001fc73:	e8 b7 f3 ff ff       	call   c001f02f <Vm::inbv(unsigned short)>
c001fc78:	83 c4 10             	add    esp,0x10
c001fc7b:	eb e9                	jmp    c001fc66 <Vm::faultHandler(regs*)+0x810>
c001fc7d:	31 c0                	xor    eax,eax
c001fc7f:	83 c4 1c             	add    esp,0x1c
c001fc82:	5b                   	pop    ebx
c001fc83:	5e                   	pop    esi
c001fc84:	5f                   	pop    edi
c001fc85:	5d                   	pop    ebp
c001fc86:	c3                   	ret    

c001fc87 <Vm::fpuInternalTo32(unsigned long long)>:
c001fc87:	57                   	push   edi
c001fc88:	56                   	push   esi
c001fc89:	53                   	push   ebx
c001fc8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	89 d6                	mov    esi,edx
c001fc94:	89 d7                	mov    edi,edx
c001fc96:	89 c1                	mov    ecx,eax
c001fc98:	c1 ef 14             	shr    edi,0x14
c001fc9b:	89 d3                	mov    ebx,edx
c001fc9d:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fca3:	31 d2                	xor    edx,edx
c001fca5:	89 f8                	mov    eax,edi
c001fca7:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fcad:	bf ff 00 00 00       	mov    edi,0xff
c001fcb2:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fcb7:	83 d2 ff             	adc    edx,0xffffffff
c001fcba:	39 c7                	cmp    edi,eax
c001fcbc:	bf 00 00 00 00       	mov    edi,0x0
c001fcc1:	19 d7                	sbb    edi,edx
c001fcc3:	72 15                	jb     c001fcda <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fcc5:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fcc9:	c1 e0 17             	shl    eax,0x17
c001fccc:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcd2:	09 f1                	or     ecx,esi
c001fcd4:	09 c1                	or     ecx,eax
c001fcd6:	89 cf                	mov    edi,ecx
c001fcd8:	eb 02                	jmp    c001fcdc <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fcda:	31 ff                	xor    edi,edi
c001fcdc:	89 f8                	mov    eax,edi
c001fcde:	5b                   	pop    ebx
c001fcdf:	5e                   	pop    esi
c001fce0:	5f                   	pop    edi
c001fce1:	c3                   	ret    

c001fce2 <Vm::fpuInternalTo64(unsigned long long)>:
c001fce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fce6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fcea:	c3                   	ret    

c001fceb <Vm::fpu32ToInternal(unsigned int)>:
c001fceb:	57                   	push   edi
c001fcec:	31 ff                	xor    edi,edi
c001fcee:	56                   	push   esi
c001fcef:	53                   	push   ebx
c001fcf0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fcf4:	89 cb                	mov    ebx,ecx
c001fcf6:	89 ce                	mov    esi,ecx
c001fcf8:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fcfe:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fd04:	c1 e9 17             	shr    ecx,0x17
c001fd07:	89 f0                	mov    eax,esi
c001fd09:	0f b6 d1             	movzx  edx,cl
c001fd0c:	81 c2 80 03 00 00    	add    edx,0x380
c001fd12:	89 d1                	mov    ecx,edx
c001fd14:	89 fa                	mov    edx,edi
c001fd16:	c1 e1 14             	shl    ecx,0x14
c001fd19:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd1d:	c1 e0 1d             	shl    eax,0x1d
c001fd20:	89 d7                	mov    edi,edx
c001fd22:	89 c6                	mov    esi,eax
c001fd24:	89 ca                	mov    edx,ecx
c001fd26:	89 f0                	mov    eax,esi
c001fd28:	09 fa                	or     edx,edi
c001fd2a:	09 da                	or     edx,ebx
c001fd2c:	5b                   	pop    ebx
c001fd2d:	5e                   	pop    esi
c001fd2e:	5f                   	pop    edi
c001fd2f:	c3                   	ret    

c001fd30 <Vm::fpu64ToInternal(unsigned long long)>:
c001fd30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd38:	c3                   	ret    

c001fd39 <Vm::fpuFloatToLong(unsigned long long)>:
c001fd39:	57                   	push   edi
c001fd3a:	31 c0                	xor    eax,eax
c001fd3c:	56                   	push   esi
c001fd3d:	31 d2                	xor    edx,edx
c001fd3f:	53                   	push   ebx
c001fd40:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd44:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd48:	89 d9                	mov    ecx,ebx
c001fd4a:	c1 e9 14             	shr    ecx,0x14
c001fd4d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd53:	89 cf                	mov    edi,ecx
c001fd55:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd5b:	78 33                	js     c001fd90 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd5d:	89 d9                	mov    ecx,ebx
c001fd5f:	89 f0                	mov    eax,esi
c001fd61:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd67:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd6d:	89 ca                	mov    edx,ecx
c001fd6f:	b9 34 00 00 00       	mov    ecx,0x34
c001fd74:	29 f9                	sub    ecx,edi
c001fd76:	0f ad d0             	shrd   eax,edx,cl
c001fd79:	d3 fa                	sar    edx,cl
c001fd7b:	f6 c1 20             	test   cl,0x20
c001fd7e:	74 05                	je     c001fd85 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd80:	89 d0                	mov    eax,edx
c001fd82:	c1 fa 1f             	sar    edx,0x1f
c001fd85:	85 db                	test   ebx,ebx
c001fd87:	79 07                	jns    c001fd90 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd89:	f7 d8                	neg    eax
c001fd8b:	83 d2 00             	adc    edx,0x0
c001fd8e:	f7 da                	neg    edx
c001fd90:	5b                   	pop    ebx
c001fd91:	5e                   	pop    esi
c001fd92:	5f                   	pop    edi
c001fd93:	c3                   	ret    

c001fd94 <Vm::fpuULongToFloat(unsigned long long)>:
c001fd94:	57                   	push   edi
c001fd95:	31 c9                	xor    ecx,ecx
c001fd97:	56                   	push   esi
c001fd98:	53                   	push   ebx
c001fd99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fda1:	0f ba e7 14          	bt     edi,0x14
c001fda5:	72 07                	jb     c001fdae <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fda7:	01 f6                	add    esi,esi
c001fda9:	11 ff                	adc    edi,edi
c001fdab:	41                   	inc    ecx
c001fdac:	eb f3                	jmp    c001fda1 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fdae:	89 fa                	mov    edx,edi
c001fdb0:	89 f0                	mov    eax,esi
c001fdb2:	bb 33 04 00 00       	mov    ebx,0x433
c001fdb7:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fdbd:	29 cb                	sub    ebx,ecx
c001fdbf:	89 d9                	mov    ecx,ebx
c001fdc1:	5b                   	pop    ebx
c001fdc2:	c1 e1 14             	shl    ecx,0x14
c001fdc5:	5e                   	pop    esi
c001fdc6:	09 ca                	or     edx,ecx
c001fdc8:	5f                   	pop    edi
c001fdc9:	c3                   	ret    

c001fdca <Vm::fpuLongToFloat(long long)>:
c001fdca:	56                   	push   esi
c001fdcb:	31 c0                	xor    eax,eax
c001fdcd:	53                   	push   ebx
c001fdce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdd2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdd6:	39 c8                	cmp    eax,ecx
c001fdd8:	19 d8                	sbb    eax,ebx
c001fdda:	7d 04                	jge    c001fde0 <Vm::fpuLongToFloat(long long)+0x16>
c001fddc:	31 f6                	xor    esi,esi
c001fdde:	eb 0c                	jmp    c001fdec <Vm::fpuLongToFloat(long long)+0x22>
c001fde0:	f7 d9                	neg    ecx
c001fde2:	be 01 00 00 00       	mov    esi,0x1
c001fde7:	83 d3 00             	adc    ebx,0x0
c001fdea:	f7 db                	neg    ebx
c001fdec:	31 c0                	xor    eax,eax
c001fdee:	0f ba e3 14          	bt     ebx,0x14
c001fdf2:	72 07                	jb     c001fdfb <Vm::fpuLongToFloat(long long)+0x31>
c001fdf4:	01 c9                	add    ecx,ecx
c001fdf6:	11 db                	adc    ebx,ebx
c001fdf8:	40                   	inc    eax
c001fdf9:	eb f3                	jmp    c001fdee <Vm::fpuLongToFloat(long long)+0x24>
c001fdfb:	ba 33 04 00 00       	mov    edx,0x433
c001fe00:	29 c2                	sub    edx,eax
c001fe02:	89 c8                	mov    eax,ecx
c001fe04:	c1 e2 14             	shl    edx,0x14
c001fe07:	89 d9                	mov    ecx,ebx
c001fe09:	89 f3                	mov    ebx,esi
c001fe0b:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe11:	09 ca                	or     edx,ecx
c001fe13:	84 db                	test   bl,bl
c001fe15:	74 06                	je     c001fe1d <Vm::fpuLongToFloat(long long)+0x53>
c001fe17:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe1d:	5b                   	pop    ebx
c001fe1e:	5e                   	pop    esi
c001fe1f:	c3                   	ret    

c001fe20 <Vm::fpuGet0()>:
c001fe20:	31 c0                	xor    eax,eax
c001fe22:	31 d2                	xor    edx,edx
c001fe24:	c3                   	ret    

c001fe25 <Vm::fpuGet1()>:
c001fe25:	b8 01 00 00 00       	mov    eax,0x1
c001fe2a:	31 d2                	xor    edx,edx
c001fe2c:	c3                   	ret    

c001fe2d <Vm::fpuGetPi()>:
c001fe2d:	b8 03 00 00 00       	mov    eax,0x3
c001fe32:	31 d2                	xor    edx,edx
c001fe34:	c3                   	ret    

c001fe35 <Vm::fpuGetLog2E()>:
c001fe35:	83 ec 18             	sub    esp,0x18
c001fe38:	68 78 d1 02 c0       	push   0xc002d178
c001fe3d:	e8 5b aa ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001fe42:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe47:	31 d2                	xor    edx,edx
c001fe49:	83 c4 1c             	add    esp,0x1c
c001fe4c:	c3                   	ret    

c001fe4d <Vm::fpuGetLogE2()>:
c001fe4d:	83 ec 18             	sub    esp,0x18
c001fe50:	68 84 d1 02 c0       	push   0xc002d184
c001fe55:	e8 43 aa ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001fe5a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe5f:	31 d2                	xor    edx,edx
c001fe61:	83 c4 1c             	add    esp,0x1c
c001fe64:	c3                   	ret    

c001fe65 <Vm::fpuGetLog210()>:
c001fe65:	83 ec 18             	sub    esp,0x18
c001fe68:	68 90 d1 02 c0       	push   0xc002d190
c001fe6d:	e8 2b aa ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001fe72:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe77:	31 d2                	xor    edx,edx
c001fe79:	83 c4 1c             	add    esp,0x1c
c001fe7c:	c3                   	ret    

c001fe7d <Vm::fpuGetLog102()>:
c001fe7d:	83 ec 18             	sub    esp,0x18
c001fe80:	68 9d d1 02 c0       	push   0xc002d19d
c001fe85:	e8 13 aa ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001fe8a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe8f:	31 d2                	xor    edx,edx
c001fe91:	83 c4 1c             	add    esp,0x1c
c001fe94:	c3                   	ret    

c001fe95 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe95:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe99:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fe9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fea1:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fea5:	0f 92 c0             	setb   al
c001fea8:	c3                   	ret    

c001fea9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fea9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fead:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb1:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001feb5:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001feb9:	09 c2                	or     edx,eax
c001febb:	0f 94 c0             	sete   al
c001febe:	c3                   	ret    

c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001febf:	57                   	push   edi
c001fec0:	56                   	push   esi
c001fec1:	53                   	push   ebx
c001fec2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fec6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001feca:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fece:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001fed2:	57                   	push   edi
c001fed3:	56                   	push   esi
c001fed4:	53                   	push   ebx
c001fed5:	51                   	push   ecx
c001fed6:	e8 ce ff ff ff       	call   c001fea9 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fedb:	83 c4 10             	add    esp,0x10
c001fede:	88 c2                	mov    dl,al
c001fee0:	31 c0                	xor    eax,eax
c001fee2:	84 d2                	test   dl,dl
c001fee4:	75 0c                	jne    c001fef2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fee6:	57                   	push   edi
c001fee7:	56                   	push   esi
c001fee8:	53                   	push   ebx
c001fee9:	51                   	push   ecx
c001feea:	e8 a6 ff ff ff       	call   c001fe95 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001feef:	83 c4 10             	add    esp,0x10
c001fef2:	83 e0 01             	and    eax,0x1
c001fef5:	5b                   	pop    ebx
c001fef6:	88 c1                	mov    cl,al
c001fef8:	83 e2 01             	and    edx,0x1
c001fefb:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c001ff00:	c1 e2 06             	shl    edx,0x6
c001ff03:	83 e0 ba             	and    eax,0xffffffba
c001ff06:	5e                   	pop    esi
c001ff07:	09 c8                	or     eax,ecx
c001ff09:	5f                   	pop    edi
c001ff0a:	09 d0                	or     eax,edx
c001ff0c:	a2 21 24 03 c0       	mov    ds:0xc0032421,al
c001ff11:	c3                   	ret    

c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff1e:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff22:	c3                   	ret    

c001ff23 <Vm::fpuAbs(unsigned long long)>:
c001ff23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff2b:	c3                   	ret    

c001ff2c <Vm::fpuChs(unsigned long long)>:
c001ff2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff34:	f7 d8                	neg    eax
c001ff36:	83 d2 00             	adc    edx,0x0
c001ff39:	f7 da                	neg    edx
c001ff3b:	c3                   	ret    

c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff3c:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff40:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff45:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff49:	eb c7                	jmp    c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff4b:	53                   	push   ebx
c001ff4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff58:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff5c:	0f af ca             	imul   ecx,edx
c001ff5f:	0f af d8             	imul   ebx,eax
c001ff62:	f7 e2                	mul    edx
c001ff64:	01 d9                	add    ecx,ebx
c001ff66:	5b                   	pop    ebx
c001ff67:	01 ca                	add    edx,ecx
c001ff69:	c3                   	ret    

c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff7d:	e8 32 72 00 00       	call   c00271b4 <__udivdi3>
c001ff82:	83 c4 1c             	add    esp,0x1c
c001ff85:	c3                   	ret    

c001ff86 <Vm::fpuSquare(unsigned long long)>:
c001ff86:	50                   	push   eax
c001ff87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	52                   	push   edx
c001ff92:	50                   	push   eax
c001ff93:	e8 b3 ff ff ff       	call   c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff98:	83 c4 14             	add    esp,0x14
c001ff9b:	c3                   	ret    

c001ff9c <Vm::fpuGetReg(int)>:
c001ff9c:	83 ec 0c             	sub    esp,0xc
c001ff9f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffa4:	76 10                	jbe    c001ffb6 <Vm::fpuGetReg(int)+0x1a>
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	68 aa d1 02 c0       	push   0xc002d1aa
c001ffae:	e8 ea a8 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001ffb3:	83 c4 10             	add    esp,0x10
c001ffb6:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c001ffbb:	b9 08 00 00 00       	mov    ecx,0x8
c001ffc0:	c0 e8 03             	shr    al,0x3
c001ffc3:	83 e0 07             	and    eax,0x7
c001ffc6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffca:	99                   	cdq    
c001ffcb:	f7 f9                	idiv   ecx
c001ffcd:	8b 04 d5 24 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbdc]
c001ffd4:	8b 14 d5 28 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbd8]
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	c3                   	ret    

c001ffdf <Vm::fpuSetReg(int, unsigned long long)>:
c001ffdf:	57                   	push   edi
c001ffe0:	56                   	push   esi
c001ffe1:	52                   	push   edx
c001ffe2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffe6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffea:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffef:	76 10                	jbe    c0020001 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fff1:	83 ec 0c             	sub    esp,0xc
c001fff4:	68 bd d1 02 c0       	push   0xc002d1bd
c001fff9:	e8 9f a8 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c001fffe:	83 c4 10             	add    esp,0x10
c0020001:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c0020006:	b9 08 00 00 00       	mov    ecx,0x8
c002000b:	c0 e8 03             	shr    al,0x3
c002000e:	83 e0 07             	and    eax,0x7
c0020011:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020015:	99                   	cdq    
c0020016:	f7 f9                	idiv   ecx
c0020018:	89 34 d5 24 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbdc],esi
c002001f:	89 3c d5 28 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbd8],edi
c0020026:	58                   	pop    eax
c0020027:	5e                   	pop    esi
c0020028:	5f                   	pop    edi
c0020029:	c3                   	ret    

c002002a <Vm::fpuPush(unsigned long long)>:
c002002a:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c002002f:	c0 e8 03             	shr    al,0x3
c0020032:	83 e0 07             	and    eax,0x7
c0020035:	83 c0 07             	add    eax,0x7
c0020038:	88 c2                	mov    dl,al
c002003a:	83 e0 07             	and    eax,0x7
c002003d:	83 e2 07             	and    edx,0x7
c0020040:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0020047:	8a 15 21 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032421
c002004d:	83 e2 c7             	and    edx,0xffffffc7
c0020050:	09 ca                	or     edx,ecx
c0020052:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020056:	88 15 21 24 03 c0    	mov    BYTE PTR ds:0xc0032421,dl
c002005c:	89 0c c5 28 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbd8],ecx
c0020063:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020067:	89 14 c5 24 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbdc],edx
c002006e:	a1 64 24 03 c0       	mov    eax,ds:0xc0032464
c0020073:	83 f8 08             	cmp    eax,0x8
c0020076:	75 08                	jne    c0020080 <Vm::fpuPush(unsigned long long)+0x56>
c0020078:	80 0d 20 24 03 c0 40 	or     BYTE PTR ds:0xc0032420,0x40
c002007f:	c3                   	ret    
c0020080:	40                   	inc    eax
c0020081:	a3 64 24 03 c0       	mov    ds:0xc0032464,eax
c0020086:	c3                   	ret    

c0020087 <Vm::fpuPop()>:
c0020087:	8a 0d 21 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032421
c002008d:	53                   	push   ebx
c002008e:	c0 e9 03             	shr    cl,0x3
c0020091:	8a 1d 21 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032421
c0020097:	83 e1 07             	and    ecx,0x7
c002009a:	83 e3 c7             	and    ebx,0xffffffc7
c002009d:	8b 04 cd 24 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbdc]
c00200a4:	8b 14 cd 28 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbd8]
c00200ab:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00200b2:	83 e1 38             	and    ecx,0x38
c00200b5:	09 d9                	or     ecx,ebx
c00200b7:	88 0d 21 24 03 c0    	mov    BYTE PTR ds:0xc0032421,cl
c00200bd:	8b 0d 64 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032464
c00200c3:	85 c9                	test   ecx,ecx
c00200c5:	74 09                	je     c00200d0 <Vm::fpuPop()+0x49>
c00200c7:	49                   	dec    ecx
c00200c8:	89 0d 64 24 03 c0    	mov    DWORD PTR ds:0xc0032464,ecx
c00200ce:	eb 07                	jmp    c00200d7 <Vm::fpuPop()+0x50>
c00200d0:	80 0d 20 24 03 c0 40 	or     BYTE PTR ds:0xc0032420,0x40
c00200d7:	5b                   	pop    ebx
c00200d8:	c3                   	ret    

c00200d9 <Vm::x87Handler(regs*)>:
c00200d9:	55                   	push   ebp
c00200da:	57                   	push   edi
c00200db:	56                   	push   esi
c00200dc:	53                   	push   ebx
c00200dd:	83 ec 1c             	sub    esp,0x1c
c00200e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200e4:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00200e9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00200ec:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00200f4:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00200f8:	50                   	push   eax
c00200f9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00200fd:	50                   	push   eax
c00200fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020102:	50                   	push   eax
c0020103:	53                   	push   ebx
c0020104:	e8 5b 9e ff ff       	call   c0019f64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020109:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002010c:	83 c4 10             	add    esp,0x10
c002010f:	89 c6                	mov    esi,eax
c0020111:	80 fa d9             	cmp    dl,0xd9
c0020114:	0f 85 52 01 00 00    	jne    c002026c <Vm::x87Handler(regs*)+0x193>
c002011a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002011e:	8d 50 20             	lea    edx,[eax+0x20]
c0020121:	80 fa 0e             	cmp    dl,0xe
c0020124:	0f 87 86 00 00 00    	ja     c00201b0 <Vm::x87Handler(regs*)+0xd7>
c002012a:	0f b6 d2             	movzx  edx,dl
c002012d:	ff 24 95 d0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e30]
c0020134:	e8 e7 fc ff ff       	call   c001fe20 <Vm::fpuGet0()>
c0020139:	eb 05                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c002013b:	e8 e5 fc ff ff       	call   c001fe25 <Vm::fpuGet1()>
c0020140:	57                   	push   edi
c0020141:	57                   	push   edi
c0020142:	52                   	push   edx
c0020143:	50                   	push   eax
c0020144:	e8 e1 fe ff ff       	call   c002002a <Vm::fpuPush(unsigned long long)>
c0020149:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	b0 01                	mov    al,0x1
c0020152:	e9 e3 09 00 00       	jmp    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020157:	83 ec 0c             	sub    esp,0xc
c002015a:	6a 00                	push   0x0
c002015c:	e8 3b fe ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020161:	59                   	pop    ecx
c0020162:	5e                   	pop    esi
c0020163:	52                   	push   edx
c0020164:	50                   	push   eax
c0020165:	e8 c2 fd ff ff       	call   c001ff2c <Vm::fpuChs(unsigned long long)>
c002016a:	eb 13                	jmp    c002017f <Vm::x87Handler(regs*)+0xa6>
c002016c:	83 ec 0c             	sub    esp,0xc
c002016f:	6a 00                	push   0x0
c0020171:	e8 26 fe ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020176:	5f                   	pop    edi
c0020177:	5d                   	pop    ebp
c0020178:	52                   	push   edx
c0020179:	50                   	push   eax
c002017a:	e8 a4 fd ff ff       	call   c001ff23 <Vm::fpuAbs(unsigned long long)>
c002017f:	83 c4 0c             	add    esp,0xc
c0020182:	52                   	push   edx
c0020183:	50                   	push   eax
c0020184:	6a 00                	push   0x0
c0020186:	e8 54 fe ff ff       	call   c001ffdf <Vm::fpuSetReg(int, unsigned long long)>
c002018b:	eb bc                	jmp    c0020149 <Vm::x87Handler(regs*)+0x70>
c002018d:	e8 d3 fc ff ff       	call   c001fe65 <Vm::fpuGetLog210()>
c0020192:	eb ac                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c0020194:	e8 9c fc ff ff       	call   c001fe35 <Vm::fpuGetLog2E()>
c0020199:	eb a5                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c002019b:	e8 8d fc ff ff       	call   c001fe2d <Vm::fpuGetPi()>
c00201a0:	eb 9e                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c00201a2:	e8 d6 fc ff ff       	call   c001fe7d <Vm::fpuGetLog102()>
c00201a7:	eb 97                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c00201a9:	e8 9f fc ff ff       	call   c001fe4d <Vm::fpuGetLogE2()>
c00201ae:	eb 90                	jmp    c0020140 <Vm::x87Handler(regs*)+0x67>
c00201b0:	8d 50 40             	lea    edx,[eax+0x40]
c00201b3:	80 fa 07             	cmp    dl,0x7
c00201b6:	77 15                	ja     c00201cd <Vm::x87Handler(regs*)+0xf4>
c00201b8:	83 ec 0c             	sub    esp,0xc
c00201bb:	2d c0 00 00 00       	sub    eax,0xc0
c00201c0:	50                   	push   eax
c00201c1:	e8 d6 fd ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00201c6:	59                   	pop    ecx
c00201c7:	5e                   	pop    esi
c00201c8:	e9 75 ff ff ff       	jmp    c0020142 <Vm::x87Handler(regs*)+0x69>
c00201cd:	8d 50 38             	lea    edx,[eax+0x38]
c00201d0:	80 fa 07             	cmp    dl,0x7
c00201d3:	77 3c                	ja     c0020211 <Vm::x87Handler(regs*)+0x138>
c00201d5:	83 ec 0c             	sub    esp,0xc
c00201d8:	2d c8 00 00 00       	sub    eax,0xc8
c00201dd:	50                   	push   eax
c00201de:	e8 b9 fd ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00201e3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ea:	89 c6                	mov    esi,eax
c00201ec:	89 d7                	mov    edi,edx
c00201ee:	e8 a9 fd ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00201f3:	83 c4 0c             	add    esp,0xc
c00201f6:	52                   	push   edx
c00201f7:	50                   	push   eax
c00201f8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201fc:	2d c8 00 00 00       	sub    eax,0xc8
c0020201:	50                   	push   eax
c0020202:	e8 d8 fd ff ff       	call   c001ffdf <Vm::fpuSetReg(int, unsigned long long)>
c0020207:	83 c4 0c             	add    esp,0xc
c002020a:	57                   	push   edi
c002020b:	56                   	push   esi
c002020c:	e9 73 ff ff ff       	jmp    c0020184 <Vm::x87Handler(regs*)+0xab>
c0020211:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020215:	84 d2                	test   dl,dl
c0020217:	75 0f                	jne    c0020228 <Vm::x87Handler(regs*)+0x14f>
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	ff 36                	push   DWORD PTR [esi]
c002021e:	e8 c8 fa ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c0020223:	e9 bf 00 00 00       	jmp    c00202e7 <Vm::x87Handler(regs*)+0x20e>
c0020228:	80 fa 03             	cmp    dl,0x3
c002022b:	75 13                	jne    c0020240 <Vm::x87Handler(regs*)+0x167>
c002022d:	e8 55 fe ff ff       	call   c0020087 <Vm::fpuPop()>
c0020232:	55                   	push   ebp
c0020233:	55                   	push   ebp
c0020234:	52                   	push   edx
c0020235:	50                   	push   eax
c0020236:	e8 4c fa ff ff       	call   c001fc87 <Vm::fpuInternalTo32(unsigned long long)>
c002023b:	e9 88 00 00 00       	jmp    c00202c8 <Vm::x87Handler(regs*)+0x1ef>
c0020240:	80 fa 05             	cmp    dl,0x5
c0020243:	75 0e                	jne    c0020253 <Vm::x87Handler(regs*)+0x17a>
c0020245:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020248:	66 a3 22 24 03 c0    	mov    ds:0xc0032422,ax
c002024e:	e9 df 00 00 00       	jmp    c0020332 <Vm::x87Handler(regs*)+0x259>
c0020253:	31 c0                	xor    eax,eax
c0020255:	80 fa 07             	cmp    dl,0x7
c0020258:	0f 85 dc 08 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c002025e:	66 a1 22 24 03 c0    	mov    ax,ds:0xc0032422
c0020264:	66 89 06             	mov    WORD PTR [esi],ax
c0020267:	e9 c6 00 00 00       	jmp    c0020332 <Vm::x87Handler(regs*)+0x259>
c002026c:	80 fa d8             	cmp    dl,0xd8
c002026f:	0f 84 c9 00 00 00    	je     c002033e <Vm::x87Handler(regs*)+0x265>
c0020275:	80 fa dc             	cmp    dl,0xdc
c0020278:	0f 84 0d 02 00 00    	je     c002048b <Vm::x87Handler(regs*)+0x3b2>
c002027e:	80 fa de             	cmp    dl,0xde
c0020281:	0f 84 cd 02 00 00    	je     c0020554 <Vm::x87Handler(regs*)+0x47b>
c0020287:	80 fa dd             	cmp    dl,0xdd
c002028a:	0f 84 5f 04 00 00    	je     c00206ef <Vm::x87Handler(regs*)+0x616>
c0020290:	80 fa da             	cmp    dl,0xda
c0020293:	0f 84 24 05 00 00    	je     c00207bd <Vm::x87Handler(regs*)+0x6e4>
c0020299:	80 fa df             	cmp    dl,0xdf
c002029c:	0f 84 68 05 00 00    	je     c002080a <Vm::x87Handler(regs*)+0x731>
c00202a2:	31 c0                	xor    eax,eax
c00202a4:	80 fa db             	cmp    dl,0xdb
c00202a7:	0f 85 8d 08 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c00202ad:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202b1:	80 fa 03             	cmp    dl,0x3
c00202b4:	0f 85 70 06 00 00    	jne    c002092a <Vm::x87Handler(regs*)+0x851>
c00202ba:	e8 c8 fd ff ff       	call   c0020087 <Vm::fpuPop()>
c00202bf:	55                   	push   ebp
c00202c0:	55                   	push   ebp
c00202c1:	52                   	push   edx
c00202c2:	50                   	push   eax
c00202c3:	e8 71 fa ff ff       	call   c001fd39 <Vm::fpuFloatToLong(unsigned long long)>
c00202c8:	83 c4 10             	add    esp,0x10
c00202cb:	89 06                	mov    DWORD PTR [esi],eax
c00202cd:	eb 63                	jmp    c0020332 <Vm::x87Handler(regs*)+0x259>
c00202cf:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202d3:	84 d2                	test   dl,dl
c00202d5:	0f 85 e6 05 00 00    	jne    c00208c1 <Vm::x87Handler(regs*)+0x7e8>
c00202db:	57                   	push   edi
c00202dc:	57                   	push   edi
c00202dd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202e0:	ff 36                	push   DWORD PTR [esi]
c00202e2:	e8 49 fa ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c00202e7:	5e                   	pop    esi
c00202e8:	5f                   	pop    edi
c00202e9:	52                   	push   edx
c00202ea:	50                   	push   eax
c00202eb:	e8 3a fd ff ff       	call   c002002a <Vm::fpuPush(unsigned long long)>
c00202f0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202f4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202f7:	e9 51 fe ff ff       	jmp    c002014d <Vm::x87Handler(regs*)+0x74>
c00202fc:	80 fa 03             	cmp    dl,0x3
c00202ff:	0f 85 d7 06 00 00    	jne    c00209dc <Vm::x87Handler(regs*)+0x903>
c0020305:	57                   	push   edi
c0020306:	57                   	push   edi
c0020307:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002030a:	ff 36                	push   DWORD PTR [esi]
c002030c:	e8 1f fa ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c0020311:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020318:	89 c6                	mov    esi,eax
c002031a:	89 d7                	mov    edi,edx
c002031c:	e8 7b fc ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020321:	57                   	push   edi
c0020322:	56                   	push   esi
c0020323:	52                   	push   edx
c0020324:	50                   	push   eax
c0020325:	e8 95 fb ff ff       	call   c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002032a:	83 c4 20             	add    esp,0x20
c002032d:	e8 55 fd ff ff       	call   c0020087 <Vm::fpuPop()>
c0020332:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020336:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020339:	e9 12 fe ff ff       	jmp    c0020150 <Vm::x87Handler(regs*)+0x77>
c002033e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020342:	8d 50 40             	lea    edx,[eax+0x40]
c0020345:	80 fa 07             	cmp    dl,0x7
c0020348:	77 29                	ja     c0020373 <Vm::x87Handler(regs*)+0x29a>
c002034a:	83 ec 0c             	sub    esp,0xc
c002034d:	2d c0 00 00 00       	sub    eax,0xc0
c0020352:	50                   	push   eax
c0020353:	e8 44 fc ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020358:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002035f:	89 c6                	mov    esi,eax
c0020361:	89 d7                	mov    edi,edx
c0020363:	e8 34 fc ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020368:	57                   	push   edi
c0020369:	56                   	push   esi
c002036a:	52                   	push   edx
c002036b:	50                   	push   eax
c002036c:	e8 a1 fb ff ff       	call   c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020371:	eb 2f                	jmp    c00203a2 <Vm::x87Handler(regs*)+0x2c9>
c0020373:	8d 50 38             	lea    edx,[eax+0x38]
c0020376:	80 fa 07             	cmp    dl,0x7
c0020379:	77 2f                	ja     c00203aa <Vm::x87Handler(regs*)+0x2d1>
c002037b:	83 ec 0c             	sub    esp,0xc
c002037e:	2d c8 00 00 00       	sub    eax,0xc8
c0020383:	50                   	push   eax
c0020384:	e8 13 fc ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020389:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020390:	89 c6                	mov    esi,eax
c0020392:	89 d7                	mov    edi,edx
c0020394:	e8 03 fc ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020399:	57                   	push   edi
c002039a:	56                   	push   esi
c002039b:	52                   	push   edx
c002039c:	50                   	push   eax
c002039d:	e8 a9 fb ff ff       	call   c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00203a2:	83 c4 1c             	add    esp,0x1c
c00203a5:	e9 d8 fd ff ff       	jmp    c0020182 <Vm::x87Handler(regs*)+0xa9>
c00203aa:	8d 50 30             	lea    edx,[eax+0x30]
c00203ad:	80 fa 07             	cmp    dl,0x7
c00203b0:	77 0d                	ja     c00203bf <Vm::x87Handler(regs*)+0x2e6>
c00203b2:	83 ec 0c             	sub    esp,0xc
c00203b5:	2d d0 00 00 00       	sub    eax,0xd0
c00203ba:	e9 99 03 00 00       	jmp    c0020758 <Vm::x87Handler(regs*)+0x67f>
c00203bf:	8d 50 28             	lea    edx,[eax+0x28]
c00203c2:	80 fa 07             	cmp    dl,0x7
c00203c5:	77 0d                	ja     c00203d4 <Vm::x87Handler(regs*)+0x2fb>
c00203c7:	83 ec 0c             	sub    esp,0xc
c00203ca:	2d d8 00 00 00       	sub    eax,0xd8
c00203cf:	e9 c0 03 00 00       	jmp    c0020794 <Vm::x87Handler(regs*)+0x6bb>
c00203d4:	8d 50 20             	lea    edx,[eax+0x20]
c00203d7:	80 fa 07             	cmp    dl,0x7
c00203da:	77 1b                	ja     c00203f7 <Vm::x87Handler(regs*)+0x31e>
c00203dc:	83 ec 0c             	sub    esp,0xc
c00203df:	2d e0 00 00 00       	sub    eax,0xe0
c00203e4:	50                   	push   eax
c00203e5:	e8 b2 fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00203ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203f1:	89 c6                	mov    esi,eax
c00203f3:	89 d7                	mov    edi,edx
c00203f5:	eb 22                	jmp    c0020419 <Vm::x87Handler(regs*)+0x340>
c00203f7:	8d 50 18             	lea    edx,[eax+0x18]
c00203fa:	80 fa 07             	cmp    dl,0x7
c00203fd:	77 2d                	ja     c002042c <Vm::x87Handler(regs*)+0x353>
c00203ff:	83 ec 0c             	sub    esp,0xc
c0020402:	6a 00                	push   0x0
c0020404:	e8 93 fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020409:	89 c6                	mov    esi,eax
c002040b:	89 d7                	mov    edi,edx
c002040d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020411:	2d e8 00 00 00       	sub    eax,0xe8
c0020416:	89 04 24             	mov    DWORD PTR [esp],eax
c0020419:	e8 7e fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002041e:	57                   	push   edi
c002041f:	56                   	push   esi
c0020420:	52                   	push   edx
c0020421:	50                   	push   eax
c0020422:	e8 15 fb ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020427:	e9 76 ff ff ff       	jmp    c00203a2 <Vm::x87Handler(regs*)+0x2c9>
c002042c:	8d 50 10             	lea    edx,[eax+0x10]
c002042f:	80 fa 07             	cmp    dl,0x7
c0020432:	77 1b                	ja     c002044f <Vm::x87Handler(regs*)+0x376>
c0020434:	83 ec 0c             	sub    esp,0xc
c0020437:	2d f0 00 00 00       	sub    eax,0xf0
c002043c:	50                   	push   eax
c002043d:	e8 5a fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020442:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020449:	89 c6                	mov    esi,eax
c002044b:	89 d7                	mov    edi,edx
c002044d:	eb 22                	jmp    c0020471 <Vm::x87Handler(regs*)+0x398>
c002044f:	3c f7                	cmp    al,0xf7
c0020451:	0f 86 d1 03 00 00    	jbe    c0020828 <Vm::x87Handler(regs*)+0x74f>
c0020457:	83 ec 0c             	sub    esp,0xc
c002045a:	6a 00                	push   0x0
c002045c:	e8 3b fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020461:	89 c6                	mov    esi,eax
c0020463:	89 d7                	mov    edi,edx
c0020465:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020469:	2d f8 00 00 00       	sub    eax,0xf8
c002046e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020471:	e8 26 fb ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020476:	57                   	push   edi
c0020477:	56                   	push   esi
c0020478:	52                   	push   edx
c0020479:	50                   	push   eax
c002047a:	e8 eb fa ff ff       	call   c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002047f:	83 c4 1c             	add    esp,0x1c
c0020482:	52                   	push   edx
c0020483:	50                   	push   eax
c0020484:	6a 00                	push   0x0
c0020486:	e9 51 02 00 00       	jmp    c00206dc <Vm::x87Handler(regs*)+0x603>
c002048b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002048f:	8d 50 40             	lea    edx,[eax+0x40]
c0020492:	80 fa 07             	cmp    dl,0x7
c0020495:	77 37                	ja     c00204ce <Vm::x87Handler(regs*)+0x3f5>
c0020497:	83 ec 0c             	sub    esp,0xc
c002049a:	2d c0 00 00 00       	sub    eax,0xc0
c002049f:	50                   	push   eax
c00204a0:	e8 f7 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00204a5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204ac:	89 c6                	mov    esi,eax
c00204ae:	89 d7                	mov    edi,edx
c00204b0:	e8 e7 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00204b5:	57                   	push   edi
c00204b6:	56                   	push   esi
c00204b7:	52                   	push   edx
c00204b8:	50                   	push   eax
c00204b9:	e8 54 fa ff ff       	call   c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204be:	83 c4 1c             	add    esp,0x1c
c00204c1:	52                   	push   edx
c00204c2:	50                   	push   eax
c00204c3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204c7:	2d c0 00 00 00       	sub    eax,0xc0
c00204cc:	eb 3d                	jmp    c002050b <Vm::x87Handler(regs*)+0x432>
c00204ce:	8d 50 38             	lea    edx,[eax+0x38]
c00204d1:	80 fa 07             	cmp    dl,0x7
c00204d4:	77 3b                	ja     c0020511 <Vm::x87Handler(regs*)+0x438>
c00204d6:	83 ec 0c             	sub    esp,0xc
c00204d9:	2d c8 00 00 00       	sub    eax,0xc8
c00204de:	50                   	push   eax
c00204df:	e8 b8 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00204e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204eb:	89 c6                	mov    esi,eax
c00204ed:	89 d7                	mov    edi,edx
c00204ef:	e8 a8 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00204f4:	57                   	push   edi
c00204f5:	56                   	push   esi
c00204f6:	52                   	push   edx
c00204f7:	50                   	push   eax
c00204f8:	e8 4e fa ff ff       	call   c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204fd:	83 c4 1c             	add    esp,0x1c
c0020500:	52                   	push   edx
c0020501:	50                   	push   eax
c0020502:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020506:	2d c8 00 00 00       	sub    eax,0xc8
c002050b:	50                   	push   eax
c002050c:	e9 75 fc ff ff       	jmp    c0020186 <Vm::x87Handler(regs*)+0xad>
c0020511:	83 c0 18             	add    eax,0x18
c0020514:	3c 07                	cmp    al,0x7
c0020516:	0f 87 3b 04 00 00    	ja     c0020957 <Vm::x87Handler(regs*)+0x87e>
c002051c:	83 ec 0c             	sub    esp,0xc
c002051f:	6a 00                	push   0x0
c0020521:	e8 76 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020526:	89 c6                	mov    esi,eax
c0020528:	89 d7                	mov    edi,edx
c002052a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002052e:	2d e8 00 00 00       	sub    eax,0xe8
c0020533:	89 04 24             	mov    DWORD PTR [esp],eax
c0020536:	e8 61 fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002053b:	57                   	push   edi
c002053c:	56                   	push   esi
c002053d:	52                   	push   edx
c002053e:	50                   	push   eax
c002053f:	e8 f8 f9 ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020544:	83 c4 1c             	add    esp,0x1c
c0020547:	52                   	push   edx
c0020548:	50                   	push   eax
c0020549:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002054d:	2d e8 00 00 00       	sub    eax,0xe8
c0020552:	eb b7                	jmp    c002050b <Vm::x87Handler(regs*)+0x432>
c0020554:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020558:	8d 50 40             	lea    edx,[eax+0x40]
c002055b:	80 fa 07             	cmp    dl,0x7
c002055e:	77 3a                	ja     c002059a <Vm::x87Handler(regs*)+0x4c1>
c0020560:	83 ec 0c             	sub    esp,0xc
c0020563:	2d c0 00 00 00       	sub    eax,0xc0
c0020568:	50                   	push   eax
c0020569:	e8 2e fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002056e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020575:	89 c6                	mov    esi,eax
c0020577:	89 d7                	mov    edi,edx
c0020579:	e8 1e fa ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002057e:	57                   	push   edi
c002057f:	56                   	push   esi
c0020580:	52                   	push   edx
c0020581:	50                   	push   eax
c0020582:	e8 8b f9 ff ff       	call   c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020587:	83 c4 1c             	add    esp,0x1c
c002058a:	52                   	push   edx
c002058b:	50                   	push   eax
c002058c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020590:	2d c0 00 00 00       	sub    eax,0xc0
c0020595:	e9 9e 01 00 00       	jmp    c0020738 <Vm::x87Handler(regs*)+0x65f>
c002059a:	8d 50 20             	lea    edx,[eax+0x20]
c002059d:	80 fa 07             	cmp    dl,0x7
c00205a0:	77 3a                	ja     c00205dc <Vm::x87Handler(regs*)+0x503>
c00205a2:	83 ec 0c             	sub    esp,0xc
c00205a5:	2d e0 00 00 00       	sub    eax,0xe0
c00205aa:	50                   	push   eax
c00205ab:	e8 ec f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00205b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205b7:	89 c6                	mov    esi,eax
c00205b9:	89 d7                	mov    edi,edx
c00205bb:	e8 dc f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00205c0:	57                   	push   edi
c00205c1:	56                   	push   esi
c00205c2:	52                   	push   edx
c00205c3:	50                   	push   eax
c00205c4:	e8 73 f9 ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205c9:	83 c4 1c             	add    esp,0x1c
c00205cc:	52                   	push   edx
c00205cd:	50                   	push   eax
c00205ce:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205d2:	2d e0 00 00 00       	sub    eax,0xe0
c00205d7:	e9 5c 01 00 00       	jmp    c0020738 <Vm::x87Handler(regs*)+0x65f>
c00205dc:	8d 50 18             	lea    edx,[eax+0x18]
c00205df:	80 fa 07             	cmp    dl,0x7
c00205e2:	77 3b                	ja     c002061f <Vm::x87Handler(regs*)+0x546>
c00205e4:	83 ec 0c             	sub    esp,0xc
c00205e7:	6a 00                	push   0x0
c00205e9:	e8 ae f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00205ee:	89 c6                	mov    esi,eax
c00205f0:	89 d7                	mov    edi,edx
c00205f2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205f6:	2d e8 00 00 00       	sub    eax,0xe8
c00205fb:	89 04 24             	mov    DWORD PTR [esp],eax
c00205fe:	e8 99 f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020603:	57                   	push   edi
c0020604:	56                   	push   esi
c0020605:	52                   	push   edx
c0020606:	50                   	push   eax
c0020607:	e8 30 f9 ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c002060c:	83 c4 1c             	add    esp,0x1c
c002060f:	52                   	push   edx
c0020610:	50                   	push   eax
c0020611:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020615:	2d e8 00 00 00       	sub    eax,0xe8
c002061a:	e9 19 01 00 00       	jmp    c0020738 <Vm::x87Handler(regs*)+0x65f>
c002061f:	8d 50 38             	lea    edx,[eax+0x38]
c0020622:	80 fa 07             	cmp    dl,0x7
c0020625:	77 37                	ja     c002065e <Vm::x87Handler(regs*)+0x585>
c0020627:	83 ec 0c             	sub    esp,0xc
c002062a:	2d c8 00 00 00       	sub    eax,0xc8
c002062f:	50                   	push   eax
c0020630:	e8 67 f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020635:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002063c:	89 c6                	mov    esi,eax
c002063e:	89 d7                	mov    edi,edx
c0020640:	e8 57 f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020645:	57                   	push   edi
c0020646:	56                   	push   esi
c0020647:	52                   	push   edx
c0020648:	50                   	push   eax
c0020649:	e8 fd f8 ff ff       	call   c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002064e:	83 c4 1c             	add    esp,0x1c
c0020651:	52                   	push   edx
c0020652:	50                   	push   eax
c0020653:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020657:	2d c8 00 00 00       	sub    eax,0xc8
c002065c:	eb 7d                	jmp    c00206db <Vm::x87Handler(regs*)+0x602>
c002065e:	3c f7                	cmp    al,0xf7
c0020660:	76 38                	jbe    c002069a <Vm::x87Handler(regs*)+0x5c1>
c0020662:	83 ec 0c             	sub    esp,0xc
c0020665:	6a 00                	push   0x0
c0020667:	e8 30 f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002066c:	89 c6                	mov    esi,eax
c002066e:	89 d7                	mov    edi,edx
c0020670:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020674:	2d f8 00 00 00       	sub    eax,0xf8
c0020679:	89 04 24             	mov    DWORD PTR [esp],eax
c002067c:	e8 1b f9 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020681:	57                   	push   edi
c0020682:	56                   	push   esi
c0020683:	52                   	push   edx
c0020684:	50                   	push   eax
c0020685:	e8 e0 f8 ff ff       	call   c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002068a:	83 c4 1c             	add    esp,0x1c
c002068d:	52                   	push   edx
c002068e:	50                   	push   eax
c002068f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020693:	2d f8 00 00 00       	sub    eax,0xf8
c0020698:	eb 41                	jmp    c00206db <Vm::x87Handler(regs*)+0x602>
c002069a:	8d 50 10             	lea    edx,[eax+0x10]
c002069d:	80 fa 07             	cmp    dl,0x7
c00206a0:	0f 87 5a 01 00 00    	ja     c0020800 <Vm::x87Handler(regs*)+0x727>
c00206a6:	83 ec 0c             	sub    esp,0xc
c00206a9:	2d f0 00 00 00       	sub    eax,0xf0
c00206ae:	50                   	push   eax
c00206af:	e8 e8 f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00206b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206bb:	89 c6                	mov    esi,eax
c00206bd:	89 d7                	mov    edi,edx
c00206bf:	e8 d8 f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00206c4:	57                   	push   edi
c00206c5:	56                   	push   esi
c00206c6:	52                   	push   edx
c00206c7:	50                   	push   eax
c00206c8:	e8 9d f8 ff ff       	call   c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206cd:	83 c4 1c             	add    esp,0x1c
c00206d0:	52                   	push   edx
c00206d1:	50                   	push   eax
c00206d2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206d6:	2d f0 00 00 00       	sub    eax,0xf0
c00206db:	50                   	push   eax
c00206dc:	e8 fe f8 ff ff       	call   c001ffdf <Vm::fpuSetReg(int, unsigned long long)>
c00206e1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206e5:	e8 9d f9 ff ff       	call   c0020087 <Vm::fpuPop()>
c00206ea:	e9 5e fa ff ff       	jmp    c002014d <Vm::x87Handler(regs*)+0x74>
c00206ef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206f3:	8d 50 30             	lea    edx,[eax+0x30]
c00206f6:	80 fa 07             	cmp    dl,0x7
c00206f9:	77 1d                	ja     c0020718 <Vm::x87Handler(regs*)+0x63f>
c00206fb:	83 ec 0c             	sub    esp,0xc
c00206fe:	6a 00                	push   0x0
c0020700:	e8 97 f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020705:	83 c4 0c             	add    esp,0xc
c0020708:	52                   	push   edx
c0020709:	50                   	push   eax
c002070a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002070e:	2d d0 00 00 00       	sub    eax,0xd0
c0020713:	e9 f3 fd ff ff       	jmp    c002050b <Vm::x87Handler(regs*)+0x432>
c0020718:	8d 50 28             	lea    edx,[eax+0x28]
c002071b:	80 fa 07             	cmp    dl,0x7
c002071e:	77 28                	ja     c0020748 <Vm::x87Handler(regs*)+0x66f>
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	6a 00                	push   0x0
c0020725:	e8 72 f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002072a:	83 c4 0c             	add    esp,0xc
c002072d:	52                   	push   edx
c002072e:	50                   	push   eax
c002072f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020733:	2d d8 00 00 00       	sub    eax,0xd8
c0020738:	50                   	push   eax
c0020739:	e8 a1 f8 ff ff       	call   c001ffdf <Vm::fpuSetReg(int, unsigned long long)>
c002073e:	e8 44 f9 ff ff       	call   c0020087 <Vm::fpuPop()>
c0020743:	e9 01 fa ff ff       	jmp    c0020149 <Vm::x87Handler(regs*)+0x70>
c0020748:	8d 50 20             	lea    edx,[eax+0x20]
c002074b:	80 fa 07             	cmp    dl,0x7
c002074e:	77 30                	ja     c0020780 <Vm::x87Handler(regs*)+0x6a7>
c0020750:	83 ec 0c             	sub    esp,0xc
c0020753:	2d e0 00 00 00       	sub    eax,0xe0
c0020758:	50                   	push   eax
c0020759:	e8 3e f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002075e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020765:	89 c6                	mov    esi,eax
c0020767:	89 d7                	mov    edi,edx
c0020769:	e8 2e f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002076e:	57                   	push   edi
c002076f:	56                   	push   esi
c0020770:	52                   	push   edx
c0020771:	50                   	push   eax
c0020772:	e8 48 f7 ff ff       	call   c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020777:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002077b:	e9 54 02 00 00       	jmp    c00209d4 <Vm::x87Handler(regs*)+0x8fb>
c0020780:	8d 50 18             	lea    edx,[eax+0x18]
c0020783:	80 fa 07             	cmp    dl,0x7
c0020786:	0f 87 43 fb ff ff    	ja     c00202cf <Vm::x87Handler(regs*)+0x1f6>
c002078c:	83 ec 0c             	sub    esp,0xc
c002078f:	2d e8 00 00 00       	sub    eax,0xe8
c0020794:	50                   	push   eax
c0020795:	e8 02 f8 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002079a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207a1:	89 c6                	mov    esi,eax
c00207a3:	89 d7                	mov    edi,edx
c00207a5:	e8 f2 f7 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00207aa:	57                   	push   edi
c00207ab:	56                   	push   esi
c00207ac:	52                   	push   edx
c00207ad:	50                   	push   eax
c00207ae:	e8 0c f7 ff ff       	call   c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207b3:	83 c4 20             	add    esp,0x20
c00207b6:	e8 cc f8 ff ff       	call   c0020087 <Vm::fpuPop()>
c00207bb:	eb 62                	jmp    c002081f <Vm::x87Handler(regs*)+0x746>
c00207bd:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207c1:	0f 85 0f 01 00 00    	jne    c00208d6 <Vm::x87Handler(regs*)+0x7fd>
c00207c7:	83 ec 0c             	sub    esp,0xc
c00207ca:	6a 01                	push   0x1
c00207cc:	e8 cb f7 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00207d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207d8:	89 c6                	mov    esi,eax
c00207da:	89 d7                	mov    edi,edx
c00207dc:	e8 bb f7 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00207e1:	57                   	push   edi
c00207e2:	56                   	push   esi
c00207e3:	52                   	push   edx
c00207e4:	50                   	push   eax
c00207e5:	e8 d5 f6 ff ff       	call   c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207ea:	83 c4 20             	add    esp,0x20
c00207ed:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207f1:	e8 91 f8 ff ff       	call   c0020087 <Vm::fpuPop()>
c00207f6:	e8 8c f8 ff ff       	call   c0020087 <Vm::fpuPop()>
c00207fb:	e9 50 f9 ff ff       	jmp    c0020150 <Vm::x87Handler(regs*)+0x77>
c0020800:	3c d9                	cmp    al,0xd9
c0020802:	0f 85 b5 02 00 00    	jne    c0020abd <Vm::x87Handler(regs*)+0x9e4>
c0020808:	eb bd                	jmp    c00207c7 <Vm::x87Handler(regs*)+0x6ee>
c002080a:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002080e:	0f 85 ea 02 00 00    	jne    c0020afe <Vm::x87Handler(regs*)+0xa25>
c0020814:	0f b7 05 20 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032420
c002081b:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002081f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020823:	e9 28 f9 ff ff       	jmp    c0020150 <Vm::x87Handler(regs*)+0x77>
c0020828:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002082c:	84 d2                	test   dl,dl
c002082e:	75 0f                	jne    c002083f <Vm::x87Handler(regs*)+0x766>
c0020830:	83 ec 0c             	sub    esp,0xc
c0020833:	ff 36                	push   DWORD PTR [esi]
c0020835:	e8 b1 f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c002083a:	e9 2c 01 00 00       	jmp    c002096b <Vm::x87Handler(regs*)+0x892>
c002083f:	80 fa 01             	cmp    dl,0x1
c0020842:	75 0f                	jne    c0020853 <Vm::x87Handler(regs*)+0x77a>
c0020844:	83 ec 0c             	sub    esp,0xc
c0020847:	ff 36                	push   DWORD PTR [esi]
c0020849:	e8 9d f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c002084e:	e9 81 02 00 00       	jmp    c0020ad4 <Vm::x87Handler(regs*)+0x9fb>
c0020853:	80 fa 04             	cmp    dl,0x4
c0020856:	75 0f                	jne    c0020867 <Vm::x87Handler(regs*)+0x78e>
c0020858:	83 ec 0c             	sub    esp,0xc
c002085b:	ff 36                	push   DWORD PTR [esi]
c002085d:	e8 89 f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c0020862:	e9 86 01 00 00       	jmp    c00209ed <Vm::x87Handler(regs*)+0x914>
c0020867:	80 fa 05             	cmp    dl,0x5
c002086a:	75 1b                	jne    c0020887 <Vm::x87Handler(regs*)+0x7ae>
c002086c:	83 ec 0c             	sub    esp,0xc
c002086f:	6a 00                	push   0x0
c0020871:	e8 26 f7 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020876:	89 c7                	mov    edi,eax
c0020878:	89 d5                	mov    ebp,edx
c002087a:	58                   	pop    eax
c002087b:	ff 36                	push   DWORD PTR [esi]
c002087d:	e8 69 f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c0020882:	e9 a3 01 00 00       	jmp    c0020a2a <Vm::x87Handler(regs*)+0x951>
c0020887:	80 fa 06             	cmp    dl,0x6
c002088a:	75 0f                	jne    c002089b <Vm::x87Handler(regs*)+0x7c2>
c002088c:	83 ec 0c             	sub    esp,0xc
c002088f:	ff 36                	push   DWORD PTR [esi]
c0020891:	e8 55 f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c0020896:	e9 ae 01 00 00       	jmp    c0020a49 <Vm::x87Handler(regs*)+0x970>
c002089b:	31 c0                	xor    eax,eax
c002089d:	80 fa 07             	cmp    dl,0x7
c00208a0:	0f 85 94 02 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c00208a6:	83 ec 0c             	sub    esp,0xc
c00208a9:	6a 00                	push   0x0
c00208ab:	e8 ec f6 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00208b0:	89 c7                	mov    edi,eax
c00208b2:	89 d5                	mov    ebp,edx
c00208b4:	58                   	pop    eax
c00208b5:	ff 36                	push   DWORD PTR [esi]
c00208b7:	e8 2f f4 ff ff       	call   c001fceb <Vm::fpu32ToInternal(unsigned int)>
c00208bc:	e9 cb 01 00 00       	jmp    c0020a8c <Vm::x87Handler(regs*)+0x9b3>
c00208c1:	80 fa 03             	cmp    dl,0x3
c00208c4:	0f 85 d3 01 00 00    	jne    c0020a9d <Vm::x87Handler(regs*)+0x9c4>
c00208ca:	e8 b8 f7 ff ff       	call   c0020087 <Vm::fpuPop()>
c00208cf:	51                   	push   ecx
c00208d0:	51                   	push   ecx
c00208d1:	e9 de 01 00 00       	jmp    c0020ab4 <Vm::x87Handler(regs*)+0x9db>
c00208d6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208da:	80 fa 01             	cmp    dl,0x1
c00208dd:	75 09                	jne    c00208e8 <Vm::x87Handler(regs*)+0x80f>
c00208df:	57                   	push   edi
c00208e0:	57                   	push   edi
c00208e1:	8b 06                	mov    eax,DWORD PTR [esi]
c00208e3:	e9 e3 01 00 00       	jmp    c0020acb <Vm::x87Handler(regs*)+0x9f2>
c00208e8:	80 fa 04             	cmp    dl,0x4
c00208eb:	75 12                	jne    c00208ff <Vm::x87Handler(regs*)+0x826>
c00208ed:	31 d2                	xor    edx,edx
c00208ef:	51                   	push   ecx
c00208f0:	51                   	push   ecx
c00208f1:	8b 06                	mov    eax,DWORD PTR [esi]
c00208f3:	52                   	push   edx
c00208f4:	50                   	push   eax
c00208f5:	e8 d0 f4 ff ff       	call   c001fdca <Vm::fpuLongToFloat(long long)>
c00208fa:	e9 ee 00 00 00       	jmp    c00209ed <Vm::x87Handler(regs*)+0x914>
c00208ff:	31 c0                	xor    eax,eax
c0020901:	80 fa 07             	cmp    dl,0x7
c0020904:	0f 85 30 02 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c002090a:	83 ec 0c             	sub    esp,0xc
c002090d:	6a 00                	push   0x0
c002090f:	e8 88 f6 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020914:	89 c7                	mov    edi,eax
c0020916:	89 d5                	mov    ebp,edx
c0020918:	58                   	pop    eax
c0020919:	8b 06                	mov    eax,DWORD PTR [esi]
c002091b:	5a                   	pop    edx
c002091c:	31 d2                	xor    edx,edx
c002091e:	52                   	push   edx
c002091f:	50                   	push   eax
c0020920:	e8 a5 f4 ff ff       	call   c001fdca <Vm::fpuLongToFloat(long long)>
c0020925:	e9 62 01 00 00       	jmp    c0020a8c <Vm::x87Handler(regs*)+0x9b3>
c002092a:	84 d2                	test   dl,dl
c002092c:	75 0d                	jne    c002093b <Vm::x87Handler(regs*)+0x862>
c002092e:	31 d2                	xor    edx,edx
c0020930:	55                   	push   ebp
c0020931:	55                   	push   ebp
c0020932:	8b 06                	mov    eax,DWORD PTR [esi]
c0020934:	52                   	push   edx
c0020935:	50                   	push   eax
c0020936:	e9 d3 01 00 00       	jmp    c0020b0e <Vm::x87Handler(regs*)+0xa35>
c002093b:	31 c0                	xor    eax,eax
c002093d:	80 fa 02             	cmp    dl,0x2
c0020940:	0f 85 f4 01 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020946:	83 ec 0c             	sub    esp,0xc
c0020949:	6a 00                	push   0x0
c002094b:	e8 4c f6 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020950:	59                   	pop    ecx
c0020951:	5f                   	pop    edi
c0020952:	e9 6a f9 ff ff       	jmp    c00202c1 <Vm::x87Handler(regs*)+0x1e8>
c0020957:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002095b:	84 d2                	test   dl,dl
c002095d:	75 2a                	jne    c0020989 <Vm::x87Handler(regs*)+0x8b0>
c002095f:	50                   	push   eax
c0020960:	50                   	push   eax
c0020961:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020964:	ff 36                	push   DWORD PTR [esi]
c0020966:	e8 c5 f3 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c002096b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020972:	89 c6                	mov    esi,eax
c0020974:	89 d7                	mov    edi,edx
c0020976:	e8 21 f6 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c002097b:	57                   	push   edi
c002097c:	56                   	push   esi
c002097d:	52                   	push   edx
c002097e:	50                   	push   eax
c002097f:	e8 8e f5 ff ff       	call   c001ff12 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020984:	e9 64 01 00 00       	jmp    c0020aed <Vm::x87Handler(regs*)+0xa14>
c0020989:	80 fa 01             	cmp    dl,0x1
c002098c:	75 11                	jne    c002099f <Vm::x87Handler(regs*)+0x8c6>
c002098e:	50                   	push   eax
c002098f:	50                   	push   eax
c0020990:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020993:	ff 36                	push   DWORD PTR [esi]
c0020995:	e8 96 f3 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c002099a:	e9 35 01 00 00       	jmp    c0020ad4 <Vm::x87Handler(regs*)+0x9fb>
c002099f:	80 fa 02             	cmp    dl,0x2
c00209a2:	0f 85 54 f9 ff ff    	jne    c00202fc <Vm::x87Handler(regs*)+0x223>
c00209a8:	55                   	push   ebp
c00209a9:	55                   	push   ebp
c00209aa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209ad:	ff 36                	push   DWORD PTR [esi]
c00209af:	e8 7c f3 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c00209b4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209bb:	89 c6                	mov    esi,eax
c00209bd:	89 d7                	mov    edi,edx
c00209bf:	e8 d8 f5 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00209c4:	57                   	push   edi
c00209c5:	56                   	push   esi
c00209c6:	52                   	push   edx
c00209c7:	50                   	push   eax
c00209c8:	e8 f2 f4 ff ff       	call   c001febf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209d1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209d4:	83 c4 20             	add    esp,0x20
c00209d7:	e9 74 f7 ff ff       	jmp    c0020150 <Vm::x87Handler(regs*)+0x77>
c00209dc:	80 fa 04             	cmp    dl,0x4
c00209df:	75 2a                	jne    c0020a0b <Vm::x87Handler(regs*)+0x932>
c00209e1:	51                   	push   ecx
c00209e2:	51                   	push   ecx
c00209e3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209e6:	ff 36                	push   DWORD PTR [esi]
c00209e8:	e8 43 f3 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c00209ed:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209f4:	89 c6                	mov    esi,eax
c00209f6:	89 d7                	mov    edi,edx
c00209f8:	e8 9f f5 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c00209fd:	57                   	push   edi
c00209fe:	56                   	push   esi
c00209ff:	52                   	push   edx
c0020a00:	50                   	push   eax
c0020a01:	e8 36 f5 ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a06:	e9 e2 00 00 00       	jmp    c0020aed <Vm::x87Handler(regs*)+0xa14>
c0020a0b:	80 fa 05             	cmp    dl,0x5
c0020a0e:	75 28                	jne    c0020a38 <Vm::x87Handler(regs*)+0x95f>
c0020a10:	83 ec 0c             	sub    esp,0xc
c0020a13:	6a 00                	push   0x0
c0020a15:	e8 82 f5 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020a1a:	89 c7                	mov    edi,eax
c0020a1c:	89 d5                	mov    ebp,edx
c0020a1e:	58                   	pop    eax
c0020a1f:	5a                   	pop    edx
c0020a20:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a23:	ff 36                	push   DWORD PTR [esi]
c0020a25:	e8 06 f3 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c0020a2a:	83 c4 10             	add    esp,0x10
c0020a2d:	55                   	push   ebp
c0020a2e:	57                   	push   edi
c0020a2f:	52                   	push   edx
c0020a30:	50                   	push   eax
c0020a31:	e8 06 f5 ff ff       	call   c001ff3c <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a36:	eb 60                	jmp    c0020a98 <Vm::x87Handler(regs*)+0x9bf>
c0020a38:	80 fa 06             	cmp    dl,0x6
c0020a3b:	75 2a                	jne    c0020a67 <Vm::x87Handler(regs*)+0x98e>
c0020a3d:	51                   	push   ecx
c0020a3e:	51                   	push   ecx
c0020a3f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a42:	ff 36                	push   DWORD PTR [esi]
c0020a44:	e8 e7 f2 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c0020a49:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a50:	89 c6                	mov    esi,eax
c0020a52:	89 d7                	mov    edi,edx
c0020a54:	e8 43 f5 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020a59:	57                   	push   edi
c0020a5a:	56                   	push   esi
c0020a5b:	52                   	push   edx
c0020a5c:	50                   	push   eax
c0020a5d:	e8 08 f5 ff ff       	call   c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a62:	e9 86 00 00 00       	jmp    c0020aed <Vm::x87Handler(regs*)+0xa14>
c0020a67:	31 c0                	xor    eax,eax
c0020a69:	80 fa 07             	cmp    dl,0x7
c0020a6c:	0f 85 c8 00 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020a72:	83 ec 0c             	sub    esp,0xc
c0020a75:	6a 00                	push   0x0
c0020a77:	e8 20 f5 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020a7c:	89 c7                	mov    edi,eax
c0020a7e:	89 d5                	mov    ebp,edx
c0020a80:	58                   	pop    eax
c0020a81:	5a                   	pop    edx
c0020a82:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a85:	ff 36                	push   DWORD PTR [esi]
c0020a87:	e8 a4 f2 ff ff       	call   c001fd30 <Vm::fpu64ToInternal(unsigned long long)>
c0020a8c:	83 c4 10             	add    esp,0x10
c0020a8f:	55                   	push   ebp
c0020a90:	57                   	push   edi
c0020a91:	52                   	push   edx
c0020a92:	50                   	push   eax
c0020a93:	e8 d2 f4 ff ff       	call   c001ff6a <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a98:	83 c4 0c             	add    esp,0xc
c0020a9b:	eb 53                	jmp    c0020af0 <Vm::x87Handler(regs*)+0xa17>
c0020a9d:	31 c0                	xor    eax,eax
c0020a9f:	80 fa 02             	cmp    dl,0x2
c0020aa2:	0f 85 92 00 00 00    	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020aa8:	83 ec 0c             	sub    esp,0xc
c0020aab:	6a 00                	push   0x0
c0020aad:	e8 ea f4 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020ab2:	59                   	pop    ecx
c0020ab3:	5f                   	pop    edi
c0020ab4:	52                   	push   edx
c0020ab5:	50                   	push   eax
c0020ab6:	e8 27 f2 ff ff       	call   c001fce2 <Vm::fpuInternalTo64(unsigned long long)>
c0020abb:	eb 70                	jmp    c0020b2d <Vm::x87Handler(regs*)+0xa54>
c0020abd:	31 c0                	xor    eax,eax
c0020abf:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020ac4:	75 74                	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020ac6:	50                   	push   eax
c0020ac7:	50                   	push   eax
c0020ac8:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020acb:	31 d2                	xor    edx,edx
c0020acd:	52                   	push   edx
c0020ace:	50                   	push   eax
c0020acf:	e8 f6 f2 ff ff       	call   c001fdca <Vm::fpuLongToFloat(long long)>
c0020ad4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020adb:	89 c6                	mov    esi,eax
c0020add:	89 d7                	mov    edi,edx
c0020adf:	e8 b8 f4 ff ff       	call   c001ff9c <Vm::fpuGetReg(int)>
c0020ae4:	57                   	push   edi
c0020ae5:	56                   	push   esi
c0020ae6:	52                   	push   edx
c0020ae7:	50                   	push   eax
c0020ae8:	e8 5e f4 ff ff       	call   c001ff4b <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020aed:	83 c4 1c             	add    esp,0x1c
c0020af0:	52                   	push   edx
c0020af1:	50                   	push   eax
c0020af2:	6a 00                	push   0x0
c0020af4:	e8 e6 f4 ff ff       	call   c001ffdf <Vm::fpuSetReg(int, unsigned long long)>
c0020af9:	e9 f2 f7 ff ff       	jmp    c00202f0 <Vm::x87Handler(regs*)+0x217>
c0020afe:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b02:	80 fa 05             	cmp    dl,0x5
c0020b05:	75 11                	jne    c0020b18 <Vm::x87Handler(regs*)+0xa3f>
c0020b07:	55                   	push   ebp
c0020b08:	55                   	push   ebp
c0020b09:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b0c:	ff 36                	push   DWORD PTR [esi]
c0020b0e:	e8 81 f2 ff ff       	call   c001fd94 <Vm::fpuULongToFloat(unsigned long long)>
c0020b13:	e9 cf f7 ff ff       	jmp    c00202e7 <Vm::x87Handler(regs*)+0x20e>
c0020b18:	31 c0                	xor    eax,eax
c0020b1a:	80 fa 07             	cmp    dl,0x7
c0020b1d:	75 1b                	jne    c0020b3a <Vm::x87Handler(regs*)+0xa61>
c0020b1f:	e8 63 f5 ff ff       	call   c0020087 <Vm::fpuPop()>
c0020b24:	51                   	push   ecx
c0020b25:	51                   	push   ecx
c0020b26:	52                   	push   edx
c0020b27:	50                   	push   eax
c0020b28:	e8 0c f2 ff ff       	call   c001fd39 <Vm::fpuFloatToLong(unsigned long long)>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	89 06                	mov    DWORD PTR [esi],eax
c0020b32:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b35:	e9 f8 f7 ff ff       	jmp    c0020332 <Vm::x87Handler(regs*)+0x259>
c0020b3a:	83 c4 1c             	add    esp,0x1c
c0020b3d:	5b                   	pop    ebx
c0020b3e:	5e                   	pop    esi
c0020b3f:	5f                   	pop    edi
c0020b40:	5d                   	pop    ebp
c0020b41:	c3                   	ret    

c0020b42 <__static_initialization_and_destruction_0(int, int)>:
c0020b42:	83 ec 0c             	sub    esp,0xc
c0020b45:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b4a:	75 1a                	jne    c0020b66 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b4c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b54:	75 10                	jne    c0020b66 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b56:	83 ec 0c             	sub    esp,0xc
c0020b59:	68 20 24 03 c0       	push   0xc0032420
c0020b5e:	e8 99 8a 00 00       	call   c00295fc <Vm::_FPUState::_FPUState()>
c0020b63:	83 c4 10             	add    esp,0x10
c0020b66:	90                   	nop
c0020b67:	83 c4 0c             	add    esp,0xc
c0020b6a:	c3                   	ret    

c0020b6b <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b6b:	83 ec 0c             	sub    esp,0xc
c0020b6e:	83 ec 08             	sub    esp,0x8
c0020b71:	68 ff ff 00 00       	push   0xffff
c0020b76:	6a 01                	push   0x1
c0020b78:	e8 c5 ff ff ff       	call   c0020b42 <__static_initialization_and_destruction_0(int, int)>
c0020b7d:	83 c4 10             	add    esp,0x10
c0020b80:	83 c4 0c             	add    esp,0xc
c0020b83:	c3                   	ret    

c0020b84 <FAT::getName()>:
c0020b84:	b8 0c d2 02 c0       	mov    eax,0xc002d20c
c0020b89:	c3                   	ret    

c0020b8a <FAT::tell(void*, unsigned long long*)>:
c0020b8a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b8f:	75 06                	jne    c0020b97 <FAT::tell(void*, unsigned long long*)+0xd>
c0020b91:	b8 04 00 00 00       	mov    eax,0x4
c0020b96:	c3                   	ret    
c0020b97:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b9c:	75 06                	jne    c0020ba4 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020b9e:	b8 04 00 00 00       	mov    eax,0x4
c0020ba3:	c3                   	ret    
c0020ba4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ba8:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020bab:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020bae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bb2:	89 01                	mov    DWORD PTR [ecx],eax
c0020bb4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020bb7:	b8 00 00 00 00       	mov    eax,0x0
c0020bbc:	c3                   	ret    
c0020bbd:	90                   	nop

c0020bbe <FAT::stat(void*, unsigned long long*)>:
c0020bbe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bc3:	75 06                	jne    c0020bcb <FAT::stat(void*, unsigned long long*)+0xd>
c0020bc5:	b8 04 00 00 00       	mov    eax,0x4
c0020bca:	c3                   	ret    
c0020bcb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bd0:	75 06                	jne    c0020bd8 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bd2:	b8 04 00 00 00       	mov    eax,0x4
c0020bd7:	c3                   	ret    
c0020bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bdc:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020bdf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020be2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020be6:	89 01                	mov    DWORD PTR [ecx],eax
c0020be8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020beb:	b8 00 00 00 00       	mov    eax,0x0
c0020bf0:	c3                   	ret    
c0020bf1:	90                   	nop

c0020bf2 <FAT::~FAT()>:
c0020bf2:	83 ec 0c             	sub    esp,0xc
c0020bf5:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c0020bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfe:	89 10                	mov    DWORD PTR [eax],edx
c0020c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c04:	83 ec 0c             	sub    esp,0xc
c0020c07:	50                   	push   eax
c0020c08:	e8 03 26 ff ff       	call   c0013210 <Filesystem::~Filesystem()>
c0020c0d:	83 c4 10             	add    esp,0x10
c0020c10:	90                   	nop
c0020c11:	83 c4 0c             	add    esp,0xc
c0020c14:	c3                   	ret    
c0020c15:	90                   	nop

c0020c16 <FAT::~FAT()>:
c0020c16:	83 ec 0c             	sub    esp,0xc
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c20:	e8 cd ff ff ff       	call   c0020bf2 <FAT::~FAT()>
c0020c25:	83 c4 10             	add    esp,0x10
c0020c28:	83 ec 08             	sub    esp,0x8
c0020c2b:	6a 08                	push   0x8
c0020c2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c31:	e8 cb 21 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0020c36:	83 c4 10             	add    esp,0x10
c0020c39:	83 c4 0c             	add    esp,0xc
c0020c3c:	c3                   	ret    
c0020c3d:	90                   	nop

c0020c3e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c3e:	83 ec 1c             	sub    esp,0x1c
c0020c41:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c48:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c51:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020c58:	83 f8 ff             	cmp    eax,0xffffffff
c0020c5b:	75 34                	jne    c0020c91 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c5d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c61:	88 c2                	mov    dl,al
c0020c63:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020c68:	01 d0                	add    eax,edx
c0020c6a:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c6e:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020c74:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c78:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020c7f:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020c84:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c88:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020c8f:	eb 17                	jmp    c0020ca8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c91:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c95:	88 c2                	mov    dl,al
c0020c97:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c9b:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020ca2:	01 d0                	add    eax,edx
c0020ca4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ca8:	83 ec 04             	sub    esp,0x4
c0020cab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020caf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cb3:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020cb7:	50                   	push   eax
c0020cb8:	e8 9f 60 fe ff       	call   c0006d5c <f_getlabel>
c0020cbd:	83 c4 10             	add    esp,0x10
c0020cc0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cc4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cc9:	75 07                	jne    c0020cd2 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020ccb:	b8 00 00 00 00       	mov    eax,0x0
c0020cd0:	eb 05                	jmp    c0020cd7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cd2:	b8 01 00 00 00       	mov    eax,0x1
c0020cd7:	83 c4 1c             	add    esp,0x1c
c0020cda:	c3                   	ret    
c0020cdb:	90                   	nop

c0020cdc <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020cdc:	57                   	push   edi
c0020cdd:	83 ec 58             	sub    esp,0x58
c0020ce0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020ce8:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020cec:	b9 0f 00 00 00       	mov    ecx,0xf
c0020cf1:	b8 00 00 00 00       	mov    eax,0x0
c0020cf6:	fc                   	cld    
c0020cf7:	89 d7                	mov    edi,edx
c0020cf9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020cfb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020cff:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020d06:	83 f8 ff             	cmp    eax,0xffffffff
c0020d09:	75 34                	jne    c0020d3f <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d0b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d0f:	88 c2                	mov    dl,al
c0020d11:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020d16:	01 d0                	add    eax,edx
c0020d18:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d1c:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020d22:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d26:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020d2d:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020d32:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d36:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020d3d:	eb 17                	jmp    c0020d56 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d3f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d43:	88 c2                	mov    dl,al
c0020d45:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d49:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020d50:	01 d0                	add    eax,edx
c0020d52:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d56:	83 ec 08             	sub    esp,0x8
c0020d59:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d5d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d61:	50                   	push   eax
c0020d62:	e8 31 fc fd ff       	call   c0000998 <strcat>
c0020d67:	83 c4 10             	add    esp,0x10
c0020d6a:	83 ec 0c             	sub    esp,0xc
c0020d6d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d71:	50                   	push   eax
c0020d72:	e8 d3 61 fe ff       	call   c0006f4a <f_setlabel>
c0020d77:	83 c4 10             	add    esp,0x10
c0020d7a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d7e:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020d83:	75 07                	jne    c0020d8c <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020d85:	b8 00 00 00 00       	mov    eax,0x0
c0020d8a:	eb 05                	jmp    c0020d91 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020d8c:	b8 01 00 00 00       	mov    eax,0x1
c0020d91:	83 c4 58             	add    esp,0x58
c0020d94:	5f                   	pop    edi
c0020d95:	c3                   	ret    

c0020d96 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d96:	83 ec 2c             	sub    esp,0x2c
c0020d99:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020da1:	83 ec 08             	sub    esp,0x8
c0020da4:	68 30 d2 02 c0       	push   0xc002d230
c0020da9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dad:	e8 32 fb fd ff       	call   c00008e4 <strcmp>
c0020db2:	83 c4 10             	add    esp,0x10
c0020db5:	85 c0                	test   eax,eax
c0020db7:	0f 94 c0             	sete   al
c0020dba:	84 c0                	test   al,al
c0020dbc:	74 0d                	je     c0020dcb <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020dbe:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020dc6:	e9 a6 00 00 00       	jmp    c0020e71 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dcb:	83 ec 08             	sub    esp,0x8
c0020dce:	68 22 d2 02 c0       	push   0xc002d222
c0020dd3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dd7:	e8 08 fb fd ff       	call   c00008e4 <strcmp>
c0020ddc:	83 c4 10             	add    esp,0x10
c0020ddf:	85 c0                	test   eax,eax
c0020de1:	0f 94 c0             	sete   al
c0020de4:	84 c0                	test   al,al
c0020de6:	74 0a                	je     c0020df2 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020de8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020df0:	eb 7f                	jmp    c0020e71 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020df2:	83 ec 08             	sub    esp,0x8
c0020df5:	68 28 d2 02 c0       	push   0xc002d228
c0020dfa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dfe:	e8 e1 fa fd ff       	call   c00008e4 <strcmp>
c0020e03:	83 c4 10             	add    esp,0x10
c0020e06:	85 c0                	test   eax,eax
c0020e08:	0f 94 c0             	sete   al
c0020e0b:	84 c0                	test   al,al
c0020e0d:	74 0a                	je     c0020e19 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e0f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e17:	eb 58                	jmp    c0020e71 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e19:	83 ec 08             	sub    esp,0x8
c0020e1c:	68 6c 9d 02 c0       	push   0xc0029d6c
c0020e21:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e25:	e8 ba fa fd ff       	call   c00008e4 <strcmp>
c0020e2a:	83 c4 10             	add    esp,0x10
c0020e2d:	85 c0                	test   eax,eax
c0020e2f:	0f 94 c0             	sete   al
c0020e32:	84 c0                	test   al,al
c0020e34:	74 0a                	je     c0020e40 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e36:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e3e:	eb 31                	jmp    c0020e71 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e40:	83 ec 08             	sub    esp,0x8
c0020e43:	68 2e d2 02 c0       	push   0xc002d22e
c0020e48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e4c:	e8 93 fa fd ff       	call   c00008e4 <strcmp>
c0020e51:	83 c4 10             	add    esp,0x10
c0020e54:	85 c0                	test   eax,eax
c0020e56:	0f 94 c0             	sete   al
c0020e59:	84 c0                	test   al,al
c0020e5b:	74 0a                	je     c0020e67 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e5d:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e65:	eb 0a                	jmp    c0020e71 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e67:	b8 08 00 00 00       	mov    eax,0x8
c0020e6c:	e9 04 01 00 00       	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e71:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e78:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e81:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020e88:	83 f8 ff             	cmp    eax,0xffffffff
c0020e8b:	75 34                	jne    c0020ec1 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020e8d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e91:	88 c2                	mov    dl,al
c0020e93:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020e98:	01 d0                	add    eax,edx
c0020e9a:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e9e:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020ea4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ea8:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020eaf:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020eb4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020eb8:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020ebf:	eb 17                	jmp    c0020ed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020ec1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ec5:	88 c2                	mov    dl,al
c0020ec7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ecb:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020ed2:	01 d0                	add    eax,edx
c0020ed4:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ed8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020edc:	88 04 24             	mov    BYTE PTR [esp],al
c0020edf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020ee3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ee7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020eef:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020ef4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020efc:	83 ec 0c             	sub    esp,0xc
c0020eff:	68 00 20 00 00       	push   0x2000
c0020f04:	e8 21 ea fe ff       	call   c000f92a <malloc>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f10:	68 00 20 00 00       	push   0x2000
c0020f15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f19:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f1d:	50                   	push   eax
c0020f1e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f22:	50                   	push   eax
c0020f23:	e8 6d 64 fe ff       	call   c0007395 <f_mkfs>
c0020f28:	83 c4 10             	add    esp,0x10
c0020f2b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f34:	75 07                	jne    c0020f3d <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f36:	b8 00 00 00 00       	mov    eax,0x0
c0020f3b:	eb 38                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f3d:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f42:	75 17                	jne    c0020f5b <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f44:	83 ec 0c             	sub    esp,0xc
c0020f47:	68 6c d2 02 c0       	push   0xc002d26c
c0020f4c:	e8 90 1f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0020f51:	83 c4 10             	add    esp,0x10
c0020f54:	b8 09 00 00 00       	mov    eax,0x9
c0020f59:	eb 1a                	jmp    c0020f75 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f5f:	83 ec 08             	sub    esp,0x8
c0020f62:	50                   	push   eax
c0020f63:	68 34 d2 02 c0       	push   0xc002d234
c0020f68:	e8 74 1f ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0020f6d:	83 c4 10             	add    esp,0x10
c0020f70:	b8 01 00 00 00       	mov    eax,0x1
c0020f75:	83 c4 2c             	add    esp,0x2c
c0020f78:	c3                   	ret    
c0020f79:	90                   	nop

c0020f7a <FAT::tryMount(LogicalDisk*, int)>:
c0020f7a:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f80:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020f85:	83 f8 14             	cmp    eax,0x14
c0020f88:	75 17                	jne    c0020fa1 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020f8a:	83 ec 0c             	sub    esp,0xc
c0020f8d:	68 46 d2 02 c0       	push   0xc002d246
c0020f92:	e8 06 99 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0020f97:	83 c4 10             	add    esp,0x10
c0020f9a:	b0 00                	mov    al,0x0
c0020f9c:	e9 d7 01 00 00       	jmp    c0021178 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fa1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020fa8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fae:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fb4:	3d 00 02 00 00       	cmp    eax,0x200
c0020fb9:	74 07                	je     c0020fc2 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fbb:	b0 00                	mov    al,0x0
c0020fbd:	e9 b6 01 00 00       	jmp    c0021178 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fc2:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fca:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fd1:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0020fdb:	74 07                	je     c0020fe4 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020fdd:	b0 01                	mov    al,0x1
c0020fdf:	e9 94 01 00 00       	jmp    c0021178 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fe4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020fee:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020ff6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020ffd:	88 c2                	mov    dl,al
c0020fff:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0021004:	01 d0                	add    eax,edx
c0021006:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c002100d:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0021013:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002101a:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0021021:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0021026:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c002102d:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0021034:	83 ec 0c             	sub    esp,0xc
c0021037:	68 54 02 00 00       	push   0x254
c002103c:	e8 e9 e8 fe ff       	call   c000f92a <malloc>
c0021041:	83 c4 10             	add    esp,0x10
c0021044:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002104b:	83 ec 04             	sub    esp,0x4
c002104e:	6a 00                	push   0x0
c0021050:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021057:	50                   	push   eax
c0021058:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002105f:	e8 ef 3e fe ff       	call   c0004f53 <f_mount>
c0021064:	83 c4 10             	add    esp,0x10
c0021067:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002106e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0021076:	74 19                	je     c0021091 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021078:	83 ec 0c             	sub    esp,0xc
c002107b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021082:	e8 c3 e8 fe ff       	call   c000f94a <rfree>
c0021087:	83 c4 10             	add    esp,0x10
c002108a:	b0 00                	mov    al,0x0
c002108c:	e9 e7 00 00 00       	jmp    c0021178 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021091:	83 ec 04             	sub    esp,0x4
c0021094:	68 00 01 00 00       	push   0x100
c0021099:	6a 00                	push   0x0
c002109b:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210a2:	50                   	push   eax
c00210a3:	e8 f4 f6 fd ff       	call   c000079c <memset>
c00210a8:	83 c4 10             	add    esp,0x10
c00210ab:	83 ec 08             	sub    esp,0x8
c00210ae:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210b5:	50                   	push   eax
c00210b6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210bd:	50                   	push   eax
c00210be:	e8 d5 f8 fd ff       	call   c0000998 <strcat>
c00210c3:	83 c4 10             	add    esp,0x10
c00210c6:	83 ec 08             	sub    esp,0x8
c00210c9:	68 54 d2 02 c0       	push   0xc002d254
c00210ce:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210d5:	50                   	push   eax
c00210d6:	e8 bd f8 fd ff       	call   c0000998 <strcat>
c00210db:	83 c4 10             	add    esp,0x10
c00210de:	83 ec 04             	sub    esp,0x4
c00210e1:	6a 01                	push   0x1
c00210e3:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00210ea:	50                   	push   eax
c00210eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210ef:	50                   	push   eax
c00210f0:	e8 c0 3e fe ff       	call   c0004fb5 <f_open>
c00210f5:	83 c4 10             	add    esp,0x10
c00210f8:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210ff:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0021106:	85 c0                	test   eax,eax
c0021108:	74 0a                	je     c0021114 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002110a:	78 2d                	js     c0021139 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002110c:	83 e8 04             	sub    eax,0x4
c002110f:	83 f8 01             	cmp    eax,0x1
c0021112:	77 25                	ja     c0021139 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021114:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c002111c:	83 ec 0c             	sub    esp,0xc
c002111f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021123:	50                   	push   eax
c0021124:	e8 de 49 fe ff       	call   c0005b07 <f_close>
c0021129:	83 c4 10             	add    esp,0x10
c002112c:	90                   	nop
c002112d:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021135:	74 3a                	je     c0021171 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0021137:	eb 2d                	jmp    c0021166 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021139:	83 ec 0c             	sub    esp,0xc
c002113c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021143:	e8 02 e8 fe ff       	call   c000f94a <rfree>
c0021148:	83 c4 10             	add    esp,0x10
c002114b:	83 ec 04             	sub    esp,0x4
c002114e:	6a 00                	push   0x0
c0021150:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0021157:	50                   	push   eax
c0021158:	6a 00                	push   0x0
c002115a:	e8 f4 3d fe ff       	call   c0004f53 <f_mount>
c002115f:	83 c4 10             	add    esp,0x10
c0021162:	b0 00                	mov    al,0x0
c0021164:	eb 12                	jmp    c0021178 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021166:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c002116b:	40                   	inc    eax
c002116c:	a3 80 24 03 c0       	mov    ds:0xc0032480,eax
c0021171:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021178:	81 c4 6c 03 00 00    	add    esp,0x36c
c002117e:	c3                   	ret    
c002117f:	90                   	nop

c0021180 <FAT::getFileFirstSector(char const*)>:
c0021180:	53                   	push   ebx
c0021181:	83 ec 28             	sub    esp,0x28
c0021184:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021193:	e8 92 e7 fe ff       	call   c000f92a <malloc>
c0021198:	83 c4 10             	add    esp,0x10
c002119b:	89 c3                	mov    ebx,eax
c002119d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00211a2:	83 ec 04             	sub    esp,0x4
c00211a5:	50                   	push   eax
c00211a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211aa:	53                   	push   ebx
c00211ab:	e8 90 22 ff ff       	call   c0013440 <File::File(char const*, Process*)>
c00211b0:	83 c4 10             	add    esp,0x10
c00211b3:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211b7:	83 ec 08             	sub    esp,0x8
c00211ba:	6a 01                	push   0x1
c00211bc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211c0:	e8 df 22 ff ff       	call   c00134a4 <File::open(FileOpenMode)>
c00211c5:	83 c4 10             	add    esp,0x10
c00211c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ce:	83 c0 0c             	add    eax,0xc
c00211d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00211d3:	83 ec 0c             	sub    esp,0xc
c00211d6:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211da:	52                   	push   edx
c00211db:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211df:	52                   	push   edx
c00211e0:	6a 00                	push   0x0
c00211e2:	6a 04                	push   0x4
c00211e4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00211e8:	ff d0                	call   eax
c00211ea:	83 c4 20             	add    esp,0x20
c00211ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211f1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00211f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211ff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021202:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021205:	83 ec 04             	sub    esp,0x4
c0021208:	52                   	push   edx
c0021209:	50                   	push   eax
c002120a:	68 5f d2 02 c0       	push   0xc002d25f
c002120f:	e8 cd 1c ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0021214:	83 c4 10             	add    esp,0x10
c0021217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002121b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c002121e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021221:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021225:	83 ec 0c             	sub    esp,0xc
c0021228:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002122c:	e8 d1 22 ff ff       	call   c0013502 <File::close()>
c0021231:	83 c4 10             	add    esp,0x10
c0021234:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021238:	ba 00 00 00 00       	mov    edx,0x0
c002123d:	83 c4 28             	add    esp,0x28
c0021240:	5b                   	pop    ebx
c0021241:	c3                   	ret    

c0021242 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021242:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0021248:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0021250:	74 0a                	je     c002125c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0021252:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c002125a:	75 0a                	jne    c0021266 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c002125c:	b8 04 00 00 00       	mov    eax,0x4
c0021261:	e9 db 00 00 00       	jmp    c0021341 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0021266:	83 ec 08             	sub    esp,0x8
c0021269:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021270:	50                   	push   eax
c0021271:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0021278:	e8 94 4e fe ff       	call   c0006111 <f_readdir>
c002127d:	83 c4 10             	add    esp,0x10
c0021280:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0021287:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c002128d:	83 ec 0c             	sub    esp,0xc
c0021290:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021297:	83 c0 1a             	add    eax,0x1a
c002129a:	50                   	push   eax
c002129b:	e8 18 f5 fd ff       	call   c00007b8 <strlen>
c00212a0:	83 c4 10             	add    esp,0x10
c00212a3:	ba 00 00 00 00       	mov    edx,0x0
c00212a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212ac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212b0:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00212b7:	0f b6 c0             	movzx  eax,al
c00212ba:	83 e0 10             	and    eax,0x10
c00212bd:	74 07                	je     c00212c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00212bf:	b8 02 00 00 00       	mov    eax,0x2
c00212c4:	eb 05                	jmp    c00212cb <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00212c6:	b8 01 00 00 00       	mov    eax,0x1
c00212cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212cf:	83 ec 08             	sub    esp,0x8
c00212d2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212d9:	83 c0 1a             	add    eax,0x1a
c00212dc:	50                   	push   eax
c00212dd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212e1:	83 c0 10             	add    eax,0x10
c00212e4:	50                   	push   eax
c00212e5:	e8 6e f5 fd ff       	call   c0000858 <strcpy>
c00212ea:	83 c4 10             	add    esp,0x10
c00212ed:	83 ec 04             	sub    esp,0x4
c00212f0:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00212f7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212fb:	50                   	push   eax
c00212fc:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0021303:	e8 60 f4 fd ff       	call   c0000768 <memcpy>
c0021308:	83 c4 10             	add    esp,0x10
c002130b:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0021312:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021318:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002131f:	84 c0                	test   al,al
c0021321:	75 07                	jne    c002132a <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0021323:	b8 07 00 00 00       	mov    eax,0x7
c0021328:	eb 17                	jmp    c0021341 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002132a:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0021331:	85 c0                	test   eax,eax
c0021333:	75 07                	jne    c002133c <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0021335:	b8 00 00 00 00       	mov    eax,0x0
c002133a:	eb 05                	jmp    c0021341 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c002133c:	b8 01 00 00 00       	mov    eax,0x1
c0021341:	81 c4 3c 02 00 00    	add    esp,0x23c
c0021347:	c3                   	ret    

c0021348 <FAT::read(void*, unsigned long, void*, int*)>:
c0021348:	83 ec 1c             	sub    esp,0x1c
c002134b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021350:	74 07                	je     c0021359 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021352:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021357:	75 07                	jne    c0021360 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021359:	b8 04 00 00 00       	mov    eax,0x4
c002135e:	eb 3d                	jmp    c002139d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021360:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021364:	50                   	push   eax
c0021365:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021369:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002136d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021371:	e8 7b 40 fe ff       	call   c00053f1 <f_read>
c0021376:	83 c4 10             	add    esp,0x10
c0021379:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002137d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021381:	89 c2                	mov    edx,eax
c0021383:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021387:	89 10                	mov    DWORD PTR [eax],edx
c0021389:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002138d:	85 c0                	test   eax,eax
c002138f:	75 07                	jne    c0021398 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0021391:	b8 00 00 00 00       	mov    eax,0x0
c0021396:	eb 05                	jmp    c002139d <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021398:	b8 01 00 00 00       	mov    eax,0x1
c002139d:	83 c4 1c             	add    esp,0x1c
c00213a0:	c3                   	ret    
c00213a1:	90                   	nop

c00213a2 <FAT::write(void*, unsigned long, void*, int*)>:
c00213a2:	83 ec 1c             	sub    esp,0x1c
c00213a5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213aa:	74 07                	je     c00213b3 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00213ac:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213b1:	75 07                	jne    c00213ba <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00213b3:	b8 04 00 00 00       	mov    eax,0x4
c00213b8:	eb 3d                	jmp    c00213f7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213ba:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213be:	50                   	push   eax
c00213bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213c7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213cb:	e8 a1 42 fe ff       	call   c0005671 <f_write>
c00213d0:	83 c4 10             	add    esp,0x10
c00213d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213db:	89 c2                	mov    edx,eax
c00213dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213e1:	89 10                	mov    DWORD PTR [eax],edx
c00213e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213e7:	85 c0                	test   eax,eax
c00213e9:	75 07                	jne    c00213f2 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00213eb:	b8 00 00 00 00       	mov    eax,0x0
c00213f0:	eb 05                	jmp    c00213f7 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213f2:	b8 01 00 00 00       	mov    eax,0x1
c00213f7:	83 c4 1c             	add    esp,0x1c
c00213fa:	c3                   	ret    
c00213fb:	90                   	nop

c00213fc <FAT::close(void*)>:
c00213fc:	83 ec 1c             	sub    esp,0x1c
c00213ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021404:	75 07                	jne    c002140d <FAT::close(void*)+0x11>
c0021406:	b8 04 00 00 00       	mov    eax,0x4
c002140b:	eb 36                	jmp    c0021443 <FAT::close(void*)+0x47>
c002140d:	83 ec 0c             	sub    esp,0xc
c0021410:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021414:	e8 ee 46 fe ff       	call   c0005b07 <f_close>
c0021419:	83 c4 10             	add    esp,0x10
c002141c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021420:	83 ec 0c             	sub    esp,0xc
c0021423:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021427:	e8 0e e5 fe ff       	call   c000f93a <free>
c002142c:	83 c4 10             	add    esp,0x10
c002142f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021433:	85 c0                	test   eax,eax
c0021435:	75 07                	jne    c002143e <FAT::close(void*)+0x42>
c0021437:	b8 00 00 00 00       	mov    eax,0x0
c002143c:	eb 05                	jmp    c0021443 <FAT::close(void*)+0x47>
c002143e:	b8 01 00 00 00       	mov    eax,0x1
c0021443:	83 c4 1c             	add    esp,0x1c
c0021446:	c3                   	ret    
c0021447:	90                   	nop

c0021448 <FAT::closeDir(void*)>:
c0021448:	83 ec 1c             	sub    esp,0x1c
c002144b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021450:	75 07                	jne    c0021459 <FAT::closeDir(void*)+0x11>
c0021452:	b8 04 00 00 00       	mov    eax,0x4
c0021457:	eb 36                	jmp    c002148f <FAT::closeDir(void*)+0x47>
c0021459:	83 ec 0c             	sub    esp,0xc
c002145c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021460:	e8 8a 4c fe ff       	call   c00060ef <f_closedir>
c0021465:	83 c4 10             	add    esp,0x10
c0021468:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002146c:	83 ec 0c             	sub    esp,0xc
c002146f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021473:	e8 c2 e4 fe ff       	call   c000f93a <free>
c0021478:	83 c4 10             	add    esp,0x10
c002147b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002147f:	85 c0                	test   eax,eax
c0021481:	75 07                	jne    c002148a <FAT::closeDir(void*)+0x42>
c0021483:	b8 00 00 00 00       	mov    eax,0x0
c0021488:	eb 05                	jmp    c002148f <FAT::closeDir(void*)+0x47>
c002148a:	b8 01 00 00 00       	mov    eax,0x1
c002148f:	83 c4 1c             	add    esp,0x1c
c0021492:	c3                   	ret    
c0021493:	90                   	nop

c0021494 <FAT::seek(void*, unsigned long long)>:
c0021494:	83 ec 2c             	sub    esp,0x2c
c0021497:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002149b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002149f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00214a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214a7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00214ac:	75 07                	jne    c00214b5 <FAT::seek(void*, unsigned long long)+0x21>
c00214ae:	b8 04 00 00 00       	mov    eax,0x4
c00214b3:	eb 2f                	jmp    c00214e4 <FAT::seek(void*, unsigned long long)+0x50>
c00214b5:	83 ec 04             	sub    esp,0x4
c00214b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214c0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214c4:	e8 6d 46 fe ff       	call   c0005b36 <f_lseek>
c00214c9:	83 c4 10             	add    esp,0x10
c00214cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00214d4:	85 c0                	test   eax,eax
c00214d6:	75 07                	jne    c00214df <FAT::seek(void*, unsigned long long)+0x4b>
c00214d8:	b8 00 00 00 00       	mov    eax,0x0
c00214dd:	eb 05                	jmp    c00214e4 <FAT::seek(void*, unsigned long long)+0x50>
c00214df:	b8 01 00 00 00       	mov    eax,0x1
c00214e4:	83 c4 2c             	add    esp,0x2c
c00214e7:	c3                   	ret    

c00214e8 <fatWrapperReadDisk>:
c00214e8:	83 ec 1c             	sub    esp,0x1c
c00214eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00214f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00214f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00214fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00214fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021502:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021507:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c002150e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021512:	83 ec 0c             	sub    esp,0xc
c0021515:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021519:	52                   	push   edx
c002151a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002151e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021522:	50                   	push   eax
c0021523:	e8 44 53 ff ff       	call   c001686c <LogicalDisk::read(unsigned long long, int, void*)>
c0021528:	83 c4 20             	add    esp,0x20
c002152b:	83 c4 1c             	add    esp,0x1c
c002152e:	c3                   	ret    

c002152f <fatWrapperWriteDisk>:
c002152f:	83 ec 1c             	sub    esp,0x1c
c0021532:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021536:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002153a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002153e:	89 04 24             	mov    DWORD PTR [esp],eax
c0021541:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021545:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021549:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002154e:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0021555:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021559:	83 ec 0c             	sub    esp,0xc
c002155c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021560:	52                   	push   edx
c0021561:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021565:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021569:	50                   	push   eax
c002156a:	e8 69 53 ff ff       	call   c00168d8 <LogicalDisk::write(unsigned long long, int, void*)>
c002156f:	83 c4 20             	add    esp,0x20
c0021572:	83 c4 1c             	add    esp,0x1c
c0021575:	c3                   	ret    

c0021576 <fatWrapperIoctl>:
c0021576:	53                   	push   ebx
c0021577:	83 ec 28             	sub    esp,0x28
c002157a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002157e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021582:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021586:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002158a:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c002158f:	75 31                	jne    c00215c2 <fatWrapperIoctl+0x4c>
c0021591:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021595:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021599:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002159e:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c00215a5:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215ab:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215b5:	66 89 02             	mov    WORD PTR [edx],ax
c00215b8:	b8 00 00 00 00       	mov    eax,0x0
c00215bd:	e9 b2 00 00 00       	jmp    c0021674 <fatWrapperIoctl+0xfe>
c00215c2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00215c7:	75 6a                	jne    c0021633 <fatWrapperIoctl+0xbd>
c00215c9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215d1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215d6:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c00215dd:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215e3:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00215e9:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00215ef:	89 c8                	mov    eax,ecx
c00215f1:	89 da                	mov    edx,ebx
c00215f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00215f7:	c1 e0 0a             	shl    eax,0xa
c00215fa:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00215ff:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0021606:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002160c:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021612:	89 cb                	mov    ebx,ecx
c0021614:	c1 fb 1f             	sar    ebx,0x1f
c0021617:	53                   	push   ebx
c0021618:	51                   	push   ecx
c0021619:	52                   	push   edx
c002161a:	50                   	push   eax
c002161b:	e8 94 5b 00 00       	call   c00271b4 <__udivdi3>
c0021620:	83 c4 10             	add    esp,0x10
c0021623:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021627:	89 01                	mov    DWORD PTR [ecx],eax
c0021629:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002162c:	b8 00 00 00 00       	mov    eax,0x0
c0021631:	eb 41                	jmp    c0021674 <fatWrapperIoctl+0xfe>
c0021633:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021638:	75 07                	jne    c0021641 <fatWrapperIoctl+0xcb>
c002163a:	b8 00 00 00 00       	mov    eax,0x0
c002163f:	eb 33                	jmp    c0021674 <fatWrapperIoctl+0xfe>
c0021641:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021646:	75 19                	jne    c0021661 <fatWrapperIoctl+0xeb>
c0021648:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002164c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021650:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021654:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c002165a:	b8 00 00 00 00       	mov    eax,0x0
c002165f:	eb 13                	jmp    c0021674 <fatWrapperIoctl+0xfe>
c0021661:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021666:	75 07                	jne    c002166f <fatWrapperIoctl+0xf9>
c0021668:	b8 00 00 00 00       	mov    eax,0x0
c002166d:	eb 05                	jmp    c0021674 <fatWrapperIoctl+0xfe>
c002166f:	b8 04 00 00 00       	mov    eax,0x4
c0021674:	83 c4 28             	add    esp,0x28
c0021677:	5b                   	pop    ebx
c0021678:	c3                   	ret    
c0021679:	90                   	nop

c002167a <FAT::FAT()>:
c002167a:	83 ec 1c             	sub    esp,0x1c
c002167d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021681:	83 ec 0c             	sub    esp,0xc
c0021684:	50                   	push   eax
c0021685:	e8 62 1b ff ff       	call   c00131ec <Filesystem::Filesystem()>
c002168a:	83 c4 10             	add    esp,0x10
c002168d:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c0021692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021696:	89 10                	mov    DWORD PTR [eax],edx
c0021698:	c7 05 80 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032480,0x0
c00216a2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216aa:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00216af:	7f 15                	jg     c00216c6 <FAT::FAT()+0x4c>
c00216b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216b5:	c7 04 85 a0 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb60],0xffffffff
c00216c0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216c4:	eb e4                	jmp    c00216aa <FAT::FAT()+0x30>
c00216c6:	90                   	nop
c00216c7:	83 c4 1c             	add    esp,0x1c
c00216ca:	c3                   	ret    
c00216cb:	90                   	nop

c00216cc <FAT::fixFilepath(char*)>:
c00216cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216d0:	8a 00                	mov    al,BYTE PTR [eax]
c00216d2:	3c 40                	cmp    al,0x40
c00216d4:	7e 2c                	jle    c0021702 <FAT::fixFilepath(char*)+0x36>
c00216d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216da:	8a 00                	mov    al,BYTE PTR [eax]
c00216dc:	83 e8 41             	sub    eax,0x41
c00216df:	88 c2                	mov    dl,al
c00216e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216e5:	88 10                	mov    BYTE PTR [eax],dl
c00216e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216eb:	8a 00                	mov    al,BYTE PTR [eax]
c00216ed:	0f be c0             	movsx  eax,al
c00216f0:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c00216f7:	83 c0 30             	add    eax,0x30
c00216fa:	88 c2                	mov    dl,al
c00216fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021700:	88 10                	mov    BYTE PTR [eax],dl
c0021702:	90                   	nop
c0021703:	c3                   	ret    

c0021704 <FAT::open(char const*, void**, FileOpenMode)>:
c0021704:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002170a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021712:	74 0a                	je     c002171e <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021714:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002171c:	75 0a                	jne    c0021728 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002171e:	b8 04 00 00 00       	mov    eax,0x4
c0021723:	e9 fd 00 00 00       	jmp    c0021825 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021728:	83 ec 08             	sub    esp,0x8
c002172b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021732:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021736:	50                   	push   eax
c0021737:	e8 1c f1 fd ff       	call   c0000858 <strcpy>
c002173c:	83 c4 10             	add    esp,0x10
c002173f:	83 ec 08             	sub    esp,0x8
c0021742:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021746:	50                   	push   eax
c0021747:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002174e:	e8 79 ff ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002175e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021765:	83 e0 01             	and    eax,0x1
c0021768:	74 08                	je     c0021772 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c002176a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021772:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021779:	83 e0 04             	and    eax,0x4
c002177c:	74 10                	je     c002178e <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002177e:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021786:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002178e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021795:	83 e0 02             	and    eax,0x2
c0021798:	74 08                	je     c00217a2 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c002179a:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217a2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217a9:	83 e0 08             	and    eax,0x8
c00217ac:	74 08                	je     c00217b6 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00217ae:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217b6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217bd:	83 e0 10             	and    eax,0x10
c00217c0:	74 08                	je     c00217ca <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00217c2:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00217ca:	83 ec 0c             	sub    esp,0xc
c00217cd:	68 50 02 00 00       	push   0x250
c00217d2:	e8 53 e1 fe ff       	call   c000f92a <malloc>
c00217d7:	83 c4 10             	add    esp,0x10
c00217da:	89 c2                	mov    edx,eax
c00217dc:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217e3:	89 10                	mov    DWORD PTR [eax],edx
c00217e5:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00217ed:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00217f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00217f6:	83 ec 04             	sub    esp,0x4
c00217f9:	52                   	push   edx
c00217fa:	8d 54 24 10          	lea    edx,[esp+0x10]
c00217fe:	52                   	push   edx
c00217ff:	50                   	push   eax
c0021800:	e8 b0 37 fe ff       	call   c0004fb5 <f_open>
c0021805:	83 c4 10             	add    esp,0x10
c0021808:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002180f:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021817:	74 07                	je     c0021820 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021819:	b8 01 00 00 00       	mov    eax,0x1
c002181e:	eb 05                	jmp    c0021825 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021820:	b8 00 00 00 00       	mov    eax,0x0
c0021825:	81 c4 1c 01 00 00    	add    esp,0x11c
c002182b:	c3                   	ret    

c002182c <FAT::openDir(char const*, void**)>:
c002182c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021832:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002183a:	74 0a                	je     c0021846 <FAT::openDir(char const*, void**)+0x1a>
c002183c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021844:	75 07                	jne    c002184d <FAT::openDir(char const*, void**)+0x21>
c0021846:	b8 04 00 00 00       	mov    eax,0x4
c002184b:	eb 7d                	jmp    c00218ca <FAT::openDir(char const*, void**)+0x9e>
c002184d:	83 ec 08             	sub    esp,0x8
c0021850:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021857:	8d 44 24 18          	lea    eax,[esp+0x18]
c002185b:	50                   	push   eax
c002185c:	e8 f7 ef fd ff       	call   c0000858 <strcpy>
c0021861:	83 c4 10             	add    esp,0x10
c0021864:	83 ec 08             	sub    esp,0x8
c0021867:	8d 44 24 14          	lea    eax,[esp+0x14]
c002186b:	50                   	push   eax
c002186c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021873:	e8 54 fe ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021878:	83 c4 10             	add    esp,0x10
c002187b:	83 ec 0c             	sub    esp,0xc
c002187e:	6a 4c                	push   0x4c
c0021880:	e8 a5 e0 fe ff       	call   c000f92a <malloc>
c0021885:	83 c4 10             	add    esp,0x10
c0021888:	89 c2                	mov    edx,eax
c002188a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021891:	89 10                	mov    DWORD PTR [eax],edx
c0021893:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002189a:	8b 00                	mov    eax,DWORD PTR [eax]
c002189c:	83 ec 08             	sub    esp,0x8
c002189f:	8d 54 24 14          	lea    edx,[esp+0x14]
c00218a3:	52                   	push   edx
c00218a4:	50                   	push   eax
c00218a5:	e8 43 47 fe ff       	call   c0005fed <f_opendir>
c00218aa:	83 c4 10             	add    esp,0x10
c00218ad:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218b4:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00218bc:	74 07                	je     c00218c5 <FAT::openDir(char const*, void**)+0x99>
c00218be:	b8 01 00 00 00       	mov    eax,0x1
c00218c3:	eb 05                	jmp    c00218ca <FAT::openDir(char const*, void**)+0x9e>
c00218c5:	b8 00 00 00 00       	mov    eax,0x0
c00218ca:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218d0:	c3                   	ret    
c00218d1:	90                   	nop

c00218d2 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00218d2:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00218d8:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00218e0:	75 0a                	jne    c00218ec <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00218e2:	b8 04 00 00 00       	mov    eax,0x4
c00218e7:	e9 c9 00 00 00       	jmp    c00219b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00218ec:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00218f4:	75 0a                	jne    c0021900 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00218f6:	b8 04 00 00 00       	mov    eax,0x4
c00218fb:	e9 b5 00 00 00       	jmp    c00219b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021900:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021908:	75 0a                	jne    c0021914 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002190a:	b8 04 00 00 00       	mov    eax,0x4
c002190f:	e9 a1 00 00 00       	jmp    c00219b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021914:	83 ec 08             	sub    esp,0x8
c0021917:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002191e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021925:	50                   	push   eax
c0021926:	e8 2d ef fd ff       	call   c0000858 <strcpy>
c002192b:	83 c4 10             	add    esp,0x10
c002192e:	83 ec 08             	sub    esp,0x8
c0021931:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021938:	50                   	push   eax
c0021939:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021940:	e8 87 fd ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021945:	83 c4 10             	add    esp,0x10
c0021948:	83 ec 08             	sub    esp,0x8
c002194b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002194f:	50                   	push   eax
c0021950:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021957:	50                   	push   eax
c0021958:	e8 4f 48 fe ff       	call   c00061ac <f_stat>
c002195d:	83 c4 10             	add    esp,0x10
c0021960:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021967:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002196e:	85 c0                	test   eax,eax
c0021970:	74 07                	je     c0021979 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021972:	83 f8 04             	cmp    eax,0x4
c0021975:	74 32                	je     c00219a9 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021977:	eb 37                	jmp    c00219b0 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021979:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002197d:	0f b6 c0             	movzx  eax,al
c0021980:	83 e0 10             	and    eax,0x10
c0021983:	0f 95 c2             	setne  dl
c0021986:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002198d:	88 10                	mov    BYTE PTR [eax],dl
c002198f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021992:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021996:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c002199d:	89 01                	mov    DWORD PTR [ecx],eax
c002199f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00219a2:	b8 00 00 00 00       	mov    eax,0x0
c00219a7:	eb 0c                	jmp    c00219b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219a9:	b8 02 00 00 00       	mov    eax,0x2
c00219ae:	eb 05                	jmp    c00219b5 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219b0:	b8 01 00 00 00       	mov    eax,0x1
c00219b5:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219bb:	c3                   	ret    

c00219bc <FAT::unlink(char const*)>:
c00219bc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219c2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219ca:	75 07                	jne    c00219d3 <FAT::unlink(char const*)+0x17>
c00219cc:	b8 04 00 00 00       	mov    eax,0x4
c00219d1:	eb 5c                	jmp    c0021a2f <FAT::unlink(char const*)+0x73>
c00219d3:	83 ec 08             	sub    esp,0x8
c00219d6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219dd:	8d 44 24 18          	lea    eax,[esp+0x18]
c00219e1:	50                   	push   eax
c00219e2:	e8 71 ee fd ff       	call   c0000858 <strcpy>
c00219e7:	83 c4 10             	add    esp,0x10
c00219ea:	83 ec 08             	sub    esp,0x8
c00219ed:	8d 44 24 14          	lea    eax,[esp+0x14]
c00219f1:	50                   	push   eax
c00219f2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219f9:	e8 ce fc ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c00219fe:	83 c4 10             	add    esp,0x10
c0021a01:	83 ec 0c             	sub    esp,0xc
c0021a04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a08:	50                   	push   eax
c0021a09:	e8 f0 4a fe ff       	call   c00064fe <f_unlink>
c0021a0e:	83 c4 10             	add    esp,0x10
c0021a11:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a18:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a1f:	85 c0                	test   eax,eax
c0021a21:	75 07                	jne    c0021a2a <FAT::unlink(char const*)+0x6e>
c0021a23:	b8 00 00 00 00       	mov    eax,0x0
c0021a28:	eb 05                	jmp    c0021a2f <FAT::unlink(char const*)+0x73>
c0021a2a:	b8 01 00 00 00       	mov    eax,0x1
c0021a2f:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a35:	c3                   	ret    

c0021a36 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a36:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a3c:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a43:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a4a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a4e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a52:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021a5a:	75 0a                	jne    c0021a66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021a5c:	b8 04 00 00 00       	mov    eax,0x4
c0021a61:	e9 1c 01 00 00       	jmp    c0021b82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a66:	83 ec 08             	sub    esp,0x8
c0021a69:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a70:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021a74:	50                   	push   eax
c0021a75:	e8 de ed fd ff       	call   c0000858 <strcpy>
c0021a7a:	83 c4 10             	add    esp,0x10
c0021a7d:	83 ec 08             	sub    esp,0x8
c0021a80:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021a84:	50                   	push   eax
c0021a85:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a8c:	e8 3b fc ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021a91:	83 c4 10             	add    esp,0x10
c0021a94:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021a9c:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021aa4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021aa9:	83 e0 01             	and    eax,0x1
c0021aac:	74 08                	je     c0021ab6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021aae:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021ab6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021abb:	83 e0 02             	and    eax,0x2
c0021abe:	74 08                	je     c0021ac8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021ac0:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021ac8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021acd:	83 e0 04             	and    eax,0x4
c0021ad0:	74 08                	je     c0021ada <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021ad2:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021ada:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021adf:	83 e0 08             	and    eax,0x8
c0021ae2:	74 08                	je     c0021aec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021ae4:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021aec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021af1:	83 e0 01             	and    eax,0x1
c0021af4:	74 08                	je     c0021afe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021af6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021afe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b03:	83 e0 02             	and    eax,0x2
c0021b06:	74 08                	je     c0021b10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021b08:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b10:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b15:	83 e0 04             	and    eax,0x4
c0021b18:	74 08                	je     c0021b22 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b1a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b22:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b27:	83 e0 08             	and    eax,0x8
c0021b2a:	74 08                	je     c0021b34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b2c:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b34:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b3b:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b42:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b4a:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b52:	83 ec 04             	sub    esp,0x4
c0021b55:	52                   	push   edx
c0021b56:	50                   	push   eax
c0021b57:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b5b:	50                   	push   eax
c0021b5c:	e8 3f 50 fe ff       	call   c0006ba0 <f_chmod>
c0021b61:	83 c4 10             	add    esp,0x10
c0021b64:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021b6b:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021b72:	85 c0                	test   eax,eax
c0021b74:	75 07                	jne    c0021b7d <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021b76:	b8 00 00 00 00       	mov    eax,0x0
c0021b7b:	eb 05                	jmp    c0021b82 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021b7d:	b8 01 00 00 00       	mov    eax,0x1
c0021b82:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021b88:	c3                   	ret    
c0021b89:	90                   	nop

c0021b8a <FAT::rename(char const*, char const*)>:
c0021b8a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021b90:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021b98:	74 0a                	je     c0021ba4 <FAT::rename(char const*, char const*)+0x1a>
c0021b9a:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021ba2:	75 0a                	jne    c0021bae <FAT::rename(char const*, char const*)+0x24>
c0021ba4:	b8 04 00 00 00       	mov    eax,0x4
c0021ba9:	e9 98 00 00 00       	jmp    c0021c46 <FAT::rename(char const*, char const*)+0xbc>
c0021bae:	83 ec 08             	sub    esp,0x8
c0021bb1:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bb8:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021bbf:	50                   	push   eax
c0021bc0:	e8 93 ec fd ff       	call   c0000858 <strcpy>
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	83 ec 08             	sub    esp,0x8
c0021bcb:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021bd2:	50                   	push   eax
c0021bd3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021bda:	e8 ed fa ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021bdf:	83 c4 10             	add    esp,0x10
c0021be2:	83 ec 08             	sub    esp,0x8
c0021be5:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021bec:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bf0:	50                   	push   eax
c0021bf1:	e8 62 ec fd ff       	call   c0000858 <strcpy>
c0021bf6:	83 c4 10             	add    esp,0x10
c0021bf9:	83 ec 08             	sub    esp,0x8
c0021bfc:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c00:	50                   	push   eax
c0021c01:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c08:	e8 bf fa ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021c0d:	83 c4 10             	add    esp,0x10
c0021c10:	83 ec 08             	sub    esp,0x8
c0021c13:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c17:	50                   	push   eax
c0021c18:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c1f:	50                   	push   eax
c0021c20:	e8 88 4c fe ff       	call   c00068ad <f_rename>
c0021c25:	83 c4 10             	add    esp,0x10
c0021c28:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c2f:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c36:	85 c0                	test   eax,eax
c0021c38:	75 07                	jne    c0021c41 <FAT::rename(char const*, char const*)+0xb7>
c0021c3a:	b8 00 00 00 00       	mov    eax,0x0
c0021c3f:	eb 05                	jmp    c0021c46 <FAT::rename(char const*, char const*)+0xbc>
c0021c41:	b8 01 00 00 00       	mov    eax,0x1
c0021c46:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c4c:	c3                   	ret    
c0021c4d:	90                   	nop

c0021c4e <FAT::mkdir(char const*)>:
c0021c4e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c54:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c5c:	75 07                	jne    c0021c65 <FAT::mkdir(char const*)+0x17>
c0021c5e:	b8 04 00 00 00       	mov    eax,0x4
c0021c63:	eb 5c                	jmp    c0021cc1 <FAT::mkdir(char const*)+0x73>
c0021c65:	83 ec 08             	sub    esp,0x8
c0021c68:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c73:	50                   	push   eax
c0021c74:	e8 df eb fd ff       	call   c0000858 <strcpy>
c0021c79:	83 c4 10             	add    esp,0x10
c0021c7c:	83 ec 08             	sub    esp,0x8
c0021c7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c83:	50                   	push   eax
c0021c84:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c8b:	e8 3c fa ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021c90:	83 c4 10             	add    esp,0x10
c0021c93:	83 ec 0c             	sub    esp,0xc
c0021c96:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c9a:	50                   	push   eax
c0021c9b:	e8 e1 49 fe ff       	call   c0006681 <f_mkdir>
c0021ca0:	83 c4 10             	add    esp,0x10
c0021ca3:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021caa:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021cb1:	85 c0                	test   eax,eax
c0021cb3:	75 07                	jne    c0021cbc <FAT::mkdir(char const*)+0x6e>
c0021cb5:	b8 00 00 00 00       	mov    eax,0x0
c0021cba:	eb 05                	jmp    c0021cc1 <FAT::mkdir(char const*)+0x73>
c0021cbc:	b8 01 00 00 00       	mov    eax,0x1
c0021cc1:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021cc7:	c3                   	ret    

c0021cc8 <FAT::exists(char const*)>:
c0021cc8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021cce:	83 ec 08             	sub    esp,0x8
c0021cd1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021cdc:	50                   	push   eax
c0021cdd:	e8 76 eb fd ff       	call   c0000858 <strcpy>
c0021ce2:	83 c4 10             	add    esp,0x10
c0021ce5:	83 ec 08             	sub    esp,0x8
c0021ce8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021cec:	50                   	push   eax
c0021ced:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021cf4:	e8 d3 f9 ff ff       	call   c00216cc <FAT::fixFilepath(char*)>
c0021cf9:	83 c4 10             	add    esp,0x10
c0021cfc:	83 ec 08             	sub    esp,0x8
c0021cff:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021d06:	50                   	push   eax
c0021d07:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d0b:	50                   	push   eax
c0021d0c:	e8 9b 44 fe ff       	call   c00061ac <f_stat>
c0021d11:	83 c4 10             	add    esp,0x10
c0021d14:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d1b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d22:	85 c0                	test   eax,eax
c0021d24:	75 04                	jne    c0021d2a <FAT::exists(char const*)+0x62>
c0021d26:	b0 01                	mov    al,0x1
c0021d28:	eb 02                	jmp    c0021d2c <FAT::exists(char const*)+0x64>
c0021d2a:	b0 00                	mov    al,0x0
c0021d2c:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d32:	c3                   	ret    
c0021d33:	90                   	nop

c0021d34 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d34:	b8 08 00 00 00       	mov    eax,0x8
c0021d39:	c3                   	ret    

c0021d3a <ISO9660::seek(void*, unsigned long long)>:
c0021d3a:	53                   	push   ebx
c0021d3b:	b8 04 00 00 00       	mov    eax,0x4
c0021d40:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d4c:	85 d2                	test   edx,edx
c0021d4e:	74 17                	je     c0021d67 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d50:	89 c8                	mov    eax,ecx
c0021d52:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d55:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d58:	b8 01 00 00 00       	mov    eax,0x1
c0021d5d:	73 08                	jae    c0021d67 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d5f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021d62:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021d65:	31 c0                	xor    eax,eax
c0021d67:	5b                   	pop    ebx
c0021d68:	c3                   	ret    
c0021d69:	90                   	nop

c0021d6a <ISO9660::tell(void*, unsigned long long*)>:
c0021d6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d72:	85 d2                	test   edx,edx
c0021d74:	74 12                	je     c0021d88 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d76:	85 c0                	test   eax,eax
c0021d78:	74 0e                	je     c0021d88 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021d7a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021d7d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021d80:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021d83:	89 10                	mov    DWORD PTR [eax],edx
c0021d85:	31 c0                	xor    eax,eax
c0021d87:	c3                   	ret    
c0021d88:	b8 04 00 00 00       	mov    eax,0x4
c0021d8d:	c3                   	ret    

c0021d8e <ISO9660::getName()>:
c0021d8e:	b8 fc d2 02 c0       	mov    eax,0xc002d2fc
c0021d93:	c3                   	ret    

c0021d94 <ISO9660::stat(void*, unsigned long long*)>:
c0021d94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d9c:	85 d2                	test   edx,edx
c0021d9e:	74 12                	je     c0021db2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021da0:	85 c0                	test   eax,eax
c0021da2:	74 0e                	je     c0021db2 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021da4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021da7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021daa:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021dad:	89 10                	mov    DWORD PTR [eax],edx
c0021daf:	31 c0                	xor    eax,eax
c0021db1:	c3                   	ret    
c0021db2:	b8 04 00 00 00       	mov    eax,0x4
c0021db7:	c3                   	ret    

c0021db8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021db8:	b8 01 00 00 00       	mov    eax,0x1
c0021dbd:	c3                   	ret    

c0021dbe <ISO9660::unlink(char const*)>:
c0021dbe:	b8 01 00 00 00       	mov    eax,0x1
c0021dc3:	c3                   	ret    

c0021dc4 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021dc4:	b8 01 00 00 00       	mov    eax,0x1
c0021dc9:	c3                   	ret    

c0021dca <ISO9660::rename(char const*, char const*)>:
c0021dca:	b8 01 00 00 00       	mov    eax,0x1
c0021dcf:	c3                   	ret    

c0021dd0 <ISO9660::mkdir(char const*)>:
c0021dd0:	b8 01 00 00 00       	mov    eax,0x1
c0021dd5:	c3                   	ret    

c0021dd6 <ISO9660::close(void*)>:
c0021dd6:	83 ec 0c             	sub    esp,0xc
c0021dd9:	b8 04 00 00 00       	mov    eax,0x4
c0021dde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021de2:	85 d2                	test   edx,edx
c0021de4:	74 0e                	je     c0021df4 <ISO9660::close(void*)+0x1e>
c0021de6:	83 ec 0c             	sub    esp,0xc
c0021de9:	52                   	push   edx
c0021dea:	e8 4b db fe ff       	call   c000f93a <free>
c0021def:	83 c4 10             	add    esp,0x10
c0021df2:	31 c0                	xor    eax,eax
c0021df4:	83 c4 0c             	add    esp,0xc
c0021df7:	c3                   	ret    

c0021df8 <ISO9660::closeDir(void*)>:
c0021df8:	83 ec 0c             	sub    esp,0xc
c0021dfb:	b8 04 00 00 00       	mov    eax,0x4
c0021e00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e04:	85 d2                	test   edx,edx
c0021e06:	74 0e                	je     c0021e16 <ISO9660::closeDir(void*)+0x1e>
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	52                   	push   edx
c0021e0c:	e8 29 db fe ff       	call   c000f93a <free>
c0021e11:	83 c4 10             	add    esp,0x10
c0021e14:	31 c0                	xor    eax,eax
c0021e16:	83 c4 0c             	add    esp,0xc
c0021e19:	c3                   	ret    

c0021e1a <ISO9660::~ISO9660()>:
c0021e1a:	83 ec 0c             	sub    esp,0xc
c0021e1d:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c0021e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e26:	89 10                	mov    DWORD PTR [eax],edx
c0021e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e2c:	83 ec 0c             	sub    esp,0xc
c0021e2f:	50                   	push   eax
c0021e30:	e8 db 13 ff ff       	call   c0013210 <Filesystem::~Filesystem()>
c0021e35:	83 c4 10             	add    esp,0x10
c0021e38:	90                   	nop
c0021e39:	83 c4 0c             	add    esp,0xc
c0021e3c:	c3                   	ret    
c0021e3d:	90                   	nop

c0021e3e <ISO9660::~ISO9660()>:
c0021e3e:	83 ec 0c             	sub    esp,0xc
c0021e41:	83 ec 0c             	sub    esp,0xc
c0021e44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e48:	e8 cd ff ff ff       	call   c0021e1a <ISO9660::~ISO9660()>
c0021e4d:	83 c4 10             	add    esp,0x10
c0021e50:	83 ec 08             	sub    esp,0x8
c0021e53:	6a 08                	push   0x8
c0021e55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e59:	e8 a3 0f ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0021e5e:	83 c4 10             	add    esp,0x10
c0021e61:	83 c4 0c             	add    esp,0xc
c0021e64:	c3                   	ret    

c0021e65 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021e65:	55                   	push   ebp
c0021e66:	31 c9                	xor    ecx,ecx
c0021e68:	57                   	push   edi
c0021e69:	56                   	push   esi
c0021e6a:	53                   	push   ebx
c0021e6b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021e6f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021e73:	89 eb                	mov    ebx,ebp
c0021e75:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021e79:	39 ce                	cmp    esi,ecx
c0021e7b:	7e 17                	jle    c0021e94 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021e7d:	31 d2                	xor    edx,edx
c0021e7f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021e83:	7d 13                	jge    c0021e98 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021e85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021e89:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e8c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021e8f:	75 0d                	jne    c0021e9e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021e91:	42                   	inc    edx
c0021e92:	eb eb                	jmp    c0021e7f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021e94:	31 c0                	xor    eax,eax
c0021e96:	eb 0a                	jmp    c0021ea2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e98:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021e9c:	eb 04                	jmp    c0021ea2 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021e9e:	41                   	inc    ecx
c0021e9f:	43                   	inc    ebx
c0021ea0:	eb d7                	jmp    c0021e79 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021ea2:	5b                   	pop    ebx
c0021ea3:	5e                   	pop    esi
c0021ea4:	5f                   	pop    edi
c0021ea5:	5d                   	pop    ebp
c0021ea6:	c3                   	ret    

c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021ea7:	56                   	push   esi
c0021ea8:	53                   	push   ebx
c0021ea9:	52                   	push   edx
c0021eaa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021eae:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0021eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021eb6:	39 0d 80 25 03 c0    	cmp    DWORD PTR ds:0xc0032580,ecx
c0021ebc:	75 08                	jne    c0021ec6 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0021ebe:	38 05 d4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3d4,al
c0021ec4:	74 2b                	je     c0021ef1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021ec6:	83 ec 0c             	sub    esp,0xc
c0021ec9:	a2 d4 e3 02 c0       	mov    ds:0xc002e3d4,al
c0021ece:	68 a0 25 03 c0       	push   0xc00325a0
c0021ed3:	0f be c0             	movsx  eax,al
c0021ed6:	6a 01                	push   0x1
c0021ed8:	89 0d 80 25 03 c0    	mov    DWORD PTR ds:0xc0032580,ecx
c0021ede:	31 db                	xor    ebx,ebx
c0021ee0:	53                   	push   ebx
c0021ee1:	51                   	push   ecx
c0021ee2:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c0021ee9:	e8 7e 49 ff ff       	call   c001686c <LogicalDisk::read(unsigned long long, int, void*)>
c0021eee:	83 c4 20             	add    esp,0x20
c0021ef1:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021ef9:	c7 44 24 14 a0 25 03 c0 	mov    DWORD PTR [esp+0x14],0xc00325a0
c0021f01:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021f05:	58                   	pop    eax
c0021f06:	5b                   	pop    ebx
c0021f07:	5e                   	pop    esi
c0021f08:	e9 5b e8 fd ff       	jmp    c0000768 <memcpy>
c0021f0d:	90                   	nop

c0021f0e <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f0e:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f14:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f1b:	83 c0 41             	add    eax,0x41
c0021f1e:	0f be c0             	movsx  eax,al
c0021f21:	50                   	push   eax
c0021f22:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f26:	50                   	push   eax
c0021f27:	6a 10                	push   0x10
c0021f29:	e8 79 ff ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f2e:	83 c4 10             	add    esp,0x10
c0021f31:	31 c0                	xor    eax,eax
c0021f33:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f38:	75 1d                	jne    c0021f57 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f3a:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f3f:	75 16                	jne    c0021f57 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f41:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f46:	75 0f                	jne    c0021f57 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f48:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f4d:	75 08                	jne    c0021f57 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f4f:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f54:	0f 94 c0             	sete   al
c0021f57:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f5d:	c3                   	ret    

c0021f5e <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f5e:	55                   	push   ebp
c0021f5f:	57                   	push   edi
c0021f60:	56                   	push   esi
c0021f61:	53                   	push   ebx
c0021f62:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021f68:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021f6f:	85 ed                	test   ebp,ebp
c0021f71:	0f 84 d6 01 00 00    	je     c002214d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f77:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021f7f:	0f 84 c8 01 00 00    	je     c002214d <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f85:	b8 01 00 00 00       	mov    eax,0x1
c0021f8a:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021f8e:	0f 85 be 01 00 00    	jne    c0022152 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021f94:	31 d2                	xor    edx,edx
c0021f96:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021f9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021fa0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021fa3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021fa7:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021faa:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fb1:	01 f0                	add    eax,esi
c0021fb3:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021fb6:	11 fa                	adc    edx,edi
c0021fb8:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021fbc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021fc0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021fc4:	19 d1                	sbb    ecx,edx
c0021fc6:	72 0a                	jb     c0021fd2 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021fc8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fcc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021fd0:	eb 13                	jmp    c0021fe5 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021fd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021fd6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fda:	29 f0                	sub    eax,esi
c0021fdc:	19 fa                	sbb    edx,edi
c0021fde:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fe1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fe5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021fe8:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021feb:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021fef:	51                   	push   ecx
c0021ff0:	c1 e0 0b             	shl    eax,0xb
c0021ff3:	01 c6                	add    esi,eax
c0021ff5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ff9:	11 d7                	adc    edi,edx
c0021ffb:	50                   	push   eax
c0021ffc:	89 fa                	mov    edx,edi
c0021ffe:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022002:	89 f0                	mov    eax,esi
c0022004:	53                   	push   ebx
c0022005:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022009:	50                   	push   eax
c002200a:	e8 98 fe ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002200f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022013:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022016:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c002201a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022020:	83 c4 10             	add    esp,0x10
c0022023:	b8 00 08 00 00       	mov    eax,0x800
c0022028:	29 d0                	sub    eax,edx
c002202a:	39 c1                	cmp    ecx,eax
c002202c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0022030:	83 d9 00             	sbb    ecx,0x0
c0022033:	7d 1c                	jge    c0022051 <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0022035:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002203a:	75 12                	jne    c002204e <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c002203c:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022043:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022049:	e9 fb 00 00 00       	jmp    c0022149 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002204e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022051:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0022054:	31 d2                	xor    edx,edx
c0022056:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c002205a:	39 c2                	cmp    edx,eax
c002205c:	7d 14                	jge    c0022072 <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002205e:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0022065:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022069:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c002206c:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002206f:	42                   	inc    edx
c0022070:	eb e8                	jmp    c002205a <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c0022072:	89 c3                	mov    ebx,eax
c0022074:	85 c0                	test   eax,eax
c0022076:	79 02                	jns    c002207a <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0022078:	31 db                	xor    ebx,ebx
c002207a:	99                   	cdq    
c002207b:	01 c3                	add    ebx,eax
c002207d:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0022084:	01 c6                	add    esi,eax
c0022086:	11 d7                	adc    edi,edx
c0022088:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c002208c:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022090:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022093:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0022097:	29 c6                	sub    esi,eax
c0022099:	19 d7                	sbb    edi,edx
c002209b:	89 34 24             	mov    DWORD PTR [esp],esi
c002209e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00220a2:	b8 ff 07 00 00       	mov    eax,0x7ff
c00220a7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00220aa:	b8 00 00 00 00       	mov    eax,0x0
c00220af:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00220b3:	7d 3e                	jge    c00220f3 <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00220b5:	52                   	push   edx
c00220b6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220ba:	50                   	push   eax
c00220bb:	53                   	push   ebx
c00220bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220c4:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220c8:	50                   	push   eax
c00220c9:	e8 d9 fd ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220ce:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00220d6:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00220db:	81 c3 00 08 00 00    	add    ebx,0x800
c00220e1:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00220e9:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00220ee:	83 c4 10             	add    esp,0x10
c00220f1:	eb af                	jmp    c00220a2 <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00220f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220f7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00220fa:	74 32                	je     c002212e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c00220fc:	50                   	push   eax
c00220fd:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022101:	50                   	push   eax
c0022102:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022106:	50                   	push   eax
c0022107:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c002210b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002210f:	0f ac fe 0b          	shrd   esi,edi,0xb
c0022113:	56                   	push   esi
c0022114:	e8 8e fd ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022119:	83 c4 0c             	add    esp,0xc
c002211c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0022120:	8d 44 24 28          	lea    eax,[esp+0x28]
c0022124:	50                   	push   eax
c0022125:	53                   	push   ebx
c0022126:	e8 3d e6 fd ff       	call   c0000768 <memcpy>
c002212b:	83 c4 10             	add    esp,0x10
c002212e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022135:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022139:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002213d:	89 38                	mov    DWORD PTR [eax],edi
c002213f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022143:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022146:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022149:	31 c0                	xor    eax,eax
c002214b:	eb 05                	jmp    c0022152 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002214d:	b8 04 00 00 00       	mov    eax,0x4
c0022152:	81 c4 2c 08 00 00    	add    esp,0x82c
c0022158:	5b                   	pop    ebx
c0022159:	5e                   	pop    esi
c002215a:	5f                   	pop    edi
c002215b:	5d                   	pop    ebp
c002215c:	c3                   	ret    
c002215d:	90                   	nop

c002215e <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002215e:	55                   	push   ebp
c002215f:	57                   	push   edi
c0022160:	56                   	push   esi
c0022161:	53                   	push   ebx
c0022162:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0022168:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002216f:	85 f6                	test   esi,esi
c0022171:	0f 84 64 02 00 00    	je     c00223db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022177:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002217f:	0f 84 56 02 00 00    	je     c00223db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0022185:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0022188:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c002218b:	75 0a                	jne    c0022197 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c002218d:	b8 07 00 00 00       	mov    eax,0x7
c0022192:	e9 49 02 00 00       	jmp    c00223e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0022197:	50                   	push   eax
c0022198:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c002219c:	50                   	push   eax
c002219d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00221a4:	53                   	push   ebx
c00221a5:	8b 06                	mov    eax,DWORD PTR [esi]
c00221a7:	c1 e0 0b             	shl    eax,0xb
c00221aa:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00221ad:	c1 e8 0b             	shr    eax,0xb
c00221b0:	50                   	push   eax
c00221b1:	e8 f1 fc ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221b6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00221b9:	83 c4 10             	add    esp,0x10
c00221bc:	89 c1                	mov    ecx,eax
c00221be:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00221c1:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00221c7:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00221ca:	84 db                	test   bl,bl
c00221cc:	0f 85 90 00 00 00    	jne    c0022262 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00221d2:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00221d8:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00221de:	29 c7                	sub    edi,eax
c00221e0:	89 fb                	mov    ebx,edi
c00221e2:	c1 fb 1f             	sar    ebx,0x1f
c00221e5:	01 f8                	add    eax,edi
c00221e7:	11 da                	adc    edx,ebx
c00221e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00221ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00221f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00221f4:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c00221f7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00221fa:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00221fd:	89 04 24             	mov    DWORD PTR [esp],eax
c0022200:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022204:	89 d8                	mov    eax,ebx
c0022206:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0022209:	ba 00 00 00 00       	mov    edx,0x0
c002220e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022212:	b8 00 00 00 00       	mov    eax,0x0
c0022217:	73 0b                	jae    c0022224 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0022219:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002221c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022220:	29 f8                	sub    eax,edi
c0022222:	19 da                	sbb    edx,ebx
c0022224:	89 d3                	mov    ebx,edx
c0022226:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0022229:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c002222c:	09 c3                	or     ebx,eax
c002222e:	0f 84 59 ff ff ff    	je     c002218d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022234:	55                   	push   ebp
c0022235:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0022239:	50                   	push   eax
c002223a:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022241:	53                   	push   ebx
c0022242:	8b 06                	mov    eax,DWORD PTR [esi]
c0022244:	c1 e0 0b             	shl    eax,0xb
c0022247:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002224b:	c1 e8 0b             	shr    eax,0xb
c002224e:	50                   	push   eax
c002224f:	e8 53 fc ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022254:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0022257:	83 c4 10             	add    esp,0x10
c002225a:	25 ff 07 00 00       	and    eax,0x7ff
c002225f:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022262:	57                   	push   edi
c0022263:	6a 28                	push   0x28
c0022265:	6a 00                	push   0x0
c0022267:	8d 44 24 24          	lea    eax,[esp+0x24]
c002226b:	50                   	push   eax
c002226c:	e8 2b e5 fd ff       	call   c000079c <memset>
c0022271:	31 d2                	xor    edx,edx
c0022273:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0022276:	81 e7 ff 07 00 00    	and    edi,0x7ff
c002227c:	89 f8                	mov    eax,edi
c002227e:	83 c0 21             	add    eax,0x21
c0022281:	83 d2 00             	adc    edx,0x0
c0022284:	89 c7                	mov    edi,eax
c0022286:	89 d5                	mov    ebp,edx
c0022288:	83 c4 10             	add    esp,0x10
c002228b:	31 c9                	xor    ecx,ecx
c002228d:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0022294:	83 f9 28             	cmp    ecx,0x28
c0022297:	88 04 24             	mov    BYTE PTR [esp],al
c002229a:	0f 94 c2             	sete   dl
c002229d:	88 d0                	mov    al,dl
c002229f:	ba ff 07 00 00       	mov    edx,0x7ff
c00222a4:	39 fa                	cmp    edx,edi
c00222a6:	ba 00 00 00 00       	mov    edx,0x0
c00222ab:	19 ea                	sbb    edx,ebp
c00222ad:	0f 92 c2             	setb   dl
c00222b0:	09 c2                	or     edx,eax
c00222b2:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222b6:	0f 94 c0             	sete   al
c00222b9:	08 d0                	or     al,dl
c00222bb:	75 16                	jne    c00222d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222bd:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222c1:	74 10                	je     c00222d3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00222c3:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222c6:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222ca:	41                   	inc    ecx
c00222cb:	83 c7 01             	add    edi,0x1
c00222ce:	83 d5 00             	adc    ebp,0x0
c00222d1:	eb ba                	jmp    c002228d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00222d3:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00222da:	83 ec 0c             	sub    esp,0xc
c00222dd:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00222e1:	57                   	push   edi
c00222e2:	e8 d1 e4 fd ff       	call   c00007b8 <strlen>
c00222e7:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00222ef:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00222f3:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c00222fa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00222fd:	5a                   	pop    edx
c00222fe:	25 ff 07 00 00       	and    eax,0x7ff
c0022303:	01 c8                	add    eax,ecx
c0022305:	59                   	pop    ecx
c0022306:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c002230c:	83 e0 02             	and    eax,0x2
c002230f:	3c 01                	cmp    al,0x1
c0022311:	19 c0                	sbb    eax,eax
c0022313:	83 c0 02             	add    eax,0x2
c0022316:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002231a:	57                   	push   edi
c002231b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002231f:	50                   	push   eax
c0022320:	e8 33 e5 fd ff       	call   c0000858 <strcpy>
c0022325:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022329:	83 c4 10             	add    esp,0x10
c002232c:	84 c0                	test   al,al
c002232e:	75 21                	jne    c0022351 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0022330:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022338:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022340:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022348:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002234f:	eb 28                	jmp    c0022379 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0022351:	fe c8                	dec    al
c0022353:	75 24                	jne    c0022379 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0022355:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c002235d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022365:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002236d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0022374:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022379:	0f b6 fb             	movzx  edi,bl
c002237c:	31 db                	xor    ebx,ebx
c002237e:	50                   	push   eax
c002237f:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0022386:	8d 44 24 48          	lea    eax,[esp+0x48]
c002238a:	50                   	push   eax
c002238b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0022392:	e8 d1 e3 fd ff       	call   c0000768 <memcpy>
c0022397:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c002239e:	89 f9                	mov    ecx,edi
c00223a0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00223a6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00223a9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00223ac:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00223af:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00223b2:	83 c4 10             	add    esp,0x10
c00223b5:	39 c7                	cmp    edi,eax
c00223b7:	89 df                	mov    edi,ebx
c00223b9:	19 d7                	sbb    edi,edx
c00223bb:	72 10                	jb     c00223cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223bd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00223c4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00223cb:	eb 0a                	jmp    c00223d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00223cd:	29 c8                	sub    eax,ecx
c00223cf:	19 da                	sbb    edx,ebx
c00223d1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00223d4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00223d7:	31 c0                	xor    eax,eax
c00223d9:	eb 05                	jmp    c00223e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00223db:	b8 04 00 00 00       	mov    eax,0x4
c00223e0:	81 c4 5c 09 00 00    	add    esp,0x95c
c00223e6:	5b                   	pop    ebx
c00223e7:	5e                   	pop    esi
c00223e8:	5f                   	pop    edi
c00223e9:	5d                   	pop    ebp
c00223ea:	c3                   	ret    

c00223eb <readRoot(unsigned int*, unsigned int*, char)>:
c00223eb:	81 ec 40 08 00 00    	sub    esp,0x840
c00223f1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c00223f9:	50                   	push   eax
c00223fa:	8d 44 24 38          	lea    eax,[esp+0x38]
c00223fe:	50                   	push   eax
c00223ff:	6a 10                	push   0x10
c0022401:	e8 a1 fa ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022406:	83 c4 0c             	add    esp,0xc
c0022409:	6a 22                	push   0x22
c002240b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0022412:	50                   	push   eax
c0022413:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0022417:	50                   	push   eax
c0022418:	e8 4b e3 fd ff       	call   c0000768 <memcpy>
c002241d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022424:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022428:	89 10                	mov    DWORD PTR [eax],edx
c002242a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0022431:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022435:	89 10                	mov    DWORD PTR [eax],edx
c0022437:	b0 01                	mov    al,0x1
c0022439:	81 c4 4c 08 00 00    	add    esp,0x84c
c002243f:	c3                   	ret    

c0022440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022440:	55                   	push   ebp
c0022441:	57                   	push   edi
c0022442:	56                   	push   esi
c0022443:	53                   	push   ebx
c0022444:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002244a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022451:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022458:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002245c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022460:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022464:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022468:	75 03                	jne    c002246d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002246a:	83 c3 02             	add    ebx,0x2
c002246d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022470:	75 03                	jne    c0022475 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022472:	43                   	inc    ebx
c0022473:	eb f8                	jmp    c002246d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022475:	51                   	push   ecx
c0022476:	68 00 01 00 00       	push   0x100
c002247b:	6a 00                	push   0x0
c002247d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022481:	50                   	push   eax
c0022482:	e8 15 e3 fd ff       	call   c000079c <memset>
c0022487:	83 c4 10             	add    esp,0x10
c002248a:	31 d2                	xor    edx,edx
c002248c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002248f:	84 c0                	test   al,al
c0022491:	74 21                	je     c00224b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0022493:	3c 2f                	cmp    al,0x2f
c0022495:	75 0b                	jne    c00224a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0022497:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c002249b:	bd 01 00 00 00       	mov    ebp,0x1
c00224a0:	eb 14                	jmp    c00224b6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00224a2:	8d 48 9f             	lea    ecx,[eax-0x61]
c00224a5:	80 f9 19             	cmp    cl,0x19
c00224a8:	77 03                	ja     c00224ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224aa:	83 e8 20             	sub    eax,0x20
c00224ad:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00224b1:	42                   	inc    edx
c00224b2:	eb d8                	jmp    c002248c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00224b4:	31 ed                	xor    ebp,ebp
c00224b6:	83 ec 0c             	sub    esp,0xc
c00224b9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224c0:	e8 65 d4 fe ff       	call   c000f92a <malloc>
c00224c5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224cc:	89 c6                	mov    esi,eax
c00224ce:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224d4:	c1 ef 0b             	shr    edi,0xb
c00224d7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00224de:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00224e2:	83 c4 10             	add    esp,0x10
c00224e5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00224ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224ee:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c00224f5:	74 28                	je     c002251f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c00224f7:	52                   	push   edx
c00224f8:	57                   	push   edi
c00224f9:	50                   	push   eax
c00224fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00224fe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022505:	e8 9d f9 ff ff       	call   c0021ea7 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002250a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002250e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022515:	05 00 08 00 00       	add    eax,0x800
c002251a:	83 c4 10             	add    esp,0x10
c002251d:	eb cb                	jmp    c00224ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002251f:	83 ec 0c             	sub    esp,0xc
c0022522:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022526:	57                   	push   edi
c0022527:	e8 8c e2 fd ff       	call   c00007b8 <strlen>
c002252c:	50                   	push   eax
c002252d:	57                   	push   edi
c002252e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022535:	56                   	push   esi
c0022536:	e8 2a f9 ff ff       	call   c0021e65 <__memmem(unsigned char*, int, unsigned char*, int)>
c002253b:	83 c4 20             	add    esp,0x20
c002253e:	85 c0                	test   eax,eax
c0022540:	75 13                	jne    c0022555 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022542:	83 ec 0c             	sub    esp,0xc
c0022545:	56                   	push   esi
c0022546:	e8 ef d3 fe ff       	call   c000f93a <free>
c002254b:	83 c4 10             	add    esp,0x10
c002254e:	31 c0                	xor    eax,eax
c0022550:	e9 b3 00 00 00       	jmp    c0022608 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022555:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022559:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002255d:	c1 e7 08             	shl    edi,0x8
c0022560:	c1 e2 10             	shl    edx,0x10
c0022563:	09 d7                	or     edi,edx
c0022565:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022569:	09 d7                	or     edi,edx
c002256b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002256f:	c1 e2 18             	shl    edx,0x18
c0022572:	09 d7                	or     edi,edx
c0022574:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022578:	89 d1                	mov    ecx,edx
c002257a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002257e:	c1 e1 08             	shl    ecx,0x8
c0022581:	c1 e2 10             	shl    edx,0x10
c0022584:	09 ca                	or     edx,ecx
c0022586:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002258a:	09 ca                	or     edx,ecx
c002258c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0022590:	c1 e1 18             	shl    ecx,0x18
c0022593:	09 ca                	or     edx,ecx
c0022595:	89 e9                	mov    ecx,ebp
c0022597:	84 c9                	test   cl,cl
c0022599:	74 3c                	je     c00225d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c002259b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002259f:	83 ec 0c             	sub    esp,0xc
c00225a2:	56                   	push   esi
c00225a3:	e8 92 d3 fe ff       	call   c000f93a <free>
c00225a8:	83 c4 0c             	add    esp,0xc
c00225ab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225b2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225b7:	50                   	push   eax
c00225b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225bf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225ca:	52                   	push   edx
c00225cb:	57                   	push   edi
c00225cc:	53                   	push   ebx
c00225cd:	e8 6e fe ff ff       	call   c0022440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225d2:	83 c4 20             	add    esp,0x20
c00225d5:	eb 31                	jmp    c0022608 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225d7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00225da:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00225e1:	d0 e8                	shr    al,1
c00225e3:	89 3b                	mov    DWORD PTR [ebx],edi
c00225e5:	83 e0 01             	and    eax,0x1
c00225e8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00225ef:	83 ec 0c             	sub    esp,0xc
c00225f2:	89 13                	mov    DWORD PTR [ebx],edx
c00225f4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c00225fb:	89 03                	mov    DWORD PTR [ebx],eax
c00225fd:	56                   	push   esi
c00225fe:	e8 37 d3 fe ff       	call   c000f93a <free>
c0022603:	83 c4 10             	add    esp,0x10
c0022606:	b0 01                	mov    al,0x1
c0022608:	81 c4 1c 01 00 00    	add    esp,0x11c
c002260e:	5b                   	pop    ebx
c002260f:	5e                   	pop    esi
c0022610:	5f                   	pop    edi
c0022611:	5d                   	pop    ebp
c0022612:	c3                   	ret    

c0022613 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022613:	55                   	push   ebp
c0022614:	57                   	push   edi
c0022615:	56                   	push   esi
c0022616:	53                   	push   ebx
c0022617:	83 ec 20             	sub    esp,0x20
c002261a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002261e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022622:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022626:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002262e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022636:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002263b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022641:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022647:	57                   	push   edi
c0022648:	8d 44 24 14          	lea    eax,[esp+0x14]
c002264c:	50                   	push   eax
c002264d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022651:	50                   	push   eax
c0022652:	e8 94 fd ff ff       	call   c00223eb <readRoot(unsigned int*, unsigned int*, char)>
c0022657:	5a                   	pop    edx
c0022658:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002265c:	e8 57 e1 fd ff       	call   c00007b8 <strlen>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	83 f8 03             	cmp    eax,0x3
c0022667:	77 17                	ja     c0022680 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022669:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002266d:	89 03                	mov    DWORD PTR [ebx],eax
c002266f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022673:	89 06                	mov    DWORD PTR [esi],eax
c0022675:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002267c:	b0 01                	mov    al,0x1
c002267e:	eb 19                	jmp    c0022699 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022680:	50                   	push   eax
c0022681:	55                   	push   ebp
c0022682:	57                   	push   edi
c0022683:	56                   	push   esi
c0022684:	53                   	push   ebx
c0022685:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022689:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002268d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0022691:	e8 aa fd ff ff       	call   c0022440 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022696:	83 c4 20             	add    esp,0x20
c0022699:	83 c4 1c             	add    esp,0x1c
c002269c:	5b                   	pop    ebx
c002269d:	5e                   	pop    esi
c002269e:	5f                   	pop    edi
c002269f:	5d                   	pop    ebp
c00226a0:	c3                   	ret    
c00226a1:	90                   	nop

c00226a2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00226a2:	57                   	push   edi
c00226a3:	56                   	push   esi
c00226a4:	53                   	push   ebx
c00226a5:	83 ec 10             	sub    esp,0x10
c00226a8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00226ac:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226b0:	85 ff                	test   edi,edi
c00226b2:	0f 84 9d 00 00 00    	je     c0022755 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226b8:	85 f6                	test   esi,esi
c00226ba:	0f 84 95 00 00 00    	je     c0022755 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226c0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226c5:	74 17                	je     c00226de <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226c7:	83 ec 0c             	sub    esp,0xc
c00226ca:	68 17 d3 02 c0       	push   0xc002d317
c00226cf:	e8 0d 08 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00226d4:	83 c4 10             	add    esp,0x10
c00226d7:	b8 03 00 00 00       	mov    eax,0x3
c00226dc:	eb 7c                	jmp    c002275a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226de:	83 ec 0c             	sub    esp,0xc
c00226e1:	6a 1c                	push   0x1c
c00226e3:	e8 42 d2 fe ff       	call   c000f92a <malloc>
c00226e8:	89 07                	mov    DWORD PTR [edi],eax
c00226ea:	89 c3                	mov    ebx,eax
c00226ec:	58                   	pop    eax
c00226ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c00226f1:	50                   	push   eax
c00226f2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00226f5:	50                   	push   eax
c00226f6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226fa:	50                   	push   eax
c00226fb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226ff:	50                   	push   eax
c0022700:	56                   	push   esi
c0022701:	e8 0d ff ff ff       	call   c0022613 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022706:	83 c4 20             	add    esp,0x20
c0022709:	84 c0                	test   al,al
c002270b:	74 07                	je     c0022714 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002270d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022712:	74 0b                	je     c002271f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022714:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022718:	b8 01 00 00 00       	mov    eax,0x1
c002271d:	eb 3b                	jmp    c002275a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002271f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022723:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022727:	89 03                	mov    DWORD PTR [ebx],eax
c0022729:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022734:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002273b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022742:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022745:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002274c:	8a 06                	mov    al,BYTE PTR [esi]
c002274e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022751:	31 c0                	xor    eax,eax
c0022753:	eb 05                	jmp    c002275a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022755:	b8 04 00 00 00       	mov    eax,0x4
c002275a:	83 c4 10             	add    esp,0x10
c002275d:	5b                   	pop    ebx
c002275e:	5e                   	pop    esi
c002275f:	5f                   	pop    edi
c0022760:	c3                   	ret    
c0022761:	90                   	nop

c0022762 <ISO9660::exists(char const*)>:
c0022762:	83 ec 28             	sub    esp,0x28
c0022765:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022769:	8d 54 24 18          	lea    edx,[esp+0x18]
c002276d:	52                   	push   edx
c002276e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022771:	52                   	push   edx
c0022772:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022776:	52                   	push   edx
c0022777:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002277b:	52                   	push   edx
c002277c:	50                   	push   eax
c002277d:	e8 91 fe ff ff       	call   c0022613 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022782:	83 c4 3c             	add    esp,0x3c
c0022785:	c3                   	ret    

c0022786 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022786:	56                   	push   esi
c0022787:	53                   	push   ebx
c0022788:	83 ec 14             	sub    esp,0x14
c002278b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002278f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022793:	85 db                	test   ebx,ebx
c0022795:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022799:	0f 94 c2             	sete   dl
c002279c:	85 f6                	test   esi,esi
c002279e:	0f 94 c0             	sete   al
c00227a1:	08 c2                	or     dl,al
c00227a3:	75 68                	jne    c002280d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227a5:	85 c9                	test   ecx,ecx
c00227a7:	74 64                	je     c002280d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227a9:	83 ec 0c             	sub    esp,0xc
c00227ac:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227b3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227b9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227c0:	50                   	push   eax
c00227c1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227c4:	50                   	push   eax
c00227c5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227c9:	50                   	push   eax
c00227ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227ce:	50                   	push   eax
c00227cf:	51                   	push   ecx
c00227d0:	e8 3e fe ff ff       	call   c0022613 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227d5:	83 c4 20             	add    esp,0x20
c00227d8:	ba 01 00 00 00       	mov    edx,0x1
c00227dd:	84 c0                	test   al,al
c00227df:	74 31                	je     c0022812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227e5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227ec:	89 03                	mov    DWORD PTR [ebx],eax
c00227ee:	ba 00 00 00 00       	mov    edx,0x0
c00227f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00227f7:	85 c0                	test   eax,eax
c00227f9:	0f 95 06             	setne  BYTE PTR [esi]
c00227fc:	74 14                	je     c0022812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227fe:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022804:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002280b:	eb 05                	jmp    c0022812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002280d:	ba 04 00 00 00       	mov    edx,0x4
c0022812:	83 c4 14             	add    esp,0x14
c0022815:	89 d0                	mov    eax,edx
c0022817:	5b                   	pop    ebx
c0022818:	5e                   	pop    esi
c0022819:	c3                   	ret    

c002281a <ISO9660::openDir(char const*, void**)>:
c002281a:	57                   	push   edi
c002281b:	56                   	push   esi
c002281c:	53                   	push   ebx
c002281d:	83 ec 10             	sub    esp,0x10
c0022820:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022824:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022828:	85 ff                	test   edi,edi
c002282a:	0f 84 95 00 00 00    	je     c00228c5 <ISO9660::openDir(char const*, void**)+0xab>
c0022830:	85 f6                	test   esi,esi
c0022832:	0f 84 8d 00 00 00    	je     c00228c5 <ISO9660::openDir(char const*, void**)+0xab>
c0022838:	83 ec 0c             	sub    esp,0xc
c002283b:	6a 1c                	push   0x1c
c002283d:	e8 e8 d0 fe ff       	call   c000f92a <malloc>
c0022842:	89 07                	mov    DWORD PTR [edi],eax
c0022844:	89 c3                	mov    ebx,eax
c0022846:	59                   	pop    ecx
c0022847:	8d 44 24 18          	lea    eax,[esp+0x18]
c002284b:	50                   	push   eax
c002284c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002284f:	50                   	push   eax
c0022850:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022854:	50                   	push   eax
c0022855:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022859:	50                   	push   eax
c002285a:	56                   	push   esi
c002285b:	e8 b3 fd ff ff       	call   c0022613 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022860:	83 c4 20             	add    esp,0x20
c0022863:	84 c0                	test   al,al
c0022865:	74 07                	je     c002286e <ISO9660::openDir(char const*, void**)+0x54>
c0022867:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002286c:	75 21                	jne    c002288f <ISO9660::openDir(char const*, void**)+0x75>
c002286e:	0f b6 c0             	movzx  eax,al
c0022871:	52                   	push   edx
c0022872:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022876:	50                   	push   eax
c0022877:	68 3d d3 02 c0       	push   0xc002d33d
c002287c:	e8 60 06 ff ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0022881:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022885:	83 c4 10             	add    esp,0x10
c0022888:	b8 01 00 00 00       	mov    eax,0x1
c002288d:	eb 3b                	jmp    c00228ca <ISO9660::openDir(char const*, void**)+0xb0>
c002288f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022893:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022897:	89 03                	mov    DWORD PTR [ebx],eax
c0022899:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00228a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228a4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00228ab:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228b2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00228b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228bc:	8a 06                	mov    al,BYTE PTR [esi]
c00228be:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228c1:	31 c0                	xor    eax,eax
c00228c3:	eb 05                	jmp    c00228ca <ISO9660::openDir(char const*, void**)+0xb0>
c00228c5:	b8 04 00 00 00       	mov    eax,0x4
c00228ca:	83 c4 10             	add    esp,0x10
c00228cd:	5b                   	pop    ebx
c00228ce:	5e                   	pop    esi
c00228cf:	5f                   	pop    edi
c00228d0:	c3                   	ret    
c00228d1:	90                   	nop

c00228d2 <ISO9660::ISO9660()>:
c00228d2:	83 ec 0c             	sub    esp,0xc
c00228d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d9:	83 ec 0c             	sub    esp,0xc
c00228dc:	50                   	push   eax
c00228dd:	e8 0a 09 ff ff       	call   c00131ec <Filesystem::Filesystem()>
c00228e2:	83 c4 10             	add    esp,0x10
c00228e5:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c00228ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228ee:	89 10                	mov    DWORD PTR [eax],edx
c00228f0:	90                   	nop
c00228f1:	83 c4 0c             	add    esp,0xc
c00228f4:	c3                   	ret    
c00228f5:	90                   	nop

c00228f6 <SoundChannel::~SoundChannel()>:
c00228f6:	83 ec 0c             	sub    esp,0xc
c00228f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022900:	83 ec 0c             	sub    esp,0xc
c0022903:	50                   	push   eax
c0022904:	e8 31 d0 fe ff       	call   c000f93a <free>
c0022909:	83 c4 10             	add    esp,0x10
c002290c:	90                   	nop
c002290d:	83 c4 0c             	add    esp,0xc
c0022910:	c3                   	ret    
c0022911:	90                   	nop

c0022912 <SoundChannel::setSpeed(float)>:
c0022912:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022916:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002291a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002291d:	c3                   	ret    

c002291e <SoundChannel::getSpeed()>:
c002291e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022922:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022925:	c3                   	ret    

c0022926 <SoundChannel::setVolume(int)>:
c0022926:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002292a:	83 f8 64             	cmp    eax,0x64
c002292d:	7e 05                	jle    c0022934 <SoundChannel::setVolume(int)+0xe>
c002292f:	b8 64 00 00 00       	mov    eax,0x64
c0022934:	85 c0                	test   eax,eax
c0022936:	79 02                	jns    c002293a <SoundChannel::setVolume(int)+0x14>
c0022938:	31 c0                	xor    eax,eax
c002293a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002293e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022941:	c3                   	ret    

c0022942 <SoundChannel::getVolume()>:
c0022942:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022946:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022949:	c3                   	ret    

c002294a <SoundChannel::pause()>:
c002294a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002294e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022952:	c3                   	ret    
c0022953:	90                   	nop

c0022954 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022954:	83 ec 1c             	sub    esp,0x1c
c0022957:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002295b:	e8 ea ff ff ff       	call   c002294a <SoundChannel::pause()>
c0022960:	83 c4 04             	add    esp,0x4
c0022963:	6a 50                	push   0x50
c0022965:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022969:	e8 b8 ff ff ff       	call   c0022926 <SoundChannel::setVolume(int)>
c002296e:	83 c4 08             	add    esp,0x8
c0022971:	a1 dc d3 02 c0       	mov    eax,ds:0xc002d3dc
c0022976:	50                   	push   eax
c0022977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002297b:	e8 92 ff ff ff       	call   c0022912 <SoundChannel::setSpeed(float)>
c0022980:	83 c4 08             	add    esp,0x8
c0022983:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022987:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002298b:	89 10                	mov    DWORD PTR [eax],edx
c002298d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022991:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022995:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022998:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002299c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00229a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229a3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00229a8:	75 23                	jne    c00229cd <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00229aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00229b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b7:	0f af c2             	imul   eax,edx
c00229ba:	85 c0                	test   eax,eax
c00229bc:	79 03                	jns    c00229c1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229be:	83 c0 03             	add    eax,0x3
c00229c1:	c1 f8 02             	sar    eax,0x2
c00229c4:	05 a0 0f 00 00       	add    eax,0xfa0
c00229c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00229e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00229ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00229f5:	c1 e0 02             	shl    eax,0x2
c00229f8:	83 ec 0c             	sub    esp,0xc
c00229fb:	50                   	push   eax
c00229fc:	e8 29 cf fe ff       	call   c000f92a <malloc>
c0022a01:	83 c4 10             	add    esp,0x10
c0022a04:	89 c2                	mov    edx,eax
c0022a06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a0a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a0d:	83 ec 04             	sub    esp,0x4
c0022a10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a14:	50                   	push   eax
c0022a15:	6a 01                	push   0x1
c0022a17:	6a 04                	push   0x4
c0022a19:	e8 a5 61 fe ff       	call   c0008bc3 <src_new>
c0022a1e:	83 c4 10             	add    esp,0x10
c0022a21:	89 c2                	mov    edx,eax
c0022a23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a27:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a2e:	85 c0                	test   eax,eax
c0022a30:	74 10                	je     c0022a42 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a32:	83 ec 0c             	sub    esp,0xc
c0022a35:	68 c0 d3 02 c0       	push   0xc002d3c0
c0022a3a:	e8 5e 7e ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0022a3f:	83 c4 10             	add    esp,0x10
c0022a42:	a0 a0 31 03 c0       	mov    al,ds:0xc00331a0
c0022a47:	83 f0 01             	xor    eax,0x1
c0022a4a:	84 c0                	test   al,al
c0022a4c:	74 57                	je     c0022aa5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a4e:	a1 e0 d3 02 c0       	mov    eax,ds:0xc002d3e0
c0022a53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a57:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a5f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a67:	7f 35                	jg     c0022a9e <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a69:	83 ec 0c             	sub    esp,0xc
c0022a6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a70:	e8 6a 50 00 00       	call   c0027adf <__floatsisf>
c0022a75:	83 c4 10             	add    esp,0x10
c0022a78:	8b 15 e0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3e0
c0022a7e:	83 ec 08             	sub    esp,0x8
c0022a81:	52                   	push   edx
c0022a82:	50                   	push   eax
c0022a83:	e8 69 4c 00 00       	call   c00276f1 <__mulsf3>
c0022a88:	83 c4 10             	add    esp,0x10
c0022a8b:	89 c2                	mov    edx,eax
c0022a8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a91:	89 14 85 a0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd260],edx
c0022a98:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022a9c:	eb c1                	jmp    c0022a5f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022a9e:	c6 05 a0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331a0,0x1
c0022aa5:	90                   	nop
c0022aa6:	83 c4 1c             	add    esp,0x1c
c0022aa9:	c3                   	ret    

c0022aaa <SoundChannel::play()>:
c0022aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022aae:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022ab2:	c3                   	ret    
c0022ab3:	90                   	nop

c0022ab4 <SoundChannel::paused()>:
c0022ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ab8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022abb:	c3                   	ret    

c0022abc <SoundChannel::getSampleRate()>:
c0022abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ac2:	c3                   	ret    
c0022ac3:	90                   	nop

c0022ac4 <SoundChannel::getBits()>:
c0022ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022acb:	c3                   	ret    

c0022acc <SoundChannel::getBufferUsed()>:
c0022acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022ad3:	c3                   	ret    

c0022ad4 <SoundChannel::getBufferSize()>:
c0022ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022adb:	c3                   	ret    

c0022adc <SoundChannel::unbuffer(float*, int, int)>:
c0022adc:	56                   	push   esi
c0022add:	53                   	push   ebx
c0022ade:	83 ec 40             	sub    esp,0x40
c0022ae1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022ae5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022ae8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022aec:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022af3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022af7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022afb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022aff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b07:	e8 d3 4f 00 00       	call   c0027adf <__floatsisf>
c0022b0c:	5a                   	pop    edx
c0022b0d:	89 c6                	mov    esi,eax
c0022b0f:	ff 33                	push   DWORD PTR [ebx]
c0022b11:	e8 c9 4f 00 00       	call   c0027adf <__floatsisf>
c0022b16:	59                   	pop    ecx
c0022b17:	5a                   	pop    edx
c0022b18:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b1b:	50                   	push   eax
c0022b1c:	e8 d0 4b 00 00       	call   c00276f1 <__mulsf3>
c0022b21:	59                   	pop    ecx
c0022b22:	5a                   	pop    edx
c0022b23:	50                   	push   eax
c0022b24:	56                   	push   esi
c0022b25:	e8 8a 4d 00 00       	call   c00278b4 <__divsf3>
c0022b2a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b2d:	e8 7d 62 00 00       	call   c0028daf <__extendsfdf2>
c0022b32:	59                   	pop    ecx
c0022b33:	5e                   	pop    esi
c0022b34:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b38:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b3c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b44:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b48:	50                   	push   eax
c0022b49:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b4c:	e8 67 5c fe ff       	call   c00087b8 <src_process>
c0022b51:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b55:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b58:	83 c4 0c             	add    esp,0xc
c0022b5b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b5e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b61:	29 d0                	sub    eax,edx
c0022b63:	c1 e0 02             	shl    eax,0x2
c0022b66:	50                   	push   eax
c0022b67:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b6a:	50                   	push   eax
c0022b6b:	51                   	push   ecx
c0022b6c:	e8 2f db fd ff       	call   c00006a0 <memmove>
c0022b71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b75:	83 c4 44             	add    esp,0x44
c0022b78:	5b                   	pop    ebx
c0022b79:	5e                   	pop    esi
c0022b7a:	c3                   	ret    
c0022b7b:	90                   	nop

c0022b7c <SoundChannel::buffer8(unsigned char*, int)>:
c0022b7c:	55                   	push   ebp
c0022b7d:	57                   	push   edi
c0022b7e:	56                   	push   esi
c0022b7f:	53                   	push   ebx
c0022b80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b84:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022b88:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b8f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022b92:	74 7a                	je     c0022c0e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b94:	85 ff                	test   edi,edi
c0022b96:	7e 76                	jle    c0022c0e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022b98:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022b9c:	8d 70 01             	lea    esi,[eax+0x1]
c0022b9f:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022ba2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022ba5:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022bac:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022baf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022bb2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bb5:	74 5e                	je     c0022c15 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022bb7:	83 ff 01             	cmp    edi,0x1
c0022bba:	74 4b                	je     c0022c07 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022bbc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022bc0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bc3:	8d 70 01             	lea    esi,[eax+0x1]
c0022bc6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bc9:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022bd0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bd3:	b8 02 00 00 00       	mov    eax,0x2
c0022bd8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bdb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bde:	75 23                	jne    c0022c03 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022be0:	eb 27                	jmp    c0022c09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022be2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022be7:	8d 71 01             	lea    esi,[ecx+0x1]
c0022bea:	40                   	inc    eax
c0022beb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bee:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022bf1:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022bf8:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022bfb:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022bfe:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c01:	74 06                	je     c0022c09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c03:	39 c7                	cmp    edi,eax
c0022c05:	75 db                	jne    c0022be2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022c07:	89 f8                	mov    eax,edi
c0022c09:	5b                   	pop    ebx
c0022c0a:	5e                   	pop    esi
c0022c0b:	5f                   	pop    edi
c0022c0c:	5d                   	pop    ebp
c0022c0d:	c3                   	ret    
c0022c0e:	5b                   	pop    ebx
c0022c0f:	31 c0                	xor    eax,eax
c0022c11:	5e                   	pop    esi
c0022c12:	5f                   	pop    edi
c0022c13:	5d                   	pop    ebp
c0022c14:	c3                   	ret    
c0022c15:	b8 01 00 00 00       	mov    eax,0x1
c0022c1a:	eb ed                	jmp    c0022c09 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c1c <SoundDevice::SoundDevice(char const*)>:
c0022c1c:	83 ec 1c             	sub    esp,0x1c
c0022c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c23:	83 ec 08             	sub    esp,0x8
c0022c26:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c2a:	50                   	push   eax
c0022c2b:	e8 d6 18 ff ff       	call   c0014506 <Device::Device(char const*)>
c0022c30:	83 c4 10             	add    esp,0x10
c0022c33:	ba ec d3 02 c0       	mov    edx,0xc002d3ec
c0022c38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c3c:	89 10                	mov    DWORD PTR [eax],edx
c0022c3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c42:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c50:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c62:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c67:	7f 19                	jg     c0022c82 <SoundDevice::SoundDevice(char const*)+0x66>
c0022c69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c6d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c71:	83 c2 54             	add    edx,0x54
c0022c74:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022c7c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c80:	eb e0                	jmp    c0022c62 <SoundDevice::SoundDevice(char const*)+0x46>
c0022c82:	90                   	nop
c0022c83:	83 c4 1c             	add    esp,0x1c
c0022c86:	c3                   	ret    
c0022c87:	90                   	nop

c0022c88 <SoundDevice::~SoundDevice()>:
c0022c88:	53                   	push   ebx
c0022c89:	83 ec 18             	sub    esp,0x18
c0022c8c:	ba ec d3 02 c0       	mov    edx,0xc002d3ec
c0022c91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c95:	89 10                	mov    DWORD PTR [eax],edx
c0022c97:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c9f:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ca4:	7f 46                	jg     c0022cec <SoundDevice::~SoundDevice()+0x64>
c0022ca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022caa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cae:	83 c2 54             	add    edx,0x54
c0022cb1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022cb5:	85 c0                	test   eax,eax
c0022cb7:	74 2d                	je     c0022ce6 <SoundDevice::~SoundDevice()+0x5e>
c0022cb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cc1:	83 c2 54             	add    edx,0x54
c0022cc4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022cc8:	85 db                	test   ebx,ebx
c0022cca:	74 1a                	je     c0022ce6 <SoundDevice::~SoundDevice()+0x5e>
c0022ccc:	83 ec 0c             	sub    esp,0xc
c0022ccf:	53                   	push   ebx
c0022cd0:	e8 21 fc ff ff       	call   c00228f6 <SoundChannel::~SoundChannel()>
c0022cd5:	83 c4 10             	add    esp,0x10
c0022cd8:	83 ec 08             	sub    esp,0x8
c0022cdb:	6a 2c                	push   0x2c
c0022cdd:	53                   	push   ebx
c0022cde:	e8 1e 01 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0022ce3:	83 c4 10             	add    esp,0x10
c0022ce6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cea:	eb b3                	jmp    c0022c9f <SoundDevice::~SoundDevice()+0x17>
c0022cec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cf0:	83 ec 0c             	sub    esp,0xc
c0022cf3:	50                   	push   eax
c0022cf4:	e8 ef 14 ff ff       	call   c00141e8 <Device::~Device()>
c0022cf9:	83 c4 10             	add    esp,0x10
c0022cfc:	90                   	nop
c0022cfd:	83 c4 18             	add    esp,0x18
c0022d00:	5b                   	pop    ebx
c0022d01:	c3                   	ret    

c0022d02 <SoundDevice::~SoundDevice()>:
c0022d02:	83 ec 0c             	sub    esp,0xc
c0022d05:	83 ec 0c             	sub    esp,0xc
c0022d08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d0c:	e8 77 ff ff ff       	call   c0022c88 <SoundDevice::~SoundDevice()>
c0022d11:	83 c4 10             	add    esp,0x10
c0022d14:	83 ec 08             	sub    esp,0x8
c0022d17:	68 e4 01 00 00       	push   0x1e4
c0022d1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d20:	e8 dc 00 ff ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0022d25:	83 c4 10             	add    esp,0x10
c0022d28:	83 c4 0c             	add    esp,0xc
c0022d2b:	c3                   	ret    

c0022d2c <SoundDevice::getFreeChannelNum()>:
c0022d2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d30:	31 c0                	xor    eax,eax
c0022d32:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d3a:	74 09                	je     c0022d45 <SoundDevice::getFreeChannelNum()+0x19>
c0022d3c:	40                   	inc    eax
c0022d3d:	83 f8 20             	cmp    eax,0x20
c0022d40:	75 f0                	jne    c0022d32 <SoundDevice::getFreeChannelNum()+0x6>
c0022d42:	83 c8 ff             	or     eax,0xffffffff
c0022d45:	c3                   	ret    

c0022d46 <SoundDevice::addChannel(SoundChannel*)>:
c0022d46:	56                   	push   esi
c0022d47:	53                   	push   ebx
c0022d48:	51                   	push   ecx
c0022d49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d4d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d51:	53                   	push   ebx
c0022d52:	e8 d5 ff ff ff       	call   c0022d2c <SoundDevice::getFreeChannelNum()>
c0022d57:	5a                   	pop    edx
c0022d58:	83 f8 ff             	cmp    eax,0xffffffff
c0022d5b:	74 51                	je     c0022dae <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d5d:	85 f6                	test   esi,esi
c0022d5f:	74 4d                	je     c0022dae <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d61:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d68:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d6f:	75 30                	jne    c0022da1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d71:	83 ec 0c             	sub    esp,0xc
c0022d74:	56                   	push   esi
c0022d75:	e8 42 fd ff ff       	call   c0022abc <SoundChannel::getSampleRate()>
c0022d7a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022d80:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d83:	e8 3c fd ff ff       	call   c0022ac4 <SoundChannel::getBits()>
c0022d88:	83 c4 0c             	add    esp,0xc
c0022d8b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022d91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022d93:	50                   	push   eax
c0022d94:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022d9a:	53                   	push   ebx
c0022d9b:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022d9e:	83 c4 10             	add    esp,0x10
c0022da1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022da7:	b8 01 00 00 00       	mov    eax,0x1
c0022dac:	eb 03                	jmp    c0022db1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022dae:	83 c8 ff             	or     eax,0xffffffff
c0022db1:	5a                   	pop    edx
c0022db2:	5b                   	pop    ebx
c0022db3:	5e                   	pop    esi
c0022db4:	c3                   	ret    
c0022db5:	90                   	nop

c0022db6 <SoundDevice::removeChannel(int)>:
c0022db6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dbe:	83 fa 1f             	cmp    edx,0x1f
c0022dc1:	77 23                	ja     c0022de6 <SoundDevice::removeChannel(int)+0x30>
c0022dc3:	8d 14 90             	lea    edx,[eax+edx*4]
c0022dc6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022dcd:	74 17                	je     c0022de6 <SoundDevice::removeChannel(int)+0x30>
c0022dcf:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022dd9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022ddf:	75 05                	jne    c0022de6 <SoundDevice::removeChannel(int)+0x30>
c0022de1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022de3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022de6:	c3                   	ret    
c0022de7:	90                   	nop

c0022de8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022de8:	57                   	push   edi
c0022de9:	56                   	push   esi
c0022dea:	53                   	push   ebx
c0022deb:	31 db                	xor    ebx,ebx
c0022ded:	83 ec 10             	sub    esp,0x10
c0022df0:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022df4:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022df8:	0f 8d cb 00 00 00    	jge    c0022ec9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022dfe:	83 ec 0c             	sub    esp,0xc
c0022e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e05:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022e08:	e8 a2 5f 00 00       	call   c0028daf <__extendsfdf2>
c0022e0d:	83 c4 10             	add    esp,0x10
c0022e10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e18:	68 00 00 f0 3f       	push   0x3ff00000
c0022e1d:	6a 00                	push   0x0
c0022e1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e27:	e8 0f 4f 00 00       	call   c0027d3b <__adddf3>
c0022e2c:	83 c4 10             	add    esp,0x10
c0022e2f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e33:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e37:	68 00 00 e0 3f       	push   0x3fe00000
c0022e3c:	6a 00                	push   0x0
c0022e3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e46:	e8 6d 55 00 00       	call   c00283b8 <__muldf3>
c0022e4b:	83 c4 10             	add    esp,0x10
c0022e4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e56:	68 00 00 60 40       	push   0x40600000
c0022e5b:	6a 00                	push   0x0
c0022e5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e65:	e8 4e 55 00 00       	call   c00283b8 <__muldf3>
c0022e6a:	59                   	pop    ecx
c0022e6b:	5f                   	pop    edi
c0022e6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e70:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e7c:	e8 0a 5e 00 00       	call   c0028c8b <__truncdfsf2>
c0022e81:	5a                   	pop    edx
c0022e82:	89 c7                	mov    edi,eax
c0022e84:	59                   	pop    ecx
c0022e85:	68 00 00 fe 42       	push   0x42fe0000
c0022e8a:	50                   	push   eax
c0022e8b:	e8 a5 4e 00 00       	call   c0027d35 <__gesf2>
c0022e90:	83 c4 10             	add    esp,0x10
c0022e93:	85 c0                	test   eax,eax
c0022e95:	78 06                	js     c0022e9d <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022e97:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022e9b:	eb 26                	jmp    c0022ec3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022e9d:	50                   	push   eax
c0022e9e:	50                   	push   eax
c0022e9f:	6a 00                	push   0x0
c0022ea1:	57                   	push   edi
c0022ea2:	e8 92 4e 00 00       	call   c0027d39 <__lesf2>
c0022ea7:	83 c4 10             	add    esp,0x10
c0022eaa:	85 c0                	test   eax,eax
c0022eac:	7f 06                	jg     c0022eb4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022eae:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022eb2:	eb 0f                	jmp    c0022ec3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022eb4:	83 ec 0c             	sub    esp,0xc
c0022eb7:	57                   	push   edi
c0022eb8:	e8 8f 5f 00 00       	call   c0028e4c <lrintf>
c0022ebd:	83 c4 10             	add    esp,0x10
c0022ec0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ec3:	43                   	inc    ebx
c0022ec4:	e9 2b ff ff ff       	jmp    c0022df4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ec9:	83 c4 10             	add    esp,0x10
c0022ecc:	5b                   	pop    ebx
c0022ecd:	5e                   	pop    esi
c0022ece:	5f                   	pop    edi
c0022ecf:	c3                   	ret    

c0022ed0 <SoundDevice::getAudio(int, float*, float*)>:
c0022ed0:	55                   	push   ebp
c0022ed1:	57                   	push   edi
c0022ed2:	56                   	push   esi
c0022ed3:	53                   	push   ebx
c0022ed4:	31 db                	xor    ebx,ebx
c0022ed6:	83 ec 20             	sub    esp,0x20
c0022ed9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022edd:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ee1:	c1 e0 02             	shl    eax,0x2
c0022ee4:	50                   	push   eax
c0022ee5:	6a 00                	push   0x0
c0022ee7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022eeb:	e8 ac d8 fd ff       	call   c000079c <memset>
c0022ef0:	83 c4 10             	add    esp,0x10
c0022ef3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022ef7:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022efe:	85 c0                	test   eax,eax
c0022f00:	0f 84 d7 00 00 00    	je     c0022fdd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f06:	83 ec 0c             	sub    esp,0xc
c0022f09:	50                   	push   eax
c0022f0a:	e8 a5 fb ff ff       	call   c0022ab4 <SoundChannel::paused()>
c0022f0f:	83 c4 10             	add    esp,0x10
c0022f12:	84 c0                	test   al,al
c0022f14:	0f 85 c3 00 00 00    	jne    c0022fdd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f1a:	83 ec 0c             	sub    esp,0xc
c0022f1d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f24:	e8 19 fa ff ff       	call   c0022942 <SoundChannel::getVolume()>
c0022f29:	83 c4 10             	add    esp,0x10
c0022f2c:	85 c0                	test   eax,eax
c0022f2e:	0f 84 a9 00 00 00    	je     c0022fdd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f34:	83 ec 0c             	sub    esp,0xc
c0022f37:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f3e:	e8 ff f9 ff ff       	call   c0022942 <SoundChannel::getVolume()>
c0022f43:	83 ec 0c             	sub    esp,0xc
c0022f46:	50                   	push   eax
c0022f47:	e8 93 4b 00 00       	call   c0027adf <__floatsisf>
c0022f4c:	59                   	pop    ecx
c0022f4d:	5d                   	pop    ebp
c0022f4e:	31 ed                	xor    ebp,ebp
c0022f50:	68 00 00 c8 42       	push   0x42c80000
c0022f55:	50                   	push   eax
c0022f56:	e8 59 49 00 00       	call   c00278b4 <__divsf3>
c0022f5b:	83 c4 10             	add    esp,0x10
c0022f5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f66:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f6c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f70:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f77:	e8 60 fb ff ff       	call   c0022adc <SoundChannel::unbuffer(float*, int, int)>
c0022f7c:	83 c4 20             	add    esp,0x20
c0022f7f:	89 c1                	mov    ecx,eax
c0022f81:	39 cd                	cmp    ebp,ecx
c0022f83:	7d 52                	jge    c0022fd7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022f85:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f89:	50                   	push   eax
c0022f8a:	50                   	push   eax
c0022f8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022f8f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022f92:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022f96:	e8 56 47 00 00       	call   c00276f1 <__mulsf3>
c0022f9b:	5a                   	pop    edx
c0022f9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022fa0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022fa6:	e8 34 4b 00 00       	call   c0027adf <__floatsisf>
c0022fab:	59                   	pop    ecx
c0022fac:	5a                   	pop    edx
c0022fad:	50                   	push   eax
c0022fae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fb2:	e8 fd 48 00 00       	call   c00278b4 <__divsf3>
c0022fb7:	59                   	pop    ecx
c0022fb8:	5a                   	pop    edx
c0022fb9:	50                   	push   eax
c0022fba:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fbe:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fc1:	e8 08 44 00 00       	call   c00273ce <__addsf3>
c0022fc6:	83 c4 10             	add    esp,0x10
c0022fc9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022fd1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022fd4:	45                   	inc    ebp
c0022fd5:	eb aa                	jmp    c0022f81 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022fd7:	39 cf                	cmp    edi,ecx
c0022fd9:	7e 02                	jle    c0022fdd <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022fdb:	89 cf                	mov    edi,ecx
c0022fdd:	43                   	inc    ebx
c0022fde:	83 fb 20             	cmp    ebx,0x20
c0022fe1:	0f 85 10 ff ff ff    	jne    c0022ef7 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022fe7:	83 c4 1c             	add    esp,0x1c
c0022fea:	89 f8                	mov    eax,edi
c0022fec:	5b                   	pop    ebx
c0022fed:	5e                   	pop    esi
c0022fee:	5f                   	pop    edi
c0022fef:	5d                   	pop    ebp
c0022ff0:	c3                   	ret    
c0022ff1:	90                   	nop

c0022ff2 <PCI::open(int, int, void*)>:
c0022ff2:	83 ec 18             	sub    esp,0x18
c0022ff5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022ff9:	8b 10                	mov    edx,DWORD PTR [eax]
c0022ffb:	50                   	push   eax
c0022ffc:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022fff:	31 c0                	xor    eax,eax
c0023001:	83 c4 1c             	add    esp,0x1c
c0023004:	c3                   	ret    
c0023005:	90                   	nop

c0023006 <PCI::close(int, int, void*)>:
c0023006:	31 c0                	xor    eax,eax
c0023008:	c3                   	ret    
c0023009:	90                   	nop

c002300a <PCI::PCI()>:
c002300a:	83 ec 0c             	sub    esp,0xc
c002300d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023011:	83 ec 08             	sub    esp,0x8
c0023014:	68 1c d4 02 c0       	push   0xc002d41c
c0023019:	50                   	push   eax
c002301a:	e8 63 0b ff ff       	call   c0013b82 <Bus::Bus(char const*)>
c002301f:	83 c4 10             	add    esp,0x10
c0023022:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0023027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002302b:	89 10                	mov    DWORD PTR [eax],edx
c002302d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023031:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023037:	0f b6 d0             	movzx  edx,al
c002303a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023049:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002304f:	0f b6 d0             	movzx  edx,al
c0023052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023056:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002305b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002305f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023065:	8d 50 01             	lea    edx,[eax+0x1]
c0023068:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002306c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023072:	0f b6 d0             	movzx  edx,al
c0023075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023079:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002307d:	83 c9 c0             	or     ecx,0xffffffc0
c0023080:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023084:	90                   	nop
c0023085:	83 c4 0c             	add    esp,0xc
c0023088:	c3                   	ret    
c0023089:	90                   	nop

c002308a <PCI::readBAR8(unsigned int, int)>:
c002308a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002308e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023092:	f6 c2 01             	test   dl,0x1
c0023095:	74 07                	je     c002309e <PCI::readBAR8(unsigned int, int)+0x14>
c0023097:	83 e2 fc             	and    edx,0xfffffffc
c002309a:	01 c2                	add    edx,eax
c002309c:	ec                   	in     al,dx
c002309d:	c3                   	ret    
c002309e:	83 e2 f0             	and    edx,0xfffffff0
c00230a1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230a4:	c3                   	ret    
c00230a5:	90                   	nop

c00230a6 <PCI::readBAR16(unsigned int, int)>:
c00230a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230ae:	f6 c2 01             	test   dl,0x1
c00230b1:	74 08                	je     c00230bb <PCI::readBAR16(unsigned int, int)+0x15>
c00230b3:	83 e2 fc             	and    edx,0xfffffffc
c00230b6:	01 c2                	add    edx,eax
c00230b8:	66 ed                	in     ax,dx
c00230ba:	c3                   	ret    
c00230bb:	83 e2 f0             	and    edx,0xfffffff0
c00230be:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230c2:	c3                   	ret    
c00230c3:	90                   	nop

c00230c4 <PCI::readBAR32(unsigned int, int)>:
c00230c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230cc:	f6 c2 01             	test   dl,0x1
c00230cf:	74 07                	je     c00230d8 <PCI::readBAR32(unsigned int, int)+0x14>
c00230d1:	83 e2 fc             	and    edx,0xfffffffc
c00230d4:	01 c2                	add    edx,eax
c00230d6:	ed                   	in     eax,dx
c00230d7:	c3                   	ret    
c00230d8:	83 e2 f0             	and    edx,0xfffffff0
c00230db:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00230de:	c3                   	ret    
c00230df:	90                   	nop

c00230e0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00230e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230ec:	f6 c2 01             	test   dl,0x1
c00230ef:	74 07                	je     c00230f8 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c00230f1:	83 e2 fc             	and    edx,0xfffffffc
c00230f4:	01 ca                	add    edx,ecx
c00230f6:	ee                   	out    dx,al
c00230f7:	c3                   	ret    
c00230f8:	83 e2 f0             	and    edx,0xfffffff0
c00230fb:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c00230fe:	c3                   	ret    
c00230ff:	90                   	nop

c0023100 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023100:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023104:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023108:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002310c:	f6 c2 01             	test   dl,0x1
c002310f:	74 08                	je     c0023119 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023111:	83 e2 fc             	and    edx,0xfffffffc
c0023114:	01 ca                	add    edx,ecx
c0023116:	66 ef                	out    dx,ax
c0023118:	c3                   	ret    
c0023119:	83 e2 f0             	and    edx,0xfffffff0
c002311c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023120:	c3                   	ret    
c0023121:	90                   	nop

c0023122 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023122:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002312a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002312e:	f6 c2 01             	test   dl,0x1
c0023131:	74 07                	je     c002313a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023133:	83 e2 fc             	and    edx,0xfffffffc
c0023136:	01 ca                	add    edx,ecx
c0023138:	ef                   	out    dx,eax
c0023139:	c3                   	ret    
c002313a:	83 e2 f0             	and    edx,0xfffffff0
c002313d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023140:	c3                   	ret    
c0023141:	90                   	nop

c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023142:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023146:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002314b:	89 ca                	mov    edx,ecx
c002314d:	c1 e0 10             	shl    eax,0x10
c0023150:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023156:	09 d0                	or     eax,edx
c0023158:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002315d:	c1 e2 08             	shl    edx,0x8
c0023160:	09 d0                	or     eax,edx
c0023162:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023167:	c1 e2 0b             	shl    edx,0xb
c002316a:	09 d0                	or     eax,edx
c002316c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023171:	0d 00 00 00 80       	or     eax,0x80000000
c0023176:	ef                   	out    dx,eax
c0023177:	ba fc 0c 00 00       	mov    edx,0xcfc
c002317c:	ed                   	in     eax,dx
c002317d:	83 e1 02             	and    ecx,0x2
c0023180:	0f b6 c9             	movzx  ecx,cl
c0023183:	c1 e1 03             	shl    ecx,0x3
c0023186:	d3 e8                	shr    eax,cl
c0023188:	c3                   	ret    
c0023189:	90                   	nop

c002318a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002318a:	6a 00                	push   0x0
c002318c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023191:	50                   	push   eax
c0023192:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023197:	50                   	push   eax
c0023198:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002319d:	50                   	push   eax
c002319e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231a2:	e8 9b ff ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231a7:	83 c4 14             	add    esp,0x14
c00231aa:	c3                   	ret    
c00231ab:	90                   	nop

c00231ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231ac:	6a 0e                	push   0xe
c00231ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b3:	50                   	push   eax
c00231b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231b9:	50                   	push   eax
c00231ba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231bf:	50                   	push   eax
c00231c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231c4:	e8 79 ff ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231c9:	83 c4 14             	add    esp,0x14
c00231cc:	0f b6 c0             	movzx  eax,al
c00231cf:	c3                   	ret    

c00231d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231d0:	55                   	push   ebp
c00231d1:	57                   	push   edi
c00231d2:	56                   	push   esi
c00231d3:	53                   	push   ebx
c00231d4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00231d9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00231de:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00231e3:	6a 0a                	push   0xa
c00231e5:	56                   	push   esi
c00231e6:	55                   	push   ebp
c00231e7:	57                   	push   edi
c00231e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00231ec:	e8 51 ff ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231f1:	6a 0a                	push   0xa
c00231f3:	89 c3                	mov    ebx,eax
c00231f5:	56                   	push   esi
c00231f6:	0f b6 db             	movzx  ebx,bl
c00231f9:	55                   	push   ebp
c00231fa:	57                   	push   edi
c00231fb:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00231ff:	e8 3e ff ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023204:	83 c4 28             	add    esp,0x28
c0023207:	25 00 ff 00 00       	and    eax,0xff00
c002320c:	09 d8                	or     eax,ebx
c002320e:	5b                   	pop    ebx
c002320f:	5e                   	pop    esi
c0023210:	5f                   	pop    edi
c0023211:	5d                   	pop    ebp
c0023212:	c3                   	ret    
c0023213:	90                   	nop

c0023214 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023214:	6a 08                	push   0x8
c0023216:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002321b:	50                   	push   eax
c002321c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023221:	50                   	push   eax
c0023222:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023227:	50                   	push   eax
c0023228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002322c:	e8 11 ff ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023231:	83 c4 14             	add    esp,0x14
c0023234:	0f b6 c4             	movzx  eax,ah
c0023237:	c3                   	ret    

c0023238 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023238:	6a 08                	push   0x8
c002323a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002323f:	50                   	push   eax
c0023240:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023245:	50                   	push   eax
c0023246:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002324b:	50                   	push   eax
c002324c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023250:	e8 ed fe ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023255:	83 c4 14             	add    esp,0x14
c0023258:	c3                   	ret    
c0023259:	90                   	nop

c002325a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002325a:	6a 3c                	push   0x3c
c002325c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023261:	50                   	push   eax
c0023262:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023267:	50                   	push   eax
c0023268:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002326d:	50                   	push   eax
c002326e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023272:	e8 cb fe ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023277:	83 c4 14             	add    esp,0x14
c002327a:	c3                   	ret    
c002327b:	90                   	nop

c002327c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002327c:	6a 18                	push   0x18
c002327e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023283:	50                   	push   eax
c0023284:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023289:	50                   	push   eax
c002328a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002328f:	50                   	push   eax
c0023290:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023294:	e8 a9 fe ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023299:	83 c4 14             	add    esp,0x14
c002329c:	0f b6 c4             	movzx  eax,ah
c002329f:	c3                   	ret    

c00232a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232a0:	55                   	push   ebp
c00232a1:	57                   	push   edi
c00232a2:	56                   	push   esi
c00232a3:	53                   	push   ebx
c00232a4:	50                   	push   eax
c00232a5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232a9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232ae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232b3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232b8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232bf:	8d 43 12             	lea    eax,[ebx+0x12]
c00232c2:	83 c3 10             	add    ebx,0x10
c00232c5:	0f b6 c0             	movzx  eax,al
c00232c8:	0f b6 db             	movzx  ebx,bl
c00232cb:	50                   	push   eax
c00232cc:	51                   	push   ecx
c00232cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232d1:	57                   	push   edi
c00232d2:	55                   	push   ebp
c00232d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00232d7:	e8 66 fe ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232dc:	53                   	push   ebx
c00232dd:	89 c6                	mov    esi,eax
c00232df:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232e3:	c1 e6 10             	shl    esi,0x10
c00232e6:	51                   	push   ecx
c00232e7:	57                   	push   edi
c00232e8:	55                   	push   ebp
c00232e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232ed:	e8 50 fe ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232f2:	83 c4 2c             	add    esp,0x2c
c00232f5:	0f b7 c0             	movzx  eax,ax
c00232f8:	5b                   	pop    ebx
c00232f9:	09 f0                	or     eax,esi
c00232fb:	5e                   	pop    esi
c00232fc:	5f                   	pop    edi
c00232fd:	5d                   	pop    ebp
c00232fe:	c3                   	ret    
c00232ff:	90                   	nop

c0023300 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023300:	53                   	push   ebx
c0023301:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023306:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002330b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002330f:	c1 e1 10             	shl    ecx,0x10
c0023312:	25 fc 00 00 00       	and    eax,0xfc
c0023317:	09 c1                	or     ecx,eax
c0023319:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002331e:	c1 e0 08             	shl    eax,0x8
c0023321:	09 c1                	or     ecx,eax
c0023323:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023328:	c1 e0 0b             	shl    eax,0xb
c002332b:	09 c1                	or     ecx,eax
c002332d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023333:	89 c8                	mov    eax,ecx
c0023335:	ef                   	out    dx,eax
c0023336:	ba fc 0c 00 00       	mov    edx,0xcfc
c002333b:	ed                   	in     eax,dx
c002333c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023341:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023346:	74 0a                	je     c0023352 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023348:	0f b7 d8             	movzx  ebx,ax
c002334b:	89 d0                	mov    eax,edx
c002334d:	c1 e0 10             	shl    eax,0x10
c0023350:	eb 05                	jmp    c0023357 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023352:	66 31 c0             	xor    ax,ax
c0023355:	89 d3                	mov    ebx,edx
c0023357:	09 c3                	or     ebx,eax
c0023359:	ba f8 0c 00 00       	mov    edx,0xcf8
c002335e:	89 c8                	mov    eax,ecx
c0023360:	ef                   	out    dx,eax
c0023361:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023366:	89 d8                	mov    eax,ebx
c0023368:	ef                   	out    dx,eax
c0023369:	5b                   	pop    ebx
c002336a:	c3                   	ret    
c002336b:	90                   	nop

c002336c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002336c:	31 c0                	xor    eax,eax
c002336e:	c3                   	ret    
c002336f:	90                   	nop

c0023370 <PCI::checkBus(unsigned char)>:
c0023370:	56                   	push   esi
c0023371:	53                   	push   ebx
c0023372:	31 db                	xor    ebx,ebx
c0023374:	51                   	push   ecx
c0023375:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002337a:	52                   	push   edx
c002337b:	53                   	push   ebx
c002337c:	43                   	inc    ebx
c002337d:	56                   	push   esi
c002337e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023382:	e8 41 03 00 00       	call   c00236c8 <PCI::checkDevice(unsigned char, unsigned char)>
c0023387:	83 c4 10             	add    esp,0x10
c002338a:	83 fb 20             	cmp    ebx,0x20
c002338d:	75 eb                	jne    c002337a <PCI::checkBus(unsigned char)+0xa>
c002338f:	58                   	pop    eax
c0023390:	5b                   	pop    ebx
c0023391:	5e                   	pop    esi
c0023392:	c3                   	ret    
c0023393:	90                   	nop

c0023394 <PCI::foundDevice(PCIDeviceInfo)>:
c0023394:	55                   	push   ebp
c0023395:	57                   	push   edi
c0023396:	56                   	push   esi
c0023397:	53                   	push   ebx
c0023398:	83 ec 1c             	sub    esp,0x1c
c002339b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002339f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00233a5:	0f 84 68 01 00 00    	je     c0023513 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00233ab:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00233af:	66 81 f9 06 04       	cmp    cx,0x406
c00233b4:	75 2c                	jne    c00233e2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233b6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233bb:	50                   	push   eax
c00233bc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233c1:	50                   	push   eax
c00233c2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233c7:	50                   	push   eax
c00233c8:	56                   	push   esi
c00233c9:	e8 ae fe ff ff       	call   c002327c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233ce:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233d2:	0f b6 c0             	movzx  eax,al
c00233d5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00233d9:	83 c4 2c             	add    esp,0x2c
c00233dc:	5b                   	pop    ebx
c00233dd:	5e                   	pop    esi
c00233de:	5f                   	pop    edi
c00233df:	5d                   	pop    ebp
c00233e0:	eb 8e                	jmp    c0023370 <PCI::checkBus(unsigned char)>
c00233e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00233e6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00233ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00233f0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00233f4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c00233f8:	88 d3                	mov    bl,dl
c00233fa:	85 c0                	test   eax,eax
c00233fc:	74 33                	je     c0023431 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c00233fe:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023401:	85 d2                	test   edx,edx
c0023403:	74 28                	je     c002342d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023405:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002340b:	31 ef                	xor    edi,ebp
c002340d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023413:	75 18                	jne    c002342d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023415:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023419:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002341f:	75 0c                	jne    c002342d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023421:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023427:	0f 84 e6 00 00 00    	je     c0023513 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002342d:	8b 00                	mov    eax,DWORD PTR [eax]
c002342f:	eb c9                	jmp    c00233fa <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023431:	66 81 f9 01 06       	cmp    cx,0x601
c0023436:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002343a:	75 19                	jne    c0023455 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002343c:	83 ec 0c             	sub    esp,0xc
c002343f:	68 64 01 00 00       	push   0x164
c0023444:	e8 e1 c4 fe ff       	call   c000f92a <malloc>
c0023449:	89 c5                	mov    ebp,eax
c002344b:	89 04 24             	mov    DWORD PTR [esp],eax
c002344e:	e8 ab 0f 00 00       	call   c00243fe <SATABus::SATABus()>
c0023453:	eb 1e                	jmp    c0023473 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023455:	66 81 f9 01 01       	cmp    cx,0x101
c002345a:	75 60                	jne    c00234bc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002345c:	83 ec 0c             	sub    esp,0xc
c002345f:	68 70 02 00 00       	push   0x270
c0023464:	e8 c1 c4 fe ff       	call   c000f92a <malloc>
c0023469:	89 c5                	mov    ebp,eax
c002346b:	89 04 24             	mov    DWORD PTR [esp],eax
c002346e:	e8 19 03 00 00       	call   c002378c <IDE::IDE()>
c0023473:	58                   	pop    eax
c0023474:	5a                   	pop    edx
c0023475:	55                   	push   ebp
c0023476:	56                   	push   esi
c0023477:	e8 9a 0e ff ff       	call   c0014316 <Device::addChild(Device*)>
c002347c:	83 ec 1c             	sub    esp,0x1c
c002347f:	b9 09 00 00 00       	mov    ecx,0x9
c0023484:	fc                   	cld    
c0023485:	89 e7                	mov    edi,esp
c0023487:	89 de                	mov    esi,ebx
c0023489:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002348b:	55                   	push   ebp
c002348c:	e8 8f 0d ff ff       	call   c0014220 <Device::preOpenPCI(PCIDeviceInfo)>
c0023491:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023494:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023498:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00234a0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00234a8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00234b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234b3:	83 c4 4c             	add    esp,0x4c
c00234b6:	5b                   	pop    ebx
c00234b7:	5e                   	pop    esi
c00234b8:	5f                   	pop    edi
c00234b9:	5d                   	pop    ebp
c00234ba:	ff e0                	jmp    eax
c00234bc:	50                   	push   eax
c00234bd:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234c2:	50                   	push   eax
c00234c3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234c8:	50                   	push   eax
c00234c9:	68 24 d4 02 c0       	push   0xc002d424
c00234ce:	e8 0e fa fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00234d3:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00234da:	e8 4b c4 fe ff       	call   c000f92a <malloc>
c00234df:	5a                   	pop    edx
c00234e0:	89 c5                	mov    ebp,eax
c00234e2:	59                   	pop    ecx
c00234e3:	68 40 d4 02 c0       	push   0xc002d440
c00234e8:	50                   	push   eax
c00234e9:	e8 1e 11 ff ff       	call   c001460c <DriverlessDevice::DriverlessDevice(char const*)>
c00234ee:	5f                   	pop    edi
c00234ef:	58                   	pop    eax
c00234f0:	55                   	push   ebp
c00234f1:	56                   	push   esi
c00234f2:	e8 1f 0e ff ff       	call   c0014316 <Device::addChild(Device*)>
c00234f7:	b9 09 00 00 00       	mov    ecx,0x9
c00234fc:	fc                   	cld    
c00234fd:	89 df                	mov    edi,ebx
c00234ff:	89 de                	mov    esi,ebx
c0023501:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023503:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023507:	83 c4 2c             	add    esp,0x2c
c002350a:	5b                   	pop    ebx
c002350b:	5e                   	pop    esi
c002350c:	5f                   	pop    edi
c002350d:	5d                   	pop    ebp
c002350e:	e9 0d 0d ff ff       	jmp    c0014220 <Device::preOpenPCI(PCIDeviceInfo)>
c0023513:	83 c4 1c             	add    esp,0x1c
c0023516:	5b                   	pop    ebx
c0023517:	5e                   	pop    esi
c0023518:	5f                   	pop    edi
c0023519:	5d                   	pop    ebp
c002351a:	c3                   	ret    
c002351b:	90                   	nop

c002351c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002351c:	55                   	push   ebp
c002351d:	57                   	push   edi
c002351e:	56                   	push   esi
c002351f:	53                   	push   ebx
c0023520:	83 ec 5c             	sub    esp,0x5c
c0023523:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002352b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002352f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023534:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023538:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002353c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023541:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023545:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002354a:	6a 0c                	push   0xc
c002354c:	55                   	push   ebp
c002354d:	53                   	push   ebx
c002354e:	57                   	push   edi
c002354f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023556:	e8 e7 fb ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002355b:	55                   	push   ebp
c002355c:	53                   	push   ebx
c002355d:	57                   	push   edi
c002355e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023565:	e8 66 fc ff ff       	call   c00231d0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002356a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002356f:	83 c4 24             	add    esp,0x24
c0023572:	55                   	push   ebp
c0023573:	53                   	push   ebx
c0023574:	57                   	push   edi
c0023575:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023579:	e8 dc fc ff ff       	call   c002325a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002357e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023582:	6a 3c                	push   0x3c
c0023584:	55                   	push   ebp
c0023585:	53                   	push   ebx
c0023586:	57                   	push   edi
c0023587:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002358e:	e8 af fb ff ff       	call   c0023142 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023593:	0f b6 c4             	movzx  eax,ah
c0023596:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002359a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c002359e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00235a2:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00235a7:	83 c4 24             	add    esp,0x24
c00235aa:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235b0:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235b7:	74 6c                	je     c0023625 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235b9:	31 f6                	xor    esi,esi
c00235bb:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c00235c1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235c7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235cd:	7e 56                	jle    c0023625 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235cf:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235d2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00235d9:	39 cb                	cmp    ebx,ecx
c00235db:	75 45                	jne    c0023622 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235dd:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00235e4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00235e8:	75 38                	jne    c0023622 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235ea:	83 ec 0c             	sub    esp,0xc
c00235ed:	68 5a d4 02 c0       	push   0xc002d45a
c00235f2:	e8 ea f8 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00235f7:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c00235fd:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023603:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002360b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002360f:	52                   	push   edx
c0023610:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023614:	53                   	push   ebx
c0023615:	68 7f d4 02 c0       	push   0xc002d47f
c002361a:	e8 c2 f8 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002361f:	83 c4 20             	add    esp,0x20
c0023622:	46                   	inc    esi
c0023623:	eb 96                	jmp    c00235bb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023625:	31 d2                	xor    edx,edx
c0023627:	83 ec 0c             	sub    esp,0xc
c002362a:	55                   	push   ebp
c002362b:	53                   	push   ebx
c002362c:	57                   	push   edi
c002362d:	52                   	push   edx
c002362e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023632:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023639:	e8 62 fc ff ff       	call   c00232a0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002363e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023642:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023646:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002364a:	42                   	inc    edx
c002364b:	83 c4 20             	add    esp,0x20
c002364e:	83 fa 06             	cmp    edx,0x6
c0023651:	75 d4                	jne    c0023627 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023653:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023657:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002365b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002365f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023663:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023667:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002366b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023670:	86 e0                	xchg   al,ah
c0023672:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023677:	55                   	push   ebp
c0023678:	53                   	push   ebx
c0023679:	57                   	push   edi
c002367a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002367e:	e8 91 fb ff ff       	call   c0023214 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023683:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023687:	55                   	push   ebp
c0023688:	53                   	push   ebx
c0023689:	57                   	push   edi
c002368a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023691:	e8 f4 fa ff ff       	call   c002318a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023696:	83 ec 0c             	sub    esp,0xc
c0023699:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c002369e:	b9 09 00 00 00       	mov    ecx,0x9
c00236a3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00236a7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00236ab:	fc                   	cld    
c00236ac:	89 e7                	mov    edi,esp
c00236ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236b0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236b7:	e8 d8 fc ff ff       	call   c0023394 <PCI::foundDevice(PCIDeviceInfo)>
c00236bc:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236c2:	5b                   	pop    ebx
c00236c3:	5e                   	pop    esi
c00236c4:	5f                   	pop    edi
c00236c5:	5d                   	pop    ebp
c00236c6:	c3                   	ret    
c00236c7:	90                   	nop

c00236c8 <PCI::checkDevice(unsigned char, unsigned char)>:
c00236c8:	55                   	push   ebp
c00236c9:	57                   	push   edi
c00236ca:	56                   	push   esi
c00236cb:	53                   	push   ebx
c00236cc:	83 ec 0c             	sub    esp,0xc
c00236cf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236d3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00236d8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236dd:	6a 00                	push   0x0
c00236df:	56                   	push   esi
c00236e0:	57                   	push   edi
c00236e1:	55                   	push   ebp
c00236e2:	e8 a3 fa ff ff       	call   c002318a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236e7:	6a 00                	push   0x0
c00236e9:	56                   	push   esi
c00236ea:	57                   	push   edi
c00236eb:	55                   	push   ebp
c00236ec:	e8 2b fe ff ff       	call   c002351c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00236f1:	83 c4 20             	add    esp,0x20
c00236f4:	6a 00                	push   0x0
c00236f6:	56                   	push   esi
c00236f7:	57                   	push   edi
c00236f8:	55                   	push   ebp
c00236f9:	e8 ae fa ff ff       	call   c00231ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00236fe:	83 c4 10             	add    esp,0x10
c0023701:	84 c0                	test   al,al
c0023703:	79 27                	jns    c002372c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023705:	bb 01 00 00 00       	mov    ebx,0x1
c002370a:	53                   	push   ebx
c002370b:	56                   	push   esi
c002370c:	57                   	push   edi
c002370d:	55                   	push   ebp
c002370e:	e8 77 fa ff ff       	call   c002318a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023713:	83 c4 10             	add    esp,0x10
c0023716:	66 40                	inc    ax
c0023718:	74 0c                	je     c0023726 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002371a:	53                   	push   ebx
c002371b:	56                   	push   esi
c002371c:	57                   	push   edi
c002371d:	55                   	push   ebp
c002371e:	e8 f9 fd ff ff       	call   c002351c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023723:	83 c4 10             	add    esp,0x10
c0023726:	43                   	inc    ebx
c0023727:	83 fb 08             	cmp    ebx,0x8
c002372a:	75 de                	jne    c002370a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002372c:	83 c4 0c             	add    esp,0xc
c002372f:	5b                   	pop    ebx
c0023730:	5e                   	pop    esi
c0023731:	5f                   	pop    edi
c0023732:	5d                   	pop    ebp
c0023733:	c3                   	ret    

c0023734 <PCI::detect()>:
c0023734:	56                   	push   esi
c0023735:	53                   	push   ebx
c0023736:	53                   	push   ebx
c0023737:	31 db                	xor    ebx,ebx
c0023739:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002373d:	6a 00                	push   0x0
c002373f:	6a 00                	push   0x0
c0023741:	6a 00                	push   0x0
c0023743:	56                   	push   esi
c0023744:	e8 63 fa ff ff       	call   c00231ac <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023749:	83 c4 10             	add    esp,0x10
c002374c:	a8 80                	test   al,0x80
c002374e:	75 21                	jne    c0023771 <PCI::detect()+0x3d>
c0023750:	51                   	push   ecx
c0023751:	51                   	push   ecx
c0023752:	6a 00                	push   0x0
c0023754:	56                   	push   esi
c0023755:	e8 16 fc ff ff       	call   c0023370 <PCI::checkBus(unsigned char)>
c002375a:	83 c4 10             	add    esp,0x10
c002375d:	eb 24                	jmp    c0023783 <PCI::detect()+0x4f>
c002375f:	52                   	push   edx
c0023760:	52                   	push   edx
c0023761:	53                   	push   ebx
c0023762:	43                   	inc    ebx
c0023763:	56                   	push   esi
c0023764:	e8 07 fc ff ff       	call   c0023370 <PCI::checkBus(unsigned char)>
c0023769:	83 c4 10             	add    esp,0x10
c002376c:	83 fb 08             	cmp    ebx,0x8
c002376f:	74 12                	je     c0023783 <PCI::detect()+0x4f>
c0023771:	53                   	push   ebx
c0023772:	6a 00                	push   0x0
c0023774:	6a 00                	push   0x0
c0023776:	56                   	push   esi
c0023777:	e8 0e fa ff ff       	call   c002318a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002377c:	83 c4 10             	add    esp,0x10
c002377f:	66 40                	inc    ax
c0023781:	74 dc                	je     c002375f <PCI::detect()+0x2b>
c0023783:	58                   	pop    eax
c0023784:	5b                   	pop    ebx
c0023785:	5e                   	pop    esi
c0023786:	c3                   	ret    
c0023787:	90                   	nop

c0023788 <IDE::close(int, int, void*)>:
c0023788:	83 c8 ff             	or     eax,0xffffffff
c002378b:	c3                   	ret    

c002378c <IDE::IDE()>:
c002378c:	83 ec 0c             	sub    esp,0xc
c002378f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023793:	83 ec 08             	sub    esp,0x8
c0023796:	68 c8 d4 02 c0       	push   0xc002d4c8
c002379b:	50                   	push   eax
c002379c:	e8 0f 0f ff ff       	call   c00146b0 <HardDiskController::HardDiskController(char const*)>
c00237a1:	83 c4 10             	add    esp,0x10
c00237a4:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c00237a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237ad:	89 10                	mov    DWORD PTR [eax],edx
c00237af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237ba:	90                   	nop
c00237bb:	83 c4 0c             	add    esp,0xc
c00237be:	c3                   	ret    
c00237bf:	90                   	nop

c00237c0 <IDE::prepareInterrupt(unsigned char)>:
c00237c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237c5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237c9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237d1:	c3                   	ret    

c00237d2 <selectDrive(unsigned char, unsigned char)>:
c00237d2:	c3                   	ret    
c00237d3:	90                   	nop

c00237d4 <IDE::getBase(unsigned char)>:
c00237d4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00237d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237dd:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00237e5:	c3                   	ret    

c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00237e6:	55                   	push   ebp
c00237e7:	57                   	push   edi
c00237e8:	56                   	push   esi
c00237e9:	53                   	push   ebx
c00237ea:	83 ec 1c             	sub    esp,0x1c
c00237ed:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00237f1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00237f5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00237f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00237fc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023800:	80 f9 03             	cmp    cl,0x3
c0023803:	77 51                	ja     c0023856 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023809:	0f b6 f2             	movzx  esi,dl
c002380c:	0f b6 db             	movzx  ebx,bl
c002380f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023812:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023816:	83 ca 80             	or     edx,0xffffff80
c0023819:	0f b6 d2             	movzx  edx,dl
c002381c:	52                   	push   edx
c002381d:	6a 0c                	push   0xc
c002381f:	56                   	push   esi
c0023820:	57                   	push   edi
c0023821:	e8 c0 ff ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023826:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002382b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002382f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023833:	ee                   	out    dx,al
c0023834:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023839:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002383d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023841:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023845:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002384d:	83 c4 2c             	add    esp,0x2c
c0023850:	5b                   	pop    ebx
c0023851:	5e                   	pop    esi
c0023852:	5f                   	pop    edi
c0023853:	5d                   	pop    ebp
c0023854:	eb 90                	jmp    c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023856:	80 fb 07             	cmp    bl,0x7
c0023859:	77 12                	ja     c002386d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002385b:	0f b6 d2             	movzx  edx,dl
c002385e:	0f b6 db             	movzx  ebx,bl
c0023861:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023869:	89 da                	mov    edx,ebx
c002386b:	eb 2f                	jmp    c002389c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002386d:	80 fb 0d             	cmp    bl,0xd
c0023870:	77 13                	ja     c0023885 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023872:	0f b6 d2             	movzx  edx,dl
c0023875:	0f b6 db             	movzx  ebx,bl
c0023878:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002387f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023883:	eb 17                	jmp    c002389c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023885:	80 fb 15             	cmp    bl,0x15
c0023888:	77 13                	ja     c002389d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002388a:	0f b6 d2             	movzx  edx,dl
c002388d:	0f b6 db             	movzx  ebx,bl
c0023890:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023898:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002389c:	ee                   	out    dx,al
c002389d:	83 c4 1c             	add    esp,0x1c
c00238a0:	5b                   	pop    ebx
c00238a1:	5e                   	pop    esi
c00238a2:	5f                   	pop    edi
c00238a3:	5d                   	pop    ebp
c00238a4:	c3                   	ret    
c00238a5:	90                   	nop

c00238a6 <IDE::read(unsigned char, unsigned char)>:
c00238a6:	55                   	push   ebp
c00238a7:	57                   	push   edi
c00238a8:	56                   	push   esi
c00238a9:	53                   	push   ebx
c00238aa:	83 ec 1c             	sub    esp,0x1c
c00238ad:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238b1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238b5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238b8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238bc:	3c 03                	cmp    al,0x3
c00238be:	77 43                	ja     c0023903 <IDE::read(unsigned char, unsigned char)+0x5d>
c00238c0:	0f b6 f2             	movzx  esi,dl
c00238c3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238c6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238ca:	83 c8 80             	or     eax,0xffffff80
c00238cd:	0f b6 c0             	movzx  eax,al
c00238d0:	50                   	push   eax
c00238d1:	6a 0c                	push   0xc
c00238d3:	56                   	push   esi
c00238d4:	57                   	push   edi
c00238d5:	e8 0c ff ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238da:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00238df:	0f b6 c3             	movzx  eax,bl
c00238e2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00238e6:	ec                   	in     al,dx
c00238e7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238eb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00238f0:	52                   	push   edx
c00238f1:	6a 0c                	push   0xc
c00238f3:	56                   	push   esi
c00238f4:	57                   	push   edi
c00238f5:	e8 ec fe ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238fa:	83 c4 20             	add    esp,0x20
c00238fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023901:	eb 49                	jmp    c002394c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023903:	80 fb 07             	cmp    bl,0x7
c0023906:	77 12                	ja     c002391a <IDE::read(unsigned char, unsigned char)+0x74>
c0023908:	0f b6 d2             	movzx  edx,dl
c002390b:	0f b6 c3             	movzx  eax,bl
c002390e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023916:	89 c2                	mov    edx,eax
c0023918:	eb 31                	jmp    c002394b <IDE::read(unsigned char, unsigned char)+0xa5>
c002391a:	80 fb 0d             	cmp    bl,0xd
c002391d:	77 13                	ja     c0023932 <IDE::read(unsigned char, unsigned char)+0x8c>
c002391f:	0f b6 d2             	movzx  edx,dl
c0023922:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023929:	0f b6 d3             	movzx  edx,bl
c002392c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023930:	eb 19                	jmp    c002394b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023932:	31 c0                	xor    eax,eax
c0023934:	80 fb 15             	cmp    bl,0x15
c0023937:	77 13                	ja     c002394c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023939:	0f b6 d2             	movzx  edx,dl
c002393c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023944:	0f b6 d3             	movzx  edx,bl
c0023947:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002394b:	ec                   	in     al,dx
c002394c:	83 c4 1c             	add    esp,0x1c
c002394f:	5b                   	pop    ebx
c0023950:	5e                   	pop    esi
c0023951:	5f                   	pop    edi
c0023952:	5d                   	pop    ebp
c0023953:	c3                   	ret    

c0023954 <IDE::waitInterrupt(unsigned char)>:
c0023954:	55                   	push   ebp
c0023955:	57                   	push   edi
c0023956:	56                   	push   esi
c0023957:	53                   	push   ebx
c0023958:	31 db                	xor    ebx,ebx
c002395a:	83 ec 0c             	sub    esp,0xc
c002395d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023961:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023966:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002396e:	89 e8                	mov    eax,ebp
c0023970:	84 c0                	test   al,al
c0023972:	75 34                	jne    c00239a8 <IDE::waitInterrupt(unsigned char)+0x54>
c0023974:	52                   	push   edx
c0023975:	6a 0c                	push   0xc
c0023977:	56                   	push   esi
c0023978:	57                   	push   edi
c0023979:	e8 28 ff ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c002397e:	83 c4 10             	add    esp,0x10
c0023981:	a8 01                	test   al,0x1
c0023983:	75 2b                	jne    c00239b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023985:	f6 c3 04             	test   bl,0x4
c0023988:	75 16                	jne    c00239a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002398a:	83 fb 32             	cmp    ebx,0x32
c002398d:	7e 11                	jle    c00239a0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002398f:	50                   	push   eax
c0023990:	50                   	push   eax
c0023991:	6a 00                	push   0x0
c0023993:	68 80 96 98 00       	push   0x989680
c0023998:	e8 fa ad ff ff       	call   c001e797 <nanoSleep(unsigned long long)>
c002399d:	83 c4 10             	add    esp,0x10
c00239a0:	83 fb 3c             	cmp    ebx,0x3c
c00239a3:	74 0b                	je     c00239b0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00239a5:	43                   	inc    ebx
c00239a6:	eb be                	jmp    c0023966 <IDE::waitInterrupt(unsigned char)+0x12>
c00239a8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00239b0:	83 c4 0c             	add    esp,0xc
c00239b3:	89 e8                	mov    eax,ebp
c00239b5:	5b                   	pop    ebx
c00239b6:	5e                   	pop    esi
c00239b7:	5f                   	pop    edi
c00239b8:	5d                   	pop    ebp
c00239b9:	c3                   	ret    

c00239ba <ideChannel0IRQHandler(regs*, void*)>:
c00239ba:	83 ec 10             	sub    esp,0x10
c00239bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239c1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239c8:	6a 07                	push   0x7
c00239ca:	6a 00                	push   0x0
c00239cc:	50                   	push   eax
c00239cd:	e8 d4 fe ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00239d2:	83 c4 1c             	add    esp,0x1c
c00239d5:	c3                   	ret    

c00239d6 <ideChannel1IRQHandler(regs*, void*)>:
c00239d6:	83 ec 10             	sub    esp,0x10
c00239d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239dd:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00239e4:	6a 07                	push   0x7
c00239e6:	6a 01                	push   0x1
c00239e8:	50                   	push   eax
c00239e9:	e8 b8 fe ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00239ee:	83 c4 1c             	add    esp,0x1c
c00239f1:	c3                   	ret    

c00239f2 <IDE::enableIRQs(unsigned char, bool)>:
c00239f2:	57                   	push   edi
c00239f3:	56                   	push   esi
c00239f4:	be 04 00 00 00       	mov    esi,0x4
c00239f9:	53                   	push   ebx
c00239fa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00239ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a03:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a08:	0f 94 c0             	sete   al
c0023a0b:	d1 e0                	shl    eax,1
c0023a0d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a14:	0f b6 c0             	movzx  eax,al
c0023a17:	50                   	push   eax
c0023a18:	6a 0c                	push   0xc
c0023a1a:	57                   	push   edi
c0023a1b:	53                   	push   ebx
c0023a1c:	e8 c5 fd ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a21:	83 c4 10             	add    esp,0x10
c0023a24:	50                   	push   eax
c0023a25:	6a 0c                	push   0xc
c0023a27:	57                   	push   edi
c0023a28:	53                   	push   ebx
c0023a29:	e8 78 fe ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023a2e:	83 c4 10             	add    esp,0x10
c0023a31:	4e                   	dec    esi
c0023a32:	75 f0                	jne    c0023a24 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a34:	5b                   	pop    ebx
c0023a35:	5e                   	pop    esi
c0023a36:	5f                   	pop    edi
c0023a37:	c3                   	ret    

c0023a38 <IDE::open(int, int, void*)>:
c0023a38:	55                   	push   ebp
c0023a39:	57                   	push   edi
c0023a3a:	56                   	push   esi
c0023a3b:	53                   	push   ebx
c0023a3c:	83 ec 1c             	sub    esp,0x1c
c0023a3f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a43:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a4c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a55:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a5c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a63:	0f 85 b0 02 00 00    	jne    c0023d19 <IDE::open(int, int, void*)+0x2e1>
c0023a69:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a6f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a73:	83 e0 7f             	and    eax,0x7f
c0023a76:	3c 05                	cmp    al,0x5
c0023a78:	74 04                	je     c0023a7e <IDE::open(int, int, void*)+0x46>
c0023a7a:	3c 0f                	cmp    al,0xf
c0023a7c:	75 32                	jne    c0023ab0 <IDE::open(int, int, void*)+0x78>
c0023a7e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023a84:	83 e0 fc             	and    eax,0xfffffffc
c0023a87:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a8e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023a94:	83 e0 fc             	and    eax,0xfffffffc
c0023a97:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023a9e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023aa4:	83 e0 fc             	and    eax,0xfffffffc
c0023aa7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023aae:	eb 14                	jmp    c0023ac4 <IDE::open(int, int, void*)+0x8c>
c0023ab0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023aba:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ac4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023acb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023ad2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ad6:	89 c6                	mov    esi,eax
c0023ad8:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023add:	c1 e6 10             	shl    esi,0x10
c0023ae0:	89 e8                	mov    eax,ebp
c0023ae2:	89 fa                	mov    edx,edi
c0023ae4:	c1 e0 0b             	shl    eax,0xb
c0023ae7:	09 f0                	or     eax,esi
c0023ae9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023af0:	c1 e6 08             	shl    esi,0x8
c0023af3:	09 c6                	or     esi,eax
c0023af5:	89 f0                	mov    eax,esi
c0023af7:	0d 08 00 00 80       	or     eax,0x80000008
c0023afc:	ef                   	out    dx,eax
c0023afd:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b02:	89 ca                	mov    edx,ecx
c0023b04:	ed                   	in     eax,dx
c0023b05:	c1 e8 10             	shr    eax,0x10
c0023b08:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b0d:	0f 84 f5 00 00 00    	je     c0023c08 <IDE::open(int, int, void*)+0x1d0>
c0023b13:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b19:	89 fa                	mov    edx,edi
c0023b1b:	89 f0                	mov    eax,esi
c0023b1d:	ef                   	out    dx,eax
c0023b1e:	b0 fe                	mov    al,0xfe
c0023b20:	89 ca                	mov    edx,ecx
c0023b22:	ee                   	out    dx,al
c0023b23:	89 f0                	mov    eax,esi
c0023b25:	89 fa                	mov    edx,edi
c0023b27:	ef                   	out    dx,eax
c0023b28:	89 ca                	mov    edx,ecx
c0023b2a:	ed                   	in     eax,dx
c0023b2b:	3c fe                	cmp    al,0xfe
c0023b2d:	0f 85 a9 00 00 00    	jne    c0023bdc <IDE::open(int, int, void*)+0x1a4>
c0023b33:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0023b39:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b40:	74 33                	je     c0023b75 <IDE::open(int, int, void*)+0x13d>
c0023b42:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b48:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b4c:	40                   	inc    eax
c0023b4d:	83 ec 0c             	sub    esp,0xc
c0023b50:	0f b6 c0             	movzx  eax,al
c0023b53:	50                   	push   eax
c0023b54:	55                   	push   ebp
c0023b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b59:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b5f:	51                   	push   ecx
c0023b60:	e8 45 48 ff ff       	call   c00183aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b65:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b6a:	83 c4 1c             	add    esp,0x1c
c0023b6d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b73:	eb 0a                	jmp    c0023b7f <IDE::open(int, int, void*)+0x147>
c0023b75:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023b7f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023b86:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023b8d:	c1 e1 10             	shl    ecx,0x10
c0023b90:	c1 e0 08             	shl    eax,0x8
c0023b93:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b98:	09 c1                	or     ecx,eax
c0023b9a:	89 fa                	mov    edx,edi
c0023b9c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023ba3:	c1 e0 0b             	shl    eax,0xb
c0023ba6:	09 c1                	or     ecx,eax
c0023ba8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023bae:	89 c8                	mov    eax,ecx
c0023bb0:	ef                   	out    dx,eax
c0023bb1:	be fc 0c 00 00       	mov    esi,0xcfc
c0023bb6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023bbc:	89 f2                	mov    edx,esi
c0023bbe:	ee                   	out    dx,al
c0023bbf:	89 c8                	mov    eax,ecx
c0023bc1:	89 fa                	mov    edx,edi
c0023bc3:	ef                   	out    dx,eax
c0023bc4:	89 f2                	mov    edx,esi
c0023bc6:	ed                   	in     eax,dx
c0023bc7:	0f b6 c0             	movzx  eax,al
c0023bca:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023bd0:	74 46                	je     c0023c18 <IDE::open(int, int, void*)+0x1e0>
c0023bd2:	83 ec 0c             	sub    esp,0xc
c0023bd5:	68 e0 d4 02 c0       	push   0xc002d4e0
c0023bda:	eb 34                	jmp    c0023c10 <IDE::open(int, int, void*)+0x1d8>
c0023bdc:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023be5:	75 17                	jne    c0023bfe <IDE::open(int, int, void*)+0x1c6>
c0023be7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023bec:	74 07                	je     c0023bf5 <IDE::open(int, int, void*)+0x1bd>
c0023bee:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023bf3:	75 09                	jne    c0023bfe <IDE::open(int, int, void*)+0x1c6>
c0023bf5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023bfc:	eb 1a                	jmp    c0023c18 <IDE::open(int, int, void*)+0x1e0>
c0023bfe:	83 ec 0c             	sub    esp,0xc
c0023c01:	68 e8 d4 02 c0       	push   0xc002d4e8
c0023c06:	eb 08                	jmp    c0023c10 <IDE::open(int, int, void*)+0x1d8>
c0023c08:	83 ec 0c             	sub    esp,0xc
c0023c0b:	68 19 d5 02 c0       	push   0xc002d519
c0023c10:	e8 88 6c ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0023c15:	83 c4 10             	add    esp,0x10
c0023c18:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c1f:	79 1a                	jns    c0023c3b <IDE::open(int, int, void*)+0x203>
c0023c21:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c27:	83 e0 fc             	and    eax,0xfffffffc
c0023c2a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c31:	83 c0 08             	add    eax,0x8
c0023c34:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c3b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c41:	89 c2                	mov    edx,eax
c0023c43:	83 e2 0f             	and    edx,0xf
c0023c46:	66 83 fa 08          	cmp    dx,0x8
c0023c4a:	75 0a                	jne    c0023c56 <IDE::open(int, int, void*)+0x21e>
c0023c4c:	83 e8 02             	sub    eax,0x2
c0023c4f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c56:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c5c:	89 c2                	mov    edx,eax
c0023c5e:	83 e2 0f             	and    edx,0xf
c0023c61:	66 83 fa 08          	cmp    dx,0x8
c0023c65:	75 0a                	jne    c0023c71 <IDE::open(int, int, void*)+0x239>
c0023c67:	83 e8 02             	sub    eax,0x2
c0023c6a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c71:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023c78:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023c7f:	89 d0                	mov    eax,edx
c0023c81:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c84:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c88:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023c8c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023c8f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023c94:	0f b6 c9             	movzx  ecx,cl
c0023c97:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023c9e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023ca1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023ca5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023ca9:	8d 50 02             	lea    edx,[eax+0x2]
c0023cac:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cb1:	0f b6 d2             	movzx  edx,dl
c0023cb4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023cba:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023cbd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cc1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023cc5:	8d 48 03             	lea    ecx,[eax+0x3]
c0023cc8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ccd:	0f b6 c9             	movzx  ecx,cl
c0023cd0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023cd6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cd9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023cdd:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023ce1:	8d 50 04             	lea    edx,[eax+0x4]
c0023ce4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023cea:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cef:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023cf6:	66 85 f6             	test   si,si
c0023cf9:	74 3e                	je     c0023d39 <IDE::open(int, int, void*)+0x301>
c0023cfb:	0f b6 d2             	movzx  edx,dl
c0023cfe:	83 c0 05             	add    eax,0x5
c0023d01:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d04:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d08:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d0c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d12:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d17:	eb 20                	jmp    c0023d39 <IDE::open(int, int, void*)+0x301>
c0023d19:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d23:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d2d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d34:	e9 02 ff ff ff       	jmp    c0023c3b <IDE::open(int, int, void*)+0x203>
c0023d39:	52                   	push   edx
c0023d3a:	52                   	push   edx
c0023d3b:	6a 00                	push   0x0
c0023d3d:	53                   	push   ebx
c0023d3e:	e8 7d fa ff ff       	call   c00237c0 <IDE::prepareInterrupt(unsigned char)>
c0023d43:	59                   	pop    ecx
c0023d44:	5e                   	pop    esi
c0023d45:	6a 01                	push   0x1
c0023d47:	53                   	push   ebx
c0023d48:	e8 73 fa ff ff       	call   c00237c0 <IDE::prepareInterrupt(unsigned char)>
c0023d4d:	83 c4 0c             	add    esp,0xc
c0023d50:	6a 00                	push   0x0
c0023d52:	6a 00                	push   0x0
c0023d54:	53                   	push   ebx
c0023d55:	e8 98 fc ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0023d5a:	83 c4 0c             	add    esp,0xc
c0023d5d:	6a 00                	push   0x0
c0023d5f:	6a 01                	push   0x1
c0023d61:	53                   	push   ebx
c0023d62:	e8 8b fc ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0023d67:	83 c4 10             	add    esp,0x10
c0023d6a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d71:	74 40                	je     c0023db3 <IDE::open(int, int, void*)+0x37b>
c0023d73:	83 ec 0c             	sub    esp,0xc
c0023d76:	68 43 d5 02 c0       	push   0xc002d543
c0023d7b:	e8 61 f1 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0023d80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d83:	6a 01                	push   0x1
c0023d85:	68 ba 39 02 c0       	push   0xc00239ba
c0023d8a:	6a 0e                	push   0xe
c0023d8c:	53                   	push   ebx
c0023d8d:	e8 08 05 ff ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023d92:	83 c4 14             	add    esp,0x14
c0023d95:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023d9b:	53                   	push   ebx
c0023d9c:	6a 01                	push   0x1
c0023d9e:	68 d6 39 02 c0       	push   0xc00239d6
c0023da3:	6a 0f                	push   0xf
c0023da5:	53                   	push   ebx
c0023da6:	e8 ef 04 ff ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dab:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023db1:	eb 4a                	jmp    c0023dfd <IDE::open(int, int, void*)+0x3c5>
c0023db3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023dbd:	50                   	push   eax
c0023dbe:	6a 0f                	push   0xf
c0023dc0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023dc6:	68 5f d5 02 c0       	push   0xc002d55f
c0023dcb:	e8 11 f1 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0023dd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dd3:	6a 00                	push   0x0
c0023dd5:	68 ba 39 02 c0       	push   0xc00239ba
c0023dda:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023de0:	53                   	push   ebx
c0023de1:	e8 b4 04 ff ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023de6:	83 c4 14             	add    esp,0x14
c0023de9:	53                   	push   ebx
c0023dea:	6a 00                	push   0x0
c0023dec:	68 d6 39 02 c0       	push   0xc00239d6
c0023df1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023df7:	53                   	push   ebx
c0023df8:	e8 9d 04 ff ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dfd:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023dff:	83 c4 20             	add    esp,0x20
c0023e02:	83 ec 0c             	sub    esp,0xc
c0023e05:	53                   	push   ebx
c0023e06:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e09:	83 c4 0c             	add    esp,0xc
c0023e0c:	6a 07                	push   0x7
c0023e0e:	6a 00                	push   0x0
c0023e10:	53                   	push   ebx
c0023e11:	e8 90 fa ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023e16:	83 c4 0c             	add    esp,0xc
c0023e19:	6a 07                	push   0x7
c0023e1b:	6a 01                	push   0x1
c0023e1d:	53                   	push   ebx
c0023e1e:	e8 83 fa ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023e23:	83 c4 0c             	add    esp,0xc
c0023e26:	6a 01                	push   0x1
c0023e28:	6a 00                	push   0x0
c0023e2a:	53                   	push   ebx
c0023e2b:	e8 c2 fb ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0023e30:	83 c4 0c             	add    esp,0xc
c0023e33:	6a 01                	push   0x1
c0023e35:	6a 01                	push   0x1
c0023e37:	53                   	push   ebx
c0023e38:	e8 b5 fb ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0023e3d:	83 c4 2c             	add    esp,0x2c
c0023e40:	31 c0                	xor    eax,eax
c0023e42:	5b                   	pop    ebx
c0023e43:	5e                   	pop    esi
c0023e44:	5f                   	pop    edi
c0023e45:	5d                   	pop    ebp
c0023e46:	c3                   	ret    
c0023e47:	90                   	nop

c0023e48 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e48:	55                   	push   ebp
c0023e49:	57                   	push   edi
c0023e4a:	56                   	push   esi
c0023e4b:	53                   	push   ebx
c0023e4c:	83 ec 1c             	sub    esp,0x1c
c0023e4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e57:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e5a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e5e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e62:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e66:	80 fa 03             	cmp    dl,0x3
c0023e69:	77 5d                	ja     c0023ec8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e6b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e6f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e73:	0f b6 db             	movzx  ebx,bl
c0023e76:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023e79:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023e7d:	83 ca 80             	or     edx,0xffffff80
c0023e80:	0f b6 d2             	movzx  edx,dl
c0023e83:	52                   	push   edx
c0023e84:	6a 0c                	push   0xc
c0023e86:	53                   	push   ebx
c0023e87:	56                   	push   esi
c0023e88:	e8 59 f9 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e8d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023e92:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e96:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023e9a:	0f b6 c0             	movzx  eax,al
c0023e9d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023ea1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023ea3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023ea8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023eac:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023eb0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023eb4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ebc:	83 c4 2c             	add    esp,0x2c
c0023ebf:	5b                   	pop    ebx
c0023ec0:	5e                   	pop    esi
c0023ec1:	5f                   	pop    edi
c0023ec2:	5d                   	pop    ebp
c0023ec3:	e9 1e f9 ff ff       	jmp    c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ec8:	3c 07                	cmp    al,0x7
c0023eca:	77 10                	ja     c0023edc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023ecc:	0f b6 db             	movzx  ebx,bl
c0023ecf:	0f b6 d0             	movzx  edx,al
c0023ed2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023eda:	eb 2d                	jmp    c0023f09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023edc:	3c 0d                	cmp    al,0xd
c0023ede:	77 13                	ja     c0023ef3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023ee0:	0f b6 db             	movzx  ebx,bl
c0023ee3:	0f b6 c0             	movzx  eax,al
c0023ee6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023eed:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023ef1:	eb 16                	jmp    c0023f09 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023ef3:	3c 15                	cmp    al,0x15
c0023ef5:	77 14                	ja     c0023f0b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023ef7:	0f b6 db             	movzx  ebx,bl
c0023efa:	0f b6 c0             	movzx  eax,al
c0023efd:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f05:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f09:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f0b:	83 c4 1c             	add    esp,0x1c
c0023f0e:	5b                   	pop    ebx
c0023f0f:	5e                   	pop    esi
c0023f10:	5f                   	pop    edi
c0023f11:	5d                   	pop    ebp
c0023f12:	c3                   	ret    
c0023f13:	90                   	nop

c0023f14 <IDE::detect()>:
c0023f14:	55                   	push   ebp
c0023f15:	57                   	push   edi
c0023f16:	56                   	push   esi
c0023f17:	53                   	push   ebx
c0023f18:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f1e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f25:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f2c:	0f 85 be 02 00 00    	jne    c00241f0 <IDE::detect()+0x2dc>
c0023f32:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f39:	31 f6                	xor    esi,esi
c0023f3b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f43:	31 ed                	xor    ebp,ebp
c0023f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f49:	c1 e0 06             	shl    eax,0x6
c0023f4c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f54:	89 e8                	mov    eax,ebp
c0023f56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f5a:	c1 e0 04             	shl    eax,0x4
c0023f5d:	83 c8 a0             	or     eax,0xffffffa0
c0023f60:	0f b6 c0             	movzx  eax,al
c0023f63:	50                   	push   eax
c0023f64:	6a 06                	push   0x6
c0023f66:	56                   	push   esi
c0023f67:	53                   	push   ebx
c0023f68:	e8 79 f8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f6d:	83 c4 0c             	add    esp,0xc
c0023f70:	6a 0c                	push   0xc
c0023f72:	56                   	push   esi
c0023f73:	53                   	push   ebx
c0023f74:	e8 2d f9 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023f79:	83 c4 0c             	add    esp,0xc
c0023f7c:	6a 0c                	push   0xc
c0023f7e:	56                   	push   esi
c0023f7f:	53                   	push   ebx
c0023f80:	e8 21 f9 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023f85:	83 c4 0c             	add    esp,0xc
c0023f88:	6a 0c                	push   0xc
c0023f8a:	56                   	push   esi
c0023f8b:	53                   	push   ebx
c0023f8c:	e8 15 f9 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023f91:	83 c4 0c             	add    esp,0xc
c0023f94:	6a 0c                	push   0xc
c0023f96:	56                   	push   esi
c0023f97:	53                   	push   ebx
c0023f98:	e8 09 f9 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023f9d:	68 ec 00 00 00       	push   0xec
c0023fa2:	6a 07                	push   0x7
c0023fa4:	56                   	push   esi
c0023fa5:	53                   	push   ebx
c0023fa6:	e8 3b f8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fab:	83 c4 1c             	add    esp,0x1c
c0023fae:	6a 0c                	push   0xc
c0023fb0:	56                   	push   esi
c0023fb1:	53                   	push   ebx
c0023fb2:	e8 ef f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023fb7:	83 c4 0c             	add    esp,0xc
c0023fba:	6a 0c                	push   0xc
c0023fbc:	56                   	push   esi
c0023fbd:	53                   	push   ebx
c0023fbe:	e8 e3 f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023fc3:	83 c4 0c             	add    esp,0xc
c0023fc6:	6a 0c                	push   0xc
c0023fc8:	56                   	push   esi
c0023fc9:	53                   	push   ebx
c0023fca:	e8 d7 f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023fcf:	83 c4 0c             	add    esp,0xc
c0023fd2:	6a 0c                	push   0xc
c0023fd4:	56                   	push   esi
c0023fd5:	53                   	push   ebx
c0023fd6:	e8 cb f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023fdb:	83 c4 0c             	add    esp,0xc
c0023fde:	6a 0c                	push   0xc
c0023fe0:	56                   	push   esi
c0023fe1:	53                   	push   ebx
c0023fe2:	e8 bf f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023fe7:	83 c4 10             	add    esp,0x10
c0023fea:	84 c0                	test   al,al
c0023fec:	0f 84 8b 01 00 00    	je     c002417d <IDE::detect()+0x269>
c0023ff2:	31 ff                	xor    edi,edi
c0023ff4:	50                   	push   eax
c0023ff5:	6a 0c                	push   0xc
c0023ff7:	56                   	push   esi
c0023ff8:	53                   	push   ebx
c0023ff9:	e8 a8 f8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0023ffe:	83 c4 10             	add    esp,0x10
c0024001:	a8 01                	test   al,0x1
c0024003:	0f 85 8e 01 00 00    	jne    c0024197 <IDE::detect()+0x283>
c0024009:	84 c0                	test   al,al
c002400b:	78 04                	js     c0024011 <IDE::detect()+0xfd>
c002400d:	a8 08                	test   al,0x8
c002400f:	75 27                	jne    c0024038 <IDE::detect()+0x124>
c0024011:	47                   	inc    edi
c0024012:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024018:	7e da                	jle    c0023ff4 <IDE::detect()+0xe0>
c002401a:	50                   	push   eax
c002401b:	50                   	push   eax
c002401c:	6a 00                	push   0x0
c002401e:	68 40 4b 4c 00       	push   0x4c4b40
c0024023:	e8 6f a7 ff ff       	call   c001e797 <nanoSleep(unsigned long long)>
c0024028:	83 c4 10             	add    esp,0x10
c002402b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024031:	75 c1                	jne    c0023ff4 <IDE::detect()+0xe0>
c0024033:	e9 5f 01 00 00       	jmp    c0024197 <IDE::detect()+0x283>
c0024038:	31 c9                	xor    ecx,ecx
c002403a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002403e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024042:	83 ec 0c             	sub    esp,0xc
c0024045:	68 80 00 00 00       	push   0x80
c002404a:	57                   	push   edi
c002404b:	6a 00                	push   0x0
c002404d:	56                   	push   esi
c002404e:	53                   	push   ebx
c002404f:	e8 f4 fd ff ff       	call   c0023e48 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024054:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024059:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002405d:	89 d1                	mov    ecx,edx
c002405f:	c1 e0 06             	shl    eax,0x6
c0024062:	01 d8                	add    eax,ebx
c0024064:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002406b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024072:	89 f2                	mov    edx,esi
c0024074:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002407a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002407e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024084:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024088:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002408f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0024097:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002409e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00240a6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00240ac:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00240b3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240b9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240bd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240c1:	83 c4 20             	add    esp,0x20
c00240c4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240c7:	83 c0 02             	add    eax,0x2
c00240ca:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240d0:	83 c7 02             	add    edi,0x2
c00240d3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00240d6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00240dc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00240e0:	75 e2                	jne    c00240c4 <IDE::detect()+0x1b0>
c00240e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240e6:	c1 e0 06             	shl    eax,0x6
c00240e9:	01 d8                	add    eax,ebx
c00240eb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00240f1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00240f8:	66 c1 ea 09          	shr    dx,0x9
c00240fc:	83 e2 01             	and    edx,0x1
c00240ff:	84 c9                	test   cl,cl
c0024101:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024107:	75 2f                	jne    c0024138 <IDE::detect()+0x224>
c0024109:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002410f:	85 c0                	test   eax,eax
c0024111:	74 66                	je     c0024179 <IDE::detect()+0x265>
c0024113:	50                   	push   eax
c0024114:	55                   	push   ebp
c0024115:	56                   	push   esi
c0024116:	68 7b d5 02 c0       	push   0xc002d57b
c002411b:	e8 c1 ed fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024120:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024127:	e8 fe b7 fe ff       	call   c000f92a <malloc>
c002412c:	89 c7                	mov    edi,eax
c002412e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024131:	e8 78 06 00 00       	call   c00247ae <ATA::ATA()>
c0024136:	eb 28                	jmp    c0024160 <IDE::detect()+0x24c>
c0024138:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002413e:	55                   	push   ebp
c002413f:	56                   	push   esi
c0024140:	68 aa d5 02 c0       	push   0xc002d5aa
c0024145:	e8 97 ed fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002414a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024151:	e8 d4 b7 fe ff       	call   c000f92a <malloc>
c0024156:	89 c7                	mov    edi,eax
c0024158:	89 04 24             	mov    DWORD PTR [esp],eax
c002415b:	e8 8e 0c 00 00       	call   c0024dee <ATAPI::ATAPI()>
c0024160:	5a                   	pop    edx
c0024161:	59                   	pop    ecx
c0024162:	57                   	push   edi
c0024163:	53                   	push   ebx
c0024164:	e8 ad 01 ff ff       	call   c0014316 <Device::addChild(Device*)>
c0024169:	8b 07                	mov    eax,DWORD PTR [edi]
c002416b:	53                   	push   ebx
c002416c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024170:	6a 00                	push   0x0
c0024172:	57                   	push   edi
c0024173:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024176:	83 c4 20             	add    esp,0x20
c0024179:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002417d:	4d                   	dec    ebp
c002417e:	74 0a                	je     c002418a <IDE::detect()+0x276>
c0024180:	bd 01 00 00 00       	mov    ebp,0x1
c0024185:	e9 bb fd ff ff       	jmp    c0023f45 <IDE::detect()+0x31>
c002418a:	4e                   	dec    esi
c002418b:	74 63                	je     c00241f0 <IDE::detect()+0x2dc>
c002418d:	be 01 00 00 00       	mov    esi,0x1
c0024192:	e9 ac fd ff ff       	jmp    c0023f43 <IDE::detect()+0x2f>
c0024197:	50                   	push   eax
c0024198:	6a 04                	push   0x4
c002419a:	56                   	push   esi
c002419b:	53                   	push   ebx
c002419c:	e8 05 f7 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00241a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00241a5:	83 c4 0c             	add    esp,0xc
c00241a8:	6a 05                	push   0x5
c00241aa:	56                   	push   esi
c00241ab:	53                   	push   ebx
c00241ac:	e8 f5 f6 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00241b1:	83 c4 10             	add    esp,0x10
c00241b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241b8:	80 fa 14             	cmp    dl,0x14
c00241bb:	75 04                	jne    c00241c1 <IDE::detect()+0x2ad>
c00241bd:	3c eb                	cmp    al,0xeb
c00241bf:	eb 07                	jmp    c00241c8 <IDE::detect()+0x2b4>
c00241c1:	3c 96                	cmp    al,0x96
c00241c3:	75 b8                	jne    c002417d <IDE::detect()+0x269>
c00241c5:	80 fa 69             	cmp    dl,0x69
c00241c8:	75 b3                	jne    c002417d <IDE::detect()+0x269>
c00241ca:	68 a1 00 00 00       	push   0xa1
c00241cf:	6a 07                	push   0x7
c00241d1:	56                   	push   esi
c00241d2:	53                   	push   ebx
c00241d3:	e8 0e f6 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241d8:	5f                   	pop    edi
c00241d9:	58                   	pop    eax
c00241da:	6a 00                	push   0x0
c00241dc:	68 40 42 0f 00       	push   0xf4240
c00241e1:	e8 b1 a5 ff ff       	call   c001e797 <nanoSleep(unsigned long long)>
c00241e6:	83 c4 10             	add    esp,0x10
c00241e9:	b1 01                	mov    cl,0x1
c00241eb:	e9 4a fe ff ff       	jmp    c002403a <IDE::detect()+0x126>
c00241f0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00241f6:	5b                   	pop    ebx
c00241f7:	5e                   	pop    esi
c00241f8:	5f                   	pop    edi
c00241f9:	5d                   	pop    ebp
c00241fa:	c3                   	ret    
c00241fb:	90                   	nop

c00241fc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00241fc:	55                   	push   ebp
c00241fd:	57                   	push   edi
c00241fe:	56                   	push   esi
c00241ff:	53                   	push   ebx
c0024200:	83 ec 1c             	sub    esp,0x1c
c0024203:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024207:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002420b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002420f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024213:	88 c3                	mov    bl,al
c0024215:	84 c0                	test   al,al
c0024217:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002421b:	0f 84 67 01 00 00    	je     c0024388 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024221:	83 ec 0c             	sub    esp,0xc
c0024224:	68 db d5 02 c0       	push   0xc002d5db
c0024229:	e8 b3 ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002422e:	83 c4 10             	add    esp,0x10
c0024231:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024235:	3c 01                	cmp    al,0x1
c0024237:	75 17                	jne    c0024250 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024239:	83 ec 0c             	sub    esp,0xc
c002423c:	b3 13                	mov    bl,0x13
c002423e:	68 e7 d5 02 c0       	push   0xc002d5e7
c0024243:	e8 99 ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024248:	83 c4 10             	add    esp,0x10
c002424b:	e9 25 01 00 00       	jmp    c0024375 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024250:	3c 02                	cmp    al,0x2
c0024252:	0f 85 ef 00 00 00    	jne    c0024347 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024258:	d1 e6                	shl    esi,1
c002425a:	09 ee                	or     esi,ebp
c002425c:	52                   	push   edx
c002425d:	89 f0                	mov    eax,esi
c002425f:	6a 01                	push   0x1
c0024261:	0f b6 f0             	movzx  esi,al
c0024264:	c1 e6 06             	shl    esi,0x6
c0024267:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002426f:	50                   	push   eax
c0024270:	57                   	push   edi
c0024271:	e8 30 f6 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0024276:	83 c4 10             	add    esp,0x10
c0024279:	89 c6                	mov    esi,eax
c002427b:	a8 01                	test   al,0x1
c002427d:	74 12                	je     c0024291 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002427f:	83 ec 0c             	sub    esp,0xc
c0024282:	b3 07                	mov    bl,0x7
c0024284:	68 fc d5 02 c0       	push   0xc002d5fc
c0024289:	e8 53 ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002428e:	83 c4 10             	add    esp,0x10
c0024291:	f7 c6 02 00 00 00    	test   esi,0x2
c0024297:	74 12                	je     c00242ab <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0024299:	83 ec 0c             	sub    esp,0xc
c002429c:	b3 03                	mov    bl,0x3
c002429e:	68 1a d6 02 c0       	push   0xc002d61a
c00242a3:	e8 39 ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00242a8:	83 c4 10             	add    esp,0x10
c00242ab:	f7 c6 04 00 00 00    	test   esi,0x4
c00242b1:	74 12                	je     c00242c5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00242b3:	83 ec 0c             	sub    esp,0xc
c00242b6:	b3 14                	mov    bl,0x14
c00242b8:	68 3a d6 02 c0       	push   0xc002d63a
c00242bd:	e8 1f ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00242c2:	83 c4 10             	add    esp,0x10
c00242c5:	f7 c6 08 00 00 00    	test   esi,0x8
c00242cb:	74 12                	je     c00242df <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242cd:	83 ec 0c             	sub    esp,0xc
c00242d0:	b3 03                	mov    bl,0x3
c00242d2:	68 1a d6 02 c0       	push   0xc002d61a
c00242d7:	e8 05 ec fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00242dc:	83 c4 10             	add    esp,0x10
c00242df:	f7 c6 10 00 00 00    	test   esi,0x10
c00242e5:	74 12                	je     c00242f9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00242e7:	83 ec 0c             	sub    esp,0xc
c00242ea:	b3 15                	mov    bl,0x15
c00242ec:	68 52 d6 02 c0       	push   0xc002d652
c00242f1:	e8 eb eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00242f6:	83 c4 10             	add    esp,0x10
c00242f9:	f7 c6 20 00 00 00    	test   esi,0x20
c00242ff:	74 12                	je     c0024313 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024301:	83 ec 0c             	sub    esp,0xc
c0024304:	b3 03                	mov    bl,0x3
c0024306:	68 1a d6 02 c0       	push   0xc002d61a
c002430b:	e8 d1 eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024310:	83 c4 10             	add    esp,0x10
c0024313:	f7 c6 40 00 00 00    	test   esi,0x40
c0024319:	74 12                	je     c002432d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002431b:	83 ec 0c             	sub    esp,0xc
c002431e:	b3 16                	mov    bl,0x16
c0024320:	68 6c d6 02 c0       	push   0xc002d66c
c0024325:	e8 b7 eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002432a:	83 c4 10             	add    esp,0x10
c002432d:	89 f0                	mov    eax,esi
c002432f:	84 c0                	test   al,al
c0024331:	79 42                	jns    c0024375 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024333:	83 ec 0c             	sub    esp,0xc
c0024336:	b3 0d                	mov    bl,0xd
c0024338:	68 8d d6 02 c0       	push   0xc002d68d
c002433d:	e8 9f eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024342:	83 c4 10             	add    esp,0x10
c0024345:	eb 2e                	jmp    c0024375 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024347:	3c 03                	cmp    al,0x3
c0024349:	75 14                	jne    c002435f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002434b:	83 ec 0c             	sub    esp,0xc
c002434e:	b3 17                	mov    bl,0x17
c0024350:	68 a1 d6 02 c0       	push   0xc002d6a1
c0024355:	e8 87 eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002435a:	83 c4 10             	add    esp,0x10
c002435d:	eb 16                	jmp    c0024375 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002435f:	3c 04                	cmp    al,0x4
c0024361:	75 12                	jne    c0024375 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024363:	83 ec 0c             	sub    esp,0xc
c0024366:	b3 08                	mov    bl,0x8
c0024368:	68 b7 d6 02 c0       	push   0xc002d6b7
c002436d:	e8 6f eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024372:	83 c4 10             	add    esp,0x10
c0024375:	50                   	push   eax
c0024376:	50                   	push   eax
c0024377:	0f b6 c3             	movzx  eax,bl
c002437a:	50                   	push   eax
c002437b:	68 cf d6 02 c0       	push   0xc002d6cf
c0024380:	e8 5c eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024385:	83 c4 10             	add    esp,0x10
c0024388:	83 c4 1c             	add    esp,0x1c
c002438b:	88 d8                	mov    al,bl
c002438d:	5b                   	pop    ebx
c002438e:	5e                   	pop    esi
c002438f:	5f                   	pop    edi
c0024390:	5d                   	pop    ebp
c0024391:	c3                   	ret    

c0024392 <IDE::polling(unsigned char, unsigned int)>:
c0024392:	57                   	push   edi
c0024393:	56                   	push   esi
c0024394:	53                   	push   ebx
c0024395:	bb 04 00 00 00       	mov    ebx,0x4
c002439a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c002439e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00243a3:	52                   	push   edx
c00243a4:	6a 0c                	push   0xc
c00243a6:	56                   	push   esi
c00243a7:	57                   	push   edi
c00243a8:	e8 f9 f4 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00243ad:	83 c4 10             	add    esp,0x10
c00243b0:	4b                   	dec    ebx
c00243b1:	75 f0                	jne    c00243a3 <IDE::polling(unsigned char, unsigned int)+0x11>
c00243b3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243b8:	50                   	push   eax
c00243b9:	6a 0c                	push   0xc
c00243bb:	56                   	push   esi
c00243bc:	57                   	push   edi
c00243bd:	e8 e4 f4 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c00243c2:	83 c4 10             	add    esp,0x10
c00243c5:	a8 01                	test   al,0x1
c00243c7:	74 12                	je     c00243db <IDE::polling(unsigned char, unsigned int)+0x49>
c00243c9:	83 ec 0c             	sub    esp,0xc
c00243cc:	68 e9 d6 02 c0       	push   0xc002d6e9
c00243d1:	e8 0b eb fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00243d6:	83 c4 10             	add    esp,0x10
c00243d9:	eb 17                	jmp    c00243f2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243db:	a8 20                	test   al,0x20
c00243dd:	75 0f                	jne    c00243ee <IDE::polling(unsigned char, unsigned int)+0x5c>
c00243df:	4b                   	dec    ebx
c00243e0:	74 10                	je     c00243f2 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243e2:	84 c0                	test   al,al
c00243e4:	78 d2                	js     c00243b8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243e6:	a8 08                	test   al,0x8
c00243e8:	74 ce                	je     c00243b8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243ea:	31 c0                	xor    eax,eax
c00243ec:	eb 06                	jmp    c00243f4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00243ee:	b0 01                	mov    al,0x1
c00243f0:	eb 02                	jmp    c00243f4 <IDE::polling(unsigned char, unsigned int)+0x62>
c00243f2:	b0 02                	mov    al,0x2
c00243f4:	5b                   	pop    ebx
c00243f5:	5e                   	pop    esi
c00243f6:	5f                   	pop    edi
c00243f7:	c3                   	ret    

c00243f8 <SATABus::close(int, int, void*)>:
c00243f8:	31 c0                	xor    eax,eax
c00243fa:	c3                   	ret    
c00243fb:	90                   	nop

c00243fc <SATABus::detect()>:
c00243fc:	c3                   	ret    
c00243fd:	90                   	nop

c00243fe <SATABus::SATABus()>:
c00243fe:	83 ec 0c             	sub    esp,0xc
c0024401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024405:	83 ec 08             	sub    esp,0x8
c0024408:	68 2c d7 02 c0       	push   0xc002d72c
c002440d:	50                   	push   eax
c002440e:	e8 9d 02 ff ff       	call   c00146b0 <HardDiskController::HardDiskController(char const*)>
c0024413:	83 c4 10             	add    esp,0x10
c0024416:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c002441b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002441f:	89 10                	mov    DWORD PTR [eax],edx
c0024421:	83 ec 0c             	sub    esp,0xc
c0024424:	6a 50                	push   0x50
c0024426:	e8 50 bc fe ff       	call   c001007b <Phys::allocateContiguousPages(int)>
c002442b:	83 c4 10             	add    esp,0x10
c002442e:	89 c2                	mov    edx,eax
c0024430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024434:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002443a:	83 ec 0c             	sub    esp,0xc
c002443d:	6a 50                	push   0x50
c002443f:	e8 97 d6 fe ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0024444:	83 c4 10             	add    esp,0x10
c0024447:	89 c2                	mov    edx,eax
c0024449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002444d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024453:	a1 d0 ef 02 c0       	mov    eax,ds:0xc002efd0
c0024458:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002445c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024462:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024466:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002446c:	83 ec 0c             	sub    esp,0xc
c002446f:	6a 03                	push   0x3
c0024471:	6a 50                	push   0x50
c0024473:	51                   	push   ecx
c0024474:	52                   	push   edx
c0024475:	50                   	push   eax
c0024476:	e8 8d e1 fe ff       	call   c0012608 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002447b:	83 c4 20             	add    esp,0x20
c002447e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024482:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024488:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002448c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024492:	83 ec 04             	sub    esp,0x4
c0024495:	52                   	push   edx
c0024496:	50                   	push   eax
c0024497:	68 50 d7 02 c0       	push   0xc002d750
c002449c:	e8 40 ea fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00244a1:	83 c4 10             	add    esp,0x10
c00244a4:	90                   	nop
c00244a5:	83 c4 0c             	add    esp,0xc
c00244a8:	c3                   	ret    
c00244a9:	90                   	nop

c00244aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00244aa:	83 ec 0c             	sub    esp,0xc
c00244ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244b1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00244b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244b7:	09 c2                	or     edx,eax
c00244b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244c5:	31 c0                	xor    eax,eax
c00244c7:	c1 e9 08             	shr    ecx,0x8
c00244ca:	83 e1 0f             	and    ecx,0xf
c00244cd:	39 c8                	cmp    eax,ecx
c00244cf:	74 0a                	je     c00244db <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244d1:	f6 c2 01             	test   dl,0x1
c00244d4:	74 18                	je     c00244ee <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00244d6:	d1 ea                	shr    edx,1
c00244d8:	40                   	inc    eax
c00244d9:	eb f2                	jmp    c00244cd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00244db:	83 ec 0c             	sub    esp,0xc
c00244de:	68 74 d7 02 c0       	push   0xc002d774
c00244e3:	e8 b5 63 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00244e8:	83 c4 10             	add    esp,0x10
c00244eb:	83 c8 ff             	or     eax,0xffffffff
c00244ee:	83 c4 0c             	add    esp,0xc
c00244f1:	c3                   	ret    

c00244f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c00244f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00244f6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00244f9:	89 c2                	mov    edx,eax
c00244fb:	c1 ea 08             	shr    edx,0x8
c00244fe:	83 e2 0f             	and    edx,0xf
c0024501:	fe ca                	dec    dl
c0024503:	75 31                	jne    c0024536 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024505:	83 e0 0f             	and    eax,0xf
c0024508:	3c 03                	cmp    al,0x3
c002450a:	75 2a                	jne    c0024536 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002450c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002450f:	b8 02 00 00 00       	mov    eax,0x2
c0024514:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002451a:	74 1c                	je     c0024538 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002451c:	b8 04 00 00 00       	mov    eax,0x4
c0024521:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024527:	74 0f                	je     c0024538 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024529:	31 c0                	xor    eax,eax
c002452b:	83 fa 03             	cmp    edx,0x3
c002452e:	0f 94 c0             	sete   al
c0024531:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024535:	c3                   	ret    
c0024536:	31 c0                	xor    eax,eax
c0024538:	c3                   	ret    
c0024539:	90                   	nop

c002453a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002453a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002453e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024541:	0f ba e2 0f          	bt     edx,0xf
c0024545:	72 f7                	jb     c002453e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024547:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002454a:	83 ca 10             	or     edx,0x10
c002454d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024550:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024553:	83 ca 01             	or     edx,0x1
c0024556:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024559:	c3                   	ret    

c002455a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002455a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002455e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024561:	83 e2 fe             	and    edx,0xfffffffe
c0024564:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024567:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002456a:	83 e2 ef             	and    edx,0xffffffef
c002456d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024570:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024573:	0f ba e2 0e          	bt     edx,0xe
c0024577:	72 f7                	jb     c0024570 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024579:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002457c:	0f ba e2 0f          	bt     edx,0xf
c0024580:	72 ee                	jb     c0024570 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024582:	c3                   	ret    
c0024583:	90                   	nop

c0024584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024584:	55                   	push   ebp
c0024585:	57                   	push   edi
c0024586:	56                   	push   esi
c0024587:	53                   	push   ebx
c0024588:	83 ec 1c             	sub    esp,0x1c
c002458b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002458f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024593:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0024597:	53                   	push   ebx
c0024598:	89 fd                	mov    ebp,edi
c002459a:	56                   	push   esi
c002459b:	c1 e5 0a             	shl    ebp,0xa
c002459e:	e8 b7 ff ff ff       	call   c002455a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00245a3:	83 ec 0c             	sub    esp,0xc
c00245a6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00245ac:	01 e8                	add    eax,ebp
c00245ae:	89 03                	mov    DWORD PTR [ebx],eax
c00245b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245b2:	68 00 04 00 00       	push   0x400
c00245b7:	6a 00                	push   0x0
c00245b9:	50                   	push   eax
c00245ba:	e8 dd c1 fd ff       	call   c000079c <memset>
c00245bf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245c5:	89 fa                	mov    edx,edi
c00245c7:	01 e8                	add    eax,ebp
c00245c9:	c1 e7 0d             	shl    edi,0xd
c00245cc:	89 03                	mov    DWORD PTR [ebx],eax
c00245ce:	c1 e2 08             	shl    edx,0x8
c00245d1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00245d8:	81 c2 00 80 00 00    	add    edx,0x8000
c00245de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00245e2:	89 d0                	mov    eax,edx
c00245e4:	83 c4 1c             	add    esp,0x1c
c00245e7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00245ed:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00245f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00245f3:	68 00 01 00 00       	push   0x100
c00245f8:	6a 00                	push   0x0
c00245fa:	50                   	push   eax
c00245fb:	e8 9c c1 fd ff       	call   c000079c <memset>
c0024600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024604:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002460a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024610:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024614:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024617:	83 c4 10             	add    esp,0x10
c002461a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024621:	31 ff                	xor    edi,edi
c0024623:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024629:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002462f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024633:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024639:	83 c5 20             	add    ebp,0x20
c002463c:	01 f8                	add    eax,edi
c002463e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024641:	52                   	push   edx
c0024642:	68 00 01 00 00       	push   0x100
c0024647:	6a 00                	push   0x0
c0024649:	50                   	push   eax
c002464a:	e8 4d c1 fd ff       	call   c000079c <memset>
c002464f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024653:	83 c4 10             	add    esp,0x10
c0024656:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002465c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024663:	01 f8                	add    eax,edi
c0024665:	81 c7 00 01 00 00    	add    edi,0x100
c002466b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002466e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024674:	75 b3                	jne    c0024629 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024676:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002467a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002467e:	83 c4 1c             	add    esp,0x1c
c0024681:	5b                   	pop    ebx
c0024682:	5e                   	pop    esi
c0024683:	5f                   	pop    edi
c0024684:	5d                   	pop    ebp
c0024685:	e9 b0 fe ff ff       	jmp    c002453a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002468a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002468a:	55                   	push   ebp
c002468b:	57                   	push   edi
c002468c:	56                   	push   esi
c002468d:	53                   	push   ebx
c002468e:	31 db                	xor    ebx,ebx
c0024690:	83 ec 0c             	sub    esp,0xc
c0024693:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024697:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c002469b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c002469e:	f7 c7 01 00 00 00    	test   edi,0x1
c00246a4:	0f 84 aa 00 00 00    	je     c0024754 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00246aa:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246ae:	89 d8                	mov    eax,ebx
c00246b0:	c1 e0 07             	shl    eax,0x7
c00246b3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246ba:	55                   	push   ebp
c00246bb:	56                   	push   esi
c00246bc:	e8 31 fe ff ff       	call   c00244f2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246c1:	5a                   	pop    edx
c00246c2:	83 f8 01             	cmp    eax,0x1
c00246c5:	59                   	pop    ecx
c00246c6:	75 30                	jne    c00246f8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246c8:	50                   	push   eax
c00246c9:	50                   	push   eax
c00246ca:	53                   	push   ebx
c00246cb:	68 99 d7 02 c0       	push   0xc002d799
c00246d0:	e8 0c e8 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00246d5:	83 c4 0c             	add    esp,0xc
c00246d8:	53                   	push   ebx
c00246d9:	55                   	push   ebp
c00246da:	56                   	push   esi
c00246db:	e8 a4 fe ff ff       	call   c0024584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246e0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00246e7:	e8 3e b2 fe ff       	call   c000f92a <malloc>
c00246ec:	89 c5                	mov    ebp,eax
c00246ee:	89 04 24             	mov    DWORD PTR [esp],eax
c00246f1:	e8 5c 0d 00 00       	call   c0025452 <SATA::SATA()>
c00246f6:	eb 33                	jmp    c002472b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c00246f8:	83 f8 04             	cmp    eax,0x4
c00246fb:	75 47                	jne    c0024744 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c00246fd:	50                   	push   eax
c00246fe:	50                   	push   eax
c00246ff:	53                   	push   ebx
c0024700:	68 b0 d7 02 c0       	push   0xc002d7b0
c0024705:	e8 d7 e7 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002470a:	83 c4 0c             	add    esp,0xc
c002470d:	53                   	push   ebx
c002470e:	55                   	push   ebp
c002470f:	56                   	push   esi
c0024710:	e8 6f fe ff ff       	call   c0024584 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024715:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002471c:	e8 09 b2 fe ff       	call   c000f92a <malloc>
c0024721:	89 c5                	mov    ebp,eax
c0024723:	89 04 24             	mov    DWORD PTR [esp],eax
c0024726:	e8 d3 10 00 00       	call   c00257fe <SATAPI::SATAPI()>
c002472b:	5a                   	pop    edx
c002472c:	59                   	pop    ecx
c002472d:	55                   	push   ebp
c002472e:	56                   	push   esi
c002472f:	e8 e2 fb fe ff       	call   c0014316 <Device::addChild(Device*)>
c0024734:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024737:	56                   	push   esi
c0024738:	6a 00                	push   0x0
c002473a:	53                   	push   ebx
c002473b:	55                   	push   ebp
c002473c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002473f:	83 c4 20             	add    esp,0x20
c0024742:	eb 10                	jmp    c0024754 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024744:	50                   	push   eax
c0024745:	50                   	push   eax
c0024746:	53                   	push   ebx
c0024747:	68 c9 d7 02 c0       	push   0xc002d7c9
c002474c:	e8 90 e7 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024751:	83 c4 10             	add    esp,0x10
c0024754:	d1 ef                	shr    edi,1
c0024756:	43                   	inc    ebx
c0024757:	83 fb 20             	cmp    ebx,0x20
c002475a:	0f 85 3e ff ff ff    	jne    c002469e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024760:	83 c4 0c             	add    esp,0xc
c0024763:	5b                   	pop    ebx
c0024764:	5e                   	pop    esi
c0024765:	5f                   	pop    edi
c0024766:	5d                   	pop    ebp
c0024767:	c3                   	ret    

c0024768 <SATABus::open(int, int, void*)>:
c0024768:	83 ec 14             	sub    esp,0x14
c002476b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002476f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024775:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002477b:	52                   	push   edx
c002477c:	50                   	push   eax
c002477d:	e8 08 ff ff ff       	call   c002468a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024782:	31 c0                	xor    eax,eax
c0024784:	83 c4 1c             	add    esp,0x1c
c0024787:	c3                   	ret    

c0024788 <ATA::close(int, int, void*)>:
c0024788:	83 ec 0c             	sub    esp,0xc
c002478b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002478f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024795:	85 c0                	test   eax,eax
c0024797:	74 0c                	je     c00247a5 <ATA::close(int, int, void*)+0x1d>
c0024799:	83 ec 0c             	sub    esp,0xc
c002479c:	8b 10                	mov    edx,DWORD PTR [eax]
c002479e:	50                   	push   eax
c002479f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	31 c0                	xor    eax,eax
c00247a7:	83 c4 0c             	add    esp,0xc
c00247aa:	c3                   	ret    
c00247ab:	90                   	nop

c00247ac <ATA::powerSaving(PowerSavingLevel)>:
c00247ac:	c3                   	ret    
c00247ad:	90                   	nop

c00247ae <ATA::ATA()>:
c00247ae:	83 ec 0c             	sub    esp,0xc
c00247b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247b5:	83 ec 04             	sub    esp,0x4
c00247b8:	68 00 02 00 00       	push   0x200
c00247bd:	68 b1 d8 02 c0       	push   0xc002d8b1
c00247c2:	50                   	push   eax
c00247c3:	e8 80 ff fe ff       	call   c0014748 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247c8:	83 c4 10             	add    esp,0x10
c00247cb:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00247d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247d4:	89 10                	mov    DWORD PTR [eax],edx
c00247d6:	90                   	nop
c00247d7:	83 c4 0c             	add    esp,0xc
c00247da:	c3                   	ret    
c00247db:	90                   	nop

c00247dc <ATA::flush(bool)>:
c00247dc:	53                   	push   ebx
c00247dd:	83 ec 08             	sub    esp,0x8
c00247e0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00247e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247e9:	19 c0                	sbb    eax,eax
c00247eb:	83 e0 fd             	and    eax,0xfffffffd
c00247ee:	05 ea 00 00 00       	add    eax,0xea
c00247f3:	50                   	push   eax
c00247f4:	6a 07                	push   0x7
c00247f6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00247fd:	50                   	push   eax
c00247fe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024804:	e8 dd ef ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024809:	83 c4 0c             	add    esp,0xc
c002480c:	6a 00                	push   0x0
c002480e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024815:	50                   	push   eax
c0024816:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002481c:	e8 71 fb ff ff       	call   c0024392 <IDE::polling(unsigned char, unsigned int)>
c0024821:	83 c4 18             	add    esp,0x18
c0024824:	5b                   	pop    ebx
c0024825:	c3                   	ret    

c0024826 <ATA::readyForCommand()>:
c0024826:	56                   	push   esi
c0024827:	53                   	push   ebx
c0024828:	31 db                	xor    ebx,ebx
c002482a:	50                   	push   eax
c002482b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002482f:	50                   	push   eax
c0024830:	6a 0c                	push   0xc
c0024832:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024839:	50                   	push   eax
c002483a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024840:	e8 61 f0 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0024845:	83 c4 10             	add    esp,0x10
c0024848:	a8 88                	test   al,0x88
c002484a:	74 23                	je     c002486f <ATA::readyForCommand()+0x49>
c002484c:	43                   	inc    ebx
c002484d:	83 fb 63             	cmp    ebx,0x63
c0024850:	7e dd                	jle    c002482f <ATA::readyForCommand()+0x9>
c0024852:	51                   	push   ecx
c0024853:	51                   	push   ecx
c0024854:	6a 00                	push   0x0
c0024856:	68 40 42 0f 00       	push   0xf4240
c002485b:	e8 37 9f ff ff       	call   c001e797 <nanoSleep(unsigned long long)>
c0024860:	83 c4 10             	add    esp,0x10
c0024863:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024869:	75 c4                	jne    c002482f <ATA::readyForCommand()+0x9>
c002486b:	31 c0                	xor    eax,eax
c002486d:	eb 02                	jmp    c0024871 <ATA::readyForCommand()+0x4b>
c002486f:	b0 01                	mov    al,0x1
c0024871:	5a                   	pop    edx
c0024872:	5b                   	pop    ebx
c0024873:	5e                   	pop    esi
c0024874:	c3                   	ret    
c0024875:	90                   	nop

c0024876 <ATA::access(unsigned long long, int, void*, bool)>:
c0024876:	55                   	push   ebp
c0024877:	57                   	push   edi
c0024878:	56                   	push   esi
c0024879:	53                   	push   ebx
c002487a:	83 ec 2c             	sub    esp,0x2c
c002487d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024881:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024885:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024889:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002488d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024891:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024895:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024899:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c002489f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248a3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00248a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248ad:	c1 e0 06             	shl    eax,0x6
c00248b0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248b8:	74 5d                	je     c0024917 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248ba:	89 fa                	mov    edx,edi
c00248bc:	89 f0                	mov    eax,esi
c00248be:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248c2:	c1 ea 1c             	shr    edx,0x1c
c00248c5:	89 d1                	mov    ecx,edx
c00248c7:	09 c1                	or     ecx,eax
c00248c9:	74 25                	je     c00248f0 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248cb:	31 ed                	xor    ebp,ebp
c00248cd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248d4:	89 fa                	mov    edx,edi
c00248d6:	89 f0                	mov    eax,esi
c00248d8:	0f ad d0             	shrd   eax,edx,cl
c00248db:	d3 ea                	shr    edx,cl
c00248dd:	f6 c1 20             	test   cl,0x20
c00248e0:	74 02                	je     c00248e4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00248e2:	89 d0                	mov    eax,edx
c00248e4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00248e8:	45                   	inc    ebp
c00248e9:	83 fd 06             	cmp    ebp,0x6
c00248ec:	75 df                	jne    c00248cd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00248ee:	eb 76                	jmp    c0024966 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00248f0:	89 f0                	mov    eax,esi
c00248f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00248f7:	89 fa                	mov    edx,edi
c00248f9:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024900:	0f ac d0 10          	shrd   eax,edx,0x10
c0024904:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024909:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002490d:	c1 ee 18             	shr    esi,0x18
c0024910:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024915:	eb 56                	jmp    c002496d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024917:	6a 00                	push   0x0
c0024919:	6a 3f                	push   0x3f
c002491b:	57                   	push   edi
c002491c:	56                   	push   esi
c002491d:	e8 92 29 00 00       	call   c00272b4 <__umoddi3>
c0024922:	83 c4 10             	add    esp,0x10
c0024925:	40                   	inc    eax
c0024926:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002492a:	6a 00                	push   0x0
c002492c:	68 f0 03 00 00       	push   0x3f0
c0024931:	57                   	push   edi
c0024932:	56                   	push   esi
c0024933:	e8 7c 28 00 00       	call   c00271b4 <__udivdi3>
c0024938:	83 c4 10             	add    esp,0x10
c002493b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024940:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024947:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002494c:	6a 00                	push   0x0
c002494e:	6a 3f                	push   0x3f
c0024950:	57                   	push   edi
c0024951:	56                   	push   esi
c0024952:	e8 5d 28 00 00       	call   c00271b4 <__udivdi3>
c0024957:	83 c4 10             	add    esp,0x10
c002495a:	89 c6                	mov    esi,eax
c002495c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024961:	83 e6 0f             	and    esi,0xf
c0024964:	eb 07                	jmp    c002496d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024966:	31 f6                	xor    esi,esi
c0024968:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002496d:	bf 01 00 00 00       	mov    edi,0x1
c0024972:	50                   	push   eax
c0024973:	6a 00                	push   0x0
c0024975:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002497c:	50                   	push   eax
c002497d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024981:	e8 6c f0 ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0024986:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024989:	e8 98 fe ff ff       	call   c0024826 <ATA::readyForCommand()>
c002498e:	83 c4 10             	add    esp,0x10
c0024991:	84 c0                	test   al,al
c0024993:	0f 84 5a 02 00 00    	je     c0024bf3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024999:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c002499f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249a5:	c1 e0 04             	shl    eax,0x4
c00249a8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00249af:	09 c6                	or     esi,eax
c00249b1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249b6:	75 05                	jne    c00249bd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249b8:	83 ce a0             	or     esi,0xffffffa0
c00249bb:	eb 03                	jmp    c00249c0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249bd:	83 ce e0             	or     esi,0xffffffe0
c00249c0:	89 f0                	mov    eax,esi
c00249c2:	0f b6 f0             	movzx  esi,al
c00249c5:	56                   	push   esi
c00249c6:	6a 06                	push   0x6
c00249c8:	51                   	push   ecx
c00249c9:	52                   	push   edx
c00249ca:	e8 17 ee ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249cf:	83 c4 10             	add    esp,0x10
c00249d2:	6a 00                	push   0x0
c00249d4:	6a 01                	push   0x1
c00249d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249dd:	50                   	push   eax
c00249de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249e4:	e8 fd ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249e9:	83 c4 10             	add    esp,0x10
c00249ec:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00249f1:	75 6e                	jne    c0024a61 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00249f3:	6a 00                	push   0x0
c00249f5:	6a 08                	push   0x8
c00249f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249fe:	50                   	push   eax
c00249ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a05:	e8 dc ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a0a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a0f:	50                   	push   eax
c0024a10:	6a 09                	push   0x9
c0024a12:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a19:	50                   	push   eax
c0024a1a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a20:	e8 c1 ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a25:	83 c4 20             	add    esp,0x20
c0024a28:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a2d:	50                   	push   eax
c0024a2e:	6a 0a                	push   0xa
c0024a30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a37:	50                   	push   eax
c0024a38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a3e:	e8 a3 ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a43:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a48:	50                   	push   eax
c0024a49:	6a 0b                	push   0xb
c0024a4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a52:	50                   	push   eax
c0024a53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a59:	e8 88 ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a5e:	83 c4 20             	add    esp,0x20
c0024a61:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a66:	50                   	push   eax
c0024a67:	6a 02                	push   0x2
c0024a69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a70:	50                   	push   eax
c0024a71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a77:	e8 6a ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a7c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024a81:	50                   	push   eax
c0024a82:	6a 03                	push   0x3
c0024a84:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a8b:	50                   	push   eax
c0024a8c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a92:	e8 4f ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a97:	83 c4 20             	add    esp,0x20
c0024a9a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024a9f:	50                   	push   eax
c0024aa0:	6a 04                	push   0x4
c0024aa2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aa9:	50                   	push   eax
c0024aaa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab0:	e8 31 ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ab5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024aba:	50                   	push   eax
c0024abb:	6a 05                	push   0x5
c0024abd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ac4:	50                   	push   eax
c0024ac5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024acb:	e8 16 ed ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ad0:	83 c4 20             	add    esp,0x20
c0024ad3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024ad8:	0f 94 c0             	sete   al
c0024adb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024ae0:	74 09                	je     c0024aeb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024ae2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024ae9:	eb 07                	jmp    c0024af2 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024aeb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024af2:	0f b6 c0             	movzx  eax,al
c0024af5:	50                   	push   eax
c0024af6:	6a 07                	push   0x7
c0024af8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024aff:	50                   	push   eax
c0024b00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b06:	e8 db ec ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b0b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b0f:	83 c4 10             	add    esp,0x10
c0024b12:	85 f6                	test   esi,esi
c0024b14:	0f 84 ba 00 00 00    	je     c0024bd4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b1a:	50                   	push   eax
c0024b1b:	6a 01                	push   0x1
c0024b1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b24:	50                   	push   eax
c0024b25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b2b:	e8 62 f8 ff ff       	call   c0024392 <IDE::polling(unsigned char, unsigned int)>
c0024b30:	83 c4 10             	add    esp,0x10
c0024b33:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b39:	84 c0                	test   al,al
c0024b3b:	74 2c                	je     c0024b69 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b3d:	0f b6 f8             	movzx  edi,al
c0024b40:	0f b6 d2             	movzx  edx,dl
c0024b43:	57                   	push   edi
c0024b44:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b4b:	50                   	push   eax
c0024b4c:	52                   	push   edx
c0024b4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b53:	e8 a4 f6 ff ff       	call   c00241fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b58:	c7 04 24 0c d8 02 c0 	mov    DWORD PTR [esp],0xc002d80c
c0024b5f:	e8 7d e3 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0024b64:	e9 87 00 00 00       	jmp    c0024bf0 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b69:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b6e:	74 33                	je     c0024ba3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b70:	31 ed                	xor    ebp,ebp
c0024b72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024b76:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024b7a:	50                   	push   eax
c0024b7b:	50                   	push   eax
c0024b7c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b83:	50                   	push   eax
c0024b84:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b8a:	e8 45 ec ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c0024b8f:	89 c2                	mov    edx,eax
c0024b91:	89 f8                	mov    eax,edi
c0024b93:	66 ef                	out    dx,ax
c0024b95:	45                   	inc    ebp
c0024b96:	83 c4 10             	add    esp,0x10
c0024b99:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024b9f:	75 d1                	jne    c0024b72 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024ba1:	eb 23                	jmp    c0024bc6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024ba3:	0f b6 d2             	movzx  edx,dl
c0024ba6:	51                   	push   ecx
c0024ba7:	51                   	push   ecx
c0024ba8:	52                   	push   edx
c0024ba9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024baf:	e8 20 ec ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c0024bb4:	b9 00 01 00 00       	mov    ecx,0x100
c0024bb9:	89 c2                	mov    edx,eax
c0024bbb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024bbf:	fc                   	cld    
c0024bc0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024bc3:	83 c4 10             	add    esp,0x10
c0024bc6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bce:	4e                   	dec    esi
c0024bcf:	e9 3e ff ff ff       	jmp    c0024b12 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024bd4:	31 ff                	xor    edi,edi
c0024bd6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024bdb:	74 16                	je     c0024bf3 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024bdd:	50                   	push   eax
c0024bde:	50                   	push   eax
c0024bdf:	31 c0                	xor    eax,eax
c0024be1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024be6:	0f 94 c0             	sete   al
c0024be9:	50                   	push   eax
c0024bea:	53                   	push   ebx
c0024beb:	e8 ec fb ff ff       	call   c00247dc <ATA::flush(bool)>
c0024bf0:	83 c4 10             	add    esp,0x10
c0024bf3:	83 c4 2c             	add    esp,0x2c
c0024bf6:	89 f8                	mov    eax,edi
c0024bf8:	5b                   	pop    ebx
c0024bf9:	5e                   	pop    esi
c0024bfa:	5f                   	pop    edi
c0024bfb:	5d                   	pop    ebp
c0024bfc:	c3                   	ret    
c0024bfd:	90                   	nop

c0024bfe <ATA::read(unsigned long long, int, void*)>:
c0024bfe:	57                   	push   edi
c0024bff:	b8 04 00 00 00       	mov    eax,0x4
c0024c04:	56                   	push   esi
c0024c05:	53                   	push   ebx
c0024c06:	83 ec 10             	sub    esp,0x10
c0024c09:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c0d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c11:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c14:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c18:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c1c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c22:	77 3b                	ja     c0024c5f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c24:	b8 06 00 00 00       	mov    eax,0x6
c0024c29:	85 d2                	test   edx,edx
c0024c2b:	74 32                	je     c0024c5f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c2d:	50                   	push   eax
c0024c2e:	50                   	push   eax
c0024c2f:	6a 00                	push   0x0
c0024c31:	52                   	push   edx
c0024c32:	53                   	push   ebx
c0024c33:	57                   	push   edi
c0024c34:	56                   	push   esi
c0024c35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c39:	e8 38 fc ff ff       	call   c0024876 <ATA::access(unsigned long long, int, void*, bool)>
c0024c3e:	83 c4 20             	add    esp,0x20
c0024c41:	85 c0                	test   eax,eax
c0024c43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c47:	75 11                	jne    c0024c5a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c49:	01 1d a8 31 03 c0    	add    DWORD PTR ds:0xc00331a8,ebx
c0024c4f:	e8 92 bd fe ff       	call   c00109e6 <VgaText::updateDiskUsage()>
c0024c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c58:	eb 05                	jmp    c0024c5f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c5a:	b8 01 00 00 00       	mov    eax,0x1
c0024c5f:	83 c4 10             	add    esp,0x10
c0024c62:	5b                   	pop    ebx
c0024c63:	5e                   	pop    esi
c0024c64:	5f                   	pop    edi
c0024c65:	c3                   	ret    

c0024c66 <ATA::write(unsigned long long, int, void*)>:
c0024c66:	57                   	push   edi
c0024c67:	b8 04 00 00 00       	mov    eax,0x4
c0024c6c:	56                   	push   esi
c0024c6d:	53                   	push   ebx
c0024c6e:	83 ec 10             	sub    esp,0x10
c0024c71:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c75:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c79:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c7c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c84:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c8a:	77 3b                	ja     c0024cc7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c8c:	b8 06 00 00 00       	mov    eax,0x6
c0024c91:	85 d2                	test   edx,edx
c0024c93:	74 32                	je     c0024cc7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c95:	50                   	push   eax
c0024c96:	50                   	push   eax
c0024c97:	6a 01                	push   0x1
c0024c99:	52                   	push   edx
c0024c9a:	53                   	push   ebx
c0024c9b:	57                   	push   edi
c0024c9c:	56                   	push   esi
c0024c9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024ca1:	e8 d0 fb ff ff       	call   c0024876 <ATA::access(unsigned long long, int, void*, bool)>
c0024ca6:	83 c4 20             	add    esp,0x20
c0024ca9:	85 c0                	test   eax,eax
c0024cab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024caf:	75 11                	jne    c0024cc2 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024cb1:	01 1d a4 31 03 c0    	add    DWORD PTR ds:0xc00331a4,ebx
c0024cb7:	e8 2a bd fe ff       	call   c00109e6 <VgaText::updateDiskUsage()>
c0024cbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cc0:	eb 05                	jmp    c0024cc7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cc2:	b8 01 00 00 00       	mov    eax,0x1
c0024cc7:	83 c4 10             	add    esp,0x10
c0024cca:	5b                   	pop    ebx
c0024ccb:	5e                   	pop    esi
c0024ccc:	5f                   	pop    edi
c0024ccd:	c3                   	ret    

c0024cce <ATA::detectCHS()>:
c0024cce:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cd2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024cd8:	c1 e0 06             	shl    eax,0x6
c0024cdb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024ce1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024ceb:	c7 44 24 04 17 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d817
c0024cf3:	e9 a5 5b ff ff       	jmp    c001a89d <Krnl::panic(char const*)>

c0024cf8 <ATA::open(int, int, void*)>:
c0024cf8:	53                   	push   ebx
c0024cf9:	83 ec 08             	sub    esp,0x8
c0024cfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d04:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d08:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d0e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d14:	c1 e0 06             	shl    eax,0x6
c0024d17:	01 d0                	add    eax,edx
c0024d19:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d20:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d26:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d2d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d37:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d3d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d44:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d4b:	75 0c                	jne    c0024d59 <ATA::open(int, int, void*)+0x61>
c0024d4d:	83 ec 0c             	sub    esp,0xc
c0024d50:	53                   	push   ebx
c0024d51:	e8 78 ff ff ff       	call   c0024cce <ATA::detectCHS()>
c0024d56:	83 c4 10             	add    esp,0x10
c0024d59:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d5f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d65:	c1 e0 06             	shl    eax,0x6
c0024d68:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d6f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d79:	d1 e8                	shr    eax,1
c0024d7b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024d81:	6a 04                	push   0x4
c0024d83:	6a 0c                	push   0xc
c0024d85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d8c:	50                   	push   eax
c0024d8d:	52                   	push   edx
c0024d8e:	e8 53 ea ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024d93:	90                   	nop
c0024d94:	90                   	nop
c0024d95:	6a 00                	push   0x0
c0024d97:	6a 0c                	push   0xc
c0024d99:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024da0:	50                   	push   eax
c0024da1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024da7:	e8 3a ea ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dac:	83 c4 14             	add    esp,0x14
c0024daf:	53                   	push   ebx
c0024db0:	e8 fb f9 fe ff       	call   c00147b0 <PhysicalDisk::startCache()>
c0024db5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024db8:	e8 d3 1c ff ff       	call   c0016a90 <createPartitionsForDisk(PhysicalDisk*)>
c0024dbd:	31 c0                	xor    eax,eax
c0024dbf:	83 c4 18             	add    esp,0x18
c0024dc2:	5b                   	pop    ebx
c0024dc3:	c3                   	ret    

c0024dc4 <ATAPI::write(unsigned long long, int, void*)>:
c0024dc4:	b8 03 00 00 00       	mov    eax,0x3
c0024dc9:	c3                   	ret    

c0024dca <ATAPI::close(int, int, void*)>:
c0024dca:	83 ec 0c             	sub    esp,0xc
c0024dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dd1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024dd7:	85 c0                	test   eax,eax
c0024dd9:	74 0c                	je     c0024de7 <ATAPI::close(int, int, void*)+0x1d>
c0024ddb:	83 ec 0c             	sub    esp,0xc
c0024dde:	8b 10                	mov    edx,DWORD PTR [eax]
c0024de0:	50                   	push   eax
c0024de1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024de4:	83 c4 10             	add    esp,0x10
c0024de7:	31 c0                	xor    eax,eax
c0024de9:	83 c4 0c             	add    esp,0xc
c0024dec:	c3                   	ret    
c0024ded:	90                   	nop

c0024dee <ATAPI::ATAPI()>:
c0024dee:	83 ec 0c             	sub    esp,0xc
c0024df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df5:	83 ec 04             	sub    esp,0x4
c0024df8:	68 00 08 00 00       	push   0x800
c0024dfd:	68 51 d9 02 c0       	push   0xc002d951
c0024e02:	50                   	push   eax
c0024e03:	e8 40 f9 fe ff       	call   c0014748 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e08:	83 c4 10             	add    esp,0x10
c0024e0b:	ba 6c d8 02 c0       	mov    edx,0xc002d86c
c0024e10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e14:	89 10                	mov    DWORD PTR [eax],edx
c0024e16:	90                   	nop
c0024e17:	83 c4 0c             	add    esp,0xc
c0024e1a:	c3                   	ret    
c0024e1b:	90                   	nop

c0024e1c <ATAPI::readyForCommand()>:
c0024e1c:	56                   	push   esi
c0024e1d:	53                   	push   ebx
c0024e1e:	31 db                	xor    ebx,ebx
c0024e20:	50                   	push   eax
c0024e21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e25:	50                   	push   eax
c0024e26:	6a 0c                	push   0xc
c0024e28:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e2f:	50                   	push   eax
c0024e30:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e36:	e8 6b ea ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0024e3b:	83 c4 10             	add    esp,0x10
c0024e3e:	a8 88                	test   al,0x88
c0024e40:	74 23                	je     c0024e65 <ATAPI::readyForCommand()+0x49>
c0024e42:	43                   	inc    ebx
c0024e43:	83 fb 63             	cmp    ebx,0x63
c0024e46:	7e dd                	jle    c0024e25 <ATAPI::readyForCommand()+0x9>
c0024e48:	51                   	push   ecx
c0024e49:	51                   	push   ecx
c0024e4a:	6a 00                	push   0x0
c0024e4c:	68 40 42 0f 00       	push   0xf4240
c0024e51:	e8 41 99 ff ff       	call   c001e797 <nanoSleep(unsigned long long)>
c0024e56:	83 c4 10             	add    esp,0x10
c0024e59:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e5f:	75 c4                	jne    c0024e25 <ATAPI::readyForCommand()+0x9>
c0024e61:	31 c0                	xor    eax,eax
c0024e63:	eb 02                	jmp    c0024e67 <ATAPI::readyForCommand()+0x4b>
c0024e65:	b0 01                	mov    al,0x1
c0024e67:	5a                   	pop    edx
c0024e68:	5b                   	pop    ebx
c0024e69:	5e                   	pop    esi
c0024e6a:	c3                   	ret    
c0024e6b:	90                   	nop

c0024e6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e6c:	55                   	push   ebp
c0024e6d:	57                   	push   edi
c0024e6e:	56                   	push   esi
c0024e6f:	53                   	push   ebx
c0024e70:	83 ec 20             	sub    esp,0x20
c0024e73:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e77:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024e7b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024e7f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024e83:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024e87:	6a 01                	push   0x1
c0024e89:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024e90:	50                   	push   eax
c0024e91:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024e97:	e8 56 eb ff ff       	call   c00239f2 <IDE::enableIRQs(unsigned char, bool)>
c0024e9c:	5e                   	pop    esi
c0024e9d:	58                   	pop    eax
c0024e9e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ea5:	50                   	push   eax
c0024ea6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024eac:	e8 0f e9 ff ff       	call   c00237c0 <IDE::prepareInterrupt(unsigned char)>
c0024eb1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024eb4:	e8 63 ff ff ff       	call   c0024e1c <ATAPI::readyForCommand()>
c0024eb9:	83 c4 10             	add    esp,0x10
c0024ebc:	84 c0                	test   al,al
c0024ebe:	75 0a                	jne    c0024eca <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ec0:	bb 01 00 00 00       	mov    ebx,0x1
c0024ec5:	e9 57 02 00 00       	jmp    c0025121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024eca:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ed0:	c1 e0 04             	shl    eax,0x4
c0024ed3:	0f b6 c0             	movzx  eax,al
c0024ed6:	50                   	push   eax
c0024ed7:	6a 06                	push   0x6
c0024ed9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ee0:	50                   	push   eax
c0024ee1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ee7:	e8 fa e8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024eec:	6a 00                	push   0x0
c0024eee:	6a 01                	push   0x1
c0024ef0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ef7:	50                   	push   eax
c0024ef8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024efe:	e8 e3 e8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f03:	83 c4 20             	add    esp,0x20
c0024f06:	0f b6 c3             	movzx  eax,bl
c0024f09:	0f b6 df             	movzx  ebx,bh
c0024f0c:	50                   	push   eax
c0024f0d:	6a 04                	push   0x4
c0024f0f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f16:	50                   	push   eax
c0024f17:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f1d:	e8 c4 e8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f22:	53                   	push   ebx
c0024f23:	6a 05                	push   0x5
c0024f25:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f2c:	50                   	push   eax
c0024f2d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f33:	e8 ae e8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f38:	83 c4 20             	add    esp,0x20
c0024f3b:	68 a0 00 00 00       	push   0xa0
c0024f40:	6a 07                	push   0x7
c0024f42:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f49:	50                   	push   eax
c0024f4a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f50:	e8 91 e8 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f55:	83 c4 0c             	add    esp,0xc
c0024f58:	6a 01                	push   0x1
c0024f5a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f61:	50                   	push   eax
c0024f62:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f68:	e8 25 f4 ff ff       	call   c0024392 <IDE::polling(unsigned char, unsigned int)>
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f76:	84 c0                	test   al,al
c0024f78:	74 23                	je     c0024f9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024f7a:	0f b6 d8             	movzx  ebx,al
c0024f7d:	0f b6 d2             	movzx  edx,dl
c0024f80:	53                   	push   ebx
c0024f81:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024f88:	50                   	push   eax
c0024f89:	52                   	push   edx
c0024f8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f90:	e8 67 f2 ff ff       	call   c00241fc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024f95:	83 c4 10             	add    esp,0x10
c0024f98:	e9 84 01 00 00       	jmp    c0025121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024f9d:	0f b6 d2             	movzx  edx,dl
c0024fa0:	53                   	push   ebx
c0024fa1:	53                   	push   ebx
c0024fa2:	52                   	push   edx
c0024fa3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa9:	e8 26 e8 ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c0024fae:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fb2:	b9 06 00 00 00       	mov    ecx,0x6
c0024fb7:	89 c2                	mov    edx,eax
c0024fb9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fbc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fc0:	83 c4 10             	add    esp,0x10
c0024fc3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fc9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fd0:	85 db                	test   ebx,ebx
c0024fd2:	0f 84 ec 00 00 00    	je     c00250c4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024fd8:	51                   	push   ecx
c0024fd9:	51                   	push   ecx
c0024fda:	52                   	push   edx
c0024fdb:	50                   	push   eax
c0024fdc:	e8 73 e9 ff ff       	call   c0023954 <IDE::waitInterrupt(unsigned char)>
c0024fe1:	83 c4 10             	add    esp,0x10
c0024fe4:	84 c0                	test   al,al
c0024fe6:	0f 84 d4 fe ff ff    	je     c0024ec0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024fec:	56                   	push   esi
c0024fed:	56                   	push   esi
c0024fee:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ff5:	50                   	push   eax
c0024ff6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ffc:	e8 bf e7 ff ff       	call   c00237c0 <IDE::prepareInterrupt(unsigned char)>
c0025001:	83 c4 0c             	add    esp,0xc
c0025004:	6a 04                	push   0x4
c0025006:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002500d:	50                   	push   eax
c002500e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025014:	e8 8d e8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0025019:	83 c4 0c             	add    esp,0xc
c002501c:	89 c6                	mov    esi,eax
c002501e:	6a 05                	push   0x5
c0025020:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025027:	50                   	push   eax
c0025028:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002502e:	e8 73 e8 ff ff       	call   c00238a6 <IDE::read(unsigned char, unsigned char)>
c0025033:	89 f1                	mov    ecx,esi
c0025035:	0f b6 c0             	movzx  eax,al
c0025038:	0f b6 f1             	movzx  esi,cl
c002503b:	c1 e0 08             	shl    eax,0x8
c002503e:	09 c6                	or     esi,eax
c0025040:	d1 fe                	sar    esi,1
c0025042:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025046:	83 c4 10             	add    esp,0x10
c0025049:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002504e:	74 41                	je     c0025091 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025050:	31 c9                	xor    ecx,ecx
c0025052:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025058:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002505f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025063:	75 0a                	jne    c002506f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025065:	01 c9                	add    ecx,ecx
c0025067:	01 cd                	add    ebp,ecx
c0025069:	4b                   	dec    ebx
c002506a:	e9 54 ff ff ff       	jmp    c0024fc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002506f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025074:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025078:	51                   	push   ecx
c0025079:	51                   	push   ecx
c002507a:	52                   	push   edx
c002507b:	50                   	push   eax
c002507c:	e8 53 e7 ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c0025081:	89 c2                	mov    edx,eax
c0025083:	89 f0                	mov    eax,esi
c0025085:	66 ef                	out    dx,ax
c0025087:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002508b:	83 c4 10             	add    esp,0x10
c002508e:	41                   	inc    ecx
c002508f:	eb c1                	jmp    c0025052 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c0025091:	31 f6                	xor    esi,esi
c0025093:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025099:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250a0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00250a4:	75 06                	jne    c00250ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00250a6:	01 f6                	add    esi,esi
c00250a8:	01 f5                	add    ebp,esi
c00250aa:	eb bd                	jmp    c0025069 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00250ac:	51                   	push   ecx
c00250ad:	51                   	push   ecx
c00250ae:	52                   	push   edx
c00250af:	50                   	push   eax
c00250b0:	e8 1f e7 ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c00250b5:	89 c2                	mov    edx,eax
c00250b7:	66 ed                	in     ax,dx
c00250b9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250be:	83 c4 10             	add    esp,0x10
c00250c1:	46                   	inc    esi
c00250c2:	eb cf                	jmp    c0025093 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250c4:	51                   	push   ecx
c00250c5:	51                   	push   ecx
c00250c6:	52                   	push   edx
c00250c7:	50                   	push   eax
c00250c8:	e8 87 e8 ff ff       	call   c0023954 <IDE::waitInterrupt(unsigned char)>
c00250cd:	83 c4 10             	add    esp,0x10
c00250d0:	84 c0                	test   al,al
c00250d2:	0f 84 e8 fd ff ff    	je     c0024ec0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250d8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00250dd:	52                   	push   edx
c00250de:	52                   	push   edx
c00250df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250e6:	50                   	push   eax
c00250e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250ed:	e8 ce e6 ff ff       	call   c00237c0 <IDE::prepareInterrupt(unsigned char)>
c00250f2:	83 c4 10             	add    esp,0x10
c00250f5:	50                   	push   eax
c00250f6:	50                   	push   eax
c00250f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250fe:	50                   	push   eax
c00250ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025105:	e8 ca e6 ff ff       	call   c00237d4 <IDE::getBase(unsigned char)>
c002510a:	8d 50 07             	lea    edx,[eax+0x7]
c002510d:	ec                   	in     al,dx
c002510e:	83 c4 10             	add    esp,0x10
c0025111:	a8 88                	test   al,0x88
c0025113:	74 0a                	je     c002511f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025115:	4b                   	dec    ebx
c0025116:	75 dd                	jne    c00250f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025118:	bb 02 00 00 00       	mov    ebx,0x2
c002511d:	eb 02                	jmp    c0025121 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002511f:	31 db                	xor    ebx,ebx
c0025121:	83 c4 1c             	add    esp,0x1c
c0025124:	89 d8                	mov    eax,ebx
c0025126:	5b                   	pop    ebx
c0025127:	5e                   	pop    esi
c0025128:	5f                   	pop    edi
c0025129:	5d                   	pop    ebp
c002512a:	c3                   	ret    
c002512b:	90                   	nop

c002512c <ATAPI::diskRemoved()>:
c002512c:	83 ec 18             	sub    esp,0x18
c002512f:	68 5d d9 02 c0       	push   0xc002d95d
c0025134:	e8 a8 dd fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0025139:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002513d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025144:	83 c4 1c             	add    esp,0x1c
c0025147:	c3                   	ret    

c0025148 <ATAPI::eject()>:
c0025148:	57                   	push   edi
c0025149:	b9 03 00 00 00       	mov    ecx,0x3
c002514e:	53                   	push   ebx
c002514f:	83 ec 14             	sub    esp,0x14
c0025152:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025156:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002515a:	fc                   	cld    
c002515b:	31 c0                	xor    eax,eax
c002515d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002515f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025164:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025169:	50                   	push   eax
c002516a:	50                   	push   eax
c002516b:	6a 00                	push   0x0
c002516d:	6a 00                	push   0x0
c002516f:	6a 00                	push   0x0
c0025171:	6a 02                	push   0x2
c0025173:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025177:	50                   	push   eax
c0025178:	53                   	push   ebx
c0025179:	e8 ee fc ff ff       	call   c0024e6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002517e:	83 c4 14             	add    esp,0x14
c0025181:	53                   	push   ebx
c0025182:	e8 a5 ff ff ff       	call   c002512c <ATAPI::diskRemoved()>
c0025187:	83 c4 24             	add    esp,0x24
c002518a:	31 c0                	xor    eax,eax
c002518c:	5b                   	pop    ebx
c002518d:	5f                   	pop    edi
c002518e:	c3                   	ret    
c002518f:	90                   	nop

c0025190 <ATAPI::diskInserted()>:
c0025190:	53                   	push   ebx
c0025191:	83 ec 14             	sub    esp,0x14
c0025194:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025198:	68 74 d9 02 c0       	push   0xc002d974
c002519d:	e8 3f dd fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00251a2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00251a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251ac:	e8 ff f5 fe ff       	call   c00147b0 <PhysicalDisk::startCache()>
c00251b1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251b5:	83 c4 18             	add    esp,0x18
c00251b8:	5b                   	pop    ebx
c00251b9:	e9 d2 18 ff ff       	jmp    c0016a90 <createPartitionsForDisk(PhysicalDisk*)>

c00251be <ATAPI::detectMedia()>:
c00251be:	56                   	push   esi
c00251bf:	53                   	push   ebx
c00251c0:	83 ec 28             	sub    esp,0x28
c00251c3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251c7:	6a 0c                	push   0xc
c00251c9:	6a 00                	push   0x0
c00251cb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251cf:	56                   	push   esi
c00251d0:	e8 c7 b5 fd ff       	call   c000079c <memset>
c00251d5:	58                   	pop    eax
c00251d6:	5a                   	pop    edx
c00251d7:	6a 00                	push   0x0
c00251d9:	6a 00                	push   0x0
c00251db:	6a 00                	push   0x0
c00251dd:	6a 00                	push   0x0
c00251df:	56                   	push   esi
c00251e0:	53                   	push   ebx
c00251e1:	e8 86 fc ff ff       	call   c0024e6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251e6:	83 c4 1c             	add    esp,0x1c
c00251e9:	6a 0c                	push   0xc
c00251eb:	6a 00                	push   0x0
c00251ed:	56                   	push   esi
c00251ee:	e8 a9 b5 fd ff       	call   c000079c <memset>
c00251f3:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00251f8:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00251fd:	59                   	pop    ecx
c00251fe:	58                   	pop    eax
c00251ff:	6a 01                	push   0x1
c0025201:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025205:	50                   	push   eax
c0025206:	6a 00                	push   0x0
c0025208:	6a 12                	push   0x12
c002520a:	56                   	push   esi
c002520b:	53                   	push   ebx
c002520c:	e8 5b fc ff ff       	call   c0024e6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025211:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025215:	83 c4 20             	add    esp,0x20
c0025218:	83 e0 7f             	and    eax,0x7f
c002521b:	3c 70                	cmp    al,0x70
c002521d:	74 15                	je     c0025234 <ATAPI::detectMedia()+0x76>
c002521f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025226:	75 0c                	jne    c0025234 <ATAPI::detectMedia()+0x76>
c0025228:	83 ec 0c             	sub    esp,0xc
c002522b:	53                   	push   ebx
c002522c:	e8 5f ff ff ff       	call   c0025190 <ATAPI::diskInserted()>
c0025231:	83 c4 10             	add    esp,0x10
c0025234:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025238:	83 e0 0f             	and    eax,0xf
c002523b:	3c 02                	cmp    al,0x2
c002523d:	75 1b                	jne    c002525a <ATAPI::detectMedia()+0x9c>
c002523f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025244:	75 2d                	jne    c0025273 <ATAPI::detectMedia()+0xb5>
c0025246:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002524d:	74 24                	je     c0025273 <ATAPI::detectMedia()+0xb5>
c002524f:	83 ec 0c             	sub    esp,0xc
c0025252:	53                   	push   ebx
c0025253:	e8 d4 fe ff ff       	call   c002512c <ATAPI::diskRemoved()>
c0025258:	eb 16                	jmp    c0025270 <ATAPI::detectMedia()+0xb2>
c002525a:	84 c0                	test   al,al
c002525c:	75 15                	jne    c0025273 <ATAPI::detectMedia()+0xb5>
c002525e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025265:	75 0c                	jne    c0025273 <ATAPI::detectMedia()+0xb5>
c0025267:	83 ec 0c             	sub    esp,0xc
c002526a:	53                   	push   ebx
c002526b:	e8 20 ff ff ff       	call   c0025190 <ATAPI::diskInserted()>
c0025270:	83 c4 10             	add    esp,0x10
c0025273:	83 c4 24             	add    esp,0x24
c0025276:	5b                   	pop    ebx
c0025277:	5e                   	pop    esi
c0025278:	c3                   	ret    
c0025279:	90                   	nop

c002527a <ATAPI::open(int, int, void*)>:
c002527a:	53                   	push   ebx
c002527b:	83 ec 08             	sub    esp,0x8
c002527e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025282:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025286:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002528a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025290:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0025296:	c1 e0 06             	shl    eax,0x6
c0025299:	01 d0                	add    eax,edx
c002529b:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00252a2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00252a8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252af:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252b9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252bf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252c6:	6a 04                	push   0x4
c00252c8:	6a 0c                	push   0xc
c00252ca:	51                   	push   ecx
c00252cb:	52                   	push   edx
c00252cc:	e8 15 e5 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252d1:	90                   	nop
c00252d2:	90                   	nop
c00252d3:	6a 00                	push   0x0
c00252d5:	6a 0c                	push   0xc
c00252d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252de:	50                   	push   eax
c00252df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252e5:	e8 fc e4 ff ff       	call   c00237e6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252ea:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c00252f1:	83 c4 14             	add    esp,0x14
c00252f4:	53                   	push   ebx
c00252f5:	e8 c4 fe ff ff       	call   c00251be <ATAPI::detectMedia()>
c00252fa:	31 c0                	xor    eax,eax
c00252fc:	83 c4 18             	add    esp,0x18
c00252ff:	5b                   	pop    ebx
c0025300:	c3                   	ret    
c0025301:	90                   	nop

c0025302 <ATAPI::read(unsigned long long, int, void*)>:
c0025302:	55                   	push   ebp
c0025303:	57                   	push   edi
c0025304:	56                   	push   esi
c0025305:	53                   	push   ebx
c0025306:	83 ec 1c             	sub    esp,0x1c
c0025309:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002530d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025311:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025315:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002531c:	74 41                	je     c002535f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002531e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025322:	b9 03 00 00 00       	mov    ecx,0x3
c0025327:	fc                   	cld    
c0025328:	31 c0                	xor    eax,eax
c002532a:	86 fb                	xchg   bl,bh
c002532c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002532e:	c1 c3 10             	rol    ebx,0x10
c0025331:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025336:	89 e8                	mov    eax,ebp
c0025338:	86 fb                	xchg   bl,bh
c002533a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002533e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025342:	50                   	push   eax
c0025343:	50                   	push   eax
c0025344:	55                   	push   ebp
c0025345:	c1 e5 0b             	shl    ebp,0xb
c0025348:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002534c:	6a 00                	push   0x0
c002534e:	55                   	push   ebp
c002534f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025353:	50                   	push   eax
c0025354:	56                   	push   esi
c0025355:	e8 12 fb ff ff       	call   c0024e6c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002535a:	83 c4 20             	add    esp,0x20
c002535d:	eb 1a                	jmp    c0025379 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002535f:	83 ec 0c             	sub    esp,0xc
c0025362:	56                   	push   esi
c0025363:	e8 56 fe ff ff       	call   c00251be <ATAPI::detectMedia()>
c0025368:	83 c4 10             	add    esp,0x10
c002536b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025372:	75 aa                	jne    c002531e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025374:	b8 02 00 00 00       	mov    eax,0x2
c0025379:	83 c4 1c             	add    esp,0x1c
c002537c:	5b                   	pop    ebx
c002537d:	5e                   	pop    esi
c002537e:	5f                   	pop    edi
c002537f:	5d                   	pop    ebp
c0025380:	c3                   	ret    
c0025381:	90                   	nop

c0025382 <SATA::close(int, int, void*)>:
c0025382:	83 ec 0c             	sub    esp,0xc
c0025385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025389:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002538f:	85 c0                	test   eax,eax
c0025391:	74 0c                	je     c002539f <SATA::close(int, int, void*)+0x1d>
c0025393:	83 ec 0c             	sub    esp,0xc
c0025396:	8b 10                	mov    edx,DWORD PTR [eax]
c0025398:	50                   	push   eax
c0025399:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002539c:	83 c4 10             	add    esp,0x10
c002539f:	31 c0                	xor    eax,eax
c00253a1:	83 c4 0c             	add    esp,0xc
c00253a4:	c3                   	ret    
c00253a5:	90                   	nop

c00253a6 <SATA::powerSaving(PowerSavingLevel)>:
c00253a6:	c3                   	ret    
c00253a7:	90                   	nop

c00253a8 <SATA::open(int, int, void*)>:
c00253a8:	56                   	push   esi
c00253a9:	53                   	push   ebx
c00253aa:	50                   	push   eax
c00253ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253b3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253bd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253c3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253d1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253db:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253e1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00253e8:	e8 a9 ab fe ff       	call   c000ff96 <Phys::allocatePage()>
c00253ed:	89 c6                	mov    esi,eax
c00253ef:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00253f5:	81 c6 00 10 00 00    	add    esi,0x1000
c00253fb:	e8 96 ab fe ff       	call   c000ff96 <Phys::allocatePage()>
c0025400:	39 c6                	cmp    esi,eax
c0025402:	74 10                	je     c0025414 <SATA::open(int, int, void*)+0x6c>
c0025404:	83 ec 0c             	sub    esp,0xc
c0025407:	68 9c d8 02 c0       	push   0xc002d89c
c002540c:	e8 8c 54 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0025411:	83 c4 10             	add    esp,0x10
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	6a 02                	push   0x2
c0025419:	e8 bd c6 fe ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c002541e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025424:	6a 03                	push   0x3
c0025426:	50                   	push   eax
c0025427:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002542d:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0025433:	e8 da ce fe ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025438:	83 c4 14             	add    esp,0x14
c002543b:	53                   	push   ebx
c002543c:	e8 6f f3 fe ff       	call   c00147b0 <PhysicalDisk::startCache()>
c0025441:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025444:	e8 47 16 ff ff       	call   c0016a90 <createPartitionsForDisk(PhysicalDisk*)>
c0025449:	83 c4 14             	add    esp,0x14
c002544c:	31 c0                	xor    eax,eax
c002544e:	5b                   	pop    ebx
c002544f:	5e                   	pop    esi
c0025450:	c3                   	ret    
c0025451:	90                   	nop

c0025452 <SATA::SATA()>:
c0025452:	83 ec 0c             	sub    esp,0xc
c0025455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025459:	83 ec 04             	sub    esp,0x4
c002545c:	68 00 02 00 00       	push   0x200
c0025461:	68 b0 d8 02 c0       	push   0xc002d8b0
c0025466:	50                   	push   eax
c0025467:	e8 dc f2 fe ff       	call   c0014748 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002546c:	83 c4 10             	add    esp,0x10
c002546f:	ba 20 d9 02 c0       	mov    edx,0xc002d920
c0025474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025478:	89 10                	mov    DWORD PTR [eax],edx
c002547a:	90                   	nop
c002547b:	83 c4 0c             	add    esp,0xc
c002547e:	c3                   	ret    
c002547f:	90                   	nop

c0025480 <SATA::access(unsigned long long, int, void*, bool)>:
c0025480:	55                   	push   ebp
c0025481:	57                   	push   edi
c0025482:	56                   	push   esi
c0025483:	53                   	push   ebx
c0025484:	83 ec 2c             	sub    esp,0x2c
c0025487:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002548b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c002548f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025493:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0025497:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002549b:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00254a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00254a4:	7e 10                	jle    c00254b6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00254a6:	83 ec 0c             	sub    esp,0xc
c00254a9:	68 c0 d8 02 c0       	push   0xc002d8c0
c00254ae:	e8 ea 53 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00254b3:	83 c4 10             	add    esp,0x10
c00254b6:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00254bc:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00254c2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254cc:	89 f0                	mov    eax,esi
c00254ce:	c1 e0 07             	shl    eax,0x7
c00254d1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00254d5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254df:	53                   	push   ebx
c00254e0:	8d 46 02             	lea    eax,[esi+0x2]
c00254e3:	53                   	push   ebx
c00254e4:	c1 e0 07             	shl    eax,0x7
c00254e7:	bb 01 00 00 00       	mov    ebx,0x1
c00254ec:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c00254f0:	50                   	push   eax
c00254f1:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00254f7:	e8 ae ef ff ff       	call   c00244aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00254fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0025500:	83 c4 10             	add    esp,0x10
c0025503:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0025508:	0f 84 ce 01 00 00    	je     c00256dc <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002550e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025512:	c1 e0 09             	shl    eax,0x9
c0025515:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c002551a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002551e:	74 17                	je     c0025537 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0025520:	51                   	push   ecx
c0025521:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025525:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0025529:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002552f:	e8 34 b2 fd ff       	call   c0000768 <memcpy>
c0025534:	83 c4 10             	add    esp,0x10
c0025537:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002553d:	8d 46 02             	lea    eax,[esi+0x2]
c0025540:	c1 e0 07             	shl    eax,0x7
c0025543:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0025547:	8b 00                	mov    eax,DWORD PTR [eax]
c0025549:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002554f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025555:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025559:	c1 e1 05             	shl    ecx,0x5
c002555c:	01 c8                	add    eax,ecx
c002555e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025562:	8a 18                	mov    bl,BYTE PTR [eax]
c0025564:	83 e1 01             	and    ecx,0x1
c0025567:	83 e3 bf             	and    ebx,0xffffffbf
c002556a:	c1 e1 06             	shl    ecx,0x6
c002556d:	09 d9                	or     ecx,ebx
c002556f:	88 08                	mov    BYTE PTR [eax],cl
c0025571:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025573:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0025579:	81 c9 05 00 01 00    	or     ecx,0x10005
c002557f:	89 08                	mov    DWORD PTR [eax],ecx
c0025581:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025587:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002558d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025593:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025596:	52                   	push   edx
c0025597:	68 90 00 00 00       	push   0x90
c002559c:	6a 00                	push   0x0
c002559e:	53                   	push   ebx
c002559f:	e8 f8 b1 fd ff       	call   c000079c <memset>
c00255a4:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00255aa:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00255ae:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00255b4:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00255b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00255bc:	83 c4 10             	add    esp,0x10
c00255bf:	8d 48 ff             	lea    ecx,[eax-0x1]
c00255c2:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00255c8:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c00255ce:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255d3:	09 c8                	or     eax,ecx
c00255d5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00255db:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00255de:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c00255e5:	66 25 00 7f          	and    ax,0x7f00
c00255e9:	66 0d 27 80          	or     ax,0x8027
c00255ed:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c00255f2:	66 89 03             	mov    WORD PTR [ebx],ax
c00255f5:	19 c0                	sbb    eax,eax
c00255f7:	83 e0 f0             	and    eax,0xfffffff0
c00255fa:	83 c0 35             	add    eax,0x35
c00255fd:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0025600:	89 f8                	mov    eax,edi
c0025602:	c1 e8 10             	shr    eax,0x10
c0025605:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025608:	89 f8                	mov    eax,edi
c002560a:	c1 e8 18             	shr    eax,0x18
c002560d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0025610:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025614:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025617:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002561b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c002561e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025622:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025626:	89 f3                	mov    ebx,esi
c0025628:	31 c0                	xor    eax,eax
c002562a:	c1 e3 07             	shl    ebx,0x7
c002562d:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0025631:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0025637:	80 e1 88             	and    cl,0x88
c002563a:	74 0a                	je     c0025646 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c002563c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025641:	74 0a                	je     c002564d <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0025643:	40                   	inc    eax
c0025644:	eb eb                	jmp    c0025631 <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0025646:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002564b:	75 0a                	jne    c0025657 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c002564d:	83 ec 0c             	sub    esp,0xc
c0025650:	68 f9 d8 02 c0       	push   0xc002d8f9
c0025655:	eb 56                	jmp    c00256ad <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0025657:	b8 01 00 00 00       	mov    eax,0x1
c002565c:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0025660:	c1 e6 07             	shl    esi,0x7
c0025663:	d3 e0                	shl    eax,cl
c0025665:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0025669:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c002566f:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0025675:	85 c8                	test   eax,ecx
c0025677:	74 20                	je     c0025699 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0025679:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c002567f:	0f ba e1 1e          	bt     ecx,0x1e
c0025683:	73 ea                	jae    c002566f <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0025685:	83 ec 0c             	sub    esp,0xc
c0025688:	31 db                	xor    ebx,ebx
c002568a:	68 07 d9 02 c0       	push   0xc002d907
c002568f:	e8 09 52 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0025694:	83 c4 10             	add    esp,0x10
c0025697:	eb 43                	jmp    c00256dc <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0025699:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c002569f:	0f ba e0 1e          	bt     eax,0x1e
c00256a3:	73 17                	jae    c00256bc <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c00256a5:	83 ec 0c             	sub    esp,0xc
c00256a8:	68 07 d9 02 c0       	push   0xc002d907
c00256ad:	e8 eb 51 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00256b2:	bb 01 00 00 00       	mov    ebx,0x1
c00256b7:	83 c4 10             	add    esp,0x10
c00256ba:	eb 20                	jmp    c00256dc <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256bc:	31 db                	xor    ebx,ebx
c00256be:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c00256c3:	75 17                	jne    c00256dc <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c00256c5:	50                   	push   eax
c00256c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00256ca:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c00256d0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00256d4:	e8 8f b0 fd ff       	call   c0000768 <memcpy>
c00256d9:	83 c4 10             	add    esp,0x10
c00256dc:	83 c4 2c             	add    esp,0x2c
c00256df:	89 d8                	mov    eax,ebx
c00256e1:	5b                   	pop    ebx
c00256e2:	5e                   	pop    esi
c00256e3:	5f                   	pop    edi
c00256e4:	5d                   	pop    ebp
c00256e5:	c3                   	ret    

c00256e6 <SATA::read(unsigned long long, int, void*)>:
c00256e6:	57                   	push   edi
c00256e7:	b8 04 00 00 00       	mov    eax,0x4
c00256ec:	56                   	push   esi
c00256ed:	53                   	push   ebx
c00256ee:	83 ec 10             	sub    esp,0x10
c00256f1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00256f5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00256f9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00256fc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025700:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025704:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002570a:	77 3b                	ja     c0025747 <SATA::read(unsigned long long, int, void*)+0x61>
c002570c:	b8 06 00 00 00       	mov    eax,0x6
c0025711:	85 d2                	test   edx,edx
c0025713:	74 32                	je     c0025747 <SATA::read(unsigned long long, int, void*)+0x61>
c0025715:	50                   	push   eax
c0025716:	50                   	push   eax
c0025717:	6a 00                	push   0x0
c0025719:	52                   	push   edx
c002571a:	53                   	push   ebx
c002571b:	57                   	push   edi
c002571c:	56                   	push   esi
c002571d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025721:	e8 5a fd ff ff       	call   c0025480 <SATA::access(unsigned long long, int, void*, bool)>
c0025726:	83 c4 20             	add    esp,0x20
c0025729:	85 c0                	test   eax,eax
c002572b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002572f:	75 11                	jne    c0025742 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025731:	01 1d a8 31 03 c0    	add    DWORD PTR ds:0xc00331a8,ebx
c0025737:	e8 aa b2 fe ff       	call   c00109e6 <VgaText::updateDiskUsage()>
c002573c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025740:	eb 05                	jmp    c0025747 <SATA::read(unsigned long long, int, void*)+0x61>
c0025742:	b8 01 00 00 00       	mov    eax,0x1
c0025747:	83 c4 10             	add    esp,0x10
c002574a:	5b                   	pop    ebx
c002574b:	5e                   	pop    esi
c002574c:	5f                   	pop    edi
c002574d:	c3                   	ret    

c002574e <SATA::write(unsigned long long, int, void*)>:
c002574e:	55                   	push   ebp
c002574f:	b8 04 00 00 00       	mov    eax,0x4
c0025754:	57                   	push   edi
c0025755:	56                   	push   esi
c0025756:	53                   	push   ebx
c0025757:	83 ec 1c             	sub    esp,0x1c
c002575a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002575e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025762:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025765:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025769:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002576d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025773:	77 56                	ja     c00257cb <SATA::write(unsigned long long, int, void*)+0x7d>
c0025775:	b8 06 00 00 00       	mov    eax,0x6
c002577a:	85 ff                	test   edi,edi
c002577c:	74 4d                	je     c00257cb <SATA::write(unsigned long long, int, void*)+0x7d>
c002577e:	89 ee                	mov    esi,ebp
c0025780:	c1 e6 09             	shl    esi,0x9
c0025783:	01 fe                	add    esi,edi
c0025785:	89 c8                	mov    eax,ecx
c0025787:	89 da                	mov    edx,ebx
c0025789:	83 c0 01             	add    eax,0x1
c002578c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025790:	83 d2 00             	adc    edx,0x0
c0025793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025797:	50                   	push   eax
c0025798:	50                   	push   eax
c0025799:	6a 01                	push   0x1
c002579b:	57                   	push   edi
c002579c:	81 c7 00 02 00 00    	add    edi,0x200
c00257a2:	6a 01                	push   0x1
c00257a4:	53                   	push   ebx
c00257a5:	51                   	push   ecx
c00257a6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00257aa:	e8 d1 fc ff ff       	call   c0025480 <SATA::access(unsigned long long, int, void*, bool)>
c00257af:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257b7:	83 c4 20             	add    esp,0x20
c00257ba:	39 f7                	cmp    edi,esi
c00257bc:	75 c7                	jne    c0025785 <SATA::write(unsigned long long, int, void*)+0x37>
c00257be:	01 2d a4 31 03 c0    	add    DWORD PTR ds:0xc00331a4,ebp
c00257c4:	e8 1d b2 fe ff       	call   c00109e6 <VgaText::updateDiskUsage()>
c00257c9:	31 c0                	xor    eax,eax
c00257cb:	83 c4 1c             	add    esp,0x1c
c00257ce:	5b                   	pop    ebx
c00257cf:	5e                   	pop    esi
c00257d0:	5f                   	pop    edi
c00257d1:	5d                   	pop    ebp
c00257d2:	c3                   	ret    
c00257d3:	90                   	nop

c00257d4 <SATAPI::write(unsigned long long, int, void*)>:
c00257d4:	b8 03 00 00 00       	mov    eax,0x3
c00257d9:	c3                   	ret    

c00257da <SATAPI::close(int, int, void*)>:
c00257da:	83 ec 0c             	sub    esp,0xc
c00257dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257e7:	85 c0                	test   eax,eax
c00257e9:	74 0c                	je     c00257f7 <SATAPI::close(int, int, void*)+0x1d>
c00257eb:	83 ec 0c             	sub    esp,0xc
c00257ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00257f0:	50                   	push   eax
c00257f1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257f4:	83 c4 10             	add    esp,0x10
c00257f7:	31 c0                	xor    eax,eax
c00257f9:	83 c4 0c             	add    esp,0xc
c00257fc:	c3                   	ret    
c00257fd:	90                   	nop

c00257fe <SATAPI::SATAPI()>:
c00257fe:	83 ec 0c             	sub    esp,0xc
c0025801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025805:	83 ec 04             	sub    esp,0x4
c0025808:	68 00 08 00 00       	push   0x800
c002580d:	68 50 d9 02 c0       	push   0xc002d950
c0025812:	50                   	push   eax
c0025813:	e8 30 ef fe ff       	call   c0014748 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025818:	83 c4 10             	add    esp,0x10
c002581b:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c0025820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025824:	89 10                	mov    DWORD PTR [eax],edx
c0025826:	90                   	nop
c0025827:	83 c4 0c             	add    esp,0xc
c002582a:	c3                   	ret    
c002582b:	90                   	nop

c002582c <SATAPI::diskRemoved()>:
c002582c:	83 ec 18             	sub    esp,0x18
c002582f:	68 5c d9 02 c0       	push   0xc002d95c
c0025834:	e8 a8 d6 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0025839:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002583d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025844:	83 c4 1c             	add    esp,0x1c
c0025847:	c3                   	ret    

c0025848 <SATAPI::diskInserted()>:
c0025848:	53                   	push   ebx
c0025849:	83 ec 14             	sub    esp,0x14
c002584c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025850:	68 73 d9 02 c0       	push   0xc002d973
c0025855:	e8 87 d6 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c002585a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025864:	e8 47 ef fe ff       	call   c00147b0 <PhysicalDisk::startCache()>
c0025869:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002586d:	83 c4 18             	add    esp,0x18
c0025870:	5b                   	pop    ebx
c0025871:	e9 1a 12 ff ff       	jmp    c0016a90 <createPartitionsForDisk(PhysicalDisk*)>

c0025876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025876:	55                   	push   ebp
c0025877:	57                   	push   edi
c0025878:	56                   	push   esi
c0025879:	53                   	push   ebx
c002587a:	83 ec 24             	sub    esp,0x24
c002587d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025881:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025885:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c002588b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002588f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025893:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025899:	8d 5f 02             	lea    ebx,[edi+0x2]
c002589c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258a2:	c1 e3 07             	shl    ebx,0x7
c00258a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00258a9:	89 f8                	mov    eax,edi
c00258ab:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00258af:	c1 e0 07             	shl    eax,0x7
c00258b2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00258b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258ba:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258c4:	53                   	push   ebx
c00258c5:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c00258cb:	e8 da eb ff ff       	call   c00244aa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258d0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258d4:	83 c4 10             	add    esp,0x10
c00258d7:	b8 01 00 00 00       	mov    eax,0x1
c00258dc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00258e1:	0f 84 8a 01 00 00    	je     c0025a71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00258e7:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00258ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00258ef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00258f5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00258fb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00258ff:	c1 e1 05             	shl    ecx,0x5
c0025902:	01 c8                	add    eax,ecx
c0025904:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025906:	81 e1 80 ff 00 00    	and    ecx,0xff80
c002590c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025912:	89 08                	mov    DWORD PTR [eax],ecx
c0025914:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c002591a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025920:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025926:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025929:	52                   	push   edx
c002592a:	68 90 00 00 00       	push   0x90
c002592f:	6a 00                	push   0x0
c0025931:	53                   	push   ebx
c0025932:	e8 65 ae fd ff       	call   c000079c <memset>
c0025937:	83 c4 0c             	add    esp,0xc
c002593a:	8d 43 40             	lea    eax,[ebx+0x40]
c002593d:	6a 0c                	push   0xc
c002593f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025943:	50                   	push   eax
c0025944:	e8 1f ae fd ff       	call   c0000768 <memcpy>
c0025949:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002594f:	89 ea                	mov    edx,ebp
c0025951:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025957:	c1 ea 18             	shr    edx,0x18
c002595a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002595e:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025961:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025964:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025968:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002596e:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025974:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025979:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002597d:	09 c8                	or     eax,ecx
c002597f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025983:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025989:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002598c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025993:	66 25 00 7f          	and    ax,0x7f00
c0025997:	66 0d 27 80          	or     ax,0x8027
c002599b:	66 89 03             	mov    WORD PTR [ebx],ax
c002599e:	89 e8                	mov    eax,ebp
c00259a0:	c1 e8 10             	shr    eax,0x10
c00259a3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259a6:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00259aa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00259b1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259b4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00259b8:	83 c4 10             	add    esp,0x10
c00259bb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00259c3:	31 c0                	xor    eax,eax
c00259c5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c00259cb:	80 e1 88             	and    cl,0x88
c00259ce:	74 0a                	je     c00259da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c00259d0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259d5:	74 0a                	je     c00259e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259d7:	40                   	inc    eax
c00259d8:	eb eb                	jmp    c00259c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c00259da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259df:	75 0f                	jne    c00259f0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c00259e1:	83 ec 0c             	sub    esp,0xc
c00259e4:	68 f9 d8 02 c0       	push   0xc002d8f9
c00259e9:	e8 af 4e ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00259ee:	eb 3a                	jmp    c0025a2a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00259f0:	b8 01 00 00 00       	mov    eax,0x1
c00259f5:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00259f9:	c1 e7 07             	shl    edi,0x7
c00259fc:	d3 e0                	shl    eax,cl
c00259fe:	03 3c 24             	add    edi,DWORD PTR [esp]
c0025a01:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0025a07:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0025a0d:	85 d0                	test   eax,edx
c0025a0f:	74 23                	je     c0025a34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0025a11:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0025a17:	0f ba e2 1e          	bt     edx,0x1e
c0025a1b:	73 ea                	jae    c0025a07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0025a1d:	83 ec 0c             	sub    esp,0xc
c0025a20:	68 8b d9 02 c0       	push   0xc002d98b
c0025a25:	e8 b7 d4 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0025a2a:	83 c4 10             	add    esp,0x10
c0025a2d:	b8 01 00 00 00       	mov    eax,0x1
c0025a32:	eb 3d                	jmp    c0025a71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0025a34:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0025a3a:	0f ba e0 1e          	bt     eax,0x1e
c0025a3e:	73 0a                	jae    c0025a4a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0025a40:	83 ec 0c             	sub    esp,0xc
c0025a43:	68 9e d9 02 c0       	push   0xc002d99e
c0025a48:	eb db                	jmp    c0025a25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025a4a:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0025a4f:	74 1e                	je     c0025a6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a51:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025a56:	74 17                	je     c0025a6f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025a58:	50                   	push   eax
c0025a59:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025a5d:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025a63:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025a67:	e8 fc ac fd ff       	call   c0000768 <memcpy>
c0025a6c:	83 c4 10             	add    esp,0x10
c0025a6f:	31 c0                	xor    eax,eax
c0025a71:	83 c4 1c             	add    esp,0x1c
c0025a74:	5b                   	pop    ebx
c0025a75:	5e                   	pop    esi
c0025a76:	5f                   	pop    edi
c0025a77:	5d                   	pop    ebp
c0025a78:	c3                   	ret    
c0025a79:	90                   	nop

c0025a7a <SATAPI::eject()>:
c0025a7a:	57                   	push   edi
c0025a7b:	b9 03 00 00 00       	mov    ecx,0x3
c0025a80:	53                   	push   ebx
c0025a81:	83 ec 14             	sub    esp,0x14
c0025a84:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025a88:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a8c:	fc                   	cld    
c0025a8d:	31 c0                	xor    eax,eax
c0025a8f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a91:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025a96:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025a9b:	50                   	push   eax
c0025a9c:	6a 00                	push   0x0
c0025a9e:	6a 00                	push   0x0
c0025aa0:	6a 00                	push   0x0
c0025aa2:	6a 00                	push   0x0
c0025aa4:	6a 02                	push   0x2
c0025aa6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025aaa:	50                   	push   eax
c0025aab:	53                   	push   ebx
c0025aac:	e8 c5 fd ff ff       	call   c0025876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ab1:	83 c4 14             	add    esp,0x14
c0025ab4:	53                   	push   ebx
c0025ab5:	e8 72 fd ff ff       	call   c002582c <SATAPI::diskRemoved()>
c0025aba:	83 c4 24             	add    esp,0x24
c0025abd:	31 c0                	xor    eax,eax
c0025abf:	5b                   	pop    ebx
c0025ac0:	5f                   	pop    edi
c0025ac1:	c3                   	ret    

c0025ac2 <SATAPI::detectMedia()>:
c0025ac2:	56                   	push   esi
c0025ac3:	53                   	push   ebx
c0025ac4:	83 ec 28             	sub    esp,0x28
c0025ac7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025acb:	6a 0c                	push   0xc
c0025acd:	6a 00                	push   0x0
c0025acf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025ad3:	56                   	push   esi
c0025ad4:	e8 c3 ac fd ff       	call   c000079c <memset>
c0025ad9:	83 c4 0c             	add    esp,0xc
c0025adc:	6a 00                	push   0x0
c0025ade:	6a 00                	push   0x0
c0025ae0:	6a 00                	push   0x0
c0025ae2:	6a 00                	push   0x0
c0025ae4:	6a 00                	push   0x0
c0025ae6:	56                   	push   esi
c0025ae7:	53                   	push   ebx
c0025ae8:	e8 89 fd ff ff       	call   c0025876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025aed:	83 c4 1c             	add    esp,0x1c
c0025af0:	6a 0c                	push   0xc
c0025af2:	6a 00                	push   0x0
c0025af4:	56                   	push   esi
c0025af5:	e8 a2 ac fd ff       	call   c000079c <memset>
c0025afa:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025aff:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b04:	83 c4 0c             	add    esp,0xc
c0025b07:	6a 01                	push   0x1
c0025b09:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b0d:	50                   	push   eax
c0025b0e:	6a 00                	push   0x0
c0025b10:	6a 00                	push   0x0
c0025b12:	6a 12                	push   0x12
c0025b14:	56                   	push   esi
c0025b15:	53                   	push   ebx
c0025b16:	e8 5b fd ff ff       	call   c0025876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b1b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b1f:	83 c4 20             	add    esp,0x20
c0025b22:	83 e0 7f             	and    eax,0x7f
c0025b25:	3c 70                	cmp    al,0x70
c0025b27:	74 15                	je     c0025b3e <SATAPI::detectMedia()+0x7c>
c0025b29:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b30:	75 0c                	jne    c0025b3e <SATAPI::detectMedia()+0x7c>
c0025b32:	83 ec 0c             	sub    esp,0xc
c0025b35:	53                   	push   ebx
c0025b36:	e8 0d fd ff ff       	call   c0025848 <SATAPI::diskInserted()>
c0025b3b:	83 c4 10             	add    esp,0x10
c0025b3e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b42:	83 e0 0f             	and    eax,0xf
c0025b45:	3c 02                	cmp    al,0x2
c0025b47:	75 1b                	jne    c0025b64 <SATAPI::detectMedia()+0xa2>
c0025b49:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b4e:	75 2d                	jne    c0025b7d <SATAPI::detectMedia()+0xbb>
c0025b50:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b57:	74 24                	je     c0025b7d <SATAPI::detectMedia()+0xbb>
c0025b59:	83 ec 0c             	sub    esp,0xc
c0025b5c:	53                   	push   ebx
c0025b5d:	e8 ca fc ff ff       	call   c002582c <SATAPI::diskRemoved()>
c0025b62:	eb 16                	jmp    c0025b7a <SATAPI::detectMedia()+0xb8>
c0025b64:	84 c0                	test   al,al
c0025b66:	75 15                	jne    c0025b7d <SATAPI::detectMedia()+0xbb>
c0025b68:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b6f:	75 0c                	jne    c0025b7d <SATAPI::detectMedia()+0xbb>
c0025b71:	83 ec 0c             	sub    esp,0xc
c0025b74:	53                   	push   ebx
c0025b75:	e8 ce fc ff ff       	call   c0025848 <SATAPI::diskInserted()>
c0025b7a:	83 c4 10             	add    esp,0x10
c0025b7d:	83 c4 24             	add    esp,0x24
c0025b80:	5b                   	pop    ebx
c0025b81:	5e                   	pop    esi
c0025b82:	c3                   	ret    
c0025b83:	90                   	nop

c0025b84 <SATAPI::open(int, int, void*)>:
c0025b84:	56                   	push   esi
c0025b85:	53                   	push   ebx
c0025b86:	50                   	push   eax
c0025b87:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b8f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025b99:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025b9f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025ba9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bad:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bb7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025bbd:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bc4:	e8 cd a3 fe ff       	call   c000ff96 <Phys::allocatePage()>
c0025bc9:	89 c6                	mov    esi,eax
c0025bcb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bd1:	81 c6 00 10 00 00    	add    esi,0x1000
c0025bd7:	e8 ba a3 fe ff       	call   c000ff96 <Phys::allocatePage()>
c0025bdc:	39 c6                	cmp    esi,eax
c0025bde:	74 10                	je     c0025bf0 <SATAPI::open(int, int, void*)+0x6c>
c0025be0:	83 ec 0c             	sub    esp,0xc
c0025be3:	68 b3 d9 02 c0       	push   0xc002d9b3
c0025be8:	e8 b0 4c ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0025bed:	83 c4 10             	add    esp,0x10
c0025bf0:	83 ec 0c             	sub    esp,0xc
c0025bf3:	6a 02                	push   0x2
c0025bf5:	e8 e1 be fe ff       	call   c0011adb <Virt::allocateKernelVirtualPages(int)>
c0025bfa:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c00:	6a 03                	push   0x3
c0025c02:	50                   	push   eax
c0025c03:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c09:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0025c0f:	e8 fe c6 fe ff       	call   c0012312 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c14:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c1b:	83 c4 14             	add    esp,0x14
c0025c1e:	53                   	push   ebx
c0025c1f:	e8 9e fe ff ff       	call   c0025ac2 <SATAPI::detectMedia()>
c0025c24:	83 c4 14             	add    esp,0x14
c0025c27:	31 c0                	xor    eax,eax
c0025c29:	5b                   	pop    ebx
c0025c2a:	5e                   	pop    esi
c0025c2b:	c3                   	ret    

c0025c2c <SATAPI::read(unsigned long long, int, void*)>:
c0025c2c:	55                   	push   ebp
c0025c2d:	57                   	push   edi
c0025c2e:	56                   	push   esi
c0025c2f:	53                   	push   ebx
c0025c30:	83 ec 1c             	sub    esp,0x1c
c0025c33:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c3b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c3f:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c46:	74 19                	je     c0025c61 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c48:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c4d:	7e 2e                	jle    c0025c7d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c4f:	83 ec 0c             	sub    esp,0xc
c0025c52:	68 c9 d9 02 c0       	push   0xc002d9c9
c0025c57:	e8 41 4c ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0025c5c:	83 c4 10             	add    esp,0x10
c0025c5f:	eb 1c                	jmp    c0025c7d <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c61:	83 ec 0c             	sub    esp,0xc
c0025c64:	55                   	push   ebp
c0025c65:	e8 58 fe ff ff       	call   c0025ac2 <SATAPI::detectMedia()>
c0025c6a:	83 c4 10             	add    esp,0x10
c0025c6d:	b8 02 00 00 00       	mov    eax,0x2
c0025c72:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c79:	75 cd                	jne    c0025c48 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025c7b:	eb 49                	jmp    c0025cc6 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025c7d:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c81:	b9 03 00 00 00       	mov    ecx,0x3
c0025c86:	fc                   	cld    
c0025c87:	31 c0                	xor    eax,eax
c0025c89:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c8b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025c90:	89 d8                	mov    eax,ebx
c0025c92:	86 e0                	xchg   al,ah
c0025c94:	c1 c0 10             	rol    eax,0x10
c0025c97:	86 e0                	xchg   al,ah
c0025c99:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025c9d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025ca1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025ca5:	50                   	push   eax
c0025ca6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025caa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cae:	56                   	push   esi
c0025caf:	53                   	push   ebx
c0025cb0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025cb4:	c1 e0 0b             	shl    eax,0xb
c0025cb7:	50                   	push   eax
c0025cb8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cbc:	50                   	push   eax
c0025cbd:	55                   	push   ebp
c0025cbe:	e8 b3 fb ff ff       	call   c0025876 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cc3:	83 c4 20             	add    esp,0x20
c0025cc6:	83 c4 1c             	add    esp,0x1c
c0025cc9:	5b                   	pop    ebx
c0025cca:	5e                   	pop    esi
c0025ccb:	5f                   	pop    edi
c0025ccc:	5d                   	pop    ebp
c0025ccd:	c3                   	ret    

c0025cce <AVX::open(int, int, void*)>:
c0025cce:	83 ec 0c             	sub    esp,0xc
c0025cd1:	e8 42 11 00 00       	call   c0026e18 <avxInit>
c0025cd6:	b8 00 00 00 00       	mov    eax,0x0
c0025cdb:	83 c4 0c             	add    esp,0xc
c0025cde:	c3                   	ret    
c0025cdf:	90                   	nop

c0025ce0 <AVX::close(int, int, void*)>:
c0025ce0:	83 ec 0c             	sub    esp,0xc
c0025ce3:	e8 31 11 00 00       	call   c0026e19 <avxClose>
c0025ce8:	b8 00 00 00 00       	mov    eax,0x0
c0025ced:	83 c4 0c             	add    esp,0xc
c0025cf0:	c3                   	ret    
c0025cf1:	90                   	nop

c0025cf2 <AVX::available()>:
c0025cf2:	83 ec 0c             	sub    esp,0xc
c0025cf5:	e8 16 11 00 00       	call   c0026e10 <avxDetect>
c0025cfa:	85 c0                	test   eax,eax
c0025cfc:	0f 95 c0             	setne  al
c0025cff:	83 c4 0c             	add    esp,0xc
c0025d02:	c3                   	ret    
c0025d03:	90                   	nop

c0025d04 <AVX::save(void*)>:
c0025d04:	83 ec 0c             	sub    esp,0xc
c0025d07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d0b:	83 ec 0c             	sub    esp,0xc
c0025d0e:	50                   	push   eax
c0025d0f:	e8 02 11 00 00       	call   c0026e16 <avxSave>
c0025d14:	83 c4 10             	add    esp,0x10
c0025d17:	90                   	nop
c0025d18:	83 c4 0c             	add    esp,0xc
c0025d1b:	c3                   	ret    

c0025d1c <AVX::load(void*)>:
c0025d1c:	83 ec 0c             	sub    esp,0xc
c0025d1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d23:	83 ec 0c             	sub    esp,0xc
c0025d26:	50                   	push   eax
c0025d27:	e8 eb 10 00 00       	call   c0026e17 <avxLoad>
c0025d2c:	83 c4 10             	add    esp,0x10
c0025d2f:	90                   	nop
c0025d30:	83 c4 0c             	add    esp,0xc
c0025d33:	c3                   	ret    

c0025d34 <AVX::AVX()>:
c0025d34:	83 ec 0c             	sub    esp,0xc
c0025d37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d3b:	83 ec 08             	sub    esp,0x8
c0025d3e:	68 2c da 02 c0       	push   0xc002da2c
c0025d43:	50                   	push   eax
c0025d44:	e8 dd ea fe ff       	call   c0014826 <FPU::FPU(char const*)>
c0025d49:	83 c4 10             	add    esp,0x10
c0025d4c:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0025d51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d55:	89 10                	mov    DWORD PTR [eax],edx
c0025d57:	90                   	nop
c0025d58:	83 c4 0c             	add    esp,0xc
c0025d5b:	c3                   	ret    

c0025d5c <MMX::available()>:
c0025d5c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025d61:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d67:	83 e0 20             	and    eax,0x20
c0025d6a:	84 c0                	test   al,al
c0025d6c:	0f 95 c0             	setne  al
c0025d6f:	c3                   	ret    

c0025d70 <MMX::open(int, int, void*)>:
c0025d70:	83 ec 0c             	sub    esp,0xc
c0025d73:	e8 2a 11 00 00       	call   c0026ea2 <x87Init>
c0025d78:	b8 00 00 00 00       	mov    eax,0x0
c0025d7d:	83 c4 0c             	add    esp,0xc
c0025d80:	c3                   	ret    
c0025d81:	90                   	nop

c0025d82 <MMX::close(int, int, void*)>:
c0025d82:	83 ec 0c             	sub    esp,0xc
c0025d85:	e8 32 11 00 00       	call   c0026ebc <x87Close>
c0025d8a:	b8 00 00 00 00       	mov    eax,0x0
c0025d8f:	83 c4 0c             	add    esp,0xc
c0025d92:	c3                   	ret    
c0025d93:	90                   	nop

c0025d94 <MMX::save(void*)>:
c0025d94:	83 ec 0c             	sub    esp,0xc
c0025d97:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d9b:	83 ec 0c             	sub    esp,0xc
c0025d9e:	50                   	push   eax
c0025d9f:	e8 ed 10 00 00       	call   c0026e91 <x87Save>
c0025da4:	83 c4 10             	add    esp,0x10
c0025da7:	90                   	nop
c0025da8:	83 c4 0c             	add    esp,0xc
c0025dab:	c3                   	ret    

c0025dac <MMX::load(void*)>:
c0025dac:	83 ec 0c             	sub    esp,0xc
c0025daf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025db3:	83 ec 0c             	sub    esp,0xc
c0025db6:	50                   	push   eax
c0025db7:	e8 de 10 00 00       	call   c0026e9a <x87Load>
c0025dbc:	83 c4 10             	add    esp,0x10
c0025dbf:	90                   	nop
c0025dc0:	83 c4 0c             	add    esp,0xc
c0025dc3:	c3                   	ret    

c0025dc4 <MMX::MMX()>:
c0025dc4:	83 ec 0c             	sub    esp,0xc
c0025dc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dcb:	83 ec 08             	sub    esp,0x8
c0025dce:	68 6c da 02 c0       	push   0xc002da6c
c0025dd3:	50                   	push   eax
c0025dd4:	e8 4d ea fe ff       	call   c0014826 <FPU::FPU(char const*)>
c0025dd9:	83 c4 10             	add    esp,0x10
c0025ddc:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0025de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025de5:	89 10                	mov    DWORD PTR [eax],edx
c0025de7:	90                   	nop
c0025de8:	83 c4 0c             	add    esp,0xc
c0025deb:	c3                   	ret    

c0025dec <SSE::open(int, int, void*)>:
c0025dec:	83 ec 0c             	sub    esp,0xc
c0025def:	e8 60 10 00 00       	call   c0026e54 <sseInit>
c0025df4:	b8 00 00 00 00       	mov    eax,0x0
c0025df9:	83 c4 0c             	add    esp,0xc
c0025dfc:	c3                   	ret    
c0025dfd:	90                   	nop

c0025dfe <SSE::close(int, int, void*)>:
c0025dfe:	83 ec 0c             	sub    esp,0xc
c0025e01:	e8 5e 10 00 00       	call   c0026e64 <sseClose>
c0025e06:	b8 00 00 00 00       	mov    eax,0x0
c0025e0b:	83 c4 0c             	add    esp,0xc
c0025e0e:	c3                   	ret    
c0025e0f:	90                   	nop

c0025e10 <SSE::available()>:
c0025e10:	83 ec 1c             	sub    esp,0x1c
c0025e13:	e8 18 10 00 00       	call   c0026e30 <absolutelyNoChanceInHell>
c0025e18:	85 c0                	test   eax,eax
c0025e1a:	0f 95 c0             	setne  al
c0025e1d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e21:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e25:	83 c4 1c             	add    esp,0x1c
c0025e28:	c3                   	ret    
c0025e29:	90                   	nop

c0025e2a <SSE::save(void*)>:
c0025e2a:	83 ec 0c             	sub    esp,0xc
c0025e2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e31:	83 ec 0c             	sub    esp,0xc
c0025e34:	50                   	push   eax
c0025e35:	e8 0e 10 00 00       	call   c0026e48 <sseSave>
c0025e3a:	83 c4 10             	add    esp,0x10
c0025e3d:	90                   	nop
c0025e3e:	83 c4 0c             	add    esp,0xc
c0025e41:	c3                   	ret    

c0025e42 <SSE::load(void*)>:
c0025e42:	83 ec 0c             	sub    esp,0xc
c0025e45:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e49:	83 ec 0c             	sub    esp,0xc
c0025e4c:	50                   	push   eax
c0025e4d:	e8 fc 0f 00 00       	call   c0026e4e <sseLoad>
c0025e52:	83 c4 10             	add    esp,0x10
c0025e55:	90                   	nop
c0025e56:	83 c4 0c             	add    esp,0xc
c0025e59:	c3                   	ret    

c0025e5a <SSE::SSE()>:
c0025e5a:	83 ec 0c             	sub    esp,0xc
c0025e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e61:	83 ec 08             	sub    esp,0x8
c0025e64:	68 ac da 02 c0       	push   0xc002daac
c0025e69:	50                   	push   eax
c0025e6a:	e8 b7 e9 fe ff       	call   c0014826 <FPU::FPU(char const*)>
c0025e6f:	83 c4 10             	add    esp,0x10
c0025e72:	ba bc da 02 c0       	mov    edx,0xc002dabc
c0025e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e7b:	89 10                	mov    DWORD PTR [eax],edx
c0025e7d:	90                   	nop
c0025e7e:	83 c4 0c             	add    esp,0xc
c0025e81:	c3                   	ret    

c0025e82 <x87::open(int, int, void*)>:
c0025e82:	83 ec 0c             	sub    esp,0xc
c0025e85:	e8 18 10 00 00       	call   c0026ea2 <x87Init>
c0025e8a:	b8 00 00 00 00       	mov    eax,0x0
c0025e8f:	83 c4 0c             	add    esp,0xc
c0025e92:	c3                   	ret    
c0025e93:	90                   	nop

c0025e94 <x87::close(int, int, void*)>:
c0025e94:	83 ec 0c             	sub    esp,0xc
c0025e97:	e8 20 10 00 00       	call   c0026ebc <x87Close>
c0025e9c:	b8 00 00 00 00       	mov    eax,0x0
c0025ea1:	83 c4 0c             	add    esp,0xc
c0025ea4:	c3                   	ret    
c0025ea5:	90                   	nop

c0025ea6 <x87::available()>:
c0025ea6:	83 ec 0c             	sub    esp,0xc
c0025ea9:	e8 c8 0f 00 00       	call   c0026e76 <x87Detect>
c0025eae:	85 c0                	test   eax,eax
c0025eb0:	0f 95 c0             	setne  al
c0025eb3:	83 c4 0c             	add    esp,0xc
c0025eb6:	c3                   	ret    
c0025eb7:	90                   	nop

c0025eb8 <x87::save(void*)>:
c0025eb8:	83 ec 0c             	sub    esp,0xc
c0025ebb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ebf:	83 ec 0c             	sub    esp,0xc
c0025ec2:	50                   	push   eax
c0025ec3:	e8 c9 0f 00 00       	call   c0026e91 <x87Save>
c0025ec8:	83 c4 10             	add    esp,0x10
c0025ecb:	90                   	nop
c0025ecc:	83 c4 0c             	add    esp,0xc
c0025ecf:	c3                   	ret    

c0025ed0 <x87::load(void*)>:
c0025ed0:	83 ec 0c             	sub    esp,0xc
c0025ed3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ed7:	83 ec 0c             	sub    esp,0xc
c0025eda:	50                   	push   eax
c0025edb:	e8 ba 0f 00 00       	call   c0026e9a <x87Load>
c0025ee0:	83 c4 10             	add    esp,0x10
c0025ee3:	90                   	nop
c0025ee4:	83 c4 0c             	add    esp,0xc
c0025ee7:	c3                   	ret    

c0025ee8 <x87::x87()>:
c0025ee8:	83 ec 0c             	sub    esp,0xc
c0025eeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025eef:	83 ec 08             	sub    esp,0x8
c0025ef2:	68 ec da 02 c0       	push   0xc002daec
c0025ef7:	50                   	push   eax
c0025ef8:	e8 29 e9 fe ff       	call   c0014826 <FPU::FPU(char const*)>
c0025efd:	83 c4 10             	add    esp,0x10
c0025f00:	ba fc da 02 c0       	mov    edx,0xc002dafc
c0025f05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f09:	89 10                	mov    DWORD PTR [eax],edx
c0025f0b:	90                   	nop
c0025f0c:	83 c4 0c             	add    esp,0xc
c0025f0f:	c3                   	ret    

c0025f10 <APIC::disable()>:
c0025f10:	90                   	nop
c0025f11:	c3                   	ret    

c0025f12 <APIC::close(int, int, void*)>:
c0025f12:	55                   	push   ebp
c0025f13:	89 e5                	mov    ebp,esp
c0025f15:	83 ec 08             	sub    esp,0x8
c0025f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f1d:	83 c0 3c             	add    eax,0x3c
c0025f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f22:	83 ec 0c             	sub    esp,0xc
c0025f25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f28:	ff d0                	call   eax
c0025f2a:	83 c4 10             	add    esp,0x10
c0025f2d:	b8 00 00 00 00       	mov    eax,0x0
c0025f32:	c9                   	leave  
c0025f33:	c3                   	ret    

c0025f34 <IOAPIC::close(int, int, void*)>:
c0025f34:	b8 00 00 00 00       	mov    eax,0x0
c0025f39:	c3                   	ret    

c0025f3a <APIC::io_wait()>:
c0025f3a:	eb 00                	jmp    c0025f3c <APIC::io_wait()+0x2>
c0025f3c:	eb 00                	jmp    c0025f3e <APIC::io_wait()+0x4>
c0025f3e:	90                   	nop
c0025f3f:	c3                   	ret    

c0025f40 <APIC::getBase()>:
c0025f40:	55                   	push   ebp
c0025f41:	89 e5                	mov    ebp,esp
c0025f43:	83 ec 18             	sub    esp,0x18
c0025f46:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f4b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f51:	83 e0 08             	and    eax,0x8
c0025f54:	84 c0                	test   al,al
c0025f56:	75 07                	jne    c0025f5f <APIC::getBase()+0x1f>
c0025f58:	b8 00 00 00 00       	mov    eax,0x0
c0025f5d:	eb 21                	jmp    c0025f80 <APIC::getBase()+0x40>
c0025f5f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f64:	83 ec 08             	sub    esp,0x8
c0025f67:	6a 1b                	push   0x1b
c0025f69:	50                   	push   eax
c0025f6a:	e8 61 8f fe ff       	call   c000eed0 <Computer::rdmsr(unsigned int)>
c0025f6f:	83 c4 10             	add    esp,0x10
c0025f72:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f75:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025f80:	c9                   	leave  
c0025f81:	c3                   	ret    

c0025f82 <APIC::eoi(unsigned char)>:
c0025f82:	55                   	push   ebp
c0025f83:	89 e5                	mov    ebp,esp
c0025f85:	83 ec 28             	sub    esp,0x28
c0025f88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f8b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f8e:	83 ec 0c             	sub    esp,0xc
c0025f91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f94:	e8 a7 ff ff ff       	call   c0025f40 <APIC::getBase()>
c0025f99:	83 c4 10             	add    esp,0x10
c0025f9c:	05 b0 00 00 00       	add    eax,0xb0
c0025fa1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fa4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fa7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fad:	90                   	nop
c0025fae:	c9                   	leave  
c0025faf:	c3                   	ret    

c0025fb0 <APIC::open(int, int, void*)>:
c0025fb0:	55                   	push   ebp
c0025fb1:	89 e5                	mov    ebp,esp
c0025fb3:	57                   	push   edi
c0025fb4:	56                   	push   esi
c0025fb5:	53                   	push   ebx
c0025fb6:	83 ec 2c             	sub    esp,0x2c
c0025fb9:	83 ec 0c             	sub    esp,0xc
c0025fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fbf:	e8 7c ff ff ff       	call   c0025f40 <APIC::getBase()>
c0025fc4:	83 c4 10             	add    esp,0x10
c0025fc7:	89 c2                	mov    edx,eax
c0025fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fcc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fd2:	0f b6 f8             	movzx  edi,al
c0025fd5:	89 d0                	mov    eax,edx
c0025fd7:	ba 00 00 00 00       	mov    edx,0x0
c0025fdc:	89 c1                	mov    ecx,eax
c0025fde:	80 e5 ff             	and    ch,0xff
c0025fe1:	89 cb                	mov    ebx,ecx
c0025fe3:	0f b6 f2             	movzx  esi,dl
c0025fe6:	89 d8                	mov    eax,ebx
c0025fe8:	89 f2                	mov    edx,esi
c0025fea:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025fed:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ff0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025ff4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ff8:	83 e0 00             	and    eax,0x0
c0025ffb:	09 d0                	or     eax,edx
c0025ffd:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026004:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002600a:	8d 50 01             	lea    edx,[eax+0x1]
c002600d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026010:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026016:	0f b6 d0             	movzx  edx,al
c0026019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002601c:	83 c2 08             	add    edx,0x8
c002601f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026023:	0f b6 c9             	movzx  ecx,cl
c0026026:	81 c9 00 00 01 00    	or     ecx,0x10000
c002602c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026030:	83 ec 0c             	sub    esp,0xc
c0026033:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026036:	e8 05 ff ff ff       	call   c0025f40 <APIC::getBase()>
c002603b:	83 c4 10             	add    esp,0x10
c002603e:	05 f0 00 00 00       	add    eax,0xf0
c0026043:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026046:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026049:	8b 00                	mov    eax,DWORD PTR [eax]
c002604b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002604e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026055:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c002605c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002605f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026062:	89 10                	mov    DWORD PTR [eax],edx
c0026064:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002606b:	a1 30 17 03 c0       	mov    eax,ds:0xc0031730
c0026070:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026073:	7d 7c                	jge    c00260f1 <APIC::open(int, int, void*)+0x141>
c0026075:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026078:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c002607f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026082:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026085:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c002608c:	c1 e8 08             	shr    eax,0x8
c002608f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026093:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026096:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c002609d:	c1 e8 18             	shr    eax,0x18
c00260a0:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260a3:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260a7:	75 40                	jne    c00260e9 <APIC::open(int, int, void*)+0x139>
c00260a9:	83 ec 0c             	sub    esp,0xc
c00260ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260af:	e8 8c fe ff ff       	call   c0025f40 <APIC::getBase()>
c00260b4:	83 c4 10             	add    esp,0x10
c00260b7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260bb:	75 07                	jne    c00260c4 <APIC::open(int, int, void*)+0x114>
c00260bd:	ba 60 03 00 00       	mov    edx,0x360
c00260c2:	eb 05                	jmp    c00260c9 <APIC::open(int, int, void*)+0x119>
c00260c4:	ba 50 03 00 00       	mov    edx,0x350
c00260c9:	01 d0                	add    eax,edx
c00260cb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260ce:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00260d3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260d6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00260dd:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00260e1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260e4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260e7:	89 10                	mov    DWORD PTR [eax],edx
c00260e9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00260ec:	e9 7a ff ff ff       	jmp    c002606b <APIC::open(int, int, void*)+0xbb>
c00260f1:	b8 00 00 00 00       	mov    eax,0x0
c00260f6:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260f9:	5b                   	pop    ebx
c00260fa:	5e                   	pop    esi
c00260fb:	5f                   	pop    edi
c00260fc:	5d                   	pop    ebp
c00260fd:	c3                   	ret    

c00260fe <IOAPIC::IOAPIC()>:
c00260fe:	83 ec 0c             	sub    esp,0xc
c0026101:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026105:	83 ec 08             	sub    esp,0x8
c0026108:	68 2c db 02 c0       	push   0xc002db2c
c002610d:	50                   	push   eax
c002610e:	e8 f3 e3 fe ff       	call   c0014506 <Device::Device(char const*)>
c0026113:	83 c4 10             	add    esp,0x10
c0026116:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c002611b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002611f:	89 10                	mov    DWORD PTR [eax],edx
c0026121:	90                   	nop
c0026122:	83 c4 0c             	add    esp,0xc
c0026125:	c3                   	ret    

c0026126 <APIC::APIC()>:
c0026126:	53                   	push   ebx
c0026127:	83 ec 18             	sub    esp,0x18
c002612a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002612e:	83 ec 08             	sub    esp,0x8
c0026131:	68 34 db 02 c0       	push   0xc002db34
c0026136:	50                   	push   eax
c0026137:	e8 44 eb fe ff       	call   c0014c80 <InterruptController::InterruptController(char const*)>
c002613c:	83 c4 10             	add    esp,0x10
c002613f:	ba 0c dc 02 c0       	mov    edx,0xc002dc0c
c0026144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026148:	89 10                	mov    DWORD PTR [eax],edx
c002614a:	a0 00 32 03 c0       	mov    al,ds:0xc0033200
c002614f:	83 f0 01             	xor    eax,0x1
c0026152:	84 c0                	test   al,al
c0026154:	0f 84 a1 00 00 00    	je     c00261fb <APIC::APIC()+0xd5>
c002615a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002615f:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c0026164:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0026168:	0f 83 86 00 00 00    	jae    c00261f4 <APIC::APIC()+0xce>
c002616e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0026176:	83 ec 0c             	sub    esp,0xc
c0026179:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002617d:	e8 a8 97 fe ff       	call   c000f92a <malloc>
c0026182:	83 c4 10             	add    esp,0x10
c0026185:	89 c3                	mov    ebx,eax
c0026187:	83 ec 0c             	sub    esp,0xc
c002618a:	53                   	push   ebx
c002618b:	e8 6e ff ff ff       	call   c00260fe <IOAPIC::IOAPIC()>
c0026190:	83 c4 10             	add    esp,0x10
c0026193:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0026197:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c002619c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261a0:	89 14 85 e0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce20],edx
c00261a7:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c00261ac:	40                   	inc    eax
c00261ad:	a3 c0 31 03 c0       	mov    ds:0xc00331c0,eax
c00261b2:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00261b7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261bd:	83 ec 08             	sub    esp,0x8
c00261c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261c4:	50                   	push   eax
c00261c5:	e8 4c e1 fe ff       	call   c0014316 <Device::addChild(Device*)>
c00261ca:	83 c4 10             	add    esp,0x10
c00261cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d3:	83 c0 08             	add    eax,0x8
c00261d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00261d8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00261dd:	6a 00                	push   0x0
c00261df:	6a 00                	push   0x0
c00261e1:	52                   	push   edx
c00261e2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00261e6:	ff d0                	call   eax
c00261e8:	83 c4 10             	add    esp,0x10
c00261eb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00261ef:	e9 6b ff ff ff       	jmp    c002615f <APIC::APIC()+0x39>
c00261f4:	c6 05 00 32 03 c0 01 	mov    BYTE PTR ds:0xc0033200,0x1
c00261fb:	90                   	nop
c00261fc:	83 c4 18             	add    esp,0x18
c00261ff:	5b                   	pop    ebx
c0026200:	c3                   	ret    
c0026201:	90                   	nop

c0026202 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026202:	55                   	push   ebp
c0026203:	89 e5                	mov    ebp,esp
c0026205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002620e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026211:	72 1d                	jb     c0026230 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026216:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002621c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002621f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026225:	01 d0                	add    eax,edx
c0026227:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002622a:	73 04                	jae    c0026230 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002622c:	b0 01                	mov    al,0x1
c002622e:	eb 02                	jmp    c0026232 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026230:	b0 00                	mov    al,0x0
c0026232:	5d                   	pop    ebp
c0026233:	c3                   	ret    

c0026234 <IOAPIC::read(int)>:
c0026234:	55                   	push   ebp
c0026235:	89 e5                	mov    ebp,esp
c0026237:	83 ec 10             	sub    esp,0x10
c002623a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002623d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026243:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026246:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026249:	0f b6 d0             	movzx  edx,al
c002624c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002624f:	89 10                	mov    DWORD PTR [eax],edx
c0026251:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026254:	83 c0 10             	add    eax,0x10
c0026257:	8b 00                	mov    eax,DWORD PTR [eax]
c0026259:	c9                   	leave  
c002625a:	c3                   	ret    
c002625b:	90                   	nop

c002625c <IOAPIC::open(int, int, void*)>:
c002625c:	55                   	push   ebp
c002625d:	89 e5                	mov    ebp,esp
c002625f:	57                   	push   edi
c0026260:	56                   	push   esi
c0026261:	53                   	push   ebx
c0026262:	83 ec 0c             	sub    esp,0xc
c0026265:	83 ec 0c             	sub    esp,0xc
c0026268:	68 5f db 02 c0       	push   0xc002db5f
c002626d:	e8 6f cc fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0026272:	83 c4 10             	add    esp,0x10
c0026275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026278:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002627b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026281:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026284:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002628a:	8b 14 85 20 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce7e0]
c0026291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026294:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002629a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002629d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262a3:	8b 14 85 a0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce760]
c00262aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ad:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262bf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262c5:	0f b6 f8             	movzx  edi,al
c00262c8:	89 d0                	mov    eax,edx
c00262ca:	ba 00 00 00 00       	mov    edx,0x0
c00262cf:	89 c1                	mov    ecx,eax
c00262d1:	80 e5 ff             	and    ch,0xff
c00262d4:	89 cb                	mov    ebx,ecx
c00262d6:	0f b6 f2             	movzx  esi,dl
c00262d9:	89 d8                	mov    eax,ebx
c00262db:	89 f2                	mov    edx,esi
c00262dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262e0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262e3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262e7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262eb:	83 e0 00             	and    eax,0x0
c00262ee:	09 d0                	or     eax,edx
c00262f0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262f7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262fd:	8d 50 01             	lea    edx,[eax+0x1]
c0026300:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026303:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026309:	0f b6 d0             	movzx  edx,al
c002630c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002630f:	83 c2 08             	add    edx,0x8
c0026312:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026316:	0f b6 c9             	movzx  ecx,cl
c0026319:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002631f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026323:	83 ec 08             	sub    esp,0x8
c0026326:	6a 01                	push   0x1
c0026328:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002632b:	e8 04 ff ff ff       	call   c0026234 <IOAPIC::read(int)>
c0026330:	83 c4 10             	add    esp,0x10
c0026333:	c1 f8 10             	sar    eax,0x10
c0026336:	0f b6 c0             	movzx  eax,al
c0026339:	8d 50 01             	lea    edx,[eax+0x1]
c002633c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002633f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026345:	b8 00 00 00 00       	mov    eax,0x0
c002634a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002634d:	5b                   	pop    ebx
c002634e:	5e                   	pop    esi
c002634f:	5f                   	pop    edi
c0026350:	5d                   	pop    ebp
c0026351:	c3                   	ret    

c0026352 <IOAPIC::write(int, int)>:
c0026352:	55                   	push   ebp
c0026353:	89 e5                	mov    ebp,esp
c0026355:	83 ec 10             	sub    esp,0x10
c0026358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002635b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026361:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026364:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026367:	0f b6 d0             	movzx  edx,al
c002636a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002636d:	89 10                	mov    DWORD PTR [eax],edx
c002636f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026372:	8d 50 10             	lea    edx,[eax+0x10]
c0026375:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026378:	89 02                	mov    DWORD PTR [edx],eax
c002637a:	90                   	nop
c002637b:	c9                   	leave  
c002637c:	c3                   	ret    
c002637d:	90                   	nop

c002637e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002637e:	55                   	push   ebp
c002637f:	89 e5                	mov    ebp,esp
c0026381:	53                   	push   ebx
c0026382:	83 ec 2c             	sub    esp,0x2c
c0026385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026388:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002638b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002638e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026391:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026394:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026397:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002639a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002639d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263a0:	88 d8                	mov    al,bl
c00263a2:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263a5:	88 c8                	mov    al,cl
c00263a7:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263aa:	88 d0                	mov    al,dl
c00263ac:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263af:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263b3:	83 c0 08             	add    eax,0x8
c00263b6:	01 c0                	add    eax,eax
c00263b8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263bb:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263bf:	83 c0 08             	add    eax,0x8
c00263c2:	01 c0                	add    eax,eax
c00263c4:	40                   	inc    eax
c00263c5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263c8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263cb:	50                   	push   eax
c00263cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263cf:	e8 60 fe ff ff       	call   c0026234 <IOAPIC::read(int)>
c00263d4:	83 c4 08             	add    esp,0x8
c00263d7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00263da:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00263e1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00263e4:	c1 e0 18             	shl    eax,0x18
c00263e7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00263ea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00263ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263f0:	52                   	push   edx
c00263f1:	50                   	push   eax
c00263f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f5:	e8 58 ff ff ff       	call   c0026352 <IOAPIC::write(int, int)>
c00263fa:	83 c4 0c             	add    esp,0xc
c00263fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026400:	50                   	push   eax
c0026401:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026404:	e8 2b fe ff ff       	call   c0026234 <IOAPIC::read(int)>
c0026409:	83 c4 08             	add    esp,0x8
c002640c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002640f:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0026416:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002641d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026424:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026428:	74 09                	je     c0026433 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002642a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026431:	eb 07                	jmp    c002643a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026433:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002643a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002643e:	74 09                	je     c0026449 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026440:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0026447:	eb 07                	jmp    c0026450 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0026449:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026450:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0026457:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002645b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002645e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026461:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026464:	52                   	push   edx
c0026465:	50                   	push   eax
c0026466:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026469:	e8 e4 fe ff ff       	call   c0026352 <IOAPIC::write(int, int)>
c002646e:	83 c4 0c             	add    esp,0xc
c0026471:	90                   	nop
c0026472:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026475:	c9                   	leave  
c0026476:	c3                   	ret    
c0026477:	90                   	nop

c0026478 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0026478:	55                   	push   ebp
c0026479:	89 e5                	mov    ebp,esp
c002647b:	57                   	push   edi
c002647c:	56                   	push   esi
c002647d:	53                   	push   ebx
c002647e:	83 ec 2c             	sub    esp,0x2c
c0026481:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026484:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0026487:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002648b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002648f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026493:	74 5a                	je     c00264ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026495:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0026499:	7f 44                	jg     c00264df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002649b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002649e:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c00264a3:	8a 00                	mov    al,BYTE PTR [eax]
c00264a5:	0f b6 c0             	movzx  eax,al
c00264a8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264ae:	66 8b 84 00 c0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce840]
c00264b6:	0f b7 c0             	movzx  eax,ax
c00264b9:	83 e0 02             	and    eax,0x2
c00264bc:	85 c0                	test   eax,eax
c00264be:	74 04                	je     c00264c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264c0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264c7:	66 8b 84 00 c0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce840]
c00264cf:	0f b7 c0             	movzx  eax,ax
c00264d2:	83 e0 08             	and    eax,0x8
c00264d5:	85 c0                	test   eax,eax
c00264d7:	74 16                	je     c00264ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264d9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264dd:	eb 10                	jmp    c00264ef <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264df:	83 ec 0c             	sub    esp,0xc
c00264e2:	68 70 db 02 c0       	push   0xc002db70
c00264e7:	e8 b1 43 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00264ec:	83 c4 10             	add    esp,0x10
c00264ef:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00264f3:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c00264f8:	83 ec 08             	sub    esp,0x8
c00264fb:	50                   	push   eax
c00264fc:	68 a8 db 02 c0       	push   0xc002dba8
c0026501:	e8 db c9 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0026506:	83 c4 10             	add    esp,0x10
c0026509:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026510:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c0026515:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0026518:	7d 67                	jge    c0026581 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002651a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002651d:	8b 04 85 e0 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce20]
c0026524:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026527:	83 ec 08             	sub    esp,0x8
c002652a:	52                   	push   edx
c002652b:	50                   	push   eax
c002652c:	e8 d1 fc ff ff       	call   c0026202 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026531:	83 c4 10             	add    esp,0x10
c0026534:	84 c0                	test   al,al
c0026536:	74 44                	je     c002657c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0026538:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002653b:	8b 1c 85 e0 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce20]
c0026542:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0026546:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026549:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002654d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026550:	83 c0 20             	add    eax,0x20
c0026553:	0f b6 f0             	movzx  esi,al
c0026556:	b8 00 00 00 00       	mov    eax,0x0
c002655b:	99                   	cdq    
c002655c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002655f:	0f b6 c9             	movzx  ecx,cl
c0026562:	83 ec 04             	sub    esp,0x4
c0026565:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0026568:	57                   	push   edi
c0026569:	56                   	push   esi
c002656a:	52                   	push   edx
c002656b:	50                   	push   eax
c002656c:	51                   	push   ecx
c002656d:	53                   	push   ebx
c002656e:	e8 0b fe ff ff       	call   c002637e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026573:	83 c4 20             	add    esp,0x20
c0026576:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002657a:	eb 05                	jmp    c0026581 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002657c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002657f:	eb 8f                	jmp    c0026510 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026581:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026584:	83 f0 01             	xor    eax,0x1
c0026587:	84 c0                	test   al,al
c0026589:	74 10                	je     c002659b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002658b:	83 ec 0c             	sub    esp,0xc
c002658e:	68 bf db 02 c0       	push   0xc002dbbf
c0026593:	e8 05 43 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0026598:	83 c4 10             	add    esp,0x10
c002659b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002659f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265a6:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265aa:	7f 65                	jg     c0026611 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265af:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265b2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265b9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265bc:	01 ca                	add    edx,ecx
c00265be:	83 c2 54             	add    edx,0x54
c00265c1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265c5:	85 c0                	test   eax,eax
c00265c7:	75 43                	jne    c002660c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265d6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265d9:	01 ca                	add    edx,ecx
c00265db:	8d 4a 54             	lea    ecx,[edx+0x54]
c00265de:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00265e1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265e8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265f2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265f5:	01 ca                	add    edx,ecx
c00265f7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00265fd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026600:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026604:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026607:	83 e8 20             	sub    eax,0x20
c002660a:	eb 1a                	jmp    c0026626 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c002660c:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c002660f:	eb 95                	jmp    c00265a6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026611:	83 ec 0c             	sub    esp,0xc
c0026614:	68 cc db 02 c0       	push   0xc002dbcc
c0026619:	e8 7f 42 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c002661e:	83 c4 10             	add    esp,0x10
c0026621:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026626:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026629:	5b                   	pop    ebx
c002662a:	5e                   	pop    esi
c002662b:	5f                   	pop    edi
c002662c:	5d                   	pop    ebp
c002662d:	c3                   	ret    

c002662e <PIC::disable()>:
c002662e:	55                   	push   ebp
c002662f:	89 e5                	mov    ebp,esp
c0026631:	83 ec 10             	sub    esp,0x10
c0026634:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002663a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002663e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026641:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026645:	ee                   	out    dx,al
c0026646:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002664c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026650:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026653:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026657:	ee                   	out    dx,al
c0026658:	90                   	nop
c0026659:	c9                   	leave  
c002665a:	c3                   	ret    
c002665b:	90                   	nop

c002665c <PIC::close(int, int, void*)>:
c002665c:	55                   	push   ebp
c002665d:	89 e5                	mov    ebp,esp
c002665f:	83 ec 08             	sub    esp,0x8
c0026662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026665:	8b 00                	mov    eax,DWORD PTR [eax]
c0026667:	83 c0 3c             	add    eax,0x3c
c002666a:	8b 00                	mov    eax,DWORD PTR [eax]
c002666c:	83 ec 0c             	sub    esp,0xc
c002666f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026672:	ff d0                	call   eax
c0026674:	83 c4 10             	add    esp,0x10
c0026677:	b8 00 00 00 00       	mov    eax,0x0
c002667c:	c9                   	leave  
c002667d:	c3                   	ret    

c002667e <PIC::PIC()>:
c002667e:	83 ec 0c             	sub    esp,0xc
c0026681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026685:	83 ec 08             	sub    esp,0x8
c0026688:	68 78 dc 02 c0       	push   0xc002dc78
c002668d:	50                   	push   eax
c002668e:	e8 ed e5 fe ff       	call   c0014c80 <InterruptController::InterruptController(char const*)>
c0026693:	83 c4 10             	add    esp,0x10
c0026696:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c002669b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002669f:	89 10                	mov    DWORD PTR [eax],edx
c00266a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ab:	0f b6 d0             	movzx  edx,al
c00266ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266c3:	0f b6 d0             	movzx  edx,al
c00266c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ca:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d9:	8d 50 01             	lea    edx,[eax+0x1]
c00266dc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266e0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266e6:	0f b6 d0             	movzx  edx,al
c00266e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266ed:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266f1:	83 e1 3f             	and    ecx,0x3f
c00266f4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026702:	0f b6 d0             	movzx  edx,al
c0026705:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026709:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026714:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002671a:	0f b6 d0             	movzx  edx,al
c002671d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026721:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002672a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026730:	8d 50 01             	lea    edx,[eax+0x1]
c0026733:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026737:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002673d:	0f b6 d0             	movzx  edx,al
c0026740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026744:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026748:	83 e1 3f             	and    ecx,0x3f
c002674b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002674f:	90                   	nop
c0026750:	83 c4 0c             	add    esp,0xc
c0026753:	c3                   	ret    

c0026754 <PIC::ioWait()>:
c0026754:	eb 00                	jmp    c0026756 <PIC::ioWait()+0x2>
c0026756:	eb 00                	jmp    c0026758 <PIC::ioWait()+0x4>
c0026758:	90                   	nop
c0026759:	c3                   	ret    

c002675a <PIC::getIRQReg(int)>:
c002675a:	55                   	push   ebp
c002675b:	89 e5                	mov    ebp,esp
c002675d:	83 ec 10             	sub    esp,0x10
c0026760:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026763:	0f b6 c0             	movzx  eax,al
c0026766:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002676c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002676f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026772:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026776:	ee                   	out    dx,al
c0026777:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002677a:	0f b6 c0             	movzx  eax,al
c002677d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026783:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026786:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026789:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002678d:	ee                   	out    dx,al
c002678e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026794:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026798:	89 c2                	mov    edx,eax
c002679a:	ec                   	in     al,dx
c002679b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002679e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267a1:	0f b6 c0             	movzx  eax,al
c00267a4:	c1 e0 08             	shl    eax,0x8
c00267a7:	89 c1                	mov    ecx,eax
c00267a9:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267af:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267b3:	89 c2                	mov    edx,eax
c00267b5:	ec                   	in     al,dx
c00267b6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267b9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267bc:	0f b6 c0             	movzx  eax,al
c00267bf:	09 c8                	or     eax,ecx
c00267c1:	c9                   	leave  
c00267c2:	c3                   	ret    
c00267c3:	90                   	nop

c00267c4 <PIC::eoi(unsigned char)>:
c00267c4:	55                   	push   ebp
c00267c5:	89 e5                	mov    ebp,esp
c00267c7:	83 ec 14             	sub    esp,0x14
c00267ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267cd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267d0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267d4:	75 1e                	jne    c00267f4 <PIC::eoi(unsigned char)+0x30>
c00267d6:	6a 0b                	push   0xb
c00267d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267db:	e8 7a ff ff ff       	call   c002675a <PIC::getIRQReg(int)>
c00267e0:	83 c4 08             	add    esp,0x8
c00267e3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00267e7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00267eb:	25 80 00 00 00       	and    eax,0x80
c00267f0:	85 c0                	test   eax,eax
c00267f2:	74 5f                	je     c0026853 <PIC::eoi(unsigned char)+0x8f>
c00267f4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00267f8:	75 2d                	jne    c0026827 <PIC::eoi(unsigned char)+0x63>
c00267fa:	6a 0b                	push   0xb
c00267fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267ff:	e8 56 ff ff ff       	call   c002675a <PIC::getIRQReg(int)>
c0026804:	83 c4 08             	add    esp,0x8
c0026807:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002680b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002680e:	66 85 c0             	test   ax,ax
c0026811:	78 14                	js     c0026827 <PIC::eoi(unsigned char)+0x63>
c0026813:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026819:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002681d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026820:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026824:	ee                   	out    dx,al
c0026825:	eb 2d                	jmp    c0026854 <PIC::eoi(unsigned char)+0x90>
c0026827:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002682b:	76 12                	jbe    c002683f <PIC::eoi(unsigned char)+0x7b>
c002682d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026833:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026837:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002683a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002683e:	ee                   	out    dx,al
c002683f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026845:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026849:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002684c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026850:	ee                   	out    dx,al
c0026851:	eb 01                	jmp    c0026854 <PIC::eoi(unsigned char)+0x90>
c0026853:	90                   	nop
c0026854:	c9                   	leave  
c0026855:	c3                   	ret    

c0026856 <PIC::remap()>:
c0026856:	55                   	push   ebp
c0026857:	89 e5                	mov    ebp,esp
c0026859:	83 ec 48             	sub    esp,0x48
c002685c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026863:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002686a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026870:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026873:	89 c2                	mov    edx,eax
c0026875:	ec                   	in     al,dx
c0026876:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026879:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002687c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002687f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026885:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026888:	89 c2                	mov    edx,eax
c002688a:	ec                   	in     al,dx
c002688b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002688e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026891:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026894:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002689a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002689e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268a1:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268a4:	ee                   	out    dx,al
c00268a5:	83 ec 0c             	sub    esp,0xc
c00268a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ab:	e8 a4 fe ff ff       	call   c0026754 <PIC::ioWait()>
c00268b0:	83 c4 10             	add    esp,0x10
c00268b3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268b9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268bd:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268c0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268c3:	ee                   	out    dx,al
c00268c4:	83 ec 0c             	sub    esp,0xc
c00268c7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ca:	e8 85 fe ff ff       	call   c0026754 <PIC::ioWait()>
c00268cf:	83 c4 10             	add    esp,0x10
c00268d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268d5:	0f b6 c0             	movzx  eax,al
c00268d8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00268de:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00268e1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00268e4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00268e7:	ee                   	out    dx,al
c00268e8:	83 ec 0c             	sub    esp,0xc
c00268eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268ee:	e8 61 fe ff ff       	call   c0026754 <PIC::ioWait()>
c00268f3:	83 c4 10             	add    esp,0x10
c00268f6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268f9:	0f b6 c0             	movzx  eax,al
c00268fc:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026902:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026905:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026908:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002690b:	ee                   	out    dx,al
c002690c:	83 ec 0c             	sub    esp,0xc
c002690f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026912:	e8 3d fe ff ff       	call   c0026754 <PIC::ioWait()>
c0026917:	83 c4 10             	add    esp,0x10
c002691a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026920:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026924:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026927:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002692a:	ee                   	out    dx,al
c002692b:	83 ec 0c             	sub    esp,0xc
c002692e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026931:	e8 1e fe ff ff       	call   c0026754 <PIC::ioWait()>
c0026936:	83 c4 10             	add    esp,0x10
c0026939:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002693f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026943:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026946:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026949:	ee                   	out    dx,al
c002694a:	83 ec 0c             	sub    esp,0xc
c002694d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026950:	e8 ff fd ff ff       	call   c0026754 <PIC::ioWait()>
c0026955:	83 c4 10             	add    esp,0x10
c0026958:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002695e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026962:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026965:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026968:	ee                   	out    dx,al
c0026969:	83 ec 0c             	sub    esp,0xc
c002696c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002696f:	e8 e0 fd ff ff       	call   c0026754 <PIC::ioWait()>
c0026974:	83 c4 10             	add    esp,0x10
c0026977:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002697d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026981:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026984:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026987:	ee                   	out    dx,al
c0026988:	83 ec 0c             	sub    esp,0xc
c002698b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002698e:	e8 c1 fd ff ff       	call   c0026754 <PIC::ioWait()>
c0026993:	83 c4 10             	add    esp,0x10
c0026996:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002699a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269a0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269a3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269a6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269a9:	ee                   	out    dx,al
c00269aa:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269ae:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269b4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269b7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269bd:	ee                   	out    dx,al
c00269be:	90                   	nop
c00269bf:	c9                   	leave  
c00269c0:	c3                   	ret    
c00269c1:	90                   	nop

c00269c2 <PIC::open(int, int, void*)>:
c00269c2:	55                   	push   ebp
c00269c3:	89 e5                	mov    ebp,esp
c00269c5:	83 ec 18             	sub    esp,0x18
c00269c8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269ce:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269d2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269d5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269d9:	ee                   	out    dx,al
c00269da:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00269e0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00269e4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269e7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00269eb:	ee                   	out    dx,al
c00269ec:	83 ec 0c             	sub    esp,0xc
c00269ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269f2:	e8 5f fe ff ff       	call   c0026856 <PIC::remap()>
c00269f7:	83 c4 10             	add    esp,0x10
c00269fa:	b8 00 00 00 00       	mov    eax,0x0
c00269ff:	c9                   	leave  
c0026a00:	c3                   	ret    
c0026a01:	90                   	nop

c0026a02 <APICTimer::close(int, int, void*)>:
c0026a02:	b8 00 00 00 00       	mov    eax,0x0
c0026a07:	c3                   	ret    

c0026a08 <apicTimerHandler(regs*, void*)>:
c0026a08:	83 ec 0c             	sub    esp,0xc
c0026a0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a11:	99                   	cdq    
c0026a12:	52                   	push   edx
c0026a13:	50                   	push   eax
c0026a14:	6a 00                	push   0x0
c0026a16:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a1b:	e8 94 07 00 00       	call   c00271b4 <__udivdi3>
c0026a20:	83 c4 10             	add    esp,0x10
c0026a23:	83 ec 08             	sub    esp,0x8
c0026a26:	52                   	push   edx
c0026a27:	50                   	push   eax
c0026a28:	e8 08 04 ff ff       	call   c0016e35 <timerHandler(unsigned long long)>
c0026a2d:	83 c4 10             	add    esp,0x10
c0026a30:	90                   	nop
c0026a31:	83 c4 0c             	add    esp,0xc
c0026a34:	c3                   	ret    
c0026a35:	90                   	nop

c0026a36 <APICTimer::write(int)>:
c0026a36:	53                   	push   ebx
c0026a37:	83 ec 28             	sub    esp,0x28
c0026a3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a42:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a48:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026a4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a53:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a59:	83 ec 0c             	sub    esp,0xc
c0026a5c:	50                   	push   eax
c0026a5d:	e8 de f4 ff ff       	call   c0025f40 <APIC::getBase()>
c0026a62:	83 c4 10             	add    esp,0x10
c0026a65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a69:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c0026a6e:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c0026a74:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a78:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026a7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a80:	05 e0 03 00 00       	add    eax,0x3e0
c0026a85:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a8f:	05 80 03 00 00       	add    eax,0x380
c0026a94:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026a9a:	fb                   	sti    
c0026a9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026aa3:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026aa8:	83 d2 00             	adc    edx,0x0
c0026aab:	89 c1                	mov    ecx,eax
c0026aad:	89 d3                	mov    ebx,edx
c0026aaf:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c0026ab4:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c0026aba:	39 c8                	cmp    eax,ecx
c0026abc:	89 d0                	mov    eax,edx
c0026abe:	19 d8                	sbb    eax,ebx
c0026ac0:	73 02                	jae    c0026ac4 <APICTimer::write(int)+0x8e>
c0026ac2:	eb d7                	jmp    c0026a9b <APICTimer::write(int)+0x65>
c0026ac4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ac8:	05 20 03 00 00       	add    eax,0x320
c0026acd:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ad7:	05 90 03 00 00       	add    eax,0x390
c0026adc:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ade:	f7 d0                	not    eax
c0026ae0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ae4:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ae8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026aec:	ba 00 00 00 00       	mov    edx,0x0
c0026af1:	f7 f3                	div    ebx
c0026af3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026af7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026afb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b01:	0d 00 00 02 00       	or     eax,0x20000
c0026b06:	89 c2                	mov    edx,eax
c0026b08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b0c:	05 20 03 00 00       	add    eax,0x320
c0026b11:	89 10                	mov    DWORD PTR [eax],edx
c0026b13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b17:	05 e0 03 00 00       	add    eax,0x3e0
c0026b1c:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b26:	05 80 03 00 00       	add    eax,0x380
c0026b2b:	89 c2                	mov    edx,eax
c0026b2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b31:	89 02                	mov    DWORD PTR [edx],eax
c0026b33:	90                   	nop
c0026b34:	83 c4 28             	add    esp,0x28
c0026b37:	5b                   	pop    ebx
c0026b38:	c3                   	ret    
c0026b39:	90                   	nop

c0026b3a <APICTimer::open(int, int, void*)>:
c0026b3a:	57                   	push   edi
c0026b3b:	56                   	push   esi
c0026b3c:	53                   	push   ebx
c0026b3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b43:	83 c0 24             	add    eax,0x24
c0026b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b48:	83 ec 08             	sub    esp,0x8
c0026b4b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b53:	ff d0                	call   eax
c0026b55:	83 c4 10             	add    esp,0x10
c0026b58:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026b5d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b63:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b69:	83 ec 0c             	sub    esp,0xc
c0026b6c:	50                   	push   eax
c0026b6d:	e8 ce f3 ff ff       	call   c0025f40 <APIC::getBase()>
c0026b72:	83 c4 10             	add    esp,0x10
c0026b75:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b7f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b85:	0f b6 f8             	movzx  edi,al
c0026b88:	89 d0                	mov    eax,edx
c0026b8a:	ba 00 00 00 00       	mov    edx,0x0
c0026b8f:	89 c1                	mov    ecx,eax
c0026b91:	80 e5 ff             	and    ch,0xff
c0026b94:	89 cb                	mov    ebx,ecx
c0026b96:	0f b6 f2             	movzx  esi,dl
c0026b99:	89 d8                	mov    eax,ebx
c0026b9b:	89 f2                	mov    edx,esi
c0026b9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026ba1:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026ba4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026ba8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bac:	83 e0 00             	and    eax,0x0
c0026baf:	09 d0                	or     eax,edx
c0026bb1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bb9:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0026bc2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bc6:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bcc:	0f b6 d0             	movzx  edx,al
c0026bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bd3:	83 c2 08             	add    edx,0x8
c0026bd6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026bda:	0f b6 c9             	movzx  ecx,cl
c0026bdd:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026be3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026be7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026beb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026bef:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026bf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bf9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bfd:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c07:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c0d:	83 ec 0c             	sub    esp,0xc
c0026c10:	51                   	push   ecx
c0026c11:	6a 01                	push   0x1
c0026c13:	68 08 6a 02 c0       	push   0xc0026a08
c0026c18:	52                   	push   edx
c0026c19:	50                   	push   eax
c0026c1a:	e8 7b d6 fe ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c1f:	83 c4 20             	add    esp,0x20
c0026c22:	89 c2                	mov    edx,eax
c0026c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c28:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c2e:	b8 00 00 00 00       	mov    eax,0x0
c0026c33:	5b                   	pop    ebx
c0026c34:	5e                   	pop    esi
c0026c35:	5f                   	pop    edi
c0026c36:	c3                   	ret    
c0026c37:	90                   	nop

c0026c38 <APICTimer::APICTimer()>:
c0026c38:	83 ec 0c             	sub    esp,0xc
c0026c3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3f:	83 ec 08             	sub    esp,0x8
c0026c42:	68 e4 dc 02 c0       	push   0xc002dce4
c0026c47:	50                   	push   eax
c0026c48:	e8 59 01 ff ff       	call   c0016da6 <Timer::Timer(char const*)>
c0026c4d:	83 c4 10             	add    esp,0x10
c0026c50:	ba f8 dc 02 c0       	mov    edx,0xc002dcf8
c0026c55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c59:	89 10                	mov    DWORD PTR [eax],edx
c0026c5b:	90                   	nop
c0026c5c:	83 c4 0c             	add    esp,0xc
c0026c5f:	c3                   	ret    

c0026c60 <PIT::write(int)>:
c0026c60:	83 ec 10             	sub    esp,0x10
c0026c63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c6b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c75:	a3 04 32 03 c0       	mov    ds:0xc0033204,eax
c0026c7a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026c7f:	99                   	cdq    
c0026c80:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c88:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026c8f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026c94:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026c98:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026c9d:	ee                   	out    dx,al
c0026c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ca2:	0f b6 c0             	movzx  eax,al
c0026ca5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cb0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026cb4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026cb9:	ee                   	out    dx,al
c0026cba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cbe:	c1 f8 08             	sar    eax,0x8
c0026cc1:	0f b6 c0             	movzx  eax,al
c0026cc4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026ccb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026ccf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026cd3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026cd8:	ee                   	out    dx,al
c0026cd9:	90                   	nop
c0026cda:	83 c4 10             	add    esp,0x10
c0026cdd:	c3                   	ret    

c0026cde <pitHandler(regs*, void*)>:
c0026cde:	83 ec 0c             	sub    esp,0xc
c0026ce1:	a1 04 32 03 c0       	mov    eax,ds:0xc0033204
c0026ce6:	99                   	cdq    
c0026ce7:	52                   	push   edx
c0026ce8:	50                   	push   eax
c0026ce9:	6a 00                	push   0x0
c0026ceb:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026cf0:	e8 bf 04 00 00       	call   c00271b4 <__udivdi3>
c0026cf5:	83 c4 10             	add    esp,0x10
c0026cf8:	83 ec 08             	sub    esp,0x8
c0026cfb:	52                   	push   edx
c0026cfc:	50                   	push   eax
c0026cfd:	e8 33 01 ff ff       	call   c0016e35 <timerHandler(unsigned long long)>
c0026d02:	83 c4 10             	add    esp,0x10
c0026d05:	90                   	nop
c0026d06:	83 c4 0c             	add    esp,0xc
c0026d09:	c3                   	ret    

c0026d0a <PIT::open(int, int, void*)>:
c0026d0a:	83 ec 0c             	sub    esp,0xc
c0026d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d13:	83 c0 24             	add    eax,0x24
c0026d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d18:	83 ec 08             	sub    esp,0x8
c0026d1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d23:	ff d0                	call   eax
c0026d25:	83 c4 10             	add    esp,0x10
c0026d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d2c:	83 ec 0c             	sub    esp,0xc
c0026d2f:	6a 00                	push   0x0
c0026d31:	6a 01                	push   0x1
c0026d33:	68 de 6c 02 c0       	push   0xc0026cde
c0026d38:	6a 00                	push   0x0
c0026d3a:	50                   	push   eax
c0026d3b:	e8 5a d5 fe ff       	call   c001429a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d40:	83 c4 20             	add    esp,0x20
c0026d43:	89 c2                	mov    edx,eax
c0026d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d49:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d4f:	b8 00 00 00 00       	mov    eax,0x0
c0026d54:	83 c4 0c             	add    esp,0xc
c0026d57:	c3                   	ret    

c0026d58 <PIT::close(int, int, void*)>:
c0026d58:	83 ec 0c             	sub    esp,0xc
c0026d5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d6d:	6a 01                	push   0x1
c0026d6f:	68 de 6c 02 c0       	push   0xc0026cde
c0026d74:	6a 00                	push   0x0
c0026d76:	50                   	push   eax
c0026d77:	e8 5c d5 fe ff       	call   c00142d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026d7c:	83 c4 10             	add    esp,0x10
c0026d7f:	b8 00 00 00 00       	mov    eax,0x0
c0026d84:	83 c4 0c             	add    esp,0xc
c0026d87:	c3                   	ret    

c0026d88 <PIT::PIT()>:
c0026d88:	83 ec 0c             	sub    esp,0xc
c0026d8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d8f:	83 ec 08             	sub    esp,0x8
c0026d92:	68 20 dd 02 c0       	push   0xc002dd20
c0026d97:	50                   	push   eax
c0026d98:	e8 09 00 ff ff       	call   c0016da6 <Timer::Timer(char const*)>
c0026d9d:	83 c4 10             	add    esp,0x10
c0026da0:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c0026da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da9:	89 10                	mov    DWORD PTR [eax],edx
c0026dab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026daf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026db5:	0f b6 d0             	movzx  edx,al
c0026db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dcd:	0f b6 d0             	movzx  edx,al
c0026dd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026dd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026de3:	8d 50 01             	lea    edx,[eax+0x1]
c0026de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026dea:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026df0:	0f b6 d0             	movzx  edx,al
c0026df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026dfb:	83 e1 3f             	and    ecx,0x3f
c0026dfe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e02:	90                   	nop
c0026e03:	83 c4 0c             	add    esp,0xc
c0026e06:	c3                   	ret    
c0026e07:	66 90                	xchg   ax,ax
c0026e09:	66 90                	xchg   ax,ax
c0026e0b:	66 90                	xchg   ax,ax
c0026e0d:	66 90                	xchg   ax,ax
c0026e0f:	90                   	nop

c0026e10 <avxDetect>:
c0026e10:	b8 00 00 00 00       	mov    eax,0x0
c0026e15:	c3                   	ret    

c0026e16 <avxSave>:
c0026e16:	c3                   	ret    

c0026e17 <avxLoad>:
c0026e17:	c3                   	ret    

c0026e18 <avxInit>:
c0026e18:	c3                   	ret    

c0026e19 <avxClose>:
c0026e19:	c3                   	ret    

c0026e1a <wouldSheSayYes>:
c0026e1a:	c3                   	ret    
c0026e1b:	49                   	dec    ecx
c0026e1c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e20:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e24:	75 20                	jne    c0026e46 <sseDetect.noSSE+0x1>
c0026e26:	4e                   	dec    esi
c0026e27:	79 61                	jns    c0026e8a <x87Detect+0x14>
c0026e29:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e2e:	66 90                	xchg   ax,ax

c0026e30 <absolutelyNoChanceInHell>:
c0026e30:	b8 01 00 00 00       	mov    eax,0x1
c0026e35:	0f a2                	cpuid  
c0026e37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e3d:	74 06                	je     c0026e45 <sseDetect.noSSE>
c0026e3f:	b8 01 00 00 00       	mov    eax,0x1
c0026e44:	c3                   	ret    

c0026e45 <sseDetect.noSSE>:
c0026e45:	31 c0                	xor    eax,eax
c0026e47:	c3                   	ret    

c0026e48 <sseSave>:
c0026e48:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e4d:	c3                   	ret    

c0026e4e <sseLoad>:
c0026e4e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e53:	c3                   	ret    

c0026e54 <sseInit>:
c0026e54:	e8 49 00 00 00       	call   c0026ea2 <x87Init>
c0026e59:	0f 20 e0             	mov    eax,cr4
c0026e5c:	66 0d 00 06          	or     ax,0x600
c0026e60:	0f 22 e0             	mov    cr4,eax
c0026e63:	c3                   	ret    

c0026e64 <sseClose>:
c0026e64:	c3                   	ret    
c0026e65:	66 90                	xchg   ax,ax
c0026e67:	66 90                	xchg   ax,ax
c0026e69:	66 90                	xchg   ax,ax
c0026e6b:	66 90                	xchg   ax,ax
c0026e6d:	66 90                	xchg   ax,ax
c0026e6f:	90                   	nop

c0026e70 <value_37F>:
c0026e70:	7f 03                	jg     c0026e75 <value_37A+0x1>

c0026e72 <value_37E>:
c0026e72:	7e 03                	jle    c0026e77 <x87Detect+0x1>

c0026e74 <value_37A>:
c0026e74:	7a 03                	jp     c0026e79 <x87Detect+0x3>

c0026e76 <x87Detect>:
c0026e76:	b8 01 00 00 00       	mov    eax,0x1
c0026e7b:	0f a2                	cpuid  
c0026e7d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e83:	74 06                	je     c0026e8b <x87Detect.nox87>
c0026e85:	b8 01 00 00 00       	mov    eax,0x1
c0026e8a:	c3                   	ret    

c0026e8b <x87Detect.nox87>:
c0026e8b:	b8 00 00 00 00       	mov    eax,0x0
c0026e90:	c3                   	ret    

c0026e91 <x87Save>:
c0026e91:	55                   	push   ebp
c0026e92:	89 e5                	mov    ebp,esp
c0026e94:	9b dd 75 08          	fsave  [ebp+0x8]
c0026e98:	c9                   	leave  
c0026e99:	c3                   	ret    

c0026e9a <x87Load>:
c0026e9a:	55                   	push   ebp
c0026e9b:	89 e5                	mov    ebp,esp
c0026e9d:	dd 65 08             	frstor [ebp+0x8]
c0026ea0:	c9                   	leave  
c0026ea1:	c3                   	ret    

c0026ea2 <x87Init>:
c0026ea2:	9b db e3             	finit  
c0026ea5:	0f 20 c0             	mov    eax,cr0
c0026ea8:	66 25 fb ff          	and    ax,0xfffb
c0026eac:	66 0d 22 00          	or     ax,0x22
c0026eb0:	0f 22 c0             	mov    cr0,eax
c0026eb3:	0f 06                	clts   
c0026eb5:	d9 2d 74 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e74
c0026ebb:	c3                   	ret    

c0026ebc <x87Close>:
c0026ebc:	c3                   	ret    
c0026ebd:	66 90                	xchg   ax,ax
c0026ebf:	90                   	nop

c0026ec0 <__do_global_ctors_aux>:
c0026ec0:	a1 f8 9a 02 c0       	mov    eax,ds:0xc0029af8
c0026ec5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ec8:	74 1a                	je     c0026ee4 <__do_global_ctors_aux+0x24>
c0026eca:	55                   	push   ebp
c0026ecb:	89 e5                	mov    ebp,esp
c0026ecd:	53                   	push   ebx
c0026ece:	52                   	push   edx
c0026ecf:	bb f8 9a 02 c0       	mov    ebx,0xc0029af8
c0026ed4:	ff d0                	call   eax
c0026ed6:	83 eb 04             	sub    ebx,0x4
c0026ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026edb:	83 f8 ff             	cmp    eax,0xffffffff
c0026ede:	75 f4                	jne    c0026ed4 <__do_global_ctors_aux+0x14>
c0026ee0:	58                   	pop    eax
c0026ee1:	5b                   	pop    ebx
c0026ee2:	5d                   	pop    ebp
c0026ee3:	c3                   	ret    
c0026ee4:	c3                   	ret    
c0026ee5:	66 90                	xchg   ax,ax
c0026ee7:	90                   	nop

c0026ee8 <__divdi3>:
c0026ee8:	55                   	push   ebp
c0026ee9:	57                   	push   edi
c0026eea:	56                   	push   esi
c0026eeb:	53                   	push   ebx
c0026eec:	83 ec 1c             	sub    esp,0x1c
c0026eef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ef3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ef7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026efa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026efe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f02:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f06:	85 db                	test   ebx,ebx
c0026f08:	0f 88 8e 00 00 00    	js     c0026f9c <__divdi3+0xb4>
c0026f0e:	89 dd                	mov    ebp,ebx
c0026f10:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f18:	89 d3                	mov    ebx,edx
c0026f1a:	85 d2                	test   edx,edx
c0026f1c:	79 0d                	jns    c0026f2b <__divdi3+0x43>
c0026f1e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f22:	f7 d8                	neg    eax
c0026f24:	83 d2 00             	adc    edx,0x0
c0026f27:	f7 da                	neg    edx
c0026f29:	89 d3                	mov    ebx,edx
c0026f2b:	89 c7                	mov    edi,eax
c0026f2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f30:	85 db                	test   ebx,ebx
c0026f32:	75 48                	jne    c0026f7c <__divdi3+0x94>
c0026f34:	39 ef                	cmp    edi,ebp
c0026f36:	76 24                	jbe    c0026f5c <__divdi3+0x74>
c0026f38:	89 ea                	mov    edx,ebp
c0026f3a:	f7 f7                	div    edi
c0026f3c:	89 c1                	mov    ecx,eax
c0026f3e:	31 f6                	xor    esi,esi
c0026f40:	89 c8                	mov    eax,ecx
c0026f42:	89 f2                	mov    edx,esi
c0026f44:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f48:	85 c9                	test   ecx,ecx
c0026f4a:	74 07                	je     c0026f53 <__divdi3+0x6b>
c0026f4c:	f7 d8                	neg    eax
c0026f4e:	83 d2 00             	adc    edx,0x0
c0026f51:	f7 da                	neg    edx
c0026f53:	83 c4 1c             	add    esp,0x1c
c0026f56:	5b                   	pop    ebx
c0026f57:	5e                   	pop    esi
c0026f58:	5f                   	pop    edi
c0026f59:	5d                   	pop    ebp
c0026f5a:	c3                   	ret    
c0026f5b:	90                   	nop
c0026f5c:	85 ff                	test   edi,edi
c0026f5e:	75 0b                	jne    c0026f6b <__divdi3+0x83>
c0026f60:	b8 01 00 00 00       	mov    eax,0x1
c0026f65:	31 d2                	xor    edx,edx
c0026f67:	f7 f3                	div    ebx
c0026f69:	89 c7                	mov    edi,eax
c0026f6b:	31 d2                	xor    edx,edx
c0026f6d:	89 e8                	mov    eax,ebp
c0026f6f:	f7 f7                	div    edi
c0026f71:	89 c6                	mov    esi,eax
c0026f73:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f76:	f7 f7                	div    edi
c0026f78:	89 c1                	mov    ecx,eax
c0026f7a:	eb c4                	jmp    c0026f40 <__divdi3+0x58>
c0026f7c:	39 eb                	cmp    ebx,ebp
c0026f7e:	77 3c                	ja     c0026fbc <__divdi3+0xd4>
c0026f80:	0f bd f3             	bsr    esi,ebx
c0026f83:	83 f6 1f             	xor    esi,0x1f
c0026f86:	75 40                	jne    c0026fc8 <__divdi3+0xe0>
c0026f88:	39 eb                	cmp    ebx,ebp
c0026f8a:	72 09                	jb     c0026f95 <__divdi3+0xad>
c0026f8c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f8f:	0f 87 97 00 00 00    	ja     c002702c <__divdi3+0x144>
c0026f95:	b9 01 00 00 00       	mov    ecx,0x1
c0026f9a:	eb a4                	jmp    c0026f40 <__divdi3+0x58>
c0026f9c:	f7 d9                	neg    ecx
c0026f9e:	83 d3 00             	adc    ebx,0x0
c0026fa1:	f7 db                	neg    ebx
c0026fa3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fa6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026faa:	89 dd                	mov    ebp,ebx
c0026fac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fb4:	e9 5f ff ff ff       	jmp    c0026f18 <__divdi3+0x30>
c0026fb9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fbc:	31 f6                	xor    esi,esi
c0026fbe:	31 c9                	xor    ecx,ecx
c0026fc0:	e9 7b ff ff ff       	jmp    c0026f40 <__divdi3+0x58>
c0026fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fc8:	b8 20 00 00 00       	mov    eax,0x20
c0026fcd:	29 f0                	sub    eax,esi
c0026fcf:	89 f1                	mov    ecx,esi
c0026fd1:	d3 e3                	shl    ebx,cl
c0026fd3:	89 fa                	mov    edx,edi
c0026fd5:	88 c1                	mov    cl,al
c0026fd7:	d3 ea                	shr    edx,cl
c0026fd9:	09 da                	or     edx,ebx
c0026fdb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fdf:	89 f1                	mov    ecx,esi
c0026fe1:	d3 e7                	shl    edi,cl
c0026fe3:	89 eb                	mov    ebx,ebp
c0026fe5:	88 c1                	mov    cl,al
c0026fe7:	d3 eb                	shr    ebx,cl
c0026fe9:	89 f1                	mov    ecx,esi
c0026feb:	d3 e5                	shl    ebp,cl
c0026fed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026ff0:	88 c1                	mov    cl,al
c0026ff2:	d3 ea                	shr    edx,cl
c0026ff4:	09 d5                	or     ebp,edx
c0026ff6:	89 e8                	mov    eax,ebp
c0026ff8:	89 da                	mov    edx,ebx
c0026ffa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026ffe:	89 d3                	mov    ebx,edx
c0027000:	89 c5                	mov    ebp,eax
c0027002:	f7 e7                	mul    edi
c0027004:	39 d3                	cmp    ebx,edx
c0027006:	72 18                	jb     c0027020 <__divdi3+0x138>
c0027008:	74 0a                	je     c0027014 <__divdi3+0x12c>
c002700a:	89 e9                	mov    ecx,ebp
c002700c:	31 f6                	xor    esi,esi
c002700e:	e9 2d ff ff ff       	jmp    c0026f40 <__divdi3+0x58>
c0027013:	90                   	nop
c0027014:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027017:	89 f1                	mov    ecx,esi
c0027019:	d3 e7                	shl    edi,cl
c002701b:	39 c7                	cmp    edi,eax
c002701d:	73 eb                	jae    c002700a <__divdi3+0x122>
c002701f:	90                   	nop
c0027020:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027023:	31 f6                	xor    esi,esi
c0027025:	e9 16 ff ff ff       	jmp    c0026f40 <__divdi3+0x58>
c002702a:	66 90                	xchg   ax,ax
c002702c:	31 c9                	xor    ecx,ecx
c002702e:	e9 0d ff ff ff       	jmp    c0026f40 <__divdi3+0x58>
c0027033:	90                   	nop

c0027034 <__moddi3>:
c0027034:	55                   	push   ebp
c0027035:	57                   	push   edi
c0027036:	56                   	push   esi
c0027037:	53                   	push   ebx
c0027038:	83 ec 2c             	sub    esp,0x2c
c002703b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002703f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027043:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027047:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002704b:	85 db                	test   ebx,ebx
c002704d:	0f 88 85 00 00 00    	js     c00270d8 <__moddi3+0xa4>
c0027053:	89 de                	mov    esi,ebx
c0027055:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002705d:	89 d7                	mov    edi,edx
c002705f:	85 d2                	test   edx,edx
c0027061:	79 09                	jns    c002706c <__moddi3+0x38>
c0027063:	f7 d8                	neg    eax
c0027065:	83 d2 00             	adc    edx,0x0
c0027068:	f7 da                	neg    edx
c002706a:	89 d7                	mov    edi,edx
c002706c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027070:	89 cd                	mov    ebp,ecx
c0027072:	85 ff                	test   edi,edi
c0027074:	75 52                	jne    c00270c8 <__moddi3+0x94>
c0027076:	89 c3                	mov    ebx,eax
c0027078:	39 f0                	cmp    eax,esi
c002707a:	76 24                	jbe    c00270a0 <__moddi3+0x6c>
c002707c:	89 c8                	mov    eax,ecx
c002707e:	89 f2                	mov    edx,esi
c0027080:	f7 f3                	div    ebx
c0027082:	89 d6                	mov    esi,edx
c0027084:	89 f0                	mov    eax,esi
c0027086:	31 d2                	xor    edx,edx
c0027088:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002708c:	85 c9                	test   ecx,ecx
c002708e:	74 07                	je     c0027097 <__moddi3+0x63>
c0027090:	f7 d8                	neg    eax
c0027092:	83 d2 00             	adc    edx,0x0
c0027095:	f7 da                	neg    edx
c0027097:	83 c4 2c             	add    esp,0x2c
c002709a:	5b                   	pop    ebx
c002709b:	5e                   	pop    esi
c002709c:	5f                   	pop    edi
c002709d:	5d                   	pop    ebp
c002709e:	c3                   	ret    
c002709f:	90                   	nop
c00270a0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270a4:	85 db                	test   ebx,ebx
c00270a6:	75 0d                	jne    c00270b5 <__moddi3+0x81>
c00270a8:	b8 01 00 00 00       	mov    eax,0x1
c00270ad:	31 d2                	xor    edx,edx
c00270af:	f7 f7                	div    edi
c00270b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270b5:	89 f0                	mov    eax,esi
c00270b7:	31 d2                	xor    edx,edx
c00270b9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270bd:	f7 f7                	div    edi
c00270bf:	89 e8                	mov    eax,ebp
c00270c1:	f7 f7                	div    edi
c00270c3:	89 d6                	mov    esi,edx
c00270c5:	eb bd                	jmp    c0027084 <__moddi3+0x50>
c00270c7:	90                   	nop
c00270c8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270cc:	39 f7                	cmp    edi,esi
c00270ce:	76 20                	jbe    c00270f0 <__moddi3+0xbc>
c00270d0:	89 c8                	mov    eax,ecx
c00270d2:	89 f2                	mov    edx,esi
c00270d4:	eb b2                	jmp    c0027088 <__moddi3+0x54>
c00270d6:	66 90                	xchg   ax,ax
c00270d8:	f7 d9                	neg    ecx
c00270da:	83 d3 00             	adc    ebx,0x0
c00270dd:	f7 db                	neg    ebx
c00270df:	89 de                	mov    esi,ebx
c00270e1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00270e9:	e9 6f ff ff ff       	jmp    c002705d <__moddi3+0x29>
c00270ee:	66 90                	xchg   ax,ax
c00270f0:	0f bd c7             	bsr    eax,edi
c00270f3:	83 f0 1f             	xor    eax,0x1f
c00270f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00270fa:	75 24                	jne    c0027120 <__moddi3+0xec>
c00270fc:	39 f7                	cmp    edi,esi
c00270fe:	72 06                	jb     c0027106 <__moddi3+0xd2>
c0027100:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027104:	77 0c                	ja     c0027112 <__moddi3+0xde>
c0027106:	89 e9                	mov    ecx,ebp
c0027108:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002710c:	19 fe                	sbb    esi,edi
c002710e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027112:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027116:	89 f2                	mov    edx,esi
c0027118:	e9 6b ff ff ff       	jmp    c0027088 <__moddi3+0x54>
c002711d:	8d 76 00             	lea    esi,[esi+0x0]
c0027120:	b8 20 00 00 00       	mov    eax,0x20
c0027125:	89 c2                	mov    edx,eax
c0027127:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002712b:	29 da                	sub    edx,ebx
c002712d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027131:	88 d9                	mov    cl,bl
c0027133:	d3 e7                	shl    edi,cl
c0027135:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027139:	88 d1                	mov    cl,dl
c002713b:	d3 e8                	shr    eax,cl
c002713d:	09 c7                	or     edi,eax
c002713f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027143:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027147:	89 d8                	mov    eax,ebx
c0027149:	88 d9                	mov    cl,bl
c002714b:	d3 e7                	shl    edi,cl
c002714d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027151:	89 f3                	mov    ebx,esi
c0027153:	88 d1                	mov    cl,dl
c0027155:	d3 eb                	shr    ebx,cl
c0027157:	89 c7                	mov    edi,eax
c0027159:	88 c1                	mov    cl,al
c002715b:	d3 e6                	shl    esi,cl
c002715d:	89 e8                	mov    eax,ebp
c002715f:	88 d1                	mov    cl,dl
c0027161:	d3 e8                	shr    eax,cl
c0027163:	09 f0                	or     eax,esi
c0027165:	89 f9                	mov    ecx,edi
c0027167:	d3 e5                	shl    ebp,cl
c0027169:	89 da                	mov    edx,ebx
c002716b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002716f:	89 d3                	mov    ebx,edx
c0027171:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027175:	89 c6                	mov    esi,eax
c0027177:	89 d1                	mov    ecx,edx
c0027179:	39 d3                	cmp    ebx,edx
c002717b:	72 27                	jb     c00271a4 <__moddi3+0x170>
c002717d:	74 21                	je     c00271a0 <__moddi3+0x16c>
c002717f:	29 f5                	sub    ebp,esi
c0027181:	19 cb                	sbb    ebx,ecx
c0027183:	89 de                	mov    esi,ebx
c0027185:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027189:	d3 e6                	shl    esi,cl
c002718b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002718f:	89 f9                	mov    ecx,edi
c0027191:	d3 ed                	shr    ebp,cl
c0027193:	09 ee                	or     esi,ebp
c0027195:	89 f0                	mov    eax,esi
c0027197:	d3 eb                	shr    ebx,cl
c0027199:	89 da                	mov    edx,ebx
c002719b:	e9 e8 fe ff ff       	jmp    c0027088 <__moddi3+0x54>
c00271a0:	39 c5                	cmp    ebp,eax
c00271a2:	73 db                	jae    c002717f <__moddi3+0x14b>
c00271a4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271a8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271ac:	89 d1                	mov    ecx,edx
c00271ae:	89 c6                	mov    esi,eax
c00271b0:	eb cd                	jmp    c002717f <__moddi3+0x14b>
c00271b2:	66 90                	xchg   ax,ax

c00271b4 <__udivdi3>:
c00271b4:	55                   	push   ebp
c00271b5:	57                   	push   edi
c00271b6:	56                   	push   esi
c00271b7:	53                   	push   ebx
c00271b8:	83 ec 1c             	sub    esp,0x1c
c00271bb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271bf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271c3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271c7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271cb:	85 d2                	test   edx,edx
c00271cd:	75 41                	jne    c0027210 <__udivdi3+0x5c>
c00271cf:	39 f7                	cmp    edi,esi
c00271d1:	76 15                	jbe    c00271e8 <__udivdi3+0x34>
c00271d3:	89 e8                	mov    eax,ebp
c00271d5:	89 f2                	mov    edx,esi
c00271d7:	f7 f7                	div    edi
c00271d9:	31 db                	xor    ebx,ebx
c00271db:	89 da                	mov    edx,ebx
c00271dd:	83 c4 1c             	add    esp,0x1c
c00271e0:	5b                   	pop    ebx
c00271e1:	5e                   	pop    esi
c00271e2:	5f                   	pop    edi
c00271e3:	5d                   	pop    ebp
c00271e4:	c3                   	ret    
c00271e5:	8d 76 00             	lea    esi,[esi+0x0]
c00271e8:	89 f9                	mov    ecx,edi
c00271ea:	85 ff                	test   edi,edi
c00271ec:	75 0b                	jne    c00271f9 <__udivdi3+0x45>
c00271ee:	b8 01 00 00 00       	mov    eax,0x1
c00271f3:	31 d2                	xor    edx,edx
c00271f5:	f7 f7                	div    edi
c00271f7:	89 c1                	mov    ecx,eax
c00271f9:	31 d2                	xor    edx,edx
c00271fb:	89 f0                	mov    eax,esi
c00271fd:	f7 f1                	div    ecx
c00271ff:	89 c3                	mov    ebx,eax
c0027201:	89 e8                	mov    eax,ebp
c0027203:	f7 f1                	div    ecx
c0027205:	89 da                	mov    edx,ebx
c0027207:	83 c4 1c             	add    esp,0x1c
c002720a:	5b                   	pop    ebx
c002720b:	5e                   	pop    esi
c002720c:	5f                   	pop    edi
c002720d:	5d                   	pop    ebp
c002720e:	c3                   	ret    
c002720f:	90                   	nop
c0027210:	39 f2                	cmp    edx,esi
c0027212:	77 1c                	ja     c0027230 <__udivdi3+0x7c>
c0027214:	0f bd da             	bsr    ebx,edx
c0027217:	83 f3 1f             	xor    ebx,0x1f
c002721a:	75 24                	jne    c0027240 <__udivdi3+0x8c>
c002721c:	39 f2                	cmp    edx,esi
c002721e:	72 08                	jb     c0027228 <__udivdi3+0x74>
c0027220:	39 ef                	cmp    edi,ebp
c0027222:	0f 87 84 00 00 00    	ja     c00272ac <__udivdi3+0xf8>
c0027228:	b8 01 00 00 00       	mov    eax,0x1
c002722d:	eb ac                	jmp    c00271db <__udivdi3+0x27>
c002722f:	90                   	nop
c0027230:	31 db                	xor    ebx,ebx
c0027232:	31 c0                	xor    eax,eax
c0027234:	89 da                	mov    edx,ebx
c0027236:	83 c4 1c             	add    esp,0x1c
c0027239:	5b                   	pop    ebx
c002723a:	5e                   	pop    esi
c002723b:	5f                   	pop    edi
c002723c:	5d                   	pop    ebp
c002723d:	c3                   	ret    
c002723e:	66 90                	xchg   ax,ax
c0027240:	b8 20 00 00 00       	mov    eax,0x20
c0027245:	29 d8                	sub    eax,ebx
c0027247:	88 d9                	mov    cl,bl
c0027249:	d3 e2                	shl    edx,cl
c002724b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002724f:	89 fa                	mov    edx,edi
c0027251:	88 c1                	mov    cl,al
c0027253:	d3 ea                	shr    edx,cl
c0027255:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027259:	09 d1                	or     ecx,edx
c002725b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002725f:	88 d9                	mov    cl,bl
c0027261:	d3 e7                	shl    edi,cl
c0027263:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027267:	89 f7                	mov    edi,esi
c0027269:	88 c1                	mov    cl,al
c002726b:	d3 ef                	shr    edi,cl
c002726d:	88 d9                	mov    cl,bl
c002726f:	d3 e6                	shl    esi,cl
c0027271:	89 ea                	mov    edx,ebp
c0027273:	88 c1                	mov    cl,al
c0027275:	d3 ea                	shr    edx,cl
c0027277:	09 d6                	or     esi,edx
c0027279:	89 f0                	mov    eax,esi
c002727b:	89 fa                	mov    edx,edi
c002727d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027281:	89 d7                	mov    edi,edx
c0027283:	89 c6                	mov    esi,eax
c0027285:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027289:	39 d7                	cmp    edi,edx
c002728b:	72 13                	jb     c00272a0 <__udivdi3+0xec>
c002728d:	74 09                	je     c0027298 <__udivdi3+0xe4>
c002728f:	89 f0                	mov    eax,esi
c0027291:	31 db                	xor    ebx,ebx
c0027293:	e9 43 ff ff ff       	jmp    c00271db <__udivdi3+0x27>
c0027298:	88 d9                	mov    cl,bl
c002729a:	d3 e5                	shl    ebp,cl
c002729c:	39 c5                	cmp    ebp,eax
c002729e:	73 ef                	jae    c002728f <__udivdi3+0xdb>
c00272a0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272a3:	31 db                	xor    ebx,ebx
c00272a5:	e9 31 ff ff ff       	jmp    c00271db <__udivdi3+0x27>
c00272aa:	66 90                	xchg   ax,ax
c00272ac:	31 c0                	xor    eax,eax
c00272ae:	e9 28 ff ff ff       	jmp    c00271db <__udivdi3+0x27>
c00272b3:	90                   	nop

c00272b4 <__umoddi3>:
c00272b4:	55                   	push   ebp
c00272b5:	57                   	push   edi
c00272b6:	56                   	push   esi
c00272b7:	53                   	push   ebx
c00272b8:	83 ec 1c             	sub    esp,0x1c
c00272bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272c3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272cb:	89 da                	mov    edx,ebx
c00272cd:	85 c0                	test   eax,eax
c00272cf:	75 37                	jne    c0027308 <__umoddi3+0x54>
c00272d1:	39 df                	cmp    edi,ebx
c00272d3:	76 13                	jbe    c00272e8 <__umoddi3+0x34>
c00272d5:	89 f0                	mov    eax,esi
c00272d7:	f7 f7                	div    edi
c00272d9:	89 d0                	mov    eax,edx
c00272db:	31 d2                	xor    edx,edx
c00272dd:	83 c4 1c             	add    esp,0x1c
c00272e0:	5b                   	pop    ebx
c00272e1:	5e                   	pop    esi
c00272e2:	5f                   	pop    edi
c00272e3:	5d                   	pop    ebp
c00272e4:	c3                   	ret    
c00272e5:	8d 76 00             	lea    esi,[esi+0x0]
c00272e8:	89 fd                	mov    ebp,edi
c00272ea:	85 ff                	test   edi,edi
c00272ec:	75 0b                	jne    c00272f9 <__umoddi3+0x45>
c00272ee:	b8 01 00 00 00       	mov    eax,0x1
c00272f3:	31 d2                	xor    edx,edx
c00272f5:	f7 f7                	div    edi
c00272f7:	89 c5                	mov    ebp,eax
c00272f9:	89 d8                	mov    eax,ebx
c00272fb:	31 d2                	xor    edx,edx
c00272fd:	f7 f5                	div    ebp
c00272ff:	89 f0                	mov    eax,esi
c0027301:	f7 f5                	div    ebp
c0027303:	89 d0                	mov    eax,edx
c0027305:	eb d4                	jmp    c00272db <__umoddi3+0x27>
c0027307:	90                   	nop
c0027308:	89 f1                	mov    ecx,esi
c002730a:	39 d8                	cmp    eax,ebx
c002730c:	76 0a                	jbe    c0027318 <__umoddi3+0x64>
c002730e:	89 f0                	mov    eax,esi
c0027310:	83 c4 1c             	add    esp,0x1c
c0027313:	5b                   	pop    ebx
c0027314:	5e                   	pop    esi
c0027315:	5f                   	pop    edi
c0027316:	5d                   	pop    ebp
c0027317:	c3                   	ret    
c0027318:	0f bd e8             	bsr    ebp,eax
c002731b:	83 f5 1f             	xor    ebp,0x1f
c002731e:	75 1c                	jne    c002733c <__umoddi3+0x88>
c0027320:	39 d8                	cmp    eax,ebx
c0027322:	72 04                	jb     c0027328 <__umoddi3+0x74>
c0027324:	39 f7                	cmp    edi,esi
c0027326:	77 08                	ja     c0027330 <__umoddi3+0x7c>
c0027328:	89 da                	mov    edx,ebx
c002732a:	29 fe                	sub    esi,edi
c002732c:	19 c2                	sbb    edx,eax
c002732e:	89 f1                	mov    ecx,esi
c0027330:	89 c8                	mov    eax,ecx
c0027332:	83 c4 1c             	add    esp,0x1c
c0027335:	5b                   	pop    ebx
c0027336:	5e                   	pop    esi
c0027337:	5f                   	pop    edi
c0027338:	5d                   	pop    ebp
c0027339:	c3                   	ret    
c002733a:	66 90                	xchg   ax,ax
c002733c:	ba 20 00 00 00       	mov    edx,0x20
c0027341:	29 ea                	sub    edx,ebp
c0027343:	89 e9                	mov    ecx,ebp
c0027345:	d3 e0                	shl    eax,cl
c0027347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002734b:	89 f8                	mov    eax,edi
c002734d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027351:	88 d1                	mov    cl,dl
c0027353:	d3 e8                	shr    eax,cl
c0027355:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027359:	09 c1                	or     ecx,eax
c002735b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002735f:	89 e9                	mov    ecx,ebp
c0027361:	d3 e7                	shl    edi,cl
c0027363:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027367:	89 d8                	mov    eax,ebx
c0027369:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002736d:	88 d1                	mov    cl,dl
c002736f:	d3 e8                	shr    eax,cl
c0027371:	89 c7                	mov    edi,eax
c0027373:	89 e9                	mov    ecx,ebp
c0027375:	d3 e3                	shl    ebx,cl
c0027377:	89 f0                	mov    eax,esi
c0027379:	88 d1                	mov    cl,dl
c002737b:	d3 e8                	shr    eax,cl
c002737d:	09 d8                	or     eax,ebx
c002737f:	89 e9                	mov    ecx,ebp
c0027381:	d3 e6                	shl    esi,cl
c0027383:	89 f3                	mov    ebx,esi
c0027385:	89 fa                	mov    edx,edi
c0027387:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002738b:	89 d1                	mov    ecx,edx
c002738d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027391:	89 c6                	mov    esi,eax
c0027393:	89 d7                	mov    edi,edx
c0027395:	39 d1                	cmp    ecx,edx
c0027397:	72 27                	jb     c00273c0 <__umoddi3+0x10c>
c0027399:	74 21                	je     c00273bc <__umoddi3+0x108>
c002739b:	89 ca                	mov    edx,ecx
c002739d:	29 f3                	sub    ebx,esi
c002739f:	19 fa                	sbb    edx,edi
c00273a1:	89 d0                	mov    eax,edx
c00273a3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273a7:	d3 e0                	shl    eax,cl
c00273a9:	89 e9                	mov    ecx,ebp
c00273ab:	d3 eb                	shr    ebx,cl
c00273ad:	09 d8                	or     eax,ebx
c00273af:	d3 ea                	shr    edx,cl
c00273b1:	83 c4 1c             	add    esp,0x1c
c00273b4:	5b                   	pop    ebx
c00273b5:	5e                   	pop    esi
c00273b6:	5f                   	pop    edi
c00273b7:	5d                   	pop    ebp
c00273b8:	c3                   	ret    
c00273b9:	8d 76 00             	lea    esi,[esi+0x0]
c00273bc:	39 c3                	cmp    ebx,eax
c00273be:	73 db                	jae    c002739b <__umoddi3+0xe7>
c00273c0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273c4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273c8:	89 d7                	mov    edi,edx
c00273ca:	89 c6                	mov    esi,eax
c00273cc:	eb cd                	jmp    c002739b <__umoddi3+0xe7>

c00273ce <__addsf3>:
c00273ce:	55                   	push   ebp
c00273cf:	89 e5                	mov    ebp,esp
c00273d1:	57                   	push   edi
c00273d2:	56                   	push   esi
c00273d3:	53                   	push   ebx
c00273d4:	83 ec 08             	sub    esp,0x8
c00273d7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273da:	89 fa                	mov    edx,edi
c00273dc:	89 f8                	mov    eax,edi
c00273de:	c1 f8 17             	sar    eax,0x17
c00273e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273e4:	c1 e2 08             	shl    edx,0x8
c00273e7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273ed:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273f0:	89 de                	mov    esi,ebx
c00273f2:	c1 fe 17             	sar    esi,0x17
c00273f5:	c1 e3 08             	shl    ebx,0x8
c00273f8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273fe:	31 f0                	xor    eax,esi
c0027400:	0f 88 3b 01 00 00    	js     c0027541 <__addsf3+0x173>
c0027406:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027409:	29 f1                	sub    ecx,esi
c002740b:	85 c9                	test   ecx,ecx
c002740d:	7e 54                	jle    c0027463 <__addsf3+0x95>
c002740f:	89 f0                	mov    eax,esi
c0027411:	84 c0                	test   al,al
c0027413:	75 10                	jne    c0027425 <__addsf3+0x57>
c0027415:	85 db                	test   ebx,ebx
c0027417:	0f 84 aa 02 00 00    	je     c00276c7 <__addsf3+0x2f9>
c002741d:	49                   	dec    ecx
c002741e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027421:	74 38                	je     c002745b <__addsf3+0x8d>
c0027423:	eb 13                	jmp    c0027438 <__addsf3+0x6a>
c0027425:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027428:	f7 d0                	not    eax
c002742a:	84 c0                	test   al,al
c002742c:	0f 84 95 02 00 00    	je     c00276c7 <__addsf3+0x2f9>
c0027432:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027438:	83 f9 1f             	cmp    ecx,0x1f
c002743b:	0f 8f 86 02 00 00    	jg     c00276c7 <__addsf3+0x2f9>
c0027441:	89 de                	mov    esi,ebx
c0027443:	d3 ee                	shr    esi,cl
c0027445:	b8 20 00 00 00       	mov    eax,0x20
c002744a:	29 c8                	sub    eax,ecx
c002744c:	89 c1                	mov    ecx,eax
c002744e:	d3 e3                	shl    ebx,cl
c0027450:	31 c0                	xor    eax,eax
c0027452:	85 db                	test   ebx,ebx
c0027454:	0f 95 c0             	setne  al
c0027457:	09 f0                	or     eax,esi
c0027459:	01 d0                	add    eax,edx
c002745b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002745e:	e9 b6 00 00 00       	jmp    c0027519 <__addsf3+0x14b>
c0027463:	74 5c                	je     c00274c1 <__addsf3+0xf3>
c0027465:	89 f1                	mov    ecx,esi
c0027467:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002746a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002746d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027471:	75 14                	jne    c0027487 <__addsf3+0xb9>
c0027473:	85 d2                	test   edx,edx
c0027475:	0f 84 4c 02 00 00    	je     c00276c7 <__addsf3+0x2f9>
c002747b:	49                   	dec    ecx
c002747c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002747f:	0f 84 94 00 00 00    	je     c0027519 <__addsf3+0x14b>
c0027485:	eb 12                	jmp    c0027499 <__addsf3+0xcb>
c0027487:	89 f0                	mov    eax,esi
c0027489:	f7 d0                	not    eax
c002748b:	84 c0                	test   al,al
c002748d:	0f 84 34 02 00 00    	je     c00276c7 <__addsf3+0x2f9>
c0027493:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027499:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002749c:	83 f9 1f             	cmp    ecx,0x1f
c002749f:	0f 8f 22 02 00 00    	jg     c00276c7 <__addsf3+0x2f9>
c00274a5:	89 d7                	mov    edi,edx
c00274a7:	d3 ef                	shr    edi,cl
c00274a9:	b8 20 00 00 00       	mov    eax,0x20
c00274ae:	29 c8                	sub    eax,ecx
c00274b0:	89 c1                	mov    ecx,eax
c00274b2:	d3 e2                	shl    edx,cl
c00274b4:	31 c0                	xor    eax,eax
c00274b6:	85 d2                	test   edx,edx
c00274b8:	0f 95 c0             	setne  al
c00274bb:	09 f8                	or     eax,edi
c00274bd:	01 d8                	add    eax,ebx
c00274bf:	eb 58                	jmp    c0027519 <__addsf3+0x14b>
c00274c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274c4:	8d 70 01             	lea    esi,[eax+0x1]
c00274c7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274cd:	75 32                	jne    c0027501 <__addsf3+0x133>
c00274cf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274d3:	75 1f                	jne    c00274f4 <__addsf3+0x126>
c00274d5:	85 d2                	test   edx,edx
c00274d7:	0f 84 e0 01 00 00    	je     c00276bd <__addsf3+0x2ef>
c00274dd:	85 db                	test   ebx,ebx
c00274df:	0f 84 e2 01 00 00    	je     c00276c7 <__addsf3+0x2f9>
c00274e5:	89 d0                	mov    eax,edx
c00274e7:	01 d8                	add    eax,ebx
c00274e9:	0f 89 a9 01 00 00    	jns    c0027698 <__addsf3+0x2ca>
c00274ef:	e9 9d 01 00 00       	jmp    c0027691 <__addsf3+0x2c3>
c00274f4:	85 d2                	test   edx,edx
c00274f6:	0f 85 cb 01 00 00    	jne    c00276c7 <__addsf3+0x2f9>
c00274fc:	e9 bc 01 00 00       	jmp    c00276bd <__addsf3+0x2ef>
c0027501:	31 c0                	xor    eax,eax
c0027503:	89 f1                	mov    ecx,esi
c0027505:	f7 d1                	not    ecx
c0027507:	84 c9                	test   cl,cl
c0027509:	0f 84 90 01 00 00    	je     c002769f <__addsf3+0x2d1>
c002750f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027512:	d1 e8                	shr    eax,1
c0027514:	e9 86 01 00 00       	jmp    c002769f <__addsf3+0x2d1>
c0027519:	85 c0                	test   eax,eax
c002751b:	0f 89 7e 01 00 00    	jns    c002769f <__addsf3+0x2d1>
c0027521:	46                   	inc    esi
c0027522:	89 f2                	mov    edx,esi
c0027524:	f7 d2                	not    edx
c0027526:	84 d2                	test   dl,dl
c0027528:	0f 84 6f 01 00 00    	je     c002769d <__addsf3+0x2cf>
c002752e:	89 c2                	mov    edx,eax
c0027530:	83 e2 01             	and    edx,0x1
c0027533:	d1 e8                	shr    eax,1
c0027535:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002753a:	09 d0                	or     eax,edx
c002753c:	e9 5e 01 00 00       	jmp    c002769f <__addsf3+0x2d1>
c0027541:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027545:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027548:	89 f0                	mov    eax,esi
c002754a:	0f b6 c0             	movzx  eax,al
c002754d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027550:	29 c1                	sub    ecx,eax
c0027552:	85 c9                	test   ecx,ecx
c0027554:	7e 55                	jle    c00275ab <__addsf3+0x1dd>
c0027556:	85 c0                	test   eax,eax
c0027558:	75 11                	jne    c002756b <__addsf3+0x19d>
c002755a:	85 db                	test   ebx,ebx
c002755c:	0f 84 65 01 00 00    	je     c00276c7 <__addsf3+0x2f9>
c0027562:	49                   	dec    ecx
c0027563:	75 19                	jne    c002757e <__addsf3+0x1b0>
c0027565:	89 d0                	mov    eax,edx
c0027567:	29 d8                	sub    eax,ebx
c0027569:	eb 38                	jmp    c00275a3 <__addsf3+0x1d5>
c002756b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002756e:	f7 d0                	not    eax
c0027570:	84 c0                	test   al,al
c0027572:	0f 84 4f 01 00 00    	je     c00276c7 <__addsf3+0x2f9>
c0027578:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002757e:	83 f9 1f             	cmp    ecx,0x1f
c0027581:	0f 8f 40 01 00 00    	jg     c00276c7 <__addsf3+0x2f9>
c0027587:	89 de                	mov    esi,ebx
c0027589:	d3 ee                	shr    esi,cl
c002758b:	b8 20 00 00 00       	mov    eax,0x20
c0027590:	29 c8                	sub    eax,ecx
c0027592:	89 c1                	mov    ecx,eax
c0027594:	d3 e3                	shl    ebx,cl
c0027596:	31 c0                	xor    eax,eax
c0027598:	85 db                	test   ebx,ebx
c002759a:	0f 95 c0             	setne  al
c002759d:	09 f0                	or     eax,esi
c002759f:	29 c2                	sub    edx,eax
c00275a1:	89 d0                	mov    eax,edx
c00275a3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275a6:	e9 af 00 00 00       	jmp    c002765a <__addsf3+0x28c>
c00275ab:	74 5c                	je     c0027609 <__addsf3+0x23b>
c00275ad:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275b0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275b3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275b7:	75 14                	jne    c00275cd <__addsf3+0x1ff>
c00275b9:	85 d2                	test   edx,edx
c00275bb:	0f 84 06 01 00 00    	je     c00276c7 <__addsf3+0x2f9>
c00275c1:	48                   	dec    eax
c00275c2:	75 1b                	jne    c00275df <__addsf3+0x211>
c00275c4:	89 d8                	mov    eax,ebx
c00275c6:	29 d0                	sub    eax,edx
c00275c8:	e9 8d 00 00 00       	jmp    c002765a <__addsf3+0x28c>
c00275cd:	89 f1                	mov    ecx,esi
c00275cf:	f7 d1                	not    ecx
c00275d1:	84 c9                	test   cl,cl
c00275d3:	0f 84 ee 00 00 00    	je     c00276c7 <__addsf3+0x2f9>
c00275d9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275df:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275e2:	83 f8 1f             	cmp    eax,0x1f
c00275e5:	0f 8f dc 00 00 00    	jg     c00276c7 <__addsf3+0x2f9>
c00275eb:	89 d7                	mov    edi,edx
c00275ed:	88 c1                	mov    cl,al
c00275ef:	d3 ef                	shr    edi,cl
c00275f1:	b9 20 00 00 00       	mov    ecx,0x20
c00275f6:	29 c1                	sub    ecx,eax
c00275f8:	d3 e2                	shl    edx,cl
c00275fa:	31 c0                	xor    eax,eax
c00275fc:	85 d2                	test   edx,edx
c00275fe:	0f 95 c0             	setne  al
c0027601:	09 f8                	or     eax,edi
c0027603:	29 c3                	sub    ebx,eax
c0027605:	89 d8                	mov    eax,ebx
c0027607:	eb 51                	jmp    c002765a <__addsf3+0x28c>
c0027609:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002760c:	40                   	inc    eax
c002760d:	a8 fe                	test   al,0xfe
c002760f:	75 3d                	jne    c002764e <__addsf3+0x280>
c0027611:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027615:	0f 85 a7 00 00 00    	jne    c00276c2 <__addsf3+0x2f4>
c002761b:	85 d2                	test   edx,edx
c002761d:	75 12                	jne    c0027631 <__addsf3+0x263>
c002761f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027622:	85 db                	test   ebx,ebx
c0027624:	0f 85 9d 00 00 00    	jne    c00276c7 <__addsf3+0x2f9>
c002762a:	31 ff                	xor    edi,edi
c002762c:	e9 96 00 00 00       	jmp    c00276c7 <__addsf3+0x2f9>
c0027631:	85 db                	test   ebx,ebx
c0027633:	0f 84 8e 00 00 00    	je     c00276c7 <__addsf3+0x2f9>
c0027639:	89 d0                	mov    eax,edx
c002763b:	29 d8                	sub    eax,ebx
c002763d:	79 06                	jns    c0027645 <__addsf3+0x277>
c002763f:	89 d8                	mov    eax,ebx
c0027641:	29 d0                	sub    eax,edx
c0027643:	eb 5a                	jmp    c002769f <__addsf3+0x2d1>
c0027645:	bf 00 00 00 00       	mov    edi,0x0
c002764a:	74 7b                	je     c00276c7 <__addsf3+0x2f9>
c002764c:	eb 4a                	jmp    c0027698 <__addsf3+0x2ca>
c002764e:	89 d0                	mov    eax,edx
c0027650:	29 d8                	sub    eax,ebx
c0027652:	79 12                	jns    c0027666 <__addsf3+0x298>
c0027654:	89 d8                	mov    eax,ebx
c0027656:	29 d0                	sub    eax,edx
c0027658:	eb 09                	jmp    c0027663 <__addsf3+0x295>
c002765a:	85 c0                	test   eax,eax
c002765c:	79 41                	jns    c002769f <__addsf3+0x2d1>
c002765e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027663:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027666:	31 f6                	xor    esi,esi
c0027668:	85 c0                	test   eax,eax
c002766a:	74 33                	je     c002769f <__addsf3+0x2d1>
c002766c:	0f bd c8             	bsr    ecx,eax
c002766f:	83 f1 1f             	xor    ecx,0x1f
c0027672:	d3 e0                	shl    eax,cl
c0027674:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027678:	39 ca                	cmp    edx,ecx
c002767a:	7f 10                	jg     c002768c <__addsf3+0x2be>
c002767c:	29 d1                	sub    ecx,edx
c002767e:	41                   	inc    ecx
c002767f:	d3 e8                	shr    eax,cl
c0027681:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027684:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002768a:	eb 13                	jmp    c002769f <__addsf3+0x2d1>
c002768c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002768f:	29 ce                	sub    esi,ecx
c0027691:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027696:	eb 07                	jmp    c002769f <__addsf3+0x2d1>
c0027698:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002769b:	eb 02                	jmp    c002769f <__addsf3+0x2d1>
c002769d:	31 c0                	xor    eax,eax
c002769f:	89 c2                	mov    edx,eax
c00276a1:	c1 ea 08             	shr    edx,0x8
c00276a4:	a8 7f                	test   al,0x7f
c00276a6:	0f 95 c1             	setne  cl
c00276a9:	09 d1                	or     ecx,edx
c00276ab:	83 e1 01             	and    ecx,0x1
c00276ae:	c1 e8 07             	shr    eax,0x7
c00276b1:	21 c8                	and    eax,ecx
c00276b3:	c1 e6 17             	shl    esi,0x17
c00276b6:	09 d6                	or     esi,edx
c00276b8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276bb:	eb 0a                	jmp    c00276c7 <__addsf3+0x2f9>
c00276bd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276c0:	eb 05                	jmp    c00276c7 <__addsf3+0x2f9>
c00276c2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276c7:	89 f8                	mov    eax,edi
c00276c9:	5a                   	pop    edx
c00276ca:	59                   	pop    ecx
c00276cb:	5b                   	pop    ebx
c00276cc:	5e                   	pop    esi
c00276cd:	5f                   	pop    edi
c00276ce:	5d                   	pop    ebp
c00276cf:	c3                   	ret    

c00276d0 <__subsf3>:
c00276d0:	55                   	push   ebp
c00276d1:	89 e5                	mov    ebp,esp
c00276d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276d6:	05 00 00 00 80       	add    eax,0x80000000
c00276db:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276de:	5d                   	pop    ebp
c00276df:	e9 ea fc ff ff       	jmp    c00273ce <__addsf3>

c00276e4 <__negsf2>:
c00276e4:	55                   	push   ebp
c00276e5:	89 e5                	mov    ebp,esp
c00276e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276ea:	05 00 00 00 80       	add    eax,0x80000000
c00276ef:	5d                   	pop    ebp
c00276f0:	c3                   	ret    

c00276f1 <__mulsf3>:
c00276f1:	55                   	push   ebp
c00276f2:	89 e5                	mov    ebp,esp
c00276f4:	57                   	push   edi
c00276f5:	56                   	push   esi
c00276f6:	53                   	push   ebx
c00276f7:	83 ec 1c             	sub    esp,0x1c
c00276fa:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00276fd:	89 f0                	mov    eax,esi
c00276ff:	89 f1                	mov    ecx,esi
c0027701:	c1 f9 17             	sar    ecx,0x17
c0027704:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027707:	c1 e0 08             	shl    eax,0x8
c002770a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002770f:	89 c1                	mov    ecx,eax
c0027711:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027714:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027717:	89 c7                	mov    edi,eax
c0027719:	c1 ff 17             	sar    edi,0x17
c002771c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027720:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027723:	89 f8                	mov    eax,edi
c0027725:	0f b6 c0             	movzx  eax,al
c0027728:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002772b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002772f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027732:	42                   	inc    edx
c0027733:	80 e2 fe             	and    dl,0xfe
c0027736:	75 7b                	jne    c00277b3 <__mulsf3+0xc2>
c0027738:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002773c:	74 54                	je     c0027792 <__mulsf3+0xa1>
c002773e:	85 c9                	test   ecx,ecx
c0027740:	0f 85 64 01 00 00    	jne    c00278aa <__mulsf3+0x1b9>
c0027746:	8d 57 01             	lea    edx,[edi+0x1]
c0027749:	80 e2 fe             	and    dl,0xfe
c002774c:	75 1f                	jne    c002776d <__mulsf3+0x7c>
c002774e:	85 c0                	test   eax,eax
c0027750:	b8 00 00 00 00       	mov    eax,0x0
c0027755:	74 29                	je     c0027780 <__mulsf3+0x8f>
c0027757:	53                   	push   ebx
c0027758:	53                   	push   ebx
c0027759:	50                   	push   eax
c002775a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002775d:	e8 96 05 00 00       	call   c0027cf8 <__nesf2>
c0027762:	83 c4 10             	add    esp,0x10
c0027765:	85 c0                	test   eax,eax
c0027767:	0f 85 3a 01 00 00    	jne    c00278a7 <__mulsf3+0x1b6>
c002776d:	85 ff                	test   edi,edi
c002776f:	0f 89 35 01 00 00    	jns    c00278aa <__mulsf3+0x1b9>
c0027775:	81 c6 00 00 00 80    	add    esi,0x80000000
c002777b:	e9 2a 01 00 00       	jmp    c00278aa <__mulsf3+0x1b9>
c0027780:	51                   	push   ecx
c0027781:	51                   	push   ecx
c0027782:	50                   	push   eax
c0027783:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027786:	e8 6d 05 00 00       	call   c0027cf8 <__nesf2>
c002778b:	83 c4 10             	add    esp,0x10
c002778e:	85 c0                	test   eax,eax
c0027790:	eb 15                	jmp    c00277a7 <__mulsf3+0xb6>
c0027792:	85 c9                	test   ecx,ecx
c0027794:	74 0b                	je     c00277a1 <__mulsf3+0xb0>
c0027796:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027799:	01 c9                	add    ecx,ecx
c002779b:	78 16                	js     c00277b3 <__mulsf3+0xc2>
c002779d:	89 d3                	mov    ebx,edx
c002779f:	eb f5                	jmp    c0027796 <__mulsf3+0xa5>
c00277a1:	89 f8                	mov    eax,edi
c00277a3:	f7 d0                	not    eax
c00277a5:	84 c0                	test   al,al
c00277a7:	75 c4                	jne    c002776d <__mulsf3+0x7c>
c00277a9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277ae:	e9 f7 00 00 00       	jmp    c00278aa <__mulsf3+0x1b9>
c00277b3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277b6:	c1 e6 08             	shl    esi,0x8
c00277b9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277bf:	8d 57 01             	lea    edx,[edi+0x1]
c00277c2:	80 e2 fe             	and    dl,0xfe
c00277c5:	75 63                	jne    c002782a <__mulsf3+0x139>
c00277c7:	85 c0                	test   eax,eax
c00277c9:	74 2f                	je     c00277fa <__mulsf3+0x109>
c00277cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277cf:	0f 89 d2 00 00 00    	jns    c00278a7 <__mulsf3+0x1b6>
c00277d5:	52                   	push   edx
c00277d6:	52                   	push   edx
c00277d7:	6a 00                	push   0x0
c00277d9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277dc:	e8 dc 04 00 00       	call   c0027cbd <__eqsf2>
c00277e1:	83 c4 10             	add    esp,0x10
c00277e4:	85 c0                	test   eax,eax
c00277e6:	0f 85 bb 00 00 00    	jne    c00278a7 <__mulsf3+0x1b6>
c00277ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277ef:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00277f5:	e9 b0 00 00 00       	jmp    c00278aa <__mulsf3+0x1b9>
c00277fa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00277fd:	50                   	push   eax
c00277fe:	50                   	push   eax
c00277ff:	6a 00                	push   0x0
c0027801:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027804:	e8 b4 04 00 00       	call   c0027cbd <__eqsf2>
c0027809:	83 c4 10             	add    esp,0x10
c002780c:	85 c0                	test   eax,eax
c002780e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027811:	75 0c                	jne    c002781f <__mulsf3+0x12e>
c0027813:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027817:	0f 89 8a 00 00 00    	jns    c00278a7 <__mulsf3+0x1b6>
c002781d:	eb cd                	jmp    c00277ec <__mulsf3+0xfb>
c002781f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027822:	01 f6                	add    esi,esi
c0027824:	78 04                	js     c002782a <__mulsf3+0x139>
c0027826:	89 c3                	mov    ebx,eax
c0027828:	eb f5                	jmp    c002781f <__mulsf3+0x12e>
c002782a:	89 c8                	mov    eax,ecx
c002782c:	0d 00 00 00 80       	or     eax,0x80000000
c0027831:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027837:	f7 e6                	mul    esi
c0027839:	85 c0                	test   eax,eax
c002783b:	0f 95 c0             	setne  al
c002783e:	0f b6 c0             	movzx  eax,al
c0027841:	09 c2                	or     edx,eax
c0027843:	78 03                	js     c0027848 <__mulsf3+0x157>
c0027845:	01 d2                	add    edx,edx
c0027847:	4b                   	dec    ebx
c0027848:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002784e:	7f 22                	jg     c0027872 <__mulsf3+0x181>
c0027850:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027856:	85 db                	test   ebx,ebx
c0027858:	7f 23                	jg     c002787d <__mulsf3+0x18c>
c002785a:	83 fb e9             	cmp    ebx,0xffffffe9
c002785d:	7c 1a                	jl     c0027879 <__mulsf3+0x188>
c002785f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027865:	b9 01 00 00 00       	mov    ecx,0x1
c002786a:	29 d9                	sub    ecx,ebx
c002786c:	d3 ea                	shr    edx,cl
c002786e:	31 db                	xor    ebx,ebx
c0027870:	eb 0b                	jmp    c002787d <__mulsf3+0x18c>
c0027872:	bb ff 00 00 00       	mov    ebx,0xff
c0027877:	eb 02                	jmp    c002787b <__mulsf3+0x18a>
c0027879:	31 db                	xor    ebx,ebx
c002787b:	31 d2                	xor    edx,edx
c002787d:	89 d0                	mov    eax,edx
c002787f:	c1 e8 08             	shr    eax,0x8
c0027882:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027885:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002788b:	09 fb                	or     ebx,edi
c002788d:	c1 e3 17             	shl    ebx,0x17
c0027890:	09 c3                	or     ebx,eax
c0027892:	f6 c2 7f             	test   dl,0x7f
c0027895:	0f 95 c1             	setne  cl
c0027898:	09 c8                	or     eax,ecx
c002789a:	83 e0 01             	and    eax,0x1
c002789d:	c1 ea 07             	shr    edx,0x7
c00278a0:	21 c2                	and    edx,eax
c00278a2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278a5:	eb 03                	jmp    c00278aa <__mulsf3+0x1b9>
c00278a7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278aa:	89 f0                	mov    eax,esi
c00278ac:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278af:	5b                   	pop    ebx
c00278b0:	5e                   	pop    esi
c00278b1:	5f                   	pop    edi
c00278b2:	5d                   	pop    ebp
c00278b3:	c3                   	ret    

c00278b4 <__divsf3>:
c00278b4:	55                   	push   ebp
c00278b5:	89 e5                	mov    ebp,esp
c00278b7:	57                   	push   edi
c00278b8:	56                   	push   esi
c00278b9:	53                   	push   ebx
c00278ba:	83 ec 1c             	sub    esp,0x1c
c00278bd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278c0:	89 d8                	mov    eax,ebx
c00278c2:	89 d9                	mov    ecx,ebx
c00278c4:	c1 f9 17             	sar    ecx,0x17
c00278c7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278ca:	c1 e0 08             	shl    eax,0x8
c00278cd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278d2:	89 c1                	mov    ecx,eax
c00278d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278d7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278da:	89 c7                	mov    edi,eax
c00278dc:	c1 ff 17             	sar    edi,0x17
c00278df:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278e3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278e6:	89 f8                	mov    eax,edi
c00278e8:	0f b6 c0             	movzx  eax,al
c00278eb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278ee:	29 c6                	sub    esi,eax
c00278f0:	83 c6 7f             	add    esi,0x7f
c00278f3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00278f6:	42                   	inc    edx
c00278f7:	80 e2 fe             	and    dl,0xfe
c00278fa:	0f 85 9c 00 00 00    	jne    c002799c <__divsf3+0xe8>
c0027900:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027904:	74 33                	je     c0027939 <__divsf3+0x85>
c0027906:	85 c9                	test   ecx,ecx
c0027908:	0f 85 c7 01 00 00    	jne    c0027ad5 <__divsf3+0x221>
c002790e:	8d 57 01             	lea    edx,[edi+0x1]
c0027911:	80 e2 fe             	and    dl,0xfe
c0027914:	75 2f                	jne    c0027945 <__divsf3+0x91>
c0027916:	85 c0                	test   eax,eax
c0027918:	74 2b                	je     c0027945 <__divsf3+0x91>
c002791a:	51                   	push   ecx
c002791b:	51                   	push   ecx
c002791c:	6a 00                	push   0x0
c002791e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027921:	e8 d2 03 00 00       	call   c0027cf8 <__nesf2>
c0027926:	83 c4 10             	add    esp,0x10
c0027929:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002792c:	85 c0                	test   eax,eax
c002792e:	0f 85 a1 01 00 00    	jne    c0027ad5 <__divsf3+0x221>
c0027934:	e9 92 01 00 00       	jmp    c0027acb <__divsf3+0x217>
c0027939:	85 c9                	test   ecx,ecx
c002793b:	75 1b                	jne    c0027958 <__divsf3+0xa4>
c002793d:	8d 57 01             	lea    edx,[edi+0x1]
c0027940:	80 e2 fe             	and    dl,0xfe
c0027943:	74 1e                	je     c0027963 <__divsf3+0xaf>
c0027945:	85 ff                	test   edi,edi
c0027947:	0f 89 88 01 00 00    	jns    c0027ad5 <__divsf3+0x221>
c002794d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027953:	e9 7d 01 00 00       	jmp    c0027ad5 <__divsf3+0x221>
c0027958:	8d 56 ff             	lea    edx,[esi-0x1]
c002795b:	01 c9                	add    ecx,ecx
c002795d:	78 3d                	js     c002799c <__divsf3+0xe8>
c002795f:	89 d6                	mov    esi,edx
c0027961:	eb f5                	jmp    c0027958 <__divsf3+0xa4>
c0027963:	85 c0                	test   eax,eax
c0027965:	b8 00 00 00 00       	mov    eax,0x0
c002796a:	74 18                	je     c0027984 <__divsf3+0xd0>
c002796c:	52                   	push   edx
c002796d:	52                   	push   edx
c002796e:	50                   	push   eax
c002796f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027972:	e8 81 03 00 00       	call   c0027cf8 <__nesf2>
c0027977:	83 c4 10             	add    esp,0x10
c002797a:	85 c0                	test   eax,eax
c002797c:	0f 85 50 01 00 00    	jne    c0027ad2 <__divsf3+0x21e>
c0027982:	eb c1                	jmp    c0027945 <__divsf3+0x91>
c0027984:	56                   	push   esi
c0027985:	56                   	push   esi
c0027986:	50                   	push   eax
c0027987:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002798a:	e8 69 03 00 00       	call   c0027cf8 <__nesf2>
c002798f:	83 c4 10             	add    esp,0x10
c0027992:	85 c0                	test   eax,eax
c0027994:	0f 84 31 01 00 00    	je     c0027acb <__divsf3+0x217>
c002799a:	eb a9                	jmp    c0027945 <__divsf3+0x91>
c002799c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002799f:	c1 e3 08             	shl    ebx,0x8
c00279a2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279a8:	8d 57 01             	lea    edx,[edi+0x1]
c00279ab:	80 e2 fe             	and    dl,0xfe
c00279ae:	75 71                	jne    c0027a21 <__divsf3+0x16d>
c00279b0:	85 c0                	test   eax,eax
c00279b2:	ba 00 00 00 00       	mov    edx,0x0
c00279b7:	74 2f                	je     c00279e8 <__divsf3+0x134>
c00279b9:	51                   	push   ecx
c00279ba:	51                   	push   ecx
c00279bb:	52                   	push   edx
c00279bc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279bf:	e8 f9 02 00 00       	call   c0027cbd <__eqsf2>
c00279c4:	83 c4 10             	add    esp,0x10
c00279c7:	85 c0                	test   eax,eax
c00279c9:	0f 85 03 01 00 00    	jne    c0027ad2 <__divsf3+0x21e>
c00279cf:	31 d2                	xor    edx,edx
c00279d1:	89 d3                	mov    ebx,edx
c00279d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279d6:	31 f8                	xor    eax,edi
c00279d8:	0f 89 f7 00 00 00    	jns    c0027ad5 <__divsf3+0x221>
c00279de:	bb 00 00 00 80       	mov    ebx,0x80000000
c00279e3:	e9 ed 00 00 00       	jmp    c0027ad5 <__divsf3+0x221>
c00279e8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279eb:	50                   	push   eax
c00279ec:	50                   	push   eax
c00279ed:	52                   	push   edx
c00279ee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279f1:	e8 c7 02 00 00       	call   c0027cbd <__eqsf2>
c00279f6:	83 c4 10             	add    esp,0x10
c00279f9:	85 c0                	test   eax,eax
c00279fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279fe:	75 16                	jne    c0027a16 <__divsf3+0x162>
c0027a00:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a03:	31 fb                	xor    ebx,edi
c0027a05:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a0b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a11:	e9 bf 00 00 00       	jmp    c0027ad5 <__divsf3+0x221>
c0027a16:	8d 46 01             	lea    eax,[esi+0x1]
c0027a19:	01 db                	add    ebx,ebx
c0027a1b:	78 04                	js     c0027a21 <__divsf3+0x16d>
c0027a1d:	89 c6                	mov    esi,eax
c0027a1f:	eb f5                	jmp    c0027a16 <__divsf3+0x162>
c0027a21:	89 c8                	mov    eax,ecx
c0027a23:	0d 00 00 00 80       	or     eax,0x80000000
c0027a28:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a2e:	31 d2                	xor    edx,edx
c0027a30:	39 d8                	cmp    eax,ebx
c0027a32:	72 07                	jb     c0027a3b <__divsf3+0x187>
c0027a34:	29 d8                	sub    eax,ebx
c0027a36:	ba 01 00 00 00       	mov    edx,0x1
c0027a3b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a42:	01 d2                	add    edx,edx
c0027a44:	89 c1                	mov    ecx,eax
c0027a46:	01 c0                	add    eax,eax
c0027a48:	85 c9                	test   ecx,ecx
c0027a4a:	78 04                	js     c0027a50 <__divsf3+0x19c>
c0027a4c:	39 c3                	cmp    ebx,eax
c0027a4e:	77 05                	ja     c0027a55 <__divsf3+0x1a1>
c0027a50:	29 d8                	sub    eax,ebx
c0027a52:	83 ca 01             	or     edx,0x1
c0027a55:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a58:	75 e8                	jne    c0027a42 <__divsf3+0x18e>
c0027a5a:	85 c0                	test   eax,eax
c0027a5c:	0f 95 c0             	setne  al
c0027a5f:	0f b6 c0             	movzx  eax,al
c0027a62:	c1 e2 06             	shl    edx,0x6
c0027a65:	09 c2                	or     edx,eax
c0027a67:	78 03                	js     c0027a6c <__divsf3+0x1b8>
c0027a69:	01 d2                	add    edx,edx
c0027a6b:	4e                   	dec    esi
c0027a6c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a72:	7f 22                	jg     c0027a96 <__divsf3+0x1e2>
c0027a74:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a7a:	85 f6                	test   esi,esi
c0027a7c:	7f 23                	jg     c0027aa1 <__divsf3+0x1ed>
c0027a7e:	83 fe e9             	cmp    esi,0xffffffe9
c0027a81:	7c 1a                	jl     c0027a9d <__divsf3+0x1e9>
c0027a83:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a89:	b9 01 00 00 00       	mov    ecx,0x1
c0027a8e:	29 f1                	sub    ecx,esi
c0027a90:	d3 ea                	shr    edx,cl
c0027a92:	31 f6                	xor    esi,esi
c0027a94:	eb 0b                	jmp    c0027aa1 <__divsf3+0x1ed>
c0027a96:	be ff 00 00 00       	mov    esi,0xff
c0027a9b:	eb 02                	jmp    c0027a9f <__divsf3+0x1eb>
c0027a9d:	31 f6                	xor    esi,esi
c0027a9f:	31 d2                	xor    edx,edx
c0027aa1:	89 d0                	mov    eax,edx
c0027aa3:	c1 e8 08             	shr    eax,0x8
c0027aa6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027aa9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027aaf:	09 fe                	or     esi,edi
c0027ab1:	c1 e6 17             	shl    esi,0x17
c0027ab4:	09 c6                	or     esi,eax
c0027ab6:	f6 c2 7f             	test   dl,0x7f
c0027ab9:	0f 95 c1             	setne  cl
c0027abc:	09 c8                	or     eax,ecx
c0027abe:	83 e0 01             	and    eax,0x1
c0027ac1:	c1 ea 07             	shr    edx,0x7
c0027ac4:	21 c2                	and    edx,eax
c0027ac6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ac9:	eb 0a                	jmp    c0027ad5 <__divsf3+0x221>
c0027acb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027ad0:	eb 03                	jmp    c0027ad5 <__divsf3+0x221>
c0027ad2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027ad5:	89 d8                	mov    eax,ebx
c0027ad7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027ada:	5b                   	pop    ebx
c0027adb:	5e                   	pop    esi
c0027adc:	5f                   	pop    edi
c0027add:	5d                   	pop    ebp
c0027ade:	c3                   	ret    

c0027adf <__floatsisf>:
c0027adf:	55                   	push   ebp
c0027ae0:	89 e5                	mov    ebp,esp
c0027ae2:	53                   	push   ebx
c0027ae3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ae6:	85 d2                	test   edx,edx
c0027ae8:	7e 2b                	jle    c0027b15 <__floatsisf+0x36>
c0027aea:	0f bd ca             	bsr    ecx,edx
c0027aed:	83 f1 1f             	xor    ecx,0x1f
c0027af0:	d3 e2                	shl    edx,cl
c0027af2:	89 d0                	mov    eax,edx
c0027af4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027af9:	89 c3                	mov    ebx,eax
c0027afb:	c1 eb 08             	shr    ebx,0x8
c0027afe:	80 e2 7f             	and    dl,0x7f
c0027b01:	0f 95 c2             	setne  dl
c0027b04:	09 da                	or     edx,ebx
c0027b06:	83 e2 01             	and    edx,0x1
c0027b09:	c1 e8 07             	shr    eax,0x7
c0027b0c:	21 c2                	and    edx,eax
c0027b0e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b13:	eb 32                	jmp    c0027b47 <__floatsisf+0x68>
c0027b15:	b8 00 00 00 00       	mov    eax,0x0
c0027b1a:	74 34                	je     c0027b50 <__floatsisf+0x71>
c0027b1c:	f7 da                	neg    edx
c0027b1e:	0f bd ca             	bsr    ecx,edx
c0027b21:	83 f1 1f             	xor    ecx,0x1f
c0027b24:	d3 e2                	shl    edx,cl
c0027b26:	89 d0                	mov    eax,edx
c0027b28:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b2d:	89 c3                	mov    ebx,eax
c0027b2f:	c1 eb 08             	shr    ebx,0x8
c0027b32:	80 e2 7f             	and    dl,0x7f
c0027b35:	0f 95 c2             	setne  dl
c0027b38:	09 da                	or     edx,ebx
c0027b3a:	83 e2 01             	and    edx,0x1
c0027b3d:	c1 e8 07             	shr    eax,0x7
c0027b40:	21 c2                	and    edx,eax
c0027b42:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b47:	29 c8                	sub    eax,ecx
c0027b49:	c1 e0 17             	shl    eax,0x17
c0027b4c:	09 d8                	or     eax,ebx
c0027b4e:	01 d0                	add    eax,edx
c0027b50:	5b                   	pop    ebx
c0027b51:	5d                   	pop    ebp
c0027b52:	c3                   	ret    

c0027b53 <__floatunsisf>:
c0027b53:	55                   	push   ebp
c0027b54:	89 e5                	mov    ebp,esp
c0027b56:	53                   	push   ebx
c0027b57:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b5a:	31 c0                	xor    eax,eax
c0027b5c:	85 d2                	test   edx,edx
c0027b5e:	74 32                	je     c0027b92 <__floatunsisf+0x3f>
c0027b60:	0f bd ca             	bsr    ecx,edx
c0027b63:	83 f1 1f             	xor    ecx,0x1f
c0027b66:	d3 e2                	shl    edx,cl
c0027b68:	89 d0                	mov    eax,edx
c0027b6a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b6f:	89 c3                	mov    ebx,eax
c0027b71:	c1 eb 08             	shr    ebx,0x8
c0027b74:	80 e2 7f             	and    dl,0x7f
c0027b77:	0f 95 c2             	setne  dl
c0027b7a:	09 da                	or     edx,ebx
c0027b7c:	83 e2 01             	and    edx,0x1
c0027b7f:	c1 e8 07             	shr    eax,0x7
c0027b82:	21 c2                	and    edx,eax
c0027b84:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b89:	29 c8                	sub    eax,ecx
c0027b8b:	c1 e0 17             	shl    eax,0x17
c0027b8e:	09 d8                	or     eax,ebx
c0027b90:	01 d0                	add    eax,edx
c0027b92:	5b                   	pop    ebx
c0027b93:	5d                   	pop    ebp
c0027b94:	c3                   	ret    

c0027b95 <__fixsfsi>:
c0027b95:	55                   	push   ebp
c0027b96:	89 e5                	mov    ebp,esp
c0027b98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b9b:	89 d1                	mov    ecx,edx
c0027b9d:	c1 e1 08             	shl    ecx,0x8
c0027ba0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027ba6:	c1 fa 17             	sar    edx,0x17
c0027ba9:	78 1c                	js     c0027bc7 <__fixsfsi+0x32>
c0027bab:	83 ea 7f             	sub    edx,0x7f
c0027bae:	31 c0                	xor    eax,eax
c0027bb0:	83 fa 1e             	cmp    edx,0x1e
c0027bb3:	77 40                	ja     c0027bf5 <__fixsfsi+0x60>
c0027bb5:	89 c8                	mov    eax,ecx
c0027bb7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bbc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bc1:	29 d1                	sub    ecx,edx
c0027bc3:	d3 e8                	shr    eax,cl
c0027bc5:	eb 2e                	jmp    c0027bf5 <__fixsfsi+0x60>
c0027bc7:	31 c0                	xor    eax,eax
c0027bc9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bcf:	78 24                	js     c0027bf5 <__fixsfsi+0x60>
c0027bd1:	83 fa 1e             	cmp    edx,0x1e
c0027bd4:	7e 09                	jle    c0027bdf <__fixsfsi+0x4a>
c0027bd6:	83 fa 1f             	cmp    edx,0x1f
c0027bd9:	75 18                	jne    c0027bf3 <__fixsfsi+0x5e>
c0027bdb:	85 c9                	test   ecx,ecx
c0027bdd:	75 14                	jne    c0027bf3 <__fixsfsi+0x5e>
c0027bdf:	89 c8                	mov    eax,ecx
c0027be1:	0d 00 00 00 80       	or     eax,0x80000000
c0027be6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027beb:	29 d1                	sub    ecx,edx
c0027bed:	d3 e8                	shr    eax,cl
c0027bef:	f7 d8                	neg    eax
c0027bf1:	eb 02                	jmp    c0027bf5 <__fixsfsi+0x60>
c0027bf3:	31 c0                	xor    eax,eax
c0027bf5:	5d                   	pop    ebp
c0027bf6:	c3                   	ret    

c0027bf7 <__fixunssfsi>:
c0027bf7:	55                   	push   ebp
c0027bf8:	89 e5                	mov    ebp,esp
c0027bfa:	53                   	push   ebx
c0027bfb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bfe:	89 d3                	mov    ebx,edx
c0027c00:	c1 fb 17             	sar    ebx,0x17
c0027c03:	83 eb 7f             	sub    ebx,0x7f
c0027c06:	31 c0                	xor    eax,eax
c0027c08:	83 fb 1f             	cmp    ebx,0x1f
c0027c0b:	77 18                	ja     c0027c25 <__fixunssfsi+0x2e>
c0027c0d:	89 d0                	mov    eax,edx
c0027c0f:	c1 e0 08             	shl    eax,0x8
c0027c12:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c17:	0d 00 00 00 80       	or     eax,0x80000000
c0027c1c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c21:	29 d9                	sub    ecx,ebx
c0027c23:	d3 e8                	shr    eax,cl
c0027c25:	5b                   	pop    ebx
c0027c26:	5d                   	pop    ebp
c0027c27:	c3                   	ret    

c0027c28 <__cmpsf2>:
c0027c28:	55                   	push   ebp
c0027c29:	89 e5                	mov    ebp,esp
c0027c2b:	57                   	push   edi
c0027c2c:	56                   	push   esi
c0027c2d:	53                   	push   ebx
c0027c2e:	83 ec 24             	sub    esp,0x24
c0027c31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c34:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c37:	e8 4f 10 00 00       	call   c0028c8b <__truncdfsf2>
c0027c3c:	5a                   	pop    edx
c0027c3d:	59                   	pop    ecx
c0027c3e:	89 c3                	mov    ebx,eax
c0027c40:	c1 e8 17             	shr    eax,0x17
c0027c43:	0f b6 f0             	movzx  esi,al
c0027c46:	89 d8                	mov    eax,ebx
c0027c48:	c1 e8 1f             	shr    eax,0x1f
c0027c4b:	31 c6                	xor    esi,eax
c0027c4d:	c1 e3 08             	shl    ebx,0x8
c0027c50:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c53:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c56:	e8 30 10 00 00       	call   c0028c8b <__truncdfsf2>
c0027c5b:	83 c4 10             	add    esp,0x10
c0027c5e:	89 c1                	mov    ecx,eax
c0027c60:	c1 e9 17             	shr    ecx,0x17
c0027c63:	0f b6 c9             	movzx  ecx,cl
c0027c66:	89 c7                	mov    edi,eax
c0027c68:	c1 ef 1f             	shr    edi,0x1f
c0027c6b:	89 ca                	mov    edx,ecx
c0027c6d:	31 fa                	xor    edx,edi
c0027c6f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c72:	c1 e0 08             	shl    eax,0x8
c0027c75:	89 c2                	mov    edx,eax
c0027c77:	89 d8                	mov    eax,ebx
c0027c79:	09 d0                	or     eax,edx
c0027c7b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c80:	09 f0                	or     eax,esi
c0027c82:	75 08                	jne    c0027c8c <__cmpsf2+0x64>
c0027c84:	31 c0                	xor    eax,eax
c0027c86:	39 f9                	cmp    ecx,edi
c0027c88:	75 0c                	jne    c0027c96 <__cmpsf2+0x6e>
c0027c8a:	eb 29                	jmp    c0027cb5 <__cmpsf2+0x8d>
c0027c8c:	b8 01 00 00 00       	mov    eax,0x1
c0027c91:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c94:	7f 1f                	jg     c0027cb5 <__cmpsf2+0x8d>
c0027c96:	83 c8 ff             	or     eax,0xffffffff
c0027c99:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c9c:	7c 17                	jl     c0027cb5 <__cmpsf2+0x8d>
c0027c9e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027ca4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027caa:	b8 01 00 00 00       	mov    eax,0x1
c0027caf:	39 d3                	cmp    ebx,edx
c0027cb1:	77 02                	ja     c0027cb5 <__cmpsf2+0x8d>
c0027cb3:	19 c0                	sbb    eax,eax
c0027cb5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cb8:	5b                   	pop    ebx
c0027cb9:	5e                   	pop    esi
c0027cba:	5f                   	pop    edi
c0027cbb:	5d                   	pop    ebp
c0027cbc:	c3                   	ret    

c0027cbd <__eqsf2>:
c0027cbd:	55                   	push   ebp
c0027cbe:	89 e5                	mov    ebp,esp
c0027cc0:	83 ec 24             	sub    esp,0x24
c0027cc3:	6a 01                	push   0x1
c0027cc5:	83 ec 0c             	sub    esp,0xc
c0027cc8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027ccb:	e8 df 10 00 00       	call   c0028daf <__extendsfdf2>
c0027cd0:	83 c4 10             	add    esp,0x10
c0027cd3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cd6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cd9:	52                   	push   edx
c0027cda:	50                   	push   eax
c0027cdb:	50                   	push   eax
c0027cdc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027cdf:	e8 cb 10 00 00       	call   c0028daf <__extendsfdf2>
c0027ce4:	59                   	pop    ecx
c0027ce5:	59                   	pop    ecx
c0027ce6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ce9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cec:	52                   	push   edx
c0027ced:	50                   	push   eax
c0027cee:	e8 35 ff ff ff       	call   c0027c28 <__cmpsf2>
c0027cf3:	83 c4 20             	add    esp,0x20
c0027cf6:	c9                   	leave  
c0027cf7:	c3                   	ret    

c0027cf8 <__nesf2>:
c0027cf8:	eb c3                	jmp    c0027cbd <__eqsf2>

c0027cfa <__gtsf2>:
c0027cfa:	55                   	push   ebp
c0027cfb:	89 e5                	mov    ebp,esp
c0027cfd:	83 ec 24             	sub    esp,0x24
c0027d00:	6a ff                	push   0xffffffff
c0027d02:	83 ec 0c             	sub    esp,0xc
c0027d05:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d08:	e8 a2 10 00 00       	call   c0028daf <__extendsfdf2>
c0027d0d:	83 c4 10             	add    esp,0x10
c0027d10:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d13:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d16:	52                   	push   edx
c0027d17:	50                   	push   eax
c0027d18:	50                   	push   eax
c0027d19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d1c:	e8 8e 10 00 00       	call   c0028daf <__extendsfdf2>
c0027d21:	59                   	pop    ecx
c0027d22:	59                   	pop    ecx
c0027d23:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d26:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d29:	52                   	push   edx
c0027d2a:	50                   	push   eax
c0027d2b:	e8 f8 fe ff ff       	call   c0027c28 <__cmpsf2>
c0027d30:	83 c4 20             	add    esp,0x20
c0027d33:	c9                   	leave  
c0027d34:	c3                   	ret    

c0027d35 <__gesf2>:
c0027d35:	eb c3                	jmp    c0027cfa <__gtsf2>

c0027d37 <__ltsf2>:
c0027d37:	eb 84                	jmp    c0027cbd <__eqsf2>

c0027d39 <__lesf2>:
c0027d39:	eb 82                	jmp    c0027cbd <__eqsf2>

c0027d3b <__adddf3>:
c0027d3b:	55                   	push   ebp
c0027d3c:	89 e5                	mov    ebp,esp
c0027d3e:	57                   	push   edi
c0027d3f:	56                   	push   esi
c0027d40:	53                   	push   ebx
c0027d41:	83 ec 24             	sub    esp,0x24
c0027d44:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d47:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d4a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d4d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d50:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d53:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d56:	89 c8                	mov    eax,ecx
c0027d58:	89 ce                	mov    esi,ecx
c0027d5a:	c1 fe 14             	sar    esi,0x14
c0027d5d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d60:	89 fb                	mov    ebx,edi
c0027d62:	89 fa                	mov    edx,edi
c0027d64:	c1 e2 0b             	shl    edx,0xb
c0027d67:	c1 e0 0b             	shl    eax,0xb
c0027d6a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d6f:	c1 eb 15             	shr    ebx,0x15
c0027d72:	09 d8                	or     eax,ebx
c0027d74:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d77:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d7a:	c1 fe 14             	sar    esi,0x14
c0027d7d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d80:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d83:	89 f3                	mov    ebx,esi
c0027d85:	c1 e3 0b             	shl    ebx,0xb
c0027d88:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d8b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d8e:	c1 e3 0b             	shl    ebx,0xb
c0027d91:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027d97:	c1 ee 15             	shr    esi,0x15
c0027d9a:	09 f3                	or     ebx,esi
c0027d9c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027d9f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027da2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027da5:	0f 88 5f 02 00 00    	js     c002800a <__adddf3+0x2cf>
c0027dab:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dae:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027db1:	85 db                	test   ebx,ebx
c0027db3:	0f 8e c7 00 00 00    	jle    c0027e80 <__adddf3+0x145>
c0027db9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027dc0:	75 1a                	jne    c0027ddc <__adddf3+0xa1>
c0027dc2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dc5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027dc8:	0f 84 b2 05 00 00    	je     c0028380 <__adddf3+0x645>
c0027dce:	4b                   	dec    ebx
c0027dcf:	75 23                	jne    c0027df4 <__adddf3+0xb9>
c0027dd1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027dd4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027dd7:	e9 99 00 00 00       	jmp    c0027e75 <__adddf3+0x13a>
c0027ddc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ddf:	f7 d6                	not    esi
c0027de1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027de7:	0f 84 93 05 00 00    	je     c0028380 <__adddf3+0x645>
c0027ded:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027df4:	83 fb 1f             	cmp    ebx,0x1f
c0027df7:	7e 42                	jle    c0027e3b <__adddf3+0x100>
c0027df9:	83 fb 3f             	cmp    ebx,0x3f
c0027dfc:	0f 8f 7e 05 00 00    	jg     c0028380 <__adddf3+0x645>
c0027e02:	83 e3 1f             	and    ebx,0x1f
c0027e05:	89 d9                	mov    ecx,ebx
c0027e07:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e0a:	d3 ef                	shr    edi,cl
c0027e0c:	31 db                	xor    ebx,ebx
c0027e0e:	85 c9                	test   ecx,ecx
c0027e10:	74 15                	je     c0027e27 <__adddf3+0xec>
c0027e12:	be 20 00 00 00       	mov    esi,0x20
c0027e17:	29 ce                	sub    esi,ecx
c0027e19:	89 f1                	mov    ecx,esi
c0027e1b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e1e:	d3 e6                	shl    esi,cl
c0027e20:	31 db                	xor    ebx,ebx
c0027e22:	85 f6                	test   esi,esi
c0027e24:	0f 95 c3             	setne  bl
c0027e27:	31 c9                	xor    ecx,ecx
c0027e29:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e2d:	0f 95 c1             	setne  cl
c0027e30:	09 cf                	or     edi,ecx
c0027e32:	09 fb                	or     ebx,edi
c0027e34:	01 da                	add    edx,ebx
c0027e36:	83 d0 00             	adc    eax,0x0
c0027e39:	eb 3a                	jmp    c0027e75 <__adddf3+0x13a>
c0027e3b:	bf 20 00 00 00       	mov    edi,0x20
c0027e40:	29 df                	sub    edi,ebx
c0027e42:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e45:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e48:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e4b:	d3 e6                	shl    esi,cl
c0027e4d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e50:	88 d9                	mov    cl,bl
c0027e52:	d3 ef                	shr    edi,cl
c0027e54:	09 fe                	or     esi,edi
c0027e56:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e59:	88 d9                	mov    cl,bl
c0027e5b:	d3 ef                	shr    edi,cl
c0027e5d:	89 fb                	mov    ebx,edi
c0027e5f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e62:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e65:	d3 e7                	shl    edi,cl
c0027e67:	85 ff                	test   edi,edi
c0027e69:	0f 95 c1             	setne  cl
c0027e6c:	0f b6 c9             	movzx  ecx,cl
c0027e6f:	09 ce                	or     esi,ecx
c0027e71:	01 f2                	add    edx,esi
c0027e73:	11 d8                	adc    eax,ebx
c0027e75:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e78:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e7b:	e9 52 01 00 00       	jmp    c0027fd2 <__adddf3+0x297>
c0027e80:	0f 84 d5 00 00 00    	je     c0027f5b <__adddf3+0x220>
c0027e86:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e89:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e8c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e8f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e92:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027e99:	75 20                	jne    c0027ebb <__adddf3+0x180>
c0027e9b:	89 d6                	mov    esi,edx
c0027e9d:	09 c6                	or     esi,eax
c0027e9f:	0f 84 db 04 00 00    	je     c0028380 <__adddf3+0x645>
c0027ea5:	4b                   	dec    ebx
c0027ea6:	75 29                	jne    c0027ed1 <__adddf3+0x196>
c0027ea8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027eab:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027eae:	01 d1                	add    ecx,edx
c0027eb0:	11 c6                	adc    esi,eax
c0027eb2:	89 f0                	mov    eax,esi
c0027eb4:	89 ca                	mov    edx,ecx
c0027eb6:	e9 17 01 00 00       	jmp    c0027fd2 <__adddf3+0x297>
c0027ebb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ebe:	f7 d6                	not    esi
c0027ec0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ec6:	0f 84 b4 04 00 00    	je     c0028380 <__adddf3+0x645>
c0027ecc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ed1:	83 fb 1f             	cmp    ebx,0x1f
c0027ed4:	7e 48                	jle    c0027f1e <__adddf3+0x1e3>
c0027ed6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ed9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027edc:	83 fb 3f             	cmp    ebx,0x3f
c0027edf:	0f 8f 9b 04 00 00    	jg     c0028380 <__adddf3+0x645>
c0027ee5:	83 e3 1f             	and    ebx,0x1f
c0027ee8:	89 d9                	mov    ecx,ebx
c0027eea:	89 c7                	mov    edi,eax
c0027eec:	d3 ef                	shr    edi,cl
c0027eee:	31 db                	xor    ebx,ebx
c0027ef0:	85 c9                	test   ecx,ecx
c0027ef2:	74 12                	je     c0027f06 <__adddf3+0x1cb>
c0027ef4:	be 20 00 00 00       	mov    esi,0x20
c0027ef9:	29 ce                	sub    esi,ecx
c0027efb:	89 f1                	mov    ecx,esi
c0027efd:	d3 e0                	shl    eax,cl
c0027eff:	31 db                	xor    ebx,ebx
c0027f01:	85 c0                	test   eax,eax
c0027f03:	0f 95 c3             	setne  bl
c0027f06:	31 c0                	xor    eax,eax
c0027f08:	85 d2                	test   edx,edx
c0027f0a:	0f 95 c0             	setne  al
c0027f0d:	09 c7                	or     edi,eax
c0027f0f:	09 fb                	or     ebx,edi
c0027f11:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f14:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f17:	01 da                	add    edx,ebx
c0027f19:	83 d6 00             	adc    esi,0x0
c0027f1c:	eb 39                	jmp    c0027f57 <__adddf3+0x21c>
c0027f1e:	be 20 00 00 00       	mov    esi,0x20
c0027f23:	29 de                	sub    esi,ebx
c0027f25:	89 c7                	mov    edi,eax
c0027f27:	89 f1                	mov    ecx,esi
c0027f29:	d3 e7                	shl    edi,cl
c0027f2b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f2e:	89 d7                	mov    edi,edx
c0027f30:	88 d9                	mov    cl,bl
c0027f32:	d3 ef                	shr    edi,cl
c0027f34:	89 f9                	mov    ecx,edi
c0027f36:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f39:	09 cf                	or     edi,ecx
c0027f3b:	88 d9                	mov    cl,bl
c0027f3d:	d3 e8                	shr    eax,cl
c0027f3f:	89 f1                	mov    ecx,esi
c0027f41:	d3 e2                	shl    edx,cl
c0027f43:	85 d2                	test   edx,edx
c0027f45:	0f 95 c2             	setne  dl
c0027f48:	0f b6 d2             	movzx  edx,dl
c0027f4b:	09 d7                	or     edi,edx
c0027f4d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f50:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f53:	01 fa                	add    edx,edi
c0027f55:	11 c6                	adc    esi,eax
c0027f57:	89 f0                	mov    eax,esi
c0027f59:	eb 77                	jmp    c0027fd2 <__adddf3+0x297>
c0027f5b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f5e:	46                   	inc    esi
c0027f5f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f62:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f68:	75 41                	jne    c0027fab <__adddf3+0x270>
c0027f6a:	89 d3                	mov    ebx,edx
c0027f6c:	09 c3                	or     ebx,eax
c0027f6e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f75:	75 27                	jne    c0027f9e <__adddf3+0x263>
c0027f77:	85 db                	test   ebx,ebx
c0027f79:	0f 84 fb 03 00 00    	je     c002837a <__adddf3+0x63f>
c0027f7f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f82:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f85:	0f 84 f5 03 00 00    	je     c0028380 <__adddf3+0x645>
c0027f8b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f8e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f91:	85 c0                	test   eax,eax
c0027f93:	0f 89 91 03 00 00    	jns    c002832a <__adddf3+0x5ef>
c0027f99:	e9 85 03 00 00       	jmp    c0028323 <__adddf3+0x5e8>
c0027f9e:	85 db                	test   ebx,ebx
c0027fa0:	0f 85 da 03 00 00    	jne    c0028380 <__adddf3+0x645>
c0027fa6:	e9 cf 03 00 00       	jmp    c002837a <__adddf3+0x63f>
c0027fab:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fae:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fb1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fb4:	f7 d1                	not    ecx
c0027fb6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fbc:	0f 84 70 03 00 00    	je     c0028332 <__adddf3+0x5f7>
c0027fc2:	d1 ea                	shr    edx,1
c0027fc4:	89 c1                	mov    ecx,eax
c0027fc6:	c1 e1 1f             	shl    ecx,0x1f
c0027fc9:	09 ca                	or     edx,ecx
c0027fcb:	d1 e8                	shr    eax,1
c0027fcd:	e9 6f 03 00 00       	jmp    c0028341 <__adddf3+0x606>
c0027fd2:	85 c0                	test   eax,eax
c0027fd4:	0f 89 67 03 00 00    	jns    c0028341 <__adddf3+0x606>
c0027fda:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027fdd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fe0:	f7 d1                	not    ecx
c0027fe2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fe8:	0f 84 44 03 00 00    	je     c0028332 <__adddf3+0x5f7>
c0027fee:	89 d1                	mov    ecx,edx
c0027ff0:	d1 e9                	shr    ecx,1
c0027ff2:	83 e2 01             	and    edx,0x1
c0027ff5:	09 ca                	or     edx,ecx
c0027ff7:	89 c1                	mov    ecx,eax
c0027ff9:	c1 e1 1f             	shl    ecx,0x1f
c0027ffc:	09 ca                	or     edx,ecx
c0027ffe:	d1 e8                	shr    eax,1
c0028000:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028005:	e9 37 03 00 00       	jmp    c0028341 <__adddf3+0x606>
c002800a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002800d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028013:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028016:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028019:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002801f:	29 de                	sub    esi,ebx
c0028021:	85 f6                	test   esi,esi
c0028023:	0f 8e bd 00 00 00    	jle    c00280e6 <__adddf3+0x3ab>
c0028029:	85 db                	test   ebx,ebx
c002802b:	75 17                	jne    c0028044 <__adddf3+0x309>
c002802d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028030:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028033:	0f 84 47 03 00 00    	je     c0028380 <__adddf3+0x645>
c0028039:	4e                   	dec    esi
c002803a:	75 20                	jne    c002805c <__adddf3+0x321>
c002803c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002803f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028042:	eb 5b                	jmp    c002809f <__adddf3+0x364>
c0028044:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028047:	f7 d3                	not    ebx
c0028049:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002804f:	0f 84 2b 03 00 00    	je     c0028380 <__adddf3+0x645>
c0028055:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002805c:	83 fe 1f             	cmp    esi,0x1f
c002805f:	7e 49                	jle    c00280aa <__adddf3+0x36f>
c0028061:	83 fe 3f             	cmp    esi,0x3f
c0028064:	0f 8f 16 03 00 00    	jg     c0028380 <__adddf3+0x645>
c002806a:	83 e6 1f             	and    esi,0x1f
c002806d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028070:	89 f1                	mov    ecx,esi
c0028072:	d3 ef                	shr    edi,cl
c0028074:	31 db                	xor    ebx,ebx
c0028076:	85 f6                	test   esi,esi
c0028078:	74 13                	je     c002808d <__adddf3+0x352>
c002807a:	b9 20 00 00 00       	mov    ecx,0x20
c002807f:	29 f1                	sub    ecx,esi
c0028081:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028084:	d3 e6                	shl    esi,cl
c0028086:	31 db                	xor    ebx,ebx
c0028088:	85 f6                	test   esi,esi
c002808a:	0f 95 c3             	setne  bl
c002808d:	31 c9                	xor    ecx,ecx
c002808f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028093:	0f 95 c1             	setne  cl
c0028096:	09 cf                	or     edi,ecx
c0028098:	09 fb                	or     ebx,edi
c002809a:	29 da                	sub    edx,ebx
c002809c:	83 d8 00             	sbb    eax,0x0
c002809f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280a5:	e9 aa 01 00 00       	jmp    c0028254 <__adddf3+0x519>
c00280aa:	bf 20 00 00 00       	mov    edi,0x20
c00280af:	29 f7                	sub    edi,esi
c00280b1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280b4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280b7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280ba:	d3 e3                	shl    ebx,cl
c00280bc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280bf:	89 f1                	mov    ecx,esi
c00280c1:	d3 ef                	shr    edi,cl
c00280c3:	09 fb                	or     ebx,edi
c00280c5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280c8:	89 f1                	mov    ecx,esi
c00280ca:	d3 ef                	shr    edi,cl
c00280cc:	89 fe                	mov    esi,edi
c00280ce:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280d1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280d4:	d3 e7                	shl    edi,cl
c00280d6:	85 ff                	test   edi,edi
c00280d8:	0f 95 c1             	setne  cl
c00280db:	0f b6 c9             	movzx  ecx,cl
c00280de:	09 cb                	or     ebx,ecx
c00280e0:	29 da                	sub    edx,ebx
c00280e2:	19 f0                	sbb    eax,esi
c00280e4:	eb b9                	jmp    c002809f <__adddf3+0x364>
c00280e6:	0f 84 cd 00 00 00    	je     c00281b9 <__adddf3+0x47e>
c00280ec:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00280ef:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280f2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280f5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280f9:	75 1b                	jne    c0028116 <__adddf3+0x3db>
c00280fb:	89 d6                	mov    esi,edx
c00280fd:	09 c6                	or     esi,eax
c00280ff:	0f 84 7b 02 00 00    	je     c0028380 <__adddf3+0x645>
c0028105:	4b                   	dec    ebx
c0028106:	75 24                	jne    c002812c <__adddf3+0x3f1>
c0028108:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002810b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002810e:	29 d1                	sub    ecx,edx
c0028110:	19 c6                	sbb    esi,eax
c0028112:	89 ca                	mov    edx,ecx
c0028114:	eb 61                	jmp    c0028177 <__adddf3+0x43c>
c0028116:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028119:	f7 d6                	not    esi
c002811b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028121:	0f 84 59 02 00 00    	je     c0028380 <__adddf3+0x645>
c0028127:	0d 00 00 00 80       	or     eax,0x80000000
c002812c:	83 fb 1f             	cmp    ebx,0x1f
c002812f:	7e 4d                	jle    c002817e <__adddf3+0x443>
c0028131:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028134:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028137:	83 fb 3f             	cmp    ebx,0x3f
c002813a:	0f 8f 40 02 00 00    	jg     c0028380 <__adddf3+0x645>
c0028140:	83 e3 1f             	and    ebx,0x1f
c0028143:	89 d9                	mov    ecx,ebx
c0028145:	89 c7                	mov    edi,eax
c0028147:	d3 ef                	shr    edi,cl
c0028149:	31 db                	xor    ebx,ebx
c002814b:	85 c9                	test   ecx,ecx
c002814d:	74 12                	je     c0028161 <__adddf3+0x426>
c002814f:	be 20 00 00 00       	mov    esi,0x20
c0028154:	29 ce                	sub    esi,ecx
c0028156:	89 f1                	mov    ecx,esi
c0028158:	d3 e0                	shl    eax,cl
c002815a:	31 db                	xor    ebx,ebx
c002815c:	85 c0                	test   eax,eax
c002815e:	0f 95 c3             	setne  bl
c0028161:	31 c0                	xor    eax,eax
c0028163:	85 d2                	test   edx,edx
c0028165:	0f 95 c0             	setne  al
c0028168:	09 c7                	or     edi,eax
c002816a:	09 fb                	or     ebx,edi
c002816c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002816f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028172:	29 da                	sub    edx,ebx
c0028174:	83 de 00             	sbb    esi,0x0
c0028177:	89 f0                	mov    eax,esi
c0028179:	e9 d6 00 00 00       	jmp    c0028254 <__adddf3+0x519>
c002817e:	be 20 00 00 00       	mov    esi,0x20
c0028183:	29 de                	sub    esi,ebx
c0028185:	89 c7                	mov    edi,eax
c0028187:	89 f1                	mov    ecx,esi
c0028189:	d3 e7                	shl    edi,cl
c002818b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002818e:	89 d7                	mov    edi,edx
c0028190:	88 d9                	mov    cl,bl
c0028192:	d3 ef                	shr    edi,cl
c0028194:	89 f9                	mov    ecx,edi
c0028196:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028199:	09 cf                	or     edi,ecx
c002819b:	88 d9                	mov    cl,bl
c002819d:	d3 e8                	shr    eax,cl
c002819f:	89 f1                	mov    ecx,esi
c00281a1:	d3 e2                	shl    edx,cl
c00281a3:	85 d2                	test   edx,edx
c00281a5:	0f 95 c2             	setne  dl
c00281a8:	0f b6 d2             	movzx  edx,dl
c00281ab:	09 d7                	or     edi,edx
c00281ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281b3:	29 fa                	sub    edx,edi
c00281b5:	19 c6                	sbb    esi,eax
c00281b7:	eb be                	jmp    c0028177 <__adddf3+0x43c>
c00281b9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281bc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281bf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281c5:	75 6a                	jne    c0028231 <__adddf3+0x4f6>
c00281c7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281cb:	75 58                	jne    c0028225 <__adddf3+0x4ea>
c00281cd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281d0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281d3:	89 d6                	mov    esi,edx
c00281d5:	09 c6                	or     esi,eax
c00281d7:	75 17                	jne    c00281f0 <__adddf3+0x4b5>
c00281d9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281dc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281df:	85 db                	test   ebx,ebx
c00281e1:	0f 85 99 01 00 00    	jne    c0028380 <__adddf3+0x645>
c00281e7:	31 ff                	xor    edi,edi
c00281e9:	31 c9                	xor    ecx,ecx
c00281eb:	e9 90 01 00 00       	jmp    c0028380 <__adddf3+0x645>
c00281f0:	85 db                	test   ebx,ebx
c00281f2:	0f 84 88 01 00 00    	je     c0028380 <__adddf3+0x645>
c00281f8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00281fb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00281fe:	85 c0                	test   eax,eax
c0028200:	79 10                	jns    c0028212 <__adddf3+0x4d7>
c0028202:	31 c9                	xor    ecx,ecx
c0028204:	f7 da                	neg    edx
c0028206:	0f 95 c1             	setne  cl
c0028209:	01 c8                	add    eax,ecx
c002820b:	f7 d8                	neg    eax
c002820d:	e9 2f 01 00 00       	jmp    c0028341 <__adddf3+0x606>
c0028212:	31 ff                	xor    edi,edi
c0028214:	31 c9                	xor    ecx,ecx
c0028216:	89 c3                	mov    ebx,eax
c0028218:	09 d3                	or     ebx,edx
c002821a:	0f 84 60 01 00 00    	je     c0028380 <__adddf3+0x645>
c0028220:	e9 05 01 00 00       	jmp    c002832a <__adddf3+0x5ef>
c0028225:	31 ff                	xor    edi,edi
c0028227:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002822c:	e9 4f 01 00 00       	jmp    c0028380 <__adddf3+0x645>
c0028231:	89 c1                	mov    ecx,eax
c0028233:	89 d0                	mov    eax,edx
c0028235:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028238:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002823b:	89 ca                	mov    edx,ecx
c002823d:	85 c9                	test   ecx,ecx
c002823f:	79 2c                	jns    c002826d <__adddf3+0x532>
c0028241:	31 c9                	xor    ecx,ecx
c0028243:	f7 d8                	neg    eax
c0028245:	0f 95 c1             	setne  cl
c0028248:	01 ca                	add    edx,ecx
c002824a:	f7 da                	neg    edx
c002824c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002824f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028252:	eb 19                	jmp    c002826d <__adddf3+0x532>
c0028254:	85 c0                	test   eax,eax
c0028256:	0f 89 e5 00 00 00    	jns    c0028341 <__adddf3+0x606>
c002825c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028261:	89 c1                	mov    ecx,eax
c0028263:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028266:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028269:	89 d0                	mov    eax,edx
c002826b:	89 ca                	mov    edx,ecx
c002826d:	85 d2                	test   edx,edx
c002826f:	74 59                	je     c00282ca <__adddf3+0x58f>
c0028271:	0f bd da             	bsr    ebx,edx
c0028274:	83 f3 1f             	xor    ebx,0x1f
c0028277:	88 d9                	mov    cl,bl
c0028279:	d3 e2                	shl    edx,cl
c002827b:	bf 20 00 00 00       	mov    edi,0x20
c0028280:	89 f9                	mov    ecx,edi
c0028282:	29 d9                	sub    ecx,ebx
c0028284:	89 c6                	mov    esi,eax
c0028286:	d3 ee                	shr    esi,cl
c0028288:	09 d6                	or     esi,edx
c002828a:	88 d9                	mov    cl,bl
c002828c:	d3 e0                	shl    eax,cl
c002828e:	89 c2                	mov    edx,eax
c0028290:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028293:	25 ff 07 00 00       	and    eax,0x7ff
c0028298:	39 d8                	cmp    eax,ebx
c002829a:	7f 22                	jg     c00282be <__adddf3+0x583>
c002829c:	29 c3                	sub    ebx,eax
c002829e:	43                   	inc    ebx
c002829f:	88 d9                	mov    cl,bl
c00282a1:	d3 ea                	shr    edx,cl
c00282a3:	29 df                	sub    edi,ebx
c00282a5:	89 f9                	mov    ecx,edi
c00282a7:	89 f0                	mov    eax,esi
c00282a9:	d3 e0                	shl    eax,cl
c00282ab:	09 c2                	or     edx,eax
c00282ad:	89 f0                	mov    eax,esi
c00282af:	88 d9                	mov    cl,bl
c00282b1:	d3 e8                	shr    eax,cl
c00282b3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282b6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282bc:	eb 6f                	jmp    c002832d <__adddf3+0x5f2>
c00282be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282c1:	29 d8                	sub    eax,ebx
c00282c3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282c6:	89 f0                	mov    eax,esi
c00282c8:	eb 59                	jmp    c0028323 <__adddf3+0x5e8>
c00282ca:	85 c0                	test   eax,eax
c00282cc:	74 6a                	je     c0028338 <__adddf3+0x5fd>
c00282ce:	0f bd c8             	bsr    ecx,eax
c00282d1:	83 f1 1f             	xor    ecx,0x1f
c00282d4:	d3 e0                	shl    eax,cl
c00282d6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282d9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282df:	83 c1 20             	add    ecx,0x20
c00282e2:	39 cb                	cmp    ebx,ecx
c00282e4:	7f 35                	jg     c002831b <__adddf3+0x5e0>
c00282e6:	29 d9                	sub    ecx,ebx
c00282e8:	8d 71 01             	lea    esi,[ecx+0x1]
c00282eb:	83 fe 1f             	cmp    esi,0x1f
c00282ee:	7e 09                	jle    c00282f9 <__adddf3+0x5be>
c00282f0:	83 e9 1f             	sub    ecx,0x1f
c00282f3:	d3 e8                	shr    eax,cl
c00282f5:	89 c3                	mov    ebx,eax
c00282f7:	eb 11                	jmp    c002830a <__adddf3+0x5cf>
c00282f9:	b9 20 00 00 00       	mov    ecx,0x20
c00282fe:	29 f1                	sub    ecx,esi
c0028300:	89 c3                	mov    ebx,eax
c0028302:	d3 e3                	shl    ebx,cl
c0028304:	89 f1                	mov    ecx,esi
c0028306:	d3 e8                	shr    eax,cl
c0028308:	89 c2                	mov    edx,eax
c002830a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002830d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028312:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028315:	89 d0                	mov    eax,edx
c0028317:	89 da                	mov    edx,ebx
c0028319:	eb 26                	jmp    c0028341 <__adddf3+0x606>
c002831b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002831e:	29 cf                	sub    edi,ecx
c0028320:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028323:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028328:	eb 17                	jmp    c0028341 <__adddf3+0x606>
c002832a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002832d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028330:	eb 0f                	jmp    c0028341 <__adddf3+0x606>
c0028332:	31 d2                	xor    edx,edx
c0028334:	31 c0                	xor    eax,eax
c0028336:	eb 09                	jmp    c0028341 <__adddf3+0x606>
c0028338:	89 c2                	mov    edx,eax
c002833a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028341:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028344:	c1 e1 14             	shl    ecx,0x14
c0028347:	89 c3                	mov    ebx,eax
c0028349:	c1 eb 0b             	shr    ebx,0xb
c002834c:	09 d9                	or     ecx,ebx
c002834e:	89 d3                	mov    ebx,edx
c0028350:	c1 eb 0b             	shr    ebx,0xb
c0028353:	c1 e0 15             	shl    eax,0x15
c0028356:	09 d8                	or     eax,ebx
c0028358:	89 c7                	mov    edi,eax
c002835a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028360:	0f 95 c0             	setne  al
c0028363:	89 c6                	mov    esi,eax
c0028365:	09 f3                	or     ebx,esi
c0028367:	83 e3 01             	and    ebx,0x1
c002836a:	c1 ea 0a             	shr    edx,0xa
c002836d:	21 da                	and    edx,ebx
c002836f:	89 f8                	mov    eax,edi
c0028371:	01 d0                	add    eax,edx
c0028373:	83 d1 00             	adc    ecx,0x0
c0028376:	89 c7                	mov    edi,eax
c0028378:	eb 06                	jmp    c0028380 <__adddf3+0x645>
c002837a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002837d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028380:	89 f8                	mov    eax,edi
c0028382:	89 ca                	mov    edx,ecx
c0028384:	83 c4 24             	add    esp,0x24
c0028387:	5b                   	pop    ebx
c0028388:	5e                   	pop    esi
c0028389:	5f                   	pop    edi
c002838a:	5d                   	pop    ebp
c002838b:	c3                   	ret    

c002838c <__subdf3>:
c002838c:	55                   	push   ebp
c002838d:	89 e5                	mov    ebp,esp
c002838f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028392:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028395:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002839b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002839e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283a1:	5d                   	pop    ebp
c00283a2:	e9 94 f9 ff ff       	jmp    c0027d3b <__adddf3>

c00283a7 <__negdf2>:
c00283a7:	55                   	push   ebp
c00283a8:	89 e5                	mov    ebp,esp
c00283aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283ad:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283b0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283b6:	5d                   	pop    ebp
c00283b7:	c3                   	ret    

c00283b8 <__muldf3>:
c00283b8:	55                   	push   ebp
c00283b9:	89 e5                	mov    ebp,esp
c00283bb:	57                   	push   edi
c00283bc:	56                   	push   esi
c00283bd:	53                   	push   ebx
c00283be:	83 ec 24             	sub    esp,0x24
c00283c1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283cd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283d0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283d3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283d6:	89 c8                	mov    eax,ecx
c00283d8:	c1 f8 14             	sar    eax,0x14
c00283db:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283de:	89 f8                	mov    eax,edi
c00283e0:	89 fb                	mov    ebx,edi
c00283e2:	c1 e3 0b             	shl    ebx,0xb
c00283e5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00283e8:	c1 e1 0b             	shl    ecx,0xb
c00283eb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283f1:	c1 e8 15             	shr    eax,0x15
c00283f4:	09 c1                	or     ecx,eax
c00283f6:	89 d6                	mov    esi,edx
c00283f8:	89 d0                	mov    eax,edx
c00283fa:	c1 f8 14             	sar    eax,0x14
c00283fd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028400:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028403:	89 c3                	mov    ebx,eax
c0028405:	c1 e3 0b             	shl    ebx,0xb
c0028408:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002840b:	c1 e6 0b             	shl    esi,0xb
c002840e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028414:	c1 e8 15             	shr    eax,0x15
c0028417:	09 c6                	or     esi,eax
c0028419:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002841c:	25 ff 07 00 00       	and    eax,0x7ff
c0028421:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028424:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028427:	25 ff 07 00 00       	and    eax,0x7ff
c002842c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002842f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028432:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028435:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002843c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002843f:	40                   	inc    eax
c0028440:	a9 fe 07 00 00       	test   eax,0x7fe
c0028445:	0f 85 8d 00 00 00    	jne    c00284d8 <__muldf3+0x120>
c002844b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002844e:	09 c8                	or     eax,ecx
c0028450:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028454:	74 44                	je     c002849a <__muldf3+0xe2>
c0028456:	85 c0                	test   eax,eax
c0028458:	0f 85 31 02 00 00    	jne    c002868f <__muldf3+0x2d7>
c002845e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028461:	40                   	inc    eax
c0028462:	a9 fe 07 00 00       	test   eax,0x7fe
c0028467:	75 13                	jne    c002847c <__muldf3+0xc4>
c0028469:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002846c:	09 f1                	or     ecx,esi
c002846e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028472:	74 22                	je     c0028496 <__muldf3+0xde>
c0028474:	85 c9                	test   ecx,ecx
c0028476:	0f 85 0d 02 00 00    	jne    c0028689 <__muldf3+0x2d1>
c002847c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028480:	0f 89 09 02 00 00    	jns    c002868f <__muldf3+0x2d7>
c0028486:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028489:	05 00 00 00 80       	add    eax,0x80000000
c002848e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028491:	e9 f9 01 00 00       	jmp    c002868f <__muldf3+0x2d7>
c0028496:	85 c9                	test   ecx,ecx
c0028498:	eb 2e                	jmp    c00284c8 <__muldf3+0x110>
c002849a:	85 c0                	test   eax,eax
c002849c:	74 20                	je     c00284be <__muldf3+0x106>
c002849e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284a1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284a4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284a7:	c1 ef 1f             	shr    edi,0x1f
c00284aa:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284ad:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284b0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284b3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284b6:	09 f9                	or     ecx,edi
c00284b8:	78 1e                	js     c00284d8 <__muldf3+0x120>
c00284ba:	89 c3                	mov    ebx,eax
c00284bc:	eb e0                	jmp    c002849e <__muldf3+0xe6>
c00284be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284c1:	f7 d0                	not    eax
c00284c3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284c8:	75 b2                	jne    c002847c <__muldf3+0xc4>
c00284ca:	31 ff                	xor    edi,edi
c00284cc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284d3:	e9 b7 01 00 00       	jmp    c002868f <__muldf3+0x2d7>
c00284d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284db:	40                   	inc    eax
c00284dc:	a9 fe 07 00 00       	test   eax,0x7fe
c00284e1:	75 57                	jne    c002853a <__muldf3+0x182>
c00284e3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00284e6:	09 f0                	or     eax,esi
c00284e8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284ec:	74 23                	je     c0028511 <__muldf3+0x159>
c00284ee:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00284f2:	0f 89 91 01 00 00    	jns    c0028689 <__muldf3+0x2d1>
c00284f8:	85 c0                	test   eax,eax
c00284fa:	0f 85 89 01 00 00    	jne    c0028689 <__muldf3+0x2d1>
c0028500:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028503:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028509:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002850c:	e9 7e 01 00 00       	jmp    c002868f <__muldf3+0x2d7>
c0028511:	85 c0                	test   eax,eax
c0028513:	75 0c                	jne    c0028521 <__muldf3+0x169>
c0028515:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028519:	0f 89 6a 01 00 00    	jns    c0028689 <__muldf3+0x2d1>
c002851f:	eb df                	jmp    c0028500 <__muldf3+0x148>
c0028521:	01 f6                	add    esi,esi
c0028523:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028526:	c1 ea 1f             	shr    edx,0x1f
c0028529:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002852c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002852f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028532:	09 d6                	or     esi,edx
c0028534:	78 04                	js     c002853a <__muldf3+0x182>
c0028536:	89 c3                	mov    ebx,eax
c0028538:	eb e7                	jmp    c0028521 <__muldf3+0x169>
c002853a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028540:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028546:	89 c8                	mov    eax,ecx
c0028548:	f7 e6                	mul    esi
c002854a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002854d:	89 c7                	mov    edi,eax
c002854f:	89 c8                	mov    eax,ecx
c0028551:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028554:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028557:	89 c1                	mov    ecx,eax
c0028559:	89 f0                	mov    eax,esi
c002855b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002855e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028561:	89 c6                	mov    esi,eax
c0028563:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028566:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028569:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002856c:	31 c0                	xor    eax,eax
c002856e:	01 f1                	add    ecx,esi
c0028570:	0f 92 c0             	setb   al
c0028573:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028576:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028579:	83 d6 00             	adc    esi,0x0
c002857c:	01 c7                	add    edi,eax
c002857e:	83 d6 00             	adc    esi,0x0
c0028581:	01 ca                	add    edx,ecx
c0028583:	0f 92 c1             	setb   cl
c0028586:	0f b6 c9             	movzx  ecx,cl
c0028589:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002858c:	83 d6 00             	adc    esi,0x0
c002858f:	01 cf                	add    edi,ecx
c0028591:	83 d6 00             	adc    esi,0x0
c0028594:	31 c9                	xor    ecx,ecx
c0028596:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028599:	0f 95 c1             	setne  cl
c002859c:	09 cf                	or     edi,ecx
c002859e:	85 f6                	test   esi,esi
c00285a0:	78 0c                	js     c00285ae <__muldf3+0x1f6>
c00285a2:	01 f6                	add    esi,esi
c00285a4:	89 f8                	mov    eax,edi
c00285a6:	c1 e8 1f             	shr    eax,0x1f
c00285a9:	09 c6                	or     esi,eax
c00285ab:	01 ff                	add    edi,edi
c00285ad:	4b                   	dec    ebx
c00285ae:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285b4:	0f 8f 85 00 00 00    	jg     c002863f <__muldf3+0x287>
c00285ba:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285c0:	85 db                	test   ebx,ebx
c00285c2:	0f 8f 84 00 00 00    	jg     c002864c <__muldf3+0x294>
c00285c8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285cb:	7c 79                	jl     c0028646 <__muldf3+0x28e>
c00285cd:	ba 01 00 00 00       	mov    edx,0x1
c00285d2:	29 da                	sub    edx,ebx
c00285d4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285da:	83 fa 1f             	cmp    edx,0x1f
c00285dd:	7e 30                	jle    c002860f <__muldf3+0x257>
c00285df:	83 fa 20             	cmp    edx,0x20
c00285e2:	75 0b                	jne    c00285ef <__muldf3+0x237>
c00285e4:	31 c0                	xor    eax,eax
c00285e6:	85 ff                	test   edi,edi
c00285e8:	0f 95 c0             	setne  al
c00285eb:	89 c7                	mov    edi,eax
c00285ed:	eb 1a                	jmp    c0028609 <__muldf3+0x251>
c00285ef:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00285f2:	89 f0                	mov    eax,esi
c00285f4:	d3 e0                	shl    eax,cl
c00285f6:	09 f8                	or     eax,edi
c00285f8:	0f 95 c0             	setne  al
c00285fb:	0f b6 c0             	movzx  eax,al
c00285fe:	89 c7                	mov    edi,eax
c0028600:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028605:	29 d9                	sub    ecx,ebx
c0028607:	d3 ee                	shr    esi,cl
c0028609:	09 f7                	or     edi,esi
c002860b:	31 db                	xor    ebx,ebx
c002860d:	eb 3b                	jmp    c002864a <__muldf3+0x292>
c002860f:	83 c3 1f             	add    ebx,0x1f
c0028612:	89 f0                	mov    eax,esi
c0028614:	88 d9                	mov    cl,bl
c0028616:	d3 e0                	shl    eax,cl
c0028618:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002861b:	89 f8                	mov    eax,edi
c002861d:	88 d1                	mov    cl,dl
c002861f:	d3 e8                	shr    eax,cl
c0028621:	89 c1                	mov    ecx,eax
c0028623:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028626:	09 c8                	or     eax,ecx
c0028628:	88 d9                	mov    cl,bl
c002862a:	d3 e7                	shl    edi,cl
c002862c:	31 db                	xor    ebx,ebx
c002862e:	85 ff                	test   edi,edi
c0028630:	0f 95 c3             	setne  bl
c0028633:	89 df                	mov    edi,ebx
c0028635:	09 c7                	or     edi,eax
c0028637:	88 d1                	mov    cl,dl
c0028639:	d3 ee                	shr    esi,cl
c002863b:	31 db                	xor    ebx,ebx
c002863d:	eb 0d                	jmp    c002864c <__muldf3+0x294>
c002863f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028644:	eb 02                	jmp    c0028648 <__muldf3+0x290>
c0028646:	31 db                	xor    ebx,ebx
c0028648:	31 ff                	xor    edi,edi
c002864a:	31 f6                	xor    esi,esi
c002864c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002864f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028652:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028657:	09 c3                	or     ebx,eax
c0028659:	c1 e3 14             	shl    ebx,0x14
c002865c:	89 f0                	mov    eax,esi
c002865e:	c1 e8 0b             	shr    eax,0xb
c0028661:	09 c3                	or     ebx,eax
c0028663:	89 f8                	mov    eax,edi
c0028665:	c1 e8 0b             	shr    eax,0xb
c0028668:	c1 e6 15             	shl    esi,0x15
c002866b:	09 c6                	or     esi,eax
c002866d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028673:	0f 95 c1             	setne  cl
c0028676:	09 c8                	or     eax,ecx
c0028678:	83 e0 01             	and    eax,0x1
c002867b:	c1 ef 0a             	shr    edi,0xa
c002867e:	21 c7                	and    edi,eax
c0028680:	01 f7                	add    edi,esi
c0028682:	83 d3 00             	adc    ebx,0x0
c0028685:	89 da                	mov    edx,ebx
c0028687:	eb 03                	jmp    c002868c <__muldf3+0x2d4>
c0028689:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002868c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002868f:	89 f8                	mov    eax,edi
c0028691:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028694:	83 c4 24             	add    esp,0x24
c0028697:	5b                   	pop    ebx
c0028698:	5e                   	pop    esi
c0028699:	5f                   	pop    edi
c002869a:	5d                   	pop    ebp
c002869b:	c3                   	ret    

c002869c <__divdf3>:
c002869c:	55                   	push   ebp
c002869d:	89 e5                	mov    ebp,esp
c002869f:	57                   	push   edi
c00286a0:	56                   	push   esi
c00286a1:	53                   	push   ebx
c00286a2:	83 ec 2c             	sub    esp,0x2c
c00286a5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286a8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286ae:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286b1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286b4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286b7:	89 ce                	mov    esi,ecx
c00286b9:	89 c8                	mov    eax,ecx
c00286bb:	c1 f8 14             	sar    eax,0x14
c00286be:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286c1:	89 f8                	mov    eax,edi
c00286c3:	89 fb                	mov    ebx,edi
c00286c5:	c1 e3 0b             	shl    ebx,0xb
c00286c8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286cb:	c1 e6 0b             	shl    esi,0xb
c00286ce:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286d4:	c1 e8 15             	shr    eax,0x15
c00286d7:	09 c6                	or     esi,eax
c00286d9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286dc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286df:	89 c2                	mov    edx,eax
c00286e1:	c1 fa 14             	sar    edx,0x14
c00286e4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00286e7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286ea:	89 de                	mov    esi,ebx
c00286ec:	c1 e6 0b             	shl    esi,0xb
c00286ef:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00286f2:	c1 e0 0b             	shl    eax,0xb
c00286f5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00286fa:	c1 eb 15             	shr    ebx,0x15
c00286fd:	09 d8                	or     eax,ebx
c00286ff:	89 c2                	mov    edx,eax
c0028701:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028704:	25 ff 07 00 00       	and    eax,0x7ff
c0028709:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002870c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002870f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028715:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028718:	29 d8                	sub    eax,ebx
c002871a:	05 ff 03 00 00       	add    eax,0x3ff
c002871f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028722:	46                   	inc    esi
c0028723:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028729:	0f 85 a5 00 00 00    	jne    c00287d4 <__divdf3+0x138>
c002872f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028732:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028735:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028739:	74 2a                	je     c0028765 <__divdf3+0xc9>
c002873b:	85 f6                	test   esi,esi
c002873d:	0f 85 cc 02 00 00    	jne    c0028a0f <__divdf3+0x373>
c0028743:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028746:	40                   	inc    eax
c0028747:	a9 fe 07 00 00       	test   eax,0x7fe
c002874c:	75 26                	jne    c0028774 <__divdf3+0xd8>
c002874e:	85 db                	test   ebx,ebx
c0028750:	74 22                	je     c0028774 <__divdf3+0xd8>
c0028752:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028755:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028758:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002875b:	09 d0                	or     eax,edx
c002875d:	0f 85 ac 02 00 00    	jne    c0028a0f <__divdf3+0x373>
c0028763:	eb 63                	jmp    c00287c8 <__divdf3+0x12c>
c0028765:	85 f6                	test   esi,esi
c0028767:	75 22                	jne    c002878b <__divdf3+0xef>
c0028769:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002876c:	40                   	inc    eax
c002876d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028772:	74 36                	je     c00287aa <__divdf3+0x10e>
c0028774:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028778:	0f 89 91 02 00 00    	jns    c0028a0f <__divdf3+0x373>
c002877e:	89 f8                	mov    eax,edi
c0028780:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028786:	e9 80 02 00 00       	jmp    c0028a0b <__divdf3+0x36f>
c002878b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002878e:	01 f6                	add    esi,esi
c0028790:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028793:	c1 ef 1f             	shr    edi,0x1f
c0028796:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028799:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002879c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002879f:	09 f7                	or     edi,esi
c00287a1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287a4:	78 2e                	js     c00287d4 <__divdf3+0x138>
c00287a6:	89 c8                	mov    eax,ecx
c00287a8:	eb e1                	jmp    c002878b <__divdf3+0xef>
c00287aa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287ad:	09 d0                	or     eax,edx
c00287af:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287b3:	74 0f                	je     c00287c4 <__divdf3+0x128>
c00287b5:	85 c0                	test   eax,eax
c00287b7:	74 bb                	je     c0028774 <__divdf3+0xd8>
c00287b9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287bc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287bf:	e9 4b 02 00 00       	jmp    c0028a0f <__divdf3+0x373>
c00287c4:	85 c0                	test   eax,eax
c00287c6:	75 ac                	jne    c0028774 <__divdf3+0xd8>
c00287c8:	31 ff                	xor    edi,edi
c00287ca:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287cf:	e9 3b 02 00 00       	jmp    c0028a0f <__divdf3+0x373>
c00287d4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287d7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287da:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00287e0:	75 6b                	jne    c002884d <__divdf3+0x1b1>
c00287e2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287e5:	09 d6                	or     esi,edx
c00287e7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287eb:	74 28                	je     c0028815 <__divdf3+0x179>
c00287ed:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287f0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287f3:	85 f6                	test   esi,esi
c00287f5:	0f 85 14 02 00 00    	jne    c0028a0f <__divdf3+0x373>
c00287fb:	31 ff                	xor    edi,edi
c00287fd:	31 c9                	xor    ecx,ecx
c00287ff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028802:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028805:	0f 89 04 02 00 00    	jns    c0028a0f <__divdf3+0x373>
c002880b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028810:	e9 fa 01 00 00       	jmp    c0028a0f <__divdf3+0x373>
c0028815:	85 f6                	test   esi,esi
c0028817:	75 1b                	jne    c0028834 <__divdf3+0x198>
c0028819:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002881c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002881f:	25 00 00 00 80       	and    eax,0x80000000
c0028824:	31 c9                	xor    ecx,ecx
c0028826:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002882b:	89 cf                	mov    edi,ecx
c002882d:	89 c1                	mov    ecx,eax
c002882f:	e9 db 01 00 00       	jmp    c0028a0f <__divdf3+0x373>
c0028834:	01 d2                	add    edx,edx
c0028836:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028839:	c1 eb 1f             	shr    ebx,0x1f
c002883c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002883f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028842:	8d 48 01             	lea    ecx,[eax+0x1]
c0028845:	09 da                	or     edx,ebx
c0028847:	78 04                	js     c002884d <__divdf3+0x1b1>
c0028849:	89 c8                	mov    eax,ecx
c002884b:	eb e7                	jmp    c0028834 <__divdf3+0x198>
c002884d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028850:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028856:	81 ca 00 00 00 80    	or     edx,0x80000000
c002885c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002885f:	39 d6                	cmp    esi,edx
c0028861:	77 0d                	ja     c0028870 <__divdf3+0x1d4>
c0028863:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028866:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028869:	72 1b                	jb     c0028886 <__divdf3+0x1ea>
c002886b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002886e:	75 16                	jne    c0028886 <__divdf3+0x1ea>
c0028870:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028873:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028876:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028879:	83 de 00             	sbb    esi,0x0
c002887c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002887f:	ba 01 00 00 00       	mov    edx,0x1
c0028884:	eb 02                	jmp    c0028888 <__divdf3+0x1ec>
c0028886:	31 d2                	xor    edx,edx
c0028888:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002888f:	31 ff                	xor    edi,edi
c0028891:	01 ff                	add    edi,edi
c0028893:	89 d1                	mov    ecx,edx
c0028895:	c1 e9 1f             	shr    ecx,0x1f
c0028898:	09 cf                	or     edi,ecx
c002889a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002889d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288a0:	89 da                	mov    edx,ebx
c00288a2:	89 f3                	mov    ebx,esi
c00288a4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288a7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288aa:	c1 e9 1f             	shr    ecx,0x1f
c00288ad:	09 ce                	or     esi,ecx
c00288af:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288b2:	01 c9                	add    ecx,ecx
c00288b4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288b7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288ba:	85 db                	test   ebx,ebx
c00288bc:	78 29                	js     c00288e7 <__divdf3+0x24b>
c00288be:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288c1:	72 07                	jb     c00288ca <__divdf3+0x22e>
c00288c3:	75 3c                	jne    c0028901 <__divdf3+0x265>
c00288c5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288c8:	77 37                	ja     c0028901 <__divdf3+0x265>
c00288ca:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288cd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288d0:	31 d2                	xor    edx,edx
c00288d2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288d5:	0f 97 c2             	seta   dl
c00288d8:	29 d6                	sub    esi,edx
c00288da:	89 d9                	mov    ecx,ebx
c00288dc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288df:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288e2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00288e5:	eb 17                	jmp    c00288fe <__divdf3+0x262>
c00288e7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288ea:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288ed:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288f0:	0f 97 c1             	seta   cl
c00288f3:	0f b6 c9             	movzx  ecx,cl
c00288f6:	29 ce                	sub    esi,ecx
c00288f8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00288fb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00288fe:	83 ca 01             	or     edx,0x1
c0028901:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028904:	75 8b                	jne    c0028891 <__divdf3+0x1f5>
c0028906:	c1 e7 09             	shl    edi,0x9
c0028909:	89 d1                	mov    ecx,edx
c002890b:	c1 e9 17             	shr    ecx,0x17
c002890e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028911:	09 f3                	or     ebx,esi
c0028913:	0f 95 c3             	setne  bl
c0028916:	0f b6 db             	movzx  ebx,bl
c0028919:	c1 e2 09             	shl    edx,0x9
c002891c:	09 d3                	or     ebx,edx
c002891e:	89 ca                	mov    edx,ecx
c0028920:	09 fa                	or     edx,edi
c0028922:	78 0c                	js     c0028930 <__divdf3+0x294>
c0028924:	01 d2                	add    edx,edx
c0028926:	89 d9                	mov    ecx,ebx
c0028928:	c1 e9 1f             	shr    ecx,0x1f
c002892b:	09 ca                	or     edx,ecx
c002892d:	01 db                	add    ebx,ebx
c002892f:	48                   	dec    eax
c0028930:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028935:	0f 8f 83 00 00 00    	jg     c00289be <__divdf3+0x322>
c002893b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028941:	85 c0                	test   eax,eax
c0028943:	0f 8f 82 00 00 00    	jg     c00289cb <__divdf3+0x32f>
c0028949:	83 f8 cc             	cmp    eax,0xffffffcc
c002894c:	7c 77                	jl     c00289c5 <__divdf3+0x329>
c002894e:	be 01 00 00 00       	mov    esi,0x1
c0028953:	29 c6                	sub    esi,eax
c0028955:	81 ca 00 00 00 80    	or     edx,0x80000000
c002895b:	83 fe 1f             	cmp    esi,0x1f
c002895e:	7e 2f                	jle    c002898f <__divdf3+0x2f3>
c0028960:	83 fe 20             	cmp    esi,0x20
c0028963:	75 0a                	jne    c002896f <__divdf3+0x2d3>
c0028965:	85 db                	test   ebx,ebx
c0028967:	0f 95 c3             	setne  bl
c002896a:	0f b6 db             	movzx  ebx,bl
c002896d:	eb 1a                	jmp    c0028989 <__divdf3+0x2ed>
c002896f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028972:	89 d7                	mov    edi,edx
c0028974:	d3 e7                	shl    edi,cl
c0028976:	89 f9                	mov    ecx,edi
c0028978:	09 d9                	or     ecx,ebx
c002897a:	0f 95 c3             	setne  bl
c002897d:	0f b6 db             	movzx  ebx,bl
c0028980:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028985:	29 c1                	sub    ecx,eax
c0028987:	d3 ea                	shr    edx,cl
c0028989:	09 d3                	or     ebx,edx
c002898b:	31 c0                	xor    eax,eax
c002898d:	eb 3a                	jmp    c00289c9 <__divdf3+0x32d>
c002898f:	83 c0 1f             	add    eax,0x1f
c0028992:	89 d7                	mov    edi,edx
c0028994:	88 c1                	mov    cl,al
c0028996:	d3 e7                	shl    edi,cl
c0028998:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002899b:	89 df                	mov    edi,ebx
c002899d:	89 f1                	mov    ecx,esi
c002899f:	d3 ef                	shr    edi,cl
c00289a1:	89 f9                	mov    ecx,edi
c00289a3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289a6:	09 cf                	or     edi,ecx
c00289a8:	88 c1                	mov    cl,al
c00289aa:	d3 e3                	shl    ebx,cl
c00289ac:	85 db                	test   ebx,ebx
c00289ae:	0f 95 c3             	setne  bl
c00289b1:	0f b6 db             	movzx  ebx,bl
c00289b4:	09 fb                	or     ebx,edi
c00289b6:	89 f1                	mov    ecx,esi
c00289b8:	d3 ea                	shr    edx,cl
c00289ba:	31 c0                	xor    eax,eax
c00289bc:	eb 0d                	jmp    c00289cb <__divdf3+0x32f>
c00289be:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289c3:	eb 02                	jmp    c00289c7 <__divdf3+0x32b>
c00289c5:	31 c0                	xor    eax,eax
c00289c7:	31 db                	xor    ebx,ebx
c00289c9:	31 d2                	xor    edx,edx
c00289cb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289ce:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289d1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289d7:	09 c8                	or     eax,ecx
c00289d9:	c1 e0 14             	shl    eax,0x14
c00289dc:	89 d1                	mov    ecx,edx
c00289de:	c1 e9 0b             	shr    ecx,0xb
c00289e1:	09 c8                	or     eax,ecx
c00289e3:	89 c6                	mov    esi,eax
c00289e5:	89 d9                	mov    ecx,ebx
c00289e7:	c1 e9 0b             	shr    ecx,0xb
c00289ea:	c1 e2 15             	shl    edx,0x15
c00289ed:	09 ca                	or     edx,ecx
c00289ef:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00289f5:	0f 95 c0             	setne  al
c00289f8:	09 c1                	or     ecx,eax
c00289fa:	83 e1 01             	and    ecx,0x1
c00289fd:	c1 eb 0a             	shr    ebx,0xa
c0028a00:	21 cb                	and    ebx,ecx
c0028a02:	01 d3                	add    ebx,edx
c0028a04:	89 d8                	mov    eax,ebx
c0028a06:	83 d6 00             	adc    esi,0x0
c0028a09:	89 f2                	mov    edx,esi
c0028a0b:	89 c7                	mov    edi,eax
c0028a0d:	89 d1                	mov    ecx,edx
c0028a0f:	89 f8                	mov    eax,edi
c0028a11:	89 ca                	mov    edx,ecx
c0028a13:	83 c4 2c             	add    esp,0x2c
c0028a16:	5b                   	pop    ebx
c0028a17:	5e                   	pop    esi
c0028a18:	5f                   	pop    edi
c0028a19:	5d                   	pop    ebp
c0028a1a:	c3                   	ret    

c0028a1b <__floatsidf>:
c0028a1b:	55                   	push   ebp
c0028a1c:	89 e5                	mov    ebp,esp
c0028a1e:	56                   	push   esi
c0028a1f:	53                   	push   ebx
c0028a20:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a23:	85 db                	test   ebx,ebx
c0028a25:	7e 15                	jle    c0028a3c <__floatsidf+0x21>
c0028a27:	0f bd cb             	bsr    ecx,ebx
c0028a2a:	83 f1 1f             	xor    ecx,0x1f
c0028a2d:	d3 e3                	shl    ebx,cl
c0028a2f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a35:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a3a:	eb 21                	jmp    c0028a5d <__floatsidf+0x42>
c0028a3c:	b8 00 00 00 00       	mov    eax,0x0
c0028a41:	ba 00 00 00 00       	mov    edx,0x0
c0028a46:	74 2a                	je     c0028a72 <__floatsidf+0x57>
c0028a48:	f7 db                	neg    ebx
c0028a4a:	0f bd cb             	bsr    ecx,ebx
c0028a4d:	83 f1 1f             	xor    ecx,0x1f
c0028a50:	d3 e3                	shl    ebx,cl
c0028a52:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a58:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a5d:	29 c8                	sub    eax,ecx
c0028a5f:	c1 e0 14             	shl    eax,0x14
c0028a62:	89 c1                	mov    ecx,eax
c0028a64:	89 de                	mov    esi,ebx
c0028a66:	c1 ee 0b             	shr    esi,0xb
c0028a69:	09 f1                	or     ecx,esi
c0028a6b:	89 ca                	mov    edx,ecx
c0028a6d:	c1 e3 15             	shl    ebx,0x15
c0028a70:	89 d8                	mov    eax,ebx
c0028a72:	5b                   	pop    ebx
c0028a73:	5e                   	pop    esi
c0028a74:	5d                   	pop    ebp
c0028a75:	c3                   	ret    

c0028a76 <__floatunsidf>:
c0028a76:	55                   	push   ebp
c0028a77:	89 e5                	mov    ebp,esp
c0028a79:	56                   	push   esi
c0028a7a:	53                   	push   ebx
c0028a7b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a7e:	85 db                	test   ebx,ebx
c0028a80:	74 2a                	je     c0028aac <__floatunsidf+0x36>
c0028a82:	0f bd cb             	bsr    ecx,ebx
c0028a85:	83 f1 1f             	xor    ecx,0x1f
c0028a88:	d3 e3                	shl    ebx,cl
c0028a8a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a90:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a95:	29 c8                	sub    eax,ecx
c0028a97:	c1 e0 14             	shl    eax,0x14
c0028a9a:	89 c1                	mov    ecx,eax
c0028a9c:	89 de                	mov    esi,ebx
c0028a9e:	c1 ee 0b             	shr    esi,0xb
c0028aa1:	09 f1                	or     ecx,esi
c0028aa3:	89 ca                	mov    edx,ecx
c0028aa5:	c1 e3 15             	shl    ebx,0x15
c0028aa8:	89 d8                	mov    eax,ebx
c0028aaa:	eb 04                	jmp    c0028ab0 <__floatunsidf+0x3a>
c0028aac:	31 c0                	xor    eax,eax
c0028aae:	31 d2                	xor    edx,edx
c0028ab0:	5b                   	pop    ebx
c0028ab1:	5e                   	pop    esi
c0028ab2:	5d                   	pop    ebp
c0028ab3:	c3                   	ret    

c0028ab4 <__fixdfsi>:
c0028ab4:	55                   	push   ebp
c0028ab5:	89 e5                	mov    ebp,esp
c0028ab7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aba:	89 d1                	mov    ecx,edx
c0028abc:	c1 e1 0b             	shl    ecx,0xb
c0028abf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ac8:	c1 e8 15             	shr    eax,0x15
c0028acb:	09 c1                	or     ecx,eax
c0028acd:	c1 fa 14             	sar    edx,0x14
c0028ad0:	78 1f                	js     c0028af1 <__fixdfsi+0x3d>
c0028ad2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028ad8:	31 c0                	xor    eax,eax
c0028ada:	83 fa 1e             	cmp    edx,0x1e
c0028add:	77 40                	ja     c0028b1f <__fixdfsi+0x6b>
c0028adf:	89 c8                	mov    eax,ecx
c0028ae1:	0d 00 00 00 80       	or     eax,0x80000000
c0028ae6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028aeb:	29 d1                	sub    ecx,edx
c0028aed:	d3 e8                	shr    eax,cl
c0028aef:	eb 2e                	jmp    c0028b1f <__fixdfsi+0x6b>
c0028af1:	31 c0                	xor    eax,eax
c0028af3:	81 c2 01 04 00 00    	add    edx,0x401
c0028af9:	78 24                	js     c0028b1f <__fixdfsi+0x6b>
c0028afb:	83 fa 1e             	cmp    edx,0x1e
c0028afe:	7e 09                	jle    c0028b09 <__fixdfsi+0x55>
c0028b00:	83 fa 1f             	cmp    edx,0x1f
c0028b03:	75 18                	jne    c0028b1d <__fixdfsi+0x69>
c0028b05:	85 c9                	test   ecx,ecx
c0028b07:	75 14                	jne    c0028b1d <__fixdfsi+0x69>
c0028b09:	89 c8                	mov    eax,ecx
c0028b0b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b10:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b15:	29 d1                	sub    ecx,edx
c0028b17:	d3 e8                	shr    eax,cl
c0028b19:	f7 d8                	neg    eax
c0028b1b:	eb 02                	jmp    c0028b1f <__fixdfsi+0x6b>
c0028b1d:	31 c0                	xor    eax,eax
c0028b1f:	5d                   	pop    ebp
c0028b20:	c3                   	ret    

c0028b21 <__fixunsdfsi>:
c0028b21:	55                   	push   ebp
c0028b22:	89 e5                	mov    ebp,esp
c0028b24:	53                   	push   ebx
c0028b25:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b28:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b2b:	89 d3                	mov    ebx,edx
c0028b2d:	c1 fb 14             	sar    ebx,0x14
c0028b30:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b36:	31 c0                	xor    eax,eax
c0028b38:	83 fb 1f             	cmp    ebx,0x1f
c0028b3b:	77 1d                	ja     c0028b5a <__fixunsdfsi+0x39>
c0028b3d:	89 d0                	mov    eax,edx
c0028b3f:	c1 e0 0b             	shl    eax,0xb
c0028b42:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b47:	c1 e9 15             	shr    ecx,0x15
c0028b4a:	09 c8                	or     eax,ecx
c0028b4c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b51:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b56:	29 d9                	sub    ecx,ebx
c0028b58:	d3 e8                	shr    eax,cl
c0028b5a:	5b                   	pop    ebx
c0028b5b:	5d                   	pop    ebp
c0028b5c:	c3                   	ret    

c0028b5d <__cmpdf2>:
c0028b5d:	55                   	push   ebp
c0028b5e:	89 e5                	mov    ebp,esp
c0028b60:	57                   	push   edi
c0028b61:	56                   	push   esi
c0028b62:	53                   	push   ebx
c0028b63:	83 ec 0c             	sub    esp,0xc
c0028b66:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b69:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b6c:	89 ca                	mov    edx,ecx
c0028b6e:	c1 ea 14             	shr    edx,0x14
c0028b71:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b77:	89 cb                	mov    ebx,ecx
c0028b79:	c1 fb 1f             	sar    ebx,0x1f
c0028b7c:	31 da                	xor    edx,ebx
c0028b7e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b81:	89 df                	mov    edi,ebx
c0028b83:	c1 e7 0b             	shl    edi,0xb
c0028b86:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b89:	c1 e1 0b             	shl    ecx,0xb
c0028b8c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b92:	c1 eb 15             	shr    ebx,0x15
c0028b95:	09 d9                	or     ecx,ebx
c0028b97:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028b9a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028b9d:	89 ce                	mov    esi,ecx
c0028b9f:	c1 ee 14             	shr    esi,0x14
c0028ba2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028ba8:	89 cb                	mov    ebx,ecx
c0028baa:	c1 fb 1f             	sar    ebx,0x1f
c0028bad:	31 de                	xor    esi,ebx
c0028baf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028bb2:	89 df                	mov    edi,ebx
c0028bb4:	c1 e7 0b             	shl    edi,0xb
c0028bb7:	c1 e1 0b             	shl    ecx,0xb
c0028bba:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bc0:	c1 eb 15             	shr    ebx,0x15
c0028bc3:	09 d9                	or     ecx,ebx
c0028bc5:	89 d3                	mov    ebx,edx
c0028bc7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bcd:	43                   	inc    ebx
c0028bce:	83 fb 01             	cmp    ebx,0x1
c0028bd1:	77 08                	ja     c0028bdb <__cmpdf2+0x7e>
c0028bd3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bd6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028bd9:	75 68                	jne    c0028c43 <__cmpdf2+0xe6>
c0028bdb:	89 f3                	mov    ebx,esi
c0028bdd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028be3:	43                   	inc    ebx
c0028be4:	83 fb 01             	cmp    ebx,0x1
c0028be7:	77 06                	ja     c0028bef <__cmpdf2+0x92>
c0028be9:	89 fb                	mov    ebx,edi
c0028beb:	09 cb                	or     ebx,ecx
c0028bed:	75 54                	jne    c0028c43 <__cmpdf2+0xe6>
c0028bef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028bf2:	09 f8                	or     eax,edi
c0028bf4:	09 c8                	or     eax,ecx
c0028bf6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028bf9:	75 12                	jne    c0028c0d <__cmpdf2+0xb0>
c0028bfb:	8d 42 01             	lea    eax,[edx+0x1]
c0028bfe:	83 f8 01             	cmp    eax,0x1
c0028c01:	77 0a                	ja     c0028c0d <__cmpdf2+0xb0>
c0028c03:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c06:	31 c0                	xor    eax,eax
c0028c08:	83 fb 01             	cmp    ebx,0x1
c0028c0b:	76 36                	jbe    c0028c43 <__cmpdf2+0xe6>
c0028c0d:	b8 01 00 00 00       	mov    eax,0x1
c0028c12:	39 f2                	cmp    edx,esi
c0028c14:	7f 2d                	jg     c0028c43 <__cmpdf2+0xe6>
c0028c16:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c1b:	7c 26                	jl     c0028c43 <__cmpdf2+0xe6>
c0028c1d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c20:	77 07                	ja     c0028c29 <__cmpdf2+0xcc>
c0028c22:	72 16                	jb     c0028c3a <__cmpdf2+0xdd>
c0028c24:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c27:	76 0a                	jbe    c0028c33 <__cmpdf2+0xd6>
c0028c29:	89 d0                	mov    eax,edx
c0028c2b:	c1 f8 1f             	sar    eax,0x1f
c0028c2e:	83 c8 01             	or     eax,0x1
c0028c31:	eb 10                	jmp    c0028c43 <__cmpdf2+0xe6>
c0028c33:	b8 00 00 00 00       	mov    eax,0x0
c0028c38:	73 09                	jae    c0028c43 <__cmpdf2+0xe6>
c0028c3a:	89 d0                	mov    eax,edx
c0028c3c:	c1 f8 1f             	sar    eax,0x1f
c0028c3f:	83 e0 02             	and    eax,0x2
c0028c42:	48                   	dec    eax
c0028c43:	83 c4 0c             	add    esp,0xc
c0028c46:	5b                   	pop    ebx
c0028c47:	5e                   	pop    esi
c0028c48:	5f                   	pop    edi
c0028c49:	5d                   	pop    ebp
c0028c4a:	c3                   	ret    

c0028c4b <__eqdf2>:
c0028c4b:	55                   	push   ebp
c0028c4c:	89 e5                	mov    ebp,esp
c0028c4e:	50                   	push   eax
c0028c4f:	6a 01                	push   0x1
c0028c51:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c54:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c5a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c5d:	e8 fb fe ff ff       	call   c0028b5d <__cmpdf2>
c0028c62:	83 c4 18             	add    esp,0x18
c0028c65:	c9                   	leave  
c0028c66:	c3                   	ret    

c0028c67 <__nedf2>:
c0028c67:	eb e2                	jmp    c0028c4b <__eqdf2>

c0028c69 <__gtdf2>:
c0028c69:	55                   	push   ebp
c0028c6a:	89 e5                	mov    ebp,esp
c0028c6c:	50                   	push   eax
c0028c6d:	6a ff                	push   0xffffffff
c0028c6f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c72:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c75:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c7b:	e8 dd fe ff ff       	call   c0028b5d <__cmpdf2>
c0028c80:	83 c4 18             	add    esp,0x18
c0028c83:	c9                   	leave  
c0028c84:	c3                   	ret    

c0028c85 <__gedf2>:
c0028c85:	eb e2                	jmp    c0028c69 <__gtdf2>

c0028c87 <__ltdf2>:
c0028c87:	eb c2                	jmp    c0028c4b <__eqdf2>

c0028c89 <__ledf2>:
c0028c89:	eb c0                	jmp    c0028c4b <__eqdf2>

c0028c8b <__truncdfsf2>:
c0028c8b:	55                   	push   ebp
c0028c8c:	89 e5                	mov    ebp,esp
c0028c8e:	57                   	push   edi
c0028c8f:	56                   	push   esi
c0028c90:	53                   	push   ebx
c0028c91:	83 ec 0c             	sub    esp,0xc
c0028c94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c97:	89 d1                	mov    ecx,edx
c0028c99:	c1 f9 14             	sar    ecx,0x14
c0028c9c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c9f:	89 df                	mov    edi,ebx
c0028ca1:	c1 e7 0b             	shl    edi,0xb
c0028ca4:	89 d0                	mov    eax,edx
c0028ca6:	c1 e0 0b             	shl    eax,0xb
c0028ca9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cae:	c1 eb 15             	shr    ebx,0x15
c0028cb1:	09 d8                	or     eax,ebx
c0028cb3:	89 cb                	mov    ebx,ecx
c0028cb5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cbb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cc1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cc7:	0f 86 9e 00 00 00    	jbe    c0028d6b <__truncdfsf2+0xe0>
c0028ccd:	85 db                	test   ebx,ebx
c0028ccf:	75 0a                	jne    c0028cdb <__truncdfsf2+0x50>
c0028cd1:	c1 fa 17             	sar    edx,0x17
c0028cd4:	30 d2                	xor    dl,dl
c0028cd6:	e9 84 00 00 00       	jmp    c0028d5f <__truncdfsf2+0xd4>
c0028cdb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028ce1:	83 fe 83             	cmp    esi,0xffffff83
c0028ce4:	7d 4b                	jge    c0028d31 <__truncdfsf2+0xa6>
c0028ce6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028ceb:	29 f1                	sub    ecx,esi
c0028ced:	83 f9 1f             	cmp    ecx,0x1f
c0028cf0:	7f 6b                	jg     c0028d5d <__truncdfsf2+0xd2>
c0028cf2:	0d 00 00 00 80       	or     eax,0x80000000
c0028cf7:	89 c3                	mov    ebx,eax
c0028cf9:	d3 eb                	shr    ebx,cl
c0028cfb:	be 01 00 00 00       	mov    esi,0x1
c0028d00:	d3 e6                	shl    esi,cl
c0028d02:	4e                   	dec    esi
c0028d03:	21 f0                	and    eax,esi
c0028d05:	09 f8                	or     eax,edi
c0028d07:	0f 95 c0             	setne  al
c0028d0a:	0f b6 c0             	movzx  eax,al
c0028d0d:	09 c3                	or     ebx,eax
c0028d0f:	89 d9                	mov    ecx,ebx
c0028d11:	c1 e9 08             	shr    ecx,0x8
c0028d14:	f6 c3 7f             	test   bl,0x7f
c0028d17:	0f 95 c0             	setne  al
c0028d1a:	09 c8                	or     eax,ecx
c0028d1c:	83 e0 01             	and    eax,0x1
c0028d1f:	c1 eb 07             	shr    ebx,0x7
c0028d22:	21 c3                	and    ebx,eax
c0028d24:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d2a:	09 d1                	or     ecx,edx
c0028d2c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d2f:	eb 76                	jmp    c0028da7 <__truncdfsf2+0x11c>
c0028d31:	83 c6 80             	add    esi,0xffffff80
c0028d34:	7e 1d                	jle    c0028d53 <__truncdfsf2+0xc8>
c0028d36:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d3c:	75 0b                	jne    c0028d49 <__truncdfsf2+0xbe>
c0028d3e:	09 f8                	or     eax,edi
c0028d40:	74 09                	je     c0028d4b <__truncdfsf2+0xc0>
c0028d42:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d47:	eb 02                	jmp    c0028d4b <__truncdfsf2+0xc0>
c0028d49:	31 c0                	xor    eax,eax
c0028d4b:	c1 fa 17             	sar    edx,0x17
c0028d4e:	80 ca ff             	or     dl,0xff
c0028d51:	eb 0e                	jmp    c0028d61 <__truncdfsf2+0xd6>
c0028d53:	c1 fa 1f             	sar    edx,0x1f
c0028d56:	c1 e2 08             	shl    edx,0x8
c0028d59:	09 ca                	or     edx,ecx
c0028d5b:	eb 04                	jmp    c0028d61 <__truncdfsf2+0xd6>
c0028d5d:	31 d2                	xor    edx,edx
c0028d5f:	31 c0                	xor    eax,eax
c0028d61:	c1 e2 17             	shl    edx,0x17
c0028d64:	c1 e8 08             	shr    eax,0x8
c0028d67:	09 d0                	or     eax,edx
c0028d69:	eb 3c                	jmp    c0028da7 <__truncdfsf2+0x11c>
c0028d6b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d71:	89 ca                	mov    edx,ecx
c0028d73:	c1 fa 0b             	sar    edx,0xb
c0028d76:	c1 e2 08             	shl    edx,0x8
c0028d79:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d7c:	31 db                	xor    ebx,ebx
c0028d7e:	85 ff                	test   edi,edi
c0028d80:	0f 95 c3             	setne  bl
c0028d83:	09 d8                	or     eax,ebx
c0028d85:	89 c3                	mov    ebx,eax
c0028d87:	c1 eb 08             	shr    ebx,0x8
c0028d8a:	a8 7f                	test   al,0x7f
c0028d8c:	0f 95 c2             	setne  dl
c0028d8f:	89 d6                	mov    esi,edx
c0028d91:	09 de                	or     esi,ebx
c0028d93:	83 e6 01             	and    esi,0x1
c0028d96:	c1 e8 07             	shr    eax,0x7
c0028d99:	21 f0                	and    eax,esi
c0028d9b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d9e:	09 ca                	or     edx,ecx
c0028da0:	c1 e2 17             	shl    edx,0x17
c0028da3:	09 da                	or     edx,ebx
c0028da5:	01 d0                	add    eax,edx
c0028da7:	83 c4 0c             	add    esp,0xc
c0028daa:	5b                   	pop    ebx
c0028dab:	5e                   	pop    esi
c0028dac:	5f                   	pop    edi
c0028dad:	5d                   	pop    ebp
c0028dae:	c3                   	ret    

c0028daf <__extendsfdf2>:
c0028daf:	55                   	push   ebp
c0028db0:	89 e5                	mov    ebp,esp
c0028db2:	57                   	push   edi
c0028db3:	56                   	push   esi
c0028db4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028db7:	89 d1                	mov    ecx,edx
c0028db9:	c1 f9 17             	sar    ecx,0x17
c0028dbc:	c1 e2 08             	shl    edx,0x8
c0028dbf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028dc5:	89 c8                	mov    eax,ecx
c0028dc7:	80 e4 f8             	and    ah,0xf8
c0028dca:	8d 71 01             	lea    esi,[ecx+0x1]
c0028dcd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028dd3:	75 27                	jne    c0028dfc <__extendsfdf2+0x4d>
c0028dd5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028ddb:	75 18                	jne    c0028df5 <__extendsfdf2+0x46>
c0028ddd:	85 d2                	test   edx,edx
c0028ddf:	74 20                	je     c0028e01 <__extendsfdf2+0x52>
c0028de1:	41                   	inc    ecx
c0028de2:	01 d2                	add    edx,edx
c0028de4:	79 fb                	jns    c0028de1 <__extendsfdf2+0x32>
c0028de6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028dec:	29 c8                	sub    eax,ecx
c0028dee:	05 81 03 00 00       	add    eax,0x381
c0028df3:	eb 0c                	jmp    c0028e01 <__extendsfdf2+0x52>
c0028df5:	05 00 07 00 00       	add    eax,0x700
c0028dfa:	eb 05                	jmp    c0028e01 <__extendsfdf2+0x52>
c0028dfc:	05 80 03 00 00       	add    eax,0x380
c0028e01:	c1 e0 14             	shl    eax,0x14
c0028e04:	89 c1                	mov    ecx,eax
c0028e06:	89 d0                	mov    eax,edx
c0028e08:	c1 e8 0b             	shr    eax,0xb
c0028e0b:	09 c1                	or     ecx,eax
c0028e0d:	c1 e2 15             	shl    edx,0x15
c0028e10:	89 d0                	mov    eax,edx
c0028e12:	89 ca                	mov    edx,ecx
c0028e14:	5e                   	pop    esi
c0028e15:	5f                   	pop    edi
c0028e16:	5d                   	pop    ebp
c0028e17:	c3                   	ret    
c0028e18:	66 90                	xchg   ax,ax
c0028e1a:	66 90                	xchg   ax,ax
c0028e1c:	66 90                	xchg   ax,ax
c0028e1e:	66 90                	xchg   ax,ax

c0028e20 <fabs>:
c0028e20:	83 ec 0c             	sub    esp,0xc
c0028e23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e27:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e2e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e37:	dd 04 24             	fld    QWORD PTR [esp]
c0028e3a:	83 c4 0c             	add    esp,0xc
c0028e3d:	c3                   	ret    
c0028e3e:	66 90                	xchg   ax,ax

c0028e40 <lrint>:
c0028e40:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e44:	83 ec 04             	sub    esp,0x4
c0028e47:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e4a:	58                   	pop    eax
c0028e4b:	c3                   	ret    

c0028e4c <lrintf>:
c0028e4c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e50:	83 ec 04             	sub    esp,0x4
c0028e53:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e56:	58                   	pop    eax
c0028e57:	c3                   	ret    

Disassembly of section .init:

c0028e58 <_init>:
c0028e58:	55                   	push   ebp
c0028e59:	89 e5                	mov    ebp,esp
c0028e5b:	e8 b8 72 fd ff       	call   c0000118 <frame_dummy>
c0028e60:	e8 5b e0 ff ff       	call   c0026ec0 <__do_global_ctors_aux>
c0028e65:	5d                   	pop    ebp
c0028e66:	c3                   	ret    

Disassembly of section .fini:

c0028e67 <_fini>:
c0028e67:	55                   	push   ebp
c0028e68:	89 e5                	mov    ebp,esp
c0028e6a:	e8 39 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e6f:	5d                   	pop    ebp
c0028e70:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e72 <Computer::~Computer()>:
c0028e72:	83 ec 0c             	sub    esp,0xc
c0028e75:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c0028e7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7e:	89 10                	mov    DWORD PTR [eax],edx
c0028e80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e84:	83 ec 0c             	sub    esp,0xc
c0028e87:	50                   	push   eax
c0028e88:	e8 5b b3 fe ff       	call   c00141e8 <Device::~Device()>
c0028e8d:	83 c4 10             	add    esp,0x10
c0028e90:	90                   	nop
c0028e91:	83 c4 0c             	add    esp,0xc
c0028e94:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028e96 <Computer::~Computer()>:
c0028e96:	83 ec 0c             	sub    esp,0xc
c0028e99:	83 ec 0c             	sub    esp,0xc
c0028e9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea0:	e8 cd ff ff ff       	call   c0028e72 <Computer::~Computer()>
c0028ea5:	83 c4 10             	add    esp,0x10
c0028ea8:	83 ec 08             	sub    esp,0x8
c0028eab:	68 ec 01 00 00       	push   0x1ec
c0028eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb4:	e8 48 9f fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0028eb9:	83 c4 10             	add    esp,0x10
c0028ebc:	83 c4 0c             	add    esp,0xc
c0028ebf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ec0 <idleCommon()>:
c0028ec0:	83 ec 0c             	sub    esp,0xc
c0028ec3:	fa                   	cli    
c0028ec4:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0028eca:	e8 c5 55 ff ff       	call   c001e494 <schedule()>
c0028ecf:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0028ed4:	48                   	dec    eax
c0028ed5:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0028eda:	75 01                	jne    c0028edd <idleCommon()+0x1d>
c0028edc:	fb                   	sti    
c0028edd:	83 c4 0c             	add    esp,0xc
c0028ee0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ee2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ee2:	90                   	nop
c0028ee3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ee4 <LinkedList<UnixFile>::LinkedList()>:
c0028ee4:	83 ec 0c             	sub    esp,0xc
c0028ee7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eeb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f00:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f0b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f20:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f27:	83 ec 0c             	sub    esp,0xc
c0028f2a:	68 66 ad 02 c0       	push   0xc002ad66
c0028f2f:	e8 ad 9f fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0028f34:	83 c4 10             	add    esp,0x10
c0028f37:	90                   	nop
c0028f38:	83 c4 0c             	add    esp,0xc
c0028f3b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f3c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f3c:	83 ec 0c             	sub    esp,0xc
c0028f3f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f44:	75 10                	jne    c0028f56 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f46:	83 ec 0c             	sub    esp,0xc
c0028f49:	68 80 ad 02 c0       	push   0xc002ad80
c0028f4e:	e8 4a 19 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0028f53:	83 c4 10             	add    esp,0x10
c0028f56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f5c:	85 c0                	test   eax,eax
c0028f5e:	74 34                	je     c0028f94 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f67:	85 c0                	test   eax,eax
c0028f69:	74 29                	je     c0028f94 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f76:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f81:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f8b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f92:	eb 65                	jmp    c0028ff9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f9a:	85 c0                	test   eax,eax
c0028f9c:	75 4b                	jne    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fa5:	85 c0                	test   eax,eax
c0028fa7:	75 40                	jne    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fb1:	89 10                	mov    DWORD PTR [eax],edx
c0028fb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fbb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fc5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fd3:	85 c0                	test   eax,eax
c0028fd5:	74 22                	je     c0028ff9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd7:	83 ec 0c             	sub    esp,0xc
c0028fda:	68 a2 ad 02 c0       	push   0xc002ada2
c0028fdf:	e8 b9 18 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0028fe4:	83 c4 10             	add    esp,0x10
c0028fe7:	eb 10                	jmp    c0028ff9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fe9:	83 ec 0c             	sub    esp,0xc
c0028fec:	68 ac ad 02 c0       	push   0xc002adac
c0028ff1:	e8 a7 18 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0028ff6:	83 c4 10             	add    esp,0x10
c0028ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029000:	8d 50 01             	lea    edx,[eax+0x1]
c0029003:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029007:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002900a:	90                   	nop
c002900b:	83 c4 0c             	add    esp,0xc
c002900e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029010 <LinkedList<UnixFile>::getFirstElement()>:
c0029010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029014:	8b 00                	mov    eax,DWORD PTR [eax]
c0029016:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029018 <LinkedList<UnixFile>::removeFirst()>:
c0029018:	83 ec 0c             	sub    esp,0xc
c002901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002901f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029021:	85 c0                	test   eax,eax
c0029023:	75 12                	jne    c0029037 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029025:	83 ec 0c             	sub    esp,0xc
c0029028:	68 b8 ad 02 c0       	push   0xc002adb8
c002902d:	e8 6b 18 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029032:	83 c4 10             	add    esp,0x10
c0029035:	eb 7e                	jmp    c00290b5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002903b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002903e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029041:	85 c0                	test   eax,eax
c0029043:	74 10                	je     c0029055 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029045:	83 ec 0c             	sub    esp,0xc
c0029048:	68 03 ae 02 c0       	push   0xc002ae03
c002904d:	e8 4b 18 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029052:	83 c4 10             	add    esp,0x10
c0029055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029059:	8b 00                	mov    eax,DWORD PTR [eax]
c002905b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002905e:	85 c0                	test   eax,eax
c0029060:	75 33                	jne    c0029095 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002906c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029070:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002907b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002907e:	83 f8 01             	cmp    eax,0x1
c0029081:	74 21                	je     c00290a4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029083:	83 ec 0c             	sub    esp,0xc
c0029086:	68 dc ad 02 c0       	push   0xc002addc
c002908b:	e8 0d 18 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029090:	83 c4 10             	add    esp,0x10
c0029093:	eb 0f                	jmp    c00290a4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029095:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029099:	8b 00                	mov    eax,DWORD PTR [eax]
c002909b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	89 10                	mov    DWORD PTR [eax],edx
c00290a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290ab:	8d 50 ff             	lea    edx,[eax-0x1]
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290b5:	83 c4 0c             	add    esp,0xc
c00290b8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290ba <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290c1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290c2 <DriverlessDevice::~DriverlessDevice()>:
c00290c2:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c00290c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290cb:	89 10                	mov    DWORD PTR [eax],edx
c00290cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290d1:	50                   	push   eax
c00290d2:	e8 11 b1 fe ff       	call   c00141e8 <Device::~Device()>
c00290d7:	83 c4 04             	add    esp,0x4
c00290da:	90                   	nop
c00290db:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290dc <DriverlessDevice::~DriverlessDevice()>:
c00290dc:	83 ec 0c             	sub    esp,0xc
c00290df:	83 ec 0c             	sub    esp,0xc
c00290e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290e6:	e8 d7 ff ff ff       	call   c00290c2 <DriverlessDevice::~DriverlessDevice()>
c00290eb:	83 c4 10             	add    esp,0x10
c00290ee:	83 ec 08             	sub    esp,0x8
c00290f1:	68 58 01 00 00       	push   0x158
c00290f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290fa:	e8 02 9d fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00290ff:	83 c4 10             	add    esp,0x10
c0029102:	83 c4 0c             	add    esp,0xc
c0029105:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029106 <LinkedList<Device>::addElement(Device*)>:
c0029106:	83 ec 0c             	sub    esp,0xc
c0029109:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002910e:	75 10                	jne    c0029120 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029110:	83 ec 0c             	sub    esp,0xc
c0029113:	68 80 ad 02 c0       	push   0xc002ad80
c0029118:	e8 80 17 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c002911d:	83 c4 10             	add    esp,0x10
c0029120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029124:	8b 00                	mov    eax,DWORD PTR [eax]
c0029126:	85 c0                	test   eax,eax
c0029128:	74 3a                	je     c0029164 <LinkedList<Device>::addElement(Device*)+0x5e>
c002912a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002912e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029131:	85 c0                	test   eax,eax
c0029133:	74 2f                	je     c0029164 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029139:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002913c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029140:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002914a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002914e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029155:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029158:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029162:	eb 68                	jmp    c00291cc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029168:	8b 00                	mov    eax,DWORD PTR [eax]
c002916a:	85 c0                	test   eax,eax
c002916c:	75 4e                	jne    c00291bc <LinkedList<Device>::addElement(Device*)+0xb6>
c002916e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029172:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029175:	85 c0                	test   eax,eax
c0029177:	75 43                	jne    c00291bc <LinkedList<Device>::addElement(Device*)+0xb6>
c0029179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002917d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029181:	89 10                	mov    DWORD PTR [eax],edx
c0029183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029187:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002918b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002918e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029192:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029195:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002919f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291a6:	85 c0                	test   eax,eax
c00291a8:	74 22                	je     c00291cc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291aa:	83 ec 0c             	sub    esp,0xc
c00291ad:	68 a2 ad 02 c0       	push   0xc002ada2
c00291b2:	e8 e6 16 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00291b7:	83 c4 10             	add    esp,0x10
c00291ba:	eb 10                	jmp    c00291cc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291bc:	83 ec 0c             	sub    esp,0xc
c00291bf:	68 ac ad 02 c0       	push   0xc002adac
c00291c4:	e8 d4 16 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00291c9:	83 c4 10             	add    esp,0x10
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291d3:	8d 50 01             	lea    edx,[eax+0x1]
c00291d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291dd:	90                   	nop
c00291de:	83 c4 0c             	add    esp,0xc
c00291e1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00291e2 <LinkedList<Device>::LinkedList()>:
c00291e2:	83 ec 0c             	sub    esp,0xc
c00291e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291fe:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029209:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002920f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029213:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029225:	83 ec 0c             	sub    esp,0xc
c0029228:	68 66 ad 02 c0       	push   0xc002ad66
c002922d:	e8 af 9c fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c0029232:	83 c4 10             	add    esp,0x10
c0029235:	90                   	nop
c0029236:	83 c4 0c             	add    esp,0xc
c0029239:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002923a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002923a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002923e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029240:	85 c0                	test   eax,eax
c0029242:	75 0e                	jne    c0029252 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029248:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002924b:	85 c0                	test   eax,eax
c002924d:	75 03                	jne    c0029252 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002924f:	b0 01                	mov    al,0x1
c0029251:	c3                   	ret    
c0029252:	b0 00                	mov    al,0x0
c0029254:	90                   	nop
c0029255:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029256 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029256:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002925a:	8b 00                	mov    eax,DWORD PTR [eax]
c002925c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002925e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002925e:	83 ec 0c             	sub    esp,0xc
c0029261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029265:	8b 00                	mov    eax,DWORD PTR [eax]
c0029267:	85 c0                	test   eax,eax
c0029269:	75 15                	jne    c0029280 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002926b:	83 ec 0c             	sub    esp,0xc
c002926e:	68 b8 ad 02 c0       	push   0xc002adb8
c0029273:	e8 25 16 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029278:	83 c4 10             	add    esp,0x10
c002927b:	e9 88 00 00 00       	jmp    c0029308 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029284:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029287:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002928a:	85 c0                	test   eax,eax
c002928c:	0f 95 c0             	setne  al
c002928f:	84 c0                	test   al,al
c0029291:	74 10                	je     c00292a3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029293:	83 ec 0c             	sub    esp,0xc
c0029296:	68 03 ae 02 c0       	push   0xc002ae03
c002929b:	e8 fd 15 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00292a0:	83 c4 10             	add    esp,0x10
c00292a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292a9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292ac:	85 c0                	test   eax,eax
c00292ae:	0f 94 c0             	sete   al
c00292b1:	84 c0                	test   al,al
c00292b3:	74 33                	je     c00292e8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292d1:	83 f8 01             	cmp    eax,0x1
c00292d4:	74 21                	je     c00292f7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292d6:	83 ec 0c             	sub    esp,0xc
c00292d9:	68 dc ad 02 c0       	push   0xc002addc
c00292de:	e8 ba 15 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00292e3:	83 c4 10             	add    esp,0x10
c00292e6:	eb 0f                	jmp    c00292f7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00292ee:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00292f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f5:	89 10                	mov    DWORD PTR [eax],edx
c00292f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292fe:	8d 50 ff             	lea    edx,[eax-0x1]
c0029301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029305:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029308:	83 c4 0c             	add    esp,0xc
c002930b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002930c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002930c:	83 ec 0c             	sub    esp,0xc
c002930f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029314:	75 10                	jne    c0029326 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029316:	83 ec 0c             	sub    esp,0xc
c0029319:	68 80 ad 02 c0       	push   0xc002ad80
c002931e:	e8 7a 15 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029323:	83 c4 10             	add    esp,0x10
c0029326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932a:	8b 00                	mov    eax,DWORD PTR [eax]
c002932c:	85 c0                	test   eax,eax
c002932e:	74 34                	je     c0029364 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029334:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029337:	85 c0                	test   eax,eax
c0029339:	74 29                	je     c0029364 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002933b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029342:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029346:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029351:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002935b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029362:	eb 65                	jmp    c00293c9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029368:	8b 00                	mov    eax,DWORD PTR [eax]
c002936a:	85 c0                	test   eax,eax
c002936c:	75 4b                	jne    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002936e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029372:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029375:	85 c0                	test   eax,eax
c0029377:	75 40                	jne    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002937d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029381:	89 10                	mov    DWORD PTR [eax],edx
c0029383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029387:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002938b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029392:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029395:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002939c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293a3:	85 c0                	test   eax,eax
c00293a5:	74 22                	je     c00293c9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a7:	83 ec 0c             	sub    esp,0xc
c00293aa:	68 a2 ad 02 c0       	push   0xc002ada2
c00293af:	e8 e9 14 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00293b4:	83 c4 10             	add    esp,0x10
c00293b7:	eb 10                	jmp    c00293c9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293b9:	83 ec 0c             	sub    esp,0xc
c00293bc:	68 ac ad 02 c0       	push   0xc002adac
c00293c1:	e8 d7 14 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00293c6:	83 c4 10             	add    esp,0x10
c00293c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293d0:	8d 50 01             	lea    edx,[eax+0x1]
c00293d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293d7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293da:	90                   	nop
c00293db:	83 c4 0c             	add    esp,0xc
c00293de:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00293e0 <ACPI::~ACPI()>:
c00293e0:	83 ec 0c             	sub    esp,0xc
c00293e3:	ba b0 bf 02 c0       	mov    edx,0xc002bfb0
c00293e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ec:	89 10                	mov    DWORD PTR [eax],edx
c00293ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f2:	83 ec 0c             	sub    esp,0xc
c00293f5:	50                   	push   eax
c00293f6:	e8 ed ad fe ff       	call   c00141e8 <Device::~Device()>
c00293fb:	83 c4 10             	add    esp,0x10
c00293fe:	90                   	nop
c00293ff:	83 c4 0c             	add    esp,0xc
c0029402:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029404 <ACPI::~ACPI()>:
c0029404:	83 ec 0c             	sub    esp,0xc
c0029407:	83 ec 0c             	sub    esp,0xc
c002940a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002940e:	e8 cd ff ff ff       	call   c00293e0 <ACPI::~ACPI()>
c0029413:	83 c4 10             	add    esp,0x10
c0029416:	83 ec 08             	sub    esp,0x8
c0029419:	68 68 12 00 00       	push   0x1268
c002941e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029422:	e8 da 99 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029427:	83 c4 10             	add    esp,0x10
c002942a:	83 c4 0c             	add    esp,0xc
c002942d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002942e <LinkedList<Device>::~LinkedList()>:
c002942e:	90                   	nop
c002942f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029430 <LinkedList<Device>::isEmpty()>:
c0029430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029434:	8b 00                	mov    eax,DWORD PTR [eax]
c0029436:	85 c0                	test   eax,eax
c0029438:	75 0e                	jne    c0029448 <LinkedList<Device>::isEmpty()+0x18>
c002943a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002943e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029441:	85 c0                	test   eax,eax
c0029443:	75 03                	jne    c0029448 <LinkedList<Device>::isEmpty()+0x18>
c0029445:	b0 01                	mov    al,0x1
c0029447:	c3                   	ret    
c0029448:	b0 00                	mov    al,0x0
c002944a:	90                   	nop
c002944b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002944c <LinkedList<Device>::getFirstElement()>:
c002944c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029450:	8b 00                	mov    eax,DWORD PTR [eax]
c0029452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029454 <LinkedList<Device>::removeFirst()>:
c0029454:	83 ec 0c             	sub    esp,0xc
c0029457:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945b:	8b 00                	mov    eax,DWORD PTR [eax]
c002945d:	85 c0                	test   eax,eax
c002945f:	75 15                	jne    c0029476 <LinkedList<Device>::removeFirst()+0x22>
c0029461:	83 ec 0c             	sub    esp,0xc
c0029464:	68 b8 ad 02 c0       	push   0xc002adb8
c0029469:	e8 2f 14 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c002946e:	83 c4 10             	add    esp,0x10
c0029471:	e9 87 00 00 00       	jmp    c00294fd <LinkedList<Device>::removeFirst()+0xa9>
c0029476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002947d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029483:	85 c0                	test   eax,eax
c0029485:	74 10                	je     c0029497 <LinkedList<Device>::removeFirst()+0x43>
c0029487:	83 ec 0c             	sub    esp,0xc
c002948a:	68 03 ae 02 c0       	push   0xc002ae03
c002948f:	e8 09 14 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c0029494:	83 c4 10             	add    esp,0x10
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	8b 00                	mov    eax,DWORD PTR [eax]
c002949d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294a3:	85 c0                	test   eax,eax
c00294a5:	75 33                	jne    c00294da <LinkedList<Device>::removeFirst()+0x86>
c00294a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294c3:	83 f8 01             	cmp    eax,0x1
c00294c6:	74 24                	je     c00294ec <LinkedList<Device>::removeFirst()+0x98>
c00294c8:	83 ec 0c             	sub    esp,0xc
c00294cb:	68 dc ad 02 c0       	push   0xc002addc
c00294d0:	e8 c8 13 ff ff       	call   c001a89d <Krnl::panic(char const*)>
c00294d5:	83 c4 10             	add    esp,0x10
c00294d8:	eb 12                	jmp    c00294ec <LinkedList<Device>::removeFirst()+0x98>
c00294da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294de:	8b 00                	mov    eax,DWORD PTR [eax]
c00294e0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	89 10                	mov    DWORD PTR [eax],edx
c00294ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294f3:	8d 50 ff             	lea    edx,[eax-0x1]
c00294f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294fd:	83 c4 0c             	add    esp,0xc
c0029500:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029502 <CPU::~CPU()>:
c0029502:	83 ec 0c             	sub    esp,0xc
c0029505:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c002950a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950e:	89 10                	mov    DWORD PTR [eax],edx
c0029510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029514:	83 ec 0c             	sub    esp,0xc
c0029517:	50                   	push   eax
c0029518:	e8 cb ac fe ff       	call   c00141e8 <Device::~Device()>
c002951d:	83 c4 10             	add    esp,0x10
c0029520:	90                   	nop
c0029521:	83 c4 0c             	add    esp,0xc
c0029524:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029526 <CPU::~CPU()>:
c0029526:	83 ec 0c             	sub    esp,0xc
c0029529:	83 ec 0c             	sub    esp,0xc
c002952c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029530:	e8 cd ff ff ff       	call   c0029502 <CPU::~CPU()>
c0029535:	83 c4 10             	add    esp,0x10
c0029538:	83 ec 08             	sub    esp,0x8
c002953b:	68 98 11 00 00       	push   0x1198
c0029540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029544:	e8 b8 98 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029549:	83 c4 10             	add    esp,0x10
c002954c:	83 c4 0c             	add    esp,0xc
c002954f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029550 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029550:	90                   	nop
c0029551:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029552 <ThreadControlBlock::ThreadControlBlock()>:
c0029552:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029556:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002955d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029561:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029568:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002956c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029573:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029577:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002957e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029582:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029589:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002958d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029591:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029595:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029599:	90                   	nop
c002959a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002959c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002959c:	83 ec 0c             	sub    esp,0xc
c002959f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295cd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295df:	83 ec 0c             	sub    esp,0xc
c00295e2:	68 66 ad 02 c0       	push   0xc002ad66
c00295e7:	e8 f5 98 fe ff       	call   c0012ee1 <Dbg::kprintf(char const*, ...)>
c00295ec:	83 c4 10             	add    esp,0x10
c00295ef:	90                   	nop
c00295f0:	83 c4 0c             	add    esp,0xc
c00295f3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00295f4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00295f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00295f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00295fb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00295fc <Vm::_FPUState::_FPUState()>:
c00295fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029600:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029607:	90                   	nop
c0029608:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002960a <PCI::~PCI()>:
c002960a:	83 ec 0c             	sub    esp,0xc
c002960d:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0029612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029616:	89 10                	mov    DWORD PTR [eax],edx
c0029618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	50                   	push   eax
c0029620:	e8 93 a5 fe ff       	call   c0013bb8 <Bus::~Bus()>
c0029625:	83 c4 10             	add    esp,0x10
c0029628:	90                   	nop
c0029629:	83 c4 0c             	add    esp,0xc
c002962c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002962e <PCI::~PCI()>:
c002962e:	83 ec 0c             	sub    esp,0xc
c0029631:	83 ec 0c             	sub    esp,0xc
c0029634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029638:	e8 cd ff ff ff       	call   c002960a <PCI::~PCI()>
c002963d:	83 c4 10             	add    esp,0x10
c0029640:	83 ec 08             	sub    esp,0x8
c0029643:	68 58 01 00 00       	push   0x158
c0029648:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002964c:	e8 b0 97 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029651:	83 c4 10             	add    esp,0x10
c0029654:	83 c4 0c             	add    esp,0xc
c0029657:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029658 <IDE::~IDE()>:
c0029658:	83 ec 0c             	sub    esp,0xc
c002965b:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c0029660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029664:	89 10                	mov    DWORD PTR [eax],edx
c0029666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002966a:	83 ec 0c             	sub    esp,0xc
c002966d:	50                   	push   eax
c002966e:	e8 73 b0 fe ff       	call   c00146e6 <HardDiskController::~HardDiskController()>
c0029673:	83 c4 10             	add    esp,0x10
c0029676:	90                   	nop
c0029677:	83 c4 0c             	add    esp,0xc
c002967a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002967c <IDE::~IDE()>:
c002967c:	83 ec 0c             	sub    esp,0xc
c002967f:	83 ec 0c             	sub    esp,0xc
c0029682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029686:	e8 cd ff ff ff       	call   c0029658 <IDE::~IDE()>
c002968b:	83 c4 10             	add    esp,0x10
c002968e:	83 ec 08             	sub    esp,0x8
c0029691:	68 70 02 00 00       	push   0x270
c0029696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002969a:	e8 62 97 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c002969f:	83 c4 10             	add    esp,0x10
c00296a2:	83 c4 0c             	add    esp,0xc
c00296a5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296a6 <SATABus::~SATABus()>:
c00296a6:	83 ec 0c             	sub    esp,0xc
c00296a9:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c00296ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b2:	89 10                	mov    DWORD PTR [eax],edx
c00296b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296b8:	83 ec 0c             	sub    esp,0xc
c00296bb:	50                   	push   eax
c00296bc:	e8 25 b0 fe ff       	call   c00146e6 <HardDiskController::~HardDiskController()>
c00296c1:	83 c4 10             	add    esp,0x10
c00296c4:	90                   	nop
c00296c5:	83 c4 0c             	add    esp,0xc
c00296c8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296ca <SATABus::~SATABus()>:
c00296ca:	83 ec 0c             	sub    esp,0xc
c00296cd:	83 ec 0c             	sub    esp,0xc
c00296d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d4:	e8 cd ff ff ff       	call   c00296a6 <SATABus::~SATABus()>
c00296d9:	83 c4 10             	add    esp,0x10
c00296dc:	83 ec 08             	sub    esp,0x8
c00296df:	68 64 01 00 00       	push   0x164
c00296e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e8:	e8 14 97 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00296ed:	83 c4 10             	add    esp,0x10
c00296f0:	83 c4 0c             	add    esp,0xc
c00296f3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00296f4 <ATA::~ATA()>:
c00296f4:	83 ec 0c             	sub    esp,0xc
c00296f7:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00296fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029700:	89 10                	mov    DWORD PTR [eax],edx
c0029702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029706:	83 ec 0c             	sub    esp,0xc
c0029709:	50                   	push   eax
c002970a:	e8 c9 b0 fe ff       	call   c00147d8 <PhysicalDisk::~PhysicalDisk()>
c002970f:	83 c4 10             	add    esp,0x10
c0029712:	90                   	nop
c0029713:	83 c4 0c             	add    esp,0xc
c0029716:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029718 <ATA::~ATA()>:
c0029718:	83 ec 0c             	sub    esp,0xc
c002971b:	83 ec 0c             	sub    esp,0xc
c002971e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029722:	e8 cd ff ff ff       	call   c00296f4 <ATA::~ATA()>
c0029727:	83 c4 10             	add    esp,0x10
c002972a:	83 ec 08             	sub    esp,0x8
c002972d:	68 7c 01 00 00       	push   0x17c
c0029732:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029736:	e8 c6 96 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c002973b:	83 c4 10             	add    esp,0x10
c002973e:	83 c4 0c             	add    esp,0xc
c0029741:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029742 <ATAPI::~ATAPI()>:
c0029742:	83 ec 0c             	sub    esp,0xc
c0029745:	ba 6c d8 02 c0       	mov    edx,0xc002d86c
c002974a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974e:	89 10                	mov    DWORD PTR [eax],edx
c0029750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029754:	83 ec 0c             	sub    esp,0xc
c0029757:	50                   	push   eax
c0029758:	e8 7b b0 fe ff       	call   c00147d8 <PhysicalDisk::~PhysicalDisk()>
c002975d:	83 c4 10             	add    esp,0x10
c0029760:	90                   	nop
c0029761:	83 c4 0c             	add    esp,0xc
c0029764:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029766 <ATAPI::~ATAPI()>:
c0029766:	83 ec 0c             	sub    esp,0xc
c0029769:	83 ec 0c             	sub    esp,0xc
c002976c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029770:	e8 cd ff ff ff       	call   c0029742 <ATAPI::~ATAPI()>
c0029775:	83 c4 10             	add    esp,0x10
c0029778:	83 ec 08             	sub    esp,0x8
c002977b:	68 80 01 00 00       	push   0x180
c0029780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029784:	e8 78 96 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029789:	83 c4 10             	add    esp,0x10
c002978c:	83 c4 0c             	add    esp,0xc
c002978f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029790 <SATA::~SATA()>:
c0029790:	83 ec 0c             	sub    esp,0xc
c0029793:	ba 20 d9 02 c0       	mov    edx,0xc002d920
c0029798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979c:	89 10                	mov    DWORD PTR [eax],edx
c002979e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297a2:	83 ec 0c             	sub    esp,0xc
c00297a5:	50                   	push   eax
c00297a6:	e8 2d b0 fe ff       	call   c00147d8 <PhysicalDisk::~PhysicalDisk()>
c00297ab:	83 c4 10             	add    esp,0x10
c00297ae:	90                   	nop
c00297af:	83 c4 0c             	add    esp,0xc
c00297b2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297b4 <SATA::~SATA()>:
c00297b4:	83 ec 0c             	sub    esp,0xc
c00297b7:	83 ec 0c             	sub    esp,0xc
c00297ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297be:	e8 cd ff ff ff       	call   c0029790 <SATA::~SATA()>
c00297c3:	83 c4 10             	add    esp,0x10
c00297c6:	83 ec 08             	sub    esp,0x8
c00297c9:	68 7c 01 00 00       	push   0x17c
c00297ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297d2:	e8 2a 96 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00297d7:	83 c4 10             	add    esp,0x10
c00297da:	83 c4 0c             	add    esp,0xc
c00297dd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297de <SATAPI::~SATAPI()>:
c00297de:	83 ec 0c             	sub    esp,0xc
c00297e1:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c00297e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ea:	89 10                	mov    DWORD PTR [eax],edx
c00297ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f0:	83 ec 0c             	sub    esp,0xc
c00297f3:	50                   	push   eax
c00297f4:	e8 df af fe ff       	call   c00147d8 <PhysicalDisk::~PhysicalDisk()>
c00297f9:	83 c4 10             	add    esp,0x10
c00297fc:	90                   	nop
c00297fd:	83 c4 0c             	add    esp,0xc
c0029800:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029802 <SATAPI::~SATAPI()>:
c0029802:	83 ec 0c             	sub    esp,0xc
c0029805:	83 ec 0c             	sub    esp,0xc
c0029808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002980c:	e8 cd ff ff ff       	call   c00297de <SATAPI::~SATAPI()>
c0029811:	83 c4 10             	add    esp,0x10
c0029814:	83 ec 08             	sub    esp,0x8
c0029817:	68 80 01 00 00       	push   0x180
c002981c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029820:	e8 dc 95 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029825:	83 c4 10             	add    esp,0x10
c0029828:	83 c4 0c             	add    esp,0xc
c002982b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002982c <AVX::~AVX()>:
c002982c:	83 ec 0c             	sub    esp,0xc
c002982f:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0029834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029838:	89 10                	mov    DWORD PTR [eax],edx
c002983a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002983e:	83 ec 0c             	sub    esp,0xc
c0029841:	50                   	push   eax
c0029842:	e8 15 b0 fe ff       	call   c001485c <FPU::~FPU()>
c0029847:	83 c4 10             	add    esp,0x10
c002984a:	90                   	nop
c002984b:	83 c4 0c             	add    esp,0xc
c002984e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029850 <AVX::~AVX()>:
c0029850:	83 ec 0c             	sub    esp,0xc
c0029853:	83 ec 0c             	sub    esp,0xc
c0029856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985a:	e8 cd ff ff ff       	call   c002982c <AVX::~AVX()>
c002985f:	83 c4 10             	add    esp,0x10
c0029862:	83 ec 08             	sub    esp,0x8
c0029865:	68 58 01 00 00       	push   0x158
c002986a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986e:	e8 8e 95 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029873:	83 c4 10             	add    esp,0x10
c0029876:	83 c4 0c             	add    esp,0xc
c0029879:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002987a <MMX::~MMX()>:
c002987a:	83 ec 0c             	sub    esp,0xc
c002987d:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0029882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029886:	89 10                	mov    DWORD PTR [eax],edx
c0029888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002988c:	83 ec 0c             	sub    esp,0xc
c002988f:	50                   	push   eax
c0029890:	e8 c7 af fe ff       	call   c001485c <FPU::~FPU()>
c0029895:	83 c4 10             	add    esp,0x10
c0029898:	90                   	nop
c0029899:	83 c4 0c             	add    esp,0xc
c002989c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002989e <MMX::~MMX()>:
c002989e:	83 ec 0c             	sub    esp,0xc
c00298a1:	83 ec 0c             	sub    esp,0xc
c00298a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298a8:	e8 cd ff ff ff       	call   c002987a <MMX::~MMX()>
c00298ad:	83 c4 10             	add    esp,0x10
c00298b0:	83 ec 08             	sub    esp,0x8
c00298b3:	68 58 01 00 00       	push   0x158
c00298b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298bc:	e8 40 95 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00298c1:	83 c4 10             	add    esp,0x10
c00298c4:	83 c4 0c             	add    esp,0xc
c00298c7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298c8 <SSE::~SSE()>:
c00298c8:	83 ec 0c             	sub    esp,0xc
c00298cb:	ba bc da 02 c0       	mov    edx,0xc002dabc
c00298d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298d4:	89 10                	mov    DWORD PTR [eax],edx
c00298d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298da:	83 ec 0c             	sub    esp,0xc
c00298dd:	50                   	push   eax
c00298de:	e8 79 af fe ff       	call   c001485c <FPU::~FPU()>
c00298e3:	83 c4 10             	add    esp,0x10
c00298e6:	90                   	nop
c00298e7:	83 c4 0c             	add    esp,0xc
c00298ea:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00298ec <SSE::~SSE()>:
c00298ec:	83 ec 0c             	sub    esp,0xc
c00298ef:	83 ec 0c             	sub    esp,0xc
c00298f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298f6:	e8 cd ff ff ff       	call   c00298c8 <SSE::~SSE()>
c00298fb:	83 c4 10             	add    esp,0x10
c00298fe:	83 ec 08             	sub    esp,0x8
c0029901:	68 58 01 00 00       	push   0x158
c0029906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002990a:	e8 f2 94 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c002990f:	83 c4 10             	add    esp,0x10
c0029912:	83 c4 0c             	add    esp,0xc
c0029915:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029916 <x87::~x87()>:
c0029916:	83 ec 0c             	sub    esp,0xc
c0029919:	ba fc da 02 c0       	mov    edx,0xc002dafc
c002991e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029922:	89 10                	mov    DWORD PTR [eax],edx
c0029924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	50                   	push   eax
c002992c:	e8 2b af fe ff       	call   c001485c <FPU::~FPU()>
c0029931:	83 c4 10             	add    esp,0x10
c0029934:	90                   	nop
c0029935:	83 c4 0c             	add    esp,0xc
c0029938:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002993a <x87::~x87()>:
c002993a:	83 ec 0c             	sub    esp,0xc
c002993d:	83 ec 0c             	sub    esp,0xc
c0029940:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029944:	e8 cd ff ff ff       	call   c0029916 <x87::~x87()>
c0029949:	83 c4 10             	add    esp,0x10
c002994c:	83 ec 08             	sub    esp,0x8
c002994f:	68 58 01 00 00       	push   0x158
c0029954:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029958:	e8 a4 94 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c002995d:	83 c4 10             	add    esp,0x10
c0029960:	83 c4 0c             	add    esp,0xc
c0029963:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029964 <IOAPIC::~IOAPIC()>:
c0029964:	83 ec 0c             	sub    esp,0xc
c0029967:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c002996c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029970:	89 10                	mov    DWORD PTR [eax],edx
c0029972:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029976:	83 ec 0c             	sub    esp,0xc
c0029979:	50                   	push   eax
c002997a:	e8 69 a8 fe ff       	call   c00141e8 <Device::~Device()>
c002997f:	83 c4 10             	add    esp,0x10
c0029982:	90                   	nop
c0029983:	83 c4 0c             	add    esp,0xc
c0029986:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029988 <IOAPIC::~IOAPIC()>:
c0029988:	83 ec 0c             	sub    esp,0xc
c002998b:	83 ec 0c             	sub    esp,0xc
c002998e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029992:	e8 cd ff ff ff       	call   c0029964 <IOAPIC::~IOAPIC()>
c0029997:	83 c4 10             	add    esp,0x10
c002999a:	83 ec 08             	sub    esp,0x8
c002999d:	68 68 01 00 00       	push   0x168
c00299a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a6:	e8 56 94 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00299ab:	83 c4 10             	add    esp,0x10
c00299ae:	83 c4 0c             	add    esp,0xc
c00299b1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299b2 <APIC::~APIC()>:
c00299b2:	83 ec 0c             	sub    esp,0xc
c00299b5:	ba 0c dc 02 c0       	mov    edx,0xc002dc0c
c00299ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299be:	89 10                	mov    DWORD PTR [eax],edx
c00299c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299c4:	83 ec 0c             	sub    esp,0xc
c00299c7:	50                   	push   eax
c00299c8:	e8 59 b3 fe ff       	call   c0014d26 <InterruptController::~InterruptController()>
c00299cd:	83 c4 10             	add    esp,0x10
c00299d0:	90                   	nop
c00299d1:	83 c4 0c             	add    esp,0xc
c00299d4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299d6 <APIC::~APIC()>:
c00299d6:	83 ec 0c             	sub    esp,0xc
c00299d9:	83 ec 0c             	sub    esp,0xc
c00299dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e0:	e8 cd ff ff ff       	call   c00299b2 <APIC::~APIC()>
c00299e5:	83 c4 10             	add    esp,0x10
c00299e8:	83 ec 08             	sub    esp,0x8
c00299eb:	68 58 21 00 00       	push   0x2158
c00299f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f4:	e8 08 94 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c00299f9:	83 c4 10             	add    esp,0x10
c00299fc:	83 c4 0c             	add    esp,0xc
c00299ff:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a00 <PIC::~PIC()>:
c0029a00:	83 ec 0c             	sub    esp,0xc
c0029a03:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0029a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0c:	89 10                	mov    DWORD PTR [eax],edx
c0029a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a12:	83 ec 0c             	sub    esp,0xc
c0029a15:	50                   	push   eax
c0029a16:	e8 0b b3 fe ff       	call   c0014d26 <InterruptController::~InterruptController()>
c0029a1b:	83 c4 10             	add    esp,0x10
c0029a1e:	90                   	nop
c0029a1f:	83 c4 0c             	add    esp,0xc
c0029a22:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a24 <PIC::~PIC()>:
c0029a24:	83 ec 0c             	sub    esp,0xc
c0029a27:	83 ec 0c             	sub    esp,0xc
c0029a2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a2e:	e8 cd ff ff ff       	call   c0029a00 <PIC::~PIC()>
c0029a33:	83 c4 10             	add    esp,0x10
c0029a36:	83 ec 08             	sub    esp,0x8
c0029a39:	68 58 21 00 00       	push   0x2158
c0029a3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a42:	e8 ba 93 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029a47:	83 c4 10             	add    esp,0x10
c0029a4a:	83 c4 0c             	add    esp,0xc
c0029a4d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a4e <APICTimer::~APICTimer()>:
c0029a4e:	83 ec 0c             	sub    esp,0xc
c0029a51:	ba f8 dc 02 c0       	mov    edx,0xc002dcf8
c0029a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a5a:	89 10                	mov    DWORD PTR [eax],edx
c0029a5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a60:	83 ec 0c             	sub    esp,0xc
c0029a63:	50                   	push   eax
c0029a64:	e8 73 d3 fe ff       	call   c0016ddc <Timer::~Timer()>
c0029a69:	83 c4 10             	add    esp,0x10
c0029a6c:	90                   	nop
c0029a6d:	83 c4 0c             	add    esp,0xc
c0029a70:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a72 <APICTimer::~APICTimer()>:
c0029a72:	83 ec 0c             	sub    esp,0xc
c0029a75:	83 ec 0c             	sub    esp,0xc
c0029a78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a7c:	e8 cd ff ff ff       	call   c0029a4e <APICTimer::~APICTimer()>
c0029a81:	83 c4 10             	add    esp,0x10
c0029a84:	83 ec 08             	sub    esp,0x8
c0029a87:	68 60 01 00 00       	push   0x160
c0029a8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a90:	e8 6c 93 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029a95:	83 c4 10             	add    esp,0x10
c0029a98:	83 c4 0c             	add    esp,0xc
c0029a9b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a9c <PIT::~PIT()>:
c0029a9c:	83 ec 0c             	sub    esp,0xc
c0029a9f:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c0029aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aa8:	89 10                	mov    DWORD PTR [eax],edx
c0029aaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aae:	83 ec 0c             	sub    esp,0xc
c0029ab1:	50                   	push   eax
c0029ab2:	e8 25 d3 fe ff       	call   c0016ddc <Timer::~Timer()>
c0029ab7:	83 c4 10             	add    esp,0x10
c0029aba:	90                   	nop
c0029abb:	83 c4 0c             	add    esp,0xc
c0029abe:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ac0 <PIT::~PIT()>:
c0029ac0:	83 ec 0c             	sub    esp,0xc
c0029ac3:	83 ec 0c             	sub    esp,0xc
c0029ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aca:	e8 cd ff ff ff       	call   c0029a9c <PIT::~PIT()>
c0029acf:	83 c4 10             	add    esp,0x10
c0029ad2:	83 ec 08             	sub    esp,0x8
c0029ad5:	68 5c 01 00 00       	push   0x15c
c0029ada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ade:	e8 1e 93 fe ff       	call   c0012e01 <operator delete(void*, unsigned long)>
c0029ae3:	83 c4 10             	add    esp,0x10
c0029ae6:	83 c4 0c             	add    esp,0xc
c0029ae9:	c3                   	ret    
