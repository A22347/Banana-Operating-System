
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 19 fc 00 00       	call   c000fc39 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 93 92 02 00       	call   c00292b8 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 4e 9f 02 c0       	mov    ebx,0xc0029f4e
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 5c 9f 02 c0    	cmp    ebx,0xc0029f5c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000049:	3d 58 e8 02 c0       	cmp    eax,0xc002e858
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 58 e8 02 c0       	push   0xc002e858
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 58 e8 02 c0       	mov    eax,0xc002e858
c0000075:	2d 58 e8 02 c0       	sub    eax,0xc002e858
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 58 e8 02 c0       	push   0xc002e858
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 88 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee88,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 64 9f 02 c0       	mov    ebx,0xc0029f64
c00000bb:	81 eb 60 9f 02 c0    	sub    ebx,0xc0029f60
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 60 9f 02 c0       	mov    esi,0xc0029f60
c00000ca:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 8c ee 02 c0       	mov    eax,ds:0xc002ee8c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 58 e8 02 c0       	push   0xc002e858
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 88 ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee88,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 90 ee 02 c0       	push   0xc002ee90
c000012c:	68 58 e8 02 c0       	push   0xc002e858
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 b5 db 01 00       	call   c001df58 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 82 28 01 00       	call   c0012c3d <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 93 db 01 00       	call   c001df58 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 3b e0 01 00       	call   c001e41f <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 99 e6 01 00       	call   c001ea86 <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 d0 f2 02 c0 	lgdtd  ds:0xc002f2d0
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 67 45 01 00       	call   c0014b49 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <hexCharToInt>:
c0000646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000064a:	d4 40                	aam    0x40
c000064c:	d5 39                	aad    0x39
c000064e:	2c 30                	sub    al,0x30
c0000650:	c3                   	ret    

c0000651 <hexStrToInt>:
c0000651:	56                   	push   esi
c0000652:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0000656:	31 d2                	xor    edx,edx

c0000658 <hexStrToInt.looping>:
c0000658:	ac                   	lods   al,BYTE PTR ds:[esi]
c0000659:	84 c0                	test   al,al
c000065b:	74 0d                	je     c000066a <hexStrToInt.end>
c000065d:	d4 40                	aam    0x40
c000065f:	d5 39                	aad    0x39
c0000661:	2c 30                	sub    al,0x30
c0000663:	c1 e2 04             	shl    edx,0x4
c0000666:	08 c2                	or     dl,al
c0000668:	eb ee                	jmp    c0000658 <hexStrToInt.looping>

c000066a <hexStrToInt.end>:
c000066a:	89 d0                	mov    eax,edx
c000066c:	5e                   	pop    esi
c000066d:	c3                   	ret    

c000066e <memcpy>:
c000066e:	e9 df de 00 00       	jmp    c000e552 <__not_memcpy>
c0000673:	90                   	nop

c0000674 <memcmp>:
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000067a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000067e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000682:	85 f6                	test   esi,esi
c0000684:	74 1d                	je     c00006a3 <memcmp+0x2f>
c0000686:	8a 08                	mov    cl,BYTE PTR [eax]
c0000688:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068b:	38 cb                	cmp    bl,cl
c000068d:	75 19                	jne    c00006a8 <memcmp+0x34>
c000068f:	01 c6                	add    esi,eax
c0000691:	eb 0a                	jmp    c000069d <memcmp+0x29>
c0000693:	90                   	nop
c0000694:	8a 08                	mov    cl,BYTE PTR [eax]
c0000696:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000699:	38 d9                	cmp    cl,bl
c000069b:	75 0b                	jne    c00006a8 <memcmp+0x34>
c000069d:	40                   	inc    eax
c000069e:	42                   	inc    edx
c000069f:	39 f0                	cmp    eax,esi
c00006a1:	75 f1                	jne    c0000694 <memcmp+0x20>
c00006a3:	31 c0                	xor    eax,eax
c00006a5:	5b                   	pop    ebx
c00006a6:	5e                   	pop    esi
c00006a7:	c3                   	ret    
c00006a8:	0f b6 c1             	movzx  eax,cl
c00006ab:	29 d8                	sub    eax,ebx
c00006ad:	5b                   	pop    ebx
c00006ae:	5e                   	pop    esi
c00006af:	c3                   	ret    

c00006b0 <memmove>:
c00006b0:	55                   	push   ebp
c00006b1:	57                   	push   edi
c00006b2:	56                   	push   esi
c00006b3:	53                   	push   ebx
c00006b4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006c0:	39 dd                	cmp    ebp,ebx
c00006c2:	0f 83 80 00 00 00    	jae    c0000748 <memmove+0x98>
c00006c8:	85 d2                	test   edx,edx
c00006ca:	74 74                	je     c0000740 <memmove+0x90>
c00006cc:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006cf:	8d 75 04             	lea    esi,[ebp+0x4]
c00006d2:	39 cd                	cmp    ebp,ecx
c00006d4:	0f 93 c1             	setae  cl
c00006d7:	39 f3                	cmp    ebx,esi
c00006d9:	0f 93 c0             	setae  al
c00006dc:	89 c6                	mov    esi,eax
c00006de:	09 ce                	or     esi,ecx
c00006e0:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006e3:	89 f0                	mov    eax,esi
c00006e5:	83 f9 0c             	cmp    ecx,0xc
c00006e8:	0f 97 c1             	seta   cl
c00006eb:	84 c8                	test   al,cl
c00006ed:	74 75                	je     c0000764 <memmove+0xb4>
c00006ef:	89 e9                	mov    ecx,ebp
c00006f1:	09 d9                	or     ecx,ebx
c00006f3:	83 e1 03             	and    ecx,0x3
c00006f6:	75 6c                	jne    c0000764 <memmove+0xb4>
c00006f8:	89 d7                	mov    edi,edx
c00006fa:	89 d9                	mov    ecx,ebx
c00006fc:	83 e7 fc             	and    edi,0xfffffffc
c00006ff:	89 ee                	mov    esi,ebp
c0000701:	01 df                	add    edi,ebx
c0000703:	90                   	nop
c0000704:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000706:	83 c6 04             	add    esi,0x4
c0000709:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c000070c:	83 c1 04             	add    ecx,0x4
c000070f:	39 f9                	cmp    ecx,edi
c0000711:	75 f1                	jne    c0000704 <memmove+0x54>
c0000713:	89 d1                	mov    ecx,edx
c0000715:	89 d7                	mov    edi,edx
c0000717:	83 e1 fc             	and    ecx,0xfffffffc
c000071a:	29 cf                	sub    edi,ecx
c000071c:	01 cb                	add    ebx,ecx
c000071e:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000722:	39 ca                	cmp    edx,ecx
c0000724:	74 1a                	je     c0000740 <memmove+0x90>
c0000726:	8a 03                	mov    al,BYTE PTR [ebx]
c0000728:	83 ff 01             	cmp    edi,0x1
c000072b:	88 06                	mov    BYTE PTR [esi],al
c000072d:	74 11                	je     c0000740 <memmove+0x90>
c000072f:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000732:	83 ff 02             	cmp    edi,0x2
c0000735:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000738:	74 06                	je     c0000740 <memmove+0x90>
c000073a:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c000073d:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000740:	5b                   	pop    ebx
c0000741:	89 e8                	mov    eax,ebp
c0000743:	5e                   	pop    esi
c0000744:	5f                   	pop    edi
c0000745:	5d                   	pop    ebp
c0000746:	c3                   	ret    
c0000747:	90                   	nop
c0000748:	76 f6                	jbe    c0000740 <memmove+0x90>
c000074a:	85 d2                	test   edx,edx
c000074c:	74 f2                	je     c0000740 <memmove+0x90>
c000074e:	4b                   	dec    ebx
c000074f:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000752:	66 90                	xchg   ax,ax
c0000754:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000757:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000075a:	4a                   	dec    edx
c000075b:	75 f7                	jne    c0000754 <memmove+0xa4>
c000075d:	5b                   	pop    ebx
c000075e:	89 e8                	mov    eax,ebp
c0000760:	5e                   	pop    esi
c0000761:	5f                   	pop    edi
c0000762:	5d                   	pop    ebp
c0000763:	c3                   	ret    
c0000764:	01 ea                	add    edx,ebp
c0000766:	89 e9                	mov    ecx,ebp
c0000768:	8a 03                	mov    al,BYTE PTR [ebx]
c000076a:	41                   	inc    ecx
c000076b:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000076e:	43                   	inc    ebx
c000076f:	39 d1                	cmp    ecx,edx
c0000771:	75 f5                	jne    c0000768 <memmove+0xb8>
c0000773:	eb cb                	jmp    c0000740 <memmove+0x90>
c0000775:	8d 76 00             	lea    esi,[esi+0x0]

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 a8 ee 02 c0       	mov    ds:0xc002eea8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 a8 ee 02 c0    	mov    DWORD PTR ds:0xc002eea8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d a8 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002eea8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 70 fc ff ff       	call   c0000674 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 80 9f 02 c0 02 	test   BYTE PTR [edx-0x3ffd6080],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 80 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd6080],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 80 9f 02 c0 08 	test   BYTE PTR [edx-0x3ffd6080],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 80 9f 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6080],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 80 9f 02 c0 01 	test   BYTE PTR [edx-0x3ffd6080],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d c0 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eec0
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 c4 ee 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd113c]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 c4 ee 02 c0 	mov    DWORD PTR [eax*4-0x3ffd113c],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d c0 ee 02 c0    	mov    DWORD PTR ds:0xc002eec0,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d fc ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002eefc
c0000e60:	c7 42 0c f4 ee 02 c0 	mov    DWORD PTR [edx+0xc],0xc002eef4
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 c0 ee 02 c0 02 	test   BYTE PTR ds:0xc002eec0,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 cf e7 00 00       	call   c000f710 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 11 e7 00 00       	call   c000f710 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 fb e6 00 00       	call   c000f710 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 d7 e6 00 00       	call   c000f710 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d c0 ee 02 c0    	mov    edi,DWORD PTR ds:0xc002eec0
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 c4 ee 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd113c]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 c4 ee 02 c0 	mov    DWORD PTR [edx*4-0x3ffd113c],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 f4 ee 02 c0 	lea    edx,[eax*8-0x3ffd110c]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 00 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002ef00
c00011e2:	81 fb f4 ee 02 c0    	cmp    ebx,0xc002eef4
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d f4 ee 02 c0       	cmp    eax,0xc002eef4
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d f0 ee 02 c0    	cmp    DWORD PTR ds:0xc002eef0,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 fc ee 02 c0       	mov    ds:0xc002eefc,eax
c000121e:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0001223:	a3 f0 ee 02 c0       	mov    ds:0xc002eef0,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001231:	c7 40 0c f4 ee 02 c0 	mov    DWORD PTR [eax+0xc],0xc002eef4
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 f4 ee 02 c0 	mov    DWORD PTR [eax+0x8],0xc002eef4
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 b8 ee 02 c0 	lea    ebp,[edx*4-0x3ffd1148]
c0001282:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 c0 ee 02 c0 	lea    ecx,[edx*4-0x3ffd1140]
c000129d:	8b 14 95 c0 ee 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1140]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd f4 f1 02 c0 	or     DWORD PTR [edi*4-0x3ffd0e0c],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 f4 ee 02 c0 	lea    eax,[eax*8-0x3ffd110c]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,ecx
c0001357:	89 0d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,ecx
c000135d:	c7 41 08 f4 ee 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002eef4
c0001364:	c7 41 0c f4 ee 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002eef4
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd ec ee 02 c0 	lea    edx,[ecx*8-0x3ffd1114]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d f4 f1 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd0e0c]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 ec ee 02 c0 	lea    edx,[eax*4-0x3ffd1114]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d f4 f1 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd0e0c],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d fc ee 02 c0    	mov    DWORD PTR ds:0xc002eefc,edi
c000142a:	89 3d 00 ef 02 c0    	mov    DWORD PTR ds:0xc002ef00,edi
c0001430:	c7 47 08 f4 ee 02 c0 	mov    DWORD PTR [edi+0x8],0xc002eef4
c0001437:	c7 47 0c f4 ee 02 c0 	mov    DWORD PTR [edi+0xc],0xc002eef4
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d f0 ee 02 c0    	mov    DWORD PTR ds:0xc002eef0,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba c0 ee 02 c0       	mov    edx,0xc002eec0
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 14 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f214
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 14 f2 02 c0    	mov    DWORD PTR ds:0xc002f214,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 6a 01 00 00       	jmp    c00017ed <dlrealloc+0x199>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bd 10 00 00 00       	mov    ebp,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c5                	mov    ebp,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 7b f8             	lea    edi,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f5                	cmp    ebp,esi
c00016a6:	0f 86 04 01 00 00    	jbe    c00017b0 <dlrealloc+0x15c>
c00016ac:	8d 14 37             	lea    edx,[edi+esi*1]
c00016af:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b2:	39 15 ec ee 02 c0    	cmp    DWORD PTR ds:0xc002eeec,edx
c00016b8:	75 33                	jne    c00016ed <dlrealloc+0x99>
c00016ba:	83 e1 fc             	and    ecx,0xfffffffc
c00016bd:	01 f1                	add    ecx,esi
c00016bf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c3:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00016c6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016ca:	77 49                	ja     c0001715 <dlrealloc+0xc1>
c00016cc:	01 ef                	add    edi,ebp
c00016ce:	83 e0 01             	and    eax,0x1
c00016d1:	09 e8                	or     eax,ebp
c00016d3:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d6:	89 3d ec ee 02 c0    	mov    DWORD PTR ds:0xc002eeec,edi
c00016dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e0:	29 e8                	sub    eax,ebp
c00016e2:	83 c8 01             	or     eax,0x1
c00016e5:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016e8:	e9 00 01 00 00       	jmp    c00017ed <dlrealloc+0x199>
c00016ed:	89 c8                	mov    eax,ecx
c00016ef:	83 e0 fe             	and    eax,0xfffffffe
c00016f2:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f7:	75 1c                	jne    c0001715 <dlrealloc+0xc1>
c00016f9:	83 e1 fc             	and    ecx,0xfffffffc
c00016fc:	01 f1                	add    ecx,esi
c00016fe:	39 cd                	cmp    ebp,ecx
c0001700:	77 13                	ja     c0001715 <dlrealloc+0xc1>
c0001702:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001705:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001708:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170b:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170e:	89 ce                	mov    esi,ecx
c0001710:	e9 9b 00 00 00       	jmp    c00017b0 <dlrealloc+0x15c>
c0001715:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001719:	8d 45 f9             	lea    eax,[ebp-0x7]
c000171c:	83 ec 0c             	sub    esp,0xc
c000171f:	50                   	push   eax
c0001720:	e8 f2 f9 ff ff       	call   c0001117 <dlmalloc>
c0001725:	83 c4 10             	add    esp,0x10
c0001728:	85 c0                	test   eax,eax
c000172a:	0f 84 4c ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001730:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001737:	39 ca                	cmp    edx,ecx
c0001739:	75 0a                	jne    c0001745 <dlrealloc+0xf1>
c000173b:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000173e:	83 e0 fc             	and    eax,0xfffffffc
c0001741:	01 c6                	add    esi,eax
c0001743:	eb 6b                	jmp    c00017b0 <dlrealloc+0x15c>
c0001745:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001748:	83 f9 27             	cmp    ecx,0x27
c000174b:	76 08                	jbe    c0001755 <dlrealloc+0x101>
c000174d:	89 de                	mov    esi,ebx
c000174f:	89 c7                	mov    edi,eax
c0001751:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001753:	eb 43                	jmp    c0001798 <dlrealloc+0x144>
c0001755:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001757:	83 f9 13             	cmp    ecx,0x13
c000175a:	89 10                	mov    DWORD PTR [eax],edx
c000175c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000175f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001762:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001765:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001768:	76 2e                	jbe    c0001798 <dlrealloc+0x144>
c000176a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000176d:	83 f9 1b             	cmp    ecx,0x1b
c0001770:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001773:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001776:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001779:	76 1d                	jbe    c0001798 <dlrealloc+0x144>
c000177b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000177e:	83 f9 23             	cmp    ecx,0x23
c0001781:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001784:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001787:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000178a:	76 0c                	jbe    c0001798 <dlrealloc+0x144>
c000178c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000178f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001792:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001795:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001798:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000179c:	83 ec 0c             	sub    esp,0xc
c000179f:	53                   	push   ebx
c00017a0:	e8 17 f6 ff ff       	call   c0000dbc <dlfree>
c00017a5:	83 c4 10             	add    esp,0x10
c00017a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017ac:	89 c3                	mov    ebx,eax
c00017ae:	eb 3d                	jmp    c00017ed <dlrealloc+0x199>
c00017b0:	89 f2                	mov    edx,esi
c00017b2:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017b5:	29 ea                	sub    edx,ebp
c00017b7:	83 e1 01             	and    ecx,0x1
c00017ba:	8d 04 37             	lea    eax,[edi+esi*1]
c00017bd:	83 fa 0f             	cmp    edx,0xf
c00017c0:	77 0b                	ja     c00017cd <dlrealloc+0x179>
c00017c2:	09 ce                	or     esi,ecx
c00017c4:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017c7:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017cb:	eb 20                	jmp    c00017ed <dlrealloc+0x199>
c00017cd:	01 ef                	add    edi,ebp
c00017cf:	83 ec 0c             	sub    esp,0xc
c00017d2:	09 cd                	or     ebp,ecx
c00017d4:	83 ca 01             	or     edx,0x1
c00017d7:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017da:	83 c7 08             	add    edi,0x8
c00017dd:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017e0:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017e4:	57                   	push   edi
c00017e5:	e8 d2 f5 ff ff       	call   c0000dbc <dlfree>
c00017ea:	83 c4 10             	add    esp,0x10
c00017ed:	83 c4 1c             	add    esp,0x1c
c00017f0:	89 d8                	mov    eax,ebx
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlmemalign>:
c00017f7:	55                   	push   ebp
c00017f8:	57                   	push   edi
c00017f9:	56                   	push   esi
c00017fa:	53                   	push   ebx
c00017fb:	83 ec 0c             	sub    esp,0xc
c00017fe:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001802:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001806:	83 fa 08             	cmp    edx,0x8
c0001809:	77 10                	ja     c000181b <dlmemalign+0x24>
c000180b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	e9 fc f8 ff ff       	jmp    c0001117 <dlmalloc>
c000181b:	bf 10 00 00 00       	mov    edi,0x10
c0001820:	83 fa 0f             	cmp    edx,0xf
c0001823:	76 13                	jbe    c0001838 <dlmemalign+0x41>
c0001825:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001828:	85 d1                	test   ecx,edx
c000182a:	75 04                	jne    c0001830 <dlmemalign+0x39>
c000182c:	89 d7                	mov    edi,edx
c000182e:	eb 08                	jmp    c0001838 <dlmemalign+0x41>
c0001830:	39 d7                	cmp    edi,edx
c0001832:	73 04                	jae    c0001838 <dlmemalign+0x41>
c0001834:	01 ff                	add    edi,edi
c0001836:	eb f8                	jmp    c0001830 <dlmemalign+0x39>
c0001838:	83 f8 df             	cmp    eax,0xffffffdf
c000183b:	76 07                	jbe    c0001844 <dlmemalign+0x4d>
c000183d:	31 c0                	xor    eax,eax
c000183f:	e9 ce 00 00 00       	jmp    c0001912 <dlmemalign+0x11b>
c0001844:	83 c0 0b             	add    eax,0xb
c0001847:	bd 10 00 00 00       	mov    ebp,0x10
c000184c:	83 f8 0f             	cmp    eax,0xf
c000184f:	76 05                	jbe    c0001856 <dlmemalign+0x5f>
c0001851:	83 e0 f8             	and    eax,0xfffffff8
c0001854:	89 c5                	mov    ebp,eax
c0001856:	83 ec 0c             	sub    esp,0xc
c0001859:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000185d:	50                   	push   eax
c000185e:	e8 b4 f8 ff ff       	call   c0001117 <dlmalloc>
c0001863:	83 c4 10             	add    esp,0x10
c0001866:	89 c1                	mov    ecx,eax
c0001868:	85 c0                	test   eax,eax
c000186a:	74 d1                	je     c000183d <dlmemalign+0x46>
c000186c:	31 d2                	xor    edx,edx
c000186e:	8d 70 f8             	lea    esi,[eax-0x8]
c0001871:	f7 f7                	div    edi
c0001873:	85 d2                	test   edx,edx
c0001875:	74 62                	je     c00018d9 <dlmemalign+0xe2>
c0001877:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000187b:	89 f8                	mov    eax,edi
c000187d:	f7 d8                	neg    eax
c000187f:	21 c3                	and    ebx,eax
c0001881:	83 eb 08             	sub    ebx,0x8
c0001884:	89 d8                	mov    eax,ebx
c0001886:	29 f0                	sub    eax,esi
c0001888:	83 f8 0f             	cmp    eax,0xf
c000188b:	77 02                	ja     c000188f <dlmemalign+0x98>
c000188d:	01 fb                	add    ebx,edi
c000188f:	89 d8                	mov    eax,ebx
c0001891:	29 f0                	sub    eax,esi
c0001893:	89 c6                	mov    esi,eax
c0001895:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001898:	89 c2                	mov    edx,eax
c000189a:	83 e2 fc             	and    edx,0xfffffffc
c000189d:	29 f2                	sub    edx,esi
c000189f:	a8 02                	test   al,0x2
c00018a1:	74 10                	je     c00018b3 <dlmemalign+0xbc>
c00018a3:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018a6:	83 ca 02             	or     edx,0x2
c00018a9:	8d 43 08             	lea    eax,[ebx+0x8]
c00018ac:	89 33                	mov    DWORD PTR [ebx],esi
c00018ae:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018b1:	eb 5f                	jmp    c0001912 <dlmemalign+0x11b>
c00018b3:	83 ec 0c             	sub    esp,0xc
c00018b6:	89 d0                	mov    eax,edx
c00018b8:	83 c8 01             	or     eax,0x1
c00018bb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018be:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018c3:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018c6:	83 e0 01             	and    eax,0x1
c00018c9:	09 f0                	or     eax,esi
c00018cb:	89 de                	mov    esi,ebx
c00018cd:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018d0:	51                   	push   ecx
c00018d1:	e8 e6 f4 ff ff       	call   c0000dbc <dlfree>
c00018d6:	83 c4 10             	add    esp,0x10
c00018d9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018dc:	a8 02                	test   al,0x2
c00018de:	75 2f                	jne    c000190f <dlmemalign+0x118>
c00018e0:	83 e0 fc             	and    eax,0xfffffffc
c00018e3:	8d 55 10             	lea    edx,[ebp+0x10]
c00018e6:	39 c2                	cmp    edx,eax
c00018e8:	73 25                	jae    c000190f <dlmemalign+0x118>
c00018ea:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ed:	83 ec 0c             	sub    esp,0xc
c00018f0:	29 e8                	sub    eax,ebp
c00018f2:	83 c2 08             	add    edx,0x8
c00018f5:	83 c8 01             	or     eax,0x1
c00018f8:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018fb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018fe:	83 e0 01             	and    eax,0x1
c0001901:	09 c5                	or     ebp,eax
c0001903:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001906:	52                   	push   edx
c0001907:	e8 b0 f4 ff ff       	call   c0000dbc <dlfree>
c000190c:	83 c4 10             	add    esp,0x10
c000190f:	8d 46 08             	lea    eax,[esi+0x8]
c0001912:	83 c4 0c             	add    esp,0xc
c0001915:	5b                   	pop    ebx
c0001916:	5e                   	pop    esi
c0001917:	5f                   	pop    edi
c0001918:	5d                   	pop    ebp
c0001919:	c3                   	ret    

c000191a <dlcalloc>:
c000191a:	53                   	push   ebx
c000191b:	83 ec 14             	sub    esp,0x14
c000191e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001922:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001927:	50                   	push   eax
c0001928:	e8 ea f7 ff ff       	call   c0001117 <dlmalloc>
c000192d:	83 c4 10             	add    esp,0x10
c0001930:	89 c3                	mov    ebx,eax
c0001932:	85 c0                	test   eax,eax
c0001934:	74 77                	je     c00019ad <dlcalloc+0x93>
c0001936:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001939:	89 d0                	mov    eax,edx
c000193b:	83 e0 fc             	and    eax,0xfffffffc
c000193e:	80 e2 02             	and    dl,0x2
c0001941:	75 5a                	jne    c000199d <dlcalloc+0x83>
c0001943:	83 e8 04             	sub    eax,0x4
c0001946:	83 f8 27             	cmp    eax,0x27
c0001949:	76 03                	jbe    c000194e <dlcalloc+0x34>
c000194b:	51                   	push   ecx
c000194c:	eb 53                	jmp    c00019a1 <dlcalloc+0x87>
c000194e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001954:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000195b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001962:	83 f8 13             	cmp    eax,0x13
c0001965:	76 46                	jbe    c00019ad <dlcalloc+0x93>
c0001967:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000196e:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001975:	83 f8 1b             	cmp    eax,0x1b
c0001978:	76 33                	jbe    c00019ad <dlcalloc+0x93>
c000197a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001981:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001988:	83 f8 23             	cmp    eax,0x23
c000198b:	76 20                	jbe    c00019ad <dlcalloc+0x93>
c000198d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001994:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000199b:	eb 10                	jmp    c00019ad <dlcalloc+0x93>
c000199d:	83 e8 08             	sub    eax,0x8
c00019a0:	52                   	push   edx
c00019a1:	50                   	push   eax
c00019a2:	6a 00                	push   0x0
c00019a4:	53                   	push   ebx
c00019a5:	e8 ce ed ff ff       	call   c0000778 <memset>
c00019aa:	83 c4 10             	add    esp,0x10
c00019ad:	89 d8                	mov    eax,ebx
c00019af:	83 c4 08             	add    esp,0x8
c00019b2:	5b                   	pop    ebx
c00019b3:	c3                   	ret    

c00019b4 <dlcfree>:
c00019b4:	e9 03 f4 ff ff       	jmp    c0000dbc <dlfree>

c00019b9 <dlindependent_calloc>:
c00019b9:	83 ec 28             	sub    esp,0x28
c00019bc:	b9 03 00 00 00       	mov    ecx,0x3
c00019c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d5:	e8 cb fa ff ff       	call   c00014a5 <iALLOc>
c00019da:	83 c4 2c             	add    esp,0x2c
c00019dd:	c3                   	ret    

c00019de <dlindependent_comalloc>:
c00019de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e6:	31 c9                	xor    ecx,ecx
c00019e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019f0:	e9 b0 fa ff ff       	jmp    c00014a5 <iALLOc>

c00019f5 <dlvalloc>:
c00019f5:	83 ec 0c             	sub    esp,0xc
c00019f8:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c00019ff:	75 0a                	jne    c0001a0b <dlvalloc+0x16>
c0001a01:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a06:	e8 ca f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a0b:	50                   	push   eax
c0001a0c:	50                   	push   eax
c0001a0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a11:	ff 35 1c f2 02 c0    	push   DWORD PTR ds:0xc002f21c
c0001a17:	e8 db fd ff ff       	call   c00017f7 <dlmemalign>
c0001a1c:	83 c4 1c             	add    esp,0x1c
c0001a1f:	c3                   	ret    

c0001a20 <dlpvalloc>:
c0001a20:	83 ec 0c             	sub    esp,0xc
c0001a23:	83 3d c0 ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eec0,0x0
c0001a2a:	75 0a                	jne    c0001a36 <dlpvalloc+0x16>
c0001a2c:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a31:	e8 9f f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a36:	a1 1c f2 02 c0       	mov    eax,ds:0xc002f21c
c0001a3b:	89 c1                	mov    ecx,eax
c0001a3d:	52                   	push   edx
c0001a3e:	f7 d9                	neg    ecx
c0001a40:	52                   	push   edx
c0001a41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a45:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a49:	21 ca                	and    edx,ecx
c0001a4b:	52                   	push   edx
c0001a4c:	50                   	push   eax
c0001a4d:	e8 a5 fd ff ff       	call   c00017f7 <dlmemalign>
c0001a52:	83 c4 1c             	add    esp,0x1c
c0001a55:	c3                   	ret    

c0001a56 <dlmalloc_trim>:
c0001a56:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001a5b:	e8 75 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a60:	31 c0                	xor    eax,eax
c0001a62:	c3                   	ret    

c0001a63 <dlmalloc_usable_size>:
c0001a63:	53                   	push   ebx
c0001a64:	31 c0                	xor    eax,eax
c0001a66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a6a:	85 c9                	test   ecx,ecx
c0001a6c:	74 24                	je     c0001a92 <dlmalloc_usable_size+0x2f>
c0001a6e:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a71:	f6 c2 02             	test   dl,0x2
c0001a74:	74 08                	je     c0001a7e <dlmalloc_usable_size+0x1b>
c0001a76:	83 e2 fc             	and    edx,0xfffffffc
c0001a79:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a7c:	eb 14                	jmp    c0001a92 <dlmalloc_usable_size+0x2f>
c0001a7e:	89 d3                	mov    ebx,edx
c0001a80:	31 c0                	xor    eax,eax
c0001a82:	83 e3 fe             	and    ebx,0xfffffffe
c0001a85:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a8a:	74 06                	je     c0001a92 <dlmalloc_usable_size+0x2f>
c0001a8c:	83 e2 fc             	and    edx,0xfffffffc
c0001a8f:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a92:	5b                   	pop    ebx
c0001a93:	c3                   	ret    

c0001a94 <dlmallinfo>:
c0001a94:	55                   	push   ebp
c0001a95:	57                   	push   edi
c0001a96:	56                   	push   esi
c0001a97:	53                   	push   ebx
c0001a98:	83 ec 08             	sub    esp,0x8
c0001a9b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a9f:	83 3d ec ee 02 c0 00 	cmp    DWORD PTR ds:0xc002eeec,0x0
c0001aa6:	75 0a                	jne    c0001ab2 <dlmallinfo+0x1e>
c0001aa8:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001aad:	e8 23 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ab2:	a1 ec ee 02 c0       	mov    eax,ds:0xc002eeec
c0001ab7:	31 ed                	xor    ebp,ebp
c0001ab9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001abc:	31 c9                	xor    ecx,ecx
c0001abe:	83 e0 fc             	and    eax,0xfffffffc
c0001ac1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ac5:	31 c0                	xor    eax,eax
c0001ac7:	8b 14 85 c4 ee 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd113c]
c0001ace:	85 d2                	test   edx,edx
c0001ad0:	74 0e                	je     c0001ae0 <dlmallinfo+0x4c>
c0001ad2:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ad5:	45                   	inc    ebp
c0001ad6:	83 e6 fc             	and    esi,0xfffffffc
c0001ad9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001adc:	01 f1                	add    ecx,esi
c0001ade:	eb ee                	jmp    c0001ace <dlmallinfo+0x3a>
c0001ae0:	40                   	inc    eax
c0001ae1:	83 f8 0a             	cmp    eax,0xa
c0001ae4:	75 e1                	jne    c0001ac7 <dlmallinfo+0x33>
c0001ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001aea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001af1:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001af4:	b8 f4 ee 02 c0       	mov    eax,0xc002eef4
c0001af9:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001afc:	39 f0                	cmp    eax,esi
c0001afe:	74 10                	je     c0001b10 <dlmallinfo+0x7c>
c0001b00:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b03:	ff 04 24             	inc    DWORD PTR [esp]
c0001b06:	83 e7 fc             	and    edi,0xfffffffc
c0001b09:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b0c:	01 fa                	add    edx,edi
c0001b0e:	eb ec                	jmp    c0001afc <dlmallinfo+0x68>
c0001b10:	83 c0 08             	add    eax,0x8
c0001b13:	3d ec f1 02 c0       	cmp    eax,0xc002f1ec
c0001b18:	75 df                	jne    c0001af9 <dlmallinfo+0x65>
c0001b1a:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b1d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b20:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b23:	a1 28 f2 02 c0       	mov    eax,ds:0xc002f228
c0001b28:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b2b:	89 03                	mov    DWORD PTR [ebx],eax
c0001b2d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b30:	8b 35 10 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f210
c0001b36:	29 d0                	sub    eax,edx
c0001b38:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b3b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b3e:	8b 35 24 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f224
c0001b44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b48:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b4b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b4e:	8b 35 34 f2 02 c0    	mov    esi,DWORD PTR ds:0xc002f234
c0001b54:	89 d8                	mov    eax,ebx
c0001b56:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b59:	83 c4 08             	add    esp,0x8
c0001b5c:	5b                   	pop    ebx
c0001b5d:	5e                   	pop    esi
c0001b5e:	5f                   	pop    edi
c0001b5f:	5d                   	pop    ebp
c0001b60:	c2 04 00             	ret    0x4

c0001b63 <dlmalloc_stats>:
c0001b63:	83 ec 30             	sub    esp,0x30
c0001b66:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b6a:	50                   	push   eax
c0001b6b:	e8 24 ff ff ff       	call   c0001a94 <dlmallinfo>
c0001b70:	83 c4 30             	add    esp,0x30
c0001b73:	c3                   	ret    

c0001b74 <dlmallopt>:
c0001b74:	56                   	push   esi
c0001b75:	b8 c0 ee 02 c0       	mov    eax,0xc002eec0
c0001b7a:	53                   	push   ebx
c0001b7b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b83:	e8 4d f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b88:	8d 46 04             	lea    eax,[esi+0x4]
c0001b8b:	83 f8 05             	cmp    eax,0x5
c0001b8e:	77 67                	ja     c0001bf7 <dlmallopt+0x83>
c0001b90:	ff 24 85 84 a0 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5f7c]
c0001b97:	83 fb 50             	cmp    ebx,0x50
c0001b9a:	77 5b                	ja     c0001bf7 <dlmallopt+0x83>
c0001b9c:	ba 08 00 00 00       	mov    edx,0x8
c0001ba1:	85 db                	test   ebx,ebx
c0001ba3:	74 12                	je     c0001bb7 <dlmallopt+0x43>
c0001ba5:	83 c3 0b             	add    ebx,0xb
c0001ba8:	ba 10 00 00 00       	mov    edx,0x10
c0001bad:	83 fb 0f             	cmp    ebx,0xf
c0001bb0:	76 05                	jbe    c0001bb7 <dlmallopt+0x43>
c0001bb2:	89 da                	mov    edx,ebx
c0001bb4:	83 e2 f8             	and    edx,0xfffffff8
c0001bb7:	a1 c0 ee 02 c0       	mov    eax,ds:0xc002eec0
c0001bbc:	83 e0 03             	and    eax,0x3
c0001bbf:	09 d0                	or     eax,edx
c0001bc1:	a3 c0 ee 02 c0       	mov    ds:0xc002eec0,eax
c0001bc6:	eb 31                	jmp    c0001bf9 <dlmallopt+0x85>
c0001bc8:	89 1d 04 f2 02 c0    	mov    DWORD PTR ds:0xc002f204,ebx
c0001bce:	eb 06                	jmp    c0001bd6 <dlmallopt+0x62>
c0001bd0:	89 1d 08 f2 02 c0    	mov    DWORD PTR ds:0xc002f208,ebx
c0001bd6:	be 01 00 00 00       	mov    esi,0x1
c0001bdb:	eb 1c                	jmp    c0001bf9 <dlmallopt+0x85>
c0001bdd:	89 1d 0c f2 02 c0    	mov    DWORD PTR ds:0xc002f20c,ebx
c0001be3:	eb f1                	jmp    c0001bd6 <dlmallopt+0x62>
c0001be5:	31 f6                	xor    esi,esi
c0001be7:	85 db                	test   ebx,ebx
c0001be9:	75 0e                	jne    c0001bf9 <dlmallopt+0x85>
c0001beb:	c7 05 14 f2 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f214,0x0
c0001bf5:	eb df                	jmp    c0001bd6 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	89 f0                	mov    eax,esi
c0001bfb:	5b                   	pop    ebx
c0001bfc:	5e                   	pop    esi
c0001bfd:	c3                   	ret    

c0001bfe <disk_status>:
c0001bfe:	31 c0                	xor    eax,eax
c0001c00:	c3                   	ret    

c0001c01 <disk_initialize>:
c0001c01:	31 c0                	xor    eax,eax
c0001c03:	c3                   	ret    

c0001c04 <disk_read>:
c0001c04:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c09:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001c11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c15:	e9 36 fb 01 00       	jmp    c0021750 <fatWrapperReadDisk>

c0001c1a <disk_write>:
c0001c1a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1f:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001c27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c2b:	e9 67 fb 01 00       	jmp    c0021797 <fatWrapperWriteDisk>

c0001c30 <disk_ioctl>:
c0001c30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c35:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c39:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c3e:	0f b6 04 85 a0 29 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcd660]
c0001c46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c4a:	e9 8f fb 01 00       	jmp    c00217de <fatWrapperIoctl>

c0001c4f <ld_word>:
c0001c4f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c53:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c56:	c1 e2 08             	shl    edx,0x8
c0001c59:	09 d0                	or     eax,edx
c0001c5b:	c3                   	ret    

c0001c5c <ld_dword>:
c0001c5c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c60:	89 d1                	mov    ecx,edx
c0001c62:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c66:	c1 e1 08             	shl    ecx,0x8
c0001c69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c6c:	09 ca                	or     edx,ecx
c0001c6e:	c1 e2 08             	shl    edx,0x8
c0001c71:	09 d0                	or     eax,edx
c0001c73:	c3                   	ret    

c0001c74 <ld_qword>:
c0001c74:	57                   	push   edi
c0001c75:	56                   	push   esi
c0001c76:	53                   	push   ebx
c0001c77:	31 db                	xor    ebx,ebx
c0001c79:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c7c:	89 df                	mov    edi,ebx
c0001c7e:	89 ce                	mov    esi,ecx
c0001c80:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c84:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c88:	c1 e6 08             	shl    esi,0x8
c0001c8b:	09 f2                	or     edx,esi
c0001c8d:	89 d6                	mov    esi,edx
c0001c8f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c93:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c97:	c1 e6 08             	shl    esi,0x8
c0001c9a:	09 f2                	or     edx,esi
c0001c9c:	89 d6                	mov    esi,edx
c0001c9e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ca2:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	89 fb                	mov    ebx,edi
c0001cae:	09 f2                	or     edx,esi
c0001cb0:	89 d1                	mov    ecx,edx
c0001cb2:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cb6:	c1 e1 08             	shl    ecx,0x8
c0001cb9:	89 da                	mov    edx,ebx
c0001cbb:	09 c8                	or     eax,ecx
c0001cbd:	5b                   	pop    ebx
c0001cbe:	5e                   	pop    esi
c0001cbf:	5f                   	pop    edi
c0001cc0:	c3                   	ret    

c0001cc1 <st_word>:
c0001cc1:	66 89 10             	mov    WORD PTR [eax],dx
c0001cc4:	c3                   	ret    

c0001cc5 <st_dword>:
c0001cc5:	89 10                	mov    DWORD PTR [eax],edx
c0001cc7:	c3                   	ret    

c0001cc8 <st_qword>:
c0001cc8:	89 10                	mov    DWORD PTR [eax],edx
c0001cca:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ccd:	c3                   	ret    

c0001cce <mem_cpy>:
c0001cce:	85 c9                	test   ecx,ecx
c0001cd0:	74 10                	je     c0001ce2 <mem_cpy+0x14>
c0001cd2:	57                   	push   edi
c0001cd3:	01 c1                	add    ecx,eax
c0001cd5:	56                   	push   esi
c0001cd6:	89 c7                	mov    edi,eax
c0001cd8:	89 d6                	mov    esi,edx
c0001cda:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cdb:	39 f9                	cmp    ecx,edi
c0001cdd:	75 fb                	jne    c0001cda <mem_cpy+0xc>
c0001cdf:	5e                   	pop    esi
c0001ce0:	5f                   	pop    edi
c0001ce1:	c3                   	ret    
c0001ce2:	c3                   	ret    

c0001ce3 <mem_set>:
c0001ce3:	01 c1                	add    ecx,eax
c0001ce5:	40                   	inc    eax
c0001ce6:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ce9:	39 c8                	cmp    eax,ecx
c0001ceb:	75 f8                	jne    c0001ce5 <mem_set+0x2>
c0001ced:	c3                   	ret    

c0001cee <mem_cmp>:
c0001cee:	57                   	push   edi
c0001cef:	56                   	push   esi
c0001cf0:	89 c6                	mov    esi,eax
c0001cf2:	53                   	push   ebx
c0001cf3:	46                   	inc    esi
c0001cf4:	42                   	inc    edx
c0001cf5:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cf9:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cfd:	29 fb                	sub    ebx,edi
c0001cff:	89 cf                	mov    edi,ecx
c0001d01:	29 f7                	sub    edi,esi
c0001d03:	01 c7                	add    edi,eax
c0001d05:	74 04                	je     c0001d0b <mem_cmp+0x1d>
c0001d07:	85 db                	test   ebx,ebx
c0001d09:	74 e8                	je     c0001cf3 <mem_cmp+0x5>
c0001d0b:	89 d8                	mov    eax,ebx
c0001d0d:	5b                   	pop    ebx
c0001d0e:	5e                   	pop    esi
c0001d0f:	5f                   	pop    edi
c0001d10:	c3                   	ret    

c0001d11 <chk_chr>:
c0001d11:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d14:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d17:	74 07                	je     c0001d20 <chk_chr+0xf>
c0001d19:	39 d1                	cmp    ecx,edx
c0001d1b:	74 03                	je     c0001d20 <chk_chr+0xf>
c0001d1d:	40                   	inc    eax
c0001d1e:	eb f1                	jmp    c0001d11 <chk_chr>
c0001d20:	89 c8                	mov    eax,ecx
c0001d22:	c3                   	ret    

c0001d23 <dbc_1st>:
c0001d23:	31 c0                	xor    eax,eax
c0001d25:	c3                   	ret    

c0001d26 <dbc_2nd>:
c0001d26:	31 c0                	xor    eax,eax
c0001d28:	c3                   	ret    

c0001d29 <tchar2uni>:
c0001d29:	57                   	push   edi
c0001d2a:	89 c7                	mov    edi,eax
c0001d2c:	56                   	push   esi
c0001d2d:	53                   	push   ebx
c0001d2e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d30:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d32:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d35:	84 c9                	test   cl,cl
c0001d37:	78 0a                	js     c0001d43 <tchar2uni+0x1a>
c0001d39:	0f b6 d1             	movzx  edx,cl
c0001d3c:	89 f3                	mov    ebx,esi
c0001d3e:	e9 9f 00 00 00       	jmp    c0001de2 <tchar2uni+0xb9>
c0001d43:	88 ca                	mov    dl,cl
c0001d45:	83 e2 e0             	and    edx,0xffffffe0
c0001d48:	80 fa c0             	cmp    dl,0xc0
c0001d4b:	75 0c                	jne    c0001d59 <tchar2uni+0x30>
c0001d4d:	89 ca                	mov    edx,ecx
c0001d4f:	b9 01 00 00 00       	mov    ecx,0x1
c0001d54:	83 e2 1f             	and    edx,0x1f
c0001d57:	eb 2e                	jmp    c0001d87 <tchar2uni+0x5e>
c0001d59:	88 ca                	mov    dl,cl
c0001d5b:	83 e2 f0             	and    edx,0xfffffff0
c0001d5e:	80 fa e0             	cmp    dl,0xe0
c0001d61:	75 0c                	jne    c0001d6f <tchar2uni+0x46>
c0001d63:	89 ca                	mov    edx,ecx
c0001d65:	b9 02 00 00 00       	mov    ecx,0x2
c0001d6a:	83 e2 0f             	and    edx,0xf
c0001d6d:	eb 18                	jmp    c0001d87 <tchar2uni+0x5e>
c0001d6f:	88 ca                	mov    dl,cl
c0001d71:	83 e2 f8             	and    edx,0xfffffff8
c0001d74:	88 d0                	mov    al,dl
c0001d76:	83 ca ff             	or     edx,0xffffffff
c0001d79:	3c f0                	cmp    al,0xf0
c0001d7b:	75 6c                	jne    c0001de9 <tchar2uni+0xc0>
c0001d7d:	89 ca                	mov    edx,ecx
c0001d7f:	b9 03 00 00 00       	mov    ecx,0x3
c0001d84:	83 e2 07             	and    edx,0x7
c0001d87:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d8b:	46                   	inc    esi
c0001d8c:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d8f:	88 c8                	mov    al,cl
c0001d91:	83 e0 c0             	and    eax,0xffffffc0
c0001d94:	3c 80                	cmp    al,0x80
c0001d96:	75 4e                	jne    c0001de6 <tchar2uni+0xbd>
c0001d98:	c1 e2 06             	shl    edx,0x6
c0001d9b:	83 e1 3f             	and    ecx,0x3f
c0001d9e:	09 ca                	or     edx,ecx
c0001da0:	39 de                	cmp    esi,ebx
c0001da2:	75 e7                	jne    c0001d8b <tchar2uni+0x62>
c0001da4:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001da7:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dad:	77 37                	ja     c0001de6 <tchar2uni+0xbd>
c0001daf:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001db5:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dbb:	76 29                	jbe    c0001de6 <tchar2uni+0xbd>
c0001dbd:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dc3:	76 1d                	jbe    c0001de2 <tchar2uni+0xb9>
c0001dc5:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dcb:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dd1:	c1 e1 06             	shl    ecx,0x6
c0001dd4:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dda:	09 ca                	or     edx,ecx
c0001ddc:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001de2:	89 1f                	mov    DWORD PTR [edi],ebx
c0001de4:	eb 03                	jmp    c0001de9 <tchar2uni+0xc0>
c0001de6:	83 ca ff             	or     edx,0xffffffff
c0001de9:	5b                   	pop    ebx
c0001dea:	89 d0                	mov    eax,edx
c0001dec:	5e                   	pop    esi
c0001ded:	5f                   	pop    edi
c0001dee:	c3                   	ret    

c0001def <put_utf>:
c0001def:	53                   	push   ebx
c0001df0:	83 f8 7f             	cmp    eax,0x7f
c0001df3:	89 c3                	mov    ebx,eax
c0001df5:	b0 00                	mov    al,0x0
c0001df7:	77 11                	ja     c0001e0a <put_utf+0x1b>
c0001df9:	85 c9                	test   ecx,ecx
c0001dfb:	0f 84 e5 00 00 00    	je     c0001ee6 <put_utf+0xf7>
c0001e01:	88 1a                	mov    BYTE PTR [edx],bl
c0001e03:	b0 01                	mov    al,0x1
c0001e05:	e9 dc 00 00 00       	jmp    c0001ee6 <put_utf+0xf7>
c0001e0a:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e10:	77 23                	ja     c0001e35 <put_utf+0x46>
c0001e12:	83 f9 01             	cmp    ecx,0x1
c0001e15:	0f 86 cb 00 00 00    	jbe    c0001ee6 <put_utf+0xf7>
c0001e1b:	89 d8                	mov    eax,ebx
c0001e1d:	83 e3 3f             	and    ebx,0x3f
c0001e20:	c1 e8 06             	shr    eax,0x6
c0001e23:	83 cb 80             	or     ebx,0xffffff80
c0001e26:	83 c8 c0             	or     eax,0xffffffc0
c0001e29:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e2c:	88 02                	mov    BYTE PTR [edx],al
c0001e2e:	b0 02                	mov    al,0x2
c0001e30:	e9 b1 00 00 00       	jmp    c0001ee6 <put_utf+0xf7>
c0001e35:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e3b:	77 40                	ja     c0001e7d <put_utf+0x8e>
c0001e3d:	83 f9 02             	cmp    ecx,0x2
c0001e40:	0f 86 a0 00 00 00    	jbe    c0001ee6 <put_utf+0xf7>
c0001e46:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e4c:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e52:	0f 86 8e 00 00 00    	jbe    c0001ee6 <put_utf+0xf7>
c0001e58:	89 d8                	mov    eax,ebx
c0001e5a:	c1 e8 0c             	shr    eax,0xc
c0001e5d:	83 c8 e0             	or     eax,0xffffffe0
c0001e60:	88 02                	mov    BYTE PTR [edx],al
c0001e62:	89 d8                	mov    eax,ebx
c0001e64:	83 e3 3f             	and    ebx,0x3f
c0001e67:	c1 e8 06             	shr    eax,0x6
c0001e6a:	83 cb 80             	or     ebx,0xffffff80
c0001e6d:	83 e0 3f             	and    eax,0x3f
c0001e70:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e73:	83 c8 80             	or     eax,0xffffff80
c0001e76:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e79:	b0 03                	mov    al,0x3
c0001e7b:	eb 69                	jmp    c0001ee6 <put_utf+0xf7>
c0001e7d:	83 f9 03             	cmp    ecx,0x3
c0001e80:	76 64                	jbe    c0001ee6 <put_utf+0xf7>
c0001e82:	89 d9                	mov    ecx,ebx
c0001e84:	0f b7 c3             	movzx  eax,bx
c0001e87:	66 31 c9             	xor    cx,cx
c0001e8a:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e90:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e96:	c1 e9 06             	shr    ecx,0x6
c0001e99:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e9f:	77 43                	ja     c0001ee4 <put_utf+0xf5>
c0001ea1:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001ea7:	77 3b                	ja     c0001ee4 <put_utf+0xf5>
c0001ea9:	09 cb                	or     ebx,ecx
c0001eab:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001eb1:	89 d8                	mov    eax,ebx
c0001eb3:	c1 e8 12             	shr    eax,0x12
c0001eb6:	83 c8 f0             	or     eax,0xfffffff0
c0001eb9:	88 02                	mov    BYTE PTR [edx],al
c0001ebb:	89 d8                	mov    eax,ebx
c0001ebd:	c1 e8 0c             	shr    eax,0xc
c0001ec0:	83 e0 3f             	and    eax,0x3f
c0001ec3:	83 c8 80             	or     eax,0xffffff80
c0001ec6:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ec9:	89 d8                	mov    eax,ebx
c0001ecb:	83 e3 3f             	and    ebx,0x3f
c0001ece:	c1 e8 06             	shr    eax,0x6
c0001ed1:	83 cb 80             	or     ebx,0xffffff80
c0001ed4:	83 e0 3f             	and    eax,0x3f
c0001ed7:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eda:	83 c8 80             	or     eax,0xffffff80
c0001edd:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ee0:	b0 04                	mov    al,0x4
c0001ee2:	eb 02                	jmp    c0001ee6 <put_utf+0xf7>
c0001ee4:	31 c0                	xor    eax,eax
c0001ee6:	5b                   	pop    ebx
c0001ee7:	c3                   	ret    

c0001ee8 <clst2sect>:
c0001ee8:	89 c1                	mov    ecx,eax
c0001eea:	83 ea 02             	sub    edx,0x2
c0001eed:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ef0:	83 e8 02             	sub    eax,0x2
c0001ef3:	39 d0                	cmp    eax,edx
c0001ef5:	76 0d                	jbe    c0001f04 <clst2sect+0x1c>
c0001ef7:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001efb:	f7 e2                	mul    edx
c0001efd:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f00:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f03:	c3                   	ret    
c0001f04:	31 c0                	xor    eax,eax
c0001f06:	31 d2                	xor    edx,edx
c0001f08:	c3                   	ret    

c0001f09 <clmt_clust>:
c0001f09:	57                   	push   edi
c0001f0a:	89 cf                	mov    edi,ecx
c0001f0c:	56                   	push   esi
c0001f0d:	89 d6                	mov    esi,edx
c0001f0f:	53                   	push   ebx
c0001f10:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f14:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f17:	89 f2                	mov    edx,esi
c0001f19:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f1b:	c1 ef 09             	shr    edi,0x9
c0001f1e:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f22:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f25:	89 f9                	mov    ecx,edi
c0001f27:	31 ff                	xor    edi,edi
c0001f29:	57                   	push   edi
c0001f2a:	56                   	push   esi
c0001f2b:	51                   	push   ecx
c0001f2c:	52                   	push   edx
c0001f2d:	e8 e2 56 02 00       	call   c0027614 <__udivdi3>
c0001f32:	83 c4 10             	add    esp,0x10
c0001f35:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f37:	85 d2                	test   edx,edx
c0001f39:	74 10                	je     c0001f4b <clmt_clust+0x42>
c0001f3b:	39 d0                	cmp    eax,edx
c0001f3d:	72 07                	jb     c0001f46 <clmt_clust+0x3d>
c0001f3f:	29 d0                	sub    eax,edx
c0001f41:	83 c3 08             	add    ebx,0x8
c0001f44:	eb ef                	jmp    c0001f35 <clmt_clust+0x2c>
c0001f46:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f49:	89 c2                	mov    edx,eax
c0001f4b:	5b                   	pop    ebx
c0001f4c:	89 d0                	mov    eax,edx
c0001f4e:	5e                   	pop    esi
c0001f4f:	5f                   	pop    edi
c0001f50:	c3                   	ret    

c0001f51 <pick_lfn>:
c0001f51:	55                   	push   ebp
c0001f52:	57                   	push   edi
c0001f53:	56                   	push   esi
c0001f54:	89 d6                	mov    esi,edx
c0001f56:	53                   	push   ebx
c0001f57:	89 c3                	mov    ebx,eax
c0001f59:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f5c:	e8 ee fc ff ff       	call   c0001c4f <ld_word>
c0001f61:	66 85 c0             	test   ax,ax
c0001f64:	74 04                	je     c0001f6a <pick_lfn+0x19>
c0001f66:	31 c0                	xor    eax,eax
c0001f68:	eb 5c                	jmp    c0001fc6 <pick_lfn+0x75>
c0001f6a:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f6d:	bd 01 00 00 00       	mov    ebp,0x1
c0001f72:	83 e1 bf             	and    ecx,0xffffffbf
c0001f75:	31 ff                	xor    edi,edi
c0001f77:	49                   	dec    ecx
c0001f78:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f7b:	0f b6 87 a0 a1 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd5e60]
c0001f82:	01 f0                	add    eax,esi
c0001f84:	e8 c6 fc ff ff       	call   c0001c4f <ld_word>
c0001f89:	66 85 ed             	test   bp,bp
c0001f8c:	74 11                	je     c0001f9f <pick_lfn+0x4e>
c0001f8e:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f94:	77 d0                	ja     c0001f66 <pick_lfn+0x15>
c0001f96:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f9a:	89 c5                	mov    ebp,eax
c0001f9c:	41                   	inc    ecx
c0001f9d:	eb 04                	jmp    c0001fa3 <pick_lfn+0x52>
c0001f9f:	66 40                	inc    ax
c0001fa1:	75 c3                	jne    c0001f66 <pick_lfn+0x15>
c0001fa3:	47                   	inc    edi
c0001fa4:	83 ff 0d             	cmp    edi,0xd
c0001fa7:	75 d2                	jne    c0001f7b <pick_lfn+0x2a>
c0001fa9:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fac:	74 13                	je     c0001fc1 <pick_lfn+0x70>
c0001fae:	66 85 ed             	test   bp,bp
c0001fb1:	74 0e                	je     c0001fc1 <pick_lfn+0x70>
c0001fb3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fb9:	77 ab                	ja     c0001f66 <pick_lfn+0x15>
c0001fbb:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fc1:	b8 01 00 00 00       	mov    eax,0x1
c0001fc6:	5b                   	pop    ebx
c0001fc7:	5e                   	pop    esi
c0001fc8:	5f                   	pop    edi
c0001fc9:	5d                   	pop    ebp
c0001fca:	c3                   	ret    

c0001fcb <put_lfn>:
c0001fcb:	55                   	push   ebp
c0001fcc:	31 ed                	xor    ebp,ebp
c0001fce:	57                   	push   edi
c0001fcf:	89 d7                	mov    edi,edx
c0001fd1:	56                   	push   esi
c0001fd2:	31 f6                	xor    esi,esi
c0001fd4:	53                   	push   ebx
c0001fd5:	83 ec 08             	sub    esp,0x8
c0001fd8:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fdb:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fe3:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fe9:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fec:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fef:	31 d2                	xor    edx,edx
c0001ff1:	e8 cb fc ff ff       	call   c0001cc1 <st_word>
c0001ff6:	0f b6 d9             	movzx  ebx,cl
c0001ff9:	4b                   	dec    ebx
c0001ffa:	6b db 0d             	imul   ebx,ebx,0xd
c0001ffd:	66 83 fe ff          	cmp    si,0xffff
c0002001:	74 08                	je     c000200b <put_lfn+0x40>
c0002003:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002006:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000200a:	43                   	inc    ebx
c000200b:	0f b6 85 a0 a1 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd5e60]
c0002012:	0f b7 d6             	movzx  edx,si
c0002015:	01 f8                	add    eax,edi
c0002017:	e8 a5 fc ff ff       	call   c0001cc1 <st_word>
c000201c:	66 85 f6             	test   si,si
c000201f:	75 03                	jne    c0002024 <put_lfn+0x59>
c0002021:	83 ce ff             	or     esi,0xffffffff
c0002024:	45                   	inc    ebp
c0002025:	83 fd 0d             	cmp    ebp,0xd
c0002028:	75 d3                	jne    c0001ffd <put_lfn+0x32>
c000202a:	66 46                	inc    si
c000202c:	74 0a                	je     c0002038 <put_lfn+0x6d>
c000202e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002031:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002036:	75 09                	jne    c0002041 <put_lfn+0x76>
c0002038:	88 c8                	mov    al,cl
c000203a:	83 c8 40             	or     eax,0x40
c000203d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002041:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002045:	88 07                	mov    BYTE PTR [edi],al
c0002047:	83 c4 08             	add    esp,0x8
c000204a:	5b                   	pop    ebx
c000204b:	5e                   	pop    esi
c000204c:	5f                   	pop    edi
c000204d:	5d                   	pop    ebp
c000204e:	c3                   	ret    

c000204f <gen_numname>:
c000204f:	57                   	push   edi
c0002050:	89 cf                	mov    edi,ecx
c0002052:	56                   	push   esi
c0002053:	b9 0b 00 00 00       	mov    ecx,0xb
c0002058:	53                   	push   ebx
c0002059:	89 c6                	mov    esi,eax
c000205b:	83 ec 10             	sub    esp,0x10
c000205e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002062:	e8 67 fc ff ff       	call   c0001cce <mem_cpy>
c0002067:	83 fb 05             	cmp    ebx,0x5
c000206a:	76 2d                	jbe    c0002099 <gen_numname+0x4a>
c000206c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000206f:	66 85 c0             	test   ax,ax
c0002072:	74 25                	je     c0002099 <gen_numname+0x4a>
c0002074:	83 c7 02             	add    edi,0x2
c0002077:	ba 10 00 00 00       	mov    edx,0x10
c000207c:	01 db                	add    ebx,ebx
c000207e:	89 c1                	mov    ecx,eax
c0002080:	66 d1 e8             	shr    ax,1
c0002083:	83 e1 01             	and    ecx,0x1
c0002086:	01 cb                	add    ebx,ecx
c0002088:	0f ba e3 10          	bt     ebx,0x10
c000208c:	73 06                	jae    c0002094 <gen_numname+0x45>
c000208e:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002094:	4a                   	dec    edx
c0002095:	75 e5                	jne    c000207c <gen_numname+0x2d>
c0002097:	eb d3                	jmp    c000206c <gen_numname+0x1d>
c0002099:	b8 07 00 00 00       	mov    eax,0x7
c000209e:	88 d9                	mov    cl,bl
c00020a0:	83 e1 0f             	and    ecx,0xf
c00020a3:	8d 51 30             	lea    edx,[ecx+0x30]
c00020a6:	80 fa 39             	cmp    dl,0x39
c00020a9:	76 03                	jbe    c00020ae <gen_numname+0x5f>
c00020ab:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ae:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020b1:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020b5:	89 da                	mov    edx,ebx
c00020b7:	c1 ea 04             	shr    edx,0x4
c00020ba:	83 fb 0f             	cmp    ebx,0xf
c00020bd:	76 06                	jbe    c00020c5 <gen_numname+0x76>
c00020bf:	89 c8                	mov    eax,ecx
c00020c1:	89 d3                	mov    ebx,edx
c00020c3:	eb d9                	jmp    c000209e <gen_numname+0x4f>
c00020c5:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020ca:	31 d2                	xor    edx,edx
c00020cc:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020cf:	8d 04 16             	lea    eax,[esi+edx*1]
c00020d2:	39 ca                	cmp    edx,ecx
c00020d4:	73 18                	jae    c00020ee <gen_numname+0x9f>
c00020d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020d9:	3c 20                	cmp    al,0x20
c00020db:	74 11                	je     c00020ee <gen_numname+0x9f>
c00020dd:	e8 41 fc ff ff       	call   c0001d23 <dbc_1st>
c00020e2:	85 c0                	test   eax,eax
c00020e4:	74 05                	je     c00020eb <gen_numname+0x9c>
c00020e6:	39 d3                	cmp    ebx,edx
c00020e8:	74 04                	je     c00020ee <gen_numname+0x9f>
c00020ea:	42                   	inc    edx
c00020eb:	42                   	inc    edx
c00020ec:	eb e1                	jmp    c00020cf <gen_numname+0x80>
c00020ee:	b0 20                	mov    al,0x20
c00020f0:	83 f9 07             	cmp    ecx,0x7
c00020f3:	77 05                	ja     c00020fa <gen_numname+0xab>
c00020f5:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020f9:	41                   	inc    ecx
c00020fa:	42                   	inc    edx
c00020fb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020ff:	83 fa 07             	cmp    edx,0x7
c0002102:	76 ea                	jbe    c00020ee <gen_numname+0x9f>
c0002104:	83 c4 10             	add    esp,0x10
c0002107:	5b                   	pop    ebx
c0002108:	5e                   	pop    esi
c0002109:	5f                   	pop    edi
c000210a:	c3                   	ret    

c000210b <sum_sfn>:
c000210b:	31 c9                	xor    ecx,ecx
c000210d:	31 d2                	xor    edx,edx
c000210f:	d0 ca                	ror    dl,1
c0002111:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002114:	41                   	inc    ecx
c0002115:	83 f9 0b             	cmp    ecx,0xb
c0002118:	75 f5                	jne    c000210f <sum_sfn+0x4>
c000211a:	88 d0                	mov    al,dl
c000211c:	c3                   	ret    

c000211d <xdir_sum>:
c000211d:	56                   	push   esi
c000211e:	31 c9                	xor    ecx,ecx
c0002120:	53                   	push   ebx
c0002121:	31 d2                	xor    edx,edx
c0002123:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002127:	43                   	inc    ebx
c0002128:	c1 e3 05             	shl    ebx,0x5
c000212b:	83 fa 02             	cmp    edx,0x2
c000212e:	74 0b                	je     c000213b <xdir_sum+0x1e>
c0002130:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002134:	66 d1 c9             	ror    cx,1
c0002137:	01 f1                	add    ecx,esi
c0002139:	eb 05                	jmp    c0002140 <xdir_sum+0x23>
c000213b:	ba 03 00 00 00       	mov    edx,0x3
c0002140:	42                   	inc    edx
c0002141:	39 d3                	cmp    ebx,edx
c0002143:	77 e6                	ja     c000212b <xdir_sum+0xe>
c0002145:	89 c8                	mov    eax,ecx
c0002147:	5b                   	pop    ebx
c0002148:	5e                   	pop    esi
c0002149:	c3                   	ret    

c000214a <xsum32>:
c000214a:	d1 ca                	ror    edx,1
c000214c:	0f b6 c0             	movzx  eax,al
c000214f:	01 d0                	add    eax,edx
c0002151:	c3                   	ret    

c0002152 <get_xfileinfo>:
c0002152:	55                   	push   ebp
c0002153:	31 c9                	xor    ecx,ecx
c0002155:	57                   	push   edi
c0002156:	bd 40 00 00 00       	mov    ebp,0x40
c000215b:	56                   	push   esi
c000215c:	31 ff                	xor    edi,edi
c000215e:	53                   	push   ebx
c000215f:	89 c6                	mov    esi,eax
c0002161:	83 ec 0c             	sub    esp,0xc
c0002164:	89 d3                	mov    ebx,edx
c0002166:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000216d:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002171:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002174:	76 6d                	jbe    c00021e3 <get_xfileinfo+0x91>
c0002176:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000217c:	76 0b                	jbe    c0002189 <get_xfileinfo+0x37>
c000217e:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002182:	bf 01 00 00 00       	mov    edi,0x1
c0002187:	eb 63                	jmp    c00021ec <get_xfileinfo+0x9a>
c0002189:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000218f:	75 03                	jne    c0002194 <get_xfileinfo+0x42>
c0002191:	83 c5 02             	add    ebp,0x2
c0002194:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0002197:	83 c5 02             	add    ebp,0x2
c000219a:	e8 b0 fa ff ff       	call   c0001c4f <ld_word>
c000219f:	ff 04 24             	inc    DWORD PTR [esp]
c00021a2:	66 85 c9             	test   cx,cx
c00021a5:	75 0d                	jne    c00021b4 <get_xfileinfo+0x62>
c00021a7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021ad:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021b2:	76 2b                	jbe    c00021df <get_xfileinfo+0x8d>
c00021b4:	c1 e1 10             	shl    ecx,0x10
c00021b7:	ba ff 00 00 00       	mov    edx,0xff
c00021bc:	0f b7 c0             	movzx  eax,ax
c00021bf:	29 fa                	sub    edx,edi
c00021c1:	09 c8                	or     eax,ecx
c00021c3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021c7:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021cf:	e8 1b fc ff ff       	call   c0001def <put_utf>
c00021d4:	84 c0                	test   al,al
c00021d6:	74 a6                	je     c000217e <get_xfileinfo+0x2c>
c00021d8:	0f b6 c0             	movzx  eax,al
c00021db:	01 c7                	add    edi,eax
c00021dd:	31 c0                	xor    eax,eax
c00021df:	89 c1                	mov    ecx,eax
c00021e1:	eb 8a                	jmp    c000216d <get_xfileinfo+0x1b>
c00021e3:	85 ff                	test   edi,edi
c00021e5:	74 97                	je     c000217e <get_xfileinfo+0x2c>
c00021e7:	66 85 c9             	test   cx,cx
c00021ea:	75 92                	jne    c000217e <get_xfileinfo+0x2c>
c00021ec:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021f1:	31 c0                	xor    eax,eax
c00021f3:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021f7:	31 d2                	xor    edx,edx
c00021f9:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021fc:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021ff:	80 e1 10             	and    cl,0x10
c0002202:	75 08                	jne    c000220c <get_xfileinfo+0xba>
c0002204:	8d 46 38             	lea    eax,[esi+0x38]
c0002207:	e8 68 fa ff ff       	call   c0001c74 <ld_qword>
c000220c:	89 03                	mov    DWORD PTR [ebx],eax
c000220e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002211:	8d 46 0c             	lea    eax,[esi+0xc]
c0002214:	e8 36 fa ff ff       	call   c0001c4f <ld_word>
c0002219:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000221d:	8d 46 0e             	lea    eax,[esi+0xe]
c0002220:	e8 2a fa ff ff       	call   c0001c4f <ld_word>
c0002225:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002229:	83 c4 0c             	add    esp,0xc
c000222c:	5b                   	pop    ebx
c000222d:	5e                   	pop    esi
c000222e:	5f                   	pop    edi
c000222f:	5d                   	pop    ebp
c0002230:	c3                   	ret    

c0002231 <get_ldnumber>:
c0002231:	8b 10                	mov    edx,DWORD PTR [eax]
c0002233:	85 d2                	test   edx,edx
c0002235:	74 14                	je     c000224b <get_ldnumber+0x1a>
c0002237:	56                   	push   esi
c0002238:	53                   	push   ebx
c0002239:	89 d3                	mov    ebx,edx
c000223b:	43                   	inc    ebx
c000223c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000223f:	80 f9 1f             	cmp    cl,0x1f
c0002242:	76 0d                	jbe    c0002251 <get_ldnumber+0x20>
c0002244:	80 f9 3a             	cmp    cl,0x3a
c0002247:	75 f2                	jne    c000223b <get_ldnumber+0xa>
c0002249:	eb 0a                	jmp    c0002255 <get_ldnumber+0x24>
c000224b:	83 c9 ff             	or     ecx,0xffffffff
c000224e:	89 c8                	mov    eax,ecx
c0002250:	c3                   	ret    
c0002251:	31 c9                	xor    ecx,ecx
c0002253:	eb 24                	jmp    c0002279 <get_ldnumber+0x48>
c0002255:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002258:	8d 4e d0             	lea    ecx,[esi-0x30]
c000225b:	80 f9 09             	cmp    cl,0x9
c000225e:	77 16                	ja     c0002276 <get_ldnumber+0x45>
c0002260:	83 c2 02             	add    edx,0x2
c0002263:	83 c9 ff             	or     ecx,0xffffffff
c0002266:	39 d3                	cmp    ebx,edx
c0002268:	75 0f                	jne    c0002279 <get_ldnumber+0x48>
c000226a:	89 f2                	mov    edx,esi
c000226c:	89 18                	mov    DWORD PTR [eax],ebx
c000226e:	0f be ca             	movsx  ecx,dl
c0002271:	83 e9 30             	sub    ecx,0x30
c0002274:	eb 03                	jmp    c0002279 <get_ldnumber+0x48>
c0002276:	83 c9 ff             	or     ecx,0xffffffff
c0002279:	89 c8                	mov    eax,ecx
c000227b:	5b                   	pop    ebx
c000227c:	5e                   	pop    esi
c000227d:	c3                   	ret    

c000227e <crc32>:
c000227e:	56                   	push   esi
c000227f:	89 d6                	mov    esi,edx
c0002281:	53                   	push   ebx
c0002282:	b2 01                	mov    dl,0x1
c0002284:	bb 08 00 00 00       	mov    ebx,0x8
c0002289:	89 f1                	mov    ecx,esi
c000228b:	84 d1                	test   cl,dl
c000228d:	0f 95 c1             	setne  cl
c0002290:	0f b6 c9             	movzx  ecx,cl
c0002293:	31 c1                	xor    ecx,eax
c0002295:	89 c8                	mov    eax,ecx
c0002297:	d1 e8                	shr    eax,1
c0002299:	80 e1 01             	and    cl,0x1
c000229c:	74 05                	je     c00022a3 <crc32+0x25>
c000229e:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022a3:	d1 e2                	shl    edx,1
c00022a5:	4b                   	dec    ebx
c00022a6:	75 e1                	jne    c0002289 <crc32+0xb>
c00022a8:	5b                   	pop    ebx
c00022a9:	5e                   	pop    esi
c00022aa:	c3                   	ret    

c00022ab <test_gpt_header>:
c00022ab:	55                   	push   ebp
c00022ac:	b9 10 00 00 00       	mov    ecx,0x10
c00022b1:	57                   	push   edi
c00022b2:	ba a0 a0 02 c0       	mov    edx,0xc002a0a0
c00022b7:	56                   	push   esi
c00022b8:	31 ff                	xor    edi,edi
c00022ba:	53                   	push   ebx
c00022bb:	89 c3                	mov    ebx,eax
c00022bd:	e8 2c fa ff ff       	call   c0001cee <mem_cmp>
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 55                	jne    c000231b <test_gpt_header+0x70>
c00022c6:	89 c7                	mov    edi,eax
c00022c8:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022cd:	83 ce ff             	or     esi,0xffffffff
c00022d0:	31 d2                	xor    edx,edx
c00022d2:	83 fd 03             	cmp    ebp,0x3
c00022d5:	76 05                	jbe    c00022dc <test_gpt_header+0x31>
c00022d7:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022dc:	89 f0                	mov    eax,esi
c00022de:	45                   	inc    ebp
c00022df:	e8 9a ff ff ff       	call   c000227e <crc32>
c00022e4:	83 fd 4c             	cmp    ebp,0x4c
c00022e7:	89 c6                	mov    esi,eax
c00022e9:	75 e5                	jne    c00022d0 <test_gpt_header+0x25>
c00022eb:	8d 43 10             	lea    eax,[ebx+0x10]
c00022ee:	f7 d6                	not    esi
c00022f0:	e8 67 f9 ff ff       	call   c0001c5c <ld_dword>
c00022f5:	39 c6                	cmp    esi,eax
c00022f7:	75 22                	jne    c000231b <test_gpt_header+0x70>
c00022f9:	8d 43 54             	lea    eax,[ebx+0x54]
c00022fc:	e8 5b f9 ff ff       	call   c0001c5c <ld_dword>
c0002301:	83 c0 80             	add    eax,0xffffff80
c0002304:	75 15                	jne    c000231b <test_gpt_header+0x70>
c0002306:	8d 43 50             	lea    eax,[ebx+0x50]
c0002309:	e8 4e f9 ff ff       	call   c0001c5c <ld_dword>
c000230e:	3d 80 00 00 00       	cmp    eax,0x80
c0002313:	0f 96 c0             	setbe  al
c0002316:	0f b6 c0             	movzx  eax,al
c0002319:	89 c7                	mov    edi,eax
c000231b:	5b                   	pop    ebx
c000231c:	89 f8                	mov    eax,edi
c000231e:	5e                   	pop    esi
c000231f:	5f                   	pop    edi
c0002320:	5d                   	pop    ebp
c0002321:	c3                   	ret    

c0002322 <make_rand>:
c0002322:	56                   	push   esi
c0002323:	85 c0                	test   eax,eax
c0002325:	53                   	push   ebx
c0002326:	75 05                	jne    c000232d <make_rand+0xb>
c0002328:	b8 01 00 00 00       	mov    eax,0x1
c000232d:	01 d1                	add    ecx,edx
c000232f:	bb 08 00 00 00       	mov    ebx,0x8
c0002334:	89 c6                	mov    esi,eax
c0002336:	d1 e8                	shr    eax,1
c0002338:	83 e6 01             	and    esi,0x1
c000233b:	85 f6                	test   esi,esi
c000233d:	74 05                	je     c0002344 <make_rand+0x22>
c000233f:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002344:	4b                   	dec    ebx
c0002345:	75 ed                	jne    c0002334 <make_rand+0x12>
c0002347:	42                   	inc    edx
c0002348:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000234b:	39 ca                	cmp    edx,ecx
c000234d:	75 e0                	jne    c000232f <make_rand+0xd>
c000234f:	5b                   	pop    ebx
c0002350:	5e                   	pop    esi
c0002351:	c3                   	ret    

c0002352 <validate>:
c0002352:	56                   	push   esi
c0002353:	53                   	push   ebx
c0002354:	89 d6                	mov    esi,edx
c0002356:	51                   	push   ecx
c0002357:	85 c0                	test   eax,eax
c0002359:	75 09                	jne    c0002364 <validate+0x12>
c000235b:	b8 09 00 00 00       	mov    eax,0x9
c0002360:	31 c9                	xor    ecx,ecx
c0002362:	eb 2f                	jmp    c0002393 <validate+0x41>
c0002364:	89 c3                	mov    ebx,eax
c0002366:	8b 00                	mov    eax,DWORD PTR [eax]
c0002368:	85 c0                	test   eax,eax
c000236a:	74 ef                	je     c000235b <validate+0x9>
c000236c:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000236f:	74 ea                	je     c000235b <validate+0x9>
c0002371:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002375:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002379:	75 e0                	jne    c000235b <validate+0x9>
c000237b:	83 ec 0c             	sub    esp,0xc
c000237e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002382:	50                   	push   eax
c0002383:	e8 76 f8 ff ff       	call   c0001bfe <disk_status>
c0002388:	83 c4 10             	add    esp,0x10
c000238b:	a8 01                	test   al,0x1
c000238d:	75 cc                	jne    c000235b <validate+0x9>
c000238f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002391:	31 c0                	xor    eax,eax
c0002393:	89 0e                	mov    DWORD PTR [esi],ecx
c0002395:	5a                   	pop    edx
c0002396:	5b                   	pop    ebx
c0002397:	5e                   	pop    esi
c0002398:	c3                   	ret    

c0002399 <sync_window>:
c0002399:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000239d:	0f 84 85 00 00 00    	je     c0002428 <sync_window+0x8f>
c00023a3:	55                   	push   ebp
c00023a4:	8d 68 54             	lea    ebp,[eax+0x54]
c00023a7:	57                   	push   edi
c00023a8:	56                   	push   esi
c00023a9:	53                   	push   ebx
c00023aa:	89 c3                	mov    ebx,eax
c00023ac:	83 ec 28             	sub    esp,0x28
c00023af:	6a 01                	push   0x1
c00023b1:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023b4:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023b7:	55                   	push   ebp
c00023b8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023bc:	50                   	push   eax
c00023bd:	e8 58 f8 ff ff       	call   c0001c1a <disk_write>
c00023c2:	83 c4 20             	add    esp,0x20
c00023c5:	ba 01 00 00 00       	mov    edx,0x1
c00023ca:	85 c0                	test   eax,eax
c00023cc:	75 50                	jne    c000241e <sync_window+0x85>
c00023ce:	31 ff                	xor    edi,edi
c00023d0:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023d3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023d7:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023db:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023de:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023e1:	89 c6                	mov    esi,eax
c00023e3:	89 d7                	mov    edi,edx
c00023e5:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023e8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023ec:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023ef:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023f3:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023f7:	73 23                	jae    c000241c <sync_window+0x83>
c00023f9:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023fd:	75 1d                	jne    c000241c <sync_window+0x83>
c00023ff:	83 ec 0c             	sub    esp,0xc
c0002402:	6a 01                	push   0x1
c0002404:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002408:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000240c:	52                   	push   edx
c000240d:	50                   	push   eax
c000240e:	55                   	push   ebp
c000240f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002413:	50                   	push   eax
c0002414:	e8 01 f8 ff ff       	call   c0001c1a <disk_write>
c0002419:	83 c4 20             	add    esp,0x20
c000241c:	31 d2                	xor    edx,edx
c000241e:	83 c4 1c             	add    esp,0x1c
c0002421:	89 d0                	mov    eax,edx
c0002423:	5b                   	pop    ebx
c0002424:	5e                   	pop    esi
c0002425:	5f                   	pop    edi
c0002426:	5d                   	pop    ebp
c0002427:	c3                   	ret    
c0002428:	31 d2                	xor    edx,edx
c000242a:	89 d0                	mov    eax,edx
c000242c:	c3                   	ret    

c000242d <move_window>:
c000242d:	56                   	push   esi
c000242e:	53                   	push   ebx
c000242f:	89 c3                	mov    ebx,eax
c0002431:	83 ec 14             	sub    esp,0x14
c0002434:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002437:	75 07                	jne    c0002440 <move_window+0x13>
c0002439:	31 f6                	xor    esi,esi
c000243b:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000243e:	74 59                	je     c0002499 <move_window+0x6c>
c0002440:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002444:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002448:	89 d8                	mov    eax,ebx
c000244a:	e8 4a ff ff ff       	call   c0002399 <sync_window>
c000244f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002453:	89 c6                	mov    esi,eax
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245b:	75 3c                	jne    c0002499 <move_window+0x6c>
c000245d:	83 ec 0c             	sub    esp,0xc
c0002460:	8d 43 54             	lea    eax,[ebx+0x54]
c0002463:	6a 01                	push   0x1
c0002465:	51                   	push   ecx
c0002466:	52                   	push   edx
c0002467:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000246b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000246f:	50                   	push   eax
c0002470:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002474:	50                   	push   eax
c0002475:	e8 8a f7 ff ff       	call   c0001c04 <disk_read>
c000247a:	83 c4 20             	add    esp,0x20
c000247d:	85 c0                	test   eax,eax
c000247f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002483:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002487:	74 0a                	je     c0002493 <move_window+0x66>
c0002489:	83 ca ff             	or     edx,0xffffffff
c000248c:	be 01 00 00 00       	mov    esi,0x1
c0002491:	89 d1                	mov    ecx,edx
c0002493:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002496:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002499:	89 f0                	mov    eax,esi
c000249b:	83 c4 14             	add    esp,0x14
c000249e:	5b                   	pop    ebx
c000249f:	5e                   	pop    esi
c00024a0:	c3                   	ret    

c00024a1 <check_fs>:
c00024a1:	53                   	push   ebx
c00024a2:	89 c3                	mov    ebx,eax
c00024a4:	83 ec 08             	sub    esp,0x8
c00024a7:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024ab:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024b2:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024b9:	e8 6f ff ff ff       	call   c000242d <move_window>
c00024be:	ba 04 00 00 00       	mov    edx,0x4
c00024c3:	85 c0                	test   eax,eax
c00024c5:	0f 85 89 00 00 00    	jne    c0002554 <check_fs+0xb3>
c00024cb:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024d1:	e8 79 f7 ff ff       	call   c0001c4f <ld_word>
c00024d6:	ba 03 00 00 00       	mov    edx,0x3
c00024db:	66 3d 55 aa          	cmp    ax,0xaa55
c00024df:	75 73                	jne    c0002554 <check_fs+0xb3>
c00024e1:	ba c0 a1 02 c0       	mov    edx,0xc002a1c0
c00024e6:	8d 43 54             	lea    eax,[ebx+0x54]
c00024e9:	b9 0b 00 00 00       	mov    ecx,0xb
c00024ee:	e8 fb f7 ff ff       	call   c0001cee <mem_cmp>
c00024f3:	ba 01 00 00 00       	mov    edx,0x1
c00024f8:	85 c0                	test   eax,eax
c00024fa:	74 58                	je     c0002554 <check_fs+0xb3>
c00024fc:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024ff:	8d 50 18             	lea    edx,[eax+0x18]
c0002502:	80 fa 01             	cmp    dl,0x1
c0002505:	76 09                	jbe    c0002510 <check_fs+0x6f>
c0002507:	ba 02 00 00 00       	mov    edx,0x2
c000250c:	3c eb                	cmp    al,0xeb
c000250e:	75 44                	jne    c0002554 <check_fs+0xb3>
c0002510:	ba 90 d6 02 c0       	mov    edx,0xc002d690
c0002515:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000251b:	b9 03 00 00 00       	mov    ecx,0x3
c0002520:	e8 c9 f7 ff ff       	call   c0001cee <mem_cmp>
c0002525:	31 d2                	xor    edx,edx
c0002527:	85 c0                	test   eax,eax
c0002529:	74 29                	je     c0002554 <check_fs+0xb3>
c000252b:	ba cc a1 02 c0       	mov    edx,0xc002a1cc
c0002530:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002536:	b9 05 00 00 00       	mov    ecx,0x5
c000253b:	e8 ae f7 ff ff       	call   c0001cee <mem_cmp>
c0002540:	31 d2                	xor    edx,edx
c0002542:	85 c0                	test   eax,eax
c0002544:	74 0e                	je     c0002554 <check_fs+0xb3>
c0002546:	31 d2                	xor    edx,edx
c0002548:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000254f:	0f 95 c2             	setne  dl
c0002552:	01 d2                	add    edx,edx
c0002554:	89 d0                	mov    eax,edx
c0002556:	83 c4 08             	add    esp,0x8
c0002559:	5b                   	pop    ebx
c000255a:	c3                   	ret    

c000255b <find_volume>:
c000255b:	55                   	push   ebp
c000255c:	31 c9                	xor    ecx,ecx
c000255e:	57                   	push   edi
c000255f:	56                   	push   esi
c0002560:	89 d6                	mov    esi,edx
c0002562:	53                   	push   ebx
c0002563:	31 d2                	xor    edx,edx
c0002565:	83 ec 3c             	sub    esp,0x3c
c0002568:	89 c3                	mov    ebx,eax
c000256a:	e8 32 ff ff ff       	call   c00024a1 <check_fs>
c000256f:	83 f8 02             	cmp    eax,0x2
c0002572:	74 0e                	je     c0002582 <find_volume+0x27>
c0002574:	0f 87 5d 01 00 00    	ja     c00026d7 <find_volume+0x17c>
c000257a:	85 f6                	test   esi,esi
c000257c:	0f 84 55 01 00 00    	je     c00026d7 <find_volume+0x17c>
c0002582:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002589:	0f 85 dd 00 00 00    	jne    c000266c <find_volume+0x111>
c000258f:	31 c9                	xor    ecx,ecx
c0002591:	ba 01 00 00 00       	mov    edx,0x1
c0002596:	89 d8                	mov    eax,ebx
c0002598:	e8 90 fe ff ff       	call   c000242d <move_window>
c000259d:	85 c0                	test   eax,eax
c000259f:	74 0a                	je     c00025ab <find_volume+0x50>
c00025a1:	b8 04 00 00 00       	mov    eax,0x4
c00025a6:	e9 2c 01 00 00       	jmp    c00026d7 <find_volume+0x17c>
c00025ab:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025ae:	89 e8                	mov    eax,ebp
c00025b0:	e8 f6 fc ff ff       	call   c00022ab <test_gpt_header>
c00025b5:	85 c0                	test   eax,eax
c00025b7:	75 0a                	jne    c00025c3 <find_volume+0x68>
c00025b9:	b8 03 00 00 00       	mov    eax,0x3
c00025be:	e9 14 01 00 00       	jmp    c00026d7 <find_volume+0x17c>
c00025c3:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025c9:	e8 8e f6 ff ff       	call   c0001c5c <ld_dword>
c00025ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025d2:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025d8:	e8 97 f6 ff ff       	call   c0001c74 <ld_qword>
c00025dd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025f9:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025fd:	74 ba                	je     c00025b9 <find_volume+0x5e>
c00025ff:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002603:	31 c9                	xor    ecx,ecx
c0002605:	c1 e7 07             	shl    edi,0x7
c0002608:	89 d8                	mov    eax,ebx
c000260a:	89 fa                	mov    edx,edi
c000260c:	c1 ea 09             	shr    edx,0x9
c000260f:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002613:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002617:	e8 11 fe ff ff       	call   c000242d <move_window>
c000261c:	85 c0                	test   eax,eax
c000261e:	75 81                	jne    c00025a1 <find_volume+0x46>
c0002620:	81 e7 80 01 00 00    	and    edi,0x180
c0002626:	b9 10 00 00 00       	mov    ecx,0x10
c000262b:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000262f:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c0002634:	e8 b5 f6 ff ff       	call   c0001cee <mem_cmp>
c0002639:	85 c0                	test   eax,eax
c000263b:	75 29                	jne    c0002666 <find_volume+0x10b>
c000263d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002641:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002645:	e8 2a f6 ff ff       	call   c0001c74 <ld_qword>
c000264a:	89 d1                	mov    ecx,edx
c000264c:	89 c2                	mov    edx,eax
c000264e:	89 d8                	mov    eax,ebx
c0002650:	e8 4c fe ff ff       	call   c00024a1 <check_fs>
c0002655:	85 f6                	test   esi,esi
c0002657:	75 07                	jne    c0002660 <find_volume+0x105>
c0002659:	83 f8 01             	cmp    eax,0x1
c000265c:	77 08                	ja     c0002666 <find_volume+0x10b>
c000265e:	eb 77                	jmp    c00026d7 <find_volume+0x17c>
c0002660:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002664:	74 71                	je     c00026d7 <find_volume+0x17c>
c0002666:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000266a:	eb 89                	jmp    c00025f5 <find_volume+0x9a>
c000266c:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002670:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002676:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000267c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002680:	89 cd                	mov    ebp,ecx
c0002682:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002686:	89 f8                	mov    eax,edi
c0002688:	83 c7 10             	add    edi,0x10
c000268b:	e8 cc f5 ff ff       	call   c0001c5c <ld_dword>
c0002690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002694:	89 01                	mov    DWORD PTR [ecx],eax
c0002696:	83 c1 04             	add    ecx,0x4
c0002699:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000269d:	75 e3                	jne    c0002682 <find_volume+0x127>
c000269f:	31 ff                	xor    edi,edi
c00026a1:	85 f6                	test   esi,esi
c00026a3:	74 03                	je     c00026a8 <find_volume+0x14d>
c00026a5:	8d 7e ff             	lea    edi,[esi-0x1]
c00026a8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026ac:	85 d2                	test   edx,edx
c00026ae:	74 14                	je     c00026c4 <find_volume+0x169>
c00026b0:	31 c9                	xor    ecx,ecx
c00026b2:	89 d8                	mov    eax,ebx
c00026b4:	e8 e8 fd ff ff       	call   c00024a1 <check_fs>
c00026b9:	83 f8 01             	cmp    eax,0x1
c00026bc:	76 19                	jbe    c00026d7 <find_volume+0x17c>
c00026be:	85 f6                	test   esi,esi
c00026c0:	74 0f                	je     c00026d1 <find_volume+0x176>
c00026c2:	eb 13                	jmp    c00026d7 <find_volume+0x17c>
c00026c4:	85 f6                	test   esi,esi
c00026c6:	0f 85 ed fe ff ff    	jne    c00025b9 <find_volume+0x5e>
c00026cc:	b8 03 00 00 00       	mov    eax,0x3
c00026d1:	47                   	inc    edi
c00026d2:	83 ff 03             	cmp    edi,0x3
c00026d5:	76 d1                	jbe    c00026a8 <find_volume+0x14d>
c00026d7:	83 c4 3c             	add    esp,0x3c
c00026da:	5b                   	pop    ebx
c00026db:	5e                   	pop    esi
c00026dc:	5f                   	pop    edi
c00026dd:	5d                   	pop    ebp
c00026de:	c3                   	ret    

c00026df <mount_volume>:
c00026df:	55                   	push   ebp
c00026e0:	57                   	push   edi
c00026e1:	89 cf                	mov    edi,ecx
c00026e3:	56                   	push   esi
c00026e4:	53                   	push   ebx
c00026e5:	bb 0b 00 00 00       	mov    ebx,0xb
c00026ea:	83 ec 3c             	sub    esp,0x3c
c00026ed:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026f7:	e8 35 fb ff ff       	call   c0002231 <get_ldnumber>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	0f 88 3a 05 00 00    	js     c0002c3e <mount_volume+0x55f>
c0002704:	8b 2c 85 60 f2 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd0da0]
c000270b:	89 c6                	mov    esi,eax
c000270d:	bb 0c 00 00 00       	mov    ebx,0xc
c0002712:	85 ed                	test   ebp,ebp
c0002714:	0f 84 24 05 00 00    	je     c0002c3e <mount_volume+0x55f>
c000271a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000271e:	83 e7 fe             	and    edi,0xfffffffe
c0002721:	89 2a                	mov    DWORD PTR [edx],ebp
c0002723:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002727:	74 32                	je     c000275b <mount_volume+0x7c>
c0002729:	83 ec 0c             	sub    esp,0xc
c000272c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002730:	50                   	push   eax
c0002731:	e8 c8 f4 ff ff       	call   c0001bfe <disk_status>
c0002736:	83 c4 10             	add    esp,0x10
c0002739:	a8 01                	test   al,0x1
c000273b:	75 1e                	jne    c000275b <mount_volume+0x7c>
c000273d:	31 db                	xor    ebx,ebx
c000273f:	89 f9                	mov    ecx,edi
c0002741:	84 c9                	test   cl,cl
c0002743:	0f 84 f5 04 00 00    	je     c0002c3e <mount_volume+0x55f>
c0002749:	a8 04                	test   al,0x4
c000274b:	0f 84 ed 04 00 00    	je     c0002c3e <mount_volume+0x55f>
c0002751:	bb 0a 00 00 00       	mov    ebx,0xa
c0002756:	e9 e3 04 00 00       	jmp    c0002c3e <mount_volume+0x55f>
c000275b:	83 ec 0c             	sub    esp,0xc
c000275e:	89 f0                	mov    eax,esi
c0002760:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002764:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002767:	0f b6 f0             	movzx  esi,al
c000276a:	bb 03 00 00 00       	mov    ebx,0x3
c000276f:	56                   	push   esi
c0002770:	e8 8c f4 ff ff       	call   c0001c01 <disk_initialize>
c0002775:	83 c4 10             	add    esp,0x10
c0002778:	a8 01                	test   al,0x1
c000277a:	0f 85 be 04 00 00    	jne    c0002c3e <mount_volume+0x55f>
c0002780:	89 f9                	mov    ecx,edi
c0002782:	84 c9                	test   cl,cl
c0002784:	74 04                	je     c000278a <mount_volume+0xab>
c0002786:	a8 04                	test   al,0x4
c0002788:	75 c7                	jne    c0002751 <mount_volume+0x72>
c000278a:	31 d2                	xor    edx,edx
c000278c:	89 e8                	mov    eax,ebp
c000278e:	e8 c8 fd ff ff       	call   c000255b <find_volume>
c0002793:	83 f8 04             	cmp    eax,0x4
c0002796:	75 0a                	jne    c00027a2 <mount_volume+0xc3>
c0002798:	bb 01 00 00 00       	mov    ebx,0x1
c000279d:	e9 9c 04 00 00       	jmp    c0002c3e <mount_volume+0x55f>
c00027a2:	83 f8 01             	cmp    eax,0x1
c00027a5:	76 0a                	jbe    c00027b1 <mount_volume+0xd2>
c00027a7:	bb 0d 00 00 00       	mov    ebx,0xd
c00027ac:	e9 8d 04 00 00       	jmp    c0002c3e <mount_volume+0x55f>
c00027b1:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027b4:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027bf:	75 17                	jne    c00027d8 <mount_volume+0xf9>
c00027c1:	b8 0b 00 00 00       	mov    eax,0xb
c00027c6:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027cb:	75 da                	jne    c00027a7 <mount_volume+0xc8>
c00027cd:	40                   	inc    eax
c00027ce:	83 f8 40             	cmp    eax,0x40
c00027d1:	75 f3                	jne    c00027c6 <mount_volume+0xe7>
c00027d3:	e9 5a 02 00 00       	jmp    c0002a32 <mount_volume+0x353>
c00027d8:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027db:	e8 6f f4 ff ff       	call   c0001c4f <ld_word>
c00027e0:	66 3d 00 02          	cmp    ax,0x200
c00027e4:	75 c1                	jne    c00027a7 <mount_volume+0xc8>
c00027e6:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027e9:	e8 61 f4 ff ff       	call   c0001c4f <ld_word>
c00027ee:	0f b7 c0             	movzx  eax,ax
c00027f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f5:	85 c0                	test   eax,eax
c00027f7:	75 0c                	jne    c0002805 <mount_volume+0x126>
c00027f9:	8d 45 78             	lea    eax,[ebp+0x78]
c00027fc:	e8 5b f4 ff ff       	call   c0001c5c <ld_dword>
c0002801:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002809:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000280c:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000280f:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002813:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002816:	48                   	dec    eax
c0002817:	3c 01                	cmp    al,0x1
c0002819:	77 8c                	ja     c00027a7 <mount_volume+0xc8>
c000281b:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000281f:	89 c3                	mov    ebx,eax
c0002821:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002825:	66 85 c0             	test   ax,ax
c0002828:	0f 84 79 ff ff ff    	je     c00027a7 <mount_volume+0xc8>
c000282e:	8d 40 ff             	lea    eax,[eax-0x1]
c0002831:	85 d8                	test   eax,ebx
c0002833:	0f 85 6e ff ff ff    	jne    c00027a7 <mount_volume+0xc8>
c0002839:	8d 45 65             	lea    eax,[ebp+0x65]
c000283c:	e8 0e f4 ff ff       	call   c0001c4f <ld_word>
c0002841:	89 c7                	mov    edi,eax
c0002843:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002847:	a8 0f                	test   al,0xf
c0002849:	0f 85 58 ff ff ff    	jne    c00027a7 <mount_volume+0xc8>
c000284f:	8d 45 67             	lea    eax,[ebp+0x67]
c0002852:	e8 f8 f3 ff ff       	call   c0001c4f <ld_word>
c0002857:	0f b7 f0             	movzx  esi,ax
c000285a:	85 f6                	test   esi,esi
c000285c:	75 0a                	jne    c0002868 <mount_volume+0x189>
c000285e:	8d 45 74             	lea    eax,[ebp+0x74]
c0002861:	e8 f6 f3 ff ff       	call   c0001c5c <ld_dword>
c0002866:	89 c6                	mov    esi,eax
c0002868:	8d 45 62             	lea    eax,[ebp+0x62]
c000286b:	e8 df f3 ff ff       	call   c0001c4f <ld_word>
c0002870:	66 85 c0             	test   ax,ax
c0002873:	0f 84 2e ff ff ff    	je     c00027a7 <mount_volume+0xc8>
c0002879:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000287e:	0f b7 c8             	movzx  ecx,ax
c0002881:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002886:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000288a:	89 fa                	mov    edx,edi
c000288c:	66 c1 ea 04          	shr    dx,0x4
c0002890:	0f b7 d2             	movzx  edx,dx
c0002893:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002897:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000289a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000289e:	39 c6                	cmp    esi,eax
c00028a0:	0f 82 01 ff ff ff    	jb     c00027a7 <mount_volume+0xc8>
c00028a6:	29 c6                	sub    esi,eax
c00028a8:	31 d2                	xor    edx,edx
c00028aa:	89 f0                	mov    eax,esi
c00028ac:	f7 f3                	div    ebx
c00028ae:	39 de                	cmp    esi,ebx
c00028b0:	0f 82 f1 fe ff ff    	jb     c00027a7 <mount_volume+0xc8>
c00028b6:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028bb:	0f 87 e6 fe ff ff    	ja     c00027a7 <mount_volume+0xc8>
c00028c1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028c6:	0f 86 63 03 00 00    	jbe    c0002c2f <mount_volume+0x550>
c00028cc:	bb 03 00 00 00       	mov    ebx,0x3
c00028d1:	8d 70 02             	lea    esi,[eax+0x2]
c00028d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028dc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028df:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028e2:	31 d2                	xor    edx,edx
c00028e4:	89 c8                	mov    eax,ecx
c00028e6:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028f5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028f9:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fc:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002903:	31 d2                	xor    edx,edx
c0002905:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002909:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000290d:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002910:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002913:	83 fb 03             	cmp    ebx,0x3
c0002916:	75 2b                	jne    c0002943 <mount_volume+0x264>
c0002918:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000291b:	e8 2f f3 ff ff       	call   c0001c4f <ld_word>
c0002920:	66 09 c7             	or     di,ax
c0002923:	0f 85 7e fe ff ff    	jne    c00027a7 <mount_volume+0xc8>
c0002929:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000292f:	c1 e6 02             	shl    esi,0x2
c0002932:	e8 25 f3 ff ff       	call   c0001c5c <ld_dword>
c0002937:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293e:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002941:	eb 30                	jmp    c0002973 <mount_volume+0x294>
c0002943:	66 85 ff             	test   di,di
c0002946:	0f 84 5b fe ff ff    	je     c00027a7 <mount_volume+0xc8>
c000294c:	31 d2                	xor    edx,edx
c000294e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002952:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002956:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000295a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000295d:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002960:	83 fb 02             	cmp    ebx,0x2
c0002963:	75 04                	jne    c0002969 <mount_volume+0x28a>
c0002965:	01 f6                	add    esi,esi
c0002967:	eb 0a                	jmp    c0002973 <mount_volume+0x294>
c0002969:	8d 04 76             	lea    eax,[esi+esi*2]
c000296c:	83 e6 01             	and    esi,0x1
c000296f:	d1 e8                	shr    eax,1
c0002971:	01 c6                	add    esi,eax
c0002973:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002979:	c1 ee 09             	shr    esi,0x9
c000297c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002980:	0f 87 21 fe ff ff    	ja     c00027a7 <mount_volume+0xc8>
c0002986:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000298d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002994:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002998:	83 fb 03             	cmp    ebx,0x3
c000299b:	75 7a                	jne    c0002a17 <mount_volume+0x338>
c000299d:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029a3:	e8 a7 f2 ff ff       	call   c0001c4f <ld_word>
c00029a8:	66 48                	dec    ax
c00029aa:	75 6b                	jne    c0002a17 <mount_volume+0x338>
c00029ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029b4:	83 c2 01             	add    edx,0x1
c00029b7:	89 e8                	mov    eax,ebp
c00029b9:	83 d1 00             	adc    ecx,0x0
c00029bc:	e8 6c fa ff ff       	call   c000242d <move_window>
c00029c1:	85 c0                	test   eax,eax
c00029c3:	75 52                	jne    c0002a17 <mount_volume+0x338>
c00029c5:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029c9:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029cf:	e8 7b f2 ff ff       	call   c0001c4f <ld_word>
c00029d4:	66 3d 55 aa          	cmp    ax,0xaa55
c00029d8:	75 3d                	jne    c0002a17 <mount_volume+0x338>
c00029da:	8d 45 54             	lea    eax,[ebp+0x54]
c00029dd:	e8 7a f2 ff ff       	call   c0001c5c <ld_dword>
c00029e2:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029e7:	75 2e                	jne    c0002a17 <mount_volume+0x338>
c00029e9:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029ef:	e8 68 f2 ff ff       	call   c0001c5c <ld_dword>
c00029f4:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029f9:	75 1c                	jne    c0002a17 <mount_volume+0x338>
c00029fb:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a01:	e8 56 f2 ff ff       	call   c0001c5c <ld_dword>
c0002a06:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a09:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a0f:	e8 48 f2 ff ff       	call   c0001c5c <ld_dword>
c0002a14:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a17:	66 a1 40 f2 02 c0    	mov    ax,ds:0xc002f240
c0002a1d:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a20:	40                   	inc    eax
c0002a21:	31 db                	xor    ebx,ebx
c0002a23:	66 a3 40 f2 02 c0    	mov    ds:0xc002f240,ax
c0002a29:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a2d:	e9 0c 02 00 00       	jmp    c0002c3e <mount_volume+0x55f>
c0002a32:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a38:	e8 12 f2 ff ff       	call   c0001c4f <ld_word>
c0002a3d:	66 3d 00 01          	cmp    ax,0x100
c0002a41:	0f 85 60 fd ff ff    	jne    c00027a7 <mount_volume+0xc8>
c0002a47:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a4e:	0f 85 53 fd ff ff    	jne    c00027a7 <mount_volume+0xc8>
c0002a54:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a5a:	e8 15 f2 ff ff       	call   c0001c74 <ld_qword>
c0002a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a67:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a6d:	e8 ea f1 ff ff       	call   c0001c5c <ld_dword>
c0002a72:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a75:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a7b:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a7e:	fe c8                	dec    al
c0002a80:	0f 85 21 fd ff ff    	jne    c00027a7 <mount_volume+0xc8>
c0002a86:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a8d:	bb 01 00 00 00       	mov    ebx,0x1
c0002a92:	d3 e3                	shl    ebx,cl
c0002a94:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a98:	66 85 db             	test   bx,bx
c0002a9b:	0f 84 06 fd ff ff    	je     c00027a7 <mount_volume+0xc8>
c0002aa1:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002aa7:	e8 b0 f1 ff ff       	call   c0001c5c <ld_dword>
c0002aac:	89 c6                	mov    esi,eax
c0002aae:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ab3:	0f 87 ee fc ff ff    	ja     c00027a7 <mount_volume+0xc8>
c0002ab9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002abd:	8d 40 02             	lea    eax,[eax+0x2]
c0002ac0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ac3:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ac6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aca:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002acd:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ad3:	e8 84 f1 ff ff       	call   c0001c5c <ld_dword>
c0002ad8:	31 d2                	xor    edx,edx
c0002ada:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ade:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ae6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002aea:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aed:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002af0:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002af6:	e8 61 f1 ff ff       	call   c0001c5c <ld_dword>
c0002afb:	31 d2                	xor    edx,edx
c0002afd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b01:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b05:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b09:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b0c:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b0f:	0f b7 c3             	movzx  eax,bx
c0002b12:	31 d2                	xor    edx,edx
c0002b14:	0f af f0             	imul   esi,eax
c0002b17:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b1b:	89 f0                	mov    eax,esi
c0002b1d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b21:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b25:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b29:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b2d:	39 c1                	cmp    ecx,eax
c0002b2f:	89 df                	mov    edi,ebx
c0002b31:	19 d7                	sbb    edi,edx
c0002b33:	0f 82 6e fc ff ff    	jb     c00027a7 <mount_volume+0xc8>
c0002b39:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b3f:	31 db                	xor    ebx,ebx
c0002b41:	e8 16 f1 ff ff       	call   c0001c5c <ld_dword>
c0002b46:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b4d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b50:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b58:	85 db                	test   ebx,ebx
c0002b5a:	75 39                	jne    c0002b95 <mount_volume+0x4b6>
c0002b5c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b60:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b64:	0f 86 3d fc ff ff    	jbe    c00027a7 <mount_volume+0xc8>
c0002b6a:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b6d:	31 ff                	xor    edi,edi
c0002b6f:	89 e8                	mov    eax,ebp
c0002b71:	e8 72 f3 ff ff       	call   c0001ee8 <clst2sect>
c0002b76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b7a:	01 c6                	add    esi,eax
c0002b7c:	89 e8                	mov    eax,ebp
c0002b7e:	11 d7                	adc    edi,edx
c0002b80:	89 f2                	mov    edx,esi
c0002b82:	89 f9                	mov    ecx,edi
c0002b84:	e8 a4 f8 ff ff       	call   c000242d <move_window>
c0002b89:	85 c0                	test   eax,eax
c0002b8b:	0f 85 07 fc ff ff    	jne    c0002798 <mount_volume+0xb9>
c0002b91:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b95:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b9a:	74 0b                	je     c0002ba7 <mount_volume+0x4c8>
c0002b9c:	83 c3 20             	add    ebx,0x20
c0002b9f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ba5:	eb b1                	jmp    c0002b58 <mount_volume+0x479>
c0002ba7:	8d 75 54             	lea    esi,[ebp+0x54]
c0002baa:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bae:	e8 a9 f0 ff ff       	call   c0001c5c <ld_dword>
c0002bb3:	89 c3                	mov    ebx,eax
c0002bb5:	83 f8 01             	cmp    eax,0x1
c0002bb8:	0f 86 e9 fb ff ff    	jbe    c00027a7 <mount_volume+0xc8>
c0002bbe:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bc1:	0f 86 e0 fb ff ff    	jbe    c00027a7 <mount_volume+0xc8>
c0002bc7:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bca:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bce:	0f af c2             	imul   eax,edx
c0002bd1:	31 d2                	xor    edx,edx
c0002bd3:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bd6:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bd9:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bdc:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bdf:	31 c9                	xor    ecx,ecx
c0002be1:	89 da                	mov    edx,ebx
c0002be3:	89 e8                	mov    eax,ebp
c0002be5:	c1 ea 07             	shr    edx,0x7
c0002be8:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002beb:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bee:	e8 3a f8 ff ff       	call   c000242d <move_window>
c0002bf3:	85 c0                	test   eax,eax
c0002bf5:	0f 85 9d fb ff ff    	jne    c0002798 <mount_volume+0xb9>
c0002bfb:	89 d8                	mov    eax,ebx
c0002bfd:	83 e0 7f             	and    eax,0x7f
c0002c00:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c03:	e8 54 f0 ff ff       	call   c0001c5c <ld_dword>
c0002c08:	83 f8 ff             	cmp    eax,0xffffffff
c0002c0b:	74 0a                	je     c0002c17 <mount_volume+0x538>
c0002c0d:	43                   	inc    ebx
c0002c0e:	39 d8                	cmp    eax,ebx
c0002c10:	74 cd                	je     c0002bdf <mount_volume+0x500>
c0002c12:	e9 90 fb ff ff       	jmp    c00027a7 <mount_volume+0xc8>
c0002c17:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c1e:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c25:	bb 04 00 00 00       	mov    ebx,0x4
c0002c2a:	e9 e8 fd ff ff       	jmp    c0002a17 <mount_volume+0x338>
c0002c2f:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c34:	19 db                	sbb    ebx,ebx
c0002c36:	83 c3 02             	add    ebx,0x2
c0002c39:	e9 93 fc ff ff       	jmp    c00028d1 <mount_volume+0x1f2>
c0002c3e:	83 c4 3c             	add    esp,0x3c
c0002c41:	89 d8                	mov    eax,ebx
c0002c43:	5b                   	pop    ebx
c0002c44:	5e                   	pop    esi
c0002c45:	5f                   	pop    edi
c0002c46:	5d                   	pop    ebp
c0002c47:	c3                   	ret    

c0002c48 <find_bitmap>:
c0002c48:	55                   	push   ebp
c0002c49:	57                   	push   edi
c0002c4a:	89 c7                	mov    edi,eax
c0002c4c:	56                   	push   esi
c0002c4d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c50:	53                   	push   ebx
c0002c51:	83 ec 1c             	sub    esp,0x1c
c0002c54:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c57:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c5b:	83 e8 02             	sub    eax,0x2
c0002c5e:	39 f0                	cmp    eax,esi
c0002c60:	77 02                	ja     c0002c64 <find_bitmap+0x1c>
c0002c62:	31 f6                	xor    esi,esi
c0002c64:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c68:	89 f3                	mov    ebx,esi
c0002c6a:	31 ed                	xor    ebp,ebp
c0002c6c:	31 c9                	xor    ecx,ecx
c0002c6e:	89 da                	mov    edx,ebx
c0002c70:	89 f8                	mov    eax,edi
c0002c72:	c1 ea 0c             	shr    edx,0xc
c0002c75:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c78:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c7b:	e8 ad f7 ff ff       	call   c000242d <move_window>
c0002c80:	85 c0                	test   eax,eax
c0002c82:	75 68                	jne    c0002cec <find_bitmap+0xa4>
c0002c84:	89 da                	mov    edx,ebx
c0002c86:	89 d9                	mov    ecx,ebx
c0002c88:	c1 ea 03             	shr    edx,0x3
c0002c8b:	83 e1 07             	and    ecx,0x7
c0002c8e:	b8 01 00 00 00       	mov    eax,0x1
c0002c93:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c99:	d3 e0                	shl    eax,cl
c0002c9b:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c9e:	83 e9 02             	sub    ecx,0x2
c0002ca1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ca5:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002ca9:	43                   	inc    ebx
c0002caa:	21 c1                	and    ecx,eax
c0002cac:	d1 e0                	shl    eax,1
c0002cae:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cb2:	77 09                	ja     c0002cbd <find_bitmap+0x75>
c0002cb4:	31 db                	xor    ebx,ebx
c0002cb6:	ba 00 02 00 00       	mov    edx,0x200
c0002cbb:	31 c0                	xor    eax,eax
c0002cbd:	84 c9                	test   cl,cl
c0002cbf:	75 10                	jne    c0002cd1 <find_bitmap+0x89>
c0002cc1:	45                   	inc    ebp
c0002cc2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cc6:	75 0f                	jne    c0002cd7 <find_bitmap+0x8f>
c0002cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ccc:	83 c0 02             	add    eax,0x2
c0002ccf:	eb 22                	jmp    c0002cf3 <find_bitmap+0xab>
c0002cd1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cd5:	31 ed                	xor    ebp,ebp
c0002cd7:	39 de                	cmp    esi,ebx
c0002cd9:	74 16                	je     c0002cf1 <find_bitmap+0xa9>
c0002cdb:	84 c0                	test   al,al
c0002cdd:	75 c6                	jne    c0002ca5 <find_bitmap+0x5d>
c0002cdf:	42                   	inc    edx
c0002ce0:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ce6:	77 84                	ja     c0002c6c <find_bitmap+0x24>
c0002ce8:	b0 01                	mov    al,0x1
c0002cea:	eb b9                	jmp    c0002ca5 <find_bitmap+0x5d>
c0002cec:	83 c8 ff             	or     eax,0xffffffff
c0002cef:	eb 02                	jmp    c0002cf3 <find_bitmap+0xab>
c0002cf1:	31 c0                	xor    eax,eax
c0002cf3:	83 c4 1c             	add    esp,0x1c
c0002cf6:	5b                   	pop    ebx
c0002cf7:	5e                   	pop    esi
c0002cf8:	5f                   	pop    edi
c0002cf9:	5d                   	pop    ebp
c0002cfa:	c3                   	ret    

c0002cfb <change_bitmap>:
c0002cfb:	55                   	push   ebp
c0002cfc:	89 cd                	mov    ebp,ecx
c0002cfe:	57                   	push   edi
c0002cff:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d02:	56                   	push   esi
c0002d03:	89 c7                	mov    edi,eax
c0002d05:	53                   	push   ebx
c0002d06:	89 c8                	mov    eax,ecx
c0002d08:	83 ec 1c             	sub    esp,0x1c
c0002d0b:	31 d2                	xor    edx,edx
c0002d0d:	89 ce                	mov    esi,ecx
c0002d0f:	c1 e8 0c             	shr    eax,0xc
c0002d12:	bb 01 00 00 00       	mov    ebx,0x1
c0002d17:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d1a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d1d:	c1 ee 03             	shr    esi,0x3
c0002d20:	83 e1 07             	and    ecx,0x7
c0002d23:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d29:	d3 e3                	shl    ebx,cl
c0002d2b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d2f:	89 c1                	mov    ecx,eax
c0002d31:	89 d3                	mov    ebx,edx
c0002d33:	83 c1 01             	add    ecx,0x1
c0002d36:	83 d3 00             	adc    ebx,0x0
c0002d39:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d3d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d41:	89 d1                	mov    ecx,edx
c0002d43:	89 c2                	mov    edx,eax
c0002d45:	89 f8                	mov    eax,edi
c0002d47:	e8 e1 f6 ff ff       	call   c000242d <move_window>
c0002d4c:	89 c1                	mov    ecx,eax
c0002d4e:	85 c0                	test   eax,eax
c0002d50:	75 48                	jne    c0002d9a <change_bitmap+0x9f>
c0002d52:	31 d2                	xor    edx,edx
c0002d54:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d58:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d5c:	0f 95 c2             	setne  dl
c0002d5f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d63:	74 3c                	je     c0002da1 <change_bitmap+0xa6>
c0002d65:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d69:	4d                   	dec    ebp
c0002d6a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d6e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d72:	74 32                	je     c0002da6 <change_bitmap+0xab>
c0002d74:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d78:	75 d8                	jne    c0002d52 <change_bitmap+0x57>
c0002d7a:	8d 46 01             	lea    eax,[esi+0x1]
c0002d7d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d82:	89 c3                	mov    ebx,eax
c0002d84:	31 f6                	xor    esi,esi
c0002d86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d8e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d94:	74 99                	je     c0002d2f <change_bitmap+0x34>
c0002d96:	89 de                	mov    esi,ebx
c0002d98:	eb b8                	jmp    c0002d52 <change_bitmap+0x57>
c0002d9a:	b9 01 00 00 00       	mov    ecx,0x1
c0002d9f:	eb 05                	jmp    c0002da6 <change_bitmap+0xab>
c0002da1:	b9 02 00 00 00       	mov    ecx,0x2
c0002da6:	83 c4 1c             	add    esp,0x1c
c0002da9:	89 c8                	mov    eax,ecx
c0002dab:	5b                   	pop    ebx
c0002dac:	5e                   	pop    esi
c0002dad:	5f                   	pop    edi
c0002dae:	5d                   	pop    ebp
c0002daf:	c3                   	ret    

c0002db0 <put_fat>:
c0002db0:	83 fa 01             	cmp    edx,0x1
c0002db3:	0f 86 7b 01 00 00    	jbe    c0002f34 <put_fat+0x184>
c0002db9:	55                   	push   ebp
c0002dba:	57                   	push   edi
c0002dbb:	89 cf                	mov    edi,ecx
c0002dbd:	56                   	push   esi
c0002dbe:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc3:	53                   	push   ebx
c0002dc4:	89 c6                	mov    esi,eax
c0002dc6:	83 ec 1c             	sub    esp,0x1c
c0002dc9:	89 d3                	mov    ebx,edx
c0002dcb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dce:	0f 86 68 01 00 00    	jbe    c0002f3c <put_fat+0x18c>
c0002dd4:	8a 00                	mov    al,BYTE PTR [eax]
c0002dd6:	3c 02                	cmp    al,0x2
c0002dd8:	0f 84 c7 00 00 00    	je     c0002ea5 <put_fat+0xf5>
c0002dde:	77 09                	ja     c0002de9 <put_fat+0x39>
c0002de0:	fe c8                	dec    al
c0002de2:	74 17                	je     c0002dfb <put_fat+0x4b>
c0002de4:	e9 53 01 00 00       	jmp    c0002f3c <put_fat+0x18c>
c0002de9:	b9 02 00 00 00       	mov    ecx,0x2
c0002dee:	3c 04                	cmp    al,0x4
c0002df0:	0f 86 e1 00 00 00    	jbe    c0002ed7 <put_fat+0x127>
c0002df6:	e9 41 01 00 00       	jmp    c0002f3c <put_fat+0x18c>
c0002dfb:	89 d5                	mov    ebp,edx
c0002dfd:	31 c9                	xor    ecx,ecx
c0002dff:	d1 ed                	shr    ebp,1
c0002e01:	89 f0                	mov    eax,esi
c0002e03:	01 d5                	add    ebp,edx
c0002e05:	89 ea                	mov    edx,ebp
c0002e07:	c1 ea 09             	shr    edx,0x9
c0002e0a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e0d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e10:	e8 18 f6 ff ff       	call   c000242d <move_window>
c0002e15:	89 c1                	mov    ecx,eax
c0002e17:	85 c0                	test   eax,eax
c0002e19:	0f 85 1d 01 00 00    	jne    c0002f3c <put_fat+0x18c>
c0002e1f:	8d 46 54             	lea    eax,[esi+0x54]
c0002e22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e26:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e29:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e33:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e37:	89 f8                	mov    eax,edi
c0002e39:	83 e3 01             	and    ebx,0x1
c0002e3c:	74 0d                	je     c0002e4b <put_fat+0x9b>
c0002e3e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e41:	89 fa                	mov    edx,edi
c0002e43:	83 e0 0f             	and    eax,0xf
c0002e46:	c1 e2 04             	shl    edx,0x4
c0002e49:	09 d0                	or     eax,edx
c0002e4b:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e52:	31 c9                	xor    ecx,ecx
c0002e54:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e58:	c1 ea 09             	shr    edx,0x9
c0002e5b:	89 f0                	mov    eax,esi
c0002e5d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e60:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e63:	e8 c5 f5 ff ff       	call   c000242d <move_window>
c0002e68:	89 c1                	mov    ecx,eax
c0002e6a:	85 c0                	test   eax,eax
c0002e6c:	0f 85 ca 00 00 00    	jne    c0002f3c <put_fat+0x18c>
c0002e72:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e76:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e7c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e80:	85 db                	test   ebx,ebx
c0002e82:	74 07                	je     c0002e8b <put_fat+0xdb>
c0002e84:	c1 ef 04             	shr    edi,0x4
c0002e87:	89 fa                	mov    edx,edi
c0002e89:	eb 0e                	jmp    c0002e99 <put_fat+0xe9>
c0002e8b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e8e:	c1 ef 08             	shr    edi,0x8
c0002e91:	83 e2 f0             	and    edx,0xfffffff0
c0002e94:	83 e7 0f             	and    edi,0xf
c0002e97:	09 fa                	or     edx,edi
c0002e99:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e9c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002ea0:	e9 97 00 00 00       	jmp    c0002f3c <put_fat+0x18c>
c0002ea5:	31 c9                	xor    ecx,ecx
c0002ea7:	c1 ea 08             	shr    edx,0x8
c0002eaa:	89 f0                	mov    eax,esi
c0002eac:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eaf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002eb2:	e8 76 f5 ff ff       	call   c000242d <move_window>
c0002eb7:	89 c1                	mov    ecx,eax
c0002eb9:	85 c0                	test   eax,eax
c0002ebb:	75 7f                	jne    c0002f3c <put_fat+0x18c>
c0002ebd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ec1:	01 db                	add    ebx,ebx
c0002ec3:	0f b7 d7             	movzx  edx,di
c0002ec6:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ecc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ed0:	e8 ec ed ff ff       	call   c0001cc1 <st_word>
c0002ed5:	eb 53                	jmp    c0002f2a <put_fat+0x17a>
c0002ed7:	31 c9                	xor    ecx,ecx
c0002ed9:	c1 ea 07             	shr    edx,0x7
c0002edc:	89 f0                	mov    eax,esi
c0002ede:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ee1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ee4:	e8 44 f5 ff ff       	call   c000242d <move_window>
c0002ee9:	89 c1                	mov    ecx,eax
c0002eeb:	85 c0                	test   eax,eax
c0002eed:	75 4d                	jne    c0002f3c <put_fat+0x18c>
c0002eef:	c1 e3 02             	shl    ebx,0x2
c0002ef2:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ef8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002efb:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002eff:	74 1c                	je     c0002f1d <put_fat+0x16d>
c0002f01:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f05:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f0b:	89 d8                	mov    eax,ebx
c0002f0d:	e8 4a ed ff ff       	call   c0001c5c <ld_dword>
c0002f12:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f16:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f1b:	09 c7                	or     edi,eax
c0002f1d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f21:	89 fa                	mov    edx,edi
c0002f23:	89 d8                	mov    eax,ebx
c0002f25:	e8 9b ed ff ff       	call   c0001cc5 <st_dword>
c0002f2a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f2e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f32:	eb 08                	jmp    c0002f3c <put_fat+0x18c>
c0002f34:	b9 02 00 00 00       	mov    ecx,0x2
c0002f39:	89 c8                	mov    eax,ecx
c0002f3b:	c3                   	ret    
c0002f3c:	83 c4 1c             	add    esp,0x1c
c0002f3f:	89 c8                	mov    eax,ecx
c0002f41:	5b                   	pop    ebx
c0002f42:	5e                   	pop    esi
c0002f43:	5f                   	pop    edi
c0002f44:	5d                   	pop    ebp
c0002f45:	c3                   	ret    

c0002f46 <fill_last_frag>:
c0002f46:	57                   	push   edi
c0002f47:	89 cf                	mov    edi,ecx
c0002f49:	56                   	push   esi
c0002f4a:	89 d6                	mov    esi,edx
c0002f4c:	53                   	push   ebx
c0002f4d:	89 c3                	mov    ebx,eax
c0002f4f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f52:	85 c0                	test   eax,eax
c0002f54:	74 21                	je     c0002f77 <fill_last_frag+0x31>
c0002f56:	89 f9                	mov    ecx,edi
c0002f58:	83 f8 01             	cmp    eax,0x1
c0002f5b:	76 05                	jbe    c0002f62 <fill_last_frag+0x1c>
c0002f5d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f60:	29 c1                	sub    ecx,eax
c0002f62:	8d 56 01             	lea    edx,[esi+0x1]
c0002f65:	29 c2                	sub    edx,eax
c0002f67:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f69:	e8 42 fe ff ff       	call   c0002db0 <put_fat>
c0002f6e:	85 c0                	test   eax,eax
c0002f70:	75 05                	jne    c0002f77 <fill_last_frag+0x31>
c0002f72:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f75:	eb d8                	jmp    c0002f4f <fill_last_frag+0x9>
c0002f77:	5b                   	pop    ebx
c0002f78:	5e                   	pop    esi
c0002f79:	5f                   	pop    edi
c0002f7a:	c3                   	ret    

c0002f7b <fill_first_frag>:
c0002f7b:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f7f:	75 2d                	jne    c0002fae <fill_first_frag+0x33>
c0002f81:	57                   	push   edi
c0002f82:	56                   	push   esi
c0002f83:	53                   	push   ebx
c0002f84:	89 c3                	mov    ebx,eax
c0002f86:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f89:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f8c:	01 d7                	add    edi,edx
c0002f8e:	39 fa                	cmp    edx,edi
c0002f90:	74 14                	je     c0002fa6 <fill_first_frag+0x2b>
c0002f92:	8d 72 01             	lea    esi,[edx+0x1]
c0002f95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f97:	89 f1                	mov    ecx,esi
c0002f99:	e8 12 fe ff ff       	call   c0002db0 <put_fat>
c0002f9e:	89 f2                	mov    edx,esi
c0002fa0:	85 c0                	test   eax,eax
c0002fa2:	74 ea                	je     c0002f8e <fill_first_frag+0x13>
c0002fa4:	eb 0b                	jmp    c0002fb1 <fill_first_frag+0x36>
c0002fa6:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002faa:	31 c0                	xor    eax,eax
c0002fac:	eb 03                	jmp    c0002fb1 <fill_first_frag+0x36>
c0002fae:	31 c0                	xor    eax,eax
c0002fb0:	c3                   	ret    
c0002fb1:	5b                   	pop    ebx
c0002fb2:	5e                   	pop    esi
c0002fb3:	5f                   	pop    edi
c0002fb4:	c3                   	ret    

c0002fb5 <get_fat>:
c0002fb5:	83 fa 01             	cmp    edx,0x1
c0002fb8:	0f 86 db 01 00 00    	jbe    c0003199 <get_fat+0x1e4>
c0002fbe:	55                   	push   ebp
c0002fbf:	b9 01 00 00 00       	mov    ecx,0x1
c0002fc4:	57                   	push   edi
c0002fc5:	56                   	push   esi
c0002fc6:	53                   	push   ebx
c0002fc7:	83 ec 1c             	sub    esp,0x1c
c0002fca:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fcc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fcf:	0f 86 cc 01 00 00    	jbe    c00031a1 <get_fat+0x1ec>
c0002fd5:	89 c3                	mov    ebx,eax
c0002fd7:	89 d6                	mov    esi,edx
c0002fd9:	8a 07                	mov    al,BYTE PTR [edi]
c0002fdb:	3c 02                	cmp    al,0x2
c0002fdd:	0f 84 99 00 00 00    	je     c000307c <get_fat+0xc7>
c0002fe3:	77 09                	ja     c0002fee <get_fat+0x39>
c0002fe5:	fe c8                	dec    al
c0002fe7:	74 1a                	je     c0003003 <get_fat+0x4e>
c0002fe9:	e9 b3 01 00 00       	jmp    c00031a1 <get_fat+0x1ec>
c0002fee:	3c 03                	cmp    al,0x3
c0002ff0:	0f 84 b5 00 00 00    	je     c00030ab <get_fat+0xf6>
c0002ff6:	3c 04                	cmp    al,0x4
c0002ff8:	0f 84 e3 00 00 00    	je     c00030e1 <get_fat+0x12c>
c0002ffe:	e9 9e 01 00 00       	jmp    c00031a1 <get_fat+0x1ec>
c0003003:	89 d3                	mov    ebx,edx
c0003005:	31 c9                	xor    ecx,ecx
c0003007:	d1 eb                	shr    ebx,1
c0003009:	89 f8                	mov    eax,edi
c000300b:	01 d3                	add    ebx,edx
c000300d:	89 da                	mov    edx,ebx
c000300f:	c1 ea 09             	shr    edx,0x9
c0003012:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003015:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003018:	e8 10 f4 ff ff       	call   c000242d <move_window>
c000301d:	85 c0                	test   eax,eax
c000301f:	74 08                	je     c0003029 <get_fat+0x74>
c0003021:	83 c9 ff             	or     ecx,0xffffffff
c0003024:	e9 78 01 00 00       	jmp    c00031a1 <get_fat+0x1ec>
c0003029:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000302c:	31 c9                	xor    ecx,ecx
c000302e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003034:	89 ea                	mov    edx,ebp
c0003036:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000303a:	c1 ea 09             	shr    edx,0x9
c000303d:	89 f8                	mov    eax,edi
c000303f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003042:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003045:	e8 e3 f3 ff ff       	call   c000242d <move_window>
c000304a:	85 c0                	test   eax,eax
c000304c:	75 d3                	jne    c0003021 <get_fat+0x6c>
c000304e:	0f b6 c3             	movzx  eax,bl
c0003051:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003057:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000305c:	c1 e3 08             	shl    ebx,0x8
c000305f:	09 c3                	or     ebx,eax
c0003061:	89 d9                	mov    ecx,ebx
c0003063:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003069:	83 e6 01             	and    esi,0x1
c000306c:	0f 84 2f 01 00 00    	je     c00031a1 <get_fat+0x1ec>
c0003072:	89 d9                	mov    ecx,ebx
c0003074:	c1 e9 04             	shr    ecx,0x4
c0003077:	e9 25 01 00 00       	jmp    c00031a1 <get_fat+0x1ec>
c000307c:	31 c9                	xor    ecx,ecx
c000307e:	c1 ea 08             	shr    edx,0x8
c0003081:	89 f8                	mov    eax,edi
c0003083:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003086:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003089:	e8 9f f3 ff ff       	call   c000242d <move_window>
c000308e:	85 c0                	test   eax,eax
c0003090:	75 8f                	jne    c0003021 <get_fat+0x6c>
c0003092:	01 f6                	add    esi,esi
c0003094:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000309a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000309e:	e8 ac eb ff ff       	call   c0001c4f <ld_word>
c00030a3:	0f b7 c8             	movzx  ecx,ax
c00030a6:	e9 f6 00 00 00       	jmp    c00031a1 <get_fat+0x1ec>
c00030ab:	31 c9                	xor    ecx,ecx
c00030ad:	c1 ea 07             	shr    edx,0x7
c00030b0:	89 f8                	mov    eax,edi
c00030b2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030b5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030b8:	e8 70 f3 ff ff       	call   c000242d <move_window>
c00030bd:	85 c0                	test   eax,eax
c00030bf:	0f 85 5c ff ff ff    	jne    c0003021 <get_fat+0x6c>
c00030c5:	c1 e6 02             	shl    esi,0x2
c00030c8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030ce:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030d2:	e8 85 eb ff ff       	call   c0001c5c <ld_dword>
c00030d7:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030dc:	e9 b4 00 00 00       	jmp    c0003195 <get_fat+0x1e0>
c00030e1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030e4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030e7:	89 d1                	mov    ecx,edx
c00030e9:	09 c1                	or     ecx,eax
c00030eb:	74 06                	je     c00030f3 <get_fat+0x13e>
c00030ed:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030f1:	75 0f                	jne    c0003102 <get_fat+0x14d>
c00030f3:	b9 01 00 00 00       	mov    ecx,0x1
c00030f8:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030fc:	0f 85 9f 00 00 00    	jne    c00031a1 <get_fat+0x1ec>
c0003102:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003106:	89 f5                	mov    ebp,esi
c0003108:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000310d:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003110:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003113:	80 f9 02             	cmp    cl,0x2
c0003116:	75 35                	jne    c000314d <get_fat+0x198>
c0003118:	83 c0 ff             	add    eax,0xffffffff
c000311b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003120:	83 d2 ff             	adc    edx,0xffffffff
c0003123:	31 db                	xor    ebx,ebx
c0003125:	0f ac d0 09          	shrd   eax,edx,0x9
c0003129:	53                   	push   ebx
c000312a:	c1 ea 09             	shr    edx,0x9
c000312d:	51                   	push   ecx
c000312e:	52                   	push   edx
c000312f:	50                   	push   eax
c0003130:	e8 df 44 02 00       	call   c0027614 <__udivdi3>
c0003135:	83 c4 10             	add    esp,0x10
c0003138:	b9 01 00 00 00       	mov    ecx,0x1
c000313d:	39 c5                	cmp    ebp,eax
c000313f:	77 60                	ja     c00031a1 <get_fat+0x1ec>
c0003141:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003146:	74 59                	je     c00031a1 <get_fat+0x1ec>
c0003148:	8d 4e 01             	lea    ecx,[esi+0x1]
c000314b:	eb 54                	jmp    c00031a1 <get_fat+0x1ec>
c000314d:	80 f9 03             	cmp    cl,0x3
c0003150:	75 05                	jne    c0003157 <get_fat+0x1a2>
c0003152:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003155:	77 f1                	ja     c0003148 <get_fat+0x193>
c0003157:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000315c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003160:	75 3f                	jne    c00031a1 <get_fat+0x1ec>
c0003162:	31 c9                	xor    ecx,ecx
c0003164:	89 f2                	mov    edx,esi
c0003166:	89 f8                	mov    eax,edi
c0003168:	c1 ea 07             	shr    edx,0x7
c000316b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000316e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003171:	e8 b7 f2 ff ff       	call   c000242d <move_window>
c0003176:	85 c0                	test   eax,eax
c0003178:	0f 85 a3 fe ff ff    	jne    c0003021 <get_fat+0x6c>
c000317e:	c1 e6 02             	shl    esi,0x2
c0003181:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003187:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000318b:	e8 cc ea ff ff       	call   c0001c5c <ld_dword>
c0003190:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003195:	89 c1                	mov    ecx,eax
c0003197:	eb 08                	jmp    c00031a1 <get_fat+0x1ec>
c0003199:	b9 01 00 00 00       	mov    ecx,0x1
c000319e:	89 c8                	mov    eax,ecx
c00031a0:	c3                   	ret    
c00031a1:	83 c4 1c             	add    esp,0x1c
c00031a4:	89 c8                	mov    eax,ecx
c00031a6:	5b                   	pop    ebx
c00031a7:	5e                   	pop    esi
c00031a8:	5f                   	pop    edi
c00031a9:	5d                   	pop    ebp
c00031aa:	c3                   	ret    

c00031ab <dir_sdi>:
c00031ab:	55                   	push   ebp
c00031ac:	57                   	push   edi
c00031ad:	56                   	push   esi
c00031ae:	53                   	push   ebx
c00031af:	89 c3                	mov    ebx,eax
c00031b1:	83 ec 1c             	sub    esp,0x1c
c00031b4:	8b 38                	mov    edi,DWORD PTR [eax]
c00031b6:	31 c0                	xor    eax,eax
c00031b8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031bb:	0f 94 c0             	sete   al
c00031be:	48                   	dec    eax
c00031bf:	25 00 00 20 f0       	and    eax,0xf0200000
c00031c4:	05 00 00 00 10       	add    eax,0x10000000
c00031c9:	39 d0                	cmp    eax,edx
c00031cb:	77 0a                	ja     c00031d7 <dir_sdi+0x2c>
c00031cd:	b8 02 00 00 00       	mov    eax,0x2
c00031d2:	e9 c4 00 00 00       	jmp    c000329b <dir_sdi+0xf0>
c00031d7:	89 d6                	mov    esi,edx
c00031d9:	f6 c2 1f             	test   dl,0x1f
c00031dc:	75 ef                	jne    c00031cd <dir_sdi+0x22>
c00031de:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031e1:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031e4:	85 c9                	test   ecx,ecx
c00031e6:	75 2d                	jne    c0003215 <dir_sdi+0x6a>
c00031e8:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031eb:	77 1b                	ja     c0003208 <dir_sdi+0x5d>
c00031ed:	89 f2                	mov    edx,esi
c00031ef:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031f3:	c1 ea 05             	shr    edx,0x5
c00031f6:	39 c2                	cmp    edx,eax
c00031f8:	73 d3                	jae    c00031cd <dir_sdi+0x22>
c00031fa:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031fd:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003200:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003203:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003206:	eb 4b                	jmp    c0003253 <dir_sdi+0xa8>
c0003208:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320b:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000320f:	85 c0                	test   eax,eax
c0003211:	74 da                	je     c00031ed <dir_sdi+0x42>
c0003213:	89 c1                	mov    ecx,eax
c0003215:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003219:	c1 e5 09             	shl    ebp,0x9
c000321c:	89 ca                	mov    edx,ecx
c000321e:	39 ee                	cmp    esi,ebp
c0003220:	72 1c                	jb     c000323e <dir_sdi+0x93>
c0003222:	89 d8                	mov    eax,ebx
c0003224:	e8 8c fd ff ff       	call   c0002fb5 <get_fat>
c0003229:	89 c1                	mov    ecx,eax
c000322b:	83 f8 ff             	cmp    eax,0xffffffff
c000322e:	74 66                	je     c0003296 <dir_sdi+0xeb>
c0003230:	83 f8 01             	cmp    eax,0x1
c0003233:	76 98                	jbe    c00031cd <dir_sdi+0x22>
c0003235:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003238:	76 93                	jbe    c00031cd <dir_sdi+0x22>
c000323a:	29 ee                	sub    esi,ebp
c000323c:	eb de                	jmp    c000321c <dir_sdi+0x71>
c000323e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003242:	89 f8                	mov    eax,edi
c0003244:	e8 9f ec ff ff       	call   c0001ee8 <clst2sect>
c0003249:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000324d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003250:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003253:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003256:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003259:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000325c:	89 d1                	mov    ecx,edx
c000325e:	09 c1                	or     ecx,eax
c0003260:	0f 84 67 ff ff ff    	je     c00031cd <dir_sdi+0x22>
c0003266:	89 f1                	mov    ecx,esi
c0003268:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003270:	c1 e9 09             	shr    ecx,0x9
c0003273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003277:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000327b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000327f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003282:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003288:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000328b:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000328f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003292:	31 c0                	xor    eax,eax
c0003294:	eb 05                	jmp    c000329b <dir_sdi+0xf0>
c0003296:	b8 01 00 00 00       	mov    eax,0x1
c000329b:	83 c4 1c             	add    esp,0x1c
c000329e:	5b                   	pop    ebx
c000329f:	5e                   	pop    esi
c00032a0:	5f                   	pop    edi
c00032a1:	5d                   	pop    ebp
c00032a2:	c3                   	ret    

c00032a3 <create_chain>:
c00032a3:	55                   	push   ebp
c00032a4:	89 c5                	mov    ebp,eax
c00032a6:	57                   	push   edi
c00032a7:	56                   	push   esi
c00032a8:	53                   	push   ebx
c00032a9:	83 ec 1c             	sub    esp,0x1c
c00032ac:	85 d2                	test   edx,edx
c00032ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032b2:	8b 30                	mov    esi,DWORD PTR [eax]
c00032b4:	75 0e                	jne    c00032c4 <create_chain+0x21>
c00032b6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032b9:	85 ff                	test   edi,edi
c00032bb:	74 39                	je     c00032f6 <create_chain+0x53>
c00032bd:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032c0:	77 39                	ja     c00032fb <create_chain+0x58>
c00032c2:	eb 32                	jmp    c00032f6 <create_chain+0x53>
c00032c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032c8:	e8 e8 fc ff ff       	call   c0002fb5 <get_fat>
c00032cd:	89 c3                	mov    ebx,eax
c00032cf:	83 f8 01             	cmp    eax,0x1
c00032d2:	77 0a                	ja     c00032de <create_chain+0x3b>
c00032d4:	bb 01 00 00 00       	mov    ebx,0x1
c00032d9:	e9 ba 01 00 00       	jmp    c0003498 <create_chain+0x1f5>
c00032de:	83 f8 ff             	cmp    eax,0xffffffff
c00032e1:	0f 84 62 01 00 00    	je     c0003449 <create_chain+0x1a6>
c00032e7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ea:	0f 87 a8 01 00 00    	ja     c0003498 <create_chain+0x1f5>
c00032f0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032f4:	eb 05                	jmp    c00032fb <create_chain+0x58>
c00032f6:	bf 01 00 00 00       	mov    edi,0x1
c00032fb:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032ff:	75 07                	jne    c0003308 <create_chain+0x65>
c0003301:	31 db                	xor    ebx,ebx
c0003303:	e9 90 01 00 00       	jmp    c0003498 <create_chain+0x1f5>
c0003308:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000330b:	75 74                	jne    c0003381 <create_chain+0xde>
c000330d:	b9 01 00 00 00       	mov    ecx,0x1
c0003312:	89 fa                	mov    edx,edi
c0003314:	89 f0                	mov    eax,esi
c0003316:	e8 2d f9 ff ff       	call   c0002c48 <find_bitmap>
c000331b:	89 c3                	mov    ebx,eax
c000331d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003320:	83 f8 fd             	cmp    eax,0xfffffffd
c0003323:	0f 87 6f 01 00 00    	ja     c0003498 <create_chain+0x1f5>
c0003329:	83 ec 0c             	sub    esp,0xc
c000332c:	b9 01 00 00 00       	mov    ecx,0x1
c0003331:	6a 01                	push   0x1
c0003333:	89 da                	mov    edx,ebx
c0003335:	89 f0                	mov    eax,esi
c0003337:	e8 bf f9 ff ff       	call   c0002cfb <change_bitmap>
c000333c:	83 c4 10             	add    esp,0x10
c000333f:	83 f8 02             	cmp    eax,0x2
c0003342:	74 90                	je     c00032d4 <create_chain+0x31>
c0003344:	83 f8 01             	cmp    eax,0x1
c0003347:	0f 84 fc 00 00 00    	je     c0003449 <create_chain+0x1a6>
c000334d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003352:	75 09                	jne    c000335d <create_chain+0xba>
c0003354:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003358:	e9 0c 01 00 00       	jmp    c0003469 <create_chain+0x1c6>
c000335d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003361:	0f 85 e7 00 00 00    	jne    c000344e <create_chain+0x1ab>
c0003367:	8d 57 01             	lea    edx,[edi+0x1]
c000336a:	39 da                	cmp    edx,ebx
c000336c:	0f 84 f7 00 00 00    	je     c0003469 <create_chain+0x1c6>
c0003372:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003375:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003379:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000337c:	e9 cd 00 00 00       	jmp    c000344e <create_chain+0x1ab>
c0003381:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003385:	75 41                	jne    c00033c8 <create_chain+0x125>
c0003387:	8d 5f 01             	lea    ebx,[edi+0x1]
c000338a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000338d:	77 05                	ja     c0003394 <create_chain+0xf1>
c000338f:	bb 02 00 00 00       	mov    ebx,0x2
c0003394:	89 da                	mov    edx,ebx
c0003396:	89 e8                	mov    eax,ebp
c0003398:	e8 18 fc ff ff       	call   c0002fb5 <get_fat>
c000339d:	83 f8 01             	cmp    eax,0x1
c00033a0:	0f 84 2e ff ff ff    	je     c00032d4 <create_chain+0x31>
c00033a6:	83 f8 ff             	cmp    eax,0xffffffff
c00033a9:	0f 84 9a 00 00 00    	je     c0003449 <create_chain+0x1a6>
c00033af:	85 c0                	test   eax,eax
c00033b1:	74 11                	je     c00033c4 <create_chain+0x121>
c00033b3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033b6:	83 f8 01             	cmp    eax,0x1
c00033b9:	76 0d                	jbe    c00033c8 <create_chain+0x125>
c00033bb:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033be:	76 08                	jbe    c00033c8 <create_chain+0x125>
c00033c0:	89 c7                	mov    edi,eax
c00033c2:	eb 04                	jmp    c00033c8 <create_chain+0x125>
c00033c4:	85 db                	test   ebx,ebx
c00033c6:	75 38                	jne    c0003400 <create_chain+0x15d>
c00033c8:	89 fb                	mov    ebx,edi
c00033ca:	43                   	inc    ebx
c00033cb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033ce:	77 0e                	ja     c00033de <create_chain+0x13b>
c00033d0:	83 ff 01             	cmp    edi,0x1
c00033d3:	0f 86 28 ff ff ff    	jbe    c0003301 <create_chain+0x5e>
c00033d9:	bb 02 00 00 00       	mov    ebx,0x2
c00033de:	89 da                	mov    edx,ebx
c00033e0:	89 e8                	mov    eax,ebp
c00033e2:	e8 ce fb ff ff       	call   c0002fb5 <get_fat>
c00033e7:	85 c0                	test   eax,eax
c00033e9:	74 15                	je     c0003400 <create_chain+0x15d>
c00033eb:	83 f8 01             	cmp    eax,0x1
c00033ee:	0f 84 e0 fe ff ff    	je     c00032d4 <create_chain+0x31>
c00033f4:	40                   	inc    eax
c00033f5:	74 52                	je     c0003449 <create_chain+0x1a6>
c00033f7:	39 fb                	cmp    ebx,edi
c00033f9:	75 cf                	jne    c00033ca <create_chain+0x127>
c00033fb:	e9 01 ff ff ff       	jmp    c0003301 <create_chain+0x5e>
c0003400:	83 c9 ff             	or     ecx,0xffffffff
c0003403:	89 da                	mov    edx,ebx
c0003405:	89 f0                	mov    eax,esi
c0003407:	e8 a4 f9 ff ff       	call   c0002db0 <put_fat>
c000340c:	85 c0                	test   eax,eax
c000340e:	75 32                	jne    c0003442 <create_chain+0x19f>
c0003410:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003415:	74 11                	je     c0003428 <create_chain+0x185>
c0003417:	89 d9                	mov    ecx,ebx
c0003419:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000341d:	89 f0                	mov    eax,esi
c000341f:	e8 8c f9 ff ff       	call   c0002db0 <put_fat>
c0003424:	85 c0                	test   eax,eax
c0003426:	75 1a                	jne    c0003442 <create_chain+0x19f>
c0003428:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000342b:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000342e:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003431:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003434:	39 d0                	cmp    eax,edx
c0003436:	77 04                	ja     c000343c <create_chain+0x199>
c0003438:	48                   	dec    eax
c0003439:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000343c:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003440:	eb 56                	jmp    c0003498 <create_chain+0x1f5>
c0003442:	48                   	dec    eax
c0003443:	0f 85 8b fe ff ff    	jne    c00032d4 <create_chain+0x31>
c0003449:	83 cb ff             	or     ebx,0xffffffff
c000344c:	eb 4a                	jmp    c0003498 <create_chain+0x1f5>
c000344e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003452:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003455:	41                   	inc    ecx
c0003456:	39 d9                	cmp    ecx,ebx
c0003458:	75 19                	jne    c0003473 <create_chain+0x1d0>
c000345a:	b9 02 00 00 00       	mov    ecx,0x2
c000345f:	85 d2                	test   edx,edx
c0003461:	74 03                	je     c0003466 <create_chain+0x1c3>
c0003463:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003466:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003469:	85 c0                	test   eax,eax
c000346b:	0f 85 63 fe ff ff    	jne    c00032d4 <create_chain+0x31>
c0003471:	eb b5                	jmp    c0003428 <create_chain+0x185>
c0003473:	85 d2                	test   edx,edx
c0003475:	75 07                	jne    c000347e <create_chain+0x1db>
c0003477:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000347e:	89 d9                	mov    ecx,ebx
c0003480:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003484:	89 e8                	mov    eax,ebp
c0003486:	e8 bb fa ff ff       	call   c0002f46 <fill_last_frag>
c000348b:	85 c0                	test   eax,eax
c000348d:	75 b3                	jne    c0003442 <create_chain+0x19f>
c000348f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003496:	eb 90                	jmp    c0003428 <create_chain+0x185>
c0003498:	83 c4 1c             	add    esp,0x1c
c000349b:	89 d8                	mov    eax,ebx
c000349d:	5b                   	pop    ebx
c000349e:	5e                   	pop    esi
c000349f:	5f                   	pop    edi
c00034a0:	5d                   	pop    ebp
c00034a1:	c3                   	ret    

c00034a2 <remove_chain>:
c00034a2:	55                   	push   ebp
c00034a3:	57                   	push   edi
c00034a4:	56                   	push   esi
c00034a5:	53                   	push   ebx
c00034a6:	83 ec 1c             	sub    esp,0x1c
c00034a9:	83 fa 01             	cmp    edx,0x1
c00034ac:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034b0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034b2:	77 0a                	ja     c00034be <remove_chain+0x1c>
c00034b4:	b8 02 00 00 00       	mov    eax,0x2
c00034b9:	e9 24 01 00 00       	jmp    c00035e2 <remove_chain+0x140>
c00034be:	89 d6                	mov    esi,edx
c00034c0:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034c3:	76 ef                	jbe    c00034b4 <remove_chain+0x12>
c00034c5:	89 c7                	mov    edi,eax
c00034c7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034cc:	75 06                	jne    c00034d4 <remove_chain+0x32>
c00034ce:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034d2:	eb 54                	jmp    c0003528 <remove_chain+0x86>
c00034d4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034d7:	75 06                	jne    c00034df <remove_chain+0x3d>
c00034d9:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034dd:	74 ef                	je     c00034ce <remove_chain+0x2c>
c00034df:	83 c9 ff             	or     ecx,0xffffffff
c00034e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034e6:	89 d8                	mov    eax,ebx
c00034e8:	e8 c3 f8 ff ff       	call   c0002db0 <put_fat>
c00034ed:	85 c0                	test   eax,eax
c00034ef:	74 dd                	je     c00034ce <remove_chain+0x2c>
c00034f1:	e9 ec 00 00 00       	jmp    c00035e2 <remove_chain+0x140>
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	74 b9                	je     c00034b4 <remove_chain+0x12>
c00034fb:	83 f8 ff             	cmp    eax,0xffffffff
c00034fe:	74 6d                	je     c000356d <remove_chain+0xcb>
c0003500:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003503:	75 6f                	jne    c0003574 <remove_chain+0xd2>
c0003505:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003508:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000350b:	8d 51 fe             	lea    edx,[ecx-0x2]
c000350e:	39 d0                	cmp    eax,edx
c0003510:	73 08                	jae    c000351a <remove_chain+0x78>
c0003512:	40                   	inc    eax
c0003513:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003517:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000351a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000351d:	39 e9                	cmp    ecx,ebp
c000351f:	75 64                	jne    c0003585 <remove_chain+0xe3>
c0003521:	89 ee                	mov    esi,ebp
c0003523:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003526:	76 0f                	jbe    c0003537 <remove_chain+0x95>
c0003528:	89 f2                	mov    edx,esi
c000352a:	89 f8                	mov    eax,edi
c000352c:	e8 84 fa ff ff       	call   c0002fb5 <get_fat>
c0003531:	89 c5                	mov    ebp,eax
c0003533:	85 c0                	test   eax,eax
c0003535:	75 bf                	jne    c00034f6 <remove_chain+0x54>
c0003537:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000353a:	0f 85 a0 00 00 00    	jne    c00035e0 <remove_chain+0x13e>
c0003540:	eb 6c                	jmp    c00035ae <remove_chain+0x10c>
c0003542:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003545:	84 c0                	test   al,al
c0003547:	75 7d                	jne    c00035c6 <remove_chain+0x124>
c0003549:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000354c:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003550:	0f 84 86 00 00 00    	je     c00035dc <remove_chain+0x13a>
c0003556:	89 da                	mov    edx,ebx
c0003558:	89 f8                	mov    eax,edi
c000355a:	e8 56 fa ff ff       	call   c0002fb5 <get_fat>
c000355f:	83 f8 01             	cmp    eax,0x1
c0003562:	0f 86 4c ff ff ff    	jbe    c00034b4 <remove_chain+0x12>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	75 4e                	jne    c00035bb <remove_chain+0x119>
c000356d:	b8 01 00 00 00       	mov    eax,0x1
c0003572:	eb 6e                	jmp    c00035e2 <remove_chain+0x140>
c0003574:	31 c9                	xor    ecx,ecx
c0003576:	89 f2                	mov    edx,esi
c0003578:	89 d8                	mov    eax,ebx
c000357a:	e8 31 f8 ff ff       	call   c0002db0 <put_fat>
c000357f:	85 c0                	test   eax,eax
c0003581:	74 82                	je     c0003505 <remove_chain+0x63>
c0003583:	eb 5d                	jmp    c00035e2 <remove_chain+0x140>
c0003585:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003588:	75 1b                	jne    c00035a5 <remove_chain+0x103>
c000358a:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000358e:	89 d8                	mov    eax,ebx
c0003590:	83 ec 0c             	sub    esp,0xc
c0003593:	6a 00                	push   0x0
c0003595:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003599:	e8 5d f7 ff ff       	call   c0002cfb <change_bitmap>
c000359e:	83 c4 10             	add    esp,0x10
c00035a1:	85 c0                	test   eax,eax
c00035a3:	75 3d                	jne    c00035e2 <remove_chain+0x140>
c00035a5:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035a9:	e9 73 ff ff ff       	jmp    c0003521 <remove_chain+0x7f>
c00035ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035b3:	75 8d                	jne    c0003542 <remove_chain+0xa0>
c00035b5:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035b9:	eb 25                	jmp    c00035e0 <remove_chain+0x13e>
c00035bb:	8d 53 01             	lea    edx,[ebx+0x1]
c00035be:	89 c3                	mov    ebx,eax
c00035c0:	39 c2                	cmp    edx,eax
c00035c2:	74 88                	je     c000354c <remove_chain+0xaa>
c00035c4:	eb 1a                	jmp    c00035e0 <remove_chain+0x13e>
c00035c6:	3c 03                	cmp    al,0x3
c00035c8:	75 16                	jne    c00035e0 <remove_chain+0x13e>
c00035ca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035cd:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035d1:	77 0d                	ja     c00035e0 <remove_chain+0x13e>
c00035d3:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035d6:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035da:	72 04                	jb     c00035e0 <remove_chain+0x13e>
c00035dc:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035e0:	31 c0                	xor    eax,eax
c00035e2:	83 c4 1c             	add    esp,0x1c
c00035e5:	5b                   	pop    ebx
c00035e6:	5e                   	pop    esi
c00035e7:	5f                   	pop    edi
c00035e8:	5d                   	pop    ebp
c00035e9:	c3                   	ret    

c00035ea <dir_clear>:
c00035ea:	55                   	push   ebp
c00035eb:	57                   	push   edi
c00035ec:	56                   	push   esi
c00035ed:	89 c6                	mov    esi,eax
c00035ef:	53                   	push   ebx
c00035f0:	83 ec 1c             	sub    esp,0x1c
c00035f3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035f7:	e8 9d ed ff ff       	call   c0002399 <sync_window>
c00035fc:	85 c0                	test   eax,eax
c00035fe:	0f 85 de 00 00 00    	jne    c00036e2 <dir_clear+0xf8>
c0003604:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003608:	89 f0                	mov    eax,esi
c000360a:	8d 6e 54             	lea    ebp,[esi+0x54]
c000360d:	e8 d6 e8 ff ff       	call   c0001ee8 <clst2sect>
c0003612:	b9 00 02 00 00       	mov    ecx,0x200
c0003617:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000361b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361f:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003622:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003625:	89 e8                	mov    eax,ebp
c0003627:	31 d2                	xor    edx,edx
c0003629:	e8 b5 e6 ff ff       	call   c0001ce3 <mem_set>
c000362e:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003632:	c1 e3 09             	shl    ebx,0x9
c0003635:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000363b:	76 1f                	jbe    c000365c <dir_clear+0x72>
c000363d:	bb 00 80 00 00       	mov    ebx,0x8000
c0003642:	eb 18                	jmp    c000365c <dir_clear+0x72>
c0003644:	83 ec 0c             	sub    esp,0xc
c0003647:	53                   	push   ebx
c0003648:	e8 35 4e 00 00       	call   c0008482 <ff_memalloc>
c000364d:	83 c4 10             	add    esp,0x10
c0003650:	89 c7                	mov    edi,eax
c0003652:	85 c0                	test   eax,eax
c0003654:	0f 85 8f 00 00 00    	jne    c00036e9 <dir_clear+0xff>
c000365a:	d1 eb                	shr    ebx,1
c000365c:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003662:	77 e0                	ja     c0003644 <dir_clear+0x5a>
c0003664:	31 db                	xor    ebx,ebx
c0003666:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000366a:	39 d8                	cmp    eax,ebx
c000366c:	76 66                	jbe    c00036d4 <dir_clear+0xea>
c000366e:	83 ec 0c             	sub    esp,0xc
c0003671:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003675:	6a 01                	push   0x1
c0003677:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000367b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000367f:	55                   	push   ebp
c0003680:	50                   	push   eax
c0003681:	e8 94 e5 ff ff       	call   c0001c1a <disk_write>
c0003686:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000368b:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003690:	83 c4 20             	add    esp,0x20
c0003693:	85 c0                	test   eax,eax
c0003695:	75 3d                	jne    c00036d4 <dir_clear+0xea>
c0003697:	43                   	inc    ebx
c0003698:	eb cc                	jmp    c0003666 <dir_clear+0x7c>
c000369a:	83 ec 0c             	sub    esp,0xc
c000369d:	31 d2                	xor    edx,edx
c000369f:	55                   	push   ebp
c00036a0:	89 d8                	mov    eax,ebx
c00036a2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036a6:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036aa:	52                   	push   edx
c00036ab:	50                   	push   eax
c00036ac:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036b0:	57                   	push   edi
c00036b1:	50                   	push   eax
c00036b2:	e8 63 e5 ff ff       	call   c0001c1a <disk_write>
c00036b7:	83 c4 20             	add    esp,0x20
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 0a                	jne    c00036c8 <dir_clear+0xde>
c00036be:	01 eb                	add    ebx,ebp
c00036c0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c4:	39 d8                	cmp    eax,ebx
c00036c6:	77 d2                	ja     c000369a <dir_clear+0xb0>
c00036c8:	83 ec 0c             	sub    esp,0xc
c00036cb:	57                   	push   edi
c00036cc:	e8 c7 4d 00 00       	call   c0008498 <ff_memfree>
c00036d1:	83 c4 10             	add    esp,0x10
c00036d4:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d8:	39 d8                	cmp    eax,ebx
c00036da:	0f 95 c0             	setne  al
c00036dd:	0f b6 c0             	movzx  eax,al
c00036e0:	eb 19                	jmp    c00036fb <dir_clear+0x111>
c00036e2:	b8 01 00 00 00       	mov    eax,0x1
c00036e7:	eb 12                	jmp    c00036fb <dir_clear+0x111>
c00036e9:	89 d9                	mov    ecx,ebx
c00036eb:	31 d2                	xor    edx,edx
c00036ed:	c1 eb 09             	shr    ebx,0x9
c00036f0:	e8 ee e5 ff ff       	call   c0001ce3 <mem_set>
c00036f5:	89 dd                	mov    ebp,ebx
c00036f7:	31 db                	xor    ebx,ebx
c00036f9:	eb c5                	jmp    c00036c0 <dir_clear+0xd6>
c00036fb:	83 c4 1c             	add    esp,0x1c
c00036fe:	5b                   	pop    ebx
c00036ff:	5e                   	pop    esi
c0003700:	5f                   	pop    edi
c0003701:	5d                   	pop    ebp
c0003702:	c3                   	ret    

c0003703 <dir_next>:
c0003703:	55                   	push   ebp
c0003704:	57                   	push   edi
c0003705:	56                   	push   esi
c0003706:	53                   	push   ebx
c0003707:	89 c3                	mov    ebx,eax
c0003709:	83 ec 1c             	sub    esp,0x1c
c000370c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000370e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003712:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003715:	8d 78 20             	lea    edi,[eax+0x20]
c0003718:	31 c0                	xor    eax,eax
c000371a:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000371e:	0f 94 c0             	sete   al
c0003721:	48                   	dec    eax
c0003722:	25 00 00 20 f0       	and    eax,0xf0200000
c0003727:	05 00 00 00 10       	add    eax,0x10000000
c000372c:	39 f8                	cmp    eax,edi
c000372e:	77 0e                	ja     c000373e <dir_next+0x3b>
c0003730:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003737:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000373e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003741:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003744:	b8 04 00 00 00       	mov    eax,0x4
c0003749:	89 ce                	mov    esi,ecx
c000374b:	09 d6                	or     esi,edx
c000374d:	0f 84 da 00 00 00    	je     c000382d <dir_next+0x12a>
c0003753:	89 f8                	mov    eax,edi
c0003755:	25 ff 01 00 00       	and    eax,0x1ff
c000375a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000375e:	0f 85 b9 00 00 00    	jne    c000381d <dir_next+0x11a>
c0003764:	83 c2 01             	add    edx,0x1
c0003767:	83 d1 00             	adc    ecx,0x0
c000376a:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000376d:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003770:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003773:	85 d2                	test   edx,edx
c0003775:	75 29                	jne    c00037a0 <dir_next+0x9d>
c0003777:	89 fa                	mov    edx,edi
c0003779:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000377d:	c1 ea 05             	shr    edx,0x5
c0003780:	39 c2                	cmp    edx,eax
c0003782:	0f 82 95 00 00 00    	jb     c000381d <dir_next+0x11a>
c0003788:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000378f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003796:	b8 04 00 00 00       	mov    eax,0x4
c000379b:	e9 8d 00 00 00       	jmp    c000382d <dir_next+0x12a>
c00037a0:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037a4:	89 f9                	mov    ecx,edi
c00037a6:	48                   	dec    eax
c00037a7:	c1 e9 09             	shr    ecx,0x9
c00037aa:	85 c8                	test   eax,ecx
c00037ac:	75 6f                	jne    c000381d <dir_next+0x11a>
c00037ae:	89 d8                	mov    eax,ebx
c00037b0:	e8 00 f8 ff ff       	call   c0002fb5 <get_fat>
c00037b5:	89 c6                	mov    esi,eax
c00037b7:	83 f8 01             	cmp    eax,0x1
c00037ba:	77 07                	ja     c00037c3 <dir_next+0xc0>
c00037bc:	b8 02 00 00 00       	mov    eax,0x2
c00037c1:	eb 6a                	jmp    c000382d <dir_next+0x12a>
c00037c3:	83 f8 ff             	cmp    eax,0xffffffff
c00037c6:	75 07                	jne    c00037cf <dir_next+0xcc>
c00037c8:	b8 01 00 00 00       	mov    eax,0x1
c00037cd:	eb 5e                	jmp    c000382d <dir_next+0x12a>
c00037cf:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037d2:	77 37                	ja     c000380b <dir_next+0x108>
c00037d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d9:	74 ad                	je     c0003788 <dir_next+0x85>
c00037db:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037de:	89 d8                	mov    eax,ebx
c00037e0:	e8 be fa ff ff       	call   c00032a3 <create_chain>
c00037e5:	89 c6                	mov    esi,eax
c00037e7:	b8 07 00 00 00       	mov    eax,0x7
c00037ec:	85 f6                	test   esi,esi
c00037ee:	74 3d                	je     c000382d <dir_next+0x12a>
c00037f0:	83 fe 01             	cmp    esi,0x1
c00037f3:	74 c7                	je     c00037bc <dir_next+0xb9>
c00037f5:	83 fe ff             	cmp    esi,0xffffffff
c00037f8:	74 ce                	je     c00037c8 <dir_next+0xc5>
c00037fa:	89 f2                	mov    edx,esi
c00037fc:	89 e8                	mov    eax,ebp
c00037fe:	e8 e7 fd ff ff       	call   c00035ea <dir_clear>
c0003803:	85 c0                	test   eax,eax
c0003805:	75 c1                	jne    c00037c8 <dir_next+0xc5>
c0003807:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000380b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000380e:	89 f2                	mov    edx,esi
c0003810:	89 e8                	mov    eax,ebp
c0003812:	e8 d1 e6 ff ff       	call   c0001ee8 <clst2sect>
c0003817:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000381a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000381d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003821:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003824:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003828:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000382b:	31 c0                	xor    eax,eax
c000382d:	83 c4 1c             	add    esp,0x1c
c0003830:	5b                   	pop    ebx
c0003831:	5e                   	pop    esi
c0003832:	5f                   	pop    edi
c0003833:	5d                   	pop    ebp
c0003834:	c3                   	ret    

c0003835 <load_xdir>:
c0003835:	55                   	push   ebp
c0003836:	57                   	push   edi
c0003837:	56                   	push   esi
c0003838:	89 c6                	mov    esi,eax
c000383a:	53                   	push   ebx
c000383b:	83 ec 1c             	sub    esp,0x1c
c000383e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003840:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003843:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003846:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003849:	e8 df eb ff ff       	call   c000242d <move_window>
c000384e:	89 c3                	mov    ebx,eax
c0003850:	85 c0                	test   eax,eax
c0003852:	0f 85 0c 01 00 00    	jne    c0003964 <load_xdir+0x12f>
c0003858:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000385b:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000385e:	0f 85 fb 00 00 00    	jne    c000395f <load_xdir+0x12a>
c0003864:	89 f8                	mov    eax,edi
c0003866:	b9 20 00 00 00       	mov    ecx,0x20
c000386b:	e8 5e e4 ff ff       	call   c0001cce <mem_cpy>
c0003870:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003874:	40                   	inc    eax
c0003875:	c1 e0 05             	shl    eax,0x5
c0003878:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000387c:	83 e8 60             	sub    eax,0x60
c000387f:	3d 00 02 00 00       	cmp    eax,0x200
c0003884:	0f 87 d5 00 00 00    	ja     c000395f <load_xdir+0x12a>
c000388a:	31 d2                	xor    edx,edx
c000388c:	89 f0                	mov    eax,esi
c000388e:	e8 70 fe ff ff       	call   c0003703 <dir_next>
c0003893:	89 c3                	mov    ebx,eax
c0003895:	83 f8 04             	cmp    eax,0x4
c0003898:	0f 84 c1 00 00 00    	je     c000395f <load_xdir+0x12a>
c000389e:	85 c0                	test   eax,eax
c00038a0:	0f 85 be 00 00 00    	jne    c0003964 <load_xdir+0x12f>
c00038a6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038a9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038ac:	8b 06                	mov    eax,DWORD PTR [esi]
c00038ae:	e8 7a eb ff ff       	call   c000242d <move_window>
c00038b3:	89 c3                	mov    ebx,eax
c00038b5:	85 c0                	test   eax,eax
c00038b7:	0f 85 a7 00 00 00    	jne    c0003964 <load_xdir+0x12f>
c00038bd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038c0:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038c3:	0f 85 96 00 00 00    	jne    c000395f <load_xdir+0x12a>
c00038c9:	8d 47 20             	lea    eax,[edi+0x20]
c00038cc:	b9 20 00 00 00       	mov    ecx,0x20
c00038d1:	e8 f8 e3 ff ff       	call   c0001cce <mem_cpy>
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038dc:	b9 0f 00 00 00       	mov    ecx,0xf
c00038e1:	83 c0 2c             	add    eax,0x2c
c00038e4:	f7 f1                	div    ecx
c00038e6:	c1 e0 05             	shl    eax,0x5
c00038e9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ed:	77 70                	ja     c000395f <load_xdir+0x12a>
c00038ef:	bd 40 00 00 00       	mov    ebp,0x40
c00038f4:	31 d2                	xor    edx,edx
c00038f6:	89 f0                	mov    eax,esi
c00038f8:	e8 06 fe ff ff       	call   c0003703 <dir_next>
c00038fd:	89 c3                	mov    ebx,eax
c00038ff:	83 f8 04             	cmp    eax,0x4
c0003902:	74 5b                	je     c000395f <load_xdir+0x12a>
c0003904:	85 c0                	test   eax,eax
c0003906:	75 5c                	jne    c0003964 <load_xdir+0x12f>
c0003908:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000390b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000390e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003910:	e8 18 eb ff ff       	call   c000242d <move_window>
c0003915:	89 c3                	mov    ebx,eax
c0003917:	85 c0                	test   eax,eax
c0003919:	75 49                	jne    c0003964 <load_xdir+0x12f>
c000391b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391e:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003921:	75 3c                	jne    c000395f <load_xdir+0x12a>
c0003923:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003929:	77 0d                	ja     c0003938 <load_xdir+0x103>
c000392b:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000392e:	b9 20 00 00 00       	mov    ecx,0x20
c0003933:	e8 96 e3 ff ff       	call   c0001cce <mem_cpy>
c0003938:	83 c5 20             	add    ebp,0x20
c000393b:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000393f:	77 b3                	ja     c00038f4 <load_xdir+0xbf>
c0003941:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003947:	77 1b                	ja     c0003964 <load_xdir+0x12f>
c0003949:	89 f8                	mov    eax,edi
c000394b:	e8 cd e7 ff ff       	call   c000211d <xdir_sum>
c0003950:	89 c1                	mov    ecx,eax
c0003952:	8d 47 02             	lea    eax,[edi+0x2]
c0003955:	e8 f5 e2 ff ff       	call   c0001c4f <ld_word>
c000395a:	66 39 c1             	cmp    cx,ax
c000395d:	74 05                	je     c0003964 <load_xdir+0x12f>
c000395f:	bb 02 00 00 00       	mov    ebx,0x2
c0003964:	83 c4 1c             	add    esp,0x1c
c0003967:	89 d8                	mov    eax,ebx
c0003969:	5b                   	pop    ebx
c000396a:	5e                   	pop    esi
c000396b:	5f                   	pop    edi
c000396c:	5d                   	pop    ebp
c000396d:	c3                   	ret    

c000396e <load_obj_xdir>:
c000396e:	53                   	push   ebx
c000396f:	89 c3                	mov    ebx,eax
c0003971:	83 ec 08             	sub    esp,0x8
c0003974:	8b 02                	mov    eax,DWORD PTR [edx]
c0003976:	89 03                	mov    DWORD PTR [ebx],eax
c0003978:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000397b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000397e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003981:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003984:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003987:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000398e:	30 c0                	xor    al,al
c0003990:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003997:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000399a:	89 d8                	mov    eax,ebx
c000399c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000399f:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039a2:	e8 04 f8 ff ff       	call   c00031ab <dir_sdi>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	75 0b                	jne    c00039b6 <load_obj_xdir+0x48>
c00039ab:	89 d8                	mov    eax,ebx
c00039ad:	83 c4 08             	add    esp,0x8
c00039b0:	5b                   	pop    ebx
c00039b1:	e9 7f fe ff ff       	jmp    c0003835 <load_xdir>
c00039b6:	83 c4 08             	add    esp,0x8
c00039b9:	5b                   	pop    ebx
c00039ba:	c3                   	ret    

c00039bb <dir_read>:
c00039bb:	55                   	push   ebp
c00039bc:	bd 04 00 00 00       	mov    ebp,0x4
c00039c1:	57                   	push   edi
c00039c2:	56                   	push   esi
c00039c3:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c8:	53                   	push   ebx
c00039c9:	89 c3                	mov    ebx,eax
c00039cb:	83 ec 1c             	sub    esp,0x1c
c00039ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039d2:	8b 38                	mov    edi,DWORD PTR [eax]
c00039d4:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039d9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039dc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039df:	89 c8                	mov    eax,ecx
c00039e1:	09 d0                	or     eax,edx
c00039e3:	0f 84 25 01 00 00    	je     c0003b0e <dir_read+0x153>
c00039e9:	89 f8                	mov    eax,edi
c00039eb:	e8 3d ea ff ff       	call   c000242d <move_window>
c00039f0:	89 c5                	mov    ebp,eax
c00039f2:	85 c0                	test   eax,eax
c00039f4:	0f 85 23 01 00 00    	jne    c0003b1d <dir_read+0x162>
c00039fa:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039fd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039ff:	84 c9                	test   cl,cl
c0003a01:	0f 84 11 01 00 00    	je     c0003b18 <dir_read+0x15d>
c0003a07:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a0a:	75 48                	jne    c0003a54 <dir_read+0x99>
c0003a0c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a11:	74 10                	je     c0003a23 <dir_read+0x68>
c0003a13:	80 f9 83             	cmp    cl,0x83
c0003a16:	0f 85 dd 00 00 00    	jne    c0003af9 <dir_read+0x13e>
c0003a1c:	31 ed                	xor    ebp,ebp
c0003a1e:	e9 08 01 00 00       	jmp    c0003b2b <dir_read+0x170>
c0003a23:	80 f9 85             	cmp    cl,0x85
c0003a26:	0f 85 cd 00 00 00    	jne    c0003af9 <dir_read+0x13e>
c0003a2c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a2f:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a32:	89 d8                	mov    eax,ebx
c0003a34:	e8 fc fd ff ff       	call   c0003835 <load_xdir>
c0003a39:	89 c5                	mov    ebp,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	0f 85 da 00 00 00    	jne    c0003b1d <dir_read+0x162>
c0003a43:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a46:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a49:	83 e0 3f             	and    eax,0x3f
c0003a4c:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a4f:	e9 d7 00 00 00       	jmp    c0003b2b <dir_read+0x170>
c0003a54:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a57:	83 e0 3f             	and    eax,0x3f
c0003a5a:	80 f9 2e             	cmp    cl,0x2e
c0003a5d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a61:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a64:	0f 84 8a 00 00 00    	je     c0003af4 <dir_read+0x139>
c0003a6a:	80 f9 e5             	cmp    cl,0xe5
c0003a6d:	0f 84 81 00 00 00    	je     c0003af4 <dir_read+0x139>
c0003a73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a77:	83 e0 1f             	and    eax,0x1f
c0003a7a:	83 f8 08             	cmp    eax,0x8
c0003a7d:	0f 94 c0             	sete   al
c0003a80:	0f b6 c0             	movzx  eax,al
c0003a83:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a87:	75 6b                	jne    c0003af4 <dir_read+0x139>
c0003a89:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a8e:	75 44                	jne    c0003ad4 <dir_read+0x119>
c0003a90:	f6 c1 40             	test   cl,0x40
c0003a93:	74 12                	je     c0003aa7 <dir_read+0xec>
c0003a95:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a98:	83 e1 bf             	and    ecx,0xffffffbf
c0003a9b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a9f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003aa2:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003aa5:	eb 06                	jmp    c0003aad <dir_read+0xf2>
c0003aa7:	89 f0                	mov    eax,esi
c0003aa9:	38 c8                	cmp    al,cl
c0003aab:	75 47                	jne    c0003af4 <dir_read+0x139>
c0003aad:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ab1:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ab6:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003ab9:	75 3e                	jne    c0003af9 <dir_read+0x13e>
c0003abb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003abf:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ac2:	e8 8a e4 ff ff       	call   c0001f51 <pick_lfn>
c0003ac7:	85 c0                	test   eax,eax
c0003ac9:	74 2e                	je     c0003af9 <dir_read+0x13e>
c0003acb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003acf:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ad2:	eb 25                	jmp    c0003af9 <dir_read+0x13e>
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	84 c0                	test   al,al
c0003ad8:	75 11                	jne    c0003aeb <dir_read+0x130>
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	e8 2a e6 ff ff       	call   c000210b <sum_sfn>
c0003ae1:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ae5:	0f 84 31 ff ff ff    	je     c0003a1c <dir_read+0x61>
c0003aeb:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003af2:	eb 37                	jmp    c0003b2b <dir_read+0x170>
c0003af4:	be ff ff ff ff       	mov    esi,0xffffffff
c0003af9:	31 d2                	xor    edx,edx
c0003afb:	89 d8                	mov    eax,ebx
c0003afd:	e8 01 fc ff ff       	call   c0003703 <dir_next>
c0003b02:	89 c5                	mov    ebp,eax
c0003b04:	85 c0                	test   eax,eax
c0003b06:	0f 84 cd fe ff ff    	je     c00039d9 <dir_read+0x1e>
c0003b0c:	eb 0f                	jmp    c0003b1d <dir_read+0x162>
c0003b0e:	85 ed                	test   ebp,ebp
c0003b10:	0f 84 06 ff ff ff    	je     c0003a1c <dir_read+0x61>
c0003b16:	eb 05                	jmp    c0003b1d <dir_read+0x162>
c0003b18:	bd 04 00 00 00       	mov    ebp,0x4
c0003b1d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b24:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b2b:	83 c4 1c             	add    esp,0x1c
c0003b2e:	89 e8                	mov    eax,ebp
c0003b30:	5b                   	pop    ebx
c0003b31:	5e                   	pop    esi
c0003b32:	5f                   	pop    edi
c0003b33:	5d                   	pop    ebp
c0003b34:	c3                   	ret    

c0003b35 <dir_alloc>:
c0003b35:	55                   	push   ebp
c0003b36:	89 d5                	mov    ebp,edx
c0003b38:	57                   	push   edi
c0003b39:	31 d2                	xor    edx,edx
c0003b3b:	56                   	push   esi
c0003b3c:	53                   	push   ebx
c0003b3d:	89 c3                	mov    ebx,eax
c0003b3f:	83 ec 0c             	sub    esp,0xc
c0003b42:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b44:	e8 62 f6 ff ff       	call   c00031ab <dir_sdi>
c0003b49:	85 c0                	test   eax,eax
c0003b4b:	75 4e                	jne    c0003b9b <dir_alloc+0x66>
c0003b4d:	31 f6                	xor    esi,esi
c0003b4f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b52:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b55:	89 f8                	mov    eax,edi
c0003b57:	e8 d1 e8 ff ff       	call   c000242d <move_window>
c0003b5c:	85 c0                	test   eax,eax
c0003b5e:	75 3b                	jne    c0003b9b <dir_alloc+0x66>
c0003b60:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b66:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b68:	75 07                	jne    c0003b71 <dir_alloc+0x3c>
c0003b6a:	f7 d2                	not    edx
c0003b6c:	c0 ea 07             	shr    dl,0x7
c0003b6f:	eb 0d                	jmp    c0003b7e <dir_alloc+0x49>
c0003b71:	84 d2                	test   dl,dl
c0003b73:	0f 94 c1             	sete   cl
c0003b76:	80 fa e5             	cmp    dl,0xe5
c0003b79:	0f 94 c2             	sete   dl
c0003b7c:	09 ca                	or     edx,ecx
c0003b7e:	84 d2                	test   dl,dl
c0003b80:	74 07                	je     c0003b89 <dir_alloc+0x54>
c0003b82:	46                   	inc    esi
c0003b83:	39 ee                	cmp    esi,ebp
c0003b85:	75 04                	jne    c0003b8b <dir_alloc+0x56>
c0003b87:	eb 1c                	jmp    c0003ba5 <dir_alloc+0x70>
c0003b89:	31 f6                	xor    esi,esi
c0003b8b:	ba 01 00 00 00       	mov    edx,0x1
c0003b90:	89 d8                	mov    eax,ebx
c0003b92:	e8 6c fb ff ff       	call   c0003703 <dir_next>
c0003b97:	85 c0                	test   eax,eax
c0003b99:	74 b4                	je     c0003b4f <dir_alloc+0x1a>
c0003b9b:	83 f8 04             	cmp    eax,0x4
c0003b9e:	75 05                	jne    c0003ba5 <dir_alloc+0x70>
c0003ba0:	b8 07 00 00 00       	mov    eax,0x7
c0003ba5:	83 c4 0c             	add    esp,0xc
c0003ba8:	5b                   	pop    ebx
c0003ba9:	5e                   	pop    esi
c0003baa:	5f                   	pop    edi
c0003bab:	5d                   	pop    ebp
c0003bac:	c3                   	ret    

c0003bad <store_xdir>:
c0003bad:	55                   	push   ebp
c0003bae:	57                   	push   edi
c0003baf:	89 c7                	mov    edi,eax
c0003bb1:	56                   	push   esi
c0003bb2:	53                   	push   ebx
c0003bb3:	83 ec 0c             	sub    esp,0xc
c0003bb6:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bb8:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bbb:	89 e8                	mov    eax,ebp
c0003bbd:	e8 5b e5 ff ff       	call   c000211d <xdir_sum>
c0003bc2:	0f b7 d0             	movzx  edx,ax
c0003bc5:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bc8:	e8 f4 e0 ff ff       	call   c0001cc1 <st_word>
c0003bcd:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bd1:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bd4:	89 f8                	mov    eax,edi
c0003bd6:	e8 d0 f5 ff ff       	call   c00031ab <dir_sdi>
c0003bdb:	89 c6                	mov    esi,eax
c0003bdd:	85 f6                	test   esi,esi
c0003bdf:	75 3d                	jne    c0003c1e <store_xdir+0x71>
c0003be1:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003be4:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003be7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003be9:	e8 3f e8 ff ff       	call   c000242d <move_window>
c0003bee:	89 c6                	mov    esi,eax
c0003bf0:	85 c0                	test   eax,eax
c0003bf2:	75 2a                	jne    c0003c1e <store_xdir+0x71>
c0003bf4:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bf7:	b9 20 00 00 00       	mov    ecx,0x20
c0003bfc:	89 ea                	mov    edx,ebp
c0003bfe:	e8 cb e0 ff ff       	call   c0001cce <mem_cpy>
c0003c03:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c05:	85 db                	test   ebx,ebx
c0003c07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c0b:	74 11                	je     c0003c1e <store_xdir+0x71>
c0003c0d:	31 d2                	xor    edx,edx
c0003c0f:	89 f8                	mov    eax,edi
c0003c11:	83 c5 20             	add    ebp,0x20
c0003c14:	e8 ea fa ff ff       	call   c0003703 <dir_next>
c0003c19:	4b                   	dec    ebx
c0003c1a:	89 c6                	mov    esi,eax
c0003c1c:	eb bf                	jmp    c0003bdd <store_xdir+0x30>
c0003c1e:	89 f0                	mov    eax,esi
c0003c20:	83 fe 02             	cmp    esi,0x2
c0003c23:	76 05                	jbe    c0003c2a <store_xdir+0x7d>
c0003c25:	b8 02 00 00 00       	mov    eax,0x2
c0003c2a:	83 c4 0c             	add    esp,0xc
c0003c2d:	5b                   	pop    ebx
c0003c2e:	5e                   	pop    esi
c0003c2f:	5f                   	pop    edi
c0003c30:	5d                   	pop    ebp
c0003c31:	c3                   	ret    

c0003c32 <dir_remove>:
c0003c32:	57                   	push   edi
c0003c33:	56                   	push   esi
c0003c34:	53                   	push   ebx
c0003c35:	89 c3                	mov    ebx,eax
c0003c37:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c3a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c3c:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c3f:	83 fa ff             	cmp    edx,0xffffffff
c0003c42:	74 09                	je     c0003c4d <dir_remove+0x1b>
c0003c44:	e8 62 f5 ff ff       	call   c00031ab <dir_sdi>
c0003c49:	85 c0                	test   eax,eax
c0003c4b:	75 41                	jne    c0003c8e <dir_remove+0x5c>
c0003c4d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c50:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c53:	89 f0                	mov    eax,esi
c0003c55:	e8 d3 e7 ff ff       	call   c000242d <move_window>
c0003c5a:	85 c0                	test   eax,eax
c0003c5c:	75 26                	jne    c0003c84 <dir_remove+0x52>
c0003c5e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c61:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c64:	75 05                	jne    c0003c6b <dir_remove+0x39>
c0003c66:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c69:	eb 03                	jmp    c0003c6e <dir_remove+0x3c>
c0003c6b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c6e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c72:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c75:	73 17                	jae    c0003c8e <dir_remove+0x5c>
c0003c77:	31 d2                	xor    edx,edx
c0003c79:	89 d8                	mov    eax,ebx
c0003c7b:	e8 83 fa ff ff       	call   c0003703 <dir_next>
c0003c80:	85 c0                	test   eax,eax
c0003c82:	74 c9                	je     c0003c4d <dir_remove+0x1b>
c0003c84:	83 f8 04             	cmp    eax,0x4
c0003c87:	75 05                	jne    c0003c8e <dir_remove+0x5c>
c0003c89:	b8 02 00 00 00       	mov    eax,0x2
c0003c8e:	5b                   	pop    ebx
c0003c8f:	5e                   	pop    esi
c0003c90:	5f                   	pop    edi
c0003c91:	c3                   	ret    

c0003c92 <create_name>:
c0003c92:	55                   	push   ebp
c0003c93:	89 d5                	mov    ebp,edx
c0003c95:	57                   	push   edi
c0003c96:	89 c7                	mov    edi,eax
c0003c98:	56                   	push   esi
c0003c99:	31 f6                	xor    esi,esi
c0003c9b:	53                   	push   ebx
c0003c9c:	83 ec 3c             	sub    esp,0x3c
c0003c9f:	8b 02                	mov    eax,DWORD PTR [edx]
c0003ca1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca5:	8b 07                	mov    eax,DWORD PTR [edi]
c0003ca7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003caa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cae:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cb2:	e8 72 e0 ff ff       	call   c0001d29 <tchar2uni>
c0003cb7:	89 c3                	mov    ebx,eax
c0003cb9:	83 f8 ff             	cmp    eax,0xffffffff
c0003cbc:	75 0a                	jne    c0003cc8 <create_name+0x36>
c0003cbe:	b8 06 00 00 00       	mov    eax,0x6
c0003cc3:	e9 9e 02 00 00       	jmp    c0003f66 <create_name+0x2d4>
c0003cc8:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ccd:	76 0c                	jbe    c0003cdb <create_name+0x49>
c0003ccf:	c1 e8 10             	shr    eax,0x10
c0003cd2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cd6:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cda:	46                   	inc    esi
c0003cdb:	66 83 fb 1f          	cmp    bx,0x1f
c0003cdf:	76 4f                	jbe    c0003d30 <create_name+0x9e>
c0003ce1:	66 83 fb 5c          	cmp    bx,0x5c
c0003ce5:	74 35                	je     c0003d1c <create_name+0x8a>
c0003ce7:	66 83 fb 2f          	cmp    bx,0x2f
c0003ceb:	74 2f                	je     c0003d1c <create_name+0x8a>
c0003ced:	66 83 fb 7f          	cmp    bx,0x7f
c0003cf1:	77 11                	ja     c0003d04 <create_name+0x72>
c0003cf3:	0f b7 d3             	movzx  edx,bx
c0003cf6:	b8 d2 a1 02 c0       	mov    eax,0xc002a1d2
c0003cfb:	e8 11 e0 ff ff       	call   c0001d11 <chk_chr>
c0003d00:	85 c0                	test   eax,eax
c0003d02:	75 ba                	jne    c0003cbe <create_name+0x2c>
c0003d04:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d0a:	77 b2                	ja     c0003cbe <create_name+0x2c>
c0003d0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d10:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d14:	46                   	inc    esi
c0003d15:	eb 97                	jmp    c0003cae <create_name+0x1c>
c0003d17:	40                   	inc    eax
c0003d18:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d1c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d20:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d22:	80 fa 2f             	cmp    dl,0x2f
c0003d25:	74 f0                	je     c0003d17 <create_name+0x85>
c0003d27:	80 fa 5c             	cmp    dl,0x5c
c0003d2a:	74 eb                	je     c0003d17 <create_name+0x85>
c0003d2c:	31 db                	xor    ebx,ebx
c0003d2e:	eb 02                	jmp    c0003d32 <create_name+0xa0>
c0003d30:	b3 04                	mov    bl,0x4
c0003d32:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d36:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	74 18                	je     c0003d55 <create_name+0xc3>
c0003d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d41:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d46:	66 83 f8 20          	cmp    ax,0x20
c0003d4a:	74 06                	je     c0003d52 <create_name+0xc0>
c0003d4c:	66 83 f8 2e          	cmp    ax,0x2e
c0003d50:	75 03                	jne    c0003d55 <create_name+0xc3>
c0003d52:	4e                   	dec    esi
c0003d53:	eb e4                	jmp    c0003d39 <create_name+0xa7>
c0003d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d59:	31 ed                	xor    ebp,ebp
c0003d5b:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d61:	85 f6                	test   esi,esi
c0003d63:	0f 84 55 ff ff ff    	je     c0003cbe <create_name+0x2c>
c0003d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6d:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d70:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d74:	66 83 f8 20          	cmp    ax,0x20
c0003d78:	75 04                	jne    c0003d7e <create_name+0xec>
c0003d7a:	89 d5                	mov    ebp,edx
c0003d7c:	eb eb                	jmp    c0003d69 <create_name+0xd7>
c0003d7e:	85 ed                	test   ebp,ebp
c0003d80:	75 06                	jne    c0003d88 <create_name+0xf6>
c0003d82:	66 83 f8 2e          	cmp    ax,0x2e
c0003d86:	75 08                	jne    c0003d90 <create_name+0xfe>
c0003d88:	83 cb 03             	or     ebx,0x3
c0003d8b:	eb 03                	jmp    c0003d90 <create_name+0xfe>
c0003d8d:	4e                   	dec    esi
c0003d8e:	74 0c                	je     c0003d9c <create_name+0x10a>
c0003d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d94:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d9a:	75 f1                	jne    c0003d8d <create_name+0xfb>
c0003d9c:	b9 0b 00 00 00       	mov    ecx,0xb
c0003da1:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003da4:	ba 20 00 00 00       	mov    edx,0x20
c0003da9:	e8 35 df ff ff       	call   c0001ce3 <mem_set>
c0003dae:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003db6:	31 c9                	xor    ecx,ecx
c0003db8:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dbd:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dc0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc8:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dcc:	66 85 ed             	test   bp,bp
c0003dcf:	0f 84 30 01 00 00    	je     c0003f05 <create_name+0x273>
c0003dd5:	66 83 fd 20          	cmp    bp,0x20
c0003dd9:	74 10                	je     c0003deb <create_name+0x159>
c0003ddb:	66 83 fd 2e          	cmp    bp,0x2e
c0003ddf:	75 13                	jne    c0003df4 <create_name+0x162>
c0003de1:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003de5:	0f 84 6b 01 00 00    	je     c0003f56 <create_name+0x2c4>
c0003deb:	83 cb 03             	or     ebx,0x3
c0003dee:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003df2:	eb c9                	jmp    c0003dbd <create_name+0x12b>
c0003df4:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003df8:	73 0b                	jae    c0003e05 <create_name+0x173>
c0003dfa:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dfe:	75 47                	jne    c0003e47 <create_name+0x1b5>
c0003e00:	e9 51 01 00 00       	jmp    c0003f56 <create_name+0x2c4>
c0003e05:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e0a:	75 10                	jne    c0003e1c <create_name+0x18a>
c0003e0c:	83 cb 03             	or     ebx,0x3
c0003e0f:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e17:	e9 e9 00 00 00       	jmp    c0003f05 <create_name+0x273>
c0003e1c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e20:	74 0d                	je     c0003e2f <create_name+0x19d>
c0003e22:	83 cb 03             	or     ebx,0x3
c0003e25:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e29:	0f 87 d6 00 00 00    	ja     c0003f05 <create_name+0x273>
c0003e2f:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e34:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e38:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e40:	b9 08 00 00 00       	mov    ecx,0x8
c0003e45:	eb a7                	jmp    c0003dee <create_name+0x15c>
c0003e47:	66 83 fd 7f          	cmp    bp,0x7f
c0003e4b:	76 68                	jbe    c0003eb5 <create_name+0x223>
c0003e4d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e51:	88 da                	mov    dl,bl
c0003e53:	83 ca 02             	or     edx,0x2
c0003e56:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e5a:	50                   	push   eax
c0003e5b:	50                   	push   eax
c0003e5c:	68 b5 01 00 00       	push   0x1b5
c0003e61:	55                   	push   ebp
c0003e62:	e8 48 46 00 00       	call   c00084af <ff_uni2oem>
c0003e67:	83 c4 10             	add    esp,0x10
c0003e6a:	89 c5                	mov    ebp,eax
c0003e6c:	a8 80                	test   al,0x80
c0003e6e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e72:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e76:	74 0c                	je     c0003e84 <create_name+0x1f2>
c0003e78:	83 e5 7f             	and    ebp,0x7f
c0003e7b:	0f b6 ad 20 a1 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd5ee0]
c0003e82:	eb 2a                	jmp    c0003eae <create_name+0x21c>
c0003e84:	66 3d ff 00          	cmp    ax,0xff
c0003e88:	76 24                	jbe    c0003eae <create_name+0x21c>
c0003e8a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e8e:	48                   	dec    eax
c0003e8f:	39 c8                	cmp    eax,ecx
c0003e91:	77 0c                	ja     c0003e9f <create_name+0x20d>
c0003e93:	83 cb 03             	or     ebx,0x3
c0003e96:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e9a:	e9 4f ff ff ff       	jmp    c0003dee <create_name+0x15c>
c0003e9f:	89 e8                	mov    eax,ebp
c0003ea1:	88 d3                	mov    bl,dl
c0003ea3:	66 c1 e8 08          	shr    ax,0x8
c0003ea7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003eab:	41                   	inc    ecx
c0003eac:	eb 4b                	jmp    c0003ef9 <create_name+0x267>
c0003eae:	88 d3                	mov    bl,dl
c0003eb0:	66 85 ed             	test   bp,bp
c0003eb3:	74 19                	je     c0003ece <create_name+0x23c>
c0003eb5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eb9:	0f b7 d5             	movzx  edx,bp
c0003ebc:	b8 db a1 02 c0       	mov    eax,0xc002a1db
c0003ec1:	e8 4b de ff ff       	call   c0001d11 <chk_chr>
c0003ec6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003eca:	85 c0                	test   eax,eax
c0003ecc:	74 0a                	je     c0003ed8 <create_name+0x246>
c0003ece:	83 cb 03             	or     ebx,0x3
c0003ed1:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ed6:	eb 21                	jmp    c0003ef9 <create_name+0x267>
c0003ed8:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003edb:	66 83 f8 19          	cmp    ax,0x19
c0003edf:	77 07                	ja     c0003ee8 <create_name+0x256>
c0003ee1:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ee6:	eb 11                	jmp    c0003ef9 <create_name+0x267>
c0003ee8:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003eeb:	66 83 f8 19          	cmp    ax,0x19
c0003eef:	77 08                	ja     c0003ef9 <create_name+0x267>
c0003ef1:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ef6:	83 ed 20             	sub    ebp,0x20
c0003ef9:	89 e8                	mov    eax,ebp
c0003efb:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003eff:	41                   	inc    ecx
c0003f00:	e9 e9 fe ff ff       	jmp    c0003dee <create_name+0x15c>
c0003f05:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f09:	75 04                	jne    c0003f0f <create_name+0x27d>
c0003f0b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f0f:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f14:	75 05                	jne    c0003f1b <create_name+0x289>
c0003f16:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f1b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1f:	83 e0 0c             	and    eax,0xc
c0003f22:	3c 0c                	cmp    al,0xc
c0003f24:	74 0b                	je     c0003f31 <create_name+0x29f>
c0003f26:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f2a:	83 e0 03             	and    eax,0x3
c0003f2d:	3c 03                	cmp    al,0x3
c0003f2f:	75 05                	jne    c0003f36 <create_name+0x2a4>
c0003f31:	83 cb 02             	or     ebx,0x2
c0003f34:	eb 19                	jmp    c0003f4f <create_name+0x2bd>
c0003f36:	f6 c3 02             	test   bl,0x2
c0003f39:	75 14                	jne    c0003f4f <create_name+0x2bd>
c0003f3b:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f40:	74 03                	je     c0003f45 <create_name+0x2b3>
c0003f42:	83 cb 10             	or     ebx,0x10
c0003f45:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f4a:	74 03                	je     c0003f4f <create_name+0x2bd>
c0003f4c:	83 cb 08             	or     ebx,0x8
c0003f4f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f52:	31 c0                	xor    eax,eax
c0003f54:	eb 10                	jmp    c0003f66 <create_name+0x2d4>
c0003f56:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f5b:	0f 85 ce fe ff ff    	jne    c0003e2f <create_name+0x19d>
c0003f61:	e9 a6 fe ff ff       	jmp    c0003e0c <create_name+0x17a>
c0003f66:	83 c4 3c             	add    esp,0x3c
c0003f69:	5b                   	pop    ebx
c0003f6a:	5e                   	pop    esi
c0003f6b:	5f                   	pop    edi
c0003f6c:	5d                   	pop    ebp
c0003f6d:	c3                   	ret    

c0003f6e <xname_sum>:
c0003f6e:	56                   	push   esi
c0003f6f:	53                   	push   ebx
c0003f70:	89 c6                	mov    esi,eax
c0003f72:	51                   	push   ecx
c0003f73:	31 db                	xor    ebx,ebx
c0003f75:	83 c6 02             	add    esi,0x2
c0003f78:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f7c:	66 85 c0             	test   ax,ax
c0003f7f:	74 1f                	je     c0003fa0 <xname_sum+0x32>
c0003f81:	83 ec 0c             	sub    esp,0xc
c0003f84:	66 d1 cb             	ror    bx,1
c0003f87:	50                   	push   eax
c0003f88:	e8 1e 46 00 00       	call   c00085ab <ff_wtoupper>
c0003f8d:	83 c4 10             	add    esp,0x10
c0003f90:	0f b6 d0             	movzx  edx,al
c0003f93:	66 c1 e8 08          	shr    ax,0x8
c0003f97:	01 d3                	add    ebx,edx
c0003f99:	66 d1 cb             	ror    bx,1
c0003f9c:	01 c3                	add    ebx,eax
c0003f9e:	eb d5                	jmp    c0003f75 <xname_sum+0x7>
c0003fa0:	89 d8                	mov    eax,ebx
c0003fa2:	5a                   	pop    edx
c0003fa3:	5b                   	pop    ebx
c0003fa4:	5e                   	pop    esi
c0003fa5:	c3                   	ret    

c0003fa6 <create_xdir>:
c0003fa6:	55                   	push   ebp
c0003fa7:	b9 40 00 00 00       	mov    ecx,0x40
c0003fac:	57                   	push   edi
c0003fad:	bd 01 00 00 00       	mov    ebp,0x1
c0003fb2:	56                   	push   esi
c0003fb3:	31 ff                	xor    edi,edi
c0003fb5:	53                   	push   ebx
c0003fb6:	be 40 00 00 00       	mov    esi,0x40
c0003fbb:	89 c3                	mov    ebx,eax
c0003fbd:	83 ec 1c             	sub    esp,0x1c
c0003fc0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fc4:	31 d2                	xor    edx,edx
c0003fc6:	e8 18 dd ff ff       	call   c0001ce3 <mem_set>
c0003fcb:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fce:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fd2:	31 c9                	xor    ecx,ecx
c0003fd4:	8d 46 01             	lea    eax,[esi+0x1]
c0003fd7:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fdb:	83 c6 02             	add    esi,0x2
c0003fde:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fe2:	66 85 ed             	test   bp,bp
c0003fe5:	74 12                	je     c0003ff9 <create_xdir+0x53>
c0003fe7:	0f b6 c1             	movzx  eax,cl
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003ff2:	66 83 fd 01          	cmp    bp,0x1
c0003ff6:	80 d9 ff             	sbb    cl,0xff
c0003ff9:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003ffc:	0f b7 d5             	movzx  edx,bp
c0003fff:	83 c6 02             	add    esi,0x2
c0004002:	e8 ba dc ff ff       	call   c0001cc1 <st_word>
c0004007:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000400d:	75 d3                	jne    c0003fe2 <create_xdir+0x3c>
c000400f:	8d 47 01             	lea    eax,[edi+0x1]
c0004012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004016:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000401a:	0f b6 c1             	movzx  eax,cl
c000401d:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004022:	74 07                	je     c000402b <create_xdir+0x85>
c0004024:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004029:	eb a9                	jmp    c0003fd4 <create_xdir+0x2e>
c000402b:	8d 47 02             	lea    eax,[edi+0x2]
c000402e:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004031:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004034:	89 d0                	mov    eax,edx
c0004036:	e8 33 ff ff ff       	call   c0003f6e <xname_sum>
c000403b:	83 c4 1c             	add    esp,0x1c
c000403e:	0f b7 d0             	movzx  edx,ax
c0004041:	8d 43 24             	lea    eax,[ebx+0x24]
c0004044:	5b                   	pop    ebx
c0004045:	5e                   	pop    esi
c0004046:	5f                   	pop    edi
c0004047:	5d                   	pop    ebp
c0004048:	e9 74 dc ff ff       	jmp    c0001cc1 <st_word>

c000404d <cmp_lfn>:
c000404d:	55                   	push   ebp
c000404e:	57                   	push   edi
c000404f:	89 d7                	mov    edi,edx
c0004051:	56                   	push   esi
c0004052:	53                   	push   ebx
c0004053:	83 ec 1c             	sub    esp,0x1c
c0004056:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000405a:	8d 42 1a             	lea    eax,[edx+0x1a]
c000405d:	e8 ed db ff ff       	call   c0001c4f <ld_word>
c0004062:	66 85 c0             	test   ax,ax
c0004065:	74 07                	je     c000406e <cmp_lfn+0x21>
c0004067:	31 c0                	xor    eax,eax
c0004069:	e9 9a 00 00 00       	jmp    c0004108 <cmp_lfn+0xbb>
c000406e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004070:	bd 01 00 00 00       	mov    ebp,0x1
c0004075:	83 e3 3f             	and    ebx,0x3f
c0004078:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004080:	4b                   	dec    ebx
c0004081:	6b db 0d             	imul   ebx,ebx,0xd
c0004084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004088:	0f b6 80 a0 a1 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd5e60]
c000408f:	01 f8                	add    eax,edi
c0004091:	e8 b9 db ff ff       	call   c0001c4f <ld_word>
c0004096:	66 85 ed             	test   bp,bp
c0004099:	89 c6                	mov    esi,eax
c000409b:	74 3c                	je     c00040d9 <cmp_lfn+0x8c>
c000409d:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040a3:	77 c2                	ja     c0004067 <cmp_lfn+0x1a>
c00040a5:	83 ec 0c             	sub    esp,0xc
c00040a8:	0f b7 c0             	movzx  eax,ax
c00040ab:	50                   	push   eax
c00040ac:	e8 fa 44 00 00       	call   c00085ab <ff_wtoupper>
c00040b1:	89 c5                	mov    ebp,eax
c00040b3:	8d 43 01             	lea    eax,[ebx+0x1]
c00040b6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040be:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00040c5:	e8 e1 44 00 00       	call   c00085ab <ff_wtoupper>
c00040ca:	83 c4 10             	add    esp,0x10
c00040cd:	39 c5                	cmp    ebp,eax
c00040cf:	75 96                	jne    c0004067 <cmp_lfn+0x1a>
c00040d1:	89 f5                	mov    ebp,esi
c00040d3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040d7:	eb 04                	jmp    c00040dd <cmp_lfn+0x90>
c00040d9:	66 46                	inc    si
c00040db:	75 8a                	jne    c0004067 <cmp_lfn+0x1a>
c00040dd:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040e1:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040e6:	75 9c                	jne    c0004084 <cmp_lfn+0x37>
c00040e8:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040eb:	74 16                	je     c0004103 <cmp_lfn+0xb6>
c00040ed:	66 85 ed             	test   bp,bp
c00040f0:	74 11                	je     c0004103 <cmp_lfn+0xb6>
c00040f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040f6:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040fb:	0f 94 c0             	sete   al
c00040fe:	0f b6 c0             	movzx  eax,al
c0004101:	eb 05                	jmp    c0004108 <cmp_lfn+0xbb>
c0004103:	b8 01 00 00 00       	mov    eax,0x1
c0004108:	83 c4 1c             	add    esp,0x1c
c000410b:	5b                   	pop    ebx
c000410c:	5e                   	pop    esi
c000410d:	5f                   	pop    edi
c000410e:	5d                   	pop    ebp
c000410f:	c3                   	ret    

c0004110 <dir_find>:
c0004110:	55                   	push   ebp
c0004111:	31 d2                	xor    edx,edx
c0004113:	57                   	push   edi
c0004114:	56                   	push   esi
c0004115:	53                   	push   ebx
c0004116:	89 c3                	mov    ebx,eax
c0004118:	83 ec 1c             	sub    esp,0x1c
c000411b:	8b 30                	mov    esi,DWORD PTR [eax]
c000411d:	e8 89 f0 ff ff       	call   c00031ab <dir_sdi>
c0004122:	89 04 24             	mov    DWORD PTR [esp],eax
c0004125:	85 c0                	test   eax,eax
c0004127:	0f 85 9e 01 00 00    	jne    c00042cb <dir_find+0x1bb>
c000412d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004130:	0f 85 8d 00 00 00    	jne    c00041c3 <dir_find+0xb3>
c0004136:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004139:	e8 30 fe ff ff       	call   c0003f6e <xname_sum>
c000413e:	89 c7                	mov    edi,eax
c0004140:	31 d2                	xor    edx,edx
c0004142:	89 d8                	mov    eax,ebx
c0004144:	e8 72 f8 ff ff       	call   c00039bb <dir_read>
c0004149:	85 c0                	test   eax,eax
c000414b:	0f 85 5e 01 00 00    	jne    c00042af <dir_find+0x19f>
c0004151:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004154:	8d 41 24             	lea    eax,[ecx+0x24]
c0004157:	e8 f3 da ff ff       	call   c0001c4f <ld_word>
c000415c:	66 39 f8             	cmp    ax,di
c000415f:	75 df                	jne    c0004140 <dir_find+0x30>
c0004161:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004164:	31 ed                	xor    ebp,ebp
c0004166:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000416a:	ba 40 00 00 00       	mov    edx,0x40
c000416f:	89 e9                	mov    ecx,ebp
c0004171:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004175:	0f 84 42 01 00 00    	je     c00042bd <dir_find+0x1ad>
c000417b:	f6 c2 1f             	test   dl,0x1f
c000417e:	75 03                	jne    c0004183 <dir_find+0x73>
c0004180:	83 c2 02             	add    edx,0x2
c0004183:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004187:	89 d0                	mov    eax,edx
c0004189:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000418c:	e8 be da ff ff       	call   c0001c4f <ld_word>
c0004191:	83 ec 0c             	sub    esp,0xc
c0004194:	0f b7 c0             	movzx  eax,ax
c0004197:	50                   	push   eax
c0004198:	e8 0e 44 00 00       	call   c00085ab <ff_wtoupper>
c000419d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041a1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041a4:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00041ab:	e8 fb 43 00 00       	call   c00085ab <ff_wtoupper>
c00041b0:	83 c4 10             	add    esp,0x10
c00041b3:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041b7:	75 87                	jne    c0004140 <dir_find+0x30>
c00041b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041bd:	45                   	inc    ebp
c00041be:	83 c2 02             	add    edx,0x2
c00041c1:	eb ac                	jmp    c000416f <dir_find+0x5f>
c00041c3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041ca:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041cf:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041d4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041d7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041da:	89 f0                	mov    eax,esi
c00041dc:	e8 4c e2 ff ff       	call   c000242d <move_window>
c00041e1:	85 c0                	test   eax,eax
c00041e3:	0f 85 c6 00 00 00    	jne    c00042af <dir_find+0x19f>
c00041e9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041ec:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041ef:	84 c9                	test   cl,cl
c00041f1:	0f 84 bd 00 00 00    	je     c00042b4 <dir_find+0x1a4>
c00041f7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041fa:	88 d0                	mov    al,dl
c00041fc:	83 e0 3f             	and    eax,0x3f
c00041ff:	80 f9 e5             	cmp    cl,0xe5
c0004202:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004205:	0f 84 87 00 00 00    	je     c0004292 <dir_find+0x182>
c000420b:	80 e2 08             	and    dl,0x8
c000420e:	74 06                	je     c0004216 <dir_find+0x106>
c0004210:	3c 0f                	cmp    al,0xf
c0004212:	75 7e                	jne    c0004292 <dir_find+0x182>
c0004214:	eb 04                	jmp    c000421a <dir_find+0x10a>
c0004216:	3c 0f                	cmp    al,0xf
c0004218:	75 4c                	jne    c0004266 <dir_find+0x156>
c000421a:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000421e:	75 7e                	jne    c000429e <dir_find+0x18e>
c0004220:	f6 c1 40             	test   cl,0x40
c0004223:	74 12                	je     c0004237 <dir_find+0x127>
c0004225:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004228:	83 e1 bf             	and    ecx,0xffffffbf
c000422b:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000422f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004232:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004235:	eb 06                	jmp    c000423d <dir_find+0x12d>
c0004237:	89 f8                	mov    eax,edi
c0004239:	38 c8                	cmp    al,cl
c000423b:	75 5c                	jne    c0004299 <dir_find+0x189>
c000423d:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004241:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004246:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004249:	75 53                	jne    c000429e <dir_find+0x18e>
c000424b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000424f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004252:	89 ea                	mov    edx,ebp
c0004254:	e8 f4 fd ff ff       	call   c000404d <cmp_lfn>
c0004259:	85 c0                	test   eax,eax
c000425b:	74 41                	je     c000429e <dir_find+0x18e>
c000425d:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004261:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004264:	eb 38                	jmp    c000429e <dir_find+0x18e>
c0004266:	89 f8                	mov    eax,edi
c0004268:	84 c0                	test   al,al
c000426a:	75 0d                	jne    c0004279 <dir_find+0x169>
c000426c:	89 e8                	mov    eax,ebp
c000426e:	e8 98 de ff ff       	call   c000210b <sum_sfn>
c0004273:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004277:	74 52                	je     c00042cb <dir_find+0x1bb>
c0004279:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000427d:	75 13                	jne    c0004292 <dir_find+0x182>
c000427f:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004282:	b9 0b 00 00 00       	mov    ecx,0xb
c0004287:	89 e8                	mov    eax,ebp
c0004289:	e8 60 da ff ff       	call   c0001cee <mem_cmp>
c000428e:	85 c0                	test   eax,eax
c0004290:	74 39                	je     c00042cb <dir_find+0x1bb>
c0004292:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004299:	bf ff ff ff ff       	mov    edi,0xffffffff
c000429e:	31 d2                	xor    edx,edx
c00042a0:	89 d8                	mov    eax,ebx
c00042a2:	e8 5c f4 ff ff       	call   c0003703 <dir_next>
c00042a7:	85 c0                	test   eax,eax
c00042a9:	0f 84 25 ff ff ff    	je     c00041d4 <dir_find+0xc4>
c00042af:	89 04 24             	mov    DWORD PTR [esp],eax
c00042b2:	eb 17                	jmp    c00042cb <dir_find+0x1bb>
c00042b4:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042bb:	eb 0e                	jmp    c00042cb <dir_find+0x1bb>
c00042bd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042c0:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042c5:	0f 85 75 fe ff ff    	jne    c0004140 <dir_find+0x30>
c00042cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042ce:	83 c4 1c             	add    esp,0x1c
c00042d1:	5b                   	pop    ebx
c00042d2:	5e                   	pop    esi
c00042d3:	5f                   	pop    edi
c00042d4:	5d                   	pop    ebp
c00042d5:	c3                   	ret    

c00042d6 <dir_register>:
c00042d6:	55                   	push   ebp
c00042d7:	57                   	push   edi
c00042d8:	56                   	push   esi
c00042d9:	be 06 00 00 00       	mov    esi,0x6
c00042de:	53                   	push   ebx
c00042df:	83 ec 6c             	sub    esp,0x6c
c00042e2:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042e6:	0f 85 62 02 00 00    	jne    c000454e <dir_register+0x278>
c00042ec:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042ee:	31 ff                	xor    edi,edi
c00042f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042f3:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042f8:	74 03                	je     c00042fd <dir_register+0x27>
c00042fa:	47                   	inc    edi
c00042fb:	eb f6                	jmp    c00042f3 <dir_register+0x1d>
c00042fd:	89 c3                	mov    ebx,eax
c00042ff:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004303:	0f 85 e1 00 00 00    	jne    c00043ea <dir_register+0x114>
c0004309:	83 c7 0e             	add    edi,0xe
c000430c:	b9 0f 00 00 00       	mov    ecx,0xf
c0004311:	89 f8                	mov    eax,edi
c0004313:	31 d2                	xor    edx,edx
c0004315:	f7 f1                	div    ecx
c0004317:	8d 50 02             	lea    edx,[eax+0x2]
c000431a:	89 c7                	mov    edi,eax
c000431c:	89 d8                	mov    eax,ebx
c000431e:	e8 12 f8 ff ff       	call   c0003b35 <dir_alloc>
c0004323:	89 c6                	mov    esi,eax
c0004325:	85 c0                	test   eax,eax
c0004327:	0f 85 21 02 00 00    	jne    c000454e <dir_register+0x278>
c000432d:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004333:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004336:	c1 e7 05             	shl    edi,0x5
c0004339:	29 f8                	sub    eax,edi
c000433b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000433e:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004341:	a8 04                	test   al,0x4
c0004343:	0f 84 91 00 00 00    	je     c00043da <dir_register+0x104>
c0004349:	83 e0 fb             	and    eax,0xfffffffb
c000434c:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000434f:	89 d8                	mov    eax,ebx
c0004351:	e8 25 ec ff ff       	call   c0002f7b <fill_first_frag>
c0004356:	85 c0                	test   eax,eax
c0004358:	0f 85 ee 01 00 00    	jne    c000454c <dir_register+0x276>
c000435e:	83 c9 ff             	or     ecx,0xffffffff
c0004361:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004364:	89 d8                	mov    eax,ebx
c0004366:	e8 db eb ff ff       	call   c0002f46 <fill_last_frag>
c000436b:	85 c0                	test   eax,eax
c000436d:	0f 85 d9 01 00 00    	jne    c000454c <dir_register+0x276>
c0004373:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004377:	74 61                	je     c00043da <dir_register+0x104>
c0004379:	89 da                	mov    edx,ebx
c000437b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000437f:	e8 ea f5 ff ff       	call   c000396e <load_obj_xdir>
c0004384:	85 c0                	test   eax,eax
c0004386:	0f 85 c0 01 00 00    	jne    c000454c <dir_register+0x276>
c000438c:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004390:	31 c9                	xor    ecx,ecx
c0004392:	c1 e2 09             	shl    edx,0x9
c0004395:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004398:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000439b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000439e:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a4:	83 c0 38             	add    eax,0x38
c00043a7:	e8 1c d9 ff ff       	call   c0001cc8 <st_qword>
c00043ac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043af:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043b2:	83 c0 28             	add    eax,0x28
c00043b5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043b8:	e8 0b d9 ff ff       	call   c0001cc8 <st_qword>
c00043bd:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043c0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043c3:	83 c8 01             	or     eax,0x1
c00043c6:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043c9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043cd:	e8 db f7 ff ff       	call   c0003bad <store_xdir>
c00043d2:	85 c0                	test   eax,eax
c00043d4:	0f 85 72 01 00 00    	jne    c000454c <dir_register+0x276>
c00043da:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043e0:	e8 c1 fb ff ff       	call   c0003fa6 <create_xdir>
c00043e5:	e9 64 01 00 00       	jmp    c000454e <dir_register+0x278>
c00043ea:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ed:	b9 0c 00 00 00       	mov    ecx,0xc
c00043f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043f6:	89 c2                	mov    edx,eax
c00043f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043fc:	e8 cd d8 ff ff       	call   c0001cce <mem_cpy>
c0004401:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004406:	74 58                	je     c0004460 <dir_register+0x18a>
c0004408:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000440c:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004414:	83 ec 0c             	sub    esp,0xc
c0004417:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000441a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000441e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004422:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004426:	e8 24 dc ff ff       	call   c000204f <gen_numname>
c000442b:	89 d8                	mov    eax,ebx
c000442d:	e8 de fc ff ff       	call   c0004110 <dir_find>
c0004432:	83 c4 10             	add    esp,0x10
c0004435:	89 c6                	mov    esi,eax
c0004437:	85 c0                	test   eax,eax
c0004439:	75 15                	jne    c0004450 <dir_register+0x17a>
c000443b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000443f:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004444:	75 ce                	jne    c0004414 <dir_register+0x13e>
c0004446:	be 07 00 00 00       	mov    esi,0x7
c000444b:	e9 fe 00 00 00       	jmp    c000454e <dir_register+0x278>
c0004450:	83 f8 04             	cmp    eax,0x4
c0004453:	0f 85 f5 00 00 00    	jne    c000454e <dir_register+0x278>
c0004459:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000445d:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004460:	b9 01 00 00 00       	mov    ecx,0x1
c0004465:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000446a:	74 0f                	je     c000447b <dir_register+0x1a5>
c000446c:	b9 0d 00 00 00       	mov    ecx,0xd
c0004471:	8d 47 0c             	lea    eax,[edi+0xc]
c0004474:	31 d2                	xor    edx,edx
c0004476:	f7 f1                	div    ecx
c0004478:	8d 48 01             	lea    ecx,[eax+0x1]
c000447b:	89 ca                	mov    edx,ecx
c000447d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004481:	89 d8                	mov    eax,ebx
c0004483:	e8 ad f6 ff ff       	call   c0003b35 <dir_alloc>
c0004488:	89 c6                	mov    esi,eax
c000448a:	85 c0                	test   eax,eax
c000448c:	0f 85 bc 00 00 00    	jne    c000454e <dir_register+0x278>
c0004492:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004496:	49                   	dec    ecx
c0004497:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000449b:	74 6a                	je     c0004507 <dir_register+0x231>
c000449d:	89 c8                	mov    eax,ecx
c000449f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044a2:	c1 e0 05             	shl    eax,0x5
c00044a5:	29 c2                	sub    edx,eax
c00044a7:	89 d8                	mov    eax,ebx
c00044a9:	e8 fd ec ff ff       	call   c00031ab <dir_sdi>
c00044ae:	89 c6                	mov    esi,eax
c00044b0:	85 c0                	test   eax,eax
c00044b2:	0f 85 96 00 00 00    	jne    c000454e <dir_register+0x278>
c00044b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044bc:	e8 4a dc ff ff       	call   c000210b <sum_sfn>
c00044c1:	0f b6 f8             	movzx  edi,al
c00044c4:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044c7:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044ca:	89 e8                	mov    eax,ebp
c00044cc:	e8 5c df ff ff       	call   c000242d <move_window>
c00044d1:	89 c6                	mov    esi,eax
c00044d3:	85 c0                	test   eax,eax
c00044d5:	75 77                	jne    c000454e <dir_register+0x278>
c00044d7:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044dc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044df:	83 ec 0c             	sub    esp,0xc
c00044e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044e5:	57                   	push   edi
c00044e6:	e8 e0 da ff ff       	call   c0001fcb <put_lfn>
c00044eb:	31 d2                	xor    edx,edx
c00044ed:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044f1:	89 d8                	mov    eax,ebx
c00044f3:	e8 0b f2 ff ff       	call   c0003703 <dir_next>
c00044f8:	83 c4 10             	add    esp,0x10
c00044fb:	89 c6                	mov    esi,eax
c00044fd:	85 c0                	test   eax,eax
c00044ff:	75 4d                	jne    c000454e <dir_register+0x278>
c0004501:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004505:	75 bd                	jne    c00044c4 <dir_register+0x1ee>
c0004507:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000450a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000450d:	89 e8                	mov    eax,ebp
c000450f:	e8 19 df ff ff       	call   c000242d <move_window>
c0004514:	89 c6                	mov    esi,eax
c0004516:	85 c0                	test   eax,eax
c0004518:	75 34                	jne    c000454e <dir_register+0x278>
c000451a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000451d:	b9 20 00 00 00       	mov    ecx,0x20
c0004522:	31 d2                	xor    edx,edx
c0004524:	e8 ba d7 ff ff       	call   c0001ce3 <mem_set>
c0004529:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004530:	b9 0b 00 00 00       	mov    ecx,0xb
c0004535:	e8 94 d7 ff ff       	call   c0001cce <mem_cpy>
c000453a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000453d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004540:	83 e0 18             	and    eax,0x18
c0004543:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004546:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454a:	eb 02                	jmp    c000454e <dir_register+0x278>
c000454c:	89 c6                	mov    esi,eax
c000454e:	83 c4 6c             	add    esp,0x6c
c0004551:	89 f0                	mov    eax,esi
c0004553:	5b                   	pop    ebx
c0004554:	5e                   	pop    esi
c0004555:	5f                   	pop    edi
c0004556:	5d                   	pop    ebp
c0004557:	c3                   	ret    

c0004558 <sync_fs>:
c0004558:	56                   	push   esi
c0004559:	53                   	push   ebx
c000455a:	53                   	push   ebx
c000455b:	89 c3                	mov    ebx,eax
c000455d:	e8 37 de ff ff       	call   c0002399 <sync_window>
c0004562:	85 c0                	test   eax,eax
c0004564:	0f 85 b1 00 00 00    	jne    c000461b <sync_fs+0xc3>
c000456a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000456d:	0f 85 8e 00 00 00    	jne    c0004601 <sync_fs+0xa9>
c0004573:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004577:	0f 85 84 00 00 00    	jne    c0004601 <sync_fs+0xa9>
c000457d:	b9 00 02 00 00       	mov    ecx,0x200
c0004582:	8d 73 54             	lea    esi,[ebx+0x54]
c0004585:	31 d2                	xor    edx,edx
c0004587:	89 f0                	mov    eax,esi
c0004589:	e8 55 d7 ff ff       	call   c0001ce3 <mem_set>
c000458e:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004594:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004599:	e8 23 d7 ff ff       	call   c0001cc1 <st_word>
c000459e:	ba 52 52 61 41       	mov    edx,0x41615252
c00045a3:	89 f0                	mov    eax,esi
c00045a5:	e8 1b d7 ff ff       	call   c0001cc5 <st_dword>
c00045aa:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045b0:	ba 72 72 41 61       	mov    edx,0x61417272
c00045b5:	e8 0b d7 ff ff       	call   c0001cc5 <st_dword>
c00045ba:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045bd:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045c3:	e8 fd d6 ff ff       	call   c0001cc5 <st_dword>
c00045c8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045cb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045d1:	e8 ef d6 ff ff       	call   c0001cc5 <st_dword>
c00045d6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045d9:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045dc:	83 c0 01             	add    eax,0x1
c00045df:	83 d2 00             	adc    edx,0x0
c00045e2:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045e5:	83 ec 0c             	sub    esp,0xc
c00045e8:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045eb:	6a 01                	push   0x1
c00045ed:	52                   	push   edx
c00045ee:	50                   	push   eax
c00045ef:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f3:	56                   	push   esi
c00045f4:	50                   	push   eax
c00045f5:	e8 20 d6 ff ff       	call   c0001c1a <disk_write>
c00045fa:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045fe:	83 c4 20             	add    esp,0x20
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	51                   	push   ecx
c0004606:	6a 00                	push   0x0
c0004608:	6a 00                	push   0x0
c000460a:	50                   	push   eax
c000460b:	e8 20 d6 ff ff       	call   c0001c30 <disk_ioctl>
c0004610:	83 c4 10             	add    esp,0x10
c0004613:	85 c0                	test   eax,eax
c0004615:	0f 95 c0             	setne  al
c0004618:	0f b6 c0             	movzx  eax,al
c000461b:	5a                   	pop    edx
c000461c:	5b                   	pop    ebx
c000461d:	5e                   	pop    esi
c000461e:	c3                   	ret    

c000461f <create_partition>:
c000461f:	55                   	push   ebp
c0004620:	0f b6 c0             	movzx  eax,al
c0004623:	57                   	push   edi
c0004624:	56                   	push   esi
c0004625:	53                   	push   ebx
c0004626:	83 ec 60             	sub    esp,0x60
c0004629:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000462d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004631:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004635:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004639:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000463d:	50                   	push   eax
c000463e:	6a 01                	push   0x1
c0004640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004644:	e8 e7 d5 ff ff       	call   c0001c30 <disk_ioctl>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	85 c0                	test   eax,eax
c000464e:	74 0a                	je     c000465a <create_partition+0x3b>
c0004650:	b8 01 00 00 00       	mov    eax,0x1
c0004655:	e9 67 05 00 00       	jmp    c0004bc1 <create_partition+0x5a2>
c000465a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000465e:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004662:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004666:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000466a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000466f:	0f 86 ed 03 00 00    	jbe    c0004a62 <create_partition+0x443>
c0004675:	83 c0 df             	add    eax,0xffffffdf
c0004678:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004680:	83 d2 ff             	adc    edx,0xffffffff
c0004683:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004687:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000468b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000468f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004693:	83 c0 bd             	add    eax,0xffffffbd
c0004696:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000469d:	83 d2 ff             	adc    edx,0xffffffff
c00046a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046b0:	be 22 00 00 00       	mov    esi,0x22
c00046b5:	31 ff                	xor    edi,edi
c00046b7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046bf:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046c7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046cf:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046d3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046d9:	75 0e                	jne    c00046e9 <create_partition+0xca>
c00046db:	b9 00 02 00 00       	mov    ecx,0x200
c00046e0:	31 d2                	xor    edx,edx
c00046e2:	89 d8                	mov    eax,ebx
c00046e4:	e8 fa d5 ff ff       	call   c0001ce3 <mem_set>
c00046e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ed:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046f5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046f8:	0f 84 23 01 00 00    	je     c0004821 <create_partition+0x202>
c00046fe:	89 f0                	mov    eax,esi
c0004700:	89 fa                	mov    edx,edi
c0004702:	05 ff 07 00 00       	add    eax,0x7ff
c0004707:	83 d2 00             	adc    edx,0x0
c000470a:	89 c1                	mov    ecx,eax
c000470c:	89 d7                	mov    edi,edx
c000470e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004714:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004718:	89 ce                	mov    esi,ecx
c000471a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000471e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004722:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004726:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004729:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000472d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004730:	b8 64 00 00 00       	mov    eax,0x64
c0004735:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004738:	b8 00 00 00 00       	mov    eax,0x0
c000473d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004741:	72 41                	jb     c0004784 <create_partition+0x165>
c0004743:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004747:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000474b:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000474f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004754:	01 c1                	add    ecx,eax
c0004756:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000475a:	f7 24 24             	mul    DWORD PTR [esp]
c000475d:	6a 00                	push   0x0
c000475f:	01 ca                	add    edx,ecx
c0004761:	6a 64                	push   0x64
c0004763:	52                   	push   edx
c0004764:	50                   	push   eax
c0004765:	e8 aa 2e 02 00       	call   c0027614 <__udivdi3>
c000476a:	83 c4 10             	add    esp,0x10
c000476d:	05 ff 07 00 00       	add    eax,0x7ff
c0004772:	83 d2 00             	adc    edx,0x0
c0004775:	89 c1                	mov    ecx,eax
c0004777:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000477b:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004781:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004784:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004787:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000478b:	01 f0                	add    eax,esi
c000478d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004791:	11 fa                	adc    edx,edi
c0004793:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004797:	19 d1                	sbb    ecx,edx
c0004799:	73 2e                	jae    c00047c9 <create_partition+0x1aa>
c000479b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000479f:	89 f8                	mov    eax,edi
c00047a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047a8:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047ac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047b4:	73 6b                	jae    c0004821 <create_partition+0x202>
c00047b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047be:	29 f0                	sub    eax,esi
c00047c0:	19 fa                	sbb    edx,edi
c00047c2:	89 04 24             	mov    DWORD PTR [esp],eax
c00047c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047d0:	74 4f                	je     c0004821 <create_partition+0x202>
c00047d2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047d5:	b9 10 00 00 00       	mov    ecx,0x10
c00047da:	ba b0 a1 02 c0       	mov    edx,0xc002a1b0
c00047df:	e8 ea d4 ff ff       	call   c0001cce <mem_cpy>
c00047e4:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047e8:	b9 10 00 00 00       	mov    ecx,0x10
c00047ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047f1:	e8 2c db ff ff       	call   c0002322 <make_rand>
c00047f6:	89 f2                	mov    edx,esi
c00047f8:	89 f9                	mov    ecx,edi
c00047fa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047fe:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004802:	e8 c1 d4 ff ff       	call   c0001cc8 <st_qword>
c0004807:	03 34 24             	add    esi,DWORD PTR [esp]
c000480a:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000480e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004812:	89 f2                	mov    edx,esi
c0004814:	89 f9                	mov    ecx,edi
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	83 d1 ff             	adc    ecx,0xffffffff
c000481c:	e8 a7 d4 ff ff       	call   c0001cc8 <st_qword>
c0004821:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004825:	83 e8 80             	sub    eax,0xffffff80
c0004828:	89 c5                	mov    ebp,eax
c000482a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000482e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004834:	75 6b                	jne    c00048a1 <create_partition+0x282>
c0004836:	45                   	inc    ebp
c0004837:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000483b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004840:	e8 39 da ff ff       	call   c000227e <crc32>
c0004845:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000484b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000484f:	75 e5                	jne    c0004836 <create_partition+0x217>
c0004851:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004855:	31 d2                	xor    edx,edx
c0004857:	83 ec 0c             	sub    esp,0xc
c000485a:	c1 ed 09             	shr    ebp,0x9
c000485d:	6a 01                	push   0x1
c000485f:	8d 45 02             	lea    eax,[ebp+0x2]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 ac d3 ff ff       	call   c0001c1a <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 d7 fd ff ff    	jne    c0004650 <create_partition+0x31>
c0004879:	83 ec 0c             	sub    esp,0xc
c000487c:	31 d2                	xor    edx,edx
c000487e:	6a 01                	push   0x1
c0004880:	89 e8                	mov    eax,ebp
c0004882:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004886:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000488a:	52                   	push   edx
c000488b:	50                   	push   eax
c000488c:	53                   	push   ebx
c000488d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004891:	e8 84 d3 ff ff       	call   c0001c1a <disk_write>
c0004896:	83 c4 20             	add    esp,0x20
c0004899:	85 c0                	test   eax,eax
c000489b:	0f 85 af fd ff ff    	jne    c0004650 <create_partition+0x31>
c00048a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048a9:	3d 00 40 00 00       	cmp    eax,0x4000
c00048ae:	74 0d                	je     c00048bd <create_partition+0x29e>
c00048b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048b4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048b8:	e9 12 fe ff ff       	jmp    c00046cf <create_partition+0xb0>
c00048bd:	31 d2                	xor    edx,edx
c00048bf:	b9 00 02 00 00       	mov    ecx,0x200
c00048c4:	89 d8                	mov    eax,ebx
c00048c6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048c9:	e8 15 d4 ff ff       	call   c0001ce3 <mem_set>
c00048ce:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048d1:	b9 10 00 00 00       	mov    ecx,0x10
c00048d6:	ba a0 a0 02 c0       	mov    edx,0xc002a0a0
c00048db:	89 d8                	mov    eax,ebx
c00048dd:	e8 ec d3 ff ff       	call   c0001cce <mem_cpy>
c00048e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048e6:	8d 43 58             	lea    eax,[ebx+0x58]
c00048e9:	f7 d2                	not    edx
c00048eb:	e8 d5 d3 ff ff       	call   c0001cc5 <st_dword>
c00048f0:	8d 43 18             	lea    eax,[ebx+0x18]
c00048f3:	31 c9                	xor    ecx,ecx
c00048f5:	89 04 24             	mov    DWORD PTR [esp],eax
c00048f8:	ba 01 00 00 00       	mov    edx,0x1
c00048fd:	e8 c6 d3 ff ff       	call   c0001cc8 <st_qword>
c0004902:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004906:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000490a:	83 c2 ff             	add    edx,0xffffffff
c000490d:	89 e8                	mov    eax,ebp
c000490f:	83 d1 ff             	adc    ecx,0xffffffff
c0004912:	e8 b1 d3 ff ff       	call   c0001cc8 <st_qword>
c0004917:	31 c9                	xor    ecx,ecx
c0004919:	8d 43 28             	lea    eax,[ebx+0x28]
c000491c:	ba 22 00 00 00       	mov    edx,0x22
c0004921:	e8 a2 d3 ff ff       	call   c0001cc8 <st_qword>
c0004926:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000492a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000492e:	83 c2 de             	add    edx,0xffffffde
c0004931:	8d 43 30             	lea    eax,[ebx+0x30]
c0004934:	83 d1 ff             	adc    ecx,0xffffffff
c0004937:	31 f6                	xor    esi,esi
c0004939:	e8 8a d3 ff ff       	call   c0001cc8 <st_qword>
c000493e:	8d 43 54             	lea    eax,[ebx+0x54]
c0004941:	ba 80 00 00 00       	mov    edx,0x80
c0004946:	e8 7a d3 ff ff       	call   c0001cc5 <st_dword>
c000494b:	8d 43 50             	lea    eax,[ebx+0x50]
c000494e:	ba 80 00 00 00       	mov    edx,0x80
c0004953:	e8 6d d3 ff ff       	call   c0001cc5 <st_dword>
c0004958:	ba 02 00 00 00       	mov    edx,0x2
c000495d:	89 f8                	mov    eax,edi
c000495f:	e8 61 d3 ff ff       	call   c0001cc5 <st_dword>
c0004964:	8d 53 38             	lea    edx,[ebx+0x38]
c0004967:	b9 10 00 00 00       	mov    ecx,0x10
c000496c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004970:	e8 ad d9 ff ff       	call   c0002322 <make_rand>
c0004975:	83 c8 ff             	or     eax,0xffffffff
c0004978:	46                   	inc    esi
c0004979:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000497e:	e8 fb d8 ff ff       	call   c000227e <crc32>
c0004983:	83 fe 5c             	cmp    esi,0x5c
c0004986:	75 f0                	jne    c0004978 <create_partition+0x359>
c0004988:	f7 d0                	not    eax
c000498a:	8d 73 10             	lea    esi,[ebx+0x10]
c000498d:	89 c2                	mov    edx,eax
c000498f:	89 f0                	mov    eax,esi
c0004991:	e8 2f d3 ff ff       	call   c0001cc5 <st_dword>
c0004996:	83 ec 0c             	sub    esp,0xc
c0004999:	6a 01                	push   0x1
c000499b:	6a 00                	push   0x0
c000499d:	6a 01                	push   0x1
c000499f:	53                   	push   ebx
c00049a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049a4:	e8 71 d2 ff ff       	call   c0001c1a <disk_write>
c00049a9:	83 c4 20             	add    esp,0x20
c00049ac:	85 c0                	test   eax,eax
c00049ae:	0f 85 9c fc ff ff    	jne    c0004650 <create_partition+0x31>
c00049b4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049b8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049bc:	83 c2 ff             	add    edx,0xffffffff
c00049bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049c2:	83 d1 ff             	adc    ecx,0xffffffff
c00049c5:	e8 fe d2 ff ff       	call   c0001cc8 <st_qword>
c00049ca:	ba 01 00 00 00       	mov    edx,0x1
c00049cf:	31 c9                	xor    ecx,ecx
c00049d1:	89 e8                	mov    eax,ebp
c00049d3:	e8 f0 d2 ff ff       	call   c0001cc8 <st_qword>
c00049d8:	89 f8                	mov    eax,edi
c00049da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049de:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049e2:	31 ff                	xor    edi,edi
c00049e4:	e8 df d2 ff ff       	call   c0001cc8 <st_qword>
c00049e9:	89 f0                	mov    eax,esi
c00049eb:	31 d2                	xor    edx,edx
c00049ed:	e8 d3 d2 ff ff       	call   c0001cc5 <st_dword>
c00049f2:	83 c8 ff             	or     eax,0xffffffff
c00049f5:	47                   	inc    edi
c00049f6:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049fb:	e8 7e d8 ff ff       	call   c000227e <crc32>
c0004a00:	83 ff 5c             	cmp    edi,0x5c
c0004a03:	75 f0                	jne    c00049f5 <create_partition+0x3d6>
c0004a05:	f7 d0                	not    eax
c0004a07:	89 c2                	mov    edx,eax
c0004a09:	89 f0                	mov    eax,esi
c0004a0b:	e8 b5 d2 ff ff       	call   c0001cc5 <st_dword>
c0004a10:	83 ec 0c             	sub    esp,0xc
c0004a13:	6a 01                	push   0x1
c0004a15:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a19:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a1d:	83 c0 ff             	add    eax,0xffffffff
c0004a20:	83 d2 ff             	adc    edx,0xffffffff
c0004a23:	52                   	push   edx
c0004a24:	50                   	push   eax
c0004a25:	53                   	push   ebx
c0004a26:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a2a:	e8 eb d1 ff ff       	call   c0001c1a <disk_write>
c0004a2f:	83 c4 20             	add    esp,0x20
c0004a32:	85 c0                	test   eax,eax
c0004a34:	0f 85 16 fc ff ff    	jne    c0004650 <create_partition+0x31>
c0004a3a:	31 d2                	xor    edx,edx
c0004a3c:	89 d8                	mov    eax,ebx
c0004a3e:	b9 00 02 00 00       	mov    ecx,0x200
c0004a43:	e8 9b d2 ff ff       	call   c0001ce3 <mem_set>
c0004a48:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a4e:	b9 10 00 00 00       	mov    ecx,0x10
c0004a53:	ba b0 a0 02 c0       	mov    edx,0xc002a0b0
c0004a58:	e8 71 d2 ff ff       	call   c0001cce <mem_cpy>
c0004a5d:	e9 21 01 00 00       	jmp    c0004b83 <create_partition+0x564>
c0004a62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a66:	b9 05 00 00 00       	mov    ecx,0x5
c0004a6b:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a6e:	bf 08 00 00 00       	mov    edi,0x8
c0004a73:	89 f8                	mov    eax,edi
c0004a75:	31 d2                	xor    edx,edx
c0004a77:	0f b6 f0             	movzx  esi,al
c0004a7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a7d:	f7 f6                	div    esi
c0004a7f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a84:	76 0a                	jbe    c0004a90 <create_partition+0x471>
c0004a86:	d1 e7                	shl    edi,1
c0004a88:	49                   	dec    ecx
c0004a89:	75 e8                	jne    c0004a73 <create_partition+0x454>
c0004a8b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a90:	b9 00 02 00 00       	mov    ecx,0x200
c0004a95:	31 d2                	xor    edx,edx
c0004a97:	89 d8                	mov    eax,ebx
c0004a99:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a9f:	e8 3f d2 ff ff       	call   c0001ce3 <mem_set>
c0004aa4:	b9 64 00 00 00       	mov    ecx,0x64
c0004aa9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004aac:	31 d2                	xor    edx,edx
c0004aae:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ab6:	f7 f1                	div    ecx
c0004ab8:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004abd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ac1:	89 f8                	mov    eax,edi
c0004ac3:	0f b6 c0             	movzx  eax,al
c0004ac6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aca:	e9 80 00 00 00       	jmp    c0004b4f <create_partition+0x530>
c0004acf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ad2:	29 cf                	sub    edi,ecx
c0004ad4:	89 ca                	mov    edx,ecx
c0004ad6:	89 f0                	mov    eax,esi
c0004ad8:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004add:	e8 e3 d1 ff ff       	call   c0001cc5 <st_dword>
c0004ae2:	8d 46 04             	lea    eax,[esi+0x4]
c0004ae5:	89 fa                	mov    edx,edi
c0004ae7:	83 c6 10             	add    esi,0x10
c0004aea:	e8 d6 d1 ff ff       	call   c0001cc5 <st_dword>
c0004aef:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004af3:	31 d2                	xor    edx,edx
c0004af5:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004af8:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004afc:	89 c8                	mov    eax,ecx
c0004afe:	01 f9                	add    ecx,edi
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d5                	mov    ebp,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	45                   	inc    ebp
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b0e:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b11:	89 c2                	mov    edx,eax
c0004b13:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b16:	c1 ea 02             	shr    edx,0x2
c0004b19:	83 e2 c0             	and    edx,0xffffffc0
c0004b1c:	09 ea                	or     edx,ebp
c0004b1e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b23:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b26:	31 d2                	xor    edx,edx
c0004b28:	f7 f5                	div    ebp
c0004b2a:	89 d7                	mov    edi,edx
c0004b2c:	31 d2                	xor    edx,edx
c0004b2e:	47                   	inc    edi
c0004b2f:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b33:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b36:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b39:	89 c5                	mov    ebp,eax
c0004b3b:	c1 ed 02             	shr    ebp,0x2
c0004b3e:	83 e5 c0             	and    ebp,0xffffffc0
c0004b41:	09 ef                	or     edi,ebp
c0004b43:	89 fa                	mov    edx,edi
c0004b45:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b48:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b4d:	74 34                	je     c0004b83 <create_partition+0x564>
c0004b4f:	85 c9                	test   ecx,ecx
c0004b51:	74 30                	je     c0004b83 <create_partition+0x564>
c0004b53:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b56:	76 2b                	jbe    c0004b83 <create_partition+0x564>
c0004b58:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b5c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b60:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b63:	83 ff 64             	cmp    edi,0x64
c0004b66:	76 4b                	jbe    c0004bb3 <create_partition+0x594>
c0004b68:	89 f8                	mov    eax,edi
c0004b6a:	01 c8                	add    eax,ecx
c0004b6c:	0f 82 5d ff ff ff    	jb     c0004acf <create_partition+0x4b0>
c0004b72:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b75:	0f 87 54 ff ff ff    	ja     c0004acf <create_partition+0x4b0>
c0004b7b:	85 ff                	test   edi,edi
c0004b7d:	0f 85 51 ff ff ff    	jne    c0004ad4 <create_partition+0x4b5>
c0004b83:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b89:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b8e:	e8 2e d1 ff ff       	call   c0001cc1 <st_word>
c0004b93:	83 ec 0c             	sub    esp,0xc
c0004b96:	6a 01                	push   0x1
c0004b98:	6a 00                	push   0x0
c0004b9a:	6a 00                	push   0x0
c0004b9c:	53                   	push   ebx
c0004b9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004ba1:	e8 74 d0 ff ff       	call   c0001c1a <disk_write>
c0004ba6:	83 c4 20             	add    esp,0x20
c0004ba9:	85 c0                	test   eax,eax
c0004bab:	0f 95 c0             	setne  al
c0004bae:	0f b6 c0             	movzx  eax,al
c0004bb1:	eb 0e                	jmp    c0004bc1 <create_partition+0x5a2>
c0004bb3:	74 07                	je     c0004bbc <create_partition+0x59d>
c0004bb5:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bba:	eb ac                	jmp    c0004b68 <create_partition+0x549>
c0004bbc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bbf:	eb a7                	jmp    c0004b68 <create_partition+0x549>
c0004bc1:	83 c4 5c             	add    esp,0x5c
c0004bc4:	5b                   	pop    ebx
c0004bc5:	5e                   	pop    esi
c0004bc6:	5f                   	pop    edi
c0004bc7:	5d                   	pop    ebp
c0004bc8:	c3                   	ret    

c0004bc9 <get_fileinfo>:
c0004bc9:	55                   	push   ebp
c0004bca:	57                   	push   edi
c0004bcb:	56                   	push   esi
c0004bcc:	53                   	push   ebx
c0004bcd:	83 ec 1c             	sub    esp,0x1c
c0004bd0:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bd2:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bd6:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bda:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bdd:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004be0:	0f 84 dc 01 00 00    	je     c0004dc2 <get_fileinfo+0x1f9>
c0004be6:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004be9:	75 0f                	jne    c0004bfa <get_fileinfo+0x31>
c0004beb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bee:	83 c4 1c             	add    esp,0x1c
c0004bf1:	5b                   	pop    ebx
c0004bf2:	5e                   	pop    esi
c0004bf3:	5f                   	pop    edi
c0004bf4:	5d                   	pop    ebp
c0004bf5:	e9 58 d5 ff ff       	jmp    c0002152 <get_xfileinfo>
c0004bfa:	89 d3                	mov    ebx,edx
c0004bfc:	89 c6                	mov    esi,eax
c0004bfe:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c02:	74 6a                	je     c0004c6e <get_fileinfo+0xa5>
c0004c04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c0c:	31 ed                	xor    ebp,ebp
c0004c0e:	31 ff                	xor    edi,edi
c0004c10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c18:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c1b:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c1f:	66 85 d2             	test   dx,dx
c0004c22:	74 3e                	je     c0004c62 <get_fileinfo+0x99>
c0004c24:	66 85 ed             	test   bp,bp
c0004c27:	75 0c                	jne    c0004c35 <get_fileinfo+0x6c>
c0004c29:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c2f:	66 3d ff 07          	cmp    ax,0x7ff
c0004c33:	76 22                	jbe    c0004c57 <get_fileinfo+0x8e>
c0004c35:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c3a:	89 e8                	mov    eax,ebp
c0004c3c:	29 f9                	sub    ecx,edi
c0004c3e:	c1 e0 10             	shl    eax,0x10
c0004c41:	09 d0                	or     eax,edx
c0004c43:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c47:	e8 a3 d1 ff ff       	call   c0001def <put_utf>
c0004c4c:	84 c0                	test   al,al
c0004c4e:	74 10                	je     c0004c60 <get_fileinfo+0x97>
c0004c50:	0f b6 c0             	movzx  eax,al
c0004c53:	31 d2                	xor    edx,edx
c0004c55:	01 c7                	add    edi,eax
c0004c57:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c5c:	89 d5                	mov    ebp,edx
c0004c5e:	eb b0                	jmp    c0004c10 <get_fileinfo+0x47>
c0004c60:	31 ff                	xor    edi,edi
c0004c62:	66 85 ed             	test   bp,bp
c0004c65:	74 02                	je     c0004c69 <get_fileinfo+0xa0>
c0004c67:	31 ff                	xor    edi,edi
c0004c69:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c6e:	31 ff                	xor    edi,edi
c0004c70:	31 c9                	xor    ecx,ecx
c0004c72:	83 f9 0a             	cmp    ecx,0xa
c0004c75:	0f 87 ad 00 00 00    	ja     c0004d28 <get_fileinfo+0x15f>
c0004c7b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c7e:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c81:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c85:	66 83 fa 20          	cmp    dx,0x20
c0004c89:	0f 84 92 00 00 00    	je     c0004d21 <get_fileinfo+0x158>
c0004c8f:	66 83 fa 05          	cmp    dx,0x5
c0004c93:	75 05                	jne    c0004c9a <get_fileinfo+0xd1>
c0004c95:	ba e5 00 00 00       	mov    edx,0xe5
c0004c9a:	83 ff 0b             	cmp    edi,0xb
c0004c9d:	77 0b                	ja     c0004caa <get_fileinfo+0xe1>
c0004c9f:	83 fd 09             	cmp    ebp,0x9
c0004ca2:	75 06                	jne    c0004caa <get_fileinfo+0xe1>
c0004ca4:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004ca9:	47                   	inc    edi
c0004caa:	0f b7 c2             	movzx  eax,dx
c0004cad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cb1:	e8 6d d0 ff ff       	call   c0001d23 <dbc_1st>
c0004cb6:	85 c0                	test   eax,eax
c0004cb8:	74 2f                	je     c0004ce9 <get_fileinfo+0x120>
c0004cba:	83 fd 08             	cmp    ebp,0x8
c0004cbd:	74 2a                	je     c0004ce9 <get_fileinfo+0x120>
c0004cbf:	83 fd 0b             	cmp    ebp,0xb
c0004cc2:	74 25                	je     c0004ce9 <get_fileinfo+0x120>
c0004cc4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc7:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ccb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ccf:	e8 52 d0 ff ff       	call   c0001d26 <dbc_2nd>
c0004cd4:	85 c0                	test   eax,eax
c0004cd6:	74 11                	je     c0004ce9 <get_fileinfo+0x120>
c0004cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ce1:	c1 e2 08             	shl    edx,0x8
c0004ce4:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ce7:	09 c2                	or     edx,eax
c0004ce9:	0f b7 d2             	movzx  edx,dx
c0004cec:	50                   	push   eax
c0004ced:	50                   	push   eax
c0004cee:	68 b5 01 00 00       	push   0x1b5
c0004cf3:	52                   	push   edx
c0004cf4:	e8 46 38 00 00       	call   c000853f <ff_oem2uni>
c0004cf9:	83 c4 10             	add    esp,0x10
c0004cfc:	66 85 c0             	test   ax,ax
c0004cff:	75 04                	jne    c0004d05 <get_fileinfo+0x13c>
c0004d01:	31 ff                	xor    edi,edi
c0004d03:	eb 23                	jmp    c0004d28 <get_fileinfo+0x15f>
c0004d05:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d0a:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d0e:	29 f9                	sub    ecx,edi
c0004d10:	0f b7 c0             	movzx  eax,ax
c0004d13:	e8 d7 d0 ff ff       	call   c0001def <put_utf>
c0004d18:	84 c0                	test   al,al
c0004d1a:	74 e5                	je     c0004d01 <get_fileinfo+0x138>
c0004d1c:	0f b6 c0             	movzx  eax,al
c0004d1f:	01 c7                	add    edi,eax
c0004d21:	89 e9                	mov    ecx,ebp
c0004d23:	e9 4a ff ff ff       	jmp    c0004c72 <get_fileinfo+0xa9>
c0004d28:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d2d:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d31:	75 54                	jne    c0004d87 <get_fileinfo+0x1be>
c0004d33:	85 ff                	test   edi,edi
c0004d35:	75 0b                	jne    c0004d42 <get_fileinfo+0x179>
c0004d37:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d3b:	ba 01 00 00 00       	mov    edx,0x1
c0004d40:	eb 33                	jmp    c0004d75 <get_fileinfo+0x1ac>
c0004d42:	b1 08                	mov    cl,0x8
c0004d44:	31 d2                	xor    edx,edx
c0004d46:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d4c:	84 c0                	test   al,al
c0004d4e:	74 25                	je     c0004d75 <get_fileinfo+0x1ac>
c0004d50:	66 83 f8 2e          	cmp    ax,0x2e
c0004d54:	74 16                	je     c0004d6c <get_fileinfo+0x1a3>
c0004d56:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d59:	66 83 ff 19          	cmp    di,0x19
c0004d5d:	77 0f                	ja     c0004d6e <get_fileinfo+0x1a5>
c0004d5f:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d62:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d65:	74 07                	je     c0004d6e <get_fileinfo+0x1a5>
c0004d67:	83 c0 20             	add    eax,0x20
c0004d6a:	eb 02                	jmp    c0004d6e <get_fileinfo+0x1a5>
c0004d6c:	b1 10                	mov    cl,0x10
c0004d6e:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d72:	42                   	inc    edx
c0004d73:	eb d1                	jmp    c0004d46 <get_fileinfo+0x17d>
c0004d75:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d7a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d81:	75 04                	jne    c0004d87 <get_fileinfo+0x1be>
c0004d83:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d8d:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d90:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d93:	83 c0 1c             	add    eax,0x1c
c0004d96:	e8 c1 ce ff ff       	call   c0001c5c <ld_dword>
c0004d9b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004da2:	89 03                	mov    DWORD PTR [ebx],eax
c0004da4:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da7:	83 c0 16             	add    eax,0x16
c0004daa:	e8 a0 ce ff ff       	call   c0001c4f <ld_word>
c0004daf:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004db3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db6:	83 c0 18             	add    eax,0x18
c0004db9:	e8 91 ce ff ff       	call   c0001c4f <ld_word>
c0004dbe:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dc2:	83 c4 1c             	add    esp,0x1c
c0004dc5:	5b                   	pop    ebx
c0004dc6:	5e                   	pop    esi
c0004dc7:	5f                   	pop    edi
c0004dc8:	5d                   	pop    ebp
c0004dc9:	c3                   	ret    

c0004dca <ld_clust.isra.0>:
c0004dca:	56                   	push   esi
c0004dcb:	89 c6                	mov    esi,eax
c0004dcd:	53                   	push   ebx
c0004dce:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dd1:	89 d3                	mov    ebx,edx
c0004dd3:	e8 77 ce ff ff       	call   c0001c4f <ld_word>
c0004dd8:	0f b7 c8             	movzx  ecx,ax
c0004ddb:	89 f0                	mov    eax,esi
c0004ddd:	3c 03                	cmp    al,0x3
c0004ddf:	75 0d                	jne    c0004dee <ld_clust.isra.0+0x24>
c0004de1:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de4:	e8 66 ce ff ff       	call   c0001c4f <ld_word>
c0004de9:	c1 e0 10             	shl    eax,0x10
c0004dec:	09 c1                	or     ecx,eax
c0004dee:	89 c8                	mov    eax,ecx
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <st_clust.isra.1>:
c0004df3:	56                   	push   esi
c0004df4:	89 c6                	mov    esi,eax
c0004df6:	53                   	push   ebx
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	0f b7 d1             	movzx  edx,cx
c0004dfc:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dff:	e8 bd ce ff ff       	call   c0001cc1 <st_word>
c0004e04:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e07:	75 0f                	jne    c0004e18 <st_clust.isra.1+0x25>
c0004e09:	c1 e9 10             	shr    ecx,0x10
c0004e0c:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e0f:	89 ca                	mov    edx,ecx
c0004e11:	5b                   	pop    ebx
c0004e12:	5e                   	pop    esi
c0004e13:	e9 a9 ce ff ff       	jmp    c0001cc1 <st_word>
c0004e18:	5b                   	pop    ebx
c0004e19:	5e                   	pop    esi
c0004e1a:	c3                   	ret    

c0004e1b <init_alloc_info.isra.2>:
c0004e1b:	56                   	push   esi
c0004e1c:	53                   	push   ebx
c0004e1d:	89 c6                	mov    esi,eax
c0004e1f:	89 d3                	mov    ebx,edx
c0004e21:	51                   	push   ecx
c0004e22:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e24:	83 c0 34             	add    eax,0x34
c0004e27:	e8 30 ce ff ff       	call   c0001c5c <ld_dword>
c0004e2c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e2f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e31:	83 c0 38             	add    eax,0x38
c0004e34:	e8 3b ce ff ff       	call   c0001c74 <ld_qword>
c0004e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e3f:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e41:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e44:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e4b:	83 e0 02             	and    eax,0x2
c0004e4e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e51:	5b                   	pop    ebx
c0004e52:	5b                   	pop    ebx
c0004e53:	5e                   	pop    esi
c0004e54:	c3                   	ret    

c0004e55 <follow_path>:
c0004e55:	56                   	push   esi
c0004e56:	53                   	push   ebx
c0004e57:	89 c3                	mov    ebx,eax
c0004e59:	83 ec 14             	sub    esp,0x14
c0004e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e60:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e66:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e68:	80 fa 5c             	cmp    dl,0x5c
c0004e6b:	75 07                	jne    c0004e74 <follow_path+0x1f>
c0004e6d:	40                   	inc    eax
c0004e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e72:	eb ee                	jmp    c0004e62 <follow_path+0xd>
c0004e74:	80 fa 2f             	cmp    dl,0x2f
c0004e77:	74 f4                	je     c0004e6d <follow_path+0x18>
c0004e79:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e80:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e87:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e8a:	77 52                	ja     c0004ede <follow_path+0x89>
c0004e8c:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e90:	31 d2                	xor    edx,edx
c0004e92:	89 d8                	mov    eax,ebx
c0004e94:	e8 12 e3 ff ff       	call   c00031ab <dir_sdi>
c0004e99:	eb 7c                	jmp    c0004f17 <follow_path+0xc2>
c0004e9b:	89 d8                	mov    eax,ebx
c0004e9d:	e8 6e f2 ff ff       	call   c0004110 <dir_find>
c0004ea2:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004ea5:	85 c0                	test   eax,eax
c0004ea7:	75 46                	jne    c0004eef <follow_path+0x9a>
c0004ea9:	80 e2 04             	and    dl,0x4
c0004eac:	75 69                	jne    c0004f17 <follow_path+0xc2>
c0004eae:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004eb2:	74 5e                	je     c0004f12 <follow_path+0xbd>
c0004eb4:	8a 06                	mov    al,BYTE PTR [esi]
c0004eb6:	3c 04                	cmp    al,0x4
c0004eb8:	75 41                	jne    c0004efb <follow_path+0xa6>
c0004eba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ebd:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ec1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ec4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ec7:	30 c0                	xor    al,al
c0004ec9:	09 d0                	or     eax,edx
c0004ecb:	89 da                	mov    edx,ebx
c0004ecd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ed0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ed3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ed6:	8d 46 10             	lea    eax,[esi+0x10]
c0004ed9:	e8 3d ff ff ff       	call   c0004e1b <init_alloc_info.isra.2>
c0004ede:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ee2:	89 d8                	mov    eax,ebx
c0004ee4:	e8 a9 ed ff ff       	call   c0003c92 <create_name>
c0004ee9:	85 c0                	test   eax,eax
c0004eeb:	74 ae                	je     c0004e9b <follow_path+0x46>
c0004eed:	eb 28                	jmp    c0004f17 <follow_path+0xc2>
c0004eef:	83 f8 04             	cmp    eax,0x4
c0004ef2:	75 23                	jne    c0004f17 <follow_path+0xc2>
c0004ef4:	80 e2 04             	and    dl,0x4
c0004ef7:	74 19                	je     c0004f12 <follow_path+0xbd>
c0004ef9:	eb 1c                	jmp    c0004f17 <follow_path+0xc2>
c0004efb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004efe:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f04:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f08:	e8 bd fe ff ff       	call   c0004dca <ld_clust.isra.0>
c0004f0d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f10:	eb cc                	jmp    c0004ede <follow_path+0x89>
c0004f12:	b8 05 00 00 00       	mov    eax,0x5
c0004f17:	83 c4 14             	add    esp,0x14
c0004f1a:	5b                   	pop    ebx
c0004f1b:	5e                   	pop    esi
c0004f1c:	c3                   	ret    

c0004f1d <f_mount>:
c0004f1d:	53                   	push   ebx
c0004f1e:	83 ec 18             	sub    esp,0x18
c0004f21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f25:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f2d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f31:	e8 fb d2 ff ff       	call   c0002231 <get_ldnumber>
c0004f36:	89 c2                	mov    edx,eax
c0004f38:	b8 0b 00 00 00       	mov    eax,0xb
c0004f3d:	85 d2                	test   edx,edx
c0004f3f:	78 39                	js     c0004f7a <f_mount+0x5d>
c0004f41:	8b 04 95 60 f2 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0da0]
c0004f48:	85 c0                	test   eax,eax
c0004f4a:	74 03                	je     c0004f4f <f_mount+0x32>
c0004f4c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f53:	85 c0                	test   eax,eax
c0004f55:	74 03                	je     c0004f5a <f_mount+0x3d>
c0004f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f5a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5e:	89 04 95 60 f2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd0da0],eax
c0004f65:	31 c0                	xor    eax,eax
c0004f67:	84 db                	test   bl,bl
c0004f69:	74 0f                	je     c0004f7a <f_mount+0x5d>
c0004f6b:	31 c9                	xor    ecx,ecx
c0004f6d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f71:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f75:	e8 65 d7 ff ff       	call   c00026df <mount_volume>
c0004f7a:	83 c4 18             	add    esp,0x18
c0004f7d:	5b                   	pop    ebx
c0004f7e:	c3                   	ret    

c0004f7f <f_open>:
c0004f7f:	55                   	push   ebp
c0004f80:	bd 09 00 00 00       	mov    ebp,0x9
c0004f85:	57                   	push   edi
c0004f86:	56                   	push   esi
c0004f87:	53                   	push   ebx
c0004f88:	83 ec 7c             	sub    esp,0x7c
c0004f8b:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f92:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f99:	85 db                	test   ebx,ebx
c0004f9b:	0f 84 10 04 00 00    	je     c00053b1 <f_open+0x432>
c0004fa1:	89 fe                	mov    esi,edi
c0004fa3:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fa7:	83 e6 3f             	and    esi,0x3f
c0004faa:	89 f0                	mov    eax,esi
c0004fac:	0f b6 c8             	movzx  ecx,al
c0004faf:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fb6:	e8 24 d7 ff ff       	call   c00026df <mount_volume>
c0004fbb:	89 c5                	mov    ebp,eax
c0004fbd:	85 c0                	test   eax,eax
c0004fbf:	0f 85 e6 03 00 00    	jne    c00053ab <f_open+0x42c>
c0004fc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc9:	bd 11 00 00 00       	mov    ebp,0x11
c0004fce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd2:	83 ec 0c             	sub    esp,0xc
c0004fd5:	68 60 04 00 00       	push   0x460
c0004fda:	e8 a3 34 00 00       	call   c0008482 <ff_memalloc>
c0004fdf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe3:	83 c4 10             	add    esp,0x10
c0004fe6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004feb:	0f 84 c0 03 00 00    	je     c00053b1 <f_open+0x432>
c0004ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004ff9:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fff:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005002:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005005:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000500c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005010:	e8 40 fe ff ff       	call   c0004e55 <follow_path>
c0005015:	89 c5                	mov    ebp,eax
c0005017:	85 c0                	test   eax,eax
c0005019:	75 0c                	jne    c0005027 <f_open+0xa8>
c000501b:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005020:	79 05                	jns    c0005027 <f_open+0xa8>
c0005022:	bd 06 00 00 00       	mov    ebp,0x6
c0005027:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000502d:	0f 84 84 01 00 00    	je     c00051b7 <f_open+0x238>
c0005033:	85 ed                	test   ebp,ebp
c0005035:	74 20                	je     c0005057 <f_open+0xd8>
c0005037:	83 fd 04             	cmp    ebp,0x4
c000503a:	0f 85 58 03 00 00    	jne    c0005398 <f_open+0x419>
c0005040:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005044:	83 ce 08             	or     esi,0x8
c0005047:	e8 8a f2 ff ff       	call   c00042d6 <dir_register>
c000504c:	89 c5                	mov    ebp,eax
c000504e:	85 c0                	test   eax,eax
c0005050:	74 2f                	je     c0005081 <f_open+0x102>
c0005052:	e9 41 03 00 00       	jmp    c0005398 <f_open+0x419>
c0005057:	bd 07 00 00 00       	mov    ebp,0x7
c000505c:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005061:	0f 85 31 03 00 00    	jne    c0005398 <f_open+0x419>
c0005067:	bd 08 00 00 00       	mov    ebp,0x8
c000506c:	f7 c7 04 00 00 00    	test   edi,0x4
c0005072:	0f 85 20 03 00 00    	jne    c0005398 <f_open+0x419>
c0005078:	83 e7 08             	and    edi,0x8
c000507b:	0f 84 65 01 00 00    	je     c00051e6 <f_open+0x267>
c0005081:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005085:	8a 02                	mov    al,BYTE PTR [edx]
c0005087:	3c 04                	cmp    al,0x4
c0005089:	0f 85 97 00 00 00    	jne    c0005126 <f_open+0x1a7>
c000508f:	8d 42 10             	lea    eax,[edx+0x10]
c0005092:	89 13                	mov    DWORD PTR [ebx],edx
c0005094:	89 da                	mov    edx,ebx
c0005096:	e8 80 fd ff ff       	call   c0004e1b <init_alloc_info.isra.2>
c000509b:	31 d2                	xor    edx,edx
c000509d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a1:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050a6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050a9:	83 c0 02             	add    eax,0x2
c00050ac:	e8 32 cc ff ff       	call   c0001ce3 <mem_set>
c00050b1:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050b6:	31 d2                	xor    edx,edx
c00050b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bf:	83 c0 26             	add    eax,0x26
c00050c2:	e8 1c cc ff ff       	call   c0001ce3 <mem_set>
c00050c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050ce:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050d2:	ba 00 00 21 50       	mov    edx,0x50210000
c00050d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050da:	83 c0 08             	add    eax,0x8
c00050dd:	e8 e3 cb ff ff       	call   c0001cc5 <st_dword>
c00050e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050e9:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050f1:	e8 b7 ea ff ff       	call   c0003bad <store_xdir>
c00050f6:	89 c5                	mov    ebp,eax
c00050f8:	85 c0                	test   eax,eax
c00050fa:	0f 85 98 02 00 00    	jne    c0005398 <f_open+0x419>
c0005100:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005103:	85 d2                	test   edx,edx
c0005105:	0f 84 db 00 00 00    	je     c00051e6 <f_open+0x267>
c000510b:	31 c9                	xor    ecx,ecx
c000510d:	89 d8                	mov    eax,ebx
c000510f:	e8 8e e3 ff ff       	call   c00034a2 <remove_chain>
c0005114:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005118:	89 c5                	mov    ebp,eax
c000511a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000511d:	48                   	dec    eax
c000511e:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005121:	e9 b8 00 00 00       	jmp    c00051de <f_open+0x25f>
c0005126:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000512a:	89 ea                	mov    edx,ebp
c000512c:	e8 99 fc ff ff       	call   c0004dca <ld_clust.isra.0>
c0005131:	ba 00 00 21 50       	mov    edx,0x50210000
c0005136:	89 c7                	mov    edi,eax
c0005138:	8d 45 0e             	lea    eax,[ebp+0xe]
c000513b:	e8 85 cb ff ff       	call   c0001cc5 <st_dword>
c0005140:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005144:	31 c9                	xor    ecx,ecx
c0005146:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000514a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005152:	e8 9c fc ff ff       	call   c0004df3 <st_clust.isra.1>
c0005157:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000515b:	31 d2                	xor    edx,edx
c000515d:	83 c0 1c             	add    eax,0x1c
c0005160:	e8 60 cb ff ff       	call   c0001cc5 <st_dword>
c0005165:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005169:	85 ff                	test   edi,edi
c000516b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000516f:	74 75                	je     c00051e6 <f_open+0x267>
c0005171:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005175:	31 c9                	xor    ecx,ecx
c0005177:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000517a:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000517d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005181:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005185:	89 fa                	mov    edx,edi
c0005187:	8d 44 24 24          	lea    eax,[esp+0x24]
c000518b:	e8 12 e3 ff ff       	call   c00034a2 <remove_chain>
c0005190:	89 c5                	mov    ebp,eax
c0005192:	85 c0                	test   eax,eax
c0005194:	0f 85 fe 01 00 00    	jne    c0005398 <f_open+0x419>
c000519a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000519e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a6:	4f                   	dec    edi
c00051a7:	e8 81 d2 ff ff       	call   c000242d <move_window>
c00051ac:	89 c5                	mov    ebp,eax
c00051ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051b5:	eb 27                	jmp    c00051de <f_open+0x25f>
c00051b7:	85 ed                	test   ebp,ebp
c00051b9:	0f 85 d9 01 00 00    	jne    c0005398 <f_open+0x419>
c00051bf:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051c3:	bd 04 00 00 00       	mov    ebp,0x4
c00051c8:	a8 10                	test   al,0x10
c00051ca:	0f 85 c8 01 00 00    	jne    c0005398 <f_open+0x419>
c00051d0:	83 e7 02             	and    edi,0x2
c00051d3:	74 11                	je     c00051e6 <f_open+0x267>
c00051d5:	bd 07 00 00 00       	mov    ebp,0x7
c00051da:	a8 01                	test   al,0x1
c00051dc:	eb 02                	jmp    c00051e0 <f_open+0x261>
c00051de:	85 ed                	test   ebp,ebp
c00051e0:	0f 85 b2 01 00 00    	jne    c0005398 <f_open+0x419>
c00051e6:	f7 c6 08 00 00 00    	test   esi,0x8
c00051ec:	74 03                	je     c00051f1 <f_open+0x272>
c00051ee:	83 ce 40             	or     esi,0x40
c00051f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051f5:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051f8:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051fb:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051fe:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005201:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005205:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005208:	8a 02                	mov    al,BYTE PTR [edx]
c000520a:	3c 04                	cmp    al,0x4
c000520c:	75 2a                	jne    c0005238 <f_open+0x2b9>
c000520e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005212:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005217:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000521a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000521e:	30 c0                	xor    al,al
c0005220:	09 c8                	or     eax,ecx
c0005222:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005225:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005229:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000522c:	8d 42 10             	lea    eax,[edx+0x10]
c000522f:	89 da                	mov    edx,ebx
c0005231:	e8 e5 fb ff ff       	call   c0004e1b <init_alloc_info.isra.2>
c0005236:	eb 1c                	jmp    c0005254 <f_open+0x2d5>
c0005238:	89 fa                	mov    edx,edi
c000523a:	e8 8b fb ff ff       	call   c0004dca <ld_clust.isra.0>
c000523f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005242:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005245:	e8 12 ca ff ff       	call   c0001c5c <ld_dword>
c000524a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005251:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005258:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000525f:	89 03                	mov    DWORD PTR [ebx],eax
c0005261:	31 d2                	xor    edx,edx
c0005263:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005267:	b9 00 02 00 00       	mov    ecx,0x200
c000526c:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005270:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005274:	89 f0                	mov    eax,esi
c0005276:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000527d:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005280:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005287:	8d 43 50             	lea    eax,[ebx+0x50]
c000528a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005291:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000529c:	e8 42 ca ff ff       	call   c0001ce3 <mem_set>
c00052a1:	83 e6 20             	and    esi,0x20
c00052a4:	75 07                	jne    c00052ad <f_open+0x32e>
c00052a6:	31 ed                	xor    ebp,ebp
c00052a8:	e9 eb 00 00 00       	jmp    c0005398 <f_open+0x419>
c00052ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052b0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052b7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052bf:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052c3:	74 e1                	je     c00052a6 <f_open+0x327>
c00052c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052cd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052d0:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052d7:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052da:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052de:	31 ff                	xor    edi,edi
c00052e0:	c1 e5 09             	shl    ebp,0x9
c00052e3:	89 ee                	mov    esi,ebp
c00052e5:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052e9:	89 f8                	mov    eax,edi
c00052eb:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052ef:	73 22                	jae    c0005313 <f_open+0x394>
c00052f1:	89 d8                	mov    eax,ebx
c00052f3:	e8 bd dc ff ff       	call   c0002fb5 <get_fat>
c00052f8:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052fc:	89 c2                	mov    edx,eax
c00052fe:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005302:	83 f8 01             	cmp    eax,0x1
c0005305:	76 10                	jbe    c0005317 <f_open+0x398>
c0005307:	83 f8 ff             	cmp    eax,0xffffffff
c000530a:	75 d9                	jne    c00052e5 <f_open+0x366>
c000530c:	bd 01 00 00 00       	mov    ebp,0x1
c0005311:	eb 09                	jmp    c000531c <f_open+0x39d>
c0005313:	31 ed                	xor    ebp,ebp
c0005315:	eb 05                	jmp    c000531c <f_open+0x39d>
c0005317:	bd 02 00 00 00       	mov    ebp,0x2
c000531c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000531f:	85 ed                	test   ebp,ebp
c0005321:	75 75                	jne    c0005398 <f_open+0x419>
c0005323:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005327:	25 ff 01 00 00       	and    eax,0x1ff
c000532c:	0f 84 74 ff ff ff    	je     c00052a6 <f_open+0x327>
c0005332:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005336:	bd 02 00 00 00       	mov    ebp,0x2
c000533b:	89 c8                	mov    eax,ecx
c000533d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005341:	e8 a2 cb ff ff       	call   c0001ee8 <clst2sect>
c0005346:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000534a:	89 d7                	mov    edi,edx
c000534c:	09 c7                	or     edi,eax
c000534e:	74 48                	je     c0005398 <f_open+0x419>
c0005350:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005354:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005358:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005360:	0f ac fe 09          	shrd   esi,edi,0x9
c0005364:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005368:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000536c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000536f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005373:	83 ec 0c             	sub    esp,0xc
c0005376:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005379:	6a 01                	push   0x1
c000537b:	52                   	push   edx
c000537c:	50                   	push   eax
c000537d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005381:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005385:	50                   	push   eax
c0005386:	e8 79 c8 ff ff       	call   c0001c04 <disk_read>
c000538b:	83 c4 20             	add    esp,0x20
c000538e:	85 c0                	test   eax,eax
c0005390:	0f 95 c0             	setne  al
c0005393:	0f b6 c0             	movzx  eax,al
c0005396:	89 c5                	mov    ebp,eax
c0005398:	83 ec 0c             	sub    esp,0xc
c000539b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000539f:	e8 f4 30 00 00       	call   c0008498 <ff_memfree>
c00053a4:	83 c4 10             	add    esp,0x10
c00053a7:	85 ed                	test   ebp,ebp
c00053a9:	74 06                	je     c00053b1 <f_open+0x432>
c00053ab:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053b1:	83 c4 7c             	add    esp,0x7c
c00053b4:	89 e8                	mov    eax,ebp
c00053b6:	5b                   	pop    ebx
c00053b7:	5e                   	pop    esi
c00053b8:	5f                   	pop    edi
c00053b9:	5d                   	pop    ebp
c00053ba:	c3                   	ret    

c00053bb <f_read>:
c00053bb:	55                   	push   ebp
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	53                   	push   ebx
c00053bf:	83 ec 2c             	sub    esp,0x2c
c00053c2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053d0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053d4:	89 d8                	mov    eax,ebx
c00053d6:	e8 77 cf ff ff       	call   c0002352 <validate>
c00053db:	89 c5                	mov    ebp,eax
c00053dd:	85 c0                	test   eax,eax
c00053df:	0f 85 4c 02 00 00    	jne    c0005631 <f_read+0x276>
c00053e5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053e9:	85 ed                	test   ebp,ebp
c00053eb:	0f 85 40 02 00 00    	jne    c0005631 <f_read+0x276>
c00053f1:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053f5:	0f 84 31 02 00 00    	je     c000562c <f_read+0x271>
c00053fb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053fe:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005401:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005404:	bf 00 00 00 00       	mov    edi,0x0
c0005409:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000540c:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005410:	89 d1                	mov    ecx,edx
c0005412:	19 f9                	sbb    ecx,edi
c0005414:	0f 83 cf 00 00 00    	jae    c00054e9 <f_read+0x12e>
c000541a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000541e:	e9 c6 00 00 00       	jmp    c00054e9 <f_read+0x12e>
c0005423:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005426:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005429:	89 d0                	mov    eax,edx
c000542b:	25 ff 01 00 00       	and    eax,0x1ff
c0005430:	0f 85 c9 01 00 00    	jne    c00055ff <f_read+0x244>
c0005436:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000543a:	89 d6                	mov    esi,edx
c000543c:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005440:	89 cf                	mov    edi,ecx
c0005442:	48                   	dec    eax
c0005443:	0f ac fe 09          	shrd   esi,edi,0x9
c0005447:	21 f0                	and    eax,esi
c0005449:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000544d:	0f 84 a6 00 00 00    	je     c00054f9 <f_read+0x13e>
c0005453:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005457:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000545a:	89 c8                	mov    eax,ecx
c000545c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000545f:	e8 84 ca ff ff       	call   c0001ee8 <clst2sect>
c0005464:	89 d7                	mov    edi,edx
c0005466:	09 c7                	or     edi,eax
c0005468:	0f 84 b4 00 00 00    	je     c0005522 <f_read+0x167>
c000546e:	31 ff                	xor    edi,edi
c0005470:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005474:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005477:	01 c6                	add    esi,eax
c0005479:	11 d7                	adc    edi,edx
c000547b:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005483:	0f 86 fd 00 00 00    	jbe    c0005586 <f_read+0x1cb>
c0005489:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000548d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005491:	c1 e8 09             	shr    eax,0x9
c0005494:	89 04 24             	mov    DWORD PTR [esp],eax
c0005497:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000549b:	03 14 24             	add    edx,DWORD PTR [esp]
c000549e:	39 c2                	cmp    edx,eax
c00054a0:	76 07                	jbe    c00054a9 <f_read+0xee>
c00054a2:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	83 ec 0c             	sub    esp,0xc
c00054ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054b0:	57                   	push   edi
c00054b1:	56                   	push   esi
c00054b2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054b6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ba:	50                   	push   eax
c00054bb:	e8 44 c7 ff ff       	call   c0001c04 <disk_read>
c00054c0:	83 c4 20             	add    esp,0x20
c00054c3:	85 c0                	test   eax,eax
c00054c5:	75 6e                	jne    c0005535 <f_read+0x17a>
c00054c7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054cb:	78 7e                	js     c000554b <f_read+0x190>
c00054cd:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054d0:	c1 e6 09             	shl    esi,0x9
c00054d3:	31 ff                	xor    edi,edi
c00054d5:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054d9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054dd:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e1:	01 30                	add    DWORD PTR [eax],esi
c00054e3:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054e6:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054e9:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054ee:	0f 85 2f ff ff ff    	jne    c0005423 <f_read+0x68>
c00054f4:	e9 38 01 00 00       	jmp    c0005631 <f_read+0x276>
c00054f9:	89 c8                	mov    eax,ecx
c00054fb:	09 d0                	or     eax,edx
c00054fd:	75 05                	jne    c0005504 <f_read+0x149>
c00054ff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005502:	eb 19                	jmp    c000551d <f_read+0x162>
c0005504:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005508:	74 09                	je     c0005513 <f_read+0x158>
c000550a:	89 d8                	mov    eax,ebx
c000550c:	e8 f8 c9 ff ff       	call   c0001f09 <clmt_clust>
c0005511:	eb 0a                	jmp    c000551d <f_read+0x162>
c0005513:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005516:	89 d8                	mov    eax,ebx
c0005518:	e8 98 da ff ff       	call   c0002fb5 <get_fat>
c000551d:	83 f8 01             	cmp    eax,0x1
c0005520:	77 0e                	ja     c0005530 <f_read+0x175>
c0005522:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005526:	bd 02 00 00 00       	mov    ebp,0x2
c000552b:	e9 01 01 00 00       	jmp    c0005631 <f_read+0x276>
c0005530:	83 f8 ff             	cmp    eax,0xffffffff
c0005533:	75 0e                	jne    c0005543 <f_read+0x188>
c0005535:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005539:	bd 01 00 00 00       	mov    ebp,0x1
c000553e:	e9 ee 00 00 00       	jmp    c0005631 <f_read+0x276>
c0005543:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005546:	e9 08 ff ff ff       	jmp    c0005453 <f_read+0x98>
c000554b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000554e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005551:	29 f0                	sub    eax,esi
c0005553:	19 fa                	sbb    edx,edi
c0005555:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005558:	89 d7                	mov    edi,edx
c000555a:	ba 00 00 00 00       	mov    edx,0x0
c000555f:	89 f9                	mov    ecx,edi
c0005561:	19 d1                	sbb    ecx,edx
c0005563:	0f 83 64 ff ff ff    	jae    c00054cd <f_read+0x112>
c0005569:	89 c7                	mov    edi,eax
c000556b:	8d 53 50             	lea    edx,[ebx+0x50]
c000556e:	c1 e7 09             	shl    edi,0x9
c0005571:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005575:	b9 00 02 00 00       	mov    ecx,0x200
c000557a:	01 f8                	add    eax,edi
c000557c:	e8 4d c7 ff ff       	call   c0001cce <mem_cpy>
c0005581:	e9 47 ff ff ff       	jmp    c00054cd <f_read+0x112>
c0005586:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005589:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000558c:	89 04 24             	mov    DWORD PTR [esp],eax
c000558f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005593:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005597:	75 05                	jne    c000559e <f_read+0x1e3>
c0005599:	39 34 24             	cmp    DWORD PTR [esp],esi
c000559c:	74 5b                	je     c00055f9 <f_read+0x23e>
c000559e:	8d 43 50             	lea    eax,[ebx+0x50]
c00055a1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055a9:	79 2a                	jns    c00055d5 <f_read+0x21a>
c00055ab:	83 ec 0c             	sub    esp,0xc
c00055ae:	6a 01                	push   0x1
c00055b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055b8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055bc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 54 c6 ff ff       	call   c0001c1a <disk_write>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 64 ff ff ff    	jne    c0005535 <f_read+0x17a>
c00055d1:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055d5:	83 ec 0c             	sub    esp,0xc
c00055d8:	6a 01                	push   0x1
c00055da:	57                   	push   edi
c00055db:	56                   	push   esi
c00055dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055e4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055e8:	50                   	push   eax
c00055e9:	e8 16 c6 ff ff       	call   c0001c04 <disk_read>
c00055ee:	83 c4 20             	add    esp,0x20
c00055f1:	85 c0                	test   eax,eax
c00055f3:	0f 85 3c ff ff ff    	jne    c0005535 <f_read+0x17a>
c00055f9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055fc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055ff:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005602:	ba 00 02 00 00       	mov    edx,0x200
c0005607:	25 ff 01 00 00       	and    eax,0x1ff
c000560c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005610:	29 c2                	sub    edx,eax
c0005612:	39 d6                	cmp    esi,edx
c0005614:	76 02                	jbe    c0005618 <f_read+0x25d>
c0005616:	89 d6                	mov    esi,edx
c0005618:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000561c:	89 f1                	mov    ecx,esi
c000561e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005622:	e8 a7 c6 ff ff       	call   c0001cce <mem_cpy>
c0005627:	e9 a7 fe ff ff       	jmp    c00054d3 <f_read+0x118>
c000562c:	bd 07 00 00 00       	mov    ebp,0x7
c0005631:	83 c4 2c             	add    esp,0x2c
c0005634:	89 e8                	mov    eax,ebp
c0005636:	5b                   	pop    ebx
c0005637:	5e                   	pop    esi
c0005638:	5f                   	pop    edi
c0005639:	5d                   	pop    ebp
c000563a:	c3                   	ret    

c000563b <f_write>:
c000563b:	55                   	push   ebp
c000563c:	57                   	push   edi
c000563d:	56                   	push   esi
c000563e:	53                   	push   ebx
c000563f:	83 ec 2c             	sub    esp,0x2c
c0005642:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005646:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000564a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005654:	89 d8                	mov    eax,ebx
c0005656:	e8 f7 cc ff ff       	call   c0002352 <validate>
c000565b:	89 c5                	mov    ebp,eax
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 86 02 00 00    	jne    c00058eb <f_write+0x2b0>
c0005665:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005669:	85 ed                	test   ebp,ebp
c000566b:	0f 85 7a 02 00 00    	jne    c00058eb <f_write+0x2b0>
c0005671:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005675:	0f 84 6b 02 00 00    	je     c00058e6 <f_write+0x2ab>
c000567b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000567f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005682:	0f 84 43 01 00 00    	je     c00057cb <f_write+0x190>
c0005688:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000568b:	89 c1                	mov    ecx,eax
c000568d:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005691:	0f 83 34 01 00 00    	jae    c00057cb <f_write+0x190>
c0005697:	f7 d0                	not    eax
c0005699:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000569d:	e9 29 01 00 00       	jmp    c00057cb <f_write+0x190>
c00056a2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056a5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056a8:	89 d0                	mov    eax,edx
c00056aa:	25 ff 01 00 00       	and    eax,0x1ff
c00056af:	0f 85 00 02 00 00    	jne    c00058b5 <f_write+0x27a>
c00056b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056b9:	89 d6                	mov    esi,edx
c00056bb:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056bf:	89 cf                	mov    edi,ecx
c00056c1:	48                   	dec    eax
c00056c2:	0f ac fe 09          	shrd   esi,edi,0x9
c00056c6:	21 f0                	and    eax,esi
c00056c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056cc:	0f 84 06 01 00 00    	je     c00057d8 <f_write+0x19d>
c00056d2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056d6:	0f 88 6e 01 00 00    	js     c000584a <f_write+0x20f>
c00056dc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056e0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056e3:	89 c8                	mov    eax,ecx
c00056e5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056e9:	e8 fa c7 ff ff       	call   c0001ee8 <clst2sect>
c00056ee:	89 d1                	mov    ecx,edx
c00056f0:	09 c1                	or     ecx,eax
c00056f2:	0f 84 1c 01 00 00    	je     c0005814 <f_write+0x1d9>
c00056f8:	31 ff                	xor    edi,edi
c00056fa:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005702:	01 c6                	add    esi,eax
c0005704:	11 d7                	adc    edi,edx
c0005706:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000570e:	0f 86 63 01 00 00    	jbe    c0005877 <f_write+0x23c>
c0005714:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005718:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000571c:	c1 e8 09             	shr    eax,0x9
c000571f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005723:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005727:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000572b:	39 c2                	cmp    edx,eax
c000572d:	76 08                	jbe    c0005737 <f_write+0xfc>
c000572f:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005733:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005737:	83 ec 0c             	sub    esp,0xc
c000573a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000573e:	57                   	push   edi
c000573f:	56                   	push   esi
c0005740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005744:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005748:	50                   	push   eax
c0005749:	e8 cc c4 ff ff       	call   c0001c1a <disk_write>
c000574e:	83 c4 20             	add    esp,0x20
c0005751:	85 c0                	test   eax,eax
c0005753:	0f 85 ce 00 00 00    	jne    c0005827 <f_write+0x1ec>
c0005759:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000575c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000575f:	29 f0                	sub    eax,esi
c0005761:	19 fa                	sbb    edx,edi
c0005763:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005767:	89 d7                	mov    edi,edx
c0005769:	ba 00 00 00 00       	mov    edx,0x0
c000576e:	89 f9                	mov    ecx,edi
c0005770:	19 d1                	sbb    ecx,edx
c0005772:	73 1c                	jae    c0005790 <f_write+0x155>
c0005774:	89 c7                	mov    edi,eax
c0005776:	b9 00 02 00 00       	mov    ecx,0x200
c000577b:	c1 e7 09             	shl    edi,0x9
c000577e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005781:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005785:	89 fa                	mov    edx,edi
c0005787:	e8 42 c5 ff ff       	call   c0001cce <mem_cpy>
c000578c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005790:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005794:	c1 e6 09             	shl    esi,0x9
c0005797:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000579b:	31 ff                	xor    edi,edi
c000579d:	01 30                	add    DWORD PTR [eax],esi
c000579f:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057a3:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057a7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057aa:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057ad:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057b0:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057b3:	89 c1                	mov    ecx,eax
c00057b5:	39 f2                	cmp    edx,esi
c00057b7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ba:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057bd:	19 f9                	sbb    ecx,edi
c00057bf:	73 04                	jae    c00057c5 <f_write+0x18a>
c00057c1:	89 f2                	mov    edx,esi
c00057c3:	89 f8                	mov    eax,edi
c00057c5:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057c8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057cb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057d0:	0f 85 cc fe ff ff    	jne    c00056a2 <f_write+0x67>
c00057d6:	eb 2e                	jmp    c0005806 <f_write+0x1cb>
c00057d8:	89 c8                	mov    eax,ecx
c00057da:	09 d0                	or     eax,edx
c00057dc:	75 0b                	jne    c00057e9 <f_write+0x1ae>
c00057de:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057e1:	31 d2                	xor    edx,edx
c00057e3:	85 c0                	test   eax,eax
c00057e5:	75 28                	jne    c000580f <f_write+0x1d4>
c00057e7:	eb 12                	jmp    c00057fb <f_write+0x1c0>
c00057e9:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ed:	74 09                	je     c00057f8 <f_write+0x1bd>
c00057ef:	89 d8                	mov    eax,ebx
c00057f1:	e8 13 c7 ff ff       	call   c0001f09 <clmt_clust>
c00057f6:	eb 0a                	jmp    c0005802 <f_write+0x1c7>
c00057f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057fb:	89 d8                	mov    eax,ebx
c00057fd:	e8 a1 da ff ff       	call   c00032a3 <create_chain>
c0005802:	85 c0                	test   eax,eax
c0005804:	75 09                	jne    c000580f <f_write+0x1d4>
c0005806:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000580a:	e9 dc 00 00 00       	jmp    c00058eb <f_write+0x2b0>
c000580f:	83 f8 01             	cmp    eax,0x1
c0005812:	75 0e                	jne    c0005822 <f_write+0x1e7>
c0005814:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005818:	bd 02 00 00 00       	mov    ebp,0x2
c000581d:	e9 c9 00 00 00       	jmp    c00058eb <f_write+0x2b0>
c0005822:	83 f8 ff             	cmp    eax,0xffffffff
c0005825:	75 0e                	jne    c0005835 <f_write+0x1fa>
c0005827:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000582b:	bd 01 00 00 00       	mov    ebp,0x1
c0005830:	e9 b6 00 00 00       	jmp    c00058eb <f_write+0x2b0>
c0005835:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005838:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000583c:	0f 85 90 fe ff ff    	jne    c00056d2 <f_write+0x97>
c0005842:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005845:	e9 88 fe ff ff       	jmp    c00056d2 <f_write+0x97>
c000584a:	83 ec 0c             	sub    esp,0xc
c000584d:	8d 43 50             	lea    eax,[ebx+0x50]
c0005850:	6a 01                	push   0x1
c0005852:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005855:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005858:	50                   	push   eax
c0005859:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000585d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005861:	50                   	push   eax
c0005862:	e8 b3 c3 ff ff       	call   c0001c1a <disk_write>
c0005867:	83 c4 20             	add    esp,0x20
c000586a:	85 c0                	test   eax,eax
c000586c:	75 b9                	jne    c0005827 <f_write+0x1ec>
c000586e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005872:	e9 65 fe ff ff       	jmp    c00056dc <f_write+0xa1>
c0005877:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000587a:	75 05                	jne    c0005881 <f_write+0x246>
c000587c:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000587f:	74 2e                	je     c00058af <f_write+0x274>
c0005881:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005884:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005887:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000588a:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000588d:	73 20                	jae    c00058af <f_write+0x274>
c000588f:	83 ec 0c             	sub    esp,0xc
c0005892:	8d 43 50             	lea    eax,[ebx+0x50]
c0005895:	6a 01                	push   0x1
c0005897:	57                   	push   edi
c0005898:	56                   	push   esi
c0005899:	50                   	push   eax
c000589a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000589e:	50                   	push   eax
c000589f:	e8 60 c3 ff ff       	call   c0001c04 <disk_read>
c00058a4:	83 c4 20             	add    esp,0x20
c00058a7:	85 c0                	test   eax,eax
c00058a9:	0f 85 78 ff ff ff    	jne    c0005827 <f_write+0x1ec>
c00058af:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058b2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058b5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058b8:	ba 00 02 00 00       	mov    edx,0x200
c00058bd:	25 ff 01 00 00       	and    eax,0x1ff
c00058c2:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058c6:	29 c2                	sub    edx,eax
c00058c8:	39 d6                	cmp    esi,edx
c00058ca:	76 02                	jbe    c00058ce <f_write+0x293>
c00058cc:	89 d6                	mov    esi,edx
c00058ce:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058d2:	89 f1                	mov    ecx,esi
c00058d4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058d8:	e8 f1 c3 ff ff       	call   c0001cce <mem_cpy>
c00058dd:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058e1:	e9 b1 fe ff ff       	jmp    c0005797 <f_write+0x15c>
c00058e6:	bd 07 00 00 00       	mov    ebp,0x7
c00058eb:	83 c4 2c             	add    esp,0x2c
c00058ee:	89 e8                	mov    eax,ebp
c00058f0:	5b                   	pop    ebx
c00058f1:	5e                   	pop    esi
c00058f2:	5f                   	pop    edi
c00058f3:	5d                   	pop    ebp
c00058f4:	c3                   	ret    

c00058f5 <f_sync>:
c00058f5:	56                   	push   esi
c00058f6:	53                   	push   ebx
c00058f7:	83 ec 64             	sub    esp,0x64
c00058fa:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058fe:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005902:	89 d8                	mov    eax,ebx
c0005904:	e8 49 ca ff ff       	call   c0002352 <validate>
c0005909:	85 c0                	test   eax,eax
c000590b:	0f 85 ba 01 00 00    	jne    c0005acb <f_sync+0x1d6>
c0005911:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005914:	f6 c2 40             	test   dl,0x40
c0005917:	0f 84 ae 01 00 00    	je     c0005acb <f_sync+0x1d6>
c000591d:	84 d2                	test   dl,dl
c000591f:	79 33                	jns    c0005954 <f_sync+0x5f>
c0005921:	83 ec 0c             	sub    esp,0xc
c0005924:	8d 43 50             	lea    eax,[ebx+0x50]
c0005927:	6a 01                	push   0x1
c0005929:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000592c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000592f:	50                   	push   eax
c0005930:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005934:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005938:	50                   	push   eax
c0005939:	e8 dc c2 ff ff       	call   c0001c1a <disk_write>
c000593e:	83 c4 20             	add    esp,0x20
c0005941:	89 c2                	mov    edx,eax
c0005943:	b8 01 00 00 00       	mov    eax,0x1
c0005948:	85 d2                	test   edx,edx
c000594a:	0f 85 7b 01 00 00    	jne    c0005acb <f_sync+0x1d6>
c0005950:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005958:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000595b:	0f 85 11 01 00 00    	jne    c0005a72 <f_sync+0x17d>
c0005961:	89 d8                	mov    eax,ebx
c0005963:	e8 13 d6 ff ff       	call   c0002f7b <fill_first_frag>
c0005968:	85 c0                	test   eax,eax
c000596a:	0f 85 5b 01 00 00    	jne    c0005acb <f_sync+0x1d6>
c0005970:	83 c9 ff             	or     ecx,0xffffffff
c0005973:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005976:	89 d8                	mov    eax,ebx
c0005978:	e8 c9 d5 ff ff       	call   c0002f46 <fill_last_frag>
c000597d:	85 c0                	test   eax,eax
c000597f:	0f 85 46 01 00 00    	jne    c0005acb <f_sync+0x1d6>
c0005985:	83 ec 0c             	sub    esp,0xc
c0005988:	68 60 04 00 00       	push   0x460
c000598d:	e8 f0 2a 00 00       	call   c0008482 <ff_memalloc>
c0005992:	83 c4 10             	add    esp,0x10
c0005995:	89 c6                	mov    esi,eax
c0005997:	b8 11 00 00 00       	mov    eax,0x11
c000599c:	85 f6                	test   esi,esi
c000599e:	0f 84 27 01 00 00    	je     c0005acb <f_sync+0x1d6>
c00059a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059ae:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059b1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059b4:	89 da                	mov    edx,ebx
c00059b6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ba:	e8 af df ff ff       	call   c000396e <load_obj_xdir>
c00059bf:	85 c0                	test   eax,eax
c00059c1:	0f 85 95 00 00 00    	jne    c0005a5c <f_sync+0x167>
c00059c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059cb:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059ce:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059d2:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059d5:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059d8:	83 ca 01             	or     edx,0x1
c00059db:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e4:	83 c0 34             	add    eax,0x34
c00059e7:	e8 d9 c2 ff ff       	call   c0001cc5 <st_dword>
c00059ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f9:	83 c0 38             	add    eax,0x38
c00059fc:	e8 c7 c2 ff ff       	call   c0001cc8 <st_qword>
c0005a01:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a0b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a0e:	83 c0 28             	add    eax,0x28
c0005a11:	e8 b2 c2 ff ff       	call   c0001cc8 <st_qword>
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a1f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a22:	83 c0 0c             	add    eax,0xc
c0005a25:	e8 9b c2 ff ff       	call   c0001cc5 <st_dword>
c0005a2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a31:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a35:	31 d2                	xor    edx,edx
c0005a37:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a3a:	83 c0 10             	add    eax,0x10
c0005a3d:	e8 83 c2 ff ff       	call   c0001cc5 <st_dword>
c0005a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a46:	e8 62 e1 ff ff       	call   c0003bad <store_xdir>
c0005a4b:	85 c0                	test   eax,eax
c0005a4d:	75 0d                	jne    c0005a5c <f_sync+0x167>
c0005a4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a53:	e8 00 eb ff ff       	call   c0004558 <sync_fs>
c0005a58:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a5c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a60:	83 ec 0c             	sub    esp,0xc
c0005a63:	56                   	push   esi
c0005a64:	e8 2f 2a 00 00       	call   c0008498 <ff_memfree>
c0005a69:	83 c4 10             	add    esp,0x10
c0005a6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a70:	eb 59                	jmp    c0005acb <f_sync+0x1d6>
c0005a72:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a75:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a78:	e8 b0 c9 ff ff       	call   c000242d <move_window>
c0005a7d:	85 c0                	test   eax,eax
c0005a7f:	75 4a                	jne    c0005acb <f_sync+0x1d6>
c0005a81:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a84:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a88:	89 f2                	mov    edx,esi
c0005a8a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a8f:	e8 5f f3 ff ff       	call   c0004df3 <st_clust.isra.1>
c0005a94:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a97:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a9a:	e8 26 c2 ff ff       	call   c0001cc5 <st_dword>
c0005a9f:	8d 46 16             	lea    eax,[esi+0x16]
c0005aa2:	ba 00 00 21 50       	mov    edx,0x50210000
c0005aa7:	e8 19 c2 ff ff       	call   c0001cc5 <st_dword>
c0005aac:	8d 46 12             	lea    eax,[esi+0x12]
c0005aaf:	31 d2                	xor    edx,edx
c0005ab1:	e8 0b c2 ff ff       	call   c0001cc1 <st_word>
c0005ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aba:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ac2:	e8 91 ea ff ff       	call   c0004558 <sync_fs>
c0005ac7:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005acb:	83 c4 64             	add    esp,0x64
c0005ace:	5b                   	pop    ebx
c0005acf:	5e                   	pop    esi
c0005ad0:	c3                   	ret    

c0005ad1 <f_close>:
c0005ad1:	53                   	push   ebx
c0005ad2:	83 ec 24             	sub    esp,0x24
c0005ad5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ad9:	53                   	push   ebx
c0005ada:	e8 16 fe ff ff       	call   c00058f5 <f_sync>
c0005adf:	83 c4 10             	add    esp,0x10
c0005ae2:	85 c0                	test   eax,eax
c0005ae4:	75 15                	jne    c0005afb <f_close+0x2a>
c0005ae6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005aea:	89 d8                	mov    eax,ebx
c0005aec:	e8 61 c8 ff ff       	call   c0002352 <validate>
c0005af1:	85 c0                	test   eax,eax
c0005af3:	75 06                	jne    c0005afb <f_close+0x2a>
c0005af5:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005afb:	83 c4 18             	add    esp,0x18
c0005afe:	5b                   	pop    ebx
c0005aff:	c3                   	ret    

c0005b00 <f_lseek>:
c0005b00:	55                   	push   ebp
c0005b01:	57                   	push   edi
c0005b02:	56                   	push   esi
c0005b03:	53                   	push   ebx
c0005b04:	83 ec 3c             	sub    esp,0x3c
c0005b07:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b0b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b0f:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b13:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b16:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b1a:	89 d8                	mov    eax,ebx
c0005b1c:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b20:	e8 2d c8 ff ff       	call   c0002352 <validate>
c0005b25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b29:	85 c0                	test   eax,eax
c0005b2b:	0f 85 7a 04 00 00    	jne    c0005fab <f_lseek+0x4ab>
c0005b31:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b39:	85 c0                	test   eax,eax
c0005b3b:	0f 85 6a 04 00 00    	jne    c0005fab <f_lseek+0x4ab>
c0005b41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b45:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b48:	74 0c                	je     c0005b56 <f_lseek+0x56>
c0005b4a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 1f                	jne    c0005b70 <f_lseek+0x70>
c0005b51:	e9 b5 01 00 00       	jmp    c0005d0b <f_lseek+0x20b>
c0005b56:	83 c9 ff             	or     ecx,0xffffffff
c0005b59:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b5c:	89 d8                	mov    eax,ebx
c0005b5e:	e8 e3 d3 ff ff       	call   c0002f46 <fill_last_frag>
c0005b63:	85 c0                	test   eax,eax
c0005b65:	74 e3                	je     c0005b4a <f_lseek+0x4a>
c0005b67:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b6b:	e9 3b 04 00 00       	jmp    c0005fab <f_lseek+0x4ab>
c0005b70:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b75:	0f 85 ac 00 00 00    	jne    c0005c27 <f_lseek+0x127>
c0005b7b:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b7f:	0f 85 a2 00 00 00    	jne    c0005c27 <f_lseek+0x127>
c0005b85:	8d 78 04             	lea    edi,[eax+0x4]
c0005b88:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b8d:	be 02 00 00 00       	mov    esi,0x2
c0005b92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b96:	85 ed                	test   ebp,ebp
c0005b98:	74 73                	je     c0005c0d <f_lseek+0x10d>
c0005b9a:	89 e9                	mov    ecx,ebp
c0005b9c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ba3:	ff 04 24             	inc    DWORD PTR [esp]
c0005ba6:	89 ca                	mov    edx,ecx
c0005ba8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bac:	89 d8                	mov    eax,ebx
c0005bae:	e8 02 d4 ff ff       	call   c0002fb5 <get_fat>
c0005bb3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bb7:	83 f8 01             	cmp    eax,0x1
c0005bba:	77 11                	ja     c0005bcd <f_lseek+0xcd>
c0005bbc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bc0:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bc8:	e9 de 03 00 00       	jmp    c0005fab <f_lseek+0x4ab>
c0005bcd:	83 f8 ff             	cmp    eax,0xffffffff
c0005bd0:	75 11                	jne    c0005be3 <f_lseek+0xe3>
c0005bd2:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bd6:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bde:	e9 c8 03 00 00       	jmp    c0005fab <f_lseek+0x4ab>
c0005be3:	8d 51 01             	lea    edx,[ecx+0x1]
c0005be6:	89 c1                	mov    ecx,eax
c0005be8:	39 c2                	cmp    edx,eax
c0005bea:	74 b7                	je     c0005ba3 <f_lseek+0xa3>
c0005bec:	83 c6 02             	add    esi,0x2
c0005bef:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bf3:	72 0b                	jb     c0005c00 <f_lseek+0x100>
c0005bf5:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bf8:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bfb:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bfd:	83 c7 08             	add    edi,0x8
c0005c00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c04:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c07:	76 04                	jbe    c0005c0d <f_lseek+0x10d>
c0005c09:	89 c5                	mov    ebp,eax
c0005c0b:	eb 8d                	jmp    c0005b9a <f_lseek+0x9a>
c0005c0d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c10:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c14:	89 30                	mov    DWORD PTR [eax],esi
c0005c16:	0f 87 87 03 00 00    	ja     c0005fa3 <f_lseek+0x4a3>
c0005c1c:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c22:	e9 84 03 00 00       	jmp    c0005fab <f_lseek+0x4ab>
c0005c27:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c2a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c39:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c40:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c44:	73 0f                	jae    c0005c55 <f_lseek+0x155>
c0005c46:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c5d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c60:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c67:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c6b:	0f 84 3a 03 00 00    	je     c0005fab <f_lseek+0x4ab>
c0005c71:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c75:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c79:	83 c6 ff             	add    esi,0xffffffff
c0005c7c:	89 d8                	mov    eax,ebx
c0005c7e:	83 d7 ff             	adc    edi,0xffffffff
c0005c81:	89 f2                	mov    edx,esi
c0005c83:	89 f9                	mov    ecx,edi
c0005c85:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c89:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c8c:	e8 78 c2 ff ff       	call   c0001f09 <clmt_clust>
c0005c91:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c95:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c98:	89 c2                	mov    edx,eax
c0005c9a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c9e:	89 c8                	mov    eax,ecx
c0005ca0:	e8 43 c2 ff ff       	call   c0001ee8 <clst2sect>
c0005ca5:	89 d7                	mov    edi,edx
c0005ca7:	09 c7                	or     edi,eax
c0005ca9:	0f 84 0d ff ff ff    	je     c0005bbc <f_lseek+0xbc>
c0005caf:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cb3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cb9:	0f 84 ec 02 00 00    	je     c0005fab <f_lseek+0x4ab>
c0005cbf:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cc7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cca:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cce:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd2:	4d                   	dec    ebp
c0005cd3:	31 ff                	xor    edi,edi
c0005cd5:	21 ee                	and    esi,ebp
c0005cd7:	01 c6                	add    esi,eax
c0005cd9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cdc:	11 d7                	adc    edi,edx
c0005cde:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005ce1:	39 fa                	cmp    edx,edi
c0005ce3:	75 08                	jne    c0005ced <f_lseek+0x1ed>
c0005ce5:	39 f0                	cmp    eax,esi
c0005ce7:	0f 84 be 02 00 00    	je     c0005fab <f_lseek+0x4ab>
c0005ced:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cf0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005cf4:	0f 89 80 02 00 00    	jns    c0005f7a <f_lseek+0x47a>
c0005cfa:	83 ec 0c             	sub    esp,0xc
c0005cfd:	6a 01                	push   0x1
c0005cff:	52                   	push   edx
c0005d00:	50                   	push   eax
c0005d01:	55                   	push   ebp
c0005d02:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d06:	e9 5a 02 00 00       	jmp    c0005f65 <f_lseek+0x465>
c0005d0b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d0f:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d12:	74 16                	je     c0005d2a <f_lseek+0x22a>
c0005d14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d19:	76 0f                	jbe    c0005d2a <f_lseek+0x22a>
c0005d1b:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d22:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d2a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d30:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d33:	89 c7                	mov    edi,eax
c0005d35:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d39:	73 0d                	jae    c0005d48 <f_lseek+0x248>
c0005d3b:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d3f:	75 07                	jne    c0005d48 <f_lseek+0x248>
c0005d41:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d48:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d4b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d4e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d52:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d59:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d60:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d63:	75 09                	jne    c0005d6e <f_lseek+0x26e>
c0005d65:	31 f6                	xor    esi,esi
c0005d67:	31 ff                	xor    edi,edi
c0005d69:	e9 af 01 00 00       	jmp    c0005f1d <f_lseek+0x41d>
c0005d6e:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d72:	89 d7                	mov    edi,edx
c0005d74:	c1 e1 09             	shl    ecx,0x9
c0005d77:	09 c7                	or     edi,eax
c0005d79:	89 cd                	mov    ebp,ecx
c0005d7b:	74 6d                	je     c0005dea <f_lseek+0x2ea>
c0005d7d:	83 c0 ff             	add    eax,0xffffffff
c0005d80:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d84:	83 d2 ff             	adc    edx,0xffffffff
c0005d87:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d8e:	83 c0 ff             	add    eax,0xffffffff
c0005d91:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d95:	83 d2 ff             	adc    edx,0xffffffff
c0005d98:	31 ff                	xor    edi,edi
c0005d9a:	57                   	push   edi
c0005d9b:	51                   	push   ecx
c0005d9c:	52                   	push   edx
c0005d9d:	50                   	push   eax
c0005d9e:	e8 71 18 02 00       	call   c0027614 <__udivdi3>
c0005da3:	83 c4 10             	add    esp,0x10
c0005da6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005daa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dae:	57                   	push   edi
c0005daf:	55                   	push   ebp
c0005db0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005db4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005db8:	e8 57 18 02 00       	call   c0027614 <__udivdi3>
c0005dbd:	83 c4 10             	add    esp,0x10
c0005dc0:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dc4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dc8:	19 d1                	sbb    ecx,edx
c0005dca:	72 1e                	jb     c0005dea <f_lseek+0x2ea>
c0005dcc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dd0:	89 e9                	mov    ecx,ebp
c0005dd2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dd5:	f7 d9                	neg    ecx
c0005dd7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dda:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dde:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005de1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005de4:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005de8:	eb 28                	jmp    c0005e12 <f_lseek+0x312>
c0005dea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ded:	85 c0                	test   eax,eax
c0005def:	75 1e                	jne    c0005e0f <f_lseek+0x30f>
c0005df1:	31 d2                	xor    edx,edx
c0005df3:	89 d8                	mov    eax,ebx
c0005df5:	e8 a9 d4 ff ff       	call   c00032a3 <create_chain>
c0005dfa:	83 f8 01             	cmp    eax,0x1
c0005dfd:	0f 84 b9 fd ff ff    	je     c0005bbc <f_lseek+0xbc>
c0005e03:	83 f8 ff             	cmp    eax,0xffffffff
c0005e06:	0f 84 c6 fd ff ff    	je     c0005bd2 <f_lseek+0xd2>
c0005e0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e0f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e12:	85 c0                	test   eax,eax
c0005e14:	0f 84 4b ff ff ff    	je     c0005d65 <f_lseek+0x265>
c0005e1a:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e1e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e26:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e29:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e2d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e30:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e33:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e37:	0f 83 9d 00 00 00    	jae    c0005eda <f_lseek+0x3da>
c0005e3d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e41:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e45:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e48:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e4c:	01 f2                	add    edx,esi
c0005e4e:	11 f9                	adc    ecx,edi
c0005e50:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e58:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e5b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e5e:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e61:	f6 c1 02             	test   cl,0x2
c0005e64:	74 35                	je     c0005e9b <f_lseek+0x39b>
c0005e66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e6a:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e6d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e70:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e74:	73 16                	jae    c0005e8c <f_lseek+0x38c>
c0005e76:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e7a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e7e:	88 ca                	mov    dl,cl
c0005e80:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e83:	83 ca 40             	or     edx,0x40
c0005e86:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e89:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e8c:	89 c2                	mov    edx,eax
c0005e8e:	89 d8                	mov    eax,ebx
c0005e90:	e8 0e d4 ff ff       	call   c00032a3 <create_chain>
c0005e95:	85 c0                	test   eax,eax
c0005e97:	75 0b                	jne    c0005ea4 <f_lseek+0x3a4>
c0005e99:	eb 30                	jmp    c0005ecb <f_lseek+0x3cb>
c0005e9b:	89 c2                	mov    edx,eax
c0005e9d:	89 d8                	mov    eax,ebx
c0005e9f:	e8 11 d1 ff ff       	call   c0002fb5 <get_fat>
c0005ea4:	83 f8 ff             	cmp    eax,0xffffffff
c0005ea7:	0f 84 25 fd ff ff    	je     c0005bd2 <f_lseek+0xd2>
c0005ead:	83 f8 01             	cmp    eax,0x1
c0005eb0:	0f 86 06 fd ff ff    	jbe    c0005bbc <f_lseek+0xbc>
c0005eb6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005eba:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ebd:	0f 86 f9 fc ff ff    	jbe    c0005bbc <f_lseek+0xbc>
c0005ec3:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ec6:	e9 5b ff ff ff       	jmp    c0005e26 <f_lseek+0x326>
c0005ecb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ed2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eda:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005edd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ee1:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ee4:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ee7:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005eea:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ef0:	0f 84 6f fe ff ff    	je     c0005d65 <f_lseek+0x265>
c0005ef6:	89 c2                	mov    edx,eax
c0005ef8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005efc:	e8 e7 bf ff ff       	call   c0001ee8 <clst2sect>
c0005f01:	89 d7                	mov    edi,edx
c0005f03:	09 c7                	or     edi,eax
c0005f05:	0f 84 b1 fc ff ff    	je     c0005bbc <f_lseek+0xbc>
c0005f0b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f0f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f12:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f16:	c1 ef 09             	shr    edi,0x9
c0005f19:	01 c6                	add    esi,eax
c0005f1b:	11 d7                	adc    edi,edx
c0005f1d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f20:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f23:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f26:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f29:	19 d1                	sbb    ecx,edx
c0005f2b:	73 0a                	jae    c0005f37 <f_lseek+0x437>
c0005f2d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f30:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f33:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f37:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f3c:	74 6d                	je     c0005fab <f_lseek+0x4ab>
c0005f3e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f41:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f44:	39 fa                	cmp    edx,edi
c0005f46:	75 04                	jne    c0005f4c <f_lseek+0x44c>
c0005f48:	39 f0                	cmp    eax,esi
c0005f4a:	74 5f                	je     c0005fab <f_lseek+0x4ab>
c0005f4c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f4f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f53:	79 25                	jns    c0005f7a <f_lseek+0x47a>
c0005f55:	83 ec 0c             	sub    esp,0xc
c0005f58:	6a 01                	push   0x1
c0005f5a:	52                   	push   edx
c0005f5b:	50                   	push   eax
c0005f5c:	55                   	push   ebp
c0005f5d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f61:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f65:	50                   	push   eax
c0005f66:	e8 af bc ff ff       	call   c0001c1a <disk_write>
c0005f6b:	83 c4 20             	add    esp,0x20
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	0f 85 5c fc ff ff    	jne    c0005bd2 <f_lseek+0xd2>
c0005f76:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f7a:	83 ec 0c             	sub    esp,0xc
c0005f7d:	6a 01                	push   0x1
c0005f7f:	57                   	push   edi
c0005f80:	56                   	push   esi
c0005f81:	55                   	push   ebp
c0005f82:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f86:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f8a:	50                   	push   eax
c0005f8b:	e8 74 bc ff ff       	call   c0001c04 <disk_read>
c0005f90:	83 c4 20             	add    esp,0x20
c0005f93:	85 c0                	test   eax,eax
c0005f95:	0f 85 37 fc ff ff    	jne    c0005bd2 <f_lseek+0xd2>
c0005f9b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f9e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fa1:	eb 08                	jmp    c0005fab <f_lseek+0x4ab>
c0005fa3:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005faf:	83 c4 3c             	add    esp,0x3c
c0005fb2:	5b                   	pop    ebx
c0005fb3:	5e                   	pop    esi
c0005fb4:	5f                   	pop    edi
c0005fb5:	5d                   	pop    ebp
c0005fb6:	c3                   	ret    

c0005fb7 <f_opendir>:
c0005fb7:	56                   	push   esi
c0005fb8:	b8 09 00 00 00       	mov    eax,0x9
c0005fbd:	53                   	push   ebx
c0005fbe:	83 ec 24             	sub    esp,0x24
c0005fc1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fc5:	85 db                	test   ebx,ebx
c0005fc7:	0f 84 e6 00 00 00    	je     c00060b3 <f_opendir+0xfc>
c0005fcd:	31 c9                	xor    ecx,ecx
c0005fcf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fd3:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fd7:	e8 03 c7 ff ff       	call   c00026df <mount_volume>
c0005fdc:	85 c0                	test   eax,eax
c0005fde:	0f 85 c9 00 00 00    	jne    c00060ad <f_opendir+0xf6>
c0005fe4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe8:	83 ec 0c             	sub    esp,0xc
c0005feb:	89 03                	mov    DWORD PTR [ebx],eax
c0005fed:	68 60 04 00 00       	push   0x460
c0005ff2:	e8 8b 24 00 00       	call   c0008482 <ff_memalloc>
c0005ff7:	83 c4 10             	add    esp,0x10
c0005ffa:	89 c6                	mov    esi,eax
c0005ffc:	b8 11 00 00 00       	mov    eax,0x11
c0006001:	85 f6                	test   esi,esi
c0006003:	0f 84 aa 00 00 00    	je     c00060b3 <f_opendir+0xfc>
c0006009:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000600d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006013:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006016:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006019:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000601d:	89 d8                	mov    eax,ebx
c000601f:	e8 31 ee ff ff       	call   c0004e55 <follow_path>
c0006024:	85 c0                	test   eax,eax
c0006026:	75 61                	jne    c0006089 <f_opendir+0xd2>
c0006028:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000602c:	78 46                	js     c0006074 <f_opendir+0xbd>
c000602e:	b8 05 00 00 00       	mov    eax,0x5
c0006033:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006037:	74 50                	je     c0006089 <f_opendir+0xd2>
c0006039:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000603d:	8a 01                	mov    al,BYTE PTR [ecx]
c000603f:	3c 04                	cmp    al,0x4
c0006041:	75 26                	jne    c0006069 <f_opendir+0xb2>
c0006043:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006046:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006049:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000604c:	30 d2                	xor    dl,dl
c000604e:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006052:	09 c2                	or     edx,eax
c0006054:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006057:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000605a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000605d:	89 da                	mov    edx,ebx
c000605f:	8d 41 10             	lea    eax,[ecx+0x10]
c0006062:	e8 b4 ed ff ff       	call   c0004e1b <init_alloc_info.isra.2>
c0006067:	eb 0b                	jmp    c0006074 <f_opendir+0xbd>
c0006069:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000606c:	e8 59 ed ff ff       	call   c0004dca <ld_clust.isra.0>
c0006071:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006074:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006078:	31 d2                	xor    edx,edx
c000607a:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000607e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006082:	89 d8                	mov    eax,ebx
c0006084:	e8 22 d1 ff ff       	call   c00031ab <dir_sdi>
c0006089:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000608d:	83 ec 0c             	sub    esp,0xc
c0006090:	56                   	push   esi
c0006091:	e8 02 24 00 00       	call   c0008498 <ff_memfree>
c0006096:	83 c4 10             	add    esp,0x10
c0006099:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000609d:	83 f8 04             	cmp    eax,0x4
c00060a0:	74 06                	je     c00060a8 <f_opendir+0xf1>
c00060a2:	85 c0                	test   eax,eax
c00060a4:	74 0d                	je     c00060b3 <f_opendir+0xfc>
c00060a6:	eb 05                	jmp    c00060ad <f_opendir+0xf6>
c00060a8:	b8 05 00 00 00       	mov    eax,0x5
c00060ad:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060b3:	83 c4 24             	add    esp,0x24
c00060b6:	5b                   	pop    ebx
c00060b7:	5e                   	pop    esi
c00060b8:	c3                   	ret    

c00060b9 <f_closedir>:
c00060b9:	53                   	push   ebx
c00060ba:	83 ec 18             	sub    esp,0x18
c00060bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060c1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 86 c2 ff ff       	call   c0002352 <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 06                	jne    c00060d6 <f_closedir+0x1d>
c00060d0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060d6:	83 c4 18             	add    esp,0x18
c00060d9:	5b                   	pop    ebx
c00060da:	c3                   	ret    

c00060db <f_readdir>:
c00060db:	57                   	push   edi
c00060dc:	56                   	push   esi
c00060dd:	53                   	push   ebx
c00060de:	83 ec 20             	sub    esp,0x20
c00060e1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060e5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060e9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ed:	89 d8                	mov    eax,ebx
c00060ef:	e8 5e c2 ff ff       	call   c0002352 <validate>
c00060f4:	85 c0                	test   eax,eax
c00060f6:	75 77                	jne    c000616f <f_readdir+0x94>
c00060f8:	85 ff                	test   edi,edi
c00060fa:	75 0b                	jne    c0006107 <f_readdir+0x2c>
c00060fc:	31 d2                	xor    edx,edx
c00060fe:	89 d8                	mov    eax,ebx
c0006100:	e8 a6 d0 ff ff       	call   c00031ab <dir_sdi>
c0006105:	eb 68                	jmp    c000616f <f_readdir+0x94>
c0006107:	83 ec 0c             	sub    esp,0xc
c000610a:	68 60 04 00 00       	push   0x460
c000610f:	e8 6e 23 00 00       	call   c0008482 <ff_memalloc>
c0006114:	83 c4 10             	add    esp,0x10
c0006117:	89 c6                	mov    esi,eax
c0006119:	b8 11 00 00 00       	mov    eax,0x11
c000611e:	85 f6                	test   esi,esi
c0006120:	74 4d                	je     c000616f <f_readdir+0x94>
c0006122:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006126:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000612c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000612f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006132:	31 d2                	xor    edx,edx
c0006134:	89 d8                	mov    eax,ebx
c0006136:	e8 80 d8 ff ff       	call   c00039bb <dir_read>
c000613b:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006140:	75 19                	jne    c000615b <f_readdir+0x80>
c0006142:	89 fa                	mov    edx,edi
c0006144:	89 d8                	mov    eax,ebx
c0006146:	e8 7e ea ff ff       	call   c0004bc9 <get_fileinfo>
c000614b:	31 d2                	xor    edx,edx
c000614d:	89 d8                	mov    eax,ebx
c000614f:	e8 af d5 ff ff       	call   c0003703 <dir_next>
c0006154:	83 f8 04             	cmp    eax,0x4
c0006157:	75 02                	jne    c000615b <f_readdir+0x80>
c0006159:	31 c0                	xor    eax,eax
c000615b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000615f:	83 ec 0c             	sub    esp,0xc
c0006162:	56                   	push   esi
c0006163:	e8 30 23 00 00       	call   c0008498 <ff_memfree>
c0006168:	83 c4 10             	add    esp,0x10
c000616b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000616f:	83 c4 20             	add    esp,0x20
c0006172:	5b                   	pop    ebx
c0006173:	5e                   	pop    esi
c0006174:	5f                   	pop    edi
c0006175:	c3                   	ret    

c0006176 <f_stat>:
c0006176:	57                   	push   edi
c0006177:	31 c9                	xor    ecx,ecx
c0006179:	56                   	push   esi
c000617a:	53                   	push   ebx
c000617b:	83 ec 50             	sub    esp,0x50
c000617e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006182:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006186:	8d 44 24 60          	lea    eax,[esp+0x60]
c000618a:	e8 50 c5 ff ff       	call   c00026df <mount_volume>
c000618f:	89 c3                	mov    ebx,eax
c0006191:	85 c0                	test   eax,eax
c0006193:	75 67                	jne    c00061fc <f_stat+0x86>
c0006195:	83 ec 0c             	sub    esp,0xc
c0006198:	bb 11 00 00 00       	mov    ebx,0x11
c000619d:	68 60 04 00 00       	push   0x460
c00061a2:	e8 db 22 00 00       	call   c0008482 <ff_memalloc>
c00061a7:	83 c4 10             	add    esp,0x10
c00061aa:	89 c6                	mov    esi,eax
c00061ac:	85 c0                	test   eax,eax
c00061ae:	74 4c                	je     c00061fc <f_stat+0x86>
c00061b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061c0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061c4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061c8:	e8 88 ec ff ff       	call   c0004e55 <follow_path>
c00061cd:	89 c3                	mov    ebx,eax
c00061cf:	85 c0                	test   eax,eax
c00061d1:	75 1d                	jne    c00061f0 <f_stat+0x7a>
c00061d3:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061d8:	78 11                	js     c00061eb <f_stat+0x75>
c00061da:	85 ff                	test   edi,edi
c00061dc:	74 12                	je     c00061f0 <f_stat+0x7a>
c00061de:	89 fa                	mov    edx,edi
c00061e0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061e4:	e8 e0 e9 ff ff       	call   c0004bc9 <get_fileinfo>
c00061e9:	eb 05                	jmp    c00061f0 <f_stat+0x7a>
c00061eb:	bb 06 00 00 00       	mov    ebx,0x6
c00061f0:	83 ec 0c             	sub    esp,0xc
c00061f3:	56                   	push   esi
c00061f4:	e8 9f 22 00 00       	call   c0008498 <ff_memfree>
c00061f9:	83 c4 10             	add    esp,0x10
c00061fc:	83 c4 50             	add    esp,0x50
c00061ff:	89 d8                	mov    eax,ebx
c0006201:	5b                   	pop    ebx
c0006202:	5e                   	pop    esi
c0006203:	5f                   	pop    edi
c0006204:	c3                   	ret    

c0006205 <f_getfree>:
c0006205:	55                   	push   ebp
c0006206:	31 c9                	xor    ecx,ecx
c0006208:	57                   	push   edi
c0006209:	56                   	push   esi
c000620a:	53                   	push   ebx
c000620b:	83 ec 5c             	sub    esp,0x5c
c000620e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006212:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006216:	e8 c4 c4 ff ff       	call   c00026df <mount_volume>
c000621b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000621f:	85 c0                	test   eax,eax
c0006221:	0f 85 9d 01 00 00    	jne    c00063c4 <f_getfree+0x1bf>
c0006227:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000622b:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000622f:	89 02                	mov    DWORD PTR [edx],eax
c0006231:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006234:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006237:	8d 71 fe             	lea    esi,[ecx-0x2]
c000623a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000623e:	39 f2                	cmp    edx,esi
c0006240:	77 0b                	ja     c000624d <f_getfree+0x48>
c0006242:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006246:	89 10                	mov    DWORD PTR [eax],edx
c0006248:	e9 77 01 00 00       	jmp    c00063c4 <f_getfree+0x1bf>
c000624d:	8a 10                	mov    dl,BYTE PTR [eax]
c000624f:	80 fa 01             	cmp    dl,0x1
c0006252:	75 3a                	jne    c000628e <f_getfree+0x89>
c0006254:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006258:	be 02 00 00 00       	mov    esi,0x2
c000625d:	31 db                	xor    ebx,ebx
c000625f:	89 f2                	mov    edx,esi
c0006261:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006265:	e8 4b cd ff ff       	call   c0002fb5 <get_fat>
c000626a:	83 f8 ff             	cmp    eax,0xffffffff
c000626d:	0f 84 28 01 00 00    	je     c000639b <f_getfree+0x196>
c0006273:	83 f8 01             	cmp    eax,0x1
c0006276:	0f 84 29 01 00 00    	je     c00063a5 <f_getfree+0x1a0>
c000627c:	83 d3 00             	adc    ebx,0x0
c000627f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006283:	46                   	inc    esi
c0006284:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006287:	77 d6                	ja     c000625f <f_getfree+0x5a>
c0006289:	e9 25 01 00 00       	jmp    c00063b3 <f_getfree+0x1ae>
c000628e:	80 fa 04             	cmp    dl,0x4
c0006291:	0f 85 88 00 00 00    	jne    c000631f <f_getfree+0x11a>
c0006297:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000629a:	31 ed                	xor    ebp,ebp
c000629c:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000629f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062a7:	31 db                	xor    ebx,ebx
c00062a9:	85 ed                	test   ebp,ebp
c00062ab:	75 3f                	jne    c00062ec <f_getfree+0xe7>
c00062ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062b1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062b5:	83 c0 01             	add    eax,0x1
c00062b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062bc:	83 d2 00             	adc    edx,0x0
c00062bf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062c3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062c7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062cf:	e8 59 c1 ff ff       	call   c000242d <move_window>
c00062d4:	85 c0                	test   eax,eax
c00062d6:	0f 85 d3 00 00 00    	jne    c00063af <f_getfree+0x1aa>
c00062dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062f0:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062f3:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062f7:	89 cf                	mov    edi,ecx
c00062f9:	85 f6                	test   esi,esi
c00062fb:	74 12                	je     c000630f <f_getfree+0x10a>
c00062fd:	88 c1                	mov    cl,al
c00062ff:	83 e1 01             	and    ecx,0x1
c0006302:	80 f9 01             	cmp    cl,0x1
c0006305:	83 d3 00             	adc    ebx,0x0
c0006308:	d0 e8                	shr    al,1
c000630a:	4e                   	dec    esi
c000630b:	39 fe                	cmp    esi,edi
c000630d:	75 ea                	jne    c00062f9 <f_getfree+0xf4>
c000630f:	45                   	inc    ebp
c0006310:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006316:	85 f6                	test   esi,esi
c0006318:	75 8f                	jne    c00062a9 <f_getfree+0xa4>
c000631a:	e9 94 00 00 00       	jmp    c00063b3 <f_getfree+0x1ae>
c000631f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006322:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006325:	31 f6                	xor    esi,esi
c0006327:	31 db                	xor    ebx,ebx
c0006329:	85 f6                	test   esi,esi
c000632b:	75 1b                	jne    c0006348 <f_getfree+0x143>
c000632d:	89 d7                	mov    edi,edx
c000632f:	89 cd                	mov    ebp,ecx
c0006331:	83 c7 01             	add    edi,0x1
c0006334:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006338:	83 d5 00             	adc    ebp,0x0
c000633b:	e8 ed c0 ff ff       	call   c000242d <move_window>
c0006340:	85 c0                	test   eax,eax
c0006342:	75 6b                	jne    c00063af <f_getfree+0x1aa>
c0006344:	89 fa                	mov    edx,edi
c0006346:	89 e9                	mov    ecx,ebp
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006350:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006354:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006357:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000635b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000635f:	75 11                	jne    c0006372 <f_getfree+0x16d>
c0006361:	e8 e9 b8 ff ff       	call   c0001c4f <ld_word>
c0006366:	66 83 f8 01          	cmp    ax,0x1
c000636a:	83 d3 00             	adc    ebx,0x0
c000636d:	83 c6 02             	add    esi,0x2
c0006370:	eb 13                	jmp    c0006385 <f_getfree+0x180>
c0006372:	e8 e5 b8 ff ff       	call   c0001c5c <ld_dword>
c0006377:	25 ff ff ff 0f       	and    eax,0xfffffff
c000637c:	83 f8 01             	cmp    eax,0x1
c000637f:	83 d3 00             	adc    ebx,0x0
c0006382:	83 c6 04             	add    esi,0x4
c0006385:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000638b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000638f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006393:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006397:	75 90                	jne    c0006329 <f_getfree+0x124>
c0006399:	eb 18                	jmp    c00063b3 <f_getfree+0x1ae>
c000639b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063a3:	eb 0e                	jmp    c00063b3 <f_getfree+0x1ae>
c00063a5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063ad:	eb 04                	jmp    c00063b3 <f_getfree+0x1ae>
c00063af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063b3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063b7:	89 18                	mov    DWORD PTR [eax],ebx
c00063b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063bd:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063c0:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063c8:	83 c4 5c             	add    esp,0x5c
c00063cb:	5b                   	pop    ebx
c00063cc:	5e                   	pop    esi
c00063cd:	5f                   	pop    edi
c00063ce:	5d                   	pop    ebp
c00063cf:	c3                   	ret    

c00063d0 <f_truncate>:
c00063d0:	56                   	push   esi
c00063d1:	53                   	push   ebx
c00063d2:	83 ec 14             	sub    esp,0x14
c00063d5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063d9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063dd:	89 d8                	mov    eax,ebx
c00063df:	e8 6e bf ff ff       	call   c0002352 <validate>
c00063e4:	89 c6                	mov    esi,eax
c00063e6:	85 c0                	test   eax,eax
c00063e8:	0f 85 d2 00 00 00    	jne    c00064c0 <f_truncate+0xf0>
c00063ee:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063f2:	85 f6                	test   esi,esi
c00063f4:	0f 85 c6 00 00 00    	jne    c00064c0 <f_truncate+0xf0>
c00063fa:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063fe:	0f 84 b7 00 00 00    	je     c00064bb <f_truncate+0xeb>
c0006404:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006407:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000640a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000640d:	89 d1                	mov    ecx,edx
c000640f:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006412:	0f 83 a8 00 00 00    	jae    c00064c0 <f_truncate+0xf0>
c0006418:	09 c2                	or     edx,eax
c000641a:	75 15                	jne    c0006431 <f_truncate+0x61>
c000641c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000641f:	31 c9                	xor    ecx,ecx
c0006421:	89 d8                	mov    eax,ebx
c0006423:	e8 7a d0 ff ff       	call   c00034a2 <remove_chain>
c0006428:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000642f:	eb 35                	jmp    c0006466 <f_truncate+0x96>
c0006431:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006434:	89 d8                	mov    eax,ebx
c0006436:	e8 7a cb ff ff       	call   c0002fb5 <get_fat>
c000643b:	89 c2                	mov    edx,eax
c000643d:	b8 01 00 00 00       	mov    eax,0x1
c0006442:	83 fa ff             	cmp    edx,0xffffffff
c0006445:	74 1f                	je     c0006466 <f_truncate+0x96>
c0006447:	b8 02 00 00 00       	mov    eax,0x2
c000644c:	83 fa 01             	cmp    edx,0x1
c000644f:	74 15                	je     c0006466 <f_truncate+0x96>
c0006451:	31 c0                	xor    eax,eax
c0006453:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006457:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000645a:	76 0a                	jbe    c0006466 <f_truncate+0x96>
c000645c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000645f:	89 d8                	mov    eax,ebx
c0006461:	e8 3c d0 ff ff       	call   c00034a2 <remove_chain>
c0006466:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006469:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000646c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000646f:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006472:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006475:	83 ca 40             	or     edx,0x40
c0006478:	85 c0                	test   eax,eax
c000647a:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000647d:	75 35                	jne    c00064b4 <f_truncate+0xe4>
c000647f:	84 d2                	test   dl,dl
c0006481:	79 3d                	jns    c00064c0 <f_truncate+0xf0>
c0006483:	83 ec 0c             	sub    esp,0xc
c0006486:	8d 43 50             	lea    eax,[ebx+0x50]
c0006489:	6a 01                	push   0x1
c000648b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000648e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006491:	50                   	push   eax
c0006492:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006496:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000649a:	50                   	push   eax
c000649b:	e8 7a b7 ff ff       	call   c0001c1a <disk_write>
c00064a0:	83 c4 20             	add    esp,0x20
c00064a3:	85 c0                	test   eax,eax
c00064a5:	75 08                	jne    c00064af <f_truncate+0xdf>
c00064a7:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064ab:	31 f6                	xor    esi,esi
c00064ad:	eb 11                	jmp    c00064c0 <f_truncate+0xf0>
c00064af:	b8 01 00 00 00       	mov    eax,0x1
c00064b4:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064b7:	89 c6                	mov    esi,eax
c00064b9:	eb 05                	jmp    c00064c0 <f_truncate+0xf0>
c00064bb:	be 07 00 00 00       	mov    esi,0x7
c00064c0:	89 f0                	mov    eax,esi
c00064c2:	83 c4 14             	add    esp,0x14
c00064c5:	5b                   	pop    ebx
c00064c6:	5e                   	pop    esi
c00064c7:	c3                   	ret    

c00064c8 <f_unlink>:
c00064c8:	56                   	push   esi
c00064c9:	b9 02 00 00 00       	mov    ecx,0x2
c00064ce:	53                   	push   ebx
c00064cf:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064d5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064d9:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064e0:	e8 fa c1 ff ff       	call   c00026df <mount_volume>
c00064e5:	85 c0                	test   eax,eax
c00064e7:	0f 85 55 01 00 00    	jne    c0006642 <f_unlink+0x17a>
c00064ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f1:	83 ec 0c             	sub    esp,0xc
c00064f4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064f8:	68 60 04 00 00       	push   0x460
c00064fd:	e8 80 1f 00 00       	call   c0008482 <ff_memalloc>
c0006502:	83 c4 10             	add    esp,0x10
c0006505:	89 c3                	mov    ebx,eax
c0006507:	b8 11 00 00 00       	mov    eax,0x11
c000650c:	85 db                	test   ebx,ebx
c000650e:	0f 84 2e 01 00 00    	je     c0006642 <f_unlink+0x17a>
c0006514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006518:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000651e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006521:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006524:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000652b:	8d 44 24 48          	lea    eax,[esp+0x48]
c000652f:	e8 21 e9 ff ff       	call   c0004e55 <follow_path>
c0006534:	85 c0                	test   eax,eax
c0006536:	0f 85 f2 00 00 00    	jne    c000662e <f_unlink+0x166>
c000653c:	b8 06 00 00 00       	mov    eax,0x6
c0006541:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006549:	0f 88 df 00 00 00    	js     c000662e <f_unlink+0x166>
c000654f:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006554:	74 0a                	je     c0006560 <f_unlink+0x98>
c0006556:	b8 07 00 00 00       	mov    eax,0x7
c000655b:	e9 ce 00 00 00       	jmp    c000662e <f_unlink+0x166>
c0006560:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006564:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006568:	8a 02                	mov    al,BYTE PTR [edx]
c000656a:	3c 04                	cmp    al,0x4
c000656c:	75 12                	jne    c0006580 <f_unlink+0xb8>
c000656e:	8d 42 10             	lea    eax,[edx+0x10]
c0006571:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006575:	e8 a1 e8 ff ff       	call   c0004e1b <init_alloc_info.isra.2>
c000657a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000657e:	eb 0e                	jmp    c000658e <f_unlink+0xc6>
c0006580:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006587:	e8 3e e8 ff ff       	call   c0004dca <ld_clust.isra.0>
c000658c:	89 c6                	mov    esi,eax
c000658e:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006593:	75 12                	jne    c00065a7 <f_unlink+0xdf>
c0006595:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006599:	e8 94 d6 ff ff       	call   c0003c32 <dir_remove>
c000659e:	85 c0                	test   eax,eax
c00065a0:	74 6c                	je     c000660e <f_unlink+0x146>
c00065a2:	e9 87 00 00 00       	jmp    c000662e <f_unlink+0x166>
c00065a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ab:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065b2:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065b9:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065bc:	75 21                	jne    c00065df <f_unlink+0x117>
c00065be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065c2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065c6:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065cd:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065d4:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065d8:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065df:	31 d2                	xor    edx,edx
c00065e1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065e8:	e8 be cb ff ff       	call   c00031ab <dir_sdi>
c00065ed:	85 c0                	test   eax,eax
c00065ef:	75 3d                	jne    c000662e <f_unlink+0x166>
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 bc d3 ff ff       	call   c00039bb <dir_read>
c00065ff:	85 c0                	test   eax,eax
c0006601:	0f 84 4f ff ff ff    	je     c0006556 <f_unlink+0x8e>
c0006607:	83 f8 04             	cmp    eax,0x4
c000660a:	75 22                	jne    c000662e <f_unlink+0x166>
c000660c:	eb 87                	jmp    c0006595 <f_unlink+0xcd>
c000660e:	85 f6                	test   esi,esi
c0006610:	75 0b                	jne    c000661d <f_unlink+0x155>
c0006612:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006616:	e8 3d df ff ff       	call   c0004558 <sync_fs>
c000661b:	eb 11                	jmp    c000662e <f_unlink+0x166>
c000661d:	31 c9                	xor    ecx,ecx
c000661f:	89 f2                	mov    edx,esi
c0006621:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006625:	e8 78 ce ff ff       	call   c00034a2 <remove_chain>
c000662a:	85 c0                	test   eax,eax
c000662c:	74 e4                	je     c0006612 <f_unlink+0x14a>
c000662e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006632:	83 ec 0c             	sub    esp,0xc
c0006635:	53                   	push   ebx
c0006636:	e8 5d 1e 00 00       	call   c0008498 <ff_memfree>
c000663b:	83 c4 10             	add    esp,0x10
c000663e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006642:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006648:	5b                   	pop    ebx
c0006649:	5e                   	pop    esi
c000664a:	c3                   	ret    

c000664b <f_mkdir>:
c000664b:	57                   	push   edi
c000664c:	b9 02 00 00 00       	mov    ecx,0x2
c0006651:	56                   	push   esi
c0006652:	53                   	push   ebx
c0006653:	83 c4 80             	add    esp,0xffffff80
c0006656:	8d 54 24 08          	lea    edx,[esp+0x8]
c000665a:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006661:	e8 79 c0 ff ff       	call   c00026df <mount_volume>
c0006666:	89 c3                	mov    ebx,eax
c0006668:	85 c0                	test   eax,eax
c000666a:	0f 85 fe 01 00 00    	jne    c000686e <f_mkdir+0x223>
c0006670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006674:	bb 11 00 00 00       	mov    ebx,0x11
c0006679:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000667d:	83 ec 0c             	sub    esp,0xc
c0006680:	68 60 04 00 00       	push   0x460
c0006685:	e8 f8 1d 00 00       	call   c0008482 <ff_memalloc>
c000668a:	83 c4 10             	add    esp,0x10
c000668d:	89 c7                	mov    edi,eax
c000668f:	85 c0                	test   eax,eax
c0006691:	0f 84 d7 01 00 00    	je     c000686e <f_mkdir+0x223>
c0006697:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669b:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066a1:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a7:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066ae:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066b2:	e8 9e e7 ff ff       	call   c0004e55 <follow_path>
c00066b7:	89 c3                	mov    ebx,eax
c00066b9:	85 c0                	test   eax,eax
c00066bb:	74 3e                	je     c00066fb <f_mkdir+0xb0>
c00066bd:	83 f8 04             	cmp    eax,0x4
c00066c0:	75 3e                	jne    c0006700 <f_mkdir+0xb5>
c00066c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c6:	31 d2                	xor    edx,edx
c00066c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066d0:	e8 ce cb ff ff       	call   c00032a3 <create_chain>
c00066d5:	89 c6                	mov    esi,eax
c00066d7:	85 c0                	test   eax,eax
c00066d9:	74 0c                	je     c00066e7 <f_mkdir+0x9c>
c00066db:	bb 02 00 00 00       	mov    ebx,0x2
c00066e0:	83 f8 01             	cmp    eax,0x1
c00066e3:	74 07                	je     c00066ec <f_mkdir+0xa1>
c00066e5:	eb 2a                	jmp    c0006711 <f_mkdir+0xc6>
c00066e7:	bb 07 00 00 00       	mov    ebx,0x7
c00066ec:	31 c9                	xor    ecx,ecx
c00066ee:	89 f2                	mov    edx,esi
c00066f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066f4:	e8 a9 cd ff ff       	call   c00034a2 <remove_chain>
c00066f9:	eb 05                	jmp    c0006700 <f_mkdir+0xb5>
c00066fb:	bb 08 00 00 00       	mov    ebx,0x8
c0006700:	83 ec 0c             	sub    esp,0xc
c0006703:	57                   	push   edi
c0006704:	e8 8f 1d 00 00       	call   c0008498 <ff_memfree>
c0006709:	83 c4 10             	add    esp,0x10
c000670c:	e9 5d 01 00 00       	jmp    c000686e <f_mkdir+0x223>
c0006711:	bb 01 00 00 00       	mov    ebx,0x1
c0006716:	83 f8 ff             	cmp    eax,0xffffffff
c0006719:	74 d1                	je     c00066ec <f_mkdir+0xa1>
c000671b:	89 f2                	mov    edx,esi
c000671d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006721:	e8 c4 ce ff ff       	call   c00035ea <dir_clear>
c0006726:	89 c3                	mov    ebx,eax
c0006728:	85 c0                	test   eax,eax
c000672a:	75 c0                	jne    c00066ec <f_mkdir+0xa1>
c000672c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006730:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006733:	74 69                	je     c000679e <f_mkdir+0x153>
c0006735:	b9 0b 00 00 00       	mov    ecx,0xb
c000673a:	83 c0 54             	add    eax,0x54
c000673d:	ba 20 00 00 00       	mov    edx,0x20
c0006742:	e8 9c b5 ff ff       	call   c0001ce3 <mem_set>
c0006747:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006750:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006754:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006758:	83 c0 6a             	add    eax,0x6a
c000675b:	e8 65 b5 ff ff       	call   c0001cc5 <st_dword>
c0006760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006764:	89 f1                	mov    ecx,esi
c0006766:	8d 50 54             	lea    edx,[eax+0x54]
c0006769:	e8 85 e6 ff ff       	call   c0004df3 <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	b9 20 00 00 00       	mov    ecx,0x20
c0006777:	8d 50 54             	lea    edx,[eax+0x54]
c000677a:	83 c0 74             	add    eax,0x74
c000677d:	e8 4c b5 ff ff       	call   c0001cce <mem_cpy>
c0006782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006786:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000678a:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000678e:	8d 50 74             	lea    edx,[eax+0x74]
c0006791:	e8 5d e6 ff ff       	call   c0004df3 <st_clust.isra.1>
c0006796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000679a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000679e:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067a2:	e8 2f db ff ff       	call   c00042d6 <dir_register>
c00067a7:	89 c3                	mov    ebx,eax
c00067a9:	85 c0                	test   eax,eax
c00067ab:	0f 85 3b ff ff ff    	jne    c00066ec <f_mkdir+0xa1>
c00067b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067b8:	75 74                	jne    c000682e <f_mkdir+0x1e3>
c00067ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067bd:	ba 00 00 21 50       	mov    edx,0x50210000
c00067c2:	83 c0 0c             	add    eax,0xc
c00067c5:	e8 fb b4 ff ff       	call   c0001cc5 <st_dword>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	89 f2                	mov    edx,esi
c00067d0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d3:	83 c0 34             	add    eax,0x34
c00067d6:	e8 ea b4 ff ff       	call   c0001cc5 <st_dword>
c00067db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067df:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e6:	c1 e2 09             	shl    edx,0x9
c00067e9:	83 c0 38             	add    eax,0x38
c00067ec:	e8 d4 b4 ff ff       	call   c0001cc5 <st_dword>
c00067f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f5:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067fc:	c1 e2 09             	shl    edx,0x9
c00067ff:	83 c0 28             	add    eax,0x28
c0006802:	e8 be b4 ff ff       	call   c0001cc5 <st_dword>
c0006807:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000680b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000680e:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006812:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006815:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006819:	8d 44 24 34          	lea    eax,[esp+0x34]
c000681d:	e8 8b d3 ff ff       	call   c0003bad <store_xdir>
c0006822:	89 c3                	mov    ebx,eax
c0006824:	85 c0                	test   eax,eax
c0006826:	0f 85 d4 fe ff ff    	jne    c0006700 <f_mkdir+0xb5>
c000682c:	eb 30                	jmp    c000685e <f_mkdir+0x213>
c000682e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006832:	ba 00 00 21 50       	mov    edx,0x50210000
c0006837:	83 c0 16             	add    eax,0x16
c000683a:	e8 86 b4 ff ff       	call   c0001cc5 <st_dword>
c000683f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006843:	89 f1                	mov    ecx,esi
c0006845:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006849:	e8 a5 e5 ff ff       	call   c0004df3 <st_clust.isra.1>
c000684e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006852:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000685a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000685e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006862:	e8 f1 dc ff ff       	call   c0004558 <sync_fs>
c0006867:	89 c3                	mov    ebx,eax
c0006869:	e9 92 fe ff ff       	jmp    c0006700 <f_mkdir+0xb5>
c000686e:	83 ec 80             	sub    esp,0xffffff80
c0006871:	89 d8                	mov    eax,ebx
c0006873:	5b                   	pop    ebx
c0006874:	5e                   	pop    esi
c0006875:	5f                   	pop    edi
c0006876:	c3                   	ret    

c0006877 <f_rename>:
c0006877:	55                   	push   ebp
c0006878:	57                   	push   edi
c0006879:	56                   	push   esi
c000687a:	53                   	push   ebx
c000687b:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006881:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006888:	e8 a4 b9 ff ff       	call   c0002231 <get_ldnumber>
c000688d:	b9 02 00 00 00       	mov    ecx,0x2
c0006892:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006896:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000689d:	e8 3d be ff ff       	call   c00026df <mount_volume>
c00068a2:	85 c0                	test   eax,eax
c00068a4:	0f 85 b5 02 00 00    	jne    c0006b5f <f_rename+0x2e8>
c00068aa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ae:	83 ec 0c             	sub    esp,0xc
c00068b1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068b5:	68 60 04 00 00       	push   0x460
c00068ba:	e8 c3 1b 00 00       	call   c0008482 <ff_memalloc>
c00068bf:	83 c4 10             	add    esp,0x10
c00068c2:	89 c3                	mov    ebx,eax
c00068c4:	b8 11 00 00 00       	mov    eax,0x11
c00068c9:	85 db                	test   ebx,ebx
c00068cb:	0f 84 8e 02 00 00    	je     c0006b5f <f_rename+0x2e8>
c00068d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068e1:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068e8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068ec:	e8 64 e5 ff ff       	call   c0004e55 <follow_path>
c00068f1:	85 c0                	test   eax,eax
c00068f3:	0f 85 52 02 00 00    	jne    c0006b4b <f_rename+0x2d4>
c00068f9:	b8 06 00 00 00       	mov    eax,0x6
c00068fe:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006906:	0f 85 3f 02 00 00    	jne    c0006b4b <f_rename+0x2d4>
c000690c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006910:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006913:	0f 85 05 01 00 00    	jne    c0006a1e <f_rename+0x1a7>
c0006919:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000691c:	b9 40 00 00 00       	mov    ecx,0x40
c0006921:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006925:	e8 a4 b3 ff ff       	call   c0001cce <mem_cpy>
c000692a:	b9 4c 00 00 00       	mov    ecx,0x4c
c000692f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006933:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000693a:	e8 8f b3 ff ff       	call   c0001cce <mem_cpy>
c000693f:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006946:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694d:	e8 03 e5 ff ff       	call   c0004e55 <follow_path>
c0006952:	85 c0                	test   eax,eax
c0006954:	75 29                	jne    c000697f <f_rename+0x108>
c0006956:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000695a:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006961:	74 0a                	je     c000696d <f_rename+0xf6>
c0006963:	b8 08 00 00 00       	mov    eax,0x8
c0006968:	e9 de 01 00 00       	jmp    c0006b4b <f_rename+0x2d4>
c000696d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006974:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000697b:	75 e6                	jne    c0006963 <f_rename+0xec>
c000697d:	eb 09                	jmp    c0006988 <f_rename+0x111>
c000697f:	83 f8 04             	cmp    eax,0x4
c0006982:	0f 85 c3 01 00 00    	jne    c0006b4b <f_rename+0x2d4>
c0006988:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000698f:	e8 42 d9 ff ff       	call   c00042d6 <dir_register>
c0006994:	85 c0                	test   eax,eax
c0006996:	0f 85 af 01 00 00    	jne    c0006b4b <f_rename+0x2d4>
c000699c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069a3:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069a6:	89 c5                	mov    ebp,eax
c00069a8:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069ab:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069af:	8d 46 24             	lea    eax,[esi+0x24]
c00069b2:	e8 98 b2 ff ff       	call   c0001c4f <ld_word>
c00069b7:	b9 40 00 00 00       	mov    ecx,0x40
c00069bc:	89 c7                	mov    edi,eax
c00069be:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069c2:	89 f0                	mov    eax,esi
c00069c4:	e8 05 b3 ff ff       	call   c0001cce <mem_cpy>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	89 e9                	mov    ecx,ebp
c00069cf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069d2:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069e0:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069e3:	0f b7 d7             	movzx  edx,di
c00069e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e9:	83 c0 24             	add    eax,0x24
c00069ec:	e8 d0 b2 ff ff       	call   c0001cc1 <st_word>
c00069f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069f5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f8:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069fb:	a8 10                	test   al,0x10
c00069fd:	75 06                	jne    c0006a05 <f_rename+0x18e>
c00069ff:	83 c8 20             	or     eax,0x20
c0006a02:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a05:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a0c:	e8 9c d1 ff ff       	call   c0003bad <store_xdir>
c0006a11:	85 c0                	test   eax,eax
c0006a13:	0f 84 1c 01 00 00    	je     c0006b35 <f_rename+0x2be>
c0006a19:	e9 2d 01 00 00       	jmp    c0006b4b <f_rename+0x2d4>
c0006a1e:	b9 20 00 00 00       	mov    ecx,0x20
c0006a23:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a2e:	e8 9b b2 ff ff       	call   c0001cce <mem_cpy>
c0006a33:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a38:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a3c:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a43:	e8 86 b2 ff ff       	call   c0001cce <mem_cpy>
c0006a48:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a4f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a56:	e8 fa e3 ff ff       	call   c0004e55 <follow_path>
c0006a5b:	85 c0                	test   eax,eax
c0006a5d:	75 27                	jne    c0006a86 <f_rename+0x20f>
c0006a5f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a63:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a6a:	0f 85 f3 fe ff ff    	jne    c0006963 <f_rename+0xec>
c0006a70:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a77:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a7e:	0f 85 df fe ff ff    	jne    c0006963 <f_rename+0xec>
c0006a84:	eb 09                	jmp    c0006a8f <f_rename+0x218>
c0006a86:	83 f8 04             	cmp    eax,0x4
c0006a89:	0f 85 bc 00 00 00    	jne    c0006b4b <f_rename+0x2d4>
c0006a8f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a96:	e8 3b d8 ff ff       	call   c00042d6 <dir_register>
c0006a9b:	85 c0                	test   eax,eax
c0006a9d:	0f 85 a8 00 00 00    	jne    c0006b4b <f_rename+0x2d4>
c0006aa3:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006aaa:	b9 13 00 00 00       	mov    ecx,0x13
c0006aaf:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ab2:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ab6:	e8 13 b2 ff ff       	call   c0001cce <mem_cpy>
c0006abb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006abf:	a8 10                	test   al,0x10
c0006ac1:	75 03                	jne    c0006ac6 <f_rename+0x24f>
c0006ac3:	83 c8 20             	or     eax,0x20
c0006ac6:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006ac9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006acd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ad1:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ad5:	74 5e                	je     c0006b35 <f_rename+0x2be>
c0006ad7:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ade:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ae2:	74 51                	je     c0006b35 <f_rename+0x2be>
c0006ae4:	89 f2                	mov    edx,esi
c0006ae6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006aea:	8a 07                	mov    al,BYTE PTR [edi]
c0006aec:	e8 d9 e2 ff ff       	call   c0004dca <ld_clust.isra.0>
c0006af1:	89 c2                	mov    edx,eax
c0006af3:	89 f8                	mov    eax,edi
c0006af5:	e8 ee b3 ff ff       	call   c0001ee8 <clst2sect>
c0006afa:	89 c6                	mov    esi,eax
c0006afc:	89 d1                	mov    ecx,edx
c0006afe:	b8 02 00 00 00       	mov    eax,0x2
c0006b03:	09 f2                	or     edx,esi
c0006b05:	74 44                	je     c0006b4b <f_rename+0x2d4>
c0006b07:	89 f2                	mov    edx,esi
c0006b09:	89 f8                	mov    eax,edi
c0006b0b:	e8 1d b9 ff ff       	call   c000242d <move_window>
c0006b10:	85 c0                	test   eax,eax
c0006b12:	75 37                	jne    c0006b4b <f_rename+0x2d4>
c0006b14:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b18:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b1c:	75 17                	jne    c0006b35 <f_rename+0x2be>
c0006b1e:	8d 50 74             	lea    edx,[eax+0x74]
c0006b21:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b28:	e8 c6 e2 ff ff       	call   c0004df3 <st_clust.isra.1>
c0006b2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b31:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b35:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b39:	e8 f4 d0 ff ff       	call   c0003c32 <dir_remove>
c0006b3e:	85 c0                	test   eax,eax
c0006b40:	75 09                	jne    c0006b4b <f_rename+0x2d4>
c0006b42:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b46:	e8 0d da ff ff       	call   c0004558 <sync_fs>
c0006b4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b4f:	83 ec 0c             	sub    esp,0xc
c0006b52:	53                   	push   ebx
c0006b53:	e8 40 19 00 00       	call   c0008498 <ff_memfree>
c0006b58:	83 c4 10             	add    esp,0x10
c0006b5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b5f:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b65:	5b                   	pop    ebx
c0006b66:	5e                   	pop    esi
c0006b67:	5f                   	pop    edi
c0006b68:	5d                   	pop    ebp
c0006b69:	c3                   	ret    

c0006b6a <f_chmod>:
c0006b6a:	57                   	push   edi
c0006b6b:	b9 02 00 00 00       	mov    ecx,0x2
c0006b70:	56                   	push   esi
c0006b71:	53                   	push   ebx
c0006b72:	83 ec 60             	sub    esp,0x60
c0006b75:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b79:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b7d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b85:	e8 55 bb ff ff       	call   c00026df <mount_volume>
c0006b8a:	85 c0                	test   eax,eax
c0006b8c:	0f 85 af 00 00 00    	jne    c0006c41 <f_chmod+0xd7>
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	83 ec 0c             	sub    esp,0xc
c0006b99:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b9d:	68 60 04 00 00       	push   0x460
c0006ba2:	e8 db 18 00 00       	call   c0008482 <ff_memalloc>
c0006ba7:	83 c4 10             	add    esp,0x10
c0006baa:	89 c6                	mov    esi,eax
c0006bac:	b8 11 00 00 00       	mov    eax,0x11
c0006bb1:	85 f6                	test   esi,esi
c0006bb3:	0f 84 88 00 00 00    	je     c0006c41 <f_chmod+0xd7>
c0006bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bbd:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bc3:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bc6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bc9:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bcd:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bd1:	e8 7f e2 ff ff       	call   c0004e55 <follow_path>
c0006bd6:	85 c0                	test   eax,eax
c0006bd8:	75 53                	jne    c0006c2d <f_chmod+0xc3>
c0006bda:	b8 06 00 00 00       	mov    eax,0x6
c0006bdf:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006be4:	75 47                	jne    c0006c2d <f_chmod+0xc3>
c0006be6:	89 f9                	mov    ecx,edi
c0006be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bec:	83 e1 27             	and    ecx,0x27
c0006bef:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bf2:	75 1d                	jne    c0006c11 <f_chmod+0xa7>
c0006bf4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bf7:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bfa:	21 cb                	and    ebx,ecx
c0006bfc:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bff:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c06:	e8 a2 cf ff ff       	call   c0003bad <store_xdir>
c0006c0b:	85 c0                	test   eax,eax
c0006c0d:	75 1e                	jne    c0006c2d <f_chmod+0xc3>
c0006c0f:	eb 13                	jmp    c0006c24 <f_chmod+0xba>
c0006c11:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c15:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c18:	21 cb                	and    ebx,ecx
c0006c1a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c1d:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c20:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c28:	e8 2b d9 ff ff       	call   c0004558 <sync_fs>
c0006c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c31:	83 ec 0c             	sub    esp,0xc
c0006c34:	56                   	push   esi
c0006c35:	e8 5e 18 00 00       	call   c0008498 <ff_memfree>
c0006c3a:	83 c4 10             	add    esp,0x10
c0006c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c41:	83 c4 60             	add    esp,0x60
c0006c44:	5b                   	pop    ebx
c0006c45:	5e                   	pop    esi
c0006c46:	5f                   	pop    edi
c0006c47:	c3                   	ret    

c0006c48 <f_utime>:
c0006c48:	56                   	push   esi
c0006c49:	b9 02 00 00 00       	mov    ecx,0x2
c0006c4e:	53                   	push   ebx
c0006c4f:	83 ec 64             	sub    esp,0x64
c0006c52:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c56:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c5a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c5e:	e8 7c ba ff ff       	call   c00026df <mount_volume>
c0006c63:	85 c0                	test   eax,eax
c0006c65:	0f 85 b5 00 00 00    	jne    c0006d20 <f_utime+0xd8>
c0006c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6f:	83 ec 0c             	sub    esp,0xc
c0006c72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c76:	68 60 04 00 00       	push   0x460
c0006c7b:	e8 02 18 00 00       	call   c0008482 <ff_memalloc>
c0006c80:	83 c4 10             	add    esp,0x10
c0006c83:	89 c3                	mov    ebx,eax
c0006c85:	b8 11 00 00 00       	mov    eax,0x11
c0006c8a:	85 db                	test   ebx,ebx
c0006c8c:	0f 84 8e 00 00 00    	je     c0006d20 <f_utime+0xd8>
c0006c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c96:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c9c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c9f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ca2:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ca6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006caa:	e8 a6 e1 ff ff       	call   c0004e55 <follow_path>
c0006caf:	85 c0                	test   eax,eax
c0006cb1:	75 59                	jne    c0006d0c <f_utime+0xc4>
c0006cb3:	b8 06 00 00 00       	mov    eax,0x6
c0006cb8:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cbd:	75 4d                	jne    c0006d0c <f_utime+0xc4>
c0006cbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cc3:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cc7:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ccb:	c1 e2 10             	shl    edx,0x10
c0006cce:	09 ca                	or     edx,ecx
c0006cd0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cd3:	75 1a                	jne    c0006cef <f_utime+0xa7>
c0006cd5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cd8:	83 c0 0c             	add    eax,0xc
c0006cdb:	e8 e5 af ff ff       	call   c0001cc5 <st_dword>
c0006ce0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ce4:	e8 c4 ce ff ff       	call   c0003bad <store_xdir>
c0006ce9:	85 c0                	test   eax,eax
c0006ceb:	75 1f                	jne    c0006d0c <f_utime+0xc4>
c0006ced:	eb 14                	jmp    c0006d03 <f_utime+0xbb>
c0006cef:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cf3:	83 c0 16             	add    eax,0x16
c0006cf6:	e8 ca af ff ff       	call   c0001cc5 <st_dword>
c0006cfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d07:	e8 4c d8 ff ff       	call   c0004558 <sync_fs>
c0006d0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d10:	83 ec 0c             	sub    esp,0xc
c0006d13:	53                   	push   ebx
c0006d14:	e8 7f 17 00 00       	call   c0008498 <ff_memfree>
c0006d19:	83 c4 10             	add    esp,0x10
c0006d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d20:	83 c4 64             	add    esp,0x64
c0006d23:	5b                   	pop    ebx
c0006d24:	5e                   	pop    esi
c0006d25:	c3                   	ret    

c0006d26 <f_getlabel>:
c0006d26:	55                   	push   ebp
c0006d27:	31 c9                	xor    ecx,ecx
c0006d29:	57                   	push   edi
c0006d2a:	56                   	push   esi
c0006d2b:	53                   	push   ebx
c0006d2c:	83 ec 6c             	sub    esp,0x6c
c0006d2f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 a0 b9 ff ff       	call   c00026df <mount_volume>
c0006d3f:	89 c6                	mov    esi,eax
c0006d41:	85 c0                	test   eax,eax
c0006d43:	0f 85 c1 01 00 00    	jne    c0006f0a <f_getlabel+0x1e4>
c0006d49:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d51:	0f 84 5f 01 00 00    	je     c0006eb6 <f_getlabel+0x190>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	31 d2                	xor    edx,edx
c0006d5d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d61:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d69:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d6d:	e8 39 c4 ff ff       	call   c00031ab <dir_sdi>
c0006d72:	85 c0                	test   eax,eax
c0006d74:	0f 85 2d 01 00 00    	jne    c0006ea7 <f_getlabel+0x181>
c0006d7a:	ba 01 00 00 00       	mov    edx,0x1
c0006d7f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d83:	e8 33 cc ff ff       	call   c00039bb <dir_read>
c0006d88:	85 c0                	test   eax,eax
c0006d8a:	0f 85 17 01 00 00    	jne    c0006ea7 <f_getlabel+0x181>
c0006d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d94:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d97:	74 09                	je     c0006da2 <f_getlabel+0x7c>
c0006d99:	31 db                	xor    ebx,ebx
c0006d9b:	31 c9                	xor    ecx,ecx
c0006d9d:	e9 c8 00 00 00       	jmp    c0006e6a <f_getlabel+0x144>
c0006da2:	31 ed                	xor    ebp,ebp
c0006da4:	31 db                	xor    ebx,ebx
c0006da6:	31 ff                	xor    edi,edi
c0006da8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dac:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006db0:	39 fa                	cmp    edx,edi
c0006db2:	76 4b                	jbe    c0006dff <f_getlabel+0xd9>
c0006db4:	47                   	inc    edi
c0006db5:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006db8:	01 d0                	add    eax,edx
c0006dba:	e8 90 ae ff ff       	call   c0001c4f <ld_word>
c0006dbf:	66 85 ed             	test   bp,bp
c0006dc2:	75 0d                	jne    c0006dd1 <f_getlabel+0xab>
c0006dc4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dca:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dcf:	76 28                	jbe    c0006df9 <f_getlabel+0xd3>
c0006dd1:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dd8:	89 e9                	mov    ecx,ebp
c0006dda:	01 da                	add    edx,ebx
c0006ddc:	c1 e1 10             	shl    ecx,0x10
c0006ddf:	0f b7 c0             	movzx  eax,ax
c0006de2:	09 c8                	or     eax,ecx
c0006de4:	b9 04 00 00 00       	mov    ecx,0x4
c0006de9:	e8 01 b0 ff ff       	call   c0001def <put_utf>
c0006dee:	84 c0                	test   al,al
c0006df0:	74 0b                	je     c0006dfd <f_getlabel+0xd7>
c0006df2:	0f b6 c0             	movzx  eax,al
c0006df5:	01 c3                	add    ebx,eax
c0006df7:	31 c0                	xor    eax,eax
c0006df9:	89 c5                	mov    ebp,eax
c0006dfb:	eb ab                	jmp    c0006da8 <f_getlabel+0x82>
c0006dfd:	31 db                	xor    ebx,ebx
c0006dff:	66 85 ed             	test   bp,bp
c0006e02:	74 02                	je     c0006e06 <f_getlabel+0xe0>
c0006e04:	31 db                	xor    ebx,ebx
c0006e06:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e0d:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e11:	e9 a0 00 00 00       	jmp    c0006eb6 <f_getlabel+0x190>
c0006e16:	83 ff 0b             	cmp    edi,0xb
c0006e19:	74 11                	je     c0006e2c <f_getlabel+0x106>
c0006e1b:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e24:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e27:	c1 e0 08             	shl    eax,0x8
c0006e2a:	09 c2                	or     edx,eax
c0006e2c:	0f b7 d2             	movzx  edx,dx
c0006e2f:	50                   	push   eax
c0006e30:	50                   	push   eax
c0006e31:	68 b5 01 00 00       	push   0x1b5
c0006e36:	52                   	push   edx
c0006e37:	e8 03 17 00 00       	call   c000853f <ff_oem2uni>
c0006e3c:	83 c4 10             	add    esp,0x10
c0006e3f:	66 85 c0             	test   ax,ax
c0006e42:	74 46                	je     c0006e8a <f_getlabel+0x164>
c0006e44:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e4b:	0f b7 c0             	movzx  eax,ax
c0006e4e:	01 da                	add    edx,ebx
c0006e50:	b9 04 00 00 00       	mov    ecx,0x4
c0006e55:	e8 95 af ff ff       	call   c0001def <put_utf>
c0006e5a:	84 c0                	test   al,al
c0006e5c:	74 2c                	je     c0006e8a <f_getlabel+0x164>
c0006e5e:	0f b6 c0             	movzx  eax,al
c0006e61:	01 c3                	add    ebx,eax
c0006e63:	83 ff 0b             	cmp    edi,0xb
c0006e66:	74 24                	je     c0006e8c <f_getlabel+0x166>
c0006e68:	89 f9                	mov    ecx,edi
c0006e6a:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e6e:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e71:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e76:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e7f:	e8 9f ae ff ff       	call   c0001d23 <dbc_1st>
c0006e84:	85 c0                	test   eax,eax
c0006e86:	74 a4                	je     c0006e2c <f_getlabel+0x106>
c0006e88:	eb 8c                	jmp    c0006e16 <f_getlabel+0xf0>
c0006e8a:	31 db                	xor    ebx,ebx
c0006e8c:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e93:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e96:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e9d:	74 17                	je     c0006eb6 <f_getlabel+0x190>
c0006e9f:	4b                   	dec    ebx
c0006ea0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006ea3:	74 ee                	je     c0006e93 <f_getlabel+0x16d>
c0006ea5:	eb 0f                	jmp    c0006eb6 <f_getlabel+0x190>
c0006ea7:	83 f8 04             	cmp    eax,0x4
c0006eaa:	75 5c                	jne    c0006f08 <f_getlabel+0x1e2>
c0006eac:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006eb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006eb6:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ebe:	74 4a                	je     c0006f0a <f_getlabel+0x1e4>
c0006ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ec4:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ec7:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006eca:	e8 5e b5 ff ff       	call   c000242d <move_window>
c0006ecf:	89 c6                	mov    esi,eax
c0006ed1:	85 c0                	test   eax,eax
c0006ed3:	75 35                	jne    c0006f0a <f_getlabel+0x1e4>
c0006ed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ed9:	b8 43 00 00 00       	mov    eax,0x43
c0006ede:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ee0:	80 f9 03             	cmp    cl,0x3
c0006ee3:	74 0f                	je     c0006ef4 <f_getlabel+0x1ce>
c0006ee5:	31 c0                	xor    eax,eax
c0006ee7:	80 f9 04             	cmp    cl,0x4
c0006eea:	0f 94 c0             	sete   al
c0006eed:	48                   	dec    eax
c0006eee:	83 e0 c3             	and    eax,0xffffffc3
c0006ef1:	83 c0 64             	add    eax,0x64
c0006ef4:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ef8:	e8 5f ad ff ff       	call   c0001c5c <ld_dword>
c0006efd:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f04:	89 07                	mov    DWORD PTR [edi],eax
c0006f06:	eb 02                	jmp    c0006f0a <f_getlabel+0x1e4>
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	83 c4 6c             	add    esp,0x6c
c0006f0d:	89 f0                	mov    eax,esi
c0006f0f:	5b                   	pop    ebx
c0006f10:	5e                   	pop    esi
c0006f11:	5f                   	pop    edi
c0006f12:	5d                   	pop    ebp
c0006f13:	c3                   	ret    

c0006f14 <f_setlabel>:
c0006f14:	56                   	push   esi
c0006f15:	b9 02 00 00 00       	mov    ecx,0x2
c0006f1a:	53                   	push   ebx
c0006f1b:	83 ec 74             	sub    esp,0x74
c0006f1e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f22:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f29:	e8 b1 b7 ff ff       	call   c00026df <mount_volume>
c0006f2e:	89 c6                	mov    esi,eax
c0006f30:	85 c0                	test   eax,eax
c0006f32:	0f 85 41 02 00 00    	jne    c0007179 <f_setlabel+0x265>
c0006f38:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f3c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f3f:	0f 85 8e 00 00 00    	jne    c0006fd3 <f_setlabel+0xbf>
c0006f45:	b9 16 00 00 00       	mov    ecx,0x16
c0006f4a:	31 d2                	xor    edx,edx
c0006f4c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f50:	31 db                	xor    ebx,ebx
c0006f52:	e8 8c ad ff ff       	call   c0001ce3 <mem_set>
c0006f57:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f5e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f61:	0f 86 0a 01 00 00    	jbe    c0007071 <f_setlabel+0x15d>
c0006f67:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f6e:	e8 b6 ad ff ff       	call   c0001d29 <tchar2uni>
c0006f73:	89 c6                	mov    esi,eax
c0006f75:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f7a:	76 2a                	jbe    c0006fa6 <f_setlabel+0x92>
c0006f7c:	83 f8 ff             	cmp    eax,0xffffffff
c0006f7f:	74 05                	je     c0006f86 <f_setlabel+0x72>
c0006f81:	83 fb 09             	cmp    ebx,0x9
c0006f84:	76 0a                	jbe    c0006f90 <f_setlabel+0x7c>
c0006f86:	be 06 00 00 00       	mov    esi,0x6
c0006f8b:	e9 e9 01 00 00       	jmp    c0007179 <f_setlabel+0x265>
c0006f90:	89 c2                	mov    edx,eax
c0006f92:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f96:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f99:	c1 ea 10             	shr    edx,0x10
c0006f9c:	01 c8                	add    eax,ecx
c0006f9e:	43                   	inc    ebx
c0006f9f:	e8 1d ad ff ff       	call   c0001cc1 <st_word>
c0006fa4:	eb 04                	jmp    c0006faa <f_setlabel+0x96>
c0006fa6:	85 c0                	test   eax,eax
c0006fa8:	74 dc                	je     c0006f86 <f_setlabel+0x72>
c0006faa:	89 f2                	mov    edx,esi
c0006fac:	b8 f7 a0 02 c0       	mov    eax,0xc002a0f7
c0006fb1:	e8 5b ad ff ff       	call   c0001d11 <chk_chr>
c0006fb6:	85 c0                	test   eax,eax
c0006fb8:	75 cc                	jne    c0006f86 <f_setlabel+0x72>
c0006fba:	83 fb 0a             	cmp    ebx,0xa
c0006fbd:	77 c7                	ja     c0006f86 <f_setlabel+0x72>
c0006fbf:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fc2:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fc6:	0f b7 d6             	movzx  edx,si
c0006fc9:	01 c8                	add    eax,ecx
c0006fcb:	43                   	inc    ebx
c0006fcc:	e8 f0 ac ff ff       	call   c0001cc1 <st_word>
c0006fd1:	eb 84                	jmp    c0006f57 <f_setlabel+0x43>
c0006fd3:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fd8:	ba 20 00 00 00       	mov    edx,0x20
c0006fdd:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fe1:	31 db                	xor    ebx,ebx
c0006fe3:	e8 fb ac ff ff       	call   c0001ce3 <mem_set>
c0006fe8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fef:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ff2:	76 60                	jbe    c0007054 <f_setlabel+0x140>
c0006ff4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ffb:	e8 29 ad ff ff       	call   c0001d29 <tchar2uni>
c0007000:	3d ff ff 00 00       	cmp    eax,0xffff
c0007005:	0f 87 7b ff ff ff    	ja     c0006f86 <f_setlabel+0x72>
c000700b:	83 ec 0c             	sub    esp,0xc
c000700e:	50                   	push   eax
c000700f:	e8 97 15 00 00       	call   c00085ab <ff_wtoupper>
c0007014:	5a                   	pop    edx
c0007015:	59                   	pop    ecx
c0007016:	68 b5 01 00 00       	push   0x1b5
c000701b:	50                   	push   eax
c000701c:	e8 8e 14 00 00       	call   c00084af <ff_uni2oem>
c0007021:	83 c4 10             	add    esp,0x10
c0007024:	89 c6                	mov    esi,eax
c0007026:	66 85 c0             	test   ax,ax
c0007029:	0f 84 57 ff ff ff    	je     c0006f86 <f_setlabel+0x72>
c000702f:	0f b7 d0             	movzx  edx,ax
c0007032:	b8 f0 a0 02 c0       	mov    eax,0xc002a0f0
c0007037:	e8 d5 ac ff ff       	call   c0001d11 <chk_chr>
c000703c:	85 c0                	test   eax,eax
c000703e:	0f 85 42 ff ff ff    	jne    c0006f86 <f_setlabel+0x72>
c0007044:	66 81 fe ff 00       	cmp    si,0xff
c0007049:	0f 87 14 01 00 00    	ja     c0007163 <f_setlabel+0x24f>
c000704f:	e9 fa 00 00 00       	jmp    c000714e <f_setlabel+0x23a>
c0007054:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007059:	0f 84 27 ff ff ff    	je     c0006f86 <f_setlabel+0x72>
c000705f:	85 db                	test   ebx,ebx
c0007061:	74 0e                	je     c0007071 <f_setlabel+0x15d>
c0007063:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007066:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000706b:	75 04                	jne    c0007071 <f_setlabel+0x15d>
c000706d:	89 c3                	mov    ebx,eax
c000706f:	eb ee                	jmp    c000705f <f_setlabel+0x14b>
c0007071:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007075:	31 d2                	xor    edx,edx
c0007077:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000707b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007083:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007087:	e8 1f c1 ff ff       	call   c00031ab <dir_sdi>
c000708c:	89 c6                	mov    esi,eax
c000708e:	85 c0                	test   eax,eax
c0007090:	0f 85 e3 00 00 00    	jne    c0007179 <f_setlabel+0x265>
c0007096:	ba 01 00 00 00       	mov    edx,0x1
c000709b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000709f:	e8 17 c9 ff ff       	call   c00039bb <dir_read>
c00070a4:	85 c0                	test   eax,eax
c00070a6:	75 21                	jne    c00070c9 <f_setlabel+0x1b5>
c00070a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070ac:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070b0:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070b3:	74 5d                	je     c0007112 <f_setlabel+0x1fe>
c00070b5:	85 db                	test   ebx,ebx
c00070b7:	74 0b                	je     c00070c4 <f_setlabel+0x1b0>
c00070b9:	b9 0b 00 00 00       	mov    ecx,0xb
c00070be:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070c2:	eb 70                	jmp    c0007134 <f_setlabel+0x220>
c00070c4:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070c7:	eb 70                	jmp    c0007139 <f_setlabel+0x225>
c00070c9:	83 f8 04             	cmp    eax,0x4
c00070cc:	75 7c                	jne    c000714a <f_setlabel+0x236>
c00070ce:	85 db                	test   ebx,ebx
c00070d0:	0f 84 a3 00 00 00    	je     c0007179 <f_setlabel+0x265>
c00070d6:	ba 01 00 00 00       	mov    edx,0x1
c00070db:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070df:	e8 51 ca ff ff       	call   c0003b35 <dir_alloc>
c00070e4:	89 c6                	mov    esi,eax
c00070e6:	85 c0                	test   eax,eax
c00070e8:	0f 85 8b 00 00 00    	jne    c0007179 <f_setlabel+0x265>
c00070ee:	31 d2                	xor    edx,edx
c00070f0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f4:	b9 20 00 00 00       	mov    ecx,0x20
c00070f9:	e8 e5 ab ff ff       	call   c0001ce3 <mem_set>
c00070fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007102:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007105:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007109:	75 18                	jne    c0007123 <f_setlabel+0x20f>
c000710b:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000710e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007112:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007115:	b9 16 00 00 00       	mov    ecx,0x16
c000711a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711e:	83 c0 02             	add    eax,0x2
c0007121:	eb 9b                	jmp    c00070be <f_setlabel+0x1aa>
c0007123:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007127:	b9 0b 00 00 00       	mov    ecx,0xb
c000712c:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007130:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007134:	e8 95 ab ff ff       	call   c0001cce <mem_cpy>
c0007139:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000713d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007141:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007145:	e8 0e d4 ff ff       	call   c0004558 <sync_fs>
c000714a:	89 c6                	mov    esi,eax
c000714c:	eb 2b                	jmp    c0007179 <f_setlabel+0x265>
c000714e:	83 fb 0a             	cmp    ebx,0xa
c0007151:	0f 87 2f fe ff ff    	ja     c0006f86 <f_setlabel+0x72>
c0007157:	89 f0                	mov    eax,esi
c0007159:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000715d:	43                   	inc    ebx
c000715e:	e9 85 fe ff ff       	jmp    c0006fe8 <f_setlabel+0xd4>
c0007163:	83 fb 09             	cmp    ebx,0x9
c0007166:	0f 87 1a fe ff ff    	ja     c0006f86 <f_setlabel+0x72>
c000716c:	89 f0                	mov    eax,esi
c000716e:	66 c1 e8 08          	shr    ax,0x8
c0007172:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007176:	43                   	inc    ebx
c0007177:	eb de                	jmp    c0007157 <f_setlabel+0x243>
c0007179:	89 f0                	mov    eax,esi
c000717b:	83 c4 74             	add    esp,0x74
c000717e:	5b                   	pop    ebx
c000717f:	5e                   	pop    esi
c0007180:	c3                   	ret    

c0007181 <f_forward>:
c0007181:	55                   	push   ebp
c0007182:	57                   	push   edi
c0007183:	56                   	push   esi
c0007184:	53                   	push   ebx
c0007185:	83 ec 2c             	sub    esp,0x2c
c0007188:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000718c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007190:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007196:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000719a:	89 d8                	mov    eax,ebx
c000719c:	e8 b1 b1 ff ff       	call   c0002352 <validate>
c00071a1:	89 c5                	mov    ebp,eax
c00071a3:	85 c0                	test   eax,eax
c00071a5:	0f 85 aa 01 00 00    	jne    c0007355 <f_forward+0x1d4>
c00071ab:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071af:	85 ed                	test   ebp,ebp
c00071b1:	0f 85 9e 01 00 00    	jne    c0007355 <f_forward+0x1d4>
c00071b7:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071bb:	0f 84 8f 01 00 00    	je     c0007350 <f_forward+0x1cf>
c00071c1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071c4:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071c7:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071ca:	bf 00 00 00 00       	mov    edi,0x0
c00071cf:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071d2:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071d6:	89 d1                	mov    ecx,edx
c00071d8:	19 f9                	sbb    ecx,edi
c00071da:	0f 83 cf 00 00 00    	jae    c00072af <f_forward+0x12e>
c00071e0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071e4:	e9 c6 00 00 00       	jmp    c00072af <f_forward+0x12e>
c00071e9:	50                   	push   eax
c00071ea:	50                   	push   eax
c00071eb:	6a 00                	push   0x0
c00071ed:	6a 00                	push   0x0
c00071ef:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071f3:	83 c4 10             	add    esp,0x10
c00071f6:	85 c0                	test   eax,eax
c00071f8:	0f 84 57 01 00 00    	je     c0007355 <f_forward+0x1d4>
c00071fe:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007201:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007205:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007208:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000720c:	89 d7                	mov    edi,edx
c000720e:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007211:	89 c6                	mov    esi,eax
c0007213:	0f ac fe 09          	shrd   esi,edi,0x9
c0007217:	21 ce                	and    esi,ecx
c0007219:	89 c1                	mov    ecx,eax
c000721b:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007221:	0f 84 98 00 00 00    	je     c00072bf <f_forward+0x13e>
c0007227:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000722b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000722e:	89 c8                	mov    eax,ecx
c0007230:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007234:	e8 af ac ff ff       	call   c0001ee8 <clst2sect>
c0007239:	89 d7                	mov    edi,edx
c000723b:	09 c7                	or     edi,eax
c000723d:	0f 84 9e 00 00 00    	je     c00072e1 <f_forward+0x160>
c0007243:	31 ff                	xor    edi,edi
c0007245:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007248:	01 c6                	add    esi,eax
c000724a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000724e:	11 d7                	adc    edi,edx
c0007250:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007253:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007256:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000725a:	39 fa                	cmp    edx,edi
c000725c:	0f 85 a2 00 00 00    	jne    c0007304 <f_forward+0x183>
c0007262:	39 f0                	cmp    eax,esi
c0007264:	0f 85 9a 00 00 00    	jne    c0007304 <f_forward+0x183>
c000726a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000726d:	ba 00 02 00 00       	mov    edx,0x200
c0007272:	25 ff 01 00 00       	and    eax,0x1ff
c0007277:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000727b:	29 c2                	sub    edx,eax
c000727d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007280:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007283:	39 d1                	cmp    ecx,edx
c0007285:	76 02                	jbe    c0007289 <f_forward+0x108>
c0007287:	89 d1                	mov    ecx,edx
c0007289:	8d 73 50             	lea    esi,[ebx+0x50]
c000728c:	52                   	push   edx
c000728d:	01 c6                	add    esi,eax
c000728f:	52                   	push   edx
c0007290:	51                   	push   ecx
c0007291:	56                   	push   esi
c0007292:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007296:	83 c4 10             	add    esp,0x10
c0007299:	85 c0                	test   eax,eax
c000729b:	74 44                	je     c00072e1 <f_forward+0x160>
c000729d:	31 ff                	xor    edi,edi
c000729f:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072a2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072a5:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072a9:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072ad:	01 07                	add    DWORD PTR [edi],eax
c00072af:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072b4:	0f 85 2f ff ff ff    	jne    c00071e9 <f_forward+0x68>
c00072ba:	e9 96 00 00 00       	jmp    c0007355 <f_forward+0x1d4>
c00072bf:	85 f6                	test   esi,esi
c00072c1:	0f 85 60 ff ff ff    	jne    c0007227 <f_forward+0xa6>
c00072c7:	89 d7                	mov    edi,edx
c00072c9:	09 c7                	or     edi,eax
c00072cb:	75 05                	jne    c00072d2 <f_forward+0x151>
c00072cd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072d0:	eb 0a                	jmp    c00072dc <f_forward+0x15b>
c00072d2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072d5:	89 d8                	mov    eax,ebx
c00072d7:	e8 d9 bc ff ff       	call   c0002fb5 <get_fat>
c00072dc:	83 f8 01             	cmp    eax,0x1
c00072df:	77 0b                	ja     c00072ec <f_forward+0x16b>
c00072e1:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072e5:	bd 02 00 00 00       	mov    ebp,0x2
c00072ea:	eb 69                	jmp    c0007355 <f_forward+0x1d4>
c00072ec:	83 f8 ff             	cmp    eax,0xffffffff
c00072ef:	75 0b                	jne    c00072fc <f_forward+0x17b>
c00072f1:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072f5:	bd 01 00 00 00       	mov    ebp,0x1
c00072fa:	eb 59                	jmp    c0007355 <f_forward+0x1d4>
c00072fc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072ff:	e9 23 ff ff ff       	jmp    c0007227 <f_forward+0xa6>
c0007304:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007308:	79 20                	jns    c000732a <f_forward+0x1a9>
c000730a:	83 ec 0c             	sub    esp,0xc
c000730d:	6a 01                	push   0x1
c000730f:	52                   	push   edx
c0007310:	50                   	push   eax
c0007311:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007315:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007319:	50                   	push   eax
c000731a:	e8 fb a8 ff ff       	call   c0001c1a <disk_write>
c000731f:	83 c4 20             	add    esp,0x20
c0007322:	85 c0                	test   eax,eax
c0007324:	75 cb                	jne    c00072f1 <f_forward+0x170>
c0007326:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000732a:	83 ec 0c             	sub    esp,0xc
c000732d:	6a 01                	push   0x1
c000732f:	57                   	push   edi
c0007330:	56                   	push   esi
c0007331:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007335:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007339:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000733d:	50                   	push   eax
c000733e:	e8 c1 a8 ff ff       	call   c0001c04 <disk_read>
c0007343:	83 c4 20             	add    esp,0x20
c0007346:	85 c0                	test   eax,eax
c0007348:	0f 84 1c ff ff ff    	je     c000726a <f_forward+0xe9>
c000734e:	eb a1                	jmp    c00072f1 <f_forward+0x170>
c0007350:	bd 07 00 00 00       	mov    ebp,0x7
c0007355:	83 c4 2c             	add    esp,0x2c
c0007358:	89 e8                	mov    eax,ebp
c000735a:	5b                   	pop    ebx
c000735b:	5e                   	pop    esi
c000735c:	5f                   	pop    edi
c000735d:	5d                   	pop    ebp
c000735e:	c3                   	ret    

c000735f <f_mkfs>:
c000735f:	55                   	push   ebp
c0007360:	57                   	push   edi
c0007361:	56                   	push   esi
c0007362:	53                   	push   ebx
c0007363:	bb 0b 00 00 00       	mov    ebx,0xb
c0007368:	81 ec 9c 00 00 00    	sub    esp,0x9c
c000736e:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007375:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000737c:	e8 b0 ae ff ff       	call   c0002231 <get_ldnumber>
c0007381:	85 c0                	test   eax,eax
c0007383:	0f 88 ec 10 00 00    	js     c0008475 <f_mkfs+0x1116>
c0007389:	8b 14 85 60 f2 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0da0]
c0007390:	85 d2                	test   edx,edx
c0007392:	74 03                	je     c0007397 <f_mkfs+0x38>
c0007394:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007397:	85 f6                	test   esi,esi
c0007399:	75 05                	jne    c00073a0 <f_mkfs+0x41>
c000739b:	be e0 a0 02 c0       	mov    esi,0xc002a0e0
c00073a0:	83 ec 0c             	sub    esp,0xc
c00073a3:	0f b6 c0             	movzx  eax,al
c00073a6:	bb 03 00 00 00       	mov    ebx,0x3
c00073ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073b3:	e8 49 a8 ff ff       	call   c0001c01 <disk_initialize>
c00073b8:	83 c4 10             	add    esp,0x10
c00073bb:	a8 01                	test   al,0x1
c00073bd:	0f 85 b2 10 00 00    	jne    c0008475 <f_mkfs+0x1116>
c00073c3:	bb 0a 00 00 00       	mov    ebx,0xa
c00073c8:	a8 04                	test   al,0x4
c00073ca:	0f 85 a5 10 00 00    	jne    c0008475 <f_mkfs+0x1116>
c00073d0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073d3:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073d7:	85 c0                	test   eax,eax
c00073d9:	75 20                	jne    c00073fb <f_mkfs+0x9c>
c00073db:	51                   	push   ecx
c00073dc:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073e0:	50                   	push   eax
c00073e1:	6a 03                	push   0x3
c00073e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073e7:	e8 44 a8 ff ff       	call   c0001c30 <disk_ioctl>
c00073ec:	83 c4 10             	add    esp,0x10
c00073ef:	85 c0                	test   eax,eax
c00073f1:	74 08                	je     c00073fb <f_mkfs+0x9c>
c00073f3:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073fb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073ff:	8d 42 ff             	lea    eax,[edx-0x1]
c0007402:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007407:	77 04                	ja     c000740d <f_mkfs+0xae>
c0007409:	85 c2                	test   edx,eax
c000740b:	74 08                	je     c0007415 <f_mkfs+0xb6>
c000740d:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007415:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007418:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000741c:	48                   	dec    eax
c000741d:	3c 01                	cmp    al,0x1
c000741f:	76 05                	jbe    c0007426 <f_mkfs+0xc7>
c0007421:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007426:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000742d:	48                   	dec    eax
c000742e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007433:	77 07                	ja     c000743c <f_mkfs+0xdd>
c0007435:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000743a:	74 08                	je     c0007444 <f_mkfs+0xe5>
c000743c:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007444:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007447:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000744d:	77 07                	ja     c0007456 <f_mkfs+0xf7>
c000744f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007452:	85 d8                	test   eax,ebx
c0007454:	74 02                	je     c0007458 <f_mkfs+0xf9>
c0007456:	31 db                	xor    ebx,ebx
c0007458:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007463:	77 0a                	ja     c000746f <f_mkfs+0x110>
c0007465:	bb 11 00 00 00       	mov    ebx,0x11
c000746a:	e9 06 10 00 00       	jmp    c0008475 <f_mkfs+0x1116>
c000746f:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007476:	8b 36                	mov    esi,DWORD PTR [esi]
c0007478:	85 ed                	test   ebp,ebp
c000747a:	75 1e                	jne    c000749a <f_mkfs+0x13b>
c000747c:	83 ec 0c             	sub    esp,0xc
c000747f:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007486:	25 00 fe ff ff       	and    eax,0xfffffe00
c000748b:	50                   	push   eax
c000748c:	e8 f1 0f 00 00       	call   c0008482 <ff_memalloc>
c0007491:	83 c4 10             	add    esp,0x10
c0007494:	89 c5                	mov    ebp,eax
c0007496:	85 c0                	test   eax,eax
c0007498:	74 cb                	je     c0007465 <f_mkfs+0x106>
c000749a:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074a2:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074aa:	52                   	push   edx
c00074ab:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074af:	50                   	push   eax
c00074b0:	6a 01                	push   0x1
c00074b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074b6:	e8 75 a7 ff ff       	call   c0001c30 <disk_ioctl>
c00074bb:	83 c4 10             	add    esp,0x10
c00074be:	85 c0                	test   eax,eax
c00074c0:	0f 85 4a 0f 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c00074c6:	89 f1                	mov    ecx,esi
c00074c8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074d0:	83 e1 0f             	and    ecx,0xf
c00074d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074db:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074df:	83 e6 08             	and    esi,0x8
c00074e2:	75 56                	jne    c000753a <f_mkfs+0x1db>
c00074e4:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074e8:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074ec:	83 ff 00             	cmp    edi,0x0
c00074ef:	76 20                	jbe    c0007511 <f_mkfs+0x1b2>
c00074f1:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074f6:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074fe:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007504:	83 d7 ff             	adc    edi,0xffffffff
c0007507:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000750b:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750f:	eb 21                	jmp    c0007532 <f_mkfs+0x1d3>
c0007511:	ba 3f 00 00 00       	mov    edx,0x3f
c0007516:	39 f2                	cmp    edx,esi
c0007518:	19 f8                	sbb    eax,edi
c000751a:	73 1e                	jae    c000753a <f_mkfs+0x1db>
c000751c:	83 c6 c1             	add    esi,0xffffffc1
c000751f:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007527:	83 d7 ff             	adc    edi,0xffffffff
c000752a:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000752e:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007532:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000753a:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000753e:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007542:	89 04 24             	mov    DWORD PTR [esp],eax
c0007545:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007549:	31 c0                	xor    eax,eax
c000754b:	ba 7f 00 00 00       	mov    edx,0x7f
c0007550:	89 c7                	mov    edi,eax
c0007552:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007555:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007559:	0f 83 c5 0a 00 00    	jae    c0008024 <f_mkfs+0xcc5>
c000755f:	89 df                	mov    edi,ebx
c0007561:	c1 ef 09             	shr    edi,0x9
c0007564:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007568:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000756f:	c1 ef 09             	shr    edi,0x9
c0007572:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007577:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000757b:	74 29                	je     c00075a6 <f_mkfs+0x247>
c000757d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007583:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007588:	0f 97 c2             	seta   dl
c000758b:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c000758e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007592:	0f 92 c0             	setb   al
c0007595:	08 c2                	or     dl,al
c0007597:	75 5b                	jne    c00075f4 <f_mkfs+0x295>
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	83 e0 07             	and    eax,0x7
c00075a0:	3c 04                	cmp    al,0x4
c00075a2:	74 50                	je     c00075f4 <f_mkfs+0x295>
c00075a4:	eb 1b                	jmp    c00075c1 <f_mkfs+0x262>
c00075a6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075ab:	0f 87 73 0a 00 00    	ja     c0008024 <f_mkfs+0xcc5>
c00075b1:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075b7:	76 08                	jbe    c00075c1 <f_mkfs+0x262>
c00075b9:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075c1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075c5:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075c9:	83 e0 01             	and    eax,0x1
c00075cc:	80 e1 02             	and    cl,0x2
c00075cf:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075d3:	74 0d                	je     c00075e2 <f_mkfs+0x283>
c00075d5:	84 c0                	test   al,al
c00075d7:	0f 84 53 09 00 00    	je     c0007f30 <f_mkfs+0xbd1>
c00075dd:	e9 12 08 00 00       	jmp    c0007df4 <f_mkfs+0xa95>
c00075e2:	bb 13 00 00 00       	mov    ebx,0x13
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 85 05 08 00 00    	jne    c0007df4 <f_mkfs+0xa95>
c00075ef:	e9 39 0e 00 00       	jmp    c000842d <f_mkfs+0x10ce>
c00075f4:	31 c0                	xor    eax,eax
c00075f6:	ba ff 0f 00 00       	mov    edx,0xfff
c00075fb:	89 c7                	mov    edi,eax
c00075fd:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007600:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007604:	0f 83 1a 0a 00 00    	jae    c0008024 <f_mkfs+0xcc5>
c000760a:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007610:	77 39                	ja     c000764b <f_mkfs+0x2ec>
c0007612:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007617:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000761f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007622:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007626:	73 08                	jae    c0007630 <f_mkfs+0x2d1>
c0007628:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007630:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007635:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007638:	b8 00 00 00 00       	mov    eax,0x0
c000763d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007641:	73 08                	jae    c000764b <f_mkfs+0x2ec>
c0007643:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000764b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000764f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007653:	83 c0 20             	add    eax,0x20
c0007656:	83 d2 00             	adc    edx,0x0
c0007659:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000765d:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007661:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007665:	31 d2                	xor    edx,edx
c0007667:	31 ff                	xor    edi,edi
c0007669:	52                   	push   edx
c000766a:	89 fb                	mov    ebx,edi
c000766c:	50                   	push   eax
c000766d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007671:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007675:	e8 9a ff 01 00       	call   c0027614 <__udivdi3>
c000767a:	83 c4 10             	add    esp,0x10
c000767d:	c1 e0 02             	shl    eax,0x2
c0007680:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007684:	05 07 02 00 00       	add    eax,0x207
c0007689:	89 f1                	mov    ecx,esi
c000768b:	c1 e8 09             	shr    eax,0x9
c000768e:	83 c1 ff             	add    ecx,0xffffffff
c0007691:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007695:	83 d3 ff             	adc    ebx,0xffffffff
c0007698:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000769c:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076a0:	31 d2                	xor    edx,edx
c00076a2:	01 c8                	add    eax,ecx
c00076a4:	11 da                	adc    edx,ebx
c00076a6:	89 c1                	mov    ecx,eax
c00076a8:	f7 de                	neg    esi
c00076aa:	89 d0                	mov    eax,edx
c00076ac:	83 d7 00             	adc    edi,0x0
c00076af:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076b3:	f7 df                	neg    edi
c00076b5:	21 f1                	and    ecx,esi
c00076b7:	21 f8                	and    eax,edi
c00076b9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076c5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076c9:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076cd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d0:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076d4:	0f ac d0 01          	shrd   eax,edx,0x1
c00076d8:	89 df                	mov    edi,ebx
c00076da:	d1 ea                	shr    edx,1
c00076dc:	39 c1                	cmp    ecx,eax
c00076de:	19 d7                	sbb    edi,edx
c00076e0:	0f 83 3e 09 00 00    	jae    c0008024 <f_mkfs+0xcc5>
c00076e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ea:	31 d2                	xor    edx,edx
c00076ec:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076f4:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076fb:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076ff:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007703:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007707:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000770b:	83 f8 0f             	cmp    eax,0xf
c000770e:	0f 86 10 09 00 00    	jbe    c0008024 <f_mkfs+0xcc5>
c0007714:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000771c:	0f 87 02 09 00 00    	ja     c0008024 <f_mkfs+0xcc5>
c0007722:	31 d2                	xor    edx,edx
c0007724:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007728:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007730:	83 c0 07             	add    eax,0x7
c0007733:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000773b:	c1 e8 03             	shr    eax,0x3
c000773e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007745:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007749:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774d:	c1 e0 09             	shl    eax,0x9
c0007750:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007754:	48                   	dec    eax
c0007755:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007759:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000775d:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007761:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007765:	31 d2                	xor    edx,edx
c0007767:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000776b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007776:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000777b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000777f:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007783:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007787:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000778b:	31 ff                	xor    edi,edi
c000778d:	31 f6                	xor    esi,esi
c000778f:	31 db                	xor    ebx,ebx
c0007791:	85 ff                	test   edi,edi
c0007793:	74 05                	je     c000779a <f_mkfs+0x43b>
c0007795:	4f                   	dec    edi
c0007796:	74 44                	je     c00077dc <f_mkfs+0x47d>
c0007798:	eb 4f                	jmp    c00077e9 <f_mkfs+0x48a>
c000779a:	83 ec 0c             	sub    esp,0xc
c000779d:	0f b7 c3             	movzx  eax,bx
c00077a0:	50                   	push   eax
c00077a1:	e8 05 0e 00 00       	call   c00085ab <ff_wtoupper>
c00077a6:	83 c4 10             	add    esp,0x10
c00077a9:	89 c1                	mov    ecx,eax
c00077ab:	8d 53 01             	lea    edx,[ebx+0x1]
c00077ae:	66 39 c3             	cmp    bx,ax
c00077b1:	75 3e                	jne    c00077f1 <f_mkfs+0x492>
c00077b3:	be 01 00 00 00       	mov    esi,0x1
c00077b8:	89 df                	mov    edi,ebx
c00077ba:	66 01 f7             	add    di,si
c00077bd:	75 07                	jne    c00077c6 <f_mkfs+0x467>
c00077bf:	83 fe 7f             	cmp    esi,0x7f
c00077c2:	77 31                	ja     c00077f5 <f_mkfs+0x496>
c00077c4:	eb 16                	jmp    c00077dc <f_mkfs+0x47d>
c00077c6:	83 ec 0c             	sub    esp,0xc
c00077c9:	0f b7 ff             	movzx  edi,di
c00077cc:	57                   	push   edi
c00077cd:	e8 d9 0d 00 00       	call   c00085ab <ff_wtoupper>
c00077d2:	83 c4 10             	add    esp,0x10
c00077d5:	39 c7                	cmp    edi,eax
c00077d7:	75 e6                	jne    c00077bf <f_mkfs+0x460>
c00077d9:	46                   	inc    esi
c00077da:	eb dc                	jmp    c00077b8 <f_mkfs+0x459>
c00077dc:	31 c0                	xor    eax,eax
c00077de:	89 d9                	mov    ecx,ebx
c00077e0:	4e                   	dec    esi
c00077e1:	0f 95 c0             	setne  al
c00077e4:	43                   	inc    ebx
c00077e5:	89 c7                	mov    edi,eax
c00077e7:	eb 14                	jmp    c00077fd <f_mkfs+0x49e>
c00077e9:	89 f1                	mov    ecx,esi
c00077eb:	01 f3                	add    ebx,esi
c00077ed:	31 ff                	xor    edi,edi
c00077ef:	eb 0c                	jmp    c00077fd <f_mkfs+0x49e>
c00077f1:	89 d3                	mov    ebx,edx
c00077f3:	eb 08                	jmp    c00077fd <f_mkfs+0x49e>
c00077f5:	bf 02 00 00 00       	mov    edi,0x2
c00077fa:	83 c9 ff             	or     ecx,0xffffffff
c00077fd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007801:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007804:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007808:	0f b6 c1             	movzx  eax,cl
c000780b:	e8 3a a9 ff ff       	call   c000214a <xsum32>
c0007810:	66 c1 e9 08          	shr    cx,0x8
c0007814:	89 c2                	mov    edx,eax
c0007816:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007819:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000781d:	0f b7 c1             	movzx  eax,cx
c0007820:	e8 25 a9 ff ff       	call   c000214a <xsum32>
c0007825:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000782a:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000782e:	66 85 db             	test   bx,bx
c0007831:	74 1f                	je     c0007852 <f_mkfs+0x4f3>
c0007833:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007836:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000783d:	83 c0 02             	add    eax,0x2
c0007840:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007846:	39 c2                	cmp    edx,eax
c0007848:	74 08                	je     c0007852 <f_mkfs+0x4f3>
c000784a:	89 04 24             	mov    DWORD PTR [esp],eax
c000784d:	e9 3f ff ff ff       	jmp    c0007791 <f_mkfs+0x432>
c0007852:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007855:	83 ec 0c             	sub    esp,0xc
c0007858:	05 01 02 00 00       	add    eax,0x201
c000785d:	c1 e8 09             	shr    eax,0x9
c0007860:	50                   	push   eax
c0007861:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007865:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007869:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000786d:	55                   	push   ebp
c000786e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007872:	e8 a3 a3 ff ff       	call   c0001c1a <disk_write>
c0007877:	83 c4 20             	add    esp,0x20
c000787a:	85 c0                	test   eax,eax
c000787c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000787f:	0f 85 8b 0b 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007885:	89 d0                	mov    eax,edx
c0007887:	31 d2                	xor    edx,edx
c0007889:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000788d:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007891:	66 85 db             	test   bx,bx
c0007894:	74 04                	je     c000789a <f_mkfs+0x53b>
c0007896:	31 c0                	xor    eax,eax
c0007898:	eb b0                	jmp    c000784a <f_mkfs+0x4eb>
c000789a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000789e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078a2:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078a6:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078ac:	31 d2                	xor    edx,edx
c00078ae:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078b9:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078bd:	c1 eb 09             	shr    ebx,0x9
c00078c0:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078cb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078d3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078d7:	8d 70 01             	lea    esi,[eax+0x1]
c00078da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078de:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078e2:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078e9:	31 d2                	xor    edx,edx
c00078eb:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00078f3:	89 c1                	mov    ecx,eax
c00078f5:	89 e8                	mov    eax,ebp
c00078f7:	e8 e7 a3 ff ff       	call   c0001ce3 <mem_set>
c00078fc:	31 c0                	xor    eax,eax
c00078fe:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007901:	76 10                	jbe    c0007913 <f_mkfs+0x5b4>
c0007903:	83 fe 07             	cmp    esi,0x7
c0007906:	76 0b                	jbe    c0007913 <f_mkfs+0x5b4>
c0007908:	40                   	inc    eax
c0007909:	83 ee 08             	sub    esi,0x8
c000790c:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007911:	eb eb                	jmp    c00078fe <f_mkfs+0x59f>
c0007913:	b2 01                	mov    dl,0x1
c0007915:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007919:	85 f6                	test   esi,esi
c000791b:	74 0c                	je     c0007929 <f_mkfs+0x5ca>
c000791d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007920:	76 07                	jbe    c0007929 <f_mkfs+0x5ca>
c0007922:	08 11                	or     BYTE PTR [ecx],dl
c0007924:	4e                   	dec    esi
c0007925:	d1 e2                	shl    edx,1
c0007927:	eb f0                	jmp    c0007919 <f_mkfs+0x5ba>
c0007929:	89 df                	mov    edi,ebx
c000792b:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000792f:	76 04                	jbe    c0007935 <f_mkfs+0x5d6>
c0007931:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007935:	83 ec 0c             	sub    esp,0xc
c0007938:	57                   	push   edi
c0007939:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000793d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007941:	55                   	push   ebp
c0007942:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007946:	e8 cf a2 ff ff       	call   c0001c1a <disk_write>
c000794b:	83 c4 20             	add    esp,0x20
c000794e:	85 c0                	test   eax,eax
c0007950:	0f 85 ba 0a 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007956:	31 d2                	xor    edx,edx
c0007958:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000795c:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007960:	29 fb                	sub    ebx,edi
c0007962:	0f 85 7a ff ff ff    	jne    c00078e2 <f_mkfs+0x583>
c0007968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000796c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007974:	31 f6                	xor    esi,esi
c0007976:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000797a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000797d:	31 d2                	xor    edx,edx
c000797f:	89 e8                	mov    eax,ebp
c0007981:	e8 5d a3 ff ff       	call   c0001ce3 <mem_set>
c0007986:	31 c9                	xor    ecx,ecx
c0007988:	85 db                	test   ebx,ebx
c000798a:	75 40                	jne    c00079cc <f_mkfs+0x66d>
c000798c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007991:	89 e8                	mov    eax,ebp
c0007993:	bb 02 00 00 00       	mov    ebx,0x2
c0007998:	e8 28 a3 ff ff       	call   c0001cc5 <st_dword>
c000799d:	8d 45 04             	lea    eax,[ebp+0x4]
c00079a0:	83 ca ff             	or     edx,0xffffffff
c00079a3:	e8 1d a3 ff ff       	call   c0001cc5 <st_dword>
c00079a8:	b9 08 00 00 00       	mov    ecx,0x8
c00079ad:	eb 1d                	jmp    c00079cc <f_mkfs+0x66d>
c00079af:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079b2:	76 3b                	jbe    c00079ef <f_mkfs+0x690>
c00079b4:	43                   	inc    ebx
c00079b5:	83 fe 01             	cmp    esi,0x1
c00079b8:	89 da                	mov    edx,ebx
c00079ba:	77 03                	ja     c00079bf <f_mkfs+0x660>
c00079bc:	83 ca ff             	or     edx,0xffffffff
c00079bf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079c3:	4e                   	dec    esi
c00079c4:	e8 fc a2 ff ff       	call   c0001cc5 <st_dword>
c00079c9:	83 c1 04             	add    ecx,0x4
c00079cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079d0:	85 f6                	test   esi,esi
c00079d2:	75 db                	jne    c00079af <f_mkfs+0x650>
c00079d4:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079d9:	77 14                	ja     c00079ef <f_mkfs+0x690>
c00079db:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079df:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079e6:	85 f6                	test   esi,esi
c00079e8:	74 05                	je     c00079ef <f_mkfs+0x690>
c00079ea:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ed:	77 dd                	ja     c00079cc <f_mkfs+0x66d>
c00079ef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079f7:	39 cf                	cmp    edi,ecx
c00079f9:	76 02                	jbe    c00079fd <f_mkfs+0x69e>
c00079fb:	89 cf                	mov    edi,ecx
c00079fd:	83 ec 0c             	sub    esp,0xc
c0007a00:	57                   	push   edi
c0007a01:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a05:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a09:	55                   	push   ebp
c0007a0a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a0e:	e8 07 a2 ff ff       	call   c0001c1a <disk_write>
c0007a13:	83 c4 20             	add    esp,0x20
c0007a16:	85 c0                	test   eax,eax
c0007a18:	0f 85 f2 09 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007a1e:	31 d2                	xor    edx,edx
c0007a20:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a24:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a28:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a2c:	0f 85 48 ff ff ff    	jne    c000797a <f_mkfs+0x61b>
c0007a32:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a35:	31 d2                	xor    edx,edx
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	31 ff                	xor    edi,edi
c0007a3b:	e8 a3 a2 ff ff       	call   c0001ce3 <mem_set>
c0007a40:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a43:	ba 02 00 00 00       	mov    edx,0x2
c0007a48:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a4c:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a50:	e8 70 a2 ff ff       	call   c0001cc5 <st_dword>
c0007a55:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a58:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a5c:	e8 64 a2 ff ff       	call   c0001cc5 <st_dword>
c0007a61:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a64:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a68:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a6c:	e8 54 a2 ff ff       	call   c0001cc5 <st_dword>
c0007a71:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a78:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a7c:	83 c2 02             	add    edx,0x2
c0007a7f:	e8 41 a2 ff ff       	call   c0001cc5 <st_dword>
c0007a84:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a87:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a8b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a8f:	e8 31 a2 ff ff       	call   c0001cc5 <st_dword>
c0007a94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a98:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a9d:	89 c6                	mov    esi,eax
c0007a9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aa3:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007aa7:	89 04 24             	mov    DWORD PTR [esp],eax
c0007aaa:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aae:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ab1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ab5:	39 cb                	cmp    ebx,ecx
c0007ab7:	76 02                	jbe    c0007abb <f_mkfs+0x75c>
c0007ab9:	89 cb                	mov    ebx,ecx
c0007abb:	83 ec 0c             	sub    esp,0xc
c0007abe:	53                   	push   ebx
c0007abf:	57                   	push   edi
c0007ac0:	56                   	push   esi
c0007ac1:	55                   	push   ebp
c0007ac2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ac6:	e8 4f a1 ff ff       	call   c0001c1a <disk_write>
c0007acb:	83 c4 20             	add    esp,0x20
c0007ace:	85 c0                	test   eax,eax
c0007ad0:	0f 85 3a 09 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007ad6:	31 d2                	xor    edx,edx
c0007ad8:	b9 00 02 00 00       	mov    ecx,0x200
c0007add:	89 e8                	mov    eax,ebp
c0007adf:	e8 ff a1 ff ff       	call   c0001ce3 <mem_set>
c0007ae4:	31 d2                	xor    edx,edx
c0007ae6:	01 de                	add    esi,ebx
c0007ae8:	11 d7                	adc    edi,edx
c0007aea:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aed:	75 bf                	jne    c0007aae <f_mkfs+0x74f>
c0007aef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007af3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007af7:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007aff:	b9 00 02 00 00       	mov    ecx,0x200
c0007b04:	31 d2                	xor    edx,edx
c0007b06:	89 e8                	mov    eax,ebp
c0007b08:	e8 d6 a1 ff ff       	call   c0001ce3 <mem_set>
c0007b0d:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b12:	ba c0 a1 02 c0       	mov    edx,0xc002a1c0
c0007b17:	89 e8                	mov    eax,ebp
c0007b19:	e8 b0 a1 ff ff       	call   c0001cce <mem_cpy>
c0007b1e:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b21:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b25:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b29:	e8 9a a1 ff ff       	call   c0001cc8 <st_qword>
c0007b2e:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b32:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b35:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b39:	e8 8a a1 ff ff       	call   c0001cc8 <st_qword>
c0007b3e:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b41:	ba 20 00 00 00       	mov    edx,0x20
c0007b46:	e8 7a a1 ff ff       	call   c0001cc5 <st_dword>
c0007b4b:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b4f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b53:	e8 6d a1 ff ff       	call   c0001cc5 <st_dword>
c0007b58:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b60:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b64:	e8 5c a1 ff ff       	call   c0001cc5 <st_dword>
c0007b69:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b6c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b70:	e8 50 a1 ff ff       	call   c0001cc5 <st_dword>
c0007b75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b79:	8d 50 02             	lea    edx,[eax+0x2]
c0007b7c:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b7f:	e8 41 a1 ff ff       	call   c0001cc5 <st_dword>
c0007b84:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b87:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b8c:	e8 34 a1 ff ff       	call   c0001cc5 <st_dword>
c0007b91:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b94:	ba 00 01 00 00       	mov    edx,0x100
c0007b99:	e8 23 a1 ff ff       	call   c0001cc1 <st_word>
c0007b9e:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ba2:	b8 0a 00 00 00       	mov    eax,0xa
c0007ba7:	48                   	dec    eax
c0007ba8:	74 05                	je     c0007baf <f_mkfs+0x850>
c0007baa:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bad:	eb f8                	jmp    c0007ba7 <f_mkfs+0x848>
c0007baf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bb3:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bbb:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bbf:	74 05                	je     c0007bc6 <f_mkfs+0x867>
c0007bc1:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bc4:	eb f5                	jmp    c0007bbb <f_mkfs+0x85c>
c0007bc6:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bc9:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bce:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bd4:	31 db                	xor    ebx,ebx
c0007bd6:	e8 e6 a0 ff ff       	call   c0001cc1 <st_word>
c0007bdb:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007be1:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007be6:	89 04 24             	mov    DWORD PTR [esp],eax
c0007be9:	e8 d3 a0 ff ff       	call   c0001cc1 <st_word>
c0007bee:	31 c9                	xor    ecx,ecx
c0007bf0:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bf3:	83 f8 01             	cmp    eax,0x1
c0007bf6:	76 13                	jbe    c0007c0b <f_mkfs+0x8ac>
c0007bf8:	83 f9 70             	cmp    ecx,0x70
c0007bfb:	74 0e                	je     c0007c0b <f_mkfs+0x8ac>
c0007bfd:	89 da                	mov    edx,ebx
c0007bff:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c04:	e8 41 a5 ff ff       	call   c000214a <xsum32>
c0007c09:	89 c3                	mov    ebx,eax
c0007c0b:	41                   	inc    ecx
c0007c0c:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c12:	75 dc                	jne    c0007bf0 <f_mkfs+0x891>
c0007c14:	89 f0                	mov    eax,esi
c0007c16:	89 fa                	mov    edx,edi
c0007c18:	83 c0 01             	add    eax,0x1
c0007c1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c1f:	83 d2 00             	adc    edx,0x0
c0007c22:	83 ec 0c             	sub    esp,0xc
c0007c25:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c29:	6a 01                	push   0x1
c0007c2b:	57                   	push   edi
c0007c2c:	56                   	push   esi
c0007c2d:	55                   	push   ebp
c0007c2e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c32:	e8 e3 9f ff ff       	call   c0001c1a <disk_write>
c0007c37:	83 c4 20             	add    esp,0x20
c0007c3a:	85 c0                	test   eax,eax
c0007c3c:	0f 85 ce 07 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007c42:	31 d2                	xor    edx,edx
c0007c44:	b9 00 02 00 00       	mov    ecx,0x200
c0007c49:	89 e8                	mov    eax,ebp
c0007c4b:	e8 93 a0 ff ff       	call   c0001ce3 <mem_set>
c0007c50:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c55:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c58:	e8 64 a0 ff ff       	call   c0001cc1 <st_word>
c0007c5d:	89 f0                	mov    eax,esi
c0007c5f:	89 fa                	mov    edx,edi
c0007c61:	83 c0 09             	add    eax,0x9
c0007c64:	83 d2 00             	adc    edx,0x0
c0007c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c6a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c6e:	31 c9                	xor    ecx,ecx
c0007c70:	41                   	inc    ecx
c0007c71:	89 da                	mov    edx,ebx
c0007c73:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c78:	e8 cd a4 ff ff       	call   c000214a <xsum32>
c0007c7d:	89 c3                	mov    ebx,eax
c0007c7f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c85:	75 e9                	jne    c0007c70 <f_mkfs+0x911>
c0007c87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c8b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c8f:	83 c0 01             	add    eax,0x1
c0007c92:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c96:	83 d2 00             	adc    edx,0x0
c0007c99:	83 ec 0c             	sub    esp,0xc
c0007c9c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007ca0:	6a 01                	push   0x1
c0007ca2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007ca6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007caa:	55                   	push   ebp
c0007cab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007caf:	e8 66 9f ff ff       	call   c0001c1a <disk_write>
c0007cb4:	83 c4 20             	add    esp,0x20
c0007cb7:	85 c0                	test   eax,eax
c0007cb9:	0f 85 51 07 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007cbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cc3:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cc7:	75 09                	jne    c0007cd2 <f_mkfs+0x973>
c0007cc9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ccc:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cd0:	74 12                	je     c0007ce4 <f_mkfs+0x985>
c0007cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cda:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007ce2:	eb 8a                	jmp    c0007c6e <f_mkfs+0x90f>
c0007ce4:	31 d2                	xor    edx,edx
c0007ce6:	b9 00 02 00 00       	mov    ecx,0x200
c0007ceb:	89 e8                	mov    eax,ebp
c0007ced:	e8 f1 9f ff ff       	call   c0001ce3 <mem_set>
c0007cf2:	83 c6 0b             	add    esi,0xb
c0007cf5:	83 d7 00             	adc    edi,0x0
c0007cf8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cfc:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d00:	31 c9                	xor    ecx,ecx
c0007d02:	41                   	inc    ecx
c0007d03:	89 da                	mov    edx,ebx
c0007d05:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d0a:	e8 3b a4 ff ff       	call   c000214a <xsum32>
c0007d0f:	89 c3                	mov    ebx,eax
c0007d11:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d17:	75 e9                	jne    c0007d02 <f_mkfs+0x9a3>
c0007d19:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d1c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d20:	83 c6 01             	add    esi,0x1
c0007d23:	83 d7 00             	adc    edi,0x0
c0007d26:	83 ec 0c             	sub    esp,0xc
c0007d29:	6a 01                	push   0x1
c0007d2b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d33:	55                   	push   ebp
c0007d34:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d38:	e8 dd 9e ff ff       	call   c0001c1a <disk_write>
c0007d3d:	83 c4 20             	add    esp,0x20
c0007d40:	85 c0                	test   eax,eax
c0007d42:	0f 85 c8 06 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007d48:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d4c:	75 06                	jne    c0007d54 <f_mkfs+0x9f5>
c0007d4e:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d52:	74 09                	je     c0007d5d <f_mkfs+0x9fe>
c0007d54:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d57:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d5b:	eb a3                	jmp    c0007d00 <f_mkfs+0x9a1>
c0007d5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d61:	89 da                	mov    edx,ebx
c0007d63:	01 e8                	add    eax,ebp
c0007d65:	e8 5b 9f ff ff       	call   c0001cc5 <st_dword>
c0007d6a:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d6f:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d77:	75 e4                	jne    c0007d5d <f_mkfs+0x9fe>
c0007d79:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d7c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d80:	83 c6 02             	add    esi,0x2
c0007d83:	83 d7 00             	adc    edi,0x0
c0007d86:	83 ec 0c             	sub    esp,0xc
c0007d89:	6a 01                	push   0x1
c0007d8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d93:	55                   	push   ebp
c0007d94:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d98:	e8 7d 9e ff ff       	call   c0001c1a <disk_write>
c0007d9d:	83 c4 20             	add    esp,0x20
c0007da0:	85 c0                	test   eax,eax
c0007da2:	0f 85 68 06 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0007da8:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dad:	74 0d                	je     c0007dbc <f_mkfs+0xa5d>
c0007daf:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007db7:	e9 43 fd ff ff       	jmp    c0007aff <f_mkfs+0x7a0>
c0007dbc:	b1 07                	mov    cl,0x7
c0007dbe:	e9 e3 05 00 00       	jmp    c00083a6 <f_mkfs+0x1047>
c0007dc3:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dc8:	0f 85 4f 02 00 00    	jne    c000801d <f_mkfs+0xcbe>
c0007dce:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dd3:	0f 86 22 02 00 00    	jbe    c0007ffb <f_mkfs+0xc9c>
c0007dd9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dde:	0f 85 81 06 00 00    	jne    c0008465 <f_mkfs+0x1106>
c0007de4:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007de7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007deb:	83 f8 40             	cmp    eax,0x40
c0007dee:	0f 87 51 06 00 00    	ja     c0008445 <f_mkfs+0x10e6>
c0007df4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007df8:	85 ff                	test   edi,edi
c0007dfa:	75 1c                	jne    c0007e18 <f_mkfs+0xab9>
c0007dfc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dff:	ba c0 a0 02 c0       	mov    edx,0xc002a0c0
c0007e04:	c1 e9 0c             	shr    ecx,0xc
c0007e07:	bf 01 00 00 00       	mov    edi,0x1
c0007e0c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e0f:	66 85 c0             	test   ax,ax
c0007e12:	0f 85 95 01 00 00    	jne    c0007fad <f_mkfs+0xc4e>
c0007e18:	31 d2                	xor    edx,edx
c0007e1a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e1d:	f7 f7                	div    edi
c0007e1f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e24:	0f 86 95 01 00 00    	jbe    c0007fbf <f_mkfs+0xc60>
c0007e2a:	83 c0 02             	add    eax,0x2
c0007e2d:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e32:	01 c0                	add    eax,eax
c0007e34:	05 ff 01 00 00       	add    eax,0x1ff
c0007e39:	be 01 00 00 00       	mov    esi,0x1
c0007e3e:	c1 e8 09             	shr    eax,0x9
c0007e41:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e49:	c1 e0 05             	shl    eax,0x5
c0007e4c:	c1 e8 09             	shr    eax,0x9
c0007e4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e53:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e58:	31 d2                	xor    edx,edx
c0007e5a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e5e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e62:	89 f0                	mov    eax,esi
c0007e64:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e68:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e6c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e74:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e78:	31 d2                	xor    edx,edx
c0007e7a:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e7f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e83:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e87:	31 db                	xor    ebx,ebx
c0007e89:	01 c8                	add    eax,ecx
c0007e8b:	11 da                	adc    edx,ebx
c0007e8d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e91:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e95:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e99:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e9d:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007ea1:	f7 da                	neg    edx
c0007ea3:	21 d1                	and    ecx,edx
c0007ea5:	29 d9                	sub    ecx,ebx
c0007ea7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eac:	0f 85 20 01 00 00    	jne    c0007fd2 <f_mkfs+0xc73>
c0007eb2:	31 db                	xor    ebx,ebx
c0007eb4:	01 ce                	add    esi,ecx
c0007eb6:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007eba:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ebe:	31 d2                	xor    edx,edx
c0007ec0:	89 f8                	mov    eax,edi
c0007ec2:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ec6:	c1 e0 04             	shl    eax,0x4
c0007ec9:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ecd:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ed1:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ed5:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ed9:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007edc:	19 d3                	sbb    ebx,edx
c0007ede:	0f 82 40 01 00 00    	jb     c0008024 <f_mkfs+0xcc5>
c0007ee4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ee7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eeb:	89 c8                	mov    eax,ecx
c0007eed:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ef2:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ef6:	29 f0                	sub    eax,esi
c0007ef8:	29 d0                	sub    eax,edx
c0007efa:	31 d2                	xor    edx,edx
c0007efc:	f7 f7                	div    edi
c0007efe:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f03:	89 c3                	mov    ebx,eax
c0007f05:	0f 85 b8 fe ff ff    	jne    c0007dc3 <f_mkfs+0xa64>
c0007f0b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f10:	0f 87 1d 01 00 00    	ja     c0008033 <f_mkfs+0xcd4>
c0007f16:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f1b:	0f 85 03 01 00 00    	jne    c0008024 <f_mkfs+0xcc5>
c0007f21:	83 ff 01             	cmp    edi,0x1
c0007f24:	0f 86 fa 00 00 00    	jbe    c0008024 <f_mkfs+0xcc5>
c0007f2a:	d1 ef                	shr    edi,1
c0007f2c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f30:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f34:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f37:	85 db                	test   ebx,ebx
c0007f39:	75 2d                	jne    c0007f68 <f_mkfs+0xc09>
c0007f3b:	89 cb                	mov    ebx,ecx
c0007f3d:	ba d0 a0 02 c0       	mov    edx,0xc002a0d0
c0007f42:	c1 eb 11             	shr    ebx,0x11
c0007f45:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f4d:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f50:	66 85 c0             	test   ax,ax
c0007f53:	74 11                	je     c0007f66 <f_mkfs+0xc07>
c0007f55:	83 c2 02             	add    edx,0x2
c0007f58:	39 d8                	cmp    eax,ebx
c0007f5a:	77 0a                	ja     c0007f66 <f_mkfs+0xc07>
c0007f5c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f60:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f64:	eb e7                	jmp    c0007f4d <f_mkfs+0xbee>
c0007f66:	31 db                	xor    ebx,ebx
c0007f68:	31 d2                	xor    edx,edx
c0007f6a:	89 c8                	mov    eax,ecx
c0007f6c:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f70:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f77:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f7c:	c1 ea 09             	shr    edx,0x9
c0007f7f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f84:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f88:	0f 87 96 00 00 00    	ja     c0008024 <f_mkfs+0xcc5>
c0007f8e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f92:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f9a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f9e:	be 20 00 00 00       	mov    esi,0x20
c0007fa3:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fa8:	e9 a6 fe ff ff       	jmp    c0007e53 <f_mkfs+0xaf4>
c0007fad:	83 c2 02             	add    edx,0x2
c0007fb0:	39 c8                	cmp    eax,ecx
c0007fb2:	0f 87 60 fe ff ff    	ja     c0007e18 <f_mkfs+0xab9>
c0007fb8:	01 ff                	add    edi,edi
c0007fba:	e9 4d fe ff ff       	jmp    c0007e0c <f_mkfs+0xaad>
c0007fbf:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fc2:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fc7:	40                   	inc    eax
c0007fc8:	d1 e8                	shr    eax,1
c0007fca:	83 c0 03             	add    eax,0x3
c0007fcd:	e9 62 fe ff ff       	jmp    c0007e34 <f_mkfs+0xad5>
c0007fd2:	31 d2                	xor    edx,edx
c0007fd4:	89 c8                	mov    eax,ecx
c0007fd6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fda:	85 d2                	test   edx,edx
c0007fdc:	74 0c                	je     c0007fea <f_mkfs+0xc8b>
c0007fde:	49                   	dec    ecx
c0007fdf:	46                   	inc    esi
c0007fe0:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fe5:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fea:	89 c8                	mov    eax,ecx
c0007fec:	31 d2                	xor    edx,edx
c0007fee:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007ff2:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007ff6:	e9 c3 fe ff ff       	jmp    c0007ebe <f_mkfs+0xb5f>
c0007ffb:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008000:	77 31                	ja     c0008033 <f_mkfs+0xcd4>
c0008002:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008007:	75 1b                	jne    c0008024 <f_mkfs+0xcc5>
c0008009:	8d 04 3f             	lea    eax,[edi+edi*1]
c000800c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008010:	3d 80 00 00 00       	cmp    eax,0x80
c0008015:	0f 86 d9 fd ff ff    	jbe    c0007df4 <f_mkfs+0xa95>
c000801b:	eb 07                	jmp    c0008024 <f_mkfs+0xcc5>
c000801d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008022:	76 0a                	jbe    c000802e <f_mkfs+0xccf>
c0008024:	bb 0e 00 00 00       	mov    ebx,0xe
c0008029:	e9 ff 03 00 00       	jmp    c000842d <f_mkfs+0x10ce>
c000802e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008033:	31 d2                	xor    edx,edx
c0008035:	b9 00 02 00 00       	mov    ecx,0x200
c000803a:	89 e8                	mov    eax,ebp
c000803c:	e8 a2 9c ff ff       	call   c0001ce3 <mem_set>
c0008041:	b9 0b 00 00 00       	mov    ecx,0xb
c0008046:	ba e2 a1 02 c0       	mov    edx,0xc002a1e2
c000804b:	89 e8                	mov    eax,ebp
c000804d:	e8 7c 9c ff ff       	call   c0001cce <mem_cpy>
c0008052:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008055:	ba 00 02 00 00       	mov    edx,0x200
c000805a:	e8 62 9c ff ff       	call   c0001cc1 <st_word>
c000805f:	89 f8                	mov    eax,edi
c0008061:	0f b7 d6             	movzx  edx,si
c0008064:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008067:	8d 45 0e             	lea    eax,[ebp+0xe]
c000806a:	e8 52 9c ff ff       	call   c0001cc1 <st_word>
c000806f:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008073:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008078:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000807b:	75 08                	jne    c0008085 <f_mkfs+0xd26>
c000807d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008085:	8d 45 11             	lea    eax,[ebp+0x11]
c0008088:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000808c:	e8 30 9c ff ff       	call   c0001cc1 <st_word>
c0008091:	b8 ff ff 00 00       	mov    eax,0xffff
c0008096:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000809a:	39 d0                	cmp    eax,edx
c000809c:	b8 00 00 00 00       	mov    eax,0x0
c00080a1:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080a5:	72 0a                	jb     c00080b1 <f_mkfs+0xd52>
c00080a7:	8d 45 13             	lea    eax,[ebp+0x13]
c00080aa:	e8 12 9c ff ff       	call   c0001cc1 <st_word>
c00080af:	eb 08                	jmp    c00080b9 <f_mkfs+0xd5a>
c00080b1:	8d 45 20             	lea    eax,[ebp+0x20]
c00080b4:	e8 0c 9c ff ff       	call   c0001cc5 <st_dword>
c00080b9:	8d 45 18             	lea    eax,[ebp+0x18]
c00080bc:	ba 3f 00 00 00       	mov    edx,0x3f
c00080c1:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080c5:	e8 f7 9b ff ff       	call   c0001cc1 <st_word>
c00080ca:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080cd:	ba ff 00 00 00       	mov    edx,0xff
c00080d2:	e8 ea 9b ff ff       	call   c0001cc1 <st_word>
c00080d7:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080de:	e8 e2 9b ff ff       	call   c0001cc5 <st_dword>
c00080e3:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080e8:	75 57                	jne    c0008141 <f_mkfs+0xde2>
c00080ea:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ed:	ba 00 00 21 50       	mov    edx,0x50210000
c00080f2:	e8 ce 9b ff ff       	call   c0001cc5 <st_dword>
c00080f7:	8d 45 24             	lea    eax,[ebp+0x24]
c00080fa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080fe:	e8 c2 9b ff ff       	call   c0001cc5 <st_dword>
c0008103:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008106:	ba 02 00 00 00       	mov    edx,0x2
c000810b:	e8 b5 9b ff ff       	call   c0001cc5 <st_dword>
c0008110:	8d 45 30             	lea    eax,[ebp+0x30]
c0008113:	ba 01 00 00 00       	mov    edx,0x1
c0008118:	e8 a4 9b ff ff       	call   c0001cc1 <st_word>
c000811d:	8d 45 32             	lea    eax,[ebp+0x32]
c0008120:	ba 06 00 00 00       	mov    edx,0x6
c0008125:	e8 97 9b ff ff       	call   c0001cc1 <st_word>
c000812a:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000812e:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008132:	8d 45 47             	lea    eax,[ebp+0x47]
c0008135:	b9 13 00 00 00       	mov    ecx,0x13
c000813a:	ba ee a1 02 c0       	mov    edx,0xc002a1ee
c000813f:	eb 2f                	jmp    c0008170 <f_mkfs+0xe11>
c0008141:	8d 45 27             	lea    eax,[ebp+0x27]
c0008144:	ba 00 00 21 50       	mov    edx,0x50210000
c0008149:	e8 77 9b ff ff       	call   c0001cc5 <st_dword>
c000814e:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008153:	8d 45 16             	lea    eax,[ebp+0x16]
c0008156:	e8 66 9b ff ff       	call   c0001cc1 <st_word>
c000815b:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c000815f:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008163:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008166:	b9 13 00 00 00       	mov    ecx,0x13
c000816b:	ba 02 a2 02 c0       	mov    edx,0xc002a202
c0008170:	e8 59 9b ff ff       	call   c0001cce <mem_cpy>
c0008175:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000817b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008180:	89 f0                	mov    eax,esi
c0008182:	e8 3a 9b ff ff       	call   c0001cc1 <st_word>
c0008187:	83 ec 0c             	sub    esp,0xc
c000818a:	6a 01                	push   0x1
c000818c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008190:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008194:	55                   	push   ebp
c0008195:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008199:	e8 7c 9a ff ff       	call   c0001c1a <disk_write>
c000819e:	83 c4 20             	add    esp,0x20
c00081a1:	85 c0                	test   eax,eax
c00081a3:	0f 85 67 02 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c00081a9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ae:	0f 85 b7 00 00 00    	jne    c000826b <f_mkfs+0xf0c>
c00081b4:	83 ec 0c             	sub    esp,0xc
c00081b7:	6a 01                	push   0x1
c00081b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081c1:	83 c0 06             	add    eax,0x6
c00081c4:	83 d2 00             	adc    edx,0x0
c00081c7:	52                   	push   edx
c00081c8:	50                   	push   eax
c00081c9:	55                   	push   ebp
c00081ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ce:	e8 47 9a ff ff       	call   c0001c1a <disk_write>
c00081d3:	83 c4 20             	add    esp,0x20
c00081d6:	b9 00 02 00 00       	mov    ecx,0x200
c00081db:	31 d2                	xor    edx,edx
c00081dd:	89 e8                	mov    eax,ebp
c00081df:	e8 ff 9a ff ff       	call   c0001ce3 <mem_set>
c00081e4:	ba 52 52 61 41       	mov    edx,0x41615252
c00081e9:	89 e8                	mov    eax,ebp
c00081eb:	e8 d5 9a ff ff       	call   c0001cc5 <st_dword>
c00081f0:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081f6:	ba 72 72 41 61       	mov    edx,0x61417272
c00081fb:	e8 c5 9a ff ff       	call   c0001cc5 <st_dword>
c0008200:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008203:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008209:	e8 b7 9a ff ff       	call   c0001cc5 <st_dword>
c000820e:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008214:	ba 02 00 00 00       	mov    edx,0x2
c0008219:	e8 a7 9a ff ff       	call   c0001cc5 <st_dword>
c000821e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008223:	89 f0                	mov    eax,esi
c0008225:	e8 97 9a ff ff       	call   c0001cc1 <st_word>
c000822a:	83 ec 0c             	sub    esp,0xc
c000822d:	6a 01                	push   0x1
c000822f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008233:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008237:	83 c0 07             	add    eax,0x7
c000823a:	83 d2 00             	adc    edx,0x0
c000823d:	52                   	push   edx
c000823e:	50                   	push   eax
c000823f:	55                   	push   ebp
c0008240:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008244:	e8 d1 99 ff ff       	call   c0001c1a <disk_write>
c0008249:	83 c4 14             	add    esp,0x14
c000824c:	6a 01                	push   0x1
c000824e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008252:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008256:	83 c0 01             	add    eax,0x1
c0008259:	83 d2 00             	adc    edx,0x0
c000825c:	52                   	push   edx
c000825d:	50                   	push   eax
c000825e:	55                   	push   ebp
c000825f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008263:	e8 b2 99 ff ff       	call   c0001c1a <disk_write>
c0008268:	83 c4 20             	add    esp,0x20
c000826b:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008272:	31 d2                	xor    edx,edx
c0008274:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000827a:	31 db                	xor    ebx,ebx
c000827c:	89 e8                	mov    eax,ebp
c000827e:	e8 60 9a ff ff       	call   c0001ce3 <mem_set>
c0008283:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008288:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000828f:	0f 94 c3             	sete   bl
c0008292:	4b                   	dec    ebx
c0008293:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008299:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000829f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082a4:	75 21                	jne    c00082c7 <f_mkfs+0xf68>
c00082a6:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082ab:	89 e8                	mov    eax,ebp
c00082ad:	e8 13 9a ff ff       	call   c0001cc5 <st_dword>
c00082b2:	8d 45 04             	lea    eax,[ebp+0x4]
c00082b5:	83 ca ff             	or     edx,0xffffffff
c00082b8:	e8 08 9a ff ff       	call   c0001cc5 <st_dword>
c00082bd:	8d 45 08             	lea    eax,[ebp+0x8]
c00082c0:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082c5:	eb 04                	jmp    c00082cb <f_mkfs+0xf6c>
c00082c7:	89 da                	mov    edx,ebx
c00082c9:	89 e8                	mov    eax,ebp
c00082cb:	e8 f5 99 ff ff       	call   c0001cc5 <st_dword>
c00082d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082d8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082e0:	39 ce                	cmp    esi,ecx
c00082e2:	76 02                	jbe    c00082e6 <f_mkfs+0xf87>
c00082e4:	89 ce                	mov    esi,ecx
c00082e6:	83 ec 0c             	sub    esp,0xc
c00082e9:	56                   	push   esi
c00082ea:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082f2:	55                   	push   ebp
c00082f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082f7:	e8 1e 99 ff ff       	call   c0001c1a <disk_write>
c00082fc:	83 c4 20             	add    esp,0x20
c00082ff:	85 c0                	test   eax,eax
c0008301:	0f 85 09 01 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0008307:	31 d2                	xor    edx,edx
c0008309:	b9 00 02 00 00       	mov    ecx,0x200
c000830e:	89 e8                	mov    eax,ebp
c0008310:	e8 ce 99 ff ff       	call   c0001ce3 <mem_set>
c0008315:	31 d2                	xor    edx,edx
c0008317:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000831b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000831f:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008323:	75 b3                	jne    c00082d8 <f_mkfs+0xf79>
c0008325:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008328:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000832f:	40                   	inc    eax
c0008330:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008334:	0f 87 65 ff ff ff    	ja     c000829f <f_mkfs+0xf40>
c000833a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000833f:	74 04                	je     c0008345 <f_mkfs+0xfe6>
c0008341:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008345:	89 fb                	mov    ebx,edi
c0008347:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000834b:	76 04                	jbe    c0008351 <f_mkfs+0xff2>
c000834d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008351:	83 ec 0c             	sub    esp,0xc
c0008354:	53                   	push   ebx
c0008355:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008359:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000835d:	55                   	push   ebp
c000835e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008362:	e8 b3 98 ff ff       	call   c0001c1a <disk_write>
c0008367:	83 c4 20             	add    esp,0x20
c000836a:	85 c0                	test   eax,eax
c000836c:	0f 85 9e 00 00 00    	jne    c0008410 <f_mkfs+0x10b1>
c0008372:	31 d2                	xor    edx,edx
c0008374:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008378:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837c:	29 df                	sub    edi,ebx
c000837e:	75 c5                	jne    c0008345 <f_mkfs+0xfe6>
c0008380:	b1 0c                	mov    cl,0xc
c0008382:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008387:	74 1d                	je     c00083a6 <f_mkfs+0x1047>
c0008389:	b8 ff ff 00 00       	mov    eax,0xffff
c000838e:	b1 06                	mov    cl,0x6
c0008390:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008394:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008398:	72 0c                	jb     c00083a6 <f_mkfs+0x1047>
c000839a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000839f:	0f 94 c1             	sete   cl
c00083a2:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083a6:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083ab:	75 4c                	jne    c00083f9 <f_mkfs+0x109a>
c00083ad:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083b1:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083b5:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083bc:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083c3:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083ce:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083d9:	0f b6 c9             	movzx  ecx,cl
c00083dc:	83 ec 0c             	sub    esp,0xc
c00083df:	55                   	push   ebp
c00083e0:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083eb:	e8 2f c2 ff ff       	call   c000461f <create_partition>
c00083f0:	83 c4 10             	add    esp,0x10
c00083f3:	89 c3                	mov    ebx,eax
c00083f5:	85 c0                	test   eax,eax
c00083f7:	75 34                	jne    c000842d <f_mkfs+0x10ce>
c00083f9:	31 db                	xor    ebx,ebx
c00083fb:	50                   	push   eax
c00083fc:	6a 00                	push   0x0
c00083fe:	6a 00                	push   0x0
c0008400:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008404:	e8 27 98 ff ff       	call   c0001c30 <disk_ioctl>
c0008409:	83 c4 10             	add    esp,0x10
c000840c:	85 c0                	test   eax,eax
c000840e:	74 1d                	je     c000842d <f_mkfs+0x10ce>
c0008410:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008418:	75 0c                	jne    c0008426 <f_mkfs+0x10c7>
c000841a:	83 ec 0c             	sub    esp,0xc
c000841d:	55                   	push   ebp
c000841e:	e8 75 00 00 00       	call   c0008498 <ff_memfree>
c0008423:	83 c4 10             	add    esp,0x10
c0008426:	bb 01 00 00 00       	mov    ebx,0x1
c000842b:	eb 48                	jmp    c0008475 <f_mkfs+0x1116>
c000842d:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008435:	75 3e                	jne    c0008475 <f_mkfs+0x1116>
c0008437:	83 ec 0c             	sub    esp,0xc
c000843a:	55                   	push   ebp
c000843b:	e8 58 00 00 00       	call   c0008498 <ff_memfree>
c0008440:	83 c4 10             	add    esp,0x10
c0008443:	eb 30                	jmp    c0008475 <f_mkfs+0x1116>
c0008445:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000844a:	0f 85 eb fa ff ff    	jne    c0007f3b <f_mkfs+0xbdc>
c0008450:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008454:	81 ff 80 00 00 00    	cmp    edi,0x80
c000845a:	0f 86 b8 f9 ff ff    	jbe    c0007e18 <f_mkfs+0xab9>
c0008460:	e9 bf fb ff ff       	jmp    c0008024 <f_mkfs+0xcc5>
c0008465:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000846a:	0f 85 c0 fa ff ff    	jne    c0007f30 <f_mkfs+0xbd1>
c0008470:	e9 af fb ff ff       	jmp    c0008024 <f_mkfs+0xcc5>
c0008475:	81 c4 9c 00 00 00    	add    esp,0x9c
c000847b:	89 d8                	mov    eax,ebx
c000847d:	5b                   	pop    ebx
c000847e:	5e                   	pop    esi
c000847f:	5f                   	pop    edi
c0008480:	5d                   	pop    ebp
c0008481:	c3                   	ret    

c0008482 <ff_memalloc>:
c0008482:	83 ec 0c             	sub    esp,0xc
c0008485:	83 ec 0c             	sub    esp,0xc
c0008488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000848c:	e8 23 74 00 00       	call   c000f8b4 <malloc>
c0008491:	83 c4 10             	add    esp,0x10
c0008494:	83 c4 0c             	add    esp,0xc
c0008497:	c3                   	ret    

c0008498 <ff_memfree>:
c0008498:	83 ec 0c             	sub    esp,0xc
c000849b:	83 ec 0c             	sub    esp,0xc
c000849e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084a2:	e8 1d 74 00 00       	call   c000f8c4 <free>
c00084a7:	83 c4 10             	add    esp,0x10
c00084aa:	90                   	nop
c00084ab:	83 c4 0c             	add    esp,0xc
c00084ae:	c3                   	ret    

c00084af <ff_uni2oem>:
c00084af:	83 ec 14             	sub    esp,0x14
c00084b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084b6:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ba:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084c1:	c7 44 24 0c 20 a5 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a520
c00084c9:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084ce:	77 0b                	ja     c00084db <ff_uni2oem+0x2c>
c00084d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	eb 5b                	jmp    c0008536 <ff_uni2oem+0x87>
c00084db:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084e3:	77 51                	ja     c0008536 <ff_uni2oem+0x87>
c00084e5:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084eb:	75 49                	jne    c0008536 <ff_uni2oem+0x87>
c00084ed:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084f4:	eb 0b                	jmp    c0008501 <ff_uni2oem+0x52>
c00084f6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084fb:	40                   	inc    eax
c00084fc:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008501:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008507:	77 1b                	ja     c0008524 <ff_uni2oem+0x75>
c0008509:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000850e:	01 c0                	add    eax,eax
c0008510:	89 c2                	mov    edx,eax
c0008512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008516:	01 d0                	add    eax,edx
c0008518:	66 8b 00             	mov    ax,WORD PTR [eax]
c000851b:	0f b7 c0             	movzx  eax,ax
c000851e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008522:	75 d2                	jne    c00084f6 <ff_uni2oem+0x47>
c0008524:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008529:	83 e8 80             	sub    eax,0xffffff80
c000852c:	25 ff 00 00 00       	and    eax,0xff
c0008531:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 c4 14             	add    esp,0x14
c000853e:	c3                   	ret    

c000853f <ff_oem2uni>:
c000853f:	83 ec 18             	sub    esp,0x18
c0008542:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000854a:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000854f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008553:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000855a:	c7 44 24 10 20 a5 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a520
c0008562:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008568:	77 0b                	ja     c0008575 <ff_oem2uni+0x36>
c000856a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000856e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008573:	eb 2d                	jmp    c00085a2 <ff_oem2uni+0x63>
c0008575:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000857b:	75 25                	jne    c00085a2 <ff_oem2uni+0x63>
c000857d:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008584:	77 1c                	ja     c00085a2 <ff_oem2uni+0x63>
c0008586:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000858b:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008590:	01 c0                	add    eax,eax
c0008592:	89 c2                	mov    edx,eax
c0008594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008598:	01 d0                	add    eax,edx
c000859a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000859d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085a2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085a7:	83 c4 18             	add    esp,0x18
c00085aa:	c3                   	ret    

c00085ab <ff_wtoupper>:
c00085ab:	83 ec 10             	sub    esp,0x10
c00085ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085b6:	0f 87 3e 01 00 00    	ja     c00086fa <ff_wtoupper+0x14f>
c00085bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085c5:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085cc:	77 07                	ja     c00085d5 <ff_wtoupper+0x2a>
c00085ce:	b8 20 a3 02 c0       	mov    eax,0xc002a320
c00085d3:	eb 05                	jmp    c00085da <ff_wtoupper+0x2f>
c00085d5:	b8 60 a2 02 c0       	mov    eax,0xc002a260
c00085da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e2:	8d 50 02             	lea    edx,[eax+0x2]
c00085e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085ec:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085f1:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085f7:	0f 84 f4 00 00 00    	je     c00086f1 <ff_wtoupper+0x146>
c00085fd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008602:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008607:	0f 82 e4 00 00 00    	jb     c00086f1 <ff_wtoupper+0x146>
c000860d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008611:	8d 50 02             	lea    edx,[eax+0x2]
c0008614:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008618:	66 8b 00             	mov    ax,WORD PTR [eax]
c000861b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008620:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008625:	66 c1 e8 08          	shr    ax,0x8
c0008629:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000862e:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008635:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000863a:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000863f:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008644:	01 ca                	add    edx,ecx
c0008646:	39 d0                	cmp    eax,edx
c0008648:	0f 8d 86 00 00 00    	jge    c00086d4 <ff_wtoupper+0x129>
c000864e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008653:	83 f8 08             	cmp    eax,0x8
c0008656:	0f 87 94 00 00 00    	ja     c00086f0 <ff_wtoupper+0x145>
c000865c:	8b 04 85 20 a2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5de0]
c0008663:	ff e0                	jmp    eax
c0008665:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000866a:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c000866f:	29 c2                	sub    edx,eax
c0008671:	89 d0                	mov    eax,edx
c0008673:	01 c0                	add    eax,eax
c0008675:	89 c2                	mov    edx,eax
c0008677:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000867b:	01 d0                	add    eax,edx
c000867d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008680:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008685:	eb 4b                	jmp    c00086d2 <ff_wtoupper+0x127>
c0008687:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000868c:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008690:	83 e0 01             	and    eax,0x1
c0008693:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008698:	eb 38                	jmp    c00086d2 <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086a0:	eb 30                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086a2:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086a8:	eb 28                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086aa:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086b0:	eb 20                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086b2:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086b8:	eb 18                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086ba:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086c0:	eb 10                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086c2:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086c8:	eb 08                	jmp    c00086d2 <ff_wtoupper+0x127>
c00086ca:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086d1:	90                   	nop
c00086d2:	eb 1c                	jmp    c00086f0 <ff_wtoupper+0x145>
c00086d4:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086da:	0f 85 fe fe ff ff    	jne    c00085de <ff_wtoupper+0x33>
c00086e0:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086e5:	01 c0                	add    eax,eax
c00086e7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086eb:	e9 ee fe ff ff       	jmp    c00085de <ff_wtoupper+0x33>
c00086f0:	90                   	nop
c00086f1:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086fe:	83 c4 10             	add    esp,0x10
c0008701:	c3                   	ret    

c0008702 <psrc_set_converter>:
c0008702:	56                   	push   esi
c0008703:	89 d6                	mov    esi,edx
c0008705:	53                   	push   ebx
c0008706:	89 c3                	mov    ebx,eax
c0008708:	83 ec 0c             	sub    esp,0xc
c000870b:	52                   	push   edx
c000870c:	50                   	push   eax
c000870d:	e8 6f 55 00 00       	call   c000dc81 <sinc_set_converter>
c0008712:	83 c4 10             	add    esp,0x10
c0008715:	85 c0                	test   eax,eax
c0008717:	74 25                	je     c000873e <psrc_set_converter+0x3c>
c0008719:	50                   	push   eax
c000871a:	50                   	push   eax
c000871b:	56                   	push   esi
c000871c:	53                   	push   ebx
c000871d:	e8 17 5d 00 00       	call   c000e439 <zoh_set_converter>
c0008722:	83 c4 10             	add    esp,0x10
c0008725:	85 c0                	test   eax,eax
c0008727:	74 15                	je     c000873e <psrc_set_converter+0x3c>
c0008729:	51                   	push   ecx
c000872a:	51                   	push   ecx
c000872b:	56                   	push   esi
c000872c:	53                   	push   ebx
c000872d:	e8 0f 11 00 00       	call   c0009841 <linear_set_converter>
c0008732:	83 c4 10             	add    esp,0x10
c0008735:	ba 0a 00 00 00       	mov    edx,0xa
c000873a:	85 c0                	test   eax,eax
c000873c:	75 02                	jne    c0008740 <psrc_set_converter+0x3e>
c000873e:	31 d2                	xor    edx,edx
c0008740:	89 d0                	mov    eax,edx
c0008742:	5a                   	pop    edx
c0008743:	5b                   	pop    ebx
c0008744:	5e                   	pop    esi
c0008745:	c3                   	ret    

c0008746 <src_delete>:
c0008746:	53                   	push   ebx
c0008747:	83 ec 08             	sub    esp,0x8
c000874a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000874e:	85 db                	test   ebx,ebx
c0008750:	74 29                	je     c000877b <src_delete+0x35>
c0008752:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008755:	85 c0                	test   eax,eax
c0008757:	74 0c                	je     c0008765 <src_delete+0x1f>
c0008759:	83 ec 0c             	sub    esp,0xc
c000875c:	50                   	push   eax
c000875d:	e8 62 71 00 00       	call   c000f8c4 <free>
c0008762:	83 c4 10             	add    esp,0x10
c0008765:	50                   	push   eax
c0008766:	6a 3c                	push   0x3c
c0008768:	6a 00                	push   0x0
c000876a:	53                   	push   ebx
c000876b:	e8 08 80 ff ff       	call   c0000778 <memset>
c0008770:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008773:	e8 4c 71 00 00       	call   c000f8c4 <free>
c0008778:	83 c4 10             	add    esp,0x10
c000877b:	31 c0                	xor    eax,eax
c000877d:	83 c4 08             	add    esp,0x8
c0008780:	5b                   	pop    ebx
c0008781:	c3                   	ret    

c0008782 <src_process>:
c0008782:	55                   	push   ebp
c0008783:	57                   	push   edi
c0008784:	56                   	push   esi
c0008785:	53                   	push   ebx
c0008786:	83 ec 1c             	sub    esp,0x1c
c0008789:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000878d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008791:	85 ed                	test   ebp,ebp
c0008793:	0f 84 6f 01 00 00    	je     c0008908 <src_process+0x186>
c0008799:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000879d:	0f 84 6c 01 00 00    	je     c000890f <src_process+0x18d>
c00087a3:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087a7:	0f 84 62 01 00 00    	je     c000890f <src_process+0x18d>
c00087ad:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087b4:	0f 85 5c 01 00 00    	jne    c0008916 <src_process+0x194>
c00087ba:	85 db                	test   ebx,ebx
c00087bc:	0f 84 5b 01 00 00    	je     c000891d <src_process+0x19b>
c00087c2:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087c4:	85 f6                	test   esi,esi
c00087c6:	0f 84 58 01 00 00    	je     c0008924 <src_process+0x1a2>
c00087cc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087cf:	85 ff                	test   edi,edi
c00087d1:	0f 84 4d 01 00 00    	je     c0008924 <src_process+0x1a2>
c00087d7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087da:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087e5:	68 00 00 70 3f       	push   0x3f700000
c00087ea:	6a 00                	push   0x0
c00087ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087f4:	e8 ee 08 02 00       	call   c00290e7 <__ltdf2>
c00087f9:	83 c4 10             	add    esp,0x10
c00087fc:	85 c0                	test   eax,eax
c00087fe:	0f 88 27 01 00 00    	js     c000892b <src_process+0x1a9>
c0008804:	68 00 00 70 40       	push   0x40700000
c0008809:	6a 00                	push   0x0
c000880b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000880f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008813:	e8 b1 08 02 00       	call   c00290c9 <__gtdf2>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	85 c0                	test   eax,eax
c000881d:	0f 8f 08 01 00 00    	jg     c000892b <src_process+0x1a9>
c0008823:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008827:	79 07                	jns    c0008830 <src_process+0xae>
c0008829:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008830:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008833:	85 c0                	test   eax,eax
c0008835:	79 50                	jns    c0008887 <src_process+0x105>
c0008837:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000883e:	39 fe                	cmp    esi,edi
c0008840:	72 37                	jb     c0008879 <src_process+0xf7>
c0008842:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008849:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008850:	68 00 00 70 3f       	push   0x3f700000
c0008855:	6a 00                	push   0x0
c0008857:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000885a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000885d:	e8 85 08 02 00       	call   c00290e7 <__ltdf2>
c0008862:	83 c4 10             	add    esp,0x10
c0008865:	85 c0                	test   eax,eax
c0008867:	79 37                	jns    c00088a0 <src_process+0x11e>
c0008869:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000886d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008871:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008874:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008877:	eb 27                	jmp    c00088a0 <src_process+0x11e>
c0008879:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000887c:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008880:	8d 04 86             	lea    eax,[esi+eax*4]
c0008883:	39 c7                	cmp    edi,eax
c0008885:	eb 0d                	jmp    c0008894 <src_process+0x112>
c0008887:	39 fe                	cmp    esi,edi
c0008889:	72 ee                	jb     c0008879 <src_process+0xf7>
c000888b:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c000888f:	8d 04 87             	lea    eax,[edi+eax*4]
c0008892:	39 c6                	cmp    esi,eax
c0008894:	73 ac                	jae    c0008842 <src_process+0xc0>
c0008896:	b8 10 00 00 00       	mov    eax,0x10
c000889b:	e9 90 00 00 00       	jmp    c0008930 <src_process+0x1ae>
c00088a0:	83 ec 10             	sub    esp,0x10
c00088a3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088a9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088ac:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088af:	e8 38 ff 01 00       	call   c00287ec <__subdf3>
c00088b4:	83 c4 18             	add    esp,0x18
c00088b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088bb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088bf:	52                   	push   edx
c00088c0:	50                   	push   eax
c00088c1:	e8 ba 09 02 00       	call   c0029280 <fabs>
c00088c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088ce:	83 c4 10             	add    esp,0x10
c00088d1:	68 af 03 d2 3c       	push   0x3cd203af
c00088d6:	68 16 56 e7 9e       	push   0x9ee75616
c00088db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088e3:	e8 ff 07 02 00       	call   c00290e7 <__ltdf2>
c00088e8:	83 c4 10             	add    esp,0x10
c00088eb:	85 c0                	test   eax,eax
c00088ed:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088f1:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088f5:	79 05                	jns    c00088fc <src_process+0x17a>
c00088f7:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088fa:	eb 03                	jmp    c00088ff <src_process+0x17d>
c00088fc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088ff:	83 c4 1c             	add    esp,0x1c
c0008902:	5b                   	pop    ebx
c0008903:	5e                   	pop    esi
c0008904:	5f                   	pop    edi
c0008905:	5d                   	pop    ebp
c0008906:	ff e0                	jmp    eax
c0008908:	b8 02 00 00 00       	mov    eax,0x2
c000890d:	eb 21                	jmp    c0008930 <src_process+0x1ae>
c000890f:	b8 07 00 00 00       	mov    eax,0x7
c0008914:	eb 1a                	jmp    c0008930 <src_process+0x1ae>
c0008916:	b8 12 00 00 00       	mov    eax,0x12
c000891b:	eb 13                	jmp    c0008930 <src_process+0x1ae>
c000891d:	b8 03 00 00 00       	mov    eax,0x3
c0008922:	eb 0c                	jmp    c0008930 <src_process+0x1ae>
c0008924:	b8 04 00 00 00       	mov    eax,0x4
c0008929:	eb 05                	jmp    c0008930 <src_process+0x1ae>
c000892b:	b8 06 00 00 00       	mov    eax,0x6
c0008930:	83 c4 1c             	add    esp,0x1c
c0008933:	5b                   	pop    ebx
c0008934:	5e                   	pop    esi
c0008935:	5f                   	pop    edi
c0008936:	5d                   	pop    ebp
c0008937:	c3                   	ret    

c0008938 <src_callback_read>:
c0008938:	55                   	push   ebp
c0008939:	57                   	push   edi
c000893a:	56                   	push   esi
c000893b:	53                   	push   ebx
c000893c:	83 ec 3c             	sub    esp,0x3c
c000893f:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008943:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008947:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000894b:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c000894f:	85 ed                	test   ebp,ebp
c0008951:	0f 8e 52 01 00 00    	jle    c0008aa9 <src_callback_read+0x171>
c0008957:	85 db                	test   ebx,ebx
c0008959:	0f 84 4a 01 00 00    	je     c0008aa9 <src_callback_read+0x171>
c000895f:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008966:	74 0c                	je     c0008974 <src_callback_read+0x3c>
c0008968:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c000896f:	e9 35 01 00 00       	jmp    c0008aa9 <src_callback_read+0x171>
c0008974:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008978:	75 0c                	jne    c0008986 <src_callback_read+0x4e>
c000897a:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008981:	e9 23 01 00 00       	jmp    c0008aa9 <src_callback_read+0x171>
c0008986:	51                   	push   ecx
c0008987:	6a 24                	push   0x24
c0008989:	6a 00                	push   0x0
c000898b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000898f:	50                   	push   eax
c0008990:	e8 e3 7d ff ff       	call   c0000778 <memset>
c0008995:	83 c4 10             	add    esp,0x10
c0008998:	68 00 00 70 3f       	push   0x3f700000
c000899d:	6a 00                	push   0x0
c000899f:	57                   	push   edi
c00089a0:	56                   	push   esi
c00089a1:	e8 41 07 02 00       	call   c00290e7 <__ltdf2>
c00089a6:	83 c4 10             	add    esp,0x10
c00089a9:	85 c0                	test   eax,eax
c00089ab:	78 3e                	js     c00089eb <src_callback_read+0xb3>
c00089ad:	68 00 00 70 40       	push   0x40700000
c00089b2:	6a 00                	push   0x0
c00089b4:	57                   	push   edi
c00089b5:	56                   	push   esi
c00089b6:	e8 0e 07 02 00       	call   c00290c9 <__gtdf2>
c00089bb:	83 c4 10             	add    esp,0x10
c00089be:	85 c0                	test   eax,eax
c00089c0:	7f 29                	jg     c00089eb <src_callback_read+0xb3>
c00089c2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089c6:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089ce:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089d2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089d5:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089dd:	31 f6                	xor    esi,esi
c00089df:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089e6:	e9 97 00 00 00       	jmp    c0008a82 <src_callback_read+0x14a>
c00089eb:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089f2:	e9 b2 00 00 00       	jmp    c0008aa9 <src_callback_read+0x171>
c00089f7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089ff:	52                   	push   edx
c0008a00:	52                   	push   edx
c0008a01:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a05:	50                   	push   eax
c0008a06:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a09:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a10:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a18:	83 c4 10             	add    esp,0x10
c0008a1b:	85 c0                	test   eax,eax
c0008a1d:	75 08                	jne    c0008a27 <src_callback_read+0xef>
c0008a1f:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a27:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2e:	50                   	push   eax
c0008a2f:	50                   	push   eax
c0008a30:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a34:	50                   	push   eax
c0008a35:	53                   	push   ebx
c0008a36:	e8 47 fd ff ff       	call   c0008782 <src_process>
c0008a3b:	83 c4 10             	add    esp,0x10
c0008a3e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a45:	85 c0                	test   eax,eax
c0008a47:	75 49                	jne    c0008a92 <src_callback_read+0x15a>
c0008a49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a4d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a50:	89 f9                	mov    ecx,edi
c0008a52:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a56:	0f af ca             	imul   ecx,edx
c0008a59:	c1 e1 02             	shl    ecx,0x2
c0008a5c:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a60:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a64:	0f af d1             	imul   edx,ecx
c0008a67:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a6b:	c1 e2 02             	shl    edx,0x2
c0008a6e:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a72:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a75:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a7a:	74 12                	je     c0008a8e <src_callback_read+0x156>
c0008a7c:	39 d5                	cmp    ebp,edx
c0008a7e:	7e 14                	jle    c0008a94 <src_callback_read+0x15c>
c0008a80:	89 d6                	mov    esi,edx
c0008a82:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a87:	75 9e                	jne    c0008a27 <src_callback_read+0xef>
c0008a89:	e9 69 ff ff ff       	jmp    c00089f7 <src_callback_read+0xbf>
c0008a8e:	85 c9                	test   ecx,ecx
c0008a90:	75 ea                	jne    c0008a7c <src_callback_read+0x144>
c0008a92:	89 f2                	mov    edx,esi
c0008a94:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a98:	85 c0                	test   eax,eax
c0008a9a:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008aa1:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008aa4:	74 05                	je     c0008aab <src_callback_read+0x173>
c0008aa6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008aa9:	31 d2                	xor    edx,edx
c0008aab:	83 c4 3c             	add    esp,0x3c
c0008aae:	89 d0                	mov    eax,edx
c0008ab0:	5b                   	pop    ebx
c0008ab1:	5e                   	pop    esi
c0008ab2:	5f                   	pop    edi
c0008ab3:	5d                   	pop    ebp
c0008ab4:	c3                   	ret    

c0008ab5 <src_set_ratio>:
c0008ab5:	57                   	push   edi
c0008ab6:	ba 02 00 00 00       	mov    edx,0x2
c0008abb:	56                   	push   esi
c0008abc:	53                   	push   ebx
c0008abd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ac1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ac5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008ac9:	85 db                	test   ebx,ebx
c0008acb:	74 4c                	je     c0008b19 <src_set_ratio+0x64>
c0008acd:	ba 07 00 00 00       	mov    edx,0x7
c0008ad2:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ad6:	74 41                	je     c0008b19 <src_set_ratio+0x64>
c0008ad8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008adc:	74 3b                	je     c0008b19 <src_set_ratio+0x64>
c0008ade:	68 00 00 70 3f       	push   0x3f700000
c0008ae3:	6a 00                	push   0x0
c0008ae5:	57                   	push   edi
c0008ae6:	56                   	push   esi
c0008ae7:	e8 fb 05 02 00       	call   c00290e7 <__ltdf2>
c0008aec:	83 c4 10             	add    esp,0x10
c0008aef:	ba 06 00 00 00       	mov    edx,0x6
c0008af4:	85 c0                	test   eax,eax
c0008af6:	78 21                	js     c0008b19 <src_set_ratio+0x64>
c0008af8:	68 00 00 70 40       	push   0x40700000
c0008afd:	6a 00                	push   0x0
c0008aff:	57                   	push   edi
c0008b00:	56                   	push   esi
c0008b01:	e8 c3 05 02 00       	call   c00290c9 <__gtdf2>
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	ba 06 00 00 00       	mov    edx,0x6
c0008b0e:	85 c0                	test   eax,eax
c0008b10:	7f 07                	jg     c0008b19 <src_set_ratio+0x64>
c0008b12:	89 33                	mov    DWORD PTR [ebx],esi
c0008b14:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b17:	31 d2                	xor    edx,edx
c0008b19:	5b                   	pop    ebx
c0008b1a:	89 d0                	mov    eax,edx
c0008b1c:	5e                   	pop    esi
c0008b1d:	5f                   	pop    edi
c0008b1e:	c3                   	ret    

c0008b1f <src_get_channels>:
c0008b1f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b23:	b8 02 00 00 00       	mov    eax,0x2
c0008b28:	85 d2                	test   edx,edx
c0008b2a:	74 14                	je     c0008b40 <src_get_channels+0x21>
c0008b2c:	b8 07 00 00 00       	mov    eax,0x7
c0008b31:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b35:	74 09                	je     c0008b40 <src_get_channels+0x21>
c0008b37:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b3b:	74 03                	je     c0008b40 <src_get_channels+0x21>
c0008b3d:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b40:	c3                   	ret    

c0008b41 <src_reset>:
c0008b41:	53                   	push   ebx
c0008b42:	b8 02 00 00 00       	mov    eax,0x2
c0008b47:	83 ec 08             	sub    esp,0x8
c0008b4a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b4e:	85 db                	test   ebx,ebx
c0008b50:	74 36                	je     c0008b88 <src_reset+0x47>
c0008b52:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b55:	85 c0                	test   eax,eax
c0008b57:	74 09                	je     c0008b62 <src_reset+0x21>
c0008b59:	83 ec 0c             	sub    esp,0xc
c0008b5c:	53                   	push   ebx
c0008b5d:	ff d0                	call   eax
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	31 c0                	xor    eax,eax
c0008b64:	31 d2                	xor    edx,edx
c0008b66:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b69:	89 03                	mov    DWORD PTR [ebx],eax
c0008b6b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b6e:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b71:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b78:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b7f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b86:	31 c0                	xor    eax,eax
c0008b88:	83 c4 08             	add    esp,0x8
c0008b8b:	5b                   	pop    ebx
c0008b8c:	c3                   	ret    

c0008b8d <src_new>:
c0008b8d:	57                   	push   edi
c0008b8e:	56                   	push   esi
c0008b8f:	53                   	push   ebx
c0008b90:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b94:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b98:	85 f6                	test   esi,esi
c0008b9a:	74 73                	je     c0008c0f <src_new+0x82>
c0008b9c:	85 ff                	test   edi,edi
c0008b9e:	7f 08                	jg     c0008ba8 <src_new+0x1b>
c0008ba0:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008ba6:	eb 1e                	jmp    c0008bc6 <src_new+0x39>
c0008ba8:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bae:	50                   	push   eax
c0008baf:	50                   	push   eax
c0008bb0:	6a 3c                	push   0x3c
c0008bb2:	6a 01                	push   0x1
c0008bb4:	e8 2b 6d 00 00       	call   c000f8e4 <calloc>
c0008bb9:	83 c4 10             	add    esp,0x10
c0008bbc:	89 c3                	mov    ebx,eax
c0008bbe:	85 c0                	test   eax,eax
c0008bc0:	75 10                	jne    c0008bd2 <src_new+0x45>
c0008bc2:	85 f6                	test   esi,esi
c0008bc4:	75 04                	jne    c0008bca <src_new+0x3d>
c0008bc6:	31 db                	xor    ebx,ebx
c0008bc8:	eb 4b                	jmp    c0008c15 <src_new+0x88>
c0008bca:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bd0:	eb 43                	jmp    c0008c15 <src_new+0x88>
c0008bd2:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bd5:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bdc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008be0:	e8 1d fb ff ff       	call   c0008702 <psrc_set_converter>
c0008be5:	85 c0                	test   eax,eax
c0008be7:	74 18                	je     c0008c01 <src_new+0x74>
c0008be9:	85 f6                	test   esi,esi
c0008beb:	74 06                	je     c0008bf3 <src_new+0x66>
c0008bed:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bf3:	83 ec 0c             	sub    esp,0xc
c0008bf6:	53                   	push   ebx
c0008bf7:	31 db                	xor    ebx,ebx
c0008bf9:	e8 c6 6c 00 00       	call   c000f8c4 <free>
c0008bfe:	83 c4 10             	add    esp,0x10
c0008c01:	83 ec 0c             	sub    esp,0xc
c0008c04:	53                   	push   ebx
c0008c05:	e8 37 ff ff ff       	call   c0008b41 <src_reset>
c0008c0a:	83 c4 10             	add    esp,0x10
c0008c0d:	eb 06                	jmp    c0008c15 <src_new+0x88>
c0008c0f:	85 ff                	test   edi,edi
c0008c11:	7f 9b                	jg     c0008bae <src_new+0x21>
c0008c13:	eb b1                	jmp    c0008bc6 <src_new+0x39>
c0008c15:	89 d8                	mov    eax,ebx
c0008c17:	5b                   	pop    ebx
c0008c18:	5e                   	pop    esi
c0008c19:	5f                   	pop    edi
c0008c1a:	c3                   	ret    

c0008c1b <src_callback_new>:
c0008c1b:	56                   	push   esi
c0008c1c:	53                   	push   ebx
c0008c1d:	53                   	push   ebx
c0008c1e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c26:	85 f6                	test   esi,esi
c0008c28:	75 0e                	jne    c0008c38 <src_callback_new+0x1d>
c0008c2a:	31 db                	xor    ebx,ebx
c0008c2c:	85 c0                	test   eax,eax
c0008c2e:	74 47                	je     c0008c77 <src_callback_new+0x5c>
c0008c30:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c36:	eb 3f                	jmp    c0008c77 <src_callback_new+0x5c>
c0008c38:	85 c0                	test   eax,eax
c0008c3a:	74 06                	je     c0008c42 <src_callback_new+0x27>
c0008c3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c42:	51                   	push   ecx
c0008c43:	50                   	push   eax
c0008c44:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c4c:	e8 3c ff ff ff       	call   c0008b8d <src_new>
c0008c51:	83 c4 10             	add    esp,0x10
c0008c54:	89 c3                	mov    ebx,eax
c0008c56:	85 c0                	test   eax,eax
c0008c58:	74 1d                	je     c0008c77 <src_callback_new+0x5c>
c0008c5a:	83 ec 0c             	sub    esp,0xc
c0008c5d:	50                   	push   eax
c0008c5e:	e8 de fe ff ff       	call   c0008b41 <src_reset>
c0008c63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c67:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c6e:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c71:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c74:	83 c4 10             	add    esp,0x10
c0008c77:	89 d8                	mov    eax,ebx
c0008c79:	5a                   	pop    edx
c0008c7a:	5b                   	pop    ebx
c0008c7b:	5e                   	pop    esi
c0008c7c:	c3                   	ret    

c0008c7d <src_get_name>:
c0008c7d:	53                   	push   ebx
c0008c7e:	83 ec 14             	sub    esp,0x14
c0008c81:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c85:	53                   	push   ebx
c0008c86:	e8 d0 4f 00 00       	call   c000dc5b <sinc_get_name>
c0008c8b:	83 c4 10             	add    esp,0x10
c0008c8e:	85 c0                	test   eax,eax
c0008c90:	75 1d                	jne    c0008caf <src_get_name+0x32>
c0008c92:	83 ec 0c             	sub    esp,0xc
c0008c95:	53                   	push   ebx
c0008c96:	e8 80 57 00 00       	call   c000e41b <zoh_get_name>
c0008c9b:	83 c4 10             	add    esp,0x10
c0008c9e:	85 c0                	test   eax,eax
c0008ca0:	75 0d                	jne    c0008caf <src_get_name+0x32>
c0008ca2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008ca6:	83 c4 08             	add    esp,0x8
c0008ca9:	5b                   	pop    ebx
c0008caa:	e9 74 0b 00 00       	jmp    c0009823 <linear_get_name>
c0008caf:	83 c4 08             	add    esp,0x8
c0008cb2:	5b                   	pop    ebx
c0008cb3:	c3                   	ret    

c0008cb4 <src_get_description>:
c0008cb4:	53                   	push   ebx
c0008cb5:	83 ec 14             	sub    esp,0x14
c0008cb8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cbc:	53                   	push   ebx
c0008cbd:	e8 ac 4f 00 00       	call   c000dc6e <sinc_get_description>
c0008cc2:	83 c4 10             	add    esp,0x10
c0008cc5:	85 c0                	test   eax,eax
c0008cc7:	75 1d                	jne    c0008ce6 <src_get_description+0x32>
c0008cc9:	83 ec 0c             	sub    esp,0xc
c0008ccc:	53                   	push   ebx
c0008ccd:	e8 58 57 00 00       	call   c000e42a <zoh_get_description>
c0008cd2:	83 c4 10             	add    esp,0x10
c0008cd5:	85 c0                	test   eax,eax
c0008cd7:	75 0d                	jne    c0008ce6 <src_get_description+0x32>
c0008cd9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cdd:	83 c4 08             	add    esp,0x8
c0008ce0:	5b                   	pop    ebx
c0008ce1:	e9 4c 0b 00 00       	jmp    c0009832 <linear_get_description>
c0008ce6:	83 c4 08             	add    esp,0x8
c0008ce9:	5b                   	pop    ebx
c0008cea:	c3                   	ret    

c0008ceb <src_get_version>:
c0008ceb:	b8 20 a6 02 c0       	mov    eax,0xc002a620
c0008cf0:	c3                   	ret    

c0008cf1 <src_is_valid_ratio>:
c0008cf1:	83 ec 1c             	sub    esp,0x1c
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cfc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d00:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d04:	68 00 00 70 3f       	push   0x3f700000
c0008d09:	6a 00                	push   0x0
c0008d0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d13:	e8 cf 03 02 00       	call   c00290e7 <__ltdf2>
c0008d18:	83 c4 10             	add    esp,0x10
c0008d1b:	31 d2                	xor    edx,edx
c0008d1d:	85 c0                	test   eax,eax
c0008d1f:	78 1e                	js     c0008d3f <src_is_valid_ratio+0x4e>
c0008d21:	68 00 00 70 40       	push   0x40700000
c0008d26:	6a 00                	push   0x0
c0008d28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d30:	e8 94 03 02 00       	call   c00290c9 <__gtdf2>
c0008d35:	31 d2                	xor    edx,edx
c0008d37:	83 c4 10             	add    esp,0x10
c0008d3a:	85 c0                	test   eax,eax
c0008d3c:	0f 9e c2             	setle  dl
c0008d3f:	89 d0                	mov    eax,edx
c0008d41:	83 c4 1c             	add    esp,0x1c
c0008d44:	c3                   	ret    

c0008d45 <src_error>:
c0008d45:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d49:	31 c0                	xor    eax,eax
c0008d4b:	85 d2                	test   edx,edx
c0008d4d:	74 03                	je     c0008d52 <src_error+0xd>
c0008d4f:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d52:	c3                   	ret    

c0008d53 <src_strerror>:
c0008d53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d57:	31 c0                	xor    eax,eax
c0008d59:	83 fa 17             	cmp    edx,0x17
c0008d5c:	77 07                	ja     c0008d65 <src_strerror+0x12>
c0008d5e:	8b 04 95 80 aa 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5580]
c0008d65:	c3                   	ret    

c0008d66 <src_simple>:
c0008d66:	56                   	push   esi
c0008d67:	53                   	push   ebx
c0008d68:	83 ec 18             	sub    esp,0x18
c0008d6b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d6f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d73:	50                   	push   eax
c0008d74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d78:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d7c:	e8 0c fe ff ff       	call   c0008b8d <src_new>
c0008d81:	83 c4 10             	add    esp,0x10
c0008d84:	85 c0                	test   eax,eax
c0008d86:	75 06                	jne    c0008d8e <src_simple+0x28>
c0008d88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d8c:	eb 25                	jmp    c0008db3 <src_simple+0x4d>
c0008d8e:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d95:	89 c3                	mov    ebx,eax
c0008d97:	50                   	push   eax
c0008d98:	50                   	push   eax
c0008d99:	56                   	push   esi
c0008d9a:	53                   	push   ebx
c0008d9b:	e8 e2 f9 ff ff       	call   c0008782 <src_process>
c0008da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008da3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008da7:	e8 9a f9 ff ff       	call   c0008746 <src_delete>
c0008dac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008db0:	83 c4 10             	add    esp,0x10
c0008db3:	83 c4 14             	add    esp,0x14
c0008db6:	5b                   	pop    ebx
c0008db7:	5e                   	pop    esi
c0008db8:	c3                   	ret    

c0008db9 <src_short_to_float_array>:
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 18             	sub    esp,0x18
c0008dbd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dc1:	85 db                	test   ebx,ebx
c0008dc3:	74 54                	je     c0008e19 <src_short_to_float_array+0x60>
c0008dc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dc9:	4b                   	dec    ebx
c0008dca:	83 ec 0c             	sub    esp,0xc
c0008dcd:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dd1:	50                   	push   eax
c0008dd2:	e8 a4 00 02 00       	call   c0028e7b <__floatsidf>
c0008dd7:	83 c4 10             	add    esp,0x10
c0008dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008de2:	68 00 00 00 3f       	push   0x3f000000
c0008de7:	6a 00                	push   0x0
c0008de9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ded:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df1:	e8 22 fa 01 00       	call   c0028818 <__muldf3>
c0008df6:	59                   	pop    ecx
c0008df7:	59                   	pop    ecx
c0008df8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dfc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e08:	e8 de 02 02 00       	call   c00290eb <__truncdfsf2>
c0008e0d:	83 c4 10             	add    esp,0x10
c0008e10:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e14:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e17:	eb a8                	jmp    c0008dc1 <src_short_to_float_array+0x8>
c0008e19:	83 c4 18             	add    esp,0x18
c0008e1c:	5b                   	pop    ebx
c0008e1d:	c3                   	ret    

c0008e1e <src_float_to_short_array>:
c0008e1e:	56                   	push   esi
c0008e1f:	53                   	push   ebx
c0008e20:	83 ec 14             	sub    esp,0x14
c0008e23:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e27:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e2b:	85 db                	test   ebx,ebx
c0008e2d:	0f 84 a4 00 00 00    	je     c0008ed7 <src_float_to_short_array+0xb9>
c0008e33:	83 ec 0c             	sub    esp,0xc
c0008e36:	4b                   	dec    ebx
c0008e37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e3b:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e3e:	e8 cc 03 02 00       	call   c002920f <__extendsfdf2>
c0008e43:	83 c4 10             	add    esp,0x10
c0008e46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e4e:	68 00 00 e0 41       	push   0x41e00000
c0008e53:	6a 00                	push   0x0
c0008e55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e5d:	e8 b6 f9 01 00       	call   c0028818 <__muldf3>
c0008e62:	83 c4 10             	add    esp,0x10
c0008e65:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e69:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e6d:	68 ff ff df 41       	push   0x41dfffff
c0008e72:	68 00 00 c0 ff       	push   0xffc00000
c0008e77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7f:	e8 61 02 02 00       	call   c00290e5 <__gedf2>
c0008e84:	83 c4 10             	add    esp,0x10
c0008e87:	85 c0                	test   eax,eax
c0008e89:	78 08                	js     c0008e93 <src_float_to_short_array+0x75>
c0008e8b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e91:	eb 98                	jmp    c0008e2b <src_float_to_short_array+0xd>
c0008e93:	68 00 00 e0 c1       	push   0xc1e00000
c0008e98:	6a 00                	push   0x0
c0008e9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea2:	e8 42 02 02 00       	call   c00290e9 <__ledf2>
c0008ea7:	83 c4 10             	add    esp,0x10
c0008eaa:	85 c0                	test   eax,eax
c0008eac:	7f 0b                	jg     c0008eb9 <src_float_to_short_array+0x9b>
c0008eae:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008eb4:	e9 72 ff ff ff       	jmp    c0008e2b <src_float_to_short_array+0xd>
c0008eb9:	50                   	push   eax
c0008eba:	50                   	push   eax
c0008ebb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ebf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ec3:	e8 d8 03 02 00       	call   c00292a0 <lrint>
c0008ec8:	83 c4 10             	add    esp,0x10
c0008ecb:	c1 f8 10             	sar    eax,0x10
c0008ece:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ed2:	e9 54 ff ff ff       	jmp    c0008e2b <src_float_to_short_array+0xd>
c0008ed7:	83 c4 14             	add    esp,0x14
c0008eda:	5b                   	pop    ebx
c0008edb:	5e                   	pop    esi
c0008edc:	c3                   	ret    

c0008edd <src_int_to_float_array>:
c0008edd:	53                   	push   ebx
c0008ede:	83 ec 18             	sub    esp,0x18
c0008ee1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ee5:	85 db                	test   ebx,ebx
c0008ee7:	74 52                	je     c0008f3b <src_int_to_float_array+0x5e>
c0008ee9:	83 ec 0c             	sub    esp,0xc
c0008eec:	4b                   	dec    ebx
c0008eed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ef1:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ef4:	e8 82 ff 01 00       	call   c0028e7b <__floatsidf>
c0008ef9:	83 c4 10             	add    esp,0x10
c0008efc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f00:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f04:	68 00 00 00 3e       	push   0x3e000000
c0008f09:	6a 00                	push   0x0
c0008f0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f13:	e8 00 f9 01 00       	call   c0028818 <__muldf3>
c0008f18:	59                   	pop    ecx
c0008f19:	59                   	pop    ecx
c0008f1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f1e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f2a:	e8 bc 01 02 00       	call   c00290eb <__truncdfsf2>
c0008f2f:	83 c4 10             	add    esp,0x10
c0008f32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f36:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f39:	eb aa                	jmp    c0008ee5 <src_int_to_float_array+0x8>
c0008f3b:	83 c4 18             	add    esp,0x18
c0008f3e:	5b                   	pop    ebx
c0008f3f:	c3                   	ret    

c0008f40 <src_float_to_int_array>:
c0008f40:	56                   	push   esi
c0008f41:	53                   	push   ebx
c0008f42:	83 ec 14             	sub    esp,0x14
c0008f45:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f49:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f4d:	85 db                	test   ebx,ebx
c0008f4f:	0f 84 a2 00 00 00    	je     c0008ff7 <src_float_to_int_array+0xb7>
c0008f55:	83 ec 0c             	sub    esp,0xc
c0008f58:	4b                   	dec    ebx
c0008f59:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f5d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f60:	e8 aa 02 02 00       	call   c002920f <__extendsfdf2>
c0008f65:	83 c4 10             	add    esp,0x10
c0008f68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f70:	68 00 00 e0 41       	push   0x41e00000
c0008f75:	6a 00                	push   0x0
c0008f77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f7f:	e8 94 f8 01 00       	call   c0028818 <__muldf3>
c0008f84:	83 c4 10             	add    esp,0x10
c0008f87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8f:	68 ff ff df 41       	push   0x41dfffff
c0008f94:	68 00 00 c0 ff       	push   0xffc00000
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fa1:	e8 3f 01 02 00       	call   c00290e5 <__gedf2>
c0008fa6:	83 c4 10             	add    esp,0x10
c0008fa9:	85 c0                	test   eax,eax
c0008fab:	78 09                	js     c0008fb6 <src_float_to_int_array+0x76>
c0008fad:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fb4:	eb 97                	jmp    c0008f4d <src_float_to_int_array+0xd>
c0008fb6:	68 00 00 e0 c1       	push   0xc1e00000
c0008fbb:	6a 00                	push   0x0
c0008fbd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fc5:	e8 1f 01 02 00       	call   c00290e9 <__ledf2>
c0008fca:	83 c4 10             	add    esp,0x10
c0008fcd:	85 c0                	test   eax,eax
c0008fcf:	7f 0c                	jg     c0008fdd <src_float_to_int_array+0x9d>
c0008fd1:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fd8:	e9 70 ff ff ff       	jmp    c0008f4d <src_float_to_int_array+0xd>
c0008fdd:	50                   	push   eax
c0008fde:	50                   	push   eax
c0008fdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fe7:	e8 b4 02 02 00       	call   c00292a0 <lrint>
c0008fec:	83 c4 10             	add    esp,0x10
c0008fef:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008ff2:	e9 56 ff ff ff       	jmp    c0008f4d <src_float_to_int_array+0xd>
c0008ff7:	83 c4 14             	add    esp,0x14
c0008ffa:	5b                   	pop    ebx
c0008ffb:	5e                   	pop    esi
c0008ffc:	c3                   	ret    

c0008ffd <linear_vari_process>:
c0008ffd:	55                   	push   ebp
c0008ffe:	31 d2                	xor    edx,edx
c0009000:	57                   	push   edi
c0009001:	56                   	push   esi
c0009002:	53                   	push   ebx
c0009003:	83 ec 3c             	sub    esp,0x3c
c0009006:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000900a:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000900e:	0f 8e d3 07 00 00    	jle    c00097e7 <linear_vari_process+0x7ea>
c0009014:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009018:	ba 05 00 00 00       	mov    edx,0x5
c000901d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009020:	85 db                	test   ebx,ebx
c0009022:	0f 84 bf 07 00 00    	je     c00097e7 <linear_vari_process+0x7ea>
c0009028:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000902b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000902f:	74 19                	je     c000904a <linear_vari_process+0x4d>
c0009031:	31 d2                	xor    edx,edx
c0009033:	39 c2                	cmp    edx,eax
c0009035:	7d 0c                	jge    c0009043 <linear_vari_process+0x46>
c0009037:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009039:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000903c:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009040:	42                   	inc    edx
c0009041:	eb f0                	jmp    c0009033 <linear_vari_process+0x36>
c0009043:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000904a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000904d:	0f af d0             	imul   edx,eax
c0009050:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009053:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009057:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000905e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009061:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009068:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000906c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000906f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009071:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009075:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009079:	68 00 00 70 3f       	push   0x3f700000
c000907e:	6a 00                	push   0x0
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009088:	e8 5a 00 02 00       	call   c00290e7 <__ltdf2>
c000908d:	83 c4 10             	add    esp,0x10
c0009090:	ba 16 00 00 00       	mov    edx,0x16
c0009095:	85 c0                	test   eax,eax
c0009097:	0f 88 4a 07 00 00    	js     c00097e7 <linear_vari_process+0x7ea>
c000909d:	68 00 00 70 40       	push   0x40700000
c00090a2:	6a 00                	push   0x0
c00090a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ac:	e8 18 00 02 00       	call   c00290c9 <__gtdf2>
c00090b1:	83 c4 10             	add    esp,0x10
c00090b4:	ba 16 00 00 00       	mov    edx,0x16
c00090b9:	85 c0                	test   eax,eax
c00090bb:	0f 8f 26 07 00 00    	jg     c00097e7 <linear_vari_process+0x7ea>
c00090c1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090c5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090d3:	68 00 00 f0 3f       	push   0x3ff00000
c00090d8:	6a 00                	push   0x0
c00090da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090e2:	e8 00 00 02 00       	call   c00290e7 <__ltdf2>
c00090e7:	83 c4 10             	add    esp,0x10
c00090ea:	85 c0                	test   eax,eax
c00090ec:	0f 89 89 02 00 00    	jns    c000937b <linear_vari_process+0x37e>
c00090f2:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090f5:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090f8:	0f 8d 7d 02 00 00    	jge    c000937b <linear_vari_process+0x37e>
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009104:	e8 72 fd 01 00       	call   c0028e7b <__floatsidf>
c0009109:	83 c4 10             	add    esp,0x10
c000910c:	89 04 24             	mov    DWORD PTR [esp],eax
c000910f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009113:	68 00 00 f0 3f       	push   0x3ff00000
c0009118:	6a 00                	push   0x0
c000911a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000911e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009122:	e8 74 f0 01 00       	call   c002819b <__adddf3>
c0009127:	83 c4 10             	add    esp,0x10
c000912a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000912e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009132:	52                   	push   edx
c0009133:	50                   	push   eax
c0009134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009138:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913c:	e8 d7 f6 01 00       	call   c0028818 <__muldf3>
c0009141:	5d                   	pop    ebp
c0009142:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009146:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000914d:	e8 29 fd 01 00       	call   c0028e7b <__floatsidf>
c0009152:	83 c4 10             	add    esp,0x10
c0009155:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009159:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000915d:	52                   	push   edx
c000915e:	50                   	push   eax
c000915f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009163:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009167:	e8 2f f0 01 00       	call   c002819b <__adddf3>
c000916c:	59                   	pop    ecx
c000916d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009171:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009175:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009178:	e8 fe fc 01 00       	call   c0028e7b <__floatsidf>
c000917d:	83 c4 10             	add    esp,0x10
c0009180:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009184:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009188:	52                   	push   edx
c0009189:	50                   	push   eax
c000918a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000918e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009192:	e8 4e ff 01 00       	call   c00290e5 <__gedf2>
c0009197:	83 c4 10             	add    esp,0x10
c000919a:	85 c0                	test   eax,eax
c000919c:	0f 89 d9 01 00 00    	jns    c000937b <linear_vari_process+0x37e>
c00091a2:	85 ff                	test   edi,edi
c00091a4:	0f 8e f4 00 00 00    	jle    c000929e <linear_vari_process+0x2a1>
c00091aa:	83 ec 10             	sub    esp,0x10
c00091ad:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091b0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091b3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091b7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ba:	ff 30                	push   DWORD PTR [eax]
c00091bc:	e8 2b f6 01 00       	call   c00287ec <__subdf3>
c00091c1:	83 c4 18             	add    esp,0x18
c00091c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091cc:	52                   	push   edx
c00091cd:	50                   	push   eax
c00091ce:	e8 ad 00 02 00       	call   c0029280 <fabs>
c00091d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091db:	83 c4 10             	add    esp,0x10
c00091de:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091e3:	68 23 42 92 0c       	push   0xc924223
c00091e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091f0:	e8 d4 fe 01 00       	call   c00290c9 <__gtdf2>
c00091f5:	83 c4 10             	add    esp,0x10
c00091f8:	85 c0                	test   eax,eax
c00091fa:	0f 8e 9e 00 00 00    	jle    c000929e <linear_vari_process+0x2a1>
c0009200:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009204:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009207:	8b 00                	mov    eax,DWORD PTR [eax]
c0009209:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000920d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009210:	52                   	push   edx
c0009211:	50                   	push   eax
c0009212:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009215:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009218:	e8 cf f5 01 00       	call   c00287ec <__subdf3>
c000921d:	59                   	pop    ecx
c000921e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009222:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009226:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009229:	e8 4d fc 01 00       	call   c0028e7b <__floatsidf>
c000922e:	83 c4 10             	add    esp,0x10
c0009231:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009235:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009239:	52                   	push   edx
c000923a:	50                   	push   eax
c000923b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000923f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009243:	e8 d0 f5 01 00       	call   c0028818 <__muldf3>
c0009248:	5f                   	pop    edi
c0009249:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000924d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009251:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009254:	e8 22 fc 01 00       	call   c0028e7b <__floatsidf>
c0009259:	83 c4 10             	add    esp,0x10
c000925c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009260:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009264:	52                   	push   edx
c0009265:	50                   	push   eax
c0009266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000926e:	e8 89 f8 01 00       	call   c0028afc <__divdf3>
c0009273:	83 c4 10             	add    esp,0x10
c0009276:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000927a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000927e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009282:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000928e:	e8 08 ef 01 00       	call   c002819b <__adddf3>
c0009293:	83 c4 10             	add    esp,0x10
c0009296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000929a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000929e:	31 ff                	xor    edi,edi
c00092a0:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092a3:	0f 8e 9d 00 00 00    	jle    c0009346 <linear_vari_process+0x349>
c00092a9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092ac:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092b0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092b3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00092bc:	52                   	push   edx
c00092bd:	52                   	push   edx
c00092be:	55                   	push   ebp
c00092bf:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092c2:	47                   	inc    edi
c00092c3:	e8 68 e8 01 00       	call   c0027b30 <__subsf3>
c00092c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cb:	e8 3f ff 01 00       	call   c002920f <__extendsfdf2>
c00092d0:	83 c4 10             	add    esp,0x10
c00092d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092eb:	e8 28 f5 01 00       	call   c0028818 <__muldf3>
c00092f0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092fb:	e8 0f ff 01 00       	call   c002920f <__extendsfdf2>
c0009300:	83 c4 10             	add    esp,0x10
c0009303:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009307:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000930b:	52                   	push   edx
c000930c:	50                   	push   eax
c000930d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009315:	e8 81 ee 01 00       	call   c002819b <__adddf3>
c000931a:	59                   	pop    ecx
c000931b:	5d                   	pop    ebp
c000931c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009324:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009328:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000932c:	e8 ba fd 01 00       	call   c00290eb <__truncdfsf2>
c0009331:	83 c4 10             	add    esp,0x10
c0009334:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009337:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000933b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000933e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009341:	e9 5a ff ff ff       	jmp    c00092a0 <linear_vari_process+0x2a3>
c0009346:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000934a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000934e:	68 00 00 f0 3f       	push   0x3ff00000
c0009353:	6a 00                	push   0x0
c0009355:	e8 a2 f7 01 00       	call   c0028afc <__divdf3>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	89 04 24             	mov    DWORD PTR [esp],eax
c0009360:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009364:	52                   	push   edx
c0009365:	50                   	push   eax
c0009366:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000936a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000936e:	e8 28 ee 01 00       	call   c002819b <__adddf3>
c0009373:	83 c4 10             	add    esp,0x10
c0009376:	e9 50 fd ff ff       	jmp    c00090cb <linear_vari_process+0xce>
c000937b:	50                   	push   eax
c000937c:	50                   	push   eax
c000937d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009381:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009385:	e8 16 ff 01 00       	call   c00292a0 <lrint>
c000938a:	83 ec 0c             	sub    esp,0xc
c000938d:	50                   	push   eax
c000938e:	e8 e8 fa 01 00       	call   c0028e7b <__floatsidf>
c0009393:	83 c4 10             	add    esp,0x10
c0009396:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000939a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000939e:	52                   	push   edx
c000939f:	50                   	push   eax
c00093a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093a8:	e8 3f f4 01 00       	call   c00287ec <__subdf3>
c00093ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093b5:	83 c4 20             	add    esp,0x20
c00093b8:	6a 00                	push   0x0
c00093ba:	6a 00                	push   0x0
c00093bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093c4:	e8 1e fd 01 00       	call   c00290e7 <__ltdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	85 c0                	test   eax,eax
c00093ce:	79 1e                	jns    c00093ee <linear_vari_process+0x3f1>
c00093d0:	68 00 00 f0 3f       	push   0x3ff00000
c00093d5:	6a 00                	push   0x0
c00093d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093df:	e8 b7 ed 01 00       	call   c002819b <__adddf3>
c00093e4:	83 c4 10             	add    esp,0x10
c00093e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00093ea:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093f1:	83 ec 10             	sub    esp,0x10
c00093f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009400:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009404:	e8 e3 f3 01 00       	call   c00287ec <__subdf3>
c0009409:	83 c4 18             	add    esp,0x18
c000940c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009410:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009414:	52                   	push   edx
c0009415:	50                   	push   eax
c0009416:	e8 85 fe 01 00       	call   c00292a0 <lrint>
c000941b:	83 c4 10             	add    esp,0x10
c000941e:	0f af f8             	imul   edi,eax
c0009421:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009424:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009427:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000942a:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000942d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009430:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009434:	0f 8d 13 03 00 00    	jge    c000974d <linear_vari_process+0x750>
c000943a:	83 ec 0c             	sub    esp,0xc
c000943d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009440:	e8 36 fa 01 00       	call   c0028e7b <__floatsidf>
c0009445:	83 c4 10             	add    esp,0x10
c0009448:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000944c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009450:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009454:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009458:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009460:	e8 b3 f3 01 00       	call   c0028818 <__muldf3>
c0009465:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009468:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009470:	e8 06 fa 01 00       	call   c0028e7b <__floatsidf>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009480:	52                   	push   edx
c0009481:	50                   	push   eax
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948a:	e8 0c ed 01 00       	call   c002819b <__adddf3>
c000948f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009492:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009496:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949a:	e8 dc f9 01 00       	call   c0028e7b <__floatsidf>
c000949f:	83 c4 10             	add    esp,0x10
c00094a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094aa:	52                   	push   edx
c00094ab:	50                   	push   eax
c00094ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094b4:	e8 2e fc 01 00       	call   c00290e7 <__ltdf2>
c00094b9:	83 c4 10             	add    esp,0x10
c00094bc:	85 c0                	test   eax,eax
c00094be:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094c2:	0f 89 85 02 00 00    	jns    c000974d <linear_vari_process+0x750>
c00094c8:	85 c9                	test   ecx,ecx
c00094ca:	0f 8e f5 00 00 00    	jle    c00095c5 <linear_vari_process+0x5c8>
c00094d0:	83 ec 10             	sub    esp,0x10
c00094d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094d6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094d9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094dd:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094e0:	ff 30                	push   DWORD PTR [eax]
c00094e2:	e8 05 f3 01 00       	call   c00287ec <__subdf3>
c00094e7:	83 c4 18             	add    esp,0x18
c00094ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094f2:	52                   	push   edx
c00094f3:	50                   	push   eax
c00094f4:	e8 87 fd 01 00       	call   c0029280 <fabs>
c00094f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009501:	83 c4 10             	add    esp,0x10
c0009504:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0009509:	68 23 42 92 0c       	push   0xc924223
c000950e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009512:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009516:	e8 ae fb 01 00       	call   c00290c9 <__gtdf2>
c000951b:	83 c4 10             	add    esp,0x10
c000951e:	85 c0                	test   eax,eax
c0009520:	0f 8e 9f 00 00 00    	jle    c00095c5 <linear_vari_process+0x5c8>
c0009526:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000952a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000952d:	8b 00                	mov    eax,DWORD PTR [eax]
c000952f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009533:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009537:	52                   	push   edx
c0009538:	50                   	push   eax
c0009539:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000953c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000953f:	e8 a8 f2 01 00       	call   c00287ec <__subdf3>
c0009544:	5f                   	pop    edi
c0009545:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009549:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000954d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009550:	e8 26 f9 01 00       	call   c0028e7b <__floatsidf>
c0009555:	83 c4 10             	add    esp,0x10
c0009558:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009560:	52                   	push   edx
c0009561:	50                   	push   eax
c0009562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956a:	e8 a9 f2 01 00       	call   c0028818 <__muldf3>
c000956f:	5d                   	pop    ebp
c0009570:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009574:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009578:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000957b:	e8 fb f8 01 00       	call   c0028e7b <__floatsidf>
c0009580:	83 c4 10             	add    esp,0x10
c0009583:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009587:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000958b:	52                   	push   edx
c000958c:	50                   	push   eax
c000958d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009595:	e8 62 f5 01 00       	call   c0028afc <__divdf3>
c000959a:	83 c4 10             	add    esp,0x10
c000959d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095a1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095a5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095b5:	e8 e1 eb 01 00       	call   c002819b <__adddf3>
c00095ba:	83 c4 10             	add    esp,0x10
c00095bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095c5:	31 ff                	xor    edi,edi
c00095c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095ca:	39 f8                	cmp    eax,edi
c00095cc:	0f 8e ac 00 00 00    	jle    c000967e <linear_vari_process+0x681>
c00095d2:	8b 16                	mov    edx,DWORD PTR [esi]
c00095d4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095d7:	29 c1                	sub    ecx,eax
c00095d9:	89 c8                	mov    eax,ecx
c00095db:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095de:	01 f8                	add    eax,edi
c00095e0:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095e4:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095e7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095ee:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095f1:	51                   	push   ecx
c00095f2:	01 f8                	add    eax,edi
c00095f4:	51                   	push   ecx
c00095f5:	47                   	inc    edi
c00095f6:	55                   	push   ebp
c00095f7:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095fa:	e8 31 e5 01 00       	call   c0027b30 <__subsf3>
c00095ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009602:	e8 08 fc 01 00       	call   c002920f <__extendsfdf2>
c0009607:	83 c4 10             	add    esp,0x10
c000960a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000960e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009612:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009616:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000961a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000961e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009622:	e8 f1 f1 01 00       	call   c0028818 <__muldf3>
c0009627:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000962a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000962e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009632:	e8 d8 fb 01 00       	call   c002920f <__extendsfdf2>
c0009637:	83 c4 10             	add    esp,0x10
c000963a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000963e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009642:	52                   	push   edx
c0009643:	50                   	push   eax
c0009644:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009648:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000964c:	e8 4a eb 01 00       	call   c002819b <__adddf3>
c0009651:	5d                   	pop    ebp
c0009652:	59                   	pop    ecx
c0009653:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009657:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000965b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009663:	e8 83 fa 01 00       	call   c00290eb <__truncdfsf2>
c0009668:	83 c4 10             	add    esp,0x10
c000966b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000966f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009673:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009676:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009679:	e9 49 ff ff ff       	jmp    c00095c7 <linear_vari_process+0x5ca>
c000967e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009686:	68 00 00 f0 3f       	push   0x3ff00000
c000968b:	6a 00                	push   0x0
c000968d:	e8 6a f4 01 00       	call   c0028afc <__divdf3>
c0009692:	83 c4 10             	add    esp,0x10
c0009695:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009699:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000969d:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096a1:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096ad:	e8 e9 ea 01 00       	call   c002819b <__adddf3>
c00096b2:	59                   	pop    ecx
c00096b3:	5f                   	pop    edi
c00096b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c4:	e8 d7 fb 01 00       	call   c00292a0 <lrint>
c00096c9:	83 ec 0c             	sub    esp,0xc
c00096cc:	50                   	push   eax
c00096cd:	e8 a9 f7 01 00       	call   c0028e7b <__floatsidf>
c00096d2:	83 c4 10             	add    esp,0x10
c00096d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096d9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096dd:	52                   	push   edx
c00096de:	50                   	push   eax
c00096df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096e7:	e8 00 f1 01 00       	call   c00287ec <__subdf3>
c00096ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096f0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096f4:	83 c4 20             	add    esp,0x20
c00096f7:	6a 00                	push   0x0
c00096f9:	6a 00                	push   0x0
c00096fb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096ff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009703:	e8 df f9 01 00       	call   c00290e7 <__ltdf2>
c0009708:	83 c4 10             	add    esp,0x10
c000970b:	85 c0                	test   eax,eax
c000970d:	79 1e                	jns    c000972d <linear_vari_process+0x730>
c000970f:	68 00 00 f0 3f       	push   0x3ff00000
c0009714:	6a 00                	push   0x0
c0009716:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000971e:	e8 78 ea 01 00       	call   c002819b <__adddf3>
c0009723:	83 c4 10             	add    esp,0x10
c0009726:	89 04 24             	mov    DWORD PTR [esp],eax
c0009729:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000972d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009730:	83 ec 10             	sub    esp,0x10
c0009733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000973b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000973f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009743:	e8 a4 f0 01 00       	call   c00287ec <__subdf3>
c0009748:	e9 bc fc ff ff       	jmp    c0009409 <linear_vari_process+0x40c>
c000974d:	39 fd                	cmp    ebp,edi
c000974f:	7d 38                	jge    c0009789 <linear_vari_process+0x78c>
c0009751:	83 ec 0c             	sub    esp,0xc
c0009754:	89 f8                	mov    eax,edi
c0009756:	29 e8                	sub    eax,ebp
c0009758:	99                   	cdq    
c0009759:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000975c:	50                   	push   eax
c000975d:	e8 19 f7 01 00       	call   c0028e7b <__floatsidf>
c0009762:	83 c4 10             	add    esp,0x10
c0009765:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009769:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000976d:	52                   	push   edx
c000976e:	50                   	push   eax
c000976f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009773:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009777:	e8 1f ea 01 00       	call   c002819b <__adddf3>
c000977c:	83 c4 10             	add    esp,0x10
c000977f:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009782:	89 04 24             	mov    DWORD PTR [esp],eax
c0009785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009789:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000978d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009790:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009794:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009797:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000979a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000979d:	85 c0                	test   eax,eax
c000979f:	7f 29                	jg     c00097ca <linear_vari_process+0x7cd>
c00097a1:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097ad:	89 01                	mov    DWORD PTR [ecx],eax
c00097af:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097b5:	99                   	cdq    
c00097b6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b9:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097bc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097bf:	99                   	cdq    
c00097c0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097c3:	31 d2                	xor    edx,edx
c00097c5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097c8:	eb 1d                	jmp    c00097e7 <linear_vari_process+0x7ea>
c00097ca:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097cd:	31 d2                	xor    edx,edx
c00097cf:	29 c8                	sub    eax,ecx
c00097d1:	c1 e0 02             	shl    eax,0x2
c00097d4:	39 d1                	cmp    ecx,edx
c00097d6:	7e c9                	jle    c00097a1 <linear_vari_process+0x7a4>
c00097d8:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097da:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097dd:	83 c0 04             	add    eax,0x4
c00097e0:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097e4:	42                   	inc    edx
c00097e5:	eb ed                	jmp    c00097d4 <linear_vari_process+0x7d7>
c00097e7:	83 c4 3c             	add    esp,0x3c
c00097ea:	89 d0                	mov    eax,edx
c00097ec:	5b                   	pop    ebx
c00097ed:	5e                   	pop    esi
c00097ee:	5f                   	pop    edi
c00097ef:	5d                   	pop    ebp
c00097f0:	c3                   	ret    

c00097f1 <linear_reset>:
c00097f1:	83 ec 0c             	sub    esp,0xc
c00097f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097fb:	85 c0                	test   eax,eax
c00097fd:	74 20                	je     c000981f <linear_reset+0x2e>
c00097ff:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009802:	83 c0 1c             	add    eax,0x1c
c0009805:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0009808:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000980f:	c1 e2 02             	shl    edx,0x2
c0009812:	51                   	push   ecx
c0009813:	52                   	push   edx
c0009814:	6a 00                	push   0x0
c0009816:	50                   	push   eax
c0009817:	e8 5c 6f ff ff       	call   c0000778 <memset>
c000981c:	83 c4 10             	add    esp,0x10
c000981f:	83 c4 0c             	add    esp,0xc
c0009822:	c3                   	ret    

c0009823 <linear_get_name>:
c0009823:	31 c0                	xor    eax,eax
c0009825:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982a:	75 05                	jne    c0009831 <linear_get_name+0xe>
c000982c:	b8 e0 aa 02 c0       	mov    eax,0xc002aae0
c0009831:	c3                   	ret    

c0009832 <linear_get_description>:
c0009832:	31 c0                	xor    eax,eax
c0009834:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009839:	75 05                	jne    c0009840 <linear_get_description+0xe>
c000983b:	b8 f4 aa 02 c0       	mov    eax,0xc002aaf4
c0009840:	c3                   	ret    

c0009841 <linear_set_converter>:
c0009841:	53                   	push   ebx
c0009842:	b8 0a 00 00 00       	mov    eax,0xa
c0009847:	83 ec 08             	sub    esp,0x8
c000984a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000984e:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009853:	75 6e                	jne    c00098c3 <linear_set_converter+0x82>
c0009855:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009858:	85 c0                	test   eax,eax
c000985a:	74 13                	je     c000986f <linear_set_converter+0x2e>
c000985c:	83 ec 0c             	sub    esp,0xc
c000985f:	50                   	push   eax
c0009860:	e8 5f 60 00 00       	call   c000f8c4 <free>
c0009865:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000986c:	83 c4 10             	add    esp,0x10
c000986f:	50                   	push   eax
c0009870:	50                   	push   eax
c0009871:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009874:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000987b:	50                   	push   eax
c000987c:	6a 01                	push   0x1
c000987e:	e8 61 60 00 00       	call   c000f8e4 <calloc>
c0009883:	83 c4 10             	add    esp,0x10
c0009886:	89 c2                	mov    edx,eax
c0009888:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000988b:	85 d2                	test   edx,edx
c000988d:	b8 01 00 00 00       	mov    eax,0x1
c0009892:	74 2f                	je     c00098c3 <linear_set_converter+0x82>
c0009894:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009897:	83 ec 0c             	sub    esp,0xc
c000989a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000989d:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098a3:	c7 43 24 fd 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ffd
c00098aa:	c7 43 20 fd 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ffd
c00098b1:	c7 43 28 f1 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097f1
c00098b8:	53                   	push   ebx
c00098b9:	e8 33 ff ff ff       	call   c00097f1 <linear_reset>
c00098be:	83 c4 10             	add    esp,0x10
c00098c1:	31 c0                	xor    eax,eax
c00098c3:	83 c4 08             	add    esp,0x8
c00098c6:	5b                   	pop    ebx
c00098c7:	c3                   	ret    

c00098c8 <int_to_fp>:
c00098c8:	c1 e0 0c             	shl    eax,0xc
c00098cb:	c3                   	ret    

c00098cc <fp_to_int>:
c00098cc:	c1 f8 0c             	sar    eax,0xc
c00098cf:	c3                   	ret    

c00098d0 <fp_fraction_part>:
c00098d0:	25 ff 0f 00 00       	and    eax,0xfff
c00098d5:	c3                   	ret    

c00098d6 <fp_to_double>:
c00098d6:	83 ec 1c             	sub    esp,0x1c
c00098d9:	e8 f2 ff ff ff       	call   c00098d0 <fp_fraction_part>
c00098de:	83 ec 0c             	sub    esp,0xc
c00098e1:	50                   	push   eax
c00098e2:	e8 94 f5 01 00       	call   c0028e7b <__floatsidf>
c00098e7:	83 c4 10             	add    esp,0x10
c00098ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098f2:	68 00 00 30 3f       	push   0x3f300000
c00098f7:	6a 00                	push   0x0
c00098f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009901:	e8 12 ef 01 00       	call   c0028818 <__muldf3>
c0009906:	83 c4 2c             	add    esp,0x2c
c0009909:	c3                   	ret    

c000990a <calc_output_single>:
c000990a:	55                   	push   ebp
c000990b:	57                   	push   edi
c000990c:	56                   	push   esi
c000990d:	89 c6                	mov    esi,eax
c000990f:	53                   	push   ebx
c0009910:	89 d3                	mov    ebx,edx
c0009912:	83 ec 4c             	sub    esp,0x4c
c0009915:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009919:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000991c:	e8 a7 ff ff ff       	call   c00098c8 <int_to_fp>
c0009921:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009924:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009928:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000992c:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009930:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009933:	99                   	cdq    
c0009934:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000993c:	f7 fb                	idiv   ebx
c000993e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009946:	89 da                	mov    edx,ebx
c0009948:	0f af d0             	imul   edx,eax
c000994b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000994f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009953:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009957:	29 c2                	sub    edx,eax
c0009959:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009960:	83 c5 04             	add    ebp,0x4
c0009963:	e8 6e ff ff ff       	call   c00098d6 <fp_to_double>
c0009968:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000996c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009974:	e8 53 ff ff ff       	call   c00098cc <fp_to_int>
c0009979:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000997c:	52                   	push   edx
c000997d:	52                   	push   edx
c000997e:	51                   	push   ecx
c000997f:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009983:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009987:	e8 a4 e1 01 00       	call   c0027b30 <__subsf3>
c000998c:	89 04 24             	mov    DWORD PTR [esp],eax
c000998f:	e8 7b f8 01 00       	call   c002920f <__extendsfdf2>
c0009994:	83 c4 10             	add    esp,0x10
c0009997:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000999b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000999f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099af:	e8 64 ee 01 00       	call   c0028818 <__muldf3>
c00099b4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099b8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099bc:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099bf:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099c3:	e8 47 f8 01 00       	call   c002920f <__extendsfdf2>
c00099c8:	83 c4 10             	add    esp,0x10
c00099cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d3:	52                   	push   edx
c00099d4:	50                   	push   eax
c00099d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099dd:	e8 b9 e7 01 00       	call   c002819b <__adddf3>
c00099e2:	59                   	pop    ecx
c00099e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099eb:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099f1:	e8 19 f8 01 00       	call   c002920f <__extendsfdf2>
c00099f6:	83 c4 10             	add    esp,0x10
c00099f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099fd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a01:	52                   	push   edx
c0009a02:	50                   	push   eax
c0009a03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a0b:	e8 08 ee 01 00       	call   c0028818 <__muldf3>
c0009a10:	83 c4 10             	add    esp,0x10
c0009a13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a1b:	52                   	push   edx
c0009a1c:	50                   	push   eax
c0009a1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a25:	e8 71 e7 01 00       	call   c002819b <__adddf3>
c0009a2a:	83 c4 10             	add    esp,0x10
c0009a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a35:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a39:	0f 89 1d ff ff ff    	jns    c000995c <calc_output_single+0x52>
c0009a3f:	89 d9                	mov    ecx,ebx
c0009a41:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a45:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a49:	89 dd                	mov    ebp,ebx
c0009a4b:	29 c8                	sub    eax,ecx
c0009a4d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a55:	99                   	cdq    
c0009a56:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a5e:	f7 fb                	idiv   ebx
c0009a60:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a64:	0f af e8             	imul   ebp,eax
c0009a67:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a6b:	01 cd                	add    ebp,ecx
c0009a6d:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a70:	89 e8                	mov    eax,ebp
c0009a72:	83 ee 04             	sub    esi,0x4
c0009a75:	e8 5c fe ff ff       	call   c00098d6 <fp_to_double>
c0009a7a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	29 dd                	sub    ebp,ebx
c0009a86:	e8 41 fe ff ff       	call   c00098cc <fp_to_int>
c0009a8b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a8e:	52                   	push   edx
c0009a8f:	52                   	push   edx
c0009a90:	51                   	push   ecx
c0009a91:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a95:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a99:	e8 92 e0 01 00       	call   c0027b30 <__subsf3>
c0009a9e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009aa1:	e8 69 f7 01 00       	call   c002920f <__extendsfdf2>
c0009aa6:	83 c4 10             	add    esp,0x10
c0009aa9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ab1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ab9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009abd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac1:	e8 52 ed 01 00       	call   c0028818 <__muldf3>
c0009ac6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ace:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ad1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ad5:	e8 35 f7 01 00       	call   c002920f <__extendsfdf2>
c0009ada:	83 c4 10             	add    esp,0x10
c0009add:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ae5:	52                   	push   edx
c0009ae6:	50                   	push   eax
c0009ae7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aeb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aef:	e8 a7 e6 01 00       	call   c002819b <__adddf3>
c0009af4:	59                   	pop    ecx
c0009af5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009af9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009afd:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b03:	e8 07 f7 01 00       	call   c002920f <__extendsfdf2>
c0009b08:	83 c4 10             	add    esp,0x10
c0009b0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b0f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b13:	52                   	push   edx
c0009b14:	50                   	push   eax
c0009b15:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b19:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b1d:	e8 f6 ec 01 00       	call   c0028818 <__muldf3>
c0009b22:	83 c4 10             	add    esp,0x10
c0009b25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b2d:	52                   	push   edx
c0009b2e:	50                   	push   eax
c0009b2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b37:	e8 5f e6 01 00       	call   c002819b <__adddf3>
c0009b3c:	83 c4 10             	add    esp,0x10
c0009b3f:	85 ed                	test   ebp,ebp
c0009b41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b45:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b49:	0f 8f 21 ff ff ff    	jg     c0009a70 <calc_output_single+0x166>
c0009b4f:	52                   	push   edx
c0009b50:	50                   	push   eax
c0009b51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b59:	e8 3d e6 01 00       	call   c002819b <__adddf3>
c0009b5e:	83 c4 5c             	add    esp,0x5c
c0009b61:	5b                   	pop    ebx
c0009b62:	5e                   	pop    esi
c0009b63:	5f                   	pop    edi
c0009b64:	5d                   	pop    ebp
c0009b65:	c3                   	ret    

c0009b66 <calc_output_stereo>:
c0009b66:	55                   	push   ebp
c0009b67:	89 cd                	mov    ebp,ecx
c0009b69:	57                   	push   edi
c0009b6a:	56                   	push   esi
c0009b6b:	53                   	push   ebx
c0009b6c:	89 c3                	mov    ebx,eax
c0009b6e:	83 ec 6c             	sub    esp,0x6c
c0009b71:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b75:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b7c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b83:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b87:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b8b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b8e:	e8 35 fd ff ff       	call   c00098c8 <int_to_fp>
c0009b93:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b9b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b9f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009ba7:	29 c8                	sub    eax,ecx
c0009ba9:	99                   	cdq    
c0009baa:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bb2:	0f af d0             	imul   edx,eax
c0009bb5:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bb8:	31 d2                	xor    edx,edx
c0009bba:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bc2:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bc5:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bc9:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bcc:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bd0:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bd4:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bd7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bdc:	29 c1                	sub    ecx,eax
c0009bde:	31 c0                	xor    eax,eax
c0009be0:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009be3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009be7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009beb:	83 c7 08             	add    edi,0x8
c0009bee:	e8 e3 fc ff ff       	call   c00098d6 <fp_to_double>
c0009bf3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bf7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bff:	e8 c8 fc ff ff       	call   c00098cc <fp_to_int>
c0009c04:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c07:	52                   	push   edx
c0009c08:	52                   	push   edx
c0009c09:	51                   	push   ecx
c0009c0a:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c0e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c12:	e8 19 df 01 00       	call   c0027b30 <__subsf3>
c0009c17:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c1a:	e8 f0 f5 01 00       	call   c002920f <__extendsfdf2>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c26:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c2a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c32:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c36:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c3a:	e8 d9 eb 01 00       	call   c0028818 <__muldf3>
c0009c3f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c43:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c47:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c4a:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c4e:	e8 bc f5 01 00       	call   c002920f <__extendsfdf2>
c0009c53:	83 c4 10             	add    esp,0x10
c0009c56:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c5a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c5e:	52                   	push   edx
c0009c5f:	50                   	push   eax
c0009c60:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c64:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c68:	e8 2e e5 01 00       	call   c002819b <__adddf3>
c0009c6d:	59                   	pop    ecx
c0009c6e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c72:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c76:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c7c:	e8 8e f5 01 00       	call   c002920f <__extendsfdf2>
c0009c81:	83 c4 10             	add    esp,0x10
c0009c84:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c88:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c94:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c98:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c9c:	e8 77 eb 01 00       	call   c0028818 <__muldf3>
c0009ca1:	83 c4 10             	add    esp,0x10
c0009ca4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ca8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cac:	52                   	push   edx
c0009cad:	50                   	push   eax
c0009cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cb6:	e8 e0 e4 01 00       	call   c002819b <__adddf3>
c0009cbb:	59                   	pop    ecx
c0009cbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cc0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cc4:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cca:	e8 40 f5 01 00       	call   c002920f <__extendsfdf2>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cda:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cde:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ce2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009ce6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cea:	e8 29 eb 01 00       	call   c0028818 <__muldf3>
c0009cef:	83 c4 10             	add    esp,0x10
c0009cf2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cf6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cfa:	52                   	push   edx
c0009cfb:	50                   	push   eax
c0009cfc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d04:	e8 92 e4 01 00       	call   c002819b <__adddf3>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d10:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d14:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d18:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d1c:	0f 89 c5 fe ff ff    	jns    c0009be7 <calc_output_stereo+0x81>
c0009d22:	29 e9                	sub    ecx,ebp
c0009d24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d2c:	29 c8                	sub    eax,ecx
c0009d2e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d36:	99                   	cdq    
c0009d37:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d3b:	31 d2                	xor    edx,edx
c0009d3d:	0f af f8             	imul   edi,eax
c0009d40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d44:	40                   	inc    eax
c0009d45:	01 cf                	add    edi,ecx
c0009d47:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d4c:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d50:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d58:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d5b:	31 c0                	xor    eax,eax
c0009d5d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d61:	89 f8                	mov    eax,edi
c0009d63:	83 eb 08             	sub    ebx,0x8
c0009d66:	e8 6b fb ff ff       	call   c00098d6 <fp_to_double>
c0009d6b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	e8 52 fb ff ff       	call   c00098cc <fp_to_int>
c0009d7a:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d7d:	52                   	push   edx
c0009d7e:	52                   	push   edx
c0009d7f:	55                   	push   ebp
c0009d80:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d84:	e8 a7 dd 01 00       	call   c0027b30 <__subsf3>
c0009d89:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d8c:	e8 7e f4 01 00       	call   c002920f <__extendsfdf2>
c0009d91:	83 c4 10             	add    esp,0x10
c0009d94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d98:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009da0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009da4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009da8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dac:	e8 67 ea 01 00       	call   c0028818 <__muldf3>
c0009db1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009db4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009db8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dbc:	e8 4e f4 01 00       	call   c002920f <__extendsfdf2>
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dc8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dcc:	52                   	push   edx
c0009dcd:	50                   	push   eax
c0009dce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dd6:	e8 c0 e3 01 00       	call   c002819b <__adddf3>
c0009ddb:	59                   	pop    ecx
c0009ddc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009de0:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009de4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dea:	e8 20 f4 01 00       	call   c002920f <__extendsfdf2>
c0009def:	83 c4 10             	add    esp,0x10
c0009df2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009df6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dfa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dfe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e02:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e0a:	e8 09 ea 01 00       	call   c0028818 <__muldf3>
c0009e0f:	83 c4 10             	add    esp,0x10
c0009e12:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e16:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e1a:	52                   	push   edx
c0009e1b:	50                   	push   eax
c0009e1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e24:	e8 72 e3 01 00       	call   c002819b <__adddf3>
c0009e29:	5d                   	pop    ebp
c0009e2a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e2e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e32:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e38:	e8 d2 f3 01 00       	call   c002920f <__extendsfdf2>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e48:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e50:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e54:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e58:	e8 bb e9 01 00       	call   c0028818 <__muldf3>
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e64:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e68:	52                   	push   edx
c0009e69:	50                   	push   eax
c0009e6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e72:	e8 24 e3 01 00       	call   c002819b <__adddf3>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e7e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e82:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e86:	85 ff                	test   edi,edi
c0009e88:	0f 8f d3 fe ff ff    	jg     c0009d61 <calc_output_stereo+0x1fb>
c0009e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9e:	e8 f8 e2 01 00       	call   c002819b <__adddf3>
c0009ea3:	83 c4 10             	add    esp,0x10
c0009ea6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009eae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eb2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ebe:	e8 55 e9 01 00       	call   c0028818 <__muldf3>
c0009ec3:	59                   	pop    ecx
c0009ec4:	5b                   	pop    ebx
c0009ec5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ec9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed5:	e8 11 f2 01 00       	call   c00290eb <__truncdfsf2>
c0009eda:	83 c4 10             	add    esp,0x10
c0009edd:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ee4:	89 03                	mov    DWORD PTR [ebx],eax
c0009ee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ef2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ef6:	e8 a0 e2 01 00       	call   c002819b <__adddf3>
c0009efb:	83 c4 10             	add    esp,0x10
c0009efe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f06:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f16:	e8 fd e8 01 00       	call   c0028818 <__muldf3>
c0009f1b:	5e                   	pop    esi
c0009f1c:	5f                   	pop    edi
c0009f1d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f21:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f2d:	e8 b9 f1 01 00       	call   c00290eb <__truncdfsf2>
c0009f32:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f39:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f3c:	83 c4 7c             	add    esp,0x7c
c0009f3f:	5b                   	pop    ebx
c0009f40:	5e                   	pop    esi
c0009f41:	5f                   	pop    edi
c0009f42:	5d                   	pop    ebp
c0009f43:	c3                   	ret    

c0009f44 <calc_output_quad>:
c0009f44:	55                   	push   ebp
c0009f45:	57                   	push   edi
c0009f46:	56                   	push   esi
c0009f47:	89 c6                	mov    esi,eax
c0009f49:	53                   	push   ebx
c0009f4a:	83 ec 7c             	sub    esp,0x7c
c0009f4d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f51:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f55:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f5c:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f63:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f6b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f6e:	e8 55 f9 ff ff       	call   c00098c8 <int_to_fp>
c0009f73:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f76:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f79:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f7d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f81:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f85:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f89:	99                   	cdq    
c0009f8a:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f8e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f92:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f95:	31 d2                	xor    edx,edx
c0009f97:	0f af d8             	imul   ebx,eax
c0009f9a:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fa2:	0f af c7             	imul   eax,edi
c0009fa5:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fa9:	29 c1                	sub    ecx,eax
c0009fab:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fb3:	31 c0                	xor    eax,eax
c0009fb5:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fb8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fbc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fc0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fc4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fc8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fcc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fd0:	89 d8                	mov    eax,ebx
c0009fd2:	83 c7 10             	add    edi,0x10
c0009fd5:	e8 fc f8 ff ff       	call   c00098d6 <fp_to_double>
c0009fda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	e8 e3 f8 ff ff       	call   c00098cc <fp_to_int>
c0009fe9:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fed:	52                   	push   edx
c0009fee:	52                   	push   edx
c0009fef:	51                   	push   ecx
c0009ff0:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009ff4:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009ff8:	e8 33 db 01 00       	call   c0027b30 <__subsf3>
c0009ffd:	89 04 24             	mov    DWORD PTR [esp],eax
c000a000:	e8 0a f2 01 00       	call   c002920f <__extendsfdf2>
c000a005:	83 c4 10             	add    esp,0x10
c000a008:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a00c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a018:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a01c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a020:	e8 f3 e7 01 00       	call   c0028818 <__muldf3>
c000a025:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a029:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a02d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a030:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a034:	e8 d6 f1 01 00       	call   c002920f <__extendsfdf2>
c000a039:	83 c4 10             	add    esp,0x10
c000a03c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a040:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a044:	52                   	push   edx
c000a045:	50                   	push   eax
c000a046:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a04e:	e8 48 e1 01 00       	call   c002819b <__adddf3>
c000a053:	59                   	pop    ecx
c000a054:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a058:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a05c:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a062:	e8 a8 f1 01 00       	call   c002920f <__extendsfdf2>
c000a067:	83 c4 10             	add    esp,0x10
c000a06a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a072:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a076:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a07a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a07e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a082:	e8 91 e7 01 00       	call   c0028818 <__muldf3>
c000a087:	83 c4 10             	add    esp,0x10
c000a08a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a08e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a092:	52                   	push   edx
c000a093:	50                   	push   eax
c000a094:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a098:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a09c:	e8 fa e0 01 00       	call   c002819b <__adddf3>
c000a0a1:	59                   	pop    ecx
c000a0a2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0a6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0aa:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0b0:	e8 5a f1 01 00       	call   c002920f <__extendsfdf2>
c000a0b5:	83 c4 10             	add    esp,0x10
c000a0b8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0cc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0d0:	e8 43 e7 01 00       	call   c0028818 <__muldf3>
c000a0d5:	83 c4 10             	add    esp,0x10
c000a0d8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0dc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e0:	52                   	push   edx
c000a0e1:	50                   	push   eax
c000a0e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0e6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0ea:	e8 ac e0 01 00       	call   c002819b <__adddf3>
c000a0ef:	59                   	pop    ecx
c000a0f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0f4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0f8:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0fe:	e8 0c f1 01 00       	call   c002920f <__extendsfdf2>
c000a103:	83 c4 10             	add    esp,0x10
c000a106:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a10a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a116:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a11e:	e8 f5 e6 01 00       	call   c0028818 <__muldf3>
c000a123:	83 c4 10             	add    esp,0x10
c000a126:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a12a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a12e:	52                   	push   edx
c000a12f:	50                   	push   eax
c000a130:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a134:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a138:	e8 5e e0 01 00       	call   c002819b <__adddf3>
c000a13d:	59                   	pop    ecx
c000a13e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a142:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a146:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a14c:	e8 be f0 01 00       	call   c002920f <__extendsfdf2>
c000a151:	83 c4 10             	add    esp,0x10
c000a154:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a158:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a15c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a164:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a168:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a16c:	e8 a7 e6 01 00       	call   c0028818 <__muldf3>
c000a171:	83 c4 10             	add    esp,0x10
c000a174:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a178:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a17c:	52                   	push   edx
c000a17d:	50                   	push   eax
c000a17e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a182:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a186:	e8 10 e0 01 00       	call   c002819b <__adddf3>
c000a18b:	83 c4 10             	add    esp,0x10
c000a18e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a192:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a196:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a19a:	0f 89 30 fe ff ff    	jns    c0009fd0 <calc_output_quad+0x8c>
c000a1a0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1a8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1ac:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1b0:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1b8:	29 c8                	sub    eax,ecx
c000a1ba:	99                   	cdq    
c000a1bb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1bf:	31 d2                	xor    edx,edx
c000a1c1:	0f af d8             	imul   ebx,eax
c000a1c4:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1c8:	40                   	inc    eax
c000a1c9:	01 cb                	add    ebx,ecx
c000a1cb:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1d0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1d4:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1dc:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1df:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1e7:	31 c0                	xor    eax,eax
c000a1e9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ed:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f5:	89 d8                	mov    eax,ebx
c000a1f7:	83 ee 10             	sub    esi,0x10
c000a1fa:	e8 d7 f6 ff ff       	call   c00098d6 <fp_to_double>
c000a1ff:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a203:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	e8 be f6 ff ff       	call   c00098cc <fp_to_int>
c000a20e:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a212:	52                   	push   edx
c000a213:	52                   	push   edx
c000a214:	57                   	push   edi
c000a215:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a219:	e8 12 d9 01 00       	call   c0027b30 <__subsf3>
c000a21e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a221:	e8 e9 ef 01 00       	call   c002920f <__extendsfdf2>
c000a226:	83 c4 10             	add    esp,0x10
c000a229:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a22d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a235:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a239:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a23d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a241:	e8 d2 e5 01 00       	call   c0028818 <__muldf3>
c000a246:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a251:	e8 b9 ef 01 00       	call   c002920f <__extendsfdf2>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a25d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a261:	52                   	push   edx
c000a262:	50                   	push   eax
c000a263:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a267:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a26b:	e8 2b df 01 00       	call   c002819b <__adddf3>
c000a270:	59                   	pop    ecx
c000a271:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a275:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a279:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a27f:	e8 8b ef 01 00       	call   c002920f <__extendsfdf2>
c000a284:	83 c4 10             	add    esp,0x10
c000a287:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a28b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a297:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a29b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a29f:	e8 74 e5 01 00       	call   c0028818 <__muldf3>
c000a2a4:	83 c4 10             	add    esp,0x10
c000a2a7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ab:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2af:	52                   	push   edx
c000a2b0:	50                   	push   eax
c000a2b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2b9:	e8 dd de 01 00       	call   c002819b <__adddf3>
c000a2be:	5f                   	pop    edi
c000a2bf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2c3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2c7:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2cd:	e8 3d ef 01 00       	call   c002920f <__extendsfdf2>
c000a2d2:	83 c4 10             	add    esp,0x10
c000a2d5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2e5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ed:	e8 26 e5 01 00       	call   c0028818 <__muldf3>
c000a2f2:	83 c4 10             	add    esp,0x10
c000a2f5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2f9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2fd:	52                   	push   edx
c000a2fe:	50                   	push   eax
c000a2ff:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a303:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a307:	e8 8f de 01 00       	call   c002819b <__adddf3>
c000a30c:	59                   	pop    ecx
c000a30d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a311:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a315:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a31b:	e8 ef ee 01 00       	call   c002920f <__extendsfdf2>
c000a320:	83 c4 10             	add    esp,0x10
c000a323:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a327:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a32b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a32f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a333:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a337:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a33b:	e8 d8 e4 01 00       	call   c0028818 <__muldf3>
c000a340:	83 c4 10             	add    esp,0x10
c000a343:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a347:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a34b:	52                   	push   edx
c000a34c:	50                   	push   eax
c000a34d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a351:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a355:	e8 41 de 01 00       	call   c002819b <__adddf3>
c000a35a:	5f                   	pop    edi
c000a35b:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a35f:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a363:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a369:	e8 a1 ee 01 00       	call   c002920f <__extendsfdf2>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a375:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a381:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a385:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a389:	e8 8a e4 01 00       	call   c0028818 <__muldf3>
c000a38e:	83 c4 10             	add    esp,0x10
c000a391:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a395:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a399:	52                   	push   edx
c000a39a:	50                   	push   eax
c000a39b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a39f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3a3:	e8 f3 dd 01 00       	call   c002819b <__adddf3>
c000a3a8:	83 c4 10             	add    esp,0x10
c000a3ab:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3af:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3b3:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3b7:	85 db                	test   ebx,ebx
c000a3b9:	0f 8f 36 fe ff ff    	jg     c000a1f5 <calc_output_quad+0x2b1>
c000a3bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3cf:	e8 c7 dd 01 00       	call   c002819b <__adddf3>
c000a3d4:	83 c4 10             	add    esp,0x10
c000a3d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3ef:	e8 24 e4 01 00       	call   c0028818 <__muldf3>
c000a3f4:	59                   	pop    ecx
c000a3f5:	5b                   	pop    ebx
c000a3f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3fa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a402:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a406:	e8 e0 ec 01 00       	call   c00290eb <__truncdfsf2>
c000a40b:	83 c4 10             	add    esp,0x10
c000a40e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a415:	89 06                	mov    DWORD PTR [esi],eax
c000a417:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a41b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a41f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a423:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a427:	e8 6f dd 01 00       	call   c002819b <__adddf3>
c000a42c:	83 c4 10             	add    esp,0x10
c000a42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a433:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a443:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a447:	e8 cc e3 01 00       	call   c0028818 <__muldf3>
c000a44c:	5e                   	pop    esi
c000a44d:	5f                   	pop    edi
c000a44e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a456:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a45e:	e8 88 ec 01 00       	call   c00290eb <__truncdfsf2>
c000a463:	83 c4 10             	add    esp,0x10
c000a466:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a46d:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a470:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a474:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a478:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a47c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a480:	e8 16 dd 01 00       	call   c002819b <__adddf3>
c000a485:	83 c4 10             	add    esp,0x10
c000a488:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a48c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a49c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a0:	e8 73 e3 01 00       	call   c0028818 <__muldf3>
c000a4a5:	5d                   	pop    ebp
c000a4a6:	59                   	pop    ecx
c000a4a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b7:	e8 2f ec 01 00       	call   c00290eb <__truncdfsf2>
c000a4bc:	83 c4 10             	add    esp,0x10
c000a4bf:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4c6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4c9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4d9:	e8 bd dc 01 00       	call   c002819b <__adddf3>
c000a4de:	83 c4 10             	add    esp,0x10
c000a4e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4f9:	e8 1a e3 01 00       	call   c0028818 <__muldf3>
c000a4fe:	5b                   	pop    ebx
c000a4ff:	5e                   	pop    esi
c000a500:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a504:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a508:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a510:	e8 d6 eb 01 00       	call   c00290eb <__truncdfsf2>
c000a515:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a51c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a51f:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a525:	5b                   	pop    ebx
c000a526:	5e                   	pop    esi
c000a527:	5f                   	pop    edi
c000a528:	5d                   	pop    ebp
c000a529:	c3                   	ret    

c000a52a <calc_output_hex>:
c000a52a:	55                   	push   ebp
c000a52b:	89 cd                	mov    ebp,ecx
c000a52d:	57                   	push   edi
c000a52e:	56                   	push   esi
c000a52f:	53                   	push   ebx
c000a530:	89 c3                	mov    ebx,eax
c000a532:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a538:	89 14 24             	mov    DWORD PTR [esp],edx
c000a53b:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a542:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a549:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a54d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a551:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a554:	e8 6f f3 ff ff       	call   c00098c8 <int_to_fp>
c000a559:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a55c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a560:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a563:	29 c8                	sub    eax,ecx
c000a565:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a569:	99                   	cdq    
c000a56a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a572:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a575:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a57d:	0f af f8             	imul   edi,eax
c000a580:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a583:	01 cf                	add    edi,ecx
c000a585:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a589:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a58c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a590:	0f af c2             	imul   eax,edx
c000a593:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a597:	29 c1                	sub    ecx,eax
c000a599:	31 d2                	xor    edx,edx
c000a59b:	31 c0                	xor    eax,eax
c000a59d:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5a8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5ac:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5bc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5c8:	89 f8                	mov    eax,edi
c000a5ca:	e8 07 f3 ff ff       	call   c00098d6 <fp_to_double>
c000a5cf:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d7:	89 f8                	mov    eax,edi
c000a5d9:	e8 ee f2 ff ff       	call   c00098cc <fp_to_int>
c000a5de:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5e2:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5e5:	52                   	push   edx
c000a5e6:	52                   	push   edx
c000a5e7:	51                   	push   ecx
c000a5e8:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5ec:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5f3:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5f7:	e8 34 d5 01 00       	call   c0027b30 <__subsf3>
c000a5fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5ff:	e8 0b ec 01 00       	call   c002920f <__extendsfdf2>
c000a604:	83 c4 10             	add    esp,0x10
c000a607:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a60b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a60f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a613:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a617:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a61b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a61f:	e8 f4 e1 01 00       	call   c0028818 <__muldf3>
c000a624:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a628:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a62c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a62f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a633:	e8 d7 eb 01 00       	call   c002920f <__extendsfdf2>
c000a638:	83 c4 10             	add    esp,0x10
c000a63b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a63f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a643:	52                   	push   edx
c000a644:	50                   	push   eax
c000a645:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a64d:	e8 49 db 01 00       	call   c002819b <__adddf3>
c000a652:	59                   	pop    ecx
c000a653:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a657:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a65b:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a661:	e8 a9 eb 01 00       	call   c002920f <__extendsfdf2>
c000a666:	83 c4 10             	add    esp,0x10
c000a669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a66d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a679:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a67d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a681:	e8 92 e1 01 00       	call   c0028818 <__muldf3>
c000a686:	83 c4 10             	add    esp,0x10
c000a689:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a68d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a691:	52                   	push   edx
c000a692:	50                   	push   eax
c000a693:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a697:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a69b:	e8 fb da 01 00       	call   c002819b <__adddf3>
c000a6a0:	59                   	pop    ecx
c000a6a1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6a5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6a9:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6af:	e8 5b eb 01 00       	call   c002920f <__extendsfdf2>
c000a6b4:	83 c4 10             	add    esp,0x10
c000a6b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6cb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6cf:	e8 44 e1 01 00       	call   c0028818 <__muldf3>
c000a6d4:	83 c4 10             	add    esp,0x10
c000a6d7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6db:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6df:	52                   	push   edx
c000a6e0:	50                   	push   eax
c000a6e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6e9:	e8 ad da 01 00       	call   c002819b <__adddf3>
c000a6ee:	59                   	pop    ecx
c000a6ef:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6f3:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6f7:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6fd:	e8 0d eb 01 00       	call   c002920f <__extendsfdf2>
c000a702:	83 c4 10             	add    esp,0x10
c000a705:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a709:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a70d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a711:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a715:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a719:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a71d:	e8 f6 e0 01 00       	call   c0028818 <__muldf3>
c000a722:	83 c4 10             	add    esp,0x10
c000a725:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a729:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a72d:	52                   	push   edx
c000a72e:	50                   	push   eax
c000a72f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a733:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a737:	e8 5f da 01 00       	call   c002819b <__adddf3>
c000a73c:	59                   	pop    ecx
c000a73d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a741:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a745:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a74b:	e8 bf ea 01 00       	call   c002920f <__extendsfdf2>
c000a750:	83 c4 10             	add    esp,0x10
c000a753:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a757:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a763:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a767:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a76b:	e8 a8 e0 01 00       	call   c0028818 <__muldf3>
c000a770:	83 c4 10             	add    esp,0x10
c000a773:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a777:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a77b:	52                   	push   edx
c000a77c:	50                   	push   eax
c000a77d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a781:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a785:	e8 11 da 01 00       	call   c002819b <__adddf3>
c000a78a:	59                   	pop    ecx
c000a78b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a78f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a793:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a799:	e8 71 ea 01 00       	call   c002920f <__extendsfdf2>
c000a79e:	83 c4 10             	add    esp,0x10
c000a7a1:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a5:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7b1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7b9:	e8 5a e0 01 00       	call   c0028818 <__muldf3>
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	83 c6 18             	add    esi,0x18
c000a7c4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7c8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7cc:	52                   	push   edx
c000a7cd:	50                   	push   eax
c000a7ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7d6:	e8 c0 d9 01 00       	call   c002819b <__adddf3>
c000a7db:	59                   	pop    ecx
c000a7dc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7e0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7e4:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7ea:	e8 20 ea 01 00       	call   c002920f <__extendsfdf2>
c000a7ef:	83 c4 10             	add    esp,0x10
c000a7f2:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7f6:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a802:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a806:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a80a:	e8 09 e0 01 00       	call   c0028818 <__muldf3>
c000a80f:	83 c4 10             	add    esp,0x10
c000a812:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a816:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a81a:	52                   	push   edx
c000a81b:	50                   	push   eax
c000a81c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a820:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a824:	e8 72 d9 01 00       	call   c002819b <__adddf3>
c000a829:	83 c4 10             	add    esp,0x10
c000a82c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a830:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a834:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a837:	0f 89 8b fd ff ff    	jns    c000a5c8 <calc_output_hex+0x9e>
c000a83d:	31 f6                	xor    esi,esi
c000a83f:	31 ff                	xor    edi,edi
c000a841:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a845:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a848:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a84c:	29 e9                	sub    ecx,ebp
c000a84e:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a852:	29 c8                	sub    eax,ecx
c000a854:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a857:	99                   	cdq    
c000a858:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a85c:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a85f:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a863:	0f af e8             	imul   ebp,eax
c000a866:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a86a:	40                   	inc    eax
c000a86b:	01 cd                	add    ebp,ecx
c000a86d:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a872:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a876:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a87a:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a87e:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a881:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a885:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a889:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a88d:	89 e8                	mov    eax,ebp
c000a88f:	e8 42 f0 ff ff       	call   c00098d6 <fp_to_double>
c000a894:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a898:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a89c:	89 e8                	mov    eax,ebp
c000a89e:	e8 29 f0 ff ff       	call   c00098cc <fp_to_int>
c000a8a3:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8a7:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8aa:	52                   	push   edx
c000a8ab:	52                   	push   edx
c000a8ac:	51                   	push   ecx
c000a8ad:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8b4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8bb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8bf:	e8 6c d2 01 00       	call   c0027b30 <__subsf3>
c000a8c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8c7:	e8 43 e9 01 00       	call   c002920f <__extendsfdf2>
c000a8cc:	83 c4 10             	add    esp,0x10
c000a8cf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8d3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8df:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8e3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8e7:	e8 2c df 01 00       	call   c0028818 <__muldf3>
c000a8ec:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8f3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8fe:	e8 0c e9 01 00       	call   c002920f <__extendsfdf2>
c000a903:	83 c4 10             	add    esp,0x10
c000a906:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a90a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a90e:	52                   	push   edx
c000a90f:	50                   	push   eax
c000a910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a918:	e8 7e d8 01 00       	call   c002819b <__adddf3>
c000a91d:	59                   	pop    ecx
c000a91e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a922:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a926:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a92c:	e8 de e8 01 00       	call   c002920f <__extendsfdf2>
c000a931:	83 c4 10             	add    esp,0x10
c000a934:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a938:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a93c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a940:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a944:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a948:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a94c:	e8 c7 de 01 00       	call   c0028818 <__muldf3>
c000a951:	83 c4 10             	add    esp,0x10
c000a954:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a958:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a95c:	52                   	push   edx
c000a95d:	50                   	push   eax
c000a95e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a962:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a966:	e8 30 d8 01 00       	call   c002819b <__adddf3>
c000a96b:	59                   	pop    ecx
c000a96c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a970:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a974:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a97a:	e8 90 e8 01 00       	call   c002920f <__extendsfdf2>
c000a97f:	83 c4 10             	add    esp,0x10
c000a982:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a986:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a98a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a98e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a992:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a996:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a99a:	e8 79 de 01 00       	call   c0028818 <__muldf3>
c000a99f:	83 c4 10             	add    esp,0x10
c000a9a2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9a6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9aa:	52                   	push   edx
c000a9ab:	50                   	push   eax
c000a9ac:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9b0:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9b4:	e8 e2 d7 01 00       	call   c002819b <__adddf3>
c000a9b9:	59                   	pop    ecx
c000a9ba:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9be:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9c2:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9c8:	e8 42 e8 01 00       	call   c002920f <__extendsfdf2>
c000a9cd:	83 c4 10             	add    esp,0x10
c000a9d0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9d4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9e4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9e8:	e8 2b de 01 00       	call   c0028818 <__muldf3>
c000a9ed:	83 c4 10             	add    esp,0x10
c000a9f0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9f4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9f8:	52                   	push   edx
c000a9f9:	50                   	push   eax
c000a9fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9fe:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa02:	e8 94 d7 01 00       	call   c002819b <__adddf3>
c000aa07:	59                   	pop    ecx
c000aa08:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa0c:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa10:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa16:	e8 f4 e7 01 00       	call   c002920f <__extendsfdf2>
c000aa1b:	83 c4 10             	add    esp,0x10
c000aa1e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa22:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa2e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa32:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa36:	e8 dd dd 01 00       	call   c0028818 <__muldf3>
c000aa3b:	83 c4 10             	add    esp,0x10
c000aa3e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa42:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa46:	52                   	push   edx
c000aa47:	50                   	push   eax
c000aa48:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa4c:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa50:	e8 46 d7 01 00       	call   c002819b <__adddf3>
c000aa55:	59                   	pop    ecx
c000aa56:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa5a:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa5e:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa64:	e8 a6 e7 01 00       	call   c002920f <__extendsfdf2>
c000aa69:	83 c4 10             	add    esp,0x10
c000aa6c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa70:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa7c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa80:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa84:	e8 8f dd 01 00       	call   c0028818 <__muldf3>
c000aa89:	83 c4 10             	add    esp,0x10
c000aa8c:	83 eb 18             	sub    ebx,0x18
c000aa8f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa93:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa97:	52                   	push   edx
c000aa98:	50                   	push   eax
c000aa99:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa9d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaa1:	e8 f5 d6 01 00       	call   c002819b <__adddf3>
c000aaa6:	59                   	pop    ecx
c000aaa7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aaab:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaaf:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aab5:	e8 55 e7 01 00       	call   c002920f <__extendsfdf2>
c000aaba:	83 c4 10             	add    esp,0x10
c000aabd:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aac1:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aac5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aacd:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aad1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aad5:	e8 3e dd 01 00       	call   c0028818 <__muldf3>
c000aada:	83 c4 10             	add    esp,0x10
c000aadd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aae1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aae5:	52                   	push   edx
c000aae6:	50                   	push   eax
c000aae7:	57                   	push   edi
c000aae8:	56                   	push   esi
c000aae9:	e8 ad d6 01 00       	call   c002819b <__adddf3>
c000aaee:	83 c4 10             	add    esp,0x10
c000aaf1:	89 c6                	mov    esi,eax
c000aaf3:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aaf6:	89 d7                	mov    edi,edx
c000aaf8:	85 ed                	test   ebp,ebp
c000aafa:	0f 8f 8d fd ff ff    	jg     c000a88d <calc_output_hex+0x363>
c000ab00:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab10:	e8 86 d6 01 00       	call   c002819b <__adddf3>
c000ab15:	83 c4 10             	add    esp,0x10
c000ab18:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab1f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab23:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab27:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab2f:	e8 e4 dc 01 00       	call   c0028818 <__muldf3>
c000ab34:	59                   	pop    ecx
c000ab35:	5b                   	pop    ebx
c000ab36:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab3e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab42:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab46:	e8 a0 e5 01 00       	call   c00290eb <__truncdfsf2>
c000ab4b:	83 c4 10             	add    esp,0x10
c000ab4e:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab55:	89 03                	mov    DWORD PTR [ebx],eax
c000ab57:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab5b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab67:	e8 2f d6 01 00       	call   c002819b <__adddf3>
c000ab6c:	83 c4 10             	add    esp,0x10
c000ab6f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab86:	e8 8d dc 01 00       	call   c0028818 <__muldf3>
c000ab8b:	5d                   	pop    ebp
c000ab8c:	59                   	pop    ecx
c000ab8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab99:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab9d:	e8 49 e5 01 00       	call   c00290eb <__truncdfsf2>
c000aba2:	83 c4 10             	add    esp,0x10
c000aba5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abac:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abaf:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abb3:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abb7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abbb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abbf:	e8 d7 d5 01 00       	call   c002819b <__adddf3>
c000abc4:	83 c4 10             	add    esp,0x10
c000abc7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abca:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abda:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abde:	e8 35 dc 01 00       	call   c0028818 <__muldf3>
c000abe3:	5b                   	pop    ebx
c000abe4:	5d                   	pop    ebp
c000abe5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf5:	e8 f1 e4 01 00       	call   c00290eb <__truncdfsf2>
c000abfa:	83 c4 10             	add    esp,0x10
c000abfd:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac07:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac0b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac0f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac13:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac17:	e8 7f d5 01 00       	call   c002819b <__adddf3>
c000ac1c:	83 c4 10             	add    esp,0x10
c000ac1f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac2e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac36:	e8 dd db 01 00       	call   c0028818 <__muldf3>
c000ac3b:	59                   	pop    ecx
c000ac3c:	5b                   	pop    ebx
c000ac3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac45:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac49:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac4d:	e8 99 e4 01 00       	call   c00290eb <__truncdfsf2>
c000ac52:	83 c4 10             	add    esp,0x10
c000ac55:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac5c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac6f:	e8 27 d5 01 00       	call   c002819b <__adddf3>
c000ac74:	83 c4 10             	add    esp,0x10
c000ac77:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac7a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac7e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac82:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac86:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac8a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac8e:	e8 85 db 01 00       	call   c0028818 <__muldf3>
c000ac93:	5d                   	pop    ebp
c000ac94:	59                   	pop    ecx
c000ac95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac9d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca5:	e8 41 e4 01 00       	call   c00290eb <__truncdfsf2>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acb4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acb7:	57                   	push   edi
c000acb8:	56                   	push   esi
c000acb9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acbd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acc1:	e8 d5 d4 01 00       	call   c002819b <__adddf3>
c000acc6:	83 c4 10             	add    esp,0x10
c000acc9:	89 04 24             	mov    DWORD PTR [esp],eax
c000accc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acdc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace0:	e8 33 db 01 00       	call   c0028818 <__muldf3>
c000ace5:	5b                   	pop    ebx
c000ace6:	5e                   	pop    esi
c000ace7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aceb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acef:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf7:	e8 ef e3 01 00       	call   c00290eb <__truncdfsf2>
c000acfc:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad03:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad06:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad0c:	5b                   	pop    ebx
c000ad0d:	5e                   	pop    esi
c000ad0e:	5f                   	pop    edi
c000ad0f:	5d                   	pop    ebp
c000ad10:	c3                   	ret    

c000ad11 <sinc_reset>:
c000ad11:	56                   	push   esi
c000ad12:	53                   	push   ebx
c000ad13:	51                   	push   ecx
c000ad14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad18:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad1b:	85 db                	test   ebx,ebx
c000ad1d:	74 59                	je     c000ad78 <sinc_reset+0x67>
c000ad1f:	31 d2                	xor    edx,edx
c000ad21:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad28:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad2b:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad2e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad35:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad3c:	31 c0                	xor    eax,eax
c000ad3e:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad44:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad47:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad4a:	52                   	push   edx
c000ad4b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad4e:	c1 e0 02             	shl    eax,0x2
c000ad51:	50                   	push   eax
c000ad52:	6a 00                	push   0x0
c000ad54:	56                   	push   esi
c000ad55:	e8 1e 5a ff ff       	call   c0000778 <memset>
c000ad5a:	83 c4 0c             	add    esp,0xc
c000ad5d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	68 aa 00 00 00       	push   0xaa
c000ad69:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad6c:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad6f:	50                   	push   eax
c000ad70:	e8 03 5a ff ff       	call   c0000778 <memset>
c000ad75:	83 c4 10             	add    esp,0x10
c000ad78:	58                   	pop    eax
c000ad79:	5b                   	pop    ebx
c000ad7a:	5e                   	pop    esi
c000ad7b:	c3                   	ret    

c000ad7c <calc_output_multi>:
c000ad7c:	55                   	push   ebp
c000ad7d:	57                   	push   edi
c000ad7e:	56                   	push   esi
c000ad7f:	89 c6                	mov    esi,eax
c000ad81:	53                   	push   ebx
c000ad82:	83 ec 4c             	sub    esp,0x4c
c000ad85:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad89:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad8d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad91:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad95:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ada1:	8d 46 44             	lea    eax,[esi+0x44]
c000ada4:	89 04 24             	mov    DWORD PTR [esp],eax
c000ada7:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adb1:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adb4:	e8 0f eb ff ff       	call   c00098c8 <int_to_fp>
c000adb9:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adbc:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adc0:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adc4:	99                   	cdq    
c000adc5:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adc9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adcd:	0f af d0             	imul   edx,eax
c000add0:	0f af c3             	imul   eax,ebx
c000add3:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000add7:	29 c1                	sub    ecx,eax
c000add9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000addd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ade1:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000ade8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adec:	57                   	push   edi
c000aded:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adf1:	6a 00                	push   0x0
c000adf3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adf7:	e8 7c 59 ff ff       	call   c0000778 <memset>
c000adfc:	83 c4 10             	add    esp,0x10
c000adff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae03:	89 df                	mov    edi,ebx
c000ae05:	e8 cc ea ff ff       	call   c00098d6 <fp_to_double>
c000ae0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae16:	e8 b1 ea ff ff       	call   c00098cc <fp_to_int>
c000ae1b:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae1e:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae21:	51                   	push   ecx
c000ae22:	51                   	push   ecx
c000ae23:	55                   	push   ebp
c000ae24:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae28:	e8 03 cd 01 00       	call   c0027b30 <__subsf3>
c000ae2d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae30:	e8 da e3 01 00       	call   c002920f <__extendsfdf2>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae3c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae48:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae4c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae50:	e8 c3 d9 01 00       	call   c0028818 <__muldf3>
c000ae55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae58:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae5c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae60:	e8 aa e3 01 00       	call   c002920f <__extendsfdf2>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae70:	52                   	push   edx
c000ae71:	50                   	push   eax
c000ae72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae7a:	e8 1c d3 01 00       	call   c002819b <__adddf3>
c000ae7f:	83 c4 10             	add    esp,0x10
c000ae82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae86:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae8a:	89 f8                	mov    eax,edi
c000ae8c:	b9 08 00 00 00       	mov    ecx,0x8
c000ae91:	99                   	cdq    
c000ae92:	f7 f9                	idiv   ecx
c000ae94:	4a                   	dec    edx
c000ae95:	83 fa 06             	cmp    edx,0x6
c000ae98:	77 07                	ja     c000aea1 <calc_output_multi+0x125>
c000ae9a:	ff 24 95 24 ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54dc]
c000aea1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea4:	4f                   	dec    edi
c000aea5:	83 ec 0c             	sub    esp,0xc
c000aea8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aeab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeaf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeba:	e8 50 e3 01 00       	call   c002920f <__extendsfdf2>
c000aebf:	83 c4 10             	add    esp,0x10
c000aec2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeda:	e8 39 d9 01 00       	call   c0028818 <__muldf3>
c000aedf:	83 c4 10             	add    esp,0x10
c000aee2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aeea:	52                   	push   edx
c000aeeb:	50                   	push   eax
c000aeec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aef2:	e8 a4 d2 01 00       	call   c002819b <__adddf3>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aefd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af00:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af03:	4f                   	dec    edi
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af15:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af19:	e8 f1 e2 01 00       	call   c002920f <__extendsfdf2>
c000af1e:	83 c4 10             	add    esp,0x10
c000af21:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af25:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af39:	e8 da d8 01 00       	call   c0028818 <__muldf3>
c000af3e:	83 c4 10             	add    esp,0x10
c000af41:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af45:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af49:	52                   	push   edx
c000af4a:	50                   	push   eax
c000af4b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af51:	e8 45 d2 01 00       	call   c002819b <__adddf3>
c000af56:	83 c4 10             	add    esp,0x10
c000af59:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af5c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af62:	4f                   	dec    edi
c000af63:	83 ec 0c             	sub    esp,0xc
c000af66:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af69:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af6d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af74:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af78:	e8 92 e2 01 00       	call   c002920f <__extendsfdf2>
c000af7d:	83 c4 10             	add    esp,0x10
c000af80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af84:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af90:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af98:	e8 7b d8 01 00       	call   c0028818 <__muldf3>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afa4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afa8:	52                   	push   edx
c000afa9:	50                   	push   eax
c000afaa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afad:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afb0:	e8 e6 d1 01 00       	call   c002819b <__adddf3>
c000afb5:	83 c4 10             	add    esp,0x10
c000afb8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afbb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afbe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afc1:	4f                   	dec    edi
c000afc2:	83 ec 0c             	sub    esp,0xc
c000afc5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afc8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afcc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afd3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afd7:	e8 33 e2 01 00       	call   c002920f <__extendsfdf2>
c000afdc:	83 c4 10             	add    esp,0x10
c000afdf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afe3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afef:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aff3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aff7:	e8 1c d8 01 00       	call   c0028818 <__muldf3>
c000affc:	83 c4 10             	add    esp,0x10
c000afff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b003:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b007:	52                   	push   edx
c000b008:	50                   	push   eax
c000b009:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b00c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b00f:	e8 87 d1 01 00       	call   c002819b <__adddf3>
c000b014:	83 c4 10             	add    esp,0x10
c000b017:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b01a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b01d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b020:	4f                   	dec    edi
c000b021:	83 ec 0c             	sub    esp,0xc
c000b024:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b027:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b02b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b032:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b036:	e8 d4 e1 01 00       	call   c002920f <__extendsfdf2>
c000b03b:	83 c4 10             	add    esp,0x10
c000b03e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b042:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b046:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b04a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b04e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b052:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b056:	e8 bd d7 01 00       	call   c0028818 <__muldf3>
c000b05b:	83 c4 10             	add    esp,0x10
c000b05e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b062:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b066:	52                   	push   edx
c000b067:	50                   	push   eax
c000b068:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b06b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b06e:	e8 28 d1 01 00       	call   c002819b <__adddf3>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b079:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b07c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b07f:	4f                   	dec    edi
c000b080:	83 ec 0c             	sub    esp,0xc
c000b083:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b086:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b08a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b091:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b095:	e8 75 e1 01 00       	call   c002920f <__extendsfdf2>
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0a1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0b5:	e8 5e d7 01 00       	call   c0028818 <__muldf3>
c000b0ba:	83 c4 10             	add    esp,0x10
c000b0bd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0c1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0c5:	52                   	push   edx
c000b0c6:	50                   	push   eax
c000b0c7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0ca:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0cd:	e8 c9 d0 01 00       	call   c002819b <__adddf3>
c000b0d2:	83 c4 10             	add    esp,0x10
c000b0d5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0d8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0de:	4f                   	dec    edi
c000b0df:	83 ec 0c             	sub    esp,0xc
c000b0e2:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0e9:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0f0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0f4:	e8 16 e1 01 00       	call   c002920f <__extendsfdf2>
c000b0f9:	83 c4 10             	add    esp,0x10
c000b0fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b100:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b104:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b10c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b110:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b114:	e8 ff d6 01 00       	call   c0028818 <__muldf3>
c000b119:	83 c4 10             	add    esp,0x10
c000b11c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b120:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b124:	52                   	push   edx
c000b125:	50                   	push   eax
c000b126:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b129:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b12c:	e8 6a d0 01 00       	call   c002819b <__adddf3>
c000b131:	83 c4 10             	add    esp,0x10
c000b134:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b137:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b13a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b13d:	4f                   	dec    edi
c000b13e:	83 ec 0c             	sub    esp,0xc
c000b141:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b144:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b148:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b14f:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b153:	e8 b7 e0 01 00       	call   c002920f <__extendsfdf2>
c000b158:	83 c4 10             	add    esp,0x10
c000b15b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b15f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b163:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b167:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b16b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b16f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b173:	e8 a0 d6 01 00       	call   c0028818 <__muldf3>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b17f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b183:	52                   	push   edx
c000b184:	50                   	push   eax
c000b185:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b188:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b18b:	e8 0b d0 01 00       	call   c002819b <__adddf3>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b196:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b199:	85 ff                	test   edi,edi
c000b19b:	0f 8f e9 fc ff ff    	jg     c000ae8a <calc_output_multi+0x10e>
c000b1a1:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1a9:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1ad:	0f 89 4c fc ff ff    	jns    c000adff <calc_output_multi+0x83>
c000b1b3:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1bb:	29 c8                	sub    eax,ecx
c000b1bd:	99                   	cdq    
c000b1be:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1c2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1c6:	0f af d0             	imul   edx,eax
c000b1c9:	40                   	inc    eax
c000b1ca:	01 d1                	add    ecx,edx
c000b1cc:	0f af c3             	imul   eax,ebx
c000b1cf:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1d3:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1da:	55                   	push   ebp
c000b1db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1df:	6a 00                	push   0x0
c000b1e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1e5:	e8 8e 55 ff ff       	call   c0000778 <memset>
c000b1ea:	83 c4 10             	add    esp,0x10
c000b1ed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f1:	e8 e0 e6 ff ff       	call   c00098d6 <fp_to_double>
c000b1f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b202:	e8 c5 e6 ff ff       	call   c00098cc <fp_to_int>
c000b207:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b20a:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b20d:	57                   	push   edi
c000b20e:	57                   	push   edi
c000b20f:	89 df                	mov    edi,ebx
c000b211:	55                   	push   ebp
c000b212:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b216:	e8 15 c9 01 00       	call   c0027b30 <__subsf3>
c000b21b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b21e:	e8 ec df 01 00       	call   c002920f <__extendsfdf2>
c000b223:	83 c4 10             	add    esp,0x10
c000b226:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b22a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b22e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b232:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b23e:	e8 d5 d5 01 00       	call   c0028818 <__muldf3>
c000b243:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b246:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b24a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b24e:	e8 bc df 01 00       	call   c002920f <__extendsfdf2>
c000b253:	83 c4 10             	add    esp,0x10
c000b256:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b25a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25e:	52                   	push   edx
c000b25f:	50                   	push   eax
c000b260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b264:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b268:	e8 2e cf 01 00       	call   c002819b <__adddf3>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b274:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b278:	89 f8                	mov    eax,edi
c000b27a:	b9 08 00 00 00       	mov    ecx,0x8
c000b27f:	99                   	cdq    
c000b280:	f7 f9                	idiv   ecx
c000b282:	4a                   	dec    edx
c000b283:	83 fa 06             	cmp    edx,0x6
c000b286:	77 07                	ja     c000b28f <calc_output_multi+0x513>
c000b288:	ff 24 95 40 ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54c0]
c000b28f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b293:	4f                   	dec    edi
c000b294:	83 ec 0c             	sub    esp,0xc
c000b297:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b29e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2a9:	e8 61 df 01 00       	call   c002920f <__extendsfdf2>
c000b2ae:	83 c4 10             	add    esp,0x10
c000b2b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c9:	e8 4a d5 01 00       	call   c0028818 <__muldf3>
c000b2ce:	83 c4 10             	add    esp,0x10
c000b2d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2d9:	52                   	push   edx
c000b2da:	50                   	push   eax
c000b2db:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2de:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e1:	e8 b5 ce 01 00       	call   c002819b <__adddf3>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ec:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f3:	4f                   	dec    edi
c000b2f4:	83 ec 0c             	sub    esp,0xc
c000b2f7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2fe:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b305:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b309:	e8 01 df 01 00       	call   c002920f <__extendsfdf2>
c000b30e:	83 c4 10             	add    esp,0x10
c000b311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b319:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b321:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b325:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b329:	e8 ea d4 01 00       	call   c0028818 <__muldf3>
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b335:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b339:	52                   	push   edx
c000b33a:	50                   	push   eax
c000b33b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b33e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b341:	e8 55 ce 01 00       	call   c002819b <__adddf3>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b34f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b353:	4f                   	dec    edi
c000b354:	83 ec 0c             	sub    esp,0xc
c000b357:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b35a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b35e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b365:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b369:	e8 a1 de 01 00       	call   c002920f <__extendsfdf2>
c000b36e:	83 c4 10             	add    esp,0x10
c000b371:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b375:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b379:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b37d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b381:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b385:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b389:	e8 8a d4 01 00       	call   c0028818 <__muldf3>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b395:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b399:	52                   	push   edx
c000b39a:	50                   	push   eax
c000b39b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b39e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3a1:	e8 f5 cd 01 00       	call   c002819b <__adddf3>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3ac:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3b3:	4f                   	dec    edi
c000b3b4:	83 ec 0c             	sub    esp,0xc
c000b3b7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3be:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3c5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3c9:	e8 41 de 01 00       	call   c002920f <__extendsfdf2>
c000b3ce:	83 c4 10             	add    esp,0x10
c000b3d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3e9:	e8 2a d4 01 00       	call   c0028818 <__muldf3>
c000b3ee:	83 c4 10             	add    esp,0x10
c000b3f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3f9:	52                   	push   edx
c000b3fa:	50                   	push   eax
c000b3fb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3fe:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b401:	e8 95 cd 01 00       	call   c002819b <__adddf3>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b40c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b413:	4f                   	dec    edi
c000b414:	83 ec 0c             	sub    esp,0xc
c000b417:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b41a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b41e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b425:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b429:	e8 e1 dd 01 00       	call   c002920f <__extendsfdf2>
c000b42e:	83 c4 10             	add    esp,0x10
c000b431:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b435:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b439:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b43d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b441:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b445:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b449:	e8 ca d3 01 00       	call   c0028818 <__muldf3>
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b455:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b459:	52                   	push   edx
c000b45a:	50                   	push   eax
c000b45b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b45e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b461:	e8 35 cd 01 00       	call   c002819b <__adddf3>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b46c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b46f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b473:	4f                   	dec    edi
c000b474:	83 ec 0c             	sub    esp,0xc
c000b477:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b47a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b47e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b485:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b489:	e8 81 dd 01 00       	call   c002920f <__extendsfdf2>
c000b48e:	83 c4 10             	add    esp,0x10
c000b491:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b495:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b499:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b49d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4a9:	e8 6a d3 01 00       	call   c0028818 <__muldf3>
c000b4ae:	83 c4 10             	add    esp,0x10
c000b4b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4b9:	52                   	push   edx
c000b4ba:	50                   	push   eax
c000b4bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4c1:	e8 d5 cc 01 00       	call   c002819b <__adddf3>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4cc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4d3:	4f                   	dec    edi
c000b4d4:	83 ec 0c             	sub    esp,0xc
c000b4d7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4de:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4e5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4e9:	e8 21 dd 01 00       	call   c002920f <__extendsfdf2>
c000b4ee:	83 c4 10             	add    esp,0x10
c000b4f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b501:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b505:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b509:	e8 0a d3 01 00       	call   c0028818 <__muldf3>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b515:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b519:	52                   	push   edx
c000b51a:	50                   	push   eax
c000b51b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b51e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b521:	e8 75 cc 01 00       	call   c002819b <__adddf3>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b52c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b533:	4f                   	dec    edi
c000b534:	83 ec 0c             	sub    esp,0xc
c000b537:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b53a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b53e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b545:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b549:	e8 c1 dc 01 00       	call   c002920f <__extendsfdf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b555:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b559:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b55d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b561:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b565:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b569:	e8 aa d2 01 00       	call   c0028818 <__muldf3>
c000b56e:	83 c4 10             	add    esp,0x10
c000b571:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b579:	52                   	push   edx
c000b57a:	50                   	push   eax
c000b57b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b57e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b581:	e8 15 cc 01 00       	call   c002819b <__adddf3>
c000b586:	83 c4 10             	add    esp,0x10
c000b589:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b58c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b58f:	85 ff                	test   edi,edi
c000b591:	0f 8f e1 fc ff ff    	jg     c000b278 <calc_output_multi+0x4fc>
c000b597:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b59b:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b59f:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5a3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5a8:	0f 8f 3f fc ff ff    	jg     c000b1ed <calc_output_multi+0x471>
c000b5ae:	be 08 00 00 00       	mov    esi,0x8
c000b5b3:	89 d8                	mov    eax,ebx
c000b5b5:	99                   	cdq    
c000b5b6:	f7 fe                	idiv   esi
c000b5b8:	4a                   	dec    edx
c000b5b9:	83 fa 06             	cmp    edx,0x6
c000b5bc:	77 07                	ja     c000b5c5 <calc_output_multi+0x849>
c000b5be:	ff 24 95 5c ab 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd54a4]
c000b5c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5c9:	4b                   	dec    ebx
c000b5ca:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5ce:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5d5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5d9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5dc:	e8 ba cb 01 00       	call   c002819b <__adddf3>
c000b5e1:	83 c4 10             	add    esp,0x10
c000b5e4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5e8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5f8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5fc:	e8 17 d2 01 00       	call   c0028818 <__muldf3>
c000b601:	5d                   	pop    ebp
c000b602:	59                   	pop    ecx
c000b603:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b607:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b60b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b613:	e8 d3 da 01 00       	call   c00290eb <__truncdfsf2>
c000b618:	83 c4 10             	add    esp,0x10
c000b61b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b61f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b622:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b626:	4b                   	dec    ebx
c000b627:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b62b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b632:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b636:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b639:	e8 5d cb 01 00       	call   c002819b <__adddf3>
c000b63e:	83 c4 10             	add    esp,0x10
c000b641:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b645:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b649:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b64d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b651:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b655:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b659:	e8 ba d1 01 00       	call   c0028818 <__muldf3>
c000b65e:	59                   	pop    ecx
c000b65f:	5f                   	pop    edi
c000b660:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b664:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b670:	e8 76 da 01 00       	call   c00290eb <__truncdfsf2>
c000b675:	83 c4 10             	add    esp,0x10
c000b678:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b67c:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b683:	4b                   	dec    ebx
c000b684:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b688:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b68b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b68f:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b693:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b696:	e8 00 cb 01 00       	call   c002819b <__adddf3>
c000b69b:	83 c4 10             	add    esp,0x10
c000b69e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6a2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6b6:	e8 5d d1 01 00       	call   c0028818 <__muldf3>
c000b6bb:	5f                   	pop    edi
c000b6bc:	5d                   	pop    ebp
c000b6bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6c1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6cd:	e8 19 da 01 00       	call   c00290eb <__truncdfsf2>
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6d9:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e0:	4b                   	dec    ebx
c000b6e1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6ec:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6f3:	e8 a3 ca 01 00       	call   c002819b <__adddf3>
c000b6f8:	83 c4 10             	add    esp,0x10
c000b6fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b703:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b707:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b70b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b70f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b713:	e8 00 d1 01 00       	call   c0028818 <__muldf3>
c000b718:	5d                   	pop    ebp
c000b719:	59                   	pop    ecx
c000b71a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b71e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b72a:	e8 bc d9 01 00       	call   c00290eb <__truncdfsf2>
c000b72f:	83 c4 10             	add    esp,0x10
c000b732:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b736:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b739:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b73d:	4b                   	dec    ebx
c000b73e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b742:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b745:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b749:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b74d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b750:	e8 46 ca 01 00       	call   c002819b <__adddf3>
c000b755:	83 c4 10             	add    esp,0x10
c000b758:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b75c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b768:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b770:	e8 a3 d0 01 00       	call   c0028818 <__muldf3>
c000b775:	59                   	pop    ecx
c000b776:	5f                   	pop    edi
c000b777:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b77b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b77f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b787:	e8 5f d9 01 00       	call   c00290eb <__truncdfsf2>
c000b78c:	83 c4 10             	add    esp,0x10
c000b78f:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b793:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b796:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b79a:	4b                   	dec    ebx
c000b79b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7a6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7aa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ad:	e8 e9 c9 01 00       	call   c002819b <__adddf3>
c000b7b2:	83 c4 10             	add    esp,0x10
c000b7b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7cd:	e8 46 d0 01 00       	call   c0028818 <__muldf3>
c000b7d2:	5f                   	pop    edi
c000b7d3:	5d                   	pop    ebp
c000b7d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7e4:	e8 02 d9 01 00       	call   c00290eb <__truncdfsf2>
c000b7e9:	83 c4 10             	add    esp,0x10
c000b7ec:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7f0:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f7:	4b                   	dec    ebx
c000b7f8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b803:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b807:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b80a:	e8 8c c9 01 00       	call   c002819b <__adddf3>
c000b80f:	83 c4 10             	add    esp,0x10
c000b812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b816:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b81e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b82a:	e8 e9 cf 01 00       	call   c0028818 <__muldf3>
c000b82f:	5d                   	pop    ebp
c000b830:	59                   	pop    ecx
c000b831:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b835:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b839:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b841:	e8 a5 d8 01 00       	call   c00290eb <__truncdfsf2>
c000b846:	83 c4 10             	add    esp,0x10
c000b849:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b84d:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b854:	4b                   	dec    ebx
c000b855:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b859:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b860:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b864:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b867:	e8 2f c9 01 00       	call   c002819b <__adddf3>
c000b86c:	83 c4 10             	add    esp,0x10
c000b86f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b873:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b883:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b887:	e8 8c cf 01 00       	call   c0028818 <__muldf3>
c000b88c:	59                   	pop    ecx
c000b88d:	5f                   	pop    edi
c000b88e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b892:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b896:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b89e:	e8 48 d8 01 00       	call   c00290eb <__truncdfsf2>
c000b8a3:	83 c4 10             	add    esp,0x10
c000b8a6:	85 db                	test   ebx,ebx
c000b8a8:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8ac:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8af:	0f 8f fe fc ff ff    	jg     c000b5b3 <calc_output_multi+0x837>
c000b8b5:	83 c4 4c             	add    esp,0x4c
c000b8b8:	5b                   	pop    ebx
c000b8b9:	5e                   	pop    esi
c000b8ba:	5f                   	pop    edi
c000b8bb:	5d                   	pop    ebp
c000b8bc:	c3                   	ret    

c000b8bd <double_to_fp>:
c000b8bd:	83 ec 0c             	sub    esp,0xc
c000b8c0:	68 00 00 b0 40       	push   0x40b00000
c000b8c5:	6a 00                	push   0x0
c000b8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8cf:	e8 44 cf 01 00       	call   c0028818 <__muldf3>
c000b8d4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8d8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8dc:	83 c4 1c             	add    esp,0x1c
c000b8df:	e9 bc d9 01 00       	jmp    c00292a0 <lrint>

c000b8e4 <prepare_data>:
c000b8e4:	55                   	push   ebp
c000b8e5:	57                   	push   edi
c000b8e6:	56                   	push   esi
c000b8e7:	53                   	push   ebx
c000b8e8:	83 ec 1c             	sub    esp,0x1c
c000b8eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8f3:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8f7:	0f 89 57 01 00 00    	jns    c000ba54 <prepare_data+0x170>
c000b8fd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b900:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b903:	85 d2                	test   edx,edx
c000b905:	75 0d                	jne    c000b914 <prepare_data+0x30>
c000b907:	8d 14 36             	lea    edx,[esi+esi*1]
c000b90a:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b90d:	29 d0                	sub    eax,edx
c000b90f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b912:	eb 44                	jmp    c000b958 <prepare_data+0x74>
c000b914:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b917:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b91a:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b91d:	39 c1                	cmp    ecx,eax
c000b91f:	7d 04                	jge    c000b925 <prepare_data+0x41>
c000b921:	29 d0                	sub    eax,edx
c000b923:	eb 2d                	jmp    c000b952 <prepare_data+0x6e>
c000b925:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b92b:	29 d7                	sub    edi,edx
c000b92d:	01 f7                	add    edi,esi
c000b92f:	51                   	push   ecx
c000b930:	29 f2                	sub    edx,esi
c000b932:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b939:	8d 14 90             	lea    edx,[eax+edx*4]
c000b93c:	51                   	push   ecx
c000b93d:	52                   	push   edx
c000b93e:	50                   	push   eax
c000b93f:	e8 6c 4d ff ff       	call   c00006b0 <memmove>
c000b944:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b947:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b94a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b94d:	29 f0                	sub    eax,esi
c000b94f:	83 c4 10             	add    esp,0x10
c000b952:	29 f0                	sub    eax,esi
c000b954:	79 02                	jns    c000b958 <prepare_data+0x74>
c000b956:	31 c0                	xor    eax,eax
c000b958:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b95b:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b95e:	29 ef                	sub    edi,ebp
c000b960:	39 c7                	cmp    edi,eax
c000b962:	7e 02                	jle    c000b966 <prepare_data+0x82>
c000b964:	89 c7                	mov    edi,eax
c000b966:	89 f8                	mov    eax,edi
c000b968:	99                   	cdq    
c000b969:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b96c:	b8 15 00 00 00       	mov    eax,0x15
c000b971:	29 d7                	sub    edi,edx
c000b973:	0f 88 dd 00 00 00    	js     c000ba56 <prepare_data+0x172>
c000b979:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b97c:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b97f:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b982:	0f 8f ce 00 00 00    	jg     c000ba56 <prepare_data+0x172>
c000b988:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b98e:	50                   	push   eax
c000b98f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b996:	50                   	push   eax
c000b997:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b99b:	8b 00                	mov    eax,DWORD PTR [eax]
c000b99d:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9a4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9a8:	50                   	push   eax
c000b9a9:	e8 c0 4c ff ff       	call   c000066e <memcpy>
c000b9ae:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9b1:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9b4:	01 fd                	add    ebp,edi
c000b9b6:	01 f9                	add    ecx,edi
c000b9b8:	83 c4 10             	add    esp,0x10
c000b9bb:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9be:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9c1:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9c8:	0f 85 86 00 00 00    	jne    c000ba54 <prepare_data+0x170>
c000b9ce:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9d1:	89 e8                	mov    eax,ebp
c000b9d3:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9d6:	29 c8                	sub    eax,ecx
c000b9d8:	39 f8                	cmp    eax,edi
c000b9da:	7d 78                	jge    c000ba54 <prepare_data+0x170>
c000b9dc:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9e0:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9e4:	74 6e                	je     c000ba54 <prepare_data+0x170>
c000b9e6:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9e9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ed:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9f0:	29 ef                	sub    edi,ebp
c000b9f2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9f6:	7c 29                	jl     c000ba21 <prepare_data+0x13d>
c000b9f8:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9fb:	29 f1                	sub    ecx,esi
c000b9fd:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba04:	55                   	push   ebp
c000ba05:	50                   	push   eax
c000ba06:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba09:	50                   	push   eax
c000ba0a:	52                   	push   edx
c000ba0b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba0f:	e8 9c 4c ff ff       	call   c00006b0 <memmove>
c000ba14:	83 c4 10             	add    esp,0x10
c000ba17:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba1a:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba1d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba21:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba24:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba27:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba2a:	83 c6 05             	add    esi,0x5
c000ba2d:	78 07                	js     c000ba36 <prepare_data+0x152>
c000ba2f:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba32:	39 cf                	cmp    edi,ecx
c000ba34:	7e 04                	jle    c000ba3a <prepare_data+0x156>
c000ba36:	89 ce                	mov    esi,ecx
c000ba38:	29 c6                	sub    esi,eax
c000ba3a:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba3d:	51                   	push   ecx
c000ba3e:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba45:	51                   	push   ecx
c000ba46:	6a 00                	push   0x0
c000ba48:	50                   	push   eax
c000ba49:	e8 2a 4d ff ff       	call   c0000778 <memset>
c000ba4e:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba51:	83 c4 10             	add    esp,0x10
c000ba54:	31 c0                	xor    eax,eax
c000ba56:	83 c4 1c             	add    esp,0x1c
c000ba59:	5b                   	pop    ebx
c000ba5a:	5e                   	pop    esi
c000ba5b:	5f                   	pop    edi
c000ba5c:	5d                   	pop    ebp
c000ba5d:	c3                   	ret    

c000ba5e <sinc_multichan_vari_process>:
c000ba5e:	55                   	push   ebp
c000ba5f:	ba 05 00 00 00       	mov    edx,0x5
c000ba64:	57                   	push   edi
c000ba65:	56                   	push   esi
c000ba66:	53                   	push   ebx
c000ba67:	83 ec 4c             	sub    esp,0x4c
c000ba6a:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba6e:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba72:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba75:	85 db                	test   ebx,ebx
c000ba77:	0f 84 9b 06 00 00    	je     c000c118 <sinc_multichan_vari_process+0x6ba>
c000ba7d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba80:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba83:	0f af c5             	imul   eax,ebp
c000ba86:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba8c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba93:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba9a:	0f af c5             	imul   eax,ebp
c000ba9d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000baa0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000baa3:	8b 06                	mov    eax,DWORD PTR [esi]
c000baa5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000baa9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baad:	68 00 00 70 3f       	push   0x3f700000
c000bab2:	6a 00                	push   0x0
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000babc:	e8 26 d6 01 00       	call   c00290e7 <__ltdf2>
c000bac1:	83 c4 10             	add    esp,0x10
c000bac4:	ba 16 00 00 00       	mov    edx,0x16
c000bac9:	85 c0                	test   eax,eax
c000bacb:	0f 88 47 06 00 00    	js     c000c118 <sinc_multichan_vari_process+0x6ba>
c000bad1:	68 00 00 70 40       	push   0x40700000
c000bad6:	6a 00                	push   0x0
c000bad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000badc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bae0:	e8 e4 d5 01 00       	call   c00290c9 <__gtdf2>
c000bae5:	83 c4 10             	add    esp,0x10
c000bae8:	ba 16 00 00 00       	mov    edx,0x16
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 8f 23 06 00 00    	jg     c000c118 <sinc_multichan_vari_process+0x6ba>
c000baf5:	83 ec 0c             	sub    esp,0xc
c000baf8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bafb:	e8 7b d3 01 00       	call   c0028e7b <__floatsidf>
c000bb00:	83 c4 10             	add    esp,0x10
c000bb03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb07:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb0b:	68 00 00 00 40       	push   0x40000000
c000bb10:	6a 00                	push   0x0
c000bb12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1a:	e8 7c c6 01 00       	call   c002819b <__adddf3>
c000bb1f:	59                   	pop    ecx
c000bb20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb24:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb28:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb2b:	e8 4b d3 01 00       	call   c0028e7b <__floatsidf>
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb37:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb3b:	52                   	push   edx
c000bb3c:	50                   	push   eax
c000bb3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb45:	e8 b2 cf 01 00       	call   c0028afc <__divdf3>
c000bb4a:	83 c4 10             	add    esp,0x10
c000bb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb51:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb55:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb58:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb73:	e8 51 d5 01 00       	call   c00290c9 <__gtdf2>
c000bb78:	83 c4 10             	add    esp,0x10
c000bb7b:	85 c0                	test   eax,eax
c000bb7d:	7e 2d                	jle    c000bbac <sinc_multichan_vari_process+0x14e>
c000bb7f:	68 00 00 f0 3f       	push   0x3ff00000
c000bb84:	6a 00                	push   0x0
c000bb86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb8e:	e8 54 d5 01 00       	call   c00290e7 <__ltdf2>
c000bb93:	83 c4 10             	add    esp,0x10
c000bb96:	85 c0                	test   eax,eax
c000bb98:	79 4d                	jns    c000bbe7 <sinc_multichan_vari_process+0x189>
c000bb9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bba2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bba6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbaa:	eb 1b                	jmp    c000bbc7 <sinc_multichan_vari_process+0x169>
c000bbac:	68 00 00 f0 3f       	push   0x3ff00000
c000bbb1:	6a 00                	push   0x0
c000bbb3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbbb:	e8 27 d5 01 00       	call   c00290e7 <__ltdf2>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	85 c0                	test   eax,eax
c000bbc5:	79 20                	jns    c000bbe7 <sinc_multichan_vari_process+0x189>
c000bbc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbcf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbd7:	e8 20 cf 01 00       	call   c0028afc <__divdf3>
c000bbdc:	83 c4 10             	add    esp,0x10
c000bbdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbe7:	50                   	push   eax
c000bbe8:	50                   	push   eax
c000bbe9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbf1:	e8 aa d6 01 00       	call   c00292a0 <lrint>
c000bbf6:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbf9:	40                   	inc    eax
c000bbfa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbfe:	0f af c5             	imul   eax,ebp
c000bc01:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc05:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc08:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc0c:	58                   	pop    eax
c000bc0d:	5a                   	pop    edx
c000bc0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc16:	e8 85 d6 01 00       	call   c00292a0 <lrint>
c000bc1b:	83 ec 0c             	sub    esp,0xc
c000bc1e:	50                   	push   eax
c000bc1f:	e8 57 d2 01 00       	call   c0028e7b <__floatsidf>
c000bc24:	83 c4 10             	add    esp,0x10
c000bc27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc2f:	52                   	push   edx
c000bc30:	50                   	push   eax
c000bc31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc39:	e8 ae cb 01 00       	call   c00287ec <__subdf3>
c000bc3e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc42:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc46:	83 c4 20             	add    esp,0x20
c000bc49:	6a 00                	push   0x0
c000bc4b:	6a 00                	push   0x0
c000bc4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc55:	e8 8d d4 01 00       	call   c00290e7 <__ltdf2>
c000bc5a:	83 c4 10             	add    esp,0x10
c000bc5d:	85 c0                	test   eax,eax
c000bc5f:	79 1f                	jns    c000bc80 <sinc_multichan_vari_process+0x222>
c000bc61:	68 00 00 f0 3f       	push   0x3ff00000
c000bc66:	6a 00                	push   0x0
c000bc68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc70:	e8 26 c5 01 00       	call   c002819b <__adddf3>
c000bc75:	83 c4 10             	add    esp,0x10
c000bc78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc7c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc83:	83 ec 10             	sub    esp,0x10
c000bc86:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc8a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc95:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc9d:	e8 4a cb 01 00       	call   c00287ec <__subdf3>
c000bca2:	83 c4 18             	add    esp,0x18
c000bca5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bca9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcad:	52                   	push   edx
c000bcae:	50                   	push   eax
c000bcaf:	e8 ec d5 01 00       	call   c00292a0 <lrint>
c000bcb4:	0f af e8             	imul   ebp,eax
c000bcb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcbb:	01 e8                	add    eax,ebp
c000bcbd:	99                   	cdq    
c000bcbe:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcc1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcc8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bccc:	68 00 00 f0 3f       	push   0x3ff00000
c000bcd1:	6a 00                	push   0x0
c000bcd3:	e8 24 ce 01 00       	call   c0028afc <__divdf3>
c000bcd8:	83 c4 10             	add    esp,0x10
c000bcdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bce3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bce8:	68 23 42 92 0c       	push   0xc924223
c000bced:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcf1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcf5:	e8 a1 c4 01 00       	call   c002819b <__adddf3>
c000bcfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd02:	83 c4 20             	add    esp,0x20
c000bd05:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd0d:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd15:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd18:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd1b:	7d 50                	jge    c000bd6d <sinc_multichan_vari_process+0x30f>
c000bd1d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd20:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd23:	01 c8                	add    eax,ecx
c000bd25:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd28:	99                   	cdq    
c000bd29:	f7 f9                	idiv   ecx
c000bd2b:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd2f:	7d 0c                	jge    c000bd3d <sinc_multichan_vari_process+0x2df>
c000bd31:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd34:	85 ed                	test   ebp,ebp
c000bd36:	79 6b                	jns    c000bda3 <sinc_multichan_vari_process+0x345>
c000bd38:	e9 e6 00 00 00       	jmp    c000be23 <sinc_multichan_vari_process+0x3c5>
c000bd3d:	50                   	push   eax
c000bd3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd42:	57                   	push   edi
c000bd43:	53                   	push   ebx
c000bd44:	e8 9b fb ff ff       	call   c000b8e4 <prepare_data>
c000bd49:	83 c4 10             	add    esp,0x10
c000bd4c:	89 c2                	mov    edx,eax
c000bd4e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd51:	85 c0                	test   eax,eax
c000bd53:	0f 85 bf 03 00 00    	jne    c000c118 <sinc_multichan_vari_process+0x6ba>
c000bd59:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd5c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd5f:	01 c8                	add    eax,ecx
c000bd61:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd64:	99                   	cdq    
c000bd65:	f7 f9                	idiv   ecx
c000bd67:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd6b:	7c c4                	jl     c000bd31 <sinc_multichan_vari_process+0x2d3>
c000bd6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd71:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd75:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd78:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd83:	89 06                	mov    DWORD PTR [esi],eax
c000bd85:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd88:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd8b:	99                   	cdq    
c000bd8c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd92:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd95:	99                   	cdq    
c000bd96:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd99:	31 d2                	xor    edx,edx
c000bd9b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd9e:	e9 75 03 00 00       	jmp    c000c118 <sinc_multichan_vari_process+0x6ba>
c000bda3:	83 ec 0c             	sub    esp,0xc
c000bda6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bda9:	e8 cd d0 01 00       	call   c0028e7b <__floatsidf>
c000bdae:	83 c4 10             	add    esp,0x10
c000bdb1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdb5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdbd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdc1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc9:	e8 cd c3 01 00       	call   c002819b <__adddf3>
c000bdce:	83 c4 10             	add    esp,0x10
c000bdd1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdd5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde9:	e8 ad c3 01 00       	call   c002819b <__adddf3>
c000bdee:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdf1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdf5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdf9:	e8 7d d0 01 00       	call   c0028e7b <__floatsidf>
c000bdfe:	83 c4 10             	add    esp,0x10
c000be01:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be09:	52                   	push   edx
c000be0a:	50                   	push   eax
c000be0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be13:	e8 cd d2 01 00       	call   c00290e5 <__gedf2>
c000be18:	83 c4 10             	add    esp,0x10
c000be1b:	85 c0                	test   eax,eax
c000be1d:	0f 89 4a ff ff ff    	jns    c000bd6d <sinc_multichan_vari_process+0x30f>
c000be23:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be27:	0f 8e ed 00 00 00    	jle    c000bf1a <sinc_multichan_vari_process+0x4bc>
c000be2d:	83 ec 10             	sub    esp,0x10
c000be30:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be33:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be36:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be39:	ff 36                	push   DWORD PTR [esi]
c000be3b:	e8 ac c9 01 00       	call   c00287ec <__subdf3>
c000be40:	83 c4 18             	add    esp,0x18
c000be43:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be47:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be4b:	52                   	push   edx
c000be4c:	50                   	push   eax
c000be4d:	e8 2e d4 01 00       	call   c0029280 <fabs>
c000be52:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be56:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be5a:	83 c4 10             	add    esp,0x10
c000be5d:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be62:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be6f:	e8 55 d2 01 00       	call   c00290c9 <__gtdf2>
c000be74:	83 c4 10             	add    esp,0x10
c000be77:	85 c0                	test   eax,eax
c000be79:	0f 8e 9b 00 00 00    	jle    c000bf1a <sinc_multichan_vari_process+0x4bc>
c000be7f:	8b 06                	mov    eax,DWORD PTR [esi]
c000be81:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be88:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be8c:	52                   	push   edx
c000be8d:	50                   	push   eax
c000be8e:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be91:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be94:	e8 53 c9 01 00       	call   c00287ec <__subdf3>
c000be99:	59                   	pop    ecx
c000be9a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be9e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bea5:	e8 d1 cf 01 00       	call   c0028e7b <__floatsidf>
c000beaa:	83 c4 10             	add    esp,0x10
c000bead:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb5:	52                   	push   edx
c000beb6:	50                   	push   eax
c000beb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebf:	e8 54 c9 01 00       	call   c0028818 <__muldf3>
c000bec4:	5d                   	pop    ebp
c000bec5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bec9:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000becd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bed0:	e8 a6 cf 01 00       	call   c0028e7b <__floatsidf>
c000bed5:	83 c4 10             	add    esp,0x10
c000bed8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bedc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bee0:	52                   	push   edx
c000bee1:	50                   	push   eax
c000bee2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beea:	e8 0d cc 01 00       	call   c0028afc <__divdf3>
c000beef:	83 c4 10             	add    esp,0x10
c000bef2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bef6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000befa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000befe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf0a:	e8 8c c2 01 00       	call   c002819b <__adddf3>
c000bf0f:	83 c4 10             	add    esp,0x10
c000bf12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf1a:	83 ec 0c             	sub    esp,0xc
c000bf1d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf20:	e8 56 cf 01 00       	call   c0028e7b <__floatsidf>
c000bf25:	83 c4 10             	add    esp,0x10
c000bf28:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf2c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf40:	e8 a2 d1 01 00       	call   c00290e7 <__ltdf2>
c000bf45:	83 c4 10             	add    esp,0x10
c000bf48:	85 c0                	test   eax,eax
c000bf4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf4e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf52:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf56:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf5a:	78 10                	js     c000bf6c <sinc_multichan_vari_process+0x50e>
c000bf5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf64:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf68:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf6c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf70:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7c:	e8 97 c8 01 00       	call   c0028818 <__muldf3>
c000bf81:	59                   	pop    ecx
c000bf82:	5d                   	pop    ebp
c000bf83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf87:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf8b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf93:	e8 25 f9 ff ff       	call   c000b8bd <double_to_fp>
c000bf98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf9c:	89 c5                	mov    ebp,eax
c000bf9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfa2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfa6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfaa:	e8 69 c8 01 00       	call   c0028818 <__muldf3>
c000bfaf:	83 c4 18             	add    esp,0x18
c000bfb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfba:	52                   	push   edx
c000bfbb:	50                   	push   eax
c000bfbc:	e8 fc f8 ff ff       	call   c000b8bd <double_to_fp>
c000bfc1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfc4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfc8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfcb:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfce:	50                   	push   eax
c000bfcf:	50                   	push   eax
c000bfd0:	50                   	push   eax
c000bfd1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfd4:	e8 a2 ce 01 00       	call   c0028e7b <__floatsidf>
c000bfd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfdd:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfe1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff1:	e8 06 cb 01 00       	call   c0028afc <__divdf3>
c000bff6:	83 c4 1c             	add    esp,0x1c
c000bff9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bffd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c001:	52                   	push   edx
c000c002:	89 ea                	mov    edx,ebp
c000c004:	50                   	push   eax
c000c005:	89 d8                	mov    eax,ebx
c000c007:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c00a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c00e:	e8 69 ed ff ff       	call   c000ad7c <calc_output_multi>
c000c013:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c016:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c019:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c01d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c021:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c025:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c029:	e8 ce ca 01 00       	call   c0028afc <__divdf3>
c000c02e:	83 c4 10             	add    esp,0x10
c000c031:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c035:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c039:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c03d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c041:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c045:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c049:	e8 4d c1 01 00       	call   c002819b <__adddf3>
c000c04e:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c052:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c056:	83 c4 28             	add    esp,0x28
c000c059:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c05d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c061:	e8 3a d2 01 00       	call   c00292a0 <lrint>
c000c066:	83 ec 0c             	sub    esp,0xc
c000c069:	50                   	push   eax
c000c06a:	e8 0c ce 01 00       	call   c0028e7b <__floatsidf>
c000c06f:	83 c4 10             	add    esp,0x10
c000c072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c076:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c07a:	52                   	push   edx
c000c07b:	50                   	push   eax
c000c07c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c080:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c084:	e8 63 c7 01 00       	call   c00287ec <__subdf3>
c000c089:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c08d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c091:	83 c4 20             	add    esp,0x20
c000c094:	6a 00                	push   0x0
c000c096:	6a 00                	push   0x0
c000c098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0a0:	e8 42 d0 01 00       	call   c00290e7 <__ltdf2>
c000c0a5:	83 c4 10             	add    esp,0x10
c000c0a8:	85 c0                	test   eax,eax
c000c0aa:	79 20                	jns    c000c0cc <sinc_multichan_vari_process+0x66e>
c000c0ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0bc:	e8 da c0 01 00       	call   c002819b <__adddf3>
c000c0c1:	83 c4 10             	add    esp,0x10
c000c0c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0cf:	83 ec 10             	sub    esp,0x10
c000c0d2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0d6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0e9:	e8 fe c6 01 00       	call   c00287ec <__subdf3>
c000c0ee:	83 c4 18             	add    esp,0x18
c000c0f1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0f9:	52                   	push   edx
c000c0fa:	50                   	push   eax
c000c0fb:	e8 a0 d1 01 00       	call   c00292a0 <lrint>
c000c100:	0f af e8             	imul   ebp,eax
c000c103:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c107:	83 c4 10             	add    esp,0x10
c000c10a:	01 e8                	add    eax,ebp
c000c10c:	99                   	cdq    
c000c10d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c110:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c113:	e9 fd fb ff ff       	jmp    c000bd15 <sinc_multichan_vari_process+0x2b7>
c000c118:	83 c4 4c             	add    esp,0x4c
c000c11b:	89 d0                	mov    eax,edx
c000c11d:	5b                   	pop    ebx
c000c11e:	5e                   	pop    esi
c000c11f:	5f                   	pop    edi
c000c120:	5d                   	pop    ebp
c000c121:	c3                   	ret    

c000c122 <sinc_hex_vari_process>:
c000c122:	55                   	push   ebp
c000c123:	ba 05 00 00 00       	mov    edx,0x5
c000c128:	57                   	push   edi
c000c129:	56                   	push   esi
c000c12a:	53                   	push   ebx
c000c12b:	83 ec 4c             	sub    esp,0x4c
c000c12e:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c132:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c136:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c139:	85 db                	test   ebx,ebx
c000c13b:	0f 84 9c 06 00 00    	je     c000c7dd <sinc_hex_vari_process+0x6bb>
c000c141:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c144:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c147:	0f af c7             	imul   eax,edi
c000c14a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c14d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c150:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c157:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c15e:	0f af c7             	imul   eax,edi
c000c161:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c164:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c167:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c16a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c16e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c172:	68 00 00 70 3f       	push   0x3f700000
c000c177:	6a 00                	push   0x0
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c181:	e8 61 cf 01 00       	call   c00290e7 <__ltdf2>
c000c186:	83 c4 10             	add    esp,0x10
c000c189:	ba 16 00 00 00       	mov    edx,0x16
c000c18e:	85 c0                	test   eax,eax
c000c190:	0f 88 47 06 00 00    	js     c000c7dd <sinc_hex_vari_process+0x6bb>
c000c196:	68 00 00 70 40       	push   0x40700000
c000c19b:	6a 00                	push   0x0
c000c19d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a5:	e8 1f cf 01 00       	call   c00290c9 <__gtdf2>
c000c1aa:	83 c4 10             	add    esp,0x10
c000c1ad:	ba 16 00 00 00       	mov    edx,0x16
c000c1b2:	85 c0                	test   eax,eax
c000c1b4:	0f 8f 23 06 00 00    	jg     c000c7dd <sinc_hex_vari_process+0x6bb>
c000c1ba:	83 ec 0c             	sub    esp,0xc
c000c1bd:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1c0:	e8 b6 cc 01 00       	call   c0028e7b <__floatsidf>
c000c1c5:	83 c4 10             	add    esp,0x10
c000c1c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1d0:	68 00 00 00 40       	push   0x40000000
c000c1d5:	6a 00                	push   0x0
c000c1d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1df:	e8 b7 bf 01 00       	call   c002819b <__adddf3>
c000c1e4:	59                   	pop    ecx
c000c1e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ed:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1f0:	e8 86 cc 01 00       	call   c0028e7b <__floatsidf>
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c200:	52                   	push   edx
c000c201:	50                   	push   eax
c000c202:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20a:	e8 ed c8 01 00       	call   c0028afc <__divdf3>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c216:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c21a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c21d:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c220:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c224:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c228:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c230:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c234:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c238:	e8 8c ce 01 00       	call   c00290c9 <__gtdf2>
c000c23d:	83 c4 10             	add    esp,0x10
c000c240:	85 c0                	test   eax,eax
c000c242:	7e 2d                	jle    c000c271 <sinc_hex_vari_process+0x14f>
c000c244:	68 00 00 f0 3f       	push   0x3ff00000
c000c249:	6a 00                	push   0x0
c000c24b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c24f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c253:	e8 8f ce 01 00       	call   c00290e7 <__ltdf2>
c000c258:	83 c4 10             	add    esp,0x10
c000c25b:	85 c0                	test   eax,eax
c000c25d:	79 4d                	jns    c000c2ac <sinc_hex_vari_process+0x18a>
c000c25f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c263:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c267:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c26b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c26f:	eb 1b                	jmp    c000c28c <sinc_hex_vari_process+0x16a>
c000c271:	68 00 00 f0 3f       	push   0x3ff00000
c000c276:	6a 00                	push   0x0
c000c278:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c27c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c280:	e8 62 ce 01 00       	call   c00290e7 <__ltdf2>
c000c285:	83 c4 10             	add    esp,0x10
c000c288:	85 c0                	test   eax,eax
c000c28a:	79 20                	jns    c000c2ac <sinc_hex_vari_process+0x18a>
c000c28c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c290:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c294:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c298:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c29c:	e8 5b c8 01 00       	call   c0028afc <__divdf3>
c000c2a1:	83 c4 10             	add    esp,0x10
c000c2a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2ac:	50                   	push   eax
c000c2ad:	50                   	push   eax
c000c2ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b6:	e8 e5 cf 01 00       	call   c00292a0 <lrint>
c000c2bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2be:	40                   	inc    eax
c000c2bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2c3:	0f af c7             	imul   eax,edi
c000c2c6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d1:	58                   	pop    eax
c000c2d2:	5a                   	pop    edx
c000c2d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2db:	e8 c0 cf 01 00       	call   c00292a0 <lrint>
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	50                   	push   eax
c000c2e4:	e8 92 cb 01 00       	call   c0028e7b <__floatsidf>
c000c2e9:	83 c4 10             	add    esp,0x10
c000c2ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2f4:	52                   	push   edx
c000c2f5:	50                   	push   eax
c000c2f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2fe:	e8 e9 c4 01 00       	call   c00287ec <__subdf3>
c000c303:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c307:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c30b:	83 c4 20             	add    esp,0x20
c000c30e:	6a 00                	push   0x0
c000c310:	6a 00                	push   0x0
c000c312:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c316:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c31a:	e8 c8 cd 01 00       	call   c00290e7 <__ltdf2>
c000c31f:	83 c4 10             	add    esp,0x10
c000c322:	85 c0                	test   eax,eax
c000c324:	79 1f                	jns    c000c345 <sinc_hex_vari_process+0x223>
c000c326:	68 00 00 f0 3f       	push   0x3ff00000
c000c32b:	6a 00                	push   0x0
c000c32d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c331:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c335:	e8 61 be 01 00       	call   c002819b <__adddf3>
c000c33a:	83 c4 10             	add    esp,0x10
c000c33d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c341:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c345:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c348:	83 ec 10             	sub    esp,0x10
c000c34b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c34f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c35e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c362:	e8 85 c4 01 00       	call   c00287ec <__subdf3>
c000c367:	83 c4 18             	add    esp,0x18
c000c36a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c36e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c372:	52                   	push   edx
c000c373:	50                   	push   eax
c000c374:	e8 27 cf 01 00       	call   c00292a0 <lrint>
c000c379:	0f af f8             	imul   edi,eax
c000c37c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c380:	01 f8                	add    eax,edi
c000c382:	99                   	cdq    
c000c383:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c386:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c389:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c38d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c391:	68 00 00 f0 3f       	push   0x3ff00000
c000c396:	6a 00                	push   0x0
c000c398:	e8 5f c7 01 00       	call   c0028afc <__divdf3>
c000c39d:	83 c4 10             	add    esp,0x10
c000c3a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3ad:	68 23 42 92 0c       	push   0xc924223
c000c3b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3b6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ba:	e8 dc bd 01 00       	call   c002819b <__adddf3>
c000c3bf:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3c3:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3c7:	83 c4 20             	add    esp,0x20
c000c3ca:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3d2:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3da:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3dd:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3e0:	7d 50                	jge    c000c432 <sinc_hex_vari_process+0x310>
c000c3e2:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3e5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3e8:	01 c8                	add    eax,ecx
c000c3ea:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ed:	99                   	cdq    
c000c3ee:	f7 f9                	idiv   ecx
c000c3f0:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3f4:	7d 0c                	jge    c000c402 <sinc_hex_vari_process+0x2e0>
c000c3f6:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3f9:	85 ff                	test   edi,edi
c000c3fb:	79 6c                	jns    c000c469 <sinc_hex_vari_process+0x347>
c000c3fd:	e9 e7 00 00 00       	jmp    c000c4e9 <sinc_hex_vari_process+0x3c7>
c000c402:	50                   	push   eax
c000c403:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c407:	56                   	push   esi
c000c408:	53                   	push   ebx
c000c409:	e8 d6 f4 ff ff       	call   c000b8e4 <prepare_data>
c000c40e:	83 c4 10             	add    esp,0x10
c000c411:	89 c2                	mov    edx,eax
c000c413:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c416:	85 c0                	test   eax,eax
c000c418:	0f 85 bf 03 00 00    	jne    c000c7dd <sinc_hex_vari_process+0x6bb>
c000c41e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c421:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c424:	01 c8                	add    eax,ecx
c000c426:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c429:	99                   	cdq    
c000c42a:	f7 f9                	idiv   ecx
c000c42c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c430:	7c c4                	jl     c000c3f6 <sinc_hex_vari_process+0x2d4>
c000c432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c436:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c43a:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c43d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c444:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c448:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c44b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c44e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c451:	99                   	cdq    
c000c452:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c455:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c458:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c45b:	99                   	cdq    
c000c45c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c45f:	31 d2                	xor    edx,edx
c000c461:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c464:	e9 74 03 00 00       	jmp    c000c7dd <sinc_hex_vari_process+0x6bb>
c000c469:	83 ec 0c             	sub    esp,0xc
c000c46c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c46f:	e8 07 ca 01 00       	call   c0028e7b <__floatsidf>
c000c474:	83 c4 10             	add    esp,0x10
c000c477:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c47b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c47f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c483:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c487:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c48b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c48f:	e8 07 bd 01 00       	call   c002819b <__adddf3>
c000c494:	83 c4 10             	add    esp,0x10
c000c497:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c49b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c49f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4af:	e8 e7 bc 01 00       	call   c002819b <__adddf3>
c000c4b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4b7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bb:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4bf:	e8 b7 c9 01 00       	call   c0028e7b <__floatsidf>
c000c4c4:	83 c4 10             	add    esp,0x10
c000c4c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4cf:	52                   	push   edx
c000c4d0:	50                   	push   eax
c000c4d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4d9:	e8 07 cc 01 00       	call   c00290e5 <__gedf2>
c000c4de:	83 c4 10             	add    esp,0x10
c000c4e1:	85 c0                	test   eax,eax
c000c4e3:	0f 89 49 ff ff ff    	jns    c000c432 <sinc_hex_vari_process+0x310>
c000c4e9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ed:	0f 8e ef 00 00 00    	jle    c000c5e2 <sinc_hex_vari_process+0x4c0>
c000c4f3:	83 ec 10             	sub    esp,0x10
c000c4f6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4f9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4fc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4ff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c502:	e8 e5 c2 01 00       	call   c00287ec <__subdf3>
c000c507:	83 c4 18             	add    esp,0x18
c000c50a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c50e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c512:	52                   	push   edx
c000c513:	50                   	push   eax
c000c514:	e8 67 cd 01 00       	call   c0029280 <fabs>
c000c519:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c51d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c521:	83 c4 10             	add    esp,0x10
c000c524:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c529:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c52e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c532:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c536:	e8 8e cb 01 00       	call   c00290c9 <__gtdf2>
c000c53b:	83 c4 10             	add    esp,0x10
c000c53e:	85 c0                	test   eax,eax
c000c540:	0f 8e 9c 00 00 00    	jle    c000c5e2 <sinc_hex_vari_process+0x4c0>
c000c546:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c549:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c54c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c550:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c554:	52                   	push   edx
c000c555:	50                   	push   eax
c000c556:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c559:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c55c:	e8 8b c2 01 00       	call   c00287ec <__subdf3>
c000c561:	59                   	pop    ecx
c000c562:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c566:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c56d:	e8 09 c9 01 00       	call   c0028e7b <__floatsidf>
c000c572:	83 c4 10             	add    esp,0x10
c000c575:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c579:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57d:	52                   	push   edx
c000c57e:	50                   	push   eax
c000c57f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c583:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c587:	e8 8c c2 01 00       	call   c0028818 <__muldf3>
c000c58c:	5f                   	pop    edi
c000c58d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c591:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c595:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c598:	e8 de c8 01 00       	call   c0028e7b <__floatsidf>
c000c59d:	83 c4 10             	add    esp,0x10
c000c5a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5a8:	52                   	push   edx
c000c5a9:	50                   	push   eax
c000c5aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5b2:	e8 45 c5 01 00       	call   c0028afc <__divdf3>
c000c5b7:	83 c4 10             	add    esp,0x10
c000c5ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5be:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5d2:	e8 c4 bb 01 00       	call   c002819b <__adddf3>
c000c5d7:	83 c4 10             	add    esp,0x10
c000c5da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5de:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5e2:	83 ec 0c             	sub    esp,0xc
c000c5e5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5e8:	e8 8e c8 01 00       	call   c0028e7b <__floatsidf>
c000c5ed:	83 c4 10             	add    esp,0x10
c000c5f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 da ca 01 00       	call   c00290e7 <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	85 c0                	test   eax,eax
c000c612:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c616:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c61a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c61e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c622:	78 10                	js     c000c634 <sinc_hex_vari_process+0x512>
c000c624:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c628:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c62c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c630:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c634:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c63c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c640:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c644:	e8 cf c1 01 00       	call   c0028818 <__muldf3>
c000c649:	59                   	pop    ecx
c000c64a:	5f                   	pop    edi
c000c64b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c64f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c657:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c65b:	e8 5d f2 ff ff       	call   c000b8bd <double_to_fp>
c000c660:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c664:	89 c7                	mov    edi,eax
c000c666:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c66a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c66e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c672:	e8 a1 c1 01 00       	call   c0028818 <__muldf3>
c000c677:	83 c4 18             	add    esp,0x18
c000c67a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c67e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c682:	52                   	push   edx
c000c683:	50                   	push   eax
c000c684:	e8 34 f2 ff ff       	call   c000b8bd <double_to_fp>
c000c689:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c68c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c690:	83 c4 0c             	add    esp,0xc
c000c693:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c696:	8d 04 90             	lea    eax,[eax+edx*4]
c000c699:	50                   	push   eax
c000c69a:	50                   	push   eax
c000c69b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c69e:	e8 d8 c7 01 00       	call   c0028e7b <__floatsidf>
c000c6a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6a7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6ab:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6b7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6bb:	e8 3c c4 01 00       	call   c0028afc <__divdf3>
c000c6c0:	83 c4 18             	add    esp,0x18
c000c6c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6cb:	52                   	push   edx
c000c6cc:	89 fa                	mov    edx,edi
c000c6ce:	50                   	push   eax
c000c6cf:	89 d8                	mov    eax,ebx
c000c6d1:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6d5:	e8 50 de ff ff       	call   c000a52a <calc_output_hex>
c000c6da:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6de:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6e2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6ee:	e8 09 c4 01 00       	call   c0028afc <__divdf3>
c000c6f3:	83 c4 10             	add    esp,0x10
c000c6f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c706:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c70a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c70e:	e8 88 ba 01 00       	call   c002819b <__adddf3>
c000c713:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c717:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c71b:	83 c4 18             	add    esp,0x18
c000c71e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c722:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c726:	e8 75 cb 01 00       	call   c00292a0 <lrint>
c000c72b:	83 ec 0c             	sub    esp,0xc
c000c72e:	50                   	push   eax
c000c72f:	e8 47 c7 01 00       	call   c0028e7b <__floatsidf>
c000c734:	83 c4 10             	add    esp,0x10
c000c737:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c73b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c73f:	52                   	push   edx
c000c740:	50                   	push   eax
c000c741:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c745:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c749:	e8 9e c0 01 00       	call   c00287ec <__subdf3>
c000c74e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c752:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c756:	83 c4 20             	add    esp,0x20
c000c759:	6a 00                	push   0x0
c000c75b:	6a 00                	push   0x0
c000c75d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c761:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c765:	e8 7d c9 01 00       	call   c00290e7 <__ltdf2>
c000c76a:	83 c4 10             	add    esp,0x10
c000c76d:	85 c0                	test   eax,eax
c000c76f:	79 20                	jns    c000c791 <sinc_hex_vari_process+0x66f>
c000c771:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c779:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c77d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c781:	e8 15 ba 01 00       	call   c002819b <__adddf3>
c000c786:	83 c4 10             	add    esp,0x10
c000c789:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c78d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c791:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c794:	83 ec 10             	sub    esp,0x10
c000c797:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c79b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7ae:	e8 39 c0 01 00       	call   c00287ec <__subdf3>
c000c7b3:	83 c4 18             	add    esp,0x18
c000c7b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7be:	52                   	push   edx
c000c7bf:	50                   	push   eax
c000c7c0:	e8 db ca 01 00       	call   c00292a0 <lrint>
c000c7c5:	0f af f8             	imul   edi,eax
c000c7c8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7cc:	83 c4 10             	add    esp,0x10
c000c7cf:	01 f8                	add    eax,edi
c000c7d1:	99                   	cdq    
c000c7d2:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7d5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7d8:	e9 fd fb ff ff       	jmp    c000c3da <sinc_hex_vari_process+0x2b8>
c000c7dd:	83 c4 4c             	add    esp,0x4c
c000c7e0:	89 d0                	mov    eax,edx
c000c7e2:	5b                   	pop    ebx
c000c7e3:	5e                   	pop    esi
c000c7e4:	5f                   	pop    edi
c000c7e5:	5d                   	pop    ebp
c000c7e6:	c3                   	ret    

c000c7e7 <sinc_quad_vari_process>:
c000c7e7:	55                   	push   ebp
c000c7e8:	ba 05 00 00 00       	mov    edx,0x5
c000c7ed:	57                   	push   edi
c000c7ee:	56                   	push   esi
c000c7ef:	53                   	push   ebx
c000c7f0:	83 ec 4c             	sub    esp,0x4c
c000c7f3:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7f7:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7fb:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7fe:	85 db                	test   ebx,ebx
c000c800:	0f 84 9c 06 00 00    	je     c000cea2 <sinc_quad_vari_process+0x6bb>
c000c806:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c809:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c80c:	0f af c7             	imul   eax,edi
c000c80f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c812:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c815:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c81c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c823:	0f af c7             	imul   eax,edi
c000c826:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c829:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c82c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c82f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c833:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c837:	68 00 00 70 3f       	push   0x3f700000
c000c83c:	6a 00                	push   0x0
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c846:	e8 9c c8 01 00       	call   c00290e7 <__ltdf2>
c000c84b:	83 c4 10             	add    esp,0x10
c000c84e:	ba 16 00 00 00       	mov    edx,0x16
c000c853:	85 c0                	test   eax,eax
c000c855:	0f 88 47 06 00 00    	js     c000cea2 <sinc_quad_vari_process+0x6bb>
c000c85b:	68 00 00 70 40       	push   0x40700000
c000c860:	6a 00                	push   0x0
c000c862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c86a:	e8 5a c8 01 00       	call   c00290c9 <__gtdf2>
c000c86f:	83 c4 10             	add    esp,0x10
c000c872:	ba 16 00 00 00       	mov    edx,0x16
c000c877:	85 c0                	test   eax,eax
c000c879:	0f 8f 23 06 00 00    	jg     c000cea2 <sinc_quad_vari_process+0x6bb>
c000c87f:	83 ec 0c             	sub    esp,0xc
c000c882:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c885:	e8 f1 c5 01 00       	call   c0028e7b <__floatsidf>
c000c88a:	83 c4 10             	add    esp,0x10
c000c88d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c891:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c895:	68 00 00 00 40       	push   0x40000000
c000c89a:	6a 00                	push   0x0
c000c89c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a4:	e8 f2 b8 01 00       	call   c002819b <__adddf3>
c000c8a9:	59                   	pop    ecx
c000c8aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8b2:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8b5:	e8 c1 c5 01 00       	call   c0028e7b <__floatsidf>
c000c8ba:	83 c4 10             	add    esp,0x10
c000c8bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8c5:	52                   	push   edx
c000c8c6:	50                   	push   eax
c000c8c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cf:	e8 28 c2 01 00       	call   c0028afc <__divdf3>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8db:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8df:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8e2:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8e9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8fd:	e8 c7 c7 01 00       	call   c00290c9 <__gtdf2>
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	85 c0                	test   eax,eax
c000c907:	7e 2d                	jle    c000c936 <sinc_quad_vari_process+0x14f>
c000c909:	68 00 00 f0 3f       	push   0x3ff00000
c000c90e:	6a 00                	push   0x0
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c918:	e8 ca c7 01 00       	call   c00290e7 <__ltdf2>
c000c91d:	83 c4 10             	add    esp,0x10
c000c920:	85 c0                	test   eax,eax
c000c922:	79 4d                	jns    c000c971 <sinc_quad_vari_process+0x18a>
c000c924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c928:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c92c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c930:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c934:	eb 1b                	jmp    c000c951 <sinc_quad_vari_process+0x16a>
c000c936:	68 00 00 f0 3f       	push   0x3ff00000
c000c93b:	6a 00                	push   0x0
c000c93d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c941:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c945:	e8 9d c7 01 00       	call   c00290e7 <__ltdf2>
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	85 c0                	test   eax,eax
c000c94f:	79 20                	jns    c000c971 <sinc_quad_vari_process+0x18a>
c000c951:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c955:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c959:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c95d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c961:	e8 96 c1 01 00       	call   c0028afc <__divdf3>
c000c966:	83 c4 10             	add    esp,0x10
c000c969:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c96d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c971:	50                   	push   eax
c000c972:	50                   	push   eax
c000c973:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c977:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c97b:	e8 20 c9 01 00       	call   c00292a0 <lrint>
c000c980:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c983:	40                   	inc    eax
c000c984:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c988:	0f af c7             	imul   eax,edi
c000c98b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c98f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c992:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c996:	58                   	pop    eax
c000c997:	5a                   	pop    edx
c000c998:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c99c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9a0:	e8 fb c8 01 00       	call   c00292a0 <lrint>
c000c9a5:	83 ec 0c             	sub    esp,0xc
c000c9a8:	50                   	push   eax
c000c9a9:	e8 cd c4 01 00       	call   c0028e7b <__floatsidf>
c000c9ae:	83 c4 10             	add    esp,0x10
c000c9b1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9b5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9b9:	52                   	push   edx
c000c9ba:	50                   	push   eax
c000c9bb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9c3:	e8 24 be 01 00       	call   c00287ec <__subdf3>
c000c9c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9d0:	83 c4 20             	add    esp,0x20
c000c9d3:	6a 00                	push   0x0
c000c9d5:	6a 00                	push   0x0
c000c9d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9df:	e8 03 c7 01 00       	call   c00290e7 <__ltdf2>
c000c9e4:	83 c4 10             	add    esp,0x10
c000c9e7:	85 c0                	test   eax,eax
c000c9e9:	79 1f                	jns    c000ca0a <sinc_quad_vari_process+0x223>
c000c9eb:	68 00 00 f0 3f       	push   0x3ff00000
c000c9f0:	6a 00                	push   0x0
c000c9f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9fa:	e8 9c b7 01 00       	call   c002819b <__adddf3>
c000c9ff:	83 c4 10             	add    esp,0x10
c000ca02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca0a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca0d:	83 ec 10             	sub    esp,0x10
c000ca10:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca14:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca1f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca23:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca27:	e8 c0 bd 01 00       	call   c00287ec <__subdf3>
c000ca2c:	83 c4 18             	add    esp,0x18
c000ca2f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca33:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca37:	52                   	push   edx
c000ca38:	50                   	push   eax
c000ca39:	e8 62 c8 01 00       	call   c00292a0 <lrint>
c000ca3e:	0f af f8             	imul   edi,eax
c000ca41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca45:	01 f8                	add    eax,edi
c000ca47:	99                   	cdq    
c000ca48:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca4b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca56:	68 00 00 f0 3f       	push   0x3ff00000
c000ca5b:	6a 00                	push   0x0
c000ca5d:	e8 9a c0 01 00       	call   c0028afc <__divdf3>
c000ca62:	83 c4 10             	add    esp,0x10
c000ca65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca6d:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca72:	68 23 42 92 0c       	push   0xc924223
c000ca77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca7f:	e8 17 b7 01 00       	call   c002819b <__adddf3>
c000ca84:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca88:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca8c:	83 c4 20             	add    esp,0x20
c000ca8f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca97:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca9f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000caa2:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000caa5:	7d 50                	jge    c000caf7 <sinc_quad_vari_process+0x310>
c000caa7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caaa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caad:	01 c8                	add    eax,ecx
c000caaf:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cab2:	99                   	cdq    
c000cab3:	f7 f9                	idiv   ecx
c000cab5:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cab9:	7d 0c                	jge    c000cac7 <sinc_quad_vari_process+0x2e0>
c000cabb:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cabe:	85 ff                	test   edi,edi
c000cac0:	79 6c                	jns    c000cb2e <sinc_quad_vari_process+0x347>
c000cac2:	e9 e7 00 00 00       	jmp    c000cbae <sinc_quad_vari_process+0x3c7>
c000cac7:	50                   	push   eax
c000cac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cacc:	56                   	push   esi
c000cacd:	53                   	push   ebx
c000cace:	e8 11 ee ff ff       	call   c000b8e4 <prepare_data>
c000cad3:	83 c4 10             	add    esp,0x10
c000cad6:	89 c2                	mov    edx,eax
c000cad8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cadb:	85 c0                	test   eax,eax
c000cadd:	0f 85 bf 03 00 00    	jne    c000cea2 <sinc_quad_vari_process+0x6bb>
c000cae3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cae6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cae9:	01 c8                	add    eax,ecx
c000caeb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caee:	99                   	cdq    
c000caef:	f7 f9                	idiv   ecx
c000caf1:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caf5:	7c c4                	jl     c000cabb <sinc_quad_vari_process+0x2d4>
c000caf7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cafb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caff:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb02:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb09:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb0d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb10:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb13:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb16:	99                   	cdq    
c000cb17:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb1a:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb20:	99                   	cdq    
c000cb21:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb24:	31 d2                	xor    edx,edx
c000cb26:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb29:	e9 74 03 00 00       	jmp    c000cea2 <sinc_quad_vari_process+0x6bb>
c000cb2e:	83 ec 0c             	sub    esp,0xc
c000cb31:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb34:	e8 42 c3 01 00       	call   c0028e7b <__floatsidf>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb54:	e8 42 b6 01 00       	call   c002819b <__adddf3>
c000cb59:	83 c4 10             	add    esp,0x10
c000cb5c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb60:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb64:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb68:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb6c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb74:	e8 22 b6 01 00       	call   c002819b <__adddf3>
c000cb79:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb7c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb80:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb84:	e8 f2 c2 01 00       	call   c0028e7b <__floatsidf>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb90:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb94:	52                   	push   edx
c000cb95:	50                   	push   eax
c000cb96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb9e:	e8 42 c5 01 00       	call   c00290e5 <__gedf2>
c000cba3:	83 c4 10             	add    esp,0x10
c000cba6:	85 c0                	test   eax,eax
c000cba8:	0f 89 49 ff ff ff    	jns    c000caf7 <sinc_quad_vari_process+0x310>
c000cbae:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbb2:	0f 8e ef 00 00 00    	jle    c000cca7 <sinc_quad_vari_process+0x4c0>
c000cbb8:	83 ec 10             	sub    esp,0x10
c000cbbb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbbe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbc1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbc4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbc7:	e8 20 bc 01 00       	call   c00287ec <__subdf3>
c000cbcc:	83 c4 18             	add    esp,0x18
c000cbcf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbd7:	52                   	push   edx
c000cbd8:	50                   	push   eax
c000cbd9:	e8 a2 c6 01 00       	call   c0029280 <fabs>
c000cbde:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbe2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbe6:	83 c4 10             	add    esp,0x10
c000cbe9:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbee:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbfb:	e8 c9 c4 01 00       	call   c00290c9 <__gtdf2>
c000cc00:	83 c4 10             	add    esp,0x10
c000cc03:	85 c0                	test   eax,eax
c000cc05:	0f 8e 9c 00 00 00    	jle    c000cca7 <sinc_quad_vari_process+0x4c0>
c000cc0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc0e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc11:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc15:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc19:	52                   	push   edx
c000cc1a:	50                   	push   eax
c000cc1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc1e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc21:	e8 c6 bb 01 00       	call   c00287ec <__subdf3>
c000cc26:	59                   	pop    ecx
c000cc27:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc2f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc32:	e8 44 c2 01 00       	call   c0028e7b <__floatsidf>
c000cc37:	83 c4 10             	add    esp,0x10
c000cc3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc42:	52                   	push   edx
c000cc43:	50                   	push   eax
c000cc44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4c:	e8 c7 bb 01 00       	call   c0028818 <__muldf3>
c000cc51:	5f                   	pop    edi
c000cc52:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc56:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc5a:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc5d:	e8 19 c2 01 00       	call   c0028e7b <__floatsidf>
c000cc62:	83 c4 10             	add    esp,0x10
c000cc65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc69:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc6d:	52                   	push   edx
c000cc6e:	50                   	push   eax
c000cc6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc73:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc77:	e8 80 be 01 00       	call   c0028afc <__divdf3>
c000cc7c:	83 c4 10             	add    esp,0x10
c000cc7f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc83:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc97:	e8 ff b4 01 00       	call   c002819b <__adddf3>
c000cc9c:	83 c4 10             	add    esp,0x10
c000cc9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cca7:	83 ec 0c             	sub    esp,0xc
c000ccaa:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccad:	e8 c9 c1 01 00       	call   c0028e7b <__floatsidf>
c000ccb2:	83 c4 10             	add    esp,0x10
c000ccb5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccb9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 15 c4 01 00       	call   c00290e7 <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	85 c0                	test   eax,eax
c000ccd7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccdb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccdf:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000cce3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000cce7:	78 10                	js     c000ccf9 <sinc_quad_vari_process+0x512>
c000cce9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cced:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ccf5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccf9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccfd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd01:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd05:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd09:	e8 0a bb 01 00       	call   c0028818 <__muldf3>
c000cd0e:	59                   	pop    ecx
c000cd0f:	5f                   	pop    edi
c000cd10:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd14:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd20:	e8 98 eb ff ff       	call   c000b8bd <double_to_fp>
c000cd25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd29:	89 c7                	mov    edi,eax
c000cd2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd2f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd37:	e8 dc ba 01 00       	call   c0028818 <__muldf3>
c000cd3c:	83 c4 18             	add    esp,0x18
c000cd3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd47:	52                   	push   edx
c000cd48:	50                   	push   eax
c000cd49:	e8 6f eb ff ff       	call   c000b8bd <double_to_fp>
c000cd4e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd51:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd55:	83 c4 0c             	add    esp,0xc
c000cd58:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd5b:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd5e:	50                   	push   eax
c000cd5f:	50                   	push   eax
c000cd60:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd63:	e8 13 c1 01 00       	call   c0028e7b <__floatsidf>
c000cd68:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd6c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd70:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd74:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd78:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd7c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd80:	e8 77 bd 01 00       	call   c0028afc <__divdf3>
c000cd85:	83 c4 18             	add    esp,0x18
c000cd88:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd8c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd90:	52                   	push   edx
c000cd91:	89 fa                	mov    edx,edi
c000cd93:	50                   	push   eax
c000cd94:	89 d8                	mov    eax,ebx
c000cd96:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd9a:	e8 a5 d1 ff ff       	call   c0009f44 <calc_output_quad>
c000cd9f:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cda3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cda7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdb3:	e8 44 bd 01 00       	call   c0028afc <__divdf3>
c000cdb8:	83 c4 10             	add    esp,0x10
c000cdbb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdbf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdc3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdc7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdcb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdcf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdd3:	e8 c3 b3 01 00       	call   c002819b <__adddf3>
c000cdd8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cddc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cde0:	83 c4 18             	add    esp,0x18
c000cde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdeb:	e8 b0 c4 01 00       	call   c00292a0 <lrint>
c000cdf0:	83 ec 0c             	sub    esp,0xc
c000cdf3:	50                   	push   eax
c000cdf4:	e8 82 c0 01 00       	call   c0028e7b <__floatsidf>
c000cdf9:	83 c4 10             	add    esp,0x10
c000cdfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce00:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce04:	52                   	push   edx
c000ce05:	50                   	push   eax
c000ce06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce0e:	e8 d9 b9 01 00       	call   c00287ec <__subdf3>
c000ce13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce1b:	83 c4 20             	add    esp,0x20
c000ce1e:	6a 00                	push   0x0
c000ce20:	6a 00                	push   0x0
c000ce22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce2a:	e8 b8 c2 01 00       	call   c00290e7 <__ltdf2>
c000ce2f:	83 c4 10             	add    esp,0x10
c000ce32:	85 c0                	test   eax,eax
c000ce34:	79 20                	jns    c000ce56 <sinc_quad_vari_process+0x66f>
c000ce36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce46:	e8 50 b3 01 00       	call   c002819b <__adddf3>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce56:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce59:	83 ec 10             	sub    esp,0x10
c000ce5c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce60:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce73:	e8 74 b9 01 00       	call   c00287ec <__subdf3>
c000ce78:	83 c4 18             	add    esp,0x18
c000ce7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce83:	52                   	push   edx
c000ce84:	50                   	push   eax
c000ce85:	e8 16 c4 01 00       	call   c00292a0 <lrint>
c000ce8a:	0f af f8             	imul   edi,eax
c000ce8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce91:	83 c4 10             	add    esp,0x10
c000ce94:	01 f8                	add    eax,edi
c000ce96:	99                   	cdq    
c000ce97:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce9a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce9d:	e9 fd fb ff ff       	jmp    c000ca9f <sinc_quad_vari_process+0x2b8>
c000cea2:	83 c4 4c             	add    esp,0x4c
c000cea5:	89 d0                	mov    eax,edx
c000cea7:	5b                   	pop    ebx
c000cea8:	5e                   	pop    esi
c000cea9:	5f                   	pop    edi
c000ceaa:	5d                   	pop    ebp
c000ceab:	c3                   	ret    

c000ceac <sinc_stereo_vari_process>:
c000ceac:	55                   	push   ebp
c000cead:	ba 05 00 00 00       	mov    edx,0x5
c000ceb2:	57                   	push   edi
c000ceb3:	56                   	push   esi
c000ceb4:	53                   	push   ebx
c000ceb5:	83 ec 4c             	sub    esp,0x4c
c000ceb8:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cebc:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cec0:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cec3:	85 db                	test   ebx,ebx
c000cec5:	0f 84 9c 06 00 00    	je     c000d567 <sinc_stereo_vari_process+0x6bb>
c000cecb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cece:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ced1:	0f af c7             	imul   eax,edi
c000ced4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ced7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceda:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cee1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cee8:	0f af c7             	imul   eax,edi
c000ceeb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ceee:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cef1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cef4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cef8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cefc:	68 00 00 70 3f       	push   0x3f700000
c000cf01:	6a 00                	push   0x0
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf0b:	e8 d7 c1 01 00       	call   c00290e7 <__ltdf2>
c000cf10:	83 c4 10             	add    esp,0x10
c000cf13:	ba 16 00 00 00       	mov    edx,0x16
c000cf18:	85 c0                	test   eax,eax
c000cf1a:	0f 88 47 06 00 00    	js     c000d567 <sinc_stereo_vari_process+0x6bb>
c000cf20:	68 00 00 70 40       	push   0x40700000
c000cf25:	6a 00                	push   0x0
c000cf27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf2f:	e8 95 c1 01 00       	call   c00290c9 <__gtdf2>
c000cf34:	83 c4 10             	add    esp,0x10
c000cf37:	ba 16 00 00 00       	mov    edx,0x16
c000cf3c:	85 c0                	test   eax,eax
c000cf3e:	0f 8f 23 06 00 00    	jg     c000d567 <sinc_stereo_vari_process+0x6bb>
c000cf44:	83 ec 0c             	sub    esp,0xc
c000cf47:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf4a:	e8 2c bf 01 00       	call   c0028e7b <__floatsidf>
c000cf4f:	83 c4 10             	add    esp,0x10
c000cf52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf56:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf5a:	68 00 00 00 40       	push   0x40000000
c000cf5f:	6a 00                	push   0x0
c000cf61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf69:	e8 2d b2 01 00       	call   c002819b <__adddf3>
c000cf6e:	59                   	pop    ecx
c000cf6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf73:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf77:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf7a:	e8 fc be 01 00       	call   c0028e7b <__floatsidf>
c000cf7f:	83 c4 10             	add    esp,0x10
c000cf82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf8a:	52                   	push   edx
c000cf8b:	50                   	push   eax
c000cf8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf94:	e8 63 bb 01 00       	call   c0028afc <__divdf3>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfa0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfa4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfa7:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc2:	e8 02 c1 01 00       	call   c00290c9 <__gtdf2>
c000cfc7:	83 c4 10             	add    esp,0x10
c000cfca:	85 c0                	test   eax,eax
c000cfcc:	7e 2d                	jle    c000cffb <sinc_stereo_vari_process+0x14f>
c000cfce:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd3:	6a 00                	push   0x0
c000cfd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfdd:	e8 05 c1 01 00       	call   c00290e7 <__ltdf2>
c000cfe2:	83 c4 10             	add    esp,0x10
c000cfe5:	85 c0                	test   eax,eax
c000cfe7:	79 4d                	jns    c000d036 <sinc_stereo_vari_process+0x18a>
c000cfe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cff1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cff5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cff9:	eb 1b                	jmp    c000d016 <sinc_stereo_vari_process+0x16a>
c000cffb:	68 00 00 f0 3f       	push   0x3ff00000
c000d000:	6a 00                	push   0x0
c000d002:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d006:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d00a:	e8 d8 c0 01 00       	call   c00290e7 <__ltdf2>
c000d00f:	83 c4 10             	add    esp,0x10
c000d012:	85 c0                	test   eax,eax
c000d014:	79 20                	jns    c000d036 <sinc_stereo_vari_process+0x18a>
c000d016:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d01a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d026:	e8 d1 ba 01 00       	call   c0028afc <__divdf3>
c000d02b:	83 c4 10             	add    esp,0x10
c000d02e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d032:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d036:	50                   	push   eax
c000d037:	50                   	push   eax
c000d038:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d040:	e8 5b c2 01 00       	call   c00292a0 <lrint>
c000d045:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d048:	40                   	inc    eax
c000d049:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d04d:	0f af c7             	imul   eax,edi
c000d050:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d054:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d057:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05b:	58                   	pop    eax
c000d05c:	5a                   	pop    edx
c000d05d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d061:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d065:	e8 36 c2 01 00       	call   c00292a0 <lrint>
c000d06a:	83 ec 0c             	sub    esp,0xc
c000d06d:	50                   	push   eax
c000d06e:	e8 08 be 01 00       	call   c0028e7b <__floatsidf>
c000d073:	83 c4 10             	add    esp,0x10
c000d076:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d07a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d07e:	52                   	push   edx
c000d07f:	50                   	push   eax
c000d080:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d084:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d088:	e8 5f b7 01 00       	call   c00287ec <__subdf3>
c000d08d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d091:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d095:	83 c4 20             	add    esp,0x20
c000d098:	6a 00                	push   0x0
c000d09a:	6a 00                	push   0x0
c000d09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0a4:	e8 3e c0 01 00       	call   c00290e7 <__ltdf2>
c000d0a9:	83 c4 10             	add    esp,0x10
c000d0ac:	85 c0                	test   eax,eax
c000d0ae:	79 1f                	jns    c000d0cf <sinc_stereo_vari_process+0x223>
c000d0b0:	68 00 00 f0 3f       	push   0x3ff00000
c000d0b5:	6a 00                	push   0x0
c000d0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0bf:	e8 d7 b0 01 00       	call   c002819b <__adddf3>
c000d0c4:	83 c4 10             	add    esp,0x10
c000d0c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0cf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0d2:	83 ec 10             	sub    esp,0x10
c000d0d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0d9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0e8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0ec:	e8 fb b6 01 00       	call   c00287ec <__subdf3>
c000d0f1:	83 c4 18             	add    esp,0x18
c000d0f4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0f8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0fc:	52                   	push   edx
c000d0fd:	50                   	push   eax
c000d0fe:	e8 9d c1 01 00       	call   c00292a0 <lrint>
c000d103:	0f af f8             	imul   edi,eax
c000d106:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d10a:	01 f8                	add    eax,edi
c000d10c:	99                   	cdq    
c000d10d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d110:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d113:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d117:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d11b:	68 00 00 f0 3f       	push   0x3ff00000
c000d120:	6a 00                	push   0x0
c000d122:	e8 d5 b9 01 00       	call   c0028afc <__divdf3>
c000d127:	83 c4 10             	add    esp,0x10
c000d12a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d12e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d132:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d137:	68 23 42 92 0c       	push   0xc924223
c000d13c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d140:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d144:	e8 52 b0 01 00       	call   c002819b <__adddf3>
c000d149:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d14d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d151:	83 c4 20             	add    esp,0x20
c000d154:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d15c:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d164:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d167:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d16a:	7d 50                	jge    c000d1bc <sinc_stereo_vari_process+0x310>
c000d16c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d16f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d172:	01 c8                	add    eax,ecx
c000d174:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d177:	99                   	cdq    
c000d178:	f7 f9                	idiv   ecx
c000d17a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d17e:	7d 0c                	jge    c000d18c <sinc_stereo_vari_process+0x2e0>
c000d180:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d183:	85 ff                	test   edi,edi
c000d185:	79 6c                	jns    c000d1f3 <sinc_stereo_vari_process+0x347>
c000d187:	e9 e7 00 00 00       	jmp    c000d273 <sinc_stereo_vari_process+0x3c7>
c000d18c:	50                   	push   eax
c000d18d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d191:	56                   	push   esi
c000d192:	53                   	push   ebx
c000d193:	e8 4c e7 ff ff       	call   c000b8e4 <prepare_data>
c000d198:	83 c4 10             	add    esp,0x10
c000d19b:	89 c2                	mov    edx,eax
c000d19d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1a0:	85 c0                	test   eax,eax
c000d1a2:	0f 85 bf 03 00 00    	jne    c000d567 <sinc_stereo_vari_process+0x6bb>
c000d1a8:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1ab:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1ae:	01 c8                	add    eax,ecx
c000d1b0:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 f9                	idiv   ecx
c000d1b6:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ba:	7c c4                	jl     c000d180 <sinc_stereo_vari_process+0x2d4>
c000d1bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1c4:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1c7:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1d2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1d5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1d8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1db:	99                   	cdq    
c000d1dc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1df:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1e2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1e5:	99                   	cdq    
c000d1e6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1e9:	31 d2                	xor    edx,edx
c000d1eb:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1ee:	e9 74 03 00 00       	jmp    c000d567 <sinc_stereo_vari_process+0x6bb>
c000d1f3:	83 ec 0c             	sub    esp,0xc
c000d1f6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1f9:	e8 7d bc 01 00       	call   c0028e7b <__floatsidf>
c000d1fe:	83 c4 10             	add    esp,0x10
c000d201:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d205:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d209:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d20d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d211:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d215:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d219:	e8 7d af 01 00       	call   c002819b <__adddf3>
c000d21e:	83 c4 10             	add    esp,0x10
c000d221:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d225:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d229:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d22d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d231:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d235:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d239:	e8 5d af 01 00       	call   c002819b <__adddf3>
c000d23e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d241:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d245:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d249:	e8 2d bc 01 00       	call   c0028e7b <__floatsidf>
c000d24e:	83 c4 10             	add    esp,0x10
c000d251:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d255:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d259:	52                   	push   edx
c000d25a:	50                   	push   eax
c000d25b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d25f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d263:	e8 7d be 01 00       	call   c00290e5 <__gedf2>
c000d268:	83 c4 10             	add    esp,0x10
c000d26b:	85 c0                	test   eax,eax
c000d26d:	0f 89 49 ff ff ff    	jns    c000d1bc <sinc_stereo_vari_process+0x310>
c000d273:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d277:	0f 8e ef 00 00 00    	jle    c000d36c <sinc_stereo_vari_process+0x4c0>
c000d27d:	83 ec 10             	sub    esp,0x10
c000d280:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d283:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d286:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d289:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d28c:	e8 5b b5 01 00       	call   c00287ec <__subdf3>
c000d291:	83 c4 18             	add    esp,0x18
c000d294:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d298:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d29c:	52                   	push   edx
c000d29d:	50                   	push   eax
c000d29e:	e8 dd bf 01 00       	call   c0029280 <fabs>
c000d2a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2ab:	83 c4 10             	add    esp,0x10
c000d2ae:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2b3:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2b8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2c0:	e8 04 be 01 00       	call   c00290c9 <__gtdf2>
c000d2c5:	83 c4 10             	add    esp,0x10
c000d2c8:	85 c0                	test   eax,eax
c000d2ca:	0f 8e 9c 00 00 00    	jle    c000d36c <sinc_stereo_vari_process+0x4c0>
c000d2d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2d3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2d6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2da:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2de:	52                   	push   edx
c000d2df:	50                   	push   eax
c000d2e0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2e3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2e6:	e8 01 b5 01 00       	call   c00287ec <__subdf3>
c000d2eb:	59                   	pop    ecx
c000d2ec:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2f7:	e8 7f bb 01 00       	call   c0028e7b <__floatsidf>
c000d2fc:	83 c4 10             	add    esp,0x10
c000d2ff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d303:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d307:	52                   	push   edx
c000d308:	50                   	push   eax
c000d309:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d30d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d311:	e8 02 b5 01 00       	call   c0028818 <__muldf3>
c000d316:	5f                   	pop    edi
c000d317:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d31b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d31f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d322:	e8 54 bb 01 00       	call   c0028e7b <__floatsidf>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d32e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d332:	52                   	push   edx
c000d333:	50                   	push   eax
c000d334:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d338:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d33c:	e8 bb b7 01 00       	call   c0028afc <__divdf3>
c000d341:	83 c4 10             	add    esp,0x10
c000d344:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d348:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d34c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d350:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d354:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d358:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d35c:	e8 3a ae 01 00       	call   c002819b <__adddf3>
c000d361:	83 c4 10             	add    esp,0x10
c000d364:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d368:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d36c:	83 ec 0c             	sub    esp,0xc
c000d36f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d372:	e8 04 bb 01 00       	call   c0028e7b <__floatsidf>
c000d377:	83 c4 10             	add    esp,0x10
c000d37a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d37e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d386:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d38e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d392:	e8 50 bd 01 00       	call   c00290e7 <__ltdf2>
c000d397:	83 c4 10             	add    esp,0x10
c000d39a:	85 c0                	test   eax,eax
c000d39c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3a4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3a8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3ac:	78 10                	js     c000d3be <sinc_stereo_vari_process+0x512>
c000d3ae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ba:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3ce:	e8 45 b4 01 00       	call   c0028818 <__muldf3>
c000d3d3:	59                   	pop    ecx
c000d3d4:	5f                   	pop    edi
c000d3d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3e5:	e8 d3 e4 ff ff       	call   c000b8bd <double_to_fp>
c000d3ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3ee:	89 c7                	mov    edi,eax
c000d3f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3fc:	e8 17 b4 01 00       	call   c0028818 <__muldf3>
c000d401:	83 c4 18             	add    esp,0x18
c000d404:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d408:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d40c:	52                   	push   edx
c000d40d:	50                   	push   eax
c000d40e:	e8 aa e4 ff ff       	call   c000b8bd <double_to_fp>
c000d413:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d416:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d41a:	83 c4 0c             	add    esp,0xc
c000d41d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d420:	8d 04 90             	lea    eax,[eax+edx*4]
c000d423:	50                   	push   eax
c000d424:	50                   	push   eax
c000d425:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d428:	e8 4e ba 01 00       	call   c0028e7b <__floatsidf>
c000d42d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d431:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d435:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d439:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d43d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d441:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d445:	e8 b2 b6 01 00       	call   c0028afc <__divdf3>
c000d44a:	83 c4 18             	add    esp,0x18
c000d44d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d451:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d455:	52                   	push   edx
c000d456:	89 fa                	mov    edx,edi
c000d458:	50                   	push   eax
c000d459:	89 d8                	mov    eax,ebx
c000d45b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d45f:	e8 02 c7 ff ff       	call   c0009b66 <calc_output_stereo>
c000d464:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d468:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d46c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d470:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d474:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d478:	e8 7f b6 01 00       	call   c0028afc <__divdf3>
c000d47d:	83 c4 10             	add    esp,0x10
c000d480:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d484:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d488:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d48c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d490:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d494:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d498:	e8 fe ac 01 00       	call   c002819b <__adddf3>
c000d49d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4a1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4a5:	83 c4 18             	add    esp,0x18
c000d4a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4ac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4b0:	e8 eb bd 01 00       	call   c00292a0 <lrint>
c000d4b5:	83 ec 0c             	sub    esp,0xc
c000d4b8:	50                   	push   eax
c000d4b9:	e8 bd b9 01 00       	call   c0028e7b <__floatsidf>
c000d4be:	83 c4 10             	add    esp,0x10
c000d4c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4c5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c9:	52                   	push   edx
c000d4ca:	50                   	push   eax
c000d4cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4d3:	e8 14 b3 01 00       	call   c00287ec <__subdf3>
c000d4d8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4dc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e0:	83 c4 20             	add    esp,0x20
c000d4e3:	6a 00                	push   0x0
c000d4e5:	6a 00                	push   0x0
c000d4e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4ef:	e8 f3 bb 01 00       	call   c00290e7 <__ltdf2>
c000d4f4:	83 c4 10             	add    esp,0x10
c000d4f7:	85 c0                	test   eax,eax
c000d4f9:	79 20                	jns    c000d51b <sinc_stereo_vari_process+0x66f>
c000d4fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d50b:	e8 8b ac 01 00       	call   c002819b <__adddf3>
c000d510:	83 c4 10             	add    esp,0x10
c000d513:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d517:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d51b:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d51e:	83 ec 10             	sub    esp,0x10
c000d521:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d525:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d530:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d534:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d538:	e8 af b2 01 00       	call   c00287ec <__subdf3>
c000d53d:	83 c4 18             	add    esp,0x18
c000d540:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d544:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d548:	52                   	push   edx
c000d549:	50                   	push   eax
c000d54a:	e8 51 bd 01 00       	call   c00292a0 <lrint>
c000d54f:	0f af f8             	imul   edi,eax
c000d552:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d556:	83 c4 10             	add    esp,0x10
c000d559:	01 f8                	add    eax,edi
c000d55b:	99                   	cdq    
c000d55c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d55f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d562:	e9 fd fb ff ff       	jmp    c000d164 <sinc_stereo_vari_process+0x2b8>
c000d567:	83 c4 4c             	add    esp,0x4c
c000d56a:	89 d0                	mov    eax,edx
c000d56c:	5b                   	pop    ebx
c000d56d:	5e                   	pop    esi
c000d56e:	5f                   	pop    edi
c000d56f:	5d                   	pop    ebp
c000d570:	c3                   	ret    

c000d571 <sinc_mono_vari_process>:
c000d571:	55                   	push   ebp
c000d572:	ba 05 00 00 00       	mov    edx,0x5
c000d577:	57                   	push   edi
c000d578:	56                   	push   esi
c000d579:	53                   	push   ebx
c000d57a:	83 ec 4c             	sub    esp,0x4c
c000d57d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d581:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d585:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d588:	85 db                	test   ebx,ebx
c000d58a:	0f 84 c1 06 00 00    	je     c000dc51 <sinc_mono_vari_process+0x6e0>
c000d590:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d593:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d596:	0f af c7             	imul   eax,edi
c000d599:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d59c:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d59f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5ad:	0f af c7             	imul   eax,edi
c000d5b0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5b3:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ba:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5c0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5c4:	68 00 00 70 3f       	push   0x3f700000
c000d5c9:	6a 00                	push   0x0
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5d3:	e8 0f bb 01 00       	call   c00290e7 <__ltdf2>
c000d5d8:	83 c4 10             	add    esp,0x10
c000d5db:	ba 16 00 00 00       	mov    edx,0x16
c000d5e0:	85 c0                	test   eax,eax
c000d5e2:	0f 88 69 06 00 00    	js     c000dc51 <sinc_mono_vari_process+0x6e0>
c000d5e8:	68 00 00 70 40       	push   0x40700000
c000d5ed:	6a 00                	push   0x0
c000d5ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5f7:	e8 cd ba 01 00       	call   c00290c9 <__gtdf2>
c000d5fc:	83 c4 10             	add    esp,0x10
c000d5ff:	ba 16 00 00 00       	mov    edx,0x16
c000d604:	85 c0                	test   eax,eax
c000d606:	0f 8f 45 06 00 00    	jg     c000dc51 <sinc_mono_vari_process+0x6e0>
c000d60c:	83 ec 0c             	sub    esp,0xc
c000d60f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d612:	e8 64 b8 01 00       	call   c0028e7b <__floatsidf>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d61e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d622:	68 00 00 00 40       	push   0x40000000
c000d627:	6a 00                	push   0x0
c000d629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d631:	e8 65 ab 01 00       	call   c002819b <__adddf3>
c000d636:	59                   	pop    ecx
c000d637:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d63b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d63f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d642:	e8 34 b8 01 00       	call   c0028e7b <__floatsidf>
c000d647:	83 c4 10             	add    esp,0x10
c000d64a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d64e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d652:	52                   	push   edx
c000d653:	50                   	push   eax
c000d654:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65c:	e8 9b b4 01 00       	call   c0028afc <__divdf3>
c000d661:	83 c4 10             	add    esp,0x10
c000d664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d668:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d66c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d66f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d672:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d676:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d682:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d68a:	e8 3a ba 01 00       	call   c00290c9 <__gtdf2>
c000d68f:	83 c4 10             	add    esp,0x10
c000d692:	85 c0                	test   eax,eax
c000d694:	7e 2d                	jle    c000d6c3 <sinc_mono_vari_process+0x152>
c000d696:	68 00 00 f0 3f       	push   0x3ff00000
c000d69b:	6a 00                	push   0x0
c000d69d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6a5:	e8 3d ba 01 00       	call   c00290e7 <__ltdf2>
c000d6aa:	83 c4 10             	add    esp,0x10
c000d6ad:	85 c0                	test   eax,eax
c000d6af:	79 4d                	jns    c000d6fe <sinc_mono_vari_process+0x18d>
c000d6b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6c1:	eb 1b                	jmp    c000d6de <sinc_mono_vari_process+0x16d>
c000d6c3:	68 00 00 f0 3f       	push   0x3ff00000
c000d6c8:	6a 00                	push   0x0
c000d6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6d2:	e8 10 ba 01 00       	call   c00290e7 <__ltdf2>
c000d6d7:	83 c4 10             	add    esp,0x10
c000d6da:	85 c0                	test   eax,eax
c000d6dc:	79 20                	jns    c000d6fe <sinc_mono_vari_process+0x18d>
c000d6de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6e2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6ee:	e8 09 b4 01 00       	call   c0028afc <__divdf3>
c000d6f3:	83 c4 10             	add    esp,0x10
c000d6f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6fa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6fe:	50                   	push   eax
c000d6ff:	50                   	push   eax
c000d700:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d704:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d708:	e8 93 bb 01 00       	call   c00292a0 <lrint>
c000d70d:	40                   	inc    eax
c000d70e:	0f af c7             	imul   eax,edi
c000d711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d715:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d719:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d71c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d71f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d723:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d727:	58                   	pop    eax
c000d728:	5a                   	pop    edx
c000d729:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d72d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d731:	e8 6a bb 01 00       	call   c00292a0 <lrint>
c000d736:	83 ec 0c             	sub    esp,0xc
c000d739:	50                   	push   eax
c000d73a:	e8 3c b7 01 00       	call   c0028e7b <__floatsidf>
c000d73f:	83 c4 10             	add    esp,0x10
c000d742:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d746:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d74a:	52                   	push   edx
c000d74b:	50                   	push   eax
c000d74c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d750:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d754:	e8 93 b0 01 00       	call   c00287ec <__subdf3>
c000d759:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d75d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d761:	83 c4 20             	add    esp,0x20
c000d764:	6a 00                	push   0x0
c000d766:	6a 00                	push   0x0
c000d768:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d770:	e8 72 b9 01 00       	call   c00290e7 <__ltdf2>
c000d775:	83 c4 10             	add    esp,0x10
c000d778:	85 c0                	test   eax,eax
c000d77a:	79 1f                	jns    c000d79b <sinc_mono_vari_process+0x22a>
c000d77c:	68 00 00 f0 3f       	push   0x3ff00000
c000d781:	6a 00                	push   0x0
c000d783:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d78b:	e8 0b aa 01 00       	call   c002819b <__adddf3>
c000d790:	83 c4 10             	add    esp,0x10
c000d793:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d797:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d79b:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d79e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7a1:	83 ec 10             	sub    esp,0x10
c000d7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7b4:	e8 33 b0 01 00       	call   c00287ec <__subdf3>
c000d7b9:	83 c4 18             	add    esp,0x18
c000d7bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7c4:	52                   	push   edx
c000d7c5:	50                   	push   eax
c000d7c6:	e8 d5 ba 01 00       	call   c00292a0 <lrint>
c000d7cb:	0f af f8             	imul   edi,eax
c000d7ce:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7d1:	31 ff                	xor    edi,edi
c000d7d3:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7d8:	99                   	cdq    
c000d7d9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7e7:	55                   	push   ebp
c000d7e8:	57                   	push   edi
c000d7e9:	e8 0e b3 01 00       	call   c0028afc <__divdf3>
c000d7ee:	83 c4 10             	add    esp,0x10
c000d7f1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7f5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7f9:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7fe:	68 23 42 92 0c       	push   0xc924223
c000d803:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d807:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d80b:	e8 8b a9 01 00       	call   c002819b <__adddf3>
c000d810:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d814:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d818:	83 c4 20             	add    esp,0x20
c000d81b:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d81f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d823:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d826:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d829:	7d 54                	jge    c000d87f <sinc_mono_vari_process+0x30e>
c000d82b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d82e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d831:	01 c8                	add    eax,ecx
c000d833:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d836:	99                   	cdq    
c000d837:	f7 f9                	idiv   ecx
c000d839:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d83d:	7d 0c                	jge    c000d84b <sinc_mono_vari_process+0x2da>
c000d83f:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d842:	85 ff                	test   edi,edi
c000d844:	79 73                	jns    c000d8b9 <sinc_mono_vari_process+0x348>
c000d846:	e9 ee 00 00 00       	jmp    c000d939 <sinc_mono_vari_process+0x3c8>
c000d84b:	50                   	push   eax
c000d84c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d850:	56                   	push   esi
c000d851:	53                   	push   ebx
c000d852:	e8 8d e0 ff ff       	call   c000b8e4 <prepare_data>
c000d857:	89 c2                	mov    edx,eax
c000d859:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d863:	85 d2                	test   edx,edx
c000d865:	0f 85 e6 03 00 00    	jne    c000dc51 <sinc_mono_vari_process+0x6e0>
c000d86b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d86e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d871:	01 c8                	add    eax,ecx
c000d873:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d876:	99                   	cdq    
c000d877:	f7 f9                	idiv   ecx
c000d879:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d87d:	7c c0                	jl     c000d83f <sinc_mono_vari_process+0x2ce>
c000d87f:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d883:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d887:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d88b:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d88e:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d895:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d899:	89 01                	mov    DWORD PTR [ecx],eax
c000d89b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d89e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8a1:	99                   	cdq    
c000d8a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8ab:	99                   	cdq    
c000d8ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8af:	31 d2                	xor    edx,edx
c000d8b1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8b4:	e9 98 03 00 00       	jmp    c000dc51 <sinc_mono_vari_process+0x6e0>
c000d8b9:	83 ec 0c             	sub    esp,0xc
c000d8bc:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8bf:	e8 b7 b5 01 00       	call   c0028e7b <__floatsidf>
c000d8c4:	83 c4 10             	add    esp,0x10
c000d8c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8cf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8df:	e8 b7 a8 01 00       	call   c002819b <__adddf3>
c000d8e4:	83 c4 10             	add    esp,0x10
c000d8e7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ff:	e8 97 a8 01 00       	call   c002819b <__adddf3>
c000d904:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d907:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d90b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d90f:	e8 67 b5 01 00       	call   c0028e7b <__floatsidf>
c000d914:	83 c4 10             	add    esp,0x10
c000d917:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d91b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d91f:	52                   	push   edx
c000d920:	50                   	push   eax
c000d921:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d925:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d929:	e8 9b b7 01 00       	call   c00290c9 <__gtdf2>
c000d92e:	83 c4 10             	add    esp,0x10
c000d931:	85 c0                	test   eax,eax
c000d933:	0f 8f 46 ff ff ff    	jg     c000d87f <sinc_mono_vari_process+0x30e>
c000d939:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d93d:	0f 8e f5 00 00 00    	jle    c000da38 <sinc_mono_vari_process+0x4c7>
c000d943:	83 ec 10             	sub    esp,0x10
c000d946:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d949:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d94c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d950:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d953:	ff 30                	push   DWORD PTR [eax]
c000d955:	e8 92 ae 01 00       	call   c00287ec <__subdf3>
c000d95a:	83 c4 18             	add    esp,0x18
c000d95d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d961:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d965:	52                   	push   edx
c000d966:	50                   	push   eax
c000d967:	e8 14 b9 01 00       	call   c0029280 <fabs>
c000d96c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d970:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d974:	83 c4 10             	add    esp,0x10
c000d977:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d97c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d981:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d985:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d989:	e8 3b b7 01 00       	call   c00290c9 <__gtdf2>
c000d98e:	83 c4 10             	add    esp,0x10
c000d991:	85 c0                	test   eax,eax
c000d993:	0f 8e 9f 00 00 00    	jle    c000da38 <sinc_mono_vari_process+0x4c7>
c000d999:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d99d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9a2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9aa:	52                   	push   edx
c000d9ab:	50                   	push   eax
c000d9ac:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9af:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9b2:	e8 35 ae 01 00       	call   c00287ec <__subdf3>
c000d9b7:	5f                   	pop    edi
c000d9b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bc:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c0:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9c3:	e8 b3 b4 01 00       	call   c0028e7b <__floatsidf>
c000d9c8:	83 c4 10             	add    esp,0x10
c000d9cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d3:	52                   	push   edx
c000d9d4:	50                   	push   eax
c000d9d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dd:	e8 36 ae 01 00       	call   c0028818 <__muldf3>
c000d9e2:	5d                   	pop    ebp
c000d9e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9eb:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9ee:	e8 88 b4 01 00       	call   c0028e7b <__floatsidf>
c000d9f3:	83 c4 10             	add    esp,0x10
c000d9f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9fa:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9fe:	52                   	push   edx
c000d9ff:	50                   	push   eax
c000da00:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da08:	e8 ef b0 01 00       	call   c0028afc <__divdf3>
c000da0d:	83 c4 10             	add    esp,0x10
c000da10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da28:	e8 6e a7 01 00       	call   c002819b <__adddf3>
c000da2d:	83 c4 10             	add    esp,0x10
c000da30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da34:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da38:	83 ec 0c             	sub    esp,0xc
c000da3b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da3e:	e8 38 b4 01 00       	call   c0028e7b <__floatsidf>
c000da43:	83 c4 10             	add    esp,0x10
c000da46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da4a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da5e:	e8 84 b6 01 00       	call   c00290e7 <__ltdf2>
c000da63:	83 c4 10             	add    esp,0x10
c000da66:	85 c0                	test   eax,eax
c000da68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da6c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da70:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da74:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da78:	78 10                	js     c000da8a <sinc_mono_vari_process+0x519>
c000da7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da7e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da82:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da86:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da8a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da92:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da96:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da9a:	e8 79 ad 01 00       	call   c0028818 <__muldf3>
c000da9f:	59                   	pop    ecx
c000daa0:	5f                   	pop    edi
c000daa1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000daa5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000daa9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dab1:	e8 07 de ff ff       	call   c000b8bd <double_to_fp>
c000dab6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daba:	89 c7                	mov    edi,eax
c000dabc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dac0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dac4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dac8:	e8 4b ad 01 00       	call   c0028818 <__muldf3>
c000dacd:	83 c4 18             	add    esp,0x18
c000dad0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dad4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dad8:	52                   	push   edx
c000dad9:	50                   	push   eax
c000dada:	e8 de dd ff ff       	call   c000b8bd <double_to_fp>
c000dadf:	83 ec 0c             	sub    esp,0xc
c000dae2:	89 c5                	mov    ebp,eax
c000dae4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dae7:	e8 8f b3 01 00       	call   c0028e7b <__floatsidf>
c000daec:	83 c4 10             	add    esp,0x10
c000daef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000daf3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daf7:	52                   	push   edx
c000daf8:	50                   	push   eax
c000daf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dafd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db01:	e8 f6 af 01 00       	call   c0028afc <__divdf3>
c000db06:	83 c4 10             	add    esp,0x10
c000db09:	89 e9                	mov    ecx,ebp
c000db0b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db0f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db13:	89 d8                	mov    eax,ebx
c000db15:	89 fa                	mov    edx,edi
c000db17:	e8 ee bd ff ff       	call   c000990a <calc_output_single>
c000db1c:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db1f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db22:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db26:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db2a:	52                   	push   edx
c000db2b:	50                   	push   eax
c000db2c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db30:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db34:	e8 df ac 01 00       	call   c0028818 <__muldf3>
c000db39:	59                   	pop    ecx
c000db3a:	59                   	pop    ecx
c000db3b:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db3f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db4b:	e8 9b b5 01 00       	call   c00290eb <__truncdfsf2>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db56:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db59:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db5d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db65:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db69:	e8 8e af 01 00       	call   c0028afc <__divdf3>
c000db6e:	83 c4 10             	add    esp,0x10
c000db71:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db75:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db81:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db85:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db89:	e8 0d a6 01 00       	call   c002819b <__adddf3>
c000db8e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db92:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db96:	83 c4 18             	add    esp,0x18
c000db99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dba1:	e8 fa b6 01 00       	call   c00292a0 <lrint>
c000dba6:	83 ec 0c             	sub    esp,0xc
c000dba9:	50                   	push   eax
c000dbaa:	e8 cc b2 01 00       	call   c0028e7b <__floatsidf>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbba:	52                   	push   edx
c000dbbb:	50                   	push   eax
c000dbbc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbc0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbc4:	e8 23 ac 01 00       	call   c00287ec <__subdf3>
c000dbc9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbcd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbd1:	83 c4 20             	add    esp,0x20
c000dbd4:	6a 00                	push   0x0
c000dbd6:	6a 00                	push   0x0
c000dbd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbe0:	e8 02 b5 01 00       	call   c00290e7 <__ltdf2>
c000dbe5:	83 c4 10             	add    esp,0x10
c000dbe8:	85 c0                	test   eax,eax
c000dbea:	79 20                	jns    c000dc0c <sinc_mono_vari_process+0x69b>
c000dbec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbfc:	e8 9a a5 01 00       	call   c002819b <__adddf3>
c000dc01:	83 c4 10             	add    esp,0x10
c000dc04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc0c:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc0f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc12:	83 ec 10             	sub    esp,0x10
c000dc15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc25:	e8 c2 ab 01 00       	call   c00287ec <__subdf3>
c000dc2a:	83 c4 18             	add    esp,0x18
c000dc2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc35:	52                   	push   edx
c000dc36:	50                   	push   eax
c000dc37:	e8 64 b6 01 00       	call   c00292a0 <lrint>
c000dc3c:	83 c4 10             	add    esp,0x10
c000dc3f:	0f af f8             	imul   edi,eax
c000dc42:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc45:	99                   	cdq    
c000dc46:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc49:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc4c:	e9 d2 fb ff ff       	jmp    c000d823 <sinc_mono_vari_process+0x2b2>
c000dc51:	83 c4 4c             	add    esp,0x4c
c000dc54:	89 d0                	mov    eax,edx
c000dc56:	5b                   	pop    ebx
c000dc57:	5e                   	pop    esi
c000dc58:	5f                   	pop    edi
c000dc59:	5d                   	pop    ebp
c000dc5a:	c3                   	ret    

c000dc5b <sinc_get_name>:
c000dc5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc5f:	31 c0                	xor    eax,eax
c000dc61:	83 fa 02             	cmp    edx,0x2
c000dc64:	77 07                	ja     c000dc6d <sinc_get_name+0x12>
c000dc66:	8b 04 95 84 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd547c]
c000dc6d:	c3                   	ret    

c000dc6e <sinc_get_description>:
c000dc6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc72:	31 c0                	xor    eax,eax
c000dc74:	83 fa 02             	cmp    edx,0x2
c000dc77:	77 07                	ja     c000dc80 <sinc_get_description+0x12>
c000dc79:	8b 04 95 78 ab 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5488]
c000dc80:	c3                   	ret    

c000dc81 <sinc_set_converter>:
c000dc81:	53                   	push   ebx
c000dc82:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc88:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc8f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc92:	85 c0                	test   eax,eax
c000dc94:	74 13                	je     c000dca9 <sinc_set_converter+0x28>
c000dc96:	83 ec 0c             	sub    esp,0xc
c000dc99:	50                   	push   eax
c000dc9a:	e8 25 1c 00 00       	call   c000f8c4 <free>
c000dc9f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dca6:	83 c4 10             	add    esp,0x10
c000dca9:	50                   	push   eax
c000dcaa:	68 44 08 00 00       	push   0x844
c000dcaf:	6a 00                	push   0x0
c000dcb1:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcb5:	50                   	push   eax
c000dcb6:	e8 bd 2a ff ff       	call   c0000778 <memset>
c000dcbb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcbe:	83 c4 10             	add    esp,0x10
c000dcc1:	b8 0b 00 00 00       	mov    eax,0xb
c000dcc6:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dccc:	7f 6e                	jg     c000dd3c <sinc_set_converter+0xbb>
c000dcce:	83 fa 01             	cmp    edx,0x1
c000dcd1:	75 10                	jne    c000dce3 <sinc_set_converter+0x62>
c000dcd3:	c7 43 24 71 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d571
c000dcda:	c7 43 20 71 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d571
c000dce1:	eb 4d                	jmp    c000dd30 <sinc_set_converter+0xaf>
c000dce3:	83 fa 02             	cmp    edx,0x2
c000dce6:	75 10                	jne    c000dcf8 <sinc_set_converter+0x77>
c000dce8:	c7 43 24 ac ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ceac
c000dcef:	c7 43 20 ac ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ceac
c000dcf6:	eb 38                	jmp    c000dd30 <sinc_set_converter+0xaf>
c000dcf8:	83 fa 04             	cmp    edx,0x4
c000dcfb:	75 10                	jne    c000dd0d <sinc_set_converter+0x8c>
c000dcfd:	c7 43 24 e7 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7e7
c000dd04:	c7 43 20 e7 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7e7
c000dd0b:	eb 23                	jmp    c000dd30 <sinc_set_converter+0xaf>
c000dd0d:	83 fa 06             	cmp    edx,0x6
c000dd10:	75 10                	jne    c000dd22 <sinc_set_converter+0xa1>
c000dd12:	c7 43 24 22 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c122
c000dd19:	c7 43 20 22 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c122
c000dd20:	eb 0e                	jmp    c000dd30 <sinc_set_converter+0xaf>
c000dd22:	c7 43 24 5e ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba5e
c000dd29:	c7 43 20 5e ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba5e
c000dd30:	c7 43 28 11 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad11
c000dd37:	b8 0a 00 00 00       	mov    eax,0xa
c000dd3c:	81 c4 58 08 00 00    	add    esp,0x858
c000dd42:	5b                   	pop    ebx
c000dd43:	c3                   	ret    

c000dd44 <zoh_vari_process>:
c000dd44:	55                   	push   ebp
c000dd45:	31 d2                	xor    edx,edx
c000dd47:	57                   	push   edi
c000dd48:	56                   	push   esi
c000dd49:	53                   	push   ebx
c000dd4a:	83 ec 3c             	sub    esp,0x3c
c000dd4d:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd51:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd55:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd59:	0f 8e 80 06 00 00    	jle    c000e3df <zoh_vari_process+0x69b>
c000dd5f:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd62:	ba 05 00 00 00       	mov    edx,0x5
c000dd67:	85 db                	test   ebx,ebx
c000dd69:	0f 84 70 06 00 00    	je     c000e3df <zoh_vari_process+0x69b>
c000dd6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd72:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd76:	74 19                	je     c000dd91 <zoh_vari_process+0x4d>
c000dd78:	31 d2                	xor    edx,edx
c000dd7a:	39 c2                	cmp    edx,eax
c000dd7c:	7d 0c                	jge    c000dd8a <zoh_vari_process+0x46>
c000dd7e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd80:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd83:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd87:	42                   	inc    edx
c000dd88:	eb f0                	jmp    c000dd7a <zoh_vari_process+0x36>
c000dd8a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd91:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd94:	0f af d0             	imul   edx,eax
c000dd97:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd9a:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd9e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dda5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dda8:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddaf:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddb2:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddb4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddbc:	68 00 00 70 3f       	push   0x3f700000
c000ddc1:	6a 00                	push   0x0
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddcb:	e8 17 b3 01 00       	call   c00290e7 <__ltdf2>
c000ddd0:	83 c4 10             	add    esp,0x10
c000ddd3:	ba 16 00 00 00       	mov    edx,0x16
c000ddd8:	85 c0                	test   eax,eax
c000ddda:	0f 88 ff 05 00 00    	js     c000e3df <zoh_vari_process+0x69b>
c000dde0:	68 00 00 70 40       	push   0x40700000
c000dde5:	6a 00                	push   0x0
c000dde7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddef:	e8 d5 b2 01 00       	call   c00290c9 <__gtdf2>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	ba 16 00 00 00       	mov    edx,0x16
c000ddfc:	85 c0                	test   eax,eax
c000ddfe:	0f 8f db 05 00 00    	jg     c000e3df <zoh_vari_process+0x69b>
c000de04:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de07:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de12:	68 00 00 f0 3f       	push   0x3ff00000
c000de17:	6a 00                	push   0x0
c000de19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de21:	e8 c1 b2 01 00       	call   c00290e7 <__ltdf2>
c000de26:	83 c4 10             	add    esp,0x10
c000de29:	85 c0                	test   eax,eax
c000de2b:	0f 89 da 01 00 00    	jns    c000e00b <zoh_vari_process+0x2c7>
c000de31:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de34:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de37:	0f 8d ce 01 00 00    	jge    c000e00b <zoh_vari_process+0x2c7>
c000de3d:	83 ec 0c             	sub    esp,0xc
c000de40:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de43:	e8 33 b0 01 00       	call   c0028e7b <__floatsidf>
c000de48:	83 c4 10             	add    esp,0x10
c000de4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000de4e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de62:	e8 b1 a9 01 00       	call   c0028818 <__muldf3>
c000de67:	59                   	pop    ecx
c000de68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de70:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de73:	e8 03 b0 01 00       	call   c0028e7b <__floatsidf>
c000de78:	83 c4 10             	add    esp,0x10
c000de7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de83:	52                   	push   edx
c000de84:	50                   	push   eax
c000de85:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de89:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8d:	e8 09 a3 01 00       	call   c002819b <__adddf3>
c000de92:	59                   	pop    ecx
c000de93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de9b:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de9e:	e8 d8 af 01 00       	call   c0028e7b <__floatsidf>
c000dea3:	83 c4 10             	add    esp,0x10
c000dea6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deaa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000deae:	52                   	push   edx
c000deaf:	50                   	push   eax
c000deb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deb8:	e8 28 b2 01 00       	call   c00290e5 <__gedf2>
c000debd:	83 c4 10             	add    esp,0x10
c000dec0:	85 c0                	test   eax,eax
c000dec2:	0f 89 43 01 00 00    	jns    c000e00b <zoh_vari_process+0x2c7>
c000dec8:	85 ed                	test   ebp,ebp
c000deca:	0f 8e ec 00 00 00    	jle    c000dfbc <zoh_vari_process+0x278>
c000ded0:	83 ec 10             	sub    esp,0x10
c000ded3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000ded6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000ded9:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dedc:	ff 37                	push   DWORD PTR [edi]
c000dede:	e8 09 a9 01 00       	call   c00287ec <__subdf3>
c000dee3:	83 c4 18             	add    esp,0x18
c000dee6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000deee:	52                   	push   edx
c000deef:	50                   	push   eax
c000def0:	e8 8b b3 01 00       	call   c0029280 <fabs>
c000def5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000def9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000defd:	83 c4 10             	add    esp,0x10
c000df00:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df05:	68 23 42 92 0c       	push   0xc924223
c000df0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df12:	e8 b2 b1 01 00       	call   c00290c9 <__gtdf2>
c000df17:	83 c4 10             	add    esp,0x10
c000df1a:	85 c0                	test   eax,eax
c000df1c:	0f 8e 9a 00 00 00    	jle    c000dfbc <zoh_vari_process+0x278>
c000df22:	8b 07                	mov    eax,DWORD PTR [edi]
c000df24:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df27:	89 04 24             	mov    DWORD PTR [esp],eax
c000df2a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df2e:	52                   	push   edx
c000df2f:	50                   	push   eax
c000df30:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df33:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df36:	e8 b1 a8 01 00       	call   c00287ec <__subdf3>
c000df3b:	59                   	pop    ecx
c000df3c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df40:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df44:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df47:	e8 2f af 01 00       	call   c0028e7b <__floatsidf>
c000df4c:	83 c4 10             	add    esp,0x10
c000df4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df53:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df57:	52                   	push   edx
c000df58:	50                   	push   eax
c000df59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df5d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df61:	e8 b2 a8 01 00       	call   c0028818 <__muldf3>
c000df66:	5d                   	pop    ebp
c000df67:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df6b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df6f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df72:	e8 04 af 01 00       	call   c0028e7b <__floatsidf>
c000df77:	83 c4 10             	add    esp,0x10
c000df7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df7e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df82:	52                   	push   edx
c000df83:	50                   	push   eax
c000df84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df8c:	e8 6b ab 01 00       	call   c0028afc <__divdf3>
c000df91:	83 c4 10             	add    esp,0x10
c000df94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df98:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df9c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfa0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfa4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfa8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfac:	e8 ea a1 01 00       	call   c002819b <__adddf3>
c000dfb1:	83 c4 10             	add    esp,0x10
c000dfb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfbc:	31 c0                	xor    eax,eax
c000dfbe:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfc1:	7e 13                	jle    c000dfd6 <zoh_vari_process+0x292>
c000dfc3:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfc7:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfca:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfcd:	40                   	inc    eax
c000dfce:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfd1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfd4:	eb e8                	jmp    c000dfbe <zoh_vari_process+0x27a>
c000dfd6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfda:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfde:	68 00 00 f0 3f       	push   0x3ff00000
c000dfe3:	6a 00                	push   0x0
c000dfe5:	e8 12 ab 01 00       	call   c0028afc <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 04 24             	mov    DWORD PTR [esp],eax
c000dff0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dff4:	52                   	push   edx
c000dff5:	50                   	push   eax
c000dff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dffe:	e8 98 a1 01 00       	call   c002819b <__adddf3>
c000e003:	83 c4 10             	add    esp,0x10
c000e006:	e9 ff fd ff ff       	jmp    c000de0a <zoh_vari_process+0xc6>
c000e00b:	55                   	push   ebp
c000e00c:	55                   	push   ebp
c000e00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e015:	e8 86 b2 01 00       	call   c00292a0 <lrint>
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	50                   	push   eax
c000e01e:	e8 58 ae 01 00       	call   c0028e7b <__floatsidf>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e02a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e02e:	52                   	push   edx
c000e02f:	50                   	push   eax
c000e030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e034:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e038:	e8 af a7 01 00       	call   c00287ec <__subdf3>
c000e03d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e041:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e045:	83 c4 20             	add    esp,0x20
c000e048:	6a 00                	push   0x0
c000e04a:	6a 00                	push   0x0
c000e04c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e050:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e054:	e8 8e b0 01 00       	call   c00290e7 <__ltdf2>
c000e059:	83 c4 10             	add    esp,0x10
c000e05c:	85 c0                	test   eax,eax
c000e05e:	79 1e                	jns    c000e07e <zoh_vari_process+0x33a>
c000e060:	68 00 00 f0 3f       	push   0x3ff00000
c000e065:	6a 00                	push   0x0
c000e067:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e06f:	e8 27 a1 01 00       	call   c002819b <__adddf3>
c000e074:	83 c4 10             	add    esp,0x10
c000e077:	89 04 24             	mov    DWORD PTR [esp],eax
c000e07a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e07e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e081:	83 ec 10             	sub    esp,0x10
c000e084:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e088:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e08c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e090:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e094:	e8 53 a7 01 00       	call   c00287ec <__subdf3>
c000e099:	83 c4 18             	add    esp,0x18
c000e09c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0a0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0a4:	52                   	push   edx
c000e0a5:	50                   	push   eax
c000e0a6:	e8 f5 b1 01 00       	call   c00292a0 <lrint>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	0f af e8             	imul   ebp,eax
c000e0b1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0b4:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0b7:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0be:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0c1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0c5:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0c8:	0f 8d 7a 02 00 00    	jge    c000e348 <zoh_vari_process+0x604>
c000e0ce:	83 ec 0c             	sub    esp,0xc
c000e0d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0d4:	e8 a2 ad 01 00       	call   c0028e7b <__floatsidf>
c000e0d9:	83 c4 10             	add    esp,0x10
c000e0dc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0e0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0e4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0e8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	e8 1f a7 01 00       	call   c0028818 <__muldf3>
c000e0f9:	59                   	pop    ecx
c000e0fa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0fe:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e102:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e106:	e8 70 ad 01 00       	call   c0028e7b <__floatsidf>
c000e10b:	83 c4 10             	add    esp,0x10
c000e10e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e112:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e116:	52                   	push   edx
c000e117:	50                   	push   eax
c000e118:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e120:	e8 76 a0 01 00       	call   c002819b <__adddf3>
c000e125:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e128:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e12c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e130:	e8 46 ad 01 00       	call   c0028e7b <__floatsidf>
c000e135:	83 c4 10             	add    esp,0x10
c000e138:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e13c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e140:	52                   	push   edx
c000e141:	50                   	push   eax
c000e142:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e146:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e14a:	e8 9a af 01 00       	call   c00290e9 <__ledf2>
c000e14f:	83 c4 10             	add    esp,0x10
c000e152:	85 c0                	test   eax,eax
c000e154:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e158:	0f 8f ea 01 00 00    	jg     c000e348 <zoh_vari_process+0x604>
c000e15e:	85 c9                	test   ecx,ecx
c000e160:	0f 8e ed 00 00 00    	jle    c000e253 <zoh_vari_process+0x50f>
c000e166:	83 ec 10             	sub    esp,0x10
c000e169:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e16c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e16f:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e172:	ff 37                	push   DWORD PTR [edi]
c000e174:	e8 73 a6 01 00       	call   c00287ec <__subdf3>
c000e179:	83 c4 18             	add    esp,0x18
c000e17c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e180:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e184:	52                   	push   edx
c000e185:	50                   	push   eax
c000e186:	e8 f5 b0 01 00       	call   c0029280 <fabs>
c000e18b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e18f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e193:	83 c4 10             	add    esp,0x10
c000e196:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e19b:	68 23 42 92 0c       	push   0xc924223
c000e1a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1a8:	e8 1c af 01 00       	call   c00290c9 <__gtdf2>
c000e1ad:	83 c4 10             	add    esp,0x10
c000e1b0:	85 c0                	test   eax,eax
c000e1b2:	0f 8e 9b 00 00 00    	jle    c000e253 <zoh_vari_process+0x50f>
c000e1b8:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ba:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1c5:	52                   	push   edx
c000e1c6:	50                   	push   eax
c000e1c7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1ca:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1cd:	e8 1a a6 01 00       	call   c00287ec <__subdf3>
c000e1d2:	5d                   	pop    ebp
c000e1d3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1d7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1db:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1de:	e8 98 ac 01 00       	call   c0028e7b <__floatsidf>
c000e1e3:	83 c4 10             	add    esp,0x10
c000e1e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1ee:	52                   	push   edx
c000e1ef:	50                   	push   eax
c000e1f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f8:	e8 1b a6 01 00       	call   c0028818 <__muldf3>
c000e1fd:	59                   	pop    ecx
c000e1fe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e202:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e206:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e209:	e8 6d ac 01 00       	call   c0028e7b <__floatsidf>
c000e20e:	83 c4 10             	add    esp,0x10
c000e211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e215:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e219:	52                   	push   edx
c000e21a:	50                   	push   eax
c000e21b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e223:	e8 d4 a8 01 00       	call   c0028afc <__divdf3>
c000e228:	83 c4 10             	add    esp,0x10
c000e22b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e22f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e233:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e237:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e23b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e23f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e243:	e8 53 9f 01 00       	call   c002819b <__adddf3>
c000e248:	83 c4 10             	add    esp,0x10
c000e24b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e24f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e253:	31 d2                	xor    edx,edx
c000e255:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e258:	39 d0                	cmp    eax,edx
c000e25a:	7e 1d                	jle    c000e279 <zoh_vari_process+0x535>
c000e25c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e25f:	29 c1                	sub    ecx,eax
c000e261:	89 c8                	mov    eax,ecx
c000e263:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e265:	01 d0                	add    eax,edx
c000e267:	42                   	inc    edx
c000e268:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e26b:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e26e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e271:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e274:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e277:	eb dc                	jmp    c000e255 <zoh_vari_process+0x511>
c000e279:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e27d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e281:	68 00 00 f0 3f       	push   0x3ff00000
c000e286:	6a 00                	push   0x0
c000e288:	e8 6f a8 01 00       	call   c0028afc <__divdf3>
c000e28d:	83 c4 10             	add    esp,0x10
c000e290:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e294:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e298:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e29c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2a8:	e8 ee 9e 01 00       	call   c002819b <__adddf3>
c000e2ad:	5d                   	pop    ebp
c000e2ae:	59                   	pop    ecx
c000e2af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2bf:	e8 dc af 01 00       	call   c00292a0 <lrint>
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	50                   	push   eax
c000e2c8:	e8 ae ab 01 00       	call   c0028e7b <__floatsidf>
c000e2cd:	83 c4 10             	add    esp,0x10
c000e2d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2d4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2d8:	52                   	push   edx
c000e2d9:	50                   	push   eax
c000e2da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2e2:	e8 05 a5 01 00       	call   c00287ec <__subdf3>
c000e2e7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2eb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2ef:	83 c4 20             	add    esp,0x20
c000e2f2:	6a 00                	push   0x0
c000e2f4:	6a 00                	push   0x0
c000e2f6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2fe:	e8 e4 ad 01 00       	call   c00290e7 <__ltdf2>
c000e303:	83 c4 10             	add    esp,0x10
c000e306:	85 c0                	test   eax,eax
c000e308:	79 1e                	jns    c000e328 <zoh_vari_process+0x5e4>
c000e30a:	68 00 00 f0 3f       	push   0x3ff00000
c000e30f:	6a 00                	push   0x0
c000e311:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e315:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e319:	e8 7d 9e 01 00       	call   c002819b <__adddf3>
c000e31e:	83 c4 10             	add    esp,0x10
c000e321:	89 04 24             	mov    DWORD PTR [esp],eax
c000e324:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e328:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e32b:	83 ec 10             	sub    esp,0x10
c000e32e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e336:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e33a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e33e:	e8 a9 a4 01 00       	call   c00287ec <__subdf3>
c000e343:	e9 51 fd ff ff       	jmp    c000e099 <zoh_vari_process+0x355>
c000e348:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e34c:	7d 3a                	jge    c000e388 <zoh_vari_process+0x644>
c000e34e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	29 e8                	sub    eax,ebp
c000e357:	99                   	cdq    
c000e358:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e35b:	50                   	push   eax
c000e35c:	e8 1a ab 01 00       	call   c0028e7b <__floatsidf>
c000e361:	83 c4 10             	add    esp,0x10
c000e364:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e368:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e36c:	52                   	push   edx
c000e36d:	50                   	push   eax
c000e36e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e372:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e376:	e8 20 9e 01 00       	call   c002819b <__adddf3>
c000e37b:	83 c4 10             	add    esp,0x10
c000e37e:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e381:	89 04 24             	mov    DWORD PTR [esp],eax
c000e384:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e388:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e38b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e38f:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e392:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e395:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e398:	85 c0                	test   eax,eax
c000e39a:	7f 25                	jg     c000e3c1 <zoh_vari_process+0x67d>
c000e39c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3a4:	89 07                	mov    DWORD PTR [edi],eax
c000e3a6:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3a9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3ac:	99                   	cdq    
c000e3ad:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3b0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3b6:	99                   	cdq    
c000e3b7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ba:	31 d2                	xor    edx,edx
c000e3bc:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3bf:	eb 1e                	jmp    c000e3df <zoh_vari_process+0x69b>
c000e3c1:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3c4:	31 d2                	xor    edx,edx
c000e3c6:	29 c8                	sub    eax,ecx
c000e3c8:	c1 e0 02             	shl    eax,0x2
c000e3cb:	39 d1                	cmp    ecx,edx
c000e3cd:	7e cd                	jle    c000e39c <zoh_vari_process+0x658>
c000e3cf:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3d1:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3d5:	83 c0 04             	add    eax,0x4
c000e3d8:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3dc:	42                   	inc    edx
c000e3dd:	eb ec                	jmp    c000e3cb <zoh_vari_process+0x687>
c000e3df:	83 c4 3c             	add    esp,0x3c
c000e3e2:	89 d0                	mov    eax,edx
c000e3e4:	5b                   	pop    ebx
c000e3e5:	5e                   	pop    esi
c000e3e6:	5f                   	pop    edi
c000e3e7:	5d                   	pop    ebp
c000e3e8:	c3                   	ret    

c000e3e9 <zoh_reset>:
c000e3e9:	83 ec 0c             	sub    esp,0xc
c000e3ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3f0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3f3:	85 c0                	test   eax,eax
c000e3f5:	74 20                	je     c000e417 <zoh_reset+0x2e>
c000e3f7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3fa:	83 c0 1c             	add    eax,0x1c
c000e3fd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e400:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e407:	c1 e2 02             	shl    edx,0x2
c000e40a:	51                   	push   ecx
c000e40b:	52                   	push   edx
c000e40c:	6a 00                	push   0x0
c000e40e:	50                   	push   eax
c000e40f:	e8 64 23 ff ff       	call   c0000778 <memset>
c000e414:	83 c4 10             	add    esp,0x10
c000e417:	83 c4 0c             	add    esp,0xc
c000e41a:	c3                   	ret    

c000e41b <zoh_get_name>:
c000e41b:	31 c0                	xor    eax,eax
c000e41d:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e422:	75 05                	jne    c000e429 <zoh_get_name+0xe>
c000e424:	b8 9e ac 02 c0       	mov    eax,0xc002ac9e
c000e429:	c3                   	ret    

c000e42a <zoh_get_description>:
c000e42a:	31 c0                	xor    eax,eax
c000e42c:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e431:	75 05                	jne    c000e438 <zoh_get_description+0xe>
c000e433:	b8 af ac 02 c0       	mov    eax,0xc002acaf
c000e438:	c3                   	ret    

c000e439 <zoh_set_converter>:
c000e439:	53                   	push   ebx
c000e43a:	b8 0a 00 00 00       	mov    eax,0xa
c000e43f:	83 ec 08             	sub    esp,0x8
c000e442:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e446:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e44b:	75 6e                	jne    c000e4bb <zoh_set_converter+0x82>
c000e44d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e450:	85 c0                	test   eax,eax
c000e452:	74 13                	je     c000e467 <zoh_set_converter+0x2e>
c000e454:	83 ec 0c             	sub    esp,0xc
c000e457:	50                   	push   eax
c000e458:	e8 67 14 00 00       	call   c000f8c4 <free>
c000e45d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e464:	83 c4 10             	add    esp,0x10
c000e467:	50                   	push   eax
c000e468:	50                   	push   eax
c000e469:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e46c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e473:	50                   	push   eax
c000e474:	6a 01                	push   0x1
c000e476:	e8 69 14 00 00       	call   c000f8e4 <calloc>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	89 c2                	mov    edx,eax
c000e480:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e483:	85 d2                	test   edx,edx
c000e485:	b8 01 00 00 00       	mov    eax,0x1
c000e48a:	74 2f                	je     c000e4bb <zoh_set_converter+0x82>
c000e48c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e48f:	83 ec 0c             	sub    esp,0xc
c000e492:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e495:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e49b:	c7 43 24 44 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd44
c000e4a2:	c7 43 20 44 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd44
c000e4a9:	c7 43 28 e9 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3e9
c000e4b0:	53                   	push   ebx
c000e4b1:	e8 33 ff ff ff       	call   c000e3e9 <zoh_reset>
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	31 c0                	xor    eax,eax
c000e4bb:	83 c4 08             	add    esp,0x8
c000e4be:	5b                   	pop    ebx
c000e4bf:	c3                   	ret    

c000e4c0 <CPU::current()>:
c000e4c0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e4c5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4cb:	c3                   	ret    

c000e4cc <operator new(unsigned long)>:
c000e4cc:	e9 e3 13 00 00       	jmp    c000f8b4 <malloc>

c000e4d1 <operator delete(void*)>:
c000e4d1:	e9 fe 13 00 00       	jmp    c000f8d4 <rfree>

c000e4d6 <disableIRQs()>:
c000e4d6:	fa                   	cli    
c000e4d7:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e4dd:	c3                   	ret    

c000e4de <enableIRQs()>:
c000e4de:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e4e3:	48                   	dec    eax
c000e4e4:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e4e9:	75 01                	jne    c000e4ec <enableIRQs()+0xe>
c000e4eb:	fb                   	sti    
c000e4ec:	c3                   	ret    

c000e4ed <lockScheduler()>:
c000e4ed:	fa                   	cli    
c000e4ee:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e4f4:	c3                   	ret    

c000e4f5 <unlockScheduler()>:
c000e4f5:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e4fa:	48                   	dec    eax
c000e4fb:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e500:	75 01                	jne    c000e503 <unlockScheduler()+0xe>
c000e502:	fb                   	sti    
c000e503:	c3                   	ret    

c000e504 <lockStuff()>:
c000e504:	fa                   	cli    
c000e505:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000e50b:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c000e511:	c3                   	ret    

c000e512 <unlockStuff()>:
c000e512:	83 ec 0c             	sub    esp,0xc
c000e515:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c000e51a:	48                   	dec    eax
c000e51b:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c000e520:	75 18                	jne    c000e53a <unlockStuff()+0x28>
c000e522:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c000e529:	74 0f                	je     c000e53a <unlockStuff()+0x28>
c000e52b:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c000e535:	e8 72 01 01 00       	call   c001e6ac <schedule()>
c000e53a:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000e53f:	48                   	dec    eax
c000e540:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000e545:	75 01                	jne    c000e548 <unlockStuff()+0x36>
c000e547:	fb                   	sti    
c000e548:	83 c4 0c             	add    esp,0xc
c000e54b:	c3                   	ret    

c000e54c <Virt::getAKernelVAS()>:
c000e54c:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c000e551:	c3                   	ret    

c000e552 <__not_memcpy>:
c000e552:	57                   	push   edi
c000e553:	56                   	push   esi
c000e554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e558:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e55c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e560:	89 c7                	mov    edi,eax
c000e562:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e564:	5e                   	pop    esi
c000e565:	5f                   	pop    edi
c000e566:	c3                   	ret    

c000e567 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e567:	83 ec 0c             	sub    esp,0xc
c000e56a:	83 ec 08             	sub    esp,0x8
c000e56d:	68 e6 ac 02 c0       	push   0xc002ace6
c000e572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e576:	e8 45 23 ff ff       	call   c00008c0 <strcmp>
c000e57b:	83 c4 10             	add    esp,0x10
c000e57e:	85 c0                	test   eax,eax
c000e580:	0f 94 c0             	sete   al
c000e583:	84 c0                	test   al,al
c000e585:	74 0a                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e587:	b8 c8 f2 02 c0       	mov    eax,0xc002f2c8
c000e58c:	e9 e3 00 00 00       	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ef ac 02 c0       	push   0xc002acef
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 0a                	je     c000e5b8 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5ae:	b8 14 76 02 c0       	mov    eax,0xc0027614
c000e5b3:	e9 bc 00 00 00       	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b8:	83 ec 08             	sub    esp,0x8
c000e5bb:	68 f9 ac 02 c0       	push   0xc002acf9
c000e5c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c4:	e8 f7 22 ff ff       	call   c00008c0 <strcmp>
c000e5c9:	83 c4 10             	add    esp,0x10
c000e5cc:	85 c0                	test   eax,eax
c000e5ce:	0f 94 c0             	sete   al
c000e5d1:	84 c0                	test   al,al
c000e5d3:	74 0a                	je     c000e5df <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5d5:	b8 48 73 02 c0       	mov    eax,0xc0027348
c000e5da:	e9 95 00 00 00       	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5df:	83 ec 08             	sub    esp,0x8
c000e5e2:	68 02 ad 02 c0       	push   0xc002ad02
c000e5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5eb:	e8 d0 22 ff ff       	call   c00008c0 <strcmp>
c000e5f0:	83 c4 10             	add    esp,0x10
c000e5f3:	85 c0                	test   eax,eax
c000e5f5:	0f 94 c0             	sete   al
c000e5f8:	84 c0                	test   al,al
c000e5fa:	74 07                	je     c000e603 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5fc:	b8 14 77 02 c0       	mov    eax,0xc0027714
c000e601:	eb 71                	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e603:	83 ec 08             	sub    esp,0x8
c000e606:	68 0c ad 02 c0       	push   0xc002ad0c
c000e60b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60f:	e8 ac 22 ff ff       	call   c00008c0 <strcmp>
c000e614:	83 c4 10             	add    esp,0x10
c000e617:	85 c0                	test   eax,eax
c000e619:	0f 94 c0             	sete   al
c000e61c:	84 c0                	test   al,al
c000e61e:	74 07                	je     c000e627 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e620:	b8 94 74 02 c0       	mov    eax,0xc0027494
c000e625:	eb 4d                	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e627:	83 ec 08             	sub    esp,0x8
c000e62a:	68 15 ad 02 c0       	push   0xc002ad15
c000e62f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e633:	e8 88 22 ff ff       	call   c00008c0 <strcmp>
c000e638:	83 c4 10             	add    esp,0x10
c000e63b:	85 c0                	test   eax,eax
c000e63d:	0f 94 c0             	sete   al
c000e640:	84 c0                	test   al,al
c000e642:	74 07                	je     c000e64b <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e644:	b8 cc f2 02 c0       	mov    eax,0xc002f2cc
c000e649:	eb 29                	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e64b:	83 ec 08             	sub    esp,0x8
c000e64e:	68 22 ad 02 c0       	push   0xc002ad22
c000e653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e657:	e8 64 22 ff ff       	call   c00008c0 <strcmp>
c000e65c:	83 c4 10             	add    esp,0x10
c000e65f:	85 c0                	test   eax,eax
c000e661:	0f 94 c0             	sete   al
c000e664:	84 c0                	test   al,al
c000e666:	74 07                	je     c000e66f <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e668:	b8 cd f2 02 c0       	mov    eax,0xc002f2cd
c000e66d:	eb 05                	jmp    c000e674 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e66f:	b8 00 00 00 00       	mov    eax,0x0
c000e674:	83 c4 0c             	add    esp,0xc
c000e677:	c3                   	ret    

c000e678 <Computer::close(int, int, void*)>:
c000e678:	57                   	push   edi
c000e679:	56                   	push   esi
c000e67a:	53                   	push   ebx
c000e67b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e67f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e683:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e687:	83 ec 0c             	sub    esp,0xc
c000e68a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e690:	e8 61 5d 00 00       	call   c00143f6 <Device::closeAll()>
c000e695:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6a0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e6a4:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6ac:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6b4:	5b                   	pop    ebx
c000e6b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6b8:	5e                   	pop    esi
c000e6b9:	5f                   	pop    edi
c000e6ba:	ff e0                	jmp    eax

c000e6bc <Krnl::firstTask()>:
c000e6bc:	53                   	push   ebx
c000e6bd:	83 ec 14             	sub    esp,0x14
c000e6c0:	fb                   	sti    
c000e6c1:	68 3f 07 00 00       	push   0x73f
c000e6c6:	e8 e9 11 00 00       	call   c000f8b4 <malloc>
c000e6cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6d2:	89 c3                	mov    ebx,eax
c000e6d4:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c000e6da:	68 2f ad 02 c0       	push   0xc002ad2f
c000e6df:	6a 01                	push   0x1
c000e6e1:	50                   	push   eax
c000e6e2:	e8 89 fb 00 00       	call   c001e270 <Process::Process(bool, char const*, Process*, char**)>
c000e6e7:	83 c4 20             	add    esp,0x20
c000e6ea:	68 ff 00 00 00       	push   0xff
c000e6ef:	6a 00                	push   0x0
c000e6f1:	68 47 f2 00 c0       	push   0xc000f247
c000e6f6:	53                   	push   ebx
c000e6f7:	e8 6c fd 00 00       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c000e6fc:	6a 7a                	push   0x7a
c000e6fe:	6a 00                	push   0x0
c000e700:	68 e6 ee 01 c0       	push   0xc001eee6
c000e705:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c000e70b:	e8 58 fd 00 00       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c000e710:	83 c4 20             	add    esp,0x20
c000e713:	a3 e8 27 03 c0       	mov    ds:0xc00327e8,eax
c000e718:	c6 05 cd f2 02 c0 01 	mov    BYTE PTR ds:0xc002f2cd,0x1
c000e71f:	e8 16 0c 01 00       	call   c001f33a <Vm::initialise8086()>
c000e724:	e8 c1 4a 00 00       	call   c00131ea <Fs::initVFS()>
c000e729:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e72e:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e734:	8b 10                	mov    edx,DWORD PTR [eax]
c000e736:	6a 00                	push   0x0
c000e738:	6a 00                	push   0x0
c000e73a:	6a 00                	push   0x0
c000e73c:	50                   	push   eax
c000e73d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e740:	e8 b8 e3 00 00       	call   c001cafd <Sys::loadSyscalls()>
c000e745:	e8 76 c0 00 00       	call   c001a7c0 <Krnl::loadSystemEnv()>
c000e74a:	83 c4 0c             	add    esp,0xc
c000e74d:	6a 3a                	push   0x3a
c000e74f:	68 3c ad 02 c0       	push   0xc002ad3c
c000e754:	68 45 ad 02 c0       	push   0xc002ad45
c000e759:	e8 51 cf 00 00       	call   c001b6af <Reg::readIntWithDefault(char*, char*, int)>
c000e75e:	89 04 24             	mov    DWORD PTR [esp],eax
c000e761:	e8 74 55 00 00       	call   c0013cda <User::loadClockSettings(int)>
c000e766:	58                   	pop    eax
c000e767:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000e76c:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e772:	e8 53 5c 00 00       	call   c00143ca <Device::loadDriversForAll()>
c000e777:	e8 90 bb 00 00       	call   c001a30c <Krnl::startCPUs()>
c000e77c:	5a                   	pop    edx
c000e77d:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c000e783:	59                   	pop    ecx
c000e784:	6a 01                	push   0x1
c000e786:	68 4d ad 02 c0       	push   0xc002ad4d
c000e78b:	e8 3d f5 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c000e790:	5a                   	pop    edx
c000e791:	59                   	pop    ecx
c000e792:	53                   	push   ebx
c000e793:	50                   	push   eax
c000e794:	e8 5f f7 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	83 ec 0c             	sub    esp,0xc
c000e79f:	6a 02                	push   0x2
c000e7a1:	e8 05 01 01 00       	call   c001e8ab <blockTask(TaskState)>
c000e7a6:	83 c4 10             	add    esp,0x10
c000e7a9:	eb f1                	jmp    c000e79c <Krnl::firstTask()+0xe0>
c000e7ab:	90                   	nop

c000e7ac <Computer::Computer()>:
c000e7ac:	83 ec 0c             	sub    esp,0xc
c000e7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b3:	83 ec 08             	sub    esp,0x8
c000e7b6:	68 69 ad 02 c0       	push   0xc002ad69
c000e7bb:	50                   	push   eax
c000e7bc:	e8 af 5c 00 00       	call   c0014470 <Device::Device(char const*)>
c000e7c1:	83 c4 10             	add    esp,0x10
c000e7c4:	ba 08 af 02 c0       	mov    edx,0xc002af08
c000e7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7cd:	89 10                	mov    DWORD PTR [eax],edx
c000e7cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7f5:	83 ca 04             	or     edx,0x4
c000e7f8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e802:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e808:	0f b6 d0             	movzx  edx,al
c000e80b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80f:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e820:	0f b6 d0             	movzx  edx,al
c000e823:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e827:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e836:	8d 50 01             	lea    edx,[eax+0x1]
c000e839:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e83d:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e843:	0f b6 d0             	movzx  edx,al
c000e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e84e:	83 e1 3f             	and    ecx,0x3f
c000e851:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e859:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85f:	0f b6 d0             	movzx  edx,al
c000e862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e866:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e871:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e877:	0f b6 d0             	movzx  edx,al
c000e87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87e:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e887:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88d:	8d 50 01             	lea    edx,[eax+0x1]
c000e890:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e894:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e89a:	0f b6 d0             	movzx  edx,al
c000e89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8a5:	83 e1 3f             	and    ecx,0x3f
c000e8a8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8b6:	0f b6 d0             	movzx  edx,al
c000e8b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bd:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8ce:	0f b6 d0             	movzx  edx,al
c000e8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8e4:	8d 50 01             	lea    edx,[eax+0x1]
c000e8e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8eb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8f1:	0f b6 d0             	movzx  edx,al
c000e8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8f8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8fc:	83 e1 3f             	and    ecx,0x3f
c000e8ff:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e903:	90                   	nop
c000e904:	83 c4 0c             	add    esp,0xc
c000e907:	c3                   	ret    

c000e908 <Computer::setBootMessage(char const*)>:
c000e908:	c3                   	ret    
c000e909:	90                   	nop

c000e90a <Computer::detectFeatures()>:
c000e90a:	55                   	push   ebp
c000e90b:	57                   	push   edi
c000e90c:	56                   	push   esi
c000e90d:	53                   	push   ebx
c000e90e:	83 ec 1c             	sub    esp,0x1c
c000e911:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e915:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e91f:	e8 c0 19 ff ff       	call   c00002e4 <detectCPUID>
c000e924:	85 c0                	test   eax,eax
c000e926:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92c:	0f 95 c2             	setne  dl
c000e92f:	83 e0 fd             	and    eax,0xfffffffd
c000e932:	d1 e2                	shl    edx,1
c000e934:	09 d0                	or     eax,edx
c000e936:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e93c:	a8 02                	test   al,0x2
c000e93e:	75 46                	jne    c000e986 <Computer::detectFeatures()+0x7c>
c000e940:	f6 05 e1 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e1,0x4
c000e947:	74 07                	je     c000e950 <Computer::detectFeatures()+0x46>
c000e949:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e950:	e8 81 89 01 00       	call   c00272d6 <x87Detect>
c000e955:	83 e0 01             	and    eax,0x1
c000e958:	c1 e0 04             	shl    eax,0x4
c000e95b:	88 c2                	mov    dl,al
c000e95d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e963:	83 e0 ef             	and    eax,0xffffffef
c000e966:	09 d0                	or     eax,edx
c000e968:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e96e:	a8 10                	test   al,0x10
c000e970:	0f 85 2a 01 00 00    	jne    c000eaa0 <Computer::detectFeatures()+0x196>
c000e976:	84 c0                	test   al,al
c000e978:	0f 88 45 01 00 00    	js     c000eac3 <Computer::detectFeatures()+0x1b9>
c000e97e:	83 c4 1c             	add    esp,0x1c
c000e981:	5b                   	pop    ebx
c000e982:	5e                   	pop    esi
c000e983:	5f                   	pop    edi
c000e984:	5d                   	pop    ebp
c000e985:	c3                   	ret    
c000e986:	83 ec 0c             	sub    esp,0xc
c000e989:	6a 20                	push   0x20
c000e98b:	e8 8c a6 00 00       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c000e990:	83 e0 01             	and    eax,0x1
c000e993:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e99a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9a0:	83 e0 f7             	and    eax,0xfffffff7
c000e9a3:	09 d0                	or     eax,edx
c000e9a5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9ab:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9b2:	e8 65 a6 00 00       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c000e9b7:	83 e0 01             	and    eax,0x1
c000e9ba:	88 c2                	mov    dl,al
c000e9bc:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9c2:	83 e0 fe             	and    eax,0xfffffffe
c000e9c5:	09 d0                	or     eax,edx
c000e9c7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9cd:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9d4:	e8 43 a6 00 00       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c000e9d9:	c1 e0 07             	shl    eax,0x7
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9e4:	83 e0 7f             	and    eax,0x7f
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9ef:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9f6:	e8 21 a6 00 00       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c000e9fb:	83 c4 10             	add    esp,0x10
c000e9fe:	83 e0 01             	and    eax,0x1
c000ea01:	c1 e0 05             	shl    eax,0x5
c000ea04:	88 c2                	mov    dl,al
c000ea06:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0c:	83 e0 df             	and    eax,0xffffffdf
c000ea0f:	09 d0                	or     eax,edx
c000ea11:	f7 05 e0 f2 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002f2e0,0x401
c000ea1b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea21:	0f 84 c2 00 00 00    	je     c000eae9 <Computer::detectFeatures()+0x1df>
c000ea27:	83 e0 fe             	and    eax,0xfffffffe
c000ea2a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea30:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea36:	88 c2                	mov    dl,al
c000ea38:	83 e2 09             	and    edx,0x9
c000ea3b:	fe ca                	dec    dl
c000ea3d:	75 09                	jne    c000ea48 <Computer::detectFeatures()+0x13e>
c000ea3f:	83 e0 fe             	and    eax,0xfffffffe
c000ea42:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea48:	83 ec 0c             	sub    esp,0xc
c000ea4b:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea4f:	50                   	push   eax
c000ea50:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea54:	55                   	push   ebp
c000ea55:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea59:	57                   	push   edi
c000ea5a:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea5e:	56                   	push   esi
c000ea5f:	68 00 00 00 80       	push   0x80000000
c000ea64:	e8 2f a5 00 00       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea69:	83 c4 20             	add    esp,0x20
c000ea6c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea73:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea77:	0f 86 c3 fe ff ff    	jbe    c000e940 <Computer::detectFeatures()+0x36>
c000ea7d:	83 ec 0c             	sub    esp,0xc
c000ea80:	50                   	push   eax
c000ea81:	55                   	push   ebp
c000ea82:	57                   	push   edi
c000ea83:	56                   	push   esi
c000ea84:	68 01 00 00 80       	push   0x80000001
c000ea89:	e8 0a a5 00 00       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea8e:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea98:	83 c4 20             	add    esp,0x20
c000ea9b:	e9 a0 fe ff ff       	jmp    c000e940 <Computer::detectFeatures()+0x36>
c000eaa0:	e8 eb 87 01 00       	call   c0027290 <absolutelyNoChanceInHell>
c000eaa5:	88 c2                	mov    dl,al
c000eaa7:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaad:	c1 e2 07             	shl    edx,0x7
c000eab0:	83 e0 7f             	and    eax,0x7f
c000eab3:	09 d0                	or     eax,edx
c000eab5:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eabb:	84 c0                	test   al,al
c000eabd:	0f 89 bb fe ff ff    	jns    c000e97e <Computer::detectFeatures()+0x74>
c000eac3:	e8 a8 87 01 00       	call   c0027270 <avxDetect>
c000eac8:	83 e0 01             	and    eax,0x1
c000eacb:	c1 e0 05             	shl    eax,0x5
c000eace:	88 c2                	mov    dl,al
c000ead0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ead6:	83 e0 df             	and    eax,0xffffffdf
c000ead9:	09 d0                	or     eax,edx
c000eadb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eae1:	83 c4 1c             	add    esp,0x1c
c000eae4:	5b                   	pop    ebx
c000eae5:	5e                   	pop    esi
c000eae6:	5f                   	pop    edi
c000eae7:	5d                   	pop    ebp
c000eae8:	c3                   	ret    
c000eae9:	83 ec 0c             	sub    esp,0xc
c000eaec:	68 00 02 00 00       	push   0x200
c000eaf1:	e8 26 a5 00 00       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c000eaf6:	83 c4 10             	add    esp,0x10
c000eaf9:	83 e0 01             	and    eax,0x1
c000eafc:	88 c2                	mov    dl,al
c000eafe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eb04:	83 e0 fe             	and    eax,0xfffffffe
c000eb07:	09 d0                	or     eax,edx
c000eb09:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb0f:	e9 1c ff ff ff       	jmp    c000ea30 <Computer::detectFeatures()+0x126>

c000eb14 <Computer::displayFeatures()>:
c000eb14:	53                   	push   ebx
c000eb15:	83 ec 14             	sub    esp,0x14
c000eb18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb1c:	68 79 ad 02 c0       	push   0xc002ad79
c000eb21:	e8 39 43 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eb26:	83 c4 10             	add    esp,0x10
c000eb29:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb30:	0f 85 73 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x295>
c000eb36:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000eb3b:	83 ec 08             	sub    esp,0x8
c000eb3e:	50                   	push   eax
c000eb3f:	68 8c ad 02 c0       	push   0xc002ad8c
c000eb44:	e8 16 43 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb53:	0f 85 8c 02 00 00    	jne    c000ede5 <Computer::displayFeatures()+0x2d1>
c000eb59:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000eb5e:	83 ec 08             	sub    esp,0x8
c000eb61:	50                   	push   eax
c000eb62:	68 9d ad 02 c0       	push   0xc002ad9d
c000eb67:	e8 f3 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eb6c:	83 c4 10             	add    esp,0x10
c000eb6f:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb76:	0f 85 5f 02 00 00    	jne    c000eddb <Computer::displayFeatures()+0x2c7>
c000eb7c:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000eb81:	83 ec 08             	sub    esp,0x8
c000eb84:	50                   	push   eax
c000eb85:	68 ae ad 02 c0       	push   0xc002adae
c000eb8a:	e8 d0 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eb8f:	83 c4 10             	add    esp,0x10
c000eb92:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb99:	0f 85 32 02 00 00    	jne    c000edd1 <Computer::displayFeatures()+0x2bd>
c000eb9f:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000eba4:	83 ec 08             	sub    esp,0x8
c000eba7:	50                   	push   eax
c000eba8:	68 bf ad 02 c0       	push   0xc002adbf
c000ebad:	e8 ad 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ebb2:	83 c4 10             	add    esp,0x10
c000ebb5:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebbc:	0f 85 05 02 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2b3>
c000ebc2:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ebc7:	83 ec 08             	sub    esp,0x8
c000ebca:	50                   	push   eax
c000ebcb:	68 d0 ad 02 c0       	push   0xc002add0
c000ebd0:	e8 8a 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ebd5:	83 c4 10             	add    esp,0x10
c000ebd8:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebdf:	0f 85 d8 01 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2a9>
c000ebe5:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ebea:	83 ec 08             	sub    esp,0x8
c000ebed:	50                   	push   eax
c000ebee:	68 e1 ad 02 c0       	push   0xc002ade1
c000ebf3:	e8 67 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ebf8:	83 c4 10             	add    esp,0x10
c000ebfb:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ec02:	0f 85 ab 01 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x29f>
c000ec08:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ec0d:	83 ec 08             	sub    esp,0x8
c000ec10:	50                   	push   eax
c000ec11:	68 f2 ad 02 c0       	push   0xc002adf2
c000ec16:	e8 44 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ec1b:	83 c4 10             	add    esp,0x10
c000ec1e:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec25:	0f 88 1b 02 00 00    	js     c000ee46 <Computer::displayFeatures()+0x332>
c000ec2b:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ec30:	83 ec 08             	sub    esp,0x8
c000ec33:	50                   	push   eax
c000ec34:	68 03 ae 02 c0       	push   0xc002ae03
c000ec39:	e8 21 42 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ec3e:	83 c4 10             	add    esp,0x10
c000ec41:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec48:	0f 85 a1 01 00 00    	jne    c000edef <Computer::displayFeatures()+0x2db>
c000ec4e:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ec53:	83 ec 08             	sub    esp,0x8
c000ec56:	50                   	push   eax
c000ec57:	68 14 ae 02 c0       	push   0xc002ae14
c000ec5c:	e8 fe 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ec61:	83 c4 10             	add    esp,0x10
c000ec64:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec6b:	0f 85 cb 01 00 00    	jne    c000ee3c <Computer::displayFeatures()+0x328>
c000ec71:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ec76:	83 ec 08             	sub    esp,0x8
c000ec79:	50                   	push   eax
c000ec7a:	68 25 ae 02 c0       	push   0xc002ae25
c000ec7f:	e8 db 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ec84:	83 c4 10             	add    esp,0x10
c000ec87:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec8e:	0f 85 9e 01 00 00    	jne    c000ee32 <Computer::displayFeatures()+0x31e>
c000ec94:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ec99:	83 ec 08             	sub    esp,0x8
c000ec9c:	50                   	push   eax
c000ec9d:	68 36 ae 02 c0       	push   0xc002ae36
c000eca2:	e8 b8 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eca7:	83 c4 10             	add    esp,0x10
c000ecaa:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ecb1:	0f 85 71 01 00 00    	jne    c000ee28 <Computer::displayFeatures()+0x314>
c000ecb7:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ecbc:	83 ec 08             	sub    esp,0x8
c000ecbf:	50                   	push   eax
c000ecc0:	68 47 ae 02 c0       	push   0xc002ae47
c000ecc5:	e8 95 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ecca:	83 c4 10             	add    esp,0x10
c000eccd:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecd4:	0f 85 44 01 00 00    	jne    c000ee1e <Computer::displayFeatures()+0x30a>
c000ecda:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ecdf:	83 ec 08             	sub    esp,0x8
c000ece2:	50                   	push   eax
c000ece3:	68 58 ae 02 c0       	push   0xc002ae58
c000ece8:	e8 72 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000eced:	83 c4 10             	add    esp,0x10
c000ecf0:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ecf7:	0f 85 17 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x300>
c000ecfd:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ed02:	83 ec 08             	sub    esp,0x8
c000ed05:	50                   	push   eax
c000ed06:	68 69 ae 02 c0       	push   0xc002ae69
c000ed0b:	e8 4f 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ed10:	83 c4 10             	add    esp,0x10
c000ed13:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed1a:	0f 85 ea 00 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x2f6>
c000ed20:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ed25:	83 ec 08             	sub    esp,0x8
c000ed28:	50                   	push   eax
c000ed29:	68 7a ae 02 c0       	push   0xc002ae7a
c000ed2e:	e8 2c 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ed33:	83 c4 10             	add    esp,0x10
c000ed36:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed3d:	0f 88 0d 01 00 00    	js     c000ee50 <Computer::displayFeatures()+0x33c>
c000ed43:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ed48:	83 ec 08             	sub    esp,0x8
c000ed4b:	50                   	push   eax
c000ed4c:	68 8b ae 02 c0       	push   0xc002ae8b
c000ed51:	e8 09 41 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ed56:	83 c4 10             	add    esp,0x10
c000ed59:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed60:	0f 85 9a 00 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x2ec>
c000ed66:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ed6b:	83 ec 08             	sub    esp,0x8
c000ed6e:	50                   	push   eax
c000ed6f:	68 9c ae 02 c0       	push   0xc002ae9c
c000ed74:	e8 e6 40 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ed79:	83 c4 10             	add    esp,0x10
c000ed7c:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed83:	75 74                	jne    c000edf9 <Computer::displayFeatures()+0x2e5>
c000ed85:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c000ed8a:	83 ec 08             	sub    esp,0x8
c000ed8d:	50                   	push   eax
c000ed8e:	68 ad ae 02 c0       	push   0xc002aead
c000ed93:	e8 c7 40 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ed98:	c7 44 24 20 14 c9 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c914
c000eda0:	83 c4 18             	add    esp,0x18
c000eda3:	5b                   	pop    ebx
c000eda4:	e9 b6 40 00 00       	jmp    c0012e5f <Dbg::kprintf(char const*, ...)>
c000eda9:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edae:	e9 88 fd ff ff       	jmp    c000eb3b <Computer::displayFeatures()+0x27>
c000edb3:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edb8:	e9 50 fe ff ff       	jmp    c000ec0d <Computer::displayFeatures()+0xf9>
c000edbd:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edc2:	e9 23 fe ff ff       	jmp    c000ebea <Computer::displayFeatures()+0xd6>
c000edc7:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edcc:	e9 f6 fd ff ff       	jmp    c000ebc7 <Computer::displayFeatures()+0xb3>
c000edd1:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edd6:	e9 c9 fd ff ff       	jmp    c000eba4 <Computer::displayFeatures()+0x90>
c000eddb:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ede0:	e9 9c fd ff ff       	jmp    c000eb81 <Computer::displayFeatures()+0x6d>
c000ede5:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edea:	e9 6f fd ff ff       	jmp    c000eb5e <Computer::displayFeatures()+0x4a>
c000edef:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edf4:	e9 5a fe ff ff       	jmp    c000ec53 <Computer::displayFeatures()+0x13f>
c000edf9:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000edfe:	eb 8a                	jmp    c000ed8a <Computer::displayFeatures()+0x276>
c000ee00:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee05:	e9 61 ff ff ff       	jmp    c000ed6b <Computer::displayFeatures()+0x257>
c000ee0a:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee0f:	e9 11 ff ff ff       	jmp    c000ed25 <Computer::displayFeatures()+0x211>
c000ee14:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee19:	e9 e4 fe ff ff       	jmp    c000ed02 <Computer::displayFeatures()+0x1ee>
c000ee1e:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee23:	e9 b7 fe ff ff       	jmp    c000ecdf <Computer::displayFeatures()+0x1cb>
c000ee28:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee2d:	e9 8a fe ff ff       	jmp    c000ecbc <Computer::displayFeatures()+0x1a8>
c000ee32:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee37:	e9 5d fe ff ff       	jmp    c000ec99 <Computer::displayFeatures()+0x185>
c000ee3c:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee41:	e9 30 fe ff ff       	jmp    c000ec76 <Computer::displayFeatures()+0x162>
c000ee46:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee4b:	e9 e0 fd ff ff       	jmp    c000ec30 <Computer::displayFeatures()+0x11c>
c000ee50:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c000ee55:	e9 ee fe ff ff       	jmp    c000ed48 <Computer::displayFeatures()+0x234>

c000ee5a <Computer::rdmsr(unsigned int)>:
c000ee5a:	83 ec 0c             	sub    esp,0xc
c000ee5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee61:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee68:	74 0a                	je     c000ee74 <Computer::rdmsr(unsigned int)+0x1a>
c000ee6a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee6e:	0f 32                	rdmsr  
c000ee70:	83 c4 0c             	add    esp,0xc
c000ee73:	c3                   	ret    
c000ee74:	83 ec 0c             	sub    esp,0xc
c000ee77:	68 be ae 02 c0       	push   0xc002aebe
c000ee7c:	e8 78 ba 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000ee81:	83 c4 10             	add    esp,0x10
c000ee84:	eb e4                	jmp    c000ee6a <Computer::rdmsr(unsigned int)+0x10>

c000ee86 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee86:	57                   	push   edi
c000ee87:	56                   	push   esi
c000ee88:	52                   	push   edx
c000ee89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee8d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee91:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee95:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee9c:	74 0e                	je     c000eeac <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee9e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eea2:	89 f0                	mov    eax,esi
c000eea4:	89 fa                	mov    edx,edi
c000eea6:	0f 30                	wrmsr  
c000eea8:	58                   	pop    eax
c000eea9:	5e                   	pop    esi
c000eeaa:	5f                   	pop    edi
c000eeab:	c3                   	ret    
c000eeac:	83 ec 0c             	sub    esp,0xc
c000eeaf:	68 c4 ae 02 c0       	push   0xc002aec4
c000eeb4:	e8 40 ba 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000eeb9:	83 c4 10             	add    esp,0x10
c000eebc:	eb e0                	jmp    c000ee9e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eebe <Computer::nmiEnabled()>:
c000eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec2:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eec8:	c3                   	ret    
c000eec9:	90                   	nop

c000eeca <Computer::readCMOS(unsigned char)>:
c000eeca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eece:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eed5:	19 c0                	sbb    eax,eax
c000eed7:	83 e0 80             	and    eax,0xffffff80
c000eeda:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eede:	e6 70                	out    0x70,al
c000eee0:	e4 71                	in     al,0x71
c000eee2:	c3                   	ret    
c000eee3:	90                   	nop

c000eee4 <Computer::enableNMI(bool)>:
c000eee4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eee8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeec:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eef2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eefa:	eb ce                	jmp    c000eeca <Computer::readCMOS(unsigned char)>

c000eefc <Computer::open(int, int, void*)>:
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	83 ec 10             	sub    esp,0x10
c000ef01:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ef05:	f6 05 e0 f2 02 c0 04 	test   BYTE PTR ds:0xc002f2e0,0x4
c000ef0c:	68 68 12 00 00       	push   0x1268
c000ef11:	0f 94 05 04 e2 02 c0 	sete   BYTE PTR ds:0xc002e204
c000ef18:	e8 97 09 00 00       	call   c000f8b4 <malloc>
c000ef1d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef20:	89 c6                	mov    esi,eax
c000ef22:	e8 c7 93 00 00       	call   c00182ee <ACPI::ACPI()>
c000ef27:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef2d:	58                   	pop    eax
c000ef2e:	5a                   	pop    edx
c000ef2f:	56                   	push   esi
c000ef30:	53                   	push   ebx
c000ef31:	e8 4a 53 00 00       	call   c0014280 <Device::addChild(Device*)>
c000ef36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef39:	e8 cc f9 ff ff       	call   c000e90a <Computer::detectFeatures()>
c000ef3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef41:	e8 ce fb ff ff       	call   c000eb14 <Computer::displayFeatures()>
c000ef46:	59                   	pop    ecx
c000ef47:	5e                   	pop    esi
c000ef48:	6a 01                	push   0x1
c000ef4a:	53                   	push   ebx
c000ef4b:	e8 94 ff ff ff       	call   c000eee4 <Computer::enableNMI(bool)>
c000ef50:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef57:	e8 58 09 00 00       	call   c000f8b4 <malloc>
c000ef5c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef5f:	89 c6                	mov    esi,eax
c000ef61:	e8 6e a1 00 00       	call   c00190d4 <CPU::CPU()>
c000ef66:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef6c:	58                   	pop    eax
c000ef6d:	5a                   	pop    edx
c000ef6e:	56                   	push   esi
c000ef6f:	53                   	push   ebx
c000ef70:	e8 0b 53 00 00       	call   c0014280 <Device::addChild(Device*)>
c000ef75:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef7b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef81:	6a 00                	push   0x0
c000ef83:	6a 00                	push   0x0
c000ef85:	50                   	push   eax
c000ef86:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef89:	83 c4 20             	add    esp,0x20
c000ef8c:	e8 83 58 00 00       	call   c0014814 <setupFPU()>
c000ef91:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef97:	85 c0                	test   eax,eax
c000ef99:	74 1f                	je     c000efba <Computer::open(int, int, void*)+0xbe>
c000ef9b:	83 ec 08             	sub    esp,0x8
c000ef9e:	50                   	push   eax
c000ef9f:	53                   	push   ebx
c000efa0:	e8 db 52 00 00       	call   c0014280 <Device::addChild(Device*)>
c000efa5:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000efab:	8b 10                	mov    edx,DWORD PTR [eax]
c000efad:	6a 00                	push   0x0
c000efaf:	6a 00                	push   0x0
c000efb1:	6a 00                	push   0x0
c000efb3:	50                   	push   eax
c000efb4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efb7:	83 c4 20             	add    esp,0x20
c000efba:	83 ec 0c             	sub    esp,0xc
c000efbd:	68 bc e6 00 c0       	push   0xc000e6bc
c000efc2:	e8 c3 f5 00 00       	call   c001e58a <setupMultitasking(void (*)())>
c000efc7:	83 c4 14             	add    esp,0x14
c000efca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efcf:	5b                   	pop    ebx
c000efd0:	5e                   	pop    esi
c000efd1:	c3                   	ret    

c000efd2 <Computer::disableNMI()>:
c000efd2:	6a 00                	push   0x0
c000efd4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efd8:	e8 07 ff ff ff       	call   c000eee4 <Computer::enableNMI(bool)>
c000efdd:	58                   	pop    eax
c000efde:	5a                   	pop    edx
c000efdf:	c3                   	ret    

c000efe0 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efe4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efeb:	19 c0                	sbb    eax,eax
c000efed:	83 e0 80             	and    eax,0xffffff80
c000eff0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eff4:	e6 70                	out    0x70,al
c000eff6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000effa:	e6 71                	out    0x71,al
c000effc:	c3                   	ret    
c000effd:	90                   	nop

c000effe <Computer::handleNMI()>:
c000effe:	56                   	push   esi
c000efff:	53                   	push   ebx
c000f000:	83 ec 10             	sub    esp,0x10
c000f003:	e4 92                	in     al,0x92
c000f005:	89 c6                	mov    esi,eax
c000f007:	e4 61                	in     al,0x61
c000f009:	68 ca ae 02 c0       	push   0xc002aeca
c000f00e:	88 c3                	mov    bl,al
c000f010:	e8 4a 3e 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000f015:	83 c4 10             	add    esp,0x10
c000f018:	83 e6 10             	and    esi,0x10
c000f01b:	75 0d                	jne    c000f02a <Computer::handleNMI()+0x2c>
c000f01d:	f6 c3 40             	test   bl,0x40
c000f020:	75 1d                	jne    c000f03f <Computer::handleNMI()+0x41>
c000f022:	84 db                	test   bl,bl
c000f024:	78 2d                	js     c000f053 <Computer::handleNMI()+0x55>
c000f026:	58                   	pop    eax
c000f027:	5b                   	pop    ebx
c000f028:	5e                   	pop    esi
c000f029:	c3                   	ret    
c000f02a:	83 ec 0c             	sub    esp,0xc
c000f02d:	68 db ae 02 c0       	push   0xc002aedb
c000f032:	e8 c2 b8 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000f037:	83 c4 10             	add    esp,0x10
c000f03a:	f6 c3 40             	test   bl,0x40
c000f03d:	74 e3                	je     c000f022 <Computer::handleNMI()+0x24>
c000f03f:	83 ec 0c             	sub    esp,0xc
c000f042:	68 e8 ae 02 c0       	push   0xc002aee8
c000f047:	e8 ad b8 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000f04c:	83 c4 10             	add    esp,0x10
c000f04f:	84 db                	test   bl,bl
c000f051:	79 d3                	jns    c000f026 <Computer::handleNMI()+0x28>
c000f053:	c7 44 24 10 f2 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aef2
c000f05b:	5a                   	pop    edx
c000f05c:	5b                   	pop    ebx
c000f05d:	5e                   	pop    esi
c000f05e:	e9 96 b8 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c000f063:	90                   	nop

c000f064 <Computer::setDiskActivityLight(int, bool)>:
c000f064:	56                   	push   esi
c000f065:	53                   	push   ebx
c000f066:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f06a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f06f:	77 1b                	ja     c000f08c <Computer::setDiskActivityLight(int, bool)+0x28>
c000f071:	e4 92                	in     al,0x92
c000f073:	bb 40 00 00 00       	mov    ebx,0x40
c000f078:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f07c:	89 da                	mov    edx,ebx
c000f07e:	d3 e2                	shl    edx,cl
c000f080:	89 f1                	mov    ecx,esi
c000f082:	f7 d2                	not    edx
c000f084:	d3 e3                	shl    ebx,cl
c000f086:	21 d0                	and    eax,edx
c000f088:	09 d8                	or     eax,ebx
c000f08a:	e6 92                	out    0x92,al
c000f08c:	5b                   	pop    ebx
c000f08d:	5e                   	pop    esi
c000f08e:	c3                   	ret    
c000f08f:	90                   	nop

c000f090 <GDTEntry::setBase(unsigned int)>:
c000f090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f094:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f098:	89 c1                	mov    ecx,eax
c000f09a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f09e:	c1 e9 10             	shr    ecx,0x10
c000f0a1:	c1 e8 18             	shr    eax,0x18
c000f0a4:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f0a7:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f0aa:	c3                   	ret    
c000f0ab:	90                   	nop

c000f0ac <GDTEntry::setLimit(unsigned int)>:
c000f0ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0b4:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0b7:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ba:	83 e2 f0             	and    edx,0xfffffff0
c000f0bd:	c1 e8 10             	shr    eax,0x10
c000f0c0:	83 e0 0f             	and    eax,0xf
c000f0c3:	09 d0                	or     eax,edx
c000f0c5:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0c8:	c3                   	ret    
c000f0c9:	90                   	nop

c000f0ca <GDT::GDT()>:
c000f0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ce:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0d8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0de:	90                   	nop
c000f0df:	c3                   	ret    

c000f0e0 <GDT::addEntry(GDTEntry)>:
c000f0e0:	53                   	push   ebx
c000f0e1:	83 ec 0c             	sub    esp,0xc
c000f0e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0f1:	52                   	push   edx
c000f0f2:	50                   	push   eax
c000f0f3:	68 2c af 02 c0       	push   0xc002af2c
c000f0f8:	e8 62 3d 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000f0fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f103:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f107:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f10b:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f10f:	8d 50 01             	lea    edx,[eax+0x1]
c000f112:	c1 e0 03             	shl    eax,0x3
c000f115:	89 13                	mov    DWORD PTR [ebx],edx
c000f117:	83 c4 18             	add    esp,0x18
c000f11a:	5b                   	pop    ebx
c000f11b:	c3                   	ret    

c000f11c <GDT::getNumberOfEntries()>:
c000f11c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f120:	8b 00                	mov    eax,DWORD PTR [eax]
c000f122:	c3                   	ret    
c000f123:	90                   	nop

c000f124 <GDT::flush()>:
c000f124:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f128:	8b 10                	mov    edx,DWORD PTR [eax]
c000f12a:	83 c0 04             	add    eax,0x4
c000f12d:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f134:	a3 d2 f2 02 c0       	mov    ds:0xc002f2d2,eax
c000f139:	66 89 15 d0 f2 02 c0 	mov    WORD PTR ds:0xc002f2d0,dx
c000f140:	e9 0b 13 ff ff       	jmp    c0000450 <loadGDT>
c000f145:	90                   	nop

c000f146 <GDT::setup()>:
c000f146:	55                   	push   ebp
c000f147:	57                   	push   edi
c000f148:	56                   	push   esi
c000f149:	53                   	push   ebx
c000f14a:	83 ec 3c             	sub    esp,0x3c
c000f14d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f151:	6a 00                	push   0x0
c000f153:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f157:	53                   	push   ebx
c000f158:	e8 33 ff ff ff       	call   c000f090 <GDTEntry::setBase(unsigned int)>
c000f15d:	6a 00                	push   0x0
c000f15f:	53                   	push   ebx
c000f160:	e8 47 ff ff ff       	call   c000f0ac <GDTEntry::setLimit(unsigned int)>
c000f165:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f16d:	6a 00                	push   0x0
c000f16f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f173:	53                   	push   ebx
c000f174:	e8 17 ff ff ff       	call   c000f090 <GDTEntry::setBase(unsigned int)>
c000f179:	68 ff ff ff 00       	push   0xffffff
c000f17e:	53                   	push   ebx
c000f17f:	e8 28 ff ff ff       	call   c000f0ac <GDTEntry::setLimit(unsigned int)>
c000f184:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f188:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f18d:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f192:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f196:	83 c4 20             	add    esp,0x20
c000f199:	6a 00                	push   0x0
c000f19b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f19f:	53                   	push   ebx
c000f1a0:	e8 eb fe ff ff       	call   c000f090 <GDTEntry::setBase(unsigned int)>
c000f1a5:	68 ff ff ff 00       	push   0xffffff
c000f1aa:	53                   	push   ebx
c000f1ab:	e8 fc fe ff ff       	call   c000f0ac <GDTEntry::setLimit(unsigned int)>
c000f1b0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1b4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1b8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1bc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1c0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1c4:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1c9:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1ce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1d2:	89 d8                	mov    eax,ebx
c000f1d4:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1d8:	80 cc 60             	or     ah,0x60
c000f1db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1df:	83 c4 0c             	add    esp,0xc
c000f1e2:	89 f8                	mov    eax,edi
c000f1e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1e8:	80 cc 60             	or     ah,0x60
c000f1eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1ef:	89 c7                	mov    edi,eax
c000f1f1:	55                   	push   ebp
c000f1f2:	e8 e9 fe ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c000f1f7:	83 c4 0c             	add    esp,0xc
c000f1fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f202:	55                   	push   ebp
c000f203:	e8 d8 fe ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c000f208:	83 c4 0c             	add    esp,0xc
c000f20b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f20f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f213:	55                   	push   ebp
c000f214:	e8 c7 fe ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c000f219:	83 c4 0c             	add    esp,0xc
c000f21c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f220:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f224:	53                   	push   ebx
c000f225:	51                   	push   ecx
c000f226:	55                   	push   ebp
c000f227:	e8 b4 fe ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c000f22c:	83 c4 0c             	add    esp,0xc
c000f22f:	57                   	push   edi
c000f230:	56                   	push   esi
c000f231:	55                   	push   ebp
c000f232:	e8 a9 fe ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c000f237:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f23a:	e8 e5 fe ff ff       	call   c000f124 <GDT::flush()>
c000f23f:	83 c4 4c             	add    esp,0x4c
c000f242:	5b                   	pop    ebx
c000f243:	5e                   	pop    esi
c000f244:	5f                   	pop    edi
c000f245:	5d                   	pop    ebp
c000f246:	c3                   	ret    

c000f247 <idleFunction(void*)>:
c000f247:	53                   	push   ebx
c000f248:	83 ec 08             	sub    esp,0x8
c000f24b:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000f250:	48                   	dec    eax
c000f251:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000f256:	75 01                	jne    c000f259 <idleFunction(void*)+0x12>
c000f258:	fb                   	sti    
c000f259:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000f25e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f264:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f26b:	74 3c                	je     c000f2a9 <idleFunction(void*)+0x62>
c000f26d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f274:	74 33                	je     c000f2a9 <idleFunction(void*)+0x62>
c000f276:	31 db                	xor    ebx,ebx
c000f278:	52                   	push   edx
c000f279:	52                   	push   edx
c000f27a:	68 e1 00 00 00       	push   0xe1
c000f27f:	50                   	push   eax
c000f280:	e8 d5 fb ff ff       	call   c000ee5a <Computer::rdmsr(unsigned int)>
c000f285:	53                   	push   ebx
c000f286:	83 e0 02             	and    eax,0x2
c000f289:	50                   	push   eax
c000f28a:	68 e1 00 00 00       	push   0xe1
c000f28f:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c000f295:	e8 ec fb ff ff       	call   c000ee86 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f29a:	83 c4 20             	add    esp,0x20
c000f29d:	e8 dd 0f ff ff       	call   c000027f <doTPAUSE>
c000f2a2:	e8 79 a0 01 00       	call   c0029320 <idleCommon()>
c000f2a7:	eb f4                	jmp    c000f29d <idleFunction(void*)+0x56>
c000f2a9:	fb                   	sti    
c000f2aa:	f4                   	hlt    
c000f2ab:	e8 70 a0 01 00       	call   c0029320 <idleCommon()>
c000f2b0:	eb f7                	jmp    c000f2a9 <idleFunction(void*)+0x62>

c000f2b2 <IDTEntry::IDTEntry(bool)>:
c000f2b2:	83 ec 04             	sub    esp,0x4
c000f2b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2b9:	88 04 24             	mov    BYTE PTR [esp],al
c000f2bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ca:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d5:	83 e2 f0             	and    edx,0xfffffff0
c000f2d8:	83 ca 0e             	or     edx,0xe
c000f2db:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2e2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2e5:	83 e2 ef             	and    edx,0xffffffef
c000f2e8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2eb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2ef:	74 04                	je     c000f2f5 <IDTEntry::IDTEntry(bool)+0x43>
c000f2f1:	b2 03                	mov    dl,0x3
c000f2f3:	eb 02                	jmp    c000f2f7 <IDTEntry::IDTEntry(bool)+0x45>
c000f2f5:	b2 00                	mov    dl,0x0
c000f2f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2fb:	83 e2 03             	and    edx,0x3
c000f2fe:	88 d1                	mov    cl,dl
c000f300:	c1 e1 05             	shl    ecx,0x5
c000f303:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f306:	83 e2 9f             	and    edx,0xffffff9f
c000f309:	09 ca                	or     edx,ecx
c000f30b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f30e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f312:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f315:	83 ca 80             	or     edx,0xffffff80
c000f318:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f31b:	90                   	nop
c000f31c:	83 c4 04             	add    esp,0x4
c000f31f:	c3                   	ret    

c000f320 <IDTEntry::setOffset(unsigned int)>:
c000f320:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f328:	66 89 02             	mov    WORD PTR [edx],ax
c000f32b:	c1 e8 10             	shr    eax,0x10
c000f32e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f332:	c3                   	ret    
c000f333:	90                   	nop

c000f334 <IDT::IDT()>:
c000f334:	90                   	nop
c000f335:	c3                   	ret    

c000f336 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f33a:	83 c0 30             	add    eax,0x30
c000f33d:	c3                   	ret    

c000f33e <IDT::addEntry(IDTEntry, int)>:
c000f33e:	53                   	push   ebx
c000f33f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f343:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f347:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f34b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f34f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f352:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f356:	5b                   	pop    ebx
c000f357:	c3                   	ret    

c000f358 <IDT::addEntry(int, void (*)(), bool)>:
c000f358:	53                   	push   ebx
c000f359:	83 ec 10             	sub    esp,0x10
c000f35c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f361:	50                   	push   eax
c000f362:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f366:	53                   	push   ebx
c000f367:	e8 46 ff ff ff       	call   c000f2b2 <IDTEntry::IDTEntry(bool)>
c000f36c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f370:	53                   	push   ebx
c000f371:	e8 aa ff ff ff       	call   c000f320 <IDTEntry::setOffset(unsigned int)>
c000f376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f37a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f37e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f382:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f386:	e8 b3 ff ff ff       	call   c000f33e <IDT::addEntry(IDTEntry, int)>
c000f38b:	83 c4 30             	add    esp,0x30
c000f38e:	5b                   	pop    ebx
c000f38f:	c3                   	ret    

c000f390 <IDT::flush()>:
c000f390:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f394:	66 c7 05 d8 f2 02 c0 ff 07 	mov    WORD PTR ds:0xc002f2d8,0x7ff
c000f39d:	a3 da f2 02 c0       	mov    ds:0xc002f2da,eax
c000f3a2:	0f 01 1d d8 f2 02 c0 	lidtd  ds:0xc002f2d8
c000f3a9:	c3                   	ret    

c000f3aa <IDT::setup()>:
c000f3aa:	57                   	push   edi
c000f3ab:	56                   	push   esi
c000f3ac:	53                   	push   ebx
c000f3ad:	83 ec 10             	sub    esp,0x10
c000f3b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3b4:	6a 00                	push   0x0
c000f3b6:	68 70 04 00 c0       	push   0xc0000470
c000f3bb:	6a 00                	push   0x0
c000f3bd:	53                   	push   ebx
c000f3be:	e8 95 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f3c3:	6a 00                	push   0x0
c000f3c5:	68 80 04 00 c0       	push   0xc0000480
c000f3ca:	6a 01                	push   0x1
c000f3cc:	53                   	push   ebx
c000f3cd:	e8 86 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f3d2:	83 c4 20             	add    esp,0x20
c000f3d5:	6a 00                	push   0x0
c000f3d7:	68 8a 04 00 c0       	push   0xc000048a
c000f3dc:	6a 02                	push   0x2
c000f3de:	53                   	push   ebx
c000f3df:	e8 74 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f3e4:	6a 00                	push   0x0
c000f3e6:	68 94 04 00 c0       	push   0xc0000494
c000f3eb:	6a 03                	push   0x3
c000f3ed:	53                   	push   ebx
c000f3ee:	e8 65 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f3f3:	83 c4 20             	add    esp,0x20
c000f3f6:	6a 00                	push   0x0
c000f3f8:	68 9e 04 00 c0       	push   0xc000049e
c000f3fd:	6a 04                	push   0x4
c000f3ff:	53                   	push   ebx
c000f400:	e8 53 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f405:	6a 00                	push   0x0
c000f407:	68 a8 04 00 c0       	push   0xc00004a8
c000f40c:	6a 05                	push   0x5
c000f40e:	53                   	push   ebx
c000f40f:	e8 44 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f414:	83 c4 20             	add    esp,0x20
c000f417:	6a 00                	push   0x0
c000f419:	68 b2 04 00 c0       	push   0xc00004b2
c000f41e:	6a 06                	push   0x6
c000f420:	53                   	push   ebx
c000f421:	e8 32 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f426:	6a 00                	push   0x0
c000f428:	68 bc 04 00 c0       	push   0xc00004bc
c000f42d:	6a 07                	push   0x7
c000f42f:	53                   	push   ebx
c000f430:	e8 23 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f435:	83 c4 20             	add    esp,0x20
c000f438:	6a 00                	push   0x0
c000f43a:	68 c6 04 00 c0       	push   0xc00004c6
c000f43f:	6a 08                	push   0x8
c000f441:	53                   	push   ebx
c000f442:	e8 11 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f447:	6a 00                	push   0x0
c000f449:	68 ce 04 00 c0       	push   0xc00004ce
c000f44e:	6a 09                	push   0x9
c000f450:	53                   	push   ebx
c000f451:	e8 02 ff ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f456:	83 c4 20             	add    esp,0x20
c000f459:	6a 00                	push   0x0
c000f45b:	68 d8 04 00 c0       	push   0xc00004d8
c000f460:	6a 0a                	push   0xa
c000f462:	53                   	push   ebx
c000f463:	e8 f0 fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f468:	6a 00                	push   0x0
c000f46a:	68 e0 04 00 c0       	push   0xc00004e0
c000f46f:	6a 0b                	push   0xb
c000f471:	53                   	push   ebx
c000f472:	e8 e1 fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f477:	83 c4 20             	add    esp,0x20
c000f47a:	6a 00                	push   0x0
c000f47c:	68 e8 04 00 c0       	push   0xc00004e8
c000f481:	6a 0c                	push   0xc
c000f483:	53                   	push   ebx
c000f484:	e8 cf fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f489:	6a 00                	push   0x0
c000f48b:	68 f0 04 00 c0       	push   0xc00004f0
c000f490:	6a 0d                	push   0xd
c000f492:	53                   	push   ebx
c000f493:	e8 c0 fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f498:	83 c4 20             	add    esp,0x20
c000f49b:	6a 00                	push   0x0
c000f49d:	68 f8 04 00 c0       	push   0xc00004f8
c000f4a2:	6a 0e                	push   0xe
c000f4a4:	53                   	push   ebx
c000f4a5:	e8 ae fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4aa:	6a 00                	push   0x0
c000f4ac:	68 00 05 00 c0       	push   0xc0000500
c000f4b1:	6a 0f                	push   0xf
c000f4b3:	53                   	push   ebx
c000f4b4:	e8 9f fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4b9:	83 c4 20             	add    esp,0x20
c000f4bc:	6a 00                	push   0x0
c000f4be:	68 0a 05 00 c0       	push   0xc000050a
c000f4c3:	6a 10                	push   0x10
c000f4c5:	53                   	push   ebx
c000f4c6:	e8 8d fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4cb:	6a 00                	push   0x0
c000f4cd:	68 14 05 00 c0       	push   0xc0000514
c000f4d2:	6a 11                	push   0x11
c000f4d4:	53                   	push   ebx
c000f4d5:	e8 7e fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4da:	83 c4 20             	add    esp,0x20
c000f4dd:	6a 00                	push   0x0
c000f4df:	68 1e 05 00 c0       	push   0xc000051e
c000f4e4:	6a 12                	push   0x12
c000f4e6:	53                   	push   ebx
c000f4e7:	e8 6c fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4ec:	6a 01                	push   0x1
c000f4ee:	68 b8 05 00 c0       	push   0xc00005b8
c000f4f3:	6a 60                	push   0x60
c000f4f5:	53                   	push   ebx
c000f4f6:	e8 5d fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f4fb:	83 c4 20             	add    esp,0x20
c000f4fe:	6a 00                	push   0x0
c000f500:	68 bf 05 00 c0       	push   0xc00005bf
c000f505:	6a 20                	push   0x20
c000f507:	53                   	push   ebx
c000f508:	e8 4b fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f50d:	6a 00                	push   0x0
c000f50f:	68 aa 05 00 c0       	push   0xc00005aa
c000f514:	6a 21                	push   0x21
c000f516:	53                   	push   ebx
c000f517:	e8 3c fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f51c:	83 c4 20             	add    esp,0x20
c000f51f:	6a 00                	push   0x0
c000f521:	68 b1 05 00 c0       	push   0xc00005b1
c000f526:	6a 22                	push   0x22
c000f528:	53                   	push   ebx
c000f529:	e8 2a fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f52e:	6a 00                	push   0x0
c000f530:	68 28 05 00 c0       	push   0xc0000528
c000f535:	6a 23                	push   0x23
c000f537:	53                   	push   ebx
c000f538:	e8 1b fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f53d:	83 c4 20             	add    esp,0x20
c000f540:	6a 00                	push   0x0
c000f542:	68 32 05 00 c0       	push   0xc0000532
c000f547:	6a 24                	push   0x24
c000f549:	53                   	push   ebx
c000f54a:	e8 09 fe ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f54f:	6a 00                	push   0x0
c000f551:	68 3c 05 00 c0       	push   0xc000053c
c000f556:	6a 25                	push   0x25
c000f558:	53                   	push   ebx
c000f559:	e8 fa fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f55e:	83 c4 20             	add    esp,0x20
c000f561:	6a 00                	push   0x0
c000f563:	68 46 05 00 c0       	push   0xc0000546
c000f568:	6a 26                	push   0x26
c000f56a:	53                   	push   ebx
c000f56b:	e8 e8 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f570:	6a 00                	push   0x0
c000f572:	68 50 05 00 c0       	push   0xc0000550
c000f577:	6a 27                	push   0x27
c000f579:	53                   	push   ebx
c000f57a:	e8 d9 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f57f:	83 c4 20             	add    esp,0x20
c000f582:	6a 00                	push   0x0
c000f584:	68 5a 05 00 c0       	push   0xc000055a
c000f589:	6a 28                	push   0x28
c000f58b:	53                   	push   ebx
c000f58c:	e8 c7 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f591:	6a 00                	push   0x0
c000f593:	68 64 05 00 c0       	push   0xc0000564
c000f598:	6a 29                	push   0x29
c000f59a:	53                   	push   ebx
c000f59b:	e8 b8 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5a0:	83 c4 20             	add    esp,0x20
c000f5a3:	6a 00                	push   0x0
c000f5a5:	68 6e 05 00 c0       	push   0xc000056e
c000f5aa:	6a 2a                	push   0x2a
c000f5ac:	53                   	push   ebx
c000f5ad:	e8 a6 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5b2:	6a 00                	push   0x0
c000f5b4:	68 78 05 00 c0       	push   0xc0000578
c000f5b9:	6a 2b                	push   0x2b
c000f5bb:	53                   	push   ebx
c000f5bc:	e8 97 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5c1:	83 c4 20             	add    esp,0x20
c000f5c4:	6a 00                	push   0x0
c000f5c6:	68 82 05 00 c0       	push   0xc0000582
c000f5cb:	6a 2c                	push   0x2c
c000f5cd:	53                   	push   ebx
c000f5ce:	e8 85 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5d3:	6a 00                	push   0x0
c000f5d5:	68 8c 05 00 c0       	push   0xc000058c
c000f5da:	6a 2d                	push   0x2d
c000f5dc:	53                   	push   ebx
c000f5dd:	e8 76 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5e2:	83 c4 20             	add    esp,0x20
c000f5e5:	6a 00                	push   0x0
c000f5e7:	68 96 05 00 c0       	push   0xc0000596
c000f5ec:	6a 2e                	push   0x2e
c000f5ee:	53                   	push   ebx
c000f5ef:	e8 64 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f5f4:	6a 00                	push   0x0
c000f5f6:	68 a0 05 00 c0       	push   0xc00005a0
c000f5fb:	6a 2f                	push   0x2f
c000f5fd:	53                   	push   ebx
c000f5fe:	e8 55 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f603:	83 c4 20             	add    esp,0x20
c000f606:	6a 00                	push   0x0
c000f608:	68 f6 05 00 c0       	push   0xc00005f6
c000f60d:	6a 30                	push   0x30
c000f60f:	53                   	push   ebx
c000f610:	e8 43 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f615:	6a 00                	push   0x0
c000f617:	68 00 06 00 c0       	push   0xc0000600
c000f61c:	6a 31                	push   0x31
c000f61e:	53                   	push   ebx
c000f61f:	e8 34 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f624:	83 c4 20             	add    esp,0x20
c000f627:	6a 00                	push   0x0
c000f629:	68 0a 06 00 c0       	push   0xc000060a
c000f62e:	6a 32                	push   0x32
c000f630:	53                   	push   ebx
c000f631:	e8 22 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f636:	6a 00                	push   0x0
c000f638:	68 14 06 00 c0       	push   0xc0000614
c000f63d:	6a 33                	push   0x33
c000f63f:	53                   	push   ebx
c000f640:	e8 13 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f645:	83 c4 20             	add    esp,0x20
c000f648:	6a 00                	push   0x0
c000f64a:	68 1e 06 00 c0       	push   0xc000061e
c000f64f:	6a 34                	push   0x34
c000f651:	53                   	push   ebx
c000f652:	e8 01 fd ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f657:	6a 00                	push   0x0
c000f659:	68 28 06 00 c0       	push   0xc0000628
c000f65e:	6a 35                	push   0x35
c000f660:	53                   	push   ebx
c000f661:	e8 f2 fc ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f666:	83 c4 20             	add    esp,0x20
c000f669:	6a 00                	push   0x0
c000f66b:	68 32 06 00 c0       	push   0xc0000632
c000f670:	6a 36                	push   0x36
c000f672:	53                   	push   ebx
c000f673:	e8 e0 fc ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f678:	6a 00                	push   0x0
c000f67a:	68 3c 06 00 c0       	push   0xc000063c
c000f67f:	6a 37                	push   0x37
c000f681:	53                   	push   ebx
c000f682:	e8 d1 fc ff ff       	call   c000f358 <IDT::addEntry(int, void (*)(), bool)>
c000f687:	83 c4 1c             	add    esp,0x1c
c000f68a:	6a 03                	push   0x3
c000f68c:	6a 02                	push   0x2
c000f68e:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f694:	e8 f9 2c 00 00       	call   c0012392 <VAS::allocatePages(int, int)>
c000f699:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f6a0:	89 c6                	mov    esi,eax
c000f6a2:	e8 0d 02 00 00       	call   c000f8b4 <malloc>
c000f6a7:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6ad:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6b0:	89 c7                	mov    edi,eax
c000f6b2:	e8 d3 1c 00 00       	call   c001138a <TSS::TSS()>
c000f6b7:	83 c4 0c             	add    esp,0xc
c000f6ba:	68 c6 04 00 c0       	push   0xc00004c6
c000f6bf:	56                   	push   esi
c000f6c0:	57                   	push   edi
c000f6c1:	e8 04 1d 00 00       	call   c00113ca <TSS::setup(unsigned long, unsigned long)>
c000f6c6:	89 c6                	mov    esi,eax
c000f6c8:	58                   	pop    eax
c000f6c9:	5a                   	pop    edx
c000f6ca:	6a 00                	push   0x0
c000f6cc:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6d0:	50                   	push   eax
c000f6d1:	e8 dc fb ff ff       	call   c000f2b2 <IDTEntry::IDTEntry(bool)>
c000f6d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6da:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6df:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6e6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6f0:	80 ce 05             	or     dh,0x5
c000f6f3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6f6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6fe:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f701:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f704:	e8 87 fc ff ff       	call   c000f390 <IDT::flush()>
c000f709:	83 c4 20             	add    esp,0x20
c000f70c:	5b                   	pop    ebx
c000f70d:	5e                   	pop    esi
c000f70e:	5f                   	pop    edi
c000f70f:	c3                   	ret    

c000f710 <sbrk>:
c000f710:	55                   	push   ebp
c000f711:	57                   	push   edi
c000f712:	56                   	push   esi
c000f713:	53                   	push   ebx
c000f714:	83 ec 1c             	sub    esp,0x1c
c000f717:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f71b:	85 c0                	test   eax,eax
c000f71d:	74 3e                	je     c000f75d <sbrk+0x4d>
c000f71f:	78 43                	js     c000f764 <sbrk+0x54>
c000f721:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c000f727:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f72d:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f733:	83 e2 01             	and    edx,0x1
c000f736:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f73a:	8b 0d ec e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1ec
c000f740:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f744:	05 ff 0f 00 00       	add    eax,0xfff
c000f749:	89 c2                	mov    edx,eax
c000f74b:	78 2f                	js     c000f77c <sbrk+0x6c>
c000f74d:	c1 fa 0c             	sar    edx,0xc
c000f750:	89 d7                	mov    edi,edx
c000f752:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f756:	be 00 00 00 00       	mov    esi,0x0
c000f75b:	eb 36                	jmp    c000f793 <sbrk+0x83>
c000f75d:	a1 ec e1 02 c0       	mov    eax,ds:0xc002e1ec
c000f762:	eb 73                	jmp    c000f7d7 <sbrk+0xc7>
c000f764:	83 ec 08             	sub    esp,0x8
c000f767:	50                   	push   eax
c000f768:	68 48 af 02 c0       	push   0xc002af48
c000f76d:	e8 ed 36 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000f772:	83 c4 10             	add    esp,0x10
c000f775:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f77a:	eb 5b                	jmp    c000f7d7 <sbrk+0xc7>
c000f77c:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f782:	eb c9                	jmp    c000f74d <sbrk+0x3d>
c000f784:	81 05 ec e1 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002e1ec,0x1000
c000f78e:	46                   	inc    esi
c000f78f:	39 f7                	cmp    edi,esi
c000f791:	74 33                	je     c000f7c6 <sbrk+0xb6>
c000f793:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c000f799:	8b 2d ec e1 02 c0    	mov    ebp,DWORD PTR ds:0xc002e1ec
c000f79f:	e8 7c 07 00 00       	call   c000ff20 <Phys::allocatePage()>
c000f7a4:	68 01 0c 00 00       	push   0xc01
c000f7a9:	55                   	push   ebp
c000f7aa:	50                   	push   eax
c000f7ab:	53                   	push   ebx
c000f7ac:	e8 df 2a 00 00       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7b1:	83 c4 10             	add    esp,0x10
c000f7b4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7b9:	74 c9                	je     c000f784 <sbrk+0x74>
c000f7bb:	8b 1d ec e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e1ec
c000f7c1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7c4:	eb be                	jmp    c000f784 <sbrk+0x74>
c000f7c6:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7cb:	75 12                	jne    c000f7df <sbrk+0xcf>
c000f7cd:	0f 20 d8             	mov    eax,cr3
c000f7d0:	0f 22 d8             	mov    cr3,eax
c000f7d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7d7:	83 c4 1c             	add    esp,0x1c
c000f7da:	5b                   	pop    ebx
c000f7db:	5e                   	pop    esi
c000f7dc:	5f                   	pop    edi
c000f7dd:	5d                   	pop    ebp
c000f7de:	c3                   	ret    
c000f7df:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7e3:	89 cb                	mov    ebx,ecx
c000f7e5:	c1 eb 0a             	shr    ebx,0xa
c000f7e8:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7ee:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7f8:	c1 e0 0c             	shl    eax,0xc
c000f7fb:	01 c8                	add    eax,ecx
c000f7fd:	c1 e8 0a             	shr    eax,0xa
c000f800:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f805:	2d 00 00 40 00       	sub    eax,0x400000
c000f80a:	39 c3                	cmp    ebx,eax
c000f80c:	77 c5                	ja     c000f7d3 <sbrk+0xc3>
c000f80e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f811:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f817:	39 d8                	cmp    eax,ebx
c000f819:	73 f3                	jae    c000f80e <sbrk+0xfe>
c000f81b:	eb b6                	jmp    c000f7d3 <sbrk+0xc3>

c000f81d <mmap>:
c000f81d:	83 ec 18             	sub    esp,0x18
c000f820:	68 78 af 02 c0       	push   0xc002af78
c000f825:	e8 cf b0 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000f82a:	b8 00 00 00 00       	mov    eax,0x0
c000f82f:	83 c4 1c             	add    esp,0x1c
c000f832:	c3                   	ret    

c000f833 <munmap>:
c000f833:	83 ec 18             	sub    esp,0x18
c000f836:	68 7d af 02 c0       	push   0xc002af7d
c000f83b:	e8 b9 b0 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000f840:	b8 00 00 00 00       	mov    eax,0x0
c000f845:	83 c4 1c             	add    esp,0x1c
c000f848:	c3                   	ret    

c000f849 <liballoc_lock()>:
c000f849:	fa                   	cli    
c000f84a:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c000f850:	b8 00 00 00 00       	mov    eax,0x0
c000f855:	c3                   	ret    

c000f856 <liballoc_unlock()>:
c000f856:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c000f85b:	48                   	dec    eax
c000f85c:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c000f861:	75 01                	jne    c000f864 <liballoc_unlock()+0xe>
c000f863:	fb                   	sti    
c000f864:	b8 00 00 00 00       	mov    eax,0x0
c000f869:	c3                   	ret    

c000f86a <liballoc_alloc(int)>:
c000f86a:	83 ec 10             	sub    esp,0x10
c000f86d:	68 01 08 00 00       	push   0x801
c000f872:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f876:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f87c:	e8 11 2b 00 00       	call   c0012392 <VAS::allocatePages(int, int)>
c000f881:	83 c4 1c             	add    esp,0x1c
c000f884:	c3                   	ret    

c000f885 <liballoc_free(void*, int)>:
c000f885:	83 ec 14             	sub    esp,0x14
c000f888:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f88c:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c000f892:	e8 a5 27 00 00       	call   c001203c <VAS::freeAllocatedPages(unsigned long)>
c000f897:	b8 00 00 00 00       	mov    eax,0x0
c000f89c:	83 c4 1c             	add    esp,0x1c
c000f89f:	c3                   	ret    

c000f8a0 <realloc>:
c000f8a0:	83 ec 14             	sub    esp,0x14
c000f8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8ab:	e8 a4 1d ff ff       	call   c0001654 <dlrealloc>
c000f8b0:	83 c4 1c             	add    esp,0x1c
c000f8b3:	c3                   	ret    

c000f8b4 <malloc>:
c000f8b4:	83 ec 18             	sub    esp,0x18
c000f8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bb:	e8 57 18 ff ff       	call   c0001117 <dlmalloc>
c000f8c0:	83 c4 1c             	add    esp,0x1c
c000f8c3:	c3                   	ret    

c000f8c4 <free>:
c000f8c4:	83 ec 18             	sub    esp,0x18
c000f8c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cb:	e8 ec 14 ff ff       	call   c0000dbc <dlfree>
c000f8d0:	83 c4 1c             	add    esp,0x1c
c000f8d3:	c3                   	ret    

c000f8d4 <rfree>:
c000f8d4:	83 ec 18             	sub    esp,0x18
c000f8d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8db:	e8 dc 14 ff ff       	call   c0000dbc <dlfree>
c000f8e0:	83 c4 1c             	add    esp,0x1c
c000f8e3:	c3                   	ret    

c000f8e4 <calloc>:
c000f8e4:	56                   	push   esi
c000f8e5:	53                   	push   ebx
c000f8e6:	83 ec 10             	sub    esp,0x10
c000f8e9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8ed:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8f2:	53                   	push   ebx
c000f8f3:	e8 bc ff ff ff       	call   c000f8b4 <malloc>
c000f8f8:	89 c6                	mov    esi,eax
c000f8fa:	83 c4 0c             	add    esp,0xc
c000f8fd:	53                   	push   ebx
c000f8fe:	6a 00                	push   0x0
c000f900:	50                   	push   eax
c000f901:	e8 72 0e ff ff       	call   c0000778 <memset>
c000f906:	89 f0                	mov    eax,esi
c000f908:	83 c4 14             	add    esp,0x14
c000f90b:	5b                   	pop    ebx
c000f90c:	5e                   	pop    esi
c000f90d:	c3                   	ret    

c000f90e <hwTextMode_loadInData(VgaText*)>:
c000f90e:	55                   	push   ebp
c000f90f:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c000f914:	57                   	push   edi
c000f915:	56                   	push   esi
c000f916:	53                   	push   ebx
c000f917:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f91b:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f91e:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f921:	85 d2                	test   edx,edx
c000f923:	7e 29                	jle    c000f94e <hwTextMode_loadInData(VgaText*)+0x40>
c000f925:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f92b:	31 f6                	xor    esi,esi
c000f92d:	29 cd                	sub    ebp,ecx
c000f92f:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f932:	31 c0                	xor    eax,eax
c000f934:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f938:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f93c:	40                   	inc    eax
c000f93d:	83 f8 50             	cmp    eax,0x50
c000f940:	75 f2                	jne    c000f934 <hwTextMode_loadInData(VgaText*)+0x26>
c000f942:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f948:	46                   	inc    esi
c000f949:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f94c:	7f e1                	jg     c000f92f <hwTextMode_loadInData(VgaText*)+0x21>
c000f94e:	5b                   	pop    ebx
c000f94f:	5e                   	pop    esi
c000f950:	5f                   	pop    edi
c000f951:	5d                   	pop    ebp
c000f952:	c3                   	ret    

c000f953 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f953:	55                   	push   ebp
c000f954:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000f95b:	57                   	push   edi
c000f95c:	56                   	push   esi
c000f95d:	53                   	push   ebx
c000f95e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f962:	75 44                	jne    c000f9a8 <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f964:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f967:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f96a:	8b 15 00 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e200
c000f970:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f974:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f97a:	eb 08                	jmp    c000f984 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f97c:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f97f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f982:	89 da                	mov    edx,ebx
c000f984:	83 e5 0f             	and    ebp,0xf
c000f987:	c1 e0 04             	shl    eax,0x4
c000f98a:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f98d:	0f b6 c0             	movzx  eax,al
c000f990:	41                   	inc    ecx
c000f991:	09 e8                	or     eax,ebp
c000f993:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f997:	c1 e0 08             	shl    eax,0x8
c000f99a:	09 e8                	or     eax,ebp
c000f99c:	39 fb                	cmp    ebx,edi
c000f99e:	66 89 02             	mov    WORD PTR [edx],ax
c000f9a1:	75 d9                	jne    c000f97c <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f9a3:	5b                   	pop    ebx
c000f9a4:	5e                   	pop    esi
c000f9a5:	5f                   	pop    edi
c000f9a6:	5d                   	pop    ebp
c000f9a7:	c3                   	ret    
c000f9a8:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9af:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9b6:	31 c0                	xor    eax,eax
c000f9b8:	bd 02 00 00 00       	mov    ebp,0x2
c000f9bd:	eb ab                	jmp    c000f96a <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9bf <hwTextMode_showCursor(VgaText*, bool)>:
c000f9bf:	56                   	push   esi
c000f9c0:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000f9c7:	53                   	push   ebx
c000f9c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9cc:	75 36                	jne    c000fa04 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9ce:	84 c0                	test   al,al
c000f9d0:	74 35                	je     c000fa07 <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9d2:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9d7:	b0 0a                	mov    al,0xa
c000f9d9:	89 da                	mov    edx,ebx
c000f9db:	ee                   	out    dx,al
c000f9dc:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9e1:	89 ca                	mov    edx,ecx
c000f9e3:	ec                   	in     al,dx
c000f9e4:	b2 0f                	mov    dl,0xf
c000f9e6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9ea:	83 e0 c0             	and    eax,0xffffffc0
c000f9ed:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9f0:	09 d0                	or     eax,edx
c000f9f2:	89 ca                	mov    edx,ecx
c000f9f4:	ee                   	out    dx,al
c000f9f5:	b0 0b                	mov    al,0xb
c000f9f7:	89 da                	mov    edx,ebx
c000f9f9:	ee                   	out    dx,al
c000f9fa:	89 ca                	mov    edx,ecx
c000f9fc:	ec                   	in     al,dx
c000f9fd:	83 e0 e0             	and    eax,0xffffffe0
c000fa00:	83 c8 0f             	or     eax,0xf
c000fa03:	ee                   	out    dx,al
c000fa04:	5b                   	pop    ebx
c000fa05:	5e                   	pop    esi
c000fa06:	c3                   	ret    
c000fa07:	b0 0a                	mov    al,0xa
c000fa09:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa0e:	ee                   	out    dx,al
c000fa0f:	b0 20                	mov    al,0x20
c000fa11:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa16:	ee                   	out    dx,al
c000fa17:	5b                   	pop    ebx
c000fa18:	5e                   	pop    esi
c000fa19:	c3                   	ret    

c000fa1a <hwTextMode_update(VgaText*)>:
c000fa1a:	c3                   	ret    

c000fa1b <hwTextMode_updateCursor(VgaText*)>:
c000fa1b:	56                   	push   esi
c000fa1c:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fa23:	53                   	push   ebx
c000fa24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa28:	75 36                	jne    c000fa60 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa2a:	be d4 03 00 00       	mov    esi,0x3d4
c000fa2f:	b9 19 00 00 00       	mov    ecx,0x19
c000fa34:	89 f2                	mov    edx,esi
c000fa36:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa39:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa3c:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa3f:	c1 e1 04             	shl    ecx,0x4
c000fa42:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa45:	b0 0f                	mov    al,0xf
c000fa47:	ee                   	out    dx,al
c000fa48:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa4d:	88 c8                	mov    al,cl
c000fa4f:	89 da                	mov    edx,ebx
c000fa51:	ee                   	out    dx,al
c000fa52:	b0 0e                	mov    al,0xe
c000fa54:	89 f2                	mov    edx,esi
c000fa56:	ee                   	out    dx,al
c000fa57:	89 c8                	mov    eax,ecx
c000fa59:	89 da                	mov    edx,ebx
c000fa5b:	66 c1 e8 08          	shr    ax,0x8
c000fa5f:	ee                   	out    dx,al
c000fa60:	5b                   	pop    ebx
c000fa61:	5e                   	pop    esi
c000fa62:	c3                   	ret    

c000fa63 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa67:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fa6e:	75 38                	jne    c000faa8 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa70:	ba da 03 00 00       	mov    edx,0x3da
c000fa75:	84 c0                	test   al,al
c000fa77:	75 18                	jne    c000fa91 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa79:	ec                   	in     al,dx
c000fa7a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa7f:	b0 30                	mov    al,0x30
c000fa81:	89 ca                	mov    edx,ecx
c000fa83:	ee                   	out    dx,al
c000fa84:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa89:	ec                   	in     al,dx
c000fa8a:	83 c8 08             	or     eax,0x8
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	c3                   	ret    
c000fa91:	ec                   	in     al,dx
c000fa92:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa97:	b0 30                	mov    al,0x30
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	ba c1 03 00 00       	mov    edx,0x3c1
c000faa1:	ec                   	in     al,dx
c000faa2:	83 e0 f7             	and    eax,0xfffffff7
c000faa5:	89 ca                	mov    edx,ecx
c000faa7:	ee                   	out    dx,al
c000faa8:	c3                   	ret    

c000faa9 <hwTextMode_scrollScreen(VgaText*)>:
c000faa9:	55                   	push   ebp
c000faaa:	57                   	push   edi
c000faab:	56                   	push   esi
c000faac:	53                   	push   ebx
c000faad:	83 ec 1c             	sub    esp,0x1c
c000fab0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fab4:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fabb:	74 0e                	je     c000facb <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fabd:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fac4:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000facb:	a1 00 e2 02 c0       	mov    eax,ds:0xc002e200
c000fad0:	bd 02 00 00 00       	mov    ebp,0x2
c000fad5:	05 a0 00 00 00       	add    eax,0xa0
c000fada:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fade:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fae2:	31 c0                	xor    eax,eax
c000fae4:	eb 0b                	jmp    c000faf1 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fae6:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faec:	74 51                	je     c000fb3f <hwTextMode_scrollScreen(VgaText*)+0x96>
c000faee:	43                   	inc    ebx
c000faef:	89 f0                	mov    eax,esi
c000faf1:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faf7:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fafd:	88 13                	mov    BYTE PTR [ebx],dl
c000faff:	8d 70 01             	lea    esi,[eax+0x1]
c000fb02:	83 fd 18             	cmp    ebp,0x18
c000fb05:	75 df                	jne    c000fae6 <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fb07:	a8 01                	test   al,0x1
c000fb09:	75 13                	jne    c000fb1e <hwTextMode_scrollScreen(VgaText*)+0x75>
c000fb0b:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb0e:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb14:	75 d8                	jne    c000faee <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb16:	83 c4 1c             	add    esp,0x1c
c000fb19:	5b                   	pop    ebx
c000fb1a:	5e                   	pop    esi
c000fb1b:	5f                   	pop    edi
c000fb1c:	5d                   	pop    ebp
c000fb1d:	c3                   	ret    
c000fb1e:	83 ec 08             	sub    esp,0x8
c000fb21:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb25:	50                   	push   eax
c000fb26:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb2a:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb2e:	50                   	push   eax
c000fb2f:	e8 0c 0c 00 00       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb34:	83 c4 10             	add    esp,0x10
c000fb37:	88 07                	mov    BYTE PTR [edi],al
c000fb39:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb3d:	eb cf                	jmp    c000fb0e <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb3f:	45                   	inc    ebp
c000fb40:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb48:	eb 94                	jmp    c000fade <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb4a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb4a:	57                   	push   edi
c000fb4b:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fb52:	56                   	push   esi
c000fb53:	53                   	push   ebx
c000fb54:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb58:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb5c:	75 62                	jne    c000fbc0 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb5e:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb63:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb68:	83 ec 08             	sub    esp,0x8
c000fb6b:	52                   	push   edx
c000fb6c:	50                   	push   eax
c000fb6d:	e8 ce 0b 00 00       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb72:	5a                   	pop    edx
c000fb73:	0f b6 c0             	movzx  eax,al
c000fb76:	59                   	pop    ecx
c000fb77:	50                   	push   eax
c000fb78:	0f be c3             	movsx  eax,bl
c000fb7b:	50                   	push   eax
c000fb7c:	e8 65 0c 00 00       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	8b 35 00 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e200
c000fb8a:	80 3d 60 f3 02 c0 00 	cmp    BYTE PTR ds:0xc002f360,0x0
c000fb91:	74 07                	je     c000fb9a <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb93:	66 0f be c3          	movsx  ax,bl
c000fb97:	80 cc 02             	or     ah,0x2
c000fb9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb9e:	ba 19 00 00 00       	mov    edx,0x19
c000fba3:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fba6:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fba9:	8d 14 92             	lea    edx,[edx+edx*4]
c000fbac:	c1 e1 04             	shl    ecx,0x4
c000fbaf:	c1 e2 04             	shl    edx,0x4
c000fbb2:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbb6:	01 ca                	add    edx,ecx
c000fbb8:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbbc:	5b                   	pop    ebx
c000fbbd:	5e                   	pop    esi
c000fbbe:	5f                   	pop    edi
c000fbbf:	c3                   	ret    
c000fbc0:	b8 02 00 00 00       	mov    eax,0x2
c000fbc5:	31 d2                	xor    edx,edx
c000fbc7:	eb 9f                	jmp    c000fb68 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbc9 <setupTextMode()>:
c000fbc9:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbce:	83 e0 30             	and    eax,0x30
c000fbd1:	66 83 f8 30          	cmp    ax,0x30
c000fbd5:	75 11                	jne    c000fbe8 <setupTextMode()+0x1f>
c000fbd7:	81 2d 00 e2 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002e200,0x8000
c000fbe1:	c6 05 60 f3 02 c0 01 	mov    BYTE PTR ds:0xc002f360,0x1
c000fbe8:	c7 05 98 f3 02 c0 63 fa 00 c0 	mov    DWORD PTR ds:0xc002f398,0xc000fa63
c000fbf2:	c7 05 84 f3 02 c0 0e f9 00 c0 	mov    DWORD PTR ds:0xc002f384,0xc000f90e
c000fbfc:	c7 05 80 f3 02 c0 53 f9 00 c0 	mov    DWORD PTR ds:0xc002f380,0xc000f953
c000fc06:	c7 05 8c f3 02 c0 a9 fa 00 c0 	mov    DWORD PTR ds:0xc002f38c,0xc000faa9
c000fc10:	c7 05 94 f3 02 c0 bf f9 00 c0 	mov    DWORD PTR ds:0xc002f394,0xc000f9bf
c000fc1a:	c7 05 88 f3 02 c0 1a fa 00 c0 	mov    DWORD PTR ds:0xc002f388,0xc000fa1a
c000fc24:	c7 05 90 f3 02 c0 1b fa 00 c0 	mov    DWORD PTR ds:0xc002f390,0xc000fa1b
c000fc2e:	c7 05 9c f3 02 c0 4a fb 00 c0 	mov    DWORD PTR ds:0xc002f39c,0xc000fb4a
c000fc38:	c3                   	ret    

c000fc39 <kernel_main>:
c000fc39:	57                   	push   edi
c000fc3a:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc3f:	56                   	push   esi
c000fc40:	89 fa                	mov    edx,edi
c000fc42:	53                   	push   ebx
c000fc43:	31 f6                	xor    esi,esi
c000fc45:	83 ec 2c             	sub    esp,0x2c
c000fc48:	89 f0                	mov    eax,esi
c000fc4a:	ee                   	out    dx,al
c000fc4b:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc50:	b0 80                	mov    al,0x80
c000fc52:	89 da                	mov    edx,ebx
c000fc54:	ee                   	out    dx,al
c000fc55:	b1 03                	mov    cl,0x3
c000fc57:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc5c:	88 c8                	mov    al,cl
c000fc5e:	ee                   	out    dx,al
c000fc5f:	89 f0                	mov    eax,esi
c000fc61:	89 fa                	mov    edx,edi
c000fc63:	ee                   	out    dx,al
c000fc64:	88 c8                	mov    al,cl
c000fc66:	89 da                	mov    edx,ebx
c000fc68:	ee                   	out    dx,al
c000fc69:	b0 c7                	mov    al,0xc7
c000fc6b:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc70:	ee                   	out    dx,al
c000fc71:	b0 0b                	mov    al,0xb
c000fc73:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc78:	ee                   	out    dx,al
c000fc79:	68 84 af 02 c0       	push   0xc002af84
c000fc7e:	e8 dc 31 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000fc83:	e8 4a 09 00 00       	call   c00105d2 <installVgaTextImplementation()>
c000fc88:	e8 3c ff ff ff       	call   c000fbc9 <setupTextMode()>
c000fc8d:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc92:	05 ff 0f 00 00       	add    eax,0xfff
c000fc97:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc9f:	e8 f5 03 00 00       	call   c0010099 <Phys::physicalMemorySetup(unsigned int)>
c000fca4:	e8 6f 1f 00 00       	call   c0011c18 <Virt::virtualMemorySetup()>
c000fca9:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcb8:	75 0e                	jne    c000fcc8 <kernel_main+0x8f>
c000fcba:	89 d8                	mov    eax,ebx
c000fcbc:	25 48 03 00 00       	and    eax,0x348
c000fcc1:	3d 00 03 00 00       	cmp    eax,0x300
c000fcc6:	74 10                	je     c000fcd8 <kernel_main+0x9f>
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	68 15 c9 02 c0       	push   0xc002c915
c000fcd0:	e8 24 ac 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000fcd5:	83 c4 10             	add    esp,0x10
c000fcd8:	83 ec 0c             	sub    esp,0xc
c000fcdb:	89 1d e0 f2 02 c0    	mov    DWORD PTR ds:0xc002f2e0,ebx
c000fce1:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fce5:	53                   	push   ebx
c000fce6:	e8 79 21 00 00       	call   c0011e64 <VAS::VAS()>
c000fceb:	89 1d 50 f4 02 c0    	mov    DWORD PTR ds:0xc002f450,ebx
c000fcf1:	e8 2a 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcf6:	c7 04 24 9b af 02 c0 	mov    DWORD PTR [esp],0xc002af9b
c000fcfd:	e8 5d 31 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000fd02:	e8 90 1f 00 00       	call   c0011c97 <Virt::swappingSetup()>
c000fd07:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd0e:	e8 a1 fb ff ff       	call   c000f8b4 <malloc>
c000fd13:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd16:	89 c6                	mov    esi,eax
c000fd18:	e8 8f ea ff ff       	call   c000e7ac <Computer::Computer()>
c000fd1d:	58                   	pop    eax
c000fd1e:	89 35 c8 f2 02 c0    	mov    DWORD PTR ds:0xc002f2c8,esi
c000fd24:	5a                   	pop    edx
c000fd25:	56                   	push   esi
c000fd26:	68 b8 af 02 c0       	push   0xc002afb8
c000fd2b:	e8 2f 31 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000fd30:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c000fd35:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd37:	6a 00                	push   0x0
c000fd39:	6a 00                	push   0x0
c000fd3b:	6a 00                	push   0x0
c000fd3d:	50                   	push   eax
c000fd3e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd41:	83 c4 14             	add    esp,0x14
c000fd44:	53                   	push   ebx
c000fd45:	e8 ca 23 00 00       	call   c0012114 <VAS::~VAS()>
c000fd4a:	c7 04 24 cb af 02 c0 	mov    DWORD PTR [esp],0xc002afcb
c000fd51:	e8 a3 ab 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000fd56:	83 c4 30             	add    esp,0x30
c000fd59:	5b                   	pop    ebx
c000fd5a:	5e                   	pop    esi
c000fd5b:	5f                   	pop    edi
c000fd5c:	c3                   	ret    

c000fd5d <Phys::allocateDMA(unsigned long)>:
c000fd5d:	55                   	push   ebp
c000fd5e:	31 d2                	xor    edx,edx
c000fd60:	57                   	push   edi
c000fd61:	31 ed                	xor    ebp,ebp
c000fd63:	56                   	push   esi
c000fd64:	31 c9                	xor    ecx,ecx
c000fd66:	53                   	push   ebx
c000fd67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd6b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd71:	31 c0                	xor    eax,eax
c000fd73:	c1 ee 0c             	shr    esi,0xc
c000fd76:	eb 17                	jmp    c000fd8f <Phys::allocateDMA(unsigned long)+0x32>
c000fd78:	85 c9                	test   ecx,ecx
c000fd7a:	75 04                	jne    c000fd80 <Phys::allocateDMA(unsigned long)+0x23>
c000fd7c:	89 d5                	mov    ebp,edx
c000fd7e:	89 d0                	mov    eax,edx
c000fd80:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd83:	39 de                	cmp    esi,ebx
c000fd85:	74 20                	je     c000fda7 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd87:	42                   	inc    edx
c000fd88:	89 d9                	mov    ecx,ebx
c000fd8a:	83 fa 2f             	cmp    edx,0x2f
c000fd8d:	7f 11                	jg     c000fda0 <Phys::allocateDMA(unsigned long)+0x43>
c000fd8f:	80 ba 20 f3 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd0ce0],0x0
c000fd96:	74 e0                	je     c000fd78 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd98:	31 c9                	xor    ecx,ecx
c000fd9a:	42                   	inc    edx
c000fd9b:	83 fa 2f             	cmp    edx,0x2f
c000fd9e:	7e ef                	jle    c000fd8f <Phys::allocateDMA(unsigned long)+0x32>
c000fda0:	5b                   	pop    ebx
c000fda1:	31 c0                	xor    eax,eax
c000fda3:	5e                   	pop    esi
c000fda4:	5f                   	pop    edi
c000fda5:	5d                   	pop    ebp
c000fda6:	c3                   	ret    
c000fda7:	8d 14 30             	lea    edx,[eax+esi*1]
c000fdaa:	89 d7                	mov    edi,edx
c000fdac:	4f                   	dec    edi
c000fdad:	79 03                	jns    c000fdb2 <Phys::allocateDMA(unsigned long)+0x55>
c000fdaf:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fdb2:	c1 ff 04             	sar    edi,0x4
c000fdb5:	89 c2                	mov    edx,eax
c000fdb7:	c1 fa 04             	sar    edx,0x4
c000fdba:	39 fa                	cmp    edx,edi
c000fdbc:	75 2f                	jne    c000fded <Phys::allocateDMA(unsigned long)+0x90>
c000fdbe:	85 db                	test   ebx,ebx
c000fdc0:	74 1a                	je     c000fddc <Phys::allocateDMA(unsigned long)+0x7f>
c000fdc2:	be 20 f3 02 c0       	mov    esi,0xc002f320
c000fdc7:	8d 90 20 f3 02 c0    	lea    edx,[eax-0x3ffd0ce0]
c000fdcd:	f7 d6                	not    esi
c000fdcf:	29 c6                	sub    esi,eax
c000fdd1:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdd4:	42                   	inc    edx
c000fdd5:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdd8:	39 d9                	cmp    ecx,ebx
c000fdda:	7f f5                	jg     c000fdd1 <Phys::allocateDMA(unsigned long)+0x74>
c000fddc:	85 ff                	test   edi,edi
c000fdde:	74 13                	je     c000fdf3 <Phys::allocateDMA(unsigned long)+0x96>
c000fde0:	5b                   	pop    ebx
c000fde1:	05 50 20 0c 00       	add    eax,0xc2050
c000fde6:	5e                   	pop    esi
c000fde7:	c1 e0 0c             	shl    eax,0xc
c000fdea:	5f                   	pop    edi
c000fdeb:	5d                   	pop    ebp
c000fdec:	c3                   	ret    
c000fded:	89 ea                	mov    edx,ebp
c000fdef:	31 c9                	xor    ecx,ecx
c000fdf1:	eb a7                	jmp    c000fd9a <Phys::allocateDMA(unsigned long)+0x3d>
c000fdf3:	5b                   	pop    ebx
c000fdf4:	c1 e0 0c             	shl    eax,0xc
c000fdf7:	5e                   	pop    esi
c000fdf8:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdfd:	5f                   	pop    edi
c000fdfe:	5d                   	pop    ebp
c000fdff:	c3                   	ret    

c000fe00 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fe00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe04:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fe08:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe0e:	c1 e9 0c             	shr    ecx,0xc
c000fe11:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe16:	76 25                	jbe    c000fe3d <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe18:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe1d:	c1 e8 0c             	shr    eax,0xc
c000fe20:	8d 50 10             	lea    edx,[eax+0x10]
c000fe23:	85 c9                	test   ecx,ecx
c000fe25:	74 15                	je     c000fe3c <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe27:	8d 82 20 f3 02 c0    	lea    eax,[edx-0x3ffd0ce0]
c000fe2d:	8d 94 11 20 f3 02 c0 	lea    edx,[ecx+edx*1-0x3ffd0ce0]
c000fe34:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe37:	40                   	inc    eax
c000fe38:	39 d0                	cmp    eax,edx
c000fe3a:	75 f8                	jne    c000fe34 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe3c:	c3                   	ret    
c000fe3d:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe43:	c1 ea 0c             	shr    edx,0xc
c000fe46:	eb db                	jmp    c000fe23 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe48 <Phys::setPageState(unsigned long, bool)>:
c000fe48:	56                   	push   esi
c000fe49:	ba 01 00 00 00       	mov    edx,0x1
c000fe4e:	53                   	push   ebx
c000fe4f:	8b 35 f0 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e1f0
c000fe55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe59:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe5d:	89 c8                	mov    eax,ecx
c000fe5f:	83 e1 07             	and    ecx,0x7
c000fe62:	c1 e8 03             	shr    eax,0x3
c000fe65:	d3 e3                	shl    ebx,cl
c000fe67:	01 c6                	add    esi,eax
c000fe69:	d3 e2                	shl    edx,cl
c000fe6b:	f7 d2                	not    edx
c000fe6d:	20 16                	and    BYTE PTR [esi],dl
c000fe6f:	03 05 f0 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e1f0
c000fe75:	08 18                	or     BYTE PTR [eax],bl
c000fe77:	5b                   	pop    ebx
c000fe78:	5e                   	pop    esi
c000fe79:	c3                   	ret    

c000fe7a <Phys::getPageState(unsigned long)>:
c000fe7a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe7e:	8b 15 f0 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e1f0
c000fe84:	89 c8                	mov    eax,ecx
c000fe86:	83 e1 07             	and    ecx,0x7
c000fe89:	c1 e8 03             	shr    eax,0x3
c000fe8c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe90:	d3 f8                	sar    eax,cl
c000fe92:	83 e0 01             	and    eax,0x1
c000fe95:	c3                   	ret    

c000fe96 <Phys::freePage(unsigned long)>:
c000fe96:	53                   	push   ebx
c000fe97:	83 ec 08             	sub    esp,0x8
c000fe9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe9e:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fea4:	76 57                	jbe    c000fefd <Phys::freePage(unsigned long)+0x67>
c000fea6:	c1 eb 0c             	shr    ebx,0xc
c000fea9:	53                   	push   ebx
c000feaa:	e8 cb ff ff ff       	call   c000fe7a <Phys::getPageState(unsigned long)>
c000feaf:	5a                   	pop    edx
c000feb0:	84 c0                	test   al,al
c000feb2:	74 5b                	je     c000ff0f <Phys::freePage(unsigned long)+0x79>
c000feb4:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c000feb9:	48                   	dec    eax
c000feba:	a3 10 f3 02 c0       	mov    ds:0xc002f310,eax
c000febf:	8d 04 80             	lea    eax,[eax+eax*4]
c000fec2:	8d 04 80             	lea    eax,[eax+eax*4]
c000fec5:	c1 e0 02             	shl    eax,0x2
c000fec8:	99                   	cdq    
c000fec9:	f7 3d 14 f3 02 c0    	idiv   DWORD PTR ds:0xc002f314
c000fecf:	39 05 0c f3 02 c0    	cmp    DWORD PTR ds:0xc002f30c,eax
c000fed5:	75 13                	jne    c000feea <Phys::freePage(unsigned long)+0x54>
c000fed7:	83 ec 08             	sub    esp,0x8
c000feda:	6a 00                	push   0x0
c000fedc:	53                   	push   ebx
c000fedd:	e8 66 ff ff ff       	call   c000fe48 <Phys::setPageState(unsigned long, bool)>
c000fee2:	83 c4 10             	add    esp,0x10
c000fee5:	83 c4 08             	add    esp,0x8
c000fee8:	5b                   	pop    ebx
c000fee9:	c3                   	ret    
c000feea:	83 ec 0c             	sub    esp,0xc
c000feed:	a3 0c f3 02 c0       	mov    ds:0xc002f30c,eax
c000fef2:	50                   	push   eax
c000fef3:	e8 08 0a 00 00       	call   c0010900 <VgaText::updateRAMUsageDisplay(int)>
c000fef8:	83 c4 10             	add    esp,0x10
c000fefb:	eb da                	jmp    c000fed7 <Phys::freePage(unsigned long)+0x41>
c000fefd:	68 00 10 00 00       	push   0x1000
c000ff02:	53                   	push   ebx
c000ff03:	e8 f8 fe ff ff       	call   c000fe00 <Phys::freeDMA(unsigned long, unsigned long)>
c000ff08:	59                   	pop    ecx
c000ff09:	5b                   	pop    ebx
c000ff0a:	83 c4 08             	add    esp,0x8
c000ff0d:	5b                   	pop    ebx
c000ff0e:	c3                   	ret    
c000ff0f:	c7 44 24 10 e6 af 02 c0 	mov    DWORD PTR [esp+0x10],0xc002afe6
c000ff17:	83 c4 08             	add    esp,0x8
c000ff1a:	5b                   	pop    ebx
c000ff1b:	e9 d9 a9 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>

c000ff20 <Phys::allocatePage()>:
c000ff20:	56                   	push   esi
c000ff21:	53                   	push   ebx
c000ff22:	51                   	push   ecx
c000ff23:	8b 35 04 f3 02 c0    	mov    esi,DWORD PTR ds:0xc002f304
c000ff29:	89 f3                	mov    ebx,esi
c000ff2b:	eb 0a                	jmp    c000ff37 <Phys::allocatePage()+0x17>
c000ff2d:	89 1d 04 f3 02 c0    	mov    DWORD PTR ds:0xc002f304,ebx
c000ff33:	39 de                	cmp    esi,ebx
c000ff35:	74 24                	je     c000ff5b <Phys::allocatePage()+0x3b>
c000ff37:	53                   	push   ebx
c000ff38:	e8 3d ff ff ff       	call   c000fe7a <Phys::getPageState(unsigned long)>
c000ff3d:	5a                   	pop    edx
c000ff3e:	84 c0                	test   al,al
c000ff40:	74 77                	je     c000ffb9 <Phys::allocatePage()+0x99>
c000ff42:	43                   	inc    ebx
c000ff43:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff49:	75 e2                	jne    c000ff2d <Phys::allocatePage()+0xd>
c000ff4b:	31 db                	xor    ebx,ebx
c000ff4d:	c7 05 04 f3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f304,0x0
c000ff57:	39 de                	cmp    esi,ebx
c000ff59:	75 dc                	jne    c000ff37 <Phys::allocatePage()+0x17>
c000ff5b:	83 ec 0c             	sub    esp,0xc
c000ff5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff63:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff66:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff6c:	e8 1b 2c 00 00       	call   c0012b8c <VAS::scanForEviction()>
c000ff71:	83 c4 10             	add    esp,0x10
c000ff74:	85 c0                	test   eax,eax
c000ff76:	75 76                	jne    c000ffee <Phys::allocatePage()+0xce>
c000ff78:	83 ec 0c             	sub    esp,0xc
c000ff7b:	68 fc af 02 c0       	push   0xc002affc
c000ff80:	e8 da 2e 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c000ff85:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff8c:	e8 cc fd ff ff       	call   c000fd5d <Phys::allocateDMA(unsigned long)>
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	85 c0                	test   eax,eax
c000ff96:	75 56                	jne    c000ffee <Phys::allocatePage()+0xce>
c000ff98:	83 ec 0c             	sub    esp,0xc
c000ff9b:	68 0d b0 02 c0       	push   0xc002b00d
c000ffa0:	e8 54 a9 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c000ffa5:	83 c4 10             	add    esp,0x10
c000ffa8:	8b 1d 04 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f304
c000ffae:	53                   	push   ebx
c000ffaf:	e8 c6 fe ff ff       	call   c000fe7a <Phys::getPageState(unsigned long)>
c000ffb4:	5a                   	pop    edx
c000ffb5:	84 c0                	test   al,al
c000ffb7:	75 89                	jne    c000ff42 <Phys::allocatePage()+0x22>
c000ffb9:	6a 01                	push   0x1
c000ffbb:	53                   	push   ebx
c000ffbc:	e8 87 fe ff ff       	call   c000fe48 <Phys::setPageState(unsigned long, bool)>
c000ffc1:	a1 10 f3 02 c0       	mov    eax,ds:0xc002f310
c000ffc6:	59                   	pop    ecx
c000ffc7:	40                   	inc    eax
c000ffc8:	5b                   	pop    ebx
c000ffc9:	a3 10 f3 02 c0       	mov    ds:0xc002f310,eax
c000ffce:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd1:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd4:	c1 e0 02             	shl    eax,0x2
c000ffd7:	99                   	cdq    
c000ffd8:	f7 3d 14 f3 02 c0    	idiv   DWORD PTR ds:0xc002f314
c000ffde:	39 05 0c f3 02 c0    	cmp    DWORD PTR ds:0xc002f30c,eax
c000ffe4:	75 0c                	jne    c000fff2 <Phys::allocatePage()+0xd2>
c000ffe6:	a1 04 f3 02 c0       	mov    eax,ds:0xc002f304
c000ffeb:	c1 e0 0c             	shl    eax,0xc
c000ffee:	5a                   	pop    edx
c000ffef:	5b                   	pop    ebx
c000fff0:	5e                   	pop    esi
c000fff1:	c3                   	ret    
c000fff2:	83 ec 0c             	sub    esp,0xc
c000fff5:	a3 0c f3 02 c0       	mov    ds:0xc002f30c,eax
c000fffa:	50                   	push   eax
c000fffb:	e8 00 09 00 00       	call   c0010900 <VgaText::updateRAMUsageDisplay(int)>
c0010000:	83 c4 10             	add    esp,0x10
c0010003:	eb e1                	jmp    c000ffe6 <Phys::allocatePage()+0xc6>

c0010005 <Phys::allocateContiguousPages(int)>:
c0010005:	57                   	push   edi
c0010006:	56                   	push   esi
c0010007:	53                   	push   ebx
c0010008:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001000c:	fa                   	cli    
c001000d:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0010013:	31 db                	xor    ebx,ebx
c0010015:	85 db                	test   ebx,ebx
c0010017:	75 11                	jne    c001002a <Phys::allocateContiguousPages(int)+0x25>
c0010019:	e8 02 ff ff ff       	call   c000ff20 <Phys::allocatePage()>
c001001e:	83 fe 01             	cmp    esi,0x1
c0010021:	89 c7                	mov    edi,eax
c0010023:	74 21                	je     c0010046 <Phys::allocateContiguousPages(int)+0x41>
c0010025:	bb 01 00 00 00       	mov    ebx,0x1
c001002a:	e8 f1 fe ff ff       	call   c000ff20 <Phys::allocatePage()>
c001002f:	89 da                	mov    edx,ebx
c0010031:	c1 e2 0c             	shl    edx,0xc
c0010034:	01 fa                	add    edx,edi
c0010036:	39 c2                	cmp    edx,eax
c0010038:	74 20                	je     c001005a <Phys::allocateContiguousPages(int)+0x55>
c001003a:	bb 01 00 00 00       	mov    ebx,0x1
c001003f:	89 c7                	mov    edi,eax
c0010041:	83 fe 01             	cmp    esi,0x1
c0010044:	75 e4                	jne    c001002a <Phys::allocateContiguousPages(int)+0x25>
c0010046:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001004b:	48                   	dec    eax
c001004c:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0010051:	75 01                	jne    c0010054 <Phys::allocateContiguousPages(int)+0x4f>
c0010053:	fb                   	sti    
c0010054:	89 f8                	mov    eax,edi
c0010056:	5b                   	pop    ebx
c0010057:	5e                   	pop    esi
c0010058:	5f                   	pop    edi
c0010059:	c3                   	ret    
c001005a:	43                   	inc    ebx
c001005b:	39 f3                	cmp    ebx,esi
c001005d:	75 b6                	jne    c0010015 <Phys::allocateContiguousPages(int)+0x10>
c001005f:	eb e5                	jmp    c0010046 <Phys::allocateContiguousPages(int)+0x41>

c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010061:	56                   	push   esi
c0010062:	53                   	push   ebx
c0010063:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010067:	39 1d 08 f3 02 c0    	cmp    DWORD PTR ds:0xc002f308,ebx
c001006d:	73 06                	jae    c0010075 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001006f:	89 1d 08 f3 02 c0    	mov    DWORD PTR ds:0xc002f308,ebx
c0010075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010079:	c1 eb 0c             	shr    ebx,0xc
c001007c:	c1 e8 0c             	shr    eax,0xc
c001007f:	39 d8                	cmp    eax,ebx
c0010081:	73 13                	jae    c0010096 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010083:	6a 00                	push   0x0
c0010085:	8d 70 01             	lea    esi,[eax+0x1]
c0010088:	50                   	push   eax
c0010089:	e8 ba fd ff ff       	call   c000fe48 <Phys::setPageState(unsigned long, bool)>
c001008e:	5a                   	pop    edx
c001008f:	89 f0                	mov    eax,esi
c0010091:	59                   	pop    ecx
c0010092:	39 f3                	cmp    ebx,esi
c0010094:	75 ed                	jne    c0010083 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010096:	5b                   	pop    ebx
c0010097:	5e                   	pop    esi
c0010098:	c3                   	ret    

c0010099 <Phys::physicalMemorySetup(unsigned int)>:
c0010099:	55                   	push   ebp
c001009a:	57                   	push   edi
c001009b:	56                   	push   esi
c001009c:	53                   	push   ebx
c001009d:	31 db                	xor    ebx,ebx
c001009f:	83 ec 40             	sub    esp,0x40
c00100a2:	6a 30                	push   0x30
c00100a4:	6a 00                	push   0x0
c00100a6:	68 20 f3 02 c0       	push   0xc002f320
c00100ab:	e8 c8 06 ff ff       	call   c0000778 <memset>
c00100b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b9:	05 00 10 00 00       	add    eax,0x1000
c00100be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	6a 01                	push   0x1
c00100ca:	53                   	push   ebx
c00100cb:	43                   	inc    ebx
c00100cc:	e8 77 fd ff ff       	call   c000fe48 <Phys::setPageState(unsigned long, bool)>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100da:	75 e9                	jne    c00100c5 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100dc:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100e3:	66 85 c0             	test   ax,ax
c00100e6:	0f 84 8e 01 00 00    	je     c001027a <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100fc:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010101:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010105:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001010d:	eb 15                	jmp    c0010124 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001010f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010113:	83 c3 18             	add    ebx,0x18
c0010116:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001011a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001011e:	0f 84 66 01 00 00    	je     c001028a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010124:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010127:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001012a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001012d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010135:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010137:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001013a:	01 f0                	add    eax,esi
c001013c:	55                   	push   ebp
c001013d:	11 fa                	adc    edx,edi
c001013f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010143:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010147:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001014b:	56                   	push   esi
c001014c:	68 48 b0 02 c0       	push   0xc002b048
c0010151:	e8 09 2d 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0010156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001015a:	83 c4 10             	add    esp,0x10
c001015d:	09 f8                	or     eax,edi
c001015f:	0f 85 25 01 00 00    	jne    c001028a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010165:	4d                   	dec    ebp
c0010166:	75 a7                	jne    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010168:	ba 00 00 08 00       	mov    edx,0x80000
c001016d:	89 c1                	mov    ecx,eax
c001016f:	39 f2                	cmp    edx,esi
c0010171:	19 f9                	sbb    ecx,edi
c0010173:	0f 82 a7 00 00 00    	jb     c0010220 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010179:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001017d:	89 c1                	mov    ecx,eax
c001017f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010183:	0f 83 97 00 00 00    	jae    c0010220 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010189:	ba 00 00 0a 00       	mov    edx,0xa0000
c001018e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010192:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010196:	39 fa                	cmp    edx,edi
c0010198:	19 e8                	sbb    eax,ebp
c001019a:	0f 82 14 01 00 00    	jb     c00102b4 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a8:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ae:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101b3:	83 d5 ff             	adc    ebp,0xffffffff
c00101b6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ba:	31 c0                	xor    eax,eax
c00101bc:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101c0:	39 fa                	cmp    edx,edi
c00101c2:	89 c1                	mov    ecx,eax
c00101c4:	19 e9                	sbb    ecx,ebp
c00101c6:	0f 83 43 ff ff ff    	jae    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cc:	be 00 00 08 00       	mov    esi,0x80000
c00101d1:	50                   	push   eax
c00101d2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d6:	57                   	push   edi
c00101d7:	56                   	push   esi
c00101d8:	68 6c b0 02 c0       	push   0xc002b06c
c00101dd:	e8 7d 2c 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00101e2:	5a                   	pop    edx
c00101e3:	59                   	pop    ecx
c00101e4:	57                   	push   edi
c00101e5:	56                   	push   esi
c00101e6:	e8 76 fe ff ff       	call   c0010061 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f3:	83 c4 0c             	add    esp,0xc
c00101f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101fa:	03 05 14 f3 02 c0    	add    eax,DWORD PTR ds:0xc002f314
c0010200:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010207:	a3 14 f3 02 c0       	mov    ds:0xc002f314,eax
c001020c:	52                   	push   edx
c001020d:	50                   	push   eax
c001020e:	68 29 b0 02 c0       	push   0xc002b029
c0010213:	e8 47 2c 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	e9 ef fe ff ff       	jmp    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010220:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001022c:	39 ea                	cmp    edx,ebp
c001022e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010232:	0f 82 d7 fe ff ff    	jb     c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010238:	ba ff 1f 00 00       	mov    edx,0x1fff
c001023d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010241:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010245:	0f 83 c4 fe ff ff    	jae    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024b:	39 ee                	cmp    esi,ebp
c001024d:	89 f8                	mov    eax,edi
c001024f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010253:	0f 83 78 ff ff ff    	jae    c00101d1 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010259:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001025d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010261:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010265:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010269:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001026d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010271:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010275:	e9 57 ff ff ff       	jmp    c00101d1 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027a:	83 ec 0c             	sub    esp,0xc
c001027d:	68 1b b0 02 c0       	push   0xc002b01b
c0010282:	e8 72 a6 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	bb 40 01 00 00       	mov    ebx,0x140
c001028f:	83 ec 08             	sub    esp,0x8
c0010292:	6a 00                	push   0x0
c0010294:	53                   	push   ebx
c0010295:	43                   	inc    ebx
c0010296:	e8 ad fb ff ff       	call   c000fe48 <Phys::setPageState(unsigned long, bool)>
c001029b:	ff 05 14 f3 02 c0    	inc    DWORD PTR ds:0xc002f314
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102aa:	75 e3                	jne    c001028f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ac:	83 c4 3c             	add    esp,0x3c
c00102af:	5b                   	pop    ebx
c00102b0:	5e                   	pop    esi
c00102b1:	5f                   	pop    edi
c00102b2:	5d                   	pop    ebp
c00102b3:	c3                   	ret    
c00102b4:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102c4:	e9 d7 fe ff ff       	jmp    c00101a0 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102c9:	90                   	nop

c00102ca <Pipe::isAtty()>:
c00102ca:	31 c0                	xor    eax,eax
c00102cc:	c3                   	ret    
c00102cd:	90                   	nop

c00102ce <Pipe::~Pipe()>:
c00102ce:	83 ec 0c             	sub    esp,0xc
c00102d1:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	89 10                	mov    DWORD PTR [eax],edx
c00102dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	50                   	push   eax
c00102e4:	e8 0f 15 00 00       	call   c00117f8 <UnixFile::~UnixFile()>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	90                   	nop
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::~Pipe()>:
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fc:	e8 cd ff ff ff       	call   c00102ce <Pipe::~Pipe()>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	83 ec 08             	sub    esp,0x8
c0010307:	6a 20                	push   0x20
c0010309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030d:	e8 6d 2a 00 00       	call   c0012d7f <operator delete(void*, unsigned long)>
c0010312:	83 c4 10             	add    esp,0x10
c0010315:	83 c4 0c             	add    esp,0xc
c0010318:	c3                   	ret    
c0010319:	90                   	nop

c001031a <Pipe::read(unsigned long long, void*, int*)>:
c001031a:	55                   	push   ebp
c001031b:	57                   	push   edi
c001031c:	56                   	push   esi
c001031d:	53                   	push   ebx
c001031e:	83 ec 1c             	sub    esp,0x1c
c0010321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010325:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010329:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001032d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010330:	89 c8                	mov    eax,ecx
c0010332:	99                   	cdq    
c0010333:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010337:	74 24                	je     c001035d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010339:	39 f9                	cmp    ecx,edi
c001033b:	89 d1                	mov    ecx,edx
c001033d:	19 f1                	sbb    ecx,esi
c001033f:	73 1c                	jae    c001035d <Pipe::read(unsigned long long, void*, int*)+0x43>
c0010341:	fa                   	cli    
c0010342:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0010348:	e8 5f e3 00 00       	call   c001e6ac <schedule()>
c001034d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0010352:	48                   	dec    eax
c0010353:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0010358:	75 d3                	jne    c001032d <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035a:	fb                   	sti    
c001035b:	eb d0                	jmp    c001032d <Pipe::read(unsigned long long, void*, int*)+0x13>
c001035d:	39 f8                	cmp    eax,edi
c001035f:	89 d1                	mov    ecx,edx
c0010361:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010364:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010368:	19 f1                	sbb    ecx,esi
c001036a:	73 07                	jae    c0010373 <Pipe::read(unsigned long long, void*, int*)+0x59>
c001036c:	89 04 24             	mov    DWORD PTR [esp],eax
c001036f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010373:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010376:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010379:	29 f7                	sub    edi,esi
c001037b:	89 f8                	mov    eax,edi
c001037d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010381:	99                   	cdq    
c0010382:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010389:	19 d0                	sbb    eax,edx
c001038b:	73 07                	jae    c0010394 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c001038d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010390:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010394:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0010397:	89 ea                	mov    edx,ebp
c0010399:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c001039d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00103a2:	74 0d                	je     c00103b1 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00103a4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00103a7:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00103ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103af:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103b1:	85 d2                	test   edx,edx
c00103b3:	74 11                	je     c00103c6 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00103b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00103b9:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103bc:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00103c0:	89 d1                	mov    ecx,edx
c00103c2:	89 c7                	mov    edi,eax
c00103c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103c9:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00103cc:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103cf:	99                   	cdq    
c00103d0:	89 f7                	mov    edi,esi
c00103d2:	03 04 24             	add    eax,DWORD PTR [esp]
c00103d5:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00103d9:	c1 ff 1f             	sar    edi,0x1f
c00103dc:	57                   	push   edi
c00103dd:	56                   	push   esi
c00103de:	52                   	push   edx
c00103df:	50                   	push   eax
c00103e0:	e8 2f 73 01 00       	call   c0027714 <__umoddi3>
c00103e5:	83 c4 10             	add    esp,0x10
c00103e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103eb:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103f0:	75 10                	jne    c0010402 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c00103f2:	83 ec 0c             	sub    esp,0xc
c00103f5:	68 95 b0 02 c0       	push   0xc002b095
c00103fa:	e8 fa a4 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00103ff:	83 c4 10             	add    esp,0x10
c0010402:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010406:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010409:	89 10                	mov    DWORD PTR [eax],edx
c001040b:	83 c4 1c             	add    esp,0x1c
c001040e:	31 c0                	xor    eax,eax
c0010410:	5b                   	pop    ebx
c0010411:	5e                   	pop    esi
c0010412:	5f                   	pop    edi
c0010413:	5d                   	pop    ebp
c0010414:	c3                   	ret    
c0010415:	90                   	nop

c0010416 <Pipe::write(unsigned long long, void*, int*)>:
c0010416:	55                   	push   ebp
c0010417:	57                   	push   edi
c0010418:	56                   	push   esi
c0010419:	53                   	push   ebx
c001041a:	83 ec 1c             	sub    esp,0x1c
c001041d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010421:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010425:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010428:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001042c:	89 04 24             	mov    DWORD PTR [esp],eax
c001042f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010433:	89 d8                	mov    eax,ebx
c0010435:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010438:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001043c:	89 d6                	mov    esi,edx
c001043e:	89 d7                	mov    edi,edx
c0010440:	c1 ff 1f             	sar    edi,0x1f
c0010443:	03 34 24             	add    esi,DWORD PTR [esp]
c0010446:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001044a:	c1 f8 1f             	sar    eax,0x1f
c001044d:	39 f3                	cmp    ebx,esi
c001044f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010453:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010457:	19 f8                	sbb    eax,edi
c0010459:	b8 01 00 00 00       	mov    eax,0x1
c001045e:	72 6e                	jb     c00104ce <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010460:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010463:	01 d0                	add    eax,edx
c0010465:	99                   	cdq    
c0010466:	f7 fb                	idiv   ebx
c0010468:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001046c:	29 d3                	sub    ebx,edx
c001046e:	89 d7                	mov    edi,edx
c0010470:	89 de                	mov    esi,ebx
c0010472:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010475:	c1 fb 1f             	sar    ebx,0x1f
c0010478:	39 f2                	cmp    edx,esi
c001047a:	19 d8                	sbb    eax,ebx
c001047c:	b8 00 00 00 00       	mov    eax,0x0
c0010481:	72 04                	jb     c0010487 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0010483:	89 d0                	mov    eax,edx
c0010485:	29 f0                	sub    eax,esi
c0010487:	89 d3                	mov    ebx,edx
c0010489:	29 c3                	sub    ebx,eax
c001048b:	74 0b                	je     c0010498 <Pipe::write(unsigned long long, void*, int*)+0x82>
c001048d:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010490:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010494:	89 d9                	mov    ecx,ebx
c0010496:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010498:	85 c0                	test   eax,eax
c001049a:	74 0d                	je     c00104a9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c001049c:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00104a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00104a3:	89 de                	mov    esi,ebx
c00104a5:	89 c1                	mov    ecx,eax
c00104a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00104a9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00104ac:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104b1:	75 10                	jne    c00104c3 <Pipe::write(unsigned long long, void*, int*)+0xad>
c00104b3:	83 ec 0c             	sub    esp,0xc
c00104b6:	68 b1 b0 02 c0       	push   0xc002b0b1
c00104bb:	e8 39 a4 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00104c0:	83 c4 10             	add    esp,0x10
c00104c3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00104ca:	89 08                	mov    DWORD PTR [eax],ecx
c00104cc:	31 c0                	xor    eax,eax
c00104ce:	83 c4 1c             	add    esp,0x1c
c00104d1:	5b                   	pop    ebx
c00104d2:	5e                   	pop    esi
c00104d3:	5f                   	pop    edi
c00104d4:	5d                   	pop    ebp
c00104d5:	c3                   	ret    

c00104d6 <Pipe::Pipe(int)>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	6a 00                	push   0x0
c00104e2:	50                   	push   eax
c00104e3:	e8 2e 11 00 00       	call   c0011616 <UnixFile::UnixFile(int)>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	ba d8 b0 02 c0       	mov    edx,0xc002b0d8
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	89 10                	mov    DWORD PTR [eax],edx
c00104f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010505:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001051b:	83 ec 0c             	sub    esp,0xc
c001051e:	50                   	push   eax
c001051f:	e8 90 f3 ff ff       	call   c000f8b4 <malloc>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	89 c2                	mov    edx,eax
c0010529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <VgaText::isAtty()>:
c001053e:	b0 01                	mov    al,0x1
c0010540:	c3                   	ret    
c0010541:	90                   	nop

c0010542 <VgaText::~VgaText()>:
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	89 10                	mov    DWORD PTR [eax],edx
c0010550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010554:	83 ec 0c             	sub    esp,0xc
c0010557:	50                   	push   eax
c0010558:	e8 9b 12 00 00       	call   c00117f8 <UnixFile::~UnixFile()>
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	90                   	nop
c0010561:	83 c4 0c             	add    esp,0xc
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::~VgaText()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	83 ec 0c             	sub    esp,0xc
c001056c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010570:	e8 cd ff ff ff       	call   c0010542 <VgaText::~VgaText()>
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	83 ec 08             	sub    esp,0x8
c001057b:	68 c4 02 00 00       	push   0x2c4
c0010580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010584:	e8 f6 27 00 00       	call   c0012d7f <operator delete(void*, unsigned long)>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	83 c4 0c             	add    esp,0xc
c001058f:	c3                   	ret    

c0010590 <VgaText::read(unsigned long long, void*, int*)>:
c0010590:	83 ec 10             	sub    esp,0x10
c0010593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001059b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059f:	e8 6a 5d 00 00       	call   c001630e <readKeyboard(VgaText*, char*, unsigned long)>
c00105a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a8:	89 02                	mov    DWORD PTR [edx],eax
c00105aa:	31 c0                	xor    eax,eax
c00105ac:	83 c4 1c             	add    esp,0x1c
c00105af:	c3                   	ret    

c00105b0 <setTerminalScrollLock(bool)>:
c00105b0:	c3                   	ret    

c00105b1 <addToTerminalCycle(VgaText*)>:
c00105b1:	8b 15 a0 f3 02 c0    	mov    edx,DWORD PTR ds:0xc002f3a0
c00105b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105bb:	85 d2                	test   edx,edx
c00105bd:	75 09                	jne    c00105c8 <addToTerminalCycle(VgaText*)+0x17>
c00105bf:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105c2:	a3 a0 f3 02 c0       	mov    ds:0xc002f3a0,eax
c00105c7:	c3                   	ret    
c00105c8:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105cb:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105ce:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105d1:	c3                   	ret    

c00105d2 <installVgaTextImplementation()>:
c00105d2:	83 ec 10             	sub    esp,0x10
c00105d5:	6a 20                	push   0x20
c00105d7:	6a 00                	push   0x0
c00105d9:	68 80 f3 02 c0       	push   0xc002f380
c00105de:	e8 95 01 ff ff       	call   c0000778 <memset>
c00105e3:	83 c4 1c             	add    esp,0x1c
c00105e6:	c3                   	ret    

c00105e7 <scrollTerminalScrollLock(int)>:
c00105e7:	c3                   	ret    

c00105e8 <VgaText::load()>:
c00105e8:	53                   	push   ebx
c00105e9:	31 c0                	xor    eax,eax
c00105eb:	83 ec 58             	sub    esp,0x58
c00105ee:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105f2:	89 e2                	mov    edx,esp
c00105f4:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105f8:	40                   	inc    eax
c00105f9:	83 f8 50             	cmp    eax,0x50
c00105fc:	75 f6                	jne    c00105f4 <VgaText::load()+0xc>
c00105fe:	31 c0                	xor    eax,eax
c0010600:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010607:	84 c9                	test   cl,cl
c0010609:	74 06                	je     c0010611 <VgaText::load()+0x29>
c001060b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001060e:	40                   	inc    eax
c001060f:	eb ef                	jmp    c0010600 <VgaText::load()+0x18>
c0010611:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c0010614:	85 c0                	test   eax,eax
c0010616:	74 09                	je     c0010621 <VgaText::load()+0x39>
c0010618:	51                   	push   ecx
c0010619:	51                   	push   ecx
c001061a:	52                   	push   edx
c001061b:	53                   	push   ebx
c001061c:	ff d0                	call   eax
c001061e:	83 c4 10             	add    esp,0x10
c0010621:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c0010624:	85 c0                	test   eax,eax
c0010626:	74 09                	je     c0010631 <VgaText::load()+0x49>
c0010628:	83 ec 0c             	sub    esp,0xc
c001062b:	53                   	push   ebx
c001062c:	ff d0                	call   eax
c001062e:	83 c4 10             	add    esp,0x10
c0010631:	83 c4 58             	add    esp,0x58
c0010634:	5b                   	pop    ebx
c0010635:	c3                   	ret    

c0010636 <VgaText::updateCursor()>:
c0010636:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001063a:	39 05 a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,eax
c0010640:	75 09                	jne    c001064b <VgaText::updateCursor()+0x15>
c0010642:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c0010645:	85 c0                	test   eax,eax
c0010647:	74 02                	je     c001064b <VgaText::updateCursor()+0x15>
c0010649:	ff e0                	jmp    eax
c001064b:	c3                   	ret    

c001064c <VgaText::showCursor(bool)>:
c001064c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010654:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010657:	c3                   	ret    

c0010658 <VgaText::disableBlink(bool)>:
c0010658:	56                   	push   esi
c0010659:	53                   	push   ebx
c001065a:	51                   	push   ecx
c001065b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001065f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010663:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c0010669:	75 15                	jne    c0010680 <VgaText::disableBlink(bool)+0x28>
c001066b:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c001066e:	85 c0                	test   eax,eax
c0010670:	74 0e                	je     c0010680 <VgaText::disableBlink(bool)+0x28>
c0010672:	89 f1                	mov    ecx,esi
c0010674:	52                   	push   edx
c0010675:	52                   	push   edx
c0010676:	0f b6 d1             	movzx  edx,cl
c0010679:	52                   	push   edx
c001067a:	53                   	push   ebx
c001067b:	ff d0                	call   eax
c001067d:	83 c4 10             	add    esp,0x10
c0010680:	89 f0                	mov    eax,esi
c0010682:	83 f0 01             	xor    eax,0x1
c0010685:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010688:	58                   	pop    eax
c0010689:	5b                   	pop    ebx
c001068a:	5e                   	pop    esi
c001068b:	c3                   	ret    

c001068c <VgaText::doANSI_SGR(int)>:
c001068c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010694:	85 d2                	test   edx,edx
c0010696:	75 0b                	jne    c00106a3 <VgaText::doANSI_SGR(int)+0x17>
c0010698:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001069b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001069e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00106a1:	eb 59                	jmp    c00106fc <VgaText::doANSI_SGR(int)+0x70>
c00106a3:	83 fa 07             	cmp    edx,0x7
c00106a6:	75 0b                	jne    c00106b3 <VgaText::doANSI_SGR(int)+0x27>
c00106a8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00106ab:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00106ae:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00106b1:	eb 49                	jmp    c00106fc <VgaText::doANSI_SGR(int)+0x70>
c00106b3:	83 fa 1b             	cmp    edx,0x1b
c00106b6:	74 e0                	je     c0010698 <VgaText::doANSI_SGR(int)+0xc>
c00106b8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106bb:	83 f9 07             	cmp    ecx,0x7
c00106be:	77 09                	ja     c00106c9 <VgaText::doANSI_SGR(int)+0x3d>
c00106c0:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c00106c7:	eb 20                	jmp    c00106e9 <VgaText::doANSI_SGR(int)+0x5d>
c00106c9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106cc:	83 f9 07             	cmp    ecx,0x7
c00106cf:	77 09                	ja     c00106da <VgaText::doANSI_SGR(int)+0x4e>
c00106d1:	8b 14 8d 20 e2 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd1de0]
c00106d8:	eb 22                	jmp    c00106fc <VgaText::doANSI_SGR(int)+0x70>
c00106da:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106dd:	83 f9 07             	cmp    ecx,0x7
c00106e0:	77 0b                	ja     c00106ed <VgaText::doANSI_SGR(int)+0x61>
c00106e2:	8b 14 95 d8 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f28]
c00106e9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106ec:	c3                   	ret    
c00106ed:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106f0:	83 f9 07             	cmp    ecx,0x7
c00106f3:	77 0a                	ja     c00106ff <VgaText::doANSI_SGR(int)+0x73>
c00106f5:	8b 14 95 b0 e0 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1f50]
c00106fc:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106ff:	c3                   	ret    

c0010700 <VgaText::setDefaultBgColour(VgaColour)>:
c0010700:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010704:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010708:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001070b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001070e:	c3                   	ret    
c001070f:	90                   	nop

c0010710 <VgaText::setDefaultFgColour(VgaColour)>:
c0010710:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010714:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010718:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001071b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001071e:	c3                   	ret    
c001071f:	90                   	nop

c0010720 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010720:	53                   	push   ebx
c0010721:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010725:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010729:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001072d:	51                   	push   ecx
c001072e:	e8 cd ff ff ff       	call   c0010700 <VgaText::setDefaultBgColour(VgaColour)>
c0010733:	58                   	pop    eax
c0010734:	5a                   	pop    edx
c0010735:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010739:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001073d:	5b                   	pop    ebx
c001073e:	eb d0                	jmp    c0010710 <VgaText::setDefaultFgColour(VgaColour)>

c0010740 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010740:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010744:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010749:	83 e0 0f             	and    eax,0xf
c001074c:	c1 e2 04             	shl    edx,0x4
c001074f:	09 d0                	or     eax,edx
c0010751:	c3                   	ret    

c0010752 <VgaText::scrollScreen()>:
c0010752:	55                   	push   ebp
c0010753:	b9 01 00 00 00       	mov    ecx,0x1
c0010758:	57                   	push   edi
c0010759:	56                   	push   esi
c001075a:	53                   	push   ebx
c001075b:	83 ec 0c             	sub    esp,0xc
c001075e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010762:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010768:	31 ff                	xor    edi,edi
c001076a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001076d:	83 f9 17             	cmp    ecx,0x17
c0010770:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0010773:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c001077a:	75 27                	jne    c00107a3 <VgaText::scrollScreen()+0x51>
c001077c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c001077f:	01 f5                	add    ebp,esi
c0010781:	f7 c7 01 00 00 00    	test   edi,0x1
c0010787:	74 16                	je     c001079f <VgaText::scrollScreen()+0x4d>
c0010789:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001078d:	50                   	push   eax
c001078e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010792:	50                   	push   eax
c0010793:	e8 a8 ff ff ff       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c0010798:	5a                   	pop    edx
c0010799:	5a                   	pop    edx
c001079a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001079d:	eb 04                	jmp    c00107a3 <VgaText::scrollScreen()+0x51>
c001079f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00107a3:	47                   	inc    edi
c00107a4:	46                   	inc    esi
c00107a5:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107ab:	75 bd                	jne    c001076a <VgaText::scrollScreen()+0x18>
c00107ad:	41                   	inc    ecx
c00107ae:	83 f9 18             	cmp    ecx,0x18
c00107b1:	75 af                	jne    c0010762 <VgaText::scrollScreen()+0x10>
c00107b3:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c00107b9:	75 1b                	jne    c00107d6 <VgaText::scrollScreen()+0x84>
c00107bb:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107bf:	74 05                	je     c00107c6 <VgaText::scrollScreen()+0x74>
c00107c1:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107c4:	eb 10                	jmp    c00107d6 <VgaText::scrollScreen()+0x84>
c00107c6:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107c9:	85 c0                	test   eax,eax
c00107cb:	74 09                	je     c00107d6 <VgaText::scrollScreen()+0x84>
c00107cd:	83 ec 0c             	sub    esp,0xc
c00107d0:	53                   	push   ebx
c00107d1:	ff d0                	call   eax
c00107d3:	83 c4 10             	add    esp,0x10
c00107d6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107da:	83 c4 0c             	add    esp,0xc
c00107dd:	5b                   	pop    ebx
c00107de:	5e                   	pop    esi
c00107df:	5f                   	pop    edi
c00107e0:	5d                   	pop    ebp
c00107e1:	e9 50 fe ff ff       	jmp    c0010636 <VgaText::updateCursor()>

c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00107e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107eb:	c1 e0 08             	shl    eax,0x8
c00107ee:	89 c2                	mov    edx,eax
c00107f0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107f5:	09 d0                	or     eax,edx
c00107f7:	c3                   	ret    

c00107f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107f8:	56                   	push   esi
c00107f9:	53                   	push   ebx
c00107fa:	51                   	push   ecx
c00107fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107ff:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010804:	50                   	push   eax
c0010805:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001080a:	50                   	push   eax
c001080b:	e8 30 ff ff ff       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c0010810:	5b                   	pop    ebx
c0010811:	0f b6 c0             	movzx  eax,al
c0010814:	5e                   	pop    esi
c0010815:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001081a:	50                   	push   eax
c001081b:	53                   	push   ebx
c001081c:	e8 c5 ff ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010821:	5a                   	pop    edx
c0010822:	5e                   	pop    esi
c0010823:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010826:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001082c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010830:	0f b7 d2             	movzx  edx,dx
c0010833:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c0010837:	39 0d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ecx
c001083d:	75 10                	jne    c001084f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001083f:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c0010842:	85 c0                	test   eax,eax
c0010844:	74 09                	je     c001084f <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010846:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001084a:	5a                   	pop    edx
c001084b:	5b                   	pop    ebx
c001084c:	5e                   	pop    esi
c001084d:	ff e0                	jmp    eax
c001084f:	58                   	pop    eax
c0010850:	5b                   	pop    ebx
c0010851:	5e                   	pop    esi
c0010852:	c3                   	ret    
c0010853:	90                   	nop

c0010854 <VgaText::getCursorX()>:
c0010854:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010858:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001085b:	c3                   	ret    

c001085c <VgaText::getCursorY()>:
c001085c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010860:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0010863:	c3                   	ret    

c0010864 <VgaText::setCursor(int, int)>:
c0010864:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010868:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001086c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001086f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010873:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010876:	e9 bb fd ff ff       	jmp    c0010636 <VgaText::updateCursor()>
c001087b:	90                   	nop

c001087c <VgaText::setCursorX(int)>:
c001087c:	83 ec 10             	sub    esp,0x10
c001087f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010883:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001088a:	50                   	push   eax
c001088b:	e8 d4 ff ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c0010890:	83 c4 1c             	add    esp,0x1c
c0010893:	c3                   	ret    

c0010894 <VgaText::setCursorY(int)>:
c0010894:	83 ec 10             	sub    esp,0x10
c0010897:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001089b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001089f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00108a2:	50                   	push   eax
c00108a3:	e8 bc ff ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c00108a8:	83 c4 1c             	add    esp,0x1c
c00108ab:	c3                   	ret    

c00108ac <VgaText::incrementCursor(bool)>:
c00108ac:	56                   	push   esi
c00108ad:	53                   	push   ebx
c00108ae:	51                   	push   ecx
c00108af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00108b7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108ba:	40                   	inc    eax
c00108bb:	83 f8 50             	cmp    eax,0x50
c00108be:	74 05                	je     c00108c5 <VgaText::incrementCursor(bool)+0x19>
c00108c0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108c3:	eb 24                	jmp    c00108e9 <VgaText::incrementCursor(bool)+0x3d>
c00108c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108c8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108cf:	8d 50 01             	lea    edx,[eax+0x1]
c00108d2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108d5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108d8:	75 0f                	jne    c00108e9 <VgaText::incrementCursor(bool)+0x3d>
c00108da:	83 ec 0c             	sub    esp,0xc
c00108dd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108e0:	53                   	push   ebx
c00108e1:	e8 6c fe ff ff       	call   c0010752 <VgaText::scrollScreen()>
c00108e6:	83 c4 10             	add    esp,0x10
c00108e9:	89 f0                	mov    eax,esi
c00108eb:	84 c0                	test   al,al
c00108ed:	74 0c                	je     c00108fb <VgaText::incrementCursor(bool)+0x4f>
c00108ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108f3:	5a                   	pop    edx
c00108f4:	5b                   	pop    ebx
c00108f5:	5e                   	pop    esi
c00108f6:	e9 3b fd ff ff       	jmp    c0010636 <VgaText::updateCursor()>
c00108fb:	58                   	pop    eax
c00108fc:	5b                   	pop    ebx
c00108fd:	5e                   	pop    esi
c00108fe:	c3                   	ret    
c00108ff:	90                   	nop

c0010900 <VgaText::updateRAMUsageDisplay(int)>:
c0010900:	56                   	push   esi
c0010901:	8b 35 00 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e200
c0010907:	53                   	push   ebx
c0010908:	bb 0a 00 00 00       	mov    ebx,0xa
c001090d:	6a 0f                	push   0xf
c001090f:	6a 00                	push   0x0
c0010911:	e8 2a fe ff ff       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c0010916:	5a                   	pop    edx
c0010917:	59                   	pop    ecx
c0010918:	0f b6 c8             	movzx  ecx,al
c001091b:	51                   	push   ecx
c001091c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010920:	99                   	cdq    
c0010921:	f7 fb                	idiv   ebx
c0010923:	89 d3                	mov    ebx,edx
c0010925:	83 c0 30             	add    eax,0x30
c0010928:	83 c3 30             	add    ebx,0x30
c001092b:	0f be c0             	movsx  eax,al
c001092e:	0f b6 db             	movzx  ebx,bl
c0010931:	50                   	push   eax
c0010932:	e8 af fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010937:	5a                   	pop    edx
c0010938:	5a                   	pop    edx
c0010939:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010940:	51                   	push   ecx
c0010941:	53                   	push   ebx
c0010942:	e8 9f fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010947:	5b                   	pop    ebx
c0010948:	5a                   	pop    edx
c0010949:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010950:	51                   	push   ecx
c0010951:	6a 25                	push   0x25
c0010953:	e8 8e fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010958:	59                   	pop    ecx
c0010959:	5b                   	pop    ebx
c001095a:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010961:	5b                   	pop    ebx
c0010962:	5e                   	pop    esi
c0010963:	c3                   	ret    

c0010964 <VgaText::updateDiskUsage()>:
c0010964:	55                   	push   ebp
c0010965:	bd 10 27 00 00       	mov    ebp,0x2710
c001096a:	57                   	push   edi
c001096b:	8b 3d 00 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e200
c0010971:	56                   	push   esi
c0010972:	53                   	push   ebx
c0010973:	6a 0f                	push   0xf
c0010975:	6a 00                	push   0x0
c0010977:	e8 c4 fd ff ff       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c001097c:	5a                   	pop    edx
c001097d:	0f b6 d8             	movzx  ebx,al
c0010980:	59                   	pop    ecx
c0010981:	8b 35 34 36 03 c0    	mov    esi,DWORD PTR ds:0xc0033634
c0010987:	53                   	push   ebx
c0010988:	b9 0a 00 00 00       	mov    ecx,0xa
c001098d:	89 f0                	mov    eax,esi
c001098f:	99                   	cdq    
c0010990:	f7 fd                	idiv   ebp
c0010992:	99                   	cdq    
c0010993:	f7 f9                	idiv   ecx
c0010995:	8d 42 30             	lea    eax,[edx+0x30]
c0010998:	0f b6 c0             	movzx  eax,al
c001099b:	50                   	push   eax
c001099c:	e8 45 fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a1:	5d                   	pop    ebp
c00109a2:	bd e8 03 00 00       	mov    ebp,0x3e8
c00109a7:	5a                   	pop    edx
c00109a8:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00109ac:	53                   	push   ebx
c00109ad:	89 f0                	mov    eax,esi
c00109af:	99                   	cdq    
c00109b0:	f7 fd                	idiv   ebp
c00109b2:	99                   	cdq    
c00109b3:	f7 f9                	idiv   ecx
c00109b5:	8d 42 30             	lea    eax,[edx+0x30]
c00109b8:	0f b6 c0             	movzx  eax,al
c00109bb:	50                   	push   eax
c00109bc:	e8 25 fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c1:	5d                   	pop    ebp
c00109c2:	bd 64 00 00 00       	mov    ebp,0x64
c00109c7:	5a                   	pop    edx
c00109c8:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109cf:	53                   	push   ebx
c00109d0:	89 f0                	mov    eax,esi
c00109d2:	99                   	cdq    
c00109d3:	f7 fd                	idiv   ebp
c00109d5:	99                   	cdq    
c00109d6:	f7 f9                	idiv   ecx
c00109d8:	8d 42 30             	lea    eax,[edx+0x30]
c00109db:	0f b6 c0             	movzx  eax,al
c00109de:	50                   	push   eax
c00109df:	e8 02 fe ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00109e4:	5d                   	pop    ebp
c00109e5:	5a                   	pop    edx
c00109e6:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109ed:	53                   	push   ebx
c00109ee:	89 f0                	mov    eax,esi
c00109f0:	99                   	cdq    
c00109f1:	f7 f9                	idiv   ecx
c00109f3:	89 d6                	mov    esi,edx
c00109f5:	99                   	cdq    
c00109f6:	f7 f9                	idiv   ecx
c00109f8:	8d 42 30             	lea    eax,[edx+0x30]
c00109fb:	0f b6 c0             	movzx  eax,al
c00109fe:	50                   	push   eax
c00109ff:	e8 e2 fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a04:	5d                   	pop    ebp
c0010a05:	5a                   	pop    edx
c0010a06:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a0d:	53                   	push   ebx
c0010a0e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a11:	0f b6 f0             	movzx  esi,al
c0010a14:	56                   	push   esi
c0010a15:	e8 cc fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a1a:	5e                   	pop    esi
c0010a1b:	8b 35 30 36 03 c0    	mov    esi,DWORD PTR ds:0xc0033630
c0010a21:	5d                   	pop    ebp
c0010a22:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a29:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a2e:	53                   	push   ebx
c0010a2f:	89 f0                	mov    eax,esi
c0010a31:	99                   	cdq    
c0010a32:	f7 fd                	idiv   ebp
c0010a34:	99                   	cdq    
c0010a35:	f7 f9                	idiv   ecx
c0010a37:	8d 42 30             	lea    eax,[edx+0x30]
c0010a3a:	0f b6 c0             	movzx  eax,al
c0010a3d:	50                   	push   eax
c0010a3e:	e8 a3 fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a43:	5a                   	pop    edx
c0010a44:	5d                   	pop    ebp
c0010a45:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a4c:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a51:	53                   	push   ebx
c0010a52:	89 f0                	mov    eax,esi
c0010a54:	99                   	cdq    
c0010a55:	f7 fd                	idiv   ebp
c0010a57:	99                   	cdq    
c0010a58:	f7 f9                	idiv   ecx
c0010a5a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a5d:	0f b6 c0             	movzx  eax,al
c0010a60:	50                   	push   eax
c0010a61:	e8 80 fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a66:	5a                   	pop    edx
c0010a67:	5d                   	pop    ebp
c0010a68:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a6f:	bd 64 00 00 00       	mov    ebp,0x64
c0010a74:	53                   	push   ebx
c0010a75:	89 f0                	mov    eax,esi
c0010a77:	99                   	cdq    
c0010a78:	f7 fd                	idiv   ebp
c0010a7a:	99                   	cdq    
c0010a7b:	f7 f9                	idiv   ecx
c0010a7d:	83 c2 30             	add    edx,0x30
c0010a80:	0f b6 d2             	movzx  edx,dl
c0010a83:	52                   	push   edx
c0010a84:	e8 5d fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a89:	5a                   	pop    edx
c0010a8a:	5d                   	pop    ebp
c0010a8b:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a92:	53                   	push   ebx
c0010a93:	89 f0                	mov    eax,esi
c0010a95:	99                   	cdq    
c0010a96:	f7 f9                	idiv   ecx
c0010a98:	89 d6                	mov    esi,edx
c0010a9a:	99                   	cdq    
c0010a9b:	f7 f9                	idiv   ecx
c0010a9d:	8d 42 30             	lea    eax,[edx+0x30]
c0010aa0:	0f b6 c0             	movzx  eax,al
c0010aa3:	50                   	push   eax
c0010aa4:	e8 3d fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa9:	5a                   	pop    edx
c0010aaa:	59                   	pop    ecx
c0010aab:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010ab2:	53                   	push   ebx
c0010ab3:	8d 46 30             	lea    eax,[esi+0x30]
c0010ab6:	0f b6 f0             	movzx  esi,al
c0010ab9:	56                   	push   esi
c0010aba:	e8 27 fd ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010abf:	5b                   	pop    ebx
c0010ac0:	5e                   	pop    esi
c0010ac1:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ac8:	5b                   	pop    ebx
c0010ac9:	5e                   	pop    esi
c0010aca:	5f                   	pop    edi
c0010acb:	5d                   	pop    ebp
c0010acc:	c3                   	ret    
c0010acd:	90                   	nop

c0010ace <VgaText::updateTitle()>:
c0010ace:	53                   	push   ebx
c0010acf:	31 c0                	xor    eax,eax
c0010ad1:	83 ec 58             	sub    esp,0x58
c0010ad4:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ad8:	89 e1                	mov    ecx,esp
c0010ada:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ade:	40                   	inc    eax
c0010adf:	83 f8 50             	cmp    eax,0x50
c0010ae2:	75 f6                	jne    c0010ada <VgaText::updateTitle()+0xc>
c0010ae4:	31 c0                	xor    eax,eax
c0010ae6:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010aed:	84 db                	test   bl,bl
c0010aef:	74 06                	je     c0010af7 <VgaText::updateTitle()+0x29>
c0010af1:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010af4:	40                   	inc    eax
c0010af5:	eb ef                	jmp    c0010ae6 <VgaText::updateTitle()+0x18>
c0010af7:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010afa:	85 c0                	test   eax,eax
c0010afc:	74 09                	je     c0010b07 <VgaText::updateTitle()+0x39>
c0010afe:	53                   	push   ebx
c0010aff:	53                   	push   ebx
c0010b00:	51                   	push   ecx
c0010b01:	52                   	push   edx
c0010b02:	ff d0                	call   eax
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	e8 58 fe ff ff       	call   c0010964 <VgaText::updateDiskUsage()>
c0010b0c:	83 c4 58             	add    esp,0x58
c0010b0f:	5b                   	pop    ebx
c0010b10:	c3                   	ret    
c0010b11:	90                   	nop

c0010b12 <VgaText::setTitleTextColour(VgaColour)>:
c0010b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b16:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b1a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b1d:	eb af                	jmp    c0010ace <VgaText::updateTitle()>
c0010b1f:	90                   	nop

c0010b20 <VgaText::setTitleColour(VgaColour)>:
c0010b20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b28:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b2b:	eb a1                	jmp    c0010ace <VgaText::updateTitle()>
c0010b2d:	90                   	nop

c0010b2e <VgaText::setTitle(char*)>:
c0010b2e:	53                   	push   ebx
c0010b2f:	83 ec 10             	sub    esp,0x10
c0010b32:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b3a:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b40:	50                   	push   eax
c0010b41:	e8 ee fc fe ff       	call   c0000834 <strcpy>
c0010b46:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b4a:	83 c4 18             	add    esp,0x18
c0010b4d:	5b                   	pop    ebx
c0010b4e:	e9 7b ff ff ff       	jmp    c0010ace <VgaText::updateTitle()>
c0010b53:	90                   	nop

c0010b54 <VgaText::decrementCursor(bool)>:
c0010b54:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b5c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b5f:	85 c0                	test   eax,eax
c0010b61:	74 04                	je     c0010b67 <VgaText::decrementCursor(bool)+0x13>
c0010b63:	48                   	dec    eax
c0010b64:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b67:	84 c9                	test   cl,cl
c0010b69:	74 09                	je     c0010b74 <VgaText::decrementCursor(bool)+0x20>
c0010b6b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b6f:	e9 c2 fa ff ff       	jmp    c0010636 <VgaText::updateCursor()>
c0010b74:	c3                   	ret    
c0010b75:	90                   	nop

c0010b76 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b76:	53                   	push   ebx
c0010b77:	83 ec 08             	sub    esp,0x8
c0010b7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b82:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b8a:	3c 07                	cmp    al,0x7
c0010b8c:	75 2a                	jne    c0010bb8 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b8e:	a1 58 f4 02 c0       	mov    eax,ds:0xc002f458
c0010b93:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b9b:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010ba3:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010bab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010baf:	83 c4 08             	add    esp,0x8
c0010bb2:	5b                   	pop    ebx
c0010bb3:	e9 b4 30 00 00       	jmp    c0013c6c <Buzzer::beep(int, int, bool)>
c0010bb8:	3c 0d                	cmp    al,0xd
c0010bba:	75 09                	jne    c0010bc5 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010bbc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bc3:	eb 2c                	jmp    c0010bf1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010bc5:	3c 0a                	cmp    al,0xa
c0010bc7:	75 31                	jne    c0010bfa <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bc9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bcc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0010bd6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bd9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bdc:	75 0f                	jne    c0010bed <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bde:	83 ec 0c             	sub    esp,0xc
c0010be1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010be4:	53                   	push   ebx
c0010be5:	e8 68 fb ff ff       	call   c0010752 <VgaText::scrollScreen()>
c0010bea:	83 c4 10             	add    esp,0x10
c0010bed:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bf1:	83 c4 08             	add    esp,0x8
c0010bf4:	5b                   	pop    ebx
c0010bf5:	e9 3c fa ff ff       	jmp    c0010636 <VgaText::updateCursor()>
c0010bfa:	3c 08                	cmp    al,0x8
c0010bfc:	75 25                	jne    c0010c23 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010bfe:	50                   	push   eax
c0010bff:	50                   	push   eax
c0010c00:	6a 01                	push   0x1
c0010c02:	53                   	push   ebx
c0010c03:	e8 4c ff ff ff       	call   c0010b54 <VgaText::decrementCursor(bool)>
c0010c08:	5a                   	pop    edx
c0010c09:	59                   	pop    ecx
c0010c0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c0d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c10:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010c13:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010c16:	6a 20                	push   0x20
c0010c18:	53                   	push   ebx
c0010c19:	e8 da fb ff ff       	call   c00107f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c1e:	83 c4 28             	add    esp,0x28
c0010c21:	5b                   	pop    ebx
c0010c22:	c3                   	ret    
c0010c23:	83 ec 08             	sub    esp,0x8
c0010c26:	0f be c0             	movsx  eax,al
c0010c29:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c2f:	51                   	push   ecx
c0010c30:	52                   	push   edx
c0010c31:	50                   	push   eax
c0010c32:	53                   	push   ebx
c0010c33:	e8 c0 fb ff ff       	call   c00107f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c38:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c3c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c44:	83 c4 28             	add    esp,0x28
c0010c47:	5b                   	pop    ebx
c0010c48:	e9 5f fc ff ff       	jmp    c00108ac <VgaText::incrementCursor(bool)>
c0010c4d:	90                   	nop

c0010c4e <VgaText::isShowingCursor()>:
c0010c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c52:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c55:	c3                   	ret    

c0010c56 <VgaText::isBlinkDisabled()>:
c0010c56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c5a:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c5d:	83 f0 01             	xor    eax,0x1
c0010c60:	c3                   	ret    
c0010c61:	90                   	nop

c0010c62 <VgaText::setCursorHeight(int)>:
c0010c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c6a:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c6d:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c75:	e9 d2 f9 ff ff       	jmp    c001064c <VgaText::showCursor(bool)>

c0010c7a <VgaText::getCursorHeight()>:
c0010c7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c7e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c81:	c3                   	ret    

c0010c82 <setActiveTerminal(VgaText*)>:
c0010c82:	53                   	push   ebx
c0010c83:	83 ec 08             	sub    esp,0x8
c0010c86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c8a:	85 db                	test   ebx,ebx
c0010c8c:	75 11                	jne    c0010c9f <setActiveTerminal(VgaText*)+0x1d>
c0010c8e:	c7 44 24 10 ec b0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b0ec
c0010c96:	83 c4 08             	add    esp,0x8
c0010c99:	5b                   	pop    ebx
c0010c9a:	e9 5a 9c 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c0010c9f:	50                   	push   eax
c0010ca0:	50                   	push   eax
c0010ca1:	53                   	push   ebx
c0010ca2:	68 fa b0 02 c0       	push   0xc002b0fa
c0010ca7:	e8 b3 21 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0010cac:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c0010cb1:	83 c4 10             	add    esp,0x10
c0010cb4:	85 c0                	test   eax,eax
c0010cb6:	74 0c                	je     c0010cc4 <setActiveTerminal(VgaText*)+0x42>
c0010cb8:	83 ec 0c             	sub    esp,0xc
c0010cbb:	50                   	push   eax
c0010cbc:	e8 75 f9 ff ff       	call   c0010636 <VgaText::updateCursor()>
c0010cc1:	83 c4 10             	add    esp,0x10
c0010cc4:	89 1d a4 f3 02 c0    	mov    DWORD PTR ds:0xc002f3a4,ebx
c0010cca:	51                   	push   ecx
c0010ccb:	51                   	push   ecx
c0010ccc:	53                   	push   ebx
c0010ccd:	68 12 b1 02 c0       	push   0xc002b112
c0010cd2:	e8 88 21 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0010cd7:	83 c4 0c             	add    esp,0xc
c0010cda:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cdd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010ce0:	53                   	push   ebx
c0010ce1:	e8 7e fb ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c0010ce6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce9:	e8 68 ff ff ff       	call   c0010c56 <VgaText::isBlinkDisabled()>
c0010cee:	5a                   	pop    edx
c0010cef:	0f b6 c0             	movzx  eax,al
c0010cf2:	59                   	pop    ecx
c0010cf3:	50                   	push   eax
c0010cf4:	53                   	push   ebx
c0010cf5:	e8 5e f9 ff ff       	call   c0010658 <VgaText::disableBlink(bool)>
c0010cfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cfd:	e8 78 ff ff ff       	call   c0010c7a <VgaText::getCursorHeight()>
c0010d02:	5a                   	pop    edx
c0010d03:	59                   	pop    ecx
c0010d04:	50                   	push   eax
c0010d05:	53                   	push   ebx
c0010d06:	e8 57 ff ff ff       	call   c0010c62 <VgaText::setCursorHeight(int)>
c0010d0b:	83 c4 10             	add    esp,0x10
c0010d0e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010d12:	75 07                	jne    c0010d1b <setActiveTerminal(VgaText*)+0x99>
c0010d14:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d1f:	83 c4 08             	add    esp,0x8
c0010d22:	5b                   	pop    ebx
c0010d23:	e9 c0 f8 ff ff       	jmp    c00105e8 <VgaText::load()>

c0010d28 <doTerminalCycle()>:
c0010d28:	83 ec 18             	sub    esp,0x18
c0010d2b:	a1 a0 f3 02 c0       	mov    eax,ds:0xc002f3a0
c0010d30:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d33:	50                   	push   eax
c0010d34:	a3 a0 f3 02 c0       	mov    ds:0xc002f3a0,eax
c0010d39:	e8 44 ff ff ff       	call   c0010c82 <setActiveTerminal(VgaText*)>
c0010d3e:	83 c4 1c             	add    esp,0x1c
c0010d41:	c3                   	ret    

c0010d42 <VgaText::doUpdate()>:
c0010d42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d46:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d49:	85 c0                	test   eax,eax
c0010d4b:	74 02                	je     c0010d4f <VgaText::doUpdate()+0xd>
c0010d4d:	ff e0                	jmp    eax
c0010d4f:	c3                   	ret    

c0010d50 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d50:	55                   	push   ebp
c0010d51:	31 ed                	xor    ebp,ebp
c0010d53:	57                   	push   edi
c0010d54:	56                   	push   esi
c0010d55:	53                   	push   ebx
c0010d56:	83 ec 1c             	sub    esp,0x1c
c0010d59:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d5d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d62:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d69:	50                   	push   eax
c0010d6a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d6f:	50                   	push   eax
c0010d70:	e8 cb f9 ff ff       	call   c0010740 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d75:	59                   	pop    ecx
c0010d76:	0f b6 c0             	movzx  eax,al
c0010d79:	5e                   	pop    esi
c0010d7a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d83:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d8a:	0f b7 f6             	movzx  esi,si
c0010d8d:	01 f6                	add    esi,esi
c0010d8f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d92:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d95:	84 c0                	test   al,al
c0010d97:	0f 84 fd 00 00 00    	je     c0010e9a <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d9d:	3c 0d                	cmp    al,0xd
c0010d9f:	75 0c                	jne    c0010dad <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010da1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010da8:	e9 e7 00 00 00       	jmp    c0010e94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010dad:	3c 0a                	cmp    al,0xa
c0010daf:	75 47                	jne    c0010df8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010db1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010db4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010dbb:	8d 48 01             	lea    ecx,[eax+0x1]
c0010dbe:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010dc1:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010dc4:	75 0f                	jne    c0010dd5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010dc6:	83 ec 0c             	sub    esp,0xc
c0010dc9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010dcc:	53                   	push   ebx
c0010dcd:	e8 80 f9 ff ff       	call   c0010752 <VgaText::scrollScreen()>
c0010dd2:	83 c4 10             	add    esp,0x10
c0010dd5:	83 ec 0c             	sub    esp,0xc
c0010dd8:	31 ed                	xor    ebp,ebp
c0010dda:	53                   	push   ebx
c0010ddb:	e8 56 f8 ff ff       	call   c0010636 <VgaText::updateCursor()>
c0010de0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010de5:	83 c4 10             	add    esp,0x10
c0010de8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010deb:	0f b7 f6             	movzx  esi,si
c0010dee:	01 f6                	add    esi,esi
c0010df0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010df3:	e9 9c 00 00 00       	jmp    c0010e94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010df8:	3c 08                	cmp    al,0x8
c0010dfa:	75 35                	jne    c0010e31 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010dfc:	56                   	push   esi
c0010dfd:	56                   	push   esi
c0010dfe:	6a 01                	push   0x1
c0010e00:	53                   	push   ebx
c0010e01:	e8 4e fd ff ff       	call   c0010b54 <VgaText::decrementCursor(bool)>
c0010e06:	58                   	pop    eax
c0010e07:	5a                   	pop    edx
c0010e08:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e0b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e0e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010e11:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010e14:	6a 20                	push   0x20
c0010e16:	53                   	push   ebx
c0010e17:	e8 dc f9 ff ff       	call   c00107f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e1c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e21:	83 c4 20             	add    esp,0x20
c0010e24:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e27:	0f b7 f6             	movzx  esi,si
c0010e2a:	01 f6                	add    esi,esi
c0010e2c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e2f:	eb 63                	jmp    c0010e94 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e31:	51                   	push   ecx
c0010e32:	51                   	push   ecx
c0010e33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e37:	50                   	push   eax
c0010e38:	e8 a9 f9 ff ff       	call   c00107e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010e3d:	83 c4 10             	add    esp,0x10
c0010e40:	66 89 06             	mov    WORD PTR [esi],ax
c0010e43:	39 1d a4 f3 02 c0    	cmp    DWORD PTR ds:0xc002f3a4,ebx
c0010e49:	75 21                	jne    c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e4b:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e4e:	85 c0                	test   eax,eax
c0010e50:	74 1a                	je     c0010e6c <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e52:	52                   	push   edx
c0010e53:	52                   	push   edx
c0010e54:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e57:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e5a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e5e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e62:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e65:	51                   	push   ecx
c0010e66:	53                   	push   ebx
c0010e67:	ff d0                	call   eax
c0010e69:	83 c4 20             	add    esp,0x20
c0010e6c:	83 c6 02             	add    esi,0x2
c0010e6f:	50                   	push   eax
c0010e70:	50                   	push   eax
c0010e71:	6a 00                	push   0x0
c0010e73:	53                   	push   ebx
c0010e74:	e8 33 fa ff ff       	call   c00108ac <VgaText::incrementCursor(bool)>
c0010e79:	83 c4 10             	add    esp,0x10
c0010e7c:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e80:	75 0d                	jne    c0010e8f <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e82:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e87:	0f b7 f6             	movzx  esi,si
c0010e8a:	01 f6                	add    esi,esi
c0010e8c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e8f:	bd 01 00 00 00       	mov    ebp,0x1
c0010e94:	47                   	inc    edi
c0010e95:	e9 f8 fe ff ff       	jmp    c0010d92 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e9a:	83 ec 0c             	sub    esp,0xc
c0010e9d:	53                   	push   ebx
c0010e9e:	e8 93 f7 ff ff       	call   c0010636 <VgaText::updateCursor()>
c0010ea3:	83 c4 10             	add    esp,0x10
c0010ea6:	89 e8                	mov    eax,ebp
c0010ea8:	84 c0                	test   al,al
c0010eaa:	74 0c                	je     c0010eb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010eac:	83 ec 0c             	sub    esp,0xc
c0010eaf:	53                   	push   ebx
c0010eb0:	e8 8d fe ff ff       	call   c0010d42 <VgaText::doUpdate()>
c0010eb5:	83 c4 10             	add    esp,0x10
c0010eb8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ebf:	83 c4 1c             	add    esp,0x1c
c0010ec2:	5b                   	pop    ebx
c0010ec3:	5e                   	pop    esi
c0010ec4:	5f                   	pop    edi
c0010ec5:	5d                   	pop    ebp
c0010ec6:	c3                   	ret    
c0010ec7:	90                   	nop

c0010ec8 <VgaText::clearScreen()>:
c0010ec8:	57                   	push   edi
c0010ec9:	56                   	push   esi
c0010eca:	31 f6                	xor    esi,esi
c0010ecc:	53                   	push   ebx
c0010ecd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010ed1:	52                   	push   edx
c0010ed2:	6a 00                	push   0x0
c0010ed4:	6a 00                	push   0x0
c0010ed6:	53                   	push   ebx
c0010ed7:	e8 88 f9 ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c0010edc:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ee3:	83 c4 10             	add    esp,0x10
c0010ee6:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ee9:	7e 20                	jle    c0010f0b <VgaText::clearScreen()+0x43>
c0010eeb:	31 ff                	xor    edi,edi
c0010eed:	50                   	push   eax
c0010eee:	50                   	push   eax
c0010eef:	56                   	push   esi
c0010ef0:	57                   	push   edi
c0010ef1:	47                   	inc    edi
c0010ef2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ef5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ef8:	6a 20                	push   0x20
c0010efa:	53                   	push   ebx
c0010efb:	e8 f8 f8 ff ff       	call   c00107f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f00:	83 c4 20             	add    esp,0x20
c0010f03:	83 ff 50             	cmp    edi,0x50
c0010f06:	75 e5                	jne    c0010eed <VgaText::clearScreen()+0x25>
c0010f08:	46                   	inc    esi
c0010f09:	eb db                	jmp    c0010ee6 <VgaText::clearScreen()+0x1e>
c0010f0b:	83 ec 0c             	sub    esp,0xc
c0010f0e:	53                   	push   ebx
c0010f0f:	e8 2e fe ff ff       	call   c0010d42 <VgaText::doUpdate()>
c0010f14:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	5b                   	pop    ebx
c0010f1f:	5e                   	pop    esi
c0010f20:	5f                   	pop    edi
c0010f21:	c3                   	ret    

c0010f22 <VgaText::putchar(char)>:
c0010f22:	56                   	push   esi
c0010f23:	53                   	push   ebx
c0010f24:	83 ec 14             	sub    esp,0x14
c0010f27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f2b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f2f:	3c 5b                	cmp    al,0x5b
c0010f31:	75 18                	jne    c0010f4b <VgaText::putchar(char)+0x29>
c0010f33:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f37:	74 1f                	je     c0010f58 <VgaText::putchar(char)+0x36>
c0010f39:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f3f:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f46:	e9 bd 00 00 00       	jmp    c0011008 <VgaText::putchar(char)+0xe6>
c0010f4b:	3c 1b                	cmp    al,0x1b
c0010f4d:	75 09                	jne    c0010f58 <VgaText::putchar(char)+0x36>
c0010f4f:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f53:	e9 b0 00 00 00       	jmp    c0011008 <VgaText::putchar(char)+0xe6>
c0010f58:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f5b:	84 c9                	test   cl,cl
c0010f5d:	0f 84 92 00 00 00    	je     c0010ff5 <VgaText::putchar(char)+0xd3>
c0010f63:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f66:	80 fa 3e             	cmp    dl,0x3e
c0010f69:	77 76                	ja     c0010fe1 <VgaText::putchar(char)+0xbf>
c0010f6b:	3c 6d                	cmp    al,0x6d
c0010f6d:	75 47                	jne    c0010fb6 <VgaText::putchar(char)+0x94>
c0010f6f:	31 f6                	xor    esi,esi
c0010f71:	31 d2                	xor    edx,edx
c0010f73:	31 c0                	xor    eax,eax
c0010f75:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f78:	7e 2d                	jle    c0010fa7 <VgaText::putchar(char)+0x85>
c0010f7a:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f7f:	80 fa 3b             	cmp    dl,0x3b
c0010f82:	75 17                	jne    c0010f9b <VgaText::putchar(char)+0x79>
c0010f84:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f88:	50                   	push   eax
c0010f89:	53                   	push   ebx
c0010f8a:	e8 fd f6 ff ff       	call   c001068c <VgaText::doANSI_SGR(int)>
c0010f8f:	59                   	pop    ecx
c0010f90:	31 d2                	xor    edx,edx
c0010f92:	58                   	pop    eax
c0010f93:	31 c0                	xor    eax,eax
c0010f95:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f99:	eb 09                	jmp    c0010fa4 <VgaText::putchar(char)+0x82>
c0010f9b:	6b c0 0a             	imul   eax,eax,0xa
c0010f9e:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010fa2:	88 ca                	mov    dl,cl
c0010fa4:	46                   	inc    esi
c0010fa5:	eb ce                	jmp    c0010f75 <VgaText::putchar(char)+0x53>
c0010fa7:	84 d2                	test   dl,dl
c0010fa9:	74 2e                	je     c0010fd9 <VgaText::putchar(char)+0xb7>
c0010fab:	50                   	push   eax
c0010fac:	53                   	push   ebx
c0010fad:	e8 da f6 ff ff       	call   c001068c <VgaText::doANSI_SGR(int)>
c0010fb2:	58                   	pop    eax
c0010fb3:	5a                   	pop    edx
c0010fb4:	eb 23                	jmp    c0010fd9 <VgaText::putchar(char)+0xb7>
c0010fb6:	3c 4a                	cmp    al,0x4a
c0010fb8:	75 1f                	jne    c0010fd9 <VgaText::putchar(char)+0xb7>
c0010fba:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fbe:	75 19                	jne    c0010fd9 <VgaText::putchar(char)+0xb7>
c0010fc0:	83 ec 0c             	sub    esp,0xc
c0010fc3:	53                   	push   ebx
c0010fc4:	e8 ff fe ff ff       	call   c0010ec8 <VgaText::clearScreen()>
c0010fc9:	83 c4 0c             	add    esp,0xc
c0010fcc:	6a 00                	push   0x0
c0010fce:	6a 00                	push   0x0
c0010fd0:	53                   	push   ebx
c0010fd1:	e8 8e f8 ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c0010fd6:	83 c4 10             	add    esp,0x10
c0010fd9:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fdf:	eb 27                	jmp    c0011008 <VgaText::putchar(char)+0xe6>
c0010fe1:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fe4:	83 fa 0e             	cmp    edx,0xe
c0010fe7:	7f 1f                	jg     c0011008 <VgaText::putchar(char)+0xe6>
c0010fe9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fec:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fef:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010ff3:	eb 13                	jmp    c0011008 <VgaText::putchar(char)+0xe6>
c0010ff5:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010ff8:	0f be c0             	movsx  eax,al
c0010ffb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ffe:	50                   	push   eax
c0010fff:	53                   	push   ebx
c0011000:	e8 71 fb ff ff       	call   c0010b76 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011005:	83 c4 10             	add    esp,0x10
c0011008:	83 c4 14             	add    esp,0x14
c001100b:	5b                   	pop    ebx
c001100c:	5e                   	pop    esi
c001100d:	c3                   	ret    

c001100e <VgaText::puts(char const*)>:
c001100e:	53                   	push   ebx
c001100f:	83 ec 08             	sub    esp,0x8
c0011012:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011016:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011019:	84 c0                	test   al,al
c001101b:	74 12                	je     c001102f <VgaText::puts(char const*)+0x21>
c001101d:	43                   	inc    ebx
c001101e:	51                   	push   ecx
c001101f:	51                   	push   ecx
c0011020:	50                   	push   eax
c0011021:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011025:	e8 f8 fe ff ff       	call   c0010f22 <VgaText::putchar(char)>
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	eb e7                	jmp    c0011016 <VgaText::puts(char const*)+0x8>
c001102f:	83 c4 08             	add    esp,0x8
c0011032:	5b                   	pop    ebx
c0011033:	c3                   	ret    

c0011034 <VgaText::putx(unsigned int)>:
c0011034:	57                   	push   edi
c0011035:	b9 11 00 00 00       	mov    ecx,0x11
c001103a:	56                   	push   esi
c001103b:	be 2e b1 02 c0       	mov    esi,0xc002b12e
c0011040:	53                   	push   ebx
c0011041:	83 ec 20             	sub    esp,0x20
c0011044:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011048:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001104c:	fc                   	cld    
c001104d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001104f:	be 08 00 00 00       	mov    esi,0x8
c0011054:	50                   	push   eax
c0011055:	50                   	push   eax
c0011056:	89 d8                	mov    eax,ebx
c0011058:	c1 e3 04             	shl    ebx,0x4
c001105b:	c1 e8 1c             	shr    eax,0x1c
c001105e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011063:	50                   	push   eax
c0011064:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011068:	e8 b5 fe ff ff       	call   c0010f22 <VgaText::putchar(char)>
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	4e                   	dec    esi
c0011071:	75 e1                	jne    c0011054 <VgaText::putx(unsigned int)+0x20>
c0011073:	83 c4 20             	add    esp,0x20
c0011076:	5b                   	pop    ebx
c0011077:	5e                   	pop    esi
c0011078:	5f                   	pop    edi
c0011079:	c3                   	ret    

c001107a <VgaText::VgaText(char const*)>:
c001107a:	57                   	push   edi
c001107b:	56                   	push   esi
c001107c:	53                   	push   ebx
c001107d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011081:	83 ec 08             	sub    esp,0x8
c0011084:	6a 00                	push   0x0
c0011086:	50                   	push   eax
c0011087:	e8 8a 05 00 00       	call   c0011616 <UnixFile::UnixFile(int)>
c001108c:	83 c4 10             	add    esp,0x10
c001108f:	ba 94 b1 02 c0       	mov    edx,0xc002b194
c0011094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011098:	89 10                	mov    DWORD PTR [eax],edx
c001109a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c00110a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a9:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c00110b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b4:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110bc:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c4:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cf:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110da:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110e5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f0:	8d 50 60             	lea    edx,[eax+0x60]
c00110f3:	bb 80 f3 02 c0       	mov    ebx,0xc002f380
c00110f8:	b8 08 00 00 00       	mov    eax,0x8
c00110fd:	fc                   	cld    
c00110fe:	89 d7                	mov    edi,edx
c0011100:	89 de                	mov    esi,ebx
c0011102:	89 c1                	mov    ecx,eax
c0011104:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110a:	05 82 00 00 00       	add    eax,0x82
c001110f:	83 ec 08             	sub    esp,0x8
c0011112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011116:	50                   	push   eax
c0011117:	e8 18 f7 fe ff       	call   c0000834 <strcpy>
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011123:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c001112a:	83 ec 0c             	sub    esp,0xc
c001112d:	6a 01                	push   0x1
c001112f:	e8 25 09 00 00       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0011134:	83 c4 10             	add    esp,0x10
c0011137:	89 c2                	mov    edx,eax
c0011139:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011140:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0011146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001114d:	89 c6                	mov    esi,eax
c001114f:	e8 cc ed ff ff       	call   c000ff20 <Phys::allocatePage()>
c0011154:	6a 05                	push   0x5
c0011156:	56                   	push   esi
c0011157:	50                   	push   eax
c0011158:	53                   	push   ebx
c0011159:	e8 32 11 00 00       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c001115e:	83 c4 10             	add    esp,0x10
c0011161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011165:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011168:	83 ec 04             	sub    esp,0x4
c001116b:	68 00 0f 00 00       	push   0xf00
c0011170:	6a 00                	push   0x0
c0011172:	50                   	push   eax
c0011173:	e8 00 f6 fe ff       	call   c0000778 <memset>
c0011178:	83 c4 10             	add    esp,0x10
c001117b:	83 ec 04             	sub    esp,0x4
c001117e:	6a 00                	push   0x0
c0011180:	6a 07                	push   0x7
c0011182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011186:	e8 95 f5 ff ff       	call   c0010720 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001118b:	83 c4 10             	add    esp,0x10
c001118e:	83 ec 08             	sub    esp,0x8
c0011191:	6a 02                	push   0x2
c0011193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011197:	e8 c6 fa ff ff       	call   c0010c62 <VgaText::setCursorHeight(int)>
c001119c:	83 c4 10             	add    esp,0x10
c001119f:	83 ec 04             	sub    esp,0x4
c00111a2:	6a 00                	push   0x0
c00111a4:	6a 00                	push   0x0
c00111a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111aa:	e8 b5 f6 ff ff       	call   c0010864 <VgaText::setCursor(int, int)>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	83 ec 08             	sub    esp,0x8
c00111b5:	6a 01                	push   0x1
c00111b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bb:	e8 8c f4 ff ff       	call   c001064c <VgaText::showCursor(bool)>
c00111c0:	83 c4 10             	add    esp,0x10
c00111c3:	83 ec 08             	sub    esp,0x8
c00111c6:	6a 01                	push   0x1
c00111c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111cc:	e8 87 f4 ff ff       	call   c0010658 <VgaText::disableBlink(bool)>
c00111d1:	83 c4 10             	add    esp,0x10
c00111d4:	83 ec 0c             	sub    esp,0xc
c00111d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111db:	e8 e8 fc ff ff       	call   c0010ec8 <VgaText::clearScreen()>
c00111e0:	83 c4 10             	add    esp,0x10
c00111e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e7:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ef:	05 02 01 00 00       	add    eax,0x102
c00111f4:	83 ec 04             	sub    esp,0x4
c00111f7:	68 96 00 00 00       	push   0x96
c00111fc:	6a 00                	push   0x0
c00111fe:	50                   	push   eax
c00111ff:	e8 74 f5 fe ff       	call   c0000778 <memset>
c0011204:	83 c4 10             	add    esp,0x10
c0011207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001120b:	05 98 01 00 00       	add    eax,0x198
c0011210:	83 ec 04             	sub    esp,0x4
c0011213:	68 2c 01 00 00       	push   0x12c
c0011218:	6a 00                	push   0x0
c001121a:	50                   	push   eax
c001121b:	e8 58 f5 fe ff       	call   c0000778 <memset>
c0011220:	83 c4 10             	add    esp,0x10
c0011223:	90                   	nop
c0011224:	5b                   	pop    ebx
c0011225:	5e                   	pop    esi
c0011226:	5f                   	pop    edi
c0011227:	c3                   	ret    

c0011228 <VgaText::receiveKey(unsigned char)>:
c0011228:	55                   	push   ebp
c0011229:	57                   	push   edi
c001122a:	56                   	push   esi
c001122b:	53                   	push   ebx
c001122c:	83 ec 1c             	sub    esp,0x1c
c001122f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011233:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011237:	84 db                	test   bl,bl
c0011239:	0f 84 c9 00 00 00    	je     c0011308 <VgaText::receiveKey(unsigned char)+0xe0>
c001123f:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0011245:	80 fb 08             	cmp    bl,0x8
c0011248:	75 2c                	jne    c0011276 <VgaText::receiveKey(unsigned char)+0x4e>
c001124a:	83 ec 0c             	sub    esp,0xc
c001124d:	57                   	push   edi
c001124e:	e8 41 f5 fe ff       	call   c0000794 <strlen>
c0011253:	83 c4 10             	add    esp,0x10
c0011256:	85 c0                	test   eax,eax
c0011258:	74 41                	je     c001129b <VgaText::receiveKey(unsigned char)+0x73>
c001125a:	50                   	push   eax
c001125b:	50                   	push   eax
c001125c:	6a 08                	push   0x8
c001125e:	56                   	push   esi
c001125f:	e8 be fc ff ff       	call   c0010f22 <VgaText::putchar(char)>
c0011264:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011267:	e8 28 f5 fe ff       	call   c0000794 <strlen>
c001126c:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0011274:	eb 22                	jmp    c0011298 <VgaText::receiveKey(unsigned char)+0x70>
c0011276:	0f be c3             	movsx  eax,bl
c0011279:	52                   	push   edx
c001127a:	52                   	push   edx
c001127b:	50                   	push   eax
c001127c:	56                   	push   esi
c001127d:	e8 a0 fc ff ff       	call   c0010f22 <VgaText::putchar(char)>
c0011282:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0011286:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001128b:	59                   	pop    ecx
c001128c:	5d                   	pop    ebp
c001128d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011291:	50                   	push   eax
c0011292:	57                   	push   edi
c0011293:	e8 dc f6 fe ff       	call   c0000974 <strcat>
c0011298:	83 c4 10             	add    esp,0x10
c001129b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c00112a2:	75 05                	jne    c00112a9 <VgaText::receiveKey(unsigned char)+0x81>
c00112a4:	80 fb 0a             	cmp    bl,0xa
c00112a7:	75 53                	jne    c00112fc <VgaText::receiveKey(unsigned char)+0xd4>
c00112a9:	83 ec 0c             	sub    esp,0xc
c00112ac:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c00112b2:	53                   	push   ebx
c00112b3:	e8 dc f4 fe ff       	call   c0000794 <strlen>
c00112b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112bb:	89 c5                	mov    ebp,eax
c00112bd:	e8 d2 f4 fe ff       	call   c0000794 <strlen>
c00112c2:	83 c4 10             	add    esp,0x10
c00112c5:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112c9:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112ce:	76 10                	jbe    c00112e0 <VgaText::receiveKey(unsigned char)+0xb8>
c00112d0:	83 ec 0c             	sub    esp,0xc
c00112d3:	68 3f b1 02 c0       	push   0xc002b13f
c00112d8:	e8 1c 96 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00112dd:	83 c4 10             	add    esp,0x10
c00112e0:	50                   	push   eax
c00112e1:	50                   	push   eax
c00112e2:	57                   	push   edi
c00112e3:	53                   	push   ebx
c00112e4:	e8 8b f6 fe ff       	call   c0000974 <strcat>
c00112e9:	83 c4 0c             	add    esp,0xc
c00112ec:	68 96 00 00 00       	push   0x96
c00112f1:	6a 00                	push   0x0
c00112f3:	57                   	push   edi
c00112f4:	e8 7f f4 fe ff       	call   c0000778 <memset>
c00112f9:	83 c4 10             	add    esp,0x10
c00112fc:	83 ec 0c             	sub    esp,0xc
c00112ff:	56                   	push   esi
c0011300:	e8 3d fa ff ff       	call   c0010d42 <VgaText::doUpdate()>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	83 c4 1c             	add    esp,0x1c
c001130b:	5b                   	pop    ebx
c001130c:	5e                   	pop    esi
c001130d:	5f                   	pop    edi
c001130e:	5d                   	pop    ebp
c001130f:	c3                   	ret    

c0011310 <VgaText::write(unsigned long long, void*, int*)>:
c0011310:	55                   	push   ebp
c0011311:	57                   	push   edi
c0011312:	56                   	push   esi
c0011313:	53                   	push   ebx
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001131b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001131f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011323:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001132a:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001132d:	39 eb                	cmp    ebx,ebp
c001132f:	74 13                	je     c0011344 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011331:	43                   	inc    ebx
c0011332:	50                   	push   eax
c0011333:	50                   	push   eax
c0011334:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011338:	50                   	push   eax
c0011339:	56                   	push   esi
c001133a:	e8 e3 fb ff ff       	call   c0010f22 <VgaText::putchar(char)>
c001133f:	83 c4 10             	add    esp,0x10
c0011342:	eb e9                	jmp    c001132d <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011344:	83 ec 0c             	sub    esp,0xc
c0011347:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c001134e:	56                   	push   esi
c001134f:	e8 ee f9 ff ff       	call   c0010d42 <VgaText::doUpdate()>
c0011354:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011358:	89 38                	mov    DWORD PTR [eax],edi
c001135a:	83 c4 1c             	add    esp,0x1c
c001135d:	31 c0                	xor    eax,eax
c001135f:	5b                   	pop    ebx
c0011360:	5e                   	pop    esi
c0011361:	5f                   	pop    edi
c0011362:	5d                   	pop    ebp
c0011363:	c3                   	ret    

c0011364 <newTerminal(char*)>:
c0011364:	83 ec 28             	sub    esp,0x28
c0011367:	68 c4 02 00 00       	push   0x2c4
c001136c:	e8 43 e5 ff ff       	call   c000f8b4 <malloc>
c0011371:	5a                   	pop    edx
c0011372:	59                   	pop    ecx
c0011373:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011377:	50                   	push   eax
c0011378:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001137c:	e8 f9 fc ff ff       	call   c001107a <VgaText::VgaText(char const*)>
c0011381:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011385:	83 c4 2c             	add    esp,0x2c
c0011388:	c3                   	ret    
c0011389:	90                   	nop

c001138a <TSS::TSS()>:
c001138a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001138e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011395:	90                   	nop
c0011396:	c3                   	ret    
c0011397:	90                   	nop

c0011398 <TSS::setESP(unsigned long)>:
c0011398:	55                   	push   ebp
c0011399:	89 e5                	mov    ebp,esp
c001139b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001139e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00113a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113a7:	90                   	nop
c00113a8:	5d                   	pop    ebp
c00113a9:	c3                   	ret    

c00113aa <TSS::flush()>:
c00113aa:	55                   	push   ebp
c00113ab:	89 e5                	mov    ebp,esp
c00113ad:	83 ec 10             	sub    esp,0x10
c00113b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00113b5:	83 c8 03             	or     eax,0x3
c00113b8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113bc:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113c0:	66 89 d0             	mov    ax,dx
c00113c3:	0f 00 d8             	ltr    ax
c00113c6:	90                   	nop
c00113c7:	c9                   	leave  
c00113c8:	c3                   	ret    
c00113c9:	90                   	nop

c00113ca <TSS::setup(unsigned long, unsigned long)>:
c00113ca:	55                   	push   ebp
c00113cb:	89 e5                	mov    ebp,esp
c00113cd:	83 ec 18             	sub    esp,0x18
c00113d0:	83 ec 0c             	sub    esp,0xc
c00113d3:	6a 68                	push   0x68
c00113d5:	e8 da e4 ff ff       	call   c000f8b4 <malloc>
c00113da:	83 c4 10             	add    esp,0x10
c00113dd:	89 c2                	mov    edx,eax
c00113df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113eb:	83 ec 04             	sub    esp,0x4
c00113ee:	6a 68                	push   0x68
c00113f0:	6a 00                	push   0x0
c00113f2:	50                   	push   eax
c00113f3:	e8 80 f3 fe ff       	call   c0000778 <memset>
c00113f8:	83 c4 10             	add    esp,0x10
c00113fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140d:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011419:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001141c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001141f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011425:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c001142b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011431:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0011437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143d:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c001144f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011470:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011476:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011479:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001147c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001147f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011482:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011485:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c001148c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001148f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011492:	0f 20 da             	mov    edx,cr3
c0011495:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011498:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001149b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001149e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114a4:	83 ec 08             	sub    esp,0x8
c00114a7:	50                   	push   eax
c00114a8:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114ab:	50                   	push   eax
c00114ac:	e8 df db ff ff       	call   c000f090 <GDTEntry::setBase(unsigned int)>
c00114b1:	83 c4 10             	add    esp,0x10
c00114b4:	83 ec 08             	sub    esp,0x8
c00114b7:	6a 68                	push   0x68
c00114b9:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114bc:	50                   	push   eax
c00114bd:	e8 ea db ff ff       	call   c000f0ac <GDTEntry::setLimit(unsigned int)>
c00114c2:	83 c4 10             	add    esp,0x10
c00114c5:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114c9:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114cc:	83 e0 0f             	and    eax,0xf
c00114cf:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114d2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114d5:	83 c8 40             	or     eax,0x40
c00114d8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114db:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00114e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114e6:	05 78 01 00 00       	add    eax,0x178
c00114eb:	83 ec 04             	sub    esp,0x4
c00114ee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114f1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114f4:	50                   	push   eax
c00114f5:	e8 e6 db ff ff       	call   c000f0e0 <GDT::addEntry(GDTEntry)>
c00114fa:	83 c4 10             	add    esp,0x10
c00114fd:	89 c2                	mov    edx,eax
c00114ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011502:	89 10                	mov    DWORD PTR [eax],edx
c0011504:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0011509:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001150f:	05 78 01 00 00       	add    eax,0x178
c0011514:	83 ec 0c             	sub    esp,0xc
c0011517:	50                   	push   eax
c0011518:	e8 07 dc ff ff       	call   c000f124 <GDT::flush()>
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011523:	8b 00                	mov    eax,DWORD PTR [eax]
c0011525:	83 ec 08             	sub    esp,0x8
c0011528:	50                   	push   eax
c0011529:	68 a8 b1 02 c0       	push   0xc002b1a8
c001152e:	e8 2c 19 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011533:	83 c4 10             	add    esp,0x10
c0011536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011539:	8b 00                	mov    eax,DWORD PTR [eax]
c001153b:	c9                   	leave  
c001153c:	c3                   	ret    
c001153d:	90                   	nop

c001153e <ReservedFilename::read(unsigned long long, void*, int*)>:
c001153e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011542:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011546:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011549:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001154e:	75 08                	jne    c0011558 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011550:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011556:	eb 38                	jmp    c0011590 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011558:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001155d:	75 17                	jne    c0011576 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c001155f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011564:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011567:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001156d:	8b 10                	mov    edx,DWORD PTR [eax]
c001156f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011573:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011576:	89 c1                	mov    ecx,eax
c0011578:	83 e1 fd             	and    ecx,0xfffffffd
c001157b:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011581:	74 cd                	je     c0011550 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011583:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011588:	83 e0 ef             	and    eax,0xffffffef
c001158b:	83 f8 08             	cmp    eax,0x8
c001158e:	76 c0                	jbe    c0011550 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011590:	31 c0                	xor    eax,eax
c0011592:	c3                   	ret    
c0011593:	90                   	nop

c0011594 <ReservedFilename::isAtty()>:
c0011594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011598:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001159b:	31 c0                	xor    eax,eax
c001159d:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00115a3:	74 09                	je     c00115ae <ReservedFilename::isAtty()+0x1a>
c00115a5:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00115ab:	0f 94 c0             	sete   al
c00115ae:	c3                   	ret    
c00115af:	90                   	nop

c00115b0 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00115b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115bf:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115c4:	75 08                	jne    c00115ce <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115c6:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115cc:	eb 3d                	jmp    c001160b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115ce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115d3:	75 17                	jne    c00115ec <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115dd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00115e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115e9:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115ec:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115f1:	75 04                	jne    c00115f7 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115f3:	89 0a                	mov    DWORD PTR [edx],ecx
c00115f5:	eb 14                	jmp    c001160b <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115f7:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115fc:	74 c8                	je     c00115c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115fe:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011603:	83 e0 ef             	and    eax,0xffffffef
c0011606:	83 f8 08             	cmp    eax,0x8
c0011609:	76 bb                	jbe    c00115c6 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001160b:	31 c0                	xor    eax,eax
c001160d:	c3                   	ret    

c001160e <UnixFile::getFileDescriptor()>:
c001160e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011612:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011615:	c3                   	ret    

c0011616 <UnixFile::UnixFile(int)>:
c0011616:	53                   	push   ebx
c0011617:	83 ec 28             	sub    esp,0x28
c001161a:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c001161f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011623:	89 10                	mov    DWORD PTR [eax],edx
c0011625:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001162d:	0f 8f 8c 01 00 00    	jg     c00117bf <UnixFile::UnixFile(int)+0x1a9>
c0011633:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c0011638:	8d 50 01             	lea    edx,[eax+0x1]
c001163b:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c0011641:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011645:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011648:	83 ec 08             	sub    esp,0x8
c001164b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001164f:	68 38 f4 02 c0       	push   0xc002f438
c0011654:	e8 43 7d 01 00       	call   c002939c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	a0 34 f4 02 c0       	mov    al,ds:0xc002f434
c0011661:	83 f0 01             	xor    eax,0x1
c0011664:	84 c0                	test   al,al
c0011666:	0f 84 54 01 00 00    	je     c00117c0 <UnixFile::UnixFile(int)+0x1aa>
c001166c:	c6 05 34 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f434,0x1
c0011673:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c001167b:	83 ec 0c             	sub    esp,0xc
c001167e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011682:	e8 2d e2 ff ff       	call   c000f8b4 <malloc>
c0011687:	83 c4 10             	add    esp,0x10
c001168a:	89 c3                	mov    ebx,eax
c001168c:	83 ec 08             	sub    esp,0x8
c001168f:	68 03 ff ff 0f       	push   0xfffff03
c0011694:	53                   	push   ebx
c0011695:	e8 2c 01 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c001169a:	83 c4 10             	add    esp,0x10
c001169d:	89 1d 2c f4 02 c0    	mov    DWORD PTR ds:0xc002f42c,ebx
c00116a3:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00116ab:	83 ec 0c             	sub    esp,0xc
c00116ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00116b2:	e8 fd e1 ff ff       	call   c000f8b4 <malloc>
c00116b7:	83 c4 10             	add    esp,0x10
c00116ba:	89 c3                	mov    ebx,eax
c00116bc:	83 ec 08             	sub    esp,0x8
c00116bf:	68 01 ff ff 0f       	push   0xfffff01
c00116c4:	53                   	push   ebx
c00116c5:	e8 fc 00 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c00116ca:	83 c4 10             	add    esp,0x10
c00116cd:	89 1d 30 f4 02 c0    	mov    DWORD PTR ds:0xc002f430,ebx
c00116d3:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116db:	83 ec 0c             	sub    esp,0xc
c00116de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116e2:	e8 cd e1 ff ff       	call   c000f8b4 <malloc>
c00116e7:	83 c4 10             	add    esp,0x10
c00116ea:	89 c3                	mov    ebx,eax
c00116ec:	83 ec 08             	sub    esp,0x8
c00116ef:	68 00 ff ff 0f       	push   0xfffff00
c00116f4:	53                   	push   ebx
c00116f5:	e8 cc 00 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c00116fa:	83 c4 10             	add    esp,0x10
c00116fd:	89 1d 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,ebx
c0011703:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001170b:	83 ec 0c             	sub    esp,0xc
c001170e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011712:	e8 9d e1 ff ff       	call   c000f8b4 <malloc>
c0011717:	83 c4 10             	add    esp,0x10
c001171a:	89 c3                	mov    ebx,eax
c001171c:	83 ec 08             	sub    esp,0x8
c001171f:	68 02 ff ff 0f       	push   0xfffff02
c0011724:	53                   	push   ebx
c0011725:	e8 9c 00 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c001172a:	83 c4 10             	add    esp,0x10
c001172d:	89 1d 28 f4 02 c0    	mov    DWORD PTR ds:0xc002f428,ebx
c0011733:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001173b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011740:	7f 7e                	jg     c00117c0 <UnixFile::UnixFile(int)+0x1aa>
c0011742:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001174a:	83 ec 0c             	sub    esp,0xc
c001174d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011751:	e8 5e e1 ff ff       	call   c000f8b4 <malloc>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	89 c3                	mov    ebx,eax
c001175b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001175f:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011764:	83 ec 08             	sub    esp,0x8
c0011767:	50                   	push   eax
c0011768:	53                   	push   ebx
c0011769:	e8 58 00 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c001176e:	83 c4 10             	add    esp,0x10
c0011771:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011775:	89 1c 85 00 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c00],ebx
c001177c:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011784:	83 ec 0c             	sub    esp,0xc
c0011787:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001178b:	e8 24 e1 ff ff       	call   c000f8b4 <malloc>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	89 c3                	mov    ebx,eax
c0011795:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011799:	05 20 ff ff 0f       	add    eax,0xfffff20
c001179e:	83 ec 08             	sub    esp,0x8
c00117a1:	50                   	push   eax
c00117a2:	53                   	push   ebx
c00117a3:	e8 1e 00 00 00       	call   c00117c6 <ReservedFilename::ReservedFilename(int)>
c00117a8:	83 c4 10             	add    esp,0x10
c00117ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00117af:	89 1c 85 c0 f3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0c40],ebx
c00117b6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117ba:	e9 7c ff ff ff       	jmp    c001173b <UnixFile::UnixFile(int)+0x125>
c00117bf:	90                   	nop
c00117c0:	83 c4 28             	add    esp,0x28
c00117c3:	5b                   	pop    ebx
c00117c4:	c3                   	ret    
c00117c5:	90                   	nop

c00117c6 <ReservedFilename::ReservedFilename(int)>:
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117cd:	83 ec 08             	sub    esp,0x8
c00117d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d4:	50                   	push   eax
c00117d5:	e8 3c fe ff ff       	call   c0011616 <UnixFile::UnixFile(int)>
c00117da:	83 c4 10             	add    esp,0x10
c00117dd:	ba b0 b2 02 c0       	mov    edx,0xc002b2b0
c00117e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117e6:	89 10                	mov    DWORD PTR [eax],edx
c00117e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117f3:	90                   	nop
c00117f4:	83 c4 0c             	add    esp,0xc
c00117f7:	c3                   	ret    

c00117f8 <UnixFile::~UnixFile()>:
c00117f8:	83 ec 1c             	sub    esp,0x1c
c00117fb:	ba 94 b2 02 c0       	mov    edx,0xc002b294
c0011800:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011804:	89 10                	mov    DWORD PTR [eax],edx
c0011806:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001180a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001180d:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011812:	7f 73                	jg     c0011887 <UnixFile::~UnixFile()+0x8f>
c0011814:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001181c:	83 ec 0c             	sub    esp,0xc
c001181f:	68 38 f4 02 c0       	push   0xc002f438
c0011824:	e8 47 7c 01 00       	call   c0029470 <LinkedList<UnixFile>::getFirstElement()>
c0011829:	83 c4 10             	add    esp,0x10
c001182c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011830:	83 ec 0c             	sub    esp,0xc
c0011833:	68 38 f4 02 c0       	push   0xc002f438
c0011838:	e8 3b 7c 01 00       	call   c0029478 <LinkedList<UnixFile>::removeFirst()>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011844:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011848:	74 40                	je     c001188a <UnixFile::~UnixFile()+0x92>
c001184a:	83 ec 08             	sub    esp,0x8
c001184d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011851:	68 38 f4 02 c0       	push   0xc002f438
c0011856:	e8 41 7b 01 00       	call   c002939c <LinkedList<UnixFile>::addElement(UnixFile*)>
c001185b:	83 c4 10             	add    esp,0x10
c001185e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011862:	8d 50 01             	lea    edx,[eax+0x1]
c0011865:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011869:	3d 88 13 00 00       	cmp    eax,0x1388
c001186e:	0f 94 c0             	sete   al
c0011871:	84 c0                	test   al,al
c0011873:	74 a7                	je     c001181c <UnixFile::~UnixFile()+0x24>
c0011875:	83 ec 0c             	sub    esp,0xc
c0011878:	68 6c b2 02 c0       	push   0xc002b26c
c001187d:	e8 77 90 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011882:	83 c4 10             	add    esp,0x10
c0011885:	eb 95                	jmp    c001181c <UnixFile::~UnixFile()+0x24>
c0011887:	90                   	nop
c0011888:	eb 01                	jmp    c001188b <UnixFile::~UnixFile()+0x93>
c001188a:	90                   	nop
c001188b:	90                   	nop
c001188c:	83 c4 1c             	add    esp,0x1c
c001188f:	c3                   	ret    

c0011890 <UnixFile::~UnixFile()>:
c0011890:	83 ec 0c             	sub    esp,0xc
c0011893:	83 ec 0c             	sub    esp,0xc
c0011896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001189a:	e8 59 ff ff ff       	call   c00117f8 <UnixFile::~UnixFile()>
c001189f:	83 c4 10             	add    esp,0x10
c00118a2:	83 ec 08             	sub    esp,0x8
c00118a5:	6a 0c                	push   0xc
c00118a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ab:	e8 cf 14 00 00       	call   c0012d7f <operator delete(void*, unsigned long)>
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	83 c4 0c             	add    esp,0xc
c00118b6:	c3                   	ret    
c00118b7:	90                   	nop

c00118b8 <ReservedFilename::~ReservedFilename()>:
c00118b8:	83 ec 0c             	sub    esp,0xc
c00118bb:	ba b0 b2 02 c0       	mov    edx,0xc002b2b0
c00118c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c4:	89 10                	mov    DWORD PTR [eax],edx
c00118c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ca:	83 ec 0c             	sub    esp,0xc
c00118cd:	50                   	push   eax
c00118ce:	e8 25 ff ff ff       	call   c00117f8 <UnixFile::~UnixFile()>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	90                   	nop
c00118d7:	83 c4 0c             	add    esp,0xc
c00118da:	c3                   	ret    
c00118db:	90                   	nop

c00118dc <ReservedFilename::~ReservedFilename()>:
c00118dc:	83 ec 0c             	sub    esp,0xc
c00118df:	83 ec 0c             	sub    esp,0xc
c00118e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118e6:	e8 cd ff ff ff       	call   c00118b8 <ReservedFilename::~ReservedFilename()>
c00118eb:	83 c4 10             	add    esp,0x10
c00118ee:	83 ec 08             	sub    esp,0x8
c00118f1:	6a 0c                	push   0xc
c00118f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118f7:	e8 83 14 00 00       	call   c0012d7f <operator delete(void*, unsigned long)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	83 c4 0c             	add    esp,0xc
c0011902:	c3                   	ret    

c0011903 <getFromFileDescriptor(int)>:
c0011903:	53                   	push   ebx
c0011904:	83 ec 08             	sub    esp,0x8
c0011907:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001190b:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011911:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011917:	7f 2c                	jg     c0011945 <getFromFileDescriptor(int)+0x42>
c0011919:	83 ec 0c             	sub    esp,0xc
c001191c:	68 38 f4 02 c0       	push   0xc002f438
c0011921:	e8 4a 7b 01 00       	call   c0029470 <LinkedList<UnixFile>::getFirstElement()>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	85 c0                	test   eax,eax
c001192b:	75 04                	jne    c0011931 <getFromFileDescriptor(int)+0x2e>
c001192d:	31 c0                	xor    eax,eax
c001192f:	eb 6e                	jmp    c001199f <getFromFileDescriptor(int)+0x9c>
c0011931:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011934:	74 69                	je     c001199f <getFromFileDescriptor(int)+0x9c>
c0011936:	52                   	push   edx
c0011937:	52                   	push   edx
c0011938:	50                   	push   eax
c0011939:	68 38 f4 02 c0       	push   0xc002f438
c001193e:	e8 d7 7b 01 00       	call   c002951a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011943:	eb e1                	jmp    c0011926 <getFromFileDescriptor(int)+0x23>
c0011945:	a1 2c f4 02 c0       	mov    eax,ds:0xc002f42c
c001194a:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011950:	74 4d                	je     c001199f <getFromFileDescriptor(int)+0x9c>
c0011952:	a1 30 f4 02 c0       	mov    eax,ds:0xc002f430
c0011957:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c001195d:	74 40                	je     c001199f <getFromFileDescriptor(int)+0x9c>
c001195f:	a1 28 f4 02 c0       	mov    eax,ds:0xc002f428
c0011964:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c001196a:	74 33                	je     c001199f <getFromFileDescriptor(int)+0x9c>
c001196c:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0011971:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011977:	74 26                	je     c001199f <getFromFileDescriptor(int)+0x9c>
c0011979:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001197f:	83 f8 08             	cmp    eax,0x8
c0011982:	77 09                	ja     c001198d <getFromFileDescriptor(int)+0x8a>
c0011984:	8b 04 85 00 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0c00]
c001198b:	eb 12                	jmp    c001199f <getFromFileDescriptor(int)+0x9c>
c001198d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011993:	83 fb 08             	cmp    ebx,0x8
c0011996:	77 95                	ja     c001192d <getFromFileDescriptor(int)+0x2a>
c0011998:	8b 04 9d c0 f3 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0c40]
c001199f:	83 c4 08             	add    esp,0x8
c00119a2:	5b                   	pop    ebx
c00119a3:	c3                   	ret    

c00119a4 <__static_initialization_and_destruction_0(int, int)>:
c00119a4:	83 ec 0c             	sub    esp,0xc
c00119a7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00119ac:	75 34                	jne    c00119e2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00119b6:	75 2a                	jne    c00119e2 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	68 38 f4 02 c0       	push   0xc002f438
c00119c0:	e8 7f 79 01 00       	call   c0029344 <LinkedList<UnixFile>::LinkedList()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	83 ec 04             	sub    esp,0x4
c00119cb:	68 e8 e1 02 c0       	push   0xc002e1e8
c00119d0:	68 38 f4 02 c0       	push   0xc002f438
c00119d5:	68 42 93 02 c0       	push   0xc0029342
c00119da:	e8 1a 13 00 00       	call   c0012cf9 <__cxa_atexit>
c00119df:	83 c4 10             	add    esp,0x10
c00119e2:	90                   	nop
c00119e3:	83 c4 0c             	add    esp,0xc
c00119e6:	c3                   	ret    

c00119e7 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119e7:	83 ec 0c             	sub    esp,0xc
c00119ea:	83 ec 08             	sub    esp,0x8
c00119ed:	68 ff ff 00 00       	push   0xffff
c00119f2:	6a 01                	push   0x1
c00119f4:	e8 ab ff ff ff       	call   c00119a4 <__static_initialization_and_destruction_0(int, int)>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	83 c4 0c             	add    esp,0xc
c00119ff:	c3                   	ret    

c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011a00:	53                   	push   ebx
c0011a01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a05:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011a09:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011a0f:	89 c8                	mov    eax,ecx
c0011a11:	d1 e8                	shr    eax,1
c0011a13:	03 05 68 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e268
c0011a19:	83 e1 01             	and    ecx,0x1
c0011a1c:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a1e:	75 09                	jne    c0011a29 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a20:	83 e2 f0             	and    edx,0xfffffff0
c0011a23:	09 da                	or     edx,ebx
c0011a25:	88 10                	mov    BYTE PTR [eax],dl
c0011a27:	5b                   	pop    ebx
c0011a28:	c3                   	ret    
c0011a29:	c1 e3 04             	shl    ebx,0x4
c0011a2c:	83 e2 0f             	and    edx,0xf
c0011a2f:	09 da                	or     edx,ebx
c0011a31:	88 10                	mov    BYTE PTR [eax],dl
c0011a33:	5b                   	pop    ebx
c0011a34:	c3                   	ret    

c0011a35 <Virt::getPageState(unsigned long)>:
c0011a35:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a39:	8b 0d 68 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e268
c0011a3f:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a45:	89 d0                	mov    eax,edx
c0011a47:	d1 e8                	shr    eax,1
c0011a49:	83 e2 01             	and    edx,0x1
c0011a4c:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a4f:	75 04                	jne    c0011a55 <Virt::getPageState(unsigned long)+0x20>
c0011a51:	83 e0 0f             	and    eax,0xf
c0011a54:	c3                   	ret    
c0011a55:	c0 e8 04             	shr    al,0x4
c0011a58:	c3                   	ret    

c0011a59 <Virt::allocateKernelVirtualPages(int)>:
c0011a59:	55                   	push   ebp
c0011a5a:	31 ed                	xor    ebp,ebp
c0011a5c:	57                   	push   edi
c0011a5d:	56                   	push   esi
c0011a5e:	53                   	push   ebx
c0011a5f:	31 db                	xor    ebx,ebx
c0011a61:	83 ec 1c             	sub    esp,0x1c
c0011a64:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a68:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c0011a6e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a73:	57                   	push   edi
c0011a74:	e8 bc ff ff ff       	call   c0011a35 <Virt::getPageState(unsigned long)>
c0011a79:	5a                   	pop    edx
c0011a7a:	84 c0                	test   al,al
c0011a7c:	75 3a                	jne    c0011ab8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a7e:	85 db                	test   ebx,ebx
c0011a80:	75 02                	jne    c0011a84 <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a82:	89 fd                	mov    ebp,edi
c0011a84:	43                   	inc    ebx
c0011a85:	39 f3                	cmp    ebx,esi
c0011a87:	74 5a                	je     c0011ae3 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a89:	47                   	inc    edi
c0011a8a:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a90:	76 31                	jbe    c0011ac3 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a92:	c7 05 64 e2 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002e264,0xc8000
c0011a9c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011aa1:	75 28                	jne    c0011acb <Virt::allocateKernelVirtualPages(int)+0x72>
c0011aa3:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011aa8:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011aad:	57                   	push   edi
c0011aae:	e8 82 ff ff ff       	call   c0011a35 <Virt::getPageState(unsigned long)>
c0011ab3:	5a                   	pop    edx
c0011ab4:	84 c0                	test   al,al
c0011ab6:	74 c6                	je     c0011a7e <Virt::allocateKernelVirtualPages(int)+0x25>
c0011ab8:	31 db                	xor    ebx,ebx
c0011aba:	47                   	inc    edi
c0011abb:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011ac1:	77 cf                	ja     c0011a92 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011ac3:	89 3d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edi
c0011ac9:	eb a8                	jmp    c0011a73 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011acb:	83 ec 0c             	sub    esp,0xc
c0011ace:	68 c4 b2 02 c0       	push   0xc002b2c4
c0011ad3:	e8 21 8e 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011ad8:	8b 3d 64 e2 02 c0    	mov    edi,DWORD PTR ds:0xc002e264
c0011ade:	83 c4 10             	add    esp,0x10
c0011ae1:	eb 90                	jmp    c0011a73 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ae3:	89 2d 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,ebp
c0011ae9:	4b                   	dec    ebx
c0011aea:	74 5f                	je     c0011b4b <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011aec:	85 f6                	test   esi,esi
c0011aee:	74 3d                	je     c0011b2d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011af0:	89 e8                	mov    eax,ebp
c0011af2:	31 db                	xor    ebx,ebx
c0011af4:	8d 7e ff             	lea    edi,[esi-0x1]
c0011af7:	eb 14                	jmp    c0011b0d <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011af9:	6a 01                	push   0x1
c0011afb:	43                   	inc    ebx
c0011afc:	50                   	push   eax
c0011afd:	e8 fe fe ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b02:	58                   	pop    eax
c0011b03:	39 f3                	cmp    ebx,esi
c0011b05:	5a                   	pop    edx
c0011b06:	74 25                	je     c0011b2d <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011b08:	a1 64 e2 02 c0       	mov    eax,ds:0xc002e264
c0011b0d:	8d 50 01             	lea    edx,[eax+0x1]
c0011b10:	85 db                	test   ebx,ebx
c0011b12:	89 15 64 e2 02 c0    	mov    DWORD PTR ds:0xc002e264,edx
c0011b18:	74 20                	je     c0011b3a <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b1a:	39 df                	cmp    edi,ebx
c0011b1c:	75 db                	jne    c0011af9 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b1e:	6a 03                	push   0x3
c0011b20:	43                   	inc    ebx
c0011b21:	50                   	push   eax
c0011b22:	e8 d9 fe ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b27:	59                   	pop    ecx
c0011b28:	39 f3                	cmp    ebx,esi
c0011b2a:	58                   	pop    eax
c0011b2b:	75 db                	jne    c0011b08 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b2d:	83 c4 1c             	add    esp,0x1c
c0011b30:	89 e8                	mov    eax,ebp
c0011b32:	5b                   	pop    ebx
c0011b33:	c1 e0 0c             	shl    eax,0xc
c0011b36:	5e                   	pop    esi
c0011b37:	5f                   	pop    edi
c0011b38:	5d                   	pop    ebp
c0011b39:	c3                   	ret    
c0011b3a:	6a 02                	push   0x2
c0011b3c:	bb 01 00 00 00       	mov    ebx,0x1
c0011b41:	50                   	push   eax
c0011b42:	e8 b9 fe ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b47:	58                   	pop    eax
c0011b48:	5a                   	pop    edx
c0011b49:	eb bd                	jmp    c0011b08 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b4b:	6a 04                	push   0x4
c0011b4d:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b50:	55                   	push   ebp
c0011b51:	a3 64 e2 02 c0       	mov    ds:0xc002e264,eax
c0011b56:	e8 a5 fe ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b5b:	59                   	pop    ecx
c0011b5c:	89 e8                	mov    eax,ebp
c0011b5e:	5b                   	pop    ebx
c0011b5f:	c1 e0 0c             	shl    eax,0xc
c0011b62:	83 c4 1c             	add    esp,0x1c
c0011b65:	5b                   	pop    ebx
c0011b66:	5e                   	pop    esi
c0011b67:	5f                   	pop    edi
c0011b68:	5d                   	pop    ebp
c0011b69:	c3                   	ret    

c0011b6a <Virt::freeSwapfilePage(unsigned long)>:
c0011b6a:	53                   	push   ebx
c0011b6b:	8b 15 4c f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f44c
c0011b71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b75:	b8 01 00 00 00       	mov    eax,0x1
c0011b7a:	89 cb                	mov    ebx,ecx
c0011b7c:	d3 e0                	shl    eax,cl
c0011b7e:	c1 eb 05             	shr    ebx,0x5
c0011b81:	f7 d0                	not    eax
c0011b83:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b86:	5b                   	pop    ebx
c0011b87:	c3                   	ret    

c0011b88 <Virt::swapIDToSector(unsigned long)>:
c0011b88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b8c:	0f af 05 6c e2 02 c0 	imul   eax,DWORD PTR ds:0xc002e26c
c0011b93:	03 05 74 e2 02 c0    	add    eax,DWORD PTR ds:0xc002e274
c0011b99:	c3                   	ret    

c0011b9a <Virt::allocateSwapfilePage()>:
c0011b9a:	55                   	push   ebp
c0011b9b:	31 d2                	xor    edx,edx
c0011b9d:	57                   	push   edi
c0011b9e:	56                   	push   esi
c0011b9f:	53                   	push   ebx
c0011ba0:	83 ec 0c             	sub    esp,0xc
c0011ba3:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c0011ba9:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011bae:	f7 f1                	div    ecx
c0011bb0:	39 0d 70 e2 02 c0    	cmp    DWORD PTR ds:0xc002e270,ecx
c0011bb6:	72 2d                	jb     c0011be5 <Virt::allocateSwapfilePage()+0x4b>
c0011bb8:	8b 35 4c f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f44c
c0011bbe:	8b 16                	mov    edx,DWORD PTR [esi]
c0011bc0:	f6 c2 01             	test   dl,0x1
c0011bc3:	74 3c                	je     c0011c01 <Virt::allocateSwapfilePage()+0x67>
c0011bc5:	31 c9                	xor    ecx,ecx
c0011bc7:	bf 01 00 00 00       	mov    edi,0x1
c0011bcc:	eb 12                	jmp    c0011be0 <Virt::allocateSwapfilePage()+0x46>
c0011bce:	89 fd                	mov    ebp,edi
c0011bd0:	89 ca                	mov    edx,ecx
c0011bd2:	d3 e5                	shl    ebp,cl
c0011bd4:	c1 ea 05             	shr    edx,0x5
c0011bd7:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bda:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bdc:	85 ea                	test   edx,ebp
c0011bde:	74 2a                	je     c0011c0a <Virt::allocateSwapfilePage()+0x70>
c0011be0:	41                   	inc    ecx
c0011be1:	39 c8                	cmp    eax,ecx
c0011be3:	77 e9                	ja     c0011bce <Virt::allocateSwapfilePage()+0x34>
c0011be5:	83 ec 0c             	sub    esp,0xc
c0011be8:	68 4b b4 02 c0       	push   0xc002b44b
c0011bed:	e8 07 8d 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011bf2:	83 c4 10             	add    esp,0x10
c0011bf5:	31 c9                	xor    ecx,ecx
c0011bf7:	83 c4 0c             	add    esp,0xc
c0011bfa:	89 c8                	mov    eax,ecx
c0011bfc:	5b                   	pop    ebx
c0011bfd:	5e                   	pop    esi
c0011bfe:	5f                   	pop    edi
c0011bff:	5d                   	pop    ebp
c0011c00:	c3                   	ret    
c0011c01:	89 f3                	mov    ebx,esi
c0011c03:	bd 01 00 00 00       	mov    ebp,0x1
c0011c08:	31 c9                	xor    ecx,ecx
c0011c0a:	09 ea                	or     edx,ebp
c0011c0c:	89 c8                	mov    eax,ecx
c0011c0e:	89 13                	mov    DWORD PTR [ebx],edx
c0011c10:	83 c4 0c             	add    esp,0xc
c0011c13:	5b                   	pop    ebx
c0011c14:	5e                   	pop    esi
c0011c15:	5f                   	pop    edi
c0011c16:	5d                   	pop    ebp
c0011c17:	c3                   	ret    

c0011c18 <Virt::virtualMemorySetup()>:
c0011c18:	53                   	push   ebx
c0011c19:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c1e:	83 ec 08             	sub    esp,0x8
c0011c21:	6a 0f                	push   0xf
c0011c23:	53                   	push   ebx
c0011c24:	43                   	inc    ebx
c0011c25:	e8 d6 fd ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c2a:	59                   	pop    ecx
c0011c2b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c31:	58                   	pop    eax
c0011c32:	75 ed                	jne    c0011c21 <Virt::virtualMemorySetup()+0x9>
c0011c34:	83 ec 08             	sub    esp,0x8
c0011c37:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c3c:	68 00 00 00 c8       	push   0xc8000000
c0011c41:	68 62 b4 02 c0       	push   0xc002b462
c0011c46:	e8 14 12 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011c4b:	58                   	pop    eax
c0011c4c:	5a                   	pop    edx
c0011c4d:	68 00 f0 ff ef       	push   0xeffff000
c0011c52:	68 76 b4 02 c0       	push   0xc002b476
c0011c57:	e8 03 12 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011c5c:	83 c4 10             	add    esp,0x10
c0011c5f:	83 ec 08             	sub    esp,0x8
c0011c62:	6a 00                	push   0x0
c0011c64:	53                   	push   ebx
c0011c65:	43                   	inc    ebx
c0011c66:	e8 95 fd ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6b:	83 c4 10             	add    esp,0x10
c0011c6e:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c74:	75 e9                	jne    c0011c5f <Virt::virtualMemorySetup()+0x47>
c0011c76:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c7b:	83 ec 08             	sub    esp,0x8
c0011c7e:	6a 0f                	push   0xf
c0011c80:	53                   	push   ebx
c0011c81:	43                   	inc    ebx
c0011c82:	e8 79 fd ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c87:	83 c4 10             	add    esp,0x10
c0011c8a:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c90:	75 e9                	jne    c0011c7b <Virt::virtualMemorySetup()+0x63>
c0011c92:	83 c4 08             	add    esp,0x8
c0011c95:	5b                   	pop    ebx
c0011c96:	c3                   	ret    

c0011c97 <Virt::swappingSetup()>:
c0011c97:	c3                   	ret    

c0011c98 <Virt::setupPageSwapping(int)>:
c0011c98:	57                   	push   edi
c0011c99:	56                   	push   esi
c0011c9a:	53                   	push   ebx
c0011c9b:	83 ec 1c             	sub    esp,0x1c
c0011c9e:	68 8a b4 02 c0       	push   0xc002b48a
c0011ca3:	e8 b7 11 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011ca8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011caf:	e8 00 dc ff ff       	call   c000f8b4 <malloc>
c0011cb4:	83 c4 0c             	add    esp,0xc
c0011cb7:	89 c6                	mov    esi,eax
c0011cb9:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c0011cbf:	68 9e b4 02 c0       	push   0xc002b49e
c0011cc4:	50                   	push   eax
c0011cc5:	e8 f4 16 00 00       	call   c00133be <File::File(char const*, Process*)>
c0011cca:	89 34 24             	mov    DWORD PTR [esp],esi
c0011ccd:	e8 c8 18 00 00       	call   c001359a <File::unlink()>
c0011cd2:	59                   	pop    ecx
c0011cd3:	5b                   	pop    ebx
c0011cd4:	6a 12                	push   0x12
c0011cd6:	56                   	push   esi
c0011cd7:	e8 46 17 00 00       	call   c0013422 <File::open(FileOpenMode)>
c0011cdc:	83 c4 10             	add    esp,0x10
c0011cdf:	85 c0                	test   eax,eax
c0011ce1:	0f 85 5b 01 00 00    	jne    c0011e42 <Virt::setupPageSwapping(int)+0x1aa>
c0011ce7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ceb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cf3:	c1 e3 08             	shl    ebx,0x8
c0011cf6:	83 ec 0c             	sub    esp,0xc
c0011cf9:	68 00 00 01 00       	push   0x10000
c0011cfe:	e8 b1 db ff ff       	call   c000f8b4 <malloc>
c0011d03:	83 c4 0c             	add    esp,0xc
c0011d06:	89 c7                	mov    edi,eax
c0011d08:	68 00 00 01 00       	push   0x10000
c0011d0d:	68 ee 00 00 00       	push   0xee
c0011d12:	50                   	push   eax
c0011d13:	e8 60 ea fe ff       	call   c0000778 <memset>
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	85 db                	test   ebx,ebx
c0011d1d:	79 03                	jns    c0011d22 <Virt::setupPageSwapping(int)+0x8a>
c0011d1f:	83 c3 0f             	add    ebx,0xf
c0011d22:	c1 fb 04             	sar    ebx,0x4
c0011d25:	4b                   	dec    ebx
c0011d26:	83 fb ff             	cmp    ebx,0xffffffff
c0011d29:	74 4f                	je     c0011d7a <Virt::setupPageSwapping(int)+0xe2>
c0011d2b:	83 ec 0c             	sub    esp,0xc
c0011d2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d30:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d34:	52                   	push   edx
c0011d35:	57                   	push   edi
c0011d36:	6a 00                	push   0x0
c0011d38:	68 00 00 01 00       	push   0x10000
c0011d3d:	56                   	push   esi
c0011d3e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d41:	83 c4 20             	add    esp,0x20
c0011d44:	85 c0                	test   eax,eax
c0011d46:	0f 85 e0 00 00 00    	jne    c0011e2c <Virt::setupPageSwapping(int)+0x194>
c0011d4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d50:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d55:	74 ce                	je     c0011d25 <Virt::setupPageSwapping(int)+0x8d>
c0011d57:	83 ec 08             	sub    esp,0x8
c0011d5a:	4b                   	dec    ebx
c0011d5b:	50                   	push   eax
c0011d5c:	68 f1 b4 02 c0       	push   0xc002b4f1
c0011d61:	e8 f9 10 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011d66:	c7 04 24 fa b4 02 c0 	mov    DWORD PTR [esp],0xc002b4fa
c0011d6d:	e8 87 8b 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011d72:	83 c4 10             	add    esp,0x10
c0011d75:	83 fb ff             	cmp    ebx,0xffffffff
c0011d78:	75 b1                	jne    c0011d2b <Virt::setupPageSwapping(int)+0x93>
c0011d7a:	83 ec 0c             	sub    esp,0xc
c0011d7d:	56                   	push   esi
c0011d7e:	e8 fd 16 00 00       	call   c0013480 <File::close()>
c0011d83:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d86:	e8 49 db ff ff       	call   c000f8d4 <rfree>
c0011d8b:	83 c4 10             	add    esp,0x10
c0011d8e:	85 f6                	test   esi,esi
c0011d90:	74 0c                	je     c0011d9e <Virt::setupPageSwapping(int)+0x106>
c0011d92:	83 ec 0c             	sub    esp,0xc
c0011d95:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d97:	56                   	push   esi
c0011d98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d9b:	83 c4 10             	add    esp,0x10
c0011d9e:	83 ec 08             	sub    esp,0x8
c0011da1:	a1 e8 f8 02 c0       	mov    eax,ds:0xc002f8e8
c0011da6:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011dac:	8b 10                	mov    edx,DWORD PTR [eax]
c0011dae:	68 9e b4 02 c0       	push   0xc002b49e
c0011db3:	50                   	push   eax
c0011db4:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011db7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011dbb:	c6 05 78 e2 02 c0 43 	mov    BYTE PTR ds:0xc002e278,0x43
c0011dc2:	c1 e2 0b             	shl    edx,0xb
c0011dc5:	a3 74 e2 02 c0       	mov    ds:0xc002e274,eax
c0011dca:	89 15 70 e2 02 c0    	mov    DWORD PTR ds:0xc002e270,edx
c0011dd0:	c7 05 6c e2 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002e26c,0x8
c0011dda:	c1 ea 08             	shr    edx,0x8
c0011ddd:	89 14 24             	mov    DWORD PTR [esp],edx
c0011de0:	e8 cf da ff ff       	call   c000f8b4 <malloc>
c0011de5:	83 c4 0c             	add    esp,0xc
c0011de8:	89 c1                	mov    ecx,eax
c0011dea:	a3 4c f4 02 c0       	mov    ds:0xc002f44c,eax
c0011def:	31 d2                	xor    edx,edx
c0011df1:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011df6:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011dfc:	c1 e8 05             	shr    eax,0x5
c0011dff:	50                   	push   eax
c0011e00:	6a 00                	push   0x0
c0011e02:	51                   	push   ecx
c0011e03:	e8 70 e9 fe ff       	call   c0000778 <memset>
c0011e08:	58                   	pop    eax
c0011e09:	a1 70 e2 02 c0       	mov    eax,ds:0xc002e270
c0011e0e:	5a                   	pop    edx
c0011e0f:	31 d2                	xor    edx,edx
c0011e11:	f7 35 6c e2 02 c0    	div    DWORD PTR ds:0xc002e26c
c0011e17:	c1 e8 05             	shr    eax,0x5
c0011e1a:	50                   	push   eax
c0011e1b:	68 00 b5 02 c0       	push   0xc002b500
c0011e20:	e8 3a 10 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011e25:	83 c4 20             	add    esp,0x20
c0011e28:	5b                   	pop    ebx
c0011e29:	5e                   	pop    esi
c0011e2a:	5f                   	pop    edi
c0011e2b:	c3                   	ret    
c0011e2c:	83 ec 08             	sub    esp,0x8
c0011e2f:	50                   	push   eax
c0011e30:	68 d9 b4 02 c0       	push   0xc002b4d9
c0011e35:	e8 25 10 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011e3a:	83 c4 10             	add    esp,0x10
c0011e3d:	e9 0a ff ff ff       	jmp    c0011d4c <Virt::setupPageSwapping(int)+0xb4>
c0011e42:	83 ec 08             	sub    esp,0x8
c0011e45:	50                   	push   eax
c0011e46:	68 b5 b4 02 c0       	push   0xc002b4b5
c0011e4b:	e8 0f 10 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0011e50:	c7 04 24 be b4 02 c0 	mov    DWORD PTR [esp],0xc002b4be
c0011e57:	e8 9d 8a 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011e5c:	83 c4 10             	add    esp,0x10
c0011e5f:	e9 83 fe ff ff       	jmp    c0011ce7 <Virt::setupPageSwapping(int)+0x4f>

c0011e64 <VAS::VAS()>:
c0011e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e68:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e73:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7e:	a3 50 f4 02 c0       	mov    ds:0xc002f450,eax
c0011e83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e87:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e8f:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e92:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e96:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e9d:	90                   	nop
c0011e9e:	c3                   	ret    
c0011e9f:	90                   	nop

c0011ea0 <VAS::VAS(VAS*)>:
c0011ea0:	83 ec 0c             	sub    esp,0xc
c0011ea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ea7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011eb9:	83 ec 0c             	sub    esp,0xc
c0011ebc:	68 e4 b2 02 c0       	push   0xc002b2e4
c0011ec1:	e8 33 8a 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011ec6:	83 c4 10             	add    esp,0x10
c0011ec9:	90                   	nop
c0011eca:	83 c4 0c             	add    esp,0xc
c0011ecd:	c3                   	ret    

c0011ece <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011ece:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ed2:	89 c2                	mov    edx,eax
c0011ed4:	c1 e8 0a             	shr    eax,0xa
c0011ed7:	c1 ea 16             	shr    edx,0x16
c0011eda:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011edf:	19 c9                	sbb    ecx,ecx
c0011ee1:	c1 e2 0c             	shl    edx,0xc
c0011ee4:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011eea:	25 fc 0f 00 00       	and    eax,0xffc
c0011eef:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ef6:	01 d0                	add    eax,edx
c0011ef8:	c3                   	ret    
c0011ef9:	90                   	nop

c0011efa <VAS::getPageTableEntry(unsigned long)>:
c0011efa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011efe:	89 ca                	mov    edx,ecx
c0011f00:	c1 e9 0a             	shr    ecx,0xa
c0011f03:	c1 ea 16             	shr    edx,0x16
c0011f06:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011f0c:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011f12:	c1 e0 0c             	shl    eax,0xc
c0011f15:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f18:	c3                   	ret    

c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f19:	57                   	push   edi
c0011f1a:	56                   	push   esi
c0011f1b:	be 01 00 00 00       	mov    esi,0x1
c0011f20:	53                   	push   ebx
c0011f21:	83 ec 10             	sub    esp,0x10
c0011f24:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f28:	c1 eb 0c             	shr    ebx,0xc
c0011f2b:	eb 3f                	jmp    c0011f6c <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f2d:	83 ec 08             	sub    esp,0x8
c0011f30:	57                   	push   edi
c0011f31:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0011f37:	e8 be ff ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0011f3c:	83 c4 10             	add    esp,0x10
c0011f3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f41:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f45:	f6 c4 04             	test   ah,0x4
c0011f48:	75 5f                	jne    c0011fa9 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f4a:	80 fa 04             	cmp    dl,0x4
c0011f4d:	74 78                	je     c0011fc7 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f4f:	80 fa 02             	cmp    dl,0x2
c0011f52:	0f 84 88 00 00 00    	je     c0011fe0 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f58:	80 fa 03             	cmp    dl,0x3
c0011f5b:	0f 84 ad 00 00 00    	je     c001200e <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f61:	fe ca                	dec    dl
c0011f63:	0f 84 92 00 00 00    	je     c0011ffb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f69:	43                   	inc    ebx
c0011f6a:	31 f6                	xor    esi,esi
c0011f6c:	53                   	push   ebx
c0011f6d:	89 df                	mov    edi,ebx
c0011f6f:	e8 c1 fa ff ff       	call   c0011a35 <Virt::getPageState(unsigned long)>
c0011f74:	c1 e7 0c             	shl    edi,0xc
c0011f77:	59                   	pop    ecx
c0011f78:	84 c0                	test   al,al
c0011f7a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f7e:	75 ad                	jne    c0011f2d <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f80:	83 ec 0c             	sub    esp,0xc
c0011f83:	68 1b b5 02 c0       	push   0xc002b51b
c0011f88:	e8 6c 89 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011f8d:	58                   	pop    eax
c0011f8e:	5a                   	pop    edx
c0011f8f:	57                   	push   edi
c0011f90:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0011f96:	e8 5f ff ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0011f9b:	83 c4 10             	add    esp,0x10
c0011f9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011fa0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fa4:	f6 c4 04             	test   ah,0x4
c0011fa7:	74 c0                	je     c0011f69 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fa9:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011fad:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	50                   	push   eax
c0011fb6:	e8 db de ff ff       	call   c000fe96 <Phys::freePage(unsigned long)>
c0011fbb:	83 c4 10             	add    esp,0x10
c0011fbe:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011fc2:	80 fa 04             	cmp    dl,0x4
c0011fc5:	75 88                	jne    c0011f4f <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011fc7:	89 f0                	mov    eax,esi
c0011fc9:	84 c0                	test   al,al
c0011fcb:	75 47                	jne    c0012014 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fcd:	c7 44 24 20 08 b3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b308
c0011fd5:	83 c4 10             	add    esp,0x10
c0011fd8:	5b                   	pop    ebx
c0011fd9:	5e                   	pop    esi
c0011fda:	5f                   	pop    edi
c0011fdb:	e9 19 89 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c0011fe0:	89 f0                	mov    eax,esi
c0011fe2:	84 c0                	test   al,al
c0011fe4:	75 15                	jne    c0011ffb <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fe6:	83 ec 0c             	sub    esp,0xc
c0011fe9:	68 37 b5 02 c0       	push   0xc002b537
c0011fee:	e8 06 89 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0011ff3:	83 c4 10             	add    esp,0x10
c0011ff6:	e9 6e ff ff ff       	jmp    c0011f69 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ffb:	83 ec 08             	sub    esp,0x8
c0011ffe:	6a 00                	push   0x0
c0012000:	53                   	push   ebx
c0012001:	e8 fa f9 ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012006:	83 c4 10             	add    esp,0x10
c0012009:	e9 5b ff ff ff       	jmp    c0011f69 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001200e:	89 f0                	mov    eax,esi
c0012010:	84 c0                	test   al,al
c0012012:	75 15                	jne    c0012029 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012014:	83 ec 08             	sub    esp,0x8
c0012017:	6a 00                	push   0x0
c0012019:	53                   	push   ebx
c001201a:	e8 e1 f9 ff ff       	call   c0011a00 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001201f:	83 c4 10             	add    esp,0x10
c0012022:	83 c4 10             	add    esp,0x10
c0012025:	5b                   	pop    ebx
c0012026:	5e                   	pop    esi
c0012027:	5f                   	pop    edi
c0012028:	c3                   	ret    
c0012029:	c7 44 24 20 53 b5 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b553
c0012031:	83 c4 10             	add    esp,0x10
c0012034:	5b                   	pop    ebx
c0012035:	5e                   	pop    esi
c0012036:	5f                   	pop    edi
c0012037:	e9 bd 88 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>

c001203c <VAS::freeAllocatedPages(unsigned long)>:
c001203c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012040:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012044:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012048:	74 09                	je     c0012053 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001204a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001204e:	e9 c6 fe ff ff       	jmp    c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c0012053:	c7 44 24 04 2c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b32c
c001205b:	e9 ff 0d 00 00       	jmp    c0012e5f <Dbg::kprintf(char const*, ...)>

c0012060 <VAS::virtualToPhysical(unsigned long)>:
c0012060:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012064:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012068:	e8 8d fe ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c001206d:	5a                   	pop    edx
c001206e:	8b 00                	mov    eax,DWORD PTR [eax]
c0012070:	59                   	pop    ecx
c0012071:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012076:	c3                   	ret    
c0012077:	90                   	nop

c0012078 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012078:	55                   	push   ebp
c0012079:	57                   	push   edi
c001207a:	56                   	push   esi
c001207b:	53                   	push   ebx
c001207c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012080:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012084:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012088:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001208c:	85 db                	test   ebx,ebx
c001208e:	7e 22                	jle    c00120b2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012090:	c1 e3 0c             	shl    ebx,0xc
c0012093:	01 f3                	add    ebx,esi
c0012095:	56                   	push   esi
c0012096:	81 c6 00 10 00 00    	add    esi,0x1000
c001209c:	55                   	push   ebp
c001209d:	e8 58 fe ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c00120a2:	5a                   	pop    edx
c00120a3:	59                   	pop    ecx
c00120a4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00120a6:	21 f9                	and    ecx,edi
c00120a8:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c00120ac:	39 f3                	cmp    ebx,esi
c00120ae:	89 08                	mov    DWORD PTR [eax],ecx
c00120b0:	75 e3                	jne    c0012095 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00120b2:	5b                   	pop    ebx
c00120b3:	5e                   	pop    esi
c00120b4:	5f                   	pop    edi
c00120b5:	5d                   	pop    ebp
c00120b6:	c3                   	ret    
c00120b7:	90                   	nop

c00120b8 <VAS::setToWriteCombining(unsigned long, int)>:
c00120b8:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00120bd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120c3:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120ca:	75 01                	jne    c00120cd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120cc:	c3                   	ret    
c00120cd:	68 80 00 00 00       	push   0x80
c00120d2:	6a ff                	push   0xffffffff
c00120d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120e0:	e8 93 ff ff ff       	call   c0012078 <VAS::reflagRange(unsigned long, int, int, int)>
c00120e5:	83 c4 14             	add    esp,0x14
c00120e8:	c3                   	ret    
c00120e9:	90                   	nop

c00120ea <VAS::mapOtherVASIn(bool, VAS*)>:
c00120ea:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120f3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120fa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120fd:	19 c0                	sbb    eax,eax
c00120ff:	83 ca 03             	or     edx,0x3
c0012102:	83 e0 fc             	and    eax,0xfffffffc
c0012105:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c001210c:	0f 20 d8             	mov    eax,cr3
c001210f:	0f 22 d8             	mov    cr3,eax
c0012112:	c3                   	ret    
c0012113:	90                   	nop

c0012114 <VAS::~VAS()>:
c0012114:	83 ec 2c             	sub    esp,0x2c
c0012117:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001211f:	fa                   	cli    
c0012120:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012125:	40                   	inc    eax
c0012126:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001212b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012130:	8b 00                	mov    eax,DWORD PTR [eax]
c0012132:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0012135:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001213b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001213f:	6a 01                	push   0x1
c0012141:	50                   	push   eax
c0012142:	e8 a3 ff ff ff       	call   c00120ea <VAS::mapOtherVASIn(bool, VAS*)>
c0012147:	83 c4 0c             	add    esp,0xc
c001214a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012152:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001215a:	0f 8f d4 00 00 00    	jg     c0012234 <VAS::~VAS()+0x120>
c0012160:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012164:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012167:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001216b:	c1 e2 02             	shl    edx,0x2
c001216e:	01 d0                	add    eax,edx
c0012170:	8b 00                	mov    eax,DWORD PTR [eax]
c0012172:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001217a:	83 e0 01             	and    eax,0x1
c001217d:	0f 84 a8 00 00 00    	je     c001222b <VAS::~VAS()+0x117>
c0012183:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001218b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012193:	7f 72                	jg     c0012207 <VAS::~VAS()+0xf3>
c0012195:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012199:	c1 e0 0a             	shl    eax,0xa
c001219c:	89 c2                	mov    edx,eax
c001219e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121a2:	01 d0                	add    eax,edx
c00121a4:	c1 e0 0c             	shl    eax,0xc
c00121a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121ab:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00121b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00121b5:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121bf:	6a 01                	push   0x1
c00121c1:	50                   	push   eax
c00121c2:	e8 07 fd ff ff       	call   c0011ece <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121c7:	83 c4 0c             	add    esp,0xc
c00121ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00121d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121dc:	25 01 04 00 00       	and    eax,0x401
c00121e1:	3d 01 04 00 00       	cmp    eax,0x401
c00121e6:	75 19                	jne    c0012201 <VAS::~VAS()+0xed>
c00121e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121ec:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121f1:	83 ec 0c             	sub    esp,0xc
c00121f4:	50                   	push   eax
c00121f5:	e8 9c dc ff ff       	call   c000fe96 <Phys::freePage(unsigned long)>
c00121fa:	83 c4 10             	add    esp,0x10
c00121fd:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012201:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0012205:	eb 84                	jmp    c001218b <VAS::~VAS()+0x77>
c0012207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001220b:	25 00 04 00 00       	and    eax,0x400
c0012210:	74 19                	je     c001222b <VAS::~VAS()+0x117>
c0012212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012216:	25 00 f0 ff ff       	and    eax,0xfffff000
c001221b:	83 ec 0c             	sub    esp,0xc
c001221e:	50                   	push   eax
c001221f:	e8 72 dc ff ff       	call   c000fe96 <Phys::freePage(unsigned long)>
c0012224:	83 c4 10             	add    esp,0x10
c0012227:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001222b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001222f:	e9 1e ff ff ff       	jmp    c0012152 <VAS::~VAS()+0x3e>
c0012234:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012238:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001223b:	83 ec 0c             	sub    esp,0xc
c001223e:	50                   	push   eax
c001223f:	e8 d5 fc ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c0012244:	83 c4 10             	add    esp,0x10
c0012247:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001224e:	83 ec 0c             	sub    esp,0xc
c0012251:	50                   	push   eax
c0012252:	e8 3f dc ff ff       	call   c000fe96 <Phys::freePage(unsigned long)>
c0012257:	83 c4 10             	add    esp,0x10
c001225a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001225e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012262:	c1 e0 02             	shl    eax,0x2
c0012265:	83 ec 08             	sub    esp,0x8
c0012268:	50                   	push   eax
c0012269:	68 50 b3 02 c0       	push   0xc002b350
c001226e:	e8 ec 0b 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012273:	83 c4 10             	add    esp,0x10
c0012276:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001227b:	48                   	dec    eax
c001227c:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012281:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012286:	85 c0                	test   eax,eax
c0012288:	75 01                	jne    c001228b <VAS::~VAS()+0x177>
c001228a:	fb                   	sti    
c001228b:	90                   	nop
c001228c:	83 c4 2c             	add    esp,0x2c
c001228f:	c3                   	ret    

c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012290:	55                   	push   ebp
c0012291:	57                   	push   edi
c0012292:	56                   	push   esi
c0012293:	53                   	push   ebx
c0012294:	83 ec 1c             	sub    esp,0x1c
c0012297:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001229b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001229f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c00122a5:	77 08                	ja     c00122af <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c00122a7:	0f 20 d8             	mov    eax,cr3
c00122aa:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c00122ad:	75 47                	jne    c00122f6 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c00122af:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122b3:	09 d8                	or     eax,ebx
c00122b5:	a9 ff 0f 00 00       	test   eax,0xfff
c00122ba:	75 57                	jne    c0012313 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122bc:	89 de                	mov    esi,ebx
c00122be:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122c1:	c1 ee 16             	shr    esi,0x16
c00122c4:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122cb:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122cf:	74 54                	je     c0012325 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122d1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122d5:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122db:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122df:	c1 e6 0c             	shl    esi,0xc
c00122e2:	c1 eb 0a             	shr    ebx,0xa
c00122e5:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122eb:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122ee:	83 c4 1c             	add    esp,0x1c
c00122f1:	5b                   	pop    ebx
c00122f2:	5e                   	pop    esi
c00122f3:	5f                   	pop    edi
c00122f4:	5d                   	pop    ebp
c00122f5:	c3                   	ret    
c00122f6:	83 ec 0c             	sub    esp,0xc
c00122f9:	68 70 b3 02 c0       	push   0xc002b370
c00122fe:	e8 5c 0b 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012303:	83 c4 10             	add    esp,0x10
c0012306:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001230a:	09 d8                	or     eax,ebx
c001230c:	a9 ff 0f 00 00       	test   eax,0xfff
c0012311:	74 a9                	je     c00122bc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012313:	83 ec 0c             	sub    esp,0xc
c0012316:	68 d8 b3 02 c0       	push   0xc002b3d8
c001231b:	e8 d9 85 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0012320:	83 c4 10             	add    esp,0x10
c0012323:	eb 97                	jmp    c00122bc <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012325:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012329:	e8 f2 db ff ff       	call   c000ff20 <Phys::allocatePage()>
c001232e:	83 ec 0c             	sub    esp,0xc
c0012331:	89 c5                	mov    ebp,eax
c0012333:	8b 0d 50 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f450
c0012339:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001233d:	6a 01                	push   0x1
c001233f:	e8 15 f7 ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0012344:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001234b:	6a 01                	push   0x1
c001234d:	50                   	push   eax
c001234e:	55                   	push   ebp
c001234f:	81 cd 07 04 00 00    	or     ebp,0x407
c0012355:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012359:	51                   	push   ecx
c001235a:	e8 27 02 00 00       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001235f:	83 c4 1c             	add    esp,0x1c
c0012362:	68 00 10 00 00       	push   0x1000
c0012367:	6a 00                	push   0x0
c0012369:	50                   	push   eax
c001236a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001236e:	e8 05 e4 fe ff       	call   c0000778 <memset>
c0012373:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012377:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001237a:	e8 9a fb ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c001237f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012383:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012386:	83 c4 10             	add    esp,0x10
c0012389:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001238c:	e9 40 ff ff ff       	jmp    c00122d1 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012391:	90                   	nop

c0012392 <VAS::allocatePages(int, int)>:
c0012392:	55                   	push   ebp
c0012393:	57                   	push   edi
c0012394:	56                   	push   esi
c0012395:	53                   	push   ebx
c0012396:	83 ec 1c             	sub    esp,0x1c
c0012399:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001239d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00123a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00123a8:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00123ae:	83 e0 01             	and    eax,0x1
c00123b1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c00123b5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123b9:	0f 85 cc 00 00 00    	jne    c001248b <VAS::allocatePages(int, int)+0xf9>
c00123bf:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123c6:	85 c0                	test   eax,eax
c00123c8:	0f 84 a1 00 00 00    	je     c001246f <VAS::allocatePages(int, int)+0xdd>
c00123ce:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123d6:	c1 e6 0c             	shl    esi,0xc
c00123d9:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123dd:	85 c0                	test   eax,eax
c00123df:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123e2:	7e 33                	jle    c0012417 <VAS::allocatePages(int, int)+0x85>
c00123e4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123e8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123ec:	81 cd 00 04 00 00    	or     ebp,0x400
c00123f2:	e8 29 db ff ff       	call   c000ff20 <Phys::allocatePage()>
c00123f7:	55                   	push   ebp
c00123f8:	53                   	push   ebx
c00123f9:	50                   	push   eax
c00123fa:	57                   	push   edi
c00123fb:	e8 90 fe ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012400:	83 c4 10             	add    esp,0x10
c0012403:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012408:	74 03                	je     c001240d <VAS::allocatePages(int, int)+0x7b>
c001240a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001240d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012413:	39 de                	cmp    esi,ebx
c0012415:	75 db                	jne    c00123f2 <VAS::allocatePages(int, int)+0x60>
c0012417:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001241c:	75 12                	jne    c0012430 <VAS::allocatePages(int, int)+0x9e>
c001241e:	0f 20 d8             	mov    eax,cr3
c0012421:	0f 22 d8             	mov    cr3,eax
c0012424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012428:	83 c4 1c             	add    esp,0x1c
c001242b:	5b                   	pop    ebx
c001242c:	5e                   	pop    esi
c001242d:	5f                   	pop    edi
c001242e:	5d                   	pop    ebp
c001242f:	c3                   	ret    
c0012430:	c1 ee 0a             	shr    esi,0xa
c0012433:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012437:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c001243d:	c1 eb 0a             	shr    ebx,0xa
c0012440:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012446:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001244c:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012452:	39 c3                	cmp    ebx,eax
c0012454:	77 ce                	ja     c0012424 <VAS::allocatePages(int, int)+0x92>
c0012456:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012459:	81 c3 00 10 00 00    	add    ebx,0x1000
c001245f:	39 d8                	cmp    eax,ebx
c0012461:	73 f3                	jae    c0012456 <VAS::allocatePages(int, int)+0xc4>
c0012463:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012467:	83 c4 1c             	add    esp,0x1c
c001246a:	5b                   	pop    ebx
c001246b:	5e                   	pop    esi
c001246c:	5f                   	pop    edi
c001246d:	5d                   	pop    ebp
c001246e:	c3                   	ret    
c001246f:	83 ec 0c             	sub    esp,0xc
c0012472:	68 fc b3 02 c0       	push   0xc002b3fc
c0012477:	e8 7d 84 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c001247c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001247f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012483:	83 c4 10             	add    esp,0x10
c0012486:	e9 43 ff ff ff       	jmp    c00123ce <VAS::allocatePages(int, int)+0x3c>
c001248b:	83 ec 0c             	sub    esp,0xc
c001248e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012492:	e8 c2 f5 ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0012497:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001249b:	83 c4 10             	add    esp,0x10
c001249e:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00124a3:	0f 87 9b 00 00 00    	ja     c0012544 <VAS::allocatePages(int, int)+0x1b2>
c00124a9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00124ad:	85 d2                	test   edx,edx
c00124af:	7e 3c                	jle    c00124ed <VAS::allocatePages(int, int)+0x15b>
c00124b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00124b5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124bd:	c1 e5 0c             	shl    ebp,0xc
c00124c0:	81 ce 00 04 00 00    	or     esi,0x400
c00124c6:	01 dd                	add    ebp,ebx
c00124c8:	e8 53 da ff ff       	call   c000ff20 <Phys::allocatePage()>
c00124cd:	56                   	push   esi
c00124ce:	53                   	push   ebx
c00124cf:	50                   	push   eax
c00124d0:	57                   	push   edi
c00124d1:	e8 ba fd ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124d6:	83 c4 10             	add    esp,0x10
c00124d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124de:	74 03                	je     c00124e3 <VAS::allocatePages(int, int)+0x151>
c00124e0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124e9:	39 dd                	cmp    ebp,ebx
c00124eb:	75 db                	jne    c00124c8 <VAS::allocatePages(int, int)+0x136>
c00124ed:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f2:	0f 84 26 ff ff ff    	je     c001241e <VAS::allocatePages(int, int)+0x8c>
c00124f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012500:	89 d3                	mov    ebx,edx
c0012502:	c1 e0 0c             	shl    eax,0xc
c0012505:	c1 eb 0a             	shr    ebx,0xa
c0012508:	01 d0                	add    eax,edx
c001250a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012510:	c1 e8 0a             	shr    eax,0xa
c0012513:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012519:	25 00 f0 ff ff       	and    eax,0xfffff000
c001251e:	2d 00 00 40 00       	sub    eax,0x400000
c0012523:	39 c3                	cmp    ebx,eax
c0012525:	0f 87 f9 fe ff ff    	ja     c0012424 <VAS::allocatePages(int, int)+0x92>
c001252b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001252e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012534:	39 d8                	cmp    eax,ebx
c0012536:	73 f3                	jae    c001252b <VAS::allocatePages(int, int)+0x199>
c0012538:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001253c:	83 c4 1c             	add    esp,0x1c
c001253f:	5b                   	pop    ebx
c0012540:	5e                   	pop    esi
c0012541:	5f                   	pop    edi
c0012542:	5d                   	pop    ebp
c0012543:	c3                   	ret    
c0012544:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012549:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001254f:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012556:	0f 84 4d ff ff ff    	je     c00124a9 <VAS::allocatePages(int, int)+0x117>
c001255c:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0012564:	e9 40 ff ff ff       	jmp    c00124a9 <VAS::allocatePages(int, int)+0x117>
c0012569:	90                   	nop

c001256a <VAS::setCPUSpecific(unsigned long)>:
c001256a:	83 ec 0c             	sub    esp,0xc
c001256d:	6a 05                	push   0x5
c001256f:	68 00 00 40 c2       	push   0xc2400000
c0012574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001257c:	e8 0f fd ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012581:	83 c4 1c             	add    esp,0x1c
c0012584:	c3                   	ret    
c0012585:	90                   	nop

c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012586:	55                   	push   ebp
c0012587:	57                   	push   edi
c0012588:	56                   	push   esi
c0012589:	53                   	push   ebx
c001258a:	83 ec 1c             	sub    esp,0x1c
c001258d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012592:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012596:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001259c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00125a0:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00125a6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00125aa:	83 e0 01             	and    eax,0x1
c00125ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00125b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b5:	85 c0                	test   eax,eax
c00125b7:	7e 39                	jle    c00125f2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125bd:	89 f3                	mov    ebx,esi
c00125bf:	c1 e0 0c             	shl    eax,0xc
c00125c2:	01 f0                	add    eax,esi
c00125c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125c8:	55                   	push   ebp
c00125c9:	53                   	push   ebx
c00125ca:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125ce:	29 f0                	sub    eax,esi
c00125d0:	01 d8                	add    eax,ebx
c00125d2:	50                   	push   eax
c00125d3:	57                   	push   edi
c00125d4:	e8 b7 fc ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125d9:	83 c4 10             	add    esp,0x10
c00125dc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125e1:	74 03                	je     c00125e6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125e3:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125e6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125ec:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125f0:	75 d6                	jne    c00125c8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125f2:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125f7:	75 10                	jne    c0012609 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125f9:	0f 20 d8             	mov    eax,cr3
c00125fc:	0f 22 d8             	mov    cr3,eax
c00125ff:	83 c4 1c             	add    esp,0x1c
c0012602:	89 f0                	mov    eax,esi
c0012604:	5b                   	pop    ebx
c0012605:	5e                   	pop    esi
c0012606:	5f                   	pop    edi
c0012607:	5d                   	pop    ebp
c0012608:	c3                   	ret    
c0012609:	89 f3                	mov    ebx,esi
c001260b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001260f:	c1 eb 0a             	shr    ebx,0xa
c0012612:	c1 e0 0c             	shl    eax,0xc
c0012615:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001261b:	01 f0                	add    eax,esi
c001261d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012623:	c1 e8 0a             	shr    eax,0xa
c0012626:	25 00 f0 ff ff       	and    eax,0xfffff000
c001262b:	2d 00 00 40 00       	sub    eax,0x400000
c0012630:	39 c3                	cmp    ebx,eax
c0012632:	77 cb                	ja     c00125ff <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012634:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012637:	81 c3 00 10 00 00    	add    ebx,0x1000
c001263d:	39 d8                	cmp    eax,ebx
c001263f:	73 f3                	jae    c0012634 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012641:	83 c4 1c             	add    esp,0x1c
c0012644:	89 f0                	mov    eax,esi
c0012646:	5b                   	pop    ebx
c0012647:	5e                   	pop    esi
c0012648:	5f                   	pop    edi
c0012649:	5d                   	pop    ebp
c001264a:	c3                   	ret    
c001264b:	90                   	nop

c001264c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001264c:	55                   	push   ebp
c001264d:	57                   	push   edi
c001264e:	56                   	push   esi
c001264f:	53                   	push   ebx
c0012650:	83 ec 1c             	sub    esp,0x1c
c0012653:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012657:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001265b:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001265f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012663:	a9 ff 0f 00 00       	test   eax,0xfff
c0012668:	75 4a                	jne    c00126b4 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c001266a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001266e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012671:	c1 eb 16             	shr    ebx,0x16
c0012674:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c001267b:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001267f:	74 4d                	je     c00126ce <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012681:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012685:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012689:	c1 e8 0a             	shr    eax,0xa
c001268c:	80 fa 01             	cmp    dl,0x1
c001268f:	19 d2                	sbb    edx,edx
c0012691:	c1 e3 0c             	shl    ebx,0xc
c0012694:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012698:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c001269e:	25 fc 0f 00 00       	and    eax,0xffc
c00126a3:	01 d8                	add    eax,ebx
c00126a5:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00126ac:	83 c4 1c             	add    esp,0x1c
c00126af:	5b                   	pop    ebx
c00126b0:	5e                   	pop    esi
c00126b1:	5f                   	pop    edi
c00126b2:	5d                   	pop    ebp
c00126b3:	c3                   	ret    
c00126b4:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126b8:	83 ec 0c             	sub    esp,0xc
c00126bb:	68 28 b4 02 c0       	push   0xc002b428
c00126c0:	e8 34 82 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00126c5:	83 c4 10             	add    esp,0x10
c00126c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126cc:	eb 9c                	jmp    c001266a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126d2:	e8 49 d8 ff ff       	call   c000ff20 <Phys::allocatePage()>
c00126d7:	83 ec 0c             	sub    esp,0xc
c00126da:	89 c5                	mov    ebp,eax
c00126dc:	8b 0d 50 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f450
c00126e2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126e6:	6a 01                	push   0x1
c00126e8:	e8 6c f3 ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c00126ed:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126f4:	6a 01                	push   0x1
c00126f6:	50                   	push   eax
c00126f7:	55                   	push   ebp
c00126f8:	81 cd 07 04 00 00    	or     ebp,0x407
c00126fe:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012702:	51                   	push   ecx
c0012703:	e8 7e fe ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012708:	83 c4 1c             	add    esp,0x1c
c001270b:	68 00 10 00 00       	push   0x1000
c0012710:	6a 00                	push   0x0
c0012712:	50                   	push   eax
c0012713:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012717:	e8 5c e0 fe ff       	call   c0000778 <memset>
c001271c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012720:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012723:	e8 f1 f7 ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c0012728:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012735:	e9 47 ff ff ff       	jmp    c0012681 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c001273a <VAS::VAS(bool)>:
c001273a:	53                   	push   ebx
c001273b:	83 ec 28             	sub    esp,0x28
c001273e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012742:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012746:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001274a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012755:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001275c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012760:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012764:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012767:	e8 b4 d7 ff ff       	call   c000ff20 <Phys::allocatePage()>
c001276c:	89 c2                	mov    edx,eax
c001276e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012772:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012775:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c001277b:	83 ec 0c             	sub    esp,0xc
c001277e:	6a 01                	push   0x1
c0012780:	e8 d4 f2 ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	89 c2                	mov    edx,eax
c001278a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001278e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012791:	83 ec 0c             	sub    esp,0xc
c0012794:	6a 03                	push   0x3
c0012796:	6a 01                	push   0x1
c0012798:	52                   	push   edx
c0012799:	50                   	push   eax
c001279a:	53                   	push   ebx
c001279b:	e8 e6 fd ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127a0:	83 c4 20             	add    esp,0x20
c00127a3:	89 c2                	mov    edx,eax
c00127a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127ac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00127b4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127bc:	7f 1c                	jg     c00127da <VAS::VAS(bool)+0xa0>
c00127be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127c9:	c1 e2 02             	shl    edx,0x2
c00127cc:	01 d0                	add    eax,edx
c00127ce:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127d8:	eb da                	jmp    c00127b4 <VAS::VAS(bool)+0x7a>
c00127da:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127e2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127ea:	7f 7a                	jg     c0012866 <VAS::VAS(bool)+0x12c>
c00127ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127f0:	2d 00 02 00 00       	sub    eax,0x200
c00127f5:	c1 e0 0c             	shl    eax,0xc
c00127f8:	83 c8 03             	or     eax,0x3
c00127fb:	89 c2                	mov    edx,eax
c00127fd:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012802:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012808:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001280e:	83 e0 10             	and    eax,0x10
c0012811:	84 c0                	test   al,al
c0012813:	74 07                	je     c001281c <VAS::VAS(bool)+0xe2>
c0012815:	b8 00 01 00 00       	mov    eax,0x100
c001281a:	eb 05                	jmp    c0012821 <VAS::VAS(bool)+0xe7>
c001281c:	b8 00 00 00 00       	mov    eax,0x0
c0012821:	09 d0                	or     eax,edx
c0012823:	89 c1                	mov    ecx,eax
c0012825:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012829:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001282c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012830:	c1 e2 02             	shl    edx,0x2
c0012833:	01 d0                	add    eax,edx
c0012835:	89 ca                	mov    edx,ecx
c0012837:	89 10                	mov    DWORD PTR [eax],edx
c0012839:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001283d:	2d 40 03 00 00       	sub    eax,0x340
c0012842:	83 f8 7f             	cmp    eax,0x7f
c0012845:	77 16                	ja     c001285d <VAS::VAS(bool)+0x123>
c0012847:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001284e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012852:	c1 e2 02             	shl    edx,0x2
c0012855:	01 d0                	add    eax,edx
c0012857:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001285d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012861:	e9 7c ff ff ff       	jmp    c00127e2 <VAS::VAS(bool)+0xa8>
c0012866:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001286b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012871:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012877:	83 e0 10             	and    eax,0x10
c001287a:	84 c0                	test   al,al
c001287c:	74 07                	je     c0012885 <VAS::VAS(bool)+0x14b>
c001287e:	b8 03 41 00 00       	mov    eax,0x4103
c0012883:	eb 05                	jmp    c001288a <VAS::VAS(bool)+0x150>
c0012885:	b8 03 40 00 00       	mov    eax,0x4003
c001288a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001288e:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012891:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012897:	89 02                	mov    DWORD PTR [edx],eax
c0012899:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001289e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128a4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00128aa:	83 ec 08             	sub    esp,0x8
c00128ad:	50                   	push   eax
c00128ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00128b2:	e8 b3 fc ff ff       	call   c001256a <VAS::setCPUSpecific(unsigned long)>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128c1:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00128c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128cc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128d2:	83 e0 10             	and    eax,0x10
c00128d5:	84 c0                	test   al,al
c00128d7:	74 07                	je     c00128e0 <VAS::VAS(bool)+0x1a6>
c00128d9:	b8 00 01 00 00       	mov    eax,0x100
c00128de:	eb 05                	jmp    c00128e5 <VAS::VAS(bool)+0x1ab>
c00128e0:	b8 00 00 00 00       	mov    eax,0x0
c00128e5:	09 c2                	or     edx,eax
c00128e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128eb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128ee:	05 fc 0f 00 00       	add    eax,0xffc
c00128f3:	83 ca 03             	or     edx,0x3
c00128f6:	89 10                	mov    DWORD PTR [eax],edx
c00128f8:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00128fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012903:	83 ec 0c             	sub    esp,0xc
c0012906:	50                   	push   eax
c0012907:	e8 60 1c 00 00       	call   c001456c <Device::getName()>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	83 ec 08             	sub    esp,0x8
c0012912:	68 6d b5 02 c0       	push   0xc002b56d
c0012917:	50                   	push   eax
c0012918:	e8 a3 df fe ff       	call   c00008c0 <strcmp>
c001291d:	83 c4 10             	add    esp,0x10
c0012920:	85 c0                	test   eax,eax
c0012922:	0f 94 c0             	sete   al
c0012925:	84 c0                	test   al,al
c0012927:	0f 84 87 00 00 00    	je     c00129b4 <VAS::VAS(bool)+0x27a>
c001292d:	fa                   	cli    
c001292e:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012933:	40                   	inc    eax
c0012934:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012939:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001293e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012944:	05 7c 09 00 00       	add    eax,0x97c
c0012949:	83 ec 0c             	sub    esp,0xc
c001294c:	50                   	push   eax
c001294d:	e8 e4 c9 ff ff       	call   c000f336 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012952:	83 c4 10             	add    esp,0x10
c0012955:	25 00 f0 ff ff       	and    eax,0xfffff000
c001295a:	89 c3                	mov    ebx,eax
c001295c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0012961:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012967:	05 7c 09 00 00       	add    eax,0x97c
c001296c:	83 ec 0c             	sub    esp,0xc
c001296f:	50                   	push   eax
c0012970:	e8 c1 c9 ff ff       	call   c000f336 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	83 ec 08             	sub    esp,0x8
c001297b:	50                   	push   eax
c001297c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012980:	e8 75 f5 ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0012985:	83 c4 10             	add    esp,0x10
c0012988:	8b 00                	mov    eax,DWORD PTR [eax]
c001298a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001298f:	6a 11                	push   0x11
c0012991:	53                   	push   ebx
c0012992:	50                   	push   eax
c0012993:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012997:	e8 f4 f8 ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c001299c:	83 c4 10             	add    esp,0x10
c001299f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c00129a4:	48                   	dec    eax
c00129a5:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c00129aa:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c00129af:	85 c0                	test   eax,eax
c00129b1:	75 01                	jne    c00129b4 <VAS::VAS(bool)+0x27a>
c00129b3:	fb                   	sti    
c00129b4:	90                   	nop
c00129b5:	83 c4 28             	add    esp,0x28
c00129b8:	5b                   	pop    ebx
c00129b9:	c3                   	ret    

c00129ba <VAS::evict(unsigned long)>:
c00129ba:	55                   	push   ebp
c00129bb:	57                   	push   edi
c00129bc:	56                   	push   esi
c00129bd:	53                   	push   ebx
c00129be:	83 ec 1c             	sub    esp,0x1c
c00129c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129cd:	e8 c8 f1 ff ff       	call   c0011b9a <Virt::allocateSwapfilePage()>
c00129d2:	89 c7                	mov    edi,eax
c00129d4:	a1 6c e2 02 c0       	mov    eax,ds:0xc002e26c
c00129d9:	85 c0                	test   eax,eax
c00129db:	7e 3d                	jle    c0012a1a <VAS::evict(unsigned long)+0x60>
c00129dd:	89 ee                	mov    esi,ebp
c00129df:	31 db                	xor    ebx,ebx
c00129e1:	83 ec 0c             	sub    esp,0xc
c00129e4:	57                   	push   edi
c00129e5:	e8 9e f1 ff ff       	call   c0011b88 <Virt::swapIDToSector(unsigned long)>
c00129ea:	89 34 24             	mov    DWORD PTR [esp],esi
c00129ed:	01 d8                	add    eax,ebx
c00129ef:	6a 01                	push   0x1
c00129f1:	31 d2                	xor    edx,edx
c00129f3:	43                   	inc    ebx
c00129f4:	52                   	push   edx
c00129f5:	81 c6 00 02 00 00    	add    esi,0x200
c00129fb:	50                   	push   eax
c00129fc:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c0012a03:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c0012a0a:	e8 33 3e 00 00       	call   c0016842 <LogicalDisk::write(unsigned long long, int, void*)>
c0012a0f:	83 c4 20             	add    esp,0x20
c0012a12:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c0012a18:	7f c7                	jg     c00129e1 <VAS::evict(unsigned long)+0x27>
c0012a1a:	83 ec 08             	sub    esp,0x8
c0012a1d:	c1 e7 0b             	shl    edi,0xb
c0012a20:	55                   	push   ebp
c0012a21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a25:	e8 d0 f4 ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0012a2a:	83 c4 0c             	add    esp,0xc
c0012a2d:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a2f:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a35:	09 d7                	or     edi,edx
c0012a37:	89 38                	mov    DWORD PTR [eax],edi
c0012a39:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0012a3e:	40                   	inc    eax
c0012a3f:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c0012a44:	0f 20 da             	mov    edx,cr3
c0012a47:	0f 22 da             	mov    cr3,edx
c0012a4a:	50                   	push   eax
c0012a4b:	55                   	push   ebp
c0012a4c:	68 7b b5 02 c0       	push   0xc002b57b
c0012a51:	e8 09 04 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012a56:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c0012a5b:	c7 44 24 40 90 b5 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b590
c0012a63:	8d 50 01             	lea    edx,[eax+0x1]
c0012a66:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a6a:	89 15 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,edx
c0012a70:	83 c4 2c             	add    esp,0x2c
c0012a73:	5b                   	pop    ebx
c0012a74:	5e                   	pop    esi
c0012a75:	5f                   	pop    edi
c0012a76:	5d                   	pop    ebp
c0012a77:	e9 e3 03 00 00       	jmp    c0012e5f <Dbg::kprintf(char const*, ...)>

c0012a7c <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a7c:	55                   	push   ebp
c0012a7d:	57                   	push   edi
c0012a7e:	56                   	push   esi
c0012a7f:	53                   	push   ebx
c0012a80:	83 ec 0c             	sub    esp,0xc
c0012a83:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a87:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a8d:	0f 84 dc 00 00 00    	je     c0012b6f <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a93:	56                   	push   esi
c0012a94:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a98:	e8 5d f4 ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0012a9d:	5b                   	pop    ebx
c0012a9e:	85 c0                	test   eax,eax
c0012aa0:	5f                   	pop    edi
c0012aa1:	89 c3                	mov    ebx,eax
c0012aa3:	0f 84 c6 00 00 00    	je     c0012b6f <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012aa9:	8b 38                	mov    edi,DWORD PTR [eax]
c0012aab:	31 c0                	xor    eax,eax
c0012aad:	89 fa                	mov    edx,edi
c0012aaf:	81 e2 01 04 00 00    	and    edx,0x401
c0012ab5:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012abb:	0f 85 b0 00 00 00    	jne    c0012b71 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012ac1:	e8 5a d4 ff ff       	call   c000ff20 <Phys::allocatePage()>
c0012ac6:	c1 ef 0b             	shr    edi,0xb
c0012ac9:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012acb:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ad1:	09 c2                	or     edx,eax
c0012ad3:	81 ca 01 08 00 00    	or     edx,0x801
c0012ad9:	89 13                	mov    DWORD PTR [ebx],edx
c0012adb:	8b 0d 6c e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e26c
c0012ae1:	85 c9                	test   ecx,ecx
c0012ae3:	7e 3d                	jle    c0012b22 <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012ae5:	89 f5                	mov    ebp,esi
c0012ae7:	31 db                	xor    ebx,ebx
c0012ae9:	83 ec 0c             	sub    esp,0xc
c0012aec:	57                   	push   edi
c0012aed:	e8 96 f0 ff ff       	call   c0011b88 <Virt::swapIDToSector(unsigned long)>
c0012af2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012af5:	01 d8                	add    eax,ebx
c0012af7:	6a 01                	push   0x1
c0012af9:	31 d2                	xor    edx,edx
c0012afb:	43                   	inc    ebx
c0012afc:	52                   	push   edx
c0012afd:	81 c5 00 02 00 00    	add    ebp,0x200
c0012b03:	50                   	push   eax
c0012b04:	0f be 05 78 e2 02 c0 	movsx  eax,BYTE PTR ds:0xc002e278
c0012b0b:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c0012b12:	e8 bf 3c 00 00       	call   c00167d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0012b17:	83 c4 20             	add    esp,0x20
c0012b1a:	39 1d 6c e2 02 c0    	cmp    DWORD PTR ds:0xc002e26c,ebx
c0012b20:	7f c7                	jg     c0012ae9 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b22:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c0012b27:	48                   	dec    eax
c0012b28:	52                   	push   edx
c0012b29:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c0012b2e:	50                   	push   eax
c0012b2f:	56                   	push   esi
c0012b30:	68 a1 b5 02 c0       	push   0xc002b5a1
c0012b35:	e8 25 03 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012b3a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b3d:	e8 28 f0 ff ff       	call   c0011b6a <Virt::freeSwapfilePage(unsigned long)>
c0012b42:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0012b47:	83 c4 10             	add    esp,0x10
c0012b4a:	48                   	dec    eax
c0012b4b:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0012b50:	85 c0                	test   eax,eax
c0012b52:	75 01                	jne    c0012b55 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b54:	fb                   	sti    
c0012b55:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b59:	25 ff 0f 00 00       	and    eax,0xfff
c0012b5e:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b63:	77 14                	ja     c0012b79 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b65:	0f 20 d8             	mov    eax,cr3
c0012b68:	0f 22 d8             	mov    cr3,eax
c0012b6b:	b0 01                	mov    al,0x1
c0012b6d:	eb 02                	jmp    c0012b71 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b6f:	31 c0                	xor    eax,eax
c0012b71:	83 c4 0c             	add    esp,0xc
c0012b74:	5b                   	pop    ebx
c0012b75:	5e                   	pop    esi
c0012b76:	5f                   	pop    edi
c0012b77:	5d                   	pop    ebp
c0012b78:	c3                   	ret    
c0012b79:	83 ec 0c             	sub    esp,0xc
c0012b7c:	68 b6 b5 02 c0       	push   0xc002b5b6
c0012b81:	e8 d9 02 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012b86:	83 c4 10             	add    esp,0x10
c0012b89:	eb da                	jmp    c0012b65 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b8b:	90                   	nop

c0012b8c <VAS::scanForEviction()>:
c0012b8c:	57                   	push   edi
c0012b8d:	56                   	push   esi
c0012b8e:	53                   	push   ebx
c0012b8f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b93:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b96:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b9c:	75 0e                	jne    c0012bac <VAS::scanForEviction()+0x20>
c0012b9e:	89 da                	mov    edx,ebx
c0012ba0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012ba3:	c1 ea 16             	shr    edx,0x16
c0012ba6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012baa:	74 48                	je     c0012bf4 <VAS::scanForEviction()+0x68>
c0012bac:	53                   	push   ebx
c0012bad:	56                   	push   esi
c0012bae:	e8 47 f3 ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c0012bb3:	5a                   	pop    edx
c0012bb4:	8b 38                	mov    edi,DWORD PTR [eax]
c0012bb6:	59                   	pop    ecx
c0012bb7:	89 fa                	mov    edx,edi
c0012bb9:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012bbf:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bc5:	74 3d                	je     c0012c04 <VAS::scanForEviction()+0x78>
c0012bc7:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bcd:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bd3:	76 2a                	jbe    c0012bff <VAS::scanForEviction()+0x73>
c0012bd5:	31 db                	xor    ebx,ebx
c0012bd7:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bde:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012be4:	75 c6                	jne    c0012bac <VAS::scanForEviction()+0x20>
c0012be6:	89 da                	mov    edx,ebx
c0012be8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012beb:	c1 ea 16             	shr    edx,0x16
c0012bee:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bf2:	75 b8                	jne    c0012bac <VAS::scanForEviction()+0x20>
c0012bf4:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012bfa:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bfd:	eb 97                	jmp    c0012b96 <VAS::scanForEviction()+0xa>
c0012bff:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012c02:	eb 92                	jmp    c0012b96 <VAS::scanForEviction()+0xa>
c0012c04:	f7 c7 01 00 00 00    	test   edi,0x1
c0012c0a:	74 bb                	je     c0012bc7 <VAS::scanForEviction()+0x3b>
c0012c0c:	f7 c7 20 00 00 00    	test   edi,0x20
c0012c12:	74 0a                	je     c0012c1e <VAS::scanForEviction()+0x92>
c0012c14:	83 e7 df             	and    edi,0xffffffdf
c0012c17:	89 38                	mov    DWORD PTR [eax],edi
c0012c19:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c1c:	eb a9                	jmp    c0012bc7 <VAS::scanForEviction()+0x3b>
c0012c1e:	83 ec 08             	sub    esp,0x8
c0012c21:	53                   	push   ebx
c0012c22:	56                   	push   esi
c0012c23:	e8 92 fd ff ff       	call   c00129ba <VAS::evict(unsigned long)>
c0012c28:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c2f:	83 c4 10             	add    esp,0x10
c0012c32:	89 f8                	mov    eax,edi
c0012c34:	5b                   	pop    ebx
c0012c35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c3a:	5e                   	pop    esi
c0012c3b:	5f                   	pop    edi
c0012c3c:	c3                   	ret    

c0012c3d <mapVASFirstTime>:
c0012c3d:	55                   	push   ebp
c0012c3e:	57                   	push   edi
c0012c3f:	56                   	push   esi
c0012c40:	53                   	push   ebx
c0012c41:	83 ec 0c             	sub    esp,0xc
c0012c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c49:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c4c:	4a                   	dec    edx
c0012c4d:	0f 84 8e 00 00 00    	je     c0012ce1 <mapVASFirstTime+0xa4>
c0012c53:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c56:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c59:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c5e:	c1 e5 15             	shl    ebp,0x15
c0012c61:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c66:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c6c:	29 eb                	sub    ebx,ebp
c0012c6e:	29 ee                	sub    esi,ebp
c0012c70:	e8 ab d2 ff ff       	call   c000ff20 <Phys::allocatePage()>
c0012c75:	83 ec 0c             	sub    esp,0xc
c0012c78:	68 03 04 00 00       	push   0x403
c0012c7d:	6a 01                	push   0x1
c0012c7f:	53                   	push   ebx
c0012c80:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c86:	50                   	push   eax
c0012c87:	57                   	push   edi
c0012c88:	e8 f9 f8 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c8d:	83 c4 20             	add    esp,0x20
c0012c90:	39 f3                	cmp    ebx,esi
c0012c92:	75 dc                	jne    c0012c70 <mapVASFirstTime+0x33>
c0012c94:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c99:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c9e:	29 ee                	sub    esi,ebp
c0012ca0:	29 e8                	sub    eax,ebp
c0012ca2:	89 c5                	mov    ebp,eax
c0012ca4:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012ca8:	19 db                	sbb    ebx,ebx
c0012caa:	e8 71 d2 ff ff       	call   c000ff20 <Phys::allocatePage()>
c0012caf:	83 e3 04             	and    ebx,0x4
c0012cb2:	83 ec 0c             	sub    esp,0xc
c0012cb5:	81 c3 03 04 00 00    	add    ebx,0x403
c0012cbb:	53                   	push   ebx
c0012cbc:	6a 01                	push   0x1
c0012cbe:	56                   	push   esi
c0012cbf:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cc5:	50                   	push   eax
c0012cc6:	57                   	push   edi
c0012cc7:	e8 ba f8 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ccc:	83 c4 20             	add    esp,0x20
c0012ccf:	39 f5                	cmp    ebp,esi
c0012cd1:	75 d1                	jne    c0012ca4 <mapVASFirstTime+0x67>
c0012cd3:	0f 20 d8             	mov    eax,cr3
c0012cd6:	0f 22 d8             	mov    cr3,eax
c0012cd9:	83 c4 0c             	add    esp,0xc
c0012cdc:	5b                   	pop    ebx
c0012cdd:	5e                   	pop    esi
c0012cde:	5f                   	pop    edi
c0012cdf:	5d                   	pop    ebp
c0012ce0:	c3                   	ret    
c0012ce1:	83 ec 0c             	sub    esp,0xc
c0012ce4:	68 c6 b5 02 c0       	push   0xc002b5c6
c0012ce9:	e8 71 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012cee:	83 c4 10             	add    esp,0x10
c0012cf1:	83 c4 0c             	add    esp,0xc
c0012cf4:	5b                   	pop    ebx
c0012cf5:	5e                   	pop    esi
c0012cf6:	5f                   	pop    edi
c0012cf7:	5d                   	pop    ebp
c0012cf8:	c3                   	ret    

c0012cf9 <__cxa_atexit>:
c0012cf9:	31 c0                	xor    eax,eax
c0012cfb:	c3                   	ret    

c0012cfc <__cxa_finalize>:
c0012cfc:	c3                   	ret    

c0012cfd <__stack_chk_fail>:
c0012cfd:	55                   	push   ebp
c0012cfe:	89 e5                	mov    ebp,esp
c0012d00:	83 ec 14             	sub    esp,0x14
c0012d03:	68 df b5 02 c0       	push   0xc002b5df
c0012d08:	e8 52 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012d0d:	58                   	pop    eax
c0012d0e:	5a                   	pop    edx
c0012d0f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012d12:	68 2f b6 02 c0       	push   0xc002b62f
c0012d17:	e8 43 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012d1c:	59                   	pop    ecx
c0012d1d:	58                   	pop    eax
c0012d1e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d21:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d24:	68 2f b6 02 c0       	push   0xc002b62f
c0012d29:	e8 31 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012d2e:	5a                   	pop    edx
c0012d2f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d32:	59                   	pop    ecx
c0012d33:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d35:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d38:	68 2f b6 02 c0       	push   0xc002b62f
c0012d3d:	e8 1d 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012d42:	5a                   	pop    edx
c0012d43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d46:	59                   	pop    ecx
c0012d47:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d49:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d4b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d4e:	68 2f b6 02 c0       	push   0xc002b62f
c0012d53:	e8 07 01 00 00       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0012d58:	c7 04 24 37 b6 02 c0 	mov    DWORD PTR [esp],0xc002b637
c0012d5f:	e8 95 7b 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0012d64:	83 c4 10             	add    esp,0x10
c0012d67:	c9                   	leave  
c0012d68:	c3                   	ret    

c0012d69 <__cxa_pure_virtual>:
c0012d69:	83 ec 18             	sub    esp,0x18
c0012d6c:	68 4f b6 02 c0       	push   0xc002b64f
c0012d71:	e8 83 7b 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0012d76:	83 c4 1c             	add    esp,0x1c
c0012d79:	c3                   	ret    

c0012d7a <operator new[](unsigned long)>:
c0012d7a:	e9 35 cb ff ff       	jmp    c000f8b4 <malloc>

c0012d7f <operator delete(void*, unsigned long)>:
c0012d7f:	e9 50 cb ff ff       	jmp    c000f8d4 <rfree>

c0012d84 <operator delete[](void*)>:
c0012d84:	e9 4b cb ff ff       	jmp    c000f8d4 <rfree>

c0012d89 <operator delete[](void*, unsigned long)>:
c0012d89:	e9 46 cb ff ff       	jmp    c000f8d4 <rfree>

c0012d8e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d8e:	57                   	push   edi
c0012d8f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d94:	56                   	push   esi
c0012d95:	be 64 b6 02 c0       	mov    esi,0xc002b664
c0012d9a:	53                   	push   ebx
c0012d9b:	83 ec 40             	sub    esp,0x40
c0012d9e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012da2:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012da6:	fc                   	cld    
c0012da7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012da9:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012dad:	83 f9 3e             	cmp    ecx,0x3e
c0012db0:	7e 05                	jle    c0012db7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012db2:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012db7:	89 df                	mov    edi,ebx
c0012db9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012dbd:	eb 02                	jmp    c0012dc1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012dbf:	89 c7                	mov    edi,eax
c0012dc1:	31 d2                	xor    edx,edx
c0012dc3:	46                   	inc    esi
c0012dc4:	89 f8                	mov    eax,edi
c0012dc6:	f7 f1                	div    ecx
c0012dc8:	39 cf                	cmp    edi,ecx
c0012dca:	73 f3                	jae    c0012dbf <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012dcc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dcf:	eb 02                	jmp    c0012dd3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012dd1:	89 c3                	mov    ebx,eax
c0012dd3:	31 d2                	xor    edx,edx
c0012dd5:	4e                   	dec    esi
c0012dd6:	89 d8                	mov    eax,ebx
c0012dd8:	f7 f1                	div    ecx
c0012dda:	39 cb                	cmp    ebx,ecx
c0012ddc:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012de0:	88 16                	mov    BYTE PTR [esi],dl
c0012de2:	73 ed                	jae    c0012dd1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012de4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012de8:	83 c4 40             	add    esp,0x40
c0012deb:	5b                   	pop    ebx
c0012dec:	5e                   	pop    esi
c0012ded:	5f                   	pop    edi
c0012dee:	c3                   	ret    

c0012def <Dbg::logc(char)>:
c0012def:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012df3:	ba fd 03 00 00       	mov    edx,0x3fd
c0012df8:	ec                   	in     al,dx
c0012df9:	a8 20                	test   al,0x20
c0012dfb:	74 fb                	je     c0012df8 <Dbg::logc(char)+0x9>
c0012dfd:	ba f8 03 00 00       	mov    edx,0x3f8
c0012e02:	88 c8                	mov    al,cl
c0012e04:	ee                   	out    dx,al
c0012e05:	c3                   	ret    

c0012e06 <Dbg::logs(char*)>:
c0012e06:	53                   	push   ebx
c0012e07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012e0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e0e:	84 c0                	test   al,al
c0012e10:	74 0f                	je     c0012e21 <Dbg::logs(char*)+0x1b>
c0012e12:	50                   	push   eax
c0012e13:	43                   	inc    ebx
c0012e14:	e8 d6 ff ff ff       	call   c0012def <Dbg::logc(char)>
c0012e19:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e1c:	5a                   	pop    edx
c0012e1d:	84 c0                	test   al,al
c0012e1f:	75 f1                	jne    c0012e12 <Dbg::logs(char*)+0xc>
c0012e21:	5b                   	pop    ebx
c0012e22:	c3                   	ret    

c0012e23 <Dbg::logWriteInt(unsigned int)>:
c0012e23:	83 ec 10             	sub    esp,0x10
c0012e26:	6a 0a                	push   0xa
c0012e28:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e2c:	50                   	push   eax
c0012e2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e31:	e8 58 ff ff ff       	call   c0012d8e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e36:	50                   	push   eax
c0012e37:	e8 ca ff ff ff       	call   c0012e06 <Dbg::logs(char*)>
c0012e3c:	83 c4 20             	add    esp,0x20
c0012e3f:	c3                   	ret    

c0012e40 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e40:	83 ec 10             	sub    esp,0x10
c0012e43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e47:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e4b:	50                   	push   eax
c0012e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e50:	e8 39 ff ff ff       	call   c0012d8e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e55:	50                   	push   eax
c0012e56:	e8 ab ff ff ff       	call   c0012e06 <Dbg::logs(char*)>
c0012e5b:	83 c4 20             	add    esp,0x20
c0012e5e:	c3                   	ret    

c0012e5f <Dbg::kprintf(char const*, ...)>:
c0012e5f:	55                   	push   ebp
c0012e60:	57                   	push   edi
c0012e61:	56                   	push   esi
c0012e62:	53                   	push   ebx
c0012e63:	83 ec 0c             	sub    esp,0xc
c0012e66:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e6a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e6e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e72:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e75:	84 c0                	test   al,al
c0012e77:	74 4a                	je     c0012ec3 <Dbg::kprintf(char const*, ...)+0x64>
c0012e79:	31 db                	xor    ebx,ebx
c0012e7b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e7e:	3c 25                	cmp    al,0x25
c0012e80:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e83:	0f 85 e4 00 00 00    	jne    c0012f6d <Dbg::kprintf(char const*, ...)+0x10e>
c0012e89:	83 c3 02             	add    ebx,0x2
c0012e8c:	8a 07                	mov    al,BYTE PTR [edi]
c0012e8e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e91:	83 e8 25             	sub    eax,0x25
c0012e94:	3c 53                	cmp    al,0x53
c0012e96:	0f 87 ba 00 00 00    	ja     c0012f56 <Dbg::kprintf(char const*, ...)+0xf7>
c0012e9c:	0f b6 c0             	movzx  eax,al
c0012e9f:	ff 24 85 a4 b6 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd495c]
c0012ea6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eaa:	89 c8                	mov    eax,ecx
c0012eac:	83 c1 04             	add    ecx,0x4
c0012eaf:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012eb3:	ff 30                	push   DWORD PTR [eax]
c0012eb5:	e8 4c ff ff ff       	call   c0012e06 <Dbg::logs(char*)>
c0012eba:	58                   	pop    eax
c0012ebb:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ebf:	84 c0                	test   al,al
c0012ec1:	75 b8                	jne    c0012e7b <Dbg::kprintf(char const*, ...)+0x1c>
c0012ec3:	83 c4 0c             	add    esp,0xc
c0012ec6:	5b                   	pop    ebx
c0012ec7:	5e                   	pop    esi
c0012ec8:	5f                   	pop    edi
c0012ec9:	5d                   	pop    ebp
c0012eca:	c3                   	ret    
c0012ecb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ecf:	89 d0                	mov    eax,edx
c0012ed1:	83 c2 04             	add    edx,0x4
c0012ed4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ed8:	ff 30                	push   DWORD PTR [eax]
c0012eda:	e8 44 ff ff ff       	call   c0012e23 <Dbg::logWriteInt(unsigned int)>
c0012edf:	58                   	pop    eax
c0012ee0:	eb d9                	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ee6:	89 d0                	mov    eax,edx
c0012ee8:	83 c2 04             	add    edx,0x4
c0012eeb:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012eee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ef2:	50                   	push   eax
c0012ef3:	e8 f7 fe ff ff       	call   c0012def <Dbg::logc(char)>
c0012ef8:	58                   	pop    eax
c0012ef9:	eb c0                	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012efb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012eff:	89 c8                	mov    eax,ecx
c0012f01:	83 c1 04             	add    ecx,0x4
c0012f04:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f08:	ff 30                	push   DWORD PTR [eax]
c0012f0a:	e8 14 ff ff ff       	call   c0012e23 <Dbg::logWriteInt(unsigned int)>
c0012f0f:	5f                   	pop    edi
c0012f10:	eb a9                	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f12:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f16:	89 c8                	mov    eax,ecx
c0012f18:	83 c1 04             	add    ecx,0x4
c0012f1b:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f1f:	6a 10                	push   0x10
c0012f21:	ff 30                	push   DWORD PTR [eax]
c0012f23:	e8 18 ff ff ff       	call   c0012e40 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f28:	59                   	pop    ecx
c0012f29:	5f                   	pop    edi
c0012f2a:	eb 8f                	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f30:	89 d0                	mov    eax,edx
c0012f32:	83 c2 08             	add    edx,0x8
c0012f35:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f39:	6a 10                	push   0x10
c0012f3b:	ff 30                	push   DWORD PTR [eax]
c0012f3d:	e8 fe fe ff ff       	call   c0012e40 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f42:	58                   	pop    eax
c0012f43:	5a                   	pop    edx
c0012f44:	e9 72 ff ff ff       	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f49:	6a 25                	push   0x25
c0012f4b:	e8 9f fe ff ff       	call   c0012def <Dbg::logc(char)>
c0012f50:	58                   	pop    eax
c0012f51:	e9 65 ff ff ff       	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f56:	6a 25                	push   0x25
c0012f58:	e8 92 fe ff ff       	call   c0012def <Dbg::logc(char)>
c0012f5d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f60:	50                   	push   eax
c0012f61:	e8 89 fe ff ff       	call   c0012def <Dbg::logc(char)>
c0012f66:	5a                   	pop    edx
c0012f67:	59                   	pop    ecx
c0012f68:	e9 4e ff ff ff       	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f6d:	50                   	push   eax
c0012f6e:	89 eb                	mov    ebx,ebp
c0012f70:	e8 7a fe ff ff       	call   c0012def <Dbg::logc(char)>
c0012f75:	89 fd                	mov    ebp,edi
c0012f77:	58                   	pop    eax
c0012f78:	e9 3e ff ff ff       	jmp    c0012ebb <Dbg::kprintf(char const*, ...)+0x5c>
c0012f7d:	90                   	nop

c0012f7e <File::read(unsigned long long, void*, int*)>:
c0012f7e:	53                   	push   ebx
c0012f7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f8e:	3c 19                	cmp    al,0x19
c0012f90:	77 35                	ja     c0012fc7 <File::read(unsigned long long, void*, int*)+0x49>
c0012f92:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0012f99:	85 c0                	test   eax,eax
c0012f9b:	74 2a                	je     c0012fc7 <File::read(unsigned long long, void*, int*)+0x49>
c0012f9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fa3:	85 c0                	test   eax,eax
c0012fa5:	74 20                	je     c0012fc7 <File::read(unsigned long long, void*, int*)+0x49>
c0012fa7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fab:	74 21                	je     c0012fce <File::read(unsigned long long, void*, int*)+0x50>
c0012fad:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012faf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012fb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fc1:	5b                   	pop    ebx
c0012fc2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fc5:	ff e0                	jmp    eax
c0012fc7:	b8 0b 00 00 00       	mov    eax,0xb
c0012fcc:	eb 05                	jmp    c0012fd3 <File::read(unsigned long long, void*, int*)+0x55>
c0012fce:	b8 05 00 00 00       	mov    eax,0x5
c0012fd3:	5b                   	pop    ebx
c0012fd4:	c3                   	ret    
c0012fd5:	90                   	nop

c0012fd6 <File::write(unsigned long long, void*, int*)>:
c0012fd6:	53                   	push   ebx
c0012fd7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fdb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fdf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fe6:	3c 19                	cmp    al,0x19
c0012fe8:	77 35                	ja     c001301f <File::write(unsigned long long, void*, int*)+0x49>
c0012fea:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0012ff1:	85 c0                	test   eax,eax
c0012ff3:	74 2a                	je     c001301f <File::write(unsigned long long, void*, int*)+0x49>
c0012ff5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ffb:	85 c0                	test   eax,eax
c0012ffd:	74 20                	je     c001301f <File::write(unsigned long long, void*, int*)+0x49>
c0012fff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013003:	74 21                	je     c0013026 <File::write(unsigned long long, void*, int*)+0x50>
c0013005:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013007:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001300b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013011:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013015:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013019:	5b                   	pop    ebx
c001301a:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001301d:	ff e0                	jmp    eax
c001301f:	b8 0b 00 00 00       	mov    eax,0xb
c0013024:	eb 05                	jmp    c001302b <File::write(unsigned long long, void*, int*)+0x55>
c0013026:	b8 05 00 00 00       	mov    eax,0x5
c001302b:	5b                   	pop    ebx
c001302c:	c3                   	ret    
c001302d:	90                   	nop

c001302e <Directory::read(unsigned long long, void*, int*)>:
c001302e:	53                   	push   ebx
c001302f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013033:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013037:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001303e:	3c 19                	cmp    al,0x19
c0013040:	77 35                	ja     c0013077 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013042:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0013049:	85 c0                	test   eax,eax
c001304b:	74 2a                	je     c0013077 <Directory::read(unsigned long long, void*, int*)+0x49>
c001304d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013053:	85 c0                	test   eax,eax
c0013055:	74 20                	je     c0013077 <Directory::read(unsigned long long, void*, int*)+0x49>
c0013057:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001305b:	74 21                	je     c001307e <Directory::read(unsigned long long, void*, int*)+0x50>
c001305d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001305f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013063:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013069:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001306d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013071:	5b                   	pop    ebx
c0013072:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013075:	ff e0                	jmp    eax
c0013077:	b8 0b 00 00 00       	mov    eax,0xb
c001307c:	eb 05                	jmp    c0013083 <Directory::read(unsigned long long, void*, int*)+0x55>
c001307e:	b8 05 00 00 00       	mov    eax,0x5
c0013083:	5b                   	pop    ebx
c0013084:	c3                   	ret    
c0013085:	90                   	nop

c0013086 <Directory::write(unsigned long long, void*, int*)>:
c0013086:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001308a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013091:	b8 0b 00 00 00       	mov    eax,0xb
c0013096:	80 fa 19             	cmp    dl,0x19
c0013099:	77 18                	ja     c00130b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001309b:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c00130a2:	85 d2                	test   edx,edx
c00130a4:	74 0d                	je     c00130b3 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00130a6:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00130ad:	19 c0                	sbb    eax,eax
c00130af:	83 e0 0a             	and    eax,0xa
c00130b2:	40                   	inc    eax
c00130b3:	c3                   	ret    

c00130b4 <File::isAtty()>:
c00130b4:	31 c0                	xor    eax,eax
c00130b6:	c3                   	ret    
c00130b7:	90                   	nop

c00130b8 <Directory::isAtty()>:
c00130b8:	31 c0                	xor    eax,eax
c00130ba:	c3                   	ret    
c00130bb:	90                   	nop

c00130bc <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130bc:	b8 0a 00 00 00       	mov    eax,0xa
c00130c1:	c3                   	ret    

c00130c2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130c2:	b8 0a 00 00 00       	mov    eax,0xa
c00130c7:	c3                   	ret    

c00130c8 <Filesystem::getFileFirstSector(char const*)>:
c00130c8:	31 c0                	xor    eax,eax
c00130ca:	31 d2                	xor    edx,edx
c00130cc:	c3                   	ret    
c00130cd:	90                   	nop

c00130ce <File::~File()>:
c00130ce:	83 ec 0c             	sub    esp,0xc
c00130d1:	ba 64 b8 02 c0       	mov    edx,0xc002b864
c00130d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130da:	89 10                	mov    DWORD PTR [eax],edx
c00130dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e0:	83 ec 0c             	sub    esp,0xc
c00130e3:	50                   	push   eax
c00130e4:	e8 0f e7 ff ff       	call   c00117f8 <UnixFile::~UnixFile()>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	90                   	nop
c00130ed:	83 c4 0c             	add    esp,0xc
c00130f0:	c3                   	ret    
c00130f1:	90                   	nop

c00130f2 <File::~File()>:
c00130f2:	83 ec 0c             	sub    esp,0xc
c00130f5:	83 ec 0c             	sub    esp,0xc
c00130f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130fc:	e8 cd ff ff ff       	call   c00130ce <File::~File()>
c0013101:	83 c4 10             	add    esp,0x10
c0013104:	83 ec 08             	sub    esp,0x8
c0013107:	68 14 01 00 00       	push   0x114
c001310c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013110:	e8 6a fc ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0013115:	83 c4 10             	add    esp,0x10
c0013118:	83 c4 0c             	add    esp,0xc
c001311b:	c3                   	ret    

c001311c <Directory::~Directory()>:
c001311c:	83 ec 0c             	sub    esp,0xc
c001311f:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0013124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013128:	89 10                	mov    DWORD PTR [eax],edx
c001312a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001312e:	83 ec 0c             	sub    esp,0xc
c0013131:	50                   	push   eax
c0013132:	e8 c1 e6 ff ff       	call   c00117f8 <UnixFile::~UnixFile()>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	90                   	nop
c001313b:	83 c4 0c             	add    esp,0xc
c001313e:	c3                   	ret    
c001313f:	90                   	nop

c0013140 <Directory::~Directory()>:
c0013140:	83 ec 0c             	sub    esp,0xc
c0013143:	83 ec 0c             	sub    esp,0xc
c0013146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001314a:	e8 cd ff ff ff       	call   c001311c <Directory::~Directory()>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	83 ec 08             	sub    esp,0x8
c0013155:	68 14 01 00 00       	push   0x114
c001315a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001315e:	e8 1c fc ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0013163:	83 c4 10             	add    esp,0x10
c0013166:	83 c4 0c             	add    esp,0xc
c0013169:	c3                   	ret    

c001316a <Filesystem::Filesystem()>:
c001316a:	ba fc b7 02 c0       	mov    edx,0xc002b7fc
c001316f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013173:	89 10                	mov    DWORD PTR [eax],edx
c0013175:	8b 15 54 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f454
c001317b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013182:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013186:	a3 54 f4 02 c0       	mov    ds:0xc002f454,eax
c001318b:	90                   	nop
c001318c:	c3                   	ret    
c001318d:	90                   	nop

c001318e <Filesystem::~Filesystem()>:
c001318e:	ba fc b7 02 c0       	mov    edx,0xc002b7fc
c0013193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013197:	89 10                	mov    DWORD PTR [eax],edx
c0013199:	90                   	nop
c001319a:	c3                   	ret    
c001319b:	90                   	nop

c001319c <Filesystem::~Filesystem()>:
c001319c:	83 ec 0c             	sub    esp,0xc
c001319f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131a3:	e8 e6 ff ff ff       	call   c001318e <Filesystem::~Filesystem()>
c00131a8:	83 c4 04             	add    esp,0x4
c00131ab:	83 ec 08             	sub    esp,0x8
c00131ae:	6a 08                	push   0x8
c00131b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b4:	e8 c6 fb ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c00131b9:	83 c4 10             	add    esp,0x10
c00131bc:	83 c4 0c             	add    esp,0xc
c00131bf:	c3                   	ret    

c00131c0 <Fs::getcwd(Process*, char*, int)>:
c00131c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131c4:	31 c0                	xor    eax,eax
c00131c6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131c9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131cd:	7d 15                	jge    c00131e4 <Fs::getcwd(Process*, char*, int)+0x24>
c00131cf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131d3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131da:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131dd:	84 c9                	test   cl,cl
c00131df:	74 06                	je     c00131e7 <Fs::getcwd(Process*, char*, int)+0x27>
c00131e1:	40                   	inc    eax
c00131e2:	eb e2                	jmp    c00131c6 <Fs::getcwd(Process*, char*, int)+0x6>
c00131e4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131e7:	31 c0                	xor    eax,eax
c00131e9:	c3                   	ret    

c00131ea <Fs::initVFS()>:
c00131ea:	83 ec 18             	sub    esp,0x18
c00131ed:	6a 08                	push   0x8
c00131ef:	e8 c0 c6 ff ff       	call   c000f8b4 <malloc>
c00131f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00131f7:	e8 e6 e6 00 00       	call   c00218e2 <FAT::FAT()>
c00131fc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013203:	e8 ac c6 ff ff       	call   c000f8b4 <malloc>
c0013208:	89 04 24             	mov    DWORD PTR [esp],eax
c001320b:	e8 0e f9 00 00       	call   c0022b1e <ISO9660::ISO9660()>
c0013210:	83 c4 1c             	add    esp,0x1c
c0013213:	c3                   	ret    

c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0013214:	55                   	push   ebp
c0013215:	57                   	push   edi
c0013216:	56                   	push   esi
c0013217:	53                   	push   ebx
c0013218:	81 ec 10 04 00 00    	sub    esp,0x410
c001321e:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0013225:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001322c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0013233:	68 00 04 00 00       	push   0x400
c0013238:	6a 00                	push   0x0
c001323a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001323e:	56                   	push   esi
c001323f:	e8 34 d5 fe ff       	call   c0000778 <memset>
c0013244:	83 c4 10             	add    esp,0x10
c0013247:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001324b:	75 0b                	jne    c0013258 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c001324d:	50                   	push   eax
c001324e:	50                   	push   eax
c001324f:	57                   	push   edi
c0013250:	56                   	push   esi
c0013251:	e8 de d5 fe ff       	call   c0000834 <strcpy>
c0013256:	eb 41                	jmp    c0013299 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013258:	8a 07                	mov    al,BYTE PTR [edi]
c001325a:	3c 5c                	cmp    al,0x5c
c001325c:	74 04                	je     c0013262 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c001325e:	3c 2f                	cmp    al,0x2f
c0013260:	75 18                	jne    c001327a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0013262:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0013265:	3c 60                	cmp    al,0x60
c0013267:	7e 03                	jle    c001326c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013269:	83 e8 20             	sub    eax,0x20
c001326c:	88 04 24             	mov    BYTE PTR [esp],al
c001326f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013276:	50                   	push   eax
c0013277:	50                   	push   eax
c0013278:	eb 18                	jmp    c0013292 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c001327a:	50                   	push   eax
c001327b:	50                   	push   eax
c001327c:	55                   	push   ebp
c001327d:	56                   	push   esi
c001327e:	e8 b1 d5 fe ff       	call   c0000834 <strcpy>
c0013283:	5a                   	pop    edx
c0013284:	59                   	pop    ecx
c0013285:	68 11 d0 02 c0       	push   0xc002d011
c001328a:	56                   	push   esi
c001328b:	e8 e4 d6 fe ff       	call   c0000974 <strcat>
c0013290:	5d                   	pop    ebp
c0013291:	58                   	pop    eax
c0013292:	57                   	push   edi
c0013293:	56                   	push   esi
c0013294:	e8 db d6 fe ff       	call   c0000974 <strcat>
c0013299:	83 c4 10             	add    esp,0x10
c001329c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001329f:	3c 60                	cmp    al,0x60
c00132a1:	7e 03                	jle    c00132a6 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c00132a3:	83 e8 20             	sub    eax,0x20
c00132a6:	88 04 24             	mov    BYTE PTR [esp],al
c00132a9:	88 03                	mov    BYTE PTR [ebx],al
c00132ab:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00132b2:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132b8:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132bc:	bf 03 00 00 00       	mov    edi,0x3
c00132c1:	b8 03 00 00 00       	mov    eax,0x3
c00132c6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132c9:	84 d2                	test   dl,dl
c00132cb:	0f 84 91 00 00 00    	je     c0013362 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132d1:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132d4:	80 fa 5c             	cmp    dl,0x5c
c00132d7:	74 05                	je     c00132de <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132d9:	80 fa 2f             	cmp    dl,0x2f
c00132dc:	75 12                	jne    c00132f0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132de:	89 c5                	mov    ebp,eax
c00132e0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132e5:	74 09                	je     c00132f0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132e7:	40                   	inc    eax
c00132e8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132ec:	89 cf                	mov    edi,ecx
c00132ee:	eb d6                	jmp    c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132f0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132f5:	75 5b                	jne    c0013352 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132f7:	80 fa 2e             	cmp    dl,0x2e
c00132fa:	75 56                	jne    c0013352 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132fc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0013300:	74 19                	je     c001331b <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0013302:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013307:	74 53                	je     c001335c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013309:	89 f9                	mov    ecx,edi
c001330b:	41                   	inc    ecx
c001330c:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001330f:	80 fa 2f             	cmp    dl,0x2f
c0013312:	74 f7                	je     c001330b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013314:	80 fa 5c             	cmp    dl,0x5c
c0013317:	74 f2                	je     c001330b <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013319:	eb d1                	jmp    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001331b:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013320:	74 3a                	je     c001335c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013322:	83 f8 03             	cmp    eax,0x3
c0013325:	74 c5                	je     c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013327:	41                   	inc    ecx
c0013328:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001332b:	80 fa 2f             	cmp    dl,0x2f
c001332e:	74 f7                	je     c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013330:	80 fa 5c             	cmp    dl,0x5c
c0013333:	74 f2                	je     c0013327 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013335:	48                   	dec    eax
c0013336:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001333a:	75 06                	jne    c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001333c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013340:	eb f3                	jmp    c0013335 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0013342:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013346:	74 07                	je     c001334f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013348:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001334c:	48                   	dec    eax
c001334d:	eb f3                	jmp    c0013342 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001334f:	40                   	inc    eax
c0013350:	eb 9a                	jmp    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013352:	80 fa 2f             	cmp    dl,0x2f
c0013355:	74 95                	je     c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013357:	80 fa 5c             	cmp    dl,0x5c
c001335a:	74 90                	je     c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001335c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001335f:	40                   	inc    eax
c0013360:	eb 8a                	jmp    c00132ec <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013362:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013366:	83 ec 0c             	sub    esp,0xc
c0013369:	53                   	push   ebx
c001336a:	e8 25 d4 fe ff       	call   c0000794 <strlen>
c001336f:	83 c4 10             	add    esp,0x10
c0013372:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013377:	75 26                	jne    c001339f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013379:	83 ec 0c             	sub    esp,0xc
c001337c:	53                   	push   ebx
c001337d:	e8 12 d4 fe ff       	call   c0000794 <strlen>
c0013382:	83 c4 10             	add    esp,0x10
c0013385:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c001338a:	74 26                	je     c00133b2 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c001338c:	83 ec 0c             	sub    esp,0xc
c001338f:	53                   	push   ebx
c0013390:	e8 ff d3 fe ff       	call   c0000794 <strlen>
c0013395:	83 c4 10             	add    esp,0x10
c0013398:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001339d:	eb c7                	jmp    c0013366 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c001339f:	83 ec 0c             	sub    esp,0xc
c00133a2:	53                   	push   ebx
c00133a3:	e8 ec d3 fe ff       	call   c0000794 <strlen>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00133b0:	74 c7                	je     c0013379 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00133b2:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133b8:	5b                   	pop    ebx
c00133b9:	5e                   	pop    esi
c00133ba:	5f                   	pop    edi
c00133bb:	5d                   	pop    ebp
c00133bc:	c3                   	ret    
c00133bd:	90                   	nop

c00133be <File::File(char const*, Process*)>:
c00133be:	83 ec 0c             	sub    esp,0xc
c00133c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c5:	83 ec 08             	sub    esp,0x8
c00133c8:	6a 00                	push   0x0
c00133ca:	50                   	push   eax
c00133cb:	e8 46 e2 ff ff       	call   c0011616 <UnixFile::UnixFile(int)>
c00133d0:	83 c4 10             	add    esp,0x10
c00133d3:	ba 64 b8 02 c0       	mov    edx,0xc002b864
c00133d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dc:	89 10                	mov    DWORD PTR [eax],edx
c00133de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ec:	83 c0 0d             	add    eax,0xd
c00133ef:	83 ec 04             	sub    esp,0x4
c00133f2:	52                   	push   edx
c00133f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133f7:	50                   	push   eax
c00133f8:	e8 17 fe ff ff       	call   c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>
c00133fd:	83 c4 10             	add    esp,0x10
c0013400:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013404:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013407:	8d 50 bf             	lea    edx,[eax-0x41]
c001340a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340e:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013418:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001341c:	90                   	nop
c001341d:	83 c4 0c             	add    esp,0xc
c0013420:	c3                   	ret    
c0013421:	90                   	nop

c0013422 <File::open(FileOpenMode)>:
c0013422:	53                   	push   ebx
c0013423:	b8 0b 00 00 00       	mov    eax,0xb
c0013428:	83 ec 08             	sub    esp,0x8
c001342b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001342f:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013436:	80 fa 19             	cmp    dl,0x19
c0013439:	77 40                	ja     c001347b <File::open(FileOpenMode)+0x59>
c001343b:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c0013442:	85 d2                	test   edx,edx
c0013444:	74 35                	je     c001347b <File::open(FileOpenMode)+0x59>
c0013446:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001344c:	85 d2                	test   edx,edx
c001344e:	74 2b                	je     c001347b <File::open(FileOpenMode)+0x59>
c0013450:	b8 06 00 00 00       	mov    eax,0x6
c0013455:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013459:	75 20                	jne    c001347b <File::open(FileOpenMode)+0x59>
c001345b:	8b 02                	mov    eax,DWORD PTR [edx]
c001345d:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013463:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013467:	51                   	push   ecx
c0013468:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001346b:	51                   	push   ecx
c001346c:	52                   	push   edx
c001346d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013470:	83 c4 10             	add    esp,0x10
c0013473:	85 c0                	test   eax,eax
c0013475:	75 04                	jne    c001347b <File::open(FileOpenMode)+0x59>
c0013477:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001347b:	83 c4 08             	add    esp,0x8
c001347e:	5b                   	pop    ebx
c001347f:	c3                   	ret    

c0013480 <File::close()>:
c0013480:	53                   	push   ebx
c0013481:	b8 0b 00 00 00       	mov    eax,0xb
c0013486:	83 ec 08             	sub    esp,0x8
c0013489:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001348d:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013494:	80 fa 19             	cmp    dl,0x19
c0013497:	77 41                	ja     c00134da <File::close()+0x5a>
c0013499:	8b 1c 95 e0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0720]
c00134a0:	85 db                	test   ebx,ebx
c00134a2:	74 36                	je     c00134da <File::close()+0x5a>
c00134a4:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00134ab:	74 2d                	je     c00134da <File::close()+0x5a>
c00134ad:	b8 05 00 00 00       	mov    eax,0x5
c00134b2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00134b6:	74 22                	je     c00134da <File::close()+0x5a>
c00134b8:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134bc:	8b 04 95 e0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0720]
c00134c3:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134c9:	53                   	push   ebx
c00134ca:	53                   	push   ebx
c00134cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00134cd:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134d3:	50                   	push   eax
c00134d4:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134d7:	83 c4 10             	add    esp,0x10
c00134da:	83 c4 08             	add    esp,0x8
c00134dd:	5b                   	pop    ebx
c00134de:	c3                   	ret    
c00134df:	90                   	nop

c00134e0 <File::seek(unsigned long long)>:
c00134e0:	56                   	push   esi
c00134e1:	53                   	push   ebx
c00134e2:	b8 0b 00 00 00       	mov    eax,0xb
c00134e7:	51                   	push   ecx
c00134e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134ec:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134f0:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134f7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134fb:	80 fa 19             	cmp    dl,0x19
c00134fe:	77 31                	ja     c0013531 <File::seek(unsigned long long)+0x51>
c0013500:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c0013507:	85 d2                	test   edx,edx
c0013509:	74 26                	je     c0013531 <File::seek(unsigned long long)+0x51>
c001350b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013511:	85 d2                	test   edx,edx
c0013513:	74 1c                	je     c0013531 <File::seek(unsigned long long)+0x51>
c0013515:	b8 05 00 00 00       	mov    eax,0x5
c001351a:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001351e:	74 11                	je     c0013531 <File::seek(unsigned long long)+0x51>
c0013520:	8b 02                	mov    eax,DWORD PTR [edx]
c0013522:	53                   	push   ebx
c0013523:	51                   	push   ecx
c0013524:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c001352a:	52                   	push   edx
c001352b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001352e:	83 c4 10             	add    esp,0x10
c0013531:	5a                   	pop    edx
c0013532:	5b                   	pop    ebx
c0013533:	5e                   	pop    esi
c0013534:	c3                   	ret    
c0013535:	90                   	nop

c0013536 <File::tell(unsigned long long*)>:
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	b8 0b 00 00 00       	mov    eax,0xb
c001353e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013542:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013549:	80 fa 19             	cmp    dl,0x19
c001354c:	77 34                	ja     c0013582 <File::tell(unsigned long long*)+0x4c>
c001354e:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c0013555:	85 d2                	test   edx,edx
c0013557:	74 29                	je     c0013582 <File::tell(unsigned long long*)+0x4c>
c0013559:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001355f:	85 d2                	test   edx,edx
c0013561:	74 1f                	je     c0013582 <File::tell(unsigned long long*)+0x4c>
c0013563:	b8 05 00 00 00       	mov    eax,0x5
c0013568:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001356c:	74 14                	je     c0013582 <File::tell(unsigned long long*)+0x4c>
c001356e:	50                   	push   eax
c001356f:	8b 02                	mov    eax,DWORD PTR [edx]
c0013571:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013575:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001357b:	52                   	push   edx
c001357c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001357f:	83 c4 10             	add    esp,0x10
c0013582:	83 c4 0c             	add    esp,0xc
c0013585:	c3                   	ret    

c0013586 <File::rewind()>:
c0013586:	83 ec 10             	sub    esp,0x10
c0013589:	6a 00                	push   0x0
c001358b:	6a 00                	push   0x0
c001358d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013591:	e8 4a ff ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c0013596:	83 c4 1c             	add    esp,0x1c
c0013599:	c3                   	ret    

c001359a <File::unlink()>:
c001359a:	83 ec 0c             	sub    esp,0xc
c001359d:	b8 0b 00 00 00       	mov    eax,0xb
c00135a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135ad:	80 f9 19             	cmp    cl,0x19
c00135b0:	77 2f                	ja     c00135e1 <File::unlink()+0x47>
c00135b2:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00135b9:	85 c9                	test   ecx,ecx
c00135bb:	74 24                	je     c00135e1 <File::unlink()+0x47>
c00135bd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135c3:	85 c9                	test   ecx,ecx
c00135c5:	74 1a                	je     c00135e1 <File::unlink()+0x47>
c00135c7:	b8 06 00 00 00       	mov    eax,0x6
c00135cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135d0:	75 0f                	jne    c00135e1 <File::unlink()+0x47>
c00135d2:	83 c2 0d             	add    edx,0xd
c00135d5:	50                   	push   eax
c00135d6:	50                   	push   eax
c00135d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135d9:	52                   	push   edx
c00135da:	51                   	push   ecx
c00135db:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	83 c4 0c             	add    esp,0xc
c00135e4:	c3                   	ret    
c00135e5:	90                   	nop

c00135e6 <File::rename(char const*)>:
c00135e6:	83 ec 0c             	sub    esp,0xc
c00135e9:	b8 0b 00 00 00       	mov    eax,0xb
c00135ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135f9:	80 f9 19             	cmp    cl,0x19
c00135fc:	77 32                	ja     c0013630 <File::rename(char const*)+0x4a>
c00135fe:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013605:	85 c9                	test   ecx,ecx
c0013607:	74 27                	je     c0013630 <File::rename(char const*)+0x4a>
c0013609:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001360f:	85 c9                	test   ecx,ecx
c0013611:	74 1d                	je     c0013630 <File::rename(char const*)+0x4a>
c0013613:	b8 06 00 00 00       	mov    eax,0x6
c0013618:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001361c:	75 12                	jne    c0013630 <File::rename(char const*)+0x4a>
c001361e:	83 c2 0d             	add    edx,0xd
c0013621:	50                   	push   eax
c0013622:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013624:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013628:	52                   	push   edx
c0013629:	51                   	push   ecx
c001362a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c001362d:	83 c4 10             	add    esp,0x10
c0013630:	83 c4 0c             	add    esp,0xc
c0013633:	c3                   	ret    

c0013634 <File::chfatattr(unsigned char, unsigned char)>:
c0013634:	57                   	push   edi
c0013635:	b8 0b 00 00 00       	mov    eax,0xb
c001363a:	56                   	push   esi
c001363b:	53                   	push   ebx
c001363c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013640:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013644:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001364b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001364f:	80 f9 19             	cmp    cl,0x19
c0013652:	77 37                	ja     c001368b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013654:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c001365b:	85 c9                	test   ecx,ecx
c001365d:	74 2c                	je     c001368b <File::chfatattr(unsigned char, unsigned char)+0x57>
c001365f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013665:	85 c9                	test   ecx,ecx
c0013667:	74 22                	je     c001368b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013669:	b8 06 00 00 00       	mov    eax,0x6
c001366e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013672:	75 17                	jne    c001368b <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013674:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013676:	89 f0                	mov    eax,esi
c0013678:	83 c2 0d             	add    edx,0xd
c001367b:	0f b6 f0             	movzx  esi,al
c001367e:	0f b6 db             	movzx  ebx,bl
c0013681:	56                   	push   esi
c0013682:	53                   	push   ebx
c0013683:	52                   	push   edx
c0013684:	51                   	push   ecx
c0013685:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013688:	83 c4 10             	add    esp,0x10
c001368b:	5b                   	pop    ebx
c001368c:	5e                   	pop    esi
c001368d:	5f                   	pop    edi
c001368e:	c3                   	ret    
c001368f:	90                   	nop

c0013690 <File::exists()>:
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	31 c0                	xor    eax,eax
c0013695:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013699:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a0:	80 f9 19             	cmp    cl,0x19
c00136a3:	77 24                	ja     c00136c9 <File::exists()+0x39>
c00136a5:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00136ac:	85 c9                	test   ecx,ecx
c00136ae:	74 19                	je     c00136c9 <File::exists()+0x39>
c00136b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136b6:	85 c9                	test   ecx,ecx
c00136b8:	74 0f                	je     c00136c9 <File::exists()+0x39>
c00136ba:	83 c2 0d             	add    edx,0xd
c00136bd:	50                   	push   eax
c00136be:	50                   	push   eax
c00136bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136c1:	52                   	push   edx
c00136c2:	51                   	push   ecx
c00136c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136c6:	83 c4 10             	add    esp,0x10
c00136c9:	83 c4 0c             	add    esp,0xc
c00136cc:	c3                   	ret    
c00136cd:	90                   	nop

c00136ce <File::stat(unsigned long long*, bool*)>:
c00136ce:	56                   	push   esi
c00136cf:	53                   	push   ebx
c00136d0:	50                   	push   eax
c00136d1:	b8 0b 00 00 00       	mov    eax,0xb
c00136d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136da:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136de:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136e5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136e9:	80 f9 19             	cmp    cl,0x19
c00136ec:	77 3d                	ja     c001372b <File::stat(unsigned long long*, bool*)+0x5d>
c00136ee:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00136f5:	85 c9                	test   ecx,ecx
c00136f7:	74 32                	je     c001372b <File::stat(unsigned long long*, bool*)+0x5d>
c00136f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136ff:	85 c9                	test   ecx,ecx
c0013701:	74 28                	je     c001372b <File::stat(unsigned long long*, bool*)+0x5d>
c0013703:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013705:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013709:	74 13                	je     c001371e <File::stat(unsigned long long*, bool*)+0x50>
c001370b:	83 ec 04             	sub    esp,0x4
c001370e:	56                   	push   esi
c001370f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013715:	51                   	push   ecx
c0013716:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013719:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001371c:	eb 0a                	jmp    c0013728 <File::stat(unsigned long long*, bool*)+0x5a>
c001371e:	53                   	push   ebx
c001371f:	83 c2 0d             	add    edx,0xd
c0013722:	56                   	push   esi
c0013723:	52                   	push   edx
c0013724:	51                   	push   ecx
c0013725:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013728:	83 c4 10             	add    esp,0x10
c001372b:	5a                   	pop    edx
c001372c:	5b                   	pop    ebx
c001372d:	5e                   	pop    esi
c001372e:	c3                   	ret    

c001372f <Fs::setcwd(Process*, char*)>:
c001372f:	55                   	push   ebp
c0013730:	57                   	push   edi
c0013731:	56                   	push   esi
c0013732:	53                   	push   ebx
c0013733:	81 ec 20 02 00 00    	sub    esp,0x220
c0013739:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013740:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013746:	57                   	push   edi
c0013747:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001374e:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0013752:	56                   	push   esi
c0013753:	e8 bc fa ff ff       	call   c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013758:	89 34 24             	mov    DWORD PTR [esp],esi
c001375b:	e8 34 d0 fe ff       	call   c0000794 <strlen>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	83 f8 02             	cmp    eax,0x2
c0013766:	77 17                	ja     c001377f <Fs::setcwd(Process*, char*)+0x50>
c0013768:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c001376d:	83 e8 41             	sub    eax,0x41
c0013770:	83 f8 19             	cmp    eax,0x19
c0013773:	76 24                	jbe    c0013799 <Fs::setcwd(Process*, char*)+0x6a>
c0013775:	b8 03 00 00 00       	mov    eax,0x3
c001377a:	e9 e0 00 00 00       	jmp    c001385f <Fs::setcwd(Process*, char*)+0x130>
c001377f:	83 ec 0c             	sub    esp,0xc
c0013782:	56                   	push   esi
c0013783:	e8 0c d0 fe ff       	call   c0000794 <strlen>
c0013788:	83 c4 10             	add    esp,0x10
c001378b:	83 f8 03             	cmp    eax,0x3
c001378e:	75 34                	jne    c00137c4 <Fs::setcwd(Process*, char*)+0x95>
c0013790:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0013795:	75 2d                	jne    c00137c4 <Fs::setcwd(Process*, char*)+0x95>
c0013797:	eb cf                	jmp    c0013768 <Fs::setcwd(Process*, char*)+0x39>
c0013799:	8b 14 85 e0 f8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0720]
c00137a0:	b8 05 00 00 00       	mov    eax,0x5
c00137a5:	85 d2                	test   edx,edx
c00137a7:	0f 84 b2 00 00 00    	je     c001385f <Fs::setcwd(Process*, char*)+0x130>
c00137ad:	b8 06 00 00 00       	mov    eax,0x6
c00137b2:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137b9:	0f 85 92 00 00 00    	jne    c0013851 <Fs::setcwd(Process*, char*)+0x122>
c00137bf:	e9 9b 00 00 00       	jmp    c001385f <Fs::setcwd(Process*, char*)+0x130>
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	68 14 01 00 00       	push   0x114
c00137cc:	e8 e3 c0 ff ff       	call   c000f8b4 <malloc>
c00137d1:	83 c4 0c             	add    esp,0xc
c00137d4:	89 c3                	mov    ebx,eax
c00137d6:	55                   	push   ebp
c00137d7:	56                   	push   esi
c00137d8:	50                   	push   eax
c00137d9:	e8 e0 fb ff ff       	call   c00133be <File::File(char const*, Process*)>
c00137de:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137e3:	83 c4 0c             	add    esp,0xc
c00137e6:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137ea:	50                   	push   eax
c00137eb:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137ef:	50                   	push   eax
c00137f0:	53                   	push   ebx
c00137f1:	e8 d8 fe ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	83 f8 02             	cmp    eax,0x2
c00137fc:	74 04                	je     c0013802 <Fs::setcwd(Process*, char*)+0xd3>
c00137fe:	85 c0                	test   eax,eax
c0013800:	74 1c                	je     c001381e <Fs::setcwd(Process*, char*)+0xef>
c0013802:	b8 01 00 00 00       	mov    eax,0x1
c0013807:	85 db                	test   ebx,ebx
c0013809:	74 54                	je     c001385f <Fs::setcwd(Process*, char*)+0x130>
c001380b:	83 ec 0c             	sub    esp,0xc
c001380e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013810:	53                   	push   ebx
c0013811:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013814:	83 c4 10             	add    esp,0x10
c0013817:	b8 01 00 00 00       	mov    eax,0x1
c001381c:	eb 41                	jmp    c001385f <Fs::setcwd(Process*, char*)+0x130>
c001381e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0013823:	75 1c                	jne    c0013841 <Fs::setcwd(Process*, char*)+0x112>
c0013825:	b8 02 00 00 00       	mov    eax,0x2
c001382a:	85 db                	test   ebx,ebx
c001382c:	74 31                	je     c001385f <Fs::setcwd(Process*, char*)+0x130>
c001382e:	83 ec 0c             	sub    esp,0xc
c0013831:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013833:	53                   	push   ebx
c0013834:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013837:	83 c4 10             	add    esp,0x10
c001383a:	b8 02 00 00 00       	mov    eax,0x2
c001383f:	eb 1e                	jmp    c001385f <Fs::setcwd(Process*, char*)+0x130>
c0013841:	85 db                	test   ebx,ebx
c0013843:	74 0c                	je     c0013851 <Fs::setcwd(Process*, char*)+0x122>
c0013845:	83 ec 0c             	sub    esp,0xc
c0013848:	8b 03                	mov    eax,DWORD PTR [ebx]
c001384a:	53                   	push   ebx
c001384b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001384e:	83 c4 10             	add    esp,0x10
c0013851:	50                   	push   eax
c0013852:	50                   	push   eax
c0013853:	56                   	push   esi
c0013854:	57                   	push   edi
c0013855:	e8 da cf fe ff       	call   c0000834 <strcpy>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	31 c0                	xor    eax,eax
c001385f:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013865:	5b                   	pop    ebx
c0013866:	5e                   	pop    esi
c0013867:	5f                   	pop    edi
c0013868:	5d                   	pop    ebp
c0013869:	c3                   	ret    

c001386a <Directory::Directory(char const*, Process*)>:
c001386a:	83 ec 0c             	sub    esp,0xc
c001386d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013871:	83 ec 08             	sub    esp,0x8
c0013874:	6a 00                	push   0x0
c0013876:	50                   	push   eax
c0013877:	e8 9a dd ff ff       	call   c0011616 <UnixFile::UnixFile(int)>
c001387c:	83 c4 10             	add    esp,0x10
c001387f:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0013884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013888:	89 10                	mov    DWORD PTR [eax],edx
c001388a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001388e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013898:	83 c0 0d             	add    eax,0xd
c001389b:	83 ec 04             	sub    esp,0x4
c001389e:	52                   	push   edx
c001389f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138a3:	50                   	push   eax
c00138a4:	e8 6b f9 ff ff       	call   c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b0:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00138b3:	8d 50 bf             	lea    edx,[eax-0x41]
c00138b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ba:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c4:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138c8:	90                   	nop
c00138c9:	83 c4 0c             	add    esp,0xc
c00138cc:	c3                   	ret    
c00138cd:	90                   	nop

c00138ce <Directory::open()>:
c00138ce:	53                   	push   ebx
c00138cf:	b8 0b 00 00 00       	mov    eax,0xb
c00138d4:	83 ec 08             	sub    esp,0x8
c00138d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138db:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138e2:	80 fa 19             	cmp    dl,0x19
c00138e5:	77 3d                	ja     c0013924 <Directory::open()+0x56>
c00138e7:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c00138ee:	85 d2                	test   edx,edx
c00138f0:	74 32                	je     c0013924 <Directory::open()+0x56>
c00138f2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138f8:	85 d2                	test   edx,edx
c00138fa:	74 28                	je     c0013924 <Directory::open()+0x56>
c00138fc:	b8 06 00 00 00       	mov    eax,0x6
c0013901:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013905:	75 1d                	jne    c0013924 <Directory::open()+0x56>
c0013907:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001390d:	50                   	push   eax
c001390e:	8b 02                	mov    eax,DWORD PTR [edx]
c0013910:	51                   	push   ecx
c0013911:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013914:	51                   	push   ecx
c0013915:	52                   	push   edx
c0013916:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013919:	83 c4 10             	add    esp,0x10
c001391c:	85 c0                	test   eax,eax
c001391e:	75 04                	jne    c0013924 <Directory::open()+0x56>
c0013920:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013924:	83 c4 08             	add    esp,0x8
c0013927:	5b                   	pop    ebx
c0013928:	c3                   	ret    
c0013929:	90                   	nop

c001392a <Directory::close()>:
c001392a:	53                   	push   ebx
c001392b:	b8 0b 00 00 00       	mov    eax,0xb
c0013930:	83 ec 08             	sub    esp,0x8
c0013933:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013937:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001393e:	80 fa 19             	cmp    dl,0x19
c0013941:	77 41                	ja     c0013984 <Directory::close()+0x5a>
c0013943:	8b 1c 95 e0 f8 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0720]
c001394a:	85 db                	test   ebx,ebx
c001394c:	74 36                	je     c0013984 <Directory::close()+0x5a>
c001394e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013955:	74 2d                	je     c0013984 <Directory::close()+0x5a>
c0013957:	b8 05 00 00 00       	mov    eax,0x5
c001395c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013960:	74 22                	je     c0013984 <Directory::close()+0x5a>
c0013962:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013966:	8b 04 95 e0 f8 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0720]
c001396d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013973:	53                   	push   ebx
c0013974:	53                   	push   ebx
c0013975:	8b 10                	mov    edx,DWORD PTR [eax]
c0013977:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001397d:	50                   	push   eax
c001397e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013981:	83 c4 10             	add    esp,0x10
c0013984:	83 c4 08             	add    esp,0x8
c0013987:	5b                   	pop    ebx
c0013988:	c3                   	ret    
c0013989:	90                   	nop

c001398a <Directory::unlink()>:
c001398a:	83 ec 0c             	sub    esp,0xc
c001398d:	b8 0b 00 00 00       	mov    eax,0xb
c0013992:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013996:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001399d:	80 f9 19             	cmp    cl,0x19
c00139a0:	77 2f                	ja     c00139d1 <Directory::unlink()+0x47>
c00139a2:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00139a9:	85 c9                	test   ecx,ecx
c00139ab:	74 24                	je     c00139d1 <Directory::unlink()+0x47>
c00139ad:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139b3:	85 c9                	test   ecx,ecx
c00139b5:	74 1a                	je     c00139d1 <Directory::unlink()+0x47>
c00139b7:	b8 06 00 00 00       	mov    eax,0x6
c00139bc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139c0:	75 0f                	jne    c00139d1 <Directory::unlink()+0x47>
c00139c2:	83 c2 0d             	add    edx,0xd
c00139c5:	50                   	push   eax
c00139c6:	50                   	push   eax
c00139c7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139c9:	52                   	push   edx
c00139ca:	51                   	push   ecx
c00139cb:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	83 c4 0c             	add    esp,0xc
c00139d4:	c3                   	ret    
c00139d5:	90                   	nop

c00139d6 <Directory::rename(char const*)>:
c00139d6:	83 ec 0c             	sub    esp,0xc
c00139d9:	b8 0b 00 00 00       	mov    eax,0xb
c00139de:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139e2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139e9:	80 f9 19             	cmp    cl,0x19
c00139ec:	77 32                	ja     c0013a20 <Directory::rename(char const*)+0x4a>
c00139ee:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c00139f5:	85 c9                	test   ecx,ecx
c00139f7:	74 27                	je     c0013a20 <Directory::rename(char const*)+0x4a>
c00139f9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139ff:	85 c9                	test   ecx,ecx
c0013a01:	74 1d                	je     c0013a20 <Directory::rename(char const*)+0x4a>
c0013a03:	b8 06 00 00 00       	mov    eax,0x6
c0013a08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013a0c:	75 12                	jne    c0013a20 <Directory::rename(char const*)+0x4a>
c0013a0e:	83 c2 0d             	add    edx,0xd
c0013a11:	50                   	push   eax
c0013a12:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a14:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a18:	52                   	push   edx
c0013a19:	51                   	push   ecx
c0013a1a:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a1d:	83 c4 10             	add    esp,0x10
c0013a20:	83 c4 0c             	add    esp,0xc
c0013a23:	c3                   	ret    

c0013a24 <Directory::exists()>:
c0013a24:	83 ec 0c             	sub    esp,0xc
c0013a27:	31 c0                	xor    eax,eax
c0013a29:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a2d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a34:	80 f9 19             	cmp    cl,0x19
c0013a37:	77 24                	ja     c0013a5d <Directory::exists()+0x39>
c0013a39:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013a40:	85 c9                	test   ecx,ecx
c0013a42:	74 19                	je     c0013a5d <Directory::exists()+0x39>
c0013a44:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a4a:	85 c9                	test   ecx,ecx
c0013a4c:	74 0f                	je     c0013a5d <Directory::exists()+0x39>
c0013a4e:	83 c2 0d             	add    edx,0xd
c0013a51:	50                   	push   eax
c0013a52:	50                   	push   eax
c0013a53:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a55:	52                   	push   edx
c0013a56:	51                   	push   ecx
c0013a57:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a5a:	83 c4 10             	add    esp,0x10
c0013a5d:	83 c4 0c             	add    esp,0xc
c0013a60:	c3                   	ret    
c0013a61:	90                   	nop

c0013a62 <Directory::read(dirent*)>:
c0013a62:	83 ec 1c             	sub    esp,0x1c
c0013a65:	b8 0b 00 00 00       	mov    eax,0xb
c0013a6a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a6e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a75:	80 fa 19             	cmp    dl,0x19
c0013a78:	77 30                	ja     c0013aaa <Directory::read(dirent*)+0x48>
c0013a7a:	8b 14 95 e0 f8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0720]
c0013a81:	85 d2                	test   edx,edx
c0013a83:	74 25                	je     c0013aaa <Directory::read(dirent*)+0x48>
c0013a85:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a8c:	74 1c                	je     c0013aaa <Directory::read(dirent*)+0x48>
c0013a8e:	83 ec 0c             	sub    esp,0xc
c0013a91:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a93:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a97:	52                   	push   edx
c0013a98:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a9c:	6a 00                	push   0x0
c0013a9e:	68 10 01 00 00       	push   0x110
c0013aa3:	51                   	push   ecx
c0013aa4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013aa7:	83 c4 20             	add    esp,0x20
c0013aaa:	83 c4 1c             	add    esp,0x1c
c0013aad:	c3                   	ret    

c0013aae <Directory::create()>:
c0013aae:	83 ec 0c             	sub    esp,0xc
c0013ab1:	b8 0b 00 00 00       	mov    eax,0xb
c0013ab6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013ac1:	80 f9 19             	cmp    cl,0x19
c0013ac4:	77 2f                	ja     c0013af5 <Directory::create()+0x47>
c0013ac6:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c0013acd:	85 c9                	test   ecx,ecx
c0013acf:	74 24                	je     c0013af5 <Directory::create()+0x47>
c0013ad1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013ad7:	85 c9                	test   ecx,ecx
c0013ad9:	74 1a                	je     c0013af5 <Directory::create()+0x47>
c0013adb:	b8 06 00 00 00       	mov    eax,0x6
c0013ae0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013ae4:	75 0f                	jne    c0013af5 <Directory::create()+0x47>
c0013ae6:	83 c2 0d             	add    edx,0xd
c0013ae9:	50                   	push   eax
c0013aea:	50                   	push   eax
c0013aeb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013aed:	52                   	push   edx
c0013aee:	51                   	push   ecx
c0013aef:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013af2:	83 c4 10             	add    esp,0x10
c0013af5:	83 c4 0c             	add    esp,0xc
c0013af8:	c3                   	ret    
c0013af9:	90                   	nop

c0013afa <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013afa:	b8 0a 00 00 00       	mov    eax,0xa
c0013aff:	c3                   	ret    

c0013b00 <Bus::Bus(char const*)>:
c0013b00:	83 ec 0c             	sub    esp,0xc
c0013b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b07:	83 ec 08             	sub    esp,0x8
c0013b0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b0e:	50                   	push   eax
c0013b0f:	e8 5c 09 00 00       	call   c0014470 <Device::Device(char const*)>
c0013b14:	83 c4 10             	add    esp,0x10
c0013b17:	ba 9c b8 02 c0       	mov    edx,0xc002b89c
c0013b1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b20:	89 10                	mov    DWORD PTR [eax],edx
c0013b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b26:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b30:	90                   	nop
c0013b31:	83 c4 0c             	add    esp,0xc
c0013b34:	c3                   	ret    
c0013b35:	90                   	nop

c0013b36 <Bus::~Bus()>:
c0013b36:	83 ec 0c             	sub    esp,0xc
c0013b39:	ba 9c b8 02 c0       	mov    edx,0xc002b89c
c0013b3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b42:	89 10                	mov    DWORD PTR [eax],edx
c0013b44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b48:	83 ec 0c             	sub    esp,0xc
c0013b4b:	50                   	push   eax
c0013b4c:	e8 15 06 00 00       	call   c0014166 <Device::~Device()>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	90                   	nop
c0013b55:	83 c4 0c             	add    esp,0xc
c0013b58:	c3                   	ret    
c0013b59:	90                   	nop

c0013b5a <Bus::~Bus()>:
c0013b5a:	83 ec 0c             	sub    esp,0xc
c0013b5d:	83 ec 0c             	sub    esp,0xc
c0013b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b64:	e8 cd ff ff ff       	call   c0013b36 <Bus::~Bus()>
c0013b69:	83 c4 10             	add    esp,0x10
c0013b6c:	83 ec 08             	sub    esp,0x8
c0013b6f:	68 58 01 00 00       	push   0x158
c0013b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b78:	e8 02 f2 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0013b7d:	83 c4 10             	add    esp,0x10
c0013b80:	83 c4 0c             	add    esp,0xc
c0013b83:	c3                   	ret    

c0013b84 <Buzzer::Buzzer(char const*)>:
c0013b84:	83 ec 0c             	sub    esp,0xc
c0013b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8b:	83 ec 08             	sub    esp,0x8
c0013b8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b92:	50                   	push   eax
c0013b93:	e8 d8 08 00 00       	call   c0014470 <Device::Device(char const*)>
c0013b98:	83 c4 10             	add    esp,0x10
c0013b9b:	ba c8 b8 02 c0       	mov    edx,0xc002b8c8
c0013ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba4:	89 10                	mov    DWORD PTR [eax],edx
c0013ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013baa:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bb8:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013bc2:	90                   	nop
c0013bc3:	83 c4 0c             	add    esp,0xc
c0013bc6:	c3                   	ret    
c0013bc7:	90                   	nop

c0013bc8 <Buzzer::~Buzzer()>:
c0013bc8:	83 ec 0c             	sub    esp,0xc
c0013bcb:	ba c8 b8 02 c0       	mov    edx,0xc002b8c8
c0013bd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bd4:	89 10                	mov    DWORD PTR [eax],edx
c0013bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bda:	83 ec 0c             	sub    esp,0xc
c0013bdd:	50                   	push   eax
c0013bde:	e8 83 05 00 00       	call   c0014166 <Device::~Device()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	90                   	nop
c0013be7:	83 c4 0c             	add    esp,0xc
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Buzzer::~Buzzer()>:
c0013bec:	83 ec 0c             	sub    esp,0xc
c0013bef:	83 ec 0c             	sub    esp,0xc
c0013bf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf6:	e8 cd ff ff ff       	call   c0013bc8 <Buzzer::~Buzzer()>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	83 ec 08             	sub    esp,0x8
c0013c01:	68 5c 01 00 00       	push   0x15c
c0013c06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c0a:	e8 70 f1 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	83 c4 0c             	add    esp,0xc
c0013c15:	c3                   	ret    

c0013c16 <Buzzer::stop()>:
c0013c16:	83 ec 14             	sub    esp,0x14
c0013c19:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c1d:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c1f:	6a 00                	push   0x0
c0013c21:	50                   	push   eax
c0013c22:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c25:	83 c4 1c             	add    esp,0x1c
c0013c28:	c3                   	ret    

c0013c29 <beepThread(void*)>:
c0013c29:	53                   	push   ebx
c0013c2a:	83 ec 08             	sub    esp,0x8
c0013c2d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0013c32:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c36:	48                   	dec    eax
c0013c37:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0013c3c:	75 01                	jne    c0013c3f <beepThread(void*)+0x16>
c0013c3e:	fb                   	sti    
c0013c3f:	50                   	push   eax
c0013c40:	50                   	push   eax
c0013c41:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c46:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c4c:	52                   	push   edx
c0013c4d:	50                   	push   eax
c0013c4e:	e8 5c ad 00 00       	call   c001e9af <nanoSleep(unsigned long long)>
c0013c53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c56:	e8 bb ff ff ff       	call   c0013c16 <Buzzer::stop()>
c0013c5b:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c63:	83 c4 18             	add    esp,0x18
c0013c66:	5b                   	pop    ebx
c0013c67:	e9 3f ac 00 00       	jmp    c001e8ab <blockTask(TaskState)>

c0013c6c <Buzzer::beep(int, int, bool)>:
c0013c6c:	57                   	push   edi
c0013c6d:	56                   	push   esi
c0013c6e:	53                   	push   ebx
c0013c6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c73:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c77:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c7b:	52                   	push   edx
c0013c7c:	52                   	push   edx
c0013c7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c83:	56                   	push   esi
c0013c84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c87:	83 c4 10             	add    esp,0x10
c0013c8a:	89 f8                	mov    eax,edi
c0013c8c:	84 c0                	test   al,al
c0013c8e:	74 1f                	je     c0013caf <Buzzer::beep(int, int, bool)+0x43>
c0013c90:	50                   	push   eax
c0013c91:	50                   	push   eax
c0013c92:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c98:	99                   	cdq    
c0013c99:	52                   	push   edx
c0013c9a:	50                   	push   eax
c0013c9b:	e8 0f ad 00 00       	call   c001e9af <nanoSleep(unsigned long long)>
c0013ca0:	83 c4 10             	add    esp,0x10
c0013ca3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013ca7:	5b                   	pop    ebx
c0013ca8:	5e                   	pop    esi
c0013ca9:	5f                   	pop    edi
c0013caa:	e9 67 ff ff ff       	jmp    c0013c16 <Buzzer::stop()>
c0013caf:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013cb5:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0013cba:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013cc2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cc6:	c7 44 24 14 29 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c29
c0013cce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cd2:	5b                   	pop    ebx
c0013cd3:	5e                   	pop    esi
c0013cd4:	5f                   	pop    edi
c0013cd5:	e9 8e a7 00 00       	jmp    c001e468 <Process::createThread(void (*)(void*), void*, int)>

c0013cda <User::loadClockSettings(int)>:
c0013cda:	53                   	push   ebx
c0013cdb:	83 ec 14             	sub    esp,0x14
c0013cde:	68 14 01 00 00       	push   0x114
c0013ce3:	e8 cc bb ff ff       	call   c000f8b4 <malloc>
c0013ce8:	83 c4 0c             	add    esp,0xc
c0013ceb:	89 c3                	mov    ebx,eax
c0013ced:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c0013cf3:	68 f0 b8 02 c0       	push   0xc002b8f0
c0013cf8:	50                   	push   eax
c0013cf9:	e8 c0 f6 ff ff       	call   c00133be <File::File(char const*, Process*)>
c0013cfe:	58                   	pop    eax
c0013cff:	5a                   	pop    edx
c0013d00:	6a 01                	push   0x1
c0013d02:	53                   	push   ebx
c0013d03:	e8 1a f7 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c0013d08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013d0b:	e8 70 f7 ff ff       	call   c0013480 <File::close()>
c0013d10:	83 c4 10             	add    esp,0x10
c0013d13:	85 db                	test   ebx,ebx
c0013d15:	74 0f                	je     c0013d26 <User::loadClockSettings(int)+0x4c>
c0013d17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d20:	83 c4 08             	add    esp,0x8
c0013d23:	5b                   	pop    ebx
c0013d24:	ff e0                	jmp    eax
c0013d26:	83 c4 08             	add    esp,0x8
c0013d29:	5b                   	pop    ebx
c0013d2a:	c3                   	ret    
c0013d2b:	90                   	nop

c0013d2c <Clock::Clock(char const*)>:
c0013d2c:	83 ec 0c             	sub    esp,0xc
c0013d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d33:	83 ec 08             	sub    esp,0x8
c0013d36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d3a:	50                   	push   eax
c0013d3b:	e8 30 07 00 00       	call   c0014470 <Device::Device(char const*)>
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	ba 18 b9 02 c0       	mov    edx,0xc002b918
c0013d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d4c:	89 10                	mov    DWORD PTR [eax],edx
c0013d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d52:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d5c:	90                   	nop
c0013d5d:	83 c4 0c             	add    esp,0xc
c0013d60:	c3                   	ret    
c0013d61:	90                   	nop

c0013d62 <Clock::~Clock()>:
c0013d62:	83 ec 0c             	sub    esp,0xc
c0013d65:	ba 18 b9 02 c0       	mov    edx,0xc002b918
c0013d6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d6e:	89 10                	mov    DWORD PTR [eax],edx
c0013d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d74:	83 ec 0c             	sub    esp,0xc
c0013d77:	50                   	push   eax
c0013d78:	e8 e9 03 00 00       	call   c0014166 <Device::~Device()>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	90                   	nop
c0013d81:	83 c4 0c             	add    esp,0xc
c0013d84:	c3                   	ret    
c0013d85:	90                   	nop

c0013d86 <Clock::~Clock()>:
c0013d86:	83 ec 0c             	sub    esp,0xc
c0013d89:	83 ec 0c             	sub    esp,0xc
c0013d8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d90:	e8 cd ff ff ff       	call   c0013d62 <Clock::~Clock()>
c0013d95:	83 c4 10             	add    esp,0x10
c0013d98:	83 ec 08             	sub    esp,0x8
c0013d9b:	68 58 01 00 00       	push   0x158
c0013da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013da4:	e8 d6 ef ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0013da9:	83 c4 10             	add    esp,0x10
c0013dac:	83 c4 0c             	add    esp,0xc
c0013daf:	c3                   	ret    

c0013db0 <Clock::timeInSecondsLocal()>:
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 14             	sub    esp,0x14
c0013db4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013db8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013dba:	50                   	push   eax
c0013dbb:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013dbe:	0f b6 0d 5c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f45c
c0013dc5:	03 0d 60 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f460
c0013dcb:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013dd1:	89 cb                	mov    ebx,ecx
c0013dd3:	c1 fb 1f             	sar    ebx,0x1f
c0013dd6:	01 c8                	add    eax,ecx
c0013dd8:	11 da                	adc    edx,ebx
c0013dda:	83 c4 10             	add    esp,0x10
c0013ddd:	31 c9                	xor    ecx,ecx
c0013ddf:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013de6:	74 05                	je     c0013ded <Clock::timeInSecondsLocal()+0x3d>
c0013de8:	b9 08 07 00 00       	mov    ecx,0x708
c0013ded:	31 db                	xor    ebx,ebx
c0013def:	01 c8                	add    eax,ecx
c0013df1:	11 da                	adc    edx,ebx
c0013df3:	83 c4 08             	add    esp,0x8
c0013df6:	5b                   	pop    ebx
c0013df7:	c3                   	ret    

c0013df8 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013df8:	57                   	push   edi
c0013df9:	56                   	push   esi
c0013dfa:	53                   	push   ebx
c0013dfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013dff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013e03:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013e05:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e09:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013e0c:	0f b6 05 5c f4 02 c0 	movzx  eax,BYTE PTR ds:0xc002f45c
c0013e13:	03 05 60 f4 02 c0    	add    eax,DWORD PTR ds:0xc002f460
c0013e19:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e1f:	99                   	cdq    
c0013e20:	29 c6                	sub    esi,eax
c0013e22:	19 d7                	sbb    edi,edx
c0013e24:	89 f0                	mov    eax,esi
c0013e26:	89 fa                	mov    edx,edi
c0013e28:	31 f6                	xor    esi,esi
c0013e2a:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013e31:	74 05                	je     c0013e38 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e33:	be 08 07 00 00       	mov    esi,0x708
c0013e38:	31 ff                	xor    edi,edi
c0013e3a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e3e:	29 f0                	sub    eax,esi
c0013e40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e44:	19 fa                	sbb    edx,edi
c0013e46:	89 d8                	mov    eax,ebx
c0013e48:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e4c:	5b                   	pop    ebx
c0013e4d:	5e                   	pop    esi
c0013e4e:	5f                   	pop    edi
c0013e4f:	ff e0                	jmp    eax

c0013e51 <datetimeToSeconds(datetime_t)>:
c0013e51:	55                   	push   ebp
c0013e52:	57                   	push   edi
c0013e53:	56                   	push   esi
c0013e54:	53                   	push   ebx
c0013e55:	83 ec 14             	sub    esp,0x14
c0013e58:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e5c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e60:	89 d3                	mov    ebx,edx
c0013e62:	0f b6 c6             	movzx  eax,dh
c0013e65:	c1 eb 10             	shr    ebx,0x10
c0013e68:	48                   	dec    eax
c0013e69:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e6e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e72:	0f b6 f5             	movzx  esi,ch
c0013e75:	89 cf                	mov    edi,ecx
c0013e77:	6b f6 3c             	imul   esi,esi,0x3c
c0013e7a:	c1 ef 10             	shr    edi,0x10
c0013e7d:	0f b6 c9             	movzx  ecx,cl
c0013e80:	89 f8                	mov    eax,edi
c0013e82:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e88:	0f b6 f8             	movzx  edi,al
c0013e8b:	0f b6 d2             	movzx  edx,dl
c0013e8e:	01 fe                	add    esi,edi
c0013e90:	01 f1                	add    ecx,esi
c0013e92:	0f b7 f3             	movzx  esi,bx
c0013e95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e99:	c1 f9 1f             	sar    ecx,0x1f
c0013e9c:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ea1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ea5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013eaa:	8b 0c 8d 60 b9 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd46a0]
c0013eb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013eb5:	76 29                	jbe    c0013ee0 <datetimeToSeconds(datetime_t)+0x8f>
c0013eb7:	f6 c3 03             	test   bl,0x3
c0013eba:	75 24                	jne    c0013ee0 <datetimeToSeconds(datetime_t)+0x8f>
c0013ebc:	31 d2                	xor    edx,edx
c0013ebe:	bf 64 00 00 00       	mov    edi,0x64
c0013ec3:	89 d8                	mov    eax,ebx
c0013ec5:	66 f7 f7             	div    di
c0013ec8:	66 85 d2             	test   dx,dx
c0013ecb:	75 12                	jne    c0013edf <datetimeToSeconds(datetime_t)+0x8e>
c0013ecd:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ed3:	bf 90 01 00 00       	mov    edi,0x190
c0013ed8:	99                   	cdq    
c0013ed9:	f7 ff                	idiv   edi
c0013edb:	85 d2                	test   edx,edx
c0013edd:	75 01                	jne    c0013ee0 <datetimeToSeconds(datetime_t)+0x8f>
c0013edf:	41                   	inc    ecx
c0013ee0:	66 83 fb 46          	cmp    bx,0x46
c0013ee4:	76 45                	jbe    c0013f2b <datetimeToSeconds(datetime_t)+0xda>
c0013ee6:	bb 46 00 00 00       	mov    ebx,0x46
c0013eeb:	bf 64 00 00 00       	mov    edi,0x64
c0013ef0:	bd 90 01 00 00       	mov    ebp,0x190
c0013ef5:	b8 6d 01 00 00       	mov    eax,0x16d
c0013efa:	f6 c3 03             	test   bl,0x3
c0013efd:	75 23                	jne    c0013f22 <datetimeToSeconds(datetime_t)+0xd1>
c0013eff:	89 d8                	mov    eax,ebx
c0013f01:	99                   	cdq    
c0013f02:	f7 ff                	idiv   edi
c0013f04:	b8 6e 01 00 00       	mov    eax,0x16e
c0013f09:	85 d2                	test   edx,edx
c0013f0b:	75 15                	jne    c0013f22 <datetimeToSeconds(datetime_t)+0xd1>
c0013f0d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013f13:	99                   	cdq    
c0013f14:	f7 fd                	idiv   ebp
c0013f16:	83 fa 01             	cmp    edx,0x1
c0013f19:	19 c0                	sbb    eax,eax
c0013f1b:	f7 d0                	not    eax
c0013f1d:	05 6e 01 00 00       	add    eax,0x16e
c0013f22:	01 c1                	add    ecx,eax
c0013f24:	43                   	inc    ebx
c0013f25:	39 f3                	cmp    ebx,esi
c0013f27:	7c cc                	jl     c0013ef5 <datetimeToSeconds(datetime_t)+0xa4>
c0013f29:	eb 35                	jmp    c0013f60 <datetimeToSeconds(datetime_t)+0x10f>
c0013f2b:	74 33                	je     c0013f60 <datetimeToSeconds(datetime_t)+0x10f>
c0013f2d:	b8 45 00 00 00       	mov    eax,0x45
c0013f32:	89 c2                	mov    edx,eax
c0013f34:	83 e2 03             	and    edx,0x3
c0013f37:	39 f0                	cmp    eax,esi
c0013f39:	7e 0f                	jle    c0013f4a <datetimeToSeconds(datetime_t)+0xf9>
c0013f3b:	83 fa 01             	cmp    edx,0x1
c0013f3e:	19 d2                	sbb    edx,edx
c0013f40:	48                   	dec    eax
c0013f41:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f48:	eb e8                	jmp    c0013f32 <datetimeToSeconds(datetime_t)+0xe1>
c0013f4a:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f4f:	85 d2                	test   edx,edx
c0013f51:	75 0b                	jne    c0013f5e <datetimeToSeconds(datetime_t)+0x10d>
c0013f53:	66 83 fb 01          	cmp    bx,0x1
c0013f57:	19 c0                	sbb    eax,eax
c0013f59:	05 6e 01 00 00       	add    eax,0x16e
c0013f5e:	29 c1                	sub    ecx,eax
c0013f60:	b8 80 51 01 00       	mov    eax,0x15180
c0013f65:	f7 e9                	imul   ecx
c0013f67:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f6b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f6f:	83 c4 14             	add    esp,0x14
c0013f72:	5b                   	pop    ebx
c0013f73:	5e                   	pop    esi
c0013f74:	5f                   	pop    edi
c0013f75:	5d                   	pop    ebp
c0013f76:	c3                   	ret    
c0013f77:	90                   	nop

c0013f78 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f78:	57                   	push   edi
c0013f79:	56                   	push   esi
c0013f7a:	53                   	push   ebx
c0013f7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f7f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f81:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f8c:	e8 c0 fe ff ff       	call   c0013e51 <datetimeToSeconds(datetime_t)>
c0013f91:	59                   	pop    ecx
c0013f92:	0f b6 0d 5c f4 02 c0 	movzx  ecx,BYTE PTR ds:0xc002f45c
c0013f99:	5b                   	pop    ebx
c0013f9a:	03 0d 60 f4 02 c0    	add    ecx,DWORD PTR ds:0xc002f460
c0013fa0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013fa6:	89 cb                	mov    ebx,ecx
c0013fa8:	c1 fb 1f             	sar    ebx,0x1f
c0013fab:	29 c8                	sub    eax,ecx
c0013fad:	19 da                	sbb    edx,ebx
c0013faf:	31 c9                	xor    ecx,ecx
c0013fb1:	80 3d 5d f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f45d,0x0
c0013fb8:	74 05                	je     c0013fbf <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fba:	b9 08 07 00 00       	mov    ecx,0x708
c0013fbf:	31 db                	xor    ebx,ebx
c0013fc1:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fc5:	29 c8                	sub    eax,ecx
c0013fc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fcb:	19 da                	sbb    edx,ebx
c0013fcd:	89 f8                	mov    eax,edi
c0013fcf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fd3:	5b                   	pop    ebx
c0013fd4:	5e                   	pop    esi
c0013fd5:	5f                   	pop    edi
c0013fd6:	ff e0                	jmp    eax

c0013fd8 <secondsToDatetime(unsigned long long)>:
c0013fd8:	55                   	push   ebp
c0013fd9:	57                   	push   edi
c0013fda:	56                   	push   esi
c0013fdb:	53                   	push   ebx
c0013fdc:	83 ec 1c             	sub    esp,0x1c
c0013fdf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fe3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fe7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013feb:	6a 00                	push   0x0
c0013fed:	68 80 51 01 00       	push   0x15180
c0013ff2:	55                   	push   ebp
c0013ff3:	57                   	push   edi
c0013ff4:	e8 1b 36 01 00       	call   c0027614 <__udivdi3>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014002:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014006:	6a 00                	push   0x0
c0014008:	68 80 51 01 00       	push   0x15180
c001400d:	55                   	push   ebp
c001400e:	57                   	push   edi
c001400f:	bf 10 0e 00 00       	mov    edi,0xe10
c0014014:	e8 fb 36 01 00       	call   c0027714 <__umoddi3>
c0014019:	83 c4 10             	add    esp,0x10
c001401c:	99                   	cdq    
c001401d:	f7 ff                	idiv   edi
c001401f:	bf 3c 00 00 00       	mov    edi,0x3c
c0014024:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0014027:	89 d0                	mov    eax,edx
c0014029:	99                   	cdq    
c001402a:	f7 ff                	idiv   edi
c001402c:	85 db                	test   ebx,ebx
c001402e:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014031:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0014034:	79 11                	jns    c0014047 <secondsToDatetime(unsigned long long)+0x6f>
c0014036:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001403a:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014040:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014045:	eb 07                	jmp    c001404e <secondsToDatetime(unsigned long long)+0x76>
c0014047:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001404c:	89 d8                	mov    eax,ebx
c001404e:	bf b4 05 00 00       	mov    edi,0x5b4
c0014053:	99                   	cdq    
c0014054:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014059:	f7 f9                	idiv   ecx
c001405b:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014064:	31 d2                	xor    edx,edx
c0014066:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001406e:	01 c3                	add    ebx,eax
c0014070:	89 d8                	mov    eax,ebx
c0014072:	f7 f1                	div    ecx
c0014074:	31 d2                	xor    edx,edx
c0014076:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014079:	89 d8                	mov    eax,ebx
c001407b:	f7 f7                	div    edi
c001407d:	31 d2                	xor    edx,edx
c001407f:	29 c1                	sub    ecx,eax
c0014081:	89 d8                	mov    eax,ebx
c0014083:	f7 f5                	div    ebp
c0014085:	bd 6d 01 00 00       	mov    ebp,0x16d
c001408a:	29 c1                	sub    ecx,eax
c001408c:	31 d2                	xor    edx,edx
c001408e:	89 c8                	mov    eax,ecx
c0014090:	f7 f5                	div    ebp
c0014092:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014097:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001409b:	31 d2                	xor    edx,edx
c001409d:	89 c8                	mov    eax,ecx
c001409f:	f7 f5                	div    ebp
c00140a1:	31 d2                	xor    edx,edx
c00140a3:	01 c3                	add    ebx,eax
c00140a5:	89 c8                	mov    eax,ecx
c00140a7:	f7 f7                	div    edi
c00140a9:	bf 99 00 00 00       	mov    edi,0x99
c00140ae:	29 c3                	sub    ebx,eax
c00140b0:	31 d2                	xor    edx,edx
c00140b2:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140ba:	29 c3                	sub    ebx,eax
c00140bc:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140bf:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140c2:	bb 05 00 00 00       	mov    ebx,0x5
c00140c7:	83 c1 02             	add    ecx,0x2
c00140ca:	89 c8                	mov    eax,ecx
c00140cc:	f7 f7                	div    edi
c00140ce:	31 d2                	xor    edx,edx
c00140d0:	89 c7                	mov    edi,eax
c00140d2:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140d8:	83 c0 02             	add    eax,0x2
c00140db:	f7 f3                	div    ebx
c00140dd:	89 eb                	mov    ebx,ebp
c00140df:	29 c3                	sub    ebx,eax
c00140e1:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140e7:	88 1e                	mov    BYTE PTR [esi],bl
c00140e9:	19 c0                	sbb    eax,eax
c00140eb:	31 d2                	xor    edx,edx
c00140ed:	83 e0 0c             	and    eax,0xc
c00140f0:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140f4:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140fc:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014100:	83 f9 01             	cmp    ecx,0x1
c0014103:	0f 96 c2             	setbe  dl
c0014106:	41                   	inc    ecx
c0014107:	01 d0                	add    eax,edx
c0014109:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001410c:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014110:	83 c4 1c             	add    esp,0x1c
c0014113:	89 f0                	mov    eax,esi
c0014115:	5b                   	pop    ebx
c0014116:	5e                   	pop    esi
c0014117:	5f                   	pop    edi
c0014118:	5d                   	pop    ebp
c0014119:	c2 04 00             	ret    0x4

c001411c <Clock::timeInDatetimeLocal()>:
c001411c:	53                   	push   ebx
c001411d:	83 ec 14             	sub    esp,0x14
c0014120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014124:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014128:	e8 83 fc ff ff       	call   c0013db0 <Clock::timeInSecondsLocal()>
c001412d:	83 c4 0c             	add    esp,0xc
c0014130:	52                   	push   edx
c0014131:	50                   	push   eax
c0014132:	53                   	push   ebx
c0014133:	e8 a0 fe ff ff       	call   c0013fd8 <secondsToDatetime(unsigned long long)>
c0014138:	89 d8                	mov    eax,ebx
c001413a:	83 c4 14             	add    esp,0x14
c001413d:	5b                   	pop    ebx
c001413e:	c2 04 00             	ret    0x4
c0014141:	90                   	nop

c0014142 <Device::hibernate()>:
c0014142:	c3                   	ret    
c0014143:	90                   	nop

c0014144 <Device::wake()>:
c0014144:	c3                   	ret    
c0014145:	90                   	nop

c0014146 <Device::detect()>:
c0014146:	c3                   	ret    
c0014147:	90                   	nop

c0014148 <Device::disableLegacy()>:
c0014148:	c3                   	ret    
c0014149:	90                   	nop

c001414a <Device::powerSaving(PowerSavingLevel)>:
c001414a:	c3                   	ret    
c001414b:	90                   	nop

c001414c <DriverlessDevice::close(int, int, void*)>:
c001414c:	31 c0                	xor    eax,eax
c001414e:	c3                   	ret    
c001414f:	90                   	nop

c0014150 <DriverlessDevice::detect()>:
c0014150:	c3                   	ret    
c0014151:	90                   	nop

c0014152 <DriverlessDevice::open(int, int, void*)>:
c0014152:	83 ec 18             	sub    esp,0x18
c0014155:	68 90 b9 02 c0       	push   0xc002b990
c001415a:	e8 9a 67 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c001415f:	83 c8 ff             	or     eax,0xffffffff
c0014162:	83 c4 1c             	add    esp,0x1c
c0014165:	c3                   	ret    

c0014166 <Device::~Device()>:
c0014166:	ba b8 b9 02 c0       	mov    edx,0xc002b9b8
c001416b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001416f:	89 10                	mov    DWORD PTR [eax],edx
c0014171:	90                   	nop
c0014172:	c3                   	ret    
c0014173:	90                   	nop

c0014174 <Device::~Device()>:
c0014174:	83 ec 0c             	sub    esp,0xc
c0014177:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001417b:	e8 e6 ff ff ff       	call   c0014166 <Device::~Device()>
c0014180:	83 c4 04             	add    esp,0x4
c0014183:	83 ec 08             	sub    esp,0x8
c0014186:	68 58 01 00 00       	push   0x158
c001418b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001418f:	e8 eb eb ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0014194:	83 c4 10             	add    esp,0x10
c0014197:	83 c4 0c             	add    esp,0xc
c001419a:	c3                   	ret    
c001419b:	90                   	nop

c001419c <Device::findAndLoadDriver()>:
c001419c:	c3                   	ret    
c001419d:	90                   	nop

c001419e <Device::preOpenPCI(PCIDeviceInfo)>:
c001419e:	57                   	push   edi
c001419f:	b9 09 00 00 00       	mov    ecx,0x9
c00141a4:	56                   	push   esi
c00141a5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00141a9:	8d 74 24 10          	lea    esi,[esp+0x10]
c00141ad:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00141b7:	81 c7 18 01 00 00    	add    edi,0x118
c00141bd:	fc                   	cld    
c00141be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141c0:	5e                   	pop    esi
c00141c1:	5f                   	pop    edi
c00141c2:	c3                   	ret    
c00141c3:	90                   	nop

c00141c4 <Device::preOpenACPI(void*, char*, char*)>:
c00141c4:	57                   	push   edi
c00141c5:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141ca:	56                   	push   esi
c00141cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141d3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141dd:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141e3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141ef:	b9 0e 00 00 00       	mov    ecx,0xe
c00141f4:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141fa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014200:	5e                   	pop    esi
c0014201:	5f                   	pop    edi
c0014202:	c3                   	ret    
c0014203:	90                   	nop

c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014204:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014208:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001420d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014214:	75 0b                	jne    c0014221 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014216:	8b 00                	mov    eax,DWORD PTR [eax]
c0014218:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001421c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001421f:	eb 1e                	jmp    c001423f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0014221:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014226:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001422c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014232:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014234:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014238:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001423c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001423f:	ff e0                	jmp    eax
c0014241:	90                   	nop

c0014242 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014246:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001424b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0014252:	75 0b                	jne    c001425f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0014254:	8b 00                	mov    eax,DWORD PTR [eax]
c0014256:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001425a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001425d:	eb 1e                	jmp    c001427d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c001425f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014264:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001426a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014270:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014272:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014276:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001427a:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c001427d:	ff e0                	jmp    eax
c001427f:	90                   	nop

c0014280 <Device::addChild(Device*)>:
c0014280:	53                   	push   ebx
c0014281:	83 ec 08             	sub    esp,0x8
c0014284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014288:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001428c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014292:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014298:	8b 13                	mov    edx,DWORD PTR [ebx]
c001429a:	85 d2                	test   edx,edx
c001429c:	74 04                	je     c00142a2 <Device::addChild(Device*)+0x22>
c001429e:	89 d3                	mov    ebx,edx
c00142a0:	eb f6                	jmp    c0014298 <Device::addChild(Device*)+0x18>
c00142a2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00142a5:	83 ec 0c             	sub    esp,0xc
c00142a8:	6a 08                	push   0x8
c00142aa:	e8 05 b6 ff ff       	call   c000f8b4 <malloc>
c00142af:	89 03                	mov    DWORD PTR [ebx],eax
c00142b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142be:	83 c4 18             	add    esp,0x18
c00142c1:	5b                   	pop    ebx
c00142c2:	c3                   	ret    
c00142c3:	90                   	nop

c00142c4 <Device::removeAllChildren()>:
c00142c4:	56                   	push   esi
c00142c5:	53                   	push   ebx
c00142c6:	52                   	push   edx
c00142c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142cb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142d1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142d4:	74 17                	je     c00142ed <Device::removeAllChildren()+0x29>
c00142d6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142d9:	85 c0                	test   eax,eax
c00142db:	74 0c                	je     c00142e9 <Device::removeAllChildren()+0x25>
c00142dd:	83 ec 0c             	sub    esp,0xc
c00142e0:	8b 10                	mov    edx,DWORD PTR [eax]
c00142e2:	50                   	push   eax
c00142e3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142e6:	83 c4 10             	add    esp,0x10
c00142e9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142eb:	eb e4                	jmp    c00142d1 <Device::removeAllChildren()+0xd>
c00142ed:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142f9:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142ff:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014306:	58                   	pop    eax
c0014307:	5b                   	pop    ebx
c0014308:	5e                   	pop    esi
c0014309:	c3                   	ret    

c001430a <Device::hibernateAll()>:
c001430a:	53                   	push   ebx
c001430b:	83 ec 14             	sub    esp,0x14
c001430e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014312:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014314:	53                   	push   ebx
c0014315:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014318:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001431e:	83 c4 10             	add    esp,0x10
c0014321:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014324:	74 0f                	je     c0014335 <Device::hibernateAll()+0x2b>
c0014326:	83 ec 0c             	sub    esp,0xc
c0014329:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001432c:	e8 d9 ff ff ff       	call   c001430a <Device::hibernateAll()>
c0014331:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014333:	eb e9                	jmp    c001431e <Device::hibernateAll()+0x14>
c0014335:	83 c4 08             	add    esp,0x8
c0014338:	5b                   	pop    ebx
c0014339:	c3                   	ret    

c001433a <Device::wakeAll()>:
c001433a:	53                   	push   ebx
c001433b:	83 ec 14             	sub    esp,0x14
c001433e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014342:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014344:	53                   	push   ebx
c0014345:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014348:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014354:	74 0f                	je     c0014365 <Device::wakeAll()+0x2b>
c0014356:	83 ec 0c             	sub    esp,0xc
c0014359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001435c:	e8 d9 ff ff ff       	call   c001433a <Device::wakeAll()>
c0014361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014363:	eb e9                	jmp    c001434e <Device::wakeAll()+0x14>
c0014365:	83 c4 08             	add    esp,0x8
c0014368:	5b                   	pop    ebx
c0014369:	c3                   	ret    

c001436a <Device::detectAll()>:
c001436a:	53                   	push   ebx
c001436b:	83 ec 14             	sub    esp,0x14
c001436e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014372:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014374:	53                   	push   ebx
c0014375:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014378:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001437e:	83 c4 10             	add    esp,0x10
c0014381:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014384:	74 0f                	je     c0014395 <Device::detectAll()+0x2b>
c0014386:	83 ec 0c             	sub    esp,0xc
c0014389:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001438c:	e8 d9 ff ff ff       	call   c001436a <Device::detectAll()>
c0014391:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014393:	eb e9                	jmp    c001437e <Device::detectAll()+0x14>
c0014395:	83 c4 08             	add    esp,0x8
c0014398:	5b                   	pop    ebx
c0014399:	c3                   	ret    

c001439a <Device::disableLegacyAll()>:
c001439a:	53                   	push   ebx
c001439b:	83 ec 14             	sub    esp,0x14
c001439e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00143a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143a4:	53                   	push   ebx
c00143a5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00143a8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143ae:	83 c4 10             	add    esp,0x10
c00143b1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00143b4:	74 0f                	je     c00143c5 <Device::disableLegacyAll()+0x2b>
c00143b6:	83 ec 0c             	sub    esp,0xc
c00143b9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143bc:	e8 d9 ff ff ff       	call   c001439a <Device::disableLegacyAll()>
c00143c1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143c3:	eb e9                	jmp    c00143ae <Device::disableLegacyAll()+0x14>
c00143c5:	83 c4 08             	add    esp,0x8
c00143c8:	5b                   	pop    ebx
c00143c9:	c3                   	ret    

c00143ca <Device::loadDriversForAll()>:
c00143ca:	53                   	push   ebx
c00143cb:	83 ec 08             	sub    esp,0x8
c00143ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143d2:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143d8:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143da:	85 db                	test   ebx,ebx
c00143dc:	74 12                	je     c00143f0 <Device::loadDriversForAll()+0x26>
c00143de:	83 ec 0c             	sub    esp,0xc
c00143e1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143e4:	e8 e1 ff ff ff       	call   c00143ca <Device::loadDriversForAll()>
c00143e9:	83 c4 10             	add    esp,0x10
c00143ec:	89 d8                	mov    eax,ebx
c00143ee:	eb e8                	jmp    c00143d8 <Device::loadDriversForAll()+0xe>
c00143f0:	83 c4 08             	add    esp,0x8
c00143f3:	5b                   	pop    ebx
c00143f4:	c3                   	ret    
c00143f5:	90                   	nop

c00143f6 <Device::closeAll()>:
c00143f6:	53                   	push   ebx
c00143f7:	83 ec 08             	sub    esp,0x8
c00143fa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014400:	6a 00                	push   0x0
c0014402:	6a 00                	push   0x0
c0014404:	6a 00                	push   0x0
c0014406:	53                   	push   ebx
c0014407:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001440a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014416:	74 0f                	je     c0014427 <Device::closeAll()+0x31>
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001441e:	e8 d3 ff ff ff       	call   c00143f6 <Device::closeAll()>
c0014423:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014425:	eb e9                	jmp    c0014410 <Device::closeAll()+0x1a>
c0014427:	83 c4 08             	add    esp,0x8
c001442a:	5b                   	pop    ebx
c001442b:	c3                   	ret    

c001442c <Device::powerSavingAll(PowerSavingLevel)>:
c001442c:	56                   	push   esi
c001442d:	53                   	push   ebx
c001442e:	83 ec 0c             	sub    esp,0xc
c0014431:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014435:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014439:	8b 03                	mov    eax,DWORD PTR [ebx]
c001443b:	56                   	push   esi
c001443c:	53                   	push   ebx
c001443d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014440:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014446:	83 c4 10             	add    esp,0x10
c0014449:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001444c:	74 0f                	je     c001445d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001444e:	52                   	push   edx
c001444f:	52                   	push   edx
c0014450:	56                   	push   esi
c0014451:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014454:	e8 d3 ff ff ff       	call   c001442c <Device::powerSavingAll(PowerSavingLevel)>
c0014459:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001445b:	eb e9                	jmp    c0014446 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001445d:	58                   	pop    eax
c001445e:	5b                   	pop    ebx
c001445f:	5e                   	pop    esi
c0014460:	c3                   	ret    
c0014461:	90                   	nop

c0014462 <Device::setName(char const*)>:
c0014462:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c001446a:	e9 c5 c3 fe ff       	jmp    c0000834 <strcpy>
c001446f:	90                   	nop

c0014470 <Device::Device(char const*)>:
c0014470:	83 ec 1c             	sub    esp,0x1c
c0014473:	ba b8 b9 02 c0       	mov    edx,0xc002b9b8
c0014478:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447c:	89 10                	mov    DWORD PTR [eax],edx
c001447e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014482:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001448c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014490:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001449a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001449e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00144a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ac:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144b6:	83 ec 08             	sub    esp,0x8
c00144b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144c1:	e8 9c ff ff ff       	call   c0014462 <Device::setName(char const*)>
c00144c6:	83 c4 10             	add    esp,0x10
c00144c9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144d1:	83 ec 0c             	sub    esp,0xc
c00144d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144d8:	e8 d7 b3 ff ff       	call   c000f8b4 <malloc>
c00144dd:	83 c4 10             	add    esp,0x10
c00144e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144f1:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144fb:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014501:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014507:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001450b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014511:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0014523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014527:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c001452e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014532:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001453c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014540:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001454a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014566:	90                   	nop
c0014567:	83 c4 1c             	add    esp,0x1c
c001456a:	c3                   	ret    
c001456b:	90                   	nop

c001456c <Device::getName()>:
c001456c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014570:	05 d0 00 00 00       	add    eax,0xd0
c0014575:	c3                   	ret    

c0014576 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014576:	83 ec 0c             	sub    esp,0xc
c0014579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001457d:	83 ec 08             	sub    esp,0x8
c0014580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014584:	50                   	push   eax
c0014585:	e8 e6 fe ff ff       	call   c0014470 <Device::Device(char const*)>
c001458a:	83 c4 10             	add    esp,0x10
c001458d:	ba e4 b9 02 c0       	mov    edx,0xc002b9e4
c0014592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014596:	89 10                	mov    DWORD PTR [eax],edx
c0014598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001459c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00145a6:	90                   	nop
c00145a7:	83 c4 0c             	add    esp,0xc
c00145aa:	c3                   	ret    
c00145ab:	90                   	nop

c00145ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00145ac:	57                   	push   edi
c00145ad:	56                   	push   esi
c00145ae:	53                   	push   ebx
c00145af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00145b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145bb:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145c1:	75 0c                	jne    c00145cf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145c3:	52                   	push   edx
c00145c4:	52                   	push   edx
c00145c5:	53                   	push   ebx
c00145c6:	56                   	push   esi
c00145c7:	e8 9a 4f 01 00       	call   c0029566 <LinkedList<Device>::addElement(Device*)>
c00145cc:	83 c4 10             	add    esp,0x10
c00145cf:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145d8:	74 12                	je     c00145ec <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145da:	50                   	push   eax
c00145db:	57                   	push   edi
c00145dc:	56                   	push   esi
c00145dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145e0:	e8 c7 ff ff ff       	call   c00145ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145e7:	83 c4 10             	add    esp,0x10
c00145ea:	eb e9                	jmp    c00145d5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145ec:	5b                   	pop    ebx
c00145ed:	5e                   	pop    esi
c00145ee:	5f                   	pop    edi
c00145ef:	c3                   	ret    

c00145f0 <getDevicesOfType(DeviceType)>:
c00145f0:	53                   	push   ebx
c00145f1:	83 ec 14             	sub    esp,0x14
c00145f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145f8:	53                   	push   ebx
c00145f9:	e8 44 50 01 00       	call   c0029642 <LinkedList<Device>::LinkedList()>
c00145fe:	83 c4 0c             	add    esp,0xc
c0014601:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014605:	53                   	push   ebx
c0014606:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001460c:	e8 9b ff ff ff       	call   c00145ac <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014611:	89 d8                	mov    eax,ebx
c0014613:	83 c4 18             	add    esp,0x18
c0014616:	5b                   	pop    ebx
c0014617:	c2 04 00             	ret    0x4

c001461a <HardDiskController::HardDiskController(char const*)>:
c001461a:	83 ec 0c             	sub    esp,0xc
c001461d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014621:	83 ec 08             	sub    esp,0x8
c0014624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014628:	50                   	push   eax
c0014629:	e8 42 fe ff ff       	call   c0014470 <Device::Device(char const*)>
c001462e:	83 c4 10             	add    esp,0x10
c0014631:	ba 10 ba 02 c0       	mov    edx,0xc002ba10
c0014636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001463a:	89 10                	mov    DWORD PTR [eax],edx
c001463c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014640:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c001464a:	90                   	nop
c001464b:	83 c4 0c             	add    esp,0xc
c001464e:	c3                   	ret    
c001464f:	90                   	nop

c0014650 <HardDiskController::~HardDiskController()>:
c0014650:	83 ec 0c             	sub    esp,0xc
c0014653:	ba 10 ba 02 c0       	mov    edx,0xc002ba10
c0014658:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001465c:	89 10                	mov    DWORD PTR [eax],edx
c001465e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014662:	83 ec 0c             	sub    esp,0xc
c0014665:	50                   	push   eax
c0014666:	e8 fb fa ff ff       	call   c0014166 <Device::~Device()>
c001466b:	83 c4 10             	add    esp,0x10
c001466e:	90                   	nop
c001466f:	83 c4 0c             	add    esp,0xc
c0014672:	c3                   	ret    
c0014673:	90                   	nop

c0014674 <HardDiskController::~HardDiskController()>:
c0014674:	83 ec 0c             	sub    esp,0xc
c0014677:	83 ec 0c             	sub    esp,0xc
c001467a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001467e:	e8 cd ff ff ff       	call   c0014650 <HardDiskController::~HardDiskController()>
c0014683:	83 c4 10             	add    esp,0x10
c0014686:	83 ec 08             	sub    esp,0x8
c0014689:	68 58 01 00 00       	push   0x158
c001468e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014692:	e8 e8 e6 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0014697:	83 c4 10             	add    esp,0x10
c001469a:	83 c4 0c             	add    esp,0xc
c001469d:	c3                   	ret    

c001469e <PhysicalDisk::eject()>:
c001469e:	83 ec 18             	sub    esp,0x18
c00146a1:	68 34 ba 02 c0       	push   0xc002ba34
c00146a6:	e8 b4 e7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00146ab:	83 c8 ff             	or     eax,0xffffffff
c00146ae:	83 c4 1c             	add    esp,0x1c
c00146b1:	c3                   	ret    

c00146b2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146b9:	83 ec 08             	sub    esp,0x8
c00146bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146c0:	50                   	push   eax
c00146c1:	e8 aa fd ff ff       	call   c0014470 <Device::Device(char const*)>
c00146c6:	83 c4 10             	add    esp,0x10
c00146c9:	ba 64 ba 02 c0       	mov    edx,0xc002ba64
c00146ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d2:	89 10                	mov    DWORD PTR [eax],edx
c00146d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ee:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014700:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001470a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014714:	90                   	nop
c0014715:	83 c4 0c             	add    esp,0xc
c0014718:	c3                   	ret    
c0014719:	90                   	nop

c001471a <PhysicalDisk::startCache()>:
c001471a:	56                   	push   esi
c001471b:	53                   	push   ebx
c001471c:	83 ec 10             	sub    esp,0x10
c001471f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014723:	6a 44                	push   0x44
c0014725:	e8 8a b1 ff ff       	call   c000f8b4 <malloc>
c001472a:	89 c6                	mov    esi,eax
c001472c:	58                   	pop    eax
c001472d:	5a                   	pop    edx
c001472e:	53                   	push   ebx
c001472f:	56                   	push   esi
c0014730:	e8 cf 28 00 00       	call   c0017004 <VCache::VCache(PhysicalDisk*)>
c0014735:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c001473b:	83 c4 14             	add    esp,0x14
c001473e:	5b                   	pop    ebx
c001473f:	5e                   	pop    esi
c0014740:	c3                   	ret    
c0014741:	90                   	nop

c0014742 <PhysicalDisk::~PhysicalDisk()>:
c0014742:	83 ec 0c             	sub    esp,0xc
c0014745:	ba 64 ba 02 c0       	mov    edx,0xc002ba64
c001474a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474e:	89 10                	mov    DWORD PTR [eax],edx
c0014750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014754:	83 ec 0c             	sub    esp,0xc
c0014757:	50                   	push   eax
c0014758:	e8 09 fa ff ff       	call   c0014166 <Device::~Device()>
c001475d:	83 c4 10             	add    esp,0x10
c0014760:	90                   	nop
c0014761:	83 c4 0c             	add    esp,0xc
c0014764:	c3                   	ret    
c0014765:	90                   	nop

c0014766 <PhysicalDisk::~PhysicalDisk()>:
c0014766:	83 ec 0c             	sub    esp,0xc
c0014769:	83 ec 0c             	sub    esp,0xc
c001476c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014770:	e8 cd ff ff ff       	call   c0014742 <PhysicalDisk::~PhysicalDisk()>
c0014775:	83 c4 10             	add    esp,0x10
c0014778:	83 ec 08             	sub    esp,0x8
c001477b:	68 6c 01 00 00       	push   0x16c
c0014780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014784:	e8 f6 e5 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0014789:	83 c4 10             	add    esp,0x10
c001478c:	83 c4 0c             	add    esp,0xc
c001478f:	c3                   	ret    

c0014790 <FPU::FPU(char const*)>:
c0014790:	83 ec 0c             	sub    esp,0xc
c0014793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014797:	83 ec 08             	sub    esp,0x8
c001479a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001479e:	50                   	push   eax
c001479f:	e8 cc fc ff ff       	call   c0014470 <Device::Device(char const*)>
c00147a4:	83 c4 10             	add    esp,0x10
c00147a7:	ba a8 ba 02 c0       	mov    edx,0xc002baa8
c00147ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b0:	89 10                	mov    DWORD PTR [eax],edx
c00147b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147b6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147c0:	90                   	nop
c00147c1:	83 c4 0c             	add    esp,0xc
c00147c4:	c3                   	ret    
c00147c5:	90                   	nop

c00147c6 <FPU::~FPU()>:
c00147c6:	83 ec 0c             	sub    esp,0xc
c00147c9:	ba a8 ba 02 c0       	mov    edx,0xc002baa8
c00147ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d2:	89 10                	mov    DWORD PTR [eax],edx
c00147d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	50                   	push   eax
c00147dc:	e8 85 f9 ff ff       	call   c0014166 <Device::~Device()>
c00147e1:	83 c4 10             	add    esp,0x10
c00147e4:	90                   	nop
c00147e5:	83 c4 0c             	add    esp,0xc
c00147e8:	c3                   	ret    
c00147e9:	90                   	nop

c00147ea <FPU::~FPU()>:
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	83 ec 0c             	sub    esp,0xc
c00147f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f4:	e8 cd ff ff ff       	call   c00147c6 <FPU::~FPU()>
c00147f9:	83 c4 10             	add    esp,0x10
c00147fc:	83 ec 08             	sub    esp,0x8
c00147ff:	68 58 01 00 00       	push   0x158
c0014804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014808:	e8 72 e5 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c001480d:	83 c4 10             	add    esp,0x10
c0014810:	83 c4 0c             	add    esp,0xc
c0014813:	c3                   	ret    

c0014814 <setupFPU()>:
c0014814:	53                   	push   ebx
c0014815:	83 ec 08             	sub    esp,0x8
c0014818:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c001481e:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014825:	74 19                	je     c0014840 <setupFPU()+0x2c>
c0014827:	83 ec 0c             	sub    esp,0xc
c001482a:	68 58 01 00 00       	push   0x158
c001482f:	e8 80 b0 ff ff       	call   c000f8b4 <malloc>
c0014834:	89 c3                	mov    ebx,eax
c0014836:	89 04 24             	mov    DWORD PTR [esp],eax
c0014839:	e8 5a 19 01 00       	call   c0026198 <AVX::AVX()>
c001483e:	eb 5b                	jmp    c001489b <setupFPU()+0x87>
c0014840:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014846:	84 c0                	test   al,al
c0014848:	79 19                	jns    c0014863 <setupFPU()+0x4f>
c001484a:	83 ec 0c             	sub    esp,0xc
c001484d:	68 58 01 00 00       	push   0x158
c0014852:	e8 5d b0 ff ff       	call   c000f8b4 <malloc>
c0014857:	89 c3                	mov    ebx,eax
c0014859:	89 04 24             	mov    DWORD PTR [esp],eax
c001485c:	e8 5d 1a 01 00       	call   c00262be <SSE::SSE()>
c0014861:	eb 38                	jmp    c001489b <setupFPU()+0x87>
c0014863:	a8 20                	test   al,0x20
c0014865:	74 19                	je     c0014880 <setupFPU()+0x6c>
c0014867:	83 ec 0c             	sub    esp,0xc
c001486a:	68 58 01 00 00       	push   0x158
c001486f:	e8 40 b0 ff ff       	call   c000f8b4 <malloc>
c0014874:	89 c3                	mov    ebx,eax
c0014876:	89 04 24             	mov    DWORD PTR [esp],eax
c0014879:	e8 aa 19 01 00       	call   c0026228 <MMX::MMX()>
c001487e:	eb 1b                	jmp    c001489b <setupFPU()+0x87>
c0014880:	a8 10                	test   al,0x10
c0014882:	74 1c                	je     c00148a0 <setupFPU()+0x8c>
c0014884:	83 ec 0c             	sub    esp,0xc
c0014887:	68 58 01 00 00       	push   0x158
c001488c:	e8 23 b0 ff ff       	call   c000f8b4 <malloc>
c0014891:	89 c3                	mov    ebx,eax
c0014893:	89 04 24             	mov    DWORD PTR [esp],eax
c0014896:	e8 b1 1a 01 00       	call   c002634c <x87::x87()>
c001489b:	83 c4 10             	add    esp,0x10
c001489e:	eb 24                	jmp    c00148c4 <setupFPU()+0xb0>
c00148a0:	83 e0 ef             	and    eax,0xffffffef
c00148a3:	83 ec 0c             	sub    esp,0xc
c00148a6:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00148ac:	68 94 ba 02 c0       	push   0xc002ba94
c00148b1:	e8 a9 e5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00148b6:	0f 20 c0             	mov    eax,cr0
c00148b9:	83 c8 04             	or     eax,0x4
c00148bc:	0f 22 c0             	mov    cr0,eax
c00148bf:	31 db                	xor    ebx,ebx
c00148c1:	83 c4 10             	add    esp,0x10
c00148c4:	89 d8                	mov    eax,ebx
c00148c6:	83 c4 08             	add    esp,0x8
c00148c9:	5b                   	pop    ebx
c00148ca:	c3                   	ret    
c00148cb:	90                   	nop

c00148cc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148d0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148d4:	c1 e0 04             	shl    eax,0x4
c00148d7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148db:	8d 50 10             	lea    edx,[eax+0x10]
c00148de:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148e4:	74 08                	je     c00148ee <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148e6:	83 c0 04             	add    eax,0x4
c00148e9:	39 d0                	cmp    eax,edx
c00148eb:	75 f1                	jne    c00148de <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148ed:	c3                   	ret    
c00148ee:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148f8:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014902:	eb e2                	jmp    c00148e6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014904 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014904:	57                   	push   edi
c0014905:	31 c0                	xor    eax,eax
c0014907:	56                   	push   esi
c0014908:	53                   	push   ebx
c0014909:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001490d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014911:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014915:	89 da                	mov    edx,ebx
c0014917:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001491b:	c1 e2 04             	shl    edx,0x4
c001491e:	01 ca                	add    edx,ecx
c0014920:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014928:	74 16                	je     c0014940 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c001492a:	40                   	inc    eax
c001492b:	83 f8 04             	cmp    eax,0x4
c001492e:	75 f0                	jne    c0014920 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014930:	c7 44 24 10 d8 ba 02 c0 	mov    DWORD PTR [esp+0x10],0xc002bad8
c0014938:	5b                   	pop    ebx
c0014939:	5e                   	pop    esi
c001493a:	5f                   	pop    edi
c001493b:	e9 b9 5f 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c0014940:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014943:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014946:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001494c:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014952:	5b                   	pop    ebx
c0014953:	5e                   	pop    esi
c0014954:	5f                   	pop    edi
c0014955:	c3                   	ret    

c0014956 <doubleFault(regs*, void*)>:
c0014956:	55                   	push   ebp
c0014957:	89 e5                	mov    ebp,esp
c0014959:	83 ec 08             	sub    esp,0x8
c001495c:	83 ec 0c             	sub    esp,0xc
c001495f:	68 13 bb 02 c0       	push   0xc002bb13
c0014964:	e8 90 5f 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	90                   	nop
c001496d:	c9                   	leave  
c001496e:	c3                   	ret    
c001496f:	90                   	nop

c0014970 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014970:	56                   	push   esi
c0014971:	53                   	push   ebx
c0014972:	50                   	push   eax
c0014973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014977:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001497b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014980:	75 35                	jne    c00149b7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014982:	8d 43 20             	lea    eax,[ebx+0x20]
c0014985:	31 d2                	xor    edx,edx
c0014987:	89 c1                	mov    ecx,eax
c0014989:	c1 e1 04             	shl    ecx,0x4
c001498c:	01 f1                	add    ecx,esi
c001498e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014996:	74 3e                	je     c00149d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014998:	42                   	inc    edx
c0014999:	83 fa 04             	cmp    edx,0x4
c001499c:	75 f0                	jne    c001498e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c001499e:	83 ec 0c             	sub    esp,0xc
c00149a1:	68 58 bb 02 c0       	push   0xc002bb58
c00149a6:	e8 4e 5f 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00149ab:	83 c4 10             	add    esp,0x10
c00149ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00149b3:	5a                   	pop    edx
c00149b4:	5b                   	pop    ebx
c00149b5:	5e                   	pop    esi
c00149b6:	c3                   	ret    
c00149b7:	83 ec 0c             	sub    esp,0xc
c00149ba:	56                   	push   esi
c00149bb:	e8 ac fb ff ff       	call   c001456c <Device::getName()>
c00149c0:	83 c4 10             	add    esp,0x10
c00149c3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149c6:	75 ba                	jne    c0014982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149c8:	83 fb 0f             	cmp    ebx,0xf
c00149cb:	7f 29                	jg     c00149f6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149cd:	0f b6 9b 20 e5 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1ae0]
c00149d4:	eb ac                	jmp    c0014982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149d6:	8d 04 82             	lea    eax,[edx+eax*4]
c00149d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149dd:	8d 04 86             	lea    eax,[esi+eax*4]
c00149e0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149e6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149ea:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149f0:	89 d8                	mov    eax,ebx
c00149f2:	5a                   	pop    edx
c00149f3:	5b                   	pop    ebx
c00149f4:	5e                   	pop    esi
c00149f5:	c3                   	ret    
c00149f6:	83 ec 0c             	sub    esp,0xc
c00149f9:	68 20 bb 02 c0       	push   0xc002bb20
c00149fe:	e8 f6 5e 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0014a03:	83 c4 10             	add    esp,0x10
c0014a06:	e9 77 ff ff ff       	jmp    c0014982 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014a0b:	90                   	nop

c0014a0c <InterruptController::clearAllHandlers(int, bool)>:
c0014a0c:	56                   	push   esi
c0014a0d:	53                   	push   ebx
c0014a0e:	52                   	push   edx
c0014a0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014a13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a17:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a1c:	75 61                	jne    c0014a7f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a1e:	8d 46 20             	lea    eax,[esi+0x20]
c0014a21:	c1 e6 04             	shl    esi,0x4
c0014a24:	c1 e0 04             	shl    eax,0x4
c0014a27:	01 de                	add    esi,ebx
c0014a29:	01 d8                	add    eax,ebx
c0014a2b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a35:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a3f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a49:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a53:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a5d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a67:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a71:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a7b:	58                   	pop    eax
c0014a7c:	5b                   	pop    ebx
c0014a7d:	5e                   	pop    esi
c0014a7e:	c3                   	ret    
c0014a7f:	83 ec 0c             	sub    esp,0xc
c0014a82:	53                   	push   ebx
c0014a83:	e8 e4 fa ff ff       	call   c001456c <Device::getName()>
c0014a88:	83 c4 10             	add    esp,0x10
c0014a8b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a8e:	75 8e                	jne    c0014a1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a90:	83 fe 0f             	cmp    esi,0xf
c0014a93:	7f 09                	jg     c0014a9e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a95:	0f b6 b6 20 e5 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1ae0]
c0014a9c:	eb 80                	jmp    c0014a1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a9e:	83 ec 0c             	sub    esp,0xc
c0014aa1:	68 94 bb 02 c0       	push   0xc002bb94
c0014aa6:	e8 4e 5e 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0014aab:	83 c4 10             	add    esp,0x10
c0014aae:	e9 6b ff ff ff       	jmp    c0014a1e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014ab3:	90                   	nop

c0014ab4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014ab4:	56                   	push   esi
c0014ab5:	53                   	push   ebx
c0014ab6:	52                   	push   edx
c0014ab7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014abb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014abf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014ac4:	75 3a                	jne    c0014b00 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ac6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014aca:	8d 50 20             	lea    edx,[eax+0x20]
c0014acd:	c1 e2 04             	shl    edx,0x4
c0014ad0:	8d 04 16             	lea    eax,[esi+edx*1]
c0014ad3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ad7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014add:	74 0b                	je     c0014aea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014adf:	83 c0 04             	add    eax,0x4
c0014ae2:	39 d0                	cmp    eax,edx
c0014ae4:	75 f1                	jne    c0014ad7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014ae6:	58                   	pop    eax
c0014ae7:	5b                   	pop    ebx
c0014ae8:	5e                   	pop    esi
c0014ae9:	c3                   	ret    
c0014aea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014af4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014afe:	eb df                	jmp    c0014adf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014b00:	83 ec 0c             	sub    esp,0xc
c0014b03:	56                   	push   esi
c0014b04:	e8 63 fa ff ff       	call   c001456c <Device::getName()>
c0014b09:	83 c4 10             	add    esp,0x10
c0014b0c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b0f:	75 b5                	jne    c0014ac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b11:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b16:	7f 11                	jg     c0014b29 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b1c:	0f b6 80 20 e5 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1ae0]
c0014b23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b27:	eb 9d                	jmp    c0014ac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b29:	83 ec 0c             	sub    esp,0xc
c0014b2c:	68 94 bb 02 c0       	push   0xc002bb94
c0014b31:	e8 c3 5d 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0014b36:	83 c4 10             	add    esp,0x10
c0014b39:	eb 8b                	jmp    c0014ac6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b3b <nmiHandler(regs*, void*)>:
c0014b3b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014b40:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b44:	e9 b5 a4 ff ff       	jmp    c000effe <Computer::handleNMI()>

c0014b49 <int_handler>:
c0014b49:	55                   	push   ebp
c0014b4a:	57                   	push   edi
c0014b4b:	56                   	push   esi
c0014b4c:	53                   	push   ebx
c0014b4d:	83 ec 0c             	sub    esp,0xc
c0014b50:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b54:	80 3d 24 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e24,0x0
c0014b5b:	74 0b                	je     c0014b68 <int_handler+0x1f>
c0014b5d:	fa                   	cli    
c0014b5e:	f4                   	hlt    
c0014b5f:	80 3d 24 1e 03 c0 00 	cmp    BYTE PTR ds:0xc0031e24,0x0
c0014b66:	75 f5                	jne    c0014b5d <int_handler+0x14>
c0014b68:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0014b6d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b70:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b76:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b7c:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b7f:	83 f8 17             	cmp    eax,0x17
c0014b82:	77 13                	ja     c0014b97 <int_handler+0x4e>
c0014b84:	83 ec 08             	sub    esp,0x8
c0014b87:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b89:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b8c:	0f b6 c0             	movzx  eax,al
c0014b8f:	50                   	push   eax
c0014b90:	57                   	push   edi
c0014b91:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b94:	83 c4 10             	add    esp,0x10
c0014b97:	83 c3 15             	add    ebx,0x15
c0014b9a:	c1 e3 04             	shl    ebx,0x4
c0014b9d:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014ba1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014ba8:	31 db                	xor    ebx,ebx
c0014baa:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014bae:	85 c0                	test   eax,eax
c0014bb0:	74 13                	je     c0014bc5 <int_handler+0x7c>
c0014bb2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014bb5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014bb9:	74 1c                	je     c0014bd7 <int_handler+0x8e>
c0014bbb:	83 ec 08             	sub    esp,0x8
c0014bbe:	52                   	push   edx
c0014bbf:	56                   	push   esi
c0014bc0:	ff d0                	call   eax
c0014bc2:	83 c4 10             	add    esp,0x10
c0014bc5:	43                   	inc    ebx
c0014bc6:	83 fb 04             	cmp    ebx,0x4
c0014bc9:	75 df                	jne    c0014baa <int_handler+0x61>
c0014bcb:	83 c4 0c             	add    esp,0xc
c0014bce:	31 c0                	xor    eax,eax
c0014bd0:	5b                   	pop    ebx
c0014bd1:	31 d2                	xor    edx,edx
c0014bd3:	5e                   	pop    esi
c0014bd4:	5f                   	pop    edi
c0014bd5:	5d                   	pop    ebp
c0014bd6:	c3                   	ret    
c0014bd7:	83 ec 08             	sub    esp,0x8
c0014bda:	52                   	push   edx
c0014bdb:	56                   	push   esi
c0014bdc:	ff d0                	call   eax
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	83 c4 0c             	add    esp,0xc
c0014be4:	5b                   	pop    ebx
c0014be5:	5e                   	pop    esi
c0014be6:	5f                   	pop    edi
c0014be7:	5d                   	pop    ebp
c0014be8:	c3                   	ret    
c0014be9:	90                   	nop

c0014bea <InterruptController::InterruptController(char const*)>:
c0014bea:	83 ec 1c             	sub    esp,0x1c
c0014bed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf1:	83 ec 08             	sub    esp,0x8
c0014bf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014bf8:	50                   	push   eax
c0014bf9:	e8 72 f8 ff ff       	call   c0014470 <Device::Device(char const*)>
c0014bfe:	83 c4 10             	add    esp,0x10
c0014c01:	ba 54 be 02 c0       	mov    edx,0xc002be54
c0014c06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c0a:	89 10                	mov    DWORD PTR [eax],edx
c0014c0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c10:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c1a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c22:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c2a:	7f 5e                	jg     c0014c8a <InterruptController::InterruptController(char const*)+0xa0>
c0014c2c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c34:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c39:	7f 49                	jg     c0014c84 <InterruptController::InterruptController(char const*)+0x9a>
c0014c3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c43:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c4a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c4e:	01 ca                	add    edx,ecx
c0014c50:	83 c2 54             	add    edx,0x54
c0014c53:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c5f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c6e:	01 ca                	add    edx,ecx
c0014c70:	81 c2 54 04 00 00    	add    edx,0x454
c0014c76:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c7e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c82:	eb b0                	jmp    c0014c34 <InterruptController::InterruptController(char const*)+0x4a>
c0014c84:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c88:	eb 98                	jmp    c0014c22 <InterruptController::InterruptController(char const*)+0x38>
c0014c8a:	90                   	nop
c0014c8b:	83 c4 1c             	add    esp,0x1c
c0014c8e:	c3                   	ret    
c0014c8f:	90                   	nop

c0014c90 <InterruptController::~InterruptController()>:
c0014c90:	83 ec 0c             	sub    esp,0xc
c0014c93:	ba 54 be 02 c0       	mov    edx,0xc002be54
c0014c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c9c:	89 10                	mov    DWORD PTR [eax],edx
c0014c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ca2:	83 ec 0c             	sub    esp,0xc
c0014ca5:	50                   	push   eax
c0014ca6:	e8 bb f4 ff ff       	call   c0014166 <Device::~Device()>
c0014cab:	83 c4 10             	add    esp,0x10
c0014cae:	90                   	nop
c0014caf:	83 c4 0c             	add    esp,0xc
c0014cb2:	c3                   	ret    
c0014cb3:	90                   	nop

c0014cb4 <InterruptController::~InterruptController()>:
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	83 ec 0c             	sub    esp,0xc
c0014cba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cbe:	e8 cd ff ff ff       	call   c0014c90 <InterruptController::~InterruptController()>
c0014cc3:	83 c4 10             	add    esp,0x10
c0014cc6:	83 ec 08             	sub    esp,0x8
c0014cc9:	68 58 21 00 00       	push   0x2158
c0014cce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cd2:	e8 a8 e0 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0014cd7:	83 c4 10             	add    esp,0x10
c0014cda:	83 c4 0c             	add    esp,0xc
c0014cdd:	c3                   	ret    

c0014cde <displayDebugInfo(regs*)>:
c0014cde:	55                   	push   ebp
c0014cdf:	57                   	push   edi
c0014ce0:	56                   	push   esi
c0014ce1:	53                   	push   ebx
c0014ce2:	83 ec 24             	sub    esp,0x24
c0014ce5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014ce9:	0f 20 c2             	mov    edx,cr0
c0014cec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cf0:	0f 20 d7             	mov    edi,cr2
c0014cf3:	0f 20 de             	mov    esi,cr3
c0014cf6:	0f 20 e5             	mov    ebp,cr4
c0014cf9:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014cfc:	68 ce bb 02 c0       	push   0xc002bbce
c0014d01:	e8 59 e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d06:	59                   	pop    ecx
c0014d07:	58                   	pop    eax
c0014d08:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014d0b:	68 d9 bb 02 c0       	push   0xc002bbd9
c0014d10:	e8 4a e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d15:	58                   	pop    eax
c0014d16:	5a                   	pop    edx
c0014d17:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d1a:	68 e4 bb 02 c0       	push   0xc002bbe4
c0014d1f:	e8 3b e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d24:	59                   	pop    ecx
c0014d25:	58                   	pop    eax
c0014d26:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d29:	68 ef bb 02 c0       	push   0xc002bbef
c0014d2e:	e8 2c e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d33:	58                   	pop    eax
c0014d34:	5a                   	pop    edx
c0014d35:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d38:	68 fa bb 02 c0       	push   0xc002bbfa
c0014d3d:	e8 1d e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d42:	59                   	pop    ecx
c0014d43:	58                   	pop    eax
c0014d44:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d47:	68 05 bc 02 c0       	push   0xc002bc05
c0014d4c:	e8 0e e1 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d51:	58                   	pop    eax
c0014d52:	5a                   	pop    edx
c0014d53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d56:	68 10 bc 02 c0       	push   0xc002bc10
c0014d5b:	e8 ff e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d60:	59                   	pop    ecx
c0014d61:	58                   	pop    eax
c0014d62:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d65:	68 1b bc 02 c0       	push   0xc002bc1b
c0014d6a:	e8 f0 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d6f:	58                   	pop    eax
c0014d70:	5a                   	pop    edx
c0014d71:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d74:	68 26 bc 02 c0       	push   0xc002bc26
c0014d79:	e8 e1 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d7e:	59                   	pop    ecx
c0014d7f:	58                   	pop    eax
c0014d80:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d83:	68 35 bc 02 c0       	push   0xc002bc35
c0014d88:	e8 d2 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d8d:	58                   	pop    eax
c0014d8e:	5a                   	pop    edx
c0014d8f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d92:	68 40 bc 02 c0       	push   0xc002bc40
c0014d97:	e8 c3 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014d9c:	59                   	pop    ecx
c0014d9d:	58                   	pop    eax
c0014d9e:	57                   	push   edi
c0014d9f:	68 4b bc 02 c0       	push   0xc002bc4b
c0014da4:	e8 b6 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014da9:	58                   	pop    eax
c0014daa:	5a                   	pop    edx
c0014dab:	56                   	push   esi
c0014dac:	68 56 bc 02 c0       	push   0xc002bc56
c0014db1:	e8 a9 e0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0014db6:	59                   	pop    ecx
c0014db7:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014dbc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dc2:	e8 bb be ff ff       	call   c0010c82 <setActiveTerminal(VgaText*)>
c0014dc7:	58                   	pop    eax
c0014dc8:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014dcb:	5a                   	pop    edx
c0014dcc:	c1 e0 05             	shl    eax,0x5
c0014dcf:	05 80 e2 02 c0       	add    eax,0xc002e280
c0014dd4:	50                   	push   eax
c0014dd5:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014dda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de0:	e8 29 c2 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014de5:	59                   	pop    ecx
c0014de6:	58                   	pop    eax
c0014de7:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014dec:	68 61 bc 02 c0       	push   0xc002bc61
c0014df1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014df7:	e8 12 c2 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014dfc:	58                   	pop    eax
c0014dfd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e02:	5a                   	pop    edx
c0014e03:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014e06:	83 c0 0c             	add    eax,0xc
c0014e09:	50                   	push   eax
c0014e0a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e0f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e15:	e8 f4 c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014e1a:	59                   	pop    ecx
c0014e1b:	58                   	pop    eax
c0014e1c:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e21:	68 6a bc 02 c0       	push   0xc002bc6a
c0014e26:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2c:	e8 dd c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014e31:	58                   	pop    eax
c0014e32:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e37:	5a                   	pop    edx
c0014e38:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e41:	e8 ee c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014e46:	59                   	pop    ecx
c0014e47:	58                   	pop    eax
c0014e48:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e4d:	68 72 bc 02 c0       	push   0xc002bc72
c0014e52:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e58:	e8 b1 c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014e5d:	58                   	pop    eax
c0014e5e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e63:	5a                   	pop    edx
c0014e64:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6d:	e8 c2 c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014e72:	59                   	pop    ecx
c0014e73:	58                   	pop    eax
c0014e74:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e79:	68 7a bc 02 c0       	push   0xc002bc7a
c0014e7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e84:	e8 85 c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014e89:	58                   	pop    eax
c0014e8a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014e8f:	5a                   	pop    edx
c0014e90:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e99:	e8 96 c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014e9e:	59                   	pop    ecx
c0014e9f:	58                   	pop    eax
c0014ea0:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ea5:	68 82 bc 02 c0       	push   0xc002bc82
c0014eaa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eb0:	e8 59 c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014eb5:	58                   	pop    eax
c0014eb6:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ebb:	5a                   	pop    edx
c0014ebc:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ebf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec5:	e8 6a c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014eca:	59                   	pop    ecx
c0014ecb:	58                   	pop    eax
c0014ecc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ed1:	68 8a bc 02 c0       	push   0xc002bc8a
c0014ed6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edc:	e8 2d c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014ee1:	58                   	pop    eax
c0014ee2:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ee7:	5a                   	pop    edx
c0014ee8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014eeb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef1:	e8 3e c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014ef6:	59                   	pop    ecx
c0014ef7:	58                   	pop    eax
c0014ef8:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014efd:	68 92 bc 02 c0       	push   0xc002bc92
c0014f02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f08:	e8 01 c1 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014f0d:	58                   	pop    eax
c0014f0e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f13:	5a                   	pop    edx
c0014f14:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f17:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1d:	e8 12 c1 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014f22:	59                   	pop    ecx
c0014f23:	58                   	pop    eax
c0014f24:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f29:	68 9a bc 02 c0       	push   0xc002bc9a
c0014f2e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f34:	e8 d5 c0 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014f39:	58                   	pop    eax
c0014f3a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f3f:	5a                   	pop    edx
c0014f40:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f44:	52                   	push   edx
c0014f45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4b:	e8 e4 c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014f50:	59                   	pop    ecx
c0014f51:	58                   	pop    eax
c0014f52:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f57:	68 a3 bc 02 c0       	push   0xc002bca3
c0014f5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f62:	e8 a7 c0 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014f67:	58                   	pop    eax
c0014f68:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f6d:	5a                   	pop    edx
c0014f6e:	57                   	push   edi
c0014f6f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f75:	e8 ba c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014f7a:	59                   	pop    ecx
c0014f7b:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f80:	5f                   	pop    edi
c0014f81:	68 ab bc 02 c0       	push   0xc002bcab
c0014f86:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f8c:	e8 7d c0 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014f91:	58                   	pop    eax
c0014f92:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014f97:	5a                   	pop    edx
c0014f98:	56                   	push   esi
c0014f99:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9f:	e8 90 c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014fa4:	59                   	pop    ecx
c0014fa5:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014faa:	5e                   	pop    esi
c0014fab:	68 b3 bc 02 c0       	push   0xc002bcb3
c0014fb0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb6:	e8 53 c0 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014fbb:	5f                   	pop    edi
c0014fbc:	58                   	pop    eax
c0014fbd:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014fc2:	55                   	push   ebp
c0014fc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc9:	e8 66 c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014fce:	58                   	pop    eax
c0014fcf:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014fd4:	5a                   	pop    edx
c0014fd5:	68 bb bc 02 c0       	push   0xc002bcbb
c0014fda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe0:	e8 29 c0 ff ff       	call   c001100e <VgaText::puts(char const*)>
c0014fe5:	0f 21 c0             	mov    eax,db0
c0014fe8:	59                   	pop    ecx
c0014fe9:	5e                   	pop    esi
c0014fea:	50                   	push   eax
c0014feb:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0014ff0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff6:	e8 39 c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0014ffb:	5f                   	pop    edi
c0014ffc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015001:	5d                   	pop    ebp
c0015002:	68 c4 bc 02 c0       	push   0xc002bcc4
c0015007:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500d:	e8 fc bf ff ff       	call   c001100e <VgaText::puts(char const*)>
c0015012:	0f 21 c8             	mov    eax,db1
c0015015:	5a                   	pop    edx
c0015016:	59                   	pop    ecx
c0015017:	50                   	push   eax
c0015018:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001501d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015023:	e8 0c c0 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0015028:	5e                   	pop    esi
c0015029:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001502e:	5f                   	pop    edi
c001502f:	68 cc bc 02 c0       	push   0xc002bccc
c0015034:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503a:	e8 cf bf ff ff       	call   c001100e <VgaText::puts(char const*)>
c001503f:	0f 21 d0             	mov    eax,db2
c0015042:	5d                   	pop    ebp
c0015043:	5a                   	pop    edx
c0015044:	50                   	push   eax
c0015045:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001504a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015050:	e8 df bf ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0015055:	59                   	pop    ecx
c0015056:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001505b:	5e                   	pop    esi
c001505c:	68 d4 bc 02 c0       	push   0xc002bcd4
c0015061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015067:	e8 a2 bf ff ff       	call   c001100e <VgaText::puts(char const*)>
c001506c:	0f 21 d8             	mov    eax,db3
c001506f:	5f                   	pop    edi
c0015070:	5d                   	pop    ebp
c0015071:	50                   	push   eax
c0015072:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015077:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507d:	e8 b2 bf ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0015082:	58                   	pop    eax
c0015083:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015088:	5a                   	pop    edx
c0015089:	68 dc bc 02 c0       	push   0xc002bcdc
c001508e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015094:	e8 75 bf ff ff       	call   c001100e <VgaText::puts(char const*)>
c0015099:	0f 21 f0             	mov    eax,db6
c001509c:	59                   	pop    ecx
c001509d:	5e                   	pop    esi
c001509e:	50                   	push   eax
c001509f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150aa:	e8 85 bf ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c00150af:	5f                   	pop    edi
c00150b0:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150b5:	5d                   	pop    ebp
c00150b6:	68 e4 bc 02 c0       	push   0xc002bce4
c00150bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c1:	e8 48 bf ff ff       	call   c001100e <VgaText::puts(char const*)>
c00150c6:	0f 21 f8             	mov    eax,db7
c00150c9:	5a                   	pop    edx
c00150ca:	59                   	pop    ecx
c00150cb:	50                   	push   eax
c00150cc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00150d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d7:	e8 58 bf ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c00150dc:	5e                   	pop    esi
c00150dd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150e0:	e8 97 8b 00 00       	call   c001dc7c <Thr::getDriverNameFromAddress(unsigned long)>
c00150e5:	83 c4 10             	add    esp,0x10
c00150e8:	85 c0                	test   eax,eax
c00150ea:	74 7d                	je     c0015169 <displayDebugInfo(regs*)+0x48b>
c00150ec:	89 c6                	mov    esi,eax
c00150ee:	50                   	push   eax
c00150ef:	50                   	push   eax
c00150f0:	56                   	push   esi
c00150f1:	68 ec bc 02 c0       	push   0xc002bcec
c00150f6:	e8 64 dd ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00150fb:	5a                   	pop    edx
c00150fc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015101:	59                   	pop    ecx
c0015102:	68 fa bc 02 c0       	push   0xc002bcfa
c0015107:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510d:	e8 fc be ff ff       	call   c001100e <VgaText::puts(char const*)>
c0015112:	5f                   	pop    edi
c0015113:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015118:	5d                   	pop    ebp
c0015119:	56                   	push   esi
c001511a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015120:	e8 e9 be ff ff       	call   c001100e <VgaText::puts(char const*)>
c0015125:	58                   	pop    eax
c0015126:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001512b:	5a                   	pop    edx
c001512c:	68 06 bd 02 c0       	push   0xc002bd06
c0015131:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015137:	e8 d2 be ff ff       	call   c001100e <VgaText::puts(char const*)>
c001513c:	59                   	pop    ecx
c001513d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c0015142:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015148:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001514b:	e8 63 8b 00 00       	call   c001dcb3 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0015150:	5b                   	pop    ebx
c0015151:	5d                   	pop    ebp
c0015152:	50                   	push   eax
c0015153:	57                   	push   edi
c0015154:	e8 db be ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c0015159:	58                   	pop    eax
c001515a:	5a                   	pop    edx
c001515b:	56                   	push   esi
c001515c:	68 12 bd 02 c0       	push   0xc002bd12
c0015161:	e8 f9 dc ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0015166:	83 c4 10             	add    esp,0x10
c0015169:	fa                   	cli    
c001516a:	f4                   	hlt    
c001516b:	eb fe                	jmp    c001516b <displayDebugInfo(regs*)+0x48d>

c001516d <x87EmulHandler(regs*, void*)>:
c001516d:	83 ec 0c             	sub    esp,0xc
c0015170:	0f 20 c2             	mov    edx,cr0
c0015173:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015178:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c001517c:	75 4b                	jne    c00151c9 <x87EmulHandler(regs*, void*)+0x5c>
c001517e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015183:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015189:	85 c0                	test   eax,eax
c001518b:	74 05                	je     c0015192 <x87EmulHandler(regs*, void*)+0x25>
c001518d:	83 e2 08             	and    edx,0x8
c0015190:	75 17                	jne    c00151a9 <x87EmulHandler(regs*, void*)+0x3c>
c0015192:	83 ec 0c             	sub    esp,0xc
c0015195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015199:	e8 4e b1 00 00       	call   c00202ec <Vm::x87Handler(regs*)>
c001519e:	83 c4 10             	add    esp,0x10
c00151a1:	84 c0                	test   al,al
c00151a3:	74 24                	je     c00151c9 <x87EmulHandler(regs*, void*)+0x5c>
c00151a5:	83 c4 0c             	add    esp,0xc
c00151a8:	c3                   	ret    
c00151a9:	83 ec 0c             	sub    esp,0xc
c00151ac:	68 38 bd 02 c0       	push   0xc002bd38
c00151b1:	e8 a9 dc ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00151b6:	0f 06                	clts   
c00151b8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151bd:	83 c4 10             	add    esp,0x10
c00151c0:	a3 68 f4 02 c0       	mov    ds:0xc002f468,eax
c00151c5:	83 c4 0c             	add    esp,0xc
c00151c8:	c3                   	ret    
c00151c9:	83 ec 0c             	sub    esp,0xc
c00151cc:	68 22 bd 02 c0       	push   0xc002bd22
c00151d1:	e8 89 dc ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00151d6:	5a                   	pop    edx
c00151d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151db:	e8 fe fa ff ff       	call   c0014cde <displayDebugInfo(regs*)>

c00151e0 <gpFault(regs*, void*)>:
c00151e0:	53                   	push   ebx
c00151e1:	83 ec 14             	sub    esp,0x14
c00151e4:	c7 05 64 f4 02 c0 69 f6 01 c0 	mov    DWORD PTR ds:0xc002f464,0xc001f669
c00151ee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151f2:	53                   	push   ebx
c00151f3:	e8 71 a4 00 00       	call   c001f669 <Vm::faultHandler(regs*)>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	84 c0                	test   al,al
c00151fd:	74 05                	je     c0015204 <gpFault(regs*, void*)+0x24>
c00151ff:	83 c4 08             	add    esp,0x8
c0015202:	5b                   	pop    ebx
c0015203:	c3                   	ret    
c0015204:	83 ec 0c             	sub    esp,0xc
c0015207:	68 45 bd 02 c0       	push   0xc002bd45
c001520c:	e8 4e dc ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0015211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015214:	e8 c5 fa ff ff       	call   c0014cde <displayDebugInfo(regs*)>

c0015219 <pgFault(regs*, void*)>:
c0015219:	83 ec 14             	sub    esp,0x14
c001521c:	0f 20 d0             	mov    eax,cr2
c001521f:	50                   	push   eax
c0015220:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015225:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015228:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001522e:	e8 49 d8 ff ff       	call   c0012a7c <VAS::tryLoadBackOffDisk(unsigned long)>
c0015233:	83 c4 10             	add    esp,0x10
c0015236:	84 c0                	test   al,al
c0015238:	74 04                	je     c001523e <pgFault(regs*, void*)+0x25>
c001523a:	83 c4 0c             	add    esp,0xc
c001523d:	c3                   	ret    
c001523e:	83 ec 0c             	sub    esp,0xc
c0015241:	68 60 bd 02 c0       	push   0xc002bd60
c0015246:	e8 14 dc ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001524b:	58                   	pop    eax
c001524c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015250:	e8 89 fa ff ff       	call   c0014cde <displayDebugInfo(regs*)>

c0015255 <otherISRHandler(regs*, void*)>:
c0015255:	53                   	push   ebx
c0015256:	83 ec 0c             	sub    esp,0xc
c0015259:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001525d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0015260:	50                   	push   eax
c0015261:	50                   	push   eax
c0015262:	68 6d bd 02 c0       	push   0xc002bd6d
c0015267:	e8 f3 db ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001526c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001526f:	e8 6a fa ff ff       	call   c0014cde <displayDebugInfo(regs*)>

c0015274 <opcodeFault(regs*, void*)>:
c0015274:	55                   	push   ebp
c0015275:	89 e5                	mov    ebp,esp
c0015277:	56                   	push   esi
c0015278:	53                   	push   ebx
c0015279:	83 ec 40             	sub    esp,0x40
c001527c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015281:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015287:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c001528d:	84 c0                	test   al,al
c001528f:	74 24                	je     c00152b5 <opcodeFault(regs*, void*)+0x41>
c0015291:	83 ec 0c             	sub    esp,0xc
c0015294:	68 8c bd 02 c0       	push   0xc002bd8c
c0015299:	e8 c1 db ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a7:	8d 50 19             	lea    edx,[eax+0x19]
c00152aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b0:	e9 d5 05 00 00       	jmp    c001588a <opcodeFault(regs*, void*)+0x616>
c00152b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152be:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152c2:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d2:	8a 00                	mov    al,BYTE PTR [eax]
c00152d4:	3c f0                	cmp    al,0xf0
c00152d6:	75 17                	jne    c00152ef <opcodeFault(regs*, void*)+0x7b>
c00152d8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152de:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e1:	8d 50 01             	lea    edx,[eax+0x1]
c00152e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152ea:	e9 da 00 00 00       	jmp    c00153c9 <opcodeFault(regs*, void*)+0x155>
c00152ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f2:	8a 00                	mov    al,BYTE PTR [eax]
c00152f4:	3c f2                	cmp    al,0xf2
c00152f6:	74 09                	je     c0015301 <opcodeFault(regs*, void*)+0x8d>
c00152f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152fb:	8a 00                	mov    al,BYTE PTR [eax]
c00152fd:	3c f3                	cmp    al,0xf3
c00152ff:	75 1b                	jne    c001531c <opcodeFault(regs*, void*)+0xa8>
c0015301:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015305:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001530b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001530e:	8d 50 01             	lea    edx,[eax+0x1]
c0015311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015314:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015317:	e9 ad 00 00 00       	jmp    c00153c9 <opcodeFault(regs*, void*)+0x155>
c001531c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001531f:	8a 00                	mov    al,BYTE PTR [eax]
c0015321:	3c 66                	cmp    al,0x66
c0015323:	75 1f                	jne    c0015344 <opcodeFault(regs*, void*)+0xd0>
c0015325:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015329:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001532d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015333:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015336:	8d 50 01             	lea    edx,[eax+0x1]
c0015339:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001533c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001533f:	e9 85 00 00 00       	jmp    c00153c9 <opcodeFault(regs*, void*)+0x155>
c0015344:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015347:	8a 00                	mov    al,BYTE PTR [eax]
c0015349:	3c 67                	cmp    al,0x67
c001534b:	75 18                	jne    c0015365 <opcodeFault(regs*, void*)+0xf1>
c001534d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015351:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015357:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001535a:	8d 50 01             	lea    edx,[eax+0x1]
c001535d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015360:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015363:	eb 64                	jmp    c00153c9 <opcodeFault(regs*, void*)+0x155>
c0015365:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015368:	8a 00                	mov    al,BYTE PTR [eax]
c001536a:	3c 2e                	cmp    al,0x2e
c001536c:	74 09                	je     c0015377 <opcodeFault(regs*, void*)+0x103>
c001536e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015371:	8a 00                	mov    al,BYTE PTR [eax]
c0015373:	3c 3e                	cmp    al,0x3e
c0015375:	75 18                	jne    c001538f <opcodeFault(regs*, void*)+0x11b>
c0015377:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001537b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001537e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015381:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015384:	8d 50 01             	lea    edx,[eax+0x1]
c0015387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001538a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001538d:	eb 3a                	jmp    c00153c9 <opcodeFault(regs*, void*)+0x155>
c001538f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015392:	8a 00                	mov    al,BYTE PTR [eax]
c0015394:	3c 36                	cmp    al,0x36
c0015396:	74 1b                	je     c00153b3 <opcodeFault(regs*, void*)+0x13f>
c0015398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001539b:	8a 00                	mov    al,BYTE PTR [eax]
c001539d:	3c 26                	cmp    al,0x26
c001539f:	74 12                	je     c00153b3 <opcodeFault(regs*, void*)+0x13f>
c00153a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153a4:	8a 00                	mov    al,BYTE PTR [eax]
c00153a6:	3c 64                	cmp    al,0x64
c00153a8:	74 09                	je     c00153b3 <opcodeFault(regs*, void*)+0x13f>
c00153aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153ad:	8a 00                	mov    al,BYTE PTR [eax]
c00153af:	3c 65                	cmp    al,0x65
c00153b1:	75 16                	jne    c00153c9 <opcodeFault(regs*, void*)+0x155>
c00153b3:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153b7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153c0:	8d 50 01             	lea    edx,[eax+0x1]
c00153c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cc:	8a 00                	mov    al,BYTE PTR [eax]
c00153ce:	3c 0f                	cmp    al,0xf
c00153d0:	0f 85 ad 00 00 00    	jne    c0015483 <opcodeFault(regs*, void*)+0x20f>
c00153d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153d9:	40                   	inc    eax
c00153da:	8a 00                	mov    al,BYTE PTR [eax]
c00153dc:	3c c2                	cmp    al,0xc2
c00153de:	74 0e                	je     c00153ee <opcodeFault(regs*, void*)+0x17a>
c00153e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e3:	40                   	inc    eax
c00153e4:	8a 00                	mov    al,BYTE PTR [eax]
c00153e6:	3c c3                	cmp    al,0xc3
c00153e8:	0f 85 95 00 00 00    	jne    c0015483 <opcodeFault(regs*, void*)+0x20f>
c00153ee:	83 ec 0c             	sub    esp,0xc
c00153f1:	68 af bd 02 c0       	push   0xc002bdaf
c00153f6:	e8 64 da ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00153fb:	83 c4 10             	add    esp,0x10
c00153fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015401:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015404:	8d 50 01             	lea    edx,[eax+0x1]
c0015407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001540a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001540d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015410:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015413:	8a 00                	mov    al,BYTE PTR [eax]
c0015415:	8d 50 fe             	lea    edx,[eax-0x2]
c0015418:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541b:	88 10                	mov    BYTE PTR [eax],dl
c001541d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015420:	50                   	push   eax
c0015421:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015424:	50                   	push   eax
c0015425:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015428:	50                   	push   eax
c0015429:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001542c:	e8 95 4b 00 00       	call   c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015431:	83 c4 10             	add    esp,0x10
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001543a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001543d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015440:	01 d0                	add    eax,edx
c0015442:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015448:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001544b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001544e:	48                   	dec    eax
c001544f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0015452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015455:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015458:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001545b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545e:	83 ec 04             	sub    esp,0x4
c0015461:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015464:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015467:	50                   	push   eax
c0015468:	e8 47 ad fe ff       	call   c00001b4 <voodooXADD>
c001546d:	83 c4 10             	add    esp,0x10
c0015470:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015473:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015476:	01 c2                	add    edx,eax
c0015478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001547b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001547e:	e9 07 04 00 00       	jmp    c001588a <opcodeFault(regs*, void*)+0x616>
c0015483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015486:	8a 00                	mov    al,BYTE PTR [eax]
c0015488:	3c 0f                	cmp    al,0xf
c001548a:	0f 85 8b 01 00 00    	jne    c001561b <opcodeFault(regs*, void*)+0x3a7>
c0015490:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015493:	40                   	inc    eax
c0015494:	8a 00                	mov    al,BYTE PTR [eax]
c0015496:	3c c7                	cmp    al,0xc7
c0015498:	0f 86 7d 01 00 00    	jbe    c001561b <opcodeFault(regs*, void*)+0x3a7>
c001549e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154a1:	40                   	inc    eax
c00154a2:	8a 00                	mov    al,BYTE PTR [eax]
c00154a4:	3c cf                	cmp    al,0xcf
c00154a6:	0f 87 6f 01 00 00    	ja     c001561b <opcodeFault(regs*, void*)+0x3a7>
c00154ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154af:	40                   	inc    eax
c00154b0:	8a 00                	mov    al,BYTE PTR [eax]
c00154b2:	83 c0 38             	add    eax,0x38
c00154b5:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154b8:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154bc:	75 0b                	jne    c00154c9 <opcodeFault(regs*, void*)+0x255>
c00154be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154c4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c7:	eb 75                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c00154c9:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154cd:	75 0b                	jne    c00154da <opcodeFault(regs*, void*)+0x266>
c00154cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154d5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d8:	eb 64                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c00154da:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154de:	75 0b                	jne    c00154eb <opcodeFault(regs*, void*)+0x277>
c00154e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e3:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e9:	eb 53                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c00154eb:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154ef:	75 0b                	jne    c00154fc <opcodeFault(regs*, void*)+0x288>
c00154f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154fa:	eb 42                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c00154fc:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015500:	75 0b                	jne    c001550d <opcodeFault(regs*, void*)+0x299>
c0015502:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015505:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015508:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001550b:	eb 31                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c001550d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015511:	75 0b                	jne    c001551e <opcodeFault(regs*, void*)+0x2aa>
c0015513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015516:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015519:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001551c:	eb 20                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c001551e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015522:	75 0b                	jne    c001552f <opcodeFault(regs*, void*)+0x2bb>
c0015524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015527:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001552a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001552d:	eb 0f                	jmp    c001553e <opcodeFault(regs*, void*)+0x2ca>
c001552f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015533:	75 09                	jne    c001553e <opcodeFault(regs*, void*)+0x2ca>
c0015535:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001553b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001553e:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015542:	74 10                	je     c0015554 <opcodeFault(regs*, void*)+0x2e0>
c0015544:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001554b:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0015552:	eb 2d                	jmp    c0015581 <opcodeFault(regs*, void*)+0x30d>
c0015554:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015557:	c1 e0 18             	shl    eax,0x18
c001555a:	89 c2                	mov    edx,eax
c001555c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001555f:	c1 e0 08             	shl    eax,0x8
c0015562:	25 00 00 ff 00       	and    eax,0xff0000
c0015567:	09 c2                	or     edx,eax
c0015569:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001556c:	c1 e8 08             	shr    eax,0x8
c001556f:	25 00 ff 00 00       	and    eax,0xff00
c0015574:	09 c2                	or     edx,eax
c0015576:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015579:	c1 e8 18             	shr    eax,0x18
c001557c:	09 d0                	or     eax,edx
c001557e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015581:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015585:	75 0b                	jne    c0015592 <opcodeFault(regs*, void*)+0x31e>
c0015587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001558a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001558d:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015590:	eb 75                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c0015592:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015596:	75 0b                	jne    c00155a3 <opcodeFault(regs*, void*)+0x32f>
c0015598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001559b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001559e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00155a1:	eb 64                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155a3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00155a7:	75 0b                	jne    c00155b4 <opcodeFault(regs*, void*)+0x340>
c00155a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ac:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155af:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00155b2:	eb 53                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155b4:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155b8:	75 0b                	jne    c00155c5 <opcodeFault(regs*, void*)+0x351>
c00155ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155c0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155c3:	eb 42                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155c5:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155c9:	75 0b                	jne    c00155d6 <opcodeFault(regs*, void*)+0x362>
c00155cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155d1:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155d4:	eb 31                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155d6:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155da:	75 0b                	jne    c00155e7 <opcodeFault(regs*, void*)+0x373>
c00155dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155df:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155e5:	eb 20                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155e7:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155eb:	75 0b                	jne    c00155f8 <opcodeFault(regs*, void*)+0x384>
c00155ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155f3:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155f6:	eb 0f                	jmp    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155f8:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155fc:	75 09                	jne    c0015607 <opcodeFault(regs*, void*)+0x393>
c00155fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015601:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015604:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001560a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001560d:	8d 50 02             	lea    edx,[eax+0x2]
c0015610:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015613:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015616:	e9 6f 02 00 00       	jmp    c001588a <opcodeFault(regs*, void*)+0x616>
c001561b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001561e:	8a 00                	mov    al,BYTE PTR [eax]
c0015620:	3c 0f                	cmp    al,0xf
c0015622:	0f 85 8d 01 00 00    	jne    c00157b5 <opcodeFault(regs*, void*)+0x541>
c0015628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001562b:	40                   	inc    eax
c001562c:	8a 00                	mov    al,BYTE PTR [eax]
c001562e:	3c c7                	cmp    al,0xc7
c0015630:	0f 85 7f 01 00 00    	jne    c00157b5 <opcodeFault(regs*, void*)+0x541>
c0015636:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015639:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001563f:	8d 50 01             	lea    edx,[eax+0x1]
c0015642:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015645:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015648:	8d 45 ba             	lea    eax,[ebp-0x46]
c001564b:	50                   	push   eax
c001564c:	8d 45 bb             	lea    eax,[ebp-0x45]
c001564f:	50                   	push   eax
c0015650:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015653:	50                   	push   eax
c0015654:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015657:	e8 6a 49 00 00       	call   c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001565c:	83 c4 10             	add    esp,0x10
c001565f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015662:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015665:	83 f0 01             	xor    eax,0x1
c0015668:	84 c0                	test   al,al
c001566a:	0f 84 45 01 00 00    	je     c00157b5 <opcodeFault(regs*, void*)+0x541>
c0015670:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015673:	3c 01                	cmp    al,0x1
c0015675:	0f 85 3a 01 00 00    	jne    c00157b5 <opcodeFault(regs*, void*)+0x541>
c001567b:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001567e:	83 f0 01             	xor    eax,0x1
c0015681:	84 c0                	test   al,al
c0015683:	0f 84 2c 01 00 00    	je     c00157b5 <opcodeFault(regs*, void*)+0x541>
c0015689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001568f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015692:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015699:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001569c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001569f:	89 c2                	mov    edx,eax
c00156a1:	b8 00 00 00 00       	mov    eax,0x0
c00156a6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00156a9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00156ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156af:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00156b2:	ba 00 00 00 00       	mov    edx,0x0
c00156b7:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156ba:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156c3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156c6:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156cd:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156d0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156d3:	89 c2                	mov    edx,eax
c00156d5:	b8 00 00 00 00       	mov    eax,0x0
c00156da:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156dd:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156e6:	ba 00 00 00 00       	mov    edx,0x0
c00156eb:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156ee:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156f1:	fa                   	cli    
c00156f2:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c00156f7:	40                   	inc    eax
c00156f8:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c00156fd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015700:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015703:	8b 00                	mov    eax,DWORD PTR [eax]
c0015705:	89 c1                	mov    ecx,eax
c0015707:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001570a:	89 cb                	mov    ebx,ecx
c001570c:	89 d0                	mov    eax,edx
c001570e:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015711:	89 c6                	mov    esi,eax
c0015713:	89 f0                	mov    eax,esi
c0015715:	09 d8                	or     eax,ebx
c0015717:	85 c0                	test   eax,eax
c0015719:	75 21                	jne    c001573c <opcodeFault(regs*, void*)+0x4c8>
c001571b:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c001571e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015721:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015724:	89 01                	mov    DWORD PTR [ecx],eax
c0015726:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001572f:	83 c8 40             	or     eax,0x40
c0015732:	89 c2                	mov    edx,eax
c0015734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015737:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001573a:	eb 3e                	jmp    c001577a <opcodeFault(regs*, void*)+0x506>
c001573c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001573f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015742:	8b 00                	mov    eax,DWORD PTR [eax]
c0015744:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015747:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001574a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001574d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015750:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015753:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015756:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015759:	89 d0                	mov    eax,edx
c001575b:	31 d2                	xor    edx,edx
c001575d:	89 c3                	mov    ebx,eax
c001575f:	89 d6                	mov    esi,edx
c0015761:	89 da                	mov    edx,ebx
c0015763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015766:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001576f:	83 e0 bf             	and    eax,0xffffffbf
c0015772:	89 c2                	mov    edx,eax
c0015774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015777:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001577a:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001577f:	48                   	dec    eax
c0015780:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015785:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001578a:	85 c0                	test   eax,eax
c001578c:	75 01                	jne    c001578f <opcodeFault(regs*, void*)+0x51b>
c001578e:	fb                   	sti    
c001578f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015792:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015795:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015798:	01 c2                	add    edx,eax
c001579a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001579d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00157a0:	83 ec 0c             	sub    esp,0xc
c00157a3:	68 be bd 02 c0       	push   0xc002bdbe
c00157a8:	e8 b2 d6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00157ad:	83 c4 10             	add    esp,0x10
c00157b0:	e9 d5 00 00 00       	jmp    c001588a <opcodeFault(regs*, void*)+0x616>
c00157b5:	83 ec 0c             	sub    esp,0xc
c00157b8:	68 d1 bd 02 c0       	push   0xc002bdd1
c00157bd:	e8 9d d6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00157c2:	83 c4 10             	add    esp,0x10
c00157c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157c8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157d1:	c1 e0 04             	shl    eax,0x4
c00157d4:	01 d0                	add    eax,edx
c00157d6:	83 c0 03             	add    eax,0x3
c00157d9:	8a 00                	mov    al,BYTE PTR [eax]
c00157db:	0f b6 d8             	movzx  ebx,al
c00157de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ea:	c1 e0 04             	shl    eax,0x4
c00157ed:	01 d0                	add    eax,edx
c00157ef:	83 c0 02             	add    eax,0x2
c00157f2:	8a 00                	mov    al,BYTE PTR [eax]
c00157f4:	0f b6 c8             	movzx  ecx,al
c00157f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015800:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015803:	c1 e0 04             	shl    eax,0x4
c0015806:	01 d0                	add    eax,edx
c0015808:	40                   	inc    eax
c0015809:	8a 00                	mov    al,BYTE PTR [eax]
c001580b:	0f b6 d0             	movzx  edx,al
c001580e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015811:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015817:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001581a:	c1 e0 04             	shl    eax,0x4
c001581d:	01 f0                	add    eax,esi
c001581f:	8a 00                	mov    al,BYTE PTR [eax]
c0015821:	0f b6 c0             	movzx  eax,al
c0015824:	83 ec 0c             	sub    esp,0xc
c0015827:	53                   	push   ebx
c0015828:	51                   	push   ecx
c0015829:	52                   	push   edx
c001582a:	50                   	push   eax
c001582b:	68 e4 bd 02 c0       	push   0xc002bde4
c0015830:	e8 2a d6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0015835:	83 c4 20             	add    esp,0x20
c0015838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001583b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001583e:	83 c0 03             	add    eax,0x3
c0015841:	8a 00                	mov    al,BYTE PTR [eax]
c0015843:	0f b6 d8             	movzx  ebx,al
c0015846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015849:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001584c:	83 c0 02             	add    eax,0x2
c001584f:	8a 00                	mov    al,BYTE PTR [eax]
c0015851:	0f b6 c8             	movzx  ecx,al
c0015854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015857:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001585a:	40                   	inc    eax
c001585b:	8a 00                	mov    al,BYTE PTR [eax]
c001585d:	0f b6 d0             	movzx  edx,al
c0015860:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015863:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015866:	8a 00                	mov    al,BYTE PTR [eax]
c0015868:	0f b6 c0             	movzx  eax,al
c001586b:	83 ec 0c             	sub    esp,0xc
c001586e:	53                   	push   ebx
c001586f:	51                   	push   ecx
c0015870:	52                   	push   edx
c0015871:	50                   	push   eax
c0015872:	68 0c be 02 c0       	push   0xc002be0c
c0015877:	e8 e3 d5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001587c:	83 c4 20             	add    esp,0x20
c001587f:	83 ec 0c             	sub    esp,0xc
c0015882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015885:	e8 54 f4 ff ff       	call   c0014cde <displayDebugInfo(regs*)>
c001588a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001588d:	5b                   	pop    ebx
c001588e:	5e                   	pop    esi
c001588f:	5d                   	pop    ebp
c0015890:	c3                   	ret    

c0015891 <displayProgramFault(char const*)>:
c0015891:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015896:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015899:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001589f:	85 c0                	test   eax,eax
c00158a1:	74 15                	je     c00158b8 <displayProgramFault(char const*)+0x27>
c00158a3:	83 ec 0c             	sub    esp,0xc
c00158a6:	6a 04                	push   0x4
c00158a8:	6a 0f                	push   0xf
c00158aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00158ae:	50                   	push   eax
c00158af:	e8 9c b4 ff ff       	call   c0010d50 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00158b4:	83 c4 1c             	add    esp,0x1c
c00158b7:	c3                   	ret    
c00158b8:	c3                   	ret    

c00158b9 <setupInterruptController()>:
c00158b9:	55                   	push   ebp
c00158ba:	89 e5                	mov    ebp,esp
c00158bc:	53                   	push   ebx
c00158bd:	83 ec 24             	sub    esp,0x24
c00158c0:	b8 00 00 00 00       	mov    eax,0x0
c00158c5:	85 c0                	test   eax,eax
c00158c7:	0f 95 c0             	setne  al
c00158ca:	84 c0                	test   al,al
c00158cc:	74 5b                	je     c0015929 <setupInterruptController()+0x70>
c00158ce:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158d5:	83 ec 0c             	sub    esp,0xc
c00158d8:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158db:	e8 d4 9f ff ff       	call   c000f8b4 <malloc>
c00158e0:	83 c4 10             	add    esp,0x10
c00158e3:	89 c3                	mov    ebx,eax
c00158e5:	83 ec 0c             	sub    esp,0xc
c00158e8:	53                   	push   ebx
c00158e9:	e8 9c 0c 01 00       	call   c002658a <APIC::APIC()>
c00158ee:	83 c4 10             	add    esp,0x10
c00158f1:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158f4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00158fc:	83 c0 08             	add    eax,0x8
c00158ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015901:	6a 00                	push   0x0
c0015903:	6a 00                	push   0x0
c0015905:	6a 00                	push   0x0
c0015907:	52                   	push   edx
c0015908:	ff d0                	call   eax
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015912:	83 ec 08             	sub    esp,0x8
c0015915:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015918:	50                   	push   eax
c0015919:	e8 62 e9 ff ff       	call   c0014280 <Device::addChild(Device*)>
c001591e:	83 c4 10             	add    esp,0x10
c0015921:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015924:	e9 89 03 00 00       	jmp    c0015cb2 <setupInterruptController()+0x3f9>
c0015929:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c001592e:	84 c0                	test   al,al
c0015930:	75 24                	jne    c0015956 <setupInterruptController()+0x9d>
c0015932:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015937:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001593d:	83 e2 fe             	and    edx,0xfffffffe
c0015940:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015946:	83 ec 0c             	sub    esp,0xc
c0015949:	68 31 be 02 c0       	push   0xc002be31
c001594e:	e8 0c d5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0015953:	83 c4 10             	add    esp,0x10
c0015956:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001595b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015961:	83 e0 01             	and    eax,0x1
c0015964:	84 c0                	test   al,al
c0015966:	0f 95 c0             	setne  al
c0015969:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001596c:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015973:	83 ec 0c             	sub    esp,0xc
c0015976:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015979:	e8 36 9f ff ff       	call   c000f8b4 <malloc>
c001597e:	83 c4 10             	add    esp,0x10
c0015981:	89 c3                	mov    ebx,eax
c0015983:	83 ec 0c             	sub    esp,0xc
c0015986:	53                   	push   ebx
c0015987:	e8 56 11 01 00       	call   c0026ae2 <PIC::PIC()>
c001598c:	83 c4 10             	add    esp,0x10
c001598f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015992:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015995:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015998:	8b 00                	mov    eax,DWORD PTR [eax]
c001599a:	83 c0 08             	add    eax,0x8
c001599d:	8b 00                	mov    eax,DWORD PTR [eax]
c001599f:	6a 00                	push   0x0
c00159a1:	6a 00                	push   0x0
c00159a3:	6a 00                	push   0x0
c00159a5:	52                   	push   edx
c00159a6:	ff d0                	call   eax
c00159a8:	83 c4 10             	add    esp,0x10
c00159ab:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00159af:	74 73                	je     c0015a24 <setupInterruptController()+0x16b>
c00159b1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00159b9:	83 c0 0c             	add    eax,0xc
c00159bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00159be:	6a 00                	push   0x0
c00159c0:	6a 00                	push   0x0
c00159c2:	6a 00                	push   0x0
c00159c4:	52                   	push   edx
c00159c5:	ff d0                	call   eax
c00159c7:	83 c4 10             	add    esp,0x10
c00159ca:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159ce:	74 15                	je     c00159e5 <setupInterruptController()+0x12c>
c00159d0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00159d5:	83 c0 04             	add    eax,0x4
c00159d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00159da:	83 ec 0c             	sub    esp,0xc
c00159dd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159e0:	ff d0                	call   eax
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159ec:	83 ec 0c             	sub    esp,0xc
c00159ef:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159f2:	e8 bd 9e ff ff       	call   c000f8b4 <malloc>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	89 c3                	mov    ebx,eax
c00159fc:	83 ec 0c             	sub    esp,0xc
c00159ff:	53                   	push   ebx
c0015a00:	e8 85 0b 01 00       	call   c002658a <APIC::APIC()>
c0015a05:	83 c4 10             	add    esp,0x10
c0015a08:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a0b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015a0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a11:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a13:	83 c0 08             	add    eax,0x8
c0015a16:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a18:	6a 00                	push   0x0
c0015a1a:	6a 00                	push   0x0
c0015a1c:	6a 00                	push   0x0
c0015a1e:	52                   	push   edx
c0015a1f:	ff d0                	call   eax
c0015a21:	83 c4 10             	add    esp,0x10
c0015a24:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0015a29:	83 ec 08             	sub    esp,0x8
c0015a2c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a2f:	50                   	push   eax
c0015a30:	e8 4b e8 ff ff       	call   c0014280 <Device::addChild(Device*)>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	c7 05 68 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f468,0x0
c0015a42:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a47:	83 c0 24             	add    eax,0x24
c0015a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4c:	6a 00                	push   0x0
c0015a4e:	68 55 52 01 c0       	push   0xc0015255
c0015a53:	6a 00                	push   0x0
c0015a55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a58:	ff d0                	call   eax
c0015a5a:	83 c4 10             	add    esp,0x10
c0015a5d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a62:	83 c0 24             	add    eax,0x24
c0015a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a67:	6a 00                	push   0x0
c0015a69:	68 55 52 01 c0       	push   0xc0015255
c0015a6e:	6a 01                	push   0x1
c0015a70:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a73:	ff d0                	call   eax
c0015a75:	83 c4 10             	add    esp,0x10
c0015a78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a7d:	83 c0 24             	add    eax,0x24
c0015a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a82:	6a 00                	push   0x0
c0015a84:	68 3b 4b 01 c0       	push   0xc0014b3b
c0015a89:	6a 02                	push   0x2
c0015a8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a8e:	ff d0                	call   eax
c0015a90:	83 c4 10             	add    esp,0x10
c0015a93:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a96:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a98:	83 c0 24             	add    eax,0x24
c0015a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9d:	6a 00                	push   0x0
c0015a9f:	68 55 52 01 c0       	push   0xc0015255
c0015aa4:	6a 03                	push   0x3
c0015aa6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aa9:	ff d0                	call   eax
c0015aab:	83 c4 10             	add    esp,0x10
c0015aae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab3:	83 c0 24             	add    eax,0x24
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	6a 00                	push   0x0
c0015aba:	68 55 52 01 c0       	push   0xc0015255
c0015abf:	6a 04                	push   0x4
c0015ac1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac4:	ff d0                	call   eax
c0015ac6:	83 c4 10             	add    esp,0x10
c0015ac9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015acc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ace:	83 c0 24             	add    eax,0x24
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	6a 00                	push   0x0
c0015ad5:	68 55 52 01 c0       	push   0xc0015255
c0015ada:	6a 05                	push   0x5
c0015adc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015adf:	ff d0                	call   eax
c0015ae1:	83 c4 10             	add    esp,0x10
c0015ae4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ae7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae9:	83 c0 24             	add    eax,0x24
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	6a 00                	push   0x0
c0015af0:	68 74 52 01 c0       	push   0xc0015274
c0015af5:	6a 06                	push   0x6
c0015af7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015afa:	ff d0                	call   eax
c0015afc:	83 c4 10             	add    esp,0x10
c0015aff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b04:	83 c0 24             	add    eax,0x24
c0015b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b09:	6a 00                	push   0x0
c0015b0b:	68 6d 51 01 c0       	push   0xc001516d
c0015b10:	6a 07                	push   0x7
c0015b12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b15:	ff d0                	call   eax
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	83 c0 24             	add    eax,0x24
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	6a 00                	push   0x0
c0015b26:	68 56 49 01 c0       	push   0xc0014956
c0015b2b:	6a 08                	push   0x8
c0015b2d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b30:	ff d0                	call   eax
c0015b32:	83 c4 10             	add    esp,0x10
c0015b35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3a:	83 c0 24             	add    eax,0x24
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	6a 00                	push   0x0
c0015b41:	68 55 52 01 c0       	push   0xc0015255
c0015b46:	6a 09                	push   0x9
c0015b48:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b4b:	ff d0                	call   eax
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b53:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b55:	83 c0 24             	add    eax,0x24
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	6a 00                	push   0x0
c0015b5c:	68 55 52 01 c0       	push   0xc0015255
c0015b61:	6a 0a                	push   0xa
c0015b63:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b66:	ff d0                	call   eax
c0015b68:	83 c4 10             	add    esp,0x10
c0015b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b70:	83 c0 24             	add    eax,0x24
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	6a 00                	push   0x0
c0015b77:	68 55 52 01 c0       	push   0xc0015255
c0015b7c:	6a 0b                	push   0xb
c0015b7e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b81:	ff d0                	call   eax
c0015b83:	83 c4 10             	add    esp,0x10
c0015b86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b8b:	83 c0 24             	add    eax,0x24
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	6a 00                	push   0x0
c0015b92:	68 55 52 01 c0       	push   0xc0015255
c0015b97:	6a 0c                	push   0xc
c0015b99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b9c:	ff d0                	call   eax
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ba6:	83 c0 24             	add    eax,0x24
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	6a 00                	push   0x0
c0015bad:	68 e0 51 01 c0       	push   0xc00151e0
c0015bb2:	6a 0d                	push   0xd
c0015bb4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bb7:	ff d0                	call   eax
c0015bb9:	83 c4 10             	add    esp,0x10
c0015bbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bbf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc1:	83 c0 24             	add    eax,0x24
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	6a 00                	push   0x0
c0015bc8:	68 19 52 01 c0       	push   0xc0015219
c0015bcd:	6a 0e                	push   0xe
c0015bcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd2:	ff d0                	call   eax
c0015bd4:	83 c4 10             	add    esp,0x10
c0015bd7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bdc:	83 c0 24             	add    eax,0x24
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	6a 00                	push   0x0
c0015be3:	68 55 52 01 c0       	push   0xc0015255
c0015be8:	6a 0f                	push   0xf
c0015bea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bed:	ff d0                	call   eax
c0015bef:	83 c4 10             	add    esp,0x10
c0015bf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf7:	83 c0 24             	add    eax,0x24
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	6a 00                	push   0x0
c0015bfe:	68 55 52 01 c0       	push   0xc0015255
c0015c03:	6a 10                	push   0x10
c0015c05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c08:	ff d0                	call   eax
c0015c0a:	83 c4 10             	add    esp,0x10
c0015c0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c12:	83 c0 24             	add    eax,0x24
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	6a 00                	push   0x0
c0015c19:	68 55 52 01 c0       	push   0xc0015255
c0015c1e:	6a 11                	push   0x11
c0015c20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c23:	ff d0                	call   eax
c0015c25:	83 c4 10             	add    esp,0x10
c0015c28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c2d:	83 c0 24             	add    eax,0x24
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	6a 00                	push   0x0
c0015c34:	68 55 52 01 c0       	push   0xc0015255
c0015c39:	6a 12                	push   0x12
c0015c3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c3e:	ff d0                	call   eax
c0015c40:	83 c4 10             	add    esp,0x10
c0015c43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c46:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c48:	83 c0 24             	add    eax,0x24
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	6a 00                	push   0x0
c0015c4f:	68 55 52 01 c0       	push   0xc0015255
c0015c54:	6a 13                	push   0x13
c0015c56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c59:	ff d0                	call   eax
c0015c5b:	83 c4 10             	add    esp,0x10
c0015c5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c61:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c63:	83 c0 24             	add    eax,0x24
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	6a 00                	push   0x0
c0015c6a:	68 55 52 01 c0       	push   0xc0015255
c0015c6f:	6a 14                	push   0x14
c0015c71:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c74:	ff d0                	call   eax
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c7c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c7e:	83 c0 24             	add    eax,0x24
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	6a 00                	push   0x0
c0015c85:	68 55 52 01 c0       	push   0xc0015255
c0015c8a:	6a 1e                	push   0x1e
c0015c8c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c8f:	ff d0                	call   eax
c0015c91:	83 c4 10             	add    esp,0x10
c0015c94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c97:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c99:	83 c0 24             	add    eax,0x24
c0015c9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c9e:	6a 00                	push   0x0
c0015ca0:	68 f2 cc 01 c0       	push   0xc001ccf2
c0015ca5:	6a 60                	push   0x60
c0015ca7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015caa:	ff d0                	call   eax
c0015cac:	83 c4 10             	add    esp,0x10
c0015caf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cb2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015cb5:	c9                   	leave  
c0015cb6:	c3                   	ret    
c0015cb7:	90                   	nop

c0015cb8 <InterruptController::convertLegacyIRQNumber(int)>:
c0015cb8:	55                   	push   ebp
c0015cb9:	89 e5                	mov    ebp,esp
c0015cbb:	83 ec 08             	sub    esp,0x8
c0015cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cc1:	83 ec 0c             	sub    esp,0xc
c0015cc4:	50                   	push   eax
c0015cc5:	e8 a2 e8 ff ff       	call   c001456c <Device::getName()>
c0015cca:	83 c4 10             	add    esp,0x10
c0015ccd:	8a 00                	mov    al,BYTE PTR [eax]
c0015ccf:	3c 41                	cmp    al,0x41
c0015cd1:	0f 94 c0             	sete   al
c0015cd4:	84 c0                	test   al,al
c0015cd6:	74 28                	je     c0015d00 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cd8:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cdc:	7f 12                	jg     c0015cf0 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ce1:	05 20 e5 02 c0       	add    eax,0xc002e520
c0015ce6:	8a 00                	mov    al,BYTE PTR [eax]
c0015ce8:	0f b6 c0             	movzx  eax,al
c0015ceb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cee:	eb 10                	jmp    c0015d00 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cf0:	83 ec 0c             	sub    esp,0xc
c0015cf3:	68 20 bb 02 c0       	push   0xc002bb20
c0015cf8:	e8 fc 4b 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0015cfd:	83 c4 10             	add    esp,0x10
c0015d00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015d03:	c9                   	leave  
c0015d04:	c3                   	ret    
c0015d05:	90                   	nop

c0015d06 <startGUI(void*)>:
c0015d06:	55                   	push   ebp
c0015d07:	89 e5                	mov    ebp,esp
c0015d09:	53                   	push   ebx
c0015d0a:	83 ec 04             	sub    esp,0x4
c0015d0d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d12:	48                   	dec    eax
c0015d13:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015d18:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d1d:	85 c0                	test   eax,eax
c0015d1f:	75 01                	jne    c0015d22 <startGUI(void*)+0x1c>
c0015d21:	fb                   	sti    
c0015d22:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d28:	83 ec 08             	sub    esp,0x8
c0015d2b:	6a 01                	push   0x1
c0015d2d:	68 94 be 02 c0       	push   0xc002be94
c0015d32:	e8 96 7f 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0015d37:	83 c4 10             	add    esp,0x10
c0015d3a:	83 ec 08             	sub    esp,0x8
c0015d3d:	53                   	push   ebx
c0015d3e:	50                   	push   eax
c0015d3f:	e8 b4 81 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0015d44:	83 c4 10             	add    esp,0x10
c0015d47:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d4d:	83 ec 08             	sub    esp,0x8
c0015d50:	6a 01                	push   0x1
c0015d52:	68 ae be 02 c0       	push   0xc002beae
c0015d57:	e8 71 7f 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0015d5c:	83 c4 10             	add    esp,0x10
c0015d5f:	83 ec 08             	sub    esp,0x8
c0015d62:	53                   	push   ebx
c0015d63:	50                   	push   eax
c0015d64:	e8 8f 81 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0015d69:	83 c4 10             	add    esp,0x10
c0015d6c:	90                   	nop
c0015d6d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d70:	c9                   	leave  
c0015d71:	c3                   	ret    

c0015d72 <startGUIVESA(void*)>:
c0015d72:	55                   	push   ebp
c0015d73:	89 e5                	mov    ebp,esp
c0015d75:	53                   	push   ebx
c0015d76:	83 ec 04             	sub    esp,0x4
c0015d79:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d7e:	48                   	dec    eax
c0015d7f:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015d84:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015d89:	85 c0                	test   eax,eax
c0015d8b:	75 01                	jne    c0015d8e <startGUIVESA(void*)+0x1c>
c0015d8d:	fb                   	sti    
c0015d8e:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015d94:	83 ec 08             	sub    esp,0x8
c0015d97:	6a 01                	push   0x1
c0015d99:	68 c8 be 02 c0       	push   0xc002bec8
c0015d9e:	e8 2a 7f 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0015da3:	83 c4 10             	add    esp,0x10
c0015da6:	83 ec 08             	sub    esp,0x8
c0015da9:	53                   	push   ebx
c0015daa:	50                   	push   eax
c0015dab:	e8 48 81 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0015db0:	83 c4 10             	add    esp,0x10
c0015db3:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0015db9:	83 ec 08             	sub    esp,0x8
c0015dbc:	6a 01                	push   0x1
c0015dbe:	68 ae be 02 c0       	push   0xc002beae
c0015dc3:	e8 05 7f 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0015dc8:	83 c4 10             	add    esp,0x10
c0015dcb:	83 ec 08             	sub    esp,0x8
c0015dce:	53                   	push   ebx
c0015dcf:	50                   	push   eax
c0015dd0:	e8 23 81 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0015dd5:	83 c4 10             	add    esp,0x10
c0015dd8:	90                   	nop
c0015dd9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ddc:	c9                   	leave  
c0015ddd:	c3                   	ret    

c0015dde <sendKeyToTerminal(unsigned char)>:
c0015dde:	55                   	push   ebp
c0015ddf:	89 e5                	mov    ebp,esp
c0015de1:	83 ec 28             	sub    esp,0x28
c0015de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dea:	a1 a4 f3 02 c0       	mov    eax,ds:0xc002f3a4
c0015def:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015df3:	83 ec 08             	sub    esp,0x8
c0015df6:	52                   	push   edx
c0015df7:	50                   	push   eax
c0015df8:	e8 2b b4 ff ff       	call   c0011228 <VgaText::receiveKey(unsigned char)>
c0015dfd:	83 c4 10             	add    esp,0x10
c0015e00:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015e04:	0f 85 8f 00 00 00    	jne    c0015e99 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e0a:	fa                   	cli    
c0015e0b:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015e10:	40                   	inc    eax
c0015e11:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015e16:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015e1b:	40                   	inc    eax
c0015e1c:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0015e21:	a1 80 f4 02 c0       	mov    eax,ds:0xc002f480
c0015e26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e29:	c7 05 80 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f480,0x0
c0015e33:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e37:	74 1f                	je     c0015e58 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e3c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e3f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e42:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e45:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e48:	83 ec 0c             	sub    esp,0xc
c0015e4b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e4e:	e8 1d 8d 00 00       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c0015e53:	83 c4 10             	add    esp,0x10
c0015e56:	eb db                	jmp    c0015e33 <sendKeyToTerminal(unsigned char)+0x55>
c0015e58:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015e5d:	48                   	dec    eax
c0015e5e:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0015e63:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0015e68:	85 c0                	test   eax,eax
c0015e6a:	75 18                	jne    c0015e84 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e6c:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c0015e71:	85 c0                	test   eax,eax
c0015e73:	74 0f                	je     c0015e84 <sendKeyToTerminal(unsigned char)+0xa6>
c0015e75:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c0015e7f:	e8 28 88 00 00       	call   c001e6ac <schedule()>
c0015e84:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015e89:	48                   	dec    eax
c0015e8a:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0015e8f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0015e94:	85 c0                	test   eax,eax
c0015e96:	75 01                	jne    c0015e99 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e98:	fb                   	sti    
c0015e99:	90                   	nop
c0015e9a:	c9                   	leave  
c0015e9b:	c3                   	ret    

c0015e9c <sendKeyboardToken(KeyboardToken)>:
c0015e9c:	55                   	push   ebp
c0015e9d:	89 e5                	mov    ebp,esp
c0015e9f:	83 ec 18             	sub    esp,0x18
c0015ea2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea8:	0f b7 c0             	movzx  eax,ax
c0015eab:	83 f2 01             	xor    edx,0x1
c0015eae:	88 90 a0 f4 02 c0    	mov    BYTE PTR [eax-0x3ffd0b60],dl
c0015eb4:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c0015eb9:	85 c0                	test   eax,eax
c0015ebb:	74 24                	je     c0015ee1 <sendKeyboardToken(KeyboardToken)+0x45>
c0015ebd:	8b 0d 88 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f488
c0015ec3:	83 ec 04             	sub    esp,0x4
c0015ec6:	68 a0 f4 02 c0       	push   0xc002f4a0
c0015ecb:	83 ec 08             	sub    esp,0x8
c0015ece:	89 e2                	mov    edx,esp
c0015ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ed3:	89 02                	mov    DWORD PTR [edx],eax
c0015ed5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ed8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015edc:	ff d1                	call   ecx
c0015ede:	83 c4 10             	add    esp,0x10
c0015ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ee4:	66 3d 03 02          	cmp    ax,0x203
c0015ee8:	75 07                	jne    c0015ef1 <sendKeyboardToken(KeyboardToken)+0x55>
c0015eea:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c0015eef:	84 c0                	test   al,al
c0015ef1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ef5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ef8:	a0 a8 f8 02 c0       	mov    al,ds:0xc002f8a8
c0015efd:	38 c2                	cmp    dl,al
c0015eff:	74 1c                	je     c0015f1d <sendKeyboardToken(KeyboardToken)+0x81>
c0015f01:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f04:	a2 a8 f8 02 c0       	mov    ds:0xc002f8a8,al
c0015f09:	a0 a8 f8 02 c0       	mov    al,ds:0xc002f8a8
c0015f0e:	0f b6 c0             	movzx  eax,al
c0015f11:	83 ec 0c             	sub    esp,0xc
c0015f14:	50                   	push   eax
c0015f15:	e8 96 a6 ff ff       	call   c00105b0 <setTerminalScrollLock(bool)>
c0015f1a:	83 c4 10             	add    esp,0x10
c0015f1d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f20:	84 c0                	test   al,al
c0015f22:	0f 84 ae 00 00 00    	je     c0015fd6 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f2b:	66 3d 10 03          	cmp    ax,0x310
c0015f2f:	75 06                	jne    c0015f37 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f31:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3a:	66 3d 11 03          	cmp    ax,0x311
c0015f3e:	75 06                	jne    c0015f46 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f40:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f49:	66 3d 12 03          	cmp    ax,0x312
c0015f4d:	75 06                	jne    c0015f55 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f4f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f58:	66 3d 13 03          	cmp    ax,0x313
c0015f5c:	75 06                	jne    c0015f64 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f5e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f67:	66 3d 14 03          	cmp    ax,0x314
c0015f6b:	75 06                	jne    c0015f73 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f6d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f76:	66 3d 15 03          	cmp    ax,0x315
c0015f7a:	75 06                	jne    c0015f82 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f7c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f85:	66 3d 16 03          	cmp    ax,0x316
c0015f89:	75 06                	jne    c0015f91 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f8b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f94:	66 3d 17 03          	cmp    ax,0x317
c0015f98:	75 06                	jne    c0015fa0 <sendKeyboardToken(KeyboardToken)+0x104>
c0015f9a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fa3:	66 3d 18 03          	cmp    ax,0x318
c0015fa7:	75 06                	jne    c0015faf <sendKeyboardToken(KeyboardToken)+0x113>
c0015fa9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fb2:	66 3d 19 03          	cmp    ax,0x319
c0015fb6:	75 06                	jne    c0015fbe <sendKeyboardToken(KeyboardToken)+0x122>
c0015fb8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc1:	66 3d 1a 03          	cmp    ax,0x31a
c0015fc5:	0f 85 c9 00 00 00    	jne    c0016094 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fcb:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fd1:	e9 be 00 00 00       	jmp    c0016094 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 10 03          	cmp    ax,0x310
c0015fdd:	75 0a                	jne    c0015fe9 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fdf:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fe5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fec:	66 3d 11 03          	cmp    ax,0x311
c0015ff0:	75 0a                	jne    c0015ffc <sendKeyboardToken(KeyboardToken)+0x160>
c0015ff2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015ff8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ffc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fff:	66 3d 12 03          	cmp    ax,0x312
c0016003:	75 0a                	jne    c001600f <sendKeyboardToken(KeyboardToken)+0x173>
c0016005:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001600b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016012:	66 3d 13 03          	cmp    ax,0x313
c0016016:	75 0a                	jne    c0016022 <sendKeyboardToken(KeyboardToken)+0x186>
c0016018:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c001601e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016025:	66 3d 14 03          	cmp    ax,0x314
c0016029:	75 0a                	jne    c0016035 <sendKeyboardToken(KeyboardToken)+0x199>
c001602b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0016031:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016038:	66 3d 15 03          	cmp    ax,0x315
c001603c:	75 0a                	jne    c0016048 <sendKeyboardToken(KeyboardToken)+0x1ac>
c001603e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016044:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001604b:	66 3d 16 03          	cmp    ax,0x316
c001604f:	75 0a                	jne    c001605b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0016051:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016057:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001605b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605e:	66 3d 17 03          	cmp    ax,0x317
c0016062:	75 0a                	jne    c001606e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0016064:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c001606a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016071:	66 3d 18 03          	cmp    ax,0x318
c0016075:	75 0a                	jne    c0016081 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016077:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001607d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016084:	66 3d 19 03          	cmp    ax,0x319
c0016088:	75 0a                	jne    c0016094 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001608a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016090:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016097:	66 3d 00 02          	cmp    ax,0x200
c001609b:	75 2c                	jne    c00160c9 <sendKeyboardToken(KeyboardToken)+0x22d>
c001609d:	a0 a0 f8 02 c0       	mov    al,ds:0xc002f8a0
c00160a2:	83 f0 01             	xor    eax,0x1
c00160a5:	84 c0                	test   al,al
c00160a7:	74 20                	je     c00160c9 <sendKeyboardToken(KeyboardToken)+0x22d>
c00160a9:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00160ae:	6a 01                	push   0x1
c00160b0:	6a 00                	push   0x0
c00160b2:	68 06 5d 01 c0       	push   0xc0015d06
c00160b7:	50                   	push   eax
c00160b8:	e8 ab 83 00 00       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c00160bd:	83 c4 10             	add    esp,0x10
c00160c0:	c6 05 a0 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8a0,0x1
c00160c7:	eb 33                	jmp    c00160fc <sendKeyboardToken(KeyboardToken)+0x260>
c00160c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160cc:	66 3d 01 02          	cmp    ax,0x201
c00160d0:	75 2a                	jne    c00160fc <sendKeyboardToken(KeyboardToken)+0x260>
c00160d2:	a0 a0 f8 02 c0       	mov    al,ds:0xc002f8a0
c00160d7:	83 f0 01             	xor    eax,0x1
c00160da:	84 c0                	test   al,al
c00160dc:	74 1e                	je     c00160fc <sendKeyboardToken(KeyboardToken)+0x260>
c00160de:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00160e3:	6a 01                	push   0x1
c00160e5:	6a 00                	push   0x0
c00160e7:	68 72 5d 01 c0       	push   0xc0015d72
c00160ec:	50                   	push   eax
c00160ed:	e8 76 83 00 00       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c00160f2:	83 c4 10             	add    esp,0x10
c00160f5:	c6 05 a0 f8 02 c0 01 	mov    BYTE PTR ds:0xc002f8a0,0x1
c00160fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ff:	66 3d 1d 03          	cmp    ax,0x31d
c0016103:	75 06                	jne    c001610b <sendKeyboardToken(KeyboardToken)+0x26f>
c0016105:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001610b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001610e:	66 3d 1c 03          	cmp    ax,0x31c
c0016112:	75 06                	jne    c001611a <sendKeyboardToken(KeyboardToken)+0x27e>
c0016114:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001611a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001611d:	66 3d 1b 03          	cmp    ax,0x31b
c0016121:	75 06                	jne    c0016129 <sendKeyboardToken(KeyboardToken)+0x28d>
c0016123:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001612c:	66 3d 1e 03          	cmp    ax,0x31e
c0016130:	75 06                	jne    c0016138 <sendKeyboardToken(KeyboardToken)+0x29c>
c0016132:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016138:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001613b:	66 3d 1f 03          	cmp    ax,0x31f
c001613f:	75 06                	jne    c0016147 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0016141:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001614a:	66 3d 1a 03          	cmp    ax,0x31a
c001614e:	75 06                	jne    c0016156 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0016150:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016156:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001615a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001615d:	83 f0 01             	xor    eax,0x1
c0016160:	84 c0                	test   al,al
c0016162:	74 77                	je     c00161db <sendKeyboardToken(KeyboardToken)+0x33f>
c0016164:	a0 a1 f5 02 c0       	mov    al,ds:0xc002f5a1
c0016169:	84 c0                	test   al,al
c001616b:	74 41                	je     c00161ae <sendKeyboardToken(KeyboardToken)+0x312>
c001616d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016171:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016175:	74 2b                	je     c00161a2 <sendKeyboardToken(KeyboardToken)+0x306>
c0016177:	8b 15 a4 f8 02 c0    	mov    edx,DWORD PTR ds:0xc002f8a4
c001617d:	89 d0                	mov    eax,edx
c001617f:	c1 e0 02             	shl    eax,0x2
c0016182:	01 d0                	add    eax,edx
c0016184:	01 c0                	add    eax,eax
c0016186:	a3 a4 f8 02 c0       	mov    ds:0xc002f8a4,eax
c001618b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618e:	0f b7 c0             	movzx  eax,ax
c0016191:	8d 50 d0             	lea    edx,[eax-0x30]
c0016194:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c0016199:	01 d0                	add    eax,edx
c001619b:	a3 a4 f8 02 c0       	mov    ds:0xc002f8a4,eax
c00161a0:	eb 6d                	jmp    c001620f <sendKeyboardToken(KeyboardToken)+0x373>
c00161a2:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c00161ac:	eb 61                	jmp    c001620f <sendKeyboardToken(KeyboardToken)+0x373>
c00161ae:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161b3:	85 c0                	test   eax,eax
c00161b5:	74 18                	je     c00161cf <sendKeyboardToken(KeyboardToken)+0x333>
c00161b7:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161bc:	0f b6 c0             	movzx  eax,al
c00161bf:	83 ec 0c             	sub    esp,0xc
c00161c2:	50                   	push   eax
c00161c3:	e8 16 fc ff ff       	call   c0015dde <sendKeyToTerminal(unsigned char)>
c00161c8:	83 c4 10             	add    esp,0x10
c00161cb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161cf:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c00161d9:	eb 34                	jmp    c001620f <sendKeyboardToken(KeyboardToken)+0x373>
c00161db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161de:	66 3d 01 01          	cmp    ax,0x101
c00161e2:	75 2b                	jne    c001620f <sendKeyboardToken(KeyboardToken)+0x373>
c00161e4:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161e9:	85 c0                	test   eax,eax
c00161eb:	74 18                	je     c0016205 <sendKeyboardToken(KeyboardToken)+0x369>
c00161ed:	a1 a4 f8 02 c0       	mov    eax,ds:0xc002f8a4
c00161f2:	0f b6 c0             	movzx  eax,al
c00161f5:	83 ec 0c             	sub    esp,0xc
c00161f8:	50                   	push   eax
c00161f9:	e8 e0 fb ff ff       	call   c0015dde <sendKeyToTerminal(unsigned char)>
c00161fe:	83 c4 10             	add    esp,0x10
c0016201:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016205:	c7 05 a4 f8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f8a4,0x0
c001620f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016212:	83 f0 01             	xor    eax,0x1
c0016215:	84 c0                	test   al,al
c0016217:	74 4c                	je     c0016265 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016219:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001621c:	83 f0 01             	xor    eax,0x1
c001621f:	84 c0                	test   al,al
c0016221:	74 42                	je     c0016265 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016223:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c0016228:	83 f0 01             	xor    eax,0x1
c001622b:	84 c0                	test   al,al
c001622d:	74 36                	je     c0016265 <sendKeyboardToken(KeyboardToken)+0x3c9>
c001622f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016232:	66 83 f8 1f          	cmp    ax,0x1f
c0016236:	76 09                	jbe    c0016241 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001623b:	66 83 f8 7e          	cmp    ax,0x7e
c001623f:	76 12                	jbe    c0016253 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016241:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016244:	66 83 f8 0a          	cmp    ax,0xa
c0016248:	74 09                	je     c0016253 <sendKeyboardToken(KeyboardToken)+0x3b7>
c001624a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001624d:	66 83 f8 08          	cmp    ax,0x8
c0016251:	75 12                	jne    c0016265 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016253:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016256:	0f b6 c0             	movzx  eax,al
c0016259:	83 ec 0c             	sub    esp,0xc
c001625c:	50                   	push   eax
c001625d:	e8 7c fb ff ff       	call   c0015dde <sendKeyToTerminal(unsigned char)>
c0016262:	83 c4 10             	add    esp,0x10
c0016265:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016268:	83 f0 01             	xor    eax,0x1
c001626b:	84 c0                	test   al,al
c001626d:	74 4f                	je     c00162be <sendKeyboardToken(KeyboardToken)+0x422>
c001626f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016272:	83 f0 01             	xor    eax,0x1
c0016275:	84 c0                	test   al,al
c0016277:	74 45                	je     c00162be <sendKeyboardToken(KeyboardToken)+0x422>
c0016279:	a0 a0 f5 02 c0       	mov    al,ds:0xc002f5a0
c001627e:	84 c0                	test   al,al
c0016280:	74 3c                	je     c00162be <sendKeyboardToken(KeyboardToken)+0x422>
c0016282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016285:	66 83 f8 3f          	cmp    ax,0x3f
c0016289:	76 33                	jbe    c00162be <sendKeyboardToken(KeyboardToken)+0x422>
c001628b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001628e:	66 83 f8 7f          	cmp    ax,0x7f
c0016292:	77 2a                	ja     c00162be <sendKeyboardToken(KeyboardToken)+0x422>
c0016294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016297:	88 c2                	mov    dl,al
c0016299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001629c:	66 83 f8 5f          	cmp    ax,0x5f
c00162a0:	76 04                	jbe    c00162a6 <sendKeyboardToken(KeyboardToken)+0x40a>
c00162a2:	b0 20                	mov    al,0x20
c00162a4:	eb 02                	jmp    c00162a8 <sendKeyboardToken(KeyboardToken)+0x40c>
c00162a6:	b0 00                	mov    al,0x0
c00162a8:	29 c2                	sub    edx,eax
c00162aa:	88 d0                	mov    al,dl
c00162ac:	83 e8 40             	sub    eax,0x40
c00162af:	0f b6 c0             	movzx  eax,al
c00162b2:	83 ec 0c             	sub    esp,0xc
c00162b5:	50                   	push   eax
c00162b6:	e8 23 fb ff ff       	call   c0015dde <sendKeyToTerminal(unsigned char)>
c00162bb:	83 c4 10             	add    esp,0x10
c00162be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c1:	66 3d 00 03          	cmp    ax,0x300
c00162c5:	75 0f                	jne    c00162d6 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162c7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ca:	83 f0 01             	xor    eax,0x1
c00162cd:	84 c0                	test   al,al
c00162cf:	74 05                	je     c00162d6 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162d1:	e8 52 aa ff ff       	call   c0010d28 <doTerminalCycle()>
c00162d6:	90                   	nop
c00162d7:	c9                   	leave  
c00162d8:	c3                   	ret    

c00162d9 <clearInternalKeybuffer(VgaText*)>:
c00162d9:	55                   	push   ebp
c00162da:	89 e5                	mov    ebp,esp
c00162dc:	83 ec 08             	sub    esp,0x8
c00162df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e2:	05 98 01 00 00       	add    eax,0x198
c00162e7:	83 ec 0c             	sub    esp,0xc
c00162ea:	50                   	push   eax
c00162eb:	e8 a4 a4 fe ff       	call   c0000794 <strlen>
c00162f0:	83 c4 10             	add    esp,0x10
c00162f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162f6:	81 c2 98 01 00 00    	add    edx,0x198
c00162fc:	83 ec 04             	sub    esp,0x4
c00162ff:	50                   	push   eax
c0016300:	6a 00                	push   0x0
c0016302:	52                   	push   edx
c0016303:	e8 70 a4 fe ff       	call   c0000778 <memset>
c0016308:	83 c4 10             	add    esp,0x10
c001630b:	90                   	nop
c001630c:	c9                   	leave  
c001630d:	c3                   	ret    

c001630e <readKeyboard(VgaText*, char*, unsigned long)>:
c001630e:	55                   	push   ebp
c001630f:	89 e5                	mov    ebp,esp
c0016311:	83 ec 18             	sub    esp,0x18
c0016314:	a1 88 f4 02 c0       	mov    eax,ds:0xc002f488
c0016319:	85 c0                	test   eax,eax
c001631b:	74 2a                	je     c0016347 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c001631d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0016323:	8b 0d 88 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f488
c0016329:	83 ec 04             	sub    esp,0x4
c001632c:	68 a0 f4 02 c0       	push   0xc002f4a0
c0016331:	83 ec 08             	sub    esp,0x8
c0016334:	89 e2                	mov    edx,esp
c0016336:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016339:	89 02                	mov    DWORD PTR [edx],eax
c001633b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001633e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0016342:	ff d1                	call   ecx
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	83 ec 0c             	sub    esp,0xc
c001634a:	68 e3 be 02 c0       	push   0xc002bee3
c001634f:	e8 0b cb ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0016354:	83 c4 10             	add    esp,0x10
c0016357:	fb                   	sti    
c0016358:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c001635f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016363:	0f 84 a1 00 00 00    	je     c001640a <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016369:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001636c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0016372:	84 c0                	test   al,al
c0016374:	75 28                	jne    c001639e <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016376:	fa                   	cli    
c0016377:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001637c:	40                   	inc    eax
c001637d:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016382:	e8 25 83 00 00       	call   c001e6ac <schedule()>
c0016387:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001638c:	48                   	dec    eax
c001638d:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016392:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016397:	85 c0                	test   eax,eax
c0016399:	75 ce                	jne    c0016369 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001639b:	fb                   	sti    
c001639c:	eb cb                	jmp    c0016369 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c001639e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163a1:	8d 50 01             	lea    edx,[eax+0x1]
c00163a4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163a7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163aa:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c00163b0:	88 10                	mov    BYTE PTR [eax],dl
c00163b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b5:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163bb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163c1:	05 98 01 00 00       	add    eax,0x198
c00163c6:	83 ec 0c             	sub    esp,0xc
c00163c9:	50                   	push   eax
c00163ca:	e8 c5 a3 fe ff       	call   c0000794 <strlen>
c00163cf:	83 c4 10             	add    esp,0x10
c00163d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163d5:	81 c2 98 01 00 00    	add    edx,0x198
c00163db:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e1:	81 c2 98 01 00 00    	add    edx,0x198
c00163e7:	83 ec 04             	sub    esp,0x4
c00163ea:	50                   	push   eax
c00163eb:	51                   	push   ecx
c00163ec:	52                   	push   edx
c00163ed:	e8 be a2 fe ff       	call   c00006b0 <memmove>
c00163f2:	83 c4 10             	add    esp,0x10
c00163f5:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163fb:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163ff:	0f 85 5a ff ff ff    	jne    c001635f <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0016405:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016408:	eb 03                	jmp    c001640d <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c001640a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001640d:	c9                   	leave  
c001640e:	c3                   	ret    
c001640f:	90                   	nop

c0016410 <Keyboard::Keyboard(char const*)>:
c0016410:	83 ec 0c             	sub    esp,0xc
c0016413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016417:	83 ec 08             	sub    esp,0x8
c001641a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001641e:	50                   	push   eax
c001641f:	e8 4c e0 ff ff       	call   c0014470 <Device::Device(char const*)>
c0016424:	83 c4 10             	add    esp,0x10
c0016427:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c001642c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016430:	89 10                	mov    DWORD PTR [eax],edx
c0016432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016436:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016440:	c6 05 84 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f484,0x1
c0016447:	90                   	nop
c0016448:	83 c4 0c             	add    esp,0xc
c001644b:	c3                   	ret    

c001644c <Keyboard::~Keyboard()>:
c001644c:	83 ec 0c             	sub    esp,0xc
c001644f:	ba 04 bf 02 c0       	mov    edx,0xc002bf04
c0016454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016458:	89 10                	mov    DWORD PTR [eax],edx
c001645a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645e:	83 ec 0c             	sub    esp,0xc
c0016461:	50                   	push   eax
c0016462:	e8 ff dc ff ff       	call   c0014166 <Device::~Device()>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	90                   	nop
c001646b:	83 c4 0c             	add    esp,0xc
c001646e:	c3                   	ret    
c001646f:	90                   	nop

c0016470 <Keyboard::~Keyboard()>:
c0016470:	83 ec 0c             	sub    esp,0xc
c0016473:	83 ec 0c             	sub    esp,0xc
c0016476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001647a:	e8 cd ff ff ff       	call   c001644c <Keyboard::~Keyboard()>
c001647f:	83 c4 10             	add    esp,0x10
c0016482:	83 ec 08             	sub    esp,0x8
c0016485:	68 5c 01 00 00       	push   0x15c
c001648a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001648e:	e8 ec c8 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0016493:	83 c4 10             	add    esp,0x10
c0016496:	83 c4 0c             	add    esp,0xc
c0016499:	c3                   	ret    

c001649a <LogicalDisk::close(int, int, void*)>:
c001649a:	83 c8 ff             	or     eax,0xffffffff
c001649d:	c3                   	ret    

c001649e <LogicalDisk::~LogicalDisk()>:
c001649e:	83 ec 0c             	sub    esp,0xc
c00164a1:	ba b4 bf 02 c0       	mov    edx,0xc002bfb4
c00164a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164aa:	89 10                	mov    DWORD PTR [eax],edx
c00164ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164b0:	83 ec 0c             	sub    esp,0xc
c00164b3:	50                   	push   eax
c00164b4:	e8 ad dc ff ff       	call   c0014166 <Device::~Device()>
c00164b9:	83 c4 10             	add    esp,0x10
c00164bc:	90                   	nop
c00164bd:	83 c4 0c             	add    esp,0xc
c00164c0:	c3                   	ret    
c00164c1:	90                   	nop

c00164c2 <LogicalDisk::~LogicalDisk()>:
c00164c2:	83 ec 0c             	sub    esp,0xc
c00164c5:	83 ec 0c             	sub    esp,0xc
c00164c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164cc:	e8 cd ff ff ff       	call   c001649e <LogicalDisk::~LogicalDisk()>
c00164d1:	83 c4 10             	add    esp,0x10
c00164d4:	83 ec 08             	sub    esp,0x8
c00164d7:	68 74 01 00 00       	push   0x174
c00164dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164e0:	e8 9a c8 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c00164e5:	83 c4 10             	add    esp,0x10
c00164e8:	83 c4 0c             	add    esp,0xc
c00164eb:	c3                   	ret    

c00164ec <LogicalDisk::open(int, int, void*)>:
c00164ec:	83 ec 18             	sub    esp,0x18
c00164ef:	68 30 bf 02 c0       	push   0xc002bf30
c00164f4:	e8 00 44 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00164f9:	83 c8 ff             	or     eax,0xffffffff
c00164fc:	83 c4 1c             	add    esp,0x1c
c00164ff:	c3                   	ret    

c0016500 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016500:	53                   	push   ebx
c0016501:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016509:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001650d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016513:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016519:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c001651f:	77 10                	ja     c0016531 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016521:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016527:	89 d3                	mov    ebx,edx
c0016529:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c001652f:	72 05                	jb     c0016536 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016531:	83 c8 ff             	or     eax,0xffffffff
c0016534:	89 c2                	mov    edx,eax
c0016536:	5b                   	pop    ebx
c0016537:	c3                   	ret    

c0016538 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016538:	56                   	push   esi
c0016539:	83 c8 ff             	or     eax,0xffffffff
c001653c:	53                   	push   ebx
c001653d:	89 c2                	mov    edx,eax
c001653f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016543:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016547:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001654b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016551:	77 27                	ja     c001657a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016553:	89 d8                	mov    eax,ebx
c0016555:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c001655b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016561:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016566:	89 c2                	mov    edx,eax
c0016568:	73 10                	jae    c001657a <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001656a:	89 c8                	mov    eax,ecx
c001656c:	89 da                	mov    edx,ebx
c001656e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0016574:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c001657a:	5b                   	pop    ebx
c001657b:	5e                   	pop    esi
c001657c:	c3                   	ret    
c001657d:	90                   	nop

c001657e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001657e:	83 ec 1c             	sub    esp,0x1c
c0016581:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016585:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016589:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001658d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016591:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016595:	89 04 24             	mov    DWORD PTR [esp],eax
c0016598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001659c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a4:	83 ec 08             	sub    esp,0x8
c00165a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165ab:	50                   	push   eax
c00165ac:	e8 bf de ff ff       	call   c0014470 <Device::Device(char const*)>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	ba b4 bf 02 c0       	mov    edx,0xc002bfb4
c00165b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165bd:	89 10                	mov    DWORD PTR [eax],edx
c00165bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ce:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165d9:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165e3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165ef:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165f5:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165fb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165ff:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016602:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016606:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001660c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016616:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001661a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016620:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016624:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001662e:	90                   	nop
c001662f:	83 c4 1c             	add    esp,0x1c
c0016632:	c3                   	ret    
c0016633:	90                   	nop

c0016634 <LogicalDisk::assignDriveLetter()>:
c0016634:	55                   	push   ebp
c0016635:	57                   	push   edi
c0016636:	56                   	push   esi
c0016637:	53                   	push   ebx
c0016638:	83 ec 14             	sub    esp,0x14
c001663b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001663f:	8b 3d c0 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8c0
c0016645:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001664b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001664f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016655:	8b 3d c4 f8 02 c0    	mov    edi,DWORD PTR ds:0xc002f8c4
c001665b:	3c 01                	cmp    al,0x1
c001665d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016661:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016665:	19 c0                	sbb    eax,eax
c0016667:	83 e0 02             	and    eax,0x2
c001666a:	83 c0 41             	add    eax,0x41
c001666d:	0f be e8             	movsx  ebp,al
c0016670:	3c 43                	cmp    al,0x43
c0016672:	75 10                	jne    c0016684 <LogicalDisk::assignDriveLetter()+0x50>
c0016674:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001667b:	75 5d                	jne    c00166da <LogicalDisk::assignDriveLetter()+0xa6>
c001667d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016682:	75 56                	jne    c00166da <LogicalDisk::assignDriveLetter()+0xa6>
c0016684:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016687:	ba 01 00 00 00       	mov    edx,0x1
c001668c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016690:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0016694:	d3 e2                	shl    edx,cl
c0016696:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001669a:	89 d7                	mov    edi,edx
c001669c:	89 d6                	mov    esi,edx
c001669e:	c1 ff 1f             	sar    edi,0x1f
c00166a1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166a5:	21 f9                	and    ecx,edi
c00166a7:	09 d1                	or     ecx,edx
c00166a9:	75 2f                	jne    c00166da <LogicalDisk::assignDriveLetter()+0xa6>
c00166ab:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166b3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166b9:	09 f2                	or     edx,esi
c00166bb:	89 15 c0 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c0,edx
c00166c1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166c5:	09 fa                	or     edx,edi
c00166c7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166cb:	89 15 c4 f8 02 c0    	mov    DWORD PTR ds:0xc002f8c4,edx
c00166d1:	89 1c bd e0 f8 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0720],ebx
c00166d8:	eb 08                	jmp    c00166e2 <LogicalDisk::assignDriveLetter()+0xae>
c00166da:	45                   	inc    ebp
c00166db:	40                   	inc    eax
c00166dc:	3c 5b                	cmp    al,0x5b
c00166de:	75 90                	jne    c0016670 <LogicalDisk::assignDriveLetter()+0x3c>
c00166e0:	31 c0                	xor    eax,eax
c00166e2:	83 c4 14             	add    esp,0x14
c00166e5:	5b                   	pop    ebx
c00166e6:	5e                   	pop    esi
c00166e7:	5f                   	pop    edi
c00166e8:	5d                   	pop    ebp
c00166e9:	c3                   	ret    

c00166ea <LogicalDisk::mount()>:
c00166ea:	56                   	push   esi
c00166eb:	53                   	push   ebx
c00166ec:	50                   	push   eax
c00166ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166f1:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c00166f7:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016701:	85 db                	test   ebx,ebx
c0016703:	74 50                	je     c0016755 <LogicalDisk::mount()+0x6b>
c0016705:	50                   	push   eax
c0016706:	50                   	push   eax
c0016707:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c001670d:	68 54 bf 02 c0       	push   0xc002bf54
c0016712:	e8 48 c7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0016717:	83 c4 0c             	add    esp,0xc
c001671a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016721:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016723:	83 e8 41             	sub    eax,0x41
c0016726:	50                   	push   eax
c0016727:	56                   	push   esi
c0016728:	53                   	push   ebx
c0016729:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001672c:	83 c4 10             	add    esp,0x10
c001672f:	84 c0                	test   al,al
c0016731:	74 08                	je     c001673b <LogicalDisk::mount()+0x51>
c0016733:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016739:	eb 1c                	jmp    c0016757 <LogicalDisk::mount()+0x6d>
c001673b:	51                   	push   ecx
c001673c:	51                   	push   ecx
c001673d:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c0016743:	68 6f bf 02 c0       	push   0xc002bf6f
c0016748:	e8 12 c7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001674d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016750:	83 c4 10             	add    esp,0x10
c0016753:	eb ac                	jmp    c0016701 <LogicalDisk::mount()+0x17>
c0016755:	31 c0                	xor    eax,eax
c0016757:	5a                   	pop    edx
c0016758:	5b                   	pop    ebx
c0016759:	5e                   	pop    esi
c001675a:	c3                   	ret    
c001675b:	90                   	nop

c001675c <LogicalDisk::unmount()>:
c001675c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016760:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001676a:	c3                   	ret    
c001676b:	90                   	nop

c001676c <LogicalDisk::eject()>:
c001676c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016770:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016776:	8b 10                	mov    edx,DWORD PTR [eax]
c0016778:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001677c:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c001677f:	90                   	nop

c0016780 <LogicalDisk::unassignDriveLetter()>:
c0016780:	57                   	push   edi
c0016781:	56                   	push   esi
c0016782:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016786:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c001678d:	84 c9                	test   cl,cl
c001678f:	75 0f                	jne    c00167a0 <LogicalDisk::unassignDriveLetter()+0x20>
c0016791:	c7 44 24 0c 8a bf 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bf8a
c0016799:	5e                   	pop    esi
c001679a:	5f                   	pop    edi
c001679b:	e9 59 41 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c00167a0:	83 e9 41             	sub    ecx,0x41
c00167a3:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167aa:	b8 01 00 00 00       	mov    eax,0x1
c00167af:	c7 04 8d e0 f8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0720],0x0
c00167ba:	d3 e0                	shl    eax,cl
c00167bc:	89 c7                	mov    edi,eax
c00167be:	f7 d0                	not    eax
c00167c0:	c1 ff 1f             	sar    edi,0x1f
c00167c3:	21 05 c0 f8 02 c0    	and    DWORD PTR ds:0xc002f8c0,eax
c00167c9:	89 fe                	mov    esi,edi
c00167cb:	f7 d6                	not    esi
c00167cd:	21 35 c4 f8 02 c0    	and    DWORD PTR ds:0xc002f8c4,esi
c00167d3:	5e                   	pop    esi
c00167d4:	5f                   	pop    edi
c00167d5:	c3                   	ret    

c00167d6 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167d6:	57                   	push   edi
c00167d7:	56                   	push   esi
c00167d8:	53                   	push   ebx
c00167d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167e1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167e9:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167ef:	77 41                	ja     c0016832 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167f1:	99                   	cdq    
c00167f2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167f8:	01 c8                	add    eax,ecx
c00167fa:	11 da                	adc    edx,ebx
c00167fc:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016802:	19 d7                	sbb    edi,edx
c0016804:	72 33                	jb     c0016839 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016806:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001680c:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016812:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016816:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001681a:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016820:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001682a:	5b                   	pop    ebx
c001682b:	5e                   	pop    esi
c001682c:	5f                   	pop    edi
c001682d:	e9 ec 0a 00 00       	jmp    c001731e <VCache::read(unsigned long long, int, void*)>
c0016832:	b8 05 00 00 00       	mov    eax,0x5
c0016837:	eb 05                	jmp    c001683e <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016839:	b8 07 00 00 00       	mov    eax,0x7
c001683e:	5b                   	pop    ebx
c001683f:	5e                   	pop    esi
c0016840:	5f                   	pop    edi
c0016841:	c3                   	ret    

c0016842 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016842:	57                   	push   edi
c0016843:	56                   	push   esi
c0016844:	53                   	push   ebx
c0016845:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016849:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001684d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016851:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016855:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001685b:	77 41                	ja     c001689e <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001685d:	99                   	cdq    
c001685e:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016864:	01 c8                	add    eax,ecx
c0016866:	11 da                	adc    edx,ebx
c0016868:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c001686e:	19 d7                	sbb    edi,edx
c0016870:	72 33                	jb     c00168a5 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016872:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016878:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c001687e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016882:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016886:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001688c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016892:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016896:	5b                   	pop    ebx
c0016897:	5e                   	pop    esi
c0016898:	5f                   	pop    edi
c0016899:	e9 96 09 00 00       	jmp    c0017234 <VCache::write(unsigned long long, int, void*)>
c001689e:	b8 05 00 00 00       	mov    eax,0x5
c00168a3:	eb 05                	jmp    c00168aa <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168a5:	b8 07 00 00 00       	mov    eax,0x7
c00168aa:	5b                   	pop    ebx
c00168ab:	5e                   	pop    esi
c00168ac:	5f                   	pop    edi
c00168ad:	c3                   	ret    

c00168ae <Mouse::Mouse(char const*)>:
c00168ae:	83 ec 0c             	sub    esp,0xc
c00168b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b5:	83 ec 08             	sub    esp,0x8
c00168b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168bc:	50                   	push   eax
c00168bd:	e8 ae db ff ff       	call   c0014470 <Device::Device(char const*)>
c00168c2:	83 c4 10             	add    esp,0x10
c00168c5:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c00168ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168ce:	89 10                	mov    DWORD PTR [eax],edx
c00168d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d4:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168de:	90                   	nop
c00168df:	83 c4 0c             	add    esp,0xc
c00168e2:	c3                   	ret    
c00168e3:	90                   	nop

c00168e4 <Mouse::~Mouse()>:
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	ba e0 bf 02 c0       	mov    edx,0xc002bfe0
c00168ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f0:	89 10                	mov    DWORD PTR [eax],edx
c00168f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168f6:	83 ec 0c             	sub    esp,0xc
c00168f9:	50                   	push   eax
c00168fa:	e8 67 d8 ff ff       	call   c0014166 <Device::~Device()>
c00168ff:	83 c4 10             	add    esp,0x10
c0016902:	90                   	nop
c0016903:	83 c4 0c             	add    esp,0xc
c0016906:	c3                   	ret    
c0016907:	90                   	nop

c0016908 <Mouse::~Mouse()>:
c0016908:	83 ec 0c             	sub    esp,0xc
c001690b:	83 ec 0c             	sub    esp,0xc
c001690e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016912:	e8 cd ff ff ff       	call   c00168e4 <Mouse::~Mouse()>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	83 ec 08             	sub    esp,0x8
c001691d:	68 58 01 00 00       	push   0x158
c0016922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016926:	e8 54 c4 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c001692b:	83 c4 10             	add    esp,0x10
c001692e:	83 c4 0c             	add    esp,0xc
c0016931:	c3                   	ret    

c0016932 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016932:	55                   	push   ebp
c0016933:	57                   	push   edi
c0016934:	56                   	push   esi
c0016935:	53                   	push   ebx
c0016936:	81 ec 20 01 00 00    	sub    esp,0x120
c001693c:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016943:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001694a:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016951:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016958:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001695c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016960:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016964:	56                   	push   esi
c0016965:	68 04 c0 02 c0       	push   0xc002c004
c001696a:	e8 f0 c4 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001696f:	58                   	pop    eax
c0016970:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016977:	e8 f0 db ff ff       	call   c001456c <Device::getName()>
c001697c:	5a                   	pop    edx
c001697d:	59                   	pop    ecx
c001697e:	50                   	push   eax
c001697f:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0016983:	53                   	push   ebx
c0016984:	e8 ab 9e fe ff       	call   c0000834 <strcpy>
c0016989:	5d                   	pop    ebp
c001698a:	58                   	pop    eax
c001698b:	68 35 c0 02 c0       	push   0xc002c035
c0016990:	53                   	push   ebx
c0016991:	e8 de 9f fe ff       	call   c0000974 <strcat>
c0016996:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001699d:	e8 12 8f ff ff       	call   c000f8b4 <malloc>
c00169a2:	83 c4 0c             	add    esp,0xc
c00169a5:	89 c5                	mov    ebp,eax
c00169a7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169ab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00169af:	57                   	push   edi
c00169b0:	56                   	push   esi
c00169b1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169b8:	53                   	push   ebx
c00169b9:	50                   	push   eax
c00169ba:	e8 bf fb ff ff       	call   c001657e <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169bf:	83 c4 14             	add    esp,0x14
c00169c2:	55                   	push   ebp
c00169c3:	e8 6c fc ff ff       	call   c0016634 <LogicalDisk::assignDriveLetter()>
c00169c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169cb:	0f be d8             	movsx  ebx,al
c00169ce:	e8 17 fd ff ff       	call   c00166ea <LogicalDisk::mount()>
c00169d3:	58                   	pop    eax
c00169d4:	5a                   	pop    edx
c00169d5:	55                   	push   ebp
c00169d6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169dd:	e8 9e d8 ff ff       	call   c0014280 <Device::addChild(Device*)>
c00169e2:	59                   	pop    ecx
c00169e3:	5e                   	pop    esi
c00169e4:	53                   	push   ebx
c00169e5:	68 40 c0 02 c0       	push   0xc002c040
c00169ea:	e8 70 c4 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00169ef:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169f5:	5b                   	pop    ebx
c00169f6:	5e                   	pop    esi
c00169f7:	5f                   	pop    edi
c00169f8:	5d                   	pop    ebp
c00169f9:	c3                   	ret    

c00169fa <createPartitionsForDisk(PhysicalDisk*)>:
c00169fa:	55                   	push   ebp
c00169fb:	57                   	push   edi
c00169fc:	56                   	push   esi
c00169fd:	53                   	push   ebx
c00169fe:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a04:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a0b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a11:	3d 00 02 00 00       	cmp    eax,0x200
c0016a16:	74 27                	je     c0016a3f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a18:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a1e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a24:	83 ec 10             	sub    esp,0x10
c0016a27:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a2b:	99                   	cdq    
c0016a2c:	c1 e6 0a             	shl    esi,0xa
c0016a2f:	52                   	push   edx
c0016a30:	89 fd                	mov    ebp,edi
c0016a32:	50                   	push   eax
c0016a33:	55                   	push   ebp
c0016a34:	56                   	push   esi
c0016a35:	e8 da 0b 01 00       	call   c0027614 <__udivdi3>
c0016a3a:	e9 b1 00 00 00       	jmp    c0016af0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a3f:	83 ec 0c             	sub    esp,0xc
c0016a42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a44:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a48:	56                   	push   esi
c0016a49:	6a 01                	push   0x1
c0016a4b:	6a 00                	push   0x0
c0016a4d:	6a 00                	push   0x0
c0016a4f:	53                   	push   ebx
c0016a50:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a53:	83 c4 20             	add    esp,0x20
c0016a56:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a5e:	75 0a                	jne    c0016a6a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a60:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a68:	74 2c                	je     c0016a96 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a6a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a70:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a76:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a7c:	83 ec 10             	sub    esp,0x10
c0016a7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a83:	89 f7                	mov    edi,esi
c0016a85:	c1 e0 0a             	shl    eax,0xa
c0016a88:	c1 ff 1f             	sar    edi,0x1f
c0016a8b:	57                   	push   edi
c0016a8c:	56                   	push   esi
c0016a8d:	52                   	push   edx
c0016a8e:	50                   	push   eax
c0016a8f:	e8 80 0b 01 00       	call   c0027614 <__udivdi3>
c0016a94:	eb 5a                	jmp    c0016af0 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a96:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a9d:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016aa4:	83 e1 7f             	and    ecx,0x7f
c0016aa7:	83 e0 7f             	and    eax,0x7f
c0016aaa:	01 c1                	add    ecx,eax
c0016aac:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016ab3:	83 e0 7f             	and    eax,0x7f
c0016ab6:	01 c1                	add    ecx,eax
c0016ab8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016abf:	83 e0 7f             	and    eax,0x7f
c0016ac2:	00 c1                	add    cl,al
c0016ac4:	74 41                	je     c0016b07 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ac6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016acc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016ad2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ad8:	83 ec 10             	sub    esp,0x10
c0016adb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016adf:	89 f7                	mov    edi,esi
c0016ae1:	c1 e0 0a             	shl    eax,0xa
c0016ae4:	c1 ff 1f             	sar    edi,0x1f
c0016ae7:	57                   	push   edi
c0016ae8:	56                   	push   esi
c0016ae9:	52                   	push   edx
c0016aea:	50                   	push   eax
c0016aeb:	e8 24 0b 01 00       	call   c0027614 <__udivdi3>
c0016af0:	83 c4 14             	add    esp,0x14
c0016af3:	52                   	push   edx
c0016af4:	50                   	push   eax
c0016af5:	6a 00                	push   0x0
c0016af7:	6a 00                	push   0x0
c0016af9:	53                   	push   ebx
c0016afa:	e8 33 fe ff ff       	call   c0016932 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016aff:	83 c4 20             	add    esp,0x20
c0016b02:	e9 79 01 00 00       	jmp    c0016c80 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b07:	89 f0                	mov    eax,esi
c0016b09:	31 f6                	xor    esi,esi
c0016b0b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b12:	75 02                	jne    c0016b16 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b14:	89 f1                	mov    ecx,esi
c0016b16:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b1d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b24:	c1 e2 08             	shl    edx,0x8
c0016b27:	c1 e7 10             	shl    edi,0x10
c0016b2a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b32:	09 fa                	or     edx,edi
c0016b34:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b3c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b43:	83 c0 10             	add    eax,0x10
c0016b46:	09 fa                	or     edx,edi
c0016b48:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b4f:	c1 e7 18             	shl    edi,0x18
c0016b52:	09 fa                	or     edx,edi
c0016b54:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b5b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b5f:	c1 e7 10             	shl    edi,0x10
c0016b62:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b69:	c1 e2 08             	shl    edx,0x8
c0016b6c:	09 fa                	or     edx,edi
c0016b6e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b75:	09 fa                	or     edx,edi
c0016b77:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b7e:	c1 e7 18             	shl    edi,0x18
c0016b81:	09 fa                	or     edx,edi
c0016b83:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b87:	46                   	inc    esi
c0016b88:	83 fe 04             	cmp    esi,0x4
c0016b8b:	0f 85 7a ff ff ff    	jne    c0016b0b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b95:	83 f0 01             	xor    eax,0x1
c0016b98:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b9c:	75 57                	jne    c0016bf5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016ba2:	83 f0 01             	xor    eax,0x1
c0016ba5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016ba9:	75 4a                	jne    c0016bf5 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bab:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016baf:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016bb7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bbf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bc5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bcb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bd1:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bd5:	89 f7                	mov    edi,esi
c0016bd7:	c1 e0 0a             	shl    eax,0xa
c0016bda:	c1 ff 1f             	sar    edi,0x1f
c0016bdd:	57                   	push   edi
c0016bde:	56                   	push   esi
c0016bdf:	52                   	push   edx
c0016be0:	50                   	push   eax
c0016be1:	e8 2e 0a 01 00       	call   c0027614 <__udivdi3>
c0016be6:	83 c4 10             	add    esp,0x10
c0016be9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bf1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bf5:	84 c9                	test   cl,cl
c0016bf7:	74 53                	je     c0016c4c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016bf9:	0f b6 c9             	movzx  ecx,cl
c0016bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c00:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c04:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c08:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c0c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c10:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c14:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c18:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c2c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c30:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c34:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c38:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c3c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c40:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c44:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c48:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c4c:	31 ed                	xor    ebp,ebp
c0016c4e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c52:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c56:	89 f8                	mov    eax,edi
c0016c58:	09 f0                	or     eax,esi
c0016c5a:	74 1e                	je     c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c5c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c60:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c64:	89 d1                	mov    ecx,edx
c0016c66:	09 c1                	or     ecx,eax
c0016c68:	74 10                	je     c0016c7a <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c6a:	83 ec 0c             	sub    esp,0xc
c0016c6d:	57                   	push   edi
c0016c6e:	56                   	push   esi
c0016c6f:	52                   	push   edx
c0016c70:	50                   	push   eax
c0016c71:	53                   	push   ebx
c0016c72:	e8 bb fc ff ff       	call   c0016932 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c77:	83 c4 20             	add    esp,0x20
c0016c7a:	45                   	inc    ebp
c0016c7b:	83 fd 04             	cmp    ebp,0x4
c0016c7e:	75 ce                	jne    c0016c4e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c80:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c86:	5b                   	pop    ebx
c0016c87:	5e                   	pop    esi
c0016c88:	5f                   	pop    edi
c0016c89:	5d                   	pop    ebp
c0016c8a:	c3                   	ret    
c0016c8b:	90                   	nop

c0016c8c <Serial::Serial(char const*)>:
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c93:	83 ec 08             	sub    esp,0x8
c0016c96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c9a:	50                   	push   eax
c0016c9b:	e8 d0 d7 ff ff       	call   c0014470 <Device::Device(char const*)>
c0016ca0:	83 c4 10             	add    esp,0x10
c0016ca3:	ba 6c c0 02 c0       	mov    edx,0xc002c06c
c0016ca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cac:	89 10                	mov    DWORD PTR [eax],edx
c0016cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016cbc:	90                   	nop
c0016cbd:	83 c4 0c             	add    esp,0xc
c0016cc0:	c3                   	ret    
c0016cc1:	90                   	nop

c0016cc2 <Serial::~Serial()>:
c0016cc2:	83 ec 0c             	sub    esp,0xc
c0016cc5:	ba 6c c0 02 c0       	mov    edx,0xc002c06c
c0016cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cce:	89 10                	mov    DWORD PTR [eax],edx
c0016cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd4:	83 ec 0c             	sub    esp,0xc
c0016cd7:	50                   	push   eax
c0016cd8:	e8 89 d4 ff ff       	call   c0014166 <Device::~Device()>
c0016cdd:	83 c4 10             	add    esp,0x10
c0016ce0:	90                   	nop
c0016ce1:	83 c4 0c             	add    esp,0xc
c0016ce4:	c3                   	ret    
c0016ce5:	90                   	nop

c0016ce6 <Serial::~Serial()>:
c0016ce6:	83 ec 0c             	sub    esp,0xc
c0016ce9:	83 ec 0c             	sub    esp,0xc
c0016cec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cf0:	e8 cd ff ff ff       	call   c0016cc2 <Serial::~Serial()>
c0016cf5:	83 c4 10             	add    esp,0x10
c0016cf8:	83 ec 08             	sub    esp,0x8
c0016cfb:	68 58 01 00 00       	push   0x158
c0016d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d04:	e8 76 c0 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0016d09:	83 c4 10             	add    esp,0x10
c0016d0c:	83 c4 0c             	add    esp,0xc
c0016d0f:	c3                   	ret    

c0016d10 <Timer::Timer(char const*)>:
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d17:	83 ec 08             	sub    esp,0x8
c0016d1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1e:	50                   	push   eax
c0016d1f:	e8 4c d7 ff ff       	call   c0014470 <Device::Device(char const*)>
c0016d24:	83 c4 10             	add    esp,0x10
c0016d27:	ba b0 c0 02 c0       	mov    edx,0xc002c0b0
c0016d2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d30:	89 10                	mov    DWORD PTR [eax],edx
c0016d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d36:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d40:	90                   	nop
c0016d41:	83 c4 0c             	add    esp,0xc
c0016d44:	c3                   	ret    
c0016d45:	90                   	nop

c0016d46 <Timer::~Timer()>:
c0016d46:	83 ec 0c             	sub    esp,0xc
c0016d49:	ba b0 c0 02 c0       	mov    edx,0xc002c0b0
c0016d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d52:	89 10                	mov    DWORD PTR [eax],edx
c0016d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d58:	83 ec 0c             	sub    esp,0xc
c0016d5b:	50                   	push   eax
c0016d5c:	e8 05 d4 ff ff       	call   c0014166 <Device::~Device()>
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	90                   	nop
c0016d65:	83 c4 0c             	add    esp,0xc
c0016d68:	c3                   	ret    
c0016d69:	90                   	nop

c0016d6a <Timer::~Timer()>:
c0016d6a:	83 ec 0c             	sub    esp,0xc
c0016d6d:	83 ec 0c             	sub    esp,0xc
c0016d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d74:	e8 cd ff ff ff       	call   c0016d46 <Timer::~Timer()>
c0016d79:	83 c4 10             	add    esp,0x10
c0016d7c:	83 ec 08             	sub    esp,0x8
c0016d7f:	68 5c 01 00 00       	push   0x15c
c0016d84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d88:	e8 f2 bf ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0016d8d:	83 c4 10             	add    esp,0x10
c0016d90:	83 c4 0c             	add    esp,0xc
c0016d93:	c3                   	ret    

c0016d94 <Timer::read()>:
c0016d94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d9e:	c3                   	ret    

c0016d9f <timerHandler(unsigned long long)>:
c0016d9f:	55                   	push   ebp
c0016da0:	57                   	push   edi
c0016da1:	56                   	push   esi
c0016da2:	53                   	push   ebx
c0016da3:	83 ec 0c             	sub    esp,0xc
c0016da6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016daa:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dae:	01 35 50 f9 02 c0    	add    DWORD PTR ds:0xc002f950,esi
c0016db4:	11 3d 54 f9 02 c0    	adc    DWORD PTR ds:0xc002f954,edi
c0016dba:	80 3d cd f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cd,0x0
c0016dc1:	0f 84 42 01 00 00    	je     c0016f09 <timerHandler(unsigned long long)+0x16a>
c0016dc7:	fa                   	cli    
c0016dc8:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0016dce:	83 ec 0c             	sub    esp,0xc
c0016dd1:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c0016dd7:	68 18 28 03 c0       	push   0xc0032818
c0016ddc:	e8 b9 28 01 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016de1:	83 c4 10             	add    esp,0x10
c0016de4:	84 c0                	test   al,al
c0016de6:	0f 85 a2 00 00 00    	jne    c0016e8e <timerHandler(unsigned long long)+0xef>
c0016dec:	83 ec 0c             	sub    esp,0xc
c0016def:	68 18 28 03 c0       	push   0xc0032818
c0016df4:	e8 bd 28 01 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df9:	83 c4 10             	add    esp,0x10
c0016dfc:	89 c3                	mov    ebx,eax
c0016dfe:	83 ec 0c             	sub    esp,0xc
c0016e01:	68 18 28 03 c0       	push   0xc0032818
c0016e06:	e8 ab 28 01 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e0b:	c7 04 24 18 28 03 c0 	mov    DWORD PTR [esp],0xc0032818
c0016e12:	89 c5                	mov    ebp,eax
c0016e14:	e8 a5 28 01 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e19:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e1c:	83 c4 10             	add    esp,0x10
c0016e1f:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e22:	39 15 50 f9 02 c0    	cmp    DWORD PTR ds:0xc002f950,edx
c0016e28:	a1 54 f9 02 c0       	mov    eax,ds:0xc002f954
c0016e2d:	19 c8                	sbb    eax,ecx
c0016e2f:	72 21                	jb     c0016e52 <timerHandler(unsigned long long)+0xb3>
c0016e31:	83 ec 0c             	sub    esp,0xc
c0016e34:	55                   	push   ebp
c0016e35:	e8 36 7d 00 00       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c0016e3a:	83 c4 10             	add    esp,0x10
c0016e3d:	39 eb                	cmp    ebx,ebp
c0016e3f:	75 21                	jne    c0016e62 <timerHandler(unsigned long long)+0xc3>
c0016e41:	83 ec 0c             	sub    esp,0xc
c0016e44:	68 18 28 03 c0       	push   0xc0032818
c0016e49:	e8 68 28 01 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4e:	89 c3                	mov    ebx,eax
c0016e50:	eb 0d                	jmp    c0016e5f <timerHandler(unsigned long long)+0xc0>
c0016e52:	50                   	push   eax
c0016e53:	50                   	push   eax
c0016e54:	55                   	push   ebp
c0016e55:	68 18 28 03 c0       	push   0xc0032818
c0016e5a:	e8 0d 29 01 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e5f:	83 c4 10             	add    esp,0x10
c0016e62:	83 ec 0c             	sub    esp,0xc
c0016e65:	68 18 28 03 c0       	push   0xc0032818
c0016e6a:	e8 2b 28 01 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e6f:	83 c4 10             	add    esp,0x10
c0016e72:	84 c0                	test   al,al
c0016e74:	75 18                	jne    c0016e8e <timerHandler(unsigned long long)+0xef>
c0016e76:	83 ec 0c             	sub    esp,0xc
c0016e79:	68 18 28 03 c0       	push   0xc0032818
c0016e7e:	e8 33 28 01 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	39 d8                	cmp    eax,ebx
c0016e88:	0f 85 70 ff ff ff    	jne    c0016dfe <timerHandler(unsigned long long)+0x5f>
c0016e8e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e93:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e97:	74 3d                	je     c0016ed6 <timerHandler(unsigned long long)+0x137>
c0016e99:	80 3d cc f2 02 c0 00 	cmp    BYTE PTR ds:0xc002f2cc,0x0
c0016ea0:	74 34                	je     c0016ed6 <timerHandler(unsigned long long)+0x137>
c0016ea2:	fa                   	cli    
c0016ea3:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c0016ea9:	31 d2                	xor    edx,edx
c0016eab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb0:	89 f9                	mov    ecx,edi
c0016eb2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016eb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ebd:	39 c6                	cmp    esi,eax
c0016ebf:	19 d1                	sbb    ecx,edx
c0016ec1:	72 05                	jb     c0016ec8 <timerHandler(unsigned long long)+0x129>
c0016ec3:	e8 e4 77 00 00       	call   c001e6ac <schedule()>
c0016ec8:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016ecd:	48                   	dec    eax
c0016ece:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016ed3:	75 01                	jne    c0016ed6 <timerHandler(unsigned long long)+0x137>
c0016ed5:	fb                   	sti    
c0016ed6:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c0016edb:	48                   	dec    eax
c0016edc:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c0016ee1:	75 18                	jne    c0016efb <timerHandler(unsigned long long)+0x15c>
c0016ee3:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c0016eea:	74 0f                	je     c0016efb <timerHandler(unsigned long long)+0x15c>
c0016eec:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c0016ef6:	e8 b1 77 00 00       	call   c001e6ac <schedule()>
c0016efb:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0016f00:	48                   	dec    eax
c0016f01:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c0016f06:	75 01                	jne    c0016f09 <timerHandler(unsigned long long)+0x16a>
c0016f08:	fb                   	sti    
c0016f09:	83 c4 0c             	add    esp,0xc
c0016f0c:	5b                   	pop    ebx
c0016f0d:	5e                   	pop    esi
c0016f0e:	5f                   	pop    edi
c0016f0f:	5d                   	pop    ebp
c0016f10:	c3                   	ret    

c0016f11 <setupTimer(int)>:
c0016f11:	57                   	push   edi
c0016f12:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016f17:	56                   	push   esi
c0016f18:	53                   	push   ebx
c0016f19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f1d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f23:	83 ec 0c             	sub    esp,0xc
c0016f26:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f2c:	e8 3b d6 ff ff       	call   c001456c <Device::getName()>
c0016f31:	83 c4 10             	add    esp,0x10
c0016f34:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f37:	0f 85 8d 00 00 00    	jne    c0016fca <setupTimer(int)+0xb9>
c0016f3d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016f42:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f49:	74 7f                	je     c0016fca <setupTimer(int)+0xb9>
c0016f4b:	83 ec 0c             	sub    esp,0xc
c0016f4e:	68 5c 01 00 00       	push   0x15c
c0016f53:	e8 5c 89 ff ff       	call   c000f8b4 <malloc>
c0016f58:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f5b:	89 c3                	mov    ebx,eax
c0016f5d:	e8 8a 02 01 00       	call   c00271ec <PIT::PIT()>
c0016f62:	59                   	pop    ecx
c0016f63:	5f                   	pop    edi
c0016f64:	53                   	push   ebx
c0016f65:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0016f6b:	e8 10 d3 ff ff       	call   c0014280 <Device::addChild(Device*)>
c0016f70:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f72:	6a 00                	push   0x0
c0016f74:	6a 00                	push   0x0
c0016f76:	56                   	push   esi
c0016f77:	53                   	push   ebx
c0016f78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f7b:	83 c4 14             	add    esp,0x14
c0016f7e:	68 60 01 00 00       	push   0x160
c0016f83:	e8 2c 89 ff ff       	call   c000f8b4 <malloc>
c0016f88:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f8b:	89 c7                	mov    edi,eax
c0016f8d:	e8 0a 01 01 00       	call   c002709c <APICTimer::APICTimer()>
c0016f92:	6a 00                	push   0x0
c0016f94:	6a 00                	push   0x0
c0016f96:	56                   	push   esi
c0016f97:	57                   	push   edi
c0016f98:	e8 01 00 01 00       	call   c0026f9e <APICTimer::open(int, int, void*)>
c0016f9d:	83 c4 20             	add    esp,0x20
c0016fa0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fa2:	6a 00                	push   0x0
c0016fa4:	6a 00                	push   0x0
c0016fa6:	6a 00                	push   0x0
c0016fa8:	53                   	push   ebx
c0016fa9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016fac:	58                   	pop    eax
c0016fad:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0016fb2:	5a                   	pop    edx
c0016fb3:	57                   	push   edi
c0016fb4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fba:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016fc0:	e8 bb d2 ff ff       	call   c0014280 <Device::addChild(Device*)>
c0016fc5:	83 c4 10             	add    esp,0x10
c0016fc8:	eb 33                	jmp    c0016ffd <setupTimer(int)+0xec>
c0016fca:	83 ec 0c             	sub    esp,0xc
c0016fcd:	68 5c 01 00 00       	push   0x15c
c0016fd2:	e8 dd 88 ff ff       	call   c000f8b4 <malloc>
c0016fd7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fda:	89 c3                	mov    ebx,eax
c0016fdc:	e8 0b 02 01 00       	call   c00271ec <PIT::PIT()>
c0016fe1:	58                   	pop    eax
c0016fe2:	5a                   	pop    edx
c0016fe3:	53                   	push   ebx
c0016fe4:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0016fea:	e8 91 d2 ff ff       	call   c0014280 <Device::addChild(Device*)>
c0016fef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ff1:	6a 00                	push   0x0
c0016ff3:	6a 00                	push   0x0
c0016ff5:	56                   	push   esi
c0016ff6:	53                   	push   ebx
c0016ff7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ffa:	83 c4 20             	add    esp,0x20
c0016ffd:	89 d8                	mov    eax,ebx
c0016fff:	5b                   	pop    ebx
c0017000:	5e                   	pop    esi
c0017001:	5f                   	pop    edi
c0017002:	c3                   	ret    
c0017003:	90                   	nop

c0017004 <VCache::VCache(PhysicalDisk*)>:
c0017004:	53                   	push   ebx
c0017005:	83 ec 18             	sub    esp,0x18
c0017008:	ba e0 c0 02 c0       	mov    edx,0xc002c0e0
c001700d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017011:	89 10                	mov    DWORD PTR [eax],edx
c0017013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017017:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001701e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017022:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017034:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001703b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017046:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001704d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017051:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001705c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c001706b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017076:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001707a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017086:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001708a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001708e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017095:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001709d:	83 ec 0c             	sub    esp,0xc
c00170a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170a4:	e8 0b 88 ff ff       	call   c000f8b4 <malloc>
c00170a9:	83 c4 10             	add    esp,0x10
c00170ac:	89 c3                	mov    ebx,eax
c00170ae:	83 ec 0c             	sub    esp,0xc
c00170b1:	53                   	push   ebx
c00170b2:	e8 9f 73 00 00       	call   c001e456 <Mutex::Mutex()>
c00170b7:	83 c4 10             	add    esp,0x10
c00170ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170be:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170c5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170c9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170d7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170db:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170e5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170e8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170ec:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170fc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170ff:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0017102:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017106:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c001710a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001710e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017114:	05 00 01 00 00       	add    eax,0x100
c0017119:	c1 e0 04             	shl    eax,0x4
c001711c:	83 ec 0c             	sub    esp,0xc
c001711f:	50                   	push   eax
c0017120:	e8 8f 87 ff ff       	call   c000f8b4 <malloc>
c0017125:	83 c4 10             	add    esp,0x10
c0017128:	89 c2                	mov    edx,eax
c001712a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017131:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017135:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001713c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017140:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017144:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017148:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001714e:	c1 e0 07             	shl    eax,0x7
c0017151:	83 ec 0c             	sub    esp,0xc
c0017154:	50                   	push   eax
c0017155:	e8 5a 87 ff ff       	call   c000f8b4 <malloc>
c001715a:	83 c4 10             	add    esp,0x10
c001715d:	89 c2                	mov    edx,eax
c001715f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017163:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017166:	90                   	nop
c0017167:	83 c4 18             	add    esp,0x18
c001716a:	5b                   	pop    ebx
c001716b:	c3                   	ret    

c001716c <VCache::invalidateReadBuffer()>:
c001716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017170:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017176:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c001717a:	c3                   	ret    
c001717b:	90                   	nop

c001717c <VCache::writeWriteBuffer()>:
c001717c:	53                   	push   ebx
c001717d:	83 ec 14             	sub    esp,0x14
c0017180:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017184:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017187:	8b 10                	mov    edx,DWORD PTR [eax]
c0017189:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001718c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001718f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017192:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017195:	50                   	push   eax
c0017196:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017199:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00171a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00171a7:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c00171ab:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171b2:	83 c4 28             	add    esp,0x28
c00171b5:	5b                   	pop    ebx
c00171b6:	c3                   	ret    
c00171b7:	90                   	nop

c00171b8 <VCache::~VCache()>:
c00171b8:	83 ec 0c             	sub    esp,0xc
c00171bb:	ba e0 c0 02 c0       	mov    edx,0xc002c0e0
c00171c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171c4:	89 10                	mov    DWORD PTR [eax],edx
c00171c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ca:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171cd:	84 c0                	test   al,al
c00171cf:	74 0f                	je     c00171e0 <VCache::~VCache()+0x28>
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171d8:	e8 9f ff ff ff       	call   c001717c <VCache::writeWriteBuffer()>
c00171dd:	83 c4 10             	add    esp,0x10
c00171e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171e7:	83 ec 0c             	sub    esp,0xc
c00171ea:	50                   	push   eax
c00171eb:	e8 d4 86 ff ff       	call   c000f8c4 <free>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171fa:	83 ec 0c             	sub    esp,0xc
c00171fd:	50                   	push   eax
c00171fe:	e8 c1 86 ff ff       	call   c000f8c4 <free>
c0017203:	83 c4 10             	add    esp,0x10
c0017206:	90                   	nop
c0017207:	83 c4 0c             	add    esp,0xc
c001720a:	c3                   	ret    
c001720b:	90                   	nop

c001720c <VCache::~VCache()>:
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	83 ec 0c             	sub    esp,0xc
c0017212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017216:	e8 9d ff ff ff       	call   c00171b8 <VCache::~VCache()>
c001721b:	83 c4 10             	add    esp,0x10
c001721e:	83 ec 08             	sub    esp,0x8
c0017221:	6a 44                	push   0x44
c0017223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017227:	e8 53 bb ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c001722c:	83 c4 10             	add    esp,0x10
c001722f:	83 c4 0c             	add    esp,0xc
c0017232:	c3                   	ret    
c0017233:	90                   	nop

c0017234 <VCache::write(unsigned long long, int, void*)>:
c0017234:	55                   	push   ebp
c0017235:	57                   	push   edi
c0017236:	56                   	push   esi
c0017237:	53                   	push   ebx
c0017238:	83 ec 18             	sub    esp,0x18
c001723b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001723f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017243:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0017247:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001724a:	e8 95 77 00 00       	call   c001e9e4 <Semaphore::acquire()>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017256:	74 0c                	je     c0017264 <VCache::write(unsigned long long, int, void*)+0x30>
c0017258:	83 ec 0c             	sub    esp,0xc
c001725b:	53                   	push   ebx
c001725c:	e8 0b ff ff ff       	call   c001716c <VCache::invalidateReadBuffer()>
c0017261:	83 c4 10             	add    esp,0x10
c0017264:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017268:	74 5c                	je     c00172c6 <VCache::write(unsigned long long, int, void*)+0x92>
c001726a:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c001726d:	89 e8                	mov    eax,ebp
c001726f:	99                   	cdq    
c0017270:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017273:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017276:	89 c1                	mov    ecx,eax
c0017278:	89 d0                	mov    eax,edx
c001727a:	31 f1                	xor    ecx,esi
c001727c:	31 f8                	xor    eax,edi
c001727e:	09 c1                	or     ecx,eax
c0017280:	75 38                	jne    c00172ba <VCache::write(unsigned long long, int, void*)+0x86>
c0017282:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017287:	75 31                	jne    c00172ba <VCache::write(unsigned long long, int, void*)+0x86>
c0017289:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001728c:	89 ef                	mov    edi,ebp
c001728e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0017294:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017298:	0f af f9             	imul   edi,ecx
c001729b:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c001729e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172a0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00172a3:	40                   	inc    eax
c00172a4:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172a7:	83 c0 80             	add    eax,0xffffff80
c00172aa:	75 5c                	jne    c0017308 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ac:	83 ec 0c             	sub    esp,0xc
c00172af:	53                   	push   ebx
c00172b0:	e8 c7 fe ff ff       	call   c001717c <VCache::writeWriteBuffer()>
c00172b5:	83 c4 10             	add    esp,0x10
c00172b8:	eb 4e                	jmp    c0017308 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172ba:	83 ec 0c             	sub    esp,0xc
c00172bd:	53                   	push   ebx
c00172be:	e8 b9 fe ff ff       	call   c001717c <VCache::writeWriteBuffer()>
c00172c3:	83 c4 10             	add    esp,0x10
c00172c6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c9:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172ce:	7f 22                	jg     c00172f2 <VCache::write(unsigned long long, int, void*)+0xbe>
c00172d0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172d3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172d6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172da:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172de:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172e1:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172e4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172ea:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172f0:	eb 16                	jmp    c0017308 <VCache::write(unsigned long long, int, void*)+0xd4>
c00172f2:	83 ec 0c             	sub    esp,0xc
c00172f5:	8b 10                	mov    edx,DWORD PTR [eax]
c00172f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172ff:	57                   	push   edi
c0017300:	56                   	push   esi
c0017301:	50                   	push   eax
c0017302:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017305:	83 c4 20             	add    esp,0x20
c0017308:	83 ec 0c             	sub    esp,0xc
c001730b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001730e:	e8 0b 7e 00 00       	call   c001f11e <Semaphore::release()>
c0017313:	83 c4 1c             	add    esp,0x1c
c0017316:	31 c0                	xor    eax,eax
c0017318:	5b                   	pop    ebx
c0017319:	5e                   	pop    esi
c001731a:	5f                   	pop    edi
c001731b:	5d                   	pop    ebp
c001731c:	c3                   	ret    
c001731d:	90                   	nop

c001731e <VCache::read(unsigned long long, int, void*)>:
c001731e:	55                   	push   ebp
c001731f:	57                   	push   edi
c0017320:	56                   	push   esi
c0017321:	53                   	push   ebx
c0017322:	83 ec 28             	sub    esp,0x28
c0017325:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017329:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001732d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017331:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017335:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017338:	e8 a7 76 00 00       	call   c001e9e4 <Semaphore::acquire()>
c001733d:	83 c4 10             	add    esp,0x10
c0017340:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017344:	74 0c                	je     c0017352 <VCache::read(unsigned long long, int, void*)+0x34>
c0017346:	83 ec 0c             	sub    esp,0xc
c0017349:	53                   	push   ebx
c001734a:	e8 2d fe ff ff       	call   c001717c <VCache::writeWriteBuffer()>
c001734f:	83 c4 10             	add    esp,0x10
c0017352:	83 fd 01             	cmp    ebp,0x1
c0017355:	0f 85 80 00 00 00    	jne    c00173db <VCache::read(unsigned long long, int, void*)+0xbd>
c001735b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001735e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017362:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017369:	75 70                	jne    c00173db <VCache::read(unsigned long long, int, void*)+0xbd>
c001736b:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001736e:	89 e9                	mov    ecx,ebp
c0017370:	f7 d9                	neg    ecx
c0017372:	89 c8                	mov    eax,ecx
c0017374:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017378:	c1 f8 1f             	sar    eax,0x1f
c001737b:	21 f1                	and    ecx,esi
c001737d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017381:	89 c8                	mov    eax,ecx
c0017383:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017387:	21 f9                	and    ecx,edi
c0017389:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c001738d:	89 ca                	mov    edx,ecx
c001738f:	74 0a                	je     c001739b <VCache::read(unsigned long long, int, void*)+0x7d>
c0017391:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017394:	75 05                	jne    c001739b <VCache::read(unsigned long long, int, void*)+0x7d>
c0017396:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017399:	74 23                	je     c00173be <VCache::read(unsigned long long, int, void*)+0xa0>
c001739b:	83 ec 0c             	sub    esp,0xc
c001739e:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173a6:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00173a9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00173ac:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00173ae:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173b1:	55                   	push   ebp
c00173b2:	52                   	push   edx
c00173b3:	50                   	push   eax
c00173b4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173b8:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173bb:	83 c4 20             	add    esp,0x20
c00173be:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173c1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173c5:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ce:	48                   	dec    eax
c00173cf:	21 c6                	and    esi,eax
c00173d1:	0f af f1             	imul   esi,ecx
c00173d4:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173d7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173d9:	eb 1d                	jmp    c00173f8 <VCache::read(unsigned long long, int, void*)+0xda>
c00173db:	83 ec 0c             	sub    esp,0xc
c00173de:	53                   	push   ebx
c00173df:	e8 88 fd ff ff       	call   c001716c <VCache::invalidateReadBuffer()>
c00173e4:	5a                   	pop    edx
c00173e5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173ee:	55                   	push   ebp
c00173ef:	57                   	push   edi
c00173f0:	56                   	push   esi
c00173f1:	50                   	push   eax
c00173f2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173f5:	83 c4 20             	add    esp,0x20
c00173f8:	83 ec 0c             	sub    esp,0xc
c00173fb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173fe:	e8 1b 7d 00 00       	call   c001f11e <Semaphore::release()>
c0017403:	83 c4 2c             	add    esp,0x2c
c0017406:	31 c0                	xor    eax,eax
c0017408:	5b                   	pop    ebx
c0017409:	5e                   	pop    esi
c001740a:	5f                   	pop    edi
c001740b:	5d                   	pop    ebp
c001740c:	c3                   	ret    
c001740d:	90                   	nop

c001740e <Video::putrect(int, int, int, int, unsigned int)>:
c001740e:	55                   	push   ebp
c001740f:	57                   	push   edi
c0017410:	56                   	push   esi
c0017411:	53                   	push   ebx
c0017412:	83 ec 1c             	sub    esp,0x1c
c0017415:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017419:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001741d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0017421:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017425:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017429:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001742d:	01 df                	add    edi,ebx
c001742f:	39 fb                	cmp    ebx,edi
c0017431:	7d 1f                	jge    c0017452 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0017433:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017437:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c001743b:	7d 12                	jge    c001744f <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001743d:	8b 16                	mov    edx,DWORD PTR [esi]
c001743f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017443:	53                   	push   ebx
c0017444:	55                   	push   ebp
c0017445:	45                   	inc    ebp
c0017446:	56                   	push   esi
c0017447:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001744a:	83 c4 10             	add    esp,0x10
c001744d:	eb e8                	jmp    c0017437 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001744f:	43                   	inc    ebx
c0017450:	eb dd                	jmp    c001742f <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0017452:	83 c4 1c             	add    esp,0x1c
c0017455:	5b                   	pop    ebx
c0017456:	5e                   	pop    esi
c0017457:	5f                   	pop    edi
c0017458:	5d                   	pop    ebp
c0017459:	c3                   	ret    

c001745a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c001745a:	55                   	push   ebp
c001745b:	57                   	push   edi
c001745c:	31 ff                	xor    edi,edi
c001745e:	56                   	push   esi
c001745f:	53                   	push   ebx
c0017460:	83 ec 1c             	sub    esp,0x1c
c0017463:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017467:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001746b:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0017472:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017477:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001747b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001747f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017483:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017486:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001748a:	01 f9                	add    ecx,edi
c001748c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0017490:	7d 2f                	jge    c00174c1 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0017492:	31 f6                	xor    esi,esi
c0017494:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017498:	01 f2                	add    edx,esi
c001749a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001749e:	7d 1a                	jge    c00174ba <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174a3:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174a6:	46                   	inc    esi
c00174a7:	51                   	push   ecx
c00174a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174ac:	52                   	push   edx
c00174ad:	55                   	push   ebp
c00174ae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174b8:	eb da                	jmp    c0017494 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174ba:	47                   	inc    edi
c00174bb:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174bf:	eb c5                	jmp    c0017486 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174c1:	83 c4 1c             	add    esp,0x1c
c00174c4:	5b                   	pop    ebx
c00174c5:	5e                   	pop    esi
c00174c6:	5f                   	pop    edi
c00174c7:	5d                   	pop    ebp
c00174c8:	c3                   	ret    
c00174c9:	90                   	nop

c00174ca <Video::blit(unsigned int*, int, int, int, int)>:
c00174ca:	55                   	push   ebp
c00174cb:	57                   	push   edi
c00174cc:	56                   	push   esi
c00174cd:	53                   	push   ebx
c00174ce:	83 ec 1c             	sub    esp,0x1c
c00174d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174d9:	85 c0                	test   eax,eax
c00174db:	79 02                	jns    c00174df <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174dd:	31 c0                	xor    eax,eax
c00174df:	c1 e0 02             	shl    eax,0x2
c00174e2:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174ea:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174ee:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174f2:	39 d8                	cmp    eax,ebx
c00174f4:	7e 49                	jle    c001753f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174f6:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174fc:	7c 41                	jl     c001753f <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174fe:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0017502:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017506:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001750a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001750e:	39 f9                	cmp    ecx,edi
c0017510:	7e 22                	jle    c0017534 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0017512:	83 c5 04             	add    ebp,0x4
c0017515:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001751b:	7c 14                	jl     c0017531 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c001751d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001751f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0017522:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017526:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001752a:	56                   	push   esi
c001752b:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001752e:	83 c4 10             	add    esp,0x10
c0017531:	47                   	inc    edi
c0017532:	eb d2                	jmp    c0017506 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017534:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017538:	43                   	inc    ebx
c0017539:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001753d:	eb ab                	jmp    c00174ea <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001753f:	83 c4 1c             	add    esp,0x1c
c0017542:	5b                   	pop    ebx
c0017543:	5e                   	pop    esi
c0017544:	5f                   	pop    edi
c0017545:	5d                   	pop    ebp
c0017546:	c3                   	ret    
c0017547:	90                   	nop

c0017548 <Video::clearScreen(unsigned int)>:
c0017548:	57                   	push   edi
c0017549:	56                   	push   esi
c001754a:	53                   	push   ebx
c001754b:	31 db                	xor    ebx,ebx
c001754d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017551:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017557:	7e 1f                	jle    c0017578 <Video::clearScreen(unsigned int)+0x30>
c0017559:	31 ff                	xor    edi,edi
c001755b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017561:	7e 12                	jle    c0017575 <Video::clearScreen(unsigned int)+0x2d>
c0017563:	8b 06                	mov    eax,DWORD PTR [esi]
c0017565:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017569:	53                   	push   ebx
c001756a:	57                   	push   edi
c001756b:	47                   	inc    edi
c001756c:	56                   	push   esi
c001756d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017570:	83 c4 10             	add    esp,0x10
c0017573:	eb e6                	jmp    c001755b <Video::clearScreen(unsigned int)+0x13>
c0017575:	43                   	inc    ebx
c0017576:	eb d9                	jmp    c0017551 <Video::clearScreen(unsigned int)+0x9>
c0017578:	5b                   	pop    ebx
c0017579:	5e                   	pop    esi
c001757a:	5f                   	pop    edi
c001757b:	c3                   	ret    

c001757c <Video::putpixel(int, int, unsigned int)>:
c001757c:	c7 44 24 04 e8 c0 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c0e8
c0017584:	e9 70 33 00 00       	jmp    c001a8f9 <Krnl::panic(char const*)>
c0017589:	90                   	nop

c001758a <Video::Video(char const*)>:
c001758a:	83 ec 0c             	sub    esp,0xc
c001758d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017591:	83 ec 08             	sub    esp,0x8
c0017594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017598:	50                   	push   eax
c0017599:	e8 d2 ce ff ff       	call   c0014470 <Device::Device(char const*)>
c001759e:	83 c4 10             	add    esp,0x10
c00175a1:	ba 6c c1 02 c0       	mov    edx,0xc002c16c
c00175a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175aa:	89 10                	mov    DWORD PTR [eax],edx
c00175ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b0:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175ba:	90                   	nop
c00175bb:	83 c4 0c             	add    esp,0xc
c00175be:	c3                   	ret    
c00175bf:	90                   	nop

c00175c0 <Video::~Video()>:
c00175c0:	83 ec 0c             	sub    esp,0xc
c00175c3:	ba 6c c1 02 c0       	mov    edx,0xc002c16c
c00175c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175cc:	89 10                	mov    DWORD PTR [eax],edx
c00175ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d2:	83 ec 0c             	sub    esp,0xc
c00175d5:	50                   	push   eax
c00175d6:	e8 8b cb ff ff       	call   c0014166 <Device::~Device()>
c00175db:	83 c4 10             	add    esp,0x10
c00175de:	90                   	nop
c00175df:	83 c4 0c             	add    esp,0xc
c00175e2:	c3                   	ret    
c00175e3:	90                   	nop

c00175e4 <Video::~Video()>:
c00175e4:	83 ec 0c             	sub    esp,0xc
c00175e7:	83 ec 0c             	sub    esp,0xc
c00175ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ee:	e8 cd ff ff ff       	call   c00175c0 <Video::~Video()>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	83 ec 08             	sub    esp,0x8
c00175f9:	68 64 01 00 00       	push   0x164
c00175fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017602:	e8 78 b7 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	83 c4 0c             	add    esp,0xc
c001760d:	c3                   	ret    

c001760e <Video::isMonochrome()>:
c001760e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017612:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017618:	c3                   	ret    
c0017619:	90                   	nop

c001761a <Video::getWidth()>:
c001761a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001761e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017624:	c3                   	ret    
c0017625:	90                   	nop

c0017626 <Video::getHeight()>:
c0017626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001762a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017630:	c3                   	ret    
c0017631:	90                   	nop

c0017632 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017632:	55                   	push   ebp
c0017633:	57                   	push   edi
c0017634:	56                   	push   esi
c0017635:	53                   	push   ebx
c0017636:	83 ec 2c             	sub    esp,0x2c
c0017639:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001763d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017641:	83 f8 01             	cmp    eax,0x1
c0017644:	19 c9                	sbb    ecx,ecx
c0017646:	31 db                	xor    ebx,ebx
c0017648:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001764c:	89 cd                	mov    ebp,ecx
c001764e:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017656:	f7 d5                	not    ebp
c0017658:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001765e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017662:	01 d8                	add    eax,ebx
c0017664:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017668:	56                   	push   esi
c0017669:	e8 b8 ff ff ff       	call   c0017626 <Video::getHeight()>
c001766e:	59                   	pop    ecx
c001766f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017673:	7e 70                	jle    c00176e5 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017675:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017679:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001767d:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0017680:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017684:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017688:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001768f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017693:	89 f8                	mov    eax,edi
c0017695:	83 c0 20             	add    eax,0x20
c0017698:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001769c:	56                   	push   esi
c001769d:	e8 78 ff ff ff       	call   c001761a <Video::getWidth()>
c00176a2:	5a                   	pop    edx
c00176a3:	39 c7                	cmp    edi,eax
c00176a5:	7d 34                	jge    c00176db <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176a7:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176ac:	74 05                	je     c00176b3 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00176b0:	55                   	push   ebp
c00176b1:	eb 0d                	jmp    c00176c0 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176b3:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176b8:	74 12                	je     c00176cc <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00176bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176c4:	57                   	push   edi
c00176c5:	56                   	push   esi
c00176c6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176c9:	83 c4 10             	add    esp,0x10
c00176cc:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176d0:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176d4:	47                   	inc    edi
c00176d5:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176d9:	75 c1                	jne    c001769c <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176db:	43                   	inc    ebx
c00176dc:	83 fb 20             	cmp    ebx,0x20
c00176df:	0f 85 79 ff ff ff    	jne    c001765e <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176e5:	83 c4 2c             	add    esp,0x2c
c00176e8:	5b                   	pop    ebx
c00176e9:	5e                   	pop    esi
c00176ea:	5f                   	pop    edi
c00176eb:	5d                   	pop    ebp
c00176ec:	c3                   	ret    
c00176ed:	90                   	nop

c00176ee <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176ee:	55                   	push   ebp
c00176ef:	57                   	push   edi
c00176f0:	56                   	push   esi
c00176f1:	53                   	push   ebx
c00176f2:	83 ec 28             	sub    esp,0x28
c00176f5:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176f9:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176fd:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017701:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017705:	c1 e7 08             	shl    edi,0x8
c0017708:	01 c7                	add    edi,eax
c001770a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c001770e:	c1 e0 08             	shl    eax,0x8
c0017711:	01 d0                	add    eax,edx
c0017713:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017717:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001771b:	0f af c7             	imul   eax,edi
c001771e:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017725:	50                   	push   eax
c0017726:	e8 89 81 ff ff       	call   c000f8b4 <malloc>
c001772b:	83 c4 10             	add    esp,0x10
c001772e:	89 c5                	mov    ebp,eax
c0017730:	85 c0                	test   eax,eax
c0017732:	75 15                	jne    c0017749 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017734:	83 ec 0c             	sub    esp,0xc
c0017737:	68 09 c1 02 c0       	push   0xc002c109
c001773c:	e8 1e b7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0017741:	83 c4 10             	add    esp,0x10
c0017744:	e9 1c 01 00 00       	jmp    c0017865 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017749:	be 12 00 00 00       	mov    esi,0x12
c001774e:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017752:	74 11                	je     c0017765 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017754:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017758:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001775c:	c1 fe 03             	sar    esi,0x3
c001775f:	0f af f0             	imul   esi,eax
c0017762:	83 c6 12             	add    esi,0x12
c0017765:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017769:	74 04                	je     c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001776b:	85 ff                	test   edi,edi
c001776d:	75 12                	jne    c0017781 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001776f:	83 ec 0c             	sub    esp,0xc
c0017772:	68 20 c1 02 c0       	push   0xc002c120
c0017777:	e8 e3 b6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001777c:	e9 ce 00 00 00       	jmp    c001784f <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0017781:	52                   	push   edx
c0017782:	52                   	push   edx
c0017783:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017787:	50                   	push   eax
c0017788:	68 35 c1 02 c0       	push   0xc002c135
c001778d:	e8 cd b6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0017792:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017796:	83 c4 10             	add    esp,0x10
c0017799:	80 fa 02             	cmp    dl,0x2
c001779c:	0f 85 98 00 00 00    	jne    c001783a <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177a2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177a7:	75 10                	jne    c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177a9:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177ad:	75 0a                	jne    c00177b9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177af:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177b2:	83 e8 18             	sub    eax,0x18
c00177b5:	a8 f7                	test   al,0xf7
c00177b7:	74 0a                	je     c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177b9:	83 ec 0c             	sub    esp,0xc
c00177bc:	68 42 c1 02 c0       	push   0xc002c142
c00177c1:	eb 7f                	jmp    c0017842 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177c3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177cb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177d3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177d7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177df:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177e3:	75 0c                	jne    c00177f1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177e5:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177ea:	c1 e0 18             	shl    eax,0x18
c00177ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177f1:	41                   	inc    ecx
c00177f2:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177f7:	c1 e2 10             	shl    edx,0x10
c00177fa:	89 d0                	mov    eax,edx
c00177fc:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017801:	c1 e2 08             	shl    edx,0x8
c0017804:	09 c2                	or     edx,eax
c0017806:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001780a:	09 c2                	or     edx,eax
c001780c:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017810:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017814:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017818:	c1 f8 03             	sar    eax,0x3
c001781b:	01 c6                	add    esi,eax
c001781d:	89 c8                	mov    eax,ecx
c001781f:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017823:	39 c7                	cmp    edi,eax
c0017825:	7f b0                	jg     c00177d7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017827:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001782b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001782f:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017832:	7e 22                	jle    c0017856 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017834:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017838:	eb 99                	jmp    c00177d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001783a:	50                   	push   eax
c001783b:	50                   	push   eax
c001783c:	52                   	push   edx
c001783d:	68 50 c1 02 c0       	push   0xc002c150
c0017842:	e8 18 b6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0017847:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001784a:	e8 75 80 ff ff       	call   c000f8c4 <free>
c001784f:	83 c4 10             	add    esp,0x10
c0017852:	31 ed                	xor    ebp,ebp
c0017854:	eb 0f                	jmp    c0017865 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017856:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001785a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001785d:	89 38                	mov    DWORD PTR [eax],edi
c001785f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017863:	89 08                	mov    DWORD PTR [eax],ecx
c0017865:	83 c4 1c             	add    esp,0x1c
c0017868:	89 e8                	mov    eax,ebp
c001786a:	5b                   	pop    ebx
c001786b:	5e                   	pop    esi
c001786c:	5f                   	pop    edi
c001786d:	5d                   	pop    ebp
c001786e:	c3                   	ret    
c001786f:	90                   	nop

c0017870 <Video::putTGA(int, int, unsigned char*, int)>:
c0017870:	55                   	push   ebp
c0017871:	57                   	push   edi
c0017872:	56                   	push   esi
c0017873:	53                   	push   ebx
c0017874:	83 ec 28             	sub    esp,0x28
c0017877:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001787b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001787f:	50                   	push   eax
c0017880:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017884:	50                   	push   eax
c0017885:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017889:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001788d:	56                   	push   esi
c001788e:	e8 5b fe ff ff       	call   c00176ee <Video::tgaParse(unsigned char*, int, int*, int*)>
c0017893:	83 c4 20             	add    esp,0x20
c0017896:	85 c0                	test   eax,eax
c0017898:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001789c:	74 35                	je     c00178d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001789e:	89 c7                	mov    edi,eax
c00178a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178a4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178a8:	39 d8                	cmp    eax,ebx
c00178aa:	7e 27                	jle    c00178d3 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178ac:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178b0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178b8:	39 e8                	cmp    eax,ebp
c00178ba:	7e 14                	jle    c00178d0 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178bc:	8b 06                	mov    eax,DWORD PTR [esi]
c00178be:	83 c7 04             	add    edi,0x4
c00178c1:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178c4:	53                   	push   ebx
c00178c5:	55                   	push   ebp
c00178c6:	45                   	inc    ebp
c00178c7:	56                   	push   esi
c00178c8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178cb:	83 c4 10             	add    esp,0x10
c00178ce:	eb e0                	jmp    c00178b0 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178d0:	43                   	inc    ebx
c00178d1:	eb cd                	jmp    c00178a0 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178d3:	83 c4 1c             	add    esp,0x1c
c00178d6:	5b                   	pop    ebx
c00178d7:	5e                   	pop    esi
c00178d8:	5f                   	pop    edi
c00178d9:	5d                   	pop    ebp
c00178da:	c3                   	ret    
c00178db:	90                   	nop

c00178dc <ACPI::close(int, int, void*)>:
c00178dc:	83 ec 1c             	sub    esp,0x1c
c00178df:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178e7:	74 0a                	je     c00178f3 <ACPI::close(int, int, void*)+0x17>
c00178e9:	b8 00 00 00 00       	mov    eax,0x0
c00178ee:	e9 9a 00 00 00       	jmp    c001798d <ACPI::close(int, int, void*)+0xb1>
c00178f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178f8:	75 37                	jne    c0017931 <ACPI::close(int, int, void*)+0x55>
c00178fa:	83 ec 0c             	sub    esp,0xc
c00178fd:	68 ac c1 02 c0       	push   0xc002c1ac
c0017902:	e8 58 b5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0017907:	83 c4 10             	add    esp,0x10
c001790a:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c001790f:	85 c0                	test   eax,eax
c0017911:	74 07                	je     c001791a <ACPI::close(int, int, void*)+0x3e>
c0017913:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0017918:	ff d0                	call   eax
c001791a:	83 ec 0c             	sub    esp,0xc
c001791d:	68 20 c3 02 c0       	push   0xc002c320
c0017922:	e8 d2 2f 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0017927:	83 c4 10             	add    esp,0x10
c001792a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001792f:	eb 5c                	jmp    c001798d <ACPI::close(int, int, void*)+0xb1>
c0017931:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017936:	75 50                	jne    c0017988 <ACPI::close(int, int, void*)+0xac>
c0017938:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c001793d:	85 c0                	test   eax,eax
c001793f:	74 07                	je     c0017948 <ACPI::close(int, int, void*)+0x6c>
c0017941:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c0017946:	ff d0                	call   eax
c0017948:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001794d:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017952:	83 e0 02             	and    eax,0x2
c0017955:	74 1c                	je     c0017973 <ACPI::close(int, int, void*)+0x97>
c0017957:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001795e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017962:	89 c2                	mov    edx,eax
c0017964:	ec                   	in     al,dx
c0017965:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017969:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001796d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017971:	eb da                	jmp    c001794d <ACPI::close(int, int, void*)+0x71>
c0017973:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001797a:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001797f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0017983:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017987:	ee                   	out    dx,al
c0017988:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001798d:	83 c4 1c             	add    esp,0x1c
c0017990:	c3                   	ret    

c0017991 <findRSDP()>:
c0017991:	83 ec 1c             	sub    esp,0x1c
c0017994:	83 ec 0c             	sub    esp,0xc
c0017997:	68 b9 c1 02 c0       	push   0xc002c1b9
c001799c:	e8 be b4 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00179a1:	83 c4 10             	add    esp,0x10
c00179a4:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00179a9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179af:	83 e0 04             	and    eax,0x4
c00179b2:	84 c0                	test   al,al
c00179b4:	75 07                	jne    c00179bd <findRSDP()+0x2c>
c00179b6:	b8 00 00 00 00       	mov    eax,0x0
c00179bb:	eb 6a                	jmp    c0017a27 <findRSDP()+0x96>
c00179bd:	a1 14 f3 02 c0       	mov    eax,ds:0xc002f314
c00179c2:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179c7:	7f 1b                	jg     c00179e4 <findRSDP()+0x53>
c00179c9:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00179ce:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179d4:	83 e2 fb             	and    edx,0xfffffffb
c00179d7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179dd:	b8 00 00 00 00       	mov    eax,0x0
c00179e2:	eb 43                	jmp    c0017a27 <findRSDP()+0x96>
c00179e4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179ec:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179f4:	77 2c                	ja     c0017a22 <findRSDP()+0x91>
c00179f6:	83 ec 04             	sub    esp,0x4
c00179f9:	6a 08                	push   0x8
c00179fb:	68 c7 c1 02 c0       	push   0xc002c1c7
c0017a00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017a04:	e8 6b 8c fe ff       	call   c0000674 <memcmp>
c0017a09:	83 c4 10             	add    esp,0x10
c0017a0c:	85 c0                	test   eax,eax
c0017a0e:	0f 94 c0             	sete   al
c0017a11:	84 c0                	test   al,al
c0017a13:	74 06                	je     c0017a1b <findRSDP()+0x8a>
c0017a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a19:	eb 0c                	jmp    c0017a27 <findRSDP()+0x96>
c0017a1b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a20:	eb ca                	jmp    c00179ec <findRSDP()+0x5b>
c0017a22:	b8 00 00 00 00       	mov    eax,0x0
c0017a27:	83 c4 1c             	add    esp,0x1c
c0017a2a:	c3                   	ret    

c0017a2b <loadACPITables(unsigned char*)>:
c0017a2b:	57                   	push   edi
c0017a2c:	56                   	push   esi
c0017a2d:	53                   	push   ebx
c0017a2e:	83 ec 60             	sub    esp,0x60
c0017a31:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017a36:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a3c:	83 e0 04             	and    eax,0x4
c0017a3f:	84 c0                	test   al,al
c0017a41:	0f 84 33 02 00 00    	je     c0017c7a <loadACPITables(unsigned char*)+0x24f>
c0017a47:	a0 a0 1b 03 c0       	mov    al,ds:0xc0031ba0
c0017a4c:	84 c0                	test   al,al
c0017a4e:	74 75                	je     c0017ac5 <loadACPITables(unsigned char*)+0x9a>
c0017a50:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a54:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0017a58:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a5c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a5f:	83 e8 24             	sub    eax,0x24
c0017a62:	c1 e8 03             	shr    eax,0x3
c0017a65:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017a69:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017a71:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a75:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0017a79:	0f 8d b2 00 00 00    	jge    c0017b31 <loadACPITables(unsigned char*)+0x106>
c0017a7f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017a83:	83 c0 24             	add    eax,0x24
c0017a86:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017a8a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017a8e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017a92:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017a96:	c1 e0 03             	shl    eax,0x3
c0017a99:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0017a9d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017aa1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0017aa6:	89 c1                	mov    ecx,eax
c0017aa8:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017aad:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab0:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c0017ab6:	89 ca                	mov    edx,ecx
c0017ab8:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017abf:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0017ac3:	eb ac                	jmp    c0017a71 <loadACPITables(unsigned char*)+0x46>
c0017ac5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017ac9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017acd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017ad1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ad4:	83 e8 24             	sub    eax,0x24
c0017ad7:	c1 e8 02             	shr    eax,0x2
c0017ada:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017ade:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017ae6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017aea:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017aee:	7d 41                	jge    c0017b31 <loadACPITables(unsigned char*)+0x106>
c0017af0:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017af4:	83 c0 24             	add    eax,0x24
c0017af7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017afb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017aff:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017b03:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017b07:	c1 e0 02             	shl    eax,0x2
c0017b0a:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017b0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b12:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b14:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017b19:	8d 50 01             	lea    edx,[eax+0x1]
c0017b1c:	89 15 8c 19 03 c0    	mov    DWORD PTR ds:0xc003198c,edx
c0017b22:	89 ca                	mov    edx,ecx
c0017b24:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017b2b:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017b2f:	eb b5                	jmp    c0017ae6 <loadACPITables(unsigned char*)+0xbb>
c0017b31:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0017b39:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017b3e:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017b42:	0f 8d 33 01 00 00    	jge    c0017c7b <loadACPITables(unsigned char*)+0x250>
c0017b48:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017b4c:	8b 04 c5 a4 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce65c]
c0017b53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b57:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017b5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b63:	25 ff 0f 00 00       	and    eax,0xfff
c0017b68:	89 c6                	mov    esi,eax
c0017b6a:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017b70:	83 ec 0c             	sub    esp,0xc
c0017b73:	6a 01                	push   0x1
c0017b75:	e8 df 9e ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0017b7a:	83 c4 10             	add    esp,0x10
c0017b7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017b81:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b87:	83 ec 0c             	sub    esp,0xc
c0017b8a:	6a 01                	push   0x1
c0017b8c:	6a 01                	push   0x1
c0017b8e:	50                   	push   eax
c0017b8f:	52                   	push   edx
c0017b90:	53                   	push   ebx
c0017b91:	e8 f0 a9 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b96:	83 c4 20             	add    esp,0x20
c0017b99:	09 f0                	or     eax,esi
c0017b9b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017b9f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017ba3:	c1 e0 03             	shl    eax,0x3
c0017ba6:	05 a0 19 03 c0       	add    eax,0xc00319a0
c0017bab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017baf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bb3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bb7:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0017bbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017bc3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017bc7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bcf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bd3:	89 c6                	mov    esi,eax
c0017bd5:	89 d7                	mov    edi,edx
c0017bd7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bd9:	89 c8                	mov    eax,ecx
c0017bdb:	89 fa                	mov    edx,edi
c0017bdd:	89 f3                	mov    ebx,esi
c0017bdf:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017be3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017be7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017beb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bf2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017bf6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bfa:	05 00 10 00 00       	add    eax,0x1000
c0017bff:	c1 e8 0c             	shr    eax,0xc
c0017c02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017c06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c0a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c12:	25 ff 0f 00 00       	and    eax,0xfff
c0017c17:	89 c6                	mov    esi,eax
c0017c19:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017c1f:	83 ec 0c             	sub    esp,0xc
c0017c22:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017c26:	e8 2e 9e ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0017c2b:	83 c4 10             	add    esp,0x10
c0017c2e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017c32:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c38:	83 ec 0c             	sub    esp,0xc
c0017c3b:	6a 01                	push   0x1
c0017c3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017c41:	50                   	push   eax
c0017c42:	52                   	push   edx
c0017c43:	53                   	push   ebx
c0017c44:	e8 3d a9 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c49:	83 c4 20             	add    esp,0x20
c0017c4c:	09 f0                	or     eax,esi
c0017c4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c56:	83 ec 0c             	sub    esp,0xc
c0017c59:	50                   	push   eax
c0017c5a:	e8 ba a2 ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017c66:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017c6a:	89 14 c5 a4 19 03 c0 	mov    DWORD PTR [eax*8-0x3ffce65c],edx
c0017c71:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017c75:	e9 bf fe ff ff       	jmp    c0017b39 <loadACPITables(unsigned char*)+0x10e>
c0017c7a:	90                   	nop
c0017c7b:	83 c4 60             	add    esp,0x60
c0017c7e:	5b                   	pop    ebx
c0017c7f:	5e                   	pop    esi
c0017c80:	5f                   	pop    edi
c0017c81:	c3                   	ret    

c0017c82 <findRSDT(unsigned char*)>:
c0017c82:	57                   	push   edi
c0017c83:	56                   	push   esi
c0017c84:	53                   	push   ebx
c0017c85:	83 ec 50             	sub    esp,0x50
c0017c88:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017c8d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c93:	83 e0 04             	and    eax,0x4
c0017c96:	84 c0                	test   al,al
c0017c98:	75 0a                	jne    c0017ca4 <findRSDT(unsigned char*)+0x22>
c0017c9a:	b8 00 00 00 00       	mov    eax,0x0
c0017c9f:	e9 21 01 00 00       	jmp    c0017dc5 <findRSDT(unsigned char*)+0x143>
c0017ca4:	89 e0                	mov    eax,esp
c0017ca6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017caa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017cae:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cb2:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017cba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017cbe:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017cc2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017cc6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017cca:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017cce:	89 c6                	mov    esi,eax
c0017cd0:	89 d7                	mov    edi,edx
c0017cd2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cd4:	89 c8                	mov    eax,ecx
c0017cd6:	89 fa                	mov    edx,edi
c0017cd8:	89 f3                	mov    ebx,esi
c0017cda:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017cde:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017ce2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017ce6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017cea:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cee:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cf6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017cfa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cfe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d06:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d0a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d0e:	25 ff 0f 00 00       	and    eax,0xfff
c0017d13:	89 c6                	mov    esi,eax
c0017d15:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017d1b:	83 ec 0c             	sub    esp,0xc
c0017d1e:	6a 02                	push   0x2
c0017d20:	e8 34 9d ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017d2c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d32:	83 ec 0c             	sub    esp,0xc
c0017d35:	6a 01                	push   0x1
c0017d37:	6a 02                	push   0x2
c0017d39:	50                   	push   eax
c0017d3a:	52                   	push   edx
c0017d3b:	53                   	push   ebx
c0017d3c:	e8 45 a8 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d41:	83 c4 20             	add    esp,0x20
c0017d44:	09 f0                	or     eax,esi
c0017d46:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d4a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d4e:	25 ff 0f 00 00       	and    eax,0xfff
c0017d53:	89 c6                	mov    esi,eax
c0017d55:	8b 1d 50 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f450
c0017d5b:	83 ec 0c             	sub    esp,0xc
c0017d5e:	6a 02                	push   0x2
c0017d60:	e8 f4 9c ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c0017d65:	83 c4 10             	add    esp,0x10
c0017d68:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d6c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d72:	83 ec 0c             	sub    esp,0xc
c0017d75:	6a 01                	push   0x1
c0017d77:	6a 02                	push   0x2
c0017d79:	50                   	push   eax
c0017d7a:	52                   	push   edx
c0017d7b:	53                   	push   ebx
c0017d7c:	e8 05 a8 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d81:	83 c4 20             	add    esp,0x20
c0017d84:	09 f0                	or     eax,esi
c0017d86:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d8a:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d8f:	75 11                	jne    c0017da2 <findRSDT(unsigned char*)+0x120>
c0017d91:	c6 05 a0 1b 03 c0 00 	mov    BYTE PTR ds:0xc0031ba0,0x0
c0017d98:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017da0:	eb 1f                	jmp    c0017dc1 <findRSDT(unsigned char*)+0x13f>
c0017da2:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017da7:	75 11                	jne    c0017dba <findRSDT(unsigned char*)+0x138>
c0017da9:	c6 05 a0 1b 03 c0 01 	mov    BYTE PTR ds:0xc0031ba0,0x1
c0017db0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017db4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017db8:	eb 07                	jmp    c0017dc1 <findRSDT(unsigned char*)+0x13f>
c0017dba:	b8 00 00 00 00       	mov    eax,0x0
c0017dbf:	eb 04                	jmp    c0017dc5 <findRSDT(unsigned char*)+0x143>
c0017dc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017dc5:	83 c4 50             	add    esp,0x50
c0017dc8:	5b                   	pop    ebx
c0017dc9:	5e                   	pop    esi
c0017dca:	5f                   	pop    edi
c0017dcb:	c3                   	ret    

c0017dcc <findDataTable(unsigned char*, char*)>:
c0017dcc:	83 ec 1c             	sub    esp,0x1c
c0017dcf:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017dd4:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017dda:	83 e0 04             	and    eax,0x4
c0017ddd:	84 c0                	test   al,al
c0017ddf:	75 07                	jne    c0017de8 <findDataTable(unsigned char*, char*)+0x1c>
c0017de1:	b8 00 00 00 00       	mov    eax,0x0
c0017de6:	eb 7c                	jmp    c0017e64 <findDataTable(unsigned char*, char*)+0x98>
c0017de8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017df0:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0017df5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017df9:	7d 3a                	jge    c0017e35 <findDataTable(unsigned char*, char*)+0x69>
c0017dfb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dff:	c1 e0 03             	shl    eax,0x3
c0017e02:	05 a0 19 03 c0       	add    eax,0xc00319a0
c0017e07:	83 ec 04             	sub    esp,0x4
c0017e0a:	6a 04                	push   0x4
c0017e0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e10:	50                   	push   eax
c0017e11:	e8 5e 88 fe ff       	call   c0000674 <memcmp>
c0017e16:	83 c4 10             	add    esp,0x10
c0017e19:	85 c0                	test   eax,eax
c0017e1b:	0f 94 c0             	sete   al
c0017e1e:	84 c0                	test   al,al
c0017e20:	74 0d                	je     c0017e2f <findDataTable(unsigned char*, char*)+0x63>
c0017e22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e26:	8b 04 c5 a4 19 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffce65c]
c0017e2d:	eb 35                	jmp    c0017e64 <findDataTable(unsigned char*, char*)+0x98>
c0017e2f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017e33:	eb bb                	jmp    c0017df0 <findDataTable(unsigned char*, char*)+0x24>
c0017e35:	a0 a0 1b 03 c0       	mov    al,ds:0xc0031ba0
c0017e3a:	84 c0                	test   al,al
c0017e3c:	74 07                	je     c0017e45 <findDataTable(unsigned char*, char*)+0x79>
c0017e3e:	b8 58 00 00 00       	mov    eax,0x58
c0017e43:	eb 05                	jmp    c0017e4a <findDataTable(unsigned char*, char*)+0x7e>
c0017e45:	b8 52 00 00 00       	mov    eax,0x52
c0017e4a:	83 ec 04             	sub    esp,0x4
c0017e4d:	50                   	push   eax
c0017e4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e52:	68 44 c3 02 c0       	push   0xc002c344
c0017e57:	e8 03 b0 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0017e5c:	83 c4 10             	add    esp,0x10
c0017e5f:	b8 00 00 00 00       	mov    eax,0x0
c0017e64:	83 c4 1c             	add    esp,0x1c
c0017e67:	c3                   	ret    

c0017e68 <scanMADT()>:
c0017e68:	53                   	push   ebx
c0017e69:	83 ec 38             	sub    esp,0x38
c0017e6c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017e71:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e77:	83 e0 04             	and    eax,0x4
c0017e7a:	84 c0                	test   al,al
c0017e7c:	0f 84 63 04 00 00    	je     c00182e5 <scanMADT()+0x47d>
c0017e82:	e8 0a fb ff ff       	call   c0017991 <findRSDP()>
c0017e87:	a3 ac 1b 03 c0       	mov    ds:0xc0031bac,eax
c0017e8c:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c0017e91:	85 c0                	test   eax,eax
c0017e93:	75 19                	jne    c0017eae <scanMADT()+0x46>
c0017e95:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017e9a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea0:	83 e2 fb             	and    edx,0xfffffffb
c0017ea3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ea9:	e9 3b 04 00 00       	jmp    c00182e9 <scanMADT()+0x481>
c0017eae:	a1 ac 1b 03 c0       	mov    eax,ds:0xc0031bac
c0017eb3:	83 ec 0c             	sub    esp,0xc
c0017eb6:	50                   	push   eax
c0017eb7:	e8 c6 fd ff ff       	call   c0017c82 <findRSDT(unsigned char*)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	a3 a8 1b 03 c0       	mov    ds:0xc0031ba8,eax
c0017ec4:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017ec9:	85 c0                	test   eax,eax
c0017ecb:	75 19                	jne    c0017ee6 <scanMADT()+0x7e>
c0017ecd:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017ed2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ed8:	83 e2 fb             	and    edx,0xfffffffb
c0017edb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ee1:	e9 03 04 00 00       	jmp    c00182e9 <scanMADT()+0x481>
c0017ee6:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017eeb:	83 ec 0c             	sub    esp,0xc
c0017eee:	50                   	push   eax
c0017eef:	e8 37 fb ff ff       	call   c0017a2b <loadACPITables(unsigned char*)>
c0017ef4:	83 c4 10             	add    esp,0x10
c0017ef7:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0017efc:	83 ec 08             	sub    esp,0x8
c0017eff:	68 d0 c1 02 c0       	push   0xc002c1d0
c0017f04:	50                   	push   eax
c0017f05:	e8 c2 fe ff ff       	call   c0017dcc <findDataTable(unsigned char*, char*)>
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017f11:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017f16:	75 19                	jne    c0017f31 <scanMADT()+0xc9>
c0017f18:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0017f1d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017f23:	83 e2 fe             	and    edx,0xfffffffe
c0017f26:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017f2c:	e9 b8 03 00 00       	jmp    c00182e9 <scanMADT()+0x481>
c0017f31:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f40:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f44:	0f 87 9f 03 00 00    	ja     c00182e9 <scanMADT()+0x481>
c0017f4a:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f52:	0f 87 91 03 00 00    	ja     c00182e9 <scanMADT()+0x481>
c0017f58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f64:	8d 50 01             	lea    edx,[eax+0x1]
c0017f67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f6b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f6f:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f73:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0017f7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f82:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f86:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f8a:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f8e:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f93:	0f 86 4f 03 00 00    	jbe    c00182e8 <scanMADT()+0x480>
c0017f99:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f9e:	75 57                	jne    c0017ff7 <scanMADT()+0x18f>
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fab:	8a 15 a0 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031da0
c0017fb1:	0f b6 d2             	movzx  edx,dl
c0017fb4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fbc:	88 82 e0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce220],al
c0017fc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fc6:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fcd:	8a 15 a0 1d 03 c0    	mov    dl,BYTE PTR ds:0xc0031da0
c0017fd3:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fd6:	88 0d a0 1d 03 c0    	mov    BYTE PTR ds:0xc0031da0,cl
c0017fdc:	0f b6 d2             	movzx  edx,dl
c0017fdf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fe3:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fe7:	88 82 c0 1d 03 c0    	mov    BYTE PTR [edx-0x3ffce240],al
c0017fed:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ff2:	e9 da 02 00 00       	jmp    c00182d1 <scanMADT()+0x469>
c0017ff7:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017ffc:	0f 85 14 01 00 00    	jne    c0018116 <scanMADT()+0x2ae>
c0018002:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018006:	8d 50 01             	lea    edx,[eax+0x1]
c0018009:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001800d:	8a 15 60 1c 03 c0    	mov    dl,BYTE PTR ds:0xc0031c60
c0018013:	0f b6 d2             	movzx  edx,dl
c0018016:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001801a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001801e:	88 82 80 1c 03 c0    	mov    BYTE PTR [edx-0x3ffce380],al
c0018024:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0018028:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001802c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018030:	01 d0                	add    eax,edx
c0018032:	83 c0 2c             	add    eax,0x2c
c0018035:	8a 00                	mov    al,BYTE PTR [eax]
c0018037:	0f b6 d0             	movzx  edx,al
c001803a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803e:	8d 48 01             	lea    ecx,[eax+0x1]
c0018041:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018045:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018049:	0f b6 c0             	movzx  eax,al
c001804c:	c1 e0 08             	shl    eax,0x8
c001804f:	89 d1                	mov    ecx,edx
c0018051:	09 c1                	or     ecx,eax
c0018053:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018057:	8d 50 02             	lea    edx,[eax+0x2]
c001805a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001805e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018062:	0f b6 c0             	movzx  eax,al
c0018065:	c1 e0 10             	shl    eax,0x10
c0018068:	09 c1                	or     ecx,eax
c001806a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806e:	8d 50 03             	lea    edx,[eax+0x3]
c0018071:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018075:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018079:	0f b6 c0             	movzx  eax,al
c001807c:	c1 e0 18             	shl    eax,0x18
c001807f:	09 c1                	or     ecx,eax
c0018081:	89 ca                	mov    edx,ecx
c0018083:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c0018088:	0f b6 c0             	movzx  eax,al
c001808b:	89 14 85 a0 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce360],edx
c0018092:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018097:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001809b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001809f:	01 d0                	add    eax,edx
c00180a1:	83 c0 2c             	add    eax,0x2c
c00180a4:	8a 00                	mov    al,BYTE PTR [eax]
c00180a6:	0f b6 d0             	movzx  edx,al
c00180a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180ad:	8d 48 01             	lea    ecx,[eax+0x1]
c00180b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180b4:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00180b8:	0f b6 c0             	movzx  eax,al
c00180bb:	c1 e0 08             	shl    eax,0x8
c00180be:	89 d1                	mov    ecx,edx
c00180c0:	09 c1                	or     ecx,eax
c00180c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c6:	8d 50 02             	lea    edx,[eax+0x2]
c00180c9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180cd:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180d1:	0f b6 c0             	movzx  eax,al
c00180d4:	c1 e0 10             	shl    eax,0x10
c00180d7:	09 c1                	or     ecx,eax
c00180d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180dd:	8d 50 03             	lea    edx,[eax+0x3]
c00180e0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180e4:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180e8:	0f b6 c0             	movzx  eax,al
c00180eb:	c1 e0 18             	shl    eax,0x18
c00180ee:	09 c1                	or     ecx,eax
c00180f0:	89 ca                	mov    edx,ecx
c00180f2:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c00180f7:	0f b6 c0             	movzx  eax,al
c00180fa:	89 14 85 20 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce2e0],edx
c0018101:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018106:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c001810b:	40                   	inc    eax
c001810c:	a2 60 1c 03 c0       	mov    ds:0xc0031c60,al
c0018111:	e9 bb 01 00 00       	jmp    c00182d1 <scanMADT()+0x469>
c0018116:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001811b:	0f 85 e9 00 00 00    	jne    c001820a <scanMADT()+0x3a2>
c0018121:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018125:	8d 50 01             	lea    edx,[eax+0x1]
c0018128:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001812c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018130:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018134:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018138:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001813c:	8d 50 01             	lea    edx,[eax+0x1]
c001813f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018143:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018147:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001814b:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001814f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018153:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018157:	01 d0                	add    eax,edx
c0018159:	83 c0 2c             	add    eax,0x2c
c001815c:	8a 00                	mov    al,BYTE PTR [eax]
c001815e:	0f b6 d0             	movzx  edx,al
c0018161:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018165:	8d 48 01             	lea    ecx,[eax+0x1]
c0018168:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001816c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018170:	0f b6 c0             	movzx  eax,al
c0018173:	c1 e0 08             	shl    eax,0x8
c0018176:	89 d1                	mov    ecx,edx
c0018178:	09 c1                	or     ecx,eax
c001817a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001817e:	8d 50 02             	lea    edx,[eax+0x2]
c0018181:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018185:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018189:	0f b6 c0             	movzx  eax,al
c001818c:	c1 e0 10             	shl    eax,0x10
c001818f:	09 c1                	or     ecx,eax
c0018191:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018195:	8d 50 03             	lea    edx,[eax+0x3]
c0018198:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001819c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00181a0:	0f b6 c0             	movzx  eax,al
c00181a3:	c1 e0 18             	shl    eax,0x18
c00181a6:	09 c8                	or     eax,ecx
c00181a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00181ac:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00181b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b9:	01 d0                	add    eax,edx
c00181bb:	83 c0 2c             	add    eax,0x2c
c00181be:	8a 00                	mov    al,BYTE PTR [eax]
c00181c0:	0f b6 c0             	movzx  eax,al
c00181c3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00181c7:	8d 4a 01             	lea    ecx,[edx+0x1]
c00181ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ce:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c00181d2:	0f b6 d2             	movzx  edx,dl
c00181d5:	c1 e2 08             	shl    edx,0x8
c00181d8:	09 d0                	or     eax,edx
c00181da:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181df:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181e4:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181ed:	88 90 20 e5 02 c0    	mov    BYTE PTR [eax-0x3ffd1ae0],dl
c00181f3:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181f8:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181fd:	66 89 84 12 40 1c 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce3c0],ax
c0018205:	e9 c7 00 00 00       	jmp    c00182d1 <scanMADT()+0x469>
c001820a:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001820f:	0f 85 b0 00 00 00    	jne    c00182c5 <scanMADT()+0x45d>
c0018215:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018219:	8d 50 01             	lea    edx,[eax+0x1]
c001821c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018220:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018224:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018228:	0f b6 c0             	movzx  eax,al
c001822b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001822f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018233:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018237:	01 d0                	add    eax,edx
c0018239:	83 c0 2c             	add    eax,0x2c
c001823c:	8a 00                	mov    al,BYTE PTR [eax]
c001823e:	0f b6 d0             	movzx  edx,al
c0018241:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018245:	8d 48 01             	lea    ecx,[eax+0x1]
c0018248:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001824c:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018250:	0f b6 c0             	movzx  eax,al
c0018253:	c1 e0 08             	shl    eax,0x8
c0018256:	09 d0                	or     eax,edx
c0018258:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001825c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018261:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018265:	8d 50 01             	lea    edx,[eax+0x1]
c0018268:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001826c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018270:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018274:	0f b6 c0             	movzx  eax,al
c0018277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001827b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827f:	c1 e0 08             	shl    eax,0x8
c0018282:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018286:	89 c1                	mov    ecx,eax
c0018288:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001828c:	c1 e0 18             	shl    eax,0x18
c001828f:	89 c3                	mov    ebx,eax
c0018291:	a1 b0 1b 03 c0       	mov    eax,ds:0xc0031bb0
c0018296:	8d 50 01             	lea    edx,[eax+0x1]
c0018299:	89 15 b0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bb0,edx
c001829f:	09 d9                	or     ecx,ebx
c00182a1:	89 ca                	mov    edx,ecx
c00182a3:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c00182aa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00182b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00182b6:	68 74 c3 02 c0       	push   0xc002c374
c00182bb:	e8 9f ab ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	eb 0c                	jmp    c00182d1 <scanMADT()+0x469>
c00182c5:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c00182ca:	75 05                	jne    c00182d1 <scanMADT()+0x469>
c00182cc:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c00182d1:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182da:	01 d0                	add    eax,edx
c00182dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182e0:	e9 54 fc ff ff       	jmp    c0017f39 <scanMADT()+0xd1>
c00182e5:	90                   	nop
c00182e6:	eb 01                	jmp    c00182e9 <scanMADT()+0x481>
c00182e8:	90                   	nop
c00182e9:	83 c4 38             	add    esp,0x38
c00182ec:	5b                   	pop    ebx
c00182ed:	c3                   	ret    

c00182ee <ACPI::ACPI()>:
c00182ee:	83 ec 0c             	sub    esp,0xc
c00182f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182f5:	83 ec 08             	sub    esp,0x8
c00182f8:	68 d5 c1 02 c0       	push   0xc002c1d5
c00182fd:	50                   	push   eax
c00182fe:	e8 6d c1 ff ff       	call   c0014470 <Device::Device(char const*)>
c0018303:	83 c4 10             	add    esp,0x10
c0018306:	ba 10 c4 02 c0       	mov    edx,0xc002c410
c001830b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001830f:	89 10                	mov    DWORD PTR [eax],edx
c0018311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018315:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001831c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018320:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001832a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001832e:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018338:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001833c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018347:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001834e:	e8 15 fb ff ff       	call   c0017e68 <scanMADT()>
c0018353:	90                   	nop
c0018354:	83 c4 0c             	add    esp,0xc
c0018357:	c3                   	ret    

c0018358 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018358:	83 ec 2c             	sub    esp,0x2c
c001835b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001835f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018363:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018367:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001836b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0018370:	88 d0                	mov    al,dl
c0018372:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018376:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001837b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018383:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018387:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001838d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0018391:	0f 8d 97 00 00 00    	jge    c001842e <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018397:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001839b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839f:	83 c2 2a             	add    edx,0x2a
c00183a2:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00183a6:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00183ab:	75 78                	jne    c0018425 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183b5:	83 c2 2a             	add    edx,0x2a
c00183b8:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00183bc:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00183c0:	75 63                	jne    c0018425 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00183c2:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00183c7:	74 3a                	je     c0018403 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00183c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183d1:	83 c2 2a             	add    edx,0x2a
c00183d4:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183df:	39 c2                	cmp    edx,eax
c00183e1:	74 10                	je     c00183f3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183e3:	83 ec 0c             	sub    esp,0xc
c00183e6:	68 b0 c3 02 c0       	push   0xc002c3b0
c00183eb:	e8 09 25 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00183f0:	83 c4 10             	add    esp,0x10
c00183f3:	83 ec 0c             	sub    esp,0xc
c00183f6:	68 da c1 02 c0       	push   0xc002c1da
c00183fb:	e8 f9 24 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c0018400:	83 c4 10             	add    esp,0x10
c0018403:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0018407:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001840b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001840f:	83 c2 2a             	add    edx,0x2a
c0018412:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0018416:	8b 02                	mov    eax,DWORD PTR [edx]
c0018418:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001841b:	89 01                	mov    DWORD PTR [ecx],eax
c001841d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018420:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0018425:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0018429:	e9 55 ff ff ff       	jmp    c0018383 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c001842e:	90                   	nop
c001842f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018433:	83 c4 2c             	add    esp,0x2c
c0018436:	c2 04 00             	ret    0x4
c0018439:	90                   	nop

c001843a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001843a:	83 ec 1c             	sub    esp,0x1c
c001843d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018441:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018445:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018449:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001844e:	88 c8                	mov    al,cl
c0018450:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018454:	88 d0                	mov    al,dl
c0018456:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001845a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845e:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018464:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018468:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001846b:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001846f:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018473:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018477:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001847d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018481:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018484:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018488:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001848d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018491:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018497:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001849b:	8d 48 01             	lea    ecx,[eax+0x1]
c001849e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a2:	83 c2 2a             	add    edx,0x2a
c00184a5:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00184a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184ad:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00184b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184b7:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00184ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184be:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00184c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184c6:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184cc:	8d 50 01             	lea    edx,[eax+0x1]
c00184cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184d3:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184dd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184e3:	3d 00 02 00 00       	cmp    eax,0x200
c00184e8:	75 10                	jne    c00184fa <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184ea:	83 ec 0c             	sub    esp,0xc
c00184ed:	68 e9 c1 02 c0       	push   0xc002c1e9
c00184f2:	e8 02 24 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	90                   	nop
c00184fb:	83 c4 1c             	add    esp,0x1c
c00184fe:	c3                   	ret    
c00184ff:	90                   	nop

c0018500 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0018500:	b8 00 00 00 00       	mov    eax,0x0
c0018505:	c3                   	ret    

c0018506 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0018506:	83 ec 1c             	sub    esp,0x1c
c0018509:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001850d:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018510:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018514:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018519:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001851e:	83 ec 08             	sub    esp,0x8
c0018521:	52                   	push   edx
c0018522:	50                   	push   eax
c0018523:	e8 a2 69 ff ff       	call   c000eeca <Computer::readCMOS(unsigned char)>
c0018528:	83 c4 10             	add    esp,0x10
c001852b:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001852f:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018534:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018539:	83 ec 04             	sub    esp,0x4
c001853c:	6a 01                	push   0x1
c001853e:	52                   	push   edx
c001853f:	50                   	push   eax
c0018540:	e8 9b 6a ff ff       	call   c000efe0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018545:	83 c4 10             	add    esp,0x10
c0018548:	90                   	nop
c0018549:	83 c4 1c             	add    esp,0x1c
c001854c:	c3                   	ret    
c001854d:	90                   	nop

c001854e <ACPI::sleep()>:
c001854e:	83 ec 0c             	sub    esp,0xc
c0018551:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c0018556:	85 c0                	test   eax,eax
c0018558:	74 07                	je     c0018561 <ACPI::sleep()+0x13>
c001855a:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001855f:	ff d0                	call   eax
c0018561:	90                   	nop
c0018562:	83 c4 0c             	add    esp,0xc
c0018565:	c3                   	ret    

c0018566 <ACPI::open(int, int, void*)>:
c0018566:	57                   	push   edi
c0018567:	56                   	push   esi
c0018568:	53                   	push   ebx
c0018569:	81 ec 60 01 00 00    	sub    esp,0x160
c001856f:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018576:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001857d:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018584:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001858b:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0018590:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018596:	83 e0 04             	and    eax,0x4
c0018599:	84 c0                	test   al,al
c001859b:	74 53                	je     c00185f0 <ACPI::open(int, int, void*)+0x8a>
c001859d:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c00185a2:	83 ec 08             	sub    esp,0x8
c00185a5:	68 06 c2 02 c0       	push   0xc002c206
c00185aa:	50                   	push   eax
c00185ab:	e8 1c f8 ff ff       	call   c0017dcc <findDataTable(unsigned char*, char*)>
c00185b0:	83 c4 10             	add    esp,0x10
c00185b3:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00185ba:	83 bc 24 5c 01 00 00 00 	cmp    DWORD PTR [esp+0x15c],0x0
c00185c2:	74 2c                	je     c00185f0 <ACPI::open(int, int, void*)+0x8a>
c00185c4:	83 ec 0c             	sub    esp,0xc
c00185c7:	68 0b c2 02 c0       	push   0xc002c20b
c00185cc:	e8 8e a8 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00185d1:	83 c4 10             	add    esp,0x10
c00185d4:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185db:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185e2:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00185e9:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185f0:	c7 84 24 58 01 00 00 5f 0c 00 00 	mov    DWORD PTR [esp+0x158],0xc5f
c00185fb:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c0018602:	8a 00                	mov    al,BYTE PTR [eax]
c0018604:	3c 01                	cmp    al,0x1
c0018606:	75 2e                	jne    c0018636 <ACPI::open(int, int, void*)+0xd0>
c0018608:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001860f:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018616:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001861d:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018624:	83 ec 0c             	sub    esp,0xc
c0018627:	68 1c c2 02 c0       	push   0xc002c21c
c001862c:	e8 2e a8 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0018631:	83 c4 10             	add    esp,0x10
c0018634:	eb 2b                	jmp    c0018661 <ACPI::open(int, int, void*)+0xfb>
c0018636:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c001863d:	8a 00                	mov    al,BYTE PTR [eax]
c001863f:	3c 02                	cmp    al,0x2
c0018641:	75 1e                	jne    c0018661 <ACPI::open(int, int, void*)+0xfb>
c0018643:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c001864a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018651:	83 ec 0c             	sub    esp,0xc
c0018654:	68 24 c2 02 c0       	push   0xc002c224
c0018659:	e8 01 a8 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001865e:	83 c4 10             	add    esp,0x10
c0018661:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018668:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001866e:	83 f0 01             	xor    eax,0x1
c0018671:	84 c0                	test   al,al
c0018673:	74 7c                	je     c00186f1 <ACPI::open(int, int, void*)+0x18b>
c0018675:	83 ec 0c             	sub    esp,0xc
c0018678:	68 2c c2 02 c0       	push   0xc002c22c
c001867d:	e8 dd a7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0018682:	83 c4 10             	add    esp,0x10
c0018685:	e8 c6 7a fe ff       	call   c0000150 <manualPCIProbe>
c001868a:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0018691:	83 bc 24 54 01 00 00 01 	cmp    DWORD PTR [esp+0x154],0x1
c0018699:	75 2e                	jne    c00186c9 <ACPI::open(int, int, void*)+0x163>
c001869b:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186a2:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186a9:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186b0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00186b7:	83 ec 0c             	sub    esp,0xc
c00186ba:	68 3a c2 02 c0       	push   0xc002c23a
c00186bf:	e8 9b a7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00186c4:	83 c4 10             	add    esp,0x10
c00186c7:	eb 28                	jmp    c00186f1 <ACPI::open(int, int, void*)+0x18b>
c00186c9:	83 bc 24 54 01 00 00 02 	cmp    DWORD PTR [esp+0x154],0x2
c00186d1:	75 1e                	jne    c00186f1 <ACPI::open(int, int, void*)+0x18b>
c00186d3:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186da:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00186e1:	83 ec 0c             	sub    esp,0xc
c00186e4:	68 44 c2 02 c0       	push   0xc002c244
c00186e9:	e8 71 a7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00186ee:	83 c4 10             	add    esp,0x10
c00186f1:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c00186f8:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186fe:	84 c0                	test   al,al
c0018700:	74 16                	je     c0018718 <ACPI::open(int, int, void*)+0x1b2>
c0018702:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018709:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c001870f:	83 f0 01             	xor    eax,0x1
c0018712:	0f b6 c0             	movzx  eax,al
c0018715:	40                   	inc    eax
c0018716:	eb 05                	jmp    c001871d <ACPI::open(int, int, void*)+0x1b7>
c0018718:	b8 00 00 00 00       	mov    eax,0x0
c001871d:	83 ec 08             	sub    esp,0x8
c0018720:	50                   	push   eax
c0018721:	68 4e c2 02 c0       	push   0xc002c24e
c0018726:	e8 34 a7 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001872b:	83 c4 10             	add    esp,0x10
c001872e:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018735:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001873b:	84 c0                	test   al,al
c001873d:	74 7c                	je     c00187bb <ACPI::open(int, int, void*)+0x255>
c001873f:	c7 84 24 38 01 00 00 58 01 00 00 	mov    DWORD PTR [esp+0x138],0x158
c001874a:	83 ec 0c             	sub    esp,0xc
c001874d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018754:	e8 5b 71 ff ff       	call   c000f8b4 <malloc>
c0018759:	83 c4 10             	add    esp,0x10
c001875c:	89 c3                	mov    ebx,eax
c001875e:	83 ec 0c             	sub    esp,0xc
c0018761:	53                   	push   ebx
c0018762:	e8 ef aa 00 00       	call   c0023256 <PCI::PCI()>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0018771:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
c0018778:	83 ec 08             	sub    esp,0x8
c001877b:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018782:	50                   	push   eax
c0018783:	e8 f8 ba ff ff       	call   c0014280 <Device::addChild(Device*)>
c0018788:	83 c4 10             	add    esp,0x10
c001878b:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0018792:	8b 00                	mov    eax,DWORD PTR [eax]
c0018794:	83 c0 08             	add    eax,0x8
c0018797:	8b 00                	mov    eax,DWORD PTR [eax]
c0018799:	6a 00                	push   0x0
c001879b:	6a 00                	push   0x0
c001879d:	6a 00                	push   0x0
c001879f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00187a6:	ff d0                	call   eax
c00187a8:	83 c4 10             	add    esp,0x10
c00187ab:	83 ec 0c             	sub    esp,0xc
c00187ae:	68 57 c2 02 c0       	push   0xc002c257
c00187b3:	e8 a7 a6 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00187b8:	83 c4 10             	add    esp,0x10
c00187bb:	83 ec 0c             	sub    esp,0xc
c00187be:	68 62 c2 02 c0       	push   0xc002c262
c00187c3:	e8 8e 4a 00 00       	call   c001d256 <Thr::loadKernelSymbolTable(char const*)>
c00187c8:	83 c4 10             	add    esp,0x10
c00187cb:	83 ec 0c             	sub    esp,0xc
c00187ce:	6a 0c                	push   0xc
c00187d0:	e8 c3 94 ff ff       	call   c0011c98 <Virt::setupPageSwapping(int)>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00187df:	83 ec 08             	sub    esp,0x8
c00187e2:	6a 12                	push   0x12
c00187e4:	50                   	push   eax
c00187e5:	e8 06 be ff ff       	call   c00145f0 <getDevicesOfType(DeviceType)>
c00187ea:	83 c4 0c             	add    esp,0xc
c00187ed:	83 ec 0c             	sub    esp,0xc
c00187f0:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c00187f7:	50                   	push   eax
c00187f8:	e8 93 10 01 00       	call   c0029890 <LinkedList<Device>::isEmpty()>
c00187fd:	83 c4 10             	add    esp,0x10
c0018800:	83 f0 01             	xor    eax,0x1
c0018803:	84 c0                	test   al,al
c0018805:	0f 84 20 01 00 00    	je     c001892b <ACPI::open(int, int, void*)+0x3c5>
c001880b:	83 ec 0c             	sub    esp,0xc
c001880e:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018815:	50                   	push   eax
c0018816:	e8 91 10 01 00       	call   c00298ac <LinkedList<Device>::getFirstElement()>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	89 84 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],eax
c0018825:	83 ec 0c             	sub    esp,0xc
c0018828:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c001882f:	50                   	push   eax
c0018830:	e8 7f 10 01 00       	call   c00298b4 <LinkedList<Device>::removeFirst()>
c0018835:	83 c4 10             	add    esp,0x10
c0018838:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c001883f:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0018846:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001884d:	83 ec 0c             	sub    esp,0xc
c0018850:	50                   	push   eax
c0018851:	e8 16 bd ff ff       	call   c001456c <Device::getName()>
c0018856:	83 c4 10             	add    esp,0x10
c0018859:	83 ec 08             	sub    esp,0x8
c001885c:	50                   	push   eax
c001885d:	68 e0 c3 02 c0       	push   0xc002c3e0
c0018862:	e8 f8 a5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0018867:	83 c4 10             	add    esp,0x10
c001886a:	8b 94 24 48 01 00 00 	mov    edx,DWORD PTR [esp+0x148]
c0018871:	8d 44 24 04          	lea    eax,[esp+0x4]
c0018875:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c001887b:	ba 09 00 00 00       	mov    edx,0x9
c0018880:	fc                   	cld    
c0018881:	89 c7                	mov    edi,eax
c0018883:	89 de                	mov    esi,ebx
c0018885:	89 d1                	mov    ecx,edx
c0018887:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018889:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001888d:	0f b6 c0             	movzx  eax,al
c0018890:	83 ec 08             	sub    esp,0x8
c0018893:	50                   	push   eax
c0018894:	68 80 c2 02 c0       	push   0xc002c280
c0018899:	e8 c1 a5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001889e:	83 c4 10             	add    esp,0x10
c00188a1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00188a5:	0f b6 c0             	movzx  eax,al
c00188a8:	83 ec 08             	sub    esp,0x8
c00188ab:	50                   	push   eax
c00188ac:	68 92 c2 02 c0       	push   0xc002c292
c00188b1:	e8 a9 a5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00188b6:	83 c4 10             	add    esp,0x10
c00188b9:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00188be:	0f b7 c0             	movzx  eax,ax
c00188c1:	83 ec 08             	sub    esp,0x8
c00188c4:	50                   	push   eax
c00188c5:	68 a4 c2 02 c0       	push   0xc002c2a4
c00188ca:	e8 90 a5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00188cf:	83 c4 10             	add    esp,0x10
c00188d2:	83 ec 08             	sub    esp,0x8
c00188d5:	8d 44 24 30          	lea    eax,[esp+0x30]
c00188d9:	50                   	push   eax
c00188da:	83 ec 24             	sub    esp,0x24
c00188dd:	89 e0                	mov    eax,esp
c00188df:	89 c3                	mov    ebx,eax
c00188e1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00188e5:	ba 09 00 00 00       	mov    edx,0x9
c00188ea:	89 df                	mov    edi,ebx
c00188ec:	89 c6                	mov    esi,eax
c00188ee:	89 d1                	mov    ecx,edx
c00188f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188f2:	e8 c1 ac 00 00       	call   c00235b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c00188f7:	83 c4 30             	add    esp,0x30
c00188fa:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c0018901:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018909:	0f 84 de fe ff ff    	je     c00187ed <ACPI::open(int, int, void*)+0x287>
c001890f:	83 ec 08             	sub    esp,0x8
c0018912:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018919:	68 b6 c2 02 c0       	push   0xc002c2b6
c001891e:	e8 3c a5 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0018923:	83 c4 10             	add    esp,0x10
c0018926:	e9 c2 fe ff ff       	jmp    c00187ed <ACPI::open(int, int, void*)+0x287>
c001892b:	83 ec 0c             	sub    esp,0xc
c001892e:	8d 84 24 34 01 00 00 	lea    eax,[esp+0x134]
c0018935:	50                   	push   eax
c0018936:	e8 53 0f 01 00       	call   c002988e <LinkedList<Device>::~LinkedList()>
c001893b:	83 c4 10             	add    esp,0x10
c001893e:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0018944:	83 ec 08             	sub    esp,0x8
c0018947:	6a 01                	push   0x1
c0018949:	68 c2 c2 02 c0       	push   0xc002c2c2
c001894e:	e8 7a 53 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0018953:	83 c4 10             	add    esp,0x10
c0018956:	83 ec 08             	sub    esp,0x8
c0018959:	53                   	push   ebx
c001895a:	50                   	push   eax
c001895b:	e8 98 55 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0018960:	83 c4 10             	add    esp,0x10
c0018963:	8b 1d c8 f2 02 c0    	mov    ebx,DWORD PTR ds:0xc002f2c8
c0018969:	83 ec 08             	sub    esp,0x8
c001896c:	6a 01                	push   0x1
c001896e:	68 df c2 02 c0       	push   0xc002c2df
c0018973:	e8 55 53 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0018978:	83 c4 10             	add    esp,0x10
c001897b:	83 ec 08             	sub    esp,0x8
c001897e:	53                   	push   ebx
c001897f:	50                   	push   eax
c0018980:	e8 73 55 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0018985:	83 c4 10             	add    esp,0x10
c0018988:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001898d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018993:	83 e0 04             	and    eax,0x4
c0018996:	84 c0                	test   al,al
c0018998:	0f 84 fd 00 00 00    	je     c0018a9b <ACPI::open(int, int, void*)+0x535>
c001899e:	c7 84 24 34 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x134],0x114
c00189a9:	83 ec 0c             	sub    esp,0xc
c00189ac:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00189b3:	e8 fc 6e ff ff       	call   c000f8b4 <malloc>
c00189b8:	83 c4 10             	add    esp,0x10
c00189bb:	89 c3                	mov    ebx,eax
c00189bd:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00189c2:	83 ec 04             	sub    esp,0x4
c00189c5:	50                   	push   eax
c00189c6:	68 fc c2 02 c0       	push   0xc002c2fc
c00189cb:	53                   	push   ebx
c00189cc:	e8 ed a9 ff ff       	call   c00133be <File::File(char const*, Process*)>
c00189d1:	83 c4 10             	add    esp,0x10
c00189d4:	89 9c 24 40 01 00 00 	mov    DWORD PTR [esp+0x140],ebx
c00189db:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c00189e3:	74 1a                	je     c00189ff <ACPI::open(int, int, void*)+0x499>
c00189e5:	83 ec 0c             	sub    esp,0xc
c00189e8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00189ef:	e8 9c ac ff ff       	call   c0013690 <File::exists()>
c00189f4:	83 c4 10             	add    esp,0x10
c00189f7:	84 c0                	test   al,al
c00189f9:	74 04                	je     c00189ff <ACPI::open(int, int, void*)+0x499>
c00189fb:	b0 01                	mov    al,0x1
c00189fd:	eb 02                	jmp    c0018a01 <ACPI::open(int, int, void*)+0x49b>
c00189ff:	b0 00                	mov    al,0x0
c0018a01:	84 c0                	test   al,al
c0018a03:	74 25                	je     c0018a2a <ACPI::open(int, int, void*)+0x4c4>
c0018a05:	83 ec 08             	sub    esp,0x8
c0018a08:	6a 01                	push   0x1
c0018a0a:	68 fc c2 02 c0       	push   0xc002c2fc
c0018a0f:	e8 b9 52 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	83 ec 08             	sub    esp,0x8
c0018a1a:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c0018a21:	50                   	push   eax
c0018a22:	e8 d1 54 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c0018a27:	83 c4 10             	add    esp,0x10
c0018a2a:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a32:	74 27                	je     c0018a5b <ACPI::open(int, int, void*)+0x4f5>
c0018a34:	83 bc 24 40 01 00 00 00 	cmp    DWORD PTR [esp+0x140],0x0
c0018a3c:	74 1d                	je     c0018a5b <ACPI::open(int, int, void*)+0x4f5>
c0018a3e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0018a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a47:	83 c0 08             	add    eax,0x8
c0018a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a4c:	83 ec 0c             	sub    esp,0xc
c0018a4f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018a56:	ff d0                	call   eax
c0018a58:	83 c4 10             	add    esp,0x10
c0018a5b:	a1 a8 1b 03 c0       	mov    eax,ds:0xc0031ba8
c0018a60:	83 ec 08             	sub    esp,0x8
c0018a63:	68 19 c3 02 c0       	push   0xc002c319
c0018a68:	50                   	push   eax
c0018a69:	e8 5e f3 ff ff       	call   c0017dcc <findDataTable(unsigned char*, char*)>
c0018a6e:	83 c4 10             	add    esp,0x10
c0018a71:	89 84 24 3c 01 00 00 	mov    DWORD PTR [esp+0x13c],eax
c0018a78:	83 bc 24 3c 01 00 00 00 	cmp    DWORD PTR [esp+0x13c],0x0
c0018a80:	74 19                	je     c0018a9b <ACPI::open(int, int, void*)+0x535>
c0018a82:	83 ec 08             	sub    esp,0x8
c0018a85:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0018a8c:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c0018a93:	e8 6e fa ff ff       	call   c0018506 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018a98:	83 c4 10             	add    esp,0x10
c0018a9b:	b8 00 00 00 00       	mov    eax,0x0
c0018aa0:	81 c4 60 01 00 00    	add    esp,0x160
c0018aa6:	5b                   	pop    ebx
c0018aa7:	5e                   	pop    esi
c0018aa8:	5f                   	pop    edi
c0018aa9:	c3                   	ret    

c0018aaa <CPU::close(int, int, void*)>:
c0018aaa:	31 c0                	xor    eax,eax
c0018aac:	c3                   	ret    
c0018aad:	90                   	nop

c0018aae <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018aae:	55                   	push   ebp
c0018aaf:	57                   	push   edi
c0018ab0:	56                   	push   esi
c0018ab1:	53                   	push   ebx
c0018ab2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018ab6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018aba:	89 ce                	mov    esi,ecx
c0018abc:	89 d5                	mov    ebp,edx
c0018abe:	80 f9 04             	cmp    cl,0x4
c0018ac1:	75 28                	jne    c0018aeb <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018ac3:	8d 42 f9             	lea    eax,[edx-0x7]
c0018ac6:	3c 03                	cmp    al,0x3
c0018ac8:	0f 86 63 01 00 00    	jbe    c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018ace:	80 fa 03             	cmp    dl,0x3
c0018ad1:	0f 84 5a 01 00 00    	je     c0018c31 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018ad7:	8d 7a f2             	lea    edi,[edx-0xe]
c0018ada:	b8 f0 e6 02 c0       	mov    eax,0xc002e6f0
c0018adf:	89 fb                	mov    ebx,edi
c0018ae1:	80 fb 01             	cmp    bl,0x1
c0018ae4:	77 4e                	ja     c0018b34 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018ae6:	e9 52 01 00 00       	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aeb:	80 f9 05             	cmp    cl,0x5
c0018aee:	75 4d                	jne    c0018b3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018af0:	b8 00 e7 02 c0       	mov    eax,0xc002e700
c0018af5:	80 fa 03             	cmp    dl,0x3
c0018af8:	0f 86 3f 01 00 00    	jbe    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018afe:	8d 7a fa             	lea    edi,[edx-0x6]
c0018b01:	b8 10 e7 02 c0       	mov    eax,0xc002e710
c0018b06:	89 fb                	mov    ebx,edi
c0018b08:	80 fb 01             	cmp    bl,0x1
c0018b0b:	0f 86 2c 01 00 00    	jbe    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b11:	b8 20 e7 02 c0       	mov    eax,0xc002e720
c0018b16:	80 fa 08             	cmp    dl,0x8
c0018b19:	0f 84 1e 01 00 00    	je     c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b1f:	89 d7                	mov    edi,edx
c0018b21:	b8 30 e7 02 c0       	mov    eax,0xc002e730
c0018b26:	83 e7 fb             	and    edi,0xfffffffb
c0018b29:	89 fb                	mov    ebx,edi
c0018b2b:	80 fb 09             	cmp    bl,0x9
c0018b2e:	0f 84 09 01 00 00    	je     c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b34:	31 c0                	xor    eax,eax
c0018b36:	89 eb                	mov    ebx,ebp
c0018b38:	0f b6 fb             	movzx  edi,bl
c0018b3b:	eb 30                	jmp    c0018b6d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018b3d:	31 c0                	xor    eax,eax
c0018b3f:	80 f9 06             	cmp    cl,0x6
c0018b42:	75 f2                	jne    c0018b36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b44:	80 fa 0a             	cmp    dl,0xa
c0018b47:	77 ed                	ja     c0018b36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b49:	bf de 05 00 00       	mov    edi,0x5de
c0018b4e:	0f a3 d7             	bt     edi,edx
c0018b51:	73 e3                	jae    c0018b36 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018b53:	b8 40 e7 02 c0       	mov    eax,0xc002e740
c0018b58:	e9 e0 00 00 00       	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b5d:	39 c7                	cmp    edi,eax
c0018b5f:	0f 84 d3 00 00 00    	je     c0018c38 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018b65:	40                   	inc    eax
c0018b66:	3d d0 00 00 00       	cmp    eax,0xd0
c0018b6b:	74 09                	je     c0018b76 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018b6d:	89 f3                	mov    ebx,esi
c0018b6f:	80 fb 0f             	cmp    bl,0xf
c0018b72:	75 f1                	jne    c0018b65 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018b74:	eb e7                	jmp    c0018b5d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018b76:	80 f9 10             	cmp    cl,0x10
c0018b79:	75 14                	jne    c0018b8f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018b7b:	8d 42 fc             	lea    eax,[edx-0x4]
c0018b7e:	83 e0 fb             	and    eax,0xfffffffb
c0018b81:	3c 02                	cmp    al,0x2
c0018b83:	76 34                	jbe    c0018bb9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018b85:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018b8a:	80 fa 02             	cmp    dl,0x2
c0018b8d:	eb 24                	jmp    c0018bb3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018b8f:	80 f9 11             	cmp    cl,0x11
c0018b92:	75 13                	jne    c0018ba7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018b94:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018b99:	80 fa 03             	cmp    dl,0x3
c0018b9c:	0f 85 9b 00 00 00    	jne    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ba2:	e9 91 00 00 00       	jmp    c0018c38 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018ba7:	80 f9 12             	cmp    cl,0x12
c0018baa:	75 14                	jne    c0018bc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018bac:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018bb1:	fe ca                	dec    dl
c0018bb3:	0f 85 84 00 00 00    	jne    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bb9:	b8 60 e7 02 c0       	mov    eax,0xc002e760
c0018bbe:	eb 7d                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bc0:	80 f9 14             	cmp    cl,0x14
c0018bc3:	75 12                	jne    c0018bd7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018bc5:	4a                   	dec    edx
c0018bc6:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018bcb:	80 fa 01             	cmp    dl,0x1
c0018bce:	77 6d                	ja     c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd0:	b8 70 e7 02 c0       	mov    eax,0xc002e770
c0018bd5:	eb 66                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bd7:	80 f9 15             	cmp    cl,0x15
c0018bda:	75 31                	jne    c0018c0d <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018bdc:	b8 80 e7 02 c0       	mov    eax,0xc002e780
c0018be1:	80 fa 01             	cmp    dl,0x1
c0018be4:	74 57                	je     c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018be6:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018beb:	80 fa 13             	cmp    dl,0x13
c0018bee:	76 0c                	jbe    c0018bfc <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018bf0:	80 fa 30             	cmp    dl,0x30
c0018bf3:	75 48                	jne    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bf5:	b8 a0 e7 02 c0       	mov    eax,0xc002e7a0
c0018bfa:	eb 41                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018bfc:	b9 04 00 09 00       	mov    ecx,0x90004
c0018c01:	0f a3 d1             	bt     ecx,edx
c0018c04:	73 37                	jae    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c06:	b8 90 e7 02 c0       	mov    eax,0xc002e790
c0018c0b:	eb 30                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c0d:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018c12:	80 f9 16             	cmp    cl,0x16
c0018c15:	75 26                	jne    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c17:	b8 b0 e7 02 c0       	mov    eax,0xc002e7b0
c0018c1c:	84 d2                	test   dl,dl
c0018c1e:	74 1d                	je     c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c20:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018c25:	80 fa 30             	cmp    dl,0x30
c0018c28:	75 13                	jne    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c2a:	b8 c0 e7 02 c0       	mov    eax,0xc002e7c0
c0018c2f:	eb 0c                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c31:	b8 e0 e6 02 c0       	mov    eax,0xc002e6e0
c0018c36:	eb 05                	jmp    c0018c3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018c38:	b8 50 e7 02 c0       	mov    eax,0xc002e750
c0018c3d:	5b                   	pop    ebx
c0018c3e:	5e                   	pop    esi
c0018c3f:	5f                   	pop    edi
c0018c40:	5d                   	pop    ebp
c0018c41:	c3                   	ret    

c0018c42 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018c42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018c4a:	80 f9 04             	cmp    cl,0x4
c0018c4d:	75 6b                	jne    c0018cba <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018c4f:	b8 40 e5 02 c0       	mov    eax,0xc002e540
c0018c54:	80 fa 01             	cmp    dl,0x1
c0018c57:	0f 86 92 02 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5d:	b8 50 e5 02 c0       	mov    eax,0xc002e550
c0018c62:	80 fa 02             	cmp    dl,0x2
c0018c65:	0f 84 84 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6b:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018c70:	80 fa 03             	cmp    dl,0x3
c0018c73:	0f 84 76 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c79:	b8 70 e5 02 c0       	mov    eax,0xc002e570
c0018c7e:	80 fa 04             	cmp    dl,0x4
c0018c81:	0f 84 68 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c87:	b8 80 e5 02 c0       	mov    eax,0xc002e580
c0018c8c:	80 fa 05             	cmp    dl,0x5
c0018c8f:	0f 84 5a 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c95:	b8 60 e5 02 c0       	mov    eax,0xc002e560
c0018c9a:	80 fa 07             	cmp    dl,0x7
c0018c9d:	0f 84 4c 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca3:	83 ea 08             	sub    edx,0x8
c0018ca6:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018cab:	80 fa 01             	cmp    dl,0x1
c0018cae:	0f 87 3b 02 00 00    	ja     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb4:	b8 90 e5 02 c0       	mov    eax,0xc002e590
c0018cb9:	c3                   	ret    
c0018cba:	80 f9 05             	cmp    cl,0x5
c0018cbd:	75 45                	jne    c0018d04 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018cbf:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018cc2:	b8 a0 e5 02 c0       	mov    eax,0xc002e5a0
c0018cc7:	80 f9 02             	cmp    cl,0x2
c0018cca:	0f 86 1f 02 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd0:	80 fa 04             	cmp    dl,0x4
c0018cd3:	0f 84 f3 01 00 00    	je     c0018ecc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018cd9:	80 fa 07             	cmp    dl,0x7
c0018cdc:	0f 84 0d 02 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce2:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018ce7:	80 fa 08             	cmp    dl,0x8
c0018cea:	0f 84 ff 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf0:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018cf5:	80 fa 09             	cmp    dl,0x9
c0018cf8:	0f 85 f1 01 00 00    	jne    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cfe:	b8 c0 e5 02 c0       	mov    eax,0xc002e5c0
c0018d03:	c3                   	ret    
c0018d04:	80 f9 06             	cmp    cl,0x6
c0018d07:	0f 85 85 01 00 00    	jne    c0018e92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018d0d:	b8 d0 e5 02 c0       	mov    eax,0xc002e5d0
c0018d12:	80 fa 01             	cmp    dl,0x1
c0018d15:	0f 84 d4 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1b:	8d 42 fb             	lea    eax,[edx-0x5]
c0018d1e:	3c 01                	cmp    al,0x1
c0018d20:	0f 86 ac 01 00 00    	jbe    c0018ed2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d26:	80 fa 03             	cmp    dl,0x3
c0018d29:	0f 84 a3 01 00 00    	je     c0018ed2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018d2f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018d32:	b8 f0 e5 02 c0       	mov    eax,0xc002e5f0
c0018d37:	80 f9 01             	cmp    cl,0x1
c0018d3a:	0f 86 af 01 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d40:	80 fa 09             	cmp    dl,0x9
c0018d43:	0f 84 8f 01 00 00    	je     c0018ed8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018d49:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018d4c:	80 f9 01             	cmp    cl,0x1
c0018d4f:	0f 86 9a 01 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d55:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018d5a:	80 fa 0d             	cmp    dl,0xd
c0018d5d:	0f 84 8c 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d63:	b8 10 e6 02 c0       	mov    eax,0xc002e610
c0018d68:	80 fa 0e             	cmp    dl,0xe
c0018d6b:	0f 84 7e 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d71:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018d76:	80 fa 0f             	cmp    dl,0xf
c0018d79:	0f 84 70 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d7f:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018d84:	80 fa 15             	cmp    dl,0x15
c0018d87:	0f 84 62 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018d90:	b8 20 e6 02 c0       	mov    eax,0xc002e620
c0018d95:	80 f9 01             	cmp    cl,0x1
c0018d98:	0f 86 51 01 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d9e:	80 fa 1a             	cmp    dl,0x1a
c0018da1:	0f 84 37 01 00 00    	je     c0018ede <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018da7:	80 fa 1c             	cmp    dl,0x1c
c0018daa:	0f 84 34 01 00 00    	je     c0018ee4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018db0:	80 fa 1d             	cmp    dl,0x1d
c0018db3:	0f 84 36 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018db9:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018dbe:	80 fa 25             	cmp    dl,0x25
c0018dc1:	0f 84 28 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc7:	8d 4a da             	lea    ecx,[edx-0x26]
c0018dca:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018dcf:	80 f9 01             	cmp    cl,0x1
c0018dd2:	0f 86 17 01 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dd8:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018ddd:	80 fa 2a             	cmp    dl,0x2a
c0018de0:	0f 84 09 01 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de6:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018deb:	80 fa 2c             	cmp    dl,0x2c
c0018dee:	0f 84 fb 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018df4:	b8 60 e6 02 c0       	mov    eax,0xc002e660
c0018df9:	80 fa 2d             	cmp    dl,0x2d
c0018dfc:	0f 84 ed 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e02:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018e07:	80 fa 2e             	cmp    dl,0x2e
c0018e0a:	0f 84 df 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e10:	b8 50 e6 02 c0       	mov    eax,0xc002e650
c0018e15:	80 fa 2f             	cmp    dl,0x2f
c0018e18:	0f 84 d1 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e1e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018e21:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018e26:	80 f9 01             	cmp    cl,0x1
c0018e29:	0f 86 c0 00 00 00    	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e2f:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018e34:	80 fa 37             	cmp    dl,0x37
c0018e37:	0f 84 b2 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e3d:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018e42:	80 fa 3a             	cmp    dl,0x3a
c0018e45:	0f 84 a4 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e4b:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018e50:	80 fa 3c             	cmp    dl,0x3c
c0018e53:	0f 84 96 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e59:	b8 a0 e6 02 c0       	mov    eax,0xc002e6a0
c0018e5e:	80 fa 3d             	cmp    dl,0x3d
c0018e61:	0f 84 88 00 00 00    	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e67:	b8 80 e6 02 c0       	mov    eax,0xc002e680
c0018e6c:	80 fa 3e             	cmp    dl,0x3e
c0018e6f:	74 7e                	je     c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e71:	8d 42 bb             	lea    eax,[edx-0x45]
c0018e74:	3c 01                	cmp    al,0x1
c0018e76:	76 72                	jbe    c0018eea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e78:	80 fa 3f             	cmp    dl,0x3f
c0018e7b:	74 6d                	je     c0018eea <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018e7d:	80 fa 4a             	cmp    dl,0x4a
c0018e80:	74 0a                	je     c0018e8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018e82:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018e87:	80 fa 4d             	cmp    dl,0x4d
c0018e8a:	75 63                	jne    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018e8c:	b8 70 e6 02 c0       	mov    eax,0xc002e670
c0018e91:	c3                   	ret    
c0018e92:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018e97:	80 f9 0b             	cmp    cl,0xb
c0018e9a:	75 0a                	jne    c0018ea6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018e9c:	fe ca                	dec    dl
c0018e9e:	75 4f                	jne    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ea0:	b8 b0 e6 02 c0       	mov    eax,0xc002e6b0
c0018ea5:	c3                   	ret    
c0018ea6:	80 f9 0f             	cmp    cl,0xf
c0018ea9:	75 44                	jne    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eab:	b8 c0 e6 02 c0       	mov    eax,0xc002e6c0
c0018eb0:	80 fa 02             	cmp    dl,0x2
c0018eb3:	76 3a                	jbe    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018eb5:	8d 42 fd             	lea    eax,[edx-0x3]
c0018eb8:	3c 01                	cmp    al,0x1
c0018eba:	76 0a                	jbe    c0018ec6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018ebc:	b8 26 c7 02 c0       	mov    eax,0xc002c726
c0018ec1:	80 fa 06             	cmp    dl,0x6
c0018ec4:	75 29                	jne    c0018eef <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ec6:	b8 d0 e6 02 c0       	mov    eax,0xc002e6d0
c0018ecb:	c3                   	ret    
c0018ecc:	b8 b0 e5 02 c0       	mov    eax,0xc002e5b0
c0018ed1:	c3                   	ret    
c0018ed2:	b8 e0 e5 02 c0       	mov    eax,0xc002e5e0
c0018ed7:	c3                   	ret    
c0018ed8:	b8 00 e6 02 c0       	mov    eax,0xc002e600
c0018edd:	c3                   	ret    
c0018ede:	b8 30 e6 02 c0       	mov    eax,0xc002e630
c0018ee3:	c3                   	ret    
c0018ee4:	b8 40 e6 02 c0       	mov    eax,0xc002e640
c0018ee9:	c3                   	ret    
c0018eea:	b8 90 e6 02 c0       	mov    eax,0xc002e690
c0018eef:	c3                   	ret    

c0018ef0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018ef0:	60                   	pusha  
c0018ef1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018ef9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018efd:	9c                   	pushf  
c0018efe:	fa                   	cli    
c0018eff:	0f 09                	wbinvd 
c0018f01:	0f 30                	wrmsr  
c0018f03:	9d                   	popf   
c0018f04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f08:	89 02                	mov    DWORD PTR [edx],eax
c0018f0a:	61                   	popa   
c0018f0b:	c3                   	ret    

c0018f0c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018f0c:	60                   	pusha  
c0018f0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018f11:	9c                   	pushf  
c0018f12:	fa                   	cli    
c0018f13:	0f 09                	wbinvd 
c0018f15:	31 c0                	xor    eax,eax
c0018f17:	31 d2                	xor    edx,edx
c0018f19:	0f 32                	rdmsr  
c0018f1b:	9d                   	popf   
c0018f1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018f20:	89 02                	mov    DWORD PTR [edx],eax
c0018f22:	61                   	popa   
c0018f23:	c3                   	ret    

c0018f24 <CPU::AMD_K6_writeback(int, int, int)>:
c0018f24:	56                   	push   esi
c0018f25:	53                   	push   ebx
c0018f26:	83 ec 10             	sub    esp,0x10
c0018f29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018f2d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018f32:	75 5d                	jne    c0018f91 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f34:	83 f8 08             	cmp    eax,0x8
c0018f37:	75 09                	jne    c0018f42 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018f39:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018f3e:	7e 13                	jle    c0018f53 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f40:	eb 30                	jmp    c0018f72 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f42:	83 f8 06             	cmp    eax,0x6
c0018f45:	7c 4a                	jl     c0018f91 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f47:	83 f8 07             	cmp    eax,0x7
c0018f4a:	7e 07                	jle    c0018f53 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018f4c:	83 f8 09             	cmp    eax,0x9
c0018f4f:	74 21                	je     c0018f72 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018f51:	eb 3e                	jmp    c0018f91 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018f53:	89 e6                	mov    esi,esp
c0018f55:	8b 1d 08 f3 02 c0    	mov    ebx,DWORD PTR ds:0xc002f308
c0018f5b:	56                   	push   esi
c0018f5c:	c1 eb 15             	shr    ebx,0x15
c0018f5f:	68 82 00 00 c0       	push   0xc0000082
c0018f64:	83 e3 7e             	and    ebx,0x7e
c0018f67:	e8 a0 ff ff ff       	call   c0018f0c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f6c:	56                   	push   esi
c0018f6d:	6a 00                	push   0x0
c0018f6f:	53                   	push   ebx
c0018f70:	eb 12                	jmp    c0018f84 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018f72:	89 e3                	mov    ebx,esp
c0018f74:	53                   	push   ebx
c0018f75:	68 82 00 00 c0       	push   0xc0000082
c0018f7a:	e8 8d ff ff ff       	call   c0018f0c <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018f7f:	53                   	push   ebx
c0018f80:	6a 00                	push   0x0
c0018f82:	6a 00                	push   0x0
c0018f84:	68 82 00 00 c0       	push   0xc0000082
c0018f89:	e8 62 ff ff ff       	call   c0018ef0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018f8e:	83 c4 18             	add    esp,0x18
c0018f91:	83 c4 10             	add    esp,0x10
c0018f94:	5b                   	pop    ebx
c0018f95:	5e                   	pop    esi
c0018f96:	c3                   	ret    
c0018f97:	90                   	nop

c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018f98:	55                   	push   ebp
c0018f99:	57                   	push   edi
c0018f9a:	56                   	push   esi
c0018f9b:	53                   	push   ebx
c0018f9c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fa0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018fa4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018fa8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018fac:	39 05 e0 e7 02 c0    	cmp    DWORD PTR ds:0xc002e7e0,eax
c0018fb2:	75 23                	jne    c0018fd7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018fb4:	a1 0c 1e 03 c0       	mov    eax,ds:0xc0031e0c
c0018fb9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018fbd:	89 06                	mov    DWORD PTR [esi],eax
c0018fbf:	a1 08 1e 03 c0       	mov    eax,ds:0xc0031e08
c0018fc4:	89 07                	mov    DWORD PTR [edi],eax
c0018fc6:	a1 04 1e 03 c0       	mov    eax,ds:0xc0031e04
c0018fcb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018fce:	a1 00 1e 03 c0       	mov    eax,ds:0xc0031e00
c0018fd3:	89 02                	mov    DWORD PTR [edx],eax
c0018fd5:	eb 3f                	jmp    c0019016 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018fd7:	31 c9                	xor    ecx,ecx
c0018fd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fdd:	0f a2                	cpuid  
c0018fdf:	89 06                	mov    DWORD PTR [esi],eax
c0018fe1:	89 1f                	mov    DWORD PTR [edi],ebx
c0018fe3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018fe7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018fea:	89 10                	mov    DWORD PTR [eax],edx
c0018fec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ff0:	a3 e0 e7 02 c0       	mov    ds:0xc002e7e0,eax
c0018ff5:	8b 06                	mov    eax,DWORD PTR [esi]
c0018ff7:	a3 0c 1e 03 c0       	mov    ds:0xc0031e0c,eax
c0018ffc:	8b 07                	mov    eax,DWORD PTR [edi]
c0018ffe:	a3 08 1e 03 c0       	mov    ds:0xc0031e08,eax
c0019003:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019006:	a3 04 1e 03 c0       	mov    ds:0xc0031e04,eax
c001900b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019011:	a3 00 1e 03 c0       	mov    ds:0xc0031e00,eax
c0019016:	5b                   	pop    ebx
c0019017:	5e                   	pop    esi
c0019018:	5f                   	pop    edi
c0019019:	5d                   	pop    ebp
c001901a:	c3                   	ret    
c001901b:	90                   	nop

c001901c <CPU::cpuidCheckEDX(unsigned int)>:
c001901c:	83 ec 10             	sub    esp,0x10
c001901f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019023:	50                   	push   eax
c0019024:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019028:	50                   	push   eax
c0019029:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001902d:	50                   	push   eax
c001902e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019032:	50                   	push   eax
c0019033:	6a 01                	push   0x1
c0019035:	e8 5e ff ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001903a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001903e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0019042:	0f 95 c0             	setne  al
c0019045:	83 c4 24             	add    esp,0x24
c0019048:	c3                   	ret    
c0019049:	90                   	nop

c001904a <CPU::cpuidCheckECX(unsigned int)>:
c001904a:	83 ec 10             	sub    esp,0x10
c001904d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019051:	50                   	push   eax
c0019052:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019056:	50                   	push   eax
c0019057:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001905b:	50                   	push   eax
c001905c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019060:	50                   	push   eax
c0019061:	6a 01                	push   0x1
c0019063:	e8 30 ff ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019068:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001906c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0019070:	0f 95 c0             	setne  al
c0019073:	83 c4 24             	add    esp,0x24
c0019076:	c3                   	ret    
c0019077:	90                   	nop

c0019078 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0019078:	83 ec 10             	sub    esp,0x10
c001907b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001907f:	50                   	push   eax
c0019080:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019084:	50                   	push   eax
c0019085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019089:	50                   	push   eax
c001908a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001908e:	50                   	push   eax
c001908f:	6a 07                	push   0x7
c0019091:	e8 02 ff ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001909a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001909e:	0f 95 c0             	setne  al
c00190a1:	83 c4 24             	add    esp,0x24
c00190a4:	c3                   	ret    
c00190a5:	90                   	nop

c00190a6 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00190a6:	83 ec 10             	sub    esp,0x10
c00190a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190ad:	50                   	push   eax
c00190ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190b2:	50                   	push   eax
c00190b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190b7:	50                   	push   eax
c00190b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00190bc:	50                   	push   eax
c00190bd:	6a 07                	push   0x7
c00190bf:	e8 d4 fe ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00190c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00190c8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00190cc:	0f 95 c0             	setne  al
c00190cf:	83 c4 24             	add    esp,0x24
c00190d2:	c3                   	ret    
c00190d3:	90                   	nop

c00190d4 <CPU::CPU()>:
c00190d4:	83 ec 0c             	sub    esp,0xc
c00190d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190db:	83 ec 08             	sub    esp,0x8
c00190de:	68 26 c7 02 c0       	push   0xc002c726
c00190e3:	50                   	push   eax
c00190e4:	e8 87 b3 ff ff       	call   c0014470 <Device::Device(char const*)>
c00190e9:	83 c4 10             	add    esp,0x10
c00190ec:	ba 00 c8 02 c0       	mov    edx,0xc002c800
c00190f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190f5:	89 10                	mov    DWORD PTR [eax],edx
c00190f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00190fb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0019105:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019109:	05 78 01 00 00       	add    eax,0x178
c001910e:	83 ec 0c             	sub    esp,0xc
c0019111:	50                   	push   eax
c0019112:	e8 b3 5f ff ff       	call   c000f0ca <GDT::GDT()>
c0019117:	83 c4 10             	add    esp,0x10
c001911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001911e:	05 7c 09 00 00       	add    eax,0x97c
c0019123:	83 ec 0c             	sub    esp,0xc
c0019126:	50                   	push   eax
c0019127:	e8 08 62 ff ff       	call   c000f334 <IDT::IDT()>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019133:	05 7c 11 00 00       	add    eax,0x117c
c0019138:	83 ec 0c             	sub    esp,0xc
c001913b:	50                   	push   eax
c001913c:	e8 49 82 ff ff       	call   c001138a <TSS::TSS()>
c0019141:	83 c4 10             	add    esp,0x10
c0019144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019148:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001914f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019153:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001915d:	90                   	nop
c001915e:	83 c4 0c             	add    esp,0xc
c0019161:	c3                   	ret    

c0019162 <CPU::displayFeatures()>:
c0019162:	53                   	push   ebx
c0019163:	83 ec 10             	sub    esp,0x10
c0019166:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001916a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0019170:	68 34 c4 02 c0       	push   0xc002c434
c0019175:	e8 e5 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001917a:	59                   	pop    ecx
c001917b:	58                   	pop    eax
c001917c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0019182:	50                   	push   eax
c0019183:	68 45 c4 02 c0       	push   0xc002c445
c0019188:	e8 d2 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001918d:	58                   	pop    eax
c001918e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019194:	5a                   	pop    edx
c0019195:	c1 e8 0e             	shr    eax,0xe
c0019198:	0f b6 c0             	movzx  eax,al
c001919b:	50                   	push   eax
c001919c:	68 56 c4 02 c0       	push   0xc002c456
c00191a1:	e8 b9 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00191a6:	59                   	pop    ecx
c00191a7:	58                   	pop    eax
c00191a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191ae:	66 c1 e8 06          	shr    ax,0x6
c00191b2:	0f b6 c0             	movzx  eax,al
c00191b5:	50                   	push   eax
c00191b6:	68 67 c4 02 c0       	push   0xc002c467
c00191bb:	e8 9f 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00191c0:	c7 04 24 14 c9 02 c0 	mov    DWORD PTR [esp],0xc002c914
c00191c7:	e8 93 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00191cc:	83 c4 10             	add    esp,0x10
c00191cf:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00191d4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00191db:	74 05                	je     c00191e2 <CPU::displayFeatures()+0x80>
c00191dd:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00191e2:	52                   	push   edx
c00191e3:	52                   	push   edx
c00191e4:	50                   	push   eax
c00191e5:	68 78 c4 02 c0       	push   0xc002c478
c00191ea:	e8 70 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00191f7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00191fe:	78 05                	js     c0019205 <CPU::displayFeatures()+0xa3>
c0019200:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019205:	51                   	push   ecx
c0019206:	51                   	push   ecx
c0019207:	50                   	push   eax
c0019208:	68 8f c4 02 c0       	push   0xc002c48f
c001920d:	e8 4d 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019212:	83 c4 10             	add    esp,0x10
c0019215:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c001921a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0019221:	75 05                	jne    c0019228 <CPU::displayFeatures()+0xc6>
c0019223:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019228:	52                   	push   edx
c0019229:	52                   	push   edx
c001922a:	50                   	push   eax
c001922b:	68 a6 c4 02 c0       	push   0xc002c4a6
c0019230:	e8 2a 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019235:	83 c4 10             	add    esp,0x10
c0019238:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c001923d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0019244:	75 05                	jne    c001924b <CPU::displayFeatures()+0xe9>
c0019246:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c001924b:	51                   	push   ecx
c001924c:	51                   	push   ecx
c001924d:	50                   	push   eax
c001924e:	68 bd c4 02 c0       	push   0xc002c4bd
c0019253:	e8 07 9c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019258:	83 c4 10             	add    esp,0x10
c001925b:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c0019260:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019267:	75 05                	jne    c001926e <CPU::displayFeatures()+0x10c>
c0019269:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c001926e:	52                   	push   edx
c001926f:	52                   	push   edx
c0019270:	50                   	push   eax
c0019271:	68 d4 c4 02 c0       	push   0xc002c4d4
c0019276:	e8 e4 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001927b:	83 c4 10             	add    esp,0x10
c001927e:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c0019283:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001928a:	75 05                	jne    c0019291 <CPU::displayFeatures()+0x12f>
c001928c:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019291:	51                   	push   ecx
c0019292:	51                   	push   ecx
c0019293:	50                   	push   eax
c0019294:	68 eb c4 02 c0       	push   0xc002c4eb
c0019299:	e8 c1 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001929e:	83 c4 10             	add    esp,0x10
c00192a1:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00192a6:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00192ad:	75 05                	jne    c00192b4 <CPU::displayFeatures()+0x152>
c00192af:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00192b4:	52                   	push   edx
c00192b5:	52                   	push   edx
c00192b6:	50                   	push   eax
c00192b7:	68 02 c5 02 c0       	push   0xc002c502
c00192bc:	e8 9e 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00192c1:	83 c4 10             	add    esp,0x10
c00192c4:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00192c9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00192d0:	75 05                	jne    c00192d7 <CPU::displayFeatures()+0x175>
c00192d2:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00192d7:	51                   	push   ecx
c00192d8:	51                   	push   ecx
c00192d9:	50                   	push   eax
c00192da:	68 19 c5 02 c0       	push   0xc002c519
c00192df:	e8 7b 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00192e4:	83 c4 10             	add    esp,0x10
c00192e7:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00192ec:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00192f3:	75 05                	jne    c00192fa <CPU::displayFeatures()+0x198>
c00192f5:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00192fa:	52                   	push   edx
c00192fb:	52                   	push   edx
c00192fc:	50                   	push   eax
c00192fd:	68 30 c5 02 c0       	push   0xc002c530
c0019302:	e8 58 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019307:	83 c4 10             	add    esp,0x10
c001930a:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c001930f:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019316:	75 05                	jne    c001931d <CPU::displayFeatures()+0x1bb>
c0019318:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c001931d:	51                   	push   ecx
c001931e:	51                   	push   ecx
c001931f:	50                   	push   eax
c0019320:	68 47 c5 02 c0       	push   0xc002c547
c0019325:	e8 35 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001932a:	83 c4 10             	add    esp,0x10
c001932d:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c0019332:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019339:	75 05                	jne    c0019340 <CPU::displayFeatures()+0x1de>
c001933b:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019340:	52                   	push   edx
c0019341:	52                   	push   edx
c0019342:	50                   	push   eax
c0019343:	68 5e c5 02 c0       	push   0xc002c55e
c0019348:	e8 12 9b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c0019355:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001935c:	75 05                	jne    c0019363 <CPU::displayFeatures()+0x201>
c001935e:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019363:	51                   	push   ecx
c0019364:	51                   	push   ecx
c0019365:	50                   	push   eax
c0019366:	68 75 c5 02 c0       	push   0xc002c575
c001936b:	e8 ef 9a ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019370:	83 c4 10             	add    esp,0x10
c0019373:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c0019378:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001937f:	75 05                	jne    c0019386 <CPU::displayFeatures()+0x224>
c0019381:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c0019386:	52                   	push   edx
c0019387:	52                   	push   edx
c0019388:	50                   	push   eax
c0019389:	68 8c c5 02 c0       	push   0xc002c58c
c001938e:	e8 cc 9a ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0019393:	83 c4 10             	add    esp,0x10
c0019396:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c001939b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00193a2:	78 05                	js     c00193a9 <CPU::displayFeatures()+0x247>
c00193a4:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00193a9:	51                   	push   ecx
c00193aa:	51                   	push   ecx
c00193ab:	50                   	push   eax
c00193ac:	68 a3 c5 02 c0       	push   0xc002c5a3
c00193b1:	e8 a9 9a ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00193b6:	83 c4 10             	add    esp,0x10
c00193b9:	b8 72 ad 02 c0       	mov    eax,0xc002ad72
c00193be:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00193c5:	75 05                	jne    c00193cc <CPU::displayFeatures()+0x26a>
c00193c7:	b8 76 ad 02 c0       	mov    eax,0xc002ad76
c00193cc:	52                   	push   edx
c00193cd:	52                   	push   edx
c00193ce:	50                   	push   eax
c00193cf:	68 ba c5 02 c0       	push   0xc002c5ba
c00193d4:	e8 86 9a ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00193d9:	83 c4 18             	add    esp,0x18
c00193dc:	5b                   	pop    ebx
c00193dd:	c3                   	ret    

c00193de <CPU::detectFeatures()>:
c00193de:	55                   	push   ebp
c00193df:	57                   	push   edi
c00193e0:	56                   	push   esi
c00193e1:	53                   	push   ebx
c00193e2:	83 ec 50             	sub    esp,0x50
c00193e5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00193e9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00193f3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00193fa:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0019400:	6a 0d                	push   0xd
c0019402:	6a 00                	push   0x0
c0019404:	55                   	push   ebp
c0019405:	e8 6e 73 fe ff       	call   c0000778 <memset>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019412:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019419:	0f 84 22 09 00 00    	je     c0019d41 <CPU::detectFeatures()+0x963>
c001941f:	83 ec 0c             	sub    esp,0xc
c0019422:	89 ef                	mov    edi,ebp
c0019424:	6a 10                	push   0x10
c0019426:	e8 f1 fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c001942b:	83 e0 01             	and    eax,0x1
c001942e:	8d 14 00             	lea    edx,[eax+eax*1]
c0019431:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019437:	83 e0 fd             	and    eax,0xfffffffd
c001943a:	09 d0                	or     eax,edx
c001943c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019442:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019449:	e8 ce fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c001944e:	83 e0 01             	and    eax,0x1
c0019451:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019458:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001945e:	83 e0 fb             	and    eax,0xfffffffb
c0019461:	09 d0                	or     eax,edx
c0019463:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019469:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019470:	e8 a7 fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c0019475:	83 e0 01             	and    eax,0x1
c0019478:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001947f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019485:	83 e0 f7             	and    eax,0xfffffff7
c0019488:	09 d0                	or     eax,edx
c001948a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019490:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019497:	e8 80 fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c001949c:	83 e0 01             	and    eax,0x1
c001949f:	c1 e0 04             	shl    eax,0x4
c00194a2:	88 c2                	mov    dl,al
c00194a4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194aa:	83 e0 ef             	and    eax,0xffffffef
c00194ad:	09 d0                	or     eax,edx
c00194af:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194b5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00194bc:	e8 5b fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c00194c1:	83 e0 01             	and    eax,0x1
c00194c4:	c1 e0 05             	shl    eax,0x5
c00194c7:	88 c2                	mov    dl,al
c00194c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00194cf:	83 e0 df             	and    eax,0xffffffdf
c00194d2:	09 d0                	or     eax,edx
c00194d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00194da:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00194e1:	e8 36 fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c00194e6:	83 e0 01             	and    eax,0x1
c00194e9:	8d 14 00             	lea    edx,[eax+eax*1]
c00194ec:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00194f2:	83 e0 fd             	and    eax,0xfffffffd
c00194f5:	09 d0                	or     eax,edx
c00194f7:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00194fd:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0019504:	e8 13 fb ff ff       	call   c001901c <CPU::cpuidCheckEDX(unsigned int)>
c0019509:	83 e0 01             	and    eax,0x1
c001950c:	c1 e0 06             	shl    eax,0x6
c001950f:	88 c2                	mov    dl,al
c0019511:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019517:	83 e0 bf             	and    eax,0xffffffbf
c001951a:	09 d0                	or     eax,edx
c001951c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019522:	58                   	pop    eax
c0019523:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019527:	50                   	push   eax
c0019528:	8d 44 24 28          	lea    eax,[esp+0x28]
c001952c:	50                   	push   eax
c001952d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019531:	56                   	push   esi
c0019532:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019536:	50                   	push   eax
c0019537:	6a 00                	push   0x0
c0019539:	e8 5a fa ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001953e:	b8 04 00 00 00       	mov    eax,0x4
c0019543:	89 c1                	mov    ecx,eax
c0019545:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019547:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001954d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0019551:	89 c1                	mov    ecx,eax
c0019553:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019555:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001955b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001955f:	89 c1                	mov    ecx,eax
c0019561:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019563:	83 c4 18             	add    esp,0x18
c0019566:	68 d1 c5 02 c0       	push   0xc002c5d1
c001956b:	55                   	push   ebp
c001956c:	e8 4f 73 fe ff       	call   c00008c0 <strcmp>
c0019571:	83 c4 10             	add    esp,0x10
c0019574:	85 c0                	test   eax,eax
c0019576:	75 0f                	jne    c0019587 <CPU::detectFeatures()+0x1a9>
c0019578:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0019582:	e9 22 02 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019587:	50                   	push   eax
c0019588:	50                   	push   eax
c0019589:	68 de c5 02 c0       	push   0xc002c5de
c001958e:	55                   	push   ebp
c001958f:	e8 2c 73 fe ff       	call   c00008c0 <strcmp>
c0019594:	83 c4 10             	add    esp,0x10
c0019597:	85 c0                	test   eax,eax
c0019599:	74 dd                	je     c0019578 <CPU::detectFeatures()+0x19a>
c001959b:	50                   	push   eax
c001959c:	50                   	push   eax
c001959d:	68 eb c5 02 c0       	push   0xc002c5eb
c00195a2:	55                   	push   ebp
c00195a3:	e8 18 73 fe ff       	call   c00008c0 <strcmp>
c00195a8:	83 c4 10             	add    esp,0x10
c00195ab:	85 c0                	test   eax,eax
c00195ad:	74 2a                	je     c00195d9 <CPU::detectFeatures()+0x1fb>
c00195af:	50                   	push   eax
c00195b0:	50                   	push   eax
c00195b1:	68 f8 c5 02 c0       	push   0xc002c5f8
c00195b6:	55                   	push   ebp
c00195b7:	e8 04 73 fe ff       	call   c00008c0 <strcmp>
c00195bc:	83 c4 10             	add    esp,0x10
c00195bf:	85 c0                	test   eax,eax
c00195c1:	74 16                	je     c00195d9 <CPU::detectFeatures()+0x1fb>
c00195c3:	50                   	push   eax
c00195c4:	50                   	push   eax
c00195c5:	68 05 c6 02 c0       	push   0xc002c605
c00195ca:	55                   	push   ebp
c00195cb:	e8 f0 72 fe ff       	call   c00008c0 <strcmp>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	85 c0                	test   eax,eax
c00195d5:	74 48                	je     c001961f <CPU::detectFeatures()+0x241>
c00195d7:	eb 0f                	jmp    c00195e8 <CPU::detectFeatures()+0x20a>
c00195d9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00195e3:	e9 c1 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c00195e8:	50                   	push   eax
c00195e9:	50                   	push   eax
c00195ea:	68 12 c6 02 c0       	push   0xc002c612
c00195ef:	55                   	push   ebp
c00195f0:	e8 cb 72 fe ff       	call   c00008c0 <strcmp>
c00195f5:	83 c4 10             	add    esp,0x10
c00195f8:	85 c0                	test   eax,eax
c00195fa:	74 23                	je     c001961f <CPU::detectFeatures()+0x241>
c00195fc:	57                   	push   edi
c00195fd:	57                   	push   edi
c00195fe:	68 1f c6 02 c0       	push   0xc002c61f
c0019603:	55                   	push   ebp
c0019604:	e8 b7 72 fe ff       	call   c00008c0 <strcmp>
c0019609:	83 c4 10             	add    esp,0x10
c001960c:	85 c0                	test   eax,eax
c001960e:	75 1e                	jne    c001962e <CPU::detectFeatures()+0x250>
c0019610:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001961a:	e9 8a 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c001961f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0019629:	e9 7b 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c001962e:	56                   	push   esi
c001962f:	56                   	push   esi
c0019630:	68 2c c6 02 c0       	push   0xc002c62c
c0019635:	55                   	push   ebp
c0019636:	e8 85 72 fe ff       	call   c00008c0 <strcmp>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	85 c0                	test   eax,eax
c0019640:	75 0f                	jne    c0019651 <CPU::detectFeatures()+0x273>
c0019642:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001964c:	e9 58 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019651:	51                   	push   ecx
c0019652:	51                   	push   ecx
c0019653:	68 eb c5 02 c0       	push   0xc002c5eb
c0019658:	55                   	push   ebp
c0019659:	e8 62 72 fe ff       	call   c00008c0 <strcmp>
c001965e:	83 c4 10             	add    esp,0x10
c0019661:	85 c0                	test   eax,eax
c0019663:	75 0f                	jne    c0019674 <CPU::detectFeatures()+0x296>
c0019665:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001966f:	e9 35 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019674:	52                   	push   edx
c0019675:	52                   	push   edx
c0019676:	68 39 c6 02 c0       	push   0xc002c639
c001967b:	55                   	push   ebp
c001967c:	e8 3f 72 fe ff       	call   c00008c0 <strcmp>
c0019681:	83 c4 10             	add    esp,0x10
c0019684:	85 c0                	test   eax,eax
c0019686:	75 0f                	jne    c0019697 <CPU::detectFeatures()+0x2b9>
c0019688:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0019692:	e9 12 01 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019697:	50                   	push   eax
c0019698:	50                   	push   eax
c0019699:	68 46 c6 02 c0       	push   0xc002c646
c001969e:	55                   	push   ebp
c001969f:	e8 1c 72 fe ff       	call   c00008c0 <strcmp>
c00196a4:	83 c4 10             	add    esp,0x10
c00196a7:	85 c0                	test   eax,eax
c00196a9:	75 0f                	jne    c00196ba <CPU::detectFeatures()+0x2dc>
c00196ab:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00196b5:	e9 ef 00 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c00196ba:	50                   	push   eax
c00196bb:	50                   	push   eax
c00196bc:	68 53 c6 02 c0       	push   0xc002c653
c00196c1:	55                   	push   ebp
c00196c2:	e8 f9 71 fe ff       	call   c00008c0 <strcmp>
c00196c7:	83 c4 10             	add    esp,0x10
c00196ca:	85 c0                	test   eax,eax
c00196cc:	75 0f                	jne    c00196dd <CPU::detectFeatures()+0x2ff>
c00196ce:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00196d8:	e9 cc 00 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c00196dd:	50                   	push   eax
c00196de:	50                   	push   eax
c00196df:	68 60 c6 02 c0       	push   0xc002c660
c00196e4:	55                   	push   ebp
c00196e5:	e8 d6 71 fe ff       	call   c00008c0 <strcmp>
c00196ea:	83 c4 10             	add    esp,0x10
c00196ed:	85 c0                	test   eax,eax
c00196ef:	75 0f                	jne    c0019700 <CPU::detectFeatures()+0x322>
c00196f1:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00196fb:	e9 a9 00 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019700:	50                   	push   eax
c0019701:	50                   	push   eax
c0019702:	68 6d c6 02 c0       	push   0xc002c66d
c0019707:	55                   	push   ebp
c0019708:	e8 b3 71 fe ff       	call   c00008c0 <strcmp>
c001970d:	83 c4 10             	add    esp,0x10
c0019710:	85 c0                	test   eax,eax
c0019712:	75 0f                	jne    c0019723 <CPU::detectFeatures()+0x345>
c0019714:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001971e:	e9 86 00 00 00       	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019723:	50                   	push   eax
c0019724:	50                   	push   eax
c0019725:	68 7a c6 02 c0       	push   0xc002c67a
c001972a:	55                   	push   ebp
c001972b:	e8 90 71 fe ff       	call   c00008c0 <strcmp>
c0019730:	83 c4 10             	add    esp,0x10
c0019733:	85 c0                	test   eax,eax
c0019735:	75 0c                	jne    c0019743 <CPU::detectFeatures()+0x365>
c0019737:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0019741:	eb 66                	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019743:	50                   	push   eax
c0019744:	50                   	push   eax
c0019745:	68 87 c6 02 c0       	push   0xc002c687
c001974a:	55                   	push   ebp
c001974b:	e8 70 71 fe ff       	call   c00008c0 <strcmp>
c0019750:	83 c4 10             	add    esp,0x10
c0019753:	85 c0                	test   eax,eax
c0019755:	75 0c                	jne    c0019763 <CPU::detectFeatures()+0x385>
c0019757:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019761:	eb 46                	jmp    c00197a9 <CPU::detectFeatures()+0x3cb>
c0019763:	57                   	push   edi
c0019764:	57                   	push   edi
c0019765:	68 94 c6 02 c0       	push   0xc002c694
c001976a:	55                   	push   ebp
c001976b:	e8 50 71 fe ff       	call   c00008c0 <strcmp>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	85 c0                	test   eax,eax
c0019775:	74 e0                	je     c0019757 <CPU::detectFeatures()+0x379>
c0019777:	56                   	push   esi
c0019778:	56                   	push   esi
c0019779:	68 a1 c6 02 c0       	push   0xc002c6a1
c001977e:	55                   	push   ebp
c001977f:	e8 3c 71 fe ff       	call   c00008c0 <strcmp>
c0019784:	83 c4 10             	add    esp,0x10
c0019787:	85 c0                	test   eax,eax
c0019789:	74 cc                	je     c0019757 <CPU::detectFeatures()+0x379>
c001978b:	51                   	push   ecx
c001978c:	51                   	push   ecx
c001978d:	68 ae c6 02 c0       	push   0xc002c6ae
c0019792:	55                   	push   ebp
c0019793:	e8 28 71 fe ff       	call   c00008c0 <strcmp>
c0019798:	83 c4 10             	add    esp,0x10
c001979b:	85 c0                	test   eax,eax
c001979d:	74 b8                	je     c0019757 <CPU::detectFeatures()+0x379>
c001979f:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00197a9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00197ae:	0f 86 be 00 00 00    	jbe    c0019872 <CPU::detectFeatures()+0x494>
c00197b4:	83 ec 0c             	sub    esp,0xc
c00197b7:	68 80 00 00 00       	push   0x80
c00197bc:	e8 b7 f8 ff ff       	call   c0019078 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197c1:	83 e0 01             	and    eax,0x1
c00197c4:	c1 e0 06             	shl    eax,0x6
c00197c7:	88 c2                	mov    dl,al
c00197c9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00197cf:	83 e0 bf             	and    eax,0xffffffbf
c00197d2:	09 d0                	or     eax,edx
c00197d4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00197da:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00197e1:	e8 92 f8 ff ff       	call   c0019078 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00197e6:	83 e0 01             	and    eax,0x1
c00197e9:	c1 e0 04             	shl    eax,0x4
c00197ec:	88 c2                	mov    dl,al
c00197ee:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00197f4:	83 e0 ef             	and    eax,0xffffffef
c00197f7:	09 d0                	or     eax,edx
c00197f9:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00197ff:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019806:	e8 6d f8 ff ff       	call   c0019078 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001980b:	c1 e0 07             	shl    eax,0x7
c001980e:	88 c2                	mov    dl,al
c0019810:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019816:	83 e0 7f             	and    eax,0x7f
c0019819:	09 d0                	or     eax,edx
c001981b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019821:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019828:	e8 79 f8 ff ff       	call   c00190a6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001982d:	83 e0 01             	and    eax,0x1
c0019830:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019837:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001983d:	83 e0 f7             	and    eax,0xfffffff7
c0019840:	09 d0                	or     eax,edx
c0019842:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019848:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001984f:	e8 52 f8 ff ff       	call   c00190a6 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019854:	83 c4 10             	add    esp,0x10
c0019857:	83 e0 01             	and    eax,0x1
c001985a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019861:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019867:	83 e0 fb             	and    eax,0xfffffffb
c001986a:	09 d0                	or     eax,edx
c001986c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019872:	83 ec 0c             	sub    esp,0xc
c0019875:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019879:	50                   	push   eax
c001987a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001987e:	50                   	push   eax
c001987f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019883:	56                   	push   esi
c0019884:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019888:	50                   	push   eax
c0019889:	6a 01                	push   0x1
c001988b:	e8 08 f7 ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019890:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019894:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001989a:	88 ca                	mov    dl,cl
c001989c:	83 e0 f0             	and    eax,0xfffffff0
c001989f:	83 e2 0f             	and    edx,0xf
c00198a2:	09 d0                	or     eax,edx
c00198a4:	88 ca                	mov    dl,cl
c00198a6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00198ac:	c0 ea 04             	shr    dl,0x4
c00198af:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00198b3:	0f b6 c2             	movzx  eax,dl
c00198b6:	83 c4 20             	add    esp,0x20
c00198b9:	c1 e0 06             	shl    eax,0x6
c00198bc:	89 c7                	mov    edi,eax
c00198be:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198c4:	66 25 3f c0          	and    ax,0xc03f
c00198c8:	09 f8                	or     eax,edi
c00198ca:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00198d1:	89 c8                	mov    eax,ecx
c00198d3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00198da:	c1 e8 08             	shr    eax,0x8
c00198dd:	83 e5 3f             	and    ebp,0x3f
c00198e0:	83 e0 0f             	and    eax,0xf
c00198e3:	89 c7                	mov    edi,eax
c00198e5:	c1 e7 06             	shl    edi,0x6
c00198e8:	09 ef                	or     edi,ebp
c00198ea:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00198f1:	89 fa                	mov    edx,edi
c00198f3:	83 e5 c0             	and    ebp,0xffffffc0
c00198f6:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00198fc:	88 c2                	mov    dl,al
c00198fe:	c0 ea 02             	shr    dl,0x2
c0019901:	89 d7                	mov    edi,edx
c0019903:	09 ef                	or     edi,ebp
c0019905:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001990b:	89 fa                	mov    edx,edi
c001990d:	83 e5 cf             	and    ebp,0xffffffcf
c0019910:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019916:	89 cf                	mov    edi,ecx
c0019918:	c1 ef 0c             	shr    edi,0xc
c001991b:	83 e7 03             	and    edi,0x3
c001991e:	c1 e7 04             	shl    edi,0x4
c0019921:	09 ef                	or     edi,ebp
c0019923:	3c 06                	cmp    al,0x6
c0019925:	89 fa                	mov    edx,edi
c0019927:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001992d:	74 04                	je     c0019933 <CPU::detectFeatures()+0x555>
c001992f:	3c 0f                	cmp    al,0xf
c0019931:	75 5c                	jne    c001998f <CPU::detectFeatures()+0x5b1>
c0019933:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019937:	89 cf                	mov    edi,ecx
c0019939:	c1 ef 10             	shr    edi,0x10
c001993c:	c1 e7 04             	shl    edi,0x4
c001993f:	09 fa                	or     edx,edi
c0019941:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0019947:	0f b6 d2             	movzx  edx,dl
c001994a:	66 81 e7 3f c0       	and    di,0xc03f
c001994f:	c1 e2 06             	shl    edx,0x6
c0019952:	09 fa                	or     edx,edi
c0019954:	3c 0f                	cmp    al,0xf
c0019956:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001995d:	75 30                	jne    c001998f <CPU::detectFeatures()+0x5b1>
c001995f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019965:	c1 e9 14             	shr    ecx,0x14
c0019968:	83 e0 3f             	and    eax,0x3f
c001996b:	83 c1 0f             	add    ecx,0xf
c001996e:	88 ca                	mov    dl,cl
c0019970:	c0 e9 02             	shr    cl,0x2
c0019973:	c1 e2 06             	shl    edx,0x6
c0019976:	09 d0                	or     eax,edx
c0019978:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001997e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019984:	83 e0 c0             	and    eax,0xffffffc0
c0019987:	09 c1                	or     ecx,eax
c0019989:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001998f:	83 ec 0c             	sub    esp,0xc
c0019992:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019999:	8d 44 24 28          	lea    eax,[esp+0x28]
c001999d:	50                   	push   eax
c001999e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00199a2:	55                   	push   ebp
c00199a3:	56                   	push   esi
c00199a4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00199a8:	57                   	push   edi
c00199a9:	68 00 00 00 80       	push   0x80000000
c00199ae:	e8 e5 f5 ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199b3:	83 c4 20             	add    esp,0x20
c00199b6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00199be:	76 22                	jbe    c00199e2 <CPU::detectFeatures()+0x604>
c00199c0:	83 ec 0c             	sub    esp,0xc
c00199c3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00199c7:	50                   	push   eax
c00199c8:	55                   	push   ebp
c00199c9:	56                   	push   esi
c00199ca:	57                   	push   edi
c00199cb:	68 01 00 00 80       	push   0x80000001
c00199d0:	e8 c3 f5 ff ff       	call   c0018f98 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00199d5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00199df:	83 c4 20             	add    esp,0x20
c00199e2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00199e8:	83 f8 01             	cmp    eax,0x1
c00199eb:	75 6f                	jne    c0019a5c <CPU::detectFeatures()+0x67e>
c00199ed:	51                   	push   ecx
c00199ee:	51                   	push   ecx
c00199ef:	68 ba c6 02 c0       	push   0xc002c6ba
c00199f4:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00199f8:	56                   	push   esi
c00199f9:	e8 36 6e fe ff       	call   c0000834 <strcpy>
c00199fe:	5f                   	pop    edi
c00199ff:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a05:	5d                   	pop    ebp
c0019a06:	66 c1 e8 06          	shr    ax,0x6
c0019a0a:	0f b6 c0             	movzx  eax,al
c0019a0d:	50                   	push   eax
c0019a0e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a14:	c1 e8 0e             	shr    eax,0xe
c0019a17:	0f b6 c0             	movzx  eax,al
c0019a1a:	50                   	push   eax
c0019a1b:	e8 22 f2 ff ff       	call   c0018c42 <CPU::lookupIntelName(unsigned char, unsigned char)>
c0019a20:	5a                   	pop    edx
c0019a21:	59                   	pop    ecx
c0019a22:	50                   	push   eax
c0019a23:	56                   	push   esi
c0019a24:	e8 4b 6f fe ff       	call   c0000974 <strcat>
c0019a29:	5f                   	pop    edi
c0019a2a:	5d                   	pop    ebp
c0019a2b:	56                   	push   esi
c0019a2c:	53                   	push   ebx
c0019a2d:	e8 30 aa ff ff       	call   c0014462 <Device::setName(char const*)>
c0019a32:	58                   	pop    eax
c0019a33:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019a39:	5a                   	pop    edx
c0019a3a:	68 c1 c6 02 c0       	push   0xc002c6c1
c0019a3f:	50                   	push   eax
c0019a40:	e8 7b 6e fe ff       	call   c00008c0 <strcmp>
c0019a45:	83 c4 10             	add    esp,0x10
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	0f 85 71 03 00 00    	jne    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019a50:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019a57:	e9 65 03 00 00       	jmp    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019a5c:	83 f8 02             	cmp    eax,0x2
c0019a5f:	0f 85 b5 00 00 00    	jne    c0019b1a <CPU::detectFeatures()+0x73c>
c0019a65:	57                   	push   edi
c0019a66:	57                   	push   edi
c0019a67:	68 d3 c6 02 c0       	push   0xc002c6d3
c0019a6c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019a70:	56                   	push   esi
c0019a71:	e8 be 6d fe ff       	call   c0000834 <strcpy>
c0019a76:	5d                   	pop    ebp
c0019a77:	58                   	pop    eax
c0019a78:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a7e:	66 c1 e8 06          	shr    ax,0x6
c0019a82:	0f b6 c0             	movzx  eax,al
c0019a85:	50                   	push   eax
c0019a86:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019a8c:	c1 e8 0e             	shr    eax,0xe
c0019a8f:	0f b6 c0             	movzx  eax,al
c0019a92:	50                   	push   eax
c0019a93:	e8 16 f0 ff ff       	call   c0018aae <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019a98:	5a                   	pop    edx
c0019a99:	59                   	pop    ecx
c0019a9a:	50                   	push   eax
c0019a9b:	56                   	push   esi
c0019a9c:	e8 d3 6e fe ff       	call   c0000974 <strcat>
c0019aa1:	5f                   	pop    edi
c0019aa2:	5d                   	pop    ebp
c0019aa3:	56                   	push   esi
c0019aa4:	53                   	push   ebx
c0019aa5:	e8 b8 a9 ff ff       	call   c0014462 <Device::setName(char const*)>
c0019aaa:	58                   	pop    eax
c0019aab:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019ab1:	5a                   	pop    edx
c0019ab2:	68 d8 c6 02 c0       	push   0xc002c6d8
c0019ab7:	50                   	push   eax
c0019ab8:	e8 03 6e fe ff       	call   c00008c0 <strcmp>
c0019abd:	83 c4 10             	add    esp,0x10
c0019ac0:	85 c0                	test   eax,eax
c0019ac2:	75 20                	jne    c0019ae4 <CPU::detectFeatures()+0x706>
c0019ac4:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0019aca:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019ad0:	a8 01                	test   al,0x1
c0019ad2:	74 10                	je     c0019ae4 <CPU::detectFeatures()+0x706>
c0019ad4:	83 e0 fe             	and    eax,0xfffffffe
c0019ad7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019add:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019ae4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019aea:	c1 e8 0e             	shr    eax,0xe
c0019aed:	3c 05                	cmp    al,0x5
c0019aef:	0f 85 cc 02 00 00    	jne    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019af5:	56                   	push   esi
c0019af6:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019afc:	83 e0 0f             	and    eax,0xf
c0019aff:	50                   	push   eax
c0019b00:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019b06:	66 c1 e8 06          	shr    ax,0x6
c0019b0a:	0f b6 c0             	movzx  eax,al
c0019b0d:	50                   	push   eax
c0019b0e:	6a 05                	push   0x5
c0019b10:	e8 0f f4 ff ff       	call   c0018f24 <CPU::AMD_K6_writeback(int, int, int)>
c0019b15:	e9 1f 02 00 00       	jmp    c0019d39 <CPU::detectFeatures()+0x95b>
c0019b1a:	8d 50 fd             	lea    edx,[eax-0x3]
c0019b1d:	83 fa 01             	cmp    edx,0x1
c0019b20:	76 09                	jbe    c0019b2b <CPU::detectFeatures()+0x74d>
c0019b22:	83 f8 06             	cmp    eax,0x6
c0019b25:	0f 85 91 01 00 00    	jne    c0019cbc <CPU::detectFeatures()+0x8de>
c0019b2b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b31:	c1 ea 0e             	shr    edx,0xe
c0019b34:	80 fa 05             	cmp    dl,0x5
c0019b37:	75 7b                	jne    c0019bb4 <CPU::detectFeatures()+0x7d6>
c0019b39:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019b3f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019b44:	66 81 fa 00 01       	cmp    dx,0x100
c0019b49:	75 0c                	jne    c0019b57 <CPU::detectFeatures()+0x779>
c0019b4b:	51                   	push   ecx
c0019b4c:	51                   	push   ecx
c0019b4d:	68 df c6 02 c0       	push   0xc002c6df
c0019b52:	e9 dc 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019b57:	66 81 fa 00 02       	cmp    dx,0x200
c0019b5c:	75 0c                	jne    c0019b6a <CPU::detectFeatures()+0x78c>
c0019b5e:	52                   	push   edx
c0019b5f:	52                   	push   edx
c0019b60:	68 f2 c6 02 c0       	push   0xc002c6f2
c0019b65:	e9 c9 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019b6a:	66 81 fa 40 02       	cmp    dx,0x240
c0019b6f:	75 0c                	jne    c0019b7d <CPU::detectFeatures()+0x79f>
c0019b71:	50                   	push   eax
c0019b72:	50                   	push   eax
c0019b73:	68 04 c7 02 c0       	push   0xc002c704
c0019b78:	e9 b6 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019b7d:	83 f8 06             	cmp    eax,0x6
c0019b80:	75 0c                	jne    c0019b8e <CPU::detectFeatures()+0x7b0>
c0019b82:	50                   	push   eax
c0019b83:	50                   	push   eax
c0019b84:	68 16 c7 02 c0       	push   0xc002c716
c0019b89:	e9 a5 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019b8e:	83 f8 04             	cmp    eax,0x4
c0019b91:	75 0c                	jne    c0019b9f <CPU::detectFeatures()+0x7c1>
c0019b93:	50                   	push   eax
c0019b94:	50                   	push   eax
c0019b95:	68 22 c7 02 c0       	push   0xc002c722
c0019b9a:	e9 94 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019b9f:	83 f8 03             	cmp    eax,0x3
c0019ba2:	0f 85 19 02 00 00    	jne    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019ba8:	50                   	push   eax
c0019ba9:	50                   	push   eax
c0019baa:	68 2a c7 02 c0       	push   0xc002c72a
c0019baf:	e9 7f 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019bb4:	80 fa 06             	cmp    dl,0x6
c0019bb7:	0f 85 db 00 00 00    	jne    c0019c98 <CPU::detectFeatures()+0x8ba>
c0019bbd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019bc3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019bc8:	66 81 fa 80 01       	cmp    dx,0x180
c0019bcd:	75 0c                	jne    c0019bdb <CPU::detectFeatures()+0x7fd>
c0019bcf:	50                   	push   eax
c0019bd0:	50                   	push   eax
c0019bd1:	68 35 c7 02 c0       	push   0xc002c735
c0019bd6:	e9 58 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019bdb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019be1:	66 f7 c1 80 ff       	test   cx,0xff80
c0019be6:	75 0c                	jne    c0019bf4 <CPU::detectFeatures()+0x816>
c0019be8:	50                   	push   eax
c0019be9:	50                   	push   eax
c0019bea:	68 45 c7 02 c0       	push   0xc002c745
c0019bef:	e9 3f 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019bf4:	66 81 fa 40 02       	cmp    dx,0x240
c0019bf9:	75 0c                	jne    c0019c07 <CPU::detectFeatures()+0x829>
c0019bfb:	55                   	push   ebp
c0019bfc:	55                   	push   ebp
c0019bfd:	68 4c c7 02 c0       	push   0xc002c74c
c0019c02:	e9 2c 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019c07:	66 81 fa 80 02       	cmp    dx,0x280
c0019c0c:	75 0c                	jne    c0019c1a <CPU::detectFeatures()+0x83c>
c0019c0e:	57                   	push   edi
c0019c0f:	57                   	push   edi
c0019c10:	68 55 c7 02 c0       	push   0xc002c755
c0019c15:	e9 19 01 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019c1a:	66 81 fa 40 03       	cmp    dx,0x340
c0019c1f:	74 ed                	je     c0019c0e <CPU::detectFeatures()+0x830>
c0019c21:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019c26:	75 0c                	jne    c0019c34 <CPU::detectFeatures()+0x856>
c0019c28:	56                   	push   esi
c0019c29:	56                   	push   esi
c0019c2a:	68 5c c7 02 c0       	push   0xc002c75c
c0019c2f:	e9 ff 00 00 00       	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019c34:	83 f8 06             	cmp    eax,0x6
c0019c37:	0f 84 45 ff ff ff    	je     c0019b82 <CPU::detectFeatures()+0x7a4>
c0019c3d:	83 f8 04             	cmp    eax,0x4
c0019c40:	0f 84 4d ff ff ff    	je     c0019b93 <CPU::detectFeatures()+0x7b5>
c0019c46:	83 f8 03             	cmp    eax,0x3
c0019c49:	0f 85 72 01 00 00    	jne    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019c4f:	51                   	push   ecx
c0019c50:	51                   	push   ecx
c0019c51:	68 65 c7 02 c0       	push   0xc002c765
c0019c56:	53                   	push   ebx
c0019c57:	e8 06 a8 ff ff       	call   c0014462 <Device::setName(char const*)>
c0019c5c:	b1 c1                	mov    cl,0xc1
c0019c5e:	88 c8                	mov    al,cl
c0019c60:	e6 22                	out    0x22,al
c0019c62:	e4 23                	in     al,0x23
c0019c64:	88 c2                	mov    dl,al
c0019c66:	88 c8                	mov    al,cl
c0019c68:	e6 22                	out    0x22,al
c0019c6a:	88 d0                	mov    al,dl
c0019c6c:	83 c8 10             	or     eax,0x10
c0019c6f:	e6 23                	out    0x23,al
c0019c71:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019c78:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019c7b:	89 d0                	mov    eax,edx
c0019c7d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019c83:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019c87:	40                   	inc    eax
c0019c88:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019c8e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019c93:	e9 a1 00 00 00       	jmp    c0019d39 <CPU::detectFeatures()+0x95b>
c0019c98:	83 f8 06             	cmp    eax,0x6
c0019c9b:	0f 84 e1 fe ff ff    	je     c0019b82 <CPU::detectFeatures()+0x7a4>
c0019ca1:	83 f8 04             	cmp    eax,0x4
c0019ca4:	0f 84 e9 fe ff ff    	je     c0019b93 <CPU::detectFeatures()+0x7b5>
c0019caa:	83 f8 03             	cmp    eax,0x3
c0019cad:	0f 85 0e 01 00 00    	jne    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019cb3:	52                   	push   edx
c0019cb4:	52                   	push   edx
c0019cb5:	68 70 c7 02 c0       	push   0xc002c770
c0019cba:	eb 77                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019cbc:	83 f8 07             	cmp    eax,0x7
c0019cbf:	75 09                	jne    c0019cca <CPU::detectFeatures()+0x8ec>
c0019cc1:	50                   	push   eax
c0019cc2:	50                   	push   eax
c0019cc3:	68 7a c7 02 c0       	push   0xc002c77a
c0019cc8:	eb 69                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019cca:	83 f8 0a             	cmp    eax,0xa
c0019ccd:	75 09                	jne    c0019cd8 <CPU::detectFeatures()+0x8fa>
c0019ccf:	50                   	push   eax
c0019cd0:	50                   	push   eax
c0019cd1:	68 85 c7 02 c0       	push   0xc002c785
c0019cd6:	eb 5b                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019cd8:	83 f8 0b             	cmp    eax,0xb
c0019cdb:	75 09                	jne    c0019ce6 <CPU::detectFeatures()+0x908>
c0019cdd:	50                   	push   eax
c0019cde:	50                   	push   eax
c0019cdf:	68 8d c7 02 c0       	push   0xc002c78d
c0019ce4:	eb 4d                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019ce6:	83 f8 08             	cmp    eax,0x8
c0019ce9:	75 09                	jne    c0019cf4 <CPU::detectFeatures()+0x916>
c0019ceb:	50                   	push   eax
c0019cec:	50                   	push   eax
c0019ced:	68 96 c7 02 c0       	push   0xc002c796
c0019cf2:	eb 3f                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019cf4:	83 f8 09             	cmp    eax,0x9
c0019cf7:	75 09                	jne    c0019d02 <CPU::detectFeatures()+0x924>
c0019cf9:	50                   	push   eax
c0019cfa:	50                   	push   eax
c0019cfb:	68 9e c7 02 c0       	push   0xc002c79e
c0019d00:	eb 31                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019d02:	83 f8 05             	cmp    eax,0x5
c0019d05:	75 09                	jne    c0019d10 <CPU::detectFeatures()+0x932>
c0019d07:	50                   	push   eax
c0019d08:	50                   	push   eax
c0019d09:	68 a6 c7 02 c0       	push   0xc002c7a6
c0019d0e:	eb 23                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019d10:	83 f8 0c             	cmp    eax,0xc
c0019d13:	75 09                	jne    c0019d1e <CPU::detectFeatures()+0x940>
c0019d15:	55                   	push   ebp
c0019d16:	55                   	push   ebp
c0019d17:	68 b4 c7 02 c0       	push   0xc002c7b4
c0019d1c:	eb 15                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019d1e:	83 f8 0d             	cmp    eax,0xd
c0019d21:	75 09                	jne    c0019d2c <CPU::detectFeatures()+0x94e>
c0019d23:	57                   	push   edi
c0019d24:	57                   	push   edi
c0019d25:	68 bf c7 02 c0       	push   0xc002c7bf
c0019d2a:	eb 07                	jmp    c0019d33 <CPU::detectFeatures()+0x955>
c0019d2c:	56                   	push   esi
c0019d2d:	56                   	push   esi
c0019d2e:	68 d3 c7 02 c0       	push   0xc002c7d3
c0019d33:	53                   	push   ebx
c0019d34:	e8 29 a7 ff ff       	call   c0014462 <Device::setName(char const*)>
c0019d39:	83 c4 10             	add    esp,0x10
c0019d3c:	e9 80 00 00 00       	jmp    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019d41:	51                   	push   ecx
c0019d42:	51                   	push   ecx
c0019d43:	68 1f c6 02 c0       	push   0xc002c61f
c0019d48:	55                   	push   ebp
c0019d49:	e8 e6 6a fe ff       	call   c0000834 <strcpy>
c0019d4e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019d58:	e8 51 65 fe ff       	call   c00002ae <is486>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	85 c0                	test   eax,eax
c0019d62:	74 2b                	je     c0019d8f <CPU::detectFeatures()+0x9b1>
c0019d64:	52                   	push   edx
c0019d65:	52                   	push   edx
c0019d66:	68 df c7 02 c0       	push   0xc002c7df
c0019d6b:	53                   	push   ebx
c0019d6c:	e8 f1 a6 ff ff       	call   c0014462 <Device::setName(char const*)>
c0019d71:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019d78:	0f 20 c0             	mov    eax,cr0
c0019d7b:	83 e0 14             	and    eax,0x14
c0019d7e:	83 c4 10             	add    esp,0x10
c0019d81:	83 f8 04             	cmp    eax,0x4
c0019d84:	75 1f                	jne    c0019da5 <CPU::detectFeatures()+0x9c7>
c0019d86:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019d8d:	eb 32                	jmp    c0019dc1 <CPU::detectFeatures()+0x9e3>
c0019d8f:	50                   	push   eax
c0019d90:	50                   	push   eax
c0019d91:	68 ea c7 02 c0       	push   0xc002c7ea
c0019d96:	53                   	push   ebx
c0019d97:	e8 c6 a6 ff ff       	call   c0014462 <Device::setName(char const*)>
c0019d9c:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019da3:	eb d3                	jmp    c0019d78 <CPU::detectFeatures()+0x99a>
c0019da5:	e8 df 64 fe ff       	call   c0000289 <hasLegacyFPU>
c0019daa:	83 e0 01             	and    eax,0x1
c0019dad:	8d 14 00             	lea    edx,[eax+eax*1]
c0019db0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019db6:	83 e0 fd             	and    eax,0xfffffffd
c0019db9:	09 d0                	or     eax,edx
c0019dbb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019dc1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019dc8:	83 c4 4c             	add    esp,0x4c
c0019dcb:	5b                   	pop    ebx
c0019dcc:	5e                   	pop    esi
c0019dcd:	5f                   	pop    edi
c0019dce:	5d                   	pop    ebp
c0019dcf:	c3                   	ret    

c0019dd0 <CPU::setupSMEP()>:
c0019dd0:	0f 20 e0             	mov    eax,cr4
c0019dd3:	0d 00 00 10 00       	or     eax,0x100000
c0019dd8:	0f 22 e0             	mov    cr4,eax
c0019ddb:	c3                   	ret    

c0019ddc <CPU::setupUMIP()>:
c0019ddc:	0f 20 e0             	mov    eax,cr4
c0019ddf:	80 cc 08             	or     ah,0x8
c0019de2:	0f 22 e0             	mov    cr4,eax
c0019de5:	c3                   	ret    

c0019de6 <CPU::setupTSC()>:
c0019de6:	0f 20 e0             	mov    eax,cr4
c0019de9:	83 c8 04             	or     eax,0x4
c0019dec:	0f 22 e0             	mov    cr4,eax
c0019def:	c3                   	ret    

c0019df0 <CPU::setupLargePages()>:
c0019df0:	0f 20 e0             	mov    eax,cr4
c0019df3:	83 c8 10             	or     eax,0x10
c0019df6:	0f 22 e0             	mov    cr4,eax
c0019df9:	c3                   	ret    

c0019dfa <CPU::setupPAT()>:
c0019dfa:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0019dff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019e06:	74 2c                	je     c0019e34 <CPU::setupPAT()+0x3a>
c0019e08:	53                   	push   ebx
c0019e09:	83 ec 10             	sub    esp,0x10
c0019e0c:	68 77 02 00 00       	push   0x277
c0019e11:	50                   	push   eax
c0019e12:	e8 43 50 ff ff       	call   c000ee5a <Computer::rdmsr(unsigned int)>
c0019e17:	83 e2 f8             	and    edx,0xfffffff8
c0019e1a:	83 ca 01             	or     edx,0x1
c0019e1d:	52                   	push   edx
c0019e1e:	50                   	push   eax
c0019e1f:	68 77 02 00 00       	push   0x277
c0019e24:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c0019e2a:	e8 57 50 ff ff       	call   c000ee86 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019e2f:	83 c4 28             	add    esp,0x28
c0019e32:	5b                   	pop    ebx
c0019e33:	c3                   	ret    
c0019e34:	c3                   	ret    
c0019e35:	90                   	nop

c0019e36 <CPU::setupMTRR()>:
c0019e36:	c3                   	ret    
c0019e37:	90                   	nop

c0019e38 <CPU::setupGlobalPages()>:
c0019e38:	0f 20 e0             	mov    eax,cr4
c0019e3b:	0c 80                	or     al,0x80
c0019e3d:	0f 22 e0             	mov    cr4,eax
c0019e40:	c3                   	ret    
c0019e41:	90                   	nop

c0019e42 <CPU::allowUsermodeDataAccess()>:
c0019e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e46:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e4d:	74 03                	je     c0019e52 <CPU::allowUsermodeDataAccess()+0x10>
c0019e4f:	0f 01 cb             	stac   
c0019e52:	c3                   	ret    
c0019e53:	90                   	nop

c0019e54 <CPU::prohibitUsermodeDataAccess()>:
c0019e54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e58:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019e5f:	74 03                	je     c0019e64 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019e61:	0f 01 ca             	clac   
c0019e64:	c3                   	ret    
c0019e65:	90                   	nop

c0019e66 <CPU::setupSMAP()>:
c0019e66:	0f 20 e0             	mov    eax,cr4
c0019e69:	0d 00 00 20 00       	or     eax,0x200000
c0019e6e:	0f 22 e0             	mov    cr4,eax
c0019e71:	eb e1                	jmp    c0019e54 <CPU::prohibitUsermodeDataAccess()>
c0019e73:	90                   	nop

c0019e74 <CPU::setupFeatures()>:
c0019e74:	83 ec 0c             	sub    esp,0xc
c0019e77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e7b:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019e82:	74 07                	je     c0019e8b <CPU::setupFeatures()+0x17>
c0019e84:	52                   	push   edx
c0019e85:	e8 46 ff ff ff       	call   c0019dd0 <CPU::setupSMEP()>
c0019e8a:	58                   	pop    eax
c0019e8b:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019e92:	74 07                	je     c0019e9b <CPU::setupFeatures()+0x27>
c0019e94:	52                   	push   edx
c0019e95:	e8 cc ff ff ff       	call   c0019e66 <CPU::setupSMAP()>
c0019e9a:	58                   	pop    eax
c0019e9b:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019ea2:	74 07                	je     c0019eab <CPU::setupFeatures()+0x37>
c0019ea4:	52                   	push   edx
c0019ea5:	e8 32 ff ff ff       	call   c0019ddc <CPU::setupUMIP()>
c0019eaa:	58                   	pop    eax
c0019eab:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019eb2:	74 07                	je     c0019ebb <CPU::setupFeatures()+0x47>
c0019eb4:	52                   	push   edx
c0019eb5:	e8 2c ff ff ff       	call   c0019de6 <CPU::setupTSC()>
c0019eba:	58                   	pop    eax
c0019ebb:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019ec2:	74 07                	je     c0019ecb <CPU::setupFeatures()+0x57>
c0019ec4:	52                   	push   edx
c0019ec5:	e8 26 ff ff ff       	call   c0019df0 <CPU::setupLargePages()>
c0019eca:	59                   	pop    ecx
c0019ecb:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019ed2:	74 07                	je     c0019edb <CPU::setupFeatures()+0x67>
c0019ed4:	52                   	push   edx
c0019ed5:	e8 5e ff ff ff       	call   c0019e38 <CPU::setupGlobalPages()>
c0019eda:	58                   	pop    eax
c0019edb:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019ee2:	74 0c                	je     c0019ef0 <CPU::setupFeatures()+0x7c>
c0019ee4:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019ee8:	83 c4 0c             	add    esp,0xc
c0019eeb:	e9 0a ff ff ff       	jmp    c0019dfa <CPU::setupPAT()>
c0019ef0:	83 c4 0c             	add    esp,0xc
c0019ef3:	c3                   	ret    

c0019ef4 <CPU::open(int, int, void*)>:
c0019ef4:	57                   	push   edi
c0019ef5:	56                   	push   esi
c0019ef6:	53                   	push   ebx
c0019ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019efb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019eff:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019f05:	83 ec 0c             	sub    esp,0xc
c0019f08:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019f0e:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019f14:	50                   	push   eax
c0019f15:	e8 2c 52 ff ff       	call   c000f146 <GDT::setup()>
c0019f1a:	83 c4 0c             	add    esp,0xc
c0019f1d:	6a 00                	push   0x0
c0019f1f:	68 ef be ad de       	push   0xdeadbeef
c0019f24:	57                   	push   edi
c0019f25:	e8 a0 74 ff ff       	call   c00113ca <TSS::setup(unsigned long, unsigned long)>
c0019f2a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019f2d:	e8 78 74 ff ff       	call   c00113aa <TSS::flush()>
c0019f32:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019f38:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f3b:	e8 6a 54 ff ff       	call   c000f3aa <IDT::setup()>
c0019f40:	b8 00 04 00 00       	mov    eax,0x400
c0019f45:	0f 23 f8             	mov    db7,eax
c0019f48:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019f52:	e8 c9 5f ff ff       	call   c000ff20 <Phys::allocatePage()>
c0019f57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019f5d:	89 30                	mov    DWORD PTR [eax],esi
c0019f5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019f65:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019f68:	58                   	pop    eax
c0019f69:	5a                   	pop    edx
c0019f6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019f70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f74:	e8 f1 85 ff ff       	call   c001256a <VAS::setCPUSpecific(unsigned long)>
c0019f79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019f7c:	e8 5d f4 ff ff       	call   c00193de <CPU::detectFeatures()>
c0019f81:	e8 33 b9 ff ff       	call   c00158b9 <setupInterruptController()>
c0019f86:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019f8c:	a1 e0 f2 02 c0       	mov    eax,ds:0xc002f2e0
c0019f91:	83 e0 10             	and    eax,0x10
c0019f94:	83 f8 01             	cmp    eax,0x1
c0019f97:	19 c0                	sbb    eax,eax
c0019f99:	83 e0 46             	and    eax,0x46
c0019f9c:	83 c0 1e             	add    eax,0x1e
c0019f9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fa2:	e8 6a cf ff ff       	call   c0016f11 <setupTimer(int)>
c0019fa7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019fad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fb0:	e8 bf fe ff ff       	call   c0019e74 <CPU::setupFeatures()>
c0019fb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fb8:	e8 a5 f1 ff ff       	call   c0019162 <CPU::displayFeatures()>
c0019fbd:	83 c4 10             	add    esp,0x10
c0019fc0:	31 c0                	xor    eax,eax
c0019fc2:	5b                   	pop    ebx
c0019fc3:	5e                   	pop    esi
c0019fc4:	5f                   	pop    edi
c0019fc5:	c3                   	ret    

c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019fc6:	57                   	push   edi
c0019fc7:	56                   	push   esi
c0019fc8:	53                   	push   ebx
c0019fc9:	51                   	push   ecx
c0019fca:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fce:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019fd1:	0f 02 c0             	lar    eax,ax
c0019fd4:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019fd7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019fdb:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019fde:	88 ca                	mov    dl,cl
c0019fe0:	c0 ea 06             	shr    dl,0x6
c0019fe3:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019fe7:	89 ca                	mov    edx,ecx
c0019fe9:	66 c1 ea 03          	shr    dx,0x3
c0019fed:	83 e2 07             	and    edx,0x7
c0019ff0:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019ff5:	88 17                	mov    BYTE PTR [edi],dl
c0019ff7:	0f 84 a6 01 00 00    	je     c001a1a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019ffd:	83 e1 07             	and    ecx,0x7
c001a000:	80 f9 04             	cmp    cl,0x4
c001a003:	0f 84 98 00 00 00    	je     c001a0a1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001a009:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a00e:	0f 95 c0             	setne  al
c001a011:	80 f9 05             	cmp    cl,0x5
c001a014:	0f 95 c2             	setne  dl
c001a017:	08 c2                	or     dl,al
c001a019:	74 79                	je     c001a094 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c001a01b:	84 c9                	test   cl,cl
c001a01d:	75 05                	jne    c001a024 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001a01f:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a022:	eb 3c                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a024:	80 f9 01             	cmp    cl,0x1
c001a027:	75 05                	jne    c001a02e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001a029:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a02c:	eb 32                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a02e:	80 f9 02             	cmp    cl,0x2
c001a031:	75 05                	jne    c001a038 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c001a033:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a036:	eb 28                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a038:	31 c0                	xor    eax,eax
c001a03a:	80 f9 03             	cmp    cl,0x3
c001a03d:	75 05                	jne    c001a044 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001a03f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a042:	eb 1c                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a044:	80 f9 05             	cmp    cl,0x5
c001a047:	75 05                	jne    c001a04e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001a049:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a04c:	eb 12                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a04e:	80 f9 06             	cmp    cl,0x6
c001a051:	75 05                	jne    c001a058 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c001a053:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a056:	eb 08                	jmp    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a058:	80 f9 07             	cmp    cl,0x7
c001a05b:	75 03                	jne    c001a060 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001a05d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a060:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a065:	75 10                	jne    c001a077 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001a067:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c001a06b:	b9 03 00 00 00       	mov    ecx,0x3
c001a070:	01 d0                	add    eax,edx
c001a072:	e9 37 01 00 00       	jmp    c001a1ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a077:	b9 02 00 00 00       	mov    ecx,0x2
c001a07c:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001a081:	0f 85 27 01 00 00    	jne    c001a1ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a087:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c001a08a:	b9 06 00 00 00       	mov    ecx,0x6
c001a08f:	e9 1a 01 00 00       	jmp    c001a1ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a094:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001a097:	b9 06 00 00 00       	mov    ecx,0x6
c001a09c:	e9 0f 01 00 00       	jmp    c001a1b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0a1:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001a0a4:	88 ca                	mov    dl,cl
c001a0a6:	c0 ea 06             	shr    dl,0x6
c001a0a9:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001a0ad:	89 ca                	mov    edx,ecx
c001a0af:	66 c1 ea 03          	shr    dx,0x3
c001a0b3:	83 e2 07             	and    edx,0x7
c001a0b6:	80 e1 07             	and    cl,0x7
c001a0b9:	75 05                	jne    c001a0c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c001a0bb:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c001a0be:	eb 4c                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0c0:	80 f9 01             	cmp    cl,0x1
c001a0c3:	75 05                	jne    c001a0ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001a0c5:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001a0c8:	eb 42                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0ca:	80 f9 02             	cmp    cl,0x2
c001a0cd:	75 05                	jne    c001a0d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c001a0cf:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001a0d2:	eb 38                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0d4:	80 f9 03             	cmp    cl,0x3
c001a0d7:	75 05                	jne    c001a0de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001a0d9:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001a0dc:	eb 2e                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0de:	80 f9 04             	cmp    cl,0x4
c001a0e1:	75 12                	jne    c001a0f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c001a0e3:	f6 c4 60             	test   ah,0x60
c001a0e6:	75 08                	jne    c001a0f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001a0e8:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c001a0eb:	8d 78 14             	lea    edi,[eax+0x14]
c001a0ee:	eb 1c                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0f0:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c001a0f3:	eb 17                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0f5:	80 f9 05             	cmp    cl,0x5
c001a0f8:	75 05                	jne    c001a0ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a0fa:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a0fd:	eb 0d                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a0ff:	80 f9 06             	cmp    cl,0x6
c001a102:	75 05                	jne    c001a109 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a104:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a107:	eb 03                	jmp    c001a10c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a109:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a10c:	84 d2                	test   dl,dl
c001a10e:	75 05                	jne    c001a115 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a110:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a113:	eb 3c                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a115:	80 fa 01             	cmp    dl,0x1
c001a118:	75 05                	jne    c001a11f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a11a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a11d:	eb 32                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a11f:	80 fa 02             	cmp    dl,0x2
c001a122:	75 05                	jne    c001a129 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a124:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a127:	eb 28                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a129:	80 fa 03             	cmp    dl,0x3
c001a12c:	75 05                	jne    c001a133 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a12e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a131:	eb 1e                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a133:	31 c0                	xor    eax,eax
c001a135:	80 fa 04             	cmp    dl,0x4
c001a138:	74 17                	je     c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a13a:	80 fa 05             	cmp    dl,0x5
c001a13d:	75 05                	jne    c001a144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a13f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a142:	eb 0d                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a144:	80 fa 06             	cmp    dl,0x6
c001a147:	75 05                	jne    c001a14e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a149:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a14c:	eb 03                	jmp    c001a151 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a14e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a151:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a156:	0f 94 c2             	sete   dl
c001a159:	80 f9 05             	cmp    cl,0x5
c001a15c:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a160:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a165:	d3 e0                	shl    eax,cl
c001a167:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a16b:	74 0a                	je     c001a177 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a16d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a170:	b9 07 00 00 00       	mov    ecx,0x7
c001a175:	eb 37                	jmp    c001a1ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a177:	01 f8                	add    eax,edi
c001a179:	b9 03 00 00 00       	mov    ecx,0x3
c001a17e:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a183:	74 2b                	je     c001a1b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a185:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a18a:	75 0d                	jne    c001a199 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a18c:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a190:	01 c8                	add    eax,ecx
c001a192:	b9 04 00 00 00       	mov    ecx,0x4
c001a197:	eb 17                	jmp    c001a1b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a199:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a19c:	b9 07 00 00 00       	mov    ecx,0x7
c001a1a1:	eb 0d                	jmp    c001a1b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1a3:	b9 02 00 00 00       	mov    ecx,0x2
c001a1a8:	b2 01                	mov    dl,0x1
c001a1aa:	31 c0                	xor    eax,eax
c001a1ac:	eb 02                	jmp    c001a1b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a1ae:	31 d2                	xor    edx,edx
c001a1b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a1b4:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a1b6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a1ba:	88 11                	mov    BYTE PTR [ecx],dl
c001a1bc:	5a                   	pop    edx
c001a1bd:	5b                   	pop    ebx
c001a1be:	5e                   	pop    esi
c001a1bf:	5f                   	pop    edi
c001a1c0:	c3                   	ret    

c001a1c1 <Krnl::smpEntry()>:
c001a1c1:	eb fe                	jmp    c001a1c1 <Krnl::smpEntry()>

c001a1c3 <Krnl::startCPU(int)>:
c001a1c3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001a1c8:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a1cf:	0f 84 36 01 00 00    	je     c001a30b <Krnl::startCPU(int)+0x148>
c001a1d5:	53                   	push   ebx
c001a1d6:	83 ec 10             	sub    esp,0x10
c001a1d9:	fa                   	cli    
c001a1da:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001a1e0:	6a 1b                	push   0x1b
c001a1e2:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001a1e8:	e8 6d 4c ff ff       	call   c000ee5a <Computer::rdmsr(unsigned int)>
c001a1ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a1f2:	89 c3                	mov    ebx,eax
c001a1f4:	58                   	pop    eax
c001a1f5:	5a                   	pop    edx
c001a1f6:	53                   	push   ebx
c001a1f7:	68 24 c8 02 c0       	push   0xc002c824
c001a1fc:	e8 5e 8c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001a201:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a20b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a20f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a219:	c1 e0 18             	shl    eax,0x18
c001a21c:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a22b:	09 c2                	or     edx,eax
c001a22d:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a233:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a239:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a23f:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a245:	80 cd c5             	or     ch,0xc5
c001a248:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a24e:	f3 90                	pause  
c001a250:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a252:	0f ba e1 0c          	bt     ecx,0xc
c001a256:	72 f6                	jb     c001a24e <Krnl::startCPU(int)+0x8b>
c001a258:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a25e:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a264:	09 c1                	or     ecx,eax
c001a266:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a26c:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a272:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a278:	80 cd 85             	or     ch,0x85
c001a27b:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a281:	f3 90                	pause  
c001a283:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a285:	0f ba e1 0c          	bt     ecx,0xc
c001a289:	72 f6                	jb     c001a281 <Krnl::startCPU(int)+0xbe>
c001a28b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a295:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a29b:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2a1:	09 c1                	or     ecx,eax
c001a2a3:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a2a9:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a2af:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a2b5:	81 c9 02 06 00 00    	or     ecx,0x602
c001a2bb:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a2c1:	f3 90                	pause  
c001a2c3:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a2c5:	0f ba e1 0c          	bt     ecx,0xc
c001a2c9:	72 f6                	jb     c001a2c1 <Krnl::startCPU(int)+0xfe>
c001a2cb:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a2d5:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a2db:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a2e1:	09 c8                	or     eax,ecx
c001a2e3:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a2e9:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a2ef:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a2f4:	0d 02 06 00 00       	or     eax,0x602
c001a2f9:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a2ff:	f3 90                	pause  
c001a301:	8b 02                	mov    eax,DWORD PTR [edx]
c001a303:	0f ba e0 0c          	bt     eax,0xc
c001a307:	72 f6                	jb     c001a2ff <Krnl::startCPU(int)+0x13c>
c001a309:	eb fe                	jmp    c001a309 <Krnl::startCPU(int)+0x146>
c001a30b:	c3                   	ret    

c001a30c <Krnl::startCPUs()>:
c001a30c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001a311:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a317:	88 c2                	mov    dl,al
c001a319:	83 e2 0a             	and    edx,0xa
c001a31c:	80 fa 0a             	cmp    dl,0xa
c001a31f:	75 09                	jne    c001a32a <Krnl::startCPUs()+0x1e>
c001a321:	a8 01                	test   al,0x1
c001a323:	74 05                	je     c001a32a <Krnl::startCPUs()+0x1e>
c001a325:	e9 71 5e fe ff       	jmp    c000019b <prepareTramp>
c001a32a:	c3                   	ret    
c001a32b:	90                   	nop

c001a32c <EnvVarContainer::getEnv(char const*)>:
c001a32c:	57                   	push   edi
c001a32d:	56                   	push   esi
c001a32e:	53                   	push   ebx
c001a32f:	31 db                	xor    ebx,ebx
c001a331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a335:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a337:	7e 2b                	jle    c001a364 <EnvVarContainer::getEnv(char const*)+0x38>
c001a339:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a340:	50                   	push   eax
c001a341:	50                   	push   eax
c001a342:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a345:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a348:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a34c:	e8 6f 65 fe ff       	call   c00008c0 <strcmp>
c001a351:	83 c4 10             	add    esp,0x10
c001a354:	85 c0                	test   eax,eax
c001a356:	75 09                	jne    c001a361 <EnvVarContainer::getEnv(char const*)+0x35>
c001a358:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a35b:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a35f:	eb 05                	jmp    c001a366 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a361:	43                   	inc    ebx
c001a362:	eb d1                	jmp    c001a335 <EnvVarContainer::getEnv(char const*)+0x9>
c001a364:	31 c0                	xor    eax,eax
c001a366:	5b                   	pop    ebx
c001a367:	5e                   	pop    esi
c001a368:	5f                   	pop    edi
c001a369:	c3                   	ret    

c001a36a <EnvVarContainer::setEnv(char const*, char const*)>:
c001a36a:	55                   	push   ebp
c001a36b:	57                   	push   edi
c001a36c:	56                   	push   esi
c001a36d:	53                   	push   ebx
c001a36e:	83 ec 28             	sub    esp,0x28
c001a371:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a375:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001a379:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a37d:	56                   	push   esi
c001a37e:	e8 11 64 fe ff       	call   c0000794 <strlen>
c001a383:	40                   	inc    eax
c001a384:	89 04 24             	mov    DWORD PTR [esp],eax
c001a387:	e8 28 55 ff ff       	call   c000f8b4 <malloc>
c001a38c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a38f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a393:	e8 fc 63 fe ff       	call   c0000794 <strlen>
c001a398:	40                   	inc    eax
c001a399:	89 04 24             	mov    DWORD PTR [esp],eax
c001a39c:	e8 13 55 ff ff       	call   c000f8b4 <malloc>
c001a3a1:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3a8:	e8 e7 63 fe ff       	call   c0000794 <strlen>
c001a3ad:	83 c4 0c             	add    esp,0xc
c001a3b0:	40                   	inc    eax
c001a3b1:	50                   	push   eax
c001a3b2:	6a 00                	push   0x0
c001a3b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a3b8:	e8 bb 63 fe ff       	call   c0000778 <memset>
c001a3bd:	89 34 24             	mov    DWORD PTR [esp],esi
c001a3c0:	e8 cf 63 fe ff       	call   c0000794 <strlen>
c001a3c5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a3c9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3d1:	89 de                	mov    esi,ebx
c001a3d3:	e8 bc 63 fe ff       	call   c0000794 <strlen>
c001a3d8:	83 c4 0c             	add    esp,0xc
c001a3db:	40                   	inc    eax
c001a3dc:	50                   	push   eax
c001a3dd:	6a 00                	push   0x0
c001a3df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a3e3:	e8 90 63 fe ff       	call   c0000778 <memset>
c001a3e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a3eb:	e8 a4 63 fe ff       	call   c0000794 <strlen>
c001a3f0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a3f4:	8d 48 01             	lea    ecx,[eax+0x1]
c001a3f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a3f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3fc:	40                   	inc    eax
c001a3fd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001a400:	c1 e0 03             	shl    eax,0x3
c001a403:	5a                   	pop    edx
c001a404:	59                   	pop    ecx
c001a405:	50                   	push   eax
c001a406:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a409:	e8 92 54 ff ff       	call   c000f8a0 <realloc>
c001a40e:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a412:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a415:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001a418:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a41c:	b9 08 00 00 00       	mov    ecx,0x8
c001a421:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a423:	83 c4 2c             	add    esp,0x2c
c001a426:	5b                   	pop    ebx
c001a427:	5e                   	pop    esi
c001a428:	5f                   	pop    edi
c001a429:	5d                   	pop    ebp
c001a42a:	c3                   	ret    
c001a42b:	90                   	nop

c001a42c <EnvVarContainer::deleteEnv(char const*)>:
c001a42c:	c3                   	ret    
c001a42d:	90                   	nop

c001a42e <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a42e:	55                   	push   ebp
c001a42f:	57                   	push   edi
c001a430:	56                   	push   esi
c001a431:	53                   	push   ebx
c001a432:	81 ec 38 01 00 00    	sub    esp,0x138
c001a438:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a43f:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a446:	68 14 01 00 00       	push   0x114
c001a44b:	e8 64 54 ff ff       	call   c000f8b4 <malloc>
c001a450:	83 c4 0c             	add    esp,0xc
c001a453:	89 c5                	mov    ebp,eax
c001a455:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a458:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a45f:	50                   	push   eax
c001a460:	e8 59 8f ff ff       	call   c00133be <File::File(char const*, Process*)>
c001a465:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a468:	e8 23 92 ff ff       	call   c0013690 <File::exists()>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	84 c0                	test   al,al
c001a472:	75 32                	jne    c001a4a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a474:	51                   	push   ecx
c001a475:	51                   	push   ecx
c001a476:	6a 12                	push   0x12
c001a478:	55                   	push   ebp
c001a479:	e8 a4 8f ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001a47e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a481:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a484:	89 34 24             	mov    DWORD PTR [esp],esi
c001a487:	e8 08 63 fe ff       	call   c0000794 <strlen>
c001a48c:	5a                   	pop    edx
c001a48d:	31 d2                	xor    edx,edx
c001a48f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a493:	51                   	push   ecx
c001a494:	56                   	push   esi
c001a495:	52                   	push   edx
c001a496:	50                   	push   eax
c001a497:	55                   	push   ebp
c001a498:	ff d7                	call   edi
c001a49a:	83 c4 14             	add    esp,0x14
c001a49d:	55                   	push   ebp
c001a49e:	e8 dd 8f ff ff       	call   c0013480 <File::close()>
c001a4a3:	83 c4 10             	add    esp,0x10
c001a4a6:	31 f6                	xor    esi,esi
c001a4a8:	50                   	push   eax
c001a4a9:	68 00 01 00 00       	push   0x100
c001a4ae:	6a 00                	push   0x0
c001a4b0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4b4:	50                   	push   eax
c001a4b5:	e8 be 62 fe ff       	call   c0000778 <memset>
c001a4ba:	58                   	pop    eax
c001a4bb:	5a                   	pop    edx
c001a4bc:	6a 01                	push   0x1
c001a4be:	55                   	push   ebp
c001a4bf:	e8 5e 8f ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001a4c4:	83 c4 10             	add    esp,0x10
c001a4c7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a4cf:	83 ec 0c             	sub    esp,0xc
c001a4d2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a4d5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a4d9:	51                   	push   ecx
c001a4da:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a4de:	52                   	push   edx
c001a4df:	6a 00                	push   0x0
c001a4e1:	6a 01                	push   0x1
c001a4e3:	55                   	push   ebp
c001a4e4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a4e7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a4eb:	83 c4 20             	add    esp,0x20
c001a4ee:	3c 0d                	cmp    al,0xd
c001a4f0:	0f 84 16 01 00 00    	je     c001a60c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a4f6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a4fb:	0f 84 fc 00 00 00    	je     c001a5fd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a501:	3c 0a                	cmp    al,0xa
c001a503:	74 13                	je     c001a518 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a505:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a50a:	74 0c                	je     c001a518 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a50c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a512:	0f 8e e5 00 00 00    	jle    c001a5fd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a518:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a51c:	83 ec 0c             	sub    esp,0xc
c001a51f:	8d 78 01             	lea    edi,[eax+0x1]
c001a522:	57                   	push   edi
c001a523:	e8 8c 53 ff ff       	call   c000f8b4 <malloc>
c001a528:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a52c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a530:	8d 56 04             	lea    edx,[esi+0x4]
c001a533:	89 14 24             	mov    DWORD PTR [esp],edx
c001a536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a53a:	e8 75 53 ff ff       	call   c000f8b4 <malloc>
c001a53f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a543:	83 c4 0c             	add    esp,0xc
c001a546:	57                   	push   edi
c001a547:	6a 00                	push   0x0
c001a549:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a54d:	e8 26 62 fe ff       	call   c0000778 <memset>
c001a552:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a556:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a55a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a55e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a560:	83 c4 0c             	add    esp,0xc
c001a563:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a567:	52                   	push   edx
c001a568:	6a 00                	push   0x0
c001a56a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a56e:	e8 05 62 fe ff       	call   c0000778 <memset>
c001a573:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a577:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a57b:	89 34 24             	mov    DWORD PTR [esp],esi
c001a57e:	e8 11 62 fe ff       	call   c0000794 <strlen>
c001a583:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a587:	89 c1                	mov    ecx,eax
c001a589:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a58b:	5e                   	pop    esi
c001a58c:	5f                   	pop    edi
c001a58d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a591:	68 35 c8 02 c0       	push   0xc002c835
c001a596:	e8 c4 88 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001a59b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a59d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a5a0:	40                   	inc    eax
c001a5a1:	83 c4 10             	add    esp,0x10
c001a5a4:	89 03                	mov    DWORD PTR [ebx],eax
c001a5a6:	85 d2                	test   edx,edx
c001a5a8:	75 0c                	jne    c001a5b6 <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a5aa:	83 ec 0c             	sub    esp,0xc
c001a5ad:	6a 08                	push   0x8
c001a5af:	e8 00 53 ff ff       	call   c000f8b4 <malloc>
c001a5b4:	eb 0c                	jmp    c001a5c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a5b6:	c1 e0 03             	shl    eax,0x3
c001a5b9:	51                   	push   ecx
c001a5ba:	51                   	push   ecx
c001a5bb:	50                   	push   eax
c001a5bc:	52                   	push   edx
c001a5bd:	e8 de 52 ff ff       	call   c000f8a0 <realloc>
c001a5c2:	83 c4 10             	add    esp,0x10
c001a5c5:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a5c8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a5ca:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a5cd:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a5d1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a5d5:	b9 08 00 00 00       	mov    ecx,0x8
c001a5da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5dc:	31 f6                	xor    esi,esi
c001a5de:	52                   	push   edx
c001a5df:	68 00 01 00 00       	push   0x100
c001a5e4:	6a 00                	push   0x0
c001a5e6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a5ea:	50                   	push   eax
c001a5eb:	e8 88 61 fe ff       	call   c0000778 <memset>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a5fb:	eb 0f                	jmp    c001a60c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a5fd:	3c 3d                	cmp    al,0x3d
c001a5ff:	74 07                	je     c001a608 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a601:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a605:	46                   	inc    esi
c001a606:	eb 04                	jmp    c001a60c <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a608:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a60c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a611:	0f 85 b8 fe ff ff    	jne    c001a4cf <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a617:	50                   	push   eax
c001a618:	50                   	push   eax
c001a619:	ff 33                	push   DWORD PTR [ebx]
c001a61b:	68 43 c8 02 c0       	push   0xc002c843
c001a620:	e8 3a 88 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001a625:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a62b:	5b                   	pop    ebx
c001a62c:	5e                   	pop    esi
c001a62d:	5f                   	pop    edi
c001a62e:	5d                   	pop    ebp
c001a62f:	c3                   	ret    

c001a630 <EnvVarContainer::__loadSystem()>:
c001a630:	83 ec 10             	sub    esp,0x10
c001a633:	68 00 e8 02 c0       	push   0xc002e800
c001a638:	68 6e c8 02 c0       	push   0xc002c86e
c001a63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a641:	e8 e8 fd ff ff       	call   c001a42e <EnvVarContainer::loadFrom(char const*, char const*)>
c001a646:	83 c4 1c             	add    esp,0x1c
c001a649:	c3                   	ret    

c001a64a <EnvVarContainer::__loadUser()>:
c001a64a:	c3                   	ret    
c001a64b:	90                   	nop

c001a64c <EnvVarContainer::EnvVarContainer(Process*)>:
c001a64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a650:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a656:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a65a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a65e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a661:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a665:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a66c:	90                   	nop
c001a66d:	c3                   	ret    

c001a66e <EnvVarContainer::~EnvVarContainer()>:
c001a66e:	83 ec 0c             	sub    esp,0xc
c001a671:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a675:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a678:	85 c0                	test   eax,eax
c001a67a:	74 1d                	je     c001a699 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a680:	8b 00                	mov    eax,DWORD PTR [eax]
c001a682:	85 c0                	test   eax,eax
c001a684:	74 13                	je     c001a699 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a68a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a68d:	83 ec 0c             	sub    esp,0xc
c001a690:	50                   	push   eax
c001a691:	e8 2e 52 ff ff       	call   c000f8c4 <free>
c001a696:	83 c4 10             	add    esp,0x10
c001a699:	90                   	nop
c001a69a:	83 c4 0c             	add    esp,0xc
c001a69d:	c3                   	ret    

c001a69e <Krnl::getEnv(Process*, char const*)>:
c001a69e:	53                   	push   ebx
c001a69f:	83 ec 08             	sub    esp,0x8
c001a6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a6aa:	39 05 30 28 03 c0    	cmp    DWORD PTR ds:0xc0032830,eax
c001a6b0:	74 04                	je     c001a6b6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a6b2:	85 c0                	test   eax,eax
c001a6b4:	75 0b                	jne    c001a6c1 <Krnl::getEnv(Process*, char const*)+0x23>
c001a6b6:	a1 14 1e 03 c0       	mov    eax,ds:0xc0031e14
c001a6bb:	85 c0                	test   eax,eax
c001a6bd:	75 19                	jne    c001a6d8 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a6bf:	eb 27                	jmp    c001a6e8 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a6c1:	52                   	push   edx
c001a6c2:	52                   	push   edx
c001a6c3:	53                   	push   ebx
c001a6c4:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a6ca:	e8 5d fc ff ff       	call   c001a32c <EnvVarContainer::getEnv(char const*)>
c001a6cf:	83 c4 10             	add    esp,0x10
c001a6d2:	85 c0                	test   eax,eax
c001a6d4:	75 28                	jne    c001a6fe <Krnl::getEnv(Process*, char const*)+0x60>
c001a6d6:	eb de                	jmp    c001a6b6 <Krnl::getEnv(Process*, char const*)+0x18>
c001a6d8:	52                   	push   edx
c001a6d9:	52                   	push   edx
c001a6da:	53                   	push   ebx
c001a6db:	50                   	push   eax
c001a6dc:	e8 4b fc ff ff       	call   c001a32c <EnvVarContainer::getEnv(char const*)>
c001a6e1:	83 c4 10             	add    esp,0x10
c001a6e4:	85 c0                	test   eax,eax
c001a6e6:	75 16                	jne    c001a6fe <Krnl::getEnv(Process*, char const*)+0x60>
c001a6e8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a6ec:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a6f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a6f5:	83 c4 08             	add    esp,0x8
c001a6f8:	5b                   	pop    ebx
c001a6f9:	e9 2e fc ff ff       	jmp    c001a32c <EnvVarContainer::getEnv(char const*)>
c001a6fe:	83 c4 08             	add    esp,0x8
c001a701:	5b                   	pop    ebx
c001a702:	c3                   	ret    

c001a703 <Krnl::setEnvSystem(char const*, char const*)>:
c001a703:	83 ec 10             	sub    esp,0x10
c001a706:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a70a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a70e:	ff 35 18 1e 03 c0    	push   DWORD PTR ds:0xc0031e18
c001a714:	e8 51 fc ff ff       	call   c001a36a <EnvVarContainer::setEnv(char const*, char const*)>
c001a719:	83 c4 1c             	add    esp,0x1c
c001a71c:	c3                   	ret    

c001a71d <Krnl::setEnvUser(char const*, char const*)>:
c001a71d:	a1 14 1e 03 c0       	mov    eax,ds:0xc0031e14
c001a722:	85 c0                	test   eax,eax
c001a724:	74 15                	je     c001a73b <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a726:	83 ec 10             	sub    esp,0x10
c001a729:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a72d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a731:	50                   	push   eax
c001a732:	e8 33 fc ff ff       	call   c001a36a <EnvVarContainer::setEnv(char const*, char const*)>
c001a737:	83 c4 1c             	add    esp,0x1c
c001a73a:	c3                   	ret    
c001a73b:	c3                   	ret    

c001a73c <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a73c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a740:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a746:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a74a:	e9 1b fc ff ff       	jmp    c001a36a <EnvVarContainer::setEnv(char const*, char const*)>

c001a74f <Krnl::deleteEnvSystem(char const*)>:
c001a74f:	c3                   	ret    

c001a750 <Krnl::deleteEnvUser(char const*)>:
c001a750:	c3                   	ret    

c001a751 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a751:	c3                   	ret    

c001a752 <Krnl::newProcessEnv(Process*)>:
c001a752:	83 ec 28             	sub    esp,0x28
c001a755:	6a 0c                	push   0xc
c001a757:	e8 58 51 ff ff       	call   c000f8b4 <malloc>
c001a75c:	5a                   	pop    edx
c001a75d:	59                   	pop    ecx
c001a75e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a762:	50                   	push   eax
c001a763:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a767:	e8 e0 fe ff ff       	call   c001a64c <EnvVarContainer::EnvVarContainer(Process*)>
c001a76c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a770:	83 c4 2c             	add    esp,0x2c
c001a773:	c3                   	ret    

c001a774 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a774:	57                   	push   edi
c001a775:	56                   	push   esi
c001a776:	53                   	push   ebx
c001a777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a77b:	83 ec 0c             	sub    esp,0xc
c001a77e:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a784:	6a 0c                	push   0xc
c001a786:	e8 29 51 ff ff       	call   c000f8b4 <malloc>
c001a78b:	89 c3                	mov    ebx,eax
c001a78d:	58                   	pop    eax
c001a78e:	5a                   	pop    edx
c001a78f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a793:	53                   	push   ebx
c001a794:	e8 b3 fe ff ff       	call   c001a64c <EnvVarContainer::EnvVarContainer(Process*)>
c001a799:	8b 07                	mov    eax,DWORD PTR [edi]
c001a79b:	89 03                	mov    DWORD PTR [ebx],eax
c001a79d:	c1 e0 03             	shl    eax,0x3
c001a7a0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7a3:	e8 0c 51 ff ff       	call   c000f8b4 <malloc>
c001a7a8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a7ab:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a7ad:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a7b0:	c1 e1 03             	shl    ecx,0x3
c001a7b3:	89 c7                	mov    edi,eax
c001a7b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7b7:	83 c4 10             	add    esp,0x10
c001a7ba:	89 d8                	mov    eax,ebx
c001a7bc:	5b                   	pop    ebx
c001a7bd:	5e                   	pop    esi
c001a7be:	5f                   	pop    edi
c001a7bf:	c3                   	ret    

c001a7c0 <Krnl::loadSystemEnv()>:
c001a7c0:	53                   	push   ebx
c001a7c1:	83 ec 14             	sub    esp,0x14
c001a7c4:	6a 0c                	push   0xc
c001a7c6:	e8 e9 50 ff ff       	call   c000f8b4 <malloc>
c001a7cb:	89 c3                	mov    ebx,eax
c001a7cd:	58                   	pop    eax
c001a7ce:	5a                   	pop    edx
c001a7cf:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001a7d5:	53                   	push   ebx
c001a7d6:	e8 71 fe ff ff       	call   c001a64c <EnvVarContainer::EnvVarContainer(Process*)>
c001a7db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a7de:	89 1d 18 1e 03 c0    	mov    DWORD PTR ds:0xc0031e18,ebx
c001a7e4:	e8 47 fe ff ff       	call   c001a630 <EnvVarContainer::__loadSystem()>
c001a7e9:	83 c4 18             	add    esp,0x18
c001a7ec:	5b                   	pop    ebx
c001a7ed:	c3                   	ret    

c001a7ee <Krnl::loadUserEnv()>:
c001a7ee:	53                   	push   ebx
c001a7ef:	83 ec 14             	sub    esp,0x14
c001a7f2:	6a 0c                	push   0xc
c001a7f4:	e8 bb 50 ff ff       	call   c000f8b4 <malloc>
c001a7f9:	89 c3                	mov    ebx,eax
c001a7fb:	58                   	pop    eax
c001a7fc:	5a                   	pop    edx
c001a7fd:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001a803:	53                   	push   ebx
c001a804:	e8 43 fe ff ff       	call   c001a64c <EnvVarContainer::EnvVarContainer(Process*)>
c001a809:	89 1d 14 1e 03 c0    	mov    DWORD PTR ds:0xc0031e14,ebx
c001a80f:	83 c4 18             	add    esp,0x18
c001a812:	5b                   	pop    ebx
c001a813:	c3                   	ret    

c001a814 <Krnl::flushEnv()>:
c001a814:	c3                   	ret    

c001a815 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a815:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a819:	8b 15 14 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031e14
c001a81f:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a825:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a82a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a82c:	03 01                	add    eax,DWORD PTR [ecx]
c001a82e:	85 d2                	test   edx,edx
c001a830:	74 02                	je     c001a834 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a832:	03 02                	add    eax,DWORD PTR [edx]
c001a834:	c3                   	ret    

c001a835 <Krnl::getProcessEnvPair(Process*, int)>:
c001a835:	57                   	push   edi
c001a836:	8b 0d 14 1e 03 c0    	mov    ecx,DWORD PTR ds:0xc0031e14
c001a83c:	56                   	push   esi
c001a83d:	85 c9                	test   ecx,ecx
c001a83f:	53                   	push   ebx
c001a840:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a844:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a848:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a84e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a852:	8b 02                	mov    eax,DWORD PTR [edx]
c001a854:	75 47                	jne    c001a89d <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a856:	39 c3                	cmp    ebx,eax
c001a858:	7c 47                	jl     c001a8a1 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a85a:	8b 15 18 1e 03 c0    	mov    edx,DWORD PTR ds:0xc0031e18
c001a860:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a862:	01 c1                	add    ecx,eax
c001a864:	39 d9                	cmp    ecx,ebx
c001a866:	7e 6c                	jle    c001a8d4 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a868:	51                   	push   ecx
c001a869:	89 d9                	mov    ecx,ebx
c001a86b:	29 c1                	sub    ecx,eax
c001a86d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a870:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a874:	53                   	push   ebx
c001a875:	68 90 c8 02 c0       	push   0xc002c890
c001a87a:	e8 e0 85 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001a87f:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a885:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a887:	a1 18 1e 03 c0       	mov    eax,ds:0xc0031e18
c001a88c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a88f:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a893:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a896:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a899:	89 06                	mov    DWORD PTR [esi],eax
c001a89b:	eb 51                	jmp    c001a8ee <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a89d:	39 c3                	cmp    ebx,eax
c001a89f:	7d 05                	jge    c001a8a6 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a8a1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a8a4:	eb 20                	jmp    c001a8c6 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a8a6:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a8a8:	8d 14 07             	lea    edx,[edi+eax*1]
c001a8ab:	39 da                	cmp    edx,ebx
c001a8ad:	7e 04                	jle    c001a8b3 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a8af:	29 c3                	sub    ebx,eax
c001a8b1:	eb 10                	jmp    c001a8c3 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a8b3:	8b 0d 18 1e 03 c0    	mov    ecx,DWORD PTR ds:0xc0031e18
c001a8b9:	03 11                	add    edx,DWORD PTR [ecx]
c001a8bb:	39 da                	cmp    edx,ebx
c001a8bd:	7e 15                	jle    c001a8d4 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a8bf:	29 c3                	sub    ebx,eax
c001a8c1:	29 fb                	sub    ebx,edi
c001a8c3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a8c6:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a8ca:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a8cd:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a8d0:	89 06                	mov    DWORD PTR [esi],eax
c001a8d2:	eb 1d                	jmp    c001a8f1 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	68 a4 c8 02 c0       	push   0xc002c8a4
c001a8dc:	e8 18 00 00 00       	call   c001a8f9 <Krnl::panic(char const*)>
c001a8e1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a8e7:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a8ee:	83 c4 10             	add    esp,0x10
c001a8f1:	89 f0                	mov    eax,esi
c001a8f3:	5b                   	pop    ebx
c001a8f4:	5e                   	pop    esi
c001a8f5:	5f                   	pop    edi
c001a8f6:	c2 04 00             	ret    0x4

c001a8f9 <Krnl::panic(char const*)>:
c001a8f9:	55                   	push   ebp
c001a8fa:	89 e5                	mov    ebp,esp
c001a8fc:	53                   	push   ebx
c001a8fd:	83 ec 0c             	sub    esp,0xc
c001a900:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a903:	fa                   	cli    
c001a904:	c6 05 24 1e 03 c0 01 	mov    BYTE PTR ds:0xc0031e24,0x1
c001a90b:	53                   	push   ebx
c001a90c:	c6 05 04 e2 02 c0 00 	mov    BYTE PTR ds:0xc002e204,0x0
c001a913:	68 be c8 02 c0       	push   0xc002c8be
c001a918:	e8 42 85 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001a91d:	58                   	pop    eax
c001a91e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a923:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a929:	e8 54 63 ff ff       	call   c0010c82 <setActiveTerminal(VgaText*)>
c001a92e:	83 c4 0c             	add    esp,0xc
c001a931:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a936:	6a 01                	push   0x1
c001a938:	6a 0f                	push   0xf
c001a93a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a940:	e8 db 5d ff ff       	call   c0010720 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a945:	58                   	pop    eax
c001a946:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a94b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a951:	e8 72 65 ff ff       	call   c0010ec8 <VgaText::clearScreen()>
c001a956:	58                   	pop    eax
c001a957:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a95c:	5a                   	pop    edx
c001a95d:	68 d7 c8 02 c0       	push   0xc002c8d7
c001a962:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a968:	e8 a1 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001a96d:	59                   	pop    ecx
c001a96e:	58                   	pop    eax
c001a96f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a974:	68 7c c9 02 c0       	push   0xc002c97c
c001a979:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97f:	e8 8a 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001a984:	58                   	pop    eax
c001a985:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a98a:	5a                   	pop    edx
c001a98b:	68 f3 c8 02 c0       	push   0xc002c8f3
c001a990:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a996:	e8 73 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001a99b:	59                   	pop    ecx
c001a99c:	58                   	pop    eax
c001a99d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a9a2:	53                   	push   ebx
c001a9a3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9a9:	e8 60 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001a9ae:	58                   	pop    eax
c001a9af:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001a9b4:	5a                   	pop    edx
c001a9b5:	68 13 c9 02 c0       	push   0xc002c913
c001a9ba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9c0:	e8 49 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001a9c5:	a1 20 1e 03 c0       	mov    eax,ds:0xc0031e20
c001a9ca:	83 c4 10             	add    esp,0x10
c001a9cd:	85 c0                	test   eax,eax
c001a9cf:	74 02                	je     c001a9d3 <Krnl::panic(char const*)+0xda>
c001a9d1:	ff d0                	call   eax
c001a9d3:	83 ec 0c             	sub    esp,0xc
c001a9d6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a9d9:	e8 9e 32 00 00       	call   c001dc7c <Thr::getDriverNameFromAddress(unsigned long)>
c001a9de:	83 c4 10             	add    esp,0x10
c001a9e1:	89 c3                	mov    ebx,eax
c001a9e3:	85 c0                	test   eax,eax
c001a9e5:	0f 84 50 02 00 00    	je     c001ac3b <Krnl::panic(char const*)+0x342>
c001a9eb:	83 ec 08             	sub    esp,0x8
c001a9ee:	8b 15 30 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032830
c001a9f4:	68 b8 c9 02 c0       	push   0xc002c9b8
c001a9f9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a9ff:	e8 0a 66 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa04:	58                   	pop    eax
c001aa05:	5a                   	pop    edx
c001aa06:	8b 15 30 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032830
c001aa0c:	68 f3 c8 02 c0       	push   0xc002c8f3
c001aa11:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001aa17:	e8 f2 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa1c:	59                   	pop    ecx
c001aa1d:	58                   	pop    eax
c001aa1e:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa23:	53                   	push   ebx
c001aa24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa2a:	e8 df 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa2f:	83 c4 10             	add    esp,0x10
c001aa32:	83 ec 08             	sub    esp,0x8
c001aa35:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa3a:	68 12 c9 02 c0       	push   0xc002c912
c001aa3f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa45:	e8 c4 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa4a:	58                   	pop    eax
c001aa4b:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa50:	5a                   	pop    edx
c001aa51:	68 10 ca 02 c0       	push   0xc002ca10
c001aa56:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa5c:	e8 ad 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa61:	59                   	pop    ecx
c001aa62:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa67:	5b                   	pop    ebx
c001aa68:	68 50 ca 02 c0       	push   0xc002ca50
c001aa6d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa73:	e8 96 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa78:	58                   	pop    eax
c001aa79:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aa7e:	5a                   	pop    edx
c001aa7f:	68 fe c8 02 c0       	push   0xc002c8fe
c001aa84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa8a:	e8 7f 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aa8f:	59                   	pop    ecx
c001aa90:	5b                   	pop    ebx
c001aa91:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aa94:	68 16 c9 02 c0       	push   0xc002c916
c001aa99:	e8 c1 83 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001aa9e:	58                   	pop    eax
c001aa9f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aaa2:	5a                   	pop    edx
c001aaa3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aaa6:	68 1f c9 02 c0       	push   0xc002c91f
c001aaab:	e8 af 83 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001aab0:	59                   	pop    ecx
c001aab1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001aab4:	5b                   	pop    ebx
c001aab5:	8b 00                	mov    eax,DWORD PTR [eax]
c001aab7:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001aaba:	68 28 c9 02 c0       	push   0xc002c928
c001aabf:	e8 9b 83 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001aac4:	58                   	pop    eax
c001aac5:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aaca:	5a                   	pop    edx
c001aacb:	68 94 ca 02 c0       	push   0xc002ca94
c001aad0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad6:	e8 33 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aadb:	59                   	pop    ecx
c001aadc:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aae1:	5b                   	pop    ebx
c001aae2:	68 31 c9 02 c0       	push   0xc002c931
c001aae7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaed:	e8 1c 65 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aaf2:	0f 20 c0             	mov    eax,cr0
c001aaf5:	5a                   	pop    edx
c001aaf6:	59                   	pop    ecx
c001aaf7:	50                   	push   eax
c001aaf8:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001aafd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab03:	e8 2c 65 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001ab08:	5b                   	pop    ebx
c001ab09:	58                   	pop    eax
c001ab0a:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab0f:	68 3b c9 02 c0       	push   0xc002c93b
c001ab14:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab1a:	e8 ef 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ab1f:	0f 20 d0             	mov    eax,cr2
c001ab22:	5a                   	pop    edx
c001ab23:	59                   	pop    ecx
c001ab24:	50                   	push   eax
c001ab25:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab30:	e8 ff 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001ab35:	5b                   	pop    ebx
c001ab36:	58                   	pop    eax
c001ab37:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab3c:	68 45 c9 02 c0       	push   0xc002c945
c001ab41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab47:	e8 c2 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ab4c:	0f 20 d8             	mov    eax,cr3
c001ab4f:	5a                   	pop    edx
c001ab50:	59                   	pop    ecx
c001ab51:	50                   	push   eax
c001ab52:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab57:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab5d:	e8 d2 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001ab62:	5b                   	pop    ebx
c001ab63:	58                   	pop    eax
c001ab64:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab69:	68 58 c9 02 c0       	push   0xc002c958
c001ab6e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab74:	e8 95 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ab79:	0f 20 e0             	mov    eax,cr4
c001ab7c:	5a                   	pop    edx
c001ab7d:	59                   	pop    ecx
c001ab7e:	50                   	push   eax
c001ab7f:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8a:	e8 a5 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001ab8f:	5b                   	pop    ebx
c001ab90:	58                   	pop    eax
c001ab91:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ab96:	68 62 c9 02 c0       	push   0xc002c962
c001ab9b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aba1:	e8 68 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001aba6:	5a                   	pop    edx
c001aba7:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abac:	59                   	pop    ecx
c001abad:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abb3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001abb6:	50                   	push   eax
c001abb7:	e8 78 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001abbc:	5b                   	pop    ebx
c001abbd:	58                   	pop    eax
c001abbe:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abc3:	68 79 c9 02 c0       	push   0xc002c979
c001abc8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abce:	e8 3b 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001abd3:	5a                   	pop    edx
c001abd4:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abd9:	59                   	pop    ecx
c001abda:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001abe0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001abe3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001abe6:	50                   	push   eax
c001abe7:	e8 48 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001abec:	5b                   	pop    ebx
c001abed:	58                   	pop    eax
c001abee:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001abf3:	68 79 c9 02 c0       	push   0xc002c979
c001abf8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001abfe:	e8 0b 64 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ac03:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac08:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ac0b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ac11:	8b 12                	mov    edx,DWORD PTR [edx]
c001ac13:	59                   	pop    ecx
c001ac14:	5b                   	pop    ebx
c001ac15:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ac18:	50                   	push   eax
c001ac19:	e8 16 64 ff ff       	call   c0011034 <VgaText::putx(unsigned int)>
c001ac1e:	83 c4 10             	add    esp,0x10
c001ac21:	b2 fe                	mov    dl,0xfe
c001ac23:	e4 60                	in     al,0x60
c001ac25:	3c 1c                	cmp    al,0x1c
c001ac27:	74 04                	je     c001ac2d <Krnl::panic(char const*)+0x334>
c001ac29:	3c 5a                	cmp    al,0x5a
c001ac2b:	75 f6                	jne    c001ac23 <Krnl::panic(char const*)+0x32a>
c001ac2d:	e4 64                	in     al,0x64
c001ac2f:	a8 02                	test   al,0x2
c001ac31:	75 fa                	jne    c001ac2d <Krnl::panic(char const*)+0x334>
c001ac33:	88 d0                	mov    al,dl
c001ac35:	e6 64                	out    0x64,al
c001ac37:	fa                   	cli    
c001ac38:	f4                   	hlt    
c001ac39:	eb e8                	jmp    c001ac23 <Krnl::panic(char const*)+0x32a>
c001ac3b:	50                   	push   eax
c001ac3c:	50                   	push   eax
c001ac3d:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac42:	68 e4 c9 02 c0       	push   0xc002c9e4
c001ac47:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac4d:	e8 bc 63 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ac52:	58                   	pop    eax
c001ac53:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac58:	5a                   	pop    edx
c001ac59:	68 f3 c8 02 c0       	push   0xc002c8f3
c001ac5e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac64:	e8 a5 63 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ac69:	59                   	pop    ecx
c001ac6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ac6f:	5b                   	pop    ebx
c001ac70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ac73:	83 c0 0c             	add    eax,0xc
c001ac76:	50                   	push   eax
c001ac77:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001ac7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ac82:	e8 87 63 ff ff       	call   c001100e <VgaText::puts(char const*)>
c001ac87:	83 c4 10             	add    esp,0x10
c001ac8a:	e9 a3 fd ff ff       	jmp    c001aa32 <Krnl::panic(char const*)+0x139>

c001ac8f <Net::switchEndian16(unsigned short)>:
c001ac8f:	83 ec 04             	sub    esp,0x4
c001ac92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac96:	66 89 04 24          	mov    WORD PTR [esp],ax
c001ac9a:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001ac9e:	c1 f8 08             	sar    eax,0x8
c001aca1:	89 c2                	mov    edx,eax
c001aca3:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aca7:	c1 e0 08             	shl    eax,0x8
c001acaa:	09 d0                	or     eax,edx
c001acac:	83 c4 04             	add    esp,0x4
c001acaf:	c3                   	ret    

c001acb0 <Net::switchEndian32(unsigned int)>:
c001acb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acb4:	c1 e8 18             	shr    eax,0x18
c001acb7:	89 c2                	mov    edx,eax
c001acb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acbd:	c1 e0 08             	shl    eax,0x8
c001acc0:	25 00 00 ff 00       	and    eax,0xff0000
c001acc5:	09 c2                	or     edx,eax
c001acc7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001accb:	c1 e8 08             	shr    eax,0x8
c001acce:	25 00 ff 00 00       	and    eax,0xff00
c001acd3:	09 c2                	or     edx,eax
c001acd5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acd9:	c1 e0 18             	shl    eax,0x18
c001acdc:	09 d0                	or     eax,edx
c001acde:	c3                   	ret    

c001acdf <Net::crc32Calc(unsigned char*, int)>:
c001acdf:	83 ec 10             	sub    esp,0x10
c001ace2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ace7:	75 07                	jne    c001acf0 <Net::crc32Calc(unsigned char*, int)+0x11>
c001ace9:	b8 00 00 00 00       	mov    eax,0x0
c001acee:	eb 7c                	jmp    c001ad6c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acf0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001acf5:	7f 07                	jg     c001acfe <Net::crc32Calc(unsigned char*, int)+0x1f>
c001acf7:	b8 00 00 00 00       	mov    eax,0x0
c001acfc:	eb 6e                	jmp    c001ad6c <Net::crc32Calc(unsigned char*, int)+0x8d>
c001acfe:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ad06:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ad0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad12:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ad16:	7d 4e                	jge    c001ad66 <Net::crc32Calc(unsigned char*, int)+0x87>
c001ad18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad20:	01 d0                	add    eax,edx
c001ad22:	8a 00                	mov    al,BYTE PTR [eax]
c001ad24:	0f b6 c0             	movzx  eax,al
c001ad27:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ad2b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad33:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ad38:	7f 26                	jg     c001ad60 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ad3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad3e:	83 e0 01             	and    eax,0x1
c001ad41:	74 0d                	je     c001ad50 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ad43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad47:	d1 e8                	shr    eax,1
c001ad49:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ad4e:	eb 06                	jmp    c001ad56 <Net::crc32Calc(unsigned char*, int)+0x77>
c001ad50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad54:	d1 e8                	shr    eax,1
c001ad56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ad5a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad5e:	eb d3                	jmp    c001ad33 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ad60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ad64:	eb a8                	jmp    c001ad0e <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ad66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad6a:	f7 d0                	not    eax
c001ad6c:	83 c4 10             	add    esp,0x10
c001ad6f:	c3                   	ret    

c001ad70 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ad70:	57                   	push   edi
c001ad71:	56                   	push   esi
c001ad72:	53                   	push   ebx
c001ad73:	83 ec 60             	sub    esp,0x60
c001ad76:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad7d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ad81:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001ad89:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001ad8e:	7f 1a                	jg     c001adaa <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001ad90:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ad97:	8d 50 01             	lea    edx,[eax+0x1]
c001ad9a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ada1:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ada4:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001ada8:	eb df                	jmp    c001ad89 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001adaa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adb1:	8d 50 01             	lea    edx,[eax+0x1]
c001adb4:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001adbb:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001adbe:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001adc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001adc9:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001adcd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001add1:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001add9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001addd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ade1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ade9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aded:	89 c6                	mov    esi,eax
c001adef:	89 d7                	mov    edi,edx
c001adf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001adf3:	89 c8                	mov    eax,ecx
c001adf5:	89 fa                	mov    edx,edi
c001adf7:	89 f3                	mov    ebx,esi
c001adf9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001adfd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ae01:	89 04 24             	mov    DWORD PTR [esp],eax
c001ae04:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae0c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae13:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ae17:	8d 44 24 78          	lea    eax,[esp+0x78]
c001ae1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae1f:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001ae27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ae2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ae2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ae37:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001ae3b:	89 c6                	mov    esi,eax
c001ae3d:	89 d7                	mov    edi,edx
c001ae3f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae41:	89 c8                	mov    eax,ecx
c001ae43:	89 fa                	mov    edx,edi
c001ae45:	89 f3                	mov    ebx,esi
c001ae47:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001ae4b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001ae4f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae53:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001ae5b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ae62:	0f b7 c0             	movzx  eax,ax
c001ae65:	c1 f8 08             	sar    eax,0x8
c001ae68:	89 c1                	mov    ecx,eax
c001ae6a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae71:	8d 50 01             	lea    edx,[eax+0x1]
c001ae74:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001ae7b:	88 ca                	mov    dl,cl
c001ae7d:	88 10                	mov    BYTE PTR [eax],dl
c001ae7f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001ae86:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001ae8d:	8d 48 01             	lea    ecx,[eax+0x1]
c001ae90:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001ae97:	88 10                	mov    BYTE PTR [eax],dl
c001ae99:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001ae9d:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001aea1:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001aea8:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001aeac:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001aeb0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001aeb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001aeb8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001aebc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aec0:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001aec4:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001aec8:	89 c6                	mov    esi,eax
c001aeca:	89 d7                	mov    edi,edx
c001aecc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aece:	89 c8                	mov    eax,ecx
c001aed0:	89 fa                	mov    edx,edi
c001aed2:	89 f3                	mov    ebx,esi
c001aed4:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001aedc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001aee0:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001aee4:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001aeeb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aef2:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001aef6:	50                   	push   eax
c001aef7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001aefb:	e8 df fd ff ff       	call   c001acdf <Net::crc32Calc(unsigned char*, int)>
c001af00:	83 c4 08             	add    esp,0x8
c001af03:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001af07:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af0b:	c1 e8 18             	shr    eax,0x18
c001af0e:	89 c1                	mov    ecx,eax
c001af10:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af17:	8d 50 01             	lea    edx,[eax+0x1]
c001af1a:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af21:	88 ca                	mov    dl,cl
c001af23:	88 10                	mov    BYTE PTR [eax],dl
c001af25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af29:	c1 e8 10             	shr    eax,0x10
c001af2c:	89 c1                	mov    ecx,eax
c001af2e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af35:	8d 50 01             	lea    edx,[eax+0x1]
c001af38:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af3f:	88 ca                	mov    dl,cl
c001af41:	88 10                	mov    BYTE PTR [eax],dl
c001af43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001af47:	c1 e8 08             	shr    eax,0x8
c001af4a:	89 c1                	mov    ecx,eax
c001af4c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af53:	8d 50 01             	lea    edx,[eax+0x1]
c001af56:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af5d:	88 ca                	mov    dl,cl
c001af5f:	88 10                	mov    BYTE PTR [eax],dl
c001af61:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001af68:	8d 50 01             	lea    edx,[eax+0x1]
c001af6b:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001af72:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001af76:	88 10                	mov    BYTE PTR [eax],dl
c001af78:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001af7c:	83 c4 60             	add    esp,0x60
c001af7f:	5b                   	pop    ebx
c001af80:	5e                   	pop    esi
c001af81:	5f                   	pop    edi
c001af82:	c3                   	ret    

c001af83 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001af83:	57                   	push   edi
c001af84:	56                   	push   esi
c001af85:	53                   	push   ebx
c001af86:	83 ec 70             	sub    esp,0x70
c001af89:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001af90:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001af94:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001af9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001afa3:	83 c0 0e             	add    eax,0xe
c001afa6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afaa:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001afb1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001afb5:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001afbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001afc1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001afc5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001afc9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001afcd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001afd1:	89 c6                	mov    esi,eax
c001afd3:	89 d7                	mov    edi,edx
c001afd5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001afd7:	89 c8                	mov    eax,ecx
c001afd9:	89 fa                	mov    edx,edi
c001afdb:	89 f3                	mov    ebx,esi
c001afdd:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001afe1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001afe5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001afe9:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001aff1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aff8:	83 c0 08             	add    eax,0x8
c001affb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001afff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b006:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b00a:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001b012:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b016:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b01a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b01e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b022:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001b026:	89 c6                	mov    esi,eax
c001b028:	89 d7                	mov    edi,edx
c001b02a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b02c:	89 c8                	mov    eax,ecx
c001b02e:	89 fa                	mov    edx,edi
c001b030:	89 f3                	mov    ebx,esi
c001b032:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b036:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001b03a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001b03e:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001b046:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b04d:	8d 50 01             	lea    edx,[eax+0x1]
c001b050:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b057:	8a 00                	mov    al,BYTE PTR [eax]
c001b059:	0f b6 c0             	movzx  eax,al
c001b05c:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001b061:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b068:	8d 50 01             	lea    edx,[eax+0x1]
c001b06b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b072:	8a 00                	mov    al,BYTE PTR [eax]
c001b074:	0f b6 c0             	movzx  eax,al
c001b077:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001b07c:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001b081:	c1 e0 08             	shl    eax,0x8
c001b084:	89 c2                	mov    edx,eax
c001b086:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b08a:	09 d0                	or     eax,edx
c001b08c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b093:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001b097:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001b09f:	75 46                	jne    c001b0e7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b0a1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0ab:	66 3d dc 05          	cmp    ax,0x5dc
c001b0af:	77 16                	ja     c001b0c7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001b0b1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b0bb:	0f b7 c0             	movzx  eax,ax
c001b0be:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001b0c5:	eb 20                	jmp    c001b0e7 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001b0c7:	83 ec 0c             	sub    esp,0xc
c001b0ca:	68 bc ca 02 c0       	push   0xc002cabc
c001b0cf:	e8 8b 7d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001b0d4:	83 c4 10             	add    esp,0x10
c001b0d7:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b0de:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001b0e2:	e9 17 01 00 00       	jmp    c001b1fe <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001b0e7:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b0ee:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001b0f5:	8b 12                	mov    edx,DWORD PTR [edx]
c001b0f7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001b0fb:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001b102:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001b106:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b10a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b10e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b112:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b116:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b11a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b11e:	89 c6                	mov    esi,eax
c001b120:	89 d7                	mov    edi,edx
c001b122:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b124:	89 c8                	mov    eax,ecx
c001b126:	89 fa                	mov    edx,edi
c001b128:	89 f3                	mov    ebx,esi
c001b12a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001b12e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b132:	89 04 24             	mov    DWORD PTR [esp],eax
c001b135:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b13c:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001b143:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b14a:	8d 50 01             	lea    edx,[eax+0x1]
c001b14d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b154:	8a 00                	mov    al,BYTE PTR [eax]
c001b156:	0f b6 c0             	movzx  eax,al
c001b159:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001b15d:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b164:	8d 50 01             	lea    edx,[eax+0x1]
c001b167:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b16e:	8a 00                	mov    al,BYTE PTR [eax]
c001b170:	0f b6 c0             	movzx  eax,al
c001b173:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001b177:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b17e:	8d 50 01             	lea    edx,[eax+0x1]
c001b181:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b188:	8a 00                	mov    al,BYTE PTR [eax]
c001b18a:	0f b6 c0             	movzx  eax,al
c001b18d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001b191:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b198:	8d 50 01             	lea    edx,[eax+0x1]
c001b19b:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001b1a2:	8a 00                	mov    al,BYTE PTR [eax]
c001b1a4:	0f b6 c0             	movzx  eax,al
c001b1a7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001b1ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001b1af:	c1 e0 18             	shl    eax,0x18
c001b1b2:	89 c2                	mov    edx,eax
c001b1b4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001b1b8:	c1 e0 10             	shl    eax,0x10
c001b1bb:	09 c2                	or     edx,eax
c001b1bd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001b1c1:	c1 e0 08             	shl    eax,0x8
c001b1c4:	09 d0                	or     eax,edx
c001b1c6:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001b1ca:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b1ce:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b1d5:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001b1d9:	83 e8 04             	sub    eax,0x4
c001b1dc:	83 ec 08             	sub    esp,0x8
c001b1df:	50                   	push   eax
c001b1e0:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001b1e4:	e8 f6 fa ff ff       	call   c001acdf <Net::crc32Calc(unsigned char*, int)>
c001b1e9:	83 c4 10             	add    esp,0x10
c001b1ec:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001b1f0:	0f 94 c2             	sete   dl
c001b1f3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b1fa:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001b1fd:	90                   	nop
c001b1fe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b205:	83 c4 70             	add    esp,0x70
c001b208:	5b                   	pop    ebx
c001b209:	5e                   	pop    esi
c001b20a:	5f                   	pop    edi
c001b20b:	c2 04 00             	ret    0x4

c001b20e <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001b20e:	55                   	push   ebp
c001b20f:	57                   	push   edi
c001b210:	56                   	push   esi
c001b211:	53                   	push   ebx
c001b212:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b218:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b21f:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b221:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b224:	80 fb 40             	cmp    bl,0x40
c001b227:	75 1b                	jne    c001b244 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b229:	8a 16                	mov    dl,BYTE PTR [esi]
c001b22b:	84 d2                	test   dl,dl
c001b22d:	0f 84 f1 00 00 00    	je     c001b324 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b233:	8d 46 01             	lea    eax,[esi+0x1]
c001b236:	80 fa 3a             	cmp    dl,0x3a
c001b239:	74 04                	je     c001b23f <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b23b:	89 c6                	mov    esi,eax
c001b23d:	eb ea                	jmp    c001b229 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b23f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b242:	89 c6                	mov    esi,eax
c001b244:	50                   	push   eax
c001b245:	6a 40                	push   0x40
c001b247:	6a 00                	push   0x0
c001b249:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b24d:	50                   	push   eax
c001b24e:	e8 25 55 fe ff       	call   c0000778 <memset>
c001b253:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b25a:	31 c0                	xor    eax,eax
c001b25c:	83 c4 10             	add    esp,0x10
c001b25f:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b261:	84 c9                	test   cl,cl
c001b263:	0f 84 bb 00 00 00    	je     c001b324 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b269:	3d c7 00 00 00       	cmp    eax,0xc7
c001b26e:	0f 8f b0 00 00 00    	jg     c001b324 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b274:	80 f9 0a             	cmp    cl,0xa
c001b277:	0f 85 98 00 00 00    	jne    c001b315 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b27d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b282:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b286:	a8 df                	test   al,0xdf
c001b288:	0f 94 c1             	sete   cl
c001b28b:	3c 23                	cmp    al,0x23
c001b28d:	0f 94 c2             	sete   dl
c001b290:	08 d1                	or     cl,dl
c001b292:	75 4a                	jne    c001b2de <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b294:	8d 50 f7             	lea    edx,[eax-0x9]
c001b297:	80 fa 01             	cmp    dl,0x1
c001b29a:	76 42                	jbe    c001b2de <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b29c:	3c 5b                	cmp    al,0x5b
c001b29e:	75 42                	jne    c001b2e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b2a0:	80 fb 40             	cmp    bl,0x40
c001b2a3:	75 39                	jne    c001b2de <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b2a5:	83 ec 0c             	sub    esp,0xc
c001b2a8:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b2ac:	52                   	push   edx
c001b2ad:	e8 e2 54 fe ff       	call   c0000794 <strlen>
c001b2b2:	83 c4 10             	add    esp,0x10
c001b2b5:	83 f8 3f             	cmp    eax,0x3f
c001b2b8:	77 6a                	ja     c001b324 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b2ba:	50                   	push   eax
c001b2bb:	50                   	push   eax
c001b2bc:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b2c0:	52                   	push   edx
c001b2c1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2c5:	52                   	push   edx
c001b2c6:	e8 69 55 fe ff       	call   c0000834 <strcpy>
c001b2cb:	58                   	pop    eax
c001b2cc:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b2d0:	52                   	push   edx
c001b2d1:	e8 be 54 fe ff       	call   c0000794 <strlen>
c001b2d6:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b2db:	83 c4 10             	add    esp,0x10
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	eb 3a                	jmp    c001b31c <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b2e2:	80 fb 40             	cmp    bl,0x40
c001b2e5:	74 06                	je     c001b2ed <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b2e7:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b2eb:	eb 20                	jmp    c001b30d <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b2ed:	50                   	push   eax
c001b2ee:	50                   	push   eax
c001b2ef:	55                   	push   ebp
c001b2f0:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b2f4:	50                   	push   eax
c001b2f5:	e8 c6 55 fe ff       	call   c00008c0 <strcmp>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	85 c0                	test   eax,eax
c001b2ff:	75 dd                	jne    c001b2de <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b301:	eb e4                	jmp    c001b2e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b303:	8d 50 01             	lea    edx,[eax+0x1]
c001b306:	80 f9 3d             	cmp    cl,0x3d
c001b309:	74 1d                	je     c001b328 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b30b:	89 d0                	mov    eax,edx
c001b30d:	8a 08                	mov    cl,BYTE PTR [eax]
c001b30f:	84 c9                	test   cl,cl
c001b311:	75 f0                	jne    c001b303 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b313:	eb 0f                	jmp    c001b324 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b315:	8d 50 01             	lea    edx,[eax+0x1]
c001b318:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b31c:	47                   	inc    edi
c001b31d:	89 d0                	mov    eax,edx
c001b31f:	e9 3b ff ff ff       	jmp    c001b25f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b324:	31 c0                	xor    eax,eax
c001b326:	eb 33                	jmp    c001b35b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b328:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b32c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b32f:	50                   	push   eax
c001b330:	50                   	push   eax
c001b331:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b335:	50                   	push   eax
c001b336:	56                   	push   esi
c001b337:	e8 84 55 fe ff       	call   c00008c0 <strcmp>
c001b33c:	83 c4 10             	add    esp,0x10
c001b33f:	85 c0                	test   eax,eax
c001b341:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b345:	75 97                	jne    c001b2de <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b347:	51                   	push   ecx
c001b348:	51                   	push   ecx
c001b349:	52                   	push   edx
c001b34a:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b351:	e8 de 54 fe ff       	call   c0000834 <strcpy>
c001b356:	83 c4 10             	add    esp,0x10
c001b359:	b0 01                	mov    al,0x1
c001b35b:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b361:	5b                   	pop    ebx
c001b362:	5e                   	pop    esi
c001b363:	5f                   	pop    edi
c001b364:	5d                   	pop    ebp
c001b365:	c3                   	ret    

c001b366 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b366:	57                   	push   edi
c001b367:	56                   	push   esi
c001b368:	53                   	push   ebx
c001b369:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b36f:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b376:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b37d:	53                   	push   ebx
c001b37e:	e8 11 54 fe ff       	call   c0000794 <strlen>
c001b383:	89 34 24             	mov    DWORD PTR [esp],esi
c001b386:	89 c7                	mov    edi,eax
c001b388:	e8 07 54 fe ff       	call   c0000794 <strlen>
c001b38d:	83 c4 10             	add    esp,0x10
c001b390:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b394:	3d ff 00 00 00       	cmp    eax,0xff
c001b399:	0f 87 d3 00 00 00    	ja     c001b472 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b39f:	57                   	push   edi
c001b3a0:	57                   	push   edi
c001b3a1:	56                   	push   esi
c001b3a2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b3a6:	56                   	push   esi
c001b3a7:	e8 88 54 fe ff       	call   c0000834 <strcpy>
c001b3ac:	58                   	pop    eax
c001b3ad:	5a                   	pop    edx
c001b3ae:	68 11 d0 02 c0       	push   0xc002d011
c001b3b3:	56                   	push   esi
c001b3b4:	e8 bb 55 fe ff       	call   c0000974 <strcat>
c001b3b9:	59                   	pop    ecx
c001b3ba:	5f                   	pop    edi
c001b3bb:	53                   	push   ebx
c001b3bc:	56                   	push   esi
c001b3bd:	e8 b2 55 fe ff       	call   c0000974 <strcat>
c001b3c2:	58                   	pop    eax
c001b3c3:	5a                   	pop    edx
c001b3c4:	68 08 cb 02 c0       	push   0xc002cb08
c001b3c9:	56                   	push   esi
c001b3ca:	e8 a5 55 fe ff       	call   c0000974 <strcat>
c001b3cf:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b3d6:	e8 d9 44 ff ff       	call   c000f8b4 <malloc>
c001b3db:	83 c4 0c             	add    esp,0xc
c001b3de:	89 c3                	mov    ebx,eax
c001b3e0:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001b3e6:	56                   	push   esi
c001b3e7:	50                   	push   eax
c001b3e8:	e8 d1 7f ff ff       	call   c00133be <File::File(char const*, Process*)>
c001b3ed:	83 c4 10             	add    esp,0x10
c001b3f0:	85 db                	test   ebx,ebx
c001b3f2:	74 7e                	je     c001b472 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b3f4:	51                   	push   ecx
c001b3f5:	51                   	push   ecx
c001b3f6:	6a 01                	push   0x1
c001b3f8:	53                   	push   ebx
c001b3f9:	e8 24 80 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001b3fe:	83 c4 10             	add    esp,0x10
c001b401:	85 c0                	test   eax,eax
c001b403:	74 08                	je     c001b40d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b405:	83 ec 0c             	sub    esp,0xc
c001b408:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b40a:	53                   	push   ebx
c001b40b:	eb 5f                	jmp    c001b46c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b40d:	52                   	push   edx
c001b40e:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b412:	50                   	push   eax
c001b413:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b417:	50                   	push   eax
c001b418:	53                   	push   ebx
c001b419:	e8 b0 82 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c001b41e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b422:	83 c4 10             	add    esp,0x10
c001b425:	89 c1                	mov    ecx,eax
c001b427:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b42b:	74 31                	je     c001b45e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b42d:	83 ec 0c             	sub    esp,0xc
c001b430:	50                   	push   eax
c001b431:	e8 7e 44 ff ff       	call   c000f8b4 <malloc>
c001b436:	89 c6                	mov    esi,eax
c001b438:	58                   	pop    eax
c001b439:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b43b:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b43f:	52                   	push   edx
c001b440:	56                   	push   esi
c001b441:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b445:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b449:	53                   	push   ebx
c001b44a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b44d:	83 c4 20             	add    esp,0x20
c001b450:	85 c0                	test   eax,eax
c001b452:	75 0a                	jne    c001b45e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b454:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b458:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b45c:	74 18                	je     c001b476 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b45e:	83 ec 0c             	sub    esp,0xc
c001b461:	53                   	push   ebx
c001b462:	e8 19 80 ff ff       	call   c0013480 <File::close()>
c001b467:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b469:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b46c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	31 c0                	xor    eax,eax
c001b474:	eb 3b                	jmp    c001b4b1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b476:	83 ec 0c             	sub    esp,0xc
c001b479:	53                   	push   ebx
c001b47a:	e8 01 80 ff ff       	call   c0013480 <File::close()>
c001b47f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b481:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b484:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b487:	83 c4 0c             	add    esp,0xc
c001b48a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b491:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b498:	56                   	push   esi
c001b499:	e8 70 fd ff ff       	call   c001b20e <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b49e:	89 34 24             	mov    DWORD PTR [esp],esi
c001b4a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b4a5:	e8 1a 44 ff ff       	call   c000f8c4 <free>
c001b4aa:	83 c4 10             	add    esp,0x10
c001b4ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b4b1:	81 c4 20 01 00 00    	add    esp,0x120
c001b4b7:	5b                   	pop    ebx
c001b4b8:	5e                   	pop    esi
c001b4b9:	5f                   	pop    edi
c001b4ba:	c3                   	ret    

c001b4bb <Reg::getLine(char*, char*, char*)>:
c001b4bb:	57                   	push   edi
c001b4bc:	56                   	push   esi
c001b4bd:	53                   	push   ebx
c001b4be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b4c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b4c6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4ca:	57                   	push   edi
c001b4cb:	56                   	push   esi
c001b4cc:	53                   	push   ebx
c001b4cd:	68 0d cb 02 c0       	push   0xc002cb0d
c001b4d2:	e8 8f fe ff ff       	call   c001b366 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4d7:	83 c4 10             	add    esp,0x10
c001b4da:	84 c0                	test   al,al
c001b4dc:	75 10                	jne    c001b4ee <Reg::getLine(char*, char*, char*)+0x33>
c001b4de:	57                   	push   edi
c001b4df:	56                   	push   esi
c001b4e0:	53                   	push   ebx
c001b4e1:	68 32 cb 02 c0       	push   0xc002cb32
c001b4e6:	e8 7b fe ff ff       	call   c001b366 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b4eb:	83 c4 10             	add    esp,0x10
c001b4ee:	5b                   	pop    ebx
c001b4ef:	5e                   	pop    esi
c001b4f0:	5f                   	pop    edi
c001b4f1:	c3                   	ret    

c001b4f2 <Reg::readInt(char*, char*, int*)>:
c001b4f2:	55                   	push   ebp
c001b4f3:	57                   	push   edi
c001b4f4:	56                   	push   esi
c001b4f5:	53                   	push   ebx
c001b4f6:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b4fc:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b500:	57                   	push   edi
c001b501:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b508:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b50f:	e8 a7 ff ff ff       	call   c001b4bb <Reg::getLine(char*, char*, char*)>
c001b514:	83 c4 10             	add    esp,0x10
c001b517:	84 c0                	test   al,al
c001b519:	0f 84 b3 00 00 00    	je     c001b5d2 <Reg::readInt(char*, char*, int*)+0xe0>
c001b51f:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b523:	80 fa 2b             	cmp    dl,0x2b
c001b526:	74 0c                	je     c001b534 <Reg::readInt(char*, char*, int*)+0x42>
c001b528:	80 fa 2d             	cmp    dl,0x2d
c001b52b:	75 0e                	jne    c001b53b <Reg::readInt(char*, char*, int*)+0x49>
c001b52d:	ba 01 00 00 00       	mov    edx,0x1
c001b532:	eb 0b                	jmp    c001b53f <Reg::readInt(char*, char*, int*)+0x4d>
c001b534:	ba 01 00 00 00       	mov    edx,0x1
c001b539:	eb 02                	jmp    c001b53d <Reg::readInt(char*, char*, int*)+0x4b>
c001b53b:	31 d2                	xor    edx,edx
c001b53d:	31 c0                	xor    eax,eax
c001b53f:	be 0a 00 00 00       	mov    esi,0xa
c001b544:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b549:	75 20                	jne    c001b56b <Reg::readInt(char*, char*, int*)+0x79>
c001b54b:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b54f:	80 f9 78             	cmp    cl,0x78
c001b552:	75 0a                	jne    c001b55e <Reg::readInt(char*, char*, int*)+0x6c>
c001b554:	83 c2 02             	add    edx,0x2
c001b557:	be 10 00 00 00       	mov    esi,0x10
c001b55c:	eb 0d                	jmp    c001b56b <Reg::readInt(char*, char*, int*)+0x79>
c001b55e:	80 f9 62             	cmp    cl,0x62
c001b561:	75 08                	jne    c001b56b <Reg::readInt(char*, char*, int*)+0x79>
c001b563:	83 c2 02             	add    edx,0x2
c001b566:	be 02 00 00 00       	mov    esi,0x2
c001b56b:	01 d7                	add    edi,edx
c001b56d:	31 d2                	xor    edx,edx
c001b56f:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b571:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b575:	80 fb 0d             	cmp    bl,0xd
c001b578:	0f 94 c3             	sete   bl
c001b57b:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b580:	0f 94 c1             	sete   cl
c001b583:	08 cb                	or     bl,cl
c001b585:	75 3a                	jne    c001b5c1 <Reg::readInt(char*, char*, int*)+0xcf>
c001b587:	0f af d6             	imul   edx,esi
c001b58a:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b58f:	83 fe 10             	cmp    esi,0x10
c001b592:	75 26                	jne    c001b5ba <Reg::readInt(char*, char*, int*)+0xc8>
c001b594:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b598:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b59b:	89 e9                	mov    ecx,ebp
c001b59d:	80 f9 05             	cmp    cl,0x5
c001b5a0:	77 06                	ja     c001b5a8 <Reg::readInt(char*, char*, int*)+0xb6>
c001b5a2:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b5a6:	eb 16                	jmp    c001b5be <Reg::readInt(char*, char*, int*)+0xcc>
c001b5a8:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b5ac:	83 e9 61             	sub    ecx,0x61
c001b5af:	80 f9 05             	cmp    cl,0x5
c001b5b2:	77 06                	ja     c001b5ba <Reg::readInt(char*, char*, int*)+0xc8>
c001b5b4:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b5b8:	eb 04                	jmp    c001b5be <Reg::readInt(char*, char*, int*)+0xcc>
c001b5ba:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b5be:	47                   	inc    edi
c001b5bf:	eb ae                	jmp    c001b56f <Reg::readInt(char*, char*, int*)+0x7d>
c001b5c1:	84 c0                	test   al,al
c001b5c3:	74 02                	je     c001b5c7 <Reg::readInt(char*, char*, int*)+0xd5>
c001b5c5:	f7 da                	neg    edx
c001b5c7:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b5ce:	89 10                	mov    DWORD PTR [eax],edx
c001b5d0:	88 d8                	mov    al,bl
c001b5d2:	81 c4 ec 00 00 00    	add    esp,0xec
c001b5d8:	5b                   	pop    ebx
c001b5d9:	5e                   	pop    esi
c001b5da:	5f                   	pop    edi
c001b5db:	5d                   	pop    ebp
c001b5dc:	c3                   	ret    

c001b5dd <Reg::readString(char*, char*, char*, int)>:
c001b5dd:	57                   	push   edi
c001b5de:	56                   	push   esi
c001b5df:	53                   	push   ebx
c001b5e0:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b5e6:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b5ed:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b5f1:	57                   	push   edi
c001b5f2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b5f9:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b600:	e8 b6 fe ff ff       	call   c001b4bb <Reg::getLine(char*, char*, char*)>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	89 c6                	mov    esi,eax
c001b60a:	84 c0                	test   al,al
c001b60c:	74 44                	je     c001b652 <Reg::readString(char*, char*, char*, int)+0x75>
c001b60e:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b615:	31 c0                	xor    eax,eax
c001b617:	4a                   	dec    edx
c001b618:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b61b:	84 c9                	test   cl,cl
c001b61d:	74 0f                	je     c001b62e <Reg::readString(char*, char*, char*, int)+0x51>
c001b61f:	39 c2                	cmp    edx,eax
c001b621:	7e 0b                	jle    c001b62e <Reg::readString(char*, char*, char*, int)+0x51>
c001b623:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b626:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b62b:	40                   	inc    eax
c001b62c:	eb ea                	jmp    c001b618 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b62e:	83 ec 0c             	sub    esp,0xc
c001b631:	53                   	push   ebx
c001b632:	e8 5d 51 fe ff       	call   c0000794 <strlen>
c001b637:	83 c4 10             	add    esp,0x10
c001b63a:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b63f:	75 11                	jne    c001b652 <Reg::readString(char*, char*, char*, int)+0x75>
c001b641:	83 ec 0c             	sub    esp,0xc
c001b644:	53                   	push   ebx
c001b645:	e8 4a 51 fe ff       	call   c0000794 <strlen>
c001b64a:	83 c4 10             	add    esp,0x10
c001b64d:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b652:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b658:	89 f0                	mov    eax,esi
c001b65a:	5b                   	pop    ebx
c001b65b:	5e                   	pop    esi
c001b65c:	5f                   	pop    edi
c001b65d:	c3                   	ret    

c001b65e <Reg::readBool(char*, char*, bool*)>:
c001b65e:	83 ec 20             	sub    esp,0x20
c001b661:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b665:	50                   	push   eax
c001b666:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b66e:	e8 7f fe ff ff       	call   c001b4f2 <Reg::readInt(char*, char*, int*)>
c001b673:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b678:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b67c:	0f 95 02             	setne  BYTE PTR [edx]
c001b67f:	83 c4 2c             	add    esp,0x2c
c001b682:	c3                   	ret    

c001b683 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b683:	53                   	push   ebx
c001b684:	83 ec 1c             	sub    esp,0x1c
c001b687:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b68b:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b68f:	50                   	push   eax
c001b690:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b694:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b698:	e8 c1 ff ff ff       	call   c001b65e <Reg::readBool(char*, char*, bool*)>
c001b69d:	83 c4 10             	add    esp,0x10
c001b6a0:	84 c0                	test   al,al
c001b6a2:	74 04                	je     c001b6a8 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b6a4:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b6a8:	88 d8                	mov    al,bl
c001b6aa:	83 c4 18             	add    esp,0x18
c001b6ad:	5b                   	pop    ebx
c001b6ae:	c3                   	ret    

c001b6af <Reg::readIntWithDefault(char*, char*, int)>:
c001b6af:	53                   	push   ebx
c001b6b0:	83 ec 1c             	sub    esp,0x1c
c001b6b3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b6b7:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b6bb:	50                   	push   eax
c001b6bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6c4:	e8 29 fe ff ff       	call   c001b4f2 <Reg::readInt(char*, char*, int*)>
c001b6c9:	83 c4 10             	add    esp,0x10
c001b6cc:	84 c0                	test   al,al
c001b6ce:	74 04                	je     c001b6d4 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b6d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6d4:	89 d8                	mov    eax,ebx
c001b6d6:	83 c4 18             	add    esp,0x18
c001b6d9:	5b                   	pop    ebx
c001b6da:	c3                   	ret    

c001b6db <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b6db:	57                   	push   edi
c001b6dc:	56                   	push   esi
c001b6dd:	56                   	push   esi
c001b6de:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b6e2:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b6e6:	56                   	push   esi
c001b6e7:	57                   	push   edi
c001b6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b6f0:	e8 e8 fe ff ff       	call   c001b5dd <Reg::readString(char*, char*, char*, int)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	84 c0                	test   al,al
c001b6fa:	75 1a                	jne    c001b716 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b6fc:	51                   	push   ecx
c001b6fd:	56                   	push   esi
c001b6fe:	6a 00                	push   0x0
c001b700:	57                   	push   edi
c001b701:	e8 72 50 fe ff       	call   c0000778 <memset>
c001b706:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b709:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b70d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b70f:	83 c4 10             	add    esp,0x10
c001b712:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b716:	89 f8                	mov    eax,edi
c001b718:	5a                   	pop    edx
c001b719:	5e                   	pop    esi
c001b71a:	5f                   	pop    edi
c001b71b:	c3                   	ret    

c001b71c <Sys::eject(regs*)>:
c001b71c:	83 ec 0c             	sub    esp,0xc
c001b71f:	83 ca ff             	or     edx,0xffffffff
c001b722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b726:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b729:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b72e:	83 e9 41             	sub    ecx,0x41
c001b731:	83 f9 19             	cmp    ecx,0x19
c001b734:	77 18                	ja     c001b74e <Sys::eject(regs*)+0x32>
c001b736:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c001b73d:	85 c9                	test   ecx,ecx
c001b73f:	74 0d                	je     c001b74e <Sys::eject(regs*)+0x32>
c001b741:	83 ec 0c             	sub    esp,0xc
c001b744:	51                   	push   ecx
c001b745:	e8 22 b0 ff ff       	call   c001676c <LogicalDisk::eject()>
c001b74a:	83 c4 10             	add    esp,0x10
c001b74d:	99                   	cdq    
c001b74e:	83 c4 0c             	add    esp,0xc
c001b751:	c3                   	ret    

c001b752 <Sys::exit(regs*)>:
c001b752:	83 ec 18             	sub    esp,0x18
c001b755:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b759:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b75c:	e8 7e 38 00 00       	call   c001efdf <terminateTask(int)>
c001b761:	83 c8 ff             	or     eax,0xffffffff
c001b764:	83 c4 1c             	add    esp,0x1c
c001b767:	89 c2                	mov    edx,eax
c001b769:	c3                   	ret    

c001b76a <Sys::getCwd(regs*)>:
c001b76a:	83 ec 10             	sub    esp,0x10
c001b76d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b771:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b774:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b777:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b77c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b77f:	e8 3c 7a ff ff       	call   c00131c0 <Fs::getcwd(Process*, char*, int)>
c001b784:	83 c4 1c             	add    esp,0x1c
c001b787:	99                   	cdq    
c001b788:	c3                   	ret    

c001b789 <Sys::getPID(regs*)>:
c001b789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b78e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b791:	8b 00                	mov    eax,DWORD PTR [eax]
c001b793:	99                   	cdq    
c001b794:	c3                   	ret    

c001b795 <Sys::getRAMData(regs*)>:
c001b795:	8b 0d 14 f3 02 c0    	mov    ecx,DWORD PTR ds:0xc002f314
c001b79b:	6b 05 10 f3 02 c0 64 	imul   eax,DWORD PTR ds:0xc002f310,0x64
c001b7a2:	99                   	cdq    
c001b7a3:	f7 f9                	idiv   ecx
c001b7a5:	c1 e0 18             	shl    eax,0x18
c001b7a8:	09 c8                	or     eax,ecx
c001b7aa:	99                   	cdq    
c001b7ab:	c3                   	ret    

c001b7ac <Sys::getVGAPtr(regs*)>:
c001b7ac:	55                   	push   ebp
c001b7ad:	57                   	push   edi
c001b7ae:	56                   	push   esi
c001b7af:	53                   	push   ebx
c001b7b0:	83 ec 18             	sub    esp,0x18
c001b7b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b7b7:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b7ba:	e8 02 33 00 00       	call   c001eac1 <Thr::processFromPID(int)>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	89 c1                	mov    ecx,eax
c001b7c4:	b8 01 00 00 00       	mov    eax,0x1
c001b7c9:	85 c9                	test   ecx,ecx
c001b7cb:	74 59                	je     c001b826 <Sys::getVGAPtr(regs*)+0x7a>
c001b7cd:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b7d3:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b7d7:	74 0c                	je     c001b7e5 <Sys::getVGAPtr(regs*)+0x39>
c001b7d9:	83 ec 0c             	sub    esp,0xc
c001b7dc:	53                   	push   ebx
c001b7dd:	e8 a0 54 ff ff       	call   c0010c82 <setActiveTerminal(VgaText*)>
c001b7e2:	83 c4 10             	add    esp,0x10
c001b7e5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b7e8:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b7eb:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b7f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b7f2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b7f5:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b7f8:	81 c3 82 00 00 00    	add    ebx,0x82
c001b7fe:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b804:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b807:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b80a:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b810:	50                   	push   eax
c001b811:	50                   	push   eax
c001b812:	53                   	push   ebx
c001b813:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b816:	05 a8 0f 00 00       	add    eax,0xfa8
c001b81b:	50                   	push   eax
c001b81c:	e8 13 50 fe ff       	call   c0000834 <strcpy>
c001b821:	83 c4 10             	add    esp,0x10
c001b824:	31 c0                	xor    eax,eax
c001b826:	83 c4 0c             	add    esp,0xc
c001b829:	31 d2                	xor    edx,edx
c001b82b:	5b                   	pop    ebx
c001b82c:	5e                   	pop    esi
c001b82d:	5f                   	pop    edi
c001b82e:	5d                   	pop    ebp
c001b82f:	c3                   	ret    

c001b830 <Sys::loadDLL(regs*)>:
c001b830:	56                   	push   esi
c001b831:	53                   	push   ebx
c001b832:	31 d2                	xor    edx,edx
c001b834:	51                   	push   ecx
c001b835:	b8 01 00 00 00       	mov    eax,0x1
c001b83a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b83e:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b842:	0f 84 8c 00 00 00    	je     c001b8d4 <Sys::loadDLL(regs*)+0xa4>
c001b848:	83 ec 0c             	sub    esp,0xc
c001b84b:	68 14 01 00 00       	push   0x114
c001b850:	e8 5f 40 ff ff       	call   c000f8b4 <malloc>
c001b855:	83 c4 0c             	add    esp,0xc
c001b858:	89 c3                	mov    ebx,eax
c001b85a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b85f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b862:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b865:	53                   	push   ebx
c001b866:	e8 53 7b ff ff       	call   c00133be <File::File(char const*, Process*)>
c001b86b:	83 c4 10             	add    esp,0x10
c001b86e:	31 d2                	xor    edx,edx
c001b870:	b8 02 00 00 00       	mov    eax,0x2
c001b875:	85 db                	test   ebx,ebx
c001b877:	74 5b                	je     c001b8d4 <Sys::loadDLL(regs*)+0xa4>
c001b879:	83 ec 0c             	sub    esp,0xc
c001b87c:	53                   	push   ebx
c001b87d:	e8 0e 7e ff ff       	call   c0013690 <File::exists()>
c001b882:	83 c4 10             	add    esp,0x10
c001b885:	84 c0                	test   al,al
c001b887:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b889:	75 11                	jne    c001b89c <Sys::loadDLL(regs*)+0x6c>
c001b88b:	83 ec 0c             	sub    esp,0xc
c001b88e:	53                   	push   ebx
c001b88f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	b8 03 00 00 00       	mov    eax,0x3
c001b89a:	eb 36                	jmp    c001b8d2 <Sys::loadDLL(regs*)+0xa2>
c001b89c:	83 ec 0c             	sub    esp,0xc
c001b89f:	53                   	push   ebx
c001b8a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b8a3:	58                   	pop    eax
c001b8a4:	5a                   	pop    edx
c001b8a5:	6a 00                	push   0x0
c001b8a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b8aa:	e8 1e 24 00 00       	call   c001dccd <Thr::loadDLL(char const*, bool)>
c001b8af:	83 c4 10             	add    esp,0x10
c001b8b2:	89 c1                	mov    ecx,eax
c001b8b4:	31 d2                	xor    edx,edx
c001b8b6:	b8 04 00 00 00       	mov    eax,0x4
c001b8bb:	85 c9                	test   ecx,ecx
c001b8bd:	74 15                	je     c001b8d4 <Sys::loadDLL(regs*)+0xa4>
c001b8bf:	53                   	push   ebx
c001b8c0:	53                   	push   ebx
c001b8c1:	ff 35 c8 f2 02 c0    	push   DWORD PTR ds:0xc002f2c8
c001b8c7:	51                   	push   ecx
c001b8c8:	e8 2b 26 00 00       	call   c001def8 <Thr::executeDLL(unsigned long, void*)>
c001b8cd:	83 c4 10             	add    esp,0x10
c001b8d0:	31 c0                	xor    eax,eax
c001b8d2:	31 d2                	xor    edx,edx
c001b8d4:	59                   	pop    ecx
c001b8d5:	5b                   	pop    ebx
c001b8d6:	5e                   	pop    esi
c001b8d7:	c3                   	ret    

c001b8d8 <Sys::read(regs*)>:
c001b8d8:	57                   	push   edi
c001b8d9:	56                   	push   esi
c001b8da:	53                   	push   ebx
c001b8db:	83 ec 10             	sub    esp,0x10
c001b8de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b8e2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8e5:	83 f8 02             	cmp    eax,0x2
c001b8e8:	77 10                	ja     c001b8fa <Sys::read(regs*)+0x22>
c001b8ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ef:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8f2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b8f8:	eb 0e                	jmp    c001b908 <Sys::read(regs*)+0x30>
c001b8fa:	83 ec 0c             	sub    esp,0xc
c001b8fd:	50                   	push   eax
c001b8fe:	e8 00 60 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001b903:	83 c4 10             	add    esp,0x10
c001b906:	89 c1                	mov    ecx,eax
c001b908:	83 c8 ff             	or     eax,0xffffffff
c001b90b:	85 c9                	test   ecx,ecx
c001b90d:	89 c2                	mov    edx,eax
c001b90f:	74 28                	je     c001b939 <Sys::read(regs*)+0x61>
c001b911:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b919:	31 ff                	xor    edi,edi
c001b91b:	83 ec 0c             	sub    esp,0xc
c001b91e:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b920:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b924:	52                   	push   edx
c001b925:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b928:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b92b:	57                   	push   edi
c001b92c:	56                   	push   esi
c001b92d:	51                   	push   ecx
c001b92e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b931:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b935:	83 c4 20             	add    esp,0x20
c001b938:	99                   	cdq    
c001b939:	83 c4 10             	add    esp,0x10
c001b93c:	5b                   	pop    ebx
c001b93d:	5e                   	pop    esi
c001b93e:	5f                   	pop    edi
c001b93f:	c3                   	ret    

c001b940 <Sys::sbrk(regs*)>:
c001b940:	56                   	push   esi
c001b941:	53                   	push   ebx
c001b942:	50                   	push   eax
c001b943:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b948:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b94c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b94f:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b952:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b958:	85 db                	test   ebx,ebx
c001b95a:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b95d:	74 02                	je     c001b961 <Sys::sbrk(regs*)+0x21>
c001b95f:	79 06                	jns    c001b967 <Sys::sbrk(regs*)+0x27>
c001b961:	89 f0                	mov    eax,esi
c001b963:	31 d2                	xor    edx,edx
c001b965:	eb 2a                	jmp    c001b991 <Sys::sbrk(regs*)+0x51>
c001b967:	83 c8 ff             	or     eax,0xffffffff
c001b96a:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b970:	89 c2                	mov    edx,eax
c001b972:	77 1d                	ja     c001b991 <Sys::sbrk(regs*)+0x51>
c001b974:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b97a:	50                   	push   eax
c001b97b:	c1 ea 0c             	shr    edx,0xc
c001b97e:	68 07 0c 00 00       	push   0xc07
c001b983:	52                   	push   edx
c001b984:	51                   	push   ecx
c001b985:	e8 08 6a ff ff       	call   c0012392 <VAS::allocatePages(int, int)>
c001b98a:	89 f0                	mov    eax,esi
c001b98c:	31 d2                	xor    edx,edx
c001b98e:	83 c4 10             	add    esp,0x10
c001b991:	59                   	pop    ecx
c001b992:	5b                   	pop    ebx
c001b993:	5e                   	pop    esi
c001b994:	c3                   	ret    

c001b995 <Sys::setCwd(regs*)>:
c001b995:	83 ec 14             	sub    esp,0x14
c001b998:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b99c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b99f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b9a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b9a7:	e8 83 7d ff ff       	call   c001372f <Fs::setcwd(Process*, char*)>
c001b9ac:	83 c4 1c             	add    esp,0x1c
c001b9af:	99                   	cdq    
c001b9b0:	c3                   	ret    

c001b9b1 <Sys::setTime(regs*)>:
c001b9b1:	55                   	push   ebp
c001b9b2:	31 d2                	xor    edx,edx
c001b9b4:	57                   	push   edi
c001b9b5:	bf 18 00 00 00       	mov    edi,0x18
c001b9ba:	56                   	push   esi
c001b9bb:	53                   	push   ebx
c001b9bc:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b9c1:	83 ec 30             	sub    esp,0x30
c001b9c4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b9c8:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b9cb:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9ce:	f7 f3                	div    ebx
c001b9d0:	89 d6                	mov    esi,edx
c001b9d2:	31 d2                	xor    edx,edx
c001b9d4:	f7 f3                	div    ebx
c001b9d6:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b9d9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b9dd:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b9e2:	31 d2                	xor    edx,edx
c001b9e4:	f7 f3                	div    ebx
c001b9e6:	31 d2                	xor    edx,edx
c001b9e8:	bb 0c 00 00 00       	mov    ebx,0xc
c001b9ed:	f7 f7                	div    edi
c001b9ef:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b9f2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b9f6:	0f b7 cd             	movzx  ecx,bp
c001b9f9:	56                   	push   esi
c001b9fa:	89 c7                	mov    edi,eax
c001b9fc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001ba00:	c1 e6 10             	shl    esi,0x10
c001ba03:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba07:	83 e7 1f             	and    edi,0x1f
c001ba0a:	51                   	push   ecx
c001ba0b:	47                   	inc    edi
c001ba0c:	c1 e8 05             	shr    eax,0x5
c001ba0f:	31 d2                	xor    edx,edx
c001ba11:	f7 f3                	div    ebx
c001ba13:	31 db                	xor    ebx,ebx
c001ba15:	52                   	push   edx
c001ba16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ba1a:	57                   	push   edi
c001ba1b:	68 4d cb 02 c0       	push   0xc002cb4d
c001ba20:	e8 3a 74 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ba25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ba29:	89 f8                	mov    eax,edi
c001ba2b:	31 c9                	xor    ecx,ecx
c001ba2d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001ba31:	88 c1                	mov    cl,al
c001ba33:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001ba39:	88 d5                	mov    ch,dl
c001ba3b:	c1 e0 10             	shl    eax,0x10
c001ba3e:	0f b7 d1             	movzx  edx,cx
c001ba41:	09 c2                	or     edx,eax
c001ba43:	89 d8                	mov    eax,ebx
c001ba45:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001ba4a:	09 f0                	or     eax,esi
c001ba4c:	89 c3                	mov    ebx,eax
c001ba4e:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001ba52:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001ba56:	83 c4 18             	add    esp,0x18
c001ba59:	53                   	push   ebx
c001ba5a:	52                   	push   edx
c001ba5b:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ba5f:	8d 74 24 28          	lea    esi,[esp+0x28]
c001ba63:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ba67:	e8 e5 83 ff ff       	call   c0013e51 <datetimeToSeconds(datetime_t)>
c001ba6c:	83 c4 0c             	add    esp,0xc
c001ba6f:	52                   	push   edx
c001ba70:	50                   	push   eax
c001ba71:	56                   	push   esi
c001ba72:	e8 61 85 ff ff       	call   c0013fd8 <secondsToDatetime(unsigned long long)>
c001ba77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ba7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ba7f:	51                   	push   ecx
c001ba80:	89 d6                	mov    esi,edx
c001ba82:	51                   	push   ecx
c001ba83:	c1 ee 10             	shr    esi,0x10
c001ba86:	89 f3                	mov    ebx,esi
c001ba88:	0f b6 f3             	movzx  esi,bl
c001ba8b:	56                   	push   esi
c001ba8c:	0f b6 f6             	movzx  esi,dh
c001ba8f:	0f b6 d2             	movzx  edx,dl
c001ba92:	56                   	push   esi
c001ba93:	52                   	push   edx
c001ba94:	89 c2                	mov    edx,eax
c001ba96:	c1 ea 10             	shr    edx,0x10
c001ba99:	52                   	push   edx
c001ba9a:	0f b6 d4             	movzx  edx,ah
c001ba9d:	0f b6 c0             	movzx  eax,al
c001baa0:	52                   	push   edx
c001baa1:	50                   	push   eax
c001baa2:	68 69 cb 02 c0       	push   0xc002cb69
c001baa7:	e8 b3 73 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001baac:	83 c4 2c             	add    esp,0x2c
c001baaf:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001bab4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001bab8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001babc:	53                   	push   ebx
c001babd:	51                   	push   ecx
c001babe:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001bac4:	e8 af 84 ff ff       	call   c0013f78 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001bac9:	83 f0 01             	xor    eax,0x1
c001bacc:	31 d2                	xor    edx,edx
c001bace:	0f b6 c0             	movzx  eax,al
c001bad1:	83 c4 3c             	add    esp,0x3c
c001bad4:	5b                   	pop    ebx
c001bad5:	5e                   	pop    esi
c001bad6:	5f                   	pop    edi
c001bad7:	5d                   	pop    ebp
c001bad8:	c3                   	ret    

c001bad9 <Sys::timezone(regs*)>:
c001bad9:	53                   	push   ebx
c001bada:	83 ec 08             	sub    esp,0x8
c001badd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bae1:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001bae5:	75 17                	jne    c001bafe <Sys::timezone(regs*)+0x25>
c001bae7:	83 ec 0c             	sub    esp,0xc
c001baea:	68 85 cb 02 c0       	push   0xc002cb85
c001baef:	e8 6b 73 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001baf4:	83 c8 ff             	or     eax,0xffffffff
c001baf7:	83 c4 10             	add    esp,0x10
c001bafa:	89 c2                	mov    edx,eax
c001bafc:	eb 20                	jmp    c001bb1e <Sys::timezone(regs*)+0x45>
c001bafe:	83 ec 0c             	sub    esp,0xc
c001bb01:	68 bd cb 02 c0       	push   0xc002cbbd
c001bb06:	e8 54 73 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001bb0b:	58                   	pop    eax
c001bb0c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001bb0f:	e8 c6 81 ff ff       	call   c0013cda <User::loadClockSettings(int)>
c001bb14:	83 c4 10             	add    esp,0x10
c001bb17:	b8 01 00 00 00       	mov    eax,0x1
c001bb1c:	31 d2                	xor    edx,edx
c001bb1e:	83 c4 08             	add    esp,0x8
c001bb21:	5b                   	pop    ebx
c001bb22:	c3                   	ret    

c001bb23 <Sys::write(regs*)>:
c001bb23:	57                   	push   edi
c001bb24:	56                   	push   esi
c001bb25:	53                   	push   ebx
c001bb26:	83 ec 10             	sub    esp,0x10
c001bb29:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb2d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb30:	83 f8 02             	cmp    eax,0x2
c001bb33:	77 10                	ja     c001bb45 <Sys::write(regs*)+0x22>
c001bb35:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb3a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb3d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001bb43:	eb 0e                	jmp    c001bb53 <Sys::write(regs*)+0x30>
c001bb45:	83 ec 0c             	sub    esp,0xc
c001bb48:	50                   	push   eax
c001bb49:	e8 b5 5d ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001bb4e:	83 c4 10             	add    esp,0x10
c001bb51:	89 c1                	mov    ecx,eax
c001bb53:	83 c8 ff             	or     eax,0xffffffff
c001bb56:	85 c9                	test   ecx,ecx
c001bb58:	89 c2                	mov    edx,eax
c001bb5a:	74 28                	je     c001bb84 <Sys::write(regs*)+0x61>
c001bb5c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bb64:	31 ff                	xor    edi,edi
c001bb66:	83 ec 0c             	sub    esp,0xc
c001bb69:	8b 01                	mov    eax,DWORD PTR [ecx]
c001bb6b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001bb6f:	52                   	push   edx
c001bb70:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb73:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001bb76:	57                   	push   edi
c001bb77:	56                   	push   esi
c001bb78:	51                   	push   ecx
c001bb79:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001bb7c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bb80:	83 c4 20             	add    esp,0x20
c001bb83:	99                   	cdq    
c001bb84:	83 c4 10             	add    esp,0x10
c001bb87:	5b                   	pop    ebx
c001bb88:	5e                   	pop    esi
c001bb89:	5f                   	pop    edi
c001bb8a:	c3                   	ret    

c001bb8b <Sys::wsbe(regs*)>:
c001bb8b:	57                   	push   edi
c001bb8c:	b9 0b 00 00 00       	mov    ecx,0xb
c001bb91:	56                   	push   esi
c001bb92:	be fc cb 02 c0       	mov    esi,0xc002cbfc
c001bb97:	53                   	push   ebx
c001bb98:	83 ec 30             	sub    esp,0x30
c001bb9b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001bb9f:	fc                   	cld    
c001bba0:	83 ec 0c             	sub    esp,0xc
c001bba3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bba5:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bba9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbb1:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001bbb7:	8b 06                	mov    eax,DWORD PTR [esi]
c001bbb9:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001bbbc:	57                   	push   edi
c001bbbd:	e8 d2 4b fe ff       	call   c0000794 <strlen>
c001bbc2:	5a                   	pop    edx
c001bbc3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001bbc7:	52                   	push   edx
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	57                   	push   edi
c001bbcb:	52                   	push   edx
c001bbcc:	50                   	push   eax
c001bbcd:	56                   	push   esi
c001bbce:	ff d3                	call   ebx
c001bbd0:	83 c4 14             	add    esp,0x14
c001bbd3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bbd7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bbda:	e8 00 34 00 00       	call   c001efdf <terminateTask(int)>
c001bbdf:	83 c4 40             	add    esp,0x40
c001bbe2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001bbe7:	5b                   	pop    ebx
c001bbe8:	31 d2                	xor    edx,edx
c001bbea:	5e                   	pop    esi
c001bbeb:	5f                   	pop    edi
c001bbec:	c3                   	ret    

c001bbed <Sys::yield(regs*)>:
c001bbed:	57                   	push   edi
c001bbee:	56                   	push   esi
c001bbef:	53                   	push   ebx
c001bbf0:	fa                   	cli    
c001bbf1:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001bbf7:	e8 b0 2a 00 00       	call   c001e6ac <schedule()>
c001bbfc:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001bc01:	48                   	dec    eax
c001bc02:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001bc07:	75 01                	jne    c001bc0a <Sys::yield(regs*)+0x1d>
c001bc09:	fb                   	sti    
c001bc0a:	8b 35 50 f9 02 c0    	mov    esi,DWORD PTR ds:0xc002f950
c001bc10:	8b 3d 54 f9 02 c0    	mov    edi,DWORD PTR ds:0xc002f954
c001bc16:	89 f0                	mov    eax,esi
c001bc18:	89 fb                	mov    ebx,edi
c001bc1a:	89 f1                	mov    ecx,esi
c001bc1c:	c1 e0 07             	shl    eax,0x7
c001bc1f:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001bc23:	25 80 30 0f 00       	and    eax,0xf3080
c001bc28:	c1 eb 17             	shr    ebx,0x17
c001bc2b:	31 c8                	xor    eax,ecx
c001bc2d:	89 da                	mov    edx,ebx
c001bc2f:	5b                   	pop    ebx
c001bc30:	5e                   	pop    esi
c001bc31:	5f                   	pop    edi
c001bc32:	c3                   	ret    

c001bc33 <sysCallSeekDir(regs*)>:
c001bc33:	31 c0                	xor    eax,eax
c001bc35:	31 d2                	xor    edx,edx
c001bc37:	c3                   	ret    

c001bc38 <sysCallTellDir(regs*)>:
c001bc38:	31 c0                	xor    eax,eax
c001bc3a:	31 d2                	xor    edx,edx
c001bc3c:	c3                   	ret    

c001bc3d <sysCallVerify(regs*)>:
c001bc3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc41:	31 d2                	xor    edx,edx
c001bc43:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc46:	c3                   	ret    

c001bc47 <sysFormatDisk(regs*)>:
c001bc47:	56                   	push   esi
c001bc48:	53                   	push   ebx
c001bc49:	53                   	push   ebx
c001bc4a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bc4e:	8b 1d 54 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f454
c001bc54:	eb 25                	jmp    c001bc7b <sysFormatDisk(regs*)+0x34>
c001bc56:	83 ec 0c             	sub    esp,0xc
c001bc59:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bc5c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bc5e:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001bc61:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bc64:	50                   	push   eax
c001bc65:	ff 34 85 e0 f8 02 c0 	push   DWORD PTR [eax*4-0x3ffd0720]
c001bc6c:	53                   	push   ebx
c001bc6d:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001bc70:	83 c4 20             	add    esp,0x20
c001bc73:	83 f8 08             	cmp    eax,0x8
c001bc76:	75 12                	jne    c001bc8a <sysFormatDisk(regs*)+0x43>
c001bc78:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001bc7b:	85 db                	test   ebx,ebx
c001bc7d:	75 d7                	jne    c001bc56 <sysFormatDisk(regs*)+0xf>
c001bc7f:	59                   	pop    ecx
c001bc80:	b8 03 00 00 00       	mov    eax,0x3
c001bc85:	31 d2                	xor    edx,edx
c001bc87:	5b                   	pop    ebx
c001bc88:	5e                   	pop    esi
c001bc89:	c3                   	ret    
c001bc8a:	85 c0                	test   eax,eax
c001bc8c:	74 1b                	je     c001bca9 <sysFormatDisk(regs*)+0x62>
c001bc8e:	83 f8 09             	cmp    eax,0x9
c001bc91:	74 0b                	je     c001bc9e <sysFormatDisk(regs*)+0x57>
c001bc93:	59                   	pop    ecx
c001bc94:	b8 02 00 00 00       	mov    eax,0x2
c001bc99:	31 d2                	xor    edx,edx
c001bc9b:	5b                   	pop    ebx
c001bc9c:	5e                   	pop    esi
c001bc9d:	c3                   	ret    
c001bc9e:	59                   	pop    ecx
c001bc9f:	b8 01 00 00 00       	mov    eax,0x1
c001bca4:	31 d2                	xor    edx,edx
c001bca6:	5b                   	pop    ebx
c001bca7:	5e                   	pop    esi
c001bca8:	c3                   	ret    
c001bca9:	59                   	pop    ecx
c001bcaa:	31 c0                	xor    eax,eax
c001bcac:	31 d2                	xor    edx,edx
c001bcae:	5b                   	pop    ebx
c001bcaf:	5e                   	pop    esi
c001bcb0:	c3                   	ret    

c001bcb1 <sysSetDiskVolumeLabel(regs*)>:
c001bcb1:	56                   	push   esi
c001bcb2:	53                   	push   ebx
c001bcb3:	53                   	push   ebx
c001bcb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bcb8:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bcbb:	83 f8 19             	cmp    eax,0x19
c001bcbe:	77 29                	ja     c001bce9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcc0:	8b 0c 85 e0 f8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0720]
c001bcc7:	85 c9                	test   ecx,ecx
c001bcc9:	74 1e                	je     c001bce9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bccb:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bcce:	85 d2                	test   edx,edx
c001bcd0:	74 17                	je     c001bce9 <sysSetDiskVolumeLabel(regs*)+0x38>
c001bcd2:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001bcd8:	8b 33                	mov    esi,DWORD PTR [ebx]
c001bcda:	52                   	push   edx
c001bcdb:	50                   	push   eax
c001bcdc:	51                   	push   ecx
c001bcdd:	53                   	push   ebx
c001bcde:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bce1:	83 c4 10             	add    esp,0x10
c001bce4:	99                   	cdq    
c001bce5:	59                   	pop    ecx
c001bce6:	5b                   	pop    ebx
c001bce7:	5e                   	pop    esi
c001bce8:	c3                   	ret    
c001bce9:	59                   	pop    ecx
c001bcea:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bcef:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcf4:	5b                   	pop    ebx
c001bcf5:	5e                   	pop    esi
c001bcf6:	c3                   	ret    

c001bcf7 <sysGetDiskVolumeLabel(regs*)>:
c001bcf7:	57                   	push   edi
c001bcf8:	56                   	push   esi
c001bcf9:	53                   	push   ebx
c001bcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bcfe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bd01:	83 fa 19             	cmp    edx,0x19
c001bd04:	77 34                	ja     c001bd3a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd06:	8b 0c 95 e0 f8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0720]
c001bd0d:	85 c9                	test   ecx,ecx
c001bd0f:	74 29                	je     c001bd3a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd11:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bd14:	85 db                	test   ebx,ebx
c001bd16:	74 22                	je     c001bd3a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd18:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001bd1b:	85 c0                	test   eax,eax
c001bd1d:	74 1b                	je     c001bd3a <sysGetDiskVolumeLabel(regs*)+0x43>
c001bd1f:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bd25:	83 ec 0c             	sub    esp,0xc
c001bd28:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bd2a:	50                   	push   eax
c001bd2b:	53                   	push   ebx
c001bd2c:	52                   	push   edx
c001bd2d:	51                   	push   ecx
c001bd2e:	56                   	push   esi
c001bd2f:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bd32:	83 c4 20             	add    esp,0x20
c001bd35:	99                   	cdq    
c001bd36:	5b                   	pop    ebx
c001bd37:	5e                   	pop    esi
c001bd38:	5f                   	pop    edi
c001bd39:	c3                   	ret    
c001bd3a:	5b                   	pop    ebx
c001bd3b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bd40:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd45:	5e                   	pop    esi
c001bd46:	5f                   	pop    edi
c001bd47:	c3                   	ret    

c001bd48 <sysShutdown(regs*)>:
c001bd48:	83 ec 0c             	sub    esp,0xc
c001bd4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd52:	85 c0                	test   eax,eax
c001bd54:	74 18                	je     c001bd6e <sysShutdown(regs*)+0x26>
c001bd56:	83 f8 01             	cmp    eax,0x1
c001bd59:	74 38                	je     c001bd93 <sysShutdown(regs*)+0x4b>
c001bd5b:	83 f8 02             	cmp    eax,0x2
c001bd5e:	74 24                	je     c001bd84 <sysShutdown(regs*)+0x3c>
c001bd60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd65:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd6a:	83 c4 0c             	add    esp,0xc
c001bd6d:	c3                   	ret    
c001bd6e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001bd73:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd75:	6a 00                	push   0x0
c001bd77:	6a 00                	push   0x0
c001bd79:	6a 00                	push   0x0
c001bd7b:	50                   	push   eax
c001bd7c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bd7f:	83 c4 10             	add    esp,0x10
c001bd82:	eb dc                	jmp    c001bd60 <sysShutdown(regs*)+0x18>
c001bd84:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001bd89:	8b 10                	mov    edx,DWORD PTR [eax]
c001bd8b:	6a 00                	push   0x0
c001bd8d:	6a 00                	push   0x0
c001bd8f:	6a 01                	push   0x1
c001bd91:	eb e8                	jmp    c001bd7b <sysShutdown(regs*)+0x33>
c001bd93:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001bd98:	85 c0                	test   eax,eax
c001bd9a:	74 02                	je     c001bd9e <sysShutdown(regs*)+0x56>
c001bd9c:	ff d0                	call   eax
c001bd9e:	31 c0                	xor    eax,eax
c001bda0:	31 d2                	xor    edx,edx
c001bda2:	83 c4 0c             	add    esp,0xc
c001bda5:	c3                   	ret    

c001bda6 <sysCallRealpath(regs*)>:
c001bda6:	83 ec 0c             	sub    esp,0xc
c001bda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bdad:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bdb0:	85 d2                	test   edx,edx
c001bdb2:	74 07                	je     c001bdbb <sysCallRealpath(regs*)+0x15>
c001bdb4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bdb7:	85 c0                	test   eax,eax
c001bdb9:	75 0b                	jne    c001bdc6 <sysCallRealpath(regs*)+0x20>
c001bdbb:	b8 01 00 00 00       	mov    eax,0x1
c001bdc0:	31 d2                	xor    edx,edx
c001bdc2:	83 c4 0c             	add    esp,0xc
c001bdc5:	c3                   	ret    
c001bdc6:	51                   	push   ecx
c001bdc7:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdcd:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bdd0:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bdd6:	51                   	push   ecx
c001bdd7:	52                   	push   edx
c001bdd8:	50                   	push   eax
c001bdd9:	e8 36 74 ff ff       	call   c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bdde:	83 c4 10             	add    esp,0x10
c001bde1:	31 c0                	xor    eax,eax
c001bde3:	31 d2                	xor    edx,edx
c001bde5:	83 c4 0c             	add    esp,0xc
c001bde8:	c3                   	ret    

c001bde9 <sysCallGetArgc(regs*)>:
c001bde9:	83 ec 14             	sub    esp,0x14
c001bdec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdf4:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bdfa:	68 28 cc 02 c0       	push   0xc002cc28
c001bdff:	e8 5b 70 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001be04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be09:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be0c:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001be12:	83 c4 1c             	add    esp,0x1c
c001be15:	99                   	cdq    
c001be16:	c3                   	ret    

c001be17 <sysCallReadDir(regs*)>:
c001be17:	53                   	push   ebx
c001be18:	83 ec 18             	sub    esp,0x18
c001be1b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001be1f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be22:	83 f8 02             	cmp    eax,0x2
c001be25:	76 53                	jbe    c001be7a <sysCallReadDir(regs*)+0x63>
c001be27:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001be2a:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001be30:	77 4f                	ja     c001be81 <sysCallReadDir(regs*)+0x6a>
c001be32:	83 ec 0c             	sub    esp,0xc
c001be35:	50                   	push   eax
c001be36:	e8 c8 5a ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001be3b:	83 c4 10             	add    esp,0x10
c001be3e:	85 c0                	test   eax,eax
c001be40:	74 50                	je     c001be92 <sysCallReadDir(regs*)+0x7b>
c001be42:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001be4a:	83 ec 0c             	sub    esp,0xc
c001be4d:	8b 10                	mov    edx,DWORD PTR [eax]
c001be4f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001be53:	51                   	push   ecx
c001be54:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001be57:	6a 00                	push   0x0
c001be59:	68 10 01 00 00       	push   0x110
c001be5e:	50                   	push   eax
c001be5f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be62:	83 c4 20             	add    esp,0x20
c001be65:	85 c0                	test   eax,eax
c001be67:	74 38                	je     c001bea1 <sysCallReadDir(regs*)+0x8a>
c001be69:	83 f8 07             	cmp    eax,0x7
c001be6c:	74 0c                	je     c001be7a <sysCallReadDir(regs*)+0x63>
c001be6e:	b8 02 00 00 00       	mov    eax,0x2
c001be73:	31 d2                	xor    edx,edx
c001be75:	83 c4 18             	add    esp,0x18
c001be78:	5b                   	pop    ebx
c001be79:	c3                   	ret    
c001be7a:	b8 01 00 00 00       	mov    eax,0x1
c001be7f:	eb f2                	jmp    c001be73 <sysCallReadDir(regs*)+0x5c>
c001be81:	83 ec 08             	sub    esp,0x8
c001be84:	52                   	push   edx
c001be85:	68 4c cd 02 c0       	push   0xc002cd4c
c001be8a:	e8 d0 6f ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001be8f:	83 c4 10             	add    esp,0x10
c001be92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be97:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be9c:	83 c4 18             	add    esp,0x18
c001be9f:	5b                   	pop    ebx
c001bea0:	c3                   	ret    
c001bea1:	31 c0                	xor    eax,eax
c001bea3:	eb ce                	jmp    c001be73 <sysCallReadDir(regs*)+0x5c>

c001bea5 <sysCallIsATTY(regs*)>:
c001bea5:	83 ec 0c             	sub    esp,0xc
c001bea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001beaf:	83 f8 02             	cmp    eax,0x2
c001beb2:	76 07                	jbe    c001bebb <sysCallIsATTY(regs*)+0x16>
c001beb4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001beb9:	75 26                	jne    c001bee1 <sysCallIsATTY(regs*)+0x3c>
c001bebb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bec3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bec9:	85 c0                	test   eax,eax
c001becb:	74 24                	je     c001bef1 <sysCallIsATTY(regs*)+0x4c>
c001becd:	83 ec 0c             	sub    esp,0xc
c001bed0:	8b 10                	mov    edx,DWORD PTR [eax]
c001bed2:	50                   	push   eax
c001bed3:	ff 12                	call   DWORD PTR [edx]
c001bed5:	31 d2                	xor    edx,edx
c001bed7:	0f b6 c0             	movzx  eax,al
c001beda:	83 c4 10             	add    esp,0x10
c001bedd:	83 c4 0c             	add    esp,0xc
c001bee0:	c3                   	ret    
c001bee1:	83 ec 0c             	sub    esp,0xc
c001bee4:	50                   	push   eax
c001bee5:	e8 19 5a ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001beea:	83 c4 10             	add    esp,0x10
c001beed:	85 c0                	test   eax,eax
c001beef:	75 dc                	jne    c001becd <sysCallIsATTY(regs*)+0x28>
c001bef1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bef6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001befb:	83 c4 0c             	add    esp,0xc
c001befe:	c3                   	ret    

c001beff <sysCallSeek(regs*)>:
c001beff:	53                   	push   ebx
c001bf00:	83 ec 08             	sub    esp,0x8
c001bf03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf07:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf0a:	83 f8 02             	cmp    eax,0x2
c001bf0d:	76 4a                	jbe    c001bf59 <sysCallSeek(regs*)+0x5a>
c001bf0f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf14:	77 32                	ja     c001bf48 <sysCallSeek(regs*)+0x49>
c001bf16:	83 ec 0c             	sub    esp,0xc
c001bf19:	50                   	push   eax
c001bf1a:	e8 e4 59 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001bf1f:	83 c4 0c             	add    esp,0xc
c001bf22:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bf25:	31 db                	xor    ebx,ebx
c001bf27:	53                   	push   ebx
c001bf28:	51                   	push   ecx
c001bf29:	50                   	push   eax
c001bf2a:	e8 b1 75 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001bf2f:	83 c4 10             	add    esp,0x10
c001bf32:	85 c0                	test   eax,eax
c001bf34:	0f 95 c0             	setne  al
c001bf37:	31 d2                	xor    edx,edx
c001bf39:	0f b6 c0             	movzx  eax,al
c001bf3c:	f7 d8                	neg    eax
c001bf3e:	83 d2 00             	adc    edx,0x0
c001bf41:	83 c4 08             	add    esp,0x8
c001bf44:	f7 da                	neg    edx
c001bf46:	5b                   	pop    ebx
c001bf47:	c3                   	ret    
c001bf48:	83 ec 08             	sub    esp,0x8
c001bf4b:	50                   	push   eax
c001bf4c:	68 33 cc 02 c0       	push   0xc002cc33
c001bf51:	e8 09 6f ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001bf56:	83 c4 10             	add    esp,0x10
c001bf59:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf5e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf63:	83 c4 08             	add    esp,0x8
c001bf66:	5b                   	pop    ebx
c001bf67:	c3                   	ret    

c001bf68 <sysCallTell(regs*)>:
c001bf68:	53                   	push   ebx
c001bf69:	83 ec 08             	sub    esp,0x8
c001bf6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf73:	83 f8 02             	cmp    eax,0x2
c001bf76:	76 5e                	jbe    c001bfd6 <sysCallTell(regs*)+0x6e>
c001bf78:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf7d:	77 2d                	ja     c001bfac <sysCallTell(regs*)+0x44>
c001bf7f:	83 ec 0c             	sub    esp,0xc
c001bf82:	50                   	push   eax
c001bf83:	e8 7b 59 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001bf88:	5a                   	pop    edx
c001bf89:	59                   	pop    ecx
c001bf8a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bf8d:	50                   	push   eax
c001bf8e:	e8 a3 75 ff ff       	call   c0013536 <File::tell(unsigned long long*)>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	85 c0                	test   eax,eax
c001bf98:	0f 95 c0             	setne  al
c001bf9b:	31 d2                	xor    edx,edx
c001bf9d:	0f b6 c0             	movzx  eax,al
c001bfa0:	f7 d8                	neg    eax
c001bfa2:	83 d2 00             	adc    edx,0x0
c001bfa5:	83 c4 08             	add    esp,0x8
c001bfa8:	f7 da                	neg    edx
c001bfaa:	5b                   	pop    ebx
c001bfab:	c3                   	ret    
c001bfac:	83 ec 08             	sub    esp,0x8
c001bfaf:	50                   	push   eax
c001bfb0:	68 4d cc 02 c0       	push   0xc002cc4d
c001bfb5:	e8 a5 6e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001bfba:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bfbd:	83 c4 10             	add    esp,0x10
c001bfc0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfc6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfcd:	31 d2                	xor    edx,edx
c001bfcf:	31 c0                	xor    eax,eax
c001bfd1:	83 c4 08             	add    esp,0x8
c001bfd4:	5b                   	pop    ebx
c001bfd5:	c3                   	ret    
c001bfd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bfdb:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bfe0:	83 c4 08             	add    esp,0x8
c001bfe3:	5b                   	pop    ebx
c001bfe4:	c3                   	ret    

c001bfe5 <sysCallSize(regs*)>:
c001bfe5:	53                   	push   ebx
c001bfe6:	83 ec 18             	sub    esp,0x18
c001bfe9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bfed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bff0:	83 f8 02             	cmp    eax,0x2
c001bff3:	76 64                	jbe    c001c059 <sysCallSize(regs*)+0x74>
c001bff5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bffa:	77 33                	ja     c001c02f <sysCallSize(regs*)+0x4a>
c001bffc:	83 ec 0c             	sub    esp,0xc
c001bfff:	50                   	push   eax
c001c000:	e8 fe 58 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001c005:	83 c4 0c             	add    esp,0xc
c001c008:	8d 54 24 13          	lea    edx,[esp+0x13]
c001c00c:	52                   	push   edx
c001c00d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c010:	50                   	push   eax
c001c011:	e8 b8 76 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c001c016:	83 c4 10             	add    esp,0x10
c001c019:	85 c0                	test   eax,eax
c001c01b:	0f 95 c0             	setne  al
c001c01e:	31 d2                	xor    edx,edx
c001c020:	0f b6 c0             	movzx  eax,al
c001c023:	f7 d8                	neg    eax
c001c025:	83 d2 00             	adc    edx,0x0
c001c028:	83 c4 18             	add    esp,0x18
c001c02b:	f7 da                	neg    edx
c001c02d:	5b                   	pop    ebx
c001c02e:	c3                   	ret    
c001c02f:	83 ec 08             	sub    esp,0x8
c001c032:	50                   	push   eax
c001c033:	68 67 cc 02 c0       	push   0xc002cc67
c001c038:	e8 22 6e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c03d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001c040:	83 c4 10             	add    esp,0x10
c001c043:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c049:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c050:	31 d2                	xor    edx,edx
c001c052:	31 c0                	xor    eax,eax
c001c054:	83 c4 18             	add    esp,0x18
c001c057:	5b                   	pop    ebx
c001c058:	c3                   	ret    
c001c059:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c05e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c063:	83 c4 18             	add    esp,0x18
c001c066:	5b                   	pop    ebx
c001c067:	c3                   	ret    

c001c068 <sysCallSizeFromFilename(regs*)>:
c001c068:	57                   	push   edi
c001c069:	56                   	push   esi
c001c06a:	53                   	push   ebx
c001c06b:	83 ec 20             	sub    esp,0x20
c001c06e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c072:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001c075:	83 fb 02             	cmp    ebx,0x2
c001c078:	0f 86 99 00 00 00    	jbe    c001c117 <sysCallSizeFromFilename(regs*)+0xaf>
c001c07e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001c084:	77 65                	ja     c001c0eb <sysCallSizeFromFilename(regs*)+0x83>
c001c086:	83 ec 0c             	sub    esp,0xc
c001c089:	68 14 01 00 00       	push   0x114
c001c08e:	e8 21 38 ff ff       	call   c000f8b4 <malloc>
c001c093:	83 c4 0c             	add    esp,0xc
c001c096:	89 c6                	mov    esi,eax
c001c098:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c09d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0a0:	53                   	push   ebx
c001c0a1:	56                   	push   esi
c001c0a2:	e8 17 73 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001c0a7:	83 c4 0c             	add    esp,0xc
c001c0aa:	8d 44 24 23          	lea    eax,[esp+0x23]
c001c0ae:	50                   	push   eax
c001c0af:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001c0b2:	56                   	push   esi
c001c0b3:	e8 16 76 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c001c0b8:	83 c4 10             	add    esp,0x10
c001c0bb:	85 f6                	test   esi,esi
c001c0bd:	74 14                	je     c001c0d3 <sysCallSizeFromFilename(regs*)+0x6b>
c001c0bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c0c3:	8b 16                	mov    edx,DWORD PTR [esi]
c001c0c5:	83 ec 0c             	sub    esp,0xc
c001c0c8:	56                   	push   esi
c001c0c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c0cc:	83 c4 10             	add    esp,0x10
c001c0cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c0d3:	85 c0                	test   eax,eax
c001c0d5:	0f 95 c0             	setne  al
c001c0d8:	31 d2                	xor    edx,edx
c001c0da:	0f b6 c0             	movzx  eax,al
c001c0dd:	f7 d8                	neg    eax
c001c0df:	83 d2 00             	adc    edx,0x0
c001c0e2:	83 c4 20             	add    esp,0x20
c001c0e5:	f7 da                	neg    edx
c001c0e7:	5b                   	pop    ebx
c001c0e8:	5e                   	pop    esi
c001c0e9:	5f                   	pop    edi
c001c0ea:	c3                   	ret    
c001c0eb:	83 ec 08             	sub    esp,0x8
c001c0ee:	53                   	push   ebx
c001c0ef:	68 67 cc 02 c0       	push   0xc002cc67
c001c0f4:	e8 66 6d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c0f9:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001c0fc:	83 c4 10             	add    esp,0x10
c001c0ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c105:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c10c:	31 d2                	xor    edx,edx
c001c10e:	83 c4 20             	add    esp,0x20
c001c111:	31 c0                	xor    eax,eax
c001c113:	5b                   	pop    ebx
c001c114:	5e                   	pop    esi
c001c115:	5f                   	pop    edi
c001c116:	c3                   	ret    
c001c117:	83 c4 20             	add    esp,0x20
c001c11a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c11f:	5b                   	pop    ebx
c001c120:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c125:	5e                   	pop    esi
c001c126:	5f                   	pop    edi
c001c127:	c3                   	ret    

c001c128 <sysCallClose(regs*)>:
c001c128:	53                   	push   ebx
c001c129:	83 ec 08             	sub    esp,0x8
c001c12c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c130:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c133:	83 f8 02             	cmp    eax,0x2
c001c136:	76 50                	jbe    c001c188 <sysCallClose(regs*)+0x60>
c001c138:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c13d:	74 58                	je     c001c197 <sysCallClose(regs*)+0x6f>
c001c13f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c144:	74 60                	je     c001c1a6 <sysCallClose(regs*)+0x7e>
c001c146:	77 2f                	ja     c001c177 <sysCallClose(regs*)+0x4f>
c001c148:	83 ec 0c             	sub    esp,0xc
c001c14b:	50                   	push   eax
c001c14c:	e8 b2 57 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001c151:	89 c3                	mov    ebx,eax
c001c153:	89 04 24             	mov    DWORD PTR [esp],eax
c001c156:	e8 25 73 ff ff       	call   c0013480 <File::close()>
c001c15b:	83 c4 10             	add    esp,0x10
c001c15e:	85 db                	test   ebx,ebx
c001c160:	74 0c                	je     c001c16e <sysCallClose(regs*)+0x46>
c001c162:	83 ec 0c             	sub    esp,0xc
c001c165:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c167:	53                   	push   ebx
c001c168:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c16b:	83 c4 10             	add    esp,0x10
c001c16e:	31 c0                	xor    eax,eax
c001c170:	31 d2                	xor    edx,edx
c001c172:	83 c4 08             	add    esp,0x8
c001c175:	5b                   	pop    ebx
c001c176:	c3                   	ret    
c001c177:	83 ec 08             	sub    esp,0x8
c001c17a:	50                   	push   eax
c001c17b:	68 70 cd 02 c0       	push   0xc002cd70
c001c180:	e8 da 6c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c185:	83 c4 10             	add    esp,0x10
c001c188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c18d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c192:	83 c4 08             	add    esp,0x8
c001c195:	5b                   	pop    ebx
c001c196:	c3                   	ret    
c001c197:	83 ec 0c             	sub    esp,0xc
c001c19a:	68 82 cc 02 c0       	push   0xc002cc82
c001c19f:	e8 bb 6c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c1a4:	eb c5                	jmp    c001c16b <sysCallClose(regs*)+0x43>
c001c1a6:	83 ec 0c             	sub    esp,0xc
c001c1a9:	68 90 cc 02 c0       	push   0xc002cc90
c001c1ae:	eb ef                	jmp    c001c19f <sysCallClose(regs*)+0x77>

c001c1b0 <sysCallOpenDir(regs*)>:
c001c1b0:	56                   	push   esi
c001c1b1:	53                   	push   ebx
c001c1b2:	53                   	push   ebx
c001c1b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1b7:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001c1ba:	85 f6                	test   esi,esi
c001c1bc:	74 59                	je     c001c217 <sysCallOpenDir(regs*)+0x67>
c001c1be:	83 ec 0c             	sub    esp,0xc
c001c1c1:	68 14 01 00 00       	push   0x114
c001c1c6:	e8 e9 36 ff ff       	call   c000f8b4 <malloc>
c001c1cb:	83 c4 0c             	add    esp,0xc
c001c1ce:	89 c6                	mov    esi,eax
c001c1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1d5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1d8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c1db:	56                   	push   esi
c001c1dc:	e8 89 76 ff ff       	call   c001386a <Directory::Directory(char const*, Process*)>
c001c1e1:	83 c4 10             	add    esp,0x10
c001c1e4:	85 f6                	test   esi,esi
c001c1e6:	74 2f                	je     c001c217 <sysCallOpenDir(regs*)+0x67>
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	56                   	push   esi
c001c1ec:	e8 dd 76 ff ff       	call   c00138ce <Directory::open()>
c001c1f1:	83 c4 10             	add    esp,0x10
c001c1f4:	85 c0                	test   eax,eax
c001c1f6:	75 1f                	jne    c001c217 <sysCallOpenDir(regs*)+0x67>
c001c1f8:	83 ec 0c             	sub    esp,0xc
c001c1fb:	56                   	push   esi
c001c1fc:	e8 0d 54 ff ff       	call   c001160e <UnixFile::getFileDescriptor()>
c001c201:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c204:	83 c4 10             	add    esp,0x10
c001c207:	89 02                	mov    DWORD PTR [edx],eax
c001c209:	c1 f8 1f             	sar    eax,0x1f
c001c20c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c20f:	31 c0                	xor    eax,eax
c001c211:	59                   	pop    ecx
c001c212:	31 d2                	xor    edx,edx
c001c214:	5b                   	pop    ebx
c001c215:	5e                   	pop    esi
c001c216:	c3                   	ret    
c001c217:	59                   	pop    ecx
c001c218:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c21d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c222:	5b                   	pop    ebx
c001c223:	5e                   	pop    esi
c001c224:	c3                   	ret    

c001c225 <sysCallCloseDir(regs*)>:
c001c225:	53                   	push   ebx
c001c226:	83 ec 08             	sub    esp,0x8
c001c229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c22d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c230:	83 f8 02             	cmp    eax,0x2
c001c233:	76 47                	jbe    c001c27c <sysCallCloseDir(regs*)+0x57>
c001c235:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c23a:	77 2f                	ja     c001c26b <sysCallCloseDir(regs*)+0x46>
c001c23c:	83 ec 0c             	sub    esp,0xc
c001c23f:	50                   	push   eax
c001c240:	e8 be 56 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001c245:	89 c3                	mov    ebx,eax
c001c247:	89 04 24             	mov    DWORD PTR [esp],eax
c001c24a:	e8 db 76 ff ff       	call   c001392a <Directory::close()>
c001c24f:	83 c4 10             	add    esp,0x10
c001c252:	85 db                	test   ebx,ebx
c001c254:	74 0c                	je     c001c262 <sysCallCloseDir(regs*)+0x3d>
c001c256:	83 ec 0c             	sub    esp,0xc
c001c259:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c25b:	53                   	push   ebx
c001c25c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c25f:	83 c4 10             	add    esp,0x10
c001c262:	31 c0                	xor    eax,eax
c001c264:	31 d2                	xor    edx,edx
c001c266:	83 c4 08             	add    esp,0x8
c001c269:	5b                   	pop    ebx
c001c26a:	c3                   	ret    
c001c26b:	83 ec 08             	sub    esp,0x8
c001c26e:	50                   	push   eax
c001c26f:	68 98 cd 02 c0       	push   0xc002cd98
c001c274:	e8 e6 6b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c279:	83 c4 10             	add    esp,0x10
c001c27c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c281:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c286:	83 c4 08             	add    esp,0x8
c001c289:	5b                   	pop    ebx
c001c28a:	c3                   	ret    

c001c28b <sysCallMakeDir(regs*)>:
c001c28b:	56                   	push   esi
c001c28c:	53                   	push   ebx
c001c28d:	83 ec 10             	sub    esp,0x10
c001c290:	68 14 01 00 00       	push   0x114
c001c295:	e8 1a 36 ff ff       	call   c000f8b4 <malloc>
c001c29a:	83 c4 0c             	add    esp,0xc
c001c29d:	89 c3                	mov    ebx,eax
c001c29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2a4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c2a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c2ab:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c2ae:	53                   	push   ebx
c001c2af:	e8 b6 75 ff ff       	call   c001386a <Directory::Directory(char const*, Process*)>
c001c2b4:	83 c4 10             	add    esp,0x10
c001c2b7:	85 db                	test   ebx,ebx
c001c2b9:	74 32                	je     c001c2ed <sysCallMakeDir(regs*)+0x62>
c001c2bb:	83 ec 0c             	sub    esp,0xc
c001c2be:	53                   	push   ebx
c001c2bf:	e8 ea 77 ff ff       	call   c0013aae <Directory::create()>
c001c2c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2c7:	89 c6                	mov    esi,eax
c001c2c9:	e8 5c 76 ff ff       	call   c001392a <Directory::close()>
c001c2ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c2d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c2d6:	83 c4 10             	add    esp,0x10
c001c2d9:	31 c0                	xor    eax,eax
c001c2db:	59                   	pop    ecx
c001c2dc:	85 f6                	test   esi,esi
c001c2de:	5b                   	pop    ebx
c001c2df:	0f 95 c0             	setne  al
c001c2e2:	5e                   	pop    esi
c001c2e3:	31 d2                	xor    edx,edx
c001c2e5:	f7 d8                	neg    eax
c001c2e7:	83 d2 00             	adc    edx,0x0
c001c2ea:	f7 da                	neg    edx
c001c2ec:	c3                   	ret    
c001c2ed:	59                   	pop    ecx
c001c2ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c2f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c2f8:	5b                   	pop    ebx
c001c2f9:	5e                   	pop    esi
c001c2fa:	c3                   	ret    

c001c2fb <sysCallWait(regs*)>:
c001c2fb:	83 ec 10             	sub    esp,0x10
c001c2fe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c302:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c305:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c308:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c30b:	e8 c8 25 00 00       	call   c001e8d8 <waitTask(int, int*, int)>
c001c310:	83 c4 1c             	add    esp,0x1c
c001c313:	99                   	cdq    
c001c314:	c3                   	ret    

c001c315 <sysCallNotImpl(regs*)>:
c001c315:	83 ec 18             	sub    esp,0x18
c001c318:	68 9e cc 02 c0       	push   0xc002cc9e
c001c31d:	e8 d7 e5 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001c322:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c327:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c32c:	83 c4 1c             	add    esp,0x1c
c001c32f:	c3                   	ret    

c001c330 <sysPanic(regs*)>:
c001c330:	83 ec 18             	sub    esp,0x18
c001c333:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c337:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c33a:	e8 ba e5 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001c33f:	c7 04 24 b8 cc 02 c0 	mov    DWORD PTR [esp],0xc002ccb8
c001c346:	e8 ae e5 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001c34b:	b8 01 00 00 00       	mov    eax,0x1
c001c350:	31 d2                	xor    edx,edx
c001c352:	83 c4 1c             	add    esp,0x1c
c001c355:	c3                   	ret    

c001c356 <sysCallRmdir(regs*)>:
c001c356:	56                   	push   esi
c001c357:	53                   	push   ebx
c001c358:	83 ec 20             	sub    esp,0x20
c001c35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c35f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c362:	68 14 01 00 00       	push   0x114
c001c367:	e8 48 35 ff ff       	call   c000f8b4 <malloc>
c001c36c:	83 c4 0c             	add    esp,0xc
c001c36f:	89 c3                	mov    ebx,eax
c001c371:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c376:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c379:	56                   	push   esi
c001c37a:	53                   	push   ebx
c001c37b:	e8 3e 70 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001c380:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c383:	e8 12 72 ff ff       	call   c001359a <File::unlink()>
c001c388:	83 c4 10             	add    esp,0x10
c001c38b:	85 db                	test   ebx,ebx
c001c38d:	74 14                	je     c001c3a3 <sysCallRmdir(regs*)+0x4d>
c001c38f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c393:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c395:	83 ec 0c             	sub    esp,0xc
c001c398:	53                   	push   ebx
c001c399:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c39c:	83 c4 10             	add    esp,0x10
c001c39f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3a3:	85 c0                	test   eax,eax
c001c3a5:	0f 95 c0             	setne  al
c001c3a8:	31 d2                	xor    edx,edx
c001c3aa:	0f b6 c0             	movzx  eax,al
c001c3ad:	f7 d8                	neg    eax
c001c3af:	83 d2 00             	adc    edx,0x0
c001c3b2:	83 c4 14             	add    esp,0x14
c001c3b5:	f7 da                	neg    edx
c001c3b7:	5b                   	pop    ebx
c001c3b8:	5e                   	pop    esi
c001c3b9:	c3                   	ret    

c001c3ba <sysCallUnlink(regs*)>:
c001c3ba:	56                   	push   esi
c001c3bb:	53                   	push   ebx
c001c3bc:	83 ec 20             	sub    esp,0x20
c001c3bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c3c3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c3c6:	68 14 01 00 00       	push   0x114
c001c3cb:	e8 e4 34 ff ff       	call   c000f8b4 <malloc>
c001c3d0:	83 c4 0c             	add    esp,0xc
c001c3d3:	89 c3                	mov    ebx,eax
c001c3d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3da:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3dd:	56                   	push   esi
c001c3de:	53                   	push   ebx
c001c3df:	e8 da 6f ff ff       	call   c00133be <File::File(char const*, Process*)>
c001c3e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3e7:	e8 ae 71 ff ff       	call   c001359a <File::unlink()>
c001c3ec:	83 c4 10             	add    esp,0x10
c001c3ef:	85 db                	test   ebx,ebx
c001c3f1:	74 14                	je     c001c407 <sysCallUnlink(regs*)+0x4d>
c001c3f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c3f7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c3f9:	83 ec 0c             	sub    esp,0xc
c001c3fc:	53                   	push   ebx
c001c3fd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c400:	83 c4 10             	add    esp,0x10
c001c403:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c407:	85 c0                	test   eax,eax
c001c409:	0f 95 c0             	setne  al
c001c40c:	31 d2                	xor    edx,edx
c001c40e:	0f b6 c0             	movzx  eax,al
c001c411:	f7 d8                	neg    eax
c001c413:	83 d2 00             	adc    edx,0x0
c001c416:	83 c4 14             	add    esp,0x14
c001c419:	f7 da                	neg    edx
c001c41b:	5b                   	pop    ebx
c001c41c:	5e                   	pop    esi
c001c41d:	c3                   	ret    

c001c41e <sysCallGetArgv(regs*)>:
c001c41e:	83 ec 0c             	sub    esp,0xc
c001c421:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c425:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c428:	85 c0                	test   eax,eax
c001c42a:	78 2b                	js     c001c457 <sysCallGetArgv(regs*)+0x39>
c001c42c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c432:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c435:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c43b:	7d 1a                	jge    c001c457 <sysCallGetArgv(regs*)+0x39>
c001c43d:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c444:	85 c0                	test   eax,eax
c001c446:	74 17                	je     c001c45f <sysCallGetArgv(regs*)+0x41>
c001c448:	83 ec 08             	sub    esp,0x8
c001c44b:	50                   	push   eax
c001c44c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c44f:	e8 e0 43 fe ff       	call   c0000834 <strcpy>
c001c454:	83 c4 10             	add    esp,0x10
c001c457:	31 c0                	xor    eax,eax
c001c459:	31 d2                	xor    edx,edx
c001c45b:	83 c4 0c             	add    esp,0xc
c001c45e:	c3                   	ret    
c001c45f:	b8 01 00 00 00       	mov    eax,0x1
c001c464:	31 d2                	xor    edx,edx
c001c466:	83 c4 0c             	add    esp,0xc
c001c469:	c3                   	ret    

c001c46a <sysCallTTYName(regs*)>:
c001c46a:	56                   	push   esi
c001c46b:	53                   	push   ebx
c001c46c:	53                   	push   ebx
c001c46d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c471:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c474:	85 c0                	test   eax,eax
c001c476:	74 5f                	je     c001c4d7 <sysCallTTYName(regs*)+0x6d>
c001c478:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c47b:	83 f8 02             	cmp    eax,0x2
c001c47e:	77 3e                	ja     c001c4be <sysCallTTYName(regs*)+0x54>
c001c480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c485:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c488:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c48e:	85 db                	test   ebx,ebx
c001c490:	74 45                	je     c001c4d7 <sysCallTTYName(regs*)+0x6d>
c001c492:	83 ec 0c             	sub    esp,0xc
c001c495:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c497:	53                   	push   ebx
c001c498:	ff 10                	call   DWORD PTR [eax]
c001c49a:	83 c4 10             	add    esp,0x10
c001c49d:	84 c0                	test   al,al
c001c49f:	74 41                	je     c001c4e2 <sysCallTTYName(regs*)+0x78>
c001c4a1:	83 ec 08             	sub    esp,0x8
c001c4a4:	81 c3 82 00 00 00    	add    ebx,0x82
c001c4aa:	53                   	push   ebx
c001c4ab:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c4ae:	e8 81 43 fe ff       	call   c0000834 <strcpy>
c001c4b3:	83 c4 10             	add    esp,0x10
c001c4b6:	31 c0                	xor    eax,eax
c001c4b8:	59                   	pop    ecx
c001c4b9:	31 d2                	xor    edx,edx
c001c4bb:	5b                   	pop    ebx
c001c4bc:	5e                   	pop    esi
c001c4bd:	c3                   	ret    
c001c4be:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c4c3:	74 bb                	je     c001c480 <sysCallTTYName(regs*)+0x16>
c001c4c5:	83 ec 0c             	sub    esp,0xc
c001c4c8:	50                   	push   eax
c001c4c9:	e8 35 54 ff ff       	call   c0011903 <getFromFileDescriptor(int)>
c001c4ce:	83 c4 10             	add    esp,0x10
c001c4d1:	89 c3                	mov    ebx,eax
c001c4d3:	85 db                	test   ebx,ebx
c001c4d5:	75 bb                	jne    c001c492 <sysCallTTYName(regs*)+0x28>
c001c4d7:	59                   	pop    ecx
c001c4d8:	b8 01 00 00 00       	mov    eax,0x1
c001c4dd:	31 d2                	xor    edx,edx
c001c4df:	5b                   	pop    ebx
c001c4e0:	5e                   	pop    esi
c001c4e1:	c3                   	ret    
c001c4e2:	59                   	pop    ecx
c001c4e3:	b8 02 00 00 00       	mov    eax,0x2
c001c4e8:	31 d2                	xor    edx,edx
c001c4ea:	5b                   	pop    ebx
c001c4eb:	5e                   	pop    esi
c001c4ec:	c3                   	ret    

c001c4ed <sysCallUSleep(regs*)>:
c001c4ed:	83 ec 14             	sub    esp,0x14
c001c4f0:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c4f5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c4f9:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c500:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c503:	01 ca                	add    edx,ecx
c001c505:	52                   	push   edx
c001c506:	50                   	push   eax
c001c507:	e8 a3 24 00 00       	call   c001e9af <nanoSleep(unsigned long long)>
c001c50c:	31 c0                	xor    eax,eax
c001c50e:	31 d2                	xor    edx,edx
c001c510:	83 c4 1c             	add    esp,0x1c
c001c513:	c3                   	ret    

c001c514 <sysCallSpawn(regs*)>:
c001c514:	56                   	push   esi
c001c515:	53                   	push   ebx
c001c516:	50                   	push   eax
c001c517:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c51b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c51e:	85 c0                	test   eax,eax
c001c520:	75 08                	jne    c001c52a <sysCallSpawn(regs*)+0x16>
c001c522:	59                   	pop    ecx
c001c523:	31 c0                	xor    eax,eax
c001c525:	31 d2                	xor    edx,edx
c001c527:	5b                   	pop    ebx
c001c528:	5e                   	pop    esi
c001c529:	c3                   	ret    
c001c52a:	83 ec 08             	sub    esp,0x8
c001c52d:	50                   	push   eax
c001c52e:	68 c7 cc 02 c0       	push   0xc002ccc7
c001c533:	e8 27 69 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c538:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c53f:	e8 70 33 ff ff       	call   c000f8b4 <malloc>
c001c544:	83 c4 10             	add    esp,0x10
c001c547:	89 c6                	mov    esi,eax
c001c549:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c54c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c54f:	85 c0                	test   eax,eax
c001c551:	75 32                	jne    c001c585 <sysCallSpawn(regs*)+0x71>
c001c553:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c558:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c55b:	52                   	push   edx
c001c55c:	50                   	push   eax
c001c55d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c560:	56                   	push   esi
c001c561:	e8 26 1b 00 00       	call   c001e08c <Process::Process(char const*, Process*, char**)>
c001c566:	83 c4 10             	add    esp,0x10
c001c569:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c570:	75 b0                	jne    c001c522 <sysCallSpawn(regs*)+0xe>
c001c572:	83 ec 0c             	sub    esp,0xc
c001c575:	56                   	push   esi
c001c576:	e8 f3 1f 00 00       	call   c001e56e <Process::createUserThread()>
c001c57b:	8b 06                	mov    eax,DWORD PTR [esi]
c001c57d:	83 c4 10             	add    esp,0x10
c001c580:	99                   	cdq    
c001c581:	59                   	pop    ecx
c001c582:	5b                   	pop    ebx
c001c583:	5e                   	pop    esi
c001c584:	c3                   	ret    
c001c585:	31 c0                	xor    eax,eax
c001c587:	eb d2                	jmp    c001c55b <sysCallSpawn(regs*)+0x47>

c001c589 <sysCallGetEnv(regs*)>:
c001c589:	55                   	push   ebp
c001c58a:	57                   	push   edi
c001c58b:	56                   	push   esi
c001c58c:	53                   	push   ebx
c001c58d:	83 ec 28             	sub    esp,0x28
c001c590:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c594:	68 d5 cc 02 c0       	push   0xc002ccd5
c001c599:	e8 c1 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c59e:	5f                   	pop    edi
c001c59f:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c5a2:	5d                   	pop    ebp
c001c5a3:	53                   	push   ebx
c001c5a4:	68 02 d0 02 c0       	push   0xc002d002
c001c5a9:	e8 b1 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c5ae:	58                   	pop    eax
c001c5af:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c5b2:	5a                   	pop    edx
c001c5b3:	57                   	push   edi
c001c5b4:	68 de cc 02 c0       	push   0xc002ccde
c001c5b9:	e8 a1 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c5be:	59                   	pop    ecx
c001c5bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5c4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5c7:	e8 49 e2 ff ff       	call   c001a815 <Krnl::getProcessTotalEnvCount(Process*)>
c001c5cc:	5a                   	pop    edx
c001c5cd:	89 c5                	mov    ebp,eax
c001c5cf:	59                   	pop    ecx
c001c5d0:	50                   	push   eax
c001c5d1:	68 e8 cc 02 c0       	push   0xc002cce8
c001c5d6:	e8 84 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c5db:	83 c4 10             	add    esp,0x10
c001c5de:	39 ef                	cmp    edi,ebp
c001c5e0:	7c 15                	jl     c001c5f7 <sysCallGetEnv(regs*)+0x6e>
c001c5e2:	85 db                	test   ebx,ebx
c001c5e4:	75 0c                	jne    c001c5f2 <sysCallGetEnv(regs*)+0x69>
c001c5e6:	83 c4 1c             	add    esp,0x1c
c001c5e9:	31 c0                	xor    eax,eax
c001c5eb:	5b                   	pop    ebx
c001c5ec:	31 d2                	xor    edx,edx
c001c5ee:	5e                   	pop    esi
c001c5ef:	5f                   	pop    edi
c001c5f0:	5d                   	pop    ebp
c001c5f1:	c3                   	ret    
c001c5f2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c5f5:	eb ef                	jmp    c001c5e6 <sysCallGetEnv(regs*)+0x5d>
c001c5f7:	83 ec 0c             	sub    esp,0xc
c001c5fa:	68 f4 cc 02 c0       	push   0xc002ccf4
c001c5ff:	e8 5b 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c604:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c608:	83 c4 0c             	add    esp,0xc
c001c60b:	57                   	push   edi
c001c60c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c612:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c615:	50                   	push   eax
c001c616:	e8 1a e2 ff ff       	call   c001a835 <Krnl::getProcessEnvPair(Process*, int)>
c001c61b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c61f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c623:	68 b3 d0 02 c0       	push   0xc002d0b3
c001c628:	e8 32 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c62d:	83 c4 10             	add    esp,0x10
c001c630:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c633:	85 f6                	test   esi,esi
c001c635:	75 47                	jne    c001c67e <sysCallGetEnv(regs*)+0xf5>
c001c637:	83 ec 0c             	sub    esp,0xc
c001c63a:	55                   	push   ebp
c001c63b:	e8 54 41 fe ff       	call   c0000794 <strlen>
c001c640:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c643:	89 c3                	mov    ebx,eax
c001c645:	e8 4a 41 fe ff       	call   c0000794 <strlen>
c001c64a:	5a                   	pop    edx
c001c64b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c64f:	59                   	pop    ecx
c001c650:	50                   	push   eax
c001c651:	68 f7 cc 02 c0       	push   0xc002ccf7
c001c656:	e8 04 68 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c65b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c65e:	e8 31 41 fe ff       	call   c0000794 <strlen>
c001c663:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c666:	89 c3                	mov    ebx,eax
c001c668:	e8 27 41 fe ff       	call   c0000794 <strlen>
c001c66d:	83 c4 10             	add    esp,0x10
c001c670:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c674:	83 c4 1c             	add    esp,0x1c
c001c677:	31 d2                	xor    edx,edx
c001c679:	5b                   	pop    ebx
c001c67a:	5e                   	pop    esi
c001c67b:	5f                   	pop    edi
c001c67c:	5d                   	pop    ebp
c001c67d:	c3                   	ret    
c001c67e:	83 ec 0c             	sub    esp,0xc
c001c681:	68 cd d0 02 c0       	push   0xc002d0cd
c001c686:	e8 d4 67 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c68b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c68e:	58                   	pop    eax
c001c68f:	5a                   	pop    edx
c001c690:	55                   	push   ebp
c001c691:	53                   	push   ebx
c001c692:	e8 9d 41 fe ff       	call   c0000834 <strcpy>
c001c697:	59                   	pop    ecx
c001c698:	5e                   	pop    esi
c001c699:	68 01 cd 02 c0       	push   0xc002cd01
c001c69e:	53                   	push   ebx
c001c69f:	e8 d0 42 fe ff       	call   c0000974 <strcat>
c001c6a4:	5d                   	pop    ebp
c001c6a5:	58                   	pop    eax
c001c6a6:	57                   	push   edi
c001c6a7:	53                   	push   ebx
c001c6a8:	e8 c7 42 fe ff       	call   c0000974 <strcat>
c001c6ad:	c7 04 24 e7 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0e7
c001c6b4:	e8 a6 67 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	e9 25 ff ff ff       	jmp    c001c5e6 <sysCallGetEnv(regs*)+0x5d>

c001c6c1 <sysAppSettings(regs*)>:
c001c6c1:	57                   	push   edi
c001c6c2:	56                   	push   esi
c001c6c3:	56                   	push   esi
c001c6c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6c8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c6cb:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c6d1:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c6d6:	66 3d c0 09          	cmp    ax,0x9c0
c001c6da:	75 2e                	jne    c001c70a <sysAppSettings(regs*)+0x49>
c001c6dc:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c6e2:	83 e0 1f             	and    eax,0x1f
c001c6e5:	3c 01                	cmp    al,0x1
c001c6e7:	74 2c                	je     c001c715 <sysAppSettings(regs*)+0x54>
c001c6e9:	3c 07                	cmp    al,0x7
c001c6eb:	0f 84 b3 00 00 00    	je     c001c7a4 <sysAppSettings(regs*)+0xe3>
c001c6f1:	84 c0                	test   al,al
c001c6f3:	0f 84 d2 00 00 00    	je     c001c7cb <sysAppSettings(regs*)+0x10a>
c001c6f9:	3c 08                	cmp    al,0x8
c001c6fb:	74 63                	je     c001c760 <sysAppSettings(regs*)+0x9f>
c001c6fd:	59                   	pop    ecx
c001c6fe:	0f b6 c0             	movzx  eax,al
c001c701:	5e                   	pop    esi
c001c702:	05 e8 03 00 00       	add    eax,0x3e8
c001c707:	5f                   	pop    edi
c001c708:	99                   	cdq    
c001c709:	c3                   	ret    
c001c70a:	b8 01 00 00 00       	mov    eax,0x1
c001c70f:	59                   	pop    ecx
c001c710:	31 d2                	xor    edx,edx
c001c712:	5e                   	pop    esi
c001c713:	5f                   	pop    edi
c001c714:	c3                   	ret    
c001c715:	50                   	push   eax
c001c716:	68 00 01 00 00       	push   0x100
c001c71b:	6a 00                	push   0x0
c001c71d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c722:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c725:	83 c0 0c             	add    eax,0xc
c001c728:	50                   	push   eax
c001c729:	e8 4a 40 fe ff       	call   c0000778 <memset>
c001c72e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c733:	b9 ff 00 00 00       	mov    ecx,0xff
c001c738:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c73b:	83 c7 0c             	add    edi,0xc
c001c73e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c745:	5a                   	pop    edx
c001c746:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c749:	59                   	pop    ecx
c001c74a:	8d 50 0c             	lea    edx,[eax+0xc]
c001c74d:	52                   	push   edx
c001c74e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c754:	e8 d5 43 ff ff       	call   c0010b2e <VgaText::setTitle(char*)>
c001c759:	83 c4 10             	add    esp,0x10
c001c75c:	31 c0                	xor    eax,eax
c001c75e:	eb af                	jmp    c001c70f <sysAppSettings(regs*)+0x4e>
c001c760:	83 ec 08             	sub    esp,0x8
c001c763:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c769:	83 e0 0f             	and    eax,0xf
c001c76c:	50                   	push   eax
c001c76d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c772:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c77b:	e8 a0 43 ff ff       	call   c0010b20 <VgaText::setTitleColour(VgaColour)>
c001c780:	5f                   	pop    edi
c001c781:	58                   	pop    eax
c001c782:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c788:	c1 e8 04             	shr    eax,0x4
c001c78b:	83 e0 0f             	and    eax,0xf
c001c78e:	50                   	push   eax
c001c78f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c794:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c797:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c79d:	e8 70 43 ff ff       	call   c0010b12 <VgaText::setTitleTextColour(VgaColour)>
c001c7a2:	eb b5                	jmp    c001c759 <sysAppSettings(regs*)+0x98>
c001c7a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c7ac:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c7b2:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c7b8:	c0 e8 06             	shr    al,0x6
c001c7bb:	83 e0 01             	and    eax,0x1
c001c7be:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c7c4:	31 c0                	xor    eax,eax
c001c7c6:	e9 44 ff ff ff       	jmp    c001c70f <sysAppSettings(regs*)+0x4e>
c001c7cb:	b8 02 00 00 00       	mov    eax,0x2
c001c7d0:	e9 3a ff ff ff       	jmp    c001c70f <sysAppSettings(regs*)+0x4e>

c001c7d5 <sysSetFatAttrib(regs*)>:
c001c7d5:	57                   	push   edi
c001c7d6:	56                   	push   esi
c001c7d7:	53                   	push   ebx
c001c7d8:	83 ec 1c             	sub    esp,0x1c
c001c7db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c7df:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c7e2:	68 14 01 00 00       	push   0x114
c001c7e7:	e8 c8 30 ff ff       	call   c000f8b4 <malloc>
c001c7ec:	83 c4 0c             	add    esp,0xc
c001c7ef:	89 c3                	mov    ebx,eax
c001c7f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c7f6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c7f9:	57                   	push   edi
c001c7fa:	53                   	push   ebx
c001c7fb:	e8 be 6b ff ff       	call   c00133be <File::File(char const*, Process*)>
c001c800:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c803:	83 c4 0c             	add    esp,0xc
c001c806:	0f b6 d4             	movzx  edx,ah
c001c809:	0f b6 c0             	movzx  eax,al
c001c80c:	52                   	push   edx
c001c80d:	50                   	push   eax
c001c80e:	53                   	push   ebx
c001c80f:	e8 20 6e ff ff       	call   c0013634 <File::chfatattr(unsigned char, unsigned char)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	85 db                	test   ebx,ebx
c001c819:	74 14                	je     c001c82f <sysSetFatAttrib(regs*)+0x5a>
c001c81b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c81f:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c821:	83 ec 0c             	sub    esp,0xc
c001c824:	53                   	push   ebx
c001c825:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c828:	83 c4 10             	add    esp,0x10
c001c82b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c82f:	85 c0                	test   eax,eax
c001c831:	0f 95 c0             	setne  al
c001c834:	31 d2                	xor    edx,edx
c001c836:	0f b6 c0             	movzx  eax,al
c001c839:	f7 d8                	neg    eax
c001c83b:	83 d2 00             	adc    edx,0x0
c001c83e:	83 c4 10             	add    esp,0x10
c001c841:	f7 da                	neg    edx
c001c843:	5b                   	pop    ebx
c001c844:	5e                   	pop    esi
c001c845:	5f                   	pop    edi
c001c846:	c3                   	ret    

c001c847 <sysPipe(regs*)>:
c001c847:	57                   	push   edi
c001c848:	56                   	push   esi
c001c849:	53                   	push   ebx
c001c84a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c84e:	83 ec 0c             	sub    esp,0xc
c001c851:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c854:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c857:	6a 20                	push   0x20
c001c859:	e8 56 30 ff ff       	call   c000f8b4 <malloc>
c001c85e:	89 c3                	mov    ebx,eax
c001c860:	58                   	pop    eax
c001c861:	5a                   	pop    edx
c001c862:	68 00 50 00 00       	push   0x5000
c001c867:	53                   	push   ebx
c001c868:	e8 69 3c ff ff       	call   c00104d6 <Pipe::Pipe(int)>
c001c86d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c870:	e8 99 4d ff ff       	call   c001160e <UnixFile::getFileDescriptor()>
c001c875:	89 07                	mov    DWORD PTR [edi],eax
c001c877:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c87a:	e8 8f 4d ff ff       	call   c001160e <UnixFile::getFileDescriptor()>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	89 06                	mov    DWORD PTR [esi],eax
c001c884:	31 d2                	xor    edx,edx
c001c886:	5b                   	pop    ebx
c001c887:	31 c0                	xor    eax,eax
c001c889:	5e                   	pop    esi
c001c88a:	5f                   	pop    edi
c001c88b:	c3                   	ret    

c001c88c <sysGetUnixTime(regs*)>:
c001c88c:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001c891:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c897:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c89b:	e9 10 75 ff ff       	jmp    c0013db0 <Clock::timeInSecondsLocal()>

c001c8a0 <string_ends_with(char const*, char const*)>:
c001c8a0:	57                   	push   edi
c001c8a1:	56                   	push   esi
c001c8a2:	53                   	push   ebx
c001c8a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c8a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c8ab:	83 ec 0c             	sub    esp,0xc
c001c8ae:	53                   	push   ebx
c001c8af:	e8 e0 3e fe ff       	call   c0000794 <strlen>
c001c8b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c8b7:	89 c6                	mov    esi,eax
c001c8b9:	e8 d6 3e fe ff       	call   c0000794 <strlen>
c001c8be:	83 c4 10             	add    esp,0x10
c001c8c1:	39 c6                	cmp    esi,eax
c001c8c3:	7d 06                	jge    c001c8cb <string_ends_with(char const*, char const*)+0x2b>
c001c8c5:	5b                   	pop    ebx
c001c8c6:	31 c0                	xor    eax,eax
c001c8c8:	5e                   	pop    esi
c001c8c9:	5f                   	pop    edi
c001c8ca:	c3                   	ret    
c001c8cb:	83 ec 08             	sub    esp,0x8
c001c8ce:	29 c6                	sub    esi,eax
c001c8d0:	57                   	push   edi
c001c8d1:	01 f3                	add    ebx,esi
c001c8d3:	53                   	push   ebx
c001c8d4:	e8 e7 3f fe ff       	call   c00008c0 <strcmp>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	85 c0                	test   eax,eax
c001c8de:	5b                   	pop    ebx
c001c8df:	0f 94 c0             	sete   al
c001c8e2:	5e                   	pop    esi
c001c8e3:	0f b6 c0             	movzx  eax,al
c001c8e6:	5f                   	pop    edi
c001c8e7:	c3                   	ret    

c001c8e8 <sysCallOpen(regs*)>:
c001c8e8:	56                   	push   esi
c001c8e9:	53                   	push   ebx
c001c8ea:	81 ec 04 01 00 00    	sub    esp,0x104
c001c8f0:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c8f7:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c8fa:	85 c9                	test   ecx,ecx
c001c8fc:	0f 84 b3 00 00 00    	je     c001c9b5 <sysCallOpen(regs*)+0xcd>
c001c902:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c905:	85 c0                	test   eax,eax
c001c907:	0f 84 a8 00 00 00    	je     c001c9b5 <sysCallOpen(regs*)+0xcd>
c001c90d:	52                   	push   edx
c001c90e:	68 03 cd 02 c0       	push   0xc002cd03
c001c913:	50                   	push   eax
c001c914:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c918:	56                   	push   esi
c001c919:	e8 f6 68 ff ff       	call   c0013214 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c91e:	89 34 24             	mov    DWORD PTR [esp],esi
c001c921:	e8 6e 3e fe ff       	call   c0000794 <strlen>
c001c926:	83 c4 10             	add    esp,0x10
c001c929:	48                   	dec    eax
c001c92a:	74 1d                	je     c001c949 <sysCallOpen(regs*)+0x61>
c001c92c:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c92f:	eb 0f                	jmp    c001c940 <sysCallOpen(regs*)+0x58>
c001c931:	80 fa 3a             	cmp    dl,0x3a
c001c934:	74 0f                	je     c001c945 <sysCallOpen(regs*)+0x5d>
c001c936:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c93a:	48                   	dec    eax
c001c93b:	74 0c                	je     c001c949 <sysCallOpen(regs*)+0x61>
c001c93d:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c940:	80 fa 2e             	cmp    dl,0x2e
c001c943:	75 ec                	jne    c001c931 <sysCallOpen(regs*)+0x49>
c001c945:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c949:	83 ec 08             	sub    esp,0x8
c001c94c:	68 07 cd 02 c0       	push   0xc002cd07
c001c951:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c954:	e8 47 ff ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001c959:	83 c4 10             	add    esp,0x10
c001c95c:	85 c0                	test   eax,eax
c001c95e:	75 17                	jne    c001c977 <sysCallOpen(regs*)+0x8f>
c001c960:	83 ec 08             	sub    esp,0x8
c001c963:	68 28 cd 02 c0       	push   0xc002cd28
c001c968:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c96b:	e8 30 ff ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001c970:	83 c4 10             	add    esp,0x10
c001c973:	85 c0                	test   eax,eax
c001c975:	74 51                	je     c001c9c8 <sysCallOpen(regs*)+0xe0>
c001c977:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c97a:	83 ec 08             	sub    esp,0x8
c001c97d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c983:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c98a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c98d:	ff 30                	push   DWORD PTR [eax]
c001c98f:	68 0c cd 02 c0       	push   0xc002cd0c
c001c994:	e8 c6 64 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c999:	c7 04 24 1b cd 02 c0 	mov    DWORD PTR [esp],0xc002cd1b
c001c9a0:	e8 ba 64 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001c9a5:	83 c4 10             	add    esp,0x10
c001c9a8:	81 c4 04 01 00 00    	add    esp,0x104
c001c9ae:	31 c0                	xor    eax,eax
c001c9b0:	31 d2                	xor    edx,edx
c001c9b2:	5b                   	pop    ebx
c001c9b3:	5e                   	pop    esi
c001c9b4:	c3                   	ret    
c001c9b5:	81 c4 04 01 00 00    	add    esp,0x104
c001c9bb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c9c0:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c9c5:	5b                   	pop    ebx
c001c9c6:	5e                   	pop    esi
c001c9c7:	c3                   	ret    
c001c9c8:	83 ec 08             	sub    esp,0x8
c001c9cb:	68 08 cd 02 c0       	push   0xc002cd08
c001c9d0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9d3:	e8 e8 3e fe ff       	call   c00008c0 <strcmp>
c001c9d8:	83 c4 10             	add    esp,0x10
c001c9db:	85 c0                	test   eax,eax
c001c9dd:	74 98                	je     c001c977 <sysCallOpen(regs*)+0x8f>
c001c9df:	83 ec 08             	sub    esp,0x8
c001c9e2:	68 07 cd 02 c0       	push   0xc002cd07
c001c9e7:	56                   	push   esi
c001c9e8:	e8 b3 fe ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001c9ed:	83 c4 10             	add    esp,0x10
c001c9f0:	85 c0                	test   eax,eax
c001c9f2:	75 83                	jne    c001c977 <sysCallOpen(regs*)+0x8f>
c001c9f4:	83 ec 08             	sub    esp,0x8
c001c9f7:	68 2d cd 02 c0       	push   0xc002cd2d
c001c9fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c9ff:	e8 9c fe ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	85 c0                	test   eax,eax
c001ca09:	0f 85 d9 00 00 00    	jne    c001cae8 <sysCallOpen(regs*)+0x200>
c001ca0f:	83 ec 08             	sub    esp,0x8
c001ca12:	68 32 cd 02 c0       	push   0xc002cd32
c001ca17:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca1a:	e8 81 fe ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001ca1f:	83 c4 10             	add    esp,0x10
c001ca22:	85 c0                	test   eax,eax
c001ca24:	0f 85 be 00 00 00    	jne    c001cae8 <sysCallOpen(regs*)+0x200>
c001ca2a:	83 ec 08             	sub    esp,0x8
c001ca2d:	68 2e cd 02 c0       	push   0xc002cd2e
c001ca32:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca35:	e8 86 3e fe ff       	call   c00008c0 <strcmp>
c001ca3a:	83 c4 10             	add    esp,0x10
c001ca3d:	85 c0                	test   eax,eax
c001ca3f:	0f 84 a3 00 00 00    	je     c001cae8 <sysCallOpen(regs*)+0x200>
c001ca45:	83 ec 08             	sub    esp,0x8
c001ca48:	68 2d cd 02 c0       	push   0xc002cd2d
c001ca4d:	56                   	push   esi
c001ca4e:	e8 4d fe ff ff       	call   c001c8a0 <string_ends_with(char const*, char const*)>
c001ca53:	83 c4 10             	add    esp,0x10
c001ca56:	85 c0                	test   eax,eax
c001ca58:	0f 85 8a 00 00 00    	jne    c001cae8 <sysCallOpen(regs*)+0x200>
c001ca5e:	83 ec 0c             	sub    esp,0xc
c001ca61:	68 14 01 00 00       	push   0x114
c001ca66:	e8 49 2e ff ff       	call   c000f8b4 <malloc>
c001ca6b:	83 c4 0c             	add    esp,0xc
c001ca6e:	89 c6                	mov    esi,eax
c001ca70:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca75:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ca78:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001ca7b:	56                   	push   esi
c001ca7c:	e8 3d 69 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001ca81:	83 c4 10             	add    esp,0x10
c001ca84:	85 f6                	test   esi,esi
c001ca86:	0f 84 29 ff ff ff    	je     c001c9b5 <sysCallOpen(regs*)+0xcd>
c001ca8c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001ca8f:	0f b6 c2             	movzx  eax,dl
c001ca92:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001ca95:	89 d0                	mov    eax,edx
c001ca97:	83 e0 01             	and    eax,0x1
c001ca9a:	f6 c2 02             	test   dl,0x2
c001ca9d:	74 03                	je     c001caa2 <sysCallOpen(regs*)+0x1ba>
c001ca9f:	83 c8 02             	or     eax,0x2
c001caa2:	f6 c2 04             	test   dl,0x4
c001caa5:	74 03                	je     c001caaa <sysCallOpen(regs*)+0x1c2>
c001caa7:	83 c8 04             	or     eax,0x4
c001caaa:	f6 c2 08             	test   dl,0x8
c001caad:	74 03                	je     c001cab2 <sysCallOpen(regs*)+0x1ca>
c001caaf:	83 c8 0a             	or     eax,0xa
c001cab2:	83 e2 10             	and    edx,0x10
c001cab5:	74 03                	je     c001caba <sysCallOpen(regs*)+0x1d2>
c001cab7:	83 c8 12             	or     eax,0x12
c001caba:	83 ec 08             	sub    esp,0x8
c001cabd:	50                   	push   eax
c001cabe:	56                   	push   esi
c001cabf:	e8 5e 69 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	85 c0                	test   eax,eax
c001cac9:	0f 85 e6 fe ff ff    	jne    c001c9b5 <sysCallOpen(regs*)+0xcd>
c001cacf:	83 ec 0c             	sub    esp,0xc
c001cad2:	56                   	push   esi
c001cad3:	e8 36 4b ff ff       	call   c001160e <UnixFile::getFileDescriptor()>
c001cad8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001cadb:	89 02                	mov    DWORD PTR [edx],eax
c001cadd:	c1 f8 1f             	sar    eax,0x1f
c001cae0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cae3:	e9 bd fe ff ff       	jmp    c001c9a5 <sysCallOpen(regs*)+0xbd>
c001cae8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001caeb:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001caf1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001caf8:	e9 ab fe ff ff       	jmp    c001c9a8 <sysCallOpen(regs*)+0xc0>

c001cafd <Sys::loadSyscalls()>:
c001cafd:	c7 05 40 1e 03 c0 ed bb 01 c0 	mov    DWORD PTR ds:0xc0031e40,0xc001bbed
c001cb07:	c7 05 44 1e 03 c0 52 b7 01 c0 	mov    DWORD PTR ds:0xc0031e44,0xc001b752
c001cb11:	c7 05 48 1e 03 c0 40 b9 01 c0 	mov    DWORD PTR ds:0xc0031e48,0xc001b940
c001cb1b:	c7 05 4c 1e 03 c0 23 bb 01 c0 	mov    DWORD PTR ds:0xc0031e4c,0xc001bb23
c001cb25:	c7 05 50 1e 03 c0 d8 b8 01 c0 	mov    DWORD PTR ds:0xc0031e50,0xc001b8d8
c001cb2f:	c7 05 54 1e 03 c0 89 b7 01 c0 	mov    DWORD PTR ds:0xc0031e54,0xc001b789
c001cb39:	c7 05 58 1e 03 c0 6a b7 01 c0 	mov    DWORD PTR ds:0xc0031e58,0xc001b76a
c001cb43:	c7 05 5c 1e 03 c0 95 b9 01 c0 	mov    DWORD PTR ds:0xc0031e5c,0xc001b995
c001cb4d:	c7 05 64 1e 03 c0 28 c1 01 c0 	mov    DWORD PTR ds:0xc0031e64,0xc001c128
c001cb57:	c7 05 60 1e 03 c0 e8 c8 01 c0 	mov    DWORD PTR ds:0xc0031e60,0xc001c8e8
c001cb61:	c7 05 68 1e 03 c0 b0 c1 01 c0 	mov    DWORD PTR ds:0xc0031e68,0xc001c1b0
c001cb6b:	c7 05 6c 1e 03 c0 17 be 01 c0 	mov    DWORD PTR ds:0xc0031e6c,0xc001be17
c001cb75:	c7 05 70 1e 03 c0 33 bc 01 c0 	mov    DWORD PTR ds:0xc0031e70,0xc001bc33
c001cb7f:	c7 05 74 1e 03 c0 38 bc 01 c0 	mov    DWORD PTR ds:0xc0031e74,0xc001bc38
c001cb89:	c7 05 78 1e 03 c0 8b c2 01 c0 	mov    DWORD PTR ds:0xc0031e78,0xc001c28b
c001cb93:	c7 05 7c 1e 03 c0 25 c2 01 c0 	mov    DWORD PTR ds:0xc0031e7c,0xc001c225
c001cb9d:	c7 05 80 1e 03 c0 ff be 01 c0 	mov    DWORD PTR ds:0xc0031e80,0xc001beff
c001cba7:	c7 05 84 1e 03 c0 68 bf 01 c0 	mov    DWORD PTR ds:0xc0031e84,0xc001bf68
c001cbb1:	c7 05 88 1e 03 c0 e5 bf 01 c0 	mov    DWORD PTR ds:0xc0031e88,0xc001bfe5
c001cbbb:	c7 05 8c 1e 03 c0 3d bc 01 c0 	mov    DWORD PTR ds:0xc0031e8c,0xc001bc3d
c001cbc5:	c7 05 90 1e 03 c0 fb c2 01 c0 	mov    DWORD PTR ds:0xc0031e90,0xc001c2fb
c001cbcf:	c7 05 94 1e 03 c0 15 c3 01 c0 	mov    DWORD PTR ds:0xc0031e94,0xc001c315
c001cbd9:	c7 05 98 1e 03 c0 15 c3 01 c0 	mov    DWORD PTR ds:0xc0031e98,0xc001c315
c001cbe3:	c7 05 9c 1e 03 c0 56 c3 01 c0 	mov    DWORD PTR ds:0xc0031e9c,0xc001c356
c001cbed:	c7 05 a0 1e 03 c0 ba c3 01 c0 	mov    DWORD PTR ds:0xc0031ea0,0xc001c3ba
c001cbf7:	c7 05 a4 1e 03 c0 e9 bd 01 c0 	mov    DWORD PTR ds:0xc0031ea4,0xc001bde9
c001cc01:	c7 05 a8 1e 03 c0 1e c4 01 c0 	mov    DWORD PTR ds:0xc0031ea8,0xc001c41e
c001cc0b:	c7 05 ac 1e 03 c0 a6 bd 01 c0 	mov    DWORD PTR ds:0xc0031eac,0xc001bda6
c001cc15:	c7 05 b0 1e 03 c0 6a c4 01 c0 	mov    DWORD PTR ds:0xc0031eb0,0xc001c46a
c001cc1f:	c7 05 b4 1e 03 c0 a5 be 01 c0 	mov    DWORD PTR ds:0xc0031eb4,0xc001bea5
c001cc29:	c7 05 b8 1e 03 c0 ed c4 01 c0 	mov    DWORD PTR ds:0xc0031eb8,0xc001c4ed
c001cc33:	c7 05 bc 1e 03 c0 68 c0 01 c0 	mov    DWORD PTR ds:0xc0031ebc,0xc001c068
c001cc3d:	c7 05 c0 1e 03 c0 14 c5 01 c0 	mov    DWORD PTR ds:0xc0031ec0,0xc001c514
c001cc47:	c7 05 c4 1e 03 c0 89 c5 01 c0 	mov    DWORD PTR ds:0xc0031ec4,0xc001c589
c001cc51:	c7 05 c8 1e 03 c0 c1 c6 01 c0 	mov    DWORD PTR ds:0xc0031ec8,0xc001c6c1
c001cc5b:	c7 05 cc 1e 03 c0 47 bc 01 c0 	mov    DWORD PTR ds:0xc0031ecc,0xc001bc47
c001cc65:	c7 05 d0 1e 03 c0 b1 bc 01 c0 	mov    DWORD PTR ds:0xc0031ed0,0xc001bcb1
c001cc6f:	c7 05 d4 1e 03 c0 f7 bc 01 c0 	mov    DWORD PTR ds:0xc0031ed4,0xc001bcf7
c001cc79:	c7 05 d8 1e 03 c0 d5 c7 01 c0 	mov    DWORD PTR ds:0xc0031ed8,0xc001c7d5
c001cc83:	c7 05 dc 1e 03 c0 30 c3 01 c0 	mov    DWORD PTR ds:0xc0031edc,0xc001c330
c001cc8d:	c7 05 e0 1e 03 c0 48 bd 01 c0 	mov    DWORD PTR ds:0xc0031ee0,0xc001bd48
c001cc97:	c7 05 e4 1e 03 c0 47 c8 01 c0 	mov    DWORD PTR ds:0xc0031ee4,0xc001c847
c001cca1:	c7 05 e8 1e 03 c0 8c c8 01 c0 	mov    DWORD PTR ds:0xc0031ee8,0xc001c88c
c001ccab:	c7 05 ec 1e 03 c0 30 b8 01 c0 	mov    DWORD PTR ds:0xc0031eec,0xc001b830
c001ccb5:	c7 05 f0 1e 03 c0 b1 b9 01 c0 	mov    DWORD PTR ds:0xc0031ef0,0xc001b9b1
c001ccbf:	c7 05 f4 1e 03 c0 d9 ba 01 c0 	mov    DWORD PTR ds:0xc0031ef4,0xc001bad9
c001ccc9:	c7 05 f8 1e 03 c0 1c b7 01 c0 	mov    DWORD PTR ds:0xc0031ef8,0xc001b71c
c001ccd3:	c7 05 fc 1e 03 c0 8b bb 01 c0 	mov    DWORD PTR ds:0xc0031efc,0xc001bb8b
c001ccdd:	c7 05 00 1f 03 c0 95 b7 01 c0 	mov    DWORD PTR ds:0xc0031f00,0xc001b795
c001cce7:	c7 05 04 1f 03 c0 ac b7 01 c0 	mov    DWORD PTR ds:0xc0031f04,0xc001b7ac
c001ccf1:	c3                   	ret    

c001ccf2 <Sys::systemCall(regs*, void*)>:
c001ccf2:	53                   	push   ebx
c001ccf3:	83 ec 08             	sub    esp,0x8
c001ccf6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ccfa:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001ccfd:	83 f8 7f             	cmp    eax,0x7f
c001cd00:	77 16                	ja     c001cd18 <Sys::systemCall(regs*, void*)+0x26>
c001cd02:	8b 14 85 40 1e 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce1c0]
c001cd09:	85 d2                	test   edx,edx
c001cd0b:	74 0b                	je     c001cd18 <Sys::systemCall(regs*, void*)+0x26>
c001cd0d:	83 ec 0c             	sub    esp,0xc
c001cd10:	53                   	push   ebx
c001cd11:	ff d2                	call   edx
c001cd13:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cd16:	eb 0d                	jmp    c001cd25 <Sys::systemCall(regs*, void*)+0x33>
c001cd18:	52                   	push   edx
c001cd19:	52                   	push   edx
c001cd1a:	50                   	push   eax
c001cd1b:	68 37 cd 02 c0       	push   0xc002cd37
c001cd20:	e8 3a 61 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001cd25:	83 c4 10             	add    esp,0x10
c001cd28:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cd2d:	31 d2                	xor    edx,edx
c001cd2f:	83 c4 08             	add    esp,0x8
c001cd32:	5b                   	pop    ebx
c001cd33:	c3                   	ret    

c001cd34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cd34:	55                   	push   ebp
c001cd35:	57                   	push   edi
c001cd36:	56                   	push   esi
c001cd37:	53                   	push   ebx
c001cd38:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cd3e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cd45:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cd4c:	85 c0                	test   eax,eax
c001cd4e:	0f 95 c1             	setne  cl
c001cd51:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cd59:	0f 94 c2             	sete   dl
c001cd5c:	84 d1                	test   cl,dl
c001cd5e:	74 23                	je     c001cd83 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd60:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cd66:	74 1b                	je     c001cd83 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cd68:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd6e:	89 da                	mov    edx,ebx
c001cd70:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cd76:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cd7c:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cd83:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cd8a:	05 ff 0f 00 00       	add    eax,0xfff
c001cd8f:	83 ec 0c             	sub    esp,0xc
c001cd92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd96:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001cd9c:	c1 e8 0c             	shr    eax,0xc
c001cd9f:	89 fe                	mov    esi,edi
c001cda1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cda5:	c1 ee 0c             	shr    esi,0xc
c001cda8:	6a 01                	push   0x1
c001cdaa:	e8 aa 4c ff ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c001cdaf:	89 c5                	mov    ebp,eax
c001cdb1:	58                   	pop    eax
c001cdb2:	5a                   	pop    edx
c001cdb3:	56                   	push   esi
c001cdb4:	68 bb cd 02 c0       	push   0xc002cdbb
c001cdb9:	e8 a1 60 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001cdbe:	59                   	pop    ecx
c001cdbf:	58                   	pop    eax
c001cdc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cdc4:	68 cd cd 02 c0       	push   0xc002cdcd
c001cdc9:	e8 91 60 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001cdce:	83 c4 10             	add    esp,0x10
c001cdd1:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001cdd7:	0f 86 31 01 00 00    	jbe    c001cf0e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001cddd:	c1 e6 0c             	shl    esi,0xc
c001cde0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cde3:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cde6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cdea:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001cdf1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cdf4:	01 df                	add    edi,ebx
c001cdf6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001cdf9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cdfd:	0f 84 08 01 00 00    	je     c001cf0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001ce03:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001ce09:	76 05                	jbe    c001ce10 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001ce0b:	bf 00 10 00 00       	mov    edi,0x1000
c001ce10:	83 ec 0c             	sub    esp,0xc
c001ce13:	31 d2                	xor    edx,edx
c001ce15:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001ce1c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ce1e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ce22:	50                   	push   eax
c001ce23:	8d 74 24 30          	lea    esi,[esp+0x30]
c001ce27:	56                   	push   esi
c001ce28:	52                   	push   edx
c001ce29:	57                   	push   edi
c001ce2a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001ce31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce34:	83 c4 20             	add    esp,0x20
c001ce37:	85 c0                	test   eax,eax
c001ce39:	74 0a                	je     c001ce45 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001ce3b:	53                   	push   ebx
c001ce3c:	53                   	push   ebx
c001ce3d:	50                   	push   eax
c001ce3e:	68 df cd 02 c0       	push   0xc002cddf
c001ce43:	eb 0f                	jmp    c001ce54 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001ce45:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001ce49:	74 20                	je     c001ce6b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001ce4b:	51                   	push   ecx
c001ce4c:	51                   	push   ecx
c001ce4d:	6a 00                	push   0x0
c001ce4f:	68 0a ce 02 c0       	push   0xc002ce0a
c001ce54:	e8 06 60 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ce59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce5c:	e8 b8 50 ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c001ce61:	83 c4 10             	add    esp,0x10
c001ce64:	31 c0                	xor    eax,eax
c001ce66:	e9 68 01 00 00       	jmp    c001cfd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001ce6b:	fa                   	cli    
c001ce6c:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ce72:	e8 a9 30 ff ff       	call   c000ff20 <Phys::allocatePage()>
c001ce77:	6a 07                	push   0x7
c001ce79:	89 c7                	mov    edi,eax
c001ce7b:	55                   	push   ebp
c001ce7c:	50                   	push   eax
c001ce7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ce82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ce85:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ce8b:	e8 00 54 ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ce90:	83 c4 0c             	add    esp,0xc
c001ce93:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ce9a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cea0:	6a 00                	push   0x0
c001cea2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cea7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ceaa:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ceb0:	e8 35 52 ff ff       	call   c00120ea <VAS::mapOtherVASIn(bool, VAS*)>
c001ceb5:	58                   	pop    eax
c001ceb6:	5a                   	pop    edx
c001ceb7:	68 07 0c 00 00       	push   0xc07
c001cebc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cec0:	57                   	push   edi
c001cec1:	89 ef                	mov    edi,ebp
c001cec3:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ceca:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ced0:	6a 00                	push   0x0
c001ced2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ced7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ceda:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cee0:	e8 67 57 ff ff       	call   c001264c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cee5:	b9 00 10 00 00       	mov    ecx,0x1000
c001ceea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ceec:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001cef1:	83 c4 20             	add    esp,0x20
c001cef4:	48                   	dec    eax
c001cef5:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001cefa:	85 c0                	test   eax,eax
c001cefc:	75 01                	jne    c001ceff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001cefe:	fb                   	sti    
c001ceff:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001cf06:	e9 df fe ff ff       	jmp    c001cdea <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001cf0b:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001cf0e:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001cf16:	0f 86 a9 00 00 00    	jbe    c001cfc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cf1c:	fa                   	cli    
c001cf1d:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001cf23:	51                   	push   ecx
c001cf24:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cf2b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf31:	6a 00                	push   0x0
c001cf33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf38:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf3b:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf41:	e8 a4 51 ff ff       	call   c00120ea <VAS::mapOtherVASIn(bool, VAS*)>
c001cf46:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cf4a:	c1 e6 0c             	shl    esi,0xc
c001cf4d:	01 de                	add    esi,ebx
c001cf4f:	83 c4 10             	add    esp,0x10
c001cf52:	39 de                	cmp    esi,ebx
c001cf54:	74 61                	je     c001cfb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001cf56:	e8 c5 2f ff ff       	call   c000ff20 <Phys::allocatePage()>
c001cf5b:	6a 07                	push   0x7
c001cf5d:	89 c7                	mov    edi,eax
c001cf5f:	55                   	push   ebp
c001cf60:	50                   	push   eax
c001cf61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf66:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf69:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf6f:	e8 1c 53 ff ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cf74:	58                   	pop    eax
c001cf75:	5a                   	pop    edx
c001cf76:	68 07 0c 00 00       	push   0xc07
c001cf7b:	53                   	push   ebx
c001cf7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cf82:	57                   	push   edi
c001cf83:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cf8a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cf90:	6a 00                	push   0x0
c001cf92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cf97:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cf9a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cfa0:	e8 a7 56 ff ff       	call   c001264c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cfa5:	83 c4 1c             	add    esp,0x1c
c001cfa8:	68 00 10 00 00       	push   0x1000
c001cfad:	6a 00                	push   0x0
c001cfaf:	55                   	push   ebp
c001cfb0:	e8 c3 37 fe ff       	call   c0000778 <memset>
c001cfb5:	eb 98                	jmp    c001cf4f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001cfb7:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001cfbc:	48                   	dec    eax
c001cfbd:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001cfc2:	75 01                	jne    c001cfc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001cfc4:	fb                   	sti    
c001cfc5:	83 ec 0c             	sub    esp,0xc
c001cfc8:	55                   	push   ebp
c001cfc9:	e8 4b 4f ff ff       	call   c0011f19 <Virt::freeKernelVirtualPages(unsigned long)>
c001cfce:	83 c4 10             	add    esp,0x10
c001cfd1:	b0 01                	mov    al,0x1
c001cfd3:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cfd9:	5b                   	pop    ebx
c001cfda:	5e                   	pop    esi
c001cfdb:	5f                   	pop    edi
c001cfdc:	5d                   	pop    ebp
c001cfdd:	c3                   	ret    

c001cfde <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cfde:	55                   	push   ebp
c001cfdf:	57                   	push   edi
c001cfe0:	56                   	push   esi
c001cfe1:	53                   	push   ebx
c001cfe2:	83 ec 48             	sub    esp,0x48
c001cfe5:	68 14 01 00 00       	push   0x114
c001cfea:	e8 c5 28 ff ff       	call   c000f8b4 <malloc>
c001cfef:	83 c4 0c             	add    esp,0xc
c001cff2:	89 c6                	mov    esi,eax
c001cff4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cff8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cffc:	50                   	push   eax
c001cffd:	e8 bc 63 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001d002:	58                   	pop    eax
c001d003:	5a                   	pop    edx
c001d004:	6a 01                	push   0x1
c001d006:	56                   	push   esi
c001d007:	e8 16 64 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001d00c:	83 c4 10             	add    esp,0x10
c001d00f:	85 c0                	test   eax,eax
c001d011:	0f 85 47 01 00 00    	jne    c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d017:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001d01f:	83 ec 0c             	sub    esp,0xc
c001d022:	6a 34                	push   0x34
c001d024:	e8 8b 28 ff ff       	call   c000f8b4 <malloc>
c001d029:	89 c3                	mov    ebx,eax
c001d02b:	58                   	pop    eax
c001d02c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d02e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d032:	57                   	push   edi
c001d033:	53                   	push   ebx
c001d034:	6a 00                	push   0x0
c001d036:	6a 34                	push   0x34
c001d038:	56                   	push   esi
c001d039:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d03c:	83 c4 20             	add    esp,0x20
c001d03f:	85 c0                	test   eax,eax
c001d041:	0f 85 17 01 00 00    	jne    c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d047:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001d04d:	0f 85 0b 01 00 00    	jne    c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d053:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001d056:	85 c0                	test   eax,eax
c001d058:	0f 84 00 01 00 00    	je     c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d05e:	31 d2                	xor    edx,edx
c001d060:	55                   	push   ebp
c001d061:	52                   	push   edx
c001d062:	50                   	push   eax
c001d063:	56                   	push   esi
c001d064:	e8 77 64 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d069:	83 c4 10             	add    esp,0x10
c001d06c:	85 c0                	test   eax,eax
c001d06e:	0f 85 ea 00 00 00    	jne    c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d074:	83 ec 0c             	sub    esp,0xc
c001d077:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d07a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d07e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d082:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d086:	0f af c2             	imul   eax,edx
c001d089:	50                   	push   eax
c001d08a:	e8 25 28 ff ff       	call   c000f8b4 <malloc>
c001d08f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d091:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d095:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d098:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d09c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001d0a0:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001d0a4:	0f af c2             	imul   eax,edx
c001d0a7:	99                   	cdq    
c001d0a8:	52                   	push   edx
c001d0a9:	50                   	push   eax
c001d0aa:	56                   	push   esi
c001d0ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d0ae:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001d0b1:	83 c4 20             	add    esp,0x20
c001d0b4:	85 c0                	test   eax,eax
c001d0b6:	0f 84 a2 00 00 00    	je     c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0bc:	31 d2                	xor    edx,edx
c001d0be:	51                   	push   ecx
c001d0bf:	52                   	push   edx
c001d0c0:	50                   	push   eax
c001d0c1:	56                   	push   esi
c001d0c2:	e8 19 64 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d0c7:	83 c4 10             	add    esp,0x10
c001d0ca:	85 c0                	test   eax,eax
c001d0cc:	0f 85 8c 00 00 00    	jne    c001d15e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0d9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0dd:	31 ed                	xor    ebp,ebp
c001d0df:	0f af c2             	imul   eax,edx
c001d0e2:	50                   	push   eax
c001d0e3:	e8 cc 27 ff ff       	call   c000f8b4 <malloc>
c001d0e8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001d0ea:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d0ee:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d0f5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001d0f9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001d0fd:	0f af c2             	imul   eax,edx
c001d100:	99                   	cdq    
c001d101:	52                   	push   edx
c001d102:	50                   	push   eax
c001d103:	56                   	push   esi
c001d104:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d107:	83 c4 20             	add    esp,0x20
c001d10a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001d112:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001d116:	0f 86 80 00 00 00    	jbe    c001d19c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001d11c:	0f b7 fd             	movzx  edi,bp
c001d11f:	c1 e7 05             	shl    edi,0x5
c001d122:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001d126:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001d129:	75 6b                	jne    c001d196 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d12b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001d12e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d132:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001d135:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d139:	52                   	push   edx
c001d13a:	31 d2                	xor    edx,edx
c001d13c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001d13f:	52                   	push   edx
c001d140:	50                   	push   eax
c001d141:	56                   	push   esi
c001d142:	e8 99 63 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d147:	83 c4 10             	add    esp,0x10
c001d14a:	85 c0                	test   eax,eax
c001d14c:	74 17                	je     c001d165 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001d14e:	83 ec 0c             	sub    esp,0xc
c001d151:	68 36 ce 02 c0       	push   0xc002ce36
c001d156:	e8 04 5d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001d15b:	83 c4 10             	add    esp,0x10
c001d15e:	31 c0                	xor    eax,eax
c001d160:	e9 87 00 00 00       	jmp    c001d1ec <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001d165:	83 ec 0c             	sub    esp,0xc
c001d168:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001d16b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001d16e:	50                   	push   eax
c001d16f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d173:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d177:	56                   	push   esi
c001d178:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001d17c:	e8 b3 fb ff ff       	call   c001cd34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001d181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d185:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001d189:	83 c4 20             	add    esp,0x20
c001d18c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001d190:	73 04                	jae    c001d196 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001d192:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d196:	45                   	inc    ebp
c001d197:	e9 76 ff ff ff       	jmp    c001d112 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001d19c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001d1a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d1a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d1a8:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001d1ae:	83 ec 0c             	sub    esp,0xc
c001d1b1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001d1b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d1bc:	05 00 10 00 00       	add    eax,0x1000
c001d1c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001d1c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d1c8:	e8 f7 26 ff ff       	call   c000f8c4 <free>
c001d1cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1d0:	e8 ef 26 ff ff       	call   c000f8c4 <free>
c001d1d5:	58                   	pop    eax
c001d1d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d1da:	e8 e5 26 ff ff       	call   c000f8c4 <free>
c001d1df:	89 34 24             	mov    DWORD PTR [esp],esi
c001d1e2:	e8 99 62 ff ff       	call   c0013480 <File::close()>
c001d1e7:	83 c4 10             	add    esp,0x10
c001d1ea:	b0 01                	mov    al,0x1
c001d1ec:	83 c4 3c             	add    esp,0x3c
c001d1ef:	5b                   	pop    ebx
c001d1f0:	5e                   	pop    esi
c001d1f1:	5f                   	pop    edi
c001d1f2:	5d                   	pop    ebp
c001d1f3:	c3                   	ret    

c001d1f4 <Thr::runtimeReferenceHelper()>:
c001d1f4:	83 ec 18             	sub    esp,0x18
c001d1f7:	68 3e ce 02 c0       	push   0xc002ce3e
c001d1fc:	e8 5e 5c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001d201:	fa                   	cli    
c001d202:	83 c4 10             	add    esp,0x10
c001d205:	eb fe                	jmp    c001d205 <Thr::runtimeReferenceHelper()+0x11>

c001d207 <Thr::getAddressOfKernelSymbol(char const*)>:
c001d207:	57                   	push   edi
c001d208:	56                   	push   esi
c001d209:	53                   	push   ebx
c001d20a:	31 db                	xor    ebx,ebx
c001d20c:	39 1d e0 27 03 c0    	cmp    DWORD PTR ds:0xc00327e0,ebx
c001d212:	7e 3c                	jle    c001d250 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001d214:	8b 34 9d 60 27 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcd8a0]
c001d21b:	31 ff                	xor    edi,edi
c001d21d:	39 3c 9d 60 26 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcd9a0],edi
c001d224:	7e 27                	jle    c001d24d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d226:	50                   	push   eax
c001d227:	50                   	push   eax
c001d228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d22c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d22e:	03 04 9d e0 26 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcd920]
c001d235:	50                   	push   eax
c001d236:	e8 85 36 fe ff       	call   c00008c0 <strcmp>
c001d23b:	83 c4 10             	add    esp,0x10
c001d23e:	85 c0                	test   eax,eax
c001d240:	75 05                	jne    c001d247 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d242:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d245:	eb 0b                	jmp    c001d252 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d247:	83 c6 10             	add    esi,0x10
c001d24a:	47                   	inc    edi
c001d24b:	eb d0                	jmp    c001d21d <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d24d:	43                   	inc    ebx
c001d24e:	eb bc                	jmp    c001d20c <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d250:	31 c0                	xor    eax,eax
c001d252:	5b                   	pop    ebx
c001d253:	5e                   	pop    esi
c001d254:	5f                   	pop    edi
c001d255:	c3                   	ret    

c001d256 <Thr::loadKernelSymbolTable(char const*)>:
c001d256:	55                   	push   ebp
c001d257:	57                   	push   edi
c001d258:	56                   	push   esi
c001d259:	53                   	push   ebx
c001d25a:	83 ec 68             	sub    esp,0x68
c001d25d:	8b 35 30 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032830
c001d263:	68 14 01 00 00       	push   0x114
c001d268:	e8 47 26 ff ff       	call   c000f8b4 <malloc>
c001d26d:	83 c4 0c             	add    esp,0xc
c001d270:	89 c3                	mov    ebx,eax
c001d272:	56                   	push   esi
c001d273:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d277:	50                   	push   eax
c001d278:	e8 41 61 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001d27d:	5e                   	pop    esi
c001d27e:	5f                   	pop    edi
c001d27f:	6a 01                	push   0x1
c001d281:	53                   	push   ebx
c001d282:	e8 9b 61 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001d287:	83 c4 10             	add    esp,0x10
c001d28a:	85 c0                	test   eax,eax
c001d28c:	74 0a                	je     c001d298 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d28e:	83 ec 0c             	sub    esp,0xc
c001d291:	68 60 ce 02 c0       	push   0xc002ce60
c001d296:	eb 34                	jmp    c001d2cc <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d298:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d2a0:	83 ec 0c             	sub    esp,0xc
c001d2a3:	6a 34                	push   0x34
c001d2a5:	e8 0a 26 ff ff       	call   c000f8b4 <malloc>
c001d2aa:	59                   	pop    ecx
c001d2ab:	89 c7                	mov    edi,eax
c001d2ad:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d2b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d2b3:	56                   	push   esi
c001d2b4:	57                   	push   edi
c001d2b5:	6a 00                	push   0x0
c001d2b7:	6a 34                	push   0x34
c001d2b9:	53                   	push   ebx
c001d2ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2bd:	83 c4 20             	add    esp,0x20
c001d2c0:	85 c0                	test   eax,eax
c001d2c2:	74 17                	je     c001d2db <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d2c4:	83 ec 0c             	sub    esp,0xc
c001d2c7:	68 77 ce 02 c0       	push   0xc002ce77
c001d2cc:	e8 28 d6 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001d2d1:	83 c4 10             	add    esp,0x10
c001d2d4:	31 c0                	xor    eax,eax
c001d2d6:	e9 31 02 00 00       	jmp    c001d50c <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d2db:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d2e1:	75 e1                	jne    c001d2c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2e3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d2e6:	85 c0                	test   eax,eax
c001d2e8:	74 da                	je     c001d2c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2ea:	52                   	push   edx
c001d2eb:	31 d2                	xor    edx,edx
c001d2ed:	52                   	push   edx
c001d2ee:	50                   	push   eax
c001d2ef:	53                   	push   ebx
c001d2f0:	e8 eb 61 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d2f5:	83 c4 10             	add    esp,0x10
c001d2f8:	85 c0                	test   eax,eax
c001d2fa:	75 c8                	jne    c001d2c4 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d2fc:	83 ec 0c             	sub    esp,0xc
c001d2ff:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d303:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d307:	31 ed                	xor    ebp,ebp
c001d309:	0f af c2             	imul   eax,edx
c001d30c:	50                   	push   eax
c001d30d:	e8 a2 25 ff ff       	call   c000f8b4 <malloc>
c001d312:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d314:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d318:	89 34 24             	mov    DWORD PTR [esp],esi
c001d31b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d31f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d323:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d327:	0f af c2             	imul   eax,edx
c001d32a:	99                   	cdq    
c001d32b:	52                   	push   edx
c001d32c:	50                   	push   eax
c001d32d:	53                   	push   ebx
c001d32e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d331:	83 c4 20             	add    esp,0x20
c001d334:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d33c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d344:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d34c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d354:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d358:	0f 86 aa 00 00 00    	jbe    c001d408 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d35e:	0f b7 f5             	movzx  esi,bp
c001d361:	6b f6 28             	imul   esi,esi,0x28
c001d364:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d368:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d36b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d36f:	50                   	push   eax
c001d370:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d374:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d378:	8b 16                	mov    edx,DWORD PTR [esi]
c001d37a:	6b c0 28             	imul   eax,eax,0x28
c001d37d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d381:	89 d0                	mov    eax,edx
c001d383:	31 d2                	xor    edx,edx
c001d385:	52                   	push   edx
c001d386:	50                   	push   eax
c001d387:	53                   	push   ebx
c001d388:	e8 53 61 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d38d:	83 c4 0c             	add    esp,0xc
c001d390:	6a 20                	push   0x20
c001d392:	6a 00                	push   0x0
c001d394:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d398:	52                   	push   edx
c001d399:	e8 da 33 fe ff       	call   c0000778 <memset>
c001d39e:	58                   	pop    eax
c001d39f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d3a1:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d3a5:	51                   	push   ecx
c001d3a6:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d3aa:	52                   	push   edx
c001d3ab:	6a 00                	push   0x0
c001d3ad:	6a 1f                	push   0x1f
c001d3af:	53                   	push   ebx
c001d3b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d3b3:	83 c4 18             	add    esp,0x18
c001d3b6:	68 8e ce 02 c0       	push   0xc002ce8e
c001d3bb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d3bf:	52                   	push   edx
c001d3c0:	e8 fb 34 fe ff       	call   c00008c0 <strcmp>
c001d3c5:	83 c4 10             	add    esp,0x10
c001d3c8:	85 c0                	test   eax,eax
c001d3ca:	75 0f                	jne    c001d3db <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d3cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3cf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d3d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3db:	50                   	push   eax
c001d3dc:	50                   	push   eax
c001d3dd:	68 96 ce 02 c0       	push   0xc002ce96
c001d3e2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d3e6:	50                   	push   eax
c001d3e7:	e8 d4 34 fe ff       	call   c00008c0 <strcmp>
c001d3ec:	83 c4 10             	add    esp,0x10
c001d3ef:	85 c0                	test   eax,eax
c001d3f1:	75 0f                	jne    c001d402 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d3f3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d3f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d3fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d402:	45                   	inc    ebp
c001d403:	e9 4c ff ff ff       	jmp    c001d354 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d408:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d40d:	75 10                	jne    c001d41f <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d40f:	83 ec 0c             	sub    esp,0xc
c001d412:	68 9e ce 02 c0       	push   0xc002ce9e
c001d417:	e8 dd d4 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001d41c:	83 c4 10             	add    esp,0x10
c001d41f:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d424:	75 10                	jne    c001d436 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d426:	83 ec 0c             	sub    esp,0xc
c001d429:	68 9e ce 02 c0       	push   0xc002ce9e
c001d42e:	e8 c6 d4 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001d433:	83 c4 10             	add    esp,0x10
c001d436:	31 d2                	xor    edx,edx
c001d438:	50                   	push   eax
c001d439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d43d:	52                   	push   edx
c001d43e:	50                   	push   eax
c001d43f:	53                   	push   ebx
c001d440:	e8 9b 60 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d445:	5a                   	pop    edx
c001d446:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d44a:	e8 65 24 ff ff       	call   c000f8b4 <malloc>
c001d44f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d453:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d457:	31 c9                	xor    ecx,ecx
c001d459:	5e                   	pop    esi
c001d45a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d45c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d460:	55                   	push   ebp
c001d461:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d465:	51                   	push   ecx
c001d466:	52                   	push   edx
c001d467:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d46b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d46f:	53                   	push   ebx
c001d470:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d473:	83 c4 14             	add    esp,0x14
c001d476:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d47a:	e8 35 24 ff ff       	call   c000f8b4 <malloc>
c001d47f:	89 c6                	mov    esi,eax
c001d481:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d483:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d486:	56                   	push   esi
c001d487:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d48b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d48f:	51                   	push   ecx
c001d490:	52                   	push   edx
c001d491:	53                   	push   ebx
c001d492:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d495:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d499:	8b 15 e0 27 03 c0    	mov    edx,DWORD PTR ds:0xc00327e0
c001d49f:	83 c4 1c             	add    esp,0x1c
c001d4a2:	c1 e8 04             	shr    eax,0x4
c001d4a5:	89 04 95 60 26 03 c0 	mov    DWORD PTR [edx*4-0x3ffcd9a0],eax
c001d4ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4b0:	31 d2                	xor    edx,edx
c001d4b2:	52                   	push   edx
c001d4b3:	50                   	push   eax
c001d4b4:	53                   	push   ebx
c001d4b5:	e8 26 60 ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d4ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d4bc:	31 d2                	xor    edx,edx
c001d4be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d4c1:	56                   	push   esi
c001d4c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d4c6:	52                   	push   edx
c001d4c7:	50                   	push   eax
c001d4c8:	53                   	push   ebx
c001d4c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4cc:	83 c4 14             	add    esp,0x14
c001d4cf:	53                   	push   ebx
c001d4d0:	e8 ab 5f ff ff       	call   c0013480 <File::close()>
c001d4d5:	5d                   	pop    ebp
c001d4d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4da:	e8 e5 23 ff ff       	call   c000f8c4 <free>
c001d4df:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d4e2:	e8 dd 23 ff ff       	call   c000f8c4 <free>
c001d4e7:	a1 e0 27 03 c0       	mov    eax,ds:0xc00327e0
c001d4ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d4f0:	8d 50 01             	lea    edx,[eax+0x1]
c001d4f3:	89 0c 85 60 27 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd8a0],ecx
c001d4fa:	89 34 85 e0 26 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd920],esi
c001d501:	89 15 e0 27 03 c0    	mov    DWORD PTR ds:0xc00327e0,edx
c001d507:	83 c4 10             	add    esp,0x10
c001d50a:	b0 01                	mov    al,0x1
c001d50c:	83 c4 5c             	add    esp,0x5c
c001d50f:	5b                   	pop    ebx
c001d510:	5e                   	pop    esi
c001d511:	5f                   	pop    edi
c001d512:	5d                   	pop    ebp
c001d513:	c3                   	ret    

c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d514:	55                   	push   ebp
c001d515:	57                   	push   edi
c001d516:	56                   	push   esi
c001d517:	53                   	push   ebx
c001d518:	81 ec 68 03 00 00    	sub    esp,0x368
c001d51e:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d525:	8b 1d 30 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032830
c001d52b:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d52f:	68 14 01 00 00       	push   0x114
c001d534:	e8 7b 23 ff ff       	call   c000f8b4 <malloc>
c001d539:	83 c4 0c             	add    esp,0xc
c001d53c:	89 c5                	mov    ebp,eax
c001d53e:	53                   	push   ebx
c001d53f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d546:	50                   	push   eax
c001d547:	e8 72 5e ff ff       	call   c00133be <File::File(char const*, Process*)>
c001d54c:	5e                   	pop    esi
c001d54d:	5f                   	pop    edi
c001d54e:	6a 01                	push   0x1
c001d550:	55                   	push   ebp
c001d551:	e8 cc 5e ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001d556:	83 c4 10             	add    esp,0x10
c001d559:	85 c0                	test   eax,eax
c001d55b:	0f 85 a7 06 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d561:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d569:	83 ec 0c             	sub    esp,0xc
c001d56c:	6a 34                	push   0x34
c001d56e:	e8 41 23 ff ff       	call   c000f8b4 <malloc>
c001d573:	5b                   	pop    ebx
c001d574:	89 c7                	mov    edi,eax
c001d576:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d57a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d57d:	53                   	push   ebx
c001d57e:	57                   	push   edi
c001d57f:	6a 00                	push   0x0
c001d581:	6a 34                	push   0x34
c001d583:	55                   	push   ebp
c001d584:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d587:	83 c4 20             	add    esp,0x20
c001d58a:	85 c0                	test   eax,eax
c001d58c:	0f 85 76 06 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d592:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d598:	0f 85 6a 06 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d59e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d5a1:	85 c0                	test   eax,eax
c001d5a3:	0f 84 5f 06 00 00    	je     c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5a9:	31 d2                	xor    edx,edx
c001d5ab:	51                   	push   ecx
c001d5ac:	52                   	push   edx
c001d5ad:	50                   	push   eax
c001d5ae:	55                   	push   ebp
c001d5af:	e8 2c 5f ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d5b4:	83 c4 10             	add    esp,0x10
c001d5b7:	85 c0                	test   eax,eax
c001d5b9:	0f 85 49 06 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d5bf:	83 ec 0c             	sub    esp,0xc
c001d5c2:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d5c5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d5cd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5d1:	0f af c2             	imul   eax,edx
c001d5d4:	50                   	push   eax
c001d5d5:	e8 da 22 ff ff       	call   c000f8b4 <malloc>
c001d5da:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d5dd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d5e1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5e8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d5ec:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5f0:	0f af c2             	imul   eax,edx
c001d5f3:	99                   	cdq    
c001d5f4:	52                   	push   edx
c001d5f5:	50                   	push   eax
c001d5f6:	55                   	push   ebp
c001d5f7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d5fa:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d5fd:	83 c4 20             	add    esp,0x20
c001d600:	85 c0                	test   eax,eax
c001d602:	0f 84 00 06 00 00    	je     c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d608:	52                   	push   edx
c001d609:	31 d2                	xor    edx,edx
c001d60b:	52                   	push   edx
c001d60c:	50                   	push   eax
c001d60d:	55                   	push   ebp
c001d60e:	e8 cd 5e ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d613:	83 c4 10             	add    esp,0x10
c001d616:	85 c0                	test   eax,eax
c001d618:	0f 85 ea 05 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d61e:	83 ec 0c             	sub    esp,0xc
c001d621:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d625:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d629:	31 f6                	xor    esi,esi
c001d62b:	0f af c2             	imul   eax,edx
c001d62e:	50                   	push   eax
c001d62f:	e8 80 22 ff ff       	call   c000f8b4 <malloc>
c001d634:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d637:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d63b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d63e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d642:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d646:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d64a:	0f af c2             	imul   eax,edx
c001d64d:	99                   	cdq    
c001d64e:	52                   	push   edx
c001d64f:	50                   	push   eax
c001d650:	55                   	push   ebp
c001d651:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d654:	83 c4 20             	add    esp,0x20
c001d657:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d65b:	0f 86 8a 00 00 00    	jbe    c001d6eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d661:	0f b7 de             	movzx  ebx,si
c001d664:	c1 e3 05             	shl    ebx,0x5
c001d667:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d66b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d66e:	75 75                	jne    c001d6e5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d670:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d673:	31 d2                	xor    edx,edx
c001d675:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d679:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d67c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d680:	50                   	push   eax
c001d681:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d684:	52                   	push   edx
c001d685:	50                   	push   eax
c001d686:	55                   	push   ebp
c001d687:	e8 54 5e ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d68c:	83 c4 10             	add    esp,0x10
c001d68f:	85 c0                	test   eax,eax
c001d691:	0f 85 71 05 00 00    	jne    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d697:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d69e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6a1:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d6a5:	31 d2                	xor    edx,edx
c001d6a7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d6ab:	83 ec 0c             	sub    esp,0xc
c001d6ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d6b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d6b9:	50                   	push   eax
c001d6ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6c2:	52                   	push   edx
c001d6c3:	50                   	push   eax
c001d6c4:	55                   	push   ebp
c001d6c5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6c8:	83 c4 1c             	add    esp,0x1c
c001d6cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d6ce:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d6d1:	50                   	push   eax
c001d6d2:	6a 00                	push   0x0
c001d6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6d8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d6dc:	50                   	push   eax
c001d6dd:	e8 96 30 fe ff       	call   c0000778 <memset>
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	46                   	inc    esi
c001d6e6:	e9 6c ff ff ff       	jmp    c001d657 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d6eb:	53                   	push   ebx
c001d6ec:	31 db                	xor    ebx,ebx
c001d6ee:	68 00 01 00 00       	push   0x100
c001d6f3:	6a 00                	push   0x0
c001d6f5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d6f9:	50                   	push   eax
c001d6fa:	e8 79 30 fe ff       	call   c0000778 <memset>
c001d6ff:	83 c4 0c             	add    esp,0xc
c001d702:	68 00 01 00 00       	push   0x100
c001d707:	6a 00                	push   0x0
c001d709:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d710:	50                   	push   eax
c001d711:	e8 62 30 fe ff       	call   c0000778 <memset>
c001d716:	83 c4 10             	add    esp,0x10
c001d719:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d721:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d729:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d731:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d739:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d741:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d745:	0f 86 30 01 00 00    	jbe    c001d87b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d74b:	0f b7 f3             	movzx  esi,bx
c001d74e:	6b f6 28             	imul   esi,esi,0x28
c001d751:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d755:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d758:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d75c:	52                   	push   edx
c001d75d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d761:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d765:	8b 06                	mov    eax,DWORD PTR [esi]
c001d767:	6b d2 28             	imul   edx,edx,0x28
c001d76a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d76e:	31 d2                	xor    edx,edx
c001d770:	52                   	push   edx
c001d771:	50                   	push   eax
c001d772:	55                   	push   ebp
c001d773:	e8 68 5d ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d778:	83 c4 0c             	add    esp,0xc
c001d77b:	6a 20                	push   0x20
c001d77d:	6a 00                	push   0x0
c001d77f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d786:	51                   	push   ecx
c001d787:	e8 ec 2f fe ff       	call   c0000778 <memset>
c001d78c:	59                   	pop    ecx
c001d78d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d790:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d794:	52                   	push   edx
c001d795:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d79c:	51                   	push   ecx
c001d79d:	6a 00                	push   0x0
c001d79f:	6a 1f                	push   0x1f
c001d7a1:	55                   	push   ebp
c001d7a2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d7a5:	83 c4 1c             	add    esp,0x1c
c001d7a8:	6a 09                	push   0x9
c001d7aa:	68 b8 ce 02 c0       	push   0xc002ceb8
c001d7af:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d7b6:	51                   	push   ecx
c001d7b7:	e8 b8 2e fe ff       	call   c0000674 <memcmp>
c001d7bc:	83 c4 10             	add    esp,0x10
c001d7bf:	85 c0                	test   eax,eax
c001d7c1:	75 21                	jne    c001d7e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d7c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d7cb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d7cf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d7d3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d7d6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d7dd:	89 d0                	mov    eax,edx
c001d7df:	40                   	inc    eax
c001d7e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d7e4:	50                   	push   eax
c001d7e5:	6a 09                	push   0x9
c001d7e7:	68 c2 ce 02 c0       	push   0xc002cec2
c001d7ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f3:	50                   	push   eax
c001d7f4:	e8 7b 2e fe ff       	call   c0000674 <memcmp>
c001d7f9:	83 c4 10             	add    esp,0x10
c001d7fc:	85 c0                	test   eax,eax
c001d7fe:	75 21                	jne    c001d821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d800:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d804:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d808:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d80c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d810:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d813:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d81a:	89 d0                	mov    eax,edx
c001d81c:	40                   	inc    eax
c001d81d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d821:	50                   	push   eax
c001d822:	50                   	push   eax
c001d823:	68 8e ce 02 c0       	push   0xc002ce8e
c001d828:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d82f:	50                   	push   eax
c001d830:	e8 8b 30 fe ff       	call   c00008c0 <strcmp>
c001d835:	83 c4 10             	add    esp,0x10
c001d838:	85 c0                	test   eax,eax
c001d83a:	75 0f                	jne    c001d84b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d83c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d83f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d843:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d847:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d84b:	50                   	push   eax
c001d84c:	50                   	push   eax
c001d84d:	68 96 ce 02 c0       	push   0xc002ce96
c001d852:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d859:	50                   	push   eax
c001d85a:	e8 61 30 fe ff       	call   c00008c0 <strcmp>
c001d85f:	83 c4 10             	add    esp,0x10
c001d862:	85 c0                	test   eax,eax
c001d864:	75 0f                	jne    c001d875 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d866:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d869:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d86d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d871:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d875:	43                   	inc    ebx
c001d876:	e9 c6 fe ff ff       	jmp    c001d741 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d87b:	31 d2                	xor    edx,edx
c001d87d:	50                   	push   eax
c001d87e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d882:	52                   	push   edx
c001d883:	50                   	push   eax
c001d884:	55                   	push   ebp
c001d885:	e8 56 5c ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d88a:	58                   	pop    eax
c001d88b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d88f:	e8 20 20 ff ff       	call   c000f8b4 <malloc>
c001d894:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d897:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d89b:	31 d2                	xor    edx,edx
c001d89d:	58                   	pop    eax
c001d89e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d8a2:	53                   	push   ebx
c001d8a3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d8a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8ab:	52                   	push   edx
c001d8ac:	50                   	push   eax
c001d8ad:	55                   	push   ebp
c001d8ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8b1:	83 c4 14             	add    esp,0x14
c001d8b4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d8b8:	e8 f7 1f ff ff       	call   c000f8b4 <malloc>
c001d8bd:	31 d2                	xor    edx,edx
c001d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d8c3:	83 c4 0c             	add    esp,0xc
c001d8c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8ca:	52                   	push   edx
c001d8cb:	50                   	push   eax
c001d8cc:	55                   	push   ebp
c001d8cd:	e8 0e 5c ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d8d2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d8d5:	31 d2                	xor    edx,edx
c001d8d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8da:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d8de:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d8e2:	52                   	push   edx
c001d8e3:	50                   	push   eax
c001d8e4:	55                   	push   ebp
c001d8e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d8e8:	83 c4 20             	add    esp,0x20
c001d8eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d8f3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d8f7:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d8fb:	0f 84 0b 03 00 00    	je     c001dc0c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d901:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d908:	31 d2                	xor    edx,edx
c001d90a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d90e:	c1 e8 03             	shr    eax,0x3
c001d911:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d915:	51                   	push   ecx
c001d916:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d91a:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d91e:	52                   	push   edx
c001d91f:	50                   	push   eax
c001d920:	55                   	push   ebp
c001d921:	e8 ba 5b ff ff       	call   c00134e0 <File::seek(unsigned long long)>
c001d926:	5b                   	pop    ebx
c001d927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d92b:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d932:	e8 7d 1f ff ff       	call   c000f8b4 <malloc>
c001d937:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d93a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d93e:	31 d2                	xor    edx,edx
c001d940:	5e                   	pop    esi
c001d941:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d945:	50                   	push   eax
c001d946:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d94a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d94e:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d955:	52                   	push   edx
c001d956:	50                   	push   eax
c001d957:	55                   	push   ebp
c001d958:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d95b:	83 c4 20             	add    esp,0x20
c001d95e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d966:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d96a:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d96e:	0f 8d 7c 02 00 00    	jge    c001dbf0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d974:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d97c:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d981:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d984:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d988:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d98c:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d990:	89 d8                	mov    eax,ebx
c001d992:	c1 e8 08             	shr    eax,0x8
c001d995:	89 c6                	mov    esi,eax
c001d997:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d99b:	c1 e6 04             	shl    esi,0x4
c001d99e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d9a2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d9a5:	85 d2                	test   edx,edx
c001d9a7:	0f 85 bf 00 00 00    	jne    c001da6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9ad:	83 ec 0c             	sub    esp,0xc
c001d9b0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9b4:	03 06                	add    eax,DWORD PTR [esi]
c001d9b6:	50                   	push   eax
c001d9b7:	e8 4b f8 ff ff       	call   c001d207 <Thr::getAddressOfKernelSymbol(char const*)>
c001d9bc:	83 c4 10             	add    esp,0x10
c001d9bf:	89 c2                	mov    edx,eax
c001d9c1:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d9c6:	85 c0                	test   eax,eax
c001d9c8:	0f 85 9e 00 00 00    	jne    c001da6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9ce:	83 ec 0c             	sub    esp,0xc
c001d9d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9d5:	03 06                	add    eax,DWORD PTR [esi]
c001d9d7:	50                   	push   eax
c001d9d8:	e8 8a 0b ff ff       	call   c000e567 <Krnl::resolveCompatibilitySymbol(char*)>
c001d9dd:	83 c4 10             	add    esp,0x10
c001d9e0:	89 c2                	mov    edx,eax
c001d9e2:	85 c0                	test   eax,eax
c001d9e4:	0f 85 82 00 00 00    	jne    c001da6c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d9ea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d9ee:	50                   	push   eax
c001d9ef:	50                   	push   eax
c001d9f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d9f4:	03 06                	add    eax,DWORD PTR [esi]
c001d9f6:	50                   	push   eax
c001d9f7:	68 cc ce 02 c0       	push   0xc002cecc
c001d9fc:	e8 5e 54 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001da01:	58                   	pop    eax
c001da02:	5a                   	pop    edx
c001da03:	68 e6 ce 02 c0       	push   0xc002cee6
c001da08:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da0f:	50                   	push   eax
c001da10:	e8 1f 2e fe ff       	call   c0000834 <strcpy>
c001da15:	59                   	pop    ecx
c001da16:	58                   	pop    eax
c001da17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da1b:	03 06                	add    eax,DWORD PTR [esi]
c001da1d:	50                   	push   eax
c001da1e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da25:	50                   	push   eax
c001da26:	e8 49 2f fe ff       	call   c0000974 <strcat>
c001da2b:	58                   	pop    eax
c001da2c:	5a                   	pop    edx
c001da2d:	68 7c cf 02 c0       	push   0xc002cf7c
c001da32:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da39:	50                   	push   eax
c001da3a:	e8 35 2f fe ff       	call   c0000974 <strcat>
c001da3f:	83 c4 10             	add    esp,0x10
c001da42:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001da47:	0f 84 5d 01 00 00    	je     c001dbaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001da4d:	83 ec 0c             	sub    esp,0xc
c001da50:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001da57:	50                   	push   eax
c001da58:	e8 9c ce ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001da5d:	83 c4 10             	add    esp,0x10
c001da60:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001da64:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001da68:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001da6c:	80 fb 01             	cmp    bl,0x1
c001da6f:	0f 85 88 00 00 00    	jne    c001dafd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001da75:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001da7c:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001da80:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001da84:	01 ce                	add    esi,ecx
c001da86:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001da8c:	0f 94 c0             	sete   al
c001da8f:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001da95:	0f 94 c3             	sete   bl
c001da98:	09 c3                	or     ebx,eax
c001da9a:	8b 06                	mov    eax,DWORD PTR [esi]
c001da9c:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001daa1:	74 41                	je     c001dae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001daa3:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001daa6:	84 db                	test   bl,bl
c001daa8:	75 15                	jne    c001dabf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001daaa:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001daae:	66 83 f8 0c          	cmp    ax,0xc
c001dab2:	76 05                	jbe    c001dab9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001dab4:	b8 0c 00 00 00       	mov    eax,0xc
c001dab9:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001dabd:	76 37                	jbe    c001daf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dabf:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001dac3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001dac8:	0f 84 dc 00 00 00    	je     c001dbaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001dace:	83 ec 0c             	sub    esp,0xc
c001dad1:	68 fd ce 02 c0       	push   0xc002cefd
c001dad6:	e8 1e ce ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001dadb:	83 c4 10             	add    esp,0x10
c001dade:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001dae2:	eb 12                	jmp    c001daf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001dae4:	01 c1                	add    ecx,eax
c001dae6:	84 db                	test   bl,bl
c001dae8:	75 0c                	jne    c001daf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001daea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001daee:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001daf2:	77 02                	ja     c001daf6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001daf4:	01 d1                	add    ecx,edx
c001daf6:	89 0e                	mov    DWORD PTR [esi],ecx
c001daf8:	e9 ea 00 00 00       	jmp    c001dbe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dafd:	80 fb 02             	cmp    bl,0x2
c001db00:	75 7c                	jne    c001db7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001db02:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001db09:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001db0d:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001db11:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001db17:	74 20                	je     c001db39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db19:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001db1f:	74 18                	je     c001db39 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001db21:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001db25:	b9 0a 00 00 00       	mov    ecx,0xa
c001db2a:	66 83 f8 0e          	cmp    ax,0xe
c001db2e:	77 03                	ja     c001db33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001db30:	8d 48 fc             	lea    ecx,[eax-0x4]
c001db33:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001db37:	76 1f                	jbe    c001db58 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001db39:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001db3d:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db42:	74 66                	je     c001dbaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db44:	83 ec 0c             	sub    esp,0xc
c001db47:	68 19 cf 02 c0       	push   0xc002cf19
c001db4c:	e8 a8 cd ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001db51:	83 c4 10             	add    esp,0x10
c001db54:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001db58:	8b 06                	mov    eax,DWORD PTR [esi]
c001db5a:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001db5f:	74 13                	je     c001db74 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001db61:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db65:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001db6c:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001db70:	01 c8                	add    eax,ecx
c001db72:	eb 04                	jmp    c001db78 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001db74:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001db78:	01 c2                	add    edx,eax
c001db7a:	89 16                	mov    DWORD PTR [esi],edx
c001db7c:	eb 69                	jmp    c001dbe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001db7e:	0f b6 db             	movzx  ebx,bl
c001db81:	50                   	push   eax
c001db82:	50                   	push   eax
c001db83:	53                   	push   ebx
c001db84:	68 35 cf 02 c0       	push   0xc002cf35
c001db89:	e8 d1 52 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001db8e:	83 c4 10             	add    esp,0x10
c001db91:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001db96:	74 12                	je     c001dbaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001db98:	83 ec 0c             	sub    esp,0xc
c001db9b:	68 40 cf 02 c0       	push   0xc002cf40
c001dba0:	e8 54 cd ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001dba5:	83 c4 10             	add    esp,0x10
c001dba8:	eb 3d                	jmp    c001dbe7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001dbaa:	83 ec 0c             	sub    esp,0xc
c001dbad:	55                   	push   ebp
c001dbae:	e8 cd 58 ff ff       	call   c0013480 <File::close()>
c001dbb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dbb6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dbb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dbbc:	59                   	pop    ecx
c001dbbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbc1:	e8 fe 1c ff ff       	call   c000f8c4 <free>
c001dbc6:	5b                   	pop    ebx
c001dbc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dbcb:	e8 f4 1c ff ff       	call   c000f8c4 <free>
c001dbd0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dbd3:	e8 ec 1c ff ff       	call   c000f8c4 <free>
c001dbd8:	5e                   	pop    esi
c001dbd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dbdd:	e8 e2 1c ff ff       	call   c000f8c4 <free>
c001dbe2:	83 c4 10             	add    esp,0x10
c001dbe5:	eb 21                	jmp    c001dc08 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001dbe7:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001dbeb:	e9 76 fd ff ff       	jmp    c001d966 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001dbf7:	e8 c8 1c ff ff       	call   c000f8c4 <free>
c001dbfc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001dc00:	83 c4 10             	add    esp,0x10
c001dc03:	e9 eb fc ff ff       	jmp    c001d8f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001dc08:	31 c0                	xor    eax,eax
c001dc0a:	eb 33                	jmp    c001dc3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001dc0c:	83 ec 0c             	sub    esp,0xc
c001dc0f:	55                   	push   ebp
c001dc10:	e8 6b 58 ff ff       	call   c0013480 <File::close()>
c001dc15:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dc18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dc1b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dc1e:	58                   	pop    eax
c001dc1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dc23:	e8 9c 1c ff ff       	call   c000f8c4 <free>
c001dc28:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc2b:	e8 94 1c ff ff       	call   c000f8c4 <free>
c001dc30:	5a                   	pop    edx
c001dc31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc35:	e8 8a 1c ff ff       	call   c000f8c4 <free>
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	b0 01                	mov    al,0x1
c001dc3f:	81 c4 5c 03 00 00    	add    esp,0x35c
c001dc45:	5b                   	pop    ebx
c001dc46:	5e                   	pop    esi
c001dc47:	5f                   	pop    edi
c001dc48:	5d                   	pop    ebp
c001dc49:	c3                   	ret    

c001dc4a <Thr::getDriverBaseFromAddress(unsigned long)>:
c001dc4a:	56                   	push   esi
c001dc4b:	31 d2                	xor    edx,edx
c001dc4d:	53                   	push   ebx
c001dc4e:	8b 1d 40 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032040
c001dc54:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dc58:	39 d3                	cmp    ebx,edx
c001dc5a:	7e 1b                	jle    c001dc77 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001dc5c:	8b 04 95 60 22 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcdda0]
c001dc63:	39 c8                	cmp    eax,ecx
c001dc65:	77 0d                	ja     c001dc74 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001dc67:	8b 34 95 60 20 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcdfa0]
c001dc6e:	01 c6                	add    esi,eax
c001dc70:	39 ce                	cmp    esi,ecx
c001dc72:	77 05                	ja     c001dc79 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001dc74:	42                   	inc    edx
c001dc75:	eb e1                	jmp    c001dc58 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001dc77:	31 c0                	xor    eax,eax
c001dc79:	5b                   	pop    ebx
c001dc7a:	5e                   	pop    esi
c001dc7b:	c3                   	ret    

c001dc7c <Thr::getDriverNameFromAddress(unsigned long)>:
c001dc7c:	53                   	push   ebx
c001dc7d:	31 c0                	xor    eax,eax
c001dc7f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001dc83:	8b 1d 40 20 03 c0    	mov    ebx,DWORD PTR ds:0xc0032040
c001dc89:	39 c3                	cmp    ebx,eax
c001dc8b:	7e 22                	jle    c001dcaf <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001dc8d:	8b 14 85 60 22 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcdda0]
c001dc94:	39 ca                	cmp    edx,ecx
c001dc96:	77 14                	ja     c001dcac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dc98:	03 14 85 60 20 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcdfa0]
c001dc9f:	39 ca                	cmp    edx,ecx
c001dca1:	76 09                	jbe    c001dcac <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001dca3:	8b 04 85 60 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdba0]
c001dcaa:	eb 05                	jmp    c001dcb1 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001dcac:	40                   	inc    eax
c001dcad:	eb da                	jmp    c001dc89 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001dcaf:	31 c0                	xor    eax,eax
c001dcb1:	5b                   	pop    ebx
c001dcb2:	c3                   	ret    

c001dcb3 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001dcb3:	53                   	push   ebx
c001dcb4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001dcb8:	53                   	push   ebx
c001dcb9:	e8 8c ff ff ff       	call   c001dc4a <Thr::getDriverBaseFromAddress(unsigned long)>
c001dcbe:	5a                   	pop    edx
c001dcbf:	31 d2                	xor    edx,edx
c001dcc1:	85 c0                	test   eax,eax
c001dcc3:	74 04                	je     c001dcc9 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001dcc5:	89 da                	mov    edx,ebx
c001dcc7:	29 c2                	sub    edx,eax
c001dcc9:	89 d0                	mov    eax,edx
c001dccb:	5b                   	pop    ebx
c001dccc:	c3                   	ret    

c001dccd <Thr::loadDLL(char const*, bool)>:
c001dccd:	55                   	push   ebp
c001dcce:	57                   	push   edi
c001dccf:	56                   	push   esi
c001dcd0:	53                   	push   ebx
c001dcd1:	81 ec 34 01 00 00    	sub    esp,0x134
c001dcd7:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dcde:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dce5:	56                   	push   esi
c001dce6:	68 58 cf 02 c0       	push   0xc002cf58
c001dceb:	e8 6f 51 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001dcf0:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dcf7:	e8 b8 1b ff ff       	call   c000f8b4 <malloc>
c001dcfc:	83 c4 0c             	add    esp,0xc
c001dcff:	89 c3                	mov    ebx,eax
c001dd01:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001dd07:	56                   	push   esi
c001dd08:	50                   	push   eax
c001dd09:	e8 b0 56 ff ff       	call   c00133be <File::File(char const*, Process*)>
c001dd0e:	83 c4 10             	add    esp,0x10
c001dd11:	85 db                	test   ebx,ebx
c001dd13:	75 3c                	jne    c001dd51 <Thr::loadDLL(char const*, bool)+0x84>
c001dd15:	89 f8                	mov    eax,edi
c001dd17:	84 c0                	test   al,al
c001dd19:	0f 84 cc 01 00 00    	je     c001deeb <Thr::loadDLL(char const*, bool)+0x21e>
c001dd1f:	55                   	push   ebp
c001dd20:	55                   	push   ebp
c001dd21:	68 69 cf 02 c0       	push   0xc002cf69
c001dd26:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001dd2a:	55                   	push   ebp
c001dd2b:	e8 04 2b fe ff       	call   c0000834 <strcpy>
c001dd30:	58                   	pop    eax
c001dd31:	5a                   	pop    edx
c001dd32:	56                   	push   esi
c001dd33:	55                   	push   ebp
c001dd34:	e8 3b 2c fe ff       	call   c0000974 <strcat>
c001dd39:	59                   	pop    ecx
c001dd3a:	58                   	pop    eax
c001dd3b:	68 7c cf 02 c0       	push   0xc002cf7c
c001dd40:	55                   	push   ebp
c001dd41:	e8 2e 2c fe ff       	call   c0000974 <strcat>
c001dd46:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001dd49:	e8 ab cb ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001dd4e:	83 c4 10             	add    esp,0x10
c001dd51:	51                   	push   ecx
c001dd52:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001dd56:	50                   	push   eax
c001dd57:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dd5b:	50                   	push   eax
c001dd5c:	53                   	push   ebx
c001dd5d:	e8 6c 59 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c001dd62:	83 c4 10             	add    esp,0x10
c001dd65:	85 db                	test   ebx,ebx
c001dd67:	74 0c                	je     c001dd75 <Thr::loadDLL(char const*, bool)+0xa8>
c001dd69:	83 ec 0c             	sub    esp,0xc
c001dd6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd6e:	53                   	push   ebx
c001dd6f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd72:	83 c4 10             	add    esp,0x10
c001dd75:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001dd7a:	75 0a                	jne    c001dd86 <Thr::loadDLL(char const*, bool)+0xb9>
c001dd7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001dd80:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001dd84:	75 3c                	jne    c001ddc2 <Thr::loadDLL(char const*, bool)+0xf5>
c001dd86:	89 f8                	mov    eax,edi
c001dd88:	84 c0                	test   al,al
c001dd8a:	0f 84 43 01 00 00    	je     c001ded3 <Thr::loadDLL(char const*, bool)+0x206>
c001dd90:	51                   	push   ecx
c001dd91:	51                   	push   ecx
c001dd92:	68 69 cf 02 c0       	push   0xc002cf69
c001dd97:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001dd9b:	53                   	push   ebx
c001dd9c:	e8 93 2a fe ff       	call   c0000834 <strcpy>
c001dda1:	5d                   	pop    ebp
c001dda2:	58                   	pop    eax
c001dda3:	56                   	push   esi
c001dda4:	53                   	push   ebx
c001dda5:	e8 ca 2b fe ff       	call   c0000974 <strcat>
c001ddaa:	58                   	pop    eax
c001ddab:	5a                   	pop    edx
c001ddac:	68 7c cf 02 c0       	push   0xc002cf7c
c001ddb1:	53                   	push   ebx
c001ddb2:	e8 bd 2b fe ff       	call   c0000974 <strcat>
c001ddb7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ddba:	e8 3a cb ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001ddbf:	83 c4 10             	add    esp,0x10
c001ddc2:	52                   	push   edx
c001ddc3:	6a 03                	push   0x3
c001ddc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ddc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ddcd:	05 ff 0f 00 00       	add    eax,0xfff
c001ddd2:	83 d2 00             	adc    edx,0x0
c001ddd5:	0f ac d0 0c          	shrd   eax,edx,0xc
c001ddd9:	50                   	push   eax
c001ddda:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001dde0:	e8 ad 45 ff ff       	call   c0012392 <VAS::allocatePages(int, int)>
c001dde5:	59                   	pop    ecx
c001dde6:	89 c3                	mov    ebx,eax
c001dde8:	5d                   	pop    ebp
c001dde9:	50                   	push   eax
c001ddea:	68 7e cf 02 c0       	push   0xc002cf7e
c001ddef:	e8 6b 50 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ddf4:	89 34 24             	mov    DWORD PTR [esp],esi
c001ddf7:	e8 98 29 fe ff       	call   c0000794 <strlen>
c001ddfc:	8b 2d 40 20 03 c0    	mov    ebp,DWORD PTR ds:0xc0032040
c001de02:	40                   	inc    eax
c001de03:	89 04 24             	mov    DWORD PTR [esp],eax
c001de06:	e8 a9 1a ff ff       	call   c000f8b4 <malloc>
c001de0b:	89 04 ad 60 24 03 c0 	mov    DWORD PTR [ebp*4-0x3ffcdba0],eax
c001de12:	58                   	pop    eax
c001de13:	a1 40 20 03 c0       	mov    eax,ds:0xc0032040
c001de18:	5a                   	pop    edx
c001de19:	56                   	push   esi
c001de1a:	ff 34 85 60 24 03 c0 	push   DWORD PTR [eax*4-0x3ffcdba0]
c001de21:	e8 0e 2a fe ff       	call   c0000834 <strcpy>
c001de26:	a1 40 20 03 c0       	mov    eax,ds:0xc0032040
c001de2b:	8d 50 01             	lea    edx,[eax+0x1]
c001de2e:	89 1c 85 60 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdda0],ebx
c001de35:	89 15 40 20 03 c0    	mov    DWORD PTR ds:0xc0032040,edx
c001de3b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de3f:	83 c4 0c             	add    esp,0xc
c001de42:	89 14 85 60 20 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdfa0],edx
c001de49:	6a 01                	push   0x1
c001de4b:	53                   	push   ebx
c001de4c:	56                   	push   esi
c001de4d:	e8 c2 f6 ff ff       	call   c001d514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001de52:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001de56:	83 c4 10             	add    esp,0x10
c001de59:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001de5e:	0f 85 83 00 00 00    	jne    c001dee7 <Thr::loadDLL(char const*, bool)+0x21a>
c001de64:	89 f8                	mov    eax,edi
c001de66:	84 c0                	test   al,al
c001de68:	74 6d                	je     c001ded7 <Thr::loadDLL(char const*, bool)+0x20a>
c001de6a:	83 ec 0c             	sub    esp,0xc
c001de6d:	68 8b cf 02 c0       	push   0xc002cf8b
c001de72:	e8 82 ca ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001de77:	83 c4 10             	add    esp,0x10
c001de7a:	eb 5b                	jmp    c001ded7 <Thr::loadDLL(char const*, bool)+0x20a>
c001de7c:	89 ee                	mov    esi,ebp
c001de7e:	50                   	push   eax
c001de7f:	c1 e6 0c             	shl    esi,0xc
c001de82:	50                   	push   eax
c001de83:	01 de                	add    esi,ebx
c001de85:	56                   	push   esi
c001de86:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c001de8c:	e8 69 40 ff ff       	call   c0011efa <VAS::getPageTableEntry(unsigned long)>
c001de91:	83 c4 10             	add    esp,0x10
c001de94:	f6 00 60             	test   BYTE PTR [eax],0x60
c001de97:	75 0c                	jne    c001dea5 <Thr::loadDLL(char const*, bool)+0x1d8>
c001de99:	83 ec 0c             	sub    esp,0xc
c001de9c:	56                   	push   esi
c001de9d:	e8 f4 1f ff ff       	call   c000fe96 <Phys::freePage(unsigned long)>
c001dea2:	83 c4 10             	add    esp,0x10
c001dea5:	45                   	inc    ebp
c001dea6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001deaa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001deae:	05 ff 0f 00 00       	add    eax,0xfff
c001deb3:	bf 00 00 00 00       	mov    edi,0x0
c001deb8:	83 d2 00             	adc    edx,0x0
c001debb:	0f ac d0 0c          	shrd   eax,edx,0xc
c001debf:	c1 ea 0c             	shr    edx,0xc
c001dec2:	39 c5                	cmp    ebp,eax
c001dec4:	89 d1                	mov    ecx,edx
c001dec6:	89 f8                	mov    eax,edi
c001dec8:	19 c8                	sbb    eax,ecx
c001deca:	72 b0                	jb     c001de7c <Thr::loadDLL(char const*, bool)+0x1af>
c001decc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ded1:	75 18                	jne    c001deeb <Thr::loadDLL(char const*, bool)+0x21e>
c001ded3:	31 db                	xor    ebx,ebx
c001ded5:	eb 14                	jmp    c001deeb <Thr::loadDLL(char const*, bool)+0x21e>
c001ded7:	83 ec 0c             	sub    esp,0xc
c001deda:	68 aa cf 02 c0       	push   0xc002cfaa
c001dedf:	e8 15 ca ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001dee4:	83 c4 10             	add    esp,0x10
c001dee7:	31 ed                	xor    ebp,ebp
c001dee9:	eb bb                	jmp    c001dea6 <Thr::loadDLL(char const*, bool)+0x1d9>
c001deeb:	81 c4 2c 01 00 00    	add    esp,0x12c
c001def1:	89 d8                	mov    eax,ebx
c001def3:	5b                   	pop    ebx
c001def4:	5e                   	pop    esi
c001def5:	5f                   	pop    edi
c001def6:	5d                   	pop    ebp
c001def7:	c3                   	ret    

c001def8 <Thr::executeDLL(unsigned long, void*)>:
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	52                   	push   edx
c001defb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001deff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001df03:	85 db                	test   ebx,ebx
c001df05:	75 10                	jne    c001df17 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001df07:	83 ec 0c             	sub    esp,0xc
c001df0a:	68 c6 cf 02 c0       	push   0xc002cfc6
c001df0f:	e8 e5 c9 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001df14:	83 c4 10             	add    esp,0x10
c001df17:	50                   	push   eax
c001df18:	50                   	push   eax
c001df19:	53                   	push   ebx
c001df1a:	68 f0 cf 02 c0       	push   0xc002cff0
c001df1f:	e8 3b 4f ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001df24:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001df28:	89 d8                	mov    eax,ebx
c001df2a:	83 c4 14             	add    esp,0x14
c001df2d:	5b                   	pop    ebx
c001df2e:	5e                   	pop    esi
c001df2f:	ff e0                	jmp    eax
c001df31:	90                   	nop

c001df32 <userModeEntryPoint(void*)>:
c001df32:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001df37:	48                   	dec    eax
c001df38:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001df3d:	75 01                	jne    c001df40 <userModeEntryPoint(void*)+0xe>
c001df3f:	fb                   	sti    
c001df40:	fb                   	sti    
c001df41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001df49:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001df4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df53:	e9 d2 23 fe ff       	jmp    c000032a <goToUsermode>

c001df58 <changeTSS>:
c001df58:	83 ec 14             	sub    esp,0x14
c001df5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df60:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001df63:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001df68:	c1 e2 15             	shl    edx,0x15
c001df6b:	29 d0                	sub    eax,edx
c001df6d:	50                   	push   eax
c001df6e:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001df73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df79:	05 7c 11 00 00       	add    eax,0x117c
c001df7e:	50                   	push   eax
c001df7f:	e8 14 34 ff ff       	call   c0011398 <TSS::setESP(unsigned long)>
c001df84:	83 c4 1c             	add    esp,0x1c
c001df87:	c3                   	ret    

c001df88 <switchToThread(ThreadControlBlock*)>:
c001df88:	57                   	push   edi
c001df89:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001df8e:	56                   	push   esi
c001df8f:	85 c0                	test   eax,eax
c001df91:	53                   	push   ebx
c001df92:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df96:	0f 85 88 00 00 00    	jne    c001e024 <switchToThread(ThreadControlBlock*)+0x9c>
c001df9c:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001df9f:	3c ff                	cmp    al,0xff
c001dfa1:	74 7d                	je     c001e020 <switchToThread(ThreadControlBlock*)+0x98>
c001dfa3:	0f b6 d0             	movzx  edx,al
c001dfa6:	b8 84 03 00 00       	mov    eax,0x384
c001dfab:	29 d0                	sub    eax,edx
c001dfad:	c1 e0 10             	shl    eax,0x10
c001dfb0:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dfb3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dfb6:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c001dfbb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dfc1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dfc8:	74 4a                	je     c001e014 <switchToThread(ThreadControlBlock*)+0x8c>
c001dfca:	0f 31                	rdtsc  
c001dfcc:	a3 48 28 03 c0       	mov    ds:0xc0032848,eax
c001dfd1:	89 c6                	mov    esi,eax
c001dfd3:	89 d7                	mov    edi,edx
c001dfd5:	2b 35 38 28 03 c0    	sub    esi,DWORD PTR ds:0xc0032838
c001dfdb:	89 15 4c 28 03 c0    	mov    DWORD PTR ds:0xc003284c,edx
c001dfe1:	1b 3d 3c 28 03 c0    	sbb    edi,DWORD PTR ds:0xc003283c
c001dfe7:	89 35 40 28 03 c0    	mov    DWORD PTR ds:0xc0032840,esi
c001dfed:	a3 38 28 03 c0       	mov    ds:0xc0032838,eax
c001dff2:	89 3d 44 28 03 c0    	mov    DWORD PTR ds:0xc0032844,edi
c001dff8:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dffe:	89 15 3c 28 03 c0    	mov    DWORD PTR ds:0xc003283c,edx
c001e004:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001e007:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001e00a:	01 c6                	add    esi,eax
c001e00c:	11 d7                	adc    edi,edx
c001e00e:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001e011:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001e014:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001e018:	5b                   	pop    ebx
c001e019:	5e                   	pop    esi
c001e01a:	5f                   	pop    edi
c001e01b:	e9 42 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001e020:	31 c0                	xor    eax,eax
c001e022:	eb 8f                	jmp    c001dfb3 <switchToThread(ThreadControlBlock*)+0x2b>
c001e024:	5b                   	pop    ebx
c001e025:	c7 05 00 28 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x1
c001e02f:	5e                   	pop    esi
c001e030:	5f                   	pop    edi
c001e031:	c3                   	ret    

c001e032 <Process::addArgs(char**)>:
c001e032:	57                   	push   edi
c001e033:	56                   	push   esi
c001e034:	53                   	push   ebx
c001e035:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e039:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e03d:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001e047:	85 ff                	test   edi,edi
c001e049:	74 3d                	je     c001e088 <Process::addArgs(char**)+0x56>
c001e04b:	8b 07                	mov    eax,DWORD PTR [edi]
c001e04d:	85 c0                	test   eax,eax
c001e04f:	74 37                	je     c001e088 <Process::addArgs(char**)+0x56>
c001e051:	31 db                	xor    ebx,ebx
c001e053:	83 ec 0c             	sub    esp,0xc
c001e056:	50                   	push   eax
c001e057:	e8 38 27 fe ff       	call   c0000794 <strlen>
c001e05c:	40                   	inc    eax
c001e05d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e060:	e8 4f 18 ff ff       	call   c000f8b4 <malloc>
c001e065:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001e06c:	5a                   	pop    edx
c001e06d:	59                   	pop    ecx
c001e06e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001e071:	43                   	inc    ebx
c001e072:	50                   	push   eax
c001e073:	e8 bc 27 fe ff       	call   c0000834 <strcpy>
c001e078:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001e084:	85 c0                	test   eax,eax
c001e086:	75 cb                	jne    c001e053 <Process::addArgs(char**)+0x21>
c001e088:	5b                   	pop    ebx
c001e089:	5e                   	pop    esi
c001e08a:	5f                   	pop    edi
c001e08b:	c3                   	ret    

c001e08c <Process::Process(char const*, Process*, char**)>:
c001e08c:	56                   	push   esi
c001e08d:	53                   	push   ebx
c001e08e:	83 ec 14             	sub    esp,0x14
c001e091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e095:	05 0c 02 00 00       	add    eax,0x20c
c001e09a:	bb 07 00 00 00       	mov    ebx,0x7
c001e09f:	89 c6                	mov    esi,eax
c001e0a1:	85 db                	test   ebx,ebx
c001e0a3:	78 12                	js     c001e0b7 <Process::Process(char const*, Process*, char**)+0x2b>
c001e0a5:	83 ec 0c             	sub    esp,0xc
c001e0a8:	56                   	push   esi
c001e0a9:	e8 04 b9 00 00       	call   c00299b2 <ThreadControlBlock::ThreadControlBlock()>
c001e0ae:	83 c4 10             	add    esp,0x10
c001e0b1:	83 c6 63             	add    esi,0x63
c001e0b4:	4b                   	dec    ebx
c001e0b5:	eb ea                	jmp    c001e0a1 <Process::Process(char const*, Process*, char**)+0x15>
c001e0b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0bb:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e0c2:	83 ec 0c             	sub    esp,0xc
c001e0c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e0c9:	e8 84 c6 ff ff       	call   c001a752 <Krnl::newProcessEnv(Process*)>
c001e0ce:	83 c4 10             	add    esp,0x10
c001e0d1:	89 c2                	mov    edx,eax
c001e0d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0d7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e0e1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0ea:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001e0ef:	8d 50 01             	lea    edx,[eax+0x1]
c001e0f2:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001e0f8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e0fc:	89 02                	mov    DWORD PTR [edx],eax
c001e0fe:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001e106:	83 ec 0c             	sub    esp,0xc
c001e109:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e10d:	e8 a2 17 ff ff       	call   c000f8b4 <malloc>
c001e112:	83 c4 10             	add    esp,0x10
c001e115:	89 c3                	mov    ebx,eax
c001e117:	83 ec 08             	sub    esp,0x8
c001e11a:	6a 00                	push   0x0
c001e11c:	53                   	push   ebx
c001e11d:	e8 18 46 ff ff       	call   c001273a <VAS::VAS(bool)>
c001e122:	83 c4 10             	add    esp,0x10
c001e125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e129:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e12f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e133:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e13d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e141:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001e145:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e14b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e14f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e155:	85 c0                	test   eax,eax
c001e157:	74 42                	je     c001e19b <Process::Process(char const*, Process*, char**)+0x10f>
c001e159:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e15d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e163:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e16d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e173:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e177:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e17d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e187:	05 0c 01 00 00       	add    eax,0x10c
c001e18c:	83 ec 08             	sub    esp,0x8
c001e18f:	52                   	push   edx
c001e190:	50                   	push   eax
c001e191:	e8 9e 26 fe ff       	call   c0000834 <strcpy>
c001e196:	83 c4 10             	add    esp,0x10
c001e199:	eb 63                	jmp    c001e1fe <Process::Process(char const*, Process*, char**)+0x172>
c001e19b:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001e1a3:	83 ec 0c             	sub    esp,0xc
c001e1a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e1aa:	e8 05 17 ff ff       	call   c000f8b4 <malloc>
c001e1af:	83 c4 10             	add    esp,0x10
c001e1b2:	89 c3                	mov    ebx,eax
c001e1b4:	83 ec 08             	sub    esp,0x8
c001e1b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e1bb:	53                   	push   ebx
c001e1bc:	e8 b9 2e ff ff       	call   c001107a <VgaText::VgaText(char const*)>
c001e1c1:	83 c4 10             	add    esp,0x10
c001e1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1c8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1d2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	50                   	push   eax
c001e1dc:	e8 d0 23 ff ff       	call   c00105b1 <addToTerminalCycle(VgaText*)>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e1e8:	05 0c 01 00 00       	add    eax,0x10c
c001e1ed:	83 ec 08             	sub    esp,0x8
c001e1f0:	68 0f d0 02 c0       	push   0xc002d00f
c001e1f5:	50                   	push   eax
c001e1f6:	e8 39 26 fe ff       	call   c0000834 <strcpy>
c001e1fb:	83 c4 10             	add    esp,0x10
c001e1fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e202:	83 c0 0c             	add    eax,0xc
c001e205:	83 ec 08             	sub    esp,0x8
c001e208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e20c:	50                   	push   eax
c001e20d:	e8 22 26 fe ff       	call   c0000834 <strcpy>
c001e212:	83 c4 10             	add    esp,0x10
c001e215:	83 ec 08             	sub    esp,0x8
c001e218:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e21c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e220:	e8 0d fe ff ff       	call   c001e032 <Process::addArgs(char**)>
c001e225:	83 c4 10             	add    esp,0x10
c001e228:	83 ec 08             	sub    esp,0x8
c001e22b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e22f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e233:	e8 a6 ed ff ff       	call   c001cfde <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e238:	83 c4 10             	add    esp,0x10
c001e23b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e23f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e243:	83 f0 01             	xor    eax,0x1
c001e246:	88 c2                	mov    dl,al
c001e248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e24c:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e252:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e257:	83 ec 08             	sub    esp,0x8
c001e25a:	50                   	push   eax
c001e25b:	68 3c d1 02 c0       	push   0xc002d13c
c001e260:	e8 fa 4b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001e265:	83 c4 10             	add    esp,0x10
c001e268:	90                   	nop
c001e269:	83 c4 14             	add    esp,0x14
c001e26c:	5b                   	pop    ebx
c001e26d:	5e                   	pop    esi
c001e26e:	c3                   	ret    
c001e26f:	90                   	nop

c001e270 <Process::Process(bool, char const*, Process*, char**)>:
c001e270:	56                   	push   esi
c001e271:	53                   	push   ebx
c001e272:	83 ec 24             	sub    esp,0x24
c001e275:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e279:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e27d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e281:	05 0c 02 00 00       	add    eax,0x20c
c001e286:	bb 07 00 00 00       	mov    ebx,0x7
c001e28b:	89 c6                	mov    esi,eax
c001e28d:	85 db                	test   ebx,ebx
c001e28f:	78 12                	js     c001e2a3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e291:	83 ec 0c             	sub    esp,0xc
c001e294:	56                   	push   esi
c001e295:	e8 18 b7 00 00       	call   c00299b2 <ThreadControlBlock::ThreadControlBlock()>
c001e29a:	83 c4 10             	add    esp,0x10
c001e29d:	83 c6 63             	add    esi,0x63
c001e2a0:	4b                   	dec    ebx
c001e2a1:	eb ea                	jmp    c001e28d <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e2a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2a7:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e2b5:	e8 98 c4 ff ff       	call   c001a752 <Krnl::newProcessEnv(Process*)>
c001e2ba:	83 c4 10             	add    esp,0x10
c001e2bd:	89 c2                	mov    edx,eax
c001e2bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2c3:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e2c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e2cd:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e2d6:	a1 50 e8 02 c0       	mov    eax,ds:0xc002e850
c001e2db:	8d 50 01             	lea    edx,[eax+0x1]
c001e2de:	89 15 50 e8 02 c0    	mov    DWORD PTR ds:0xc002e850,edx
c001e2e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e2e8:	89 02                	mov    DWORD PTR [edx],eax
c001e2ea:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e2f2:	83 ec 0c             	sub    esp,0xc
c001e2f5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e2f9:	e8 b6 15 ff ff       	call   c000f8b4 <malloc>
c001e2fe:	83 c4 10             	add    esp,0x10
c001e301:	89 c3                	mov    ebx,eax
c001e303:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e308:	83 ec 08             	sub    esp,0x8
c001e30b:	50                   	push   eax
c001e30c:	53                   	push   ebx
c001e30d:	e8 28 44 ff ff       	call   c001273a <VAS::VAS(bool)>
c001e312:	83 c4 10             	add    esp,0x10
c001e315:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e319:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e31f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e323:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e32d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e331:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e335:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e33b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e33f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e345:	85 c0                	test   eax,eax
c001e347:	74 42                	je     c001e38b <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e349:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e34d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e353:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e359:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e35d:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e363:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e367:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e36d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e373:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e377:	05 0c 01 00 00       	add    eax,0x10c
c001e37c:	83 ec 08             	sub    esp,0x8
c001e37f:	52                   	push   edx
c001e380:	50                   	push   eax
c001e381:	e8 ae 24 fe ff       	call   c0000834 <strcpy>
c001e386:	83 c4 10             	add    esp,0x10
c001e389:	eb 63                	jmp    c001e3ee <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e38b:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e393:	83 ec 0c             	sub    esp,0xc
c001e396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e39a:	e8 15 15 ff ff       	call   c000f8b4 <malloc>
c001e39f:	83 c4 10             	add    esp,0x10
c001e3a2:	89 c3                	mov    ebx,eax
c001e3a4:	83 ec 08             	sub    esp,0x8
c001e3a7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3ab:	53                   	push   ebx
c001e3ac:	e8 c9 2c ff ff       	call   c001107a <VgaText::VgaText(char const*)>
c001e3b1:	83 c4 10             	add    esp,0x10
c001e3b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3b8:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e3be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3c2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e3c8:	83 ec 0c             	sub    esp,0xc
c001e3cb:	50                   	push   eax
c001e3cc:	e8 e0 21 ff ff       	call   c00105b1 <addToTerminalCycle(VgaText*)>
c001e3d1:	83 c4 10             	add    esp,0x10
c001e3d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3d8:	05 0c 01 00 00       	add    eax,0x10c
c001e3dd:	83 ec 08             	sub    esp,0x8
c001e3e0:	68 0f d0 02 c0       	push   0xc002d00f
c001e3e5:	50                   	push   eax
c001e3e6:	e8 49 24 fe ff       	call   c0000834 <strcpy>
c001e3eb:	83 c4 10             	add    esp,0x10
c001e3ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e3f2:	83 c0 0c             	add    eax,0xc
c001e3f5:	83 ec 08             	sub    esp,0x8
c001e3f8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e3fc:	50                   	push   eax
c001e3fd:	e8 32 24 fe ff       	call   c0000834 <strcpy>
c001e402:	83 c4 10             	add    esp,0x10
c001e405:	83 ec 08             	sub    esp,0x8
c001e408:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e40c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e410:	e8 1d fc ff ff       	call   c001e032 <Process::addArgs(char**)>
c001e415:	83 c4 10             	add    esp,0x10
c001e418:	90                   	nop
c001e419:	83 c4 24             	add    esp,0x24
c001e41c:	5b                   	pop    ebx
c001e41d:	5e                   	pop    esi
c001e41e:	c3                   	ret    

c001e41f <taskStartupFunction>:
c001e41f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e424:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e427:	c3                   	ret    

c001e428 <Semaphore::Semaphore(int)>:
c001e428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e42c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e430:	89 10                	mov    DWORD PTR [eax],edx
c001e432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e436:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e43d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e441:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e44c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e453:	90                   	nop
c001e454:	c3                   	ret    
c001e455:	90                   	nop

c001e456 <Mutex::Mutex()>:
c001e456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e45a:	6a 01                	push   0x1
c001e45c:	50                   	push   eax
c001e45d:	e8 c6 ff ff ff       	call   c001e428 <Semaphore::Semaphore(int)>
c001e462:	83 c4 08             	add    esp,0x8
c001e465:	90                   	nop
c001e466:	c3                   	ret    
c001e467:	90                   	nop

c001e468 <Process::createThread(void (*)(void*), void*, int)>:
c001e468:	55                   	push   ebp
c001e469:	31 c9                	xor    ecx,ecx
c001e46b:	57                   	push   edi
c001e46c:	56                   	push   esi
c001e46d:	53                   	push   ebx
c001e46e:	83 ec 1c             	sub    esp,0x1c
c001e471:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e475:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e47c:	89 f2                	mov    edx,esi
c001e47e:	0f b7 c2             	movzx  eax,dx
c001e481:	83 e2 01             	and    edx,0x1
c001e484:	74 16                	je     c001e49c <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e486:	d1 f8                	sar    eax,1
c001e488:	41                   	inc    ecx
c001e489:	89 c2                	mov    edx,eax
c001e48b:	83 f9 10             	cmp    ecx,0x10
c001e48e:	75 ee                	jne    c001e47e <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e490:	83 c4 1c             	add    esp,0x1c
c001e493:	31 db                	xor    ebx,ebx
c001e495:	89 d8                	mov    eax,ebx
c001e497:	5b                   	pop    ebx
c001e498:	5e                   	pop    esi
c001e499:	5f                   	pop    edi
c001e49a:	5d                   	pop    ebp
c001e49b:	c3                   	ret    
c001e49c:	b8 01 00 00 00       	mov    eax,0x1
c001e4a1:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e4a4:	d3 e0                	shl    eax,cl
c001e4a6:	09 c6                	or     esi,eax
c001e4a8:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e4ab:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e4b2:	89 c6                	mov    esi,eax
c001e4b4:	c1 e6 05             	shl    esi,0x5
c001e4b7:	01 f0                	add    eax,esi
c001e4b9:	01 d8                	add    eax,ebx
c001e4bb:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e4c2:	75 0a                	jne    c001e4ce <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e4c4:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e4ce:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e4d4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e4d8:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e4db:	01 ca                	add    edx,ecx
c001e4dd:	83 ec 08             	sub    esp,0x8
c001e4e0:	89 d0                	mov    eax,edx
c001e4e2:	c1 e0 05             	shl    eax,0x5
c001e4e5:	01 d0                	add    eax,edx
c001e4e7:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e4eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e4ef:	01 d8                	add    eax,ebx
c001e4f1:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e4f7:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e4fd:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e503:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e509:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e50f:	89 cd                	mov    ebp,ecx
c001e511:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e515:	f7 dd                	neg    ebp
c001e517:	c1 e5 15             	shl    ebp,0x15
c001e51a:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e520:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e526:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e530:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e536:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e540:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e54a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e54e:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e555:	53                   	push   ebx
c001e556:	68 24 28 03 c0       	push   0xc0032824
c001e55b:	e8 0c b2 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e560:	89 d8                	mov    eax,ebx
c001e562:	83 c4 10             	add    esp,0x10
c001e565:	83 c4 1c             	add    esp,0x1c
c001e568:	5b                   	pop    ebx
c001e569:	5e                   	pop    esi
c001e56a:	5f                   	pop    edi
c001e56b:	5d                   	pop    ebp
c001e56c:	c3                   	ret    
c001e56d:	90                   	nop

c001e56e <Process::createUserThread()>:
c001e56e:	83 ec 0c             	sub    esp,0xc
c001e571:	68 80 00 00 00       	push   0x80
c001e576:	6a 00                	push   0x0
c001e578:	68 32 df 01 c0       	push   0xc001df32
c001e57d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e581:	e8 e2 fe ff ff       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c001e586:	83 c4 1c             	add    esp,0x1c
c001e589:	c3                   	ret    

c001e58a <setupMultitasking(void (*)())>:
c001e58a:	56                   	push   esi
c001e58b:	53                   	push   ebx
c001e58c:	51                   	push   ecx
c001e58d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e591:	eb 10                	jmp    c001e5a3 <setupMultitasking(void (*)())+0x19>
c001e593:	83 ec 0c             	sub    esp,0xc
c001e596:	68 24 28 03 c0       	push   0xc0032824
c001e59b:	e8 1e b1 00 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e5a0:	83 c4 10             	add    esp,0x10
c001e5a3:	83 ec 0c             	sub    esp,0xc
c001e5a6:	68 24 28 03 c0       	push   0xc0032824
c001e5ab:	e8 ea b0 00 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e5b0:	83 c4 10             	add    esp,0x10
c001e5b3:	84 c0                	test   al,al
c001e5b5:	74 dc                	je     c001e593 <setupMultitasking(void (*)())+0x9>
c001e5b7:	83 ec 0c             	sub    esp,0xc
c001e5ba:	68 3f 07 00 00       	push   0x73f
c001e5bf:	e8 f0 12 ff ff       	call   c000f8b4 <malloc>
c001e5c4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e5cb:	89 c3                	mov    ebx,eax
c001e5cd:	6a 00                	push   0x0
c001e5cf:	68 13 d0 02 c0       	push   0xc002d013
c001e5d4:	6a 01                	push   0x1
c001e5d6:	50                   	push   eax
c001e5d7:	e8 94 fc ff ff       	call   c001e270 <Process::Process(bool, char const*, Process*, char**)>
c001e5dc:	83 c4 18             	add    esp,0x18
c001e5df:	89 1d 30 28 03 c0    	mov    DWORD PTR ds:0xc0032830,ebx
c001e5e5:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e5eb:	68 64 d1 02 c0       	push   0xc002d164
c001e5f0:	e8 6a 48 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001e5f5:	58                   	pop    eax
c001e5f6:	5a                   	pop    edx
c001e5f7:	6a 63                	push   0x63
c001e5f9:	68 98 d1 02 c0       	push   0xc002d198
c001e5fe:	e8 5c 48 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001e603:	59                   	pop    ecx
c001e604:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e60a:	e8 73 26 ff ff       	call   c0010c82 <setActiveTerminal(VgaText*)>
c001e60f:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e617:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e621:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e627:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e62a:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e634:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e63a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e640:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e64a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e654:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e65e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e664:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e66e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e674:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e67e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e684:	58                   	pop    eax
c001e685:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e68b:	5a                   	pop    edx
c001e68c:	68 0f d0 02 c0       	push   0xc002d00f
c001e691:	50                   	push   eax
c001e692:	e8 9d 21 fe ff       	call   c0000834 <strcpy>
c001e697:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e69e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e6a2:	83 c4 14             	add    esp,0x14
c001e6a5:	5b                   	pop    ebx
c001e6a6:	5e                   	pop    esi
c001e6a7:	e9 a8 1c fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e6ac <schedule()>:
c001e6ac:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e6b1:	85 c0                	test   eax,eax
c001e6b3:	74 0b                	je     c001e6c0 <schedule()+0x14>
c001e6b5:	c7 05 00 28 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x1
c001e6bf:	c3                   	ret    
c001e6c0:	53                   	push   ebx
c001e6c1:	83 ec 14             	sub    esp,0x14
c001e6c4:	68 24 28 03 c0       	push   0xc0032824
c001e6c9:	e8 cc af 00 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6ce:	83 c4 10             	add    esp,0x10
c001e6d1:	84 c0                	test   al,al
c001e6d3:	75 38                	jne    c001e70d <schedule()+0x61>
c001e6d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6da:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e6dd:	4a                   	dec    edx
c001e6de:	74 32                	je     c001e712 <schedule()+0x66>
c001e6e0:	83 ec 0c             	sub    esp,0xc
c001e6e3:	68 24 28 03 c0       	push   0xc0032824
c001e6e8:	e8 c9 af 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6ed:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001e6f4:	89 c3                	mov    ebx,eax
c001e6f6:	e8 c3 af 00 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e6fb:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e702:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e705:	e8 7e f8 ff ff       	call   c001df88 <switchToThread(ThreadControlBlock*)>
c001e70a:	83 c4 10             	add    esp,0x10
c001e70d:	83 c4 08             	add    esp,0x8
c001e710:	5b                   	pop    ebx
c001e711:	c3                   	ret    
c001e712:	83 ec 08             	sub    esp,0x8
c001e715:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e71c:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e722:	68 24 28 03 c0       	push   0xc0032824
c001e727:	e8 40 b0 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e72c:	83 c4 10             	add    esp,0x10
c001e72f:	eb af                	jmp    c001e6e0 <schedule()+0x34>
c001e731:	90                   	nop

c001e732 <Semaphore::tryAcquire()>:
c001e732:	53                   	push   ebx
c001e733:	83 ec 08             	sub    esp,0x8
c001e736:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e73a:	fa                   	cli    
c001e73b:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e740:	8d 50 01             	lea    edx,[eax+0x1]
c001e743:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001e749:	8b 15 04 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032804
c001e74f:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e752:	89 1d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ebx
c001e758:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e75b:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e75d:	7c 2a                	jl     c001e789 <Semaphore::tryAcquire()+0x57>
c001e75f:	89 15 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,edx
c001e765:	85 d2                	test   edx,edx
c001e767:	75 0a                	jne    c001e773 <Semaphore::tryAcquire()+0x41>
c001e769:	8b 15 00 28 03 c0    	mov    edx,DWORD PTR ds:0xc0032800
c001e76f:	85 d2                	test   edx,edx
c001e771:	75 5b                	jne    c001e7ce <Semaphore::tryAcquire()+0x9c>
c001e773:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e778:	85 c0                	test   eax,eax
c001e77a:	74 07                	je     c001e783 <Semaphore::tryAcquire()+0x51>
c001e77c:	31 c0                	xor    eax,eax
c001e77e:	83 c4 08             	add    esp,0x8
c001e781:	5b                   	pop    ebx
c001e782:	c3                   	ret    
c001e783:	fb                   	sti    
c001e784:	83 c4 08             	add    esp,0x8
c001e787:	5b                   	pop    ebx
c001e788:	c3                   	ret    
c001e789:	43                   	inc    ebx
c001e78a:	89 15 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,edx
c001e790:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e793:	85 d2                	test   edx,edx
c001e795:	75 1f                	jne    c001e7b6 <Semaphore::tryAcquire()+0x84>
c001e797:	8b 0d 00 28 03 c0    	mov    ecx,DWORD PTR ds:0xc0032800
c001e79d:	85 c9                	test   ecx,ecx
c001e79f:	74 15                	je     c001e7b6 <Semaphore::tryAcquire()+0x84>
c001e7a1:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e7ab:	e8 fc fe ff ff       	call   c001e6ac <schedule()>
c001e7b0:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e7b5:	48                   	dec    eax
c001e7b6:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e7bb:	85 c0                	test   eax,eax
c001e7bd:	75 08                	jne    c001e7c7 <Semaphore::tryAcquire()+0x95>
c001e7bf:	fb                   	sti    
c001e7c0:	b0 01                	mov    al,0x1
c001e7c2:	83 c4 08             	add    esp,0x8
c001e7c5:	5b                   	pop    ebx
c001e7c6:	c3                   	ret    
c001e7c7:	b0 01                	mov    al,0x1
c001e7c9:	83 c4 08             	add    esp,0x8
c001e7cc:	5b                   	pop    ebx
c001e7cd:	c3                   	ret    
c001e7ce:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e7d8:	e8 cf fe ff ff       	call   c001e6ac <schedule()>
c001e7dd:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e7e2:	48                   	dec    eax
c001e7e3:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e7e8:	85 c0                	test   eax,eax
c001e7ea:	75 90                	jne    c001e77c <Semaphore::tryAcquire()+0x4a>
c001e7ec:	eb 95                	jmp    c001e783 <Semaphore::tryAcquire()+0x51>

c001e7ee <Semaphore::assertLocked(char const*)>:
c001e7ee:	83 ec 0c             	sub    esp,0xc
c001e7f1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7f5:	fa                   	cli    
c001e7f6:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e7fc:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e801:	8d 48 01             	lea    ecx,[eax+0x1]
c001e804:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001e80a:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e80c:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e80f:	7c 24                	jl     c001e835 <Semaphore::assertLocked(char const*)+0x47>
c001e811:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001e816:	85 c0                	test   eax,eax
c001e818:	75 09                	jne    c001e823 <Semaphore::assertLocked(char const*)+0x35>
c001e81a:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001e81f:	85 c0                	test   eax,eax
c001e821:	75 29                	jne    c001e84c <Semaphore::assertLocked(char const*)+0x5e>
c001e823:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e828:	48                   	dec    eax
c001e829:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e82e:	75 01                	jne    c001e831 <Semaphore::assertLocked(char const*)+0x43>
c001e830:	fb                   	sti    
c001e831:	83 c4 0c             	add    esp,0xc
c001e834:	c3                   	ret    
c001e835:	83 ec 0c             	sub    esp,0xc
c001e838:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e83c:	e8 b8 c0 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001e841:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e846:	83 c4 10             	add    esp,0x10
c001e849:	48                   	dec    eax
c001e84a:	eb c5                	jmp    c001e811 <Semaphore::assertLocked(char const*)+0x23>
c001e84c:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e856:	e8 51 fe ff ff       	call   c001e6ac <schedule()>
c001e85b:	eb c6                	jmp    c001e823 <Semaphore::assertLocked(char const*)+0x35>

c001e85d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e85d:	83 ec 14             	sub    esp,0x14
c001e860:	ff 35 08 28 03 c0    	push   DWORD PTR ds:0xc0032808
c001e866:	68 bc d1 02 c0       	push   0xc002d1bc
c001e86b:	e8 ef 45 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001e870:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e875:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e879:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e87c:	e8 2b fe ff ff       	call   c001e6ac <schedule()>
c001e881:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e886:	83 c4 10             	add    esp,0x10
c001e889:	48                   	dec    eax
c001e88a:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e88f:	85 c0                	test   eax,eax
c001e891:	75 06                	jne    c001e899 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e893:	fb                   	sti    
c001e894:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e899:	83 ec 08             	sub    esp,0x8
c001e89c:	50                   	push   eax
c001e89d:	68 f0 d1 02 c0       	push   0xc002d1f0
c001e8a2:	e8 b8 45 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001e8a7:	83 c4 1c             	add    esp,0x1c
c001e8aa:	c3                   	ret    

c001e8ab <blockTask(TaskState)>:
c001e8ab:	83 ec 0c             	sub    esp,0xc
c001e8ae:	fa                   	cli    
c001e8af:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e8b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e8c1:	e8 e6 fd ff ff       	call   c001e6ac <schedule()>
c001e8c6:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e8cb:	48                   	dec    eax
c001e8cc:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e8d1:	75 01                	jne    c001e8d4 <blockTask(TaskState)+0x29>
c001e8d3:	fb                   	sti    
c001e8d4:	83 c4 0c             	add    esp,0xc
c001e8d7:	c3                   	ret    

c001e8d8 <waitTask(int, int*, int)>:
c001e8d8:	83 ec 18             	sub    esp,0x18
c001e8db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e8e4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e8e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e8eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8f0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e8f3:	6a 07                	push   0x7
c001e8f5:	e8 b1 ff ff ff       	call   c001e8ab <blockTask(TaskState)>
c001e8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e905:	85 d2                	test   edx,edx
c001e907:	74 0a                	je     c001e913 <waitTask(int, int*, int)+0x3b>
c001e909:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e90c:	89 02                	mov    DWORD PTR [edx],eax
c001e90e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e913:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e916:	83 c4 0c             	add    esp,0xc
c001e919:	c3                   	ret    

c001e91a <nanoSleepUntil(unsigned long long)>:
c001e91a:	83 ec 0c             	sub    esp,0xc
c001e91d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e921:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e925:	3b 05 50 f9 02 c0    	cmp    eax,DWORD PTR ds:0xc002f950
c001e92b:	89 d1                	mov    ecx,edx
c001e92d:	1b 0d 54 f9 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f954
c001e933:	73 04                	jae    c001e939 <nanoSleepUntil(unsigned long long)+0x1f>
c001e935:	83 c4 0c             	add    esp,0xc
c001e938:	c3                   	ret    
c001e939:	fa                   	cli    
c001e93a:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e940:	83 ec 08             	sub    esp,0x8
c001e943:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001e949:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e94f:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e952:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e955:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e95b:	68 18 28 03 c0       	push   0xc0032818
c001e960:	e8 07 ae 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e965:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e96c:	e8 3a ff ff ff       	call   c001e8ab <blockTask(TaskState)>
c001e971:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e976:	83 c4 10             	add    esp,0x10
c001e979:	48                   	dec    eax
c001e97a:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001e97f:	85 c0                	test   eax,eax
c001e981:	75 09                	jne    c001e98c <nanoSleepUntil(unsigned long long)+0x72>
c001e983:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001e988:	85 c0                	test   eax,eax
c001e98a:	75 12                	jne    c001e99e <nanoSleepUntil(unsigned long long)+0x84>
c001e98c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001e991:	48                   	dec    eax
c001e992:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001e997:	75 9c                	jne    c001e935 <nanoSleepUntil(unsigned long long)+0x1b>
c001e999:	fb                   	sti    
c001e99a:	83 c4 0c             	add    esp,0xc
c001e99d:	c3                   	ret    
c001e99e:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001e9a8:	e8 ff fc ff ff       	call   c001e6ac <schedule()>
c001e9ad:	eb dd                	jmp    c001e98c <nanoSleepUntil(unsigned long long)+0x72>

c001e9af <nanoSleep(unsigned long long)>:
c001e9af:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c001e9b4:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c001e9ba:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e9be:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e9c2:	e9 53 ff ff ff       	jmp    c001e91a <nanoSleepUntil(unsigned long long)>

c001e9c7 <sleep(unsigned long long)>:
c001e9c7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e9cf:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e9d4:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e9d8:	01 ca                	add    edx,ecx
c001e9da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e9de:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e9e2:	eb cb                	jmp    c001e9af <nanoSleep(unsigned long long)>

c001e9e4 <Semaphore::acquire()>:
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9eb:	fa                   	cli    
c001e9ec:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001e9f1:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001e9f7:	8d 48 01             	lea    ecx,[eax+0x1]
c001e9fa:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001ea00:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001ea03:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001ea05:	7d 28                	jge    c001ea2f <Semaphore::acquire()+0x4b>
c001ea07:	41                   	inc    ecx
c001ea08:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001ea0b:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001ea10:	85 c0                	test   eax,eax
c001ea12:	75 09                	jne    c001ea1d <Semaphore::acquire()+0x39>
c001ea14:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001ea19:	85 c0                	test   eax,eax
c001ea1b:	75 4e                	jne    c001ea6b <Semaphore::acquire()+0x87>
c001ea1d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ea22:	48                   	dec    eax
c001ea23:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ea28:	75 01                	jne    c001ea2b <Semaphore::acquire()+0x47>
c001ea2a:	fb                   	sti    
c001ea2b:	83 c4 0c             	add    esp,0xc
c001ea2e:	c3                   	ret    
c001ea2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea34:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea3b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ea3e:	85 c9                	test   ecx,ecx
c001ea40:	74 3a                	je     c001ea7c <Semaphore::acquire()+0x98>
c001ea42:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ea45:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001ea4b:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001ea4e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea53:	83 ec 0c             	sub    esp,0xc
c001ea56:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001ea59:	6a 05                	push   0x5
c001ea5b:	e8 4b fe ff ff       	call   c001e8ab <blockTask(TaskState)>
c001ea60:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001ea65:	83 c4 10             	add    esp,0x10
c001ea68:	48                   	dec    eax
c001ea69:	eb a0                	jmp    c001ea0b <Semaphore::acquire()+0x27>
c001ea6b:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001ea75:	e8 32 fc ff ff       	call   c001e6ac <schedule()>
c001ea7a:	eb a1                	jmp    c001ea1d <Semaphore::acquire()+0x39>
c001ea7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ea81:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ea84:	eb c8                	jmp    c001ea4e <Semaphore::acquire()+0x6a>

c001ea86 <taskReturned>:
c001ea86:	83 ec 18             	sub    esp,0x18
c001ea89:	68 24 d2 02 c0       	push   0xc002d224
c001ea8e:	e8 66 be ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001ea93:	83 c4 10             	add    esp,0x10
c001ea96:	83 ec 0c             	sub    esp,0xc
c001ea99:	6a 02                	push   0x2
c001ea9b:	e8 0b fe ff ff       	call   c001e8ab <blockTask(TaskState)>
c001eaa0:	fa                   	cli    
c001eaa1:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001eaa7:	e8 00 fc ff ff       	call   c001e6ac <schedule()>
c001eaac:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eab1:	83 c4 10             	add    esp,0x10
c001eab4:	48                   	dec    eax
c001eab5:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eaba:	85 c0                	test   eax,eax
c001eabc:	75 d8                	jne    c001ea96 <taskReturned+0x10>
c001eabe:	fb                   	sti    
c001eabf:	eb d5                	jmp    c001ea96 <taskReturned+0x10>

c001eac1 <Thr::processFromPID(int)>:
c001eac1:	57                   	push   edi
c001eac2:	56                   	push   esi
c001eac3:	53                   	push   ebx
c001eac4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001eac8:	83 ec 0c             	sub    esp,0xc
c001eacb:	68 1a d0 02 c0       	push   0xc002d01a
c001ead0:	e8 8a 43 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ead5:	fa                   	cli    
c001ead6:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001eadc:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001eae3:	e8 ce ab 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eae8:	83 c4 10             	add    esp,0x10
c001eaeb:	89 c7                	mov    edi,eax
c001eaed:	eb 14                	jmp    c001eb03 <Thr::processFromPID(int)+0x42>
c001eaef:	83 ec 0c             	sub    esp,0xc
c001eaf2:	68 24 28 03 c0       	push   0xc0032824
c001eaf7:	e8 ba ab 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eafc:	83 c4 10             	add    esp,0x10
c001eaff:	39 f8                	cmp    eax,edi
c001eb01:	74 49                	je     c001eb4c <Thr::processFromPID(int)+0x8b>
c001eb03:	83 ec 0c             	sub    esp,0xc
c001eb06:	68 24 28 03 c0       	push   0xc0032824
c001eb0b:	e8 a6 ab 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb10:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001eb17:	89 c3                	mov    ebx,eax
c001eb19:	e8 a0 ab 00 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eb1e:	58                   	pop    eax
c001eb1f:	5a                   	pop    edx
c001eb20:	53                   	push   ebx
c001eb21:	68 24 28 03 c0       	push   0xc0032824
c001eb26:	e8 41 ac 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001eb2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb2e:	83 c4 10             	add    esp,0x10
c001eb31:	39 30                	cmp    DWORD PTR [eax],esi
c001eb33:	75 ba                	jne    c001eaef <Thr::processFromPID(int)+0x2e>
c001eb35:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eb3a:	48                   	dec    eax
c001eb3b:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eb40:	74 07                	je     c001eb49 <Thr::processFromPID(int)+0x88>
c001eb42:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb45:	5b                   	pop    ebx
c001eb46:	5e                   	pop    esi
c001eb47:	5f                   	pop    edi
c001eb48:	c3                   	ret    
c001eb49:	fb                   	sti    
c001eb4a:	eb f6                	jmp    c001eb42 <Thr::processFromPID(int)+0x81>
c001eb4c:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eb51:	48                   	dec    eax
c001eb52:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eb57:	75 01                	jne    c001eb5a <Thr::processFromPID(int)+0x99>
c001eb59:	fb                   	sti    
c001eb5a:	83 ec 0c             	sub    esp,0xc
c001eb5d:	68 35 d0 02 c0       	push   0xc002d035
c001eb62:	e8 f8 42 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001eb67:	83 c4 10             	add    esp,0x10
c001eb6a:	31 c0                	xor    eax,eax
c001eb6c:	5b                   	pop    ebx
c001eb6d:	5e                   	pop    esi
c001eb6e:	5f                   	pop    edi
c001eb6f:	c3                   	ret    

c001eb70 <unblockTask(ThreadControlBlock*)>:
c001eb70:	53                   	push   ebx
c001eb71:	83 ec 08             	sub    esp,0x8
c001eb74:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb78:	fa                   	cli    
c001eb79:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001eb7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb82:	85 c0                	test   eax,eax
c001eb84:	74 66                	je     c001ebec <unblockTask(ThreadControlBlock*)+0x7c>
c001eb86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001eb89:	48                   	dec    eax
c001eb8a:	74 31                	je     c001ebbd <unblockTask(ThreadControlBlock*)+0x4d>
c001eb8c:	83 ec 0c             	sub    esp,0xc
c001eb8f:	68 24 28 03 c0       	push   0xc0032824
c001eb94:	e8 1d ab 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb99:	83 c4 10             	add    esp,0x10
c001eb9c:	85 c0                	test   eax,eax
c001eb9e:	75 17                	jne    c001ebb7 <unblockTask(ThreadControlBlock*)+0x47>
c001eba0:	eb 68                	jmp    c001ec0a <unblockTask(ThreadControlBlock*)+0x9a>
c001eba2:	83 ec 08             	sub    esp,0x8
c001eba5:	50                   	push   eax
c001eba6:	68 24 28 03 c0       	push   0xc0032824
c001ebab:	e8 a4 ae 00 00       	call   c0029a54 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001ebb0:	83 c4 10             	add    esp,0x10
c001ebb3:	85 c0                	test   eax,eax
c001ebb5:	74 53                	je     c001ec0a <unblockTask(ThreadControlBlock*)+0x9a>
c001ebb7:	39 c3                	cmp    ebx,eax
c001ebb9:	75 e7                	jne    c001eba2 <unblockTask(ThreadControlBlock*)+0x32>
c001ebbb:	eb 1c                	jmp    c001ebd9 <unblockTask(ThreadControlBlock*)+0x69>
c001ebbd:	83 ec 0c             	sub    esp,0xc
c001ebc0:	68 14 d3 02 c0       	push   0xc002d314
c001ebc5:	e8 95 42 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ebca:	c7 04 24 a0 d2 02 c0 	mov    DWORD PTR [esp],0xc002d2a0
c001ebd1:	e8 89 42 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ebd6:	83 c4 10             	add    esp,0x10
c001ebd9:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ebde:	48                   	dec    eax
c001ebdf:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ebe4:	75 01                	jne    c001ebe7 <unblockTask(ThreadControlBlock*)+0x77>
c001ebe6:	fb                   	sti    
c001ebe7:	83 c4 08             	add    esp,0x8
c001ebea:	5b                   	pop    ebx
c001ebeb:	c3                   	ret    
c001ebec:	83 ec 0c             	sub    esp,0xc
c001ebef:	68 58 d2 02 c0       	push   0xc002d258
c001ebf4:	e8 66 42 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ebf9:	c7 04 24 a0 d2 02 c0 	mov    DWORD PTR [esp],0xc002d2a0
c001ec00:	e8 5a 42 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ec05:	83 c4 10             	add    esp,0x10
c001ec08:	eb cf                	jmp    c001ebd9 <unblockTask(ThreadControlBlock*)+0x69>
c001ec0a:	83 ec 08             	sub    esp,0x8
c001ec0d:	53                   	push   ebx
c001ec0e:	68 24 28 03 c0       	push   0xc0032824
c001ec13:	e8 54 ab 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec18:	83 c4 10             	add    esp,0x10
c001ec1b:	eb bc                	jmp    c001ebd9 <unblockTask(ThreadControlBlock*)+0x69>

c001ec1d <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ec1d:	55                   	push   ebp
c001ec1e:	57                   	push   edi
c001ec1f:	56                   	push   esi
c001ec20:	53                   	push   ebx
c001ec21:	83 ec 1c             	sub    esp,0x1c
c001ec24:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ec28:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec2b:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ec31:	85 ff                	test   edi,edi
c001ec33:	7e 20                	jle    c001ec55 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ec35:	31 f6                	xor    esi,esi
c001ec37:	83 ec 0c             	sub    esp,0xc
c001ec3a:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ec41:	46                   	inc    esi
c001ec42:	e8 7d 0c ff ff       	call   c000f8c4 <free>
c001ec47:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec4a:	83 c4 10             	add    esp,0x10
c001ec4d:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ec53:	7f e2                	jg     c001ec37 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ec55:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ec5f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ec64:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ec67:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ec6a:	d3 c0                	rol    eax,cl
c001ec6c:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ec73:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec76:	89 f7                	mov    edi,esi
c001ec78:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ec80:	0f 85 74 01 00 00    	jne    c001edfa <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ec86:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ec8c:	85 ed                	test   ebp,ebp
c001ec8e:	74 1b                	je     c001ecab <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ec90:	83 ec 0c             	sub    esp,0xc
c001ec93:	55                   	push   ebp
c001ec94:	e8 d5 b9 ff ff       	call   c001a66e <EnvVarContainer::~EnvVarContainer()>
c001ec99:	59                   	pop    ecx
c001ec9a:	5e                   	pop    esi
c001ec9b:	6a 0c                	push   0xc
c001ec9d:	55                   	push   ebp
c001ec9e:	e8 dc 40 ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c001eca3:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	89 f7                	mov    edi,esi
c001ecab:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecb1:	85 c0                	test   eax,eax
c001ecb3:	0f 84 aa 00 00 00    	je     c001ed63 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecb9:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001ecbc:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ecc0:	31 c9                	xor    ecx,ecx
c001ecc2:	eb 10                	jmp    c001ecd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001ecc4:	41                   	inc    ecx
c001ecc5:	83 f9 10             	cmp    ecx,0x10
c001ecc8:	0f 84 95 00 00 00    	je     c001ed63 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ecce:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ecd4:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001ecdb:	d3 fa                	sar    edx,cl
c001ecdd:	83 e2 01             	and    edx,0x1
c001ece0:	74 e2                	je     c001ecc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ece2:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001ece5:	01 ca                	add    edx,ecx
c001ece7:	89 d5                	mov    ebp,edx
c001ece9:	c1 e5 05             	shl    ebp,0x5
c001ecec:	01 ea                	add    edx,ebp
c001ecee:	01 d0                	add    eax,edx
c001ecf0:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001ecf6:	83 fd 07             	cmp    ebp,0x7
c001ecf9:	75 c9                	jne    c001ecc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ecfb:	05 40 02 00 00       	add    eax,0x240
c001ed00:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001ed03:	83 fd ff             	cmp    ebp,0xffffffff
c001ed06:	0f 8c 08 01 00 00    	jl     c001ee14 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001ed0c:	0f 84 b9 01 00 00    	je     c001eecb <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001ed12:	85 ed                	test   ebp,ebp
c001ed14:	0f 84 a0 01 00 00    	je     c001eeba <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001ed1a:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001ed1c:	75 a6                	jne    c001ecc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ed1e:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ed24:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ed28:	01 d0                	add    eax,edx
c001ed2a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001ed2e:	83 ec 0c             	sub    esp,0xc
c001ed31:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001ed37:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ed3a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ed40:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001ed47:	50                   	push   eax
c001ed48:	e8 23 fe ff ff       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c001ed4d:	83 c4 10             	add    esp,0x10
c001ed50:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ed53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ed57:	89 f7                	mov    edi,esi
c001ed59:	41                   	inc    ecx
c001ed5a:	83 f9 10             	cmp    ecx,0x10
c001ed5d:	0f 85 6b ff ff ff    	jne    c001ecce <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001ed63:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001ed69:	85 c0                	test   eax,eax
c001ed6b:	74 5d                	je     c001edca <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed6d:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001ed73:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001ed79:	74 4f                	je     c001edca <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001ed7b:	83 ec 0c             	sub    esp,0xc
c001ed7e:	68 24 28 03 c0       	push   0xc0032824
c001ed83:	e8 2e a9 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed88:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ed8f:	89 c7                	mov    edi,eax
c001ed91:	e8 04 a9 00 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed96:	83 c4 10             	add    esp,0x10
c001ed99:	84 c0                	test   al,al
c001ed9b:	0f 84 e4 00 00 00    	je     c001ee85 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eda1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eda4:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001edaa:	85 d2                	test   edx,edx
c001edac:	74 0f                	je     c001edbd <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001edae:	83 ec 0c             	sub    esp,0xc
c001edb1:	8b 02                	mov    eax,DWORD PTR [edx]
c001edb3:	52                   	push   edx
c001edb4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001edb7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001edba:	83 c4 10             	add    esp,0x10
c001edbd:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001edc7:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001edca:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001edd0:	85 db                	test   ebx,ebx
c001edd2:	74 16                	je     c001edea <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001edd4:	83 ec 0c             	sub    esp,0xc
c001edd7:	53                   	push   ebx
c001edd8:	e8 37 33 ff ff       	call   c0012114 <VAS::~VAS()>
c001eddd:	58                   	pop    eax
c001edde:	5a                   	pop    edx
c001eddf:	6a 14                	push   0x14
c001ede1:	53                   	push   ebx
c001ede2:	e8 98 3f ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c001ede7:	83 c4 10             	add    esp,0x10
c001edea:	83 ec 0c             	sub    esp,0xc
c001eded:	68 4c d0 02 c0       	push   0xc002d04c
c001edf2:	e8 68 40 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001edf7:	83 c4 10             	add    esp,0x10
c001edfa:	83 ec 08             	sub    esp,0x8
c001edfd:	68 3f 07 00 00       	push   0x73f
c001ee02:	68 5a d0 02 c0       	push   0xc002d05a
c001ee07:	e8 53 40 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ee0c:	83 c4 2c             	add    esp,0x2c
c001ee0f:	5b                   	pop    ebx
c001ee10:	5e                   	pop    esi
c001ee11:	5f                   	pop    edi
c001ee12:	5d                   	pop    ebp
c001ee13:	c3                   	ret    
c001ee14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	68 58 d3 02 c0       	push   0xc002d358
c001ee20:	e8 d4 ba ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001ee25:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ee28:	83 c4 10             	add    esp,0x10
c001ee2b:	89 f7                	mov    edi,esi
c001ee2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee31:	e9 8e fe ff ff       	jmp    c001ecc4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ee36:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ee3c:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ee42:	75 1c                	jne    c001ee60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ee44:	83 ec 0c             	sub    esp,0xc
c001ee47:	68 c0 d3 02 c0       	push   0xc002d3c0
c001ee4c:	e8 0e 40 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ee51:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ee58:	e8 4e fa ff ff       	call   c001e8ab <blockTask(TaskState)>
c001ee5d:	83 c4 10             	add    esp,0x10
c001ee60:	83 ec 08             	sub    esp,0x8
c001ee63:	56                   	push   esi
c001ee64:	68 24 28 03 c0       	push   0xc0032824
c001ee69:	e8 fe a8 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee6e:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ee75:	e8 3c a8 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee7a:	83 c4 10             	add    esp,0x10
c001ee7d:	39 f8                	cmp    eax,edi
c001ee7f:	0f 84 1c ff ff ff    	je     c001eda1 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ee85:	83 ec 0c             	sub    esp,0xc
c001ee88:	68 24 28 03 c0       	push   0xc0032824
c001ee8d:	e8 24 a8 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ee92:	c7 04 24 24 28 03 c0 	mov    DWORD PTR [esp],0xc0032824
c001ee99:	89 c6                	mov    esi,eax
c001ee9b:	e8 1e a8 00 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001eea0:	83 c4 10             	add    esp,0x10
c001eea3:	39 f3                	cmp    ebx,esi
c001eea5:	74 b9                	je     c001ee60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eea7:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001eeaa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eead:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001eeb3:	75 ab                	jne    c001ee60 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001eeb5:	e9 7c ff ff ff       	jmp    c001ee36 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001eeba:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eebe:	83 ec 0c             	sub    esp,0xc
c001eec1:	68 8c d3 02 c0       	push   0xc002d38c
c001eec6:	e9 55 ff ff ff       	jmp    c001ee20 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001eecb:	8b 36                	mov    esi,DWORD PTR [esi]
c001eecd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eed1:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001eed4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eed7:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001eedd:	01 d7                	add    edi,edx
c001eedf:	89 f8                	mov    eax,edi
c001eee1:	e9 44 fe ff ff       	jmp    c001ed2a <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001eee6 <cleanerTaskFunction(void*)>:
c001eee6:	53                   	push   ebx
c001eee7:	83 ec 08             	sub    esp,0x8
c001eeea:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eeef:	48                   	dec    eax
c001eef0:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001eef5:	75 01                	jne    c001eef8 <cleanerTaskFunction(void*)+0x12>
c001eef7:	fb                   	sti    
c001eef8:	fa                   	cli    
c001eef9:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001eefe:	80 3d ec 27 03 c0 00 	cmp    BYTE PTR ds:0xc00327ec,0x0
c001ef05:	8d 50 01             	lea    edx,[eax+0x1]
c001ef08:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001ef0e:	0f 84 b9 00 00 00    	je     c001efcd <cleanerTaskFunction(void*)+0xe7>
c001ef14:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ef19:	85 c0                	test   eax,eax
c001ef1b:	75 01                	jne    c001ef1e <cleanerTaskFunction(void*)+0x38>
c001ef1d:	fb                   	sti    
c001ef1e:	c6 05 ec 27 03 c0 00 	mov    BYTE PTR ds:0xc00327ec,0x0
c001ef25:	fa                   	cli    
c001ef26:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ef2c:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001ef32:	fa                   	cli    
c001ef33:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001ef39:	eb 3e                	jmp    c001ef79 <cleanerTaskFunction(void*)+0x93>
c001ef3b:	83 ec 0c             	sub    esp,0xc
c001ef3e:	68 0c 28 03 c0       	push   0xc003280c
c001ef43:	e8 6e a7 00 00       	call   c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ef48:	c7 04 24 0c 28 03 c0 	mov    DWORD PTR [esp],0xc003280c
c001ef4f:	89 c3                	mov    ebx,eax
c001ef51:	e8 68 a7 00 00       	call   c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ef56:	c7 04 24 70 d0 02 c0 	mov    DWORD PTR [esp],0xc002d070
c001ef5d:	e8 fd 3e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ef62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ef65:	e8 b3 fc ff ff       	call   c001ec1d <cleanupTerminatedTask(ThreadControlBlock*)>
c001ef6a:	c7 04 24 89 d0 02 c0 	mov    DWORD PTR [esp],0xc002d089
c001ef71:	e8 e9 3e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	83 ec 0c             	sub    esp,0xc
c001ef7c:	68 0c 28 03 c0       	push   0xc003280c
c001ef81:	e8 14 a7 00 00       	call   c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ef86:	83 c4 10             	add    esp,0x10
c001ef89:	84 c0                	test   al,al
c001ef8b:	74 ae                	je     c001ef3b <cleanerTaskFunction(void*)+0x55>
c001ef8d:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001ef92:	48                   	dec    eax
c001ef93:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001ef98:	75 01                	jne    c001ef9b <cleanerTaskFunction(void*)+0xb5>
c001ef9a:	fb                   	sti    
c001ef9b:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001efa0:	48                   	dec    eax
c001efa1:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001efa6:	0f 85 3e ff ff ff    	jne    c001eeea <cleanerTaskFunction(void*)+0x4>
c001efac:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001efb1:	85 c0                	test   eax,eax
c001efb3:	0f 84 31 ff ff ff    	je     c001eeea <cleanerTaskFunction(void*)+0x4>
c001efb9:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001efc3:	e8 e4 f6 ff ff       	call   c001e6ac <schedule()>
c001efc8:	e9 1d ff ff ff       	jmp    c001eeea <cleanerTaskFunction(void*)+0x4>
c001efcd:	83 ec 0c             	sub    esp,0xc
c001efd0:	6a 02                	push   0x2
c001efd2:	e8 86 f8 ff ff       	call   c001e85d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001efd7:	83 c4 10             	add    esp,0x10
c001efda:	e9 3f ff ff ff       	jmp    c001ef1e <cleanerTaskFunction(void*)+0x38>

c001efdf <terminateTask(int)>:
c001efdf:	83 ec 14             	sub    esp,0x14
c001efe2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001efe7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001efea:	83 c0 0c             	add    eax,0xc
c001efed:	50                   	push   eax
c001efee:	68 e8 d3 02 c0       	push   0xc002d3e8
c001eff3:	e8 67 3e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001eff8:	fa                   	cli    
c001eff9:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001efff:	ff 05 04 28 03 c0    	inc    DWORD PTR ds:0xc0032804
c001f005:	fa                   	cli    
c001f006:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f00c:	c7 04 24 9c d0 02 c0 	mov    DWORD PTR [esp],0xc002d09c
c001f013:	e8 47 3e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f018:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001f01c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f021:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001f024:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f029:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f02c:	5a                   	pop    edx
c001f02d:	59                   	pop    ecx
c001f02e:	50                   	push   eax
c001f02f:	68 0c 28 03 c0       	push   0xc003280c
c001f034:	e8 33 a7 00 00       	call   c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001f039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f03e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001f045:	c7 04 24 b6 d0 02 c0 	mov    DWORD PTR [esp],0xc002d0b6
c001f04c:	e8 0e 3e ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f051:	83 c4 10             	add    esp,0x10
c001f054:	a1 e8 27 03 c0       	mov    eax,ds:0xc00327e8
c001f059:	85 c0                	test   eax,eax
c001f05b:	0f 84 8d 00 00 00    	je     c001f0ee <terminateTask(int)+0x10f>
c001f061:	83 ec 0c             	sub    esp,0xc
c001f064:	68 d0 d0 02 c0       	push   0xc002d0d0
c001f069:	e8 f1 3d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f06e:	58                   	pop    eax
c001f06f:	c6 05 ec 27 03 c0 01 	mov    BYTE PTR ds:0xc00327ec,0x1
c001f076:	ff 35 e8 27 03 c0    	push   DWORD PTR ds:0xc00327e8
c001f07c:	e8 ef fa ff ff       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c001f081:	c7 04 24 ea d0 02 c0 	mov    DWORD PTR [esp],0xc002d0ea
c001f088:	e8 d2 3d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f08d:	83 c4 10             	add    esp,0x10
c001f090:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f095:	48                   	dec    eax
c001f096:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f09b:	75 01                	jne    c001f09e <terminateTask(int)+0xbf>
c001f09d:	fb                   	sti    
c001f09e:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f0a3:	48                   	dec    eax
c001f0a4:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001f0a9:	75 09                	jne    c001f0b4 <terminateTask(int)+0xd5>
c001f0ab:	83 3d 00 28 03 c0 00 	cmp    DWORD PTR ds:0xc0032800,0x0
c001f0b2:	75 4c                	jne    c001f100 <terminateTask(int)+0x121>
c001f0b4:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f0b9:	48                   	dec    eax
c001f0ba:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f0bf:	75 01                	jne    c001f0c2 <terminateTask(int)+0xe3>
c001f0c1:	fb                   	sti    
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	68 22 d1 02 c0       	push   0xc002d122
c001f0ca:	e8 90 3d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f0cf:	83 c4 10             	add    esp,0x10
c001f0d2:	fa                   	cli    
c001f0d3:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f0d9:	e8 ce f5 ff ff       	call   c001e6ac <schedule()>
c001f0de:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f0e3:	48                   	dec    eax
c001f0e4:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f0e9:	75 e7                	jne    c001f0d2 <terminateTask(int)+0xf3>
c001f0eb:	fb                   	sti    
c001f0ec:	eb e4                	jmp    c001f0d2 <terminateTask(int)+0xf3>
c001f0ee:	83 ec 0c             	sub    esp,0xc
c001f0f1:	68 04 d1 02 c0       	push   0xc002d104
c001f0f6:	e8 64 3d ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f0fb:	83 c4 10             	add    esp,0x10
c001f0fe:	eb 90                	jmp    c001f090 <terminateTask(int)+0xb1>
c001f100:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001f10a:	e8 9d f5 ff ff       	call   c001e6ac <schedule()>
c001f10f:	eb a3                	jmp    c001f0b4 <terminateTask(int)+0xd5>

c001f111 <Thr::terminateFromIRQ(int)>:
c001f111:	83 ec 18             	sub    esp,0x18
c001f114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f118:	e8 c2 fe ff ff       	call   c001efdf <terminateTask(int)>
c001f11d:	90                   	nop

c001f11e <Semaphore::release()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f125:	fa                   	cli    
c001f126:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f12b:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f131:	8d 48 01             	lea    ecx,[eax+0x1]
c001f134:	89 0d 04 28 03 c0    	mov    DWORD PTR ds:0xc0032804,ecx
c001f13a:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001f13d:	85 c9                	test   ecx,ecx
c001f13f:	74 3c                	je     c001f17d <Semaphore::release()+0x5f>
c001f141:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001f144:	83 ec 0c             	sub    esp,0xc
c001f147:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001f14a:	51                   	push   ecx
c001f14b:	e8 20 fa ff ff       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c001f150:	a1 04 28 03 c0       	mov    eax,ds:0xc0032804
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	48                   	dec    eax
c001f159:	a3 04 28 03 c0       	mov    ds:0xc0032804,eax
c001f15e:	85 c0                	test   eax,eax
c001f160:	75 09                	jne    c001f16b <Semaphore::release()+0x4d>
c001f162:	a1 00 28 03 c0       	mov    eax,ds:0xc0032800
c001f167:	85 c0                	test   eax,eax
c001f169:	75 17                	jne    c001f182 <Semaphore::release()+0x64>
c001f16b:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f170:	48                   	dec    eax
c001f171:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f176:	75 01                	jne    c001f179 <Semaphore::release()+0x5b>
c001f178:	fb                   	sti    
c001f179:	83 c4 0c             	add    esp,0xc
c001f17c:	c3                   	ret    
c001f17d:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001f180:	eb d7                	jmp    c001f159 <Semaphore::release()+0x3b>
c001f182:	c7 05 00 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032800,0x0
c001f18c:	e8 1b f5 ff ff       	call   c001e6ac <schedule()>
c001f191:	eb d8                	jmp    c001f16b <Semaphore::release()+0x4d>

c001f193 <__static_initialization_and_destruction_0(int, int)>:
c001f193:	83 ec 0c             	sub    esp,0xc
c001f196:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f19b:	0f 85 88 00 00 00    	jne    c001f229 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f1a9:	75 7e                	jne    c001f229 <__static_initialization_and_destruction_0(int, int)+0x96>
c001f1ab:	83 ec 0c             	sub    esp,0xc
c001f1ae:	68 24 28 03 c0       	push   0xc0032824
c001f1b3:	e8 44 a8 00 00       	call   c00299fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1b8:	83 c4 10             	add    esp,0x10
c001f1bb:	83 ec 04             	sub    esp,0x4
c001f1be:	68 e8 e1 02 c0       	push   0xc002e1e8
c001f1c3:	68 24 28 03 c0       	push   0xc0032824
c001f1c8:	68 b0 99 02 c0       	push   0xc00299b0
c001f1cd:	e8 27 3b ff ff       	call   c0012cf9 <__cxa_atexit>
c001f1d2:	83 c4 10             	add    esp,0x10
c001f1d5:	83 ec 0c             	sub    esp,0xc
c001f1d8:	68 18 28 03 c0       	push   0xc0032818
c001f1dd:	e8 1a a8 00 00       	call   c00299fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f1e2:	83 c4 10             	add    esp,0x10
c001f1e5:	83 ec 04             	sub    esp,0x4
c001f1e8:	68 e8 e1 02 c0       	push   0xc002e1e8
c001f1ed:	68 18 28 03 c0       	push   0xc0032818
c001f1f2:	68 b0 99 02 c0       	push   0xc00299b0
c001f1f7:	e8 fd 3a ff ff       	call   c0012cf9 <__cxa_atexit>
c001f1fc:	83 c4 10             	add    esp,0x10
c001f1ff:	83 ec 0c             	sub    esp,0xc
c001f202:	68 0c 28 03 c0       	push   0xc003280c
c001f207:	e8 f0 a7 00 00       	call   c00299fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001f20c:	83 c4 10             	add    esp,0x10
c001f20f:	83 ec 04             	sub    esp,0x4
c001f212:	68 e8 e1 02 c0       	push   0xc002e1e8
c001f217:	68 0c 28 03 c0       	push   0xc003280c
c001f21c:	68 b0 99 02 c0       	push   0xc00299b0
c001f221:	e8 d3 3a ff ff       	call   c0012cf9 <__cxa_atexit>
c001f226:	83 c4 10             	add    esp,0x10
c001f229:	90                   	nop
c001f22a:	83 c4 0c             	add    esp,0xc
c001f22d:	c3                   	ret    

c001f22e <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f22e:	83 ec 0c             	sub    esp,0xc
c001f231:	83 ec 08             	sub    esp,0x8
c001f234:	68 ff ff 00 00       	push   0xffff
c001f239:	6a 01                	push   0x1
c001f23b:	e8 53 ff ff ff       	call   c001f193 <__static_initialization_and_destruction_0(int, int)>
c001f240:	83 c4 10             	add    esp,0x10
c001f243:	83 c4 0c             	add    esp,0xc
c001f246:	c3                   	ret    

c001f247 <Vm::inbv(unsigned short)>:
c001f247:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f24b:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f250:	75 06                	jne    c001f258 <Vm::inbv(unsigned short)+0x11>
c001f252:	a0 6c 28 03 c0       	mov    al,ds:0xc003286c
c001f257:	c3                   	ret    
c001f258:	ec                   	in     al,dx
c001f259:	c3                   	ret    

c001f25a <Vm::outbv(unsigned short, unsigned char)>:
c001f25a:	53                   	push   ebx
c001f25b:	83 ec 08             	sub    esp,0x8
c001f25e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f262:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f266:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f26b:	75 38                	jne    c001f2a5 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f26d:	0f b6 c3             	movzx  eax,bl
c001f270:	51                   	push   ecx
c001f271:	51                   	push   ecx
c001f272:	50                   	push   eax
c001f273:	68 07 d4 02 c0       	push   0xc002d407
c001f278:	e8 e2 3b ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f27d:	8b 15 6c 28 03 c0    	mov    edx,DWORD PTR ds:0xc003286c
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	8d 42 01             	lea    eax,[edx+0x1]
c001f289:	88 9a 80 28 03 c0    	mov    BYTE PTR [edx-0x3ffcd780],bl
c001f28f:	a3 6c 28 03 c0       	mov    ds:0xc003286c,eax
c001f294:	83 f8 20             	cmp    eax,0x20
c001f297:	75 0f                	jne    c001f2a8 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f299:	c7 05 6c 28 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x1f
c001f2a3:	eb 03                	jmp    c001f2a8 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f2a5:	88 d8                	mov    al,bl
c001f2a7:	ee                   	out    dx,al
c001f2a8:	83 c4 08             	add    esp,0x8
c001f2ab:	5b                   	pop    ebx
c001f2ac:	c3                   	ret    

c001f2ad <Vm::realToLinear(unsigned short, unsigned short)>:
c001f2ad:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f2b2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f2b7:	c1 e0 04             	shl    eax,0x4
c001f2ba:	01 d0                	add    eax,edx
c001f2bc:	c3                   	ret    

c001f2bd <Vm::getSegment(unsigned int)>:
c001f2bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c1:	c1 e8 10             	shr    eax,0x10
c001f2c4:	c3                   	ret    

c001f2c5 <Vm::getOffset(unsigned int)>:
c001f2c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2c9:	c3                   	ret    

c001f2ca <Vm::mainloop2()>:
c001f2ca:	83 ec 18             	sub    esp,0x18
c001f2cd:	fa                   	cli    
c001f2ce:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f2d4:	6a 02                	push   0x2
c001f2d6:	c6 05 65 28 03 c0 01 	mov    BYTE PTR ds:0xc0032865,0x1
c001f2dd:	e8 7b f5 ff ff       	call   c001e85d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f2e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2e7:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f2eb:	52                   	push   edx
c001f2ec:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f2f0:	52                   	push   edx
c001f2f1:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f2f5:	52                   	push   edx
c001f2f6:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f2fa:	50                   	push   eax
c001f2fb:	e8 fa 0f fe ff       	call   c00002fa <goToVM86>
c001f300:	83 c4 2c             	add    esp,0x2c
c001f303:	c3                   	ret    

c001f304 <Vm::mainVm8086Loop(void*)>:
c001f304:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f309:	48                   	dec    eax
c001f30a:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f30f:	75 01                	jne    c001f312 <Vm::mainVm8086Loop(void*)+0xe>
c001f311:	fb                   	sti    
c001f312:	eb b6                	jmp    c001f2ca <Vm::mainloop2()>

c001f314 <Vm::mainloop3(unsigned long)>:
c001f314:	83 ec 18             	sub    esp,0x18
c001f317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f31b:	fa                   	cli    
c001f31c:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f322:	6a 02                	push   0x2
c001f324:	c6 05 64 28 03 c0 01 	mov    BYTE PTR ds:0xc0032864,0x1
c001f32b:	a3 60 28 03 c0       	mov    ds:0xc0032860,eax
c001f330:	e8 28 f5 ff ff       	call   c001e85d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f335:	83 c4 1c             	add    esp,0x1c
c001f338:	eb 90                	jmp    c001f2ca <Vm::mainloop2()>

c001f33a <Vm::initialise8086()>:
c001f33a:	83 ec 0c             	sub    esp,0xc
c001f33d:	68 80 00 00 00       	push   0x80
c001f342:	6a 00                	push   0x0
c001f344:	68 04 f3 01 c0       	push   0xc001f304
c001f349:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001f34f:	e8 14 f1 ff ff       	call   c001e468 <Process::createThread(void (*)(void*), void*, int)>
c001f354:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f35b:	a3 68 28 03 c0       	mov    ds:0xc0032868,eax
c001f360:	68 00 01 00 00       	push   0x100
c001f365:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c001f36a:	6a 00                	push   0x0
c001f36c:	6a 00                	push   0x0
c001f36e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f374:	e8 0d 32 ff ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f379:	83 c4 2c             	add    esp,0x2c
c001f37c:	c3                   	ret    

c001f37d <Vm::finish8086()>:
c001f37d:	53                   	push   ebx
c001f37e:	83 ec 08             	sub    esp,0x8
c001f381:	fa                   	cli    
c001f382:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f388:	80 3d 64 28 03 c0 00 	cmp    BYTE PTR ds:0xc0032864,0x0
c001f38f:	75 15                	jne    c001f3a6 <Vm::finish8086()+0x29>
c001f391:	e8 16 f3 ff ff       	call   c001e6ac <schedule()>
c001f396:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f39b:	48                   	dec    eax
c001f39c:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f3a1:	75 de                	jne    c001f381 <Vm::finish8086()+0x4>
c001f3a3:	fb                   	sti    
c001f3a4:	eb db                	jmp    c001f381 <Vm::finish8086()+0x4>
c001f3a6:	83 ec 0c             	sub    esp,0xc
c001f3a9:	8b 1d 60 28 03 c0    	mov    ebx,DWORD PTR ds:0xc0032860
c001f3af:	ff 35 68 28 03 c0    	push   DWORD PTR ds:0xc0032868
c001f3b5:	c6 05 64 28 03 c0 00 	mov    BYTE PTR ds:0xc0032864,0x0
c001f3bc:	e8 af f7 ff ff       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c001f3c1:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f3c6:	83 c4 10             	add    esp,0x10
c001f3c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f3cc:	89 15 08 28 03 c0    	mov    DWORD PTR ds:0xc0032808,edx
c001f3d2:	85 d2                	test   edx,edx
c001f3d4:	75 01                	jne    c001f3d7 <Vm::finish8086()+0x5a>
c001f3d6:	fb                   	sti    
c001f3d7:	89 d8                	mov    eax,ebx
c001f3d9:	83 c4 08             	add    esp,0x8
c001f3dc:	5b                   	pop    ebx
c001f3dd:	c3                   	ret    

c001f3de <Vm::getOutput8086(unsigned char*)>:
c001f3de:	57                   	push   edi
c001f3df:	8b 0d 6c 28 03 c0    	mov    ecx,DWORD PTR ds:0xc003286c
c001f3e5:	56                   	push   esi
c001f3e6:	be 80 28 03 c0       	mov    esi,0xc0032880
c001f3eb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f3ef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f3f1:	a1 6c 28 03 c0       	mov    eax,ds:0xc003286c
c001f3f6:	5e                   	pop    esi
c001f3f7:	c7 05 6c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x0
c001f401:	5f                   	pop    edi
c001f402:	c3                   	ret    

c001f403 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f403:	55                   	push   ebp
c001f404:	57                   	push   edi
c001f405:	56                   	push   esi
c001f406:	53                   	push   ebx
c001f407:	83 ec 2c             	sub    esp,0x2c
c001f40a:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f40e:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f412:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f416:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f41a:	fa                   	cli    
c001f41b:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c001f421:	0f b6 35 65 28 03 c0 	movzx  esi,BYTE PTR ds:0xc0032865
c001f428:	89 f0                	mov    eax,esi
c001f42a:	84 c0                	test   al,al
c001f42c:	75 1d                	jne    c001f44b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f42e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f432:	e8 75 f2 ff ff       	call   c001e6ac <schedule()>
c001f437:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f43c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f440:	48                   	dec    eax
c001f441:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f446:	75 d2                	jne    c001f41a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f448:	fb                   	sti    
c001f449:	eb cf                	jmp    c001f41a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f44b:	a1 68 28 03 c0       	mov    eax,ds:0xc0032868
c001f450:	c7 05 6c 28 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003286c,0x0
c001f45a:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f45e:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f462:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f466:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f46a:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f46e:	50                   	push   eax
c001f46f:	6a 20                	push   0x20
c001f471:	6a 00                	push   0x0
c001f473:	68 80 28 03 c0       	push   0xc0032880
c001f478:	e8 fb 12 fe ff       	call   c0000778 <memset>
c001f47d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f484:	e8 2b 04 ff ff       	call   c000f8b4 <malloc>
c001f489:	83 c4 0c             	add    esp,0xc
c001f48c:	89 c3                	mov    ebx,eax
c001f48e:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c001f494:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f498:	50                   	push   eax
c001f499:	e8 20 3f ff ff       	call   c00133be <File::File(char const*, Process*)>
c001f49e:	83 c4 10             	add    esp,0x10
c001f4a1:	85 db                	test   ebx,ebx
c001f4a3:	75 0a                	jne    c001f4af <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f4a5:	83 ec 0c             	sub    esp,0xc
c001f4a8:	68 23 d4 02 c0       	push   0xc002d423
c001f4ad:	eb 3e                	jmp    c001f4ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4af:	50                   	push   eax
c001f4b0:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f4b4:	50                   	push   eax
c001f4b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f4b9:	50                   	push   eax
c001f4ba:	53                   	push   ebx
c001f4bb:	e8 0e 42 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c001f4c0:	83 c4 10             	add    esp,0x10
c001f4c3:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f4c8:	74 0a                	je     c001f4d4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f4ca:	83 ec 0c             	sub    esp,0xc
c001f4cd:	68 37 d4 02 c0       	push   0xc002d437
c001f4d2:	eb 19                	jmp    c001f4ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f4d4:	51                   	push   ecx
c001f4d5:	51                   	push   ecx
c001f4d6:	6a 01                	push   0x1
c001f4d8:	53                   	push   ebx
c001f4d9:	e8 44 3f ff ff       	call   c0013422 <File::open(FileOpenMode)>
c001f4de:	83 c4 10             	add    esp,0x10
c001f4e1:	85 c0                	test   eax,eax
c001f4e3:	74 24                	je     c001f509 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f4e5:	83 ec 0c             	sub    esp,0xc
c001f4e8:	68 50 d4 02 c0       	push   0xc002d450
c001f4ed:	e8 07 b4 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c001f4f2:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f4f7:	83 c4 10             	add    esp,0x10
c001f4fa:	48                   	dec    eax
c001f4fb:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f500:	85 c0                	test   eax,eax
c001f502:	75 01                	jne    c001f505 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f504:	fb                   	sti    
c001f505:	31 f6                	xor    esi,esi
c001f507:	eb 58                	jmp    c001f561 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f509:	0f b7 ed             	movzx  ebp,bp
c001f50c:	50                   	push   eax
c001f50d:	0f b7 ff             	movzx  edi,di
c001f510:	50                   	push   eax
c001f511:	55                   	push   ebp
c001f512:	57                   	push   edi
c001f513:	e8 95 fd ff ff       	call   c001f2ad <Vm::realToLinear(unsigned short, unsigned short)>
c001f518:	5a                   	pop    edx
c001f519:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f51b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f51f:	51                   	push   ecx
c001f520:	50                   	push   eax
c001f521:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f525:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f529:	53                   	push   ebx
c001f52a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f52d:	83 c4 14             	add    esp,0x14
c001f530:	53                   	push   ebx
c001f531:	e8 4a 3f ff ff       	call   c0013480 <File::close()>
c001f536:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c001f53b:	83 c4 10             	add    esp,0x10
c001f53e:	48                   	dec    eax
c001f53f:	c6 05 65 28 03 c0 00 	mov    BYTE PTR ds:0xc0032865,0x0
c001f546:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c001f54b:	85 c0                	test   eax,eax
c001f54d:	75 01                	jne    c001f550 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f54f:	fb                   	sti    
c001f550:	83 ec 0c             	sub    esp,0xc
c001f553:	ff 35 68 28 03 c0    	push   DWORD PTR ds:0xc0032868
c001f559:	e8 12 f6 ff ff       	call   c001eb70 <unblockTask(ThreadControlBlock*)>
c001f55e:	83 c4 10             	add    esp,0x10
c001f561:	83 c4 2c             	add    esp,0x2c
c001f564:	89 f0                	mov    eax,esi
c001f566:	5b                   	pop    ebx
c001f567:	5e                   	pop    esi
c001f568:	5f                   	pop    edi
c001f569:	5d                   	pop    ebp
c001f56a:	c3                   	ret    

c001f56b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f56b:	57                   	push   edi
c001f56c:	56                   	push   esi
c001f56d:	53                   	push   ebx
c001f56e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f572:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f576:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f57a:	83 e8 06             	sub    eax,0x6
c001f57d:	0f b7 c0             	movzx  eax,ax
c001f580:	50                   	push   eax
c001f581:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f586:	50                   	push   eax
c001f587:	e8 21 fd ff ff       	call   c001f2ad <Vm::realToLinear(unsigned short, unsigned short)>
c001f58c:	5a                   	pop    edx
c001f58d:	5e                   	pop    esi
c001f58e:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f591:	8d 56 fa             	lea    edx,[esi-0x6]
c001f594:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f59a:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f59d:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f5a0:	83 c2 02             	add    edx,0x2
c001f5a3:	66 89 10             	mov    WORD PTR [eax],dx
c001f5a6:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f5a9:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f5ad:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f5b0:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f5b4:	89 d6                	mov    esi,edx
c001f5b6:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f5bc:	66 81 e6 ff fd       	and    si,0xfdff
c001f5c1:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f5c5:	74 07                	je     c001f5ce <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f5c7:	89 d6                	mov    esi,edx
c001f5c9:	66 81 ce 00 02       	or     si,0x200
c001f5ce:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f5d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f5d7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f5db:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f5e3:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f5e6:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f5ee:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f5f1:	5b                   	pop    ebx
c001f5f2:	5e                   	pop    esi
c001f5f3:	5f                   	pop    edi
c001f5f4:	c3                   	ret    

c001f5f5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f5f5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f5fa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f5ff:	c1 e0 04             	shl    eax,0x4
c001f602:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f605:	c3                   	ret    

c001f606 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f606:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f60b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f610:	c1 e0 04             	shl    eax,0x4
c001f613:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f617:	c3                   	ret    

c001f618 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f618:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f61d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f622:	c1 e0 04             	shl    eax,0x4
c001f625:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f628:	c3                   	ret    

c001f629 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f629:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f62e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f633:	c1 e0 04             	shl    eax,0x4
c001f636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f63a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f63d:	c3                   	ret    

c001f63e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f63e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f643:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f648:	c1 e0 04             	shl    eax,0x4
c001f64b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f64f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f653:	c3                   	ret    

c001f654 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f654:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f659:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f65e:	c1 e0 04             	shl    eax,0x4
c001f661:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f665:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f668:	c3                   	ret    

c001f669 <Vm::faultHandler(regs*)>:
c001f669:	55                   	push   ebp
c001f66a:	57                   	push   edi
c001f66b:	56                   	push   esi
c001f66c:	53                   	push   ebx
c001f66d:	83 ec 1c             	sub    esp,0x1c
c001f670:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f674:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f677:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f67a:	0f b7 c1             	movzx  eax,cx
c001f67d:	50                   	push   eax
c001f67e:	0f b7 c3             	movzx  eax,bx
c001f681:	c1 e3 04             	shl    ebx,0x4
c001f684:	50                   	push   eax
c001f685:	e8 23 fc ff ff       	call   c001f2ad <Vm::realToLinear(unsigned short, unsigned short)>
c001f68a:	5a                   	pop    edx
c001f68b:	89 c5                	mov    ebp,eax
c001f68d:	5e                   	pop    esi
c001f68e:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f692:	50                   	push   eax
c001f693:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f697:	50                   	push   eax
c001f698:	e8 10 fc ff ff       	call   c001f2ad <Vm::realToLinear(unsigned short, unsigned short)>
c001f69d:	01 cb                	add    ebx,ecx
c001f69f:	89 c6                	mov    esi,eax
c001f6a1:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f6a5:	50                   	push   eax
c001f6a6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6aa:	50                   	push   eax
c001f6ab:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6af:	50                   	push   eax
c001f6b0:	55                   	push   ebp
c001f6b1:	53                   	push   ebx
c001f6b2:	b3 06                	mov    bl,0x6
c001f6b4:	68 69 d4 02 c0       	push   0xc002d469
c001f6b9:	e8 a1 37 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f6be:	83 c4 20             	add    esp,0x20
c001f6c1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f6c6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f6cb:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f6cf:	3c 9d                	cmp    al,0x9d
c001f6d1:	0f 84 d7 02 00 00    	je     c001f9ae <Vm::faultHandler(regs*)+0x345>
c001f6d7:	0f 87 a3 00 00 00    	ja     c001f780 <Vm::faultHandler(regs*)+0x117>
c001f6dd:	3c 66                	cmp    al,0x66
c001f6df:	0f 84 15 02 00 00    	je     c001f8fa <Vm::faultHandler(regs*)+0x291>
c001f6e5:	77 5f                	ja     c001f746 <Vm::faultHandler(regs*)+0xdd>
c001f6e7:	3c 36                	cmp    al,0x36
c001f6e9:	0f 84 f1 01 00 00    	je     c001f8e0 <Vm::faultHandler(regs*)+0x277>
c001f6ef:	77 28                	ja     c001f719 <Vm::faultHandler(regs*)+0xb0>
c001f6f1:	3c 26                	cmp    al,0x26
c001f6f3:	0f 84 99 01 00 00    	je     c001f892 <Vm::faultHandler(regs*)+0x229>
c001f6f9:	3c 2e                	cmp    al,0x2e
c001f6fb:	0f 85 3b 07 00 00    	jne    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f701:	83 ec 0c             	sub    esp,0xc
c001f704:	31 db                	xor    ebx,ebx
c001f706:	68 7e d4 02 c0       	push   0xc002d47e
c001f70b:	e8 4f 37 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f710:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	45                   	inc    ebp
c001f717:	eb b2                	jmp    c001f6cb <Vm::faultHandler(regs*)+0x62>
c001f719:	3c 64                	cmp    al,0x64
c001f71b:	0f 84 8b 01 00 00    	je     c001f8ac <Vm::faultHandler(regs*)+0x243>
c001f721:	0f 87 9f 01 00 00    	ja     c001f8c6 <Vm::faultHandler(regs*)+0x25d>
c001f727:	3c 3e                	cmp    al,0x3e
c001f729:	0f 85 0d 07 00 00    	jne    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f72f:	83 ec 0c             	sub    esp,0xc
c001f732:	b3 01                	mov    bl,0x1
c001f734:	68 82 d4 02 c0       	push   0xc002d482
c001f739:	e8 21 37 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f73e:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f741:	83 c4 10             	add    esp,0x10
c001f744:	eb d0                	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f746:	3c 6d                	cmp    al,0x6d
c001f748:	0f 84 af 03 00 00    	je     c001fafd <Vm::faultHandler(regs*)+0x494>
c001f74e:	77 15                	ja     c001f765 <Vm::faultHandler(regs*)+0xfc>
c001f750:	3c 67                	cmp    al,0x67
c001f752:	0f 84 bf 01 00 00    	je     c001f917 <Vm::faultHandler(regs*)+0x2ae>
c001f758:	3c 6c                	cmp    al,0x6c
c001f75a:	0f 84 3f 03 00 00    	je     c001fa9f <Vm::faultHandler(regs*)+0x436>
c001f760:	e9 d7 06 00 00       	jmp    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f765:	3c 6f                	cmp    al,0x6f
c001f767:	0f 84 a4 04 00 00    	je     c001fc11 <Vm::faultHandler(regs*)+0x5a8>
c001f76d:	0f 82 11 04 00 00    	jb     c001fb84 <Vm::faultHandler(regs*)+0x51b>
c001f773:	3c 9c                	cmp    al,0x9c
c001f775:	0f 84 ba 01 00 00    	je     c001f935 <Vm::faultHandler(regs*)+0x2cc>
c001f77b:	e9 bc 06 00 00       	jmp    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f780:	3c ec                	cmp    al,0xec
c001f782:	0f 84 24 06 00 00    	je     c001fdac <Vm::faultHandler(regs*)+0x743>
c001f788:	0f 87 93 00 00 00    	ja     c001f821 <Vm::faultHandler(regs*)+0x1b8>
c001f78e:	3c e4                	cmp    al,0xe4
c001f790:	0f 84 5c 05 00 00    	je     c001fcf2 <Vm::faultHandler(regs*)+0x689>
c001f796:	77 6a                	ja     c001f802 <Vm::faultHandler(regs*)+0x199>
c001f798:	3c cd                	cmp    al,0xcd
c001f79a:	0f 84 7e 02 00 00    	je     c001fa1e <Vm::faultHandler(regs*)+0x3b5>
c001f7a0:	3c cf                	cmp    al,0xcf
c001f7a2:	0f 85 94 06 00 00    	jne    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f7a8:	83 ec 0c             	sub    esp,0xc
c001f7ab:	68 c6 d4 02 c0       	push   0xc002d4c6
c001f7b0:	e8 aa 36 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f7b5:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f7b8:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f7bb:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f7bf:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f7c2:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f7c6:	0d 00 02 02 00       	or     eax,0x20200
c001f7cb:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7ce:	56                   	push   esi
c001f7cf:	53                   	push   ebx
c001f7d0:	52                   	push   edx
c001f7d1:	68 cc d4 02 c0       	push   0xc002d4cc
c001f7d6:	e8 84 36 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f7db:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f7df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7e5:	66 c1 e8 09          	shr    ax,0x9
c001f7e9:	83 e0 01             	and    eax,0x1
c001f7ec:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7ef:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7f2:	83 c0 06             	add    eax,0x6
c001f7f5:	25 ff ff 00 00       	and    eax,0xffff
c001f7fa:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7fd:	e9 95 02 00 00       	jmp    c001fa97 <Vm::faultHandler(regs*)+0x42e>
c001f802:	3c e6                	cmp    al,0xe6
c001f804:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f808:	0f 84 4e 05 00 00    	je     c001fd5c <Vm::faultHandler(regs*)+0x6f3>
c001f80e:	0f 82 0a 05 00 00    	jb     c001fd1e <Vm::faultHandler(regs*)+0x6b5>
c001f814:	3c e7                	cmp    al,0xe7
c001f816:	0f 84 69 05 00 00    	je     c001fd85 <Vm::faultHandler(regs*)+0x71c>
c001f81c:	e9 1b 06 00 00       	jmp    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f821:	3c ef                	cmp    al,0xef
c001f823:	0f 84 e6 05 00 00    	je     c001fe0f <Vm::faultHandler(regs*)+0x7a6>
c001f829:	77 37                	ja     c001f862 <Vm::faultHandler(regs*)+0x1f9>
c001f82b:	3c ed                	cmp    al,0xed
c001f82d:	0f 84 a3 05 00 00    	je     c001fdd6 <Vm::faultHandler(regs*)+0x76d>
c001f833:	3c ee                	cmp    al,0xee
c001f835:	0f 85 01 06 00 00    	jne    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f83b:	52                   	push   edx
c001f83c:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f83f:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f842:	68 67 d5 02 c0       	push   0xc002d567
c001f847:	e8 13 36 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f84c:	59                   	pop    ecx
c001f84d:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f851:	5b                   	pop    ebx
c001f852:	50                   	push   eax
c001f853:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f857:	50                   	push   eax
c001f858:	e8 fd f9 ff ff       	call   c001f25a <Vm::outbv(unsigned short, unsigned char)>
c001f85d:	e9 a5 05 00 00       	jmp    c001fe07 <Vm::faultHandler(regs*)+0x79e>
c001f862:	3c fa                	cmp    al,0xfa
c001f864:	0f 84 f7 01 00 00    	je     c001fa61 <Vm::faultHandler(regs*)+0x3f8>
c001f86a:	3c fb                	cmp    al,0xfb
c001f86c:	0f 84 0a 02 00 00    	je     c001fa7c <Vm::faultHandler(regs*)+0x413>
c001f872:	3c f3                	cmp    al,0xf3
c001f874:	0f 85 c2 05 00 00    	jne    c001fe3c <Vm::faultHandler(regs*)+0x7d3>
c001f87a:	83 ec 0c             	sub    esp,0xc
c001f87d:	68 9f d4 02 c0       	push   0xc002d49f
c001f882:	e8 d8 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f887:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f88a:	83 c4 10             	add    esp,0x10
c001f88d:	e9 84 fe ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f892:	83 ec 0c             	sub    esp,0xc
c001f895:	b3 02                	mov    bl,0x2
c001f897:	68 7a d4 02 c0       	push   0xc002d47a
c001f89c:	e8 be 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f8a1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8a4:	83 c4 10             	add    esp,0x10
c001f8a7:	e9 6a fe ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f8ac:	83 ec 0c             	sub    esp,0xc
c001f8af:	b3 03                	mov    bl,0x3
c001f8b1:	68 86 d4 02 c0       	push   0xc002d486
c001f8b6:	e8 a4 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f8bb:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8be:	83 c4 10             	add    esp,0x10
c001f8c1:	e9 50 fe ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f8c6:	83 ec 0c             	sub    esp,0xc
c001f8c9:	b3 04                	mov    bl,0x4
c001f8cb:	68 8a d4 02 c0       	push   0xc002d48a
c001f8d0:	e8 8a 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f8d5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8d8:	83 c4 10             	add    esp,0x10
c001f8db:	e9 36 fe ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f8e0:	83 ec 0c             	sub    esp,0xc
c001f8e3:	b3 05                	mov    bl,0x5
c001f8e5:	68 8e d4 02 c0       	push   0xc002d48e
c001f8ea:	e8 70 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f8ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f8f2:	83 c4 10             	add    esp,0x10
c001f8f5:	e9 1c fe ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f8fa:	83 ec 0c             	sub    esp,0xc
c001f8fd:	68 92 d4 02 c0       	push   0xc002d492
c001f902:	e8 58 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f907:	83 c4 10             	add    esp,0x10
c001f90a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f90d:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f912:	e9 ff fd ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f917:	50                   	push   eax
c001f918:	50                   	push   eax
c001f919:	6a 01                	push   0x1
c001f91b:	68 97 d4 02 c0       	push   0xc002d497
c001f920:	e8 3a 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f925:	83 c4 10             	add    esp,0x10
c001f928:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f92b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f930:	e9 e1 fd ff ff       	jmp    c001f716 <Vm::faultHandler(regs*)+0xad>
c001f935:	83 ec 0c             	sub    esp,0xc
c001f938:	68 a5 d4 02 c0       	push   0xc002d4a5
c001f93d:	e8 1d 35 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f942:	83 c4 10             	add    esp,0x10
c001f945:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f948:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f94d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f950:	74 2f                	je     c001f981 <Vm::faultHandler(regs*)+0x318>
c001f952:	83 ea 04             	sub    edx,0x4
c001f955:	25 ff 0d 00 00       	and    eax,0xdff
c001f95a:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f960:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f963:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f966:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f96c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f970:	0f 84 bf 04 00 00    	je     c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001f976:	80 cc 02             	or     ah,0x2
c001f979:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f97c:	e9 b4 04 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001f981:	83 ea 02             	sub    edx,0x2
c001f984:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f98a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f98d:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f991:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f997:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f99b:	74 05                	je     c001f9a2 <Vm::faultHandler(regs*)+0x339>
c001f99d:	80 cc 02             	or     ah,0x2
c001f9a0:	eb 03                	jmp    c001f9a5 <Vm::faultHandler(regs*)+0x33c>
c001f9a2:	80 e4 fd             	and    ah,0xfd
c001f9a5:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f9a9:	e9 87 04 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001f9ae:	83 ec 0c             	sub    esp,0xc
c001f9b1:	68 ac d4 02 c0       	push   0xc002d4ac
c001f9b6:	e8 a4 34 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001f9bb:	83 c4 10             	add    esp,0x10
c001f9be:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f9c3:	74 28                	je     c001f9ed <Vm::faultHandler(regs*)+0x384>
c001f9c5:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9c7:	25 ff 0d 00 00       	and    eax,0xdff
c001f9cc:	0d 00 02 02 00       	or     eax,0x20200
c001f9d1:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9d4:	8b 06                	mov    eax,DWORD PTR [esi]
c001f9d6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f9dc:	c1 e8 09             	shr    eax,0x9
c001f9df:	83 e0 01             	and    eax,0x1
c001f9e2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f9e5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f9e8:	83 c0 04             	add    eax,0x4
c001f9eb:	eb 24                	jmp    c001fa11 <Vm::faultHandler(regs*)+0x3a8>
c001f9ed:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f9f0:	0d 00 02 02 00       	or     eax,0x20200
c001f9f5:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f9f8:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f9fb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001fa01:	66 c1 e8 09          	shr    ax,0x9
c001fa05:	83 e0 01             	and    eax,0x1
c001fa08:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001fa0b:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001fa0e:	83 c0 02             	add    eax,0x2
c001fa11:	25 ff ff 00 00       	and    eax,0xffff
c001fa16:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001fa19:	e9 17 04 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fa1e:	53                   	push   ebx
c001fa1f:	53                   	push   ebx
c001fa20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa24:	50                   	push   eax
c001fa25:	68 b2 d4 02 c0       	push   0xc002d4b2
c001fa2a:	e8 30 34 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fa2f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa33:	83 c4 10             	add    esp,0x10
c001fa36:	3c ee                	cmp    al,0xee
c001fa38:	75 10                	jne    c001fa4a <Vm::faultHandler(regs*)+0x3e1>
c001fa3a:	83 ec 0c             	sub    esp,0xc
c001fa3d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fa40:	e8 cf f8 ff ff       	call   c001f314 <Vm::mainloop3(unsigned long)>
c001fa45:	e9 c0 03 00 00       	jmp    c001fe0a <Vm::faultHandler(regs*)+0x7a1>
c001fa4a:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001fa4e:	83 ec 0c             	sub    esp,0xc
c001fa51:	53                   	push   ebx
c001fa52:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001fa56:	53                   	push   ebx
c001fa57:	55                   	push   ebp
c001fa58:	50                   	push   eax
c001fa59:	57                   	push   edi
c001fa5a:	e8 0c fb ff ff       	call   c001f56b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001fa5f:	eb 36                	jmp    c001fa97 <Vm::faultHandler(regs*)+0x42e>
c001fa61:	83 ec 0c             	sub    esp,0xc
c001fa64:	68 bc d4 02 c0       	push   0xc002d4bc
c001fa69:	e8 f1 33 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fa6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa73:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fa77:	e9 8b 03 00 00       	jmp    c001fe07 <Vm::faultHandler(regs*)+0x79e>
c001fa7c:	83 ec 0c             	sub    esp,0xc
c001fa7f:	68 c1 d4 02 c0       	push   0xc002d4c1
c001fa84:	e8 d6 33 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fa89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001fa8e:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001fa92:	e9 70 03 00 00       	jmp    c001fe07 <Vm::faultHandler(regs*)+0x79e>
c001fa97:	83 c4 20             	add    esp,0x20
c001fa9a:	e9 99 03 00 00       	jmp    c001fe38 <Vm::faultHandler(regs*)+0x7cf>
c001fa9f:	83 ec 0c             	sub    esp,0xc
c001faa2:	68 ff d4 02 c0       	push   0xc002d4ff
c001faa7:	e8 b3 33 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001faac:	83 c4 10             	add    esp,0x10
c001faaf:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fab2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fab7:	74 0d                	je     c001fac6 <Vm::faultHandler(regs*)+0x45d>
c001fab9:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fac0:	0f 87 9e 01 00 00    	ja     c001fc64 <Vm::faultHandler(regs*)+0x5fb>
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001facd:	0f b7 db             	movzx  ebx,bx
c001fad0:	50                   	push   eax
c001fad1:	e8 71 f7 ff ff       	call   c001f247 <Vm::inbv(unsigned short)>
c001fad6:	83 c4 0c             	add    esp,0xc
c001fad9:	0f b6 c0             	movzx  eax,al
c001fadc:	50                   	push   eax
c001fadd:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001fae1:	50                   	push   eax
c001fae2:	53                   	push   ebx
c001fae3:	e8 41 fb ff ff       	call   c001f629 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001fae8:	83 c4 10             	add    esp,0x10
c001faeb:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001faee:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001faf2:	74 03                	je     c001faf7 <Vm::faultHandler(regs*)+0x48e>
c001faf4:	48                   	dec    eax
c001faf5:	eb 01                	jmp    c001faf8 <Vm::faultHandler(regs*)+0x48f>
c001faf7:	40                   	inc    eax
c001faf8:	0f b7 c0             	movzx  eax,ax
c001fafb:	eb 7f                	jmp    c001fb7c <Vm::faultHandler(regs*)+0x513>
c001fafd:	83 ec 0c             	sub    esp,0xc
c001fb00:	68 31 d5 02 c0       	push   0xc002d531
c001fb05:	e8 55 33 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fb0a:	83 c4 10             	add    esp,0x10
c001fb0d:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001fb10:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fb15:	74 0d                	je     c001fb24 <Vm::faultHandler(regs*)+0x4bb>
c001fb17:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001fb1e:	0f 87 40 01 00 00    	ja     c001fc64 <Vm::faultHandler(regs*)+0x5fb>
c001fb24:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fb27:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001fb2b:	0f b7 db             	movzx  ebx,bx
c001fb2e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb33:	74 20                	je     c001fb55 <Vm::faultHandler(regs*)+0x4ec>
c001fb35:	ed                   	in     eax,dx
c001fb36:	51                   	push   ecx
c001fb37:	50                   	push   eax
c001fb38:	56                   	push   esi
c001fb39:	53                   	push   ebx
c001fb3a:	e8 15 fb ff ff       	call   c001f654 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001fb3f:	83 c4 10             	add    esp,0x10
c001fb42:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb45:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb49:	74 05                	je     c001fb50 <Vm::faultHandler(regs*)+0x4e7>
c001fb4b:	83 e8 04             	sub    eax,0x4
c001fb4e:	eb 27                	jmp    c001fb77 <Vm::faultHandler(regs*)+0x50e>
c001fb50:	83 c0 04             	add    eax,0x4
c001fb53:	eb 22                	jmp    c001fb77 <Vm::faultHandler(regs*)+0x50e>
c001fb55:	66 ed                	in     ax,dx
c001fb57:	0f b7 c0             	movzx  eax,ax
c001fb5a:	52                   	push   edx
c001fb5b:	50                   	push   eax
c001fb5c:	56                   	push   esi
c001fb5d:	53                   	push   ebx
c001fb5e:	e8 db fa ff ff       	call   c001f63e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001fb63:	83 c4 10             	add    esp,0x10
c001fb66:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001fb69:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fb6d:	74 05                	je     c001fb74 <Vm::faultHandler(regs*)+0x50b>
c001fb6f:	83 e8 02             	sub    eax,0x2
c001fb72:	eb 03                	jmp    c001fb77 <Vm::faultHandler(regs*)+0x50e>
c001fb74:	83 c0 02             	add    eax,0x2
c001fb77:	25 ff ff 00 00       	and    eax,0xffff
c001fb7c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001fb7f:	e9 b1 02 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fb84:	83 ec 0c             	sub    esp,0xc
c001fb87:	4b                   	dec    ebx
c001fb88:	68 37 d5 02 c0       	push   0xc002d537
c001fb8d:	e8 cd 32 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fb92:	83 c4 10             	add    esp,0x10
c001fb95:	80 fb 05             	cmp    bl,0x5
c001fb98:	77 0a                	ja     c001fba4 <Vm::faultHandler(regs*)+0x53b>
c001fb9a:	0f b6 db             	movzx  ebx,bl
c001fb9d:	ff 24 9d a8 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a58]
c001fba4:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fba8:	eb 1b                	jmp    c001fbc5 <Vm::faultHandler(regs*)+0x55c>
c001fbaa:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fbae:	eb 15                	jmp    c001fbc5 <Vm::faultHandler(regs*)+0x55c>
c001fbb0:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fbb4:	eb 0f                	jmp    c001fbc5 <Vm::faultHandler(regs*)+0x55c>
c001fbb6:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fbba:	eb 09                	jmp    c001fbc5 <Vm::faultHandler(regs*)+0x55c>
c001fbbc:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fbbf:	eb 04                	jmp    c001fbc5 <Vm::faultHandler(regs*)+0x55c>
c001fbc1:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fbc5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fbca:	74 0d                	je     c001fbd9 <Vm::faultHandler(regs*)+0x570>
c001fbcc:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001fbd3:	0f 87 8b 00 00 00    	ja     c001fc64 <Vm::faultHandler(regs*)+0x5fb>
c001fbd9:	53                   	push   ebx
c001fbda:	53                   	push   ebx
c001fbdb:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001fbdf:	52                   	push   edx
c001fbe0:	50                   	push   eax
c001fbe1:	e8 0f fa ff ff       	call   c001f5f5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001fbe6:	5e                   	pop    esi
c001fbe7:	0f b6 c0             	movzx  eax,al
c001fbea:	5d                   	pop    ebp
c001fbeb:	50                   	push   eax
c001fbec:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbf0:	50                   	push   eax
c001fbf1:	e8 64 f6 ff ff       	call   c001f25a <Vm::outbv(unsigned short, unsigned char)>
c001fbf6:	83 c4 10             	add    esp,0x10
c001fbf9:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001fbfc:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001fc00:	74 03                	je     c001fc05 <Vm::faultHandler(regs*)+0x59c>
c001fc02:	48                   	dec    eax
c001fc03:	eb 01                	jmp    c001fc06 <Vm::faultHandler(regs*)+0x59d>
c001fc05:	40                   	inc    eax
c001fc06:	0f b7 c0             	movzx  eax,ax
c001fc09:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001fc0c:	e9 24 02 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	4b                   	dec    ebx
c001fc15:	68 37 d5 02 c0       	push   0xc002d537
c001fc1a:	e8 40 32 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fc1f:	83 c4 10             	add    esp,0x10
c001fc22:	80 fb 05             	cmp    bl,0x5
c001fc25:	77 0a                	ja     c001fc31 <Vm::faultHandler(regs*)+0x5c8>
c001fc27:	0f b6 db             	movzx  ebx,bl
c001fc2a:	ff 24 9d c0 d5 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2a40]
c001fc31:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fc35:	eb 1b                	jmp    c001fc52 <Vm::faultHandler(regs*)+0x5e9>
c001fc37:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fc3b:	eb 15                	jmp    c001fc52 <Vm::faultHandler(regs*)+0x5e9>
c001fc3d:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fc41:	eb 0f                	jmp    c001fc52 <Vm::faultHandler(regs*)+0x5e9>
c001fc43:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fc47:	eb 09                	jmp    c001fc52 <Vm::faultHandler(regs*)+0x5e9>
c001fc49:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fc4c:	eb 04                	jmp    c001fc52 <Vm::faultHandler(regs*)+0x5e9>
c001fc4e:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fc52:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fc55:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fc5a:	74 39                	je     c001fc95 <Vm::faultHandler(regs*)+0x62c>
c001fc5c:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fc62:	76 31                	jbe    c001fc95 <Vm::faultHandler(regs*)+0x62c>
c001fc64:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc68:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fc6c:	51                   	push   ecx
c001fc6d:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc71:	51                   	push   ecx
c001fc72:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc76:	51                   	push   ecx
c001fc77:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc7b:	51                   	push   ecx
c001fc7c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc80:	52                   	push   edx
c001fc81:	50                   	push   eax
c001fc82:	50                   	push   eax
c001fc83:	68 04 d5 02 c0       	push   0xc002d504
c001fc88:	e8 d2 31 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fc8d:	83 c4 20             	add    esp,0x20
c001fc90:	e9 fb 01 00 00       	jmp    c001fe90 <Vm::faultHandler(regs*)+0x827>
c001fc95:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fc98:	0f b7 d3             	movzx  edx,bx
c001fc9b:	81 e6 00 04 00 00    	and    esi,0x400
c001fca1:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fca4:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fca9:	74 1d                	je     c001fcc8 <Vm::faultHandler(regs*)+0x65f>
c001fcab:	51                   	push   ecx
c001fcac:	51                   	push   ecx
c001fcad:	52                   	push   edx
c001fcae:	50                   	push   eax
c001fcaf:	e8 64 f9 ff ff       	call   c001f618 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fcb4:	83 c4 10             	add    esp,0x10
c001fcb7:	89 ea                	mov    edx,ebp
c001fcb9:	ef                   	out    dx,eax
c001fcba:	85 f6                	test   esi,esi
c001fcbc:	74 05                	je     c001fcc3 <Vm::faultHandler(regs*)+0x65a>
c001fcbe:	83 eb 04             	sub    ebx,0x4
c001fcc1:	eb 21                	jmp    c001fce4 <Vm::faultHandler(regs*)+0x67b>
c001fcc3:	83 c3 04             	add    ebx,0x4
c001fcc6:	eb 1c                	jmp    c001fce4 <Vm::faultHandler(regs*)+0x67b>
c001fcc8:	51                   	push   ecx
c001fcc9:	51                   	push   ecx
c001fcca:	52                   	push   edx
c001fccb:	50                   	push   eax
c001fccc:	e8 35 f9 ff ff       	call   c001f606 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fcd1:	83 c4 10             	add    esp,0x10
c001fcd4:	89 ea                	mov    edx,ebp
c001fcd6:	66 ef                	out    dx,ax
c001fcd8:	85 f6                	test   esi,esi
c001fcda:	74 05                	je     c001fce1 <Vm::faultHandler(regs*)+0x678>
c001fcdc:	83 eb 02             	sub    ebx,0x2
c001fcdf:	eb 03                	jmp    c001fce4 <Vm::faultHandler(regs*)+0x67b>
c001fce1:	83 c3 02             	add    ebx,0x2
c001fce4:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001fcea:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fced:	e9 43 01 00 00       	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fcf2:	53                   	push   ebx
c001fcf3:	53                   	push   ebx
c001fcf4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcf8:	50                   	push   eax
c001fcf9:	68 3d d5 02 c0       	push   0xc002d53d
c001fcfe:	e8 5c 31 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fd03:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fd0a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd0e:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd11:	e8 31 f5 ff ff       	call   c001f247 <Vm::inbv(unsigned short)>
c001fd16:	0f b6 c0             	movzx  eax,al
c001fd19:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fd1c:	eb 5e                	jmp    c001fd7c <Vm::faultHandler(regs*)+0x713>
c001fd1e:	51                   	push   ecx
c001fd1f:	51                   	push   ecx
c001fd20:	53                   	push   ebx
c001fd21:	68 43 d5 02 c0       	push   0xc002d543
c001fd26:	e8 34 31 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fd2b:	83 c4 10             	add    esp,0x10
c001fd2e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fd33:	74 07                	je     c001fd3c <Vm::faultHandler(regs*)+0x6d3>
c001fd35:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd39:	ed                   	in     eax,dx
c001fd3a:	eb 14                	jmp    c001fd50 <Vm::faultHandler(regs*)+0x6e7>
c001fd3c:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fd3f:	66 31 db             	xor    bx,bx
c001fd42:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fd45:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd49:	66 ed                	in     ax,dx
c001fd4b:	0f b7 c0             	movzx  eax,ax
c001fd4e:	09 d8                	or     eax,ebx
c001fd50:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fd53:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd57:	e9 dc 00 00 00       	jmp    c001fe38 <Vm::faultHandler(regs*)+0x7cf>
c001fd5c:	50                   	push   eax
c001fd5d:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd60:	53                   	push   ebx
c001fd61:	68 49 d5 02 c0       	push   0xc002d549
c001fd66:	e8 f4 30 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fd6b:	58                   	pop    eax
c001fd6c:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fd70:	5a                   	pop    edx
c001fd71:	50                   	push   eax
c001fd72:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd76:	50                   	push   eax
c001fd77:	e8 de f4 ff ff       	call   c001f25a <Vm::outbv(unsigned short, unsigned char)>
c001fd7c:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fd80:	e9 85 00 00 00       	jmp    c001fe0a <Vm::faultHandler(regs*)+0x7a1>
c001fd85:	50                   	push   eax
c001fd86:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fd89:	53                   	push   ebx
c001fd8a:	68 52 d5 02 c0       	push   0xc002d552
c001fd8f:	e8 cb 30 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fd94:	83 c4 10             	add    esp,0x10
c001fd97:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fd9b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fda0:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fda3:	74 03                	je     c001fda8 <Vm::faultHandler(regs*)+0x73f>
c001fda5:	ef                   	out    dx,eax
c001fda6:	eb ab                	jmp    c001fd53 <Vm::faultHandler(regs*)+0x6ea>
c001fda8:	66 ef                	out    dx,ax
c001fdaa:	eb a7                	jmp    c001fd53 <Vm::faultHandler(regs*)+0x6ea>
c001fdac:	55                   	push   ebp
c001fdad:	55                   	push   ebp
c001fdae:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fdb1:	68 5b d5 02 c0       	push   0xc002d55b
c001fdb6:	e8 a4 30 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fdbb:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fdc2:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fdc6:	89 04 24             	mov    DWORD PTR [esp],eax
c001fdc9:	e8 79 f4 ff ff       	call   c001f247 <Vm::inbv(unsigned short)>
c001fdce:	0f b6 c0             	movzx  eax,al
c001fdd1:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fdd4:	eb 31                	jmp    c001fe07 <Vm::faultHandler(regs*)+0x79e>
c001fdd6:	56                   	push   esi
c001fdd7:	56                   	push   esi
c001fdd8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fddb:	68 61 d5 02 c0       	push   0xc002d561
c001fde0:	e8 7a 30 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fde5:	83 c4 10             	add    esp,0x10
c001fde8:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fdeb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fdf0:	74 03                	je     c001fdf5 <Vm::faultHandler(regs*)+0x78c>
c001fdf2:	ed                   	in     eax,dx
c001fdf3:	eb 0d                	jmp    c001fe02 <Vm::faultHandler(regs*)+0x799>
c001fdf5:	66 ed                	in     ax,dx
c001fdf7:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fdfa:	0f b7 c0             	movzx  eax,ax
c001fdfd:	66 31 d2             	xor    dx,dx
c001fe00:	09 d0                	or     eax,edx
c001fe02:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fe05:	eb 2e                	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fe07:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe0a:	83 c4 10             	add    esp,0x10
c001fe0d:	eb 29                	jmp    c001fe38 <Vm::faultHandler(regs*)+0x7cf>
c001fe0f:	50                   	push   eax
c001fe10:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fe13:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fe16:	68 70 d5 02 c0       	push   0xc002d570
c001fe1b:	e8 3f 30 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fe20:	83 c4 10             	add    esp,0x10
c001fe23:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fe26:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fe2b:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fe2e:	74 03                	je     c001fe33 <Vm::faultHandler(regs*)+0x7ca>
c001fe30:	ef                   	out    dx,eax
c001fe31:	eb 02                	jmp    c001fe35 <Vm::faultHandler(regs*)+0x7cc>
c001fe33:	66 ef                	out    dx,ax
c001fe35:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fe38:	b0 01                	mov    al,0x1
c001fe3a:	eb 56                	jmp    c001fe92 <Vm::faultHandler(regs*)+0x829>
c001fe3c:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fe40:	51                   	push   ecx
c001fe41:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fe45:	51                   	push   ecx
c001fe46:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fe4a:	51                   	push   ecx
c001fe4b:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fe4f:	51                   	push   ecx
c001fe50:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fe54:	52                   	push   edx
c001fe55:	50                   	push   eax
c001fe56:	50                   	push   eax
c001fe57:	68 79 d5 02 c0       	push   0xc002d579
c001fe5c:	e8 fe 2f ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c001fe61:	83 c4 20             	add    esp,0x20
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	6a 60                	push   0x60
c001fe69:	e8 d9 f3 ff ff       	call   c001f247 <Vm::inbv(unsigned short)>
c001fe6e:	83 c4 10             	add    esp,0x10
c001fe71:	3c 1c                	cmp    al,0x1c
c001fe73:	74 04                	je     c001fe79 <Vm::faultHandler(regs*)+0x810>
c001fe75:	3c 5a                	cmp    al,0x5a
c001fe77:	75 eb                	jne    c001fe64 <Vm::faultHandler(regs*)+0x7fb>
c001fe79:	3c 1c                	cmp    al,0x1c
c001fe7b:	74 04                	je     c001fe81 <Vm::faultHandler(regs*)+0x818>
c001fe7d:	3c 5a                	cmp    al,0x5a
c001fe7f:	75 0f                	jne    c001fe90 <Vm::faultHandler(regs*)+0x827>
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	6a 60                	push   0x60
c001fe86:	e8 bc f3 ff ff       	call   c001f247 <Vm::inbv(unsigned short)>
c001fe8b:	83 c4 10             	add    esp,0x10
c001fe8e:	eb e9                	jmp    c001fe79 <Vm::faultHandler(regs*)+0x810>
c001fe90:	31 c0                	xor    eax,eax
c001fe92:	83 c4 1c             	add    esp,0x1c
c001fe95:	5b                   	pop    ebx
c001fe96:	5e                   	pop    esi
c001fe97:	5f                   	pop    edi
c001fe98:	5d                   	pop    ebp
c001fe99:	c3                   	ret    

c001fe9a <Vm::fpuInternalTo32(unsigned long long)>:
c001fe9a:	57                   	push   edi
c001fe9b:	56                   	push   esi
c001fe9c:	53                   	push   ebx
c001fe9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea5:	89 d6                	mov    esi,edx
c001fea7:	89 d7                	mov    edi,edx
c001fea9:	89 c1                	mov    ecx,eax
c001feab:	c1 ef 14             	shr    edi,0x14
c001feae:	89 d3                	mov    ebx,edx
c001feb0:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001feb6:	31 d2                	xor    edx,edx
c001feb8:	89 f8                	mov    eax,edi
c001feba:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fec0:	bf ff 00 00 00       	mov    edi,0xff
c001fec5:	05 80 fc ff ff       	add    eax,0xfffffc80
c001feca:	83 d2 ff             	adc    edx,0xffffffff
c001fecd:	39 c7                	cmp    edi,eax
c001fecf:	bf 00 00 00 00       	mov    edi,0x0
c001fed4:	19 d7                	sbb    edi,edx
c001fed6:	72 15                	jb     c001feed <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fed8:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fedc:	c1 e0 17             	shl    eax,0x17
c001fedf:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fee5:	09 f1                	or     ecx,esi
c001fee7:	09 c1                	or     ecx,eax
c001fee9:	89 cf                	mov    edi,ecx
c001feeb:	eb 02                	jmp    c001feef <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001feed:	31 ff                	xor    edi,edi
c001feef:	89 f8                	mov    eax,edi
c001fef1:	5b                   	pop    ebx
c001fef2:	5e                   	pop    esi
c001fef3:	5f                   	pop    edi
c001fef4:	c3                   	ret    

c001fef5 <Vm::fpuInternalTo64(unsigned long long)>:
c001fef5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fef9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fefd:	c3                   	ret    

c001fefe <Vm::fpu32ToInternal(unsigned int)>:
c001fefe:	57                   	push   edi
c001feff:	31 ff                	xor    edi,edi
c001ff01:	56                   	push   esi
c001ff02:	53                   	push   ebx
c001ff03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ff07:	89 cb                	mov    ebx,ecx
c001ff09:	89 ce                	mov    esi,ecx
c001ff0b:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001ff11:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001ff17:	c1 e9 17             	shr    ecx,0x17
c001ff1a:	89 f0                	mov    eax,esi
c001ff1c:	0f b6 d1             	movzx  edx,cl
c001ff1f:	81 c2 80 03 00 00    	add    edx,0x380
c001ff25:	89 d1                	mov    ecx,edx
c001ff27:	89 fa                	mov    edx,edi
c001ff29:	c1 e1 14             	shl    ecx,0x14
c001ff2c:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001ff30:	c1 e0 1d             	shl    eax,0x1d
c001ff33:	89 d7                	mov    edi,edx
c001ff35:	89 c6                	mov    esi,eax
c001ff37:	89 ca                	mov    edx,ecx
c001ff39:	89 f0                	mov    eax,esi
c001ff3b:	09 fa                	or     edx,edi
c001ff3d:	09 da                	or     edx,ebx
c001ff3f:	5b                   	pop    ebx
c001ff40:	5e                   	pop    esi
c001ff41:	5f                   	pop    edi
c001ff42:	c3                   	ret    

c001ff43 <Vm::fpu64ToInternal(unsigned long long)>:
c001ff43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff47:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff4b:	c3                   	ret    

c001ff4c <Vm::fpuFloatToLong(unsigned long long)>:
c001ff4c:	57                   	push   edi
c001ff4d:	31 c0                	xor    eax,eax
c001ff4f:	56                   	push   esi
c001ff50:	31 d2                	xor    edx,edx
c001ff52:	53                   	push   ebx
c001ff53:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ff5b:	89 d9                	mov    ecx,ebx
c001ff5d:	c1 e9 14             	shr    ecx,0x14
c001ff60:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001ff66:	89 cf                	mov    edi,ecx
c001ff68:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001ff6e:	78 33                	js     c001ffa3 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff70:	89 d9                	mov    ecx,ebx
c001ff72:	89 f0                	mov    eax,esi
c001ff74:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001ff7a:	81 c9 00 00 10 00    	or     ecx,0x100000
c001ff80:	89 ca                	mov    edx,ecx
c001ff82:	b9 34 00 00 00       	mov    ecx,0x34
c001ff87:	29 f9                	sub    ecx,edi
c001ff89:	0f ad d0             	shrd   eax,edx,cl
c001ff8c:	d3 fa                	sar    edx,cl
c001ff8e:	f6 c1 20             	test   cl,0x20
c001ff91:	74 05                	je     c001ff98 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001ff93:	89 d0                	mov    eax,edx
c001ff95:	c1 fa 1f             	sar    edx,0x1f
c001ff98:	85 db                	test   ebx,ebx
c001ff9a:	79 07                	jns    c001ffa3 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001ff9c:	f7 d8                	neg    eax
c001ff9e:	83 d2 00             	adc    edx,0x0
c001ffa1:	f7 da                	neg    edx
c001ffa3:	5b                   	pop    ebx
c001ffa4:	5e                   	pop    esi
c001ffa5:	5f                   	pop    edi
c001ffa6:	c3                   	ret    

c001ffa7 <Vm::fpuULongToFloat(unsigned long long)>:
c001ffa7:	57                   	push   edi
c001ffa8:	31 c9                	xor    ecx,ecx
c001ffaa:	56                   	push   esi
c001ffab:	53                   	push   ebx
c001ffac:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ffb0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ffb4:	0f ba e7 14          	bt     edi,0x14
c001ffb8:	72 07                	jb     c001ffc1 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001ffba:	01 f6                	add    esi,esi
c001ffbc:	11 ff                	adc    edi,edi
c001ffbe:	41                   	inc    ecx
c001ffbf:	eb f3                	jmp    c001ffb4 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001ffc1:	89 fa                	mov    edx,edi
c001ffc3:	89 f0                	mov    eax,esi
c001ffc5:	bb 33 04 00 00       	mov    ebx,0x433
c001ffca:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001ffd0:	29 cb                	sub    ebx,ecx
c001ffd2:	89 d9                	mov    ecx,ebx
c001ffd4:	5b                   	pop    ebx
c001ffd5:	c1 e1 14             	shl    ecx,0x14
c001ffd8:	5e                   	pop    esi
c001ffd9:	09 ca                	or     edx,ecx
c001ffdb:	5f                   	pop    edi
c001ffdc:	c3                   	ret    

c001ffdd <Vm::fpuLongToFloat(long long)>:
c001ffdd:	56                   	push   esi
c001ffde:	31 c0                	xor    eax,eax
c001ffe0:	53                   	push   ebx
c001ffe1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ffe5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ffe9:	39 c8                	cmp    eax,ecx
c001ffeb:	19 d8                	sbb    eax,ebx
c001ffed:	7d 04                	jge    c001fff3 <Vm::fpuLongToFloat(long long)+0x16>
c001ffef:	31 f6                	xor    esi,esi
c001fff1:	eb 0c                	jmp    c001ffff <Vm::fpuLongToFloat(long long)+0x22>
c001fff3:	f7 d9                	neg    ecx
c001fff5:	be 01 00 00 00       	mov    esi,0x1
c001fffa:	83 d3 00             	adc    ebx,0x0
c001fffd:	f7 db                	neg    ebx
c001ffff:	31 c0                	xor    eax,eax
c0020001:	0f ba e3 14          	bt     ebx,0x14
c0020005:	72 07                	jb     c002000e <Vm::fpuLongToFloat(long long)+0x31>
c0020007:	01 c9                	add    ecx,ecx
c0020009:	11 db                	adc    ebx,ebx
c002000b:	40                   	inc    eax
c002000c:	eb f3                	jmp    c0020001 <Vm::fpuLongToFloat(long long)+0x24>
c002000e:	ba 33 04 00 00       	mov    edx,0x433
c0020013:	29 c2                	sub    edx,eax
c0020015:	89 c8                	mov    eax,ecx
c0020017:	c1 e2 14             	shl    edx,0x14
c002001a:	89 d9                	mov    ecx,ebx
c002001c:	89 f3                	mov    ebx,esi
c002001e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0020024:	09 ca                	or     edx,ecx
c0020026:	84 db                	test   bl,bl
c0020028:	74 06                	je     c0020030 <Vm::fpuLongToFloat(long long)+0x53>
c002002a:	81 ca 00 00 00 80    	or     edx,0x80000000
c0020030:	5b                   	pop    ebx
c0020031:	5e                   	pop    esi
c0020032:	c3                   	ret    

c0020033 <Vm::fpuGet0()>:
c0020033:	31 c0                	xor    eax,eax
c0020035:	31 d2                	xor    edx,edx
c0020037:	c3                   	ret    

c0020038 <Vm::fpuGet1()>:
c0020038:	b8 01 00 00 00       	mov    eax,0x1
c002003d:	31 d2                	xor    edx,edx
c002003f:	c3                   	ret    

c0020040 <Vm::fpuGetPi()>:
c0020040:	b8 03 00 00 00       	mov    eax,0x3
c0020045:	31 d2                	xor    edx,edx
c0020047:	c3                   	ret    

c0020048 <Vm::fpuGetLog2E()>:
c0020048:	83 ec 18             	sub    esp,0x18
c002004b:	68 d8 d5 02 c0       	push   0xc002d5d8
c0020050:	e8 a4 a8 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0020055:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002005a:	31 d2                	xor    edx,edx
c002005c:	83 c4 1c             	add    esp,0x1c
c002005f:	c3                   	ret    

c0020060 <Vm::fpuGetLogE2()>:
c0020060:	83 ec 18             	sub    esp,0x18
c0020063:	68 e4 d5 02 c0       	push   0xc002d5e4
c0020068:	e8 8c a8 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c002006d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0020072:	31 d2                	xor    edx,edx
c0020074:	83 c4 1c             	add    esp,0x1c
c0020077:	c3                   	ret    

c0020078 <Vm::fpuGetLog210()>:
c0020078:	83 ec 18             	sub    esp,0x18
c002007b:	68 f0 d5 02 c0       	push   0xc002d5f0
c0020080:	e8 74 a8 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0020085:	b8 ef be ad de       	mov    eax,0xdeadbeef
c002008a:	31 d2                	xor    edx,edx
c002008c:	83 c4 1c             	add    esp,0x1c
c002008f:	c3                   	ret    

c0020090 <Vm::fpuGetLog102()>:
c0020090:	83 ec 18             	sub    esp,0x18
c0020093:	68 fd d5 02 c0       	push   0xc002d5fd
c0020098:	e8 5c a8 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c002009d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00200a2:	31 d2                	xor    edx,edx
c00200a4:	83 c4 1c             	add    esp,0x1c
c00200a7:	c3                   	ret    

c00200a8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c00200a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00200ac:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00200b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00200b4:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c00200b8:	0f 92 c0             	setb   al
c00200bb:	c3                   	ret    

c00200bc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c00200bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00200c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c4:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00200c8:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00200cc:	09 c2                	or     edx,eax
c00200ce:	0f 94 c0             	sete   al
c00200d1:	c3                   	ret    

c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00200d2:	57                   	push   edi
c00200d3:	56                   	push   esi
c00200d4:	53                   	push   ebx
c00200d5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00200d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00200dd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00200e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00200e5:	57                   	push   edi
c00200e6:	56                   	push   esi
c00200e7:	53                   	push   ebx
c00200e8:	51                   	push   ecx
c00200e9:	e8 ce ff ff ff       	call   c00200bc <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00200ee:	83 c4 10             	add    esp,0x10
c00200f1:	88 c2                	mov    dl,al
c00200f3:	31 c0                	xor    eax,eax
c00200f5:	84 d2                	test   dl,dl
c00200f7:	75 0c                	jne    c0020105 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c00200f9:	57                   	push   edi
c00200fa:	56                   	push   esi
c00200fb:	53                   	push   ebx
c00200fc:	51                   	push   ecx
c00200fd:	e8 a6 ff ff ff       	call   c00200a8 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0020102:	83 c4 10             	add    esp,0x10
c0020105:	83 e0 01             	and    eax,0x1
c0020108:	5b                   	pop    ebx
c0020109:	88 c1                	mov    cl,al
c002010b:	83 e2 01             	and    edx,0x1
c002010e:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c0020113:	c1 e2 06             	shl    edx,0x6
c0020116:	83 e0 ba             	and    eax,0xffffffba
c0020119:	5e                   	pop    esi
c002011a:	09 c8                	or     eax,ecx
c002011c:	5f                   	pop    edi
c002011d:	09 d0                	or     eax,edx
c002011f:	a2 a1 28 03 c0       	mov    ds:0xc00328a1,al
c0020124:	c3                   	ret    

c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0020125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020129:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002012d:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0020131:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0020135:	c3                   	ret    

c0020136 <Vm::fpuAbs(unsigned long long)>:
c0020136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002013a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002013e:	c3                   	ret    

c002013f <Vm::fpuChs(unsigned long long)>:
c002013f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020143:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0020147:	f7 d8                	neg    eax
c0020149:	83 d2 00             	adc    edx,0x0
c002014c:	f7 da                	neg    edx
c002014e:	c3                   	ret    

c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>:
c002014f:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0020153:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0020158:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c002015c:	eb c7                	jmp    c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c002015e:	53                   	push   ebx
c002015f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020163:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020167:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002016b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002016f:	0f af ca             	imul   ecx,edx
c0020172:	0f af d8             	imul   ebx,eax
c0020175:	f7 e2                	mul    edx
c0020177:	01 d9                	add    ecx,ebx
c0020179:	5b                   	pop    ebx
c002017a:	01 ca                	add    edx,ecx
c002017c:	c3                   	ret    

c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c002017d:	83 ec 0c             	sub    esp,0xc
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020188:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002018c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020190:	e8 7f 74 00 00       	call   c0027614 <__udivdi3>
c0020195:	83 c4 1c             	add    esp,0x1c
c0020198:	c3                   	ret    

c0020199 <Vm::fpuSquare(unsigned long long)>:
c0020199:	50                   	push   eax
c002019a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002019e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00201a2:	52                   	push   edx
c00201a3:	50                   	push   eax
c00201a4:	52                   	push   edx
c00201a5:	50                   	push   eax
c00201a6:	e8 b3 ff ff ff       	call   c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00201ab:	83 c4 14             	add    esp,0x14
c00201ae:	c3                   	ret    

c00201af <Vm::fpuGetReg(int)>:
c00201af:	83 ec 0c             	sub    esp,0xc
c00201b2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00201b7:	76 10                	jbe    c00201c9 <Vm::fpuGetReg(int)+0x1a>
c00201b9:	83 ec 0c             	sub    esp,0xc
c00201bc:	68 0a d6 02 c0       	push   0xc002d60a
c00201c1:	e8 33 a7 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00201c6:	83 c4 10             	add    esp,0x10
c00201c9:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c00201ce:	b9 08 00 00 00       	mov    ecx,0x8
c00201d3:	c0 e8 03             	shr    al,0x3
c00201d6:	83 e0 07             	and    eax,0x7
c00201d9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00201dd:	99                   	cdq    
c00201de:	f7 f9                	idiv   ecx
c00201e0:	8b 04 d5 a4 28 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcd75c]
c00201e7:	8b 14 d5 a8 28 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcd758]
c00201ee:	83 c4 0c             	add    esp,0xc
c00201f1:	c3                   	ret    

c00201f2 <Vm::fpuSetReg(int, unsigned long long)>:
c00201f2:	57                   	push   edi
c00201f3:	56                   	push   esi
c00201f4:	52                   	push   edx
c00201f5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00201f9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00201fd:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0020202:	76 10                	jbe    c0020214 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	68 1d d6 02 c0       	push   0xc002d61d
c002020c:	e8 e8 a6 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c0020219:	b9 08 00 00 00       	mov    ecx,0x8
c002021e:	c0 e8 03             	shr    al,0x3
c0020221:	83 e0 07             	and    eax,0x7
c0020224:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020228:	99                   	cdq    
c0020229:	f7 f9                	idiv   ecx
c002022b:	89 34 d5 a4 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd75c],esi
c0020232:	89 3c d5 a8 28 03 c0 	mov    DWORD PTR [edx*8-0x3ffcd758],edi
c0020239:	58                   	pop    eax
c002023a:	5e                   	pop    esi
c002023b:	5f                   	pop    edi
c002023c:	c3                   	ret    

c002023d <Vm::fpuPush(unsigned long long)>:
c002023d:	a0 a1 28 03 c0       	mov    al,ds:0xc00328a1
c0020242:	c0 e8 03             	shr    al,0x3
c0020245:	83 e0 07             	and    eax,0x7
c0020248:	83 c0 07             	add    eax,0x7
c002024b:	88 c2                	mov    dl,al
c002024d:	83 e0 07             	and    eax,0x7
c0020250:	83 e2 07             	and    edx,0x7
c0020253:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002025a:	8a 15 a1 28 03 c0    	mov    dl,BYTE PTR ds:0xc00328a1
c0020260:	83 e2 c7             	and    edx,0xffffffc7
c0020263:	09 ca                	or     edx,ecx
c0020265:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020269:	88 15 a1 28 03 c0    	mov    BYTE PTR ds:0xc00328a1,dl
c002026f:	89 0c c5 a8 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd758],ecx
c0020276:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002027a:	89 14 c5 a4 28 03 c0 	mov    DWORD PTR [eax*8-0x3ffcd75c],edx
c0020281:	a1 e4 28 03 c0       	mov    eax,ds:0xc00328e4
c0020286:	83 f8 08             	cmp    eax,0x8
c0020289:	75 08                	jne    c0020293 <Vm::fpuPush(unsigned long long)+0x56>
c002028b:	80 0d a0 28 03 c0 40 	or     BYTE PTR ds:0xc00328a0,0x40
c0020292:	c3                   	ret    
c0020293:	40                   	inc    eax
c0020294:	a3 e4 28 03 c0       	mov    ds:0xc00328e4,eax
c0020299:	c3                   	ret    

c002029a <Vm::fpuPop()>:
c002029a:	8a 0d a1 28 03 c0    	mov    cl,BYTE PTR ds:0xc00328a1
c00202a0:	53                   	push   ebx
c00202a1:	c0 e9 03             	shr    cl,0x3
c00202a4:	8a 1d a1 28 03 c0    	mov    bl,BYTE PTR ds:0xc00328a1
c00202aa:	83 e1 07             	and    ecx,0x7
c00202ad:	83 e3 c7             	and    ebx,0xffffffc7
c00202b0:	8b 04 cd a4 28 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcd75c]
c00202b7:	8b 14 cd a8 28 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcd758]
c00202be:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00202c5:	83 e1 38             	and    ecx,0x38
c00202c8:	09 d9                	or     ecx,ebx
c00202ca:	88 0d a1 28 03 c0    	mov    BYTE PTR ds:0xc00328a1,cl
c00202d0:	8b 0d e4 28 03 c0    	mov    ecx,DWORD PTR ds:0xc00328e4
c00202d6:	85 c9                	test   ecx,ecx
c00202d8:	74 09                	je     c00202e3 <Vm::fpuPop()+0x49>
c00202da:	49                   	dec    ecx
c00202db:	89 0d e4 28 03 c0    	mov    DWORD PTR ds:0xc00328e4,ecx
c00202e1:	eb 07                	jmp    c00202ea <Vm::fpuPop()+0x50>
c00202e3:	80 0d a0 28 03 c0 40 	or     BYTE PTR ds:0xc00328a0,0x40
c00202ea:	5b                   	pop    ebx
c00202eb:	c3                   	ret    

c00202ec <Vm::x87Handler(regs*)>:
c00202ec:	55                   	push   ebp
c00202ed:	57                   	push   edi
c00202ee:	56                   	push   esi
c00202ef:	53                   	push   ebx
c00202f0:	83 ec 1c             	sub    esp,0x1c
c00202f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00202f7:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00202fc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00202ff:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0020307:	8d 44 24 0b          	lea    eax,[esp+0xb]
c002030b:	50                   	push   eax
c002030c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0020310:	50                   	push   eax
c0020311:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020315:	50                   	push   eax
c0020316:	53                   	push   ebx
c0020317:	e8 aa 9c ff ff       	call   c0019fc6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c002031c:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c002031f:	83 c4 10             	add    esp,0x10
c0020322:	89 c6                	mov    esi,eax
c0020324:	80 fa d9             	cmp    dl,0xd9
c0020327:	0f 85 52 01 00 00    	jne    c002047f <Vm::x87Handler(regs*)+0x193>
c002032d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020331:	8d 50 20             	lea    edx,[eax+0x20]
c0020334:	80 fa 0e             	cmp    dl,0xe
c0020337:	0f 87 86 00 00 00    	ja     c00203c3 <Vm::x87Handler(regs*)+0xd7>
c002033d:	0f b6 d2             	movzx  edx,dl
c0020340:	ff 24 95 30 d6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd29d0]
c0020347:	e8 e7 fc ff ff       	call   c0020033 <Vm::fpuGet0()>
c002034c:	eb 05                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c002034e:	e8 e5 fc ff ff       	call   c0020038 <Vm::fpuGet1()>
c0020353:	57                   	push   edi
c0020354:	57                   	push   edi
c0020355:	52                   	push   edx
c0020356:	50                   	push   eax
c0020357:	e8 e1 fe ff ff       	call   c002023d <Vm::fpuPush(unsigned long long)>
c002035c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020360:	83 c4 10             	add    esp,0x10
c0020363:	b0 01                	mov    al,0x1
c0020365:	e9 e3 09 00 00       	jmp    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c002036a:	83 ec 0c             	sub    esp,0xc
c002036d:	6a 00                	push   0x0
c002036f:	e8 3b fe ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020374:	59                   	pop    ecx
c0020375:	5e                   	pop    esi
c0020376:	52                   	push   edx
c0020377:	50                   	push   eax
c0020378:	e8 c2 fd ff ff       	call   c002013f <Vm::fpuChs(unsigned long long)>
c002037d:	eb 13                	jmp    c0020392 <Vm::x87Handler(regs*)+0xa6>
c002037f:	83 ec 0c             	sub    esp,0xc
c0020382:	6a 00                	push   0x0
c0020384:	e8 26 fe ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020389:	5f                   	pop    edi
c002038a:	5d                   	pop    ebp
c002038b:	52                   	push   edx
c002038c:	50                   	push   eax
c002038d:	e8 a4 fd ff ff       	call   c0020136 <Vm::fpuAbs(unsigned long long)>
c0020392:	83 c4 0c             	add    esp,0xc
c0020395:	52                   	push   edx
c0020396:	50                   	push   eax
c0020397:	6a 00                	push   0x0
c0020399:	e8 54 fe ff ff       	call   c00201f2 <Vm::fpuSetReg(int, unsigned long long)>
c002039e:	eb bc                	jmp    c002035c <Vm::x87Handler(regs*)+0x70>
c00203a0:	e8 d3 fc ff ff       	call   c0020078 <Vm::fpuGetLog210()>
c00203a5:	eb ac                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c00203a7:	e8 9c fc ff ff       	call   c0020048 <Vm::fpuGetLog2E()>
c00203ac:	eb a5                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c00203ae:	e8 8d fc ff ff       	call   c0020040 <Vm::fpuGetPi()>
c00203b3:	eb 9e                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c00203b5:	e8 d6 fc ff ff       	call   c0020090 <Vm::fpuGetLog102()>
c00203ba:	eb 97                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c00203bc:	e8 9f fc ff ff       	call   c0020060 <Vm::fpuGetLogE2()>
c00203c1:	eb 90                	jmp    c0020353 <Vm::x87Handler(regs*)+0x67>
c00203c3:	8d 50 40             	lea    edx,[eax+0x40]
c00203c6:	80 fa 07             	cmp    dl,0x7
c00203c9:	77 15                	ja     c00203e0 <Vm::x87Handler(regs*)+0xf4>
c00203cb:	83 ec 0c             	sub    esp,0xc
c00203ce:	2d c0 00 00 00       	sub    eax,0xc0
c00203d3:	50                   	push   eax
c00203d4:	e8 d6 fd ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00203d9:	59                   	pop    ecx
c00203da:	5e                   	pop    esi
c00203db:	e9 75 ff ff ff       	jmp    c0020355 <Vm::x87Handler(regs*)+0x69>
c00203e0:	8d 50 38             	lea    edx,[eax+0x38]
c00203e3:	80 fa 07             	cmp    dl,0x7
c00203e6:	77 3c                	ja     c0020424 <Vm::x87Handler(regs*)+0x138>
c00203e8:	83 ec 0c             	sub    esp,0xc
c00203eb:	2d c8 00 00 00       	sub    eax,0xc8
c00203f0:	50                   	push   eax
c00203f1:	e8 b9 fd ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00203f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203fd:	89 c6                	mov    esi,eax
c00203ff:	89 d7                	mov    edi,edx
c0020401:	e8 a9 fd ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020406:	83 c4 0c             	add    esp,0xc
c0020409:	52                   	push   edx
c002040a:	50                   	push   eax
c002040b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002040f:	2d c8 00 00 00       	sub    eax,0xc8
c0020414:	50                   	push   eax
c0020415:	e8 d8 fd ff ff       	call   c00201f2 <Vm::fpuSetReg(int, unsigned long long)>
c002041a:	83 c4 0c             	add    esp,0xc
c002041d:	57                   	push   edi
c002041e:	56                   	push   esi
c002041f:	e9 73 ff ff ff       	jmp    c0020397 <Vm::x87Handler(regs*)+0xab>
c0020424:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020428:	84 d2                	test   dl,dl
c002042a:	75 0f                	jne    c002043b <Vm::x87Handler(regs*)+0x14f>
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	ff 36                	push   DWORD PTR [esi]
c0020431:	e8 c8 fa ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020436:	e9 bf 00 00 00       	jmp    c00204fa <Vm::x87Handler(regs*)+0x20e>
c002043b:	80 fa 03             	cmp    dl,0x3
c002043e:	75 13                	jne    c0020453 <Vm::x87Handler(regs*)+0x167>
c0020440:	e8 55 fe ff ff       	call   c002029a <Vm::fpuPop()>
c0020445:	55                   	push   ebp
c0020446:	55                   	push   ebp
c0020447:	52                   	push   edx
c0020448:	50                   	push   eax
c0020449:	e8 4c fa ff ff       	call   c001fe9a <Vm::fpuInternalTo32(unsigned long long)>
c002044e:	e9 88 00 00 00       	jmp    c00204db <Vm::x87Handler(regs*)+0x1ef>
c0020453:	80 fa 05             	cmp    dl,0x5
c0020456:	75 0e                	jne    c0020466 <Vm::x87Handler(regs*)+0x17a>
c0020458:	66 8b 06             	mov    ax,WORD PTR [esi]
c002045b:	66 a3 a2 28 03 c0    	mov    ds:0xc00328a2,ax
c0020461:	e9 df 00 00 00       	jmp    c0020545 <Vm::x87Handler(regs*)+0x259>
c0020466:	31 c0                	xor    eax,eax
c0020468:	80 fa 07             	cmp    dl,0x7
c002046b:	0f 85 dc 08 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020471:	66 a1 a2 28 03 c0    	mov    ax,ds:0xc00328a2
c0020477:	66 89 06             	mov    WORD PTR [esi],ax
c002047a:	e9 c6 00 00 00       	jmp    c0020545 <Vm::x87Handler(regs*)+0x259>
c002047f:	80 fa d8             	cmp    dl,0xd8
c0020482:	0f 84 c9 00 00 00    	je     c0020551 <Vm::x87Handler(regs*)+0x265>
c0020488:	80 fa dc             	cmp    dl,0xdc
c002048b:	0f 84 0d 02 00 00    	je     c002069e <Vm::x87Handler(regs*)+0x3b2>
c0020491:	80 fa de             	cmp    dl,0xde
c0020494:	0f 84 cd 02 00 00    	je     c0020767 <Vm::x87Handler(regs*)+0x47b>
c002049a:	80 fa dd             	cmp    dl,0xdd
c002049d:	0f 84 5f 04 00 00    	je     c0020902 <Vm::x87Handler(regs*)+0x616>
c00204a3:	80 fa da             	cmp    dl,0xda
c00204a6:	0f 84 24 05 00 00    	je     c00209d0 <Vm::x87Handler(regs*)+0x6e4>
c00204ac:	80 fa df             	cmp    dl,0xdf
c00204af:	0f 84 68 05 00 00    	je     c0020a1d <Vm::x87Handler(regs*)+0x731>
c00204b5:	31 c0                	xor    eax,eax
c00204b7:	80 fa db             	cmp    dl,0xdb
c00204ba:	0f 85 8d 08 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c00204c0:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204c4:	80 fa 03             	cmp    dl,0x3
c00204c7:	0f 85 70 06 00 00    	jne    c0020b3d <Vm::x87Handler(regs*)+0x851>
c00204cd:	e8 c8 fd ff ff       	call   c002029a <Vm::fpuPop()>
c00204d2:	55                   	push   ebp
c00204d3:	55                   	push   ebp
c00204d4:	52                   	push   edx
c00204d5:	50                   	push   eax
c00204d6:	e8 71 fa ff ff       	call   c001ff4c <Vm::fpuFloatToLong(unsigned long long)>
c00204db:	83 c4 10             	add    esp,0x10
c00204de:	89 06                	mov    DWORD PTR [esi],eax
c00204e0:	eb 63                	jmp    c0020545 <Vm::x87Handler(regs*)+0x259>
c00204e2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00204e6:	84 d2                	test   dl,dl
c00204e8:	0f 85 e6 05 00 00    	jne    c0020ad4 <Vm::x87Handler(regs*)+0x7e8>
c00204ee:	57                   	push   edi
c00204ef:	57                   	push   edi
c00204f0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204f3:	ff 36                	push   DWORD PTR [esi]
c00204f5:	e8 49 fa ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c00204fa:	5e                   	pop    esi
c00204fb:	5f                   	pop    edi
c00204fc:	52                   	push   edx
c00204fd:	50                   	push   eax
c00204fe:	e8 3a fd ff ff       	call   c002023d <Vm::fpuPush(unsigned long long)>
c0020503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020507:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002050a:	e9 51 fe ff ff       	jmp    c0020360 <Vm::x87Handler(regs*)+0x74>
c002050f:	80 fa 03             	cmp    dl,0x3
c0020512:	0f 85 d7 06 00 00    	jne    c0020bef <Vm::x87Handler(regs*)+0x903>
c0020518:	57                   	push   edi
c0020519:	57                   	push   edi
c002051a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002051d:	ff 36                	push   DWORD PTR [esi]
c002051f:	e8 1f fa ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020524:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002052b:	89 c6                	mov    esi,eax
c002052d:	89 d7                	mov    edi,edx
c002052f:	e8 7b fc ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020534:	57                   	push   edi
c0020535:	56                   	push   esi
c0020536:	52                   	push   edx
c0020537:	50                   	push   eax
c0020538:	e8 95 fb ff ff       	call   c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002053d:	83 c4 20             	add    esp,0x20
c0020540:	e8 55 fd ff ff       	call   c002029a <Vm::fpuPop()>
c0020545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020549:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c002054c:	e9 12 fe ff ff       	jmp    c0020363 <Vm::x87Handler(regs*)+0x77>
c0020551:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020555:	8d 50 40             	lea    edx,[eax+0x40]
c0020558:	80 fa 07             	cmp    dl,0x7
c002055b:	77 29                	ja     c0020586 <Vm::x87Handler(regs*)+0x29a>
c002055d:	83 ec 0c             	sub    esp,0xc
c0020560:	2d c0 00 00 00       	sub    eax,0xc0
c0020565:	50                   	push   eax
c0020566:	e8 44 fc ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002056b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020572:	89 c6                	mov    esi,eax
c0020574:	89 d7                	mov    edi,edx
c0020576:	e8 34 fc ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002057b:	57                   	push   edi
c002057c:	56                   	push   esi
c002057d:	52                   	push   edx
c002057e:	50                   	push   eax
c002057f:	e8 a1 fb ff ff       	call   c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020584:	eb 2f                	jmp    c00205b5 <Vm::x87Handler(regs*)+0x2c9>
c0020586:	8d 50 38             	lea    edx,[eax+0x38]
c0020589:	80 fa 07             	cmp    dl,0x7
c002058c:	77 2f                	ja     c00205bd <Vm::x87Handler(regs*)+0x2d1>
c002058e:	83 ec 0c             	sub    esp,0xc
c0020591:	2d c8 00 00 00       	sub    eax,0xc8
c0020596:	50                   	push   eax
c0020597:	e8 13 fc ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002059c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205a3:	89 c6                	mov    esi,eax
c00205a5:	89 d7                	mov    edi,edx
c00205a7:	e8 03 fc ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00205ac:	57                   	push   edi
c00205ad:	56                   	push   esi
c00205ae:	52                   	push   edx
c00205af:	50                   	push   eax
c00205b0:	e8 a9 fb ff ff       	call   c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00205b5:	83 c4 1c             	add    esp,0x1c
c00205b8:	e9 d8 fd ff ff       	jmp    c0020395 <Vm::x87Handler(regs*)+0xa9>
c00205bd:	8d 50 30             	lea    edx,[eax+0x30]
c00205c0:	80 fa 07             	cmp    dl,0x7
c00205c3:	77 0d                	ja     c00205d2 <Vm::x87Handler(regs*)+0x2e6>
c00205c5:	83 ec 0c             	sub    esp,0xc
c00205c8:	2d d0 00 00 00       	sub    eax,0xd0
c00205cd:	e9 99 03 00 00       	jmp    c002096b <Vm::x87Handler(regs*)+0x67f>
c00205d2:	8d 50 28             	lea    edx,[eax+0x28]
c00205d5:	80 fa 07             	cmp    dl,0x7
c00205d8:	77 0d                	ja     c00205e7 <Vm::x87Handler(regs*)+0x2fb>
c00205da:	83 ec 0c             	sub    esp,0xc
c00205dd:	2d d8 00 00 00       	sub    eax,0xd8
c00205e2:	e9 c0 03 00 00       	jmp    c00209a7 <Vm::x87Handler(regs*)+0x6bb>
c00205e7:	8d 50 20             	lea    edx,[eax+0x20]
c00205ea:	80 fa 07             	cmp    dl,0x7
c00205ed:	77 1b                	ja     c002060a <Vm::x87Handler(regs*)+0x31e>
c00205ef:	83 ec 0c             	sub    esp,0xc
c00205f2:	2d e0 00 00 00       	sub    eax,0xe0
c00205f7:	50                   	push   eax
c00205f8:	e8 b2 fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00205fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020604:	89 c6                	mov    esi,eax
c0020606:	89 d7                	mov    edi,edx
c0020608:	eb 22                	jmp    c002062c <Vm::x87Handler(regs*)+0x340>
c002060a:	8d 50 18             	lea    edx,[eax+0x18]
c002060d:	80 fa 07             	cmp    dl,0x7
c0020610:	77 2d                	ja     c002063f <Vm::x87Handler(regs*)+0x353>
c0020612:	83 ec 0c             	sub    esp,0xc
c0020615:	6a 00                	push   0x0
c0020617:	e8 93 fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002061c:	89 c6                	mov    esi,eax
c002061e:	89 d7                	mov    edi,edx
c0020620:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020624:	2d e8 00 00 00       	sub    eax,0xe8
c0020629:	89 04 24             	mov    DWORD PTR [esp],eax
c002062c:	e8 7e fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020631:	57                   	push   edi
c0020632:	56                   	push   esi
c0020633:	52                   	push   edx
c0020634:	50                   	push   eax
c0020635:	e8 15 fb ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002063a:	e9 76 ff ff ff       	jmp    c00205b5 <Vm::x87Handler(regs*)+0x2c9>
c002063f:	8d 50 10             	lea    edx,[eax+0x10]
c0020642:	80 fa 07             	cmp    dl,0x7
c0020645:	77 1b                	ja     c0020662 <Vm::x87Handler(regs*)+0x376>
c0020647:	83 ec 0c             	sub    esp,0xc
c002064a:	2d f0 00 00 00       	sub    eax,0xf0
c002064f:	50                   	push   eax
c0020650:	e8 5a fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020655:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002065c:	89 c6                	mov    esi,eax
c002065e:	89 d7                	mov    edi,edx
c0020660:	eb 22                	jmp    c0020684 <Vm::x87Handler(regs*)+0x398>
c0020662:	3c f7                	cmp    al,0xf7
c0020664:	0f 86 d1 03 00 00    	jbe    c0020a3b <Vm::x87Handler(regs*)+0x74f>
c002066a:	83 ec 0c             	sub    esp,0xc
c002066d:	6a 00                	push   0x0
c002066f:	e8 3b fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020674:	89 c6                	mov    esi,eax
c0020676:	89 d7                	mov    edi,edx
c0020678:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002067c:	2d f8 00 00 00       	sub    eax,0xf8
c0020681:	89 04 24             	mov    DWORD PTR [esp],eax
c0020684:	e8 26 fb ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020689:	57                   	push   edi
c002068a:	56                   	push   esi
c002068b:	52                   	push   edx
c002068c:	50                   	push   eax
c002068d:	e8 eb fa ff ff       	call   c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020692:	83 c4 1c             	add    esp,0x1c
c0020695:	52                   	push   edx
c0020696:	50                   	push   eax
c0020697:	6a 00                	push   0x0
c0020699:	e9 51 02 00 00       	jmp    c00208ef <Vm::x87Handler(regs*)+0x603>
c002069e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206a2:	8d 50 40             	lea    edx,[eax+0x40]
c00206a5:	80 fa 07             	cmp    dl,0x7
c00206a8:	77 37                	ja     c00206e1 <Vm::x87Handler(regs*)+0x3f5>
c00206aa:	83 ec 0c             	sub    esp,0xc
c00206ad:	2d c0 00 00 00       	sub    eax,0xc0
c00206b2:	50                   	push   eax
c00206b3:	e8 f7 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00206b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206bf:	89 c6                	mov    esi,eax
c00206c1:	89 d7                	mov    edi,edx
c00206c3:	e8 e7 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00206c8:	57                   	push   edi
c00206c9:	56                   	push   esi
c00206ca:	52                   	push   edx
c00206cb:	50                   	push   eax
c00206cc:	e8 54 fa ff ff       	call   c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00206d1:	83 c4 1c             	add    esp,0x1c
c00206d4:	52                   	push   edx
c00206d5:	50                   	push   eax
c00206d6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206da:	2d c0 00 00 00       	sub    eax,0xc0
c00206df:	eb 3d                	jmp    c002071e <Vm::x87Handler(regs*)+0x432>
c00206e1:	8d 50 38             	lea    edx,[eax+0x38]
c00206e4:	80 fa 07             	cmp    dl,0x7
c00206e7:	77 3b                	ja     c0020724 <Vm::x87Handler(regs*)+0x438>
c00206e9:	83 ec 0c             	sub    esp,0xc
c00206ec:	2d c8 00 00 00       	sub    eax,0xc8
c00206f1:	50                   	push   eax
c00206f2:	e8 b8 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00206f7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206fe:	89 c6                	mov    esi,eax
c0020700:	89 d7                	mov    edi,edx
c0020702:	e8 a8 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020707:	57                   	push   edi
c0020708:	56                   	push   esi
c0020709:	52                   	push   edx
c002070a:	50                   	push   eax
c002070b:	e8 4e fa ff ff       	call   c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020710:	83 c4 1c             	add    esp,0x1c
c0020713:	52                   	push   edx
c0020714:	50                   	push   eax
c0020715:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020719:	2d c8 00 00 00       	sub    eax,0xc8
c002071e:	50                   	push   eax
c002071f:	e9 75 fc ff ff       	jmp    c0020399 <Vm::x87Handler(regs*)+0xad>
c0020724:	83 c0 18             	add    eax,0x18
c0020727:	3c 07                	cmp    al,0x7
c0020729:	0f 87 3b 04 00 00    	ja     c0020b6a <Vm::x87Handler(regs*)+0x87e>
c002072f:	83 ec 0c             	sub    esp,0xc
c0020732:	6a 00                	push   0x0
c0020734:	e8 76 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020739:	89 c6                	mov    esi,eax
c002073b:	89 d7                	mov    edi,edx
c002073d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020741:	2d e8 00 00 00       	sub    eax,0xe8
c0020746:	89 04 24             	mov    DWORD PTR [esp],eax
c0020749:	e8 61 fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002074e:	57                   	push   edi
c002074f:	56                   	push   esi
c0020750:	52                   	push   edx
c0020751:	50                   	push   eax
c0020752:	e8 f8 f9 ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020757:	83 c4 1c             	add    esp,0x1c
c002075a:	52                   	push   edx
c002075b:	50                   	push   eax
c002075c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020760:	2d e8 00 00 00       	sub    eax,0xe8
c0020765:	eb b7                	jmp    c002071e <Vm::x87Handler(regs*)+0x432>
c0020767:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002076b:	8d 50 40             	lea    edx,[eax+0x40]
c002076e:	80 fa 07             	cmp    dl,0x7
c0020771:	77 3a                	ja     c00207ad <Vm::x87Handler(regs*)+0x4c1>
c0020773:	83 ec 0c             	sub    esp,0xc
c0020776:	2d c0 00 00 00       	sub    eax,0xc0
c002077b:	50                   	push   eax
c002077c:	e8 2e fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020781:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020788:	89 c6                	mov    esi,eax
c002078a:	89 d7                	mov    edi,edx
c002078c:	e8 1e fa ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020791:	57                   	push   edi
c0020792:	56                   	push   esi
c0020793:	52                   	push   edx
c0020794:	50                   	push   eax
c0020795:	e8 8b f9 ff ff       	call   c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002079a:	83 c4 1c             	add    esp,0x1c
c002079d:	52                   	push   edx
c002079e:	50                   	push   eax
c002079f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207a3:	2d c0 00 00 00       	sub    eax,0xc0
c00207a8:	e9 9e 01 00 00       	jmp    c002094b <Vm::x87Handler(regs*)+0x65f>
c00207ad:	8d 50 20             	lea    edx,[eax+0x20]
c00207b0:	80 fa 07             	cmp    dl,0x7
c00207b3:	77 3a                	ja     c00207ef <Vm::x87Handler(regs*)+0x503>
c00207b5:	83 ec 0c             	sub    esp,0xc
c00207b8:	2d e0 00 00 00       	sub    eax,0xe0
c00207bd:	50                   	push   eax
c00207be:	e8 ec f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00207c3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207ca:	89 c6                	mov    esi,eax
c00207cc:	89 d7                	mov    edi,edx
c00207ce:	e8 dc f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00207d3:	57                   	push   edi
c00207d4:	56                   	push   esi
c00207d5:	52                   	push   edx
c00207d6:	50                   	push   eax
c00207d7:	e8 73 f9 ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c00207dc:	83 c4 1c             	add    esp,0x1c
c00207df:	52                   	push   edx
c00207e0:	50                   	push   eax
c00207e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00207e5:	2d e0 00 00 00       	sub    eax,0xe0
c00207ea:	e9 5c 01 00 00       	jmp    c002094b <Vm::x87Handler(regs*)+0x65f>
c00207ef:	8d 50 18             	lea    edx,[eax+0x18]
c00207f2:	80 fa 07             	cmp    dl,0x7
c00207f5:	77 3b                	ja     c0020832 <Vm::x87Handler(regs*)+0x546>
c00207f7:	83 ec 0c             	sub    esp,0xc
c00207fa:	6a 00                	push   0x0
c00207fc:	e8 ae f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020801:	89 c6                	mov    esi,eax
c0020803:	89 d7                	mov    edi,edx
c0020805:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020809:	2d e8 00 00 00       	sub    eax,0xe8
c002080e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020811:	e8 99 f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020816:	57                   	push   edi
c0020817:	56                   	push   esi
c0020818:	52                   	push   edx
c0020819:	50                   	push   eax
c002081a:	e8 30 f9 ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c002081f:	83 c4 1c             	add    esp,0x1c
c0020822:	52                   	push   edx
c0020823:	50                   	push   eax
c0020824:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020828:	2d e8 00 00 00       	sub    eax,0xe8
c002082d:	e9 19 01 00 00       	jmp    c002094b <Vm::x87Handler(regs*)+0x65f>
c0020832:	8d 50 38             	lea    edx,[eax+0x38]
c0020835:	80 fa 07             	cmp    dl,0x7
c0020838:	77 37                	ja     c0020871 <Vm::x87Handler(regs*)+0x585>
c002083a:	83 ec 0c             	sub    esp,0xc
c002083d:	2d c8 00 00 00       	sub    eax,0xc8
c0020842:	50                   	push   eax
c0020843:	e8 67 f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020848:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002084f:	89 c6                	mov    esi,eax
c0020851:	89 d7                	mov    edi,edx
c0020853:	e8 57 f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020858:	57                   	push   edi
c0020859:	56                   	push   esi
c002085a:	52                   	push   edx
c002085b:	50                   	push   eax
c002085c:	e8 fd f8 ff ff       	call   c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020861:	83 c4 1c             	add    esp,0x1c
c0020864:	52                   	push   edx
c0020865:	50                   	push   eax
c0020866:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002086a:	2d c8 00 00 00       	sub    eax,0xc8
c002086f:	eb 7d                	jmp    c00208ee <Vm::x87Handler(regs*)+0x602>
c0020871:	3c f7                	cmp    al,0xf7
c0020873:	76 38                	jbe    c00208ad <Vm::x87Handler(regs*)+0x5c1>
c0020875:	83 ec 0c             	sub    esp,0xc
c0020878:	6a 00                	push   0x0
c002087a:	e8 30 f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002087f:	89 c6                	mov    esi,eax
c0020881:	89 d7                	mov    edi,edx
c0020883:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020887:	2d f8 00 00 00       	sub    eax,0xf8
c002088c:	89 04 24             	mov    DWORD PTR [esp],eax
c002088f:	e8 1b f9 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020894:	57                   	push   edi
c0020895:	56                   	push   esi
c0020896:	52                   	push   edx
c0020897:	50                   	push   eax
c0020898:	e8 e0 f8 ff ff       	call   c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002089d:	83 c4 1c             	add    esp,0x1c
c00208a0:	52                   	push   edx
c00208a1:	50                   	push   eax
c00208a2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208a6:	2d f8 00 00 00       	sub    eax,0xf8
c00208ab:	eb 41                	jmp    c00208ee <Vm::x87Handler(regs*)+0x602>
c00208ad:	8d 50 10             	lea    edx,[eax+0x10]
c00208b0:	80 fa 07             	cmp    dl,0x7
c00208b3:	0f 87 5a 01 00 00    	ja     c0020a13 <Vm::x87Handler(regs*)+0x727>
c00208b9:	83 ec 0c             	sub    esp,0xc
c00208bc:	2d f0 00 00 00       	sub    eax,0xf0
c00208c1:	50                   	push   eax
c00208c2:	e8 e8 f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00208c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00208ce:	89 c6                	mov    esi,eax
c00208d0:	89 d7                	mov    edi,edx
c00208d2:	e8 d8 f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00208d7:	57                   	push   edi
c00208d8:	56                   	push   esi
c00208d9:	52                   	push   edx
c00208da:	50                   	push   eax
c00208db:	e8 9d f8 ff ff       	call   c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00208e0:	83 c4 1c             	add    esp,0x1c
c00208e3:	52                   	push   edx
c00208e4:	50                   	push   eax
c00208e5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00208e9:	2d f0 00 00 00       	sub    eax,0xf0
c00208ee:	50                   	push   eax
c00208ef:	e8 fe f8 ff ff       	call   c00201f2 <Vm::fpuSetReg(int, unsigned long long)>
c00208f4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00208f8:	e8 9d f9 ff ff       	call   c002029a <Vm::fpuPop()>
c00208fd:	e9 5e fa ff ff       	jmp    c0020360 <Vm::x87Handler(regs*)+0x74>
c0020902:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020906:	8d 50 30             	lea    edx,[eax+0x30]
c0020909:	80 fa 07             	cmp    dl,0x7
c002090c:	77 1d                	ja     c002092b <Vm::x87Handler(regs*)+0x63f>
c002090e:	83 ec 0c             	sub    esp,0xc
c0020911:	6a 00                	push   0x0
c0020913:	e8 97 f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020918:	83 c4 0c             	add    esp,0xc
c002091b:	52                   	push   edx
c002091c:	50                   	push   eax
c002091d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020921:	2d d0 00 00 00       	sub    eax,0xd0
c0020926:	e9 f3 fd ff ff       	jmp    c002071e <Vm::x87Handler(regs*)+0x432>
c002092b:	8d 50 28             	lea    edx,[eax+0x28]
c002092e:	80 fa 07             	cmp    dl,0x7
c0020931:	77 28                	ja     c002095b <Vm::x87Handler(regs*)+0x66f>
c0020933:	83 ec 0c             	sub    esp,0xc
c0020936:	6a 00                	push   0x0
c0020938:	e8 72 f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c002093d:	83 c4 0c             	add    esp,0xc
c0020940:	52                   	push   edx
c0020941:	50                   	push   eax
c0020942:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020946:	2d d8 00 00 00       	sub    eax,0xd8
c002094b:	50                   	push   eax
c002094c:	e8 a1 f8 ff ff       	call   c00201f2 <Vm::fpuSetReg(int, unsigned long long)>
c0020951:	e8 44 f9 ff ff       	call   c002029a <Vm::fpuPop()>
c0020956:	e9 01 fa ff ff       	jmp    c002035c <Vm::x87Handler(regs*)+0x70>
c002095b:	8d 50 20             	lea    edx,[eax+0x20]
c002095e:	80 fa 07             	cmp    dl,0x7
c0020961:	77 30                	ja     c0020993 <Vm::x87Handler(regs*)+0x6a7>
c0020963:	83 ec 0c             	sub    esp,0xc
c0020966:	2d e0 00 00 00       	sub    eax,0xe0
c002096b:	50                   	push   eax
c002096c:	e8 3e f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020971:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020978:	89 c6                	mov    esi,eax
c002097a:	89 d7                	mov    edi,edx
c002097c:	e8 2e f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020981:	57                   	push   edi
c0020982:	56                   	push   esi
c0020983:	52                   	push   edx
c0020984:	50                   	push   eax
c0020985:	e8 48 f7 ff ff       	call   c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002098a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002098e:	e9 54 02 00 00       	jmp    c0020be7 <Vm::x87Handler(regs*)+0x8fb>
c0020993:	8d 50 18             	lea    edx,[eax+0x18]
c0020996:	80 fa 07             	cmp    dl,0x7
c0020999:	0f 87 43 fb ff ff    	ja     c00204e2 <Vm::x87Handler(regs*)+0x1f6>
c002099f:	83 ec 0c             	sub    esp,0xc
c00209a2:	2d e8 00 00 00       	sub    eax,0xe8
c00209a7:	50                   	push   eax
c00209a8:	e8 02 f8 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00209ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209b4:	89 c6                	mov    esi,eax
c00209b6:	89 d7                	mov    edi,edx
c00209b8:	e8 f2 f7 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00209bd:	57                   	push   edi
c00209be:	56                   	push   esi
c00209bf:	52                   	push   edx
c00209c0:	50                   	push   eax
c00209c1:	e8 0c f7 ff ff       	call   c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209c6:	83 c4 20             	add    esp,0x20
c00209c9:	e8 cc f8 ff ff       	call   c002029a <Vm::fpuPop()>
c00209ce:	eb 62                	jmp    c0020a32 <Vm::x87Handler(regs*)+0x746>
c00209d0:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00209d4:	0f 85 0f 01 00 00    	jne    c0020ae9 <Vm::x87Handler(regs*)+0x7fd>
c00209da:	83 ec 0c             	sub    esp,0xc
c00209dd:	6a 01                	push   0x1
c00209df:	e8 cb f7 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00209e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209eb:	89 c6                	mov    esi,eax
c00209ed:	89 d7                	mov    edi,edx
c00209ef:	e8 bb f7 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c00209f4:	57                   	push   edi
c00209f5:	56                   	push   esi
c00209f6:	52                   	push   edx
c00209f7:	50                   	push   eax
c00209f8:	e8 d5 f6 ff ff       	call   c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209fd:	83 c4 20             	add    esp,0x20
c0020a00:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a04:	e8 91 f8 ff ff       	call   c002029a <Vm::fpuPop()>
c0020a09:	e8 8c f8 ff ff       	call   c002029a <Vm::fpuPop()>
c0020a0e:	e9 50 f9 ff ff       	jmp    c0020363 <Vm::x87Handler(regs*)+0x77>
c0020a13:	3c d9                	cmp    al,0xd9
c0020a15:	0f 85 b5 02 00 00    	jne    c0020cd0 <Vm::x87Handler(regs*)+0x9e4>
c0020a1b:	eb bd                	jmp    c00209da <Vm::x87Handler(regs*)+0x6ee>
c0020a1d:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020a21:	0f 85 ea 02 00 00    	jne    c0020d11 <Vm::x87Handler(regs*)+0xa25>
c0020a27:	0f b7 05 a0 28 03 c0 	movzx  eax,WORD PTR ds:0xc00328a0
c0020a2e:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020a32:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020a36:	e9 28 f9 ff ff       	jmp    c0020363 <Vm::x87Handler(regs*)+0x77>
c0020a3b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020a3f:	84 d2                	test   dl,dl
c0020a41:	75 0f                	jne    c0020a52 <Vm::x87Handler(regs*)+0x766>
c0020a43:	83 ec 0c             	sub    esp,0xc
c0020a46:	ff 36                	push   DWORD PTR [esi]
c0020a48:	e8 b1 f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020a4d:	e9 2c 01 00 00       	jmp    c0020b7e <Vm::x87Handler(regs*)+0x892>
c0020a52:	80 fa 01             	cmp    dl,0x1
c0020a55:	75 0f                	jne    c0020a66 <Vm::x87Handler(regs*)+0x77a>
c0020a57:	83 ec 0c             	sub    esp,0xc
c0020a5a:	ff 36                	push   DWORD PTR [esi]
c0020a5c:	e8 9d f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020a61:	e9 81 02 00 00       	jmp    c0020ce7 <Vm::x87Handler(regs*)+0x9fb>
c0020a66:	80 fa 04             	cmp    dl,0x4
c0020a69:	75 0f                	jne    c0020a7a <Vm::x87Handler(regs*)+0x78e>
c0020a6b:	83 ec 0c             	sub    esp,0xc
c0020a6e:	ff 36                	push   DWORD PTR [esi]
c0020a70:	e8 89 f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020a75:	e9 86 01 00 00       	jmp    c0020c00 <Vm::x87Handler(regs*)+0x914>
c0020a7a:	80 fa 05             	cmp    dl,0x5
c0020a7d:	75 1b                	jne    c0020a9a <Vm::x87Handler(regs*)+0x7ae>
c0020a7f:	83 ec 0c             	sub    esp,0xc
c0020a82:	6a 00                	push   0x0
c0020a84:	e8 26 f7 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020a89:	89 c7                	mov    edi,eax
c0020a8b:	89 d5                	mov    ebp,edx
c0020a8d:	58                   	pop    eax
c0020a8e:	ff 36                	push   DWORD PTR [esi]
c0020a90:	e8 69 f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020a95:	e9 a3 01 00 00       	jmp    c0020c3d <Vm::x87Handler(regs*)+0x951>
c0020a9a:	80 fa 06             	cmp    dl,0x6
c0020a9d:	75 0f                	jne    c0020aae <Vm::x87Handler(regs*)+0x7c2>
c0020a9f:	83 ec 0c             	sub    esp,0xc
c0020aa2:	ff 36                	push   DWORD PTR [esi]
c0020aa4:	e8 55 f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020aa9:	e9 ae 01 00 00       	jmp    c0020c5c <Vm::x87Handler(regs*)+0x970>
c0020aae:	31 c0                	xor    eax,eax
c0020ab0:	80 fa 07             	cmp    dl,0x7
c0020ab3:	0f 85 94 02 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020ab9:	83 ec 0c             	sub    esp,0xc
c0020abc:	6a 00                	push   0x0
c0020abe:	e8 ec f6 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020ac3:	89 c7                	mov    edi,eax
c0020ac5:	89 d5                	mov    ebp,edx
c0020ac7:	58                   	pop    eax
c0020ac8:	ff 36                	push   DWORD PTR [esi]
c0020aca:	e8 2f f4 ff ff       	call   c001fefe <Vm::fpu32ToInternal(unsigned int)>
c0020acf:	e9 cb 01 00 00       	jmp    c0020c9f <Vm::x87Handler(regs*)+0x9b3>
c0020ad4:	80 fa 03             	cmp    dl,0x3
c0020ad7:	0f 85 d3 01 00 00    	jne    c0020cb0 <Vm::x87Handler(regs*)+0x9c4>
c0020add:	e8 b8 f7 ff ff       	call   c002029a <Vm::fpuPop()>
c0020ae2:	51                   	push   ecx
c0020ae3:	51                   	push   ecx
c0020ae4:	e9 de 01 00 00       	jmp    c0020cc7 <Vm::x87Handler(regs*)+0x9db>
c0020ae9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020aed:	80 fa 01             	cmp    dl,0x1
c0020af0:	75 09                	jne    c0020afb <Vm::x87Handler(regs*)+0x80f>
c0020af2:	57                   	push   edi
c0020af3:	57                   	push   edi
c0020af4:	8b 06                	mov    eax,DWORD PTR [esi]
c0020af6:	e9 e3 01 00 00       	jmp    c0020cde <Vm::x87Handler(regs*)+0x9f2>
c0020afb:	80 fa 04             	cmp    dl,0x4
c0020afe:	75 12                	jne    c0020b12 <Vm::x87Handler(regs*)+0x826>
c0020b00:	31 d2                	xor    edx,edx
c0020b02:	51                   	push   ecx
c0020b03:	51                   	push   ecx
c0020b04:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b06:	52                   	push   edx
c0020b07:	50                   	push   eax
c0020b08:	e8 d0 f4 ff ff       	call   c001ffdd <Vm::fpuLongToFloat(long long)>
c0020b0d:	e9 ee 00 00 00       	jmp    c0020c00 <Vm::x87Handler(regs*)+0x914>
c0020b12:	31 c0                	xor    eax,eax
c0020b14:	80 fa 07             	cmp    dl,0x7
c0020b17:	0f 85 30 02 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020b1d:	83 ec 0c             	sub    esp,0xc
c0020b20:	6a 00                	push   0x0
c0020b22:	e8 88 f6 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020b27:	89 c7                	mov    edi,eax
c0020b29:	89 d5                	mov    ebp,edx
c0020b2b:	58                   	pop    eax
c0020b2c:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b2e:	5a                   	pop    edx
c0020b2f:	31 d2                	xor    edx,edx
c0020b31:	52                   	push   edx
c0020b32:	50                   	push   eax
c0020b33:	e8 a5 f4 ff ff       	call   c001ffdd <Vm::fpuLongToFloat(long long)>
c0020b38:	e9 62 01 00 00       	jmp    c0020c9f <Vm::x87Handler(regs*)+0x9b3>
c0020b3d:	84 d2                	test   dl,dl
c0020b3f:	75 0d                	jne    c0020b4e <Vm::x87Handler(regs*)+0x862>
c0020b41:	31 d2                	xor    edx,edx
c0020b43:	55                   	push   ebp
c0020b44:	55                   	push   ebp
c0020b45:	8b 06                	mov    eax,DWORD PTR [esi]
c0020b47:	52                   	push   edx
c0020b48:	50                   	push   eax
c0020b49:	e9 d3 01 00 00       	jmp    c0020d21 <Vm::x87Handler(regs*)+0xa35>
c0020b4e:	31 c0                	xor    eax,eax
c0020b50:	80 fa 02             	cmp    dl,0x2
c0020b53:	0f 85 f4 01 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020b59:	83 ec 0c             	sub    esp,0xc
c0020b5c:	6a 00                	push   0x0
c0020b5e:	e8 4c f6 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020b63:	59                   	pop    ecx
c0020b64:	5f                   	pop    edi
c0020b65:	e9 6a f9 ff ff       	jmp    c00204d4 <Vm::x87Handler(regs*)+0x1e8>
c0020b6a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020b6e:	84 d2                	test   dl,dl
c0020b70:	75 2a                	jne    c0020b9c <Vm::x87Handler(regs*)+0x8b0>
c0020b72:	50                   	push   eax
c0020b73:	50                   	push   eax
c0020b74:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b77:	ff 36                	push   DWORD PTR [esi]
c0020b79:	e8 c5 f3 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020b7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020b85:	89 c6                	mov    esi,eax
c0020b87:	89 d7                	mov    edi,edx
c0020b89:	e8 21 f6 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020b8e:	57                   	push   edi
c0020b8f:	56                   	push   esi
c0020b90:	52                   	push   edx
c0020b91:	50                   	push   eax
c0020b92:	e8 8e f5 ff ff       	call   c0020125 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020b97:	e9 64 01 00 00       	jmp    c0020d00 <Vm::x87Handler(regs*)+0xa14>
c0020b9c:	80 fa 01             	cmp    dl,0x1
c0020b9f:	75 11                	jne    c0020bb2 <Vm::x87Handler(regs*)+0x8c6>
c0020ba1:	50                   	push   eax
c0020ba2:	50                   	push   eax
c0020ba3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020ba6:	ff 36                	push   DWORD PTR [esi]
c0020ba8:	e8 96 f3 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020bad:	e9 35 01 00 00       	jmp    c0020ce7 <Vm::x87Handler(regs*)+0x9fb>
c0020bb2:	80 fa 02             	cmp    dl,0x2
c0020bb5:	0f 85 54 f9 ff ff    	jne    c002050f <Vm::x87Handler(regs*)+0x223>
c0020bbb:	55                   	push   ebp
c0020bbc:	55                   	push   ebp
c0020bbd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bc0:	ff 36                	push   DWORD PTR [esi]
c0020bc2:	e8 7c f3 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020bc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020bce:	89 c6                	mov    esi,eax
c0020bd0:	89 d7                	mov    edi,edx
c0020bd2:	e8 d8 f5 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020bd7:	57                   	push   edi
c0020bd8:	56                   	push   esi
c0020bd9:	52                   	push   edx
c0020bda:	50                   	push   eax
c0020bdb:	e8 f2 f4 ff ff       	call   c00200d2 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020be0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020be4:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020be7:	83 c4 20             	add    esp,0x20
c0020bea:	e9 74 f7 ff ff       	jmp    c0020363 <Vm::x87Handler(regs*)+0x77>
c0020bef:	80 fa 04             	cmp    dl,0x4
c0020bf2:	75 2a                	jne    c0020c1e <Vm::x87Handler(regs*)+0x932>
c0020bf4:	51                   	push   ecx
c0020bf5:	51                   	push   ecx
c0020bf6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020bf9:	ff 36                	push   DWORD PTR [esi]
c0020bfb:	e8 43 f3 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020c00:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c07:	89 c6                	mov    esi,eax
c0020c09:	89 d7                	mov    edi,edx
c0020c0b:	e8 9f f5 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020c10:	57                   	push   edi
c0020c11:	56                   	push   esi
c0020c12:	52                   	push   edx
c0020c13:	50                   	push   eax
c0020c14:	e8 36 f5 ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c19:	e9 e2 00 00 00       	jmp    c0020d00 <Vm::x87Handler(regs*)+0xa14>
c0020c1e:	80 fa 05             	cmp    dl,0x5
c0020c21:	75 28                	jne    c0020c4b <Vm::x87Handler(regs*)+0x95f>
c0020c23:	83 ec 0c             	sub    esp,0xc
c0020c26:	6a 00                	push   0x0
c0020c28:	e8 82 f5 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020c2d:	89 c7                	mov    edi,eax
c0020c2f:	89 d5                	mov    ebp,edx
c0020c31:	58                   	pop    eax
c0020c32:	5a                   	pop    edx
c0020c33:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c36:	ff 36                	push   DWORD PTR [esi]
c0020c38:	e8 06 f3 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020c3d:	83 c4 10             	add    esp,0x10
c0020c40:	55                   	push   ebp
c0020c41:	57                   	push   edi
c0020c42:	52                   	push   edx
c0020c43:	50                   	push   eax
c0020c44:	e8 06 f5 ff ff       	call   c002014f <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020c49:	eb 60                	jmp    c0020cab <Vm::x87Handler(regs*)+0x9bf>
c0020c4b:	80 fa 06             	cmp    dl,0x6
c0020c4e:	75 2a                	jne    c0020c7a <Vm::x87Handler(regs*)+0x98e>
c0020c50:	51                   	push   ecx
c0020c51:	51                   	push   ecx
c0020c52:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c55:	ff 36                	push   DWORD PTR [esi]
c0020c57:	e8 e7 f2 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020c5c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020c63:	89 c6                	mov    esi,eax
c0020c65:	89 d7                	mov    edi,edx
c0020c67:	e8 43 f5 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020c6c:	57                   	push   edi
c0020c6d:	56                   	push   esi
c0020c6e:	52                   	push   edx
c0020c6f:	50                   	push   eax
c0020c70:	e8 08 f5 ff ff       	call   c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020c75:	e9 86 00 00 00       	jmp    c0020d00 <Vm::x87Handler(regs*)+0xa14>
c0020c7a:	31 c0                	xor    eax,eax
c0020c7c:	80 fa 07             	cmp    dl,0x7
c0020c7f:	0f 85 c8 00 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020c85:	83 ec 0c             	sub    esp,0xc
c0020c88:	6a 00                	push   0x0
c0020c8a:	e8 20 f5 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020c8f:	89 c7                	mov    edi,eax
c0020c91:	89 d5                	mov    ebp,edx
c0020c93:	58                   	pop    eax
c0020c94:	5a                   	pop    edx
c0020c95:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020c98:	ff 36                	push   DWORD PTR [esi]
c0020c9a:	e8 a4 f2 ff ff       	call   c001ff43 <Vm::fpu64ToInternal(unsigned long long)>
c0020c9f:	83 c4 10             	add    esp,0x10
c0020ca2:	55                   	push   ebp
c0020ca3:	57                   	push   edi
c0020ca4:	52                   	push   edx
c0020ca5:	50                   	push   eax
c0020ca6:	e8 d2 f4 ff ff       	call   c002017d <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020cab:	83 c4 0c             	add    esp,0xc
c0020cae:	eb 53                	jmp    c0020d03 <Vm::x87Handler(regs*)+0xa17>
c0020cb0:	31 c0                	xor    eax,eax
c0020cb2:	80 fa 02             	cmp    dl,0x2
c0020cb5:	0f 85 92 00 00 00    	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020cbb:	83 ec 0c             	sub    esp,0xc
c0020cbe:	6a 00                	push   0x0
c0020cc0:	e8 ea f4 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020cc5:	59                   	pop    ecx
c0020cc6:	5f                   	pop    edi
c0020cc7:	52                   	push   edx
c0020cc8:	50                   	push   eax
c0020cc9:	e8 27 f2 ff ff       	call   c001fef5 <Vm::fpuInternalTo64(unsigned long long)>
c0020cce:	eb 70                	jmp    c0020d40 <Vm::x87Handler(regs*)+0xa54>
c0020cd0:	31 c0                	xor    eax,eax
c0020cd2:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020cd7:	75 74                	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020cd9:	50                   	push   eax
c0020cda:	50                   	push   eax
c0020cdb:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020cde:	31 d2                	xor    edx,edx
c0020ce0:	52                   	push   edx
c0020ce1:	50                   	push   eax
c0020ce2:	e8 f6 f2 ff ff       	call   c001ffdd <Vm::fpuLongToFloat(long long)>
c0020ce7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020cee:	89 c6                	mov    esi,eax
c0020cf0:	89 d7                	mov    edi,edx
c0020cf2:	e8 b8 f4 ff ff       	call   c00201af <Vm::fpuGetReg(int)>
c0020cf7:	57                   	push   edi
c0020cf8:	56                   	push   esi
c0020cf9:	52                   	push   edx
c0020cfa:	50                   	push   eax
c0020cfb:	e8 5e f4 ff ff       	call   c002015e <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020d00:	83 c4 1c             	add    esp,0x1c
c0020d03:	52                   	push   edx
c0020d04:	50                   	push   eax
c0020d05:	6a 00                	push   0x0
c0020d07:	e8 e6 f4 ff ff       	call   c00201f2 <Vm::fpuSetReg(int, unsigned long long)>
c0020d0c:	e9 f2 f7 ff ff       	jmp    c0020503 <Vm::x87Handler(regs*)+0x217>
c0020d11:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020d15:	80 fa 05             	cmp    dl,0x5
c0020d18:	75 11                	jne    c0020d2b <Vm::x87Handler(regs*)+0xa3f>
c0020d1a:	55                   	push   ebp
c0020d1b:	55                   	push   ebp
c0020d1c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020d1f:	ff 36                	push   DWORD PTR [esi]
c0020d21:	e8 81 f2 ff ff       	call   c001ffa7 <Vm::fpuULongToFloat(unsigned long long)>
c0020d26:	e9 cf f7 ff ff       	jmp    c00204fa <Vm::x87Handler(regs*)+0x20e>
c0020d2b:	31 c0                	xor    eax,eax
c0020d2d:	80 fa 07             	cmp    dl,0x7
c0020d30:	75 1b                	jne    c0020d4d <Vm::x87Handler(regs*)+0xa61>
c0020d32:	e8 63 f5 ff ff       	call   c002029a <Vm::fpuPop()>
c0020d37:	51                   	push   ecx
c0020d38:	51                   	push   ecx
c0020d39:	52                   	push   edx
c0020d3a:	50                   	push   eax
c0020d3b:	e8 0c f2 ff ff       	call   c001ff4c <Vm::fpuFloatToLong(unsigned long long)>
c0020d40:	83 c4 10             	add    esp,0x10
c0020d43:	89 06                	mov    DWORD PTR [esi],eax
c0020d45:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020d48:	e9 f8 f7 ff ff       	jmp    c0020545 <Vm::x87Handler(regs*)+0x259>
c0020d4d:	83 c4 1c             	add    esp,0x1c
c0020d50:	5b                   	pop    ebx
c0020d51:	5e                   	pop    esi
c0020d52:	5f                   	pop    edi
c0020d53:	5d                   	pop    ebp
c0020d54:	c3                   	ret    

c0020d55 <__static_initialization_and_destruction_0(int, int)>:
c0020d55:	83 ec 0c             	sub    esp,0xc
c0020d58:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020d5d:	75 1a                	jne    c0020d79 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d5f:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020d67:	75 10                	jne    c0020d79 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020d69:	83 ec 0c             	sub    esp,0xc
c0020d6c:	68 a0 28 03 c0       	push   0xc00328a0
c0020d71:	e8 e6 8c 00 00       	call   c0029a5c <Vm::_FPUState::_FPUState()>
c0020d76:	83 c4 10             	add    esp,0x10
c0020d79:	90                   	nop
c0020d7a:	83 c4 0c             	add    esp,0xc
c0020d7d:	c3                   	ret    

c0020d7e <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020d7e:	83 ec 0c             	sub    esp,0xc
c0020d81:	83 ec 08             	sub    esp,0x8
c0020d84:	68 ff ff 00 00       	push   0xffff
c0020d89:	6a 01                	push   0x1
c0020d8b:	e8 c5 ff ff ff       	call   c0020d55 <__static_initialization_and_destruction_0(int, int)>
c0020d90:	83 c4 10             	add    esp,0x10
c0020d93:	83 c4 0c             	add    esp,0xc
c0020d96:	c3                   	ret    
c0020d97:	90                   	nop

c0020d98 <FAT::getName()>:
c0020d98:	b8 6c d6 02 c0       	mov    eax,0xc002d66c
c0020d9d:	c3                   	ret    

c0020d9e <FAT::tell(void*, unsigned long long*)>:
c0020d9e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020da3:	75 06                	jne    c0020dab <FAT::tell(void*, unsigned long long*)+0xd>
c0020da5:	b8 04 00 00 00       	mov    eax,0x4
c0020daa:	c3                   	ret    
c0020dab:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020db0:	75 06                	jne    c0020db8 <FAT::tell(void*, unsigned long long*)+0x1a>
c0020db2:	b8 04 00 00 00       	mov    eax,0x4
c0020db7:	c3                   	ret    
c0020db8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020dbc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020dbf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020dc2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020dc6:	89 01                	mov    DWORD PTR [ecx],eax
c0020dc8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dcb:	b8 00 00 00 00       	mov    eax,0x0
c0020dd0:	c3                   	ret    
c0020dd1:	90                   	nop

c0020dd2 <FAT::stat(void*, unsigned long long*)>:
c0020dd2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020dd7:	75 06                	jne    c0020ddf <FAT::stat(void*, unsigned long long*)+0xd>
c0020dd9:	b8 04 00 00 00       	mov    eax,0x4
c0020dde:	c3                   	ret    
c0020ddf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020de4:	75 06                	jne    c0020dec <FAT::stat(void*, unsigned long long*)+0x1a>
c0020de6:	b8 04 00 00 00       	mov    eax,0x4
c0020deb:	c3                   	ret    
c0020dec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020df0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020df3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020df6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020dfa:	89 01                	mov    DWORD PTR [ecx],eax
c0020dfc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020dff:	b8 00 00 00 00       	mov    eax,0x0
c0020e04:	c3                   	ret    
c0020e05:	90                   	nop

c0020e06 <FAT::~FAT()>:
c0020e06:	83 ec 0c             	sub    esp,0xc
c0020e09:	ba fc d6 02 c0       	mov    edx,0xc002d6fc
c0020e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e12:	89 10                	mov    DWORD PTR [eax],edx
c0020e14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e18:	83 ec 0c             	sub    esp,0xc
c0020e1b:	50                   	push   eax
c0020e1c:	e8 6d 23 ff ff       	call   c001318e <Filesystem::~Filesystem()>
c0020e21:	83 c4 10             	add    esp,0x10
c0020e24:	90                   	nop
c0020e25:	83 c4 0c             	add    esp,0xc
c0020e28:	c3                   	ret    
c0020e29:	90                   	nop

c0020e2a <FAT::~FAT()>:
c0020e2a:	83 ec 0c             	sub    esp,0xc
c0020e2d:	83 ec 0c             	sub    esp,0xc
c0020e30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e34:	e8 cd ff ff ff       	call   c0020e06 <FAT::~FAT()>
c0020e39:	83 c4 10             	add    esp,0x10
c0020e3c:	83 ec 08             	sub    esp,0x8
c0020e3f:	6a 08                	push   0x8
c0020e41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e45:	e8 35 1f ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0020e4a:	83 c4 10             	add    esp,0x10
c0020e4d:	83 c4 0c             	add    esp,0xc
c0020e50:	c3                   	ret    
c0020e51:	90                   	nop

c0020e52 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020e52:	83 ec 1c             	sub    esp,0x1c
c0020e55:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020e5c:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020e61:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e65:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020e6c:	83 f8 ff             	cmp    eax,0xffffffff
c0020e6f:	75 34                	jne    c0020ea5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020e71:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020e75:	88 c2                	mov    dl,al
c0020e77:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020e7c:	01 d0                	add    eax,edx
c0020e7e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020e82:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0020e88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e8c:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020e93:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020e98:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020e9c:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0020ea3:	eb 17                	jmp    c0020ebc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020ea5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020ea9:	88 c2                	mov    dl,al
c0020eab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eaf:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020eb6:	01 d0                	add    eax,edx
c0020eb8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ebc:	83 ec 04             	sub    esp,0x4
c0020ebf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ec3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ec7:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020ecb:	50                   	push   eax
c0020ecc:	e8 55 5e fe ff       	call   c0006d26 <f_getlabel>
c0020ed1:	83 c4 10             	add    esp,0x10
c0020ed4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ed8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020edd:	75 07                	jne    c0020ee6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020edf:	b8 00 00 00 00       	mov    eax,0x0
c0020ee4:	eb 05                	jmp    c0020eeb <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020ee6:	b8 01 00 00 00       	mov    eax,0x1
c0020eeb:	83 c4 1c             	add    esp,0x1c
c0020eee:	c3                   	ret    
c0020eef:	90                   	nop

c0020ef0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020ef0:	57                   	push   edi
c0020ef1:	83 ec 58             	sub    esp,0x58
c0020ef4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020efc:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020f00:	b9 0f 00 00 00       	mov    ecx,0xf
c0020f05:	b8 00 00 00 00       	mov    eax,0x0
c0020f0a:	fc                   	cld    
c0020f0b:	89 d7                	mov    edi,edx
c0020f0d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020f0f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f13:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020f1a:	83 f8 ff             	cmp    eax,0xffffffff
c0020f1d:	75 34                	jne    c0020f53 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020f1f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f23:	88 c2                	mov    dl,al
c0020f25:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020f2a:	01 d0                	add    eax,edx
c0020f2c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f30:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0020f36:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f3a:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0020f41:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0020f46:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020f4a:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0020f51:	eb 17                	jmp    c0020f6a <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020f53:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020f57:	88 c2                	mov    dl,al
c0020f59:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020f5d:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c0020f64:	01 d0                	add    eax,edx
c0020f66:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f6a:	83 ec 08             	sub    esp,0x8
c0020f6d:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020f71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f75:	50                   	push   eax
c0020f76:	e8 f9 f9 fd ff       	call   c0000974 <strcat>
c0020f7b:	83 c4 10             	add    esp,0x10
c0020f7e:	83 ec 0c             	sub    esp,0xc
c0020f81:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f85:	50                   	push   eax
c0020f86:	e8 89 5f fe ff       	call   c0006f14 <f_setlabel>
c0020f8b:	83 c4 10             	add    esp,0x10
c0020f8e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020f92:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020f97:	75 07                	jne    c0020fa0 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020f99:	b8 00 00 00 00       	mov    eax,0x0
c0020f9e:	eb 05                	jmp    c0020fa5 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020fa0:	b8 01 00 00 00       	mov    eax,0x1
c0020fa5:	83 c4 58             	add    esp,0x58
c0020fa8:	5f                   	pop    edi
c0020fa9:	c3                   	ret    

c0020faa <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020faa:	83 ec 2c             	sub    esp,0x2c
c0020fad:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020fb5:	83 ec 08             	sub    esp,0x8
c0020fb8:	68 90 d6 02 c0       	push   0xc002d690
c0020fbd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020fc1:	e8 fa f8 fd ff       	call   c00008c0 <strcmp>
c0020fc6:	83 c4 10             	add    esp,0x10
c0020fc9:	85 c0                	test   eax,eax
c0020fcb:	0f 94 c0             	sete   al
c0020fce:	84 c0                	test   al,al
c0020fd0:	74 0d                	je     c0020fdf <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020fd2:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020fda:	e9 a6 00 00 00       	jmp    c0021085 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020fdf:	83 ec 08             	sub    esp,0x8
c0020fe2:	68 82 d6 02 c0       	push   0xc002d682
c0020fe7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020feb:	e8 d0 f8 fd ff       	call   c00008c0 <strcmp>
c0020ff0:	83 c4 10             	add    esp,0x10
c0020ff3:	85 c0                	test   eax,eax
c0020ff5:	0f 94 c0             	sete   al
c0020ff8:	84 c0                	test   al,al
c0020ffa:	74 0a                	je     c0021006 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020ffc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0021004:	eb 7f                	jmp    c0021085 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021006:	83 ec 08             	sub    esp,0x8
c0021009:	68 88 d6 02 c0       	push   0xc002d688
c002100e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021012:	e8 a9 f8 fd ff       	call   c00008c0 <strcmp>
c0021017:	83 c4 10             	add    esp,0x10
c002101a:	85 c0                	test   eax,eax
c002101c:	0f 94 c0             	sete   al
c002101f:	84 c0                	test   al,al
c0021021:	74 0a                	je     c002102d <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0021023:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002102b:	eb 58                	jmp    c0021085 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002102d:	83 ec 08             	sub    esp,0x8
c0021030:	68 cc a1 02 c0       	push   0xc002a1cc
c0021035:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021039:	e8 82 f8 fd ff       	call   c00008c0 <strcmp>
c002103e:	83 c4 10             	add    esp,0x10
c0021041:	85 c0                	test   eax,eax
c0021043:	0f 94 c0             	sete   al
c0021046:	84 c0                	test   al,al
c0021048:	74 0a                	je     c0021054 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c002104a:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0021052:	eb 31                	jmp    c0021085 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0021054:	83 ec 08             	sub    esp,0x8
c0021057:	68 8e d6 02 c0       	push   0xc002d68e
c002105c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0021060:	e8 5b f8 fd ff       	call   c00008c0 <strcmp>
c0021065:	83 c4 10             	add    esp,0x10
c0021068:	85 c0                	test   eax,eax
c002106a:	0f 94 c0             	sete   al
c002106d:	84 c0                	test   al,al
c002106f:	74 0a                	je     c002107b <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0021071:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0021079:	eb 0a                	jmp    c0021085 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002107b:	b8 08 00 00 00       	mov    eax,0x8
c0021080:	e9 04 01 00 00       	jmp    c0021189 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021085:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c002108c:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0021091:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021095:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c002109c:	83 f8 ff             	cmp    eax,0xffffffff
c002109f:	75 34                	jne    c00210d5 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00210a1:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00210a5:	88 c2                	mov    dl,al
c00210a7:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c00210ac:	01 d0                	add    eax,edx
c00210ae:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210b2:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c00210b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210bc:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c00210c3:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c00210c8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00210cc:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c00210d3:	eb 17                	jmp    c00210ec <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c00210d5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00210d9:	88 c2                	mov    dl,al
c00210db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210df:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c00210e6:	01 d0                	add    eax,edx
c00210e8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00210ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00210f0:	88 04 24             	mov    BYTE PTR [esp],al
c00210f3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00210f7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00210fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0021103:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0021108:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021110:	83 ec 0c             	sub    esp,0xc
c0021113:	68 00 20 00 00       	push   0x2000
c0021118:	e8 97 e7 fe ff       	call   c000f8b4 <malloc>
c002111d:	83 c4 10             	add    esp,0x10
c0021120:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021124:	68 00 20 00 00       	push   0x2000
c0021129:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002112d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021131:	50                   	push   eax
c0021132:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0021136:	50                   	push   eax
c0021137:	e8 23 62 fe ff       	call   c000735f <f_mkfs>
c002113c:	83 c4 10             	add    esp,0x10
c002113f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021143:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021148:	75 07                	jne    c0021151 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c002114a:	b8 00 00 00 00       	mov    eax,0x0
c002114f:	eb 38                	jmp    c0021189 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0021151:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0021156:	75 17                	jne    c002116f <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0021158:	83 ec 0c             	sub    esp,0xc
c002115b:	68 cc d6 02 c0       	push   0xc002d6cc
c0021160:	e8 fa 1c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0021165:	83 c4 10             	add    esp,0x10
c0021168:	b8 09 00 00 00       	mov    eax,0x9
c002116d:	eb 1a                	jmp    c0021189 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002116f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021173:	83 ec 08             	sub    esp,0x8
c0021176:	50                   	push   eax
c0021177:	68 94 d6 02 c0       	push   0xc002d694
c002117c:	e8 de 1c ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0021181:	83 c4 10             	add    esp,0x10
c0021184:	b8 01 00 00 00       	mov    eax,0x1
c0021189:	83 c4 2c             	add    esp,0x2c
c002118c:	c3                   	ret    
c002118d:	90                   	nop

c002118e <FAT::tryMount(LogicalDisk*, int)>:
c002118e:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0021194:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021199:	83 f8 14             	cmp    eax,0x14
c002119c:	75 17                	jne    c00211b5 <FAT::tryMount(LogicalDisk*, int)+0x27>
c002119e:	83 ec 0c             	sub    esp,0xc
c00211a1:	68 a6 d6 02 c0       	push   0xc002d6a6
c00211a6:	e8 4e 97 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00211ab:	83 c4 10             	add    esp,0x10
c00211ae:	b0 00                	mov    al,0x0
c00211b0:	e9 d7 01 00 00       	jmp    c002138c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211b5:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00211bc:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00211c2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00211c8:	3d 00 02 00 00       	cmp    eax,0x200
c00211cd:	74 07                	je     c00211d6 <FAT::tryMount(LogicalDisk*, int)+0x48>
c00211cf:	b0 00                	mov    al,0x0
c00211d1:	e9 b6 01 00 00       	jmp    c002138c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211d6:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c00211de:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00211e5:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c00211ec:	83 f8 ff             	cmp    eax,0xffffffff
c00211ef:	74 07                	je     c00211f8 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00211f1:	b0 01                	mov    al,0x1
c00211f3:	e9 94 01 00 00       	jmp    c002138c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00211f8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0021202:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c002120a:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0021211:	88 c2                	mov    dl,al
c0021213:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c0021218:	01 d0                	add    eax,edx
c002121a:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021221:	8b 15 00 29 03 c0    	mov    edx,DWORD PTR ds:0xc0032900
c0021227:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002122e:	89 14 85 20 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd6e0],edx
c0021235:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c002123a:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021241:	89 14 85 a0 29 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd660],edx
c0021248:	83 ec 0c             	sub    esp,0xc
c002124b:	68 54 02 00 00       	push   0x254
c0021250:	e8 5f e6 fe ff       	call   c000f8b4 <malloc>
c0021255:	83 c4 10             	add    esp,0x10
c0021258:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c002125f:	83 ec 04             	sub    esp,0x4
c0021262:	6a 00                	push   0x0
c0021264:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002126b:	50                   	push   eax
c002126c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021273:	e8 a5 3c fe ff       	call   c0004f1d <f_mount>
c0021278:	83 c4 10             	add    esp,0x10
c002127b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021282:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002128a:	74 19                	je     c00212a5 <FAT::tryMount(LogicalDisk*, int)+0x117>
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021296:	e8 39 e6 fe ff       	call   c000f8d4 <rfree>
c002129b:	83 c4 10             	add    esp,0x10
c002129e:	b0 00                	mov    al,0x0
c00212a0:	e9 e7 00 00 00       	jmp    c002138c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00212a5:	83 ec 04             	sub    esp,0x4
c00212a8:	68 00 01 00 00       	push   0x100
c00212ad:	6a 00                	push   0x0
c00212af:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212b6:	50                   	push   eax
c00212b7:	e8 bc f4 fd ff       	call   c0000778 <memset>
c00212bc:	83 c4 10             	add    esp,0x10
c00212bf:	83 ec 08             	sub    esp,0x8
c00212c2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00212c9:	50                   	push   eax
c00212ca:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212d1:	50                   	push   eax
c00212d2:	e8 9d f6 fd ff       	call   c0000974 <strcat>
c00212d7:	83 c4 10             	add    esp,0x10
c00212da:	83 ec 08             	sub    esp,0x8
c00212dd:	68 b4 d6 02 c0       	push   0xc002d6b4
c00212e2:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00212e9:	50                   	push   eax
c00212ea:	e8 85 f6 fd ff       	call   c0000974 <strcat>
c00212ef:	83 c4 10             	add    esp,0x10
c00212f2:	83 ec 04             	sub    esp,0x4
c00212f5:	6a 01                	push   0x1
c00212f7:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00212fe:	50                   	push   eax
c00212ff:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021303:	50                   	push   eax
c0021304:	e8 76 3c fe ff       	call   c0004f7f <f_open>
c0021309:	83 c4 10             	add    esp,0x10
c002130c:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021313:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c002131a:	85 c0                	test   eax,eax
c002131c:	74 0a                	je     c0021328 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c002131e:	78 2d                	js     c002134d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021320:	83 e8 04             	sub    eax,0x4
c0021323:	83 f8 01             	cmp    eax,0x1
c0021326:	77 25                	ja     c002134d <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021328:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021330:	83 ec 0c             	sub    esp,0xc
c0021333:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021337:	50                   	push   eax
c0021338:	e8 94 47 fe ff       	call   c0005ad1 <f_close>
c002133d:	83 c4 10             	add    esp,0x10
c0021340:	90                   	nop
c0021341:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0021349:	74 3a                	je     c0021385 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002134b:	eb 2d                	jmp    c002137a <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c002134d:	83 ec 0c             	sub    esp,0xc
c0021350:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021357:	e8 78 e5 fe ff       	call   c000f8d4 <rfree>
c002135c:	83 c4 10             	add    esp,0x10
c002135f:	83 ec 04             	sub    esp,0x4
c0021362:	6a 00                	push   0x0
c0021364:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002136b:	50                   	push   eax
c002136c:	6a 00                	push   0x0
c002136e:	e8 aa 3b fe ff       	call   c0004f1d <f_mount>
c0021373:	83 c4 10             	add    esp,0x10
c0021376:	b0 00                	mov    al,0x0
c0021378:	eb 12                	jmp    c002138c <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002137a:	a1 00 29 03 c0       	mov    eax,ds:0xc0032900
c002137f:	40                   	inc    eax
c0021380:	a3 00 29 03 c0       	mov    ds:0xc0032900,eax
c0021385:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c002138c:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021392:	c3                   	ret    
c0021393:	90                   	nop

c0021394 <FAT::getFileFirstSector(char const*)>:
c0021394:	53                   	push   ebx
c0021395:	83 ec 28             	sub    esp,0x28
c0021398:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c00213a0:	83 ec 0c             	sub    esp,0xc
c00213a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00213a7:	e8 08 e5 fe ff       	call   c000f8b4 <malloc>
c00213ac:	83 c4 10             	add    esp,0x10
c00213af:	89 c3                	mov    ebx,eax
c00213b1:	a1 30 28 03 c0       	mov    eax,ds:0xc0032830
c00213b6:	83 ec 04             	sub    esp,0x4
c00213b9:	50                   	push   eax
c00213ba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00213be:	53                   	push   ebx
c00213bf:	e8 fa 1f ff ff       	call   c00133be <File::File(char const*, Process*)>
c00213c4:	83 c4 10             	add    esp,0x10
c00213c7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00213cb:	83 ec 08             	sub    esp,0x8
c00213ce:	6a 01                	push   0x1
c00213d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00213d4:	e8 49 20 ff ff       	call   c0013422 <File::open(FileOpenMode)>
c00213d9:	83 c4 10             	add    esp,0x10
c00213dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00213e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00213e2:	83 c0 0c             	add    eax,0xc
c00213e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00213e7:	83 ec 0c             	sub    esp,0xc
c00213ea:	8d 54 24 14          	lea    edx,[esp+0x14]
c00213ee:	52                   	push   edx
c00213ef:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00213f3:	52                   	push   edx
c00213f4:	6a 00                	push   0x0
c00213f6:	6a 04                	push   0x4
c00213f8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00213fc:	ff d0                	call   eax
c00213fe:	83 c4 20             	add    esp,0x20
c0021401:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021405:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002140b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002140f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021413:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021416:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021419:	83 ec 04             	sub    esp,0x4
c002141c:	52                   	push   edx
c002141d:	50                   	push   eax
c002141e:	68 bf d6 02 c0       	push   0xc002d6bf
c0021423:	e8 37 1a ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0021428:	83 c4 10             	add    esp,0x10
c002142b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002142f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021432:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021439:	83 ec 0c             	sub    esp,0xc
c002143c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021440:	e8 3b 20 ff ff       	call   c0013480 <File::close()>
c0021445:	83 c4 10             	add    esp,0x10
c0021448:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002144c:	ba 00 00 00 00       	mov    edx,0x0
c0021451:	83 c4 28             	add    esp,0x28
c0021454:	5b                   	pop    ebx
c0021455:	c3                   	ret    

c0021456 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0021456:	57                   	push   edi
c0021457:	56                   	push   esi
c0021458:	53                   	push   ebx
c0021459:	81 ec 50 02 00 00    	sub    esp,0x250
c002145f:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0021467:	74 0a                	je     c0021473 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0021469:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0021471:	75 0a                	jne    c002147d <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0021473:	b8 04 00 00 00       	mov    eax,0x4
c0021478:	e9 29 01 00 00       	jmp    c00215a6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002147d:	83 ec 08             	sub    esp,0x8
c0021480:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021487:	50                   	push   eax
c0021488:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c002148f:	e8 47 4c fe ff       	call   c00060db <f_readdir>
c0021494:	83 c4 10             	add    esp,0x10
c0021497:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c002149e:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c00214a5:	83 ec 0c             	sub    esp,0xc
c00214a8:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00214af:	83 c0 1a             	add    eax,0x1a
c00214b2:	50                   	push   eax
c00214b3:	e8 dc f2 fd ff       	call   c0000794 <strlen>
c00214b8:	83 c4 10             	add    esp,0x10
c00214bb:	ba 00 00 00 00       	mov    edx,0x0
c00214c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214c4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00214c8:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00214cf:	0f b6 c0             	movzx  eax,al
c00214d2:	83 e0 10             	and    eax,0x10
c00214d5:	74 07                	je     c00214de <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c00214d7:	b8 02 00 00 00       	mov    eax,0x2
c00214dc:	eb 05                	jmp    c00214e3 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c00214de:	b8 01 00 00 00       	mov    eax,0x1
c00214e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00214e7:	83 ec 08             	sub    esp,0x8
c00214ea:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00214f1:	83 c0 1a             	add    eax,0x1a
c00214f4:	50                   	push   eax
c00214f5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00214f9:	83 c0 10             	add    eax,0x10
c00214fc:	50                   	push   eax
c00214fd:	e8 32 f3 fd ff       	call   c0000834 <strcpy>
c0021502:	83 c4 10             	add    esp,0x10
c0021505:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c002150c:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0021513:	8d 44 24 04          	lea    eax,[esp+0x4]
c0021517:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c002151e:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0021525:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c002152c:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0021533:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c002153a:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0021541:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0021548:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c002154f:	89 c6                	mov    esi,eax
c0021551:	89 d7                	mov    edi,edx
c0021553:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021555:	89 c8                	mov    eax,ecx
c0021557:	89 fa                	mov    edx,edi
c0021559:	89 f3                	mov    ebx,esi
c002155b:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0021562:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0021569:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0021570:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0021577:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c002157d:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0021584:	84 c0                	test   al,al
c0021586:	75 07                	jne    c002158f <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0021588:	b8 07 00 00 00       	mov    eax,0x7
c002158d:	eb 17                	jmp    c00215a6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c002158f:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0021596:	85 c0                	test   eax,eax
c0021598:	75 07                	jne    c00215a1 <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c002159a:	b8 00 00 00 00       	mov    eax,0x0
c002159f:	eb 05                	jmp    c00215a6 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c00215a1:	b8 01 00 00 00       	mov    eax,0x1
c00215a6:	81 c4 50 02 00 00    	add    esp,0x250
c00215ac:	5b                   	pop    ebx
c00215ad:	5e                   	pop    esi
c00215ae:	5f                   	pop    edi
c00215af:	c3                   	ret    

c00215b0 <FAT::read(void*, unsigned long, void*, int*)>:
c00215b0:	83 ec 1c             	sub    esp,0x1c
c00215b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00215b8:	74 07                	je     c00215c1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00215ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00215bf:	75 07                	jne    c00215c8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00215c1:	b8 04 00 00 00       	mov    eax,0x4
c00215c6:	eb 3d                	jmp    c0021605 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00215c8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00215cc:	50                   	push   eax
c00215cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00215d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00215d5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00215d9:	e8 dd 3d fe ff       	call   c00053bb <f_read>
c00215de:	83 c4 10             	add    esp,0x10
c00215e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00215e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00215e9:	89 c2                	mov    edx,eax
c00215eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00215ef:	89 10                	mov    DWORD PTR [eax],edx
c00215f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00215f5:	85 c0                	test   eax,eax
c00215f7:	75 07                	jne    c0021600 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00215f9:	b8 00 00 00 00       	mov    eax,0x0
c00215fe:	eb 05                	jmp    c0021605 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0021600:	b8 01 00 00 00       	mov    eax,0x1
c0021605:	83 c4 1c             	add    esp,0x1c
c0021608:	c3                   	ret    
c0021609:	90                   	nop

c002160a <FAT::write(void*, unsigned long, void*, int*)>:
c002160a:	83 ec 1c             	sub    esp,0x1c
c002160d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021612:	74 07                	je     c002161b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0021614:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021619:	75 07                	jne    c0021622 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c002161b:	b8 04 00 00 00       	mov    eax,0x4
c0021620:	eb 3d                	jmp    c002165f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021622:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021626:	50                   	push   eax
c0021627:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c002162b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002162f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021633:	e8 03 40 fe ff       	call   c000563b <f_write>
c0021638:	83 c4 10             	add    esp,0x10
c002163b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002163f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021643:	89 c2                	mov    edx,eax
c0021645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021649:	89 10                	mov    DWORD PTR [eax],edx
c002164b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002164f:	85 c0                	test   eax,eax
c0021651:	75 07                	jne    c002165a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021653:	b8 00 00 00 00       	mov    eax,0x0
c0021658:	eb 05                	jmp    c002165f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c002165a:	b8 01 00 00 00       	mov    eax,0x1
c002165f:	83 c4 1c             	add    esp,0x1c
c0021662:	c3                   	ret    
c0021663:	90                   	nop

c0021664 <FAT::close(void*)>:
c0021664:	83 ec 1c             	sub    esp,0x1c
c0021667:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002166c:	75 07                	jne    c0021675 <FAT::close(void*)+0x11>
c002166e:	b8 04 00 00 00       	mov    eax,0x4
c0021673:	eb 36                	jmp    c00216ab <FAT::close(void*)+0x47>
c0021675:	83 ec 0c             	sub    esp,0xc
c0021678:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002167c:	e8 50 44 fe ff       	call   c0005ad1 <f_close>
c0021681:	83 c4 10             	add    esp,0x10
c0021684:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021688:	83 ec 0c             	sub    esp,0xc
c002168b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002168f:	e8 30 e2 fe ff       	call   c000f8c4 <free>
c0021694:	83 c4 10             	add    esp,0x10
c0021697:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002169b:	85 c0                	test   eax,eax
c002169d:	75 07                	jne    c00216a6 <FAT::close(void*)+0x42>
c002169f:	b8 00 00 00 00       	mov    eax,0x0
c00216a4:	eb 05                	jmp    c00216ab <FAT::close(void*)+0x47>
c00216a6:	b8 01 00 00 00       	mov    eax,0x1
c00216ab:	83 c4 1c             	add    esp,0x1c
c00216ae:	c3                   	ret    
c00216af:	90                   	nop

c00216b0 <FAT::closeDir(void*)>:
c00216b0:	83 ec 1c             	sub    esp,0x1c
c00216b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00216b8:	75 07                	jne    c00216c1 <FAT::closeDir(void*)+0x11>
c00216ba:	b8 04 00 00 00       	mov    eax,0x4
c00216bf:	eb 36                	jmp    c00216f7 <FAT::closeDir(void*)+0x47>
c00216c1:	83 ec 0c             	sub    esp,0xc
c00216c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216c8:	e8 ec 49 fe ff       	call   c00060b9 <f_closedir>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00216d4:	83 ec 0c             	sub    esp,0xc
c00216d7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00216db:	e8 e4 e1 fe ff       	call   c000f8c4 <free>
c00216e0:	83 c4 10             	add    esp,0x10
c00216e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216e7:	85 c0                	test   eax,eax
c00216e9:	75 07                	jne    c00216f2 <FAT::closeDir(void*)+0x42>
c00216eb:	b8 00 00 00 00       	mov    eax,0x0
c00216f0:	eb 05                	jmp    c00216f7 <FAT::closeDir(void*)+0x47>
c00216f2:	b8 01 00 00 00       	mov    eax,0x1
c00216f7:	83 c4 1c             	add    esp,0x1c
c00216fa:	c3                   	ret    
c00216fb:	90                   	nop

c00216fc <FAT::seek(void*, unsigned long long)>:
c00216fc:	83 ec 2c             	sub    esp,0x2c
c00216ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021707:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002170b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002170f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0021714:	75 07                	jne    c002171d <FAT::seek(void*, unsigned long long)+0x21>
c0021716:	b8 04 00 00 00       	mov    eax,0x4
c002171b:	eb 2f                	jmp    c002174c <FAT::seek(void*, unsigned long long)+0x50>
c002171d:	83 ec 04             	sub    esp,0x4
c0021720:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021724:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021728:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002172c:	e8 cf 43 fe ff       	call   c0005b00 <f_lseek>
c0021731:	83 c4 10             	add    esp,0x10
c0021734:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021738:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002173c:	85 c0                	test   eax,eax
c002173e:	75 07                	jne    c0021747 <FAT::seek(void*, unsigned long long)+0x4b>
c0021740:	b8 00 00 00 00       	mov    eax,0x0
c0021745:	eb 05                	jmp    c002174c <FAT::seek(void*, unsigned long long)+0x50>
c0021747:	b8 01 00 00 00       	mov    eax,0x1
c002174c:	83 c4 2c             	add    esp,0x2c
c002174f:	c3                   	ret    

c0021750 <fatWrapperReadDisk>:
c0021750:	83 ec 1c             	sub    esp,0x1c
c0021753:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021757:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002175b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002175f:	89 04 24             	mov    DWORD PTR [esp],eax
c0021762:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021766:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002176a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002176f:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0021776:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002177a:	83 ec 0c             	sub    esp,0xc
c002177d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021781:	52                   	push   edx
c0021782:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021786:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002178a:	50                   	push   eax
c002178b:	e8 46 50 ff ff       	call   c00167d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0021790:	83 c4 20             	add    esp,0x20
c0021793:	83 c4 1c             	add    esp,0x1c
c0021796:	c3                   	ret    

c0021797 <fatWrapperWriteDisk>:
c0021797:	83 ec 1c             	sub    esp,0x1c
c002179a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002179e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00217a2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00217a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00217a9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00217ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00217b1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00217b6:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c00217bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217c1:	83 ec 0c             	sub    esp,0xc
c00217c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00217c8:	52                   	push   edx
c00217c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00217d1:	50                   	push   eax
c00217d2:	e8 6b 50 ff ff       	call   c0016842 <LogicalDisk::write(unsigned long long, int, void*)>
c00217d7:	83 c4 20             	add    esp,0x20
c00217da:	83 c4 1c             	add    esp,0x1c
c00217dd:	c3                   	ret    

c00217de <fatWrapperIoctl>:
c00217de:	53                   	push   ebx
c00217df:	83 ec 28             	sub    esp,0x28
c00217e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00217e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00217ea:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00217ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00217f2:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00217f7:	75 31                	jne    c002182a <fatWrapperIoctl+0x4c>
c00217f9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00217fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021801:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021806:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c002180d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021813:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021819:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002181d:	66 89 02             	mov    WORD PTR [edx],ax
c0021820:	b8 00 00 00 00       	mov    eax,0x0
c0021825:	e9 b2 00 00 00       	jmp    c00218dc <fatWrapperIoctl+0xfe>
c002182a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002182f:	75 6a                	jne    c002189b <fatWrapperIoctl+0xbd>
c0021831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021835:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021839:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002183e:	8b 04 85 e0 f8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0720]
c0021845:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002184b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021851:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021857:	89 c8                	mov    eax,ecx
c0021859:	89 da                	mov    edx,ebx
c002185b:	0f a4 c2 0a          	shld   edx,eax,0xa
c002185f:	c1 e0 0a             	shl    eax,0xa
c0021862:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021867:	8b 0c 8d e0 f8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0720]
c002186e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0021874:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c002187a:	89 cb                	mov    ebx,ecx
c002187c:	c1 fb 1f             	sar    ebx,0x1f
c002187f:	53                   	push   ebx
c0021880:	51                   	push   ecx
c0021881:	52                   	push   edx
c0021882:	50                   	push   eax
c0021883:	e8 8c 5d 00 00       	call   c0027614 <__udivdi3>
c0021888:	83 c4 10             	add    esp,0x10
c002188b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002188f:	89 01                	mov    DWORD PTR [ecx],eax
c0021891:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021894:	b8 00 00 00 00       	mov    eax,0x0
c0021899:	eb 41                	jmp    c00218dc <fatWrapperIoctl+0xfe>
c002189b:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00218a0:	75 07                	jne    c00218a9 <fatWrapperIoctl+0xcb>
c00218a2:	b8 00 00 00 00       	mov    eax,0x0
c00218a7:	eb 33                	jmp    c00218dc <fatWrapperIoctl+0xfe>
c00218a9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00218ae:	75 19                	jne    c00218c9 <fatWrapperIoctl+0xeb>
c00218b0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00218b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00218b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00218bc:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00218c2:	b8 00 00 00 00       	mov    eax,0x0
c00218c7:	eb 13                	jmp    c00218dc <fatWrapperIoctl+0xfe>
c00218c9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00218ce:	75 07                	jne    c00218d7 <fatWrapperIoctl+0xf9>
c00218d0:	b8 00 00 00 00       	mov    eax,0x0
c00218d5:	eb 05                	jmp    c00218dc <fatWrapperIoctl+0xfe>
c00218d7:	b8 04 00 00 00       	mov    eax,0x4
c00218dc:	83 c4 28             	add    esp,0x28
c00218df:	5b                   	pop    ebx
c00218e0:	c3                   	ret    
c00218e1:	90                   	nop

c00218e2 <FAT::FAT()>:
c00218e2:	83 ec 1c             	sub    esp,0x1c
c00218e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218e9:	83 ec 0c             	sub    esp,0xc
c00218ec:	50                   	push   eax
c00218ed:	e8 78 18 ff ff       	call   c001316a <Filesystem::Filesystem()>
c00218f2:	83 c4 10             	add    esp,0x10
c00218f5:	ba fc d6 02 c0       	mov    edx,0xc002d6fc
c00218fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00218fe:	89 10                	mov    DWORD PTR [eax],edx
c0021900:	c7 05 00 29 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032900,0x0
c002190a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021912:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021917:	7f 15                	jg     c002192e <FAT::FAT()+0x4c>
c0021919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002191d:	c7 04 85 20 29 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcd6e0],0xffffffff
c0021928:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002192c:	eb e4                	jmp    c0021912 <FAT::FAT()+0x30>
c002192e:	90                   	nop
c002192f:	83 c4 1c             	add    esp,0x1c
c0021932:	c3                   	ret    
c0021933:	90                   	nop

c0021934 <FAT::fixFilepath(char*)>:
c0021934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021938:	8a 00                	mov    al,BYTE PTR [eax]
c002193a:	3c 40                	cmp    al,0x40
c002193c:	7e 2c                	jle    c002196a <FAT::fixFilepath(char*)+0x36>
c002193e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021942:	8a 00                	mov    al,BYTE PTR [eax]
c0021944:	83 e8 41             	sub    eax,0x41
c0021947:	88 c2                	mov    dl,al
c0021949:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002194d:	88 10                	mov    BYTE PTR [eax],dl
c002194f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021953:	8a 00                	mov    al,BYTE PTR [eax]
c0021955:	0f be c0             	movsx  eax,al
c0021958:	8b 04 85 20 29 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd6e0]
c002195f:	83 c0 30             	add    eax,0x30
c0021962:	88 c2                	mov    dl,al
c0021964:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021968:	88 10                	mov    BYTE PTR [eax],dl
c002196a:	90                   	nop
c002196b:	c3                   	ret    

c002196c <FAT::open(char const*, void**, FileOpenMode)>:
c002196c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021972:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002197a:	74 0a                	je     c0021986 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c002197c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021984:	75 0a                	jne    c0021990 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0021986:	b8 04 00 00 00       	mov    eax,0x4
c002198b:	e9 fd 00 00 00       	jmp    c0021a8d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021990:	83 ec 08             	sub    esp,0x8
c0021993:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002199a:	8d 44 24 14          	lea    eax,[esp+0x14]
c002199e:	50                   	push   eax
c002199f:	e8 90 ee fd ff       	call   c0000834 <strcpy>
c00219a4:	83 c4 10             	add    esp,0x10
c00219a7:	83 ec 08             	sub    esp,0x8
c00219aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c00219ae:	50                   	push   eax
c00219af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00219b6:	e8 79 ff ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c00219bb:	83 c4 10             	add    esp,0x10
c00219be:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00219c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219cd:	83 e0 01             	and    eax,0x1
c00219d0:	74 08                	je     c00219da <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00219d2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00219da:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219e1:	83 e0 04             	and    eax,0x4
c00219e4:	74 10                	je     c00219f6 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00219e6:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00219ee:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00219f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00219fd:	83 e0 02             	and    eax,0x2
c0021a00:	74 08                	je     c0021a0a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021a02:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021a0a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a11:	83 e0 08             	and    eax,0x8
c0021a14:	74 08                	je     c0021a1e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021a16:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021a1e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021a25:	83 e0 10             	and    eax,0x10
c0021a28:	74 08                	je     c0021a32 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021a2a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	68 50 02 00 00       	push   0x250
c0021a3a:	e8 75 de fe ff       	call   c000f8b4 <malloc>
c0021a3f:	83 c4 10             	add    esp,0x10
c0021a42:	89 c2                	mov    edx,eax
c0021a44:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a4b:	89 10                	mov    DWORD PTR [eax],edx
c0021a4d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021a55:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021a5c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021a5e:	83 ec 04             	sub    esp,0x4
c0021a61:	52                   	push   edx
c0021a62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0021a66:	52                   	push   edx
c0021a67:	50                   	push   eax
c0021a68:	e8 12 35 fe ff       	call   c0004f7f <f_open>
c0021a6d:	83 c4 10             	add    esp,0x10
c0021a70:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0021a77:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021a7f:	74 07                	je     c0021a88 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021a81:	b8 01 00 00 00       	mov    eax,0x1
c0021a86:	eb 05                	jmp    c0021a8d <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021a88:	b8 00 00 00 00       	mov    eax,0x0
c0021a8d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a93:	c3                   	ret    

c0021a94 <FAT::openDir(char const*, void**)>:
c0021a94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021a9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021aa2:	74 0a                	je     c0021aae <FAT::openDir(char const*, void**)+0x1a>
c0021aa4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021aac:	75 07                	jne    c0021ab5 <FAT::openDir(char const*, void**)+0x21>
c0021aae:	b8 04 00 00 00       	mov    eax,0x4
c0021ab3:	eb 7d                	jmp    c0021b32 <FAT::openDir(char const*, void**)+0x9e>
c0021ab5:	83 ec 08             	sub    esp,0x8
c0021ab8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021abf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ac3:	50                   	push   eax
c0021ac4:	e8 6b ed fd ff       	call   c0000834 <strcpy>
c0021ac9:	83 c4 10             	add    esp,0x10
c0021acc:	83 ec 08             	sub    esp,0x8
c0021acf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021ad3:	50                   	push   eax
c0021ad4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021adb:	e8 54 fe ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021ae0:	83 c4 10             	add    esp,0x10
c0021ae3:	83 ec 0c             	sub    esp,0xc
c0021ae6:	6a 4c                	push   0x4c
c0021ae8:	e8 c7 dd fe ff       	call   c000f8b4 <malloc>
c0021aed:	83 c4 10             	add    esp,0x10
c0021af0:	89 c2                	mov    edx,eax
c0021af2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021af9:	89 10                	mov    DWORD PTR [eax],edx
c0021afb:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021b02:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b04:	83 ec 08             	sub    esp,0x8
c0021b07:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021b0b:	52                   	push   edx
c0021b0c:	50                   	push   eax
c0021b0d:	e8 a5 44 fe ff       	call   c0005fb7 <f_opendir>
c0021b12:	83 c4 10             	add    esp,0x10
c0021b15:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021b1c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021b24:	74 07                	je     c0021b2d <FAT::openDir(char const*, void**)+0x99>
c0021b26:	b8 01 00 00 00       	mov    eax,0x1
c0021b2b:	eb 05                	jmp    c0021b32 <FAT::openDir(char const*, void**)+0x9e>
c0021b2d:	b8 00 00 00 00       	mov    eax,0x0
c0021b32:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b38:	c3                   	ret    
c0021b39:	90                   	nop

c0021b3a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021b3a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021b40:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021b48:	75 0a                	jne    c0021b54 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021b4a:	b8 04 00 00 00       	mov    eax,0x4
c0021b4f:	e9 c9 00 00 00       	jmp    c0021c1d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b54:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021b5c:	75 0a                	jne    c0021b68 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021b5e:	b8 04 00 00 00       	mov    eax,0x4
c0021b63:	e9 b5 00 00 00       	jmp    c0021c1d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b68:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021b70:	75 0a                	jne    c0021b7c <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021b72:	b8 04 00 00 00       	mov    eax,0x4
c0021b77:	e9 a1 00 00 00       	jmp    c0021c1d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021b7c:	83 ec 08             	sub    esp,0x8
c0021b7f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021b86:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021b8d:	50                   	push   eax
c0021b8e:	e8 a1 ec fd ff       	call   c0000834 <strcpy>
c0021b93:	83 c4 10             	add    esp,0x10
c0021b96:	83 ec 08             	sub    esp,0x8
c0021b99:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021ba0:	50                   	push   eax
c0021ba1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021ba8:	e8 87 fd ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021bad:	83 c4 10             	add    esp,0x10
c0021bb0:	83 ec 08             	sub    esp,0x8
c0021bb3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021bb7:	50                   	push   eax
c0021bb8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021bbf:	50                   	push   eax
c0021bc0:	e8 b1 45 fe ff       	call   c0006176 <f_stat>
c0021bc5:	83 c4 10             	add    esp,0x10
c0021bc8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021bcf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021bd6:	85 c0                	test   eax,eax
c0021bd8:	74 07                	je     c0021be1 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021bda:	83 f8 04             	cmp    eax,0x4
c0021bdd:	74 32                	je     c0021c11 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021bdf:	eb 37                	jmp    c0021c18 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021be1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021be5:	0f b6 c0             	movzx  eax,al
c0021be8:	83 e0 10             	and    eax,0x10
c0021beb:	0f 95 c2             	setne  dl
c0021bee:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021bf5:	88 10                	mov    BYTE PTR [eax],dl
c0021bf7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021bfa:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bfe:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021c05:	89 01                	mov    DWORD PTR [ecx],eax
c0021c07:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021c0a:	b8 00 00 00 00       	mov    eax,0x0
c0021c0f:	eb 0c                	jmp    c0021c1d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c11:	b8 02 00 00 00       	mov    eax,0x2
c0021c16:	eb 05                	jmp    c0021c1d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021c18:	b8 01 00 00 00       	mov    eax,0x1
c0021c1d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021c23:	c3                   	ret    

c0021c24 <FAT::unlink(char const*)>:
c0021c24:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c2a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c32:	75 07                	jne    c0021c3b <FAT::unlink(char const*)+0x17>
c0021c34:	b8 04 00 00 00       	mov    eax,0x4
c0021c39:	eb 5c                	jmp    c0021c97 <FAT::unlink(char const*)+0x73>
c0021c3b:	83 ec 08             	sub    esp,0x8
c0021c3e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c45:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c49:	50                   	push   eax
c0021c4a:	e8 e5 eb fd ff       	call   c0000834 <strcpy>
c0021c4f:	83 c4 10             	add    esp,0x10
c0021c52:	83 ec 08             	sub    esp,0x8
c0021c55:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c59:	50                   	push   eax
c0021c5a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c61:	e8 ce fc ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021c66:	83 c4 10             	add    esp,0x10
c0021c69:	83 ec 0c             	sub    esp,0xc
c0021c6c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c70:	50                   	push   eax
c0021c71:	e8 52 48 fe ff       	call   c00064c8 <f_unlink>
c0021c76:	83 c4 10             	add    esp,0x10
c0021c79:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021c80:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021c87:	85 c0                	test   eax,eax
c0021c89:	75 07                	jne    c0021c92 <FAT::unlink(char const*)+0x6e>
c0021c8b:	b8 00 00 00 00       	mov    eax,0x0
c0021c90:	eb 05                	jmp    c0021c97 <FAT::unlink(char const*)+0x73>
c0021c92:	b8 01 00 00 00       	mov    eax,0x1
c0021c97:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021c9d:	c3                   	ret    

c0021c9e <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021c9e:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021ca4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021cab:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021cb2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021cb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021cba:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021cc2:	75 0a                	jne    c0021cce <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021cc4:	b8 04 00 00 00       	mov    eax,0x4
c0021cc9:	e9 1c 01 00 00       	jmp    c0021dea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021cce:	83 ec 08             	sub    esp,0x8
c0021cd1:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021cd8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021cdc:	50                   	push   eax
c0021cdd:	e8 52 eb fd ff       	call   c0000834 <strcpy>
c0021ce2:	83 c4 10             	add    esp,0x10
c0021ce5:	83 ec 08             	sub    esp,0x8
c0021ce8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021cec:	50                   	push   eax
c0021ced:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021cf4:	e8 3b fc ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021cf9:	83 c4 10             	add    esp,0x10
c0021cfc:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021d04:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021d0c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d11:	83 e0 01             	and    eax,0x1
c0021d14:	74 08                	je     c0021d1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021d16:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021d1e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d23:	83 e0 02             	and    eax,0x2
c0021d26:	74 08                	je     c0021d30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021d28:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021d30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d35:	83 e0 04             	and    eax,0x4
c0021d38:	74 08                	je     c0021d42 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021d3a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021d42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021d47:	83 e0 08             	and    eax,0x8
c0021d4a:	74 08                	je     c0021d54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021d4c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021d54:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d59:	83 e0 01             	and    eax,0x1
c0021d5c:	74 08                	je     c0021d66 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021d5e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021d66:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d6b:	83 e0 02             	and    eax,0x2
c0021d6e:	74 08                	je     c0021d78 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021d70:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021d78:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d7d:	83 e0 04             	and    eax,0x4
c0021d80:	74 08                	je     c0021d8a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021d82:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021d8a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021d8f:	83 e0 08             	and    eax,0x8
c0021d92:	74 08                	je     c0021d9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021d94:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021d9c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021da3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021daa:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021db2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021dba:	83 ec 04             	sub    esp,0x4
c0021dbd:	52                   	push   edx
c0021dbe:	50                   	push   eax
c0021dbf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021dc3:	50                   	push   eax
c0021dc4:	e8 a1 4d fe ff       	call   c0006b6a <f_chmod>
c0021dc9:	83 c4 10             	add    esp,0x10
c0021dcc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021dd3:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021dda:	85 c0                	test   eax,eax
c0021ddc:	75 07                	jne    c0021de5 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021dde:	b8 00 00 00 00       	mov    eax,0x0
c0021de3:	eb 05                	jmp    c0021dea <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021de5:	b8 01 00 00 00       	mov    eax,0x1
c0021dea:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021df0:	c3                   	ret    
c0021df1:	90                   	nop

c0021df2 <FAT::rename(char const*, char const*)>:
c0021df2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021df8:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021e00:	74 0a                	je     c0021e0c <FAT::rename(char const*, char const*)+0x1a>
c0021e02:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021e0a:	75 0a                	jne    c0021e16 <FAT::rename(char const*, char const*)+0x24>
c0021e0c:	b8 04 00 00 00       	mov    eax,0x4
c0021e11:	e9 98 00 00 00       	jmp    c0021eae <FAT::rename(char const*, char const*)+0xbc>
c0021e16:	83 ec 08             	sub    esp,0x8
c0021e19:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e20:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e27:	50                   	push   eax
c0021e28:	e8 07 ea fd ff       	call   c0000834 <strcpy>
c0021e2d:	83 c4 10             	add    esp,0x10
c0021e30:	83 ec 08             	sub    esp,0x8
c0021e33:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021e3a:	50                   	push   eax
c0021e3b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e42:	e8 ed fa ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021e47:	83 c4 10             	add    esp,0x10
c0021e4a:	83 ec 08             	sub    esp,0x8
c0021e4d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021e54:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021e58:	50                   	push   eax
c0021e59:	e8 d6 e9 fd ff       	call   c0000834 <strcpy>
c0021e5e:	83 c4 10             	add    esp,0x10
c0021e61:	83 ec 08             	sub    esp,0x8
c0021e64:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e68:	50                   	push   eax
c0021e69:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021e70:	e8 bf fa ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021e75:	83 c4 10             	add    esp,0x10
c0021e78:	83 ec 08             	sub    esp,0x8
c0021e7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021e7f:	50                   	push   eax
c0021e80:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021e87:	50                   	push   eax
c0021e88:	e8 ea 49 fe ff       	call   c0006877 <f_rename>
c0021e8d:	83 c4 10             	add    esp,0x10
c0021e90:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021e97:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021e9e:	85 c0                	test   eax,eax
c0021ea0:	75 07                	jne    c0021ea9 <FAT::rename(char const*, char const*)+0xb7>
c0021ea2:	b8 00 00 00 00       	mov    eax,0x0
c0021ea7:	eb 05                	jmp    c0021eae <FAT::rename(char const*, char const*)+0xbc>
c0021ea9:	b8 01 00 00 00       	mov    eax,0x1
c0021eae:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021eb4:	c3                   	ret    
c0021eb5:	90                   	nop

c0021eb6 <FAT::mkdir(char const*)>:
c0021eb6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ebc:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021ec4:	75 07                	jne    c0021ecd <FAT::mkdir(char const*)+0x17>
c0021ec6:	b8 04 00 00 00       	mov    eax,0x4
c0021ecb:	eb 5c                	jmp    c0021f29 <FAT::mkdir(char const*)+0x73>
c0021ecd:	83 ec 08             	sub    esp,0x8
c0021ed0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ed7:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021edb:	50                   	push   eax
c0021edc:	e8 53 e9 fd ff       	call   c0000834 <strcpy>
c0021ee1:	83 c4 10             	add    esp,0x10
c0021ee4:	83 ec 08             	sub    esp,0x8
c0021ee7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021eeb:	50                   	push   eax
c0021eec:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021ef3:	e8 3c fa ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021ef8:	83 c4 10             	add    esp,0x10
c0021efb:	83 ec 0c             	sub    esp,0xc
c0021efe:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021f02:	50                   	push   eax
c0021f03:	e8 43 47 fe ff       	call   c000664b <f_mkdir>
c0021f08:	83 c4 10             	add    esp,0x10
c0021f0b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021f12:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021f19:	85 c0                	test   eax,eax
c0021f1b:	75 07                	jne    c0021f24 <FAT::mkdir(char const*)+0x6e>
c0021f1d:	b8 00 00 00 00       	mov    eax,0x0
c0021f22:	eb 05                	jmp    c0021f29 <FAT::mkdir(char const*)+0x73>
c0021f24:	b8 01 00 00 00       	mov    eax,0x1
c0021f29:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f2f:	c3                   	ret    

c0021f30 <FAT::exists(char const*)>:
c0021f30:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021f36:	83 ec 08             	sub    esp,0x8
c0021f39:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f40:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f44:	50                   	push   eax
c0021f45:	e8 ea e8 fd ff       	call   c0000834 <strcpy>
c0021f4a:	83 c4 10             	add    esp,0x10
c0021f4d:	83 ec 08             	sub    esp,0x8
c0021f50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f54:	50                   	push   eax
c0021f55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021f5c:	e8 d3 f9 ff ff       	call   c0021934 <FAT::fixFilepath(char*)>
c0021f61:	83 c4 10             	add    esp,0x10
c0021f64:	83 ec 08             	sub    esp,0x8
c0021f67:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021f6e:	50                   	push   eax
c0021f6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021f73:	50                   	push   eax
c0021f74:	e8 fd 41 fe ff       	call   c0006176 <f_stat>
c0021f79:	83 c4 10             	add    esp,0x10
c0021f7c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021f83:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021f8a:	85 c0                	test   eax,eax
c0021f8c:	75 04                	jne    c0021f92 <FAT::exists(char const*)+0x62>
c0021f8e:	b0 01                	mov    al,0x1
c0021f90:	eb 02                	jmp    c0021f94 <FAT::exists(char const*)+0x64>
c0021f92:	b0 00                	mov    al,0x0
c0021f94:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021f9a:	c3                   	ret    
c0021f9b:	90                   	nop

c0021f9c <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021f9c:	b8 08 00 00 00       	mov    eax,0x8
c0021fa1:	c3                   	ret    

c0021fa2 <ISO9660::seek(void*, unsigned long long)>:
c0021fa2:	53                   	push   ebx
c0021fa3:	b8 04 00 00 00       	mov    eax,0x4
c0021fa8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021fac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021fb0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021fb4:	85 d2                	test   edx,edx
c0021fb6:	74 17                	je     c0021fcf <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021fb8:	89 c8                	mov    eax,ecx
c0021fba:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021fbd:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021fc0:	b8 01 00 00 00       	mov    eax,0x1
c0021fc5:	73 08                	jae    c0021fcf <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021fc7:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021fca:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021fcd:	31 c0                	xor    eax,eax
c0021fcf:	5b                   	pop    ebx
c0021fd0:	c3                   	ret    
c0021fd1:	90                   	nop

c0021fd2 <ISO9660::tell(void*, unsigned long long*)>:
c0021fd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021fd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fda:	85 d2                	test   edx,edx
c0021fdc:	74 12                	je     c0021ff0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fde:	85 c0                	test   eax,eax
c0021fe0:	74 0e                	je     c0021ff0 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021fe2:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021fe5:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021fe8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021feb:	89 10                	mov    DWORD PTR [eax],edx
c0021fed:	31 c0                	xor    eax,eax
c0021fef:	c3                   	ret    
c0021ff0:	b8 04 00 00 00       	mov    eax,0x4
c0021ff5:	c3                   	ret    

c0021ff6 <ISO9660::getName()>:
c0021ff6:	b8 5c d7 02 c0       	mov    eax,0xc002d75c
c0021ffb:	c3                   	ret    

c0021ffc <ISO9660::stat(void*, unsigned long long*)>:
c0021ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022004:	85 d2                	test   edx,edx
c0022006:	74 12                	je     c002201a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0022008:	85 c0                	test   eax,eax
c002200a:	74 0e                	je     c002201a <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002200c:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002200f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0022012:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0022015:	89 10                	mov    DWORD PTR [eax],edx
c0022017:	31 c0                	xor    eax,eax
c0022019:	c3                   	ret    
c002201a:	b8 04 00 00 00       	mov    eax,0x4
c002201f:	c3                   	ret    

c0022020 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0022020:	b8 01 00 00 00       	mov    eax,0x1
c0022025:	c3                   	ret    

c0022026 <ISO9660::unlink(char const*)>:
c0022026:	b8 01 00 00 00       	mov    eax,0x1
c002202b:	c3                   	ret    

c002202c <ISO9660::write(void*, unsigned long, void*, int*)>:
c002202c:	b8 01 00 00 00       	mov    eax,0x1
c0022031:	c3                   	ret    

c0022032 <ISO9660::rename(char const*, char const*)>:
c0022032:	b8 01 00 00 00       	mov    eax,0x1
c0022037:	c3                   	ret    

c0022038 <ISO9660::mkdir(char const*)>:
c0022038:	b8 01 00 00 00       	mov    eax,0x1
c002203d:	c3                   	ret    

c002203e <ISO9660::close(void*)>:
c002203e:	83 ec 0c             	sub    esp,0xc
c0022041:	b8 04 00 00 00       	mov    eax,0x4
c0022046:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002204a:	85 d2                	test   edx,edx
c002204c:	74 0e                	je     c002205c <ISO9660::close(void*)+0x1e>
c002204e:	83 ec 0c             	sub    esp,0xc
c0022051:	52                   	push   edx
c0022052:	e8 6d d8 fe ff       	call   c000f8c4 <free>
c0022057:	83 c4 10             	add    esp,0x10
c002205a:	31 c0                	xor    eax,eax
c002205c:	83 c4 0c             	add    esp,0xc
c002205f:	c3                   	ret    

c0022060 <ISO9660::closeDir(void*)>:
c0022060:	83 ec 0c             	sub    esp,0xc
c0022063:	b8 04 00 00 00       	mov    eax,0x4
c0022068:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002206c:	85 d2                	test   edx,edx
c002206e:	74 0e                	je     c002207e <ISO9660::closeDir(void*)+0x1e>
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	52                   	push   edx
c0022074:	e8 4b d8 fe ff       	call   c000f8c4 <free>
c0022079:	83 c4 10             	add    esp,0x10
c002207c:	31 c0                	xor    eax,eax
c002207e:	83 c4 0c             	add    esp,0xc
c0022081:	c3                   	ret    

c0022082 <ISO9660::~ISO9660()>:
c0022082:	83 ec 0c             	sub    esp,0xc
c0022085:	ba c0 d7 02 c0       	mov    edx,0xc002d7c0
c002208a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002208e:	89 10                	mov    DWORD PTR [eax],edx
c0022090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	50                   	push   eax
c0022098:	e8 f1 10 ff ff       	call   c001318e <Filesystem::~Filesystem()>
c002209d:	83 c4 10             	add    esp,0x10
c00220a0:	90                   	nop
c00220a1:	83 c4 0c             	add    esp,0xc
c00220a4:	c3                   	ret    
c00220a5:	90                   	nop

c00220a6 <ISO9660::~ISO9660()>:
c00220a6:	83 ec 0c             	sub    esp,0xc
c00220a9:	83 ec 0c             	sub    esp,0xc
c00220ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b0:	e8 cd ff ff ff       	call   c0022082 <ISO9660::~ISO9660()>
c00220b5:	83 c4 10             	add    esp,0x10
c00220b8:	83 ec 08             	sub    esp,0x8
c00220bb:	6a 08                	push   0x8
c00220bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220c1:	e8 b9 0c ff ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c00220c6:	83 c4 10             	add    esp,0x10
c00220c9:	83 c4 0c             	add    esp,0xc
c00220cc:	c3                   	ret    

c00220cd <__memmem(unsigned char*, int, unsigned char*, int)>:
c00220cd:	55                   	push   ebp
c00220ce:	31 c9                	xor    ecx,ecx
c00220d0:	57                   	push   edi
c00220d1:	56                   	push   esi
c00220d2:	53                   	push   ebx
c00220d3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00220d7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00220db:	89 eb                	mov    ebx,ebp
c00220dd:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00220e1:	39 ce                	cmp    esi,ecx
c00220e3:	7e 17                	jle    c00220fc <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00220e5:	31 d2                	xor    edx,edx
c00220e7:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00220eb:	7d 13                	jge    c0022100 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00220ed:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00220f1:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00220f4:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00220f7:	75 0d                	jne    c0022106 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00220f9:	42                   	inc    edx
c00220fa:	eb eb                	jmp    c00220e7 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00220fc:	31 c0                	xor    eax,eax
c00220fe:	eb 0a                	jmp    c002210a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0022100:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0022104:	eb 04                	jmp    c002210a <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0022106:	41                   	inc    ecx
c0022107:	43                   	inc    ebx
c0022108:	eb d7                	jmp    c00220e1 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002210a:	5b                   	pop    ebx
c002210b:	5e                   	pop    esi
c002210c:	5f                   	pop    edi
c002210d:	5d                   	pop    ebp
c002210e:	c3                   	ret    

c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002210f:	57                   	push   edi
c0022110:	56                   	push   esi
c0022111:	53                   	push   ebx
c0022112:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002211a:	39 0d 00 2a 03 c0    	cmp    DWORD PTR ds:0xc0032a00,ecx
c0022120:	75 08                	jne    c002212a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0022122:	38 05 54 e8 02 c0    	cmp    BYTE PTR ds:0xc002e854,al
c0022128:	74 2b                	je     c0022155 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c002212a:	83 ec 0c             	sub    esp,0xc
c002212d:	a2 54 e8 02 c0       	mov    ds:0xc002e854,al
c0022132:	68 20 2a 03 c0       	push   0xc0032a20
c0022137:	0f be c0             	movsx  eax,al
c002213a:	6a 01                	push   0x1
c002213c:	89 0d 00 2a 03 c0    	mov    DWORD PTR ds:0xc0032a00,ecx
c0022142:	31 db                	xor    ebx,ebx
c0022144:	53                   	push   ebx
c0022145:	51                   	push   ecx
c0022146:	ff 34 85 dc f7 02 c0 	push   DWORD PTR [eax*4-0x3ffd0824]
c002214d:	e8 84 46 ff ff       	call   c00167d6 <LogicalDisk::read(unsigned long long, int, void*)>
c0022152:	83 c4 20             	add    esp,0x20
c0022155:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0022159:	be 20 2a 03 c0       	mov    esi,0xc0032a20
c002215e:	b9 00 08 00 00       	mov    ecx,0x800
c0022163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022165:	5b                   	pop    ebx
c0022166:	5e                   	pop    esi
c0022167:	5f                   	pop    edi
c0022168:	c3                   	ret    
c0022169:	90                   	nop

c002216a <ISO9660::tryMount(LogicalDisk*, int)>:
c002216a:	81 ec 10 08 00 00    	sub    esp,0x810
c0022170:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0022177:	83 c0 41             	add    eax,0x41
c002217a:	0f be c0             	movsx  eax,al
c002217d:	50                   	push   eax
c002217e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022182:	50                   	push   eax
c0022183:	6a 10                	push   0x10
c0022185:	e8 85 ff ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002218a:	83 c4 10             	add    esp,0x10
c002218d:	31 c0                	xor    eax,eax
c002218f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0022194:	75 1d                	jne    c00221b3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0022196:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002219b:	75 16                	jne    c00221b3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002219d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00221a2:	75 0f                	jne    c00221b3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00221a4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00221a9:	75 08                	jne    c00221b3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00221ab:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00221b0:	0f 94 c0             	sete   al
c00221b3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00221b9:	c3                   	ret    

c00221ba <ISO9660::read(void*, unsigned long, void*, int*)>:
c00221ba:	55                   	push   ebp
c00221bb:	57                   	push   edi
c00221bc:	56                   	push   esi
c00221bd:	53                   	push   ebx
c00221be:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00221c4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00221cb:	85 ed                	test   ebp,ebp
c00221cd:	0f 84 da 01 00 00    	je     c00223ad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221d3:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00221db:	0f 84 cc 01 00 00    	je     c00223ad <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c00221e1:	b8 01 00 00 00       	mov    eax,0x1
c00221e6:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c00221ea:	0f 85 c2 01 00 00    	jne    c00223b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00221f0:	31 d2                	xor    edx,edx
c00221f2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00221f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00221fc:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00221ff:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0022202:	89 04 24             	mov    DWORD PTR [esp],eax
c0022205:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022209:	01 c8                	add    eax,ecx
c002220b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002220e:	11 da                	adc    edx,ebx
c0022210:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0022214:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022218:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002221c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022220:	19 d7                	sbb    edi,edx
c0022222:	72 11                	jb     c0022235 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0022224:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0022227:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c002222b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002222f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022233:	eb 0c                	jmp    c0022241 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0022235:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0022239:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002223d:	29 ce                	sub    esi,ecx
c002223f:	19 df                	sbb    edi,ebx
c0022241:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022244:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0022247:	0f a4 c2 0b          	shld   edx,eax,0xb
c002224b:	c1 e0 0b             	shl    eax,0xb
c002224e:	01 c8                	add    eax,ecx
c0022250:	11 da                	adc    edx,ebx
c0022252:	89 04 24             	mov    DWORD PTR [esp],eax
c0022255:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022259:	51                   	push   ecx
c002225a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002225e:	50                   	push   eax
c002225f:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0022263:	53                   	push   ebx
c0022264:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022268:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002226c:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022270:	50                   	push   eax
c0022271:	e8 99 fe ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022276:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022279:	b8 00 08 00 00       	mov    eax,0x800
c002227e:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0022284:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0022288:	29 d0                	sub    eax,edx
c002228a:	83 c4 10             	add    esp,0x10
c002228d:	89 f9                	mov    ecx,edi
c002228f:	39 c6                	cmp    esi,eax
c0022291:	83 d9 00             	sbb    ecx,0x0
c0022294:	7d 1b                	jge    c00222b1 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0022296:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c002229b:	75 12                	jne    c00222af <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c002229d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00222a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00222aa:	e9 fa 00 00 00       	jmp    c00223a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c00222af:	89 f0                	mov    eax,esi
c00222b1:	01 d3                	add    ebx,edx
c00222b3:	31 d2                	xor    edx,edx
c00222b5:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00222b9:	39 c2                	cmp    edx,eax
c00222bb:	7d 14                	jge    c00222d1 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c00222bd:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00222c4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00222c8:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00222cb:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00222ce:	42                   	inc    edx
c00222cf:	eb e8                	jmp    c00222b9 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c00222d1:	89 c2                	mov    edx,eax
c00222d3:	85 c0                	test   eax,eax
c00222d5:	79 02                	jns    c00222d9 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c00222d7:	31 d2                	xor    edx,edx
c00222d9:	01 c2                	add    edx,eax
c00222db:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00222de:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c00222e5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00222e9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00222ed:	99                   	cdq    
c00222ee:	01 c1                	add    ecx,eax
c00222f0:	11 d3                	adc    ebx,edx
c00222f2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00222f6:	29 c6                	sub    esi,eax
c00222f8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00222fc:	19 d7                	sbb    edi,edx
c00222fe:	89 34 24             	mov    DWORD PTR [esp],esi
c0022301:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0022305:	b8 ff 07 00 00       	mov    eax,0x7ff
c002230a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c002230d:	b8 00 00 00 00       	mov    eax,0x0
c0022312:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0022316:	7d 43                	jge    c002235b <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0022318:	52                   	push   edx
c0022319:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002231d:	50                   	push   eax
c002231e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022322:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022326:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002232a:	0f ac d0 0b          	shrd   eax,edx,0xb
c002232e:	50                   	push   eax
c002232f:	e8 db fd ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022334:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c002233c:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022341:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0022349:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022351:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0022356:	83 c4 10             	add    esp,0x10
c0022359:	eb aa                	jmp    c0022305 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c002235b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002235f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022362:	74 2a                	je     c002238e <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0022364:	50                   	push   eax
c0022365:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022369:	50                   	push   eax
c002236a:	8d 74 24 28          	lea    esi,[esp+0x28]
c002236e:	56                   	push   esi
c002236f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022373:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022377:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c002237b:	51                   	push   ecx
c002237c:	e8 8e fd ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022381:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022385:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022389:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002238b:	83 c4 10             	add    esp,0x10
c002238e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022395:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0022399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002239d:	89 18                	mov    DWORD PTR [eax],ebx
c002239f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00223a3:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00223a6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00223a9:	31 c0                	xor    eax,eax
c00223ab:	eb 05                	jmp    c00223b2 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c00223ad:	b8 04 00 00 00       	mov    eax,0x4
c00223b2:	81 c4 2c 08 00 00    	add    esp,0x82c
c00223b8:	5b                   	pop    ebx
c00223b9:	5e                   	pop    esi
c00223ba:	5f                   	pop    edi
c00223bb:	5d                   	pop    ebp
c00223bc:	c3                   	ret    
c00223bd:	90                   	nop

c00223be <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c00223be:	55                   	push   ebp
c00223bf:	57                   	push   edi
c00223c0:	56                   	push   esi
c00223c1:	53                   	push   ebx
c00223c2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c00223c8:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c00223cf:	85 ed                	test   ebp,ebp
c00223d1:	0f 84 51 02 00 00    	je     c0022628 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223d7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00223df:	0f 84 43 02 00 00    	je     c0022628 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c00223e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00223e8:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00223eb:	75 0a                	jne    c00223f7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00223ed:	b8 07 00 00 00       	mov    eax,0x7
c00223f2:	e9 36 02 00 00       	jmp    c002262d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00223f7:	50                   	push   eax
c00223f8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00223fc:	50                   	push   eax
c00223fd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0022404:	53                   	push   ebx
c0022405:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022408:	c1 e0 0b             	shl    eax,0xb
c002240b:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c002240e:	c1 e8 0b             	shr    eax,0xb
c0022411:	50                   	push   eax
c0022412:	e8 f8 fc ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022417:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002241a:	83 c4 10             	add    esp,0x10
c002241d:	89 c1                	mov    ecx,eax
c002241f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0022422:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0022428:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c002242b:	84 db                	test   bl,bl
c002242d:	0f 85 8b 00 00 00    	jne    c00224be <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0022433:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0022439:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002243c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022442:	29 c6                	sub    esi,eax
c0022444:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0022448:	89 f3                	mov    ebx,esi
c002244a:	89 f1                	mov    ecx,esi
c002244c:	c1 fb 1f             	sar    ebx,0x1f
c002244f:	01 f0                	add    eax,esi
c0022451:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022454:	11 da                	adc    edx,ebx
c0022456:	89 04 24             	mov    DWORD PTR [esp],eax
c0022459:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002245d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022460:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022463:	89 d8                	mov    eax,ebx
c0022465:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0022469:	ba 00 00 00 00       	mov    edx,0x0
c002246e:	19 f8                	sbb    eax,edi
c0022470:	b8 00 00 00 00       	mov    eax,0x0
c0022475:	73 08                	jae    c002247f <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022477:	89 f0                	mov    eax,esi
c0022479:	89 fa                	mov    edx,edi
c002247b:	29 c8                	sub    eax,ecx
c002247d:	19 da                	sbb    edx,ebx
c002247f:	89 d7                	mov    edi,edx
c0022481:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022484:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022487:	09 c7                	or     edi,eax
c0022489:	0f 84 5e ff ff ff    	je     c00223ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c002248f:	57                   	push   edi
c0022490:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022494:	50                   	push   eax
c0022495:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002249c:	53                   	push   ebx
c002249d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00224a0:	c1 e0 0b             	shl    eax,0xb
c00224a3:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00224a7:	c1 e8 0b             	shr    eax,0xb
c00224aa:	50                   	push   eax
c00224ab:	e8 5f fc ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00224b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224b3:	83 c4 10             	add    esp,0x10
c00224b6:	25 ff 07 00 00       	and    eax,0x7ff
c00224bb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c00224be:	31 ff                	xor    edi,edi
c00224c0:	56                   	push   esi
c00224c1:	6a 28                	push   0x28
c00224c3:	6a 00                	push   0x0
c00224c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00224c9:	50                   	push   eax
c00224ca:	e8 a9 e2 fd ff       	call   c0000778 <memset>
c00224cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00224d2:	25 ff 07 00 00       	and    eax,0x7ff
c00224d7:	89 c6                	mov    esi,eax
c00224d9:	83 c6 21             	add    esi,0x21
c00224dc:	83 d7 00             	adc    edi,0x0
c00224df:	83 c4 10             	add    esp,0x10
c00224e2:	31 c9                	xor    ecx,ecx
c00224e4:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00224eb:	83 f9 28             	cmp    ecx,0x28
c00224ee:	88 04 24             	mov    BYTE PTR [esp],al
c00224f1:	0f 94 c2             	sete   dl
c00224f4:	88 d0                	mov    al,dl
c00224f6:	ba ff 07 00 00       	mov    edx,0x7ff
c00224fb:	39 f2                	cmp    edx,esi
c00224fd:	ba 00 00 00 00       	mov    edx,0x0
c0022502:	19 fa                	sbb    edx,edi
c0022504:	0f 92 c2             	setb   dl
c0022507:	09 c2                	or     edx,eax
c0022509:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c002250d:	0f 94 c0             	sete   al
c0022510:	08 d0                	or     al,dl
c0022512:	75 16                	jne    c002252a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0022514:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0022518:	74 10                	je     c002252a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c002251a:	8a 04 24             	mov    al,BYTE PTR [esp]
c002251d:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0022521:	41                   	inc    ecx
c0022522:	83 c6 01             	add    esi,0x1
c0022525:	83 d7 00             	adc    edi,0x0
c0022528:	eb ba                	jmp    c00224e4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c002252a:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0022531:	83 ec 0c             	sub    esp,0xc
c0022534:	8d 74 24 24          	lea    esi,[esp+0x24]
c0022538:	56                   	push   esi
c0022539:	e8 56 e2 fd ff       	call   c0000794 <strlen>
c002253e:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022545:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022549:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022551:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022554:	5a                   	pop    edx
c0022555:	25 ff 07 00 00       	and    eax,0x7ff
c002255a:	59                   	pop    ecx
c002255b:	01 f8                	add    eax,edi
c002255d:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022563:	83 e0 02             	and    eax,0x2
c0022566:	3c 01                	cmp    al,0x1
c0022568:	19 c0                	sbb    eax,eax
c002256a:	83 c0 02             	add    eax,0x2
c002256d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022571:	56                   	push   esi
c0022572:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022576:	50                   	push   eax
c0022577:	e8 b8 e2 fd ff       	call   c0000834 <strcpy>
c002257c:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022580:	83 c4 10             	add    esp,0x10
c0022583:	84 c0                	test   al,al
c0022585:	75 21                	jne    c00225a8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022587:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c002258f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022597:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c002259f:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c00225a6:	eb 28                	jmp    c00225d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00225a8:	fe c8                	dec    al
c00225aa:	75 24                	jne    c00225d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c00225ac:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c00225b4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00225bc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c00225c4:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c00225cb:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c00225d0:	8d 74 24 40          	lea    esi,[esp+0x40]
c00225d4:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c00225db:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00225e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00225e4:	0f b6 f3             	movzx  esi,bl
c00225e7:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00225ee:	31 db                	xor    ebx,ebx
c00225f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00225f6:	89 df                	mov    edi,ebx
c00225f8:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00225fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00225fe:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0022601:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0022604:	39 c6                	cmp    esi,eax
c0022606:	19 d7                	sbb    edi,edx
c0022608:	72 10                	jb     c002261a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c002260a:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0022611:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0022618:	eb 0a                	jmp    c0022624 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c002261a:	29 f0                	sub    eax,esi
c002261c:	19 da                	sbb    edx,ebx
c002261e:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022621:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022624:	31 c0                	xor    eax,eax
c0022626:	eb 05                	jmp    c002262d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0022628:	b8 04 00 00 00       	mov    eax,0x4
c002262d:	81 c4 5c 09 00 00    	add    esp,0x95c
c0022633:	5b                   	pop    ebx
c0022634:	5e                   	pop    esi
c0022635:	5f                   	pop    edi
c0022636:	5d                   	pop    ebp
c0022637:	c3                   	ret    

c0022638 <readRoot(unsigned int*, unsigned int*, char)>:
c0022638:	57                   	push   edi
c0022639:	56                   	push   esi
c002263a:	81 ec 38 08 00 00    	sub    esp,0x838
c0022640:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0022648:	50                   	push   eax
c0022649:	8d 44 24 38          	lea    eax,[esp+0x38]
c002264d:	50                   	push   eax
c002264e:	6a 10                	push   0x10
c0022650:	e8 ba fa ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022655:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002265c:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022660:	b9 22 00 00 00       	mov    ecx,0x22
c0022665:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0022667:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002266e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022672:	89 10                	mov    DWORD PTR [eax],edx
c0022674:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002267b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c002267f:	89 10                	mov    DWORD PTR [eax],edx
c0022681:	81 c4 44 08 00 00    	add    esp,0x844
c0022687:	b0 01                	mov    al,0x1
c0022689:	5e                   	pop    esi
c002268a:	5f                   	pop    edi
c002268b:	c3                   	ret    

c002268c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002268c:	55                   	push   ebp
c002268d:	57                   	push   edi
c002268e:	56                   	push   esi
c002268f:	53                   	push   ebx
c0022690:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0022696:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002269d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00226a4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00226a8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c00226ac:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00226b0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00226b4:	75 03                	jne    c00226b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00226b6:	83 c3 02             	add    ebx,0x2
c00226b9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c00226bc:	75 03                	jne    c00226c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c00226be:	43                   	inc    ebx
c00226bf:	eb f8                	jmp    c00226b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c00226c1:	51                   	push   ecx
c00226c2:	68 00 01 00 00       	push   0x100
c00226c7:	6a 00                	push   0x0
c00226c9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00226cd:	50                   	push   eax
c00226ce:	e8 a5 e0 fd ff       	call   c0000778 <memset>
c00226d3:	83 c4 10             	add    esp,0x10
c00226d6:	31 d2                	xor    edx,edx
c00226d8:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00226db:	84 c0                	test   al,al
c00226dd:	74 21                	je     c0022700 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00226df:	3c 2f                	cmp    al,0x2f
c00226e1:	75 0b                	jne    c00226ee <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00226e3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00226e7:	bd 01 00 00 00       	mov    ebp,0x1
c00226ec:	eb 14                	jmp    c0022702 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00226ee:	8d 48 9f             	lea    ecx,[eax-0x61]
c00226f1:	80 f9 19             	cmp    cl,0x19
c00226f4:	77 03                	ja     c00226f9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00226f6:	83 e8 20             	sub    eax,0x20
c00226f9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00226fd:	42                   	inc    edx
c00226fe:	eb d8                	jmp    c00226d8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0022700:	31 ed                	xor    ebp,ebp
c0022702:	83 ec 0c             	sub    esp,0xc
c0022705:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c002270c:	e8 a3 d1 fe ff       	call   c000f8b4 <malloc>
c0022711:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0022718:	89 c6                	mov    esi,eax
c002271a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0022720:	c1 ef 0b             	shr    edi,0xb
c0022723:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c002272a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c002272e:	83 c4 10             	add    esp,0x10
c0022731:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0022736:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002273a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022741:	74 28                	je     c002276b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022743:	52                   	push   edx
c0022744:	57                   	push   edi
c0022745:	50                   	push   eax
c0022746:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002274a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022751:	e8 b9 f9 ff ff       	call   c002210f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002275a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022761:	05 00 08 00 00       	add    eax,0x800
c0022766:	83 c4 10             	add    esp,0x10
c0022769:	eb cb                	jmp    c0022736 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002276b:	83 ec 0c             	sub    esp,0xc
c002276e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022772:	57                   	push   edi
c0022773:	e8 1c e0 fd ff       	call   c0000794 <strlen>
c0022778:	50                   	push   eax
c0022779:	57                   	push   edi
c002277a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022781:	56                   	push   esi
c0022782:	e8 46 f9 ff ff       	call   c00220cd <__memmem(unsigned char*, int, unsigned char*, int)>
c0022787:	83 c4 20             	add    esp,0x20
c002278a:	85 c0                	test   eax,eax
c002278c:	75 13                	jne    c00227a1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c002278e:	83 ec 0c             	sub    esp,0xc
c0022791:	56                   	push   esi
c0022792:	e8 2d d1 fe ff       	call   c000f8c4 <free>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	31 c0                	xor    eax,eax
c002279c:	e9 b3 00 00 00       	jmp    c0022854 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00227a1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c00227a5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c00227a9:	c1 e7 08             	shl    edi,0x8
c00227ac:	c1 e2 10             	shl    edx,0x10
c00227af:	09 d7                	or     edi,edx
c00227b1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c00227b5:	09 d7                	or     edi,edx
c00227b7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c00227bb:	c1 e2 18             	shl    edx,0x18
c00227be:	09 d7                	or     edi,edx
c00227c0:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c00227c4:	89 d1                	mov    ecx,edx
c00227c6:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c00227ca:	c1 e1 08             	shl    ecx,0x8
c00227cd:	c1 e2 10             	shl    edx,0x10
c00227d0:	09 ca                	or     edx,ecx
c00227d2:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c00227d6:	09 ca                	or     edx,ecx
c00227d8:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00227dc:	c1 e1 18             	shl    ecx,0x18
c00227df:	09 ca                	or     edx,ecx
c00227e1:	89 e9                	mov    ecx,ebp
c00227e3:	84 c9                	test   cl,cl
c00227e5:	74 3c                	je     c0022823 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00227e7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00227eb:	83 ec 0c             	sub    esp,0xc
c00227ee:	56                   	push   esi
c00227ef:	e8 d0 d0 fe ff       	call   c000f8c4 <free>
c00227f4:	83 c4 0c             	add    esp,0xc
c00227f7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00227fe:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022803:	50                   	push   eax
c0022804:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002280b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022816:	52                   	push   edx
c0022817:	57                   	push   edi
c0022818:	53                   	push   ebx
c0022819:	e8 6e fe ff ff       	call   c002268c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002281e:	83 c4 20             	add    esp,0x20
c0022821:	eb 31                	jmp    c0022854 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022823:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022826:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002282d:	d0 e8                	shr    al,1
c002282f:	89 3b                	mov    DWORD PTR [ebx],edi
c0022831:	83 e0 01             	and    eax,0x1
c0022834:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c002283b:	83 ec 0c             	sub    esp,0xc
c002283e:	89 13                	mov    DWORD PTR [ebx],edx
c0022840:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022847:	89 03                	mov    DWORD PTR [ebx],eax
c0022849:	56                   	push   esi
c002284a:	e8 75 d0 fe ff       	call   c000f8c4 <free>
c002284f:	83 c4 10             	add    esp,0x10
c0022852:	b0 01                	mov    al,0x1
c0022854:	81 c4 1c 01 00 00    	add    esp,0x11c
c002285a:	5b                   	pop    ebx
c002285b:	5e                   	pop    esi
c002285c:	5f                   	pop    edi
c002285d:	5d                   	pop    ebp
c002285e:	c3                   	ret    

c002285f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002285f:	55                   	push   ebp
c0022860:	57                   	push   edi
c0022861:	56                   	push   esi
c0022862:	53                   	push   ebx
c0022863:	83 ec 20             	sub    esp,0x20
c0022866:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002286a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c002286e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022872:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002287a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022882:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0022887:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c002288d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022893:	57                   	push   edi
c0022894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022898:	50                   	push   eax
c0022899:	8d 44 24 14          	lea    eax,[esp+0x14]
c002289d:	50                   	push   eax
c002289e:	e8 95 fd ff ff       	call   c0022638 <readRoot(unsigned int*, unsigned int*, char)>
c00228a3:	5a                   	pop    edx
c00228a4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00228a8:	e8 e7 de fd ff       	call   c0000794 <strlen>
c00228ad:	83 c4 10             	add    esp,0x10
c00228b0:	83 f8 03             	cmp    eax,0x3
c00228b3:	77 17                	ja     c00228cc <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00228b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228b9:	89 03                	mov    DWORD PTR [ebx],eax
c00228bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00228bf:	89 06                	mov    DWORD PTR [esi],eax
c00228c1:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c00228c8:	b0 01                	mov    al,0x1
c00228ca:	eb 19                	jmp    c00228e5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c00228cc:	50                   	push   eax
c00228cd:	55                   	push   ebp
c00228ce:	57                   	push   edi
c00228cf:	56                   	push   esi
c00228d0:	53                   	push   ebx
c00228d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00228d9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00228dd:	e8 aa fd ff ff       	call   c002268c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00228e2:	83 c4 20             	add    esp,0x20
c00228e5:	83 c4 1c             	add    esp,0x1c
c00228e8:	5b                   	pop    ebx
c00228e9:	5e                   	pop    esi
c00228ea:	5f                   	pop    edi
c00228eb:	5d                   	pop    ebp
c00228ec:	c3                   	ret    
c00228ed:	90                   	nop

c00228ee <ISO9660::open(char const*, void**, FileOpenMode)>:
c00228ee:	57                   	push   edi
c00228ef:	56                   	push   esi
c00228f0:	53                   	push   ebx
c00228f1:	83 ec 10             	sub    esp,0x10
c00228f4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00228f8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00228fc:	85 ff                	test   edi,edi
c00228fe:	0f 84 9d 00 00 00    	je     c00229a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022904:	85 f6                	test   esi,esi
c0022906:	0f 84 95 00 00 00    	je     c00229a1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002290c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022911:	74 17                	je     c002292a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022913:	83 ec 0c             	sub    esp,0xc
c0022916:	68 77 d7 02 c0       	push   0xc002d777
c002291b:	e8 3f 05 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0022920:	83 c4 10             	add    esp,0x10
c0022923:	b8 03 00 00 00       	mov    eax,0x3
c0022928:	eb 7c                	jmp    c00229a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002292a:	83 ec 0c             	sub    esp,0xc
c002292d:	6a 1c                	push   0x1c
c002292f:	e8 80 cf fe ff       	call   c000f8b4 <malloc>
c0022934:	89 07                	mov    DWORD PTR [edi],eax
c0022936:	89 c3                	mov    ebx,eax
c0022938:	58                   	pop    eax
c0022939:	8d 44 24 18          	lea    eax,[esp+0x18]
c002293d:	50                   	push   eax
c002293e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022941:	50                   	push   eax
c0022942:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022946:	50                   	push   eax
c0022947:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002294b:	50                   	push   eax
c002294c:	56                   	push   esi
c002294d:	e8 0d ff ff ff       	call   c002285f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022952:	83 c4 20             	add    esp,0x20
c0022955:	84 c0                	test   al,al
c0022957:	74 07                	je     c0022960 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022959:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002295e:	74 0b                	je     c002296b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022960:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022964:	b8 01 00 00 00       	mov    eax,0x1
c0022969:	eb 3b                	jmp    c00229a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002296b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002296f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022973:	89 03                	mov    DWORD PTR [ebx],eax
c0022975:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002297c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022980:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022987:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002298e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022991:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022998:	8a 06                	mov    al,BYTE PTR [esi]
c002299a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002299d:	31 c0                	xor    eax,eax
c002299f:	eb 05                	jmp    c00229a6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00229a1:	b8 04 00 00 00       	mov    eax,0x4
c00229a6:	83 c4 10             	add    esp,0x10
c00229a9:	5b                   	pop    ebx
c00229aa:	5e                   	pop    esi
c00229ab:	5f                   	pop    edi
c00229ac:	c3                   	ret    
c00229ad:	90                   	nop

c00229ae <ISO9660::exists(char const*)>:
c00229ae:	83 ec 28             	sub    esp,0x28
c00229b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229b5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00229b9:	52                   	push   edx
c00229ba:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00229bd:	52                   	push   edx
c00229be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00229c2:	52                   	push   edx
c00229c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00229c7:	52                   	push   edx
c00229c8:	50                   	push   eax
c00229c9:	e8 91 fe ff ff       	call   c002285f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00229ce:	83 c4 3c             	add    esp,0x3c
c00229d1:	c3                   	ret    

c00229d2 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00229d2:	56                   	push   esi
c00229d3:	53                   	push   ebx
c00229d4:	83 ec 14             	sub    esp,0x14
c00229d7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00229db:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00229df:	85 db                	test   ebx,ebx
c00229e1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00229e5:	0f 94 c2             	sete   dl
c00229e8:	85 f6                	test   esi,esi
c00229ea:	0f 94 c0             	sete   al
c00229ed:	08 c2                	or     dl,al
c00229ef:	75 68                	jne    c0022a59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229f1:	85 c9                	test   ecx,ecx
c00229f3:	74 64                	je     c0022a59 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00229f5:	83 ec 0c             	sub    esp,0xc
c00229f8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00229fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00229ff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022a05:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a0c:	50                   	push   eax
c0022a0d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022a10:	50                   	push   eax
c0022a11:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a15:	50                   	push   eax
c0022a16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022a1a:	50                   	push   eax
c0022a1b:	51                   	push   ecx
c0022a1c:	e8 3e fe ff ff       	call   c002285f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022a21:	83 c4 20             	add    esp,0x20
c0022a24:	ba 01 00 00 00       	mov    edx,0x1
c0022a29:	84 c0                	test   al,al
c0022a2b:	74 31                	je     c0022a5e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022a31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a38:	89 03                	mov    DWORD PTR [ebx],eax
c0022a3a:	ba 00 00 00 00       	mov    edx,0x0
c0022a3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022a43:	85 c0                	test   eax,eax
c0022a45:	0f 95 06             	setne  BYTE PTR [esi]
c0022a48:	74 14                	je     c0022a5e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a4a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022a50:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022a57:	eb 05                	jmp    c0022a5e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022a59:	ba 04 00 00 00       	mov    edx,0x4
c0022a5e:	83 c4 14             	add    esp,0x14
c0022a61:	89 d0                	mov    eax,edx
c0022a63:	5b                   	pop    ebx
c0022a64:	5e                   	pop    esi
c0022a65:	c3                   	ret    

c0022a66 <ISO9660::openDir(char const*, void**)>:
c0022a66:	57                   	push   edi
c0022a67:	56                   	push   esi
c0022a68:	53                   	push   ebx
c0022a69:	83 ec 10             	sub    esp,0x10
c0022a6c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022a70:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022a74:	85 ff                	test   edi,edi
c0022a76:	0f 84 95 00 00 00    	je     c0022b11 <ISO9660::openDir(char const*, void**)+0xab>
c0022a7c:	85 f6                	test   esi,esi
c0022a7e:	0f 84 8d 00 00 00    	je     c0022b11 <ISO9660::openDir(char const*, void**)+0xab>
c0022a84:	83 ec 0c             	sub    esp,0xc
c0022a87:	6a 1c                	push   0x1c
c0022a89:	e8 26 ce fe ff       	call   c000f8b4 <malloc>
c0022a8e:	89 07                	mov    DWORD PTR [edi],eax
c0022a90:	89 c3                	mov    ebx,eax
c0022a92:	59                   	pop    ecx
c0022a93:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022a97:	50                   	push   eax
c0022a98:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022a9b:	50                   	push   eax
c0022a9c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022aa0:	50                   	push   eax
c0022aa1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022aa5:	50                   	push   eax
c0022aa6:	56                   	push   esi
c0022aa7:	e8 b3 fd ff ff       	call   c002285f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022aac:	83 c4 20             	add    esp,0x20
c0022aaf:	84 c0                	test   al,al
c0022ab1:	74 07                	je     c0022aba <ISO9660::openDir(char const*, void**)+0x54>
c0022ab3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022ab8:	75 21                	jne    c0022adb <ISO9660::openDir(char const*, void**)+0x75>
c0022aba:	0f b6 c0             	movzx  eax,al
c0022abd:	52                   	push   edx
c0022abe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022ac2:	50                   	push   eax
c0022ac3:	68 9d d7 02 c0       	push   0xc002d79d
c0022ac8:	e8 92 03 ff ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0022acd:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022ad1:	83 c4 10             	add    esp,0x10
c0022ad4:	b8 01 00 00 00       	mov    eax,0x1
c0022ad9:	eb 3b                	jmp    c0022b16 <ISO9660::openDir(char const*, void**)+0xb0>
c0022adb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022adf:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022ae3:	89 03                	mov    DWORD PTR [ebx],eax
c0022ae5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022aec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022af0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022af7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022afe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022b01:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022b08:	8a 06                	mov    al,BYTE PTR [esi]
c0022b0a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022b0d:	31 c0                	xor    eax,eax
c0022b0f:	eb 05                	jmp    c0022b16 <ISO9660::openDir(char const*, void**)+0xb0>
c0022b11:	b8 04 00 00 00       	mov    eax,0x4
c0022b16:	83 c4 10             	add    esp,0x10
c0022b19:	5b                   	pop    ebx
c0022b1a:	5e                   	pop    esi
c0022b1b:	5f                   	pop    edi
c0022b1c:	c3                   	ret    
c0022b1d:	90                   	nop

c0022b1e <ISO9660::ISO9660()>:
c0022b1e:	83 ec 0c             	sub    esp,0xc
c0022b21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b25:	83 ec 0c             	sub    esp,0xc
c0022b28:	50                   	push   eax
c0022b29:	e8 3c 06 ff ff       	call   c001316a <Filesystem::Filesystem()>
c0022b2e:	83 c4 10             	add    esp,0x10
c0022b31:	ba c0 d7 02 c0       	mov    edx,0xc002d7c0
c0022b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b3a:	89 10                	mov    DWORD PTR [eax],edx
c0022b3c:	90                   	nop
c0022b3d:	83 c4 0c             	add    esp,0xc
c0022b40:	c3                   	ret    
c0022b41:	90                   	nop

c0022b42 <SoundChannel::~SoundChannel()>:
c0022b42:	83 ec 0c             	sub    esp,0xc
c0022b45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022b4c:	83 ec 0c             	sub    esp,0xc
c0022b4f:	50                   	push   eax
c0022b50:	e8 6f cd fe ff       	call   c000f8c4 <free>
c0022b55:	83 c4 10             	add    esp,0x10
c0022b58:	90                   	nop
c0022b59:	83 c4 0c             	add    esp,0xc
c0022b5c:	c3                   	ret    
c0022b5d:	90                   	nop

c0022b5e <SoundChannel::setSpeed(float)>:
c0022b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b62:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022b66:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0022b69:	c3                   	ret    

c0022b6a <SoundChannel::getSpeed()>:
c0022b6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b6e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022b71:	c3                   	ret    

c0022b72 <SoundChannel::setVolume(int)>:
c0022b72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022b76:	83 f8 64             	cmp    eax,0x64
c0022b79:	7e 05                	jle    c0022b80 <SoundChannel::setVolume(int)+0xe>
c0022b7b:	b8 64 00 00 00       	mov    eax,0x64
c0022b80:	85 c0                	test   eax,eax
c0022b82:	79 02                	jns    c0022b86 <SoundChannel::setVolume(int)+0x14>
c0022b84:	31 c0                	xor    eax,eax
c0022b86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022b8a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022b8d:	c3                   	ret    

c0022b8e <SoundChannel::getVolume()>:
c0022b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b92:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022b95:	c3                   	ret    

c0022b96 <SoundChannel::pause()>:
c0022b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b9a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022b9e:	c3                   	ret    
c0022b9f:	90                   	nop

c0022ba0 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022ba0:	83 ec 1c             	sub    esp,0x1c
c0022ba3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ba7:	e8 ea ff ff ff       	call   c0022b96 <SoundChannel::pause()>
c0022bac:	83 c4 04             	add    esp,0x4
c0022baf:	6a 50                	push   0x50
c0022bb1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022bb5:	e8 b8 ff ff ff       	call   c0022b72 <SoundChannel::setVolume(int)>
c0022bba:	83 c4 08             	add    esp,0x8
c0022bbd:	a1 3c d8 02 c0       	mov    eax,ds:0xc002d83c
c0022bc2:	50                   	push   eax
c0022bc3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022bc7:	e8 92 ff ff ff       	call   c0022b5e <SoundChannel::setSpeed(float)>
c0022bcc:	83 c4 08             	add    esp,0x8
c0022bcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bd3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022bd7:	89 10                	mov    DWORD PTR [eax],edx
c0022bd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bdd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022be1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022be4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022be8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022bec:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022bef:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022bf4:	75 23                	jne    c0022c19 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022bfa:	8b 10                	mov    edx,DWORD PTR [eax]
c0022bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c00:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c03:	0f af c2             	imul   eax,edx
c0022c06:	85 c0                	test   eax,eax
c0022c08:	79 03                	jns    c0022c0d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0022c0a:	83 c0 03             	add    eax,0x3
c0022c0d:	c1 f8 02             	sar    eax,0x2
c0022c10:	05 a0 0f 00 00       	add    eax,0xfa0
c0022c15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c1d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022c21:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c28:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0022c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c33:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0022c3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c3e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022c41:	c1 e0 02             	shl    eax,0x2
c0022c44:	83 ec 0c             	sub    esp,0xc
c0022c47:	50                   	push   eax
c0022c48:	e8 67 cc fe ff       	call   c000f8b4 <malloc>
c0022c4d:	83 c4 10             	add    esp,0x10
c0022c50:	89 c2                	mov    edx,eax
c0022c52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c56:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022c59:	83 ec 04             	sub    esp,0x4
c0022c5c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022c60:	50                   	push   eax
c0022c61:	6a 01                	push   0x1
c0022c63:	6a 04                	push   0x4
c0022c65:	e8 23 5f fe ff       	call   c0008b8d <src_new>
c0022c6a:	83 c4 10             	add    esp,0x10
c0022c6d:	89 c2                	mov    edx,eax
c0022c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c73:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c7a:	85 c0                	test   eax,eax
c0022c7c:	74 10                	je     c0022c8e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022c7e:	83 ec 0c             	sub    esp,0xc
c0022c81:	68 20 d8 02 c0       	push   0xc002d820
c0022c86:	e8 6e 7c ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0022c8b:	83 c4 10             	add    esp,0x10
c0022c8e:	a0 20 36 03 c0       	mov    al,ds:0xc0033620
c0022c93:	83 f0 01             	xor    eax,0x1
c0022c96:	84 c0                	test   al,al
c0022c98:	74 57                	je     c0022cf1 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022c9a:	a1 40 d8 02 c0       	mov    eax,ds:0xc002d840
c0022c9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022ca3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022cab:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022cb3:	7f 35                	jg     c0022cea <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022cb5:	83 ec 0c             	sub    esp,0xc
c0022cb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022cbc:	e8 7e 52 00 00       	call   c0027f3f <__floatsisf>
c0022cc1:	83 c4 10             	add    esp,0x10
c0022cc4:	8b 15 40 d8 02 c0    	mov    edx,DWORD PTR ds:0xc002d840
c0022cca:	83 ec 08             	sub    esp,0x8
c0022ccd:	52                   	push   edx
c0022cce:	50                   	push   eax
c0022ccf:	e8 7d 4e 00 00       	call   c0027b51 <__mulsf3>
c0022cd4:	83 c4 10             	add    esp,0x10
c0022cd7:	89 c2                	mov    edx,eax
c0022cd9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cdd:	89 14 85 20 32 03 c0 	mov    DWORD PTR [eax*4-0x3ffccde0],edx
c0022ce4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ce8:	eb c1                	jmp    c0022cab <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022cea:	c6 05 20 36 03 c0 01 	mov    BYTE PTR ds:0xc0033620,0x1
c0022cf1:	90                   	nop
c0022cf2:	83 c4 1c             	add    esp,0x1c
c0022cf5:	c3                   	ret    

c0022cf6 <SoundChannel::play()>:
c0022cf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022cfa:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022cfe:	c3                   	ret    
c0022cff:	90                   	nop

c0022d00 <SoundChannel::paused()>:
c0022d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d04:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022d07:	c3                   	ret    

c0022d08 <SoundChannel::getSampleRate()>:
c0022d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d0e:	c3                   	ret    
c0022d0f:	90                   	nop

c0022d10 <SoundChannel::getBits()>:
c0022d10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d17:	c3                   	ret    

c0022d18 <SoundChannel::getBufferUsed()>:
c0022d18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d1c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022d1f:	c3                   	ret    

c0022d20 <SoundChannel::getBufferSize()>:
c0022d20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022d24:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022d27:	c3                   	ret    

c0022d28 <SoundChannel::unbuffer(float*, int, int)>:
c0022d28:	56                   	push   esi
c0022d29:	53                   	push   ebx
c0022d2a:	83 ec 40             	sub    esp,0x40
c0022d2d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022d31:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022d34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022d38:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022d3b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022d3f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022d43:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022d47:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022d4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022d4f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022d53:	e8 e7 51 00 00       	call   c0027f3f <__floatsisf>
c0022d58:	5a                   	pop    edx
c0022d59:	89 c6                	mov    esi,eax
c0022d5b:	ff 33                	push   DWORD PTR [ebx]
c0022d5d:	e8 dd 51 00 00       	call   c0027f3f <__floatsisf>
c0022d62:	59                   	pop    ecx
c0022d63:	5a                   	pop    edx
c0022d64:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022d67:	50                   	push   eax
c0022d68:	e8 e4 4d 00 00       	call   c0027b51 <__mulsf3>
c0022d6d:	59                   	pop    ecx
c0022d6e:	5a                   	pop    edx
c0022d6f:	50                   	push   eax
c0022d70:	56                   	push   esi
c0022d71:	e8 9e 4f 00 00       	call   c0027d14 <__divsf3>
c0022d76:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d79:	e8 91 64 00 00       	call   c002920f <__extendsfdf2>
c0022d7e:	59                   	pop    ecx
c0022d7f:	5e                   	pop    esi
c0022d80:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022d84:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022d88:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022d90:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022d94:	50                   	push   eax
c0022d95:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022d98:	e8 e5 59 fe ff       	call   c0008782 <src_process>
c0022d9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022da1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022da4:	83 c4 0c             	add    esp,0xc
c0022da7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022daa:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022dad:	29 d0                	sub    eax,edx
c0022daf:	c1 e0 02             	shl    eax,0x2
c0022db2:	50                   	push   eax
c0022db3:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022db6:	50                   	push   eax
c0022db7:	51                   	push   ecx
c0022db8:	e8 f3 d8 fd ff       	call   c00006b0 <memmove>
c0022dbd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022dc1:	83 c4 44             	add    esp,0x44
c0022dc4:	5b                   	pop    ebx
c0022dc5:	5e                   	pop    esi
c0022dc6:	c3                   	ret    
c0022dc7:	90                   	nop

c0022dc8 <SoundChannel::buffer8(unsigned char*, int)>:
c0022dc8:	55                   	push   ebp
c0022dc9:	57                   	push   edi
c0022dca:	56                   	push   esi
c0022dcb:	53                   	push   ebx
c0022dcc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dd0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022dd4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022dd7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022ddb:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022dde:	74 7a                	je     c0022e5a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022de0:	85 ff                	test   edi,edi
c0022de2:	7e 76                	jle    c0022e5a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022de4:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022de8:	8d 70 01             	lea    esi,[eax+0x1]
c0022deb:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022dee:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022df1:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022df8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022dfb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022dfe:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022e01:	74 5e                	je     c0022e61 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022e03:	83 ff 01             	cmp    edi,0x1
c0022e06:	74 4b                	je     c0022e53 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022e08:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022e0c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022e0f:	8d 70 01             	lea    esi,[eax+0x1]
c0022e12:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e15:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022e1c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022e1f:	b8 02 00 00 00       	mov    eax,0x2
c0022e24:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e27:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e2a:	75 23                	jne    c0022e4f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022e2c:	eb 27                	jmp    c0022e55 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e2e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022e33:	8d 71 01             	lea    esi,[ecx+0x1]
c0022e36:	40                   	inc    eax
c0022e37:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022e3a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022e3d:	8b 1c 9d 20 32 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffccde0]
c0022e44:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022e47:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022e4a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022e4d:	74 06                	je     c0022e55 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022e4f:	39 c7                	cmp    edi,eax
c0022e51:	75 db                	jne    c0022e2e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022e53:	89 f8                	mov    eax,edi
c0022e55:	5b                   	pop    ebx
c0022e56:	5e                   	pop    esi
c0022e57:	5f                   	pop    edi
c0022e58:	5d                   	pop    ebp
c0022e59:	c3                   	ret    
c0022e5a:	5b                   	pop    ebx
c0022e5b:	31 c0                	xor    eax,eax
c0022e5d:	5e                   	pop    esi
c0022e5e:	5f                   	pop    edi
c0022e5f:	5d                   	pop    ebp
c0022e60:	c3                   	ret    
c0022e61:	b8 01 00 00 00       	mov    eax,0x1
c0022e66:	eb ed                	jmp    c0022e55 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022e68 <SoundDevice::SoundDevice(char const*)>:
c0022e68:	83 ec 1c             	sub    esp,0x1c
c0022e6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e6f:	83 ec 08             	sub    esp,0x8
c0022e72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022e76:	50                   	push   eax
c0022e77:	e8 f4 15 ff ff       	call   c0014470 <Device::Device(char const*)>
c0022e7c:	83 c4 10             	add    esp,0x10
c0022e7f:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c0022e84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e88:	89 10                	mov    DWORD PTR [eax],edx
c0022e8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e8e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022e98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022e9c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022ea6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022eae:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022eb3:	7f 19                	jg     c0022ece <SoundDevice::SoundDevice(char const*)+0x66>
c0022eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022eb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022ebd:	83 c2 54             	add    edx,0x54
c0022ec0:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022ec8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022ecc:	eb e0                	jmp    c0022eae <SoundDevice::SoundDevice(char const*)+0x46>
c0022ece:	90                   	nop
c0022ecf:	83 c4 1c             	add    esp,0x1c
c0022ed2:	c3                   	ret    
c0022ed3:	90                   	nop

c0022ed4 <SoundDevice::~SoundDevice()>:
c0022ed4:	53                   	push   ebx
c0022ed5:	83 ec 18             	sub    esp,0x18
c0022ed8:	ba 4c d8 02 c0       	mov    edx,0xc002d84c
c0022edd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ee1:	89 10                	mov    DWORD PTR [eax],edx
c0022ee3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022eeb:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022ef0:	7f 46                	jg     c0022f38 <SoundDevice::~SoundDevice()+0x64>
c0022ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ef6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022efa:	83 c2 54             	add    edx,0x54
c0022efd:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022f01:	85 c0                	test   eax,eax
c0022f03:	74 2d                	je     c0022f32 <SoundDevice::~SoundDevice()+0x5e>
c0022f05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f09:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022f0d:	83 c2 54             	add    edx,0x54
c0022f10:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022f14:	85 db                	test   ebx,ebx
c0022f16:	74 1a                	je     c0022f32 <SoundDevice::~SoundDevice()+0x5e>
c0022f18:	83 ec 0c             	sub    esp,0xc
c0022f1b:	53                   	push   ebx
c0022f1c:	e8 21 fc ff ff       	call   c0022b42 <SoundChannel::~SoundChannel()>
c0022f21:	83 c4 10             	add    esp,0x10
c0022f24:	83 ec 08             	sub    esp,0x8
c0022f27:	6a 2c                	push   0x2c
c0022f29:	53                   	push   ebx
c0022f2a:	e8 50 fe fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0022f2f:	83 c4 10             	add    esp,0x10
c0022f32:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022f36:	eb b3                	jmp    c0022eeb <SoundDevice::~SoundDevice()+0x17>
c0022f38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022f3c:	83 ec 0c             	sub    esp,0xc
c0022f3f:	50                   	push   eax
c0022f40:	e8 21 12 ff ff       	call   c0014166 <Device::~Device()>
c0022f45:	83 c4 10             	add    esp,0x10
c0022f48:	90                   	nop
c0022f49:	83 c4 18             	add    esp,0x18
c0022f4c:	5b                   	pop    ebx
c0022f4d:	c3                   	ret    

c0022f4e <SoundDevice::~SoundDevice()>:
c0022f4e:	83 ec 0c             	sub    esp,0xc
c0022f51:	83 ec 0c             	sub    esp,0xc
c0022f54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f58:	e8 77 ff ff ff       	call   c0022ed4 <SoundDevice::~SoundDevice()>
c0022f5d:	83 c4 10             	add    esp,0x10
c0022f60:	83 ec 08             	sub    esp,0x8
c0022f63:	68 e4 01 00 00       	push   0x1e4
c0022f68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f6c:	e8 0e fe fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0022f71:	83 c4 10             	add    esp,0x10
c0022f74:	83 c4 0c             	add    esp,0xc
c0022f77:	c3                   	ret    

c0022f78 <SoundDevice::getFreeChannelNum()>:
c0022f78:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022f7c:	31 c0                	xor    eax,eax
c0022f7e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022f86:	74 09                	je     c0022f91 <SoundDevice::getFreeChannelNum()+0x19>
c0022f88:	40                   	inc    eax
c0022f89:	83 f8 20             	cmp    eax,0x20
c0022f8c:	75 f0                	jne    c0022f7e <SoundDevice::getFreeChannelNum()+0x6>
c0022f8e:	83 c8 ff             	or     eax,0xffffffff
c0022f91:	c3                   	ret    

c0022f92 <SoundDevice::addChannel(SoundChannel*)>:
c0022f92:	56                   	push   esi
c0022f93:	53                   	push   ebx
c0022f94:	51                   	push   ecx
c0022f95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022f9d:	53                   	push   ebx
c0022f9e:	e8 d5 ff ff ff       	call   c0022f78 <SoundDevice::getFreeChannelNum()>
c0022fa3:	5a                   	pop    edx
c0022fa4:	83 f8 ff             	cmp    eax,0xffffffff
c0022fa7:	74 51                	je     c0022ffa <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022fa9:	85 f6                	test   esi,esi
c0022fab:	74 4d                	je     c0022ffa <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022fad:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022fb4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022fbb:	75 30                	jne    c0022fed <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022fbd:	83 ec 0c             	sub    esp,0xc
c0022fc0:	56                   	push   esi
c0022fc1:	e8 42 fd ff ff       	call   c0022d08 <SoundChannel::getSampleRate()>
c0022fc6:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022fcc:	89 34 24             	mov    DWORD PTR [esp],esi
c0022fcf:	e8 3c fd ff ff       	call   c0022d10 <SoundChannel::getBits()>
c0022fd4:	83 c4 0c             	add    esp,0xc
c0022fd7:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022fdd:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022fdf:	50                   	push   eax
c0022fe0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022fe6:	53                   	push   ebx
c0022fe7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022fea:	83 c4 10             	add    esp,0x10
c0022fed:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022ff3:	b8 01 00 00 00       	mov    eax,0x1
c0022ff8:	eb 03                	jmp    c0022ffd <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022ffa:	83 c8 ff             	or     eax,0xffffffff
c0022ffd:	5a                   	pop    edx
c0022ffe:	5b                   	pop    ebx
c0022fff:	5e                   	pop    esi
c0023000:	c3                   	ret    
c0023001:	90                   	nop

c0023002 <SoundDevice::removeChannel(int)>:
c0023002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023006:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002300a:	83 fa 1f             	cmp    edx,0x1f
c002300d:	77 23                	ja     c0023032 <SoundDevice::removeChannel(int)+0x30>
c002300f:	8d 14 90             	lea    edx,[eax+edx*4]
c0023012:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0023019:	74 17                	je     c0023032 <SoundDevice::removeChannel(int)+0x30>
c002301b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0023025:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002302b:	75 05                	jne    c0023032 <SoundDevice::removeChannel(int)+0x30>
c002302d:	8b 00                	mov    eax,DWORD PTR [eax]
c002302f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0023032:	c3                   	ret    
c0023033:	90                   	nop

c0023034 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0023034:	57                   	push   edi
c0023035:	56                   	push   esi
c0023036:	53                   	push   ebx
c0023037:	31 db                	xor    ebx,ebx
c0023039:	83 ec 10             	sub    esp,0x10
c002303c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0023040:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0023044:	0f 8d cb 00 00 00    	jge    c0023115 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002304a:	83 ec 0c             	sub    esp,0xc
c002304d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023051:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0023054:	e8 b6 61 00 00       	call   c002920f <__extendsfdf2>
c0023059:	83 c4 10             	add    esp,0x10
c002305c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023060:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023064:	68 00 00 f0 3f       	push   0x3ff00000
c0023069:	6a 00                	push   0x0
c002306b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002306f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023073:	e8 23 51 00 00       	call   c002819b <__adddf3>
c0023078:	83 c4 10             	add    esp,0x10
c002307b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002307f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023083:	68 00 00 e0 3f       	push   0x3fe00000
c0023088:	6a 00                	push   0x0
c002308a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002308e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023092:	e8 81 57 00 00       	call   c0028818 <__muldf3>
c0023097:	83 c4 10             	add    esp,0x10
c002309a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002309e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00230a2:	68 00 00 60 40       	push   0x40600000
c00230a7:	6a 00                	push   0x0
c00230a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230b1:	e8 62 57 00 00       	call   c0028818 <__muldf3>
c00230b6:	59                   	pop    ecx
c00230b7:	5f                   	pop    edi
c00230b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00230bc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00230c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00230c8:	e8 1e 60 00 00       	call   c00290eb <__truncdfsf2>
c00230cd:	5a                   	pop    edx
c00230ce:	89 c7                	mov    edi,eax
c00230d0:	59                   	pop    ecx
c00230d1:	68 00 00 fe 42       	push   0x42fe0000
c00230d6:	50                   	push   eax
c00230d7:	e8 b9 50 00 00       	call   c0028195 <__gesf2>
c00230dc:	83 c4 10             	add    esp,0x10
c00230df:	85 c0                	test   eax,eax
c00230e1:	78 06                	js     c00230e9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00230e3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00230e7:	eb 26                	jmp    c002310f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00230e9:	50                   	push   eax
c00230ea:	50                   	push   eax
c00230eb:	6a 00                	push   0x0
c00230ed:	57                   	push   edi
c00230ee:	e8 a6 50 00 00       	call   c0028199 <__lesf2>
c00230f3:	83 c4 10             	add    esp,0x10
c00230f6:	85 c0                	test   eax,eax
c00230f8:	7f 06                	jg     c0023100 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00230fa:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00230fe:	eb 0f                	jmp    c002310f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0023100:	83 ec 0c             	sub    esp,0xc
c0023103:	57                   	push   edi
c0023104:	e8 a3 61 00 00       	call   c00292ac <lrintf>
c0023109:	83 c4 10             	add    esp,0x10
c002310c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002310f:	43                   	inc    ebx
c0023110:	e9 2b ff ff ff       	jmp    c0023040 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0023115:	83 c4 10             	add    esp,0x10
c0023118:	5b                   	pop    ebx
c0023119:	5e                   	pop    esi
c002311a:	5f                   	pop    edi
c002311b:	c3                   	ret    

c002311c <SoundDevice::getAudio(int, float*, float*)>:
c002311c:	55                   	push   ebp
c002311d:	57                   	push   edi
c002311e:	56                   	push   esi
c002311f:	53                   	push   ebx
c0023120:	31 db                	xor    ebx,ebx
c0023122:	83 ec 20             	sub    esp,0x20
c0023125:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023129:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002312d:	c1 e0 02             	shl    eax,0x2
c0023130:	50                   	push   eax
c0023131:	6a 00                	push   0x0
c0023133:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0023137:	e8 3c d6 fd ff       	call   c0000778 <memset>
c002313c:	83 c4 10             	add    esp,0x10
c002313f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023143:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002314a:	85 c0                	test   eax,eax
c002314c:	0f 84 d7 00 00 00    	je     c0023229 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023152:	83 ec 0c             	sub    esp,0xc
c0023155:	50                   	push   eax
c0023156:	e8 a5 fb ff ff       	call   c0022d00 <SoundChannel::paused()>
c002315b:	83 c4 10             	add    esp,0x10
c002315e:	84 c0                	test   al,al
c0023160:	0f 85 c3 00 00 00    	jne    c0023229 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023166:	83 ec 0c             	sub    esp,0xc
c0023169:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0023170:	e8 19 fa ff ff       	call   c0022b8e <SoundChannel::getVolume()>
c0023175:	83 c4 10             	add    esp,0x10
c0023178:	85 c0                	test   eax,eax
c002317a:	0f 84 a9 00 00 00    	je     c0023229 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023180:	83 ec 0c             	sub    esp,0xc
c0023183:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002318a:	e8 ff f9 ff ff       	call   c0022b8e <SoundChannel::getVolume()>
c002318f:	83 ec 0c             	sub    esp,0xc
c0023192:	50                   	push   eax
c0023193:	e8 a7 4d 00 00       	call   c0027f3f <__floatsisf>
c0023198:	59                   	pop    ecx
c0023199:	5d                   	pop    ebp
c002319a:	31 ed                	xor    ebp,ebp
c002319c:	68 00 00 c8 42       	push   0x42c80000
c00231a1:	50                   	push   eax
c00231a2:	e8 6d 4b 00 00       	call   c0027d14 <__divsf3>
c00231a7:	83 c4 10             	add    esp,0x10
c00231aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00231ae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00231b2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00231b8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00231bc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00231c3:	e8 60 fb ff ff       	call   c0022d28 <SoundChannel::unbuffer(float*, int, int)>
c00231c8:	83 c4 20             	add    esp,0x20
c00231cb:	89 c1                	mov    ecx,eax
c00231cd:	39 cd                	cmp    ebp,ecx
c00231cf:	7d 52                	jge    c0023223 <SoundDevice::getAudio(int, float*, float*)+0x107>
c00231d1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00231d5:	50                   	push   eax
c00231d6:	50                   	push   eax
c00231d7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00231db:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00231de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00231e2:	e8 6a 49 00 00       	call   c0027b51 <__mulsf3>
c00231e7:	5a                   	pop    edx
c00231e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00231ec:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00231f2:	e8 48 4d 00 00       	call   c0027f3f <__floatsisf>
c00231f7:	59                   	pop    ecx
c00231f8:	5a                   	pop    edx
c00231f9:	50                   	push   eax
c00231fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231fe:	e8 11 4b 00 00       	call   c0027d14 <__divsf3>
c0023203:	59                   	pop    ecx
c0023204:	5a                   	pop    edx
c0023205:	50                   	push   eax
c0023206:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002320a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002320d:	e8 1c 46 00 00       	call   c002782e <__addsf3>
c0023212:	83 c4 10             	add    esp,0x10
c0023215:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002321d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0023220:	45                   	inc    ebp
c0023221:	eb aa                	jmp    c00231cd <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0023223:	39 cf                	cmp    edi,ecx
c0023225:	7e 02                	jle    c0023229 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0023227:	89 cf                	mov    edi,ecx
c0023229:	43                   	inc    ebx
c002322a:	83 fb 20             	cmp    ebx,0x20
c002322d:	0f 85 10 ff ff ff    	jne    c0023143 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0023233:	83 c4 1c             	add    esp,0x1c
c0023236:	89 f8                	mov    eax,edi
c0023238:	5b                   	pop    ebx
c0023239:	5e                   	pop    esi
c002323a:	5f                   	pop    edi
c002323b:	5d                   	pop    ebp
c002323c:	c3                   	ret    
c002323d:	90                   	nop

c002323e <PCI::open(int, int, void*)>:
c002323e:	83 ec 18             	sub    esp,0x18
c0023241:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023245:	8b 10                	mov    edx,DWORD PTR [eax]
c0023247:	50                   	push   eax
c0023248:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002324b:	31 c0                	xor    eax,eax
c002324d:	83 c4 1c             	add    esp,0x1c
c0023250:	c3                   	ret    
c0023251:	90                   	nop

c0023252 <PCI::close(int, int, void*)>:
c0023252:	31 c0                	xor    eax,eax
c0023254:	c3                   	ret    
c0023255:	90                   	nop

c0023256 <PCI::PCI()>:
c0023256:	83 ec 0c             	sub    esp,0xc
c0023259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002325d:	83 ec 08             	sub    esp,0x8
c0023260:	68 7c d8 02 c0       	push   0xc002d87c
c0023265:	50                   	push   eax
c0023266:	e8 95 08 ff ff       	call   c0013b00 <Bus::Bus(char const*)>
c002326b:	83 c4 10             	add    esp,0x10
c002326e:	ba 1c d9 02 c0       	mov    edx,0xc002d91c
c0023273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023277:	89 10                	mov    DWORD PTR [eax],edx
c0023279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023283:	0f b6 d0             	movzx  edx,al
c0023286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002328a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023295:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002329b:	0f b6 d0             	movzx  edx,al
c002329e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232a2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00232a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00232b1:	8d 50 01             	lea    edx,[eax+0x1]
c00232b4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00232b8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00232be:	0f b6 d0             	movzx  edx,al
c00232c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00232c9:	83 c9 c0             	or     ecx,0xffffffc0
c00232cc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00232d0:	90                   	nop
c00232d1:	83 c4 0c             	add    esp,0xc
c00232d4:	c3                   	ret    
c00232d5:	90                   	nop

c00232d6 <PCI::readBAR8(unsigned int, int)>:
c00232d6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232de:	f6 c2 01             	test   dl,0x1
c00232e1:	74 07                	je     c00232ea <PCI::readBAR8(unsigned int, int)+0x14>
c00232e3:	83 e2 fc             	and    edx,0xfffffffc
c00232e6:	01 c2                	add    edx,eax
c00232e8:	ec                   	in     al,dx
c00232e9:	c3                   	ret    
c00232ea:	83 e2 f0             	and    edx,0xfffffff0
c00232ed:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00232f0:	c3                   	ret    
c00232f1:	90                   	nop

c00232f2 <PCI::readBAR16(unsigned int, int)>:
c00232f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00232f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00232fa:	f6 c2 01             	test   dl,0x1
c00232fd:	74 08                	je     c0023307 <PCI::readBAR16(unsigned int, int)+0x15>
c00232ff:	83 e2 fc             	and    edx,0xfffffffc
c0023302:	01 c2                	add    edx,eax
c0023304:	66 ed                	in     ax,dx
c0023306:	c3                   	ret    
c0023307:	83 e2 f0             	and    edx,0xfffffff0
c002330a:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c002330e:	c3                   	ret    
c002330f:	90                   	nop

c0023310 <PCI::readBAR32(unsigned int, int)>:
c0023310:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023314:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023318:	f6 c2 01             	test   dl,0x1
c002331b:	74 07                	je     c0023324 <PCI::readBAR32(unsigned int, int)+0x14>
c002331d:	83 e2 fc             	and    edx,0xfffffffc
c0023320:	01 c2                	add    edx,eax
c0023322:	ed                   	in     eax,dx
c0023323:	c3                   	ret    
c0023324:	83 e2 f0             	and    edx,0xfffffff0
c0023327:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c002332a:	c3                   	ret    
c002332b:	90                   	nop

c002332c <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c002332c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023334:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023338:	f6 c2 01             	test   dl,0x1
c002333b:	74 07                	je     c0023344 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c002333d:	83 e2 fc             	and    edx,0xfffffffc
c0023340:	01 ca                	add    edx,ecx
c0023342:	ee                   	out    dx,al
c0023343:	c3                   	ret    
c0023344:	83 e2 f0             	and    edx,0xfffffff0
c0023347:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002334a:	c3                   	ret    
c002334b:	90                   	nop

c002334c <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c002334c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023350:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023354:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0023358:	f6 c2 01             	test   dl,0x1
c002335b:	74 08                	je     c0023365 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c002335d:	83 e2 fc             	and    edx,0xfffffffc
c0023360:	01 ca                	add    edx,ecx
c0023362:	66 ef                	out    dx,ax
c0023364:	c3                   	ret    
c0023365:	83 e2 f0             	and    edx,0xfffffff0
c0023368:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c002336c:	c3                   	ret    
c002336d:	90                   	nop

c002336e <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c002336e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023372:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023376:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002337a:	f6 c2 01             	test   dl,0x1
c002337d:	74 07                	je     c0023386 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c002337f:	83 e2 fc             	and    edx,0xfffffffc
c0023382:	01 ca                	add    edx,ecx
c0023384:	ef                   	out    dx,eax
c0023385:	c3                   	ret    
c0023386:	83 e2 f0             	and    edx,0xfffffff0
c0023389:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c002338c:	c3                   	ret    
c002338d:	90                   	nop

c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002338e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023392:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023397:	89 ca                	mov    edx,ecx
c0023399:	c1 e0 10             	shl    eax,0x10
c002339c:	81 e2 fc 00 00 00    	and    edx,0xfc
c00233a2:	09 d0                	or     eax,edx
c00233a4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00233a9:	c1 e2 08             	shl    edx,0x8
c00233ac:	09 d0                	or     eax,edx
c00233ae:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00233b3:	c1 e2 0b             	shl    edx,0xb
c00233b6:	09 d0                	or     eax,edx
c00233b8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00233bd:	0d 00 00 00 80       	or     eax,0x80000000
c00233c2:	ef                   	out    dx,eax
c00233c3:	ba fc 0c 00 00       	mov    edx,0xcfc
c00233c8:	ed                   	in     eax,dx
c00233c9:	83 e1 02             	and    ecx,0x2
c00233cc:	0f b6 c9             	movzx  ecx,cl
c00233cf:	c1 e1 03             	shl    ecx,0x3
c00233d2:	d3 e8                	shr    eax,cl
c00233d4:	c3                   	ret    
c00233d5:	90                   	nop

c00233d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00233d6:	6a 00                	push   0x0
c00233d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233dd:	50                   	push   eax
c00233de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233e3:	50                   	push   eax
c00233e4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233e9:	50                   	push   eax
c00233ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00233ee:	e8 9b ff ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00233f3:	83 c4 14             	add    esp,0x14
c00233f6:	c3                   	ret    
c00233f7:	90                   	nop

c00233f8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00233f8:	6a 0e                	push   0xe
c00233fa:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00233ff:	50                   	push   eax
c0023400:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023405:	50                   	push   eax
c0023406:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002340b:	50                   	push   eax
c002340c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023410:	e8 79 ff ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023415:	83 c4 14             	add    esp,0x14
c0023418:	0f b6 c0             	movzx  eax,al
c002341b:	c3                   	ret    

c002341c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002341c:	55                   	push   ebp
c002341d:	57                   	push   edi
c002341e:	56                   	push   esi
c002341f:	53                   	push   ebx
c0023420:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0023425:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c002342a:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c002342f:	6a 0a                	push   0xa
c0023431:	56                   	push   esi
c0023432:	55                   	push   ebp
c0023433:	57                   	push   edi
c0023434:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0023438:	e8 51 ff ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002343d:	6a 0a                	push   0xa
c002343f:	89 c3                	mov    ebx,eax
c0023441:	56                   	push   esi
c0023442:	0f b6 db             	movzx  ebx,bl
c0023445:	55                   	push   ebp
c0023446:	57                   	push   edi
c0023447:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002344b:	e8 3e ff ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023450:	83 c4 28             	add    esp,0x28
c0023453:	25 00 ff 00 00       	and    eax,0xff00
c0023458:	09 d8                	or     eax,ebx
c002345a:	5b                   	pop    ebx
c002345b:	5e                   	pop    esi
c002345c:	5f                   	pop    edi
c002345d:	5d                   	pop    ebp
c002345e:	c3                   	ret    
c002345f:	90                   	nop

c0023460 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023460:	6a 08                	push   0x8
c0023462:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023467:	50                   	push   eax
c0023468:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002346d:	50                   	push   eax
c002346e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023473:	50                   	push   eax
c0023474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023478:	e8 11 ff ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002347d:	83 c4 14             	add    esp,0x14
c0023480:	0f b6 c4             	movzx  eax,ah
c0023483:	c3                   	ret    

c0023484 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023484:	6a 08                	push   0x8
c0023486:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002348b:	50                   	push   eax
c002348c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023491:	50                   	push   eax
c0023492:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023497:	50                   	push   eax
c0023498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002349c:	e8 ed fe ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234a1:	83 c4 14             	add    esp,0x14
c00234a4:	c3                   	ret    
c00234a5:	90                   	nop

c00234a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00234a6:	6a 3c                	push   0x3c
c00234a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234ad:	50                   	push   eax
c00234ae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234b3:	50                   	push   eax
c00234b4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234b9:	50                   	push   eax
c00234ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234be:	e8 cb fe ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234c3:	83 c4 14             	add    esp,0x14
c00234c6:	c3                   	ret    
c00234c7:	90                   	nop

c00234c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00234c8:	6a 18                	push   0x18
c00234ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234cf:	50                   	push   eax
c00234d0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234d5:	50                   	push   eax
c00234d6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00234db:	50                   	push   eax
c00234dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00234e0:	e8 a9 fe ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00234e5:	83 c4 14             	add    esp,0x14
c00234e8:	0f b6 c4             	movzx  eax,ah
c00234eb:	c3                   	ret    

c00234ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00234ec:	55                   	push   ebp
c00234ed:	57                   	push   edi
c00234ee:	56                   	push   esi
c00234ef:	53                   	push   ebx
c00234f0:	50                   	push   eax
c00234f1:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00234f5:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00234fa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00234ff:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0023504:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c002350b:	8d 43 12             	lea    eax,[ebx+0x12]
c002350e:	83 c3 10             	add    ebx,0x10
c0023511:	0f b6 c0             	movzx  eax,al
c0023514:	0f b6 db             	movzx  ebx,bl
c0023517:	50                   	push   eax
c0023518:	51                   	push   ecx
c0023519:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002351d:	57                   	push   edi
c002351e:	55                   	push   ebp
c002351f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0023523:	e8 66 fe ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023528:	53                   	push   ebx
c0023529:	89 c6                	mov    esi,eax
c002352b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002352f:	c1 e6 10             	shl    esi,0x10
c0023532:	51                   	push   ecx
c0023533:	57                   	push   edi
c0023534:	55                   	push   ebp
c0023535:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023539:	e8 50 fe ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002353e:	83 c4 2c             	add    esp,0x2c
c0023541:	0f b7 c0             	movzx  eax,ax
c0023544:	5b                   	pop    ebx
c0023545:	09 f0                	or     eax,esi
c0023547:	5e                   	pop    esi
c0023548:	5f                   	pop    edi
c0023549:	5d                   	pop    ebp
c002354a:	c3                   	ret    
c002354b:	90                   	nop

c002354c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c002354c:	53                   	push   ebx
c002354d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023552:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0023557:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002355b:	c1 e1 10             	shl    ecx,0x10
c002355e:	25 fc 00 00 00       	and    eax,0xfc
c0023563:	09 c1                	or     ecx,eax
c0023565:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002356a:	c1 e0 08             	shl    eax,0x8
c002356d:	09 c1                	or     ecx,eax
c002356f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023574:	c1 e0 0b             	shl    eax,0xb
c0023577:	09 c1                	or     ecx,eax
c0023579:	81 c9 00 00 00 80    	or     ecx,0x80000000
c002357f:	89 c8                	mov    eax,ecx
c0023581:	ef                   	out    dx,eax
c0023582:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023587:	ed                   	in     eax,dx
c0023588:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c002358d:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023592:	74 0a                	je     c002359e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023594:	0f b7 d8             	movzx  ebx,ax
c0023597:	89 d0                	mov    eax,edx
c0023599:	c1 e0 10             	shl    eax,0x10
c002359c:	eb 05                	jmp    c00235a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c002359e:	66 31 c0             	xor    ax,ax
c00235a1:	89 d3                	mov    ebx,edx
c00235a3:	09 c3                	or     ebx,eax
c00235a5:	ba f8 0c 00 00       	mov    edx,0xcf8
c00235aa:	89 c8                	mov    eax,ecx
c00235ac:	ef                   	out    dx,eax
c00235ad:	ba fc 0c 00 00       	mov    edx,0xcfc
c00235b2:	89 d8                	mov    eax,ebx
c00235b4:	ef                   	out    dx,eax
c00235b5:	5b                   	pop    ebx
c00235b6:	c3                   	ret    
c00235b7:	90                   	nop

c00235b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c00235b8:	55                   	push   ebp
c00235b9:	57                   	push   edi
c00235ba:	56                   	push   esi
c00235bb:	53                   	push   ebx
c00235bc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00235c2:	8b ac 24 64 01 00 00 	mov    ebp,DWORD PTR [esp+0x164]
c00235c9:	80 3d 2c 36 03 c0 00 	cmp    BYTE PTR ds:0xc003362c,0x0
c00235d0:	75 79                	jne    c002364b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x93>
c00235d2:	83 ec 0c             	sub    esp,0xc
c00235d5:	68 14 01 00 00       	push   0x114
c00235da:	e8 d5 c2 fe ff       	call   c000f8b4 <malloc>
c00235df:	83 c4 0c             	add    esp,0xc
c00235e2:	89 c3                	mov    ebx,eax
c00235e4:	ff 35 30 28 03 c0    	push   DWORD PTR ds:0xc0032830
c00235ea:	68 84 d8 02 c0       	push   0xc002d884
c00235ef:	50                   	push   eax
c00235f0:	e8 c9 fd fe ff       	call   c00133be <File::File(char const*, Process*)>
c00235f5:	5a                   	pop    edx
c00235f6:	59                   	pop    ecx
c00235f7:	6a 01                	push   0x1
c00235f9:	53                   	push   ebx
c00235fa:	e8 23 fe fe ff       	call   c0013422 <File::open(FileOpenMode)>
c00235ff:	83 c4 0c             	add    esp,0xc
c0023602:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023606:	50                   	push   eax
c0023607:	8d 44 24 28          	lea    eax,[esp+0x28]
c002360b:	50                   	push   eax
c002360c:	53                   	push   ebx
c002360d:	e8 bc 00 ff ff       	call   c00136ce <File::stat(unsigned long long*, bool*)>
c0023612:	5e                   	pop    esi
c0023613:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0023617:	e8 98 c2 fe ff       	call   c000f8b4 <malloc>
c002361c:	5f                   	pop    edi
c002361d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002361f:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0023623:	a3 28 36 03 c0       	mov    ds:0xc0033628,eax
c0023628:	51                   	push   ecx
c0023629:	50                   	push   eax
c002362a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002362e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0023632:	53                   	push   ebx
c0023633:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0023636:	83 c4 14             	add    esp,0x14
c0023639:	53                   	push   ebx
c002363a:	e8 41 fe fe ff       	call   c0013480 <File::close()>
c002363f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0023643:	83 c4 10             	add    esp,0x10
c0023646:	a3 24 36 03 c0       	mov    ds:0xc0033624,eax
c002364b:	31 f6                	xor    esi,esi
c002364d:	31 db                	xor    ebx,ebx
c002364f:	39 35 24 36 03 c0    	cmp    DWORD PTR ds:0xc0033624,esi
c0023655:	0f 8e 61 01 00 00    	jle    c00237bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x204>
c002365b:	83 ec 0c             	sub    esp,0xc
c002365e:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c0023663:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0023667:	50                   	push   eax
c0023668:	e8 d9 cf fd ff       	call   c0000646 <hexCharToInt>
c002366d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023671:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c0023676:	0f be 44 30 01       	movsx  eax,BYTE PTR [eax+esi*1+0x1]
c002367b:	89 04 24             	mov    DWORD PTR [esp],eax
c002367e:	e8 c3 cf fd ff       	call   c0000646 <hexCharToInt>
c0023683:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0023687:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c002368c:	0f be 44 30 03       	movsx  eax,BYTE PTR [eax+esi*1+0x3]
c0023691:	89 04 24             	mov    DWORD PTR [esp],eax
c0023694:	e8 ad cf fd ff       	call   c0000646 <hexCharToInt>
c0023699:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c002369d:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c00236a2:	0f be 44 30 04       	movsx  eax,BYTE PTR [eax+esi*1+0x4]
c00236a7:	89 04 24             	mov    DWORD PTR [esp],eax
c00236aa:	e8 97 cf fd ff       	call   c0000646 <hexCharToInt>
c00236af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00236b3:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c00236b8:	8a 44 30 06          	mov    al,BYTE PTR [eax+esi*1+0x6]
c00236bc:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00236c0:	83 c4 10             	add    esp,0x10
c00236c3:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c00236c8:	74 64                	je     c002372e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x176>
c00236ca:	83 ec 0c             	sub    esp,0xc
c00236cd:	0f be 44 24 17       	movsx  eax,BYTE PTR [esp+0x17]
c00236d2:	50                   	push   eax
c00236d3:	e8 6e cf fd ff       	call   c0000646 <hexCharToInt>
c00236d8:	0f b6 d8             	movzx  ebx,al
c00236db:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c00236e0:	c1 e3 04             	shl    ebx,0x4
c00236e3:	0f be 44 30 07       	movsx  eax,BYTE PTR [eax+esi*1+0x7]
c00236e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00236eb:	e8 56 cf fd ff       	call   c0000646 <hexCharToInt>
c00236f0:	0f b6 c0             	movzx  eax,al
c00236f3:	09 c3                	or     ebx,eax
c00236f5:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c00236fa:	c1 e3 04             	shl    ebx,0x4
c00236fd:	0f be 44 30 08       	movsx  eax,BYTE PTR [eax+esi*1+0x8]
c0023702:	89 04 24             	mov    DWORD PTR [esp],eax
c0023705:	e8 3c cf fd ff       	call   c0000646 <hexCharToInt>
c002370a:	0f b6 f8             	movzx  edi,al
c002370d:	a1 28 36 03 c0       	mov    eax,ds:0xc0033628
c0023712:	09 fb                	or     ebx,edi
c0023714:	0f be 44 30 09       	movsx  eax,BYTE PTR [eax+esi*1+0x9]
c0023719:	89 df                	mov    edi,ebx
c002371b:	89 04 24             	mov    DWORD PTR [esp],eax
c002371e:	c1 e7 04             	shl    edi,0x4
c0023721:	e8 20 cf fd ff       	call   c0000646 <hexCharToInt>
c0023726:	83 c4 10             	add    esp,0x10
c0023729:	0f b6 d8             	movzx  ebx,al
c002372c:	09 fb                	or     ebx,edi
c002372e:	8d 46 0b             	lea    eax,[esi+0xb]
c0023731:	8b 3d 28 36 03 c0    	mov    edi,DWORD PTR ds:0xc0033628
c0023737:	8b 15 24 36 03 c0    	mov    edx,DWORD PTR ds:0xc0033624
c002373d:	8d 74 24 20          	lea    esi,[esp+0x20]
c0023741:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0023744:	80 f9 0a             	cmp    cl,0xa
c0023747:	74 05                	je     c002374e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x196>
c0023749:	46                   	inc    esi
c002374a:	39 c2                	cmp    edx,eax
c002374c:	75 15                	jne    c0023763 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ab>
c002374e:	80 f9 0a             	cmp    cl,0xa
c0023751:	0f 94 c1             	sete   cl
c0023754:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c0023759:	0f b6 c9             	movzx  ecx,cl
c002375c:	8d 34 01             	lea    esi,[ecx+eax*1]
c002375f:	75 0b                	jne    c002376c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b4>
c0023761:	eb 17                	jmp    c002377a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c2>
c0023763:	40                   	inc    eax
c0023764:	88 4e ff             	mov    BYTE PTR [esi-0x1],cl
c0023767:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002376a:	eb d5                	jmp    c0023741 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x189>
c002376c:	66 39 9c 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bx
c0023774:	0f 85 d5 fe ff ff    	jne    c002364f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x97>
c002377a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002377e:	c1 e0 04             	shl    eax,0x4
c0023781:	0a 44 24 0d          	or     al,BYTE PTR [esp+0xd]
c0023785:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c002378c:	0f 85 bd fe ff ff    	jne    c002364f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x97>
c0023792:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0023796:	c1 e0 04             	shl    eax,0x4
c0023799:	0a 44 24 0f          	or     al,BYTE PTR [esp+0xf]
c002379d:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c00237a4:	0f 85 a5 fe ff ff    	jne    c002364f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x97>
c00237aa:	50                   	push   eax
c00237ab:	50                   	push   eax
c00237ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c00237b0:	50                   	push   eax
c00237b1:	55                   	push   ebp
c00237b2:	e8 7d d0 fd ff       	call   c0000834 <strcpy>
c00237b7:	83 c4 10             	add    esp,0x10
c00237ba:	eb 06                	jmp    c00237c2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x20a>
c00237bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00237c0:	31 ed                	xor    ebp,ebp
c00237c2:	81 c4 2c 01 00 00    	add    esp,0x12c
c00237c8:	89 e8                	mov    eax,ebp
c00237ca:	5b                   	pop    ebx
c00237cb:	5e                   	pop    esi
c00237cc:	5f                   	pop    edi
c00237cd:	5d                   	pop    ebp
c00237ce:	c3                   	ret    
c00237cf:	90                   	nop

c00237d0 <PCI::checkBus(unsigned char)>:
c00237d0:	56                   	push   esi
c00237d1:	53                   	push   ebx
c00237d2:	31 db                	xor    ebx,ebx
c00237d4:	51                   	push   ecx
c00237d5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237da:	52                   	push   edx
c00237db:	53                   	push   ebx
c00237dc:	43                   	inc    ebx
c00237dd:	56                   	push   esi
c00237de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00237e2:	e8 41 03 00 00       	call   c0023b28 <PCI::checkDevice(unsigned char, unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	83 fb 20             	cmp    ebx,0x20
c00237ed:	75 eb                	jne    c00237da <PCI::checkBus(unsigned char)+0xa>
c00237ef:	58                   	pop    eax
c00237f0:	5b                   	pop    ebx
c00237f1:	5e                   	pop    esi
c00237f2:	c3                   	ret    
c00237f3:	90                   	nop

c00237f4 <PCI::foundDevice(PCIDeviceInfo)>:
c00237f4:	55                   	push   ebp
c00237f5:	57                   	push   edi
c00237f6:	56                   	push   esi
c00237f7:	53                   	push   ebx
c00237f8:	83 ec 1c             	sub    esp,0x1c
c00237fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00237ff:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0023805:	0f 84 68 01 00 00    	je     c0023973 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002380b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c002380f:	66 81 f9 06 04       	cmp    cx,0x406
c0023814:	75 2c                	jne    c0023842 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0023816:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002381b:	50                   	push   eax
c002381c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023821:	50                   	push   eax
c0023822:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0023827:	50                   	push   eax
c0023828:	56                   	push   esi
c0023829:	e8 9a fc ff ff       	call   c00234c8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002382e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023832:	0f b6 c0             	movzx  eax,al
c0023835:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023839:	83 c4 2c             	add    esp,0x2c
c002383c:	5b                   	pop    ebx
c002383d:	5e                   	pop    esi
c002383e:	5f                   	pop    edi
c002383f:	5d                   	pop    ebp
c0023840:	eb 8e                	jmp    c00237d0 <PCI::checkBus(unsigned char)>
c0023842:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0023846:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002384c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023850:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023854:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023858:	88 d3                	mov    bl,dl
c002385a:	85 c0                	test   eax,eax
c002385c:	74 33                	je     c0023891 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002385e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023861:	85 d2                	test   edx,edx
c0023863:	74 28                	je     c002388d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023865:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002386b:	31 ef                	xor    edi,ebp
c002386d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023873:	75 18                	jne    c002388d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023875:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023879:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002387f:	75 0c                	jne    c002388d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023881:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023887:	0f 84 e6 00 00 00    	je     c0023973 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002388d:	8b 00                	mov    eax,DWORD PTR [eax]
c002388f:	eb c9                	jmp    c002385a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023891:	66 81 f9 01 06       	cmp    cx,0x601
c0023896:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002389a:	75 19                	jne    c00238b5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002389c:	83 ec 0c             	sub    esp,0xc
c002389f:	68 64 01 00 00       	push   0x164
c00238a4:	e8 0b c0 fe ff       	call   c000f8b4 <malloc>
c00238a9:	89 c5                	mov    ebp,eax
c00238ab:	89 04 24             	mov    DWORD PTR [esp],eax
c00238ae:	e8 ab 0f 00 00       	call   c002485e <SATABus::SATABus()>
c00238b3:	eb 1e                	jmp    c00238d3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00238b5:	66 81 f9 01 01       	cmp    cx,0x101
c00238ba:	75 60                	jne    c002391c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00238bc:	83 ec 0c             	sub    esp,0xc
c00238bf:	68 70 02 00 00       	push   0x270
c00238c4:	e8 eb bf fe ff       	call   c000f8b4 <malloc>
c00238c9:	89 c5                	mov    ebp,eax
c00238cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00238ce:	e8 19 03 00 00       	call   c0023bec <IDE::IDE()>
c00238d3:	58                   	pop    eax
c00238d4:	5a                   	pop    edx
c00238d5:	55                   	push   ebp
c00238d6:	56                   	push   esi
c00238d7:	e8 a4 09 ff ff       	call   c0014280 <Device::addChild(Device*)>
c00238dc:	83 ec 1c             	sub    esp,0x1c
c00238df:	b9 09 00 00 00       	mov    ecx,0x9
c00238e4:	fc                   	cld    
c00238e5:	89 e7                	mov    edi,esp
c00238e7:	89 de                	mov    esi,ebx
c00238e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00238eb:	55                   	push   ebp
c00238ec:	e8 ad 08 ff ff       	call   c001419e <Device::preOpenPCI(PCIDeviceInfo)>
c00238f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00238f4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00238f8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023900:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023908:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023910:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0023913:	83 c4 4c             	add    esp,0x4c
c0023916:	5b                   	pop    ebx
c0023917:	5e                   	pop    esi
c0023918:	5f                   	pop    edi
c0023919:	5d                   	pop    ebp
c002391a:	ff e0                	jmp    eax
c002391c:	50                   	push   eax
c002391d:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c0023922:	50                   	push   eax
c0023923:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0023928:	50                   	push   eax
c0023929:	68 9d d8 02 c0       	push   0xc002d89d
c002392e:	e8 2c f5 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0023933:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c002393a:	e8 75 bf fe ff       	call   c000f8b4 <malloc>
c002393f:	5a                   	pop    edx
c0023940:	89 c5                	mov    ebp,eax
c0023942:	59                   	pop    ecx
c0023943:	68 b9 d8 02 c0       	push   0xc002d8b9
c0023948:	50                   	push   eax
c0023949:	e8 28 0c ff ff       	call   c0014576 <DriverlessDevice::DriverlessDevice(char const*)>
c002394e:	5f                   	pop    edi
c002394f:	58                   	pop    eax
c0023950:	55                   	push   ebp
c0023951:	56                   	push   esi
c0023952:	e8 29 09 ff ff       	call   c0014280 <Device::addChild(Device*)>
c0023957:	b9 09 00 00 00       	mov    ecx,0x9
c002395c:	fc                   	cld    
c002395d:	89 df                	mov    edi,ebx
c002395f:	89 de                	mov    esi,ebx
c0023961:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023963:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023967:	83 c4 2c             	add    esp,0x2c
c002396a:	5b                   	pop    ebx
c002396b:	5e                   	pop    esi
c002396c:	5f                   	pop    edi
c002396d:	5d                   	pop    ebp
c002396e:	e9 2b 08 ff ff       	jmp    c001419e <Device::preOpenPCI(PCIDeviceInfo)>
c0023973:	83 c4 1c             	add    esp,0x1c
c0023976:	5b                   	pop    ebx
c0023977:	5e                   	pop    esi
c0023978:	5f                   	pop    edi
c0023979:	5d                   	pop    ebp
c002397a:	c3                   	ret    
c002397b:	90                   	nop

c002397c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002397c:	55                   	push   ebp
c002397d:	57                   	push   edi
c002397e:	56                   	push   esi
c002397f:	53                   	push   ebx
c0023980:	83 ec 5c             	sub    esp,0x5c
c0023983:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023987:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002398b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002398f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023994:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023998:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002399c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c00239a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00239a5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00239aa:	6a 0c                	push   0xc
c00239ac:	55                   	push   ebp
c00239ad:	53                   	push   ebx
c00239ae:	57                   	push   edi
c00239af:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c00239b6:	e8 d3 f9 ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00239bb:	55                   	push   ebp
c00239bc:	53                   	push   ebx
c00239bd:	57                   	push   edi
c00239be:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00239c5:	e8 52 fa ff ff       	call   c002341c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00239ca:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00239cf:	83 c4 24             	add    esp,0x24
c00239d2:	55                   	push   ebp
c00239d3:	53                   	push   ebx
c00239d4:	57                   	push   edi
c00239d5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00239d9:	e8 c8 fa ff ff       	call   c00234a6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00239de:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00239e2:	6a 3c                	push   0x3c
c00239e4:	55                   	push   ebp
c00239e5:	53                   	push   ebx
c00239e6:	57                   	push   edi
c00239e7:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00239ee:	e8 9b f9 ff ff       	call   c002338e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00239f3:	0f b6 c4             	movzx  eax,ah
c00239f6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00239fa:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00239fe:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0023a02:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0023a07:	83 c4 24             	add    esp,0x24
c0023a0a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0023a10:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023a17:	74 6c                	je     c0023a85 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023a19:	31 f6                	xor    esi,esi
c0023a1b:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023a21:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023a27:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0023a2d:	7e 56                	jle    c0023a85 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0023a2f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0023a32:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023a39:	39 cb                	cmp    ebx,ecx
c0023a3b:	75 45                	jne    c0023a82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a3d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023a44:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0023a48:	75 38                	jne    c0023a82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0023a4a:	83 ec 0c             	sub    esp,0xc
c0023a4d:	68 d3 d8 02 c0       	push   0xc002d8d3
c0023a52:	e8 08 f4 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0023a57:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023a5d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023a63:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0023a6b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0023a6f:	52                   	push   edx
c0023a70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023a74:	53                   	push   ebx
c0023a75:	68 f8 d8 02 c0       	push   0xc002d8f8
c0023a7a:	e8 e0 f3 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0023a7f:	83 c4 20             	add    esp,0x20
c0023a82:	46                   	inc    esi
c0023a83:	eb 96                	jmp    c0023a1b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023a85:	31 d2                	xor    edx,edx
c0023a87:	83 ec 0c             	sub    esp,0xc
c0023a8a:	55                   	push   ebp
c0023a8b:	53                   	push   ebx
c0023a8c:	57                   	push   edi
c0023a8d:	52                   	push   edx
c0023a8e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023a92:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023a99:	e8 4e fa ff ff       	call   c00234ec <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023a9e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023aa2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023aa6:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0023aaa:	42                   	inc    edx
c0023aab:	83 c4 20             	add    esp,0x20
c0023aae:	83 fa 06             	cmp    edx,0x6
c0023ab1:	75 d4                	jne    c0023a87 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023ab3:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023ab7:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0023abb:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023abf:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023ac3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023ac7:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0023acb:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023ad0:	86 e0                	xchg   al,ah
c0023ad2:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023ad7:	55                   	push   ebp
c0023ad8:	53                   	push   ebx
c0023ad9:	57                   	push   edi
c0023ada:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023ade:	e8 7d f9 ff ff       	call   c0023460 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023ae3:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023ae7:	55                   	push   ebp
c0023ae8:	53                   	push   ebx
c0023ae9:	57                   	push   edi
c0023aea:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023af1:	e8 e0 f8 ff ff       	call   c00233d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023af6:	83 ec 0c             	sub    esp,0xc
c0023af9:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0023afe:	b9 09 00 00 00       	mov    ecx,0x9
c0023b03:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0023b07:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0023b0b:	fc                   	cld    
c0023b0c:	89 e7                	mov    edi,esp
c0023b0e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023b10:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0023b17:	e8 d8 fc ff ff       	call   c00237f4 <PCI::foundDevice(PCIDeviceInfo)>
c0023b1c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023b22:	5b                   	pop    ebx
c0023b23:	5e                   	pop    esi
c0023b24:	5f                   	pop    edi
c0023b25:	5d                   	pop    ebp
c0023b26:	c3                   	ret    
c0023b27:	90                   	nop

c0023b28 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023b28:	55                   	push   ebp
c0023b29:	57                   	push   edi
c0023b2a:	56                   	push   esi
c0023b2b:	53                   	push   ebx
c0023b2c:	83 ec 0c             	sub    esp,0xc
c0023b2f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023b33:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023b38:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0023b3d:	6a 00                	push   0x0
c0023b3f:	56                   	push   esi
c0023b40:	57                   	push   edi
c0023b41:	55                   	push   ebp
c0023b42:	e8 8f f8 ff ff       	call   c00233d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b47:	6a 00                	push   0x0
c0023b49:	56                   	push   esi
c0023b4a:	57                   	push   edi
c0023b4b:	55                   	push   ebp
c0023b4c:	e8 2b fe ff ff       	call   c002397c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b51:	83 c4 20             	add    esp,0x20
c0023b54:	6a 00                	push   0x0
c0023b56:	56                   	push   esi
c0023b57:	57                   	push   edi
c0023b58:	55                   	push   ebp
c0023b59:	e8 9a f8 ff ff       	call   c00233f8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023b5e:	83 c4 10             	add    esp,0x10
c0023b61:	84 c0                	test   al,al
c0023b63:	79 27                	jns    c0023b8c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023b65:	bb 01 00 00 00       	mov    ebx,0x1
c0023b6a:	53                   	push   ebx
c0023b6b:	56                   	push   esi
c0023b6c:	57                   	push   edi
c0023b6d:	55                   	push   ebp
c0023b6e:	e8 63 f8 ff ff       	call   c00233d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023b73:	83 c4 10             	add    esp,0x10
c0023b76:	66 40                	inc    ax
c0023b78:	74 0c                	je     c0023b86 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023b7a:	53                   	push   ebx
c0023b7b:	56                   	push   esi
c0023b7c:	57                   	push   edi
c0023b7d:	55                   	push   ebp
c0023b7e:	e8 f9 fd ff ff       	call   c002397c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023b83:	83 c4 10             	add    esp,0x10
c0023b86:	43                   	inc    ebx
c0023b87:	83 fb 08             	cmp    ebx,0x8
c0023b8a:	75 de                	jne    c0023b6a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0023b8c:	83 c4 0c             	add    esp,0xc
c0023b8f:	5b                   	pop    ebx
c0023b90:	5e                   	pop    esi
c0023b91:	5f                   	pop    edi
c0023b92:	5d                   	pop    ebp
c0023b93:	c3                   	ret    

c0023b94 <PCI::detect()>:
c0023b94:	56                   	push   esi
c0023b95:	53                   	push   ebx
c0023b96:	53                   	push   ebx
c0023b97:	31 db                	xor    ebx,ebx
c0023b99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023b9d:	6a 00                	push   0x0
c0023b9f:	6a 00                	push   0x0
c0023ba1:	6a 00                	push   0x0
c0023ba3:	56                   	push   esi
c0023ba4:	e8 4f f8 ff ff       	call   c00233f8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023ba9:	83 c4 10             	add    esp,0x10
c0023bac:	a8 80                	test   al,0x80
c0023bae:	75 21                	jne    c0023bd1 <PCI::detect()+0x3d>
c0023bb0:	51                   	push   ecx
c0023bb1:	51                   	push   ecx
c0023bb2:	6a 00                	push   0x0
c0023bb4:	56                   	push   esi
c0023bb5:	e8 16 fc ff ff       	call   c00237d0 <PCI::checkBus(unsigned char)>
c0023bba:	83 c4 10             	add    esp,0x10
c0023bbd:	eb 24                	jmp    c0023be3 <PCI::detect()+0x4f>
c0023bbf:	52                   	push   edx
c0023bc0:	52                   	push   edx
c0023bc1:	53                   	push   ebx
c0023bc2:	43                   	inc    ebx
c0023bc3:	56                   	push   esi
c0023bc4:	e8 07 fc ff ff       	call   c00237d0 <PCI::checkBus(unsigned char)>
c0023bc9:	83 c4 10             	add    esp,0x10
c0023bcc:	83 fb 08             	cmp    ebx,0x8
c0023bcf:	74 12                	je     c0023be3 <PCI::detect()+0x4f>
c0023bd1:	53                   	push   ebx
c0023bd2:	6a 00                	push   0x0
c0023bd4:	6a 00                	push   0x0
c0023bd6:	56                   	push   esi
c0023bd7:	e8 fa f7 ff ff       	call   c00233d6 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023bdc:	83 c4 10             	add    esp,0x10
c0023bdf:	66 40                	inc    ax
c0023be1:	74 dc                	je     c0023bbf <PCI::detect()+0x2b>
c0023be3:	58                   	pop    eax
c0023be4:	5b                   	pop    ebx
c0023be5:	5e                   	pop    esi
c0023be6:	c3                   	ret    
c0023be7:	90                   	nop

c0023be8 <IDE::close(int, int, void*)>:
c0023be8:	83 c8 ff             	or     eax,0xffffffff
c0023beb:	c3                   	ret    

c0023bec <IDE::IDE()>:
c0023bec:	83 ec 0c             	sub    esp,0xc
c0023bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bf3:	83 ec 08             	sub    esp,0x8
c0023bf6:	68 40 d9 02 c0       	push   0xc002d940
c0023bfb:	50                   	push   eax
c0023bfc:	e8 19 0a ff ff       	call   c001461a <HardDiskController::HardDiskController(char const*)>
c0023c01:	83 c4 10             	add    esp,0x10
c0023c04:	ba 80 db 02 c0       	mov    edx,0xc002db80
c0023c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0d:	89 10                	mov    DWORD PTR [eax],edx
c0023c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c13:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023c1a:	90                   	nop
c0023c1b:	83 c4 0c             	add    esp,0xc
c0023c1e:	c3                   	ret    
c0023c1f:	90                   	nop

c0023c20 <IDE::prepareInterrupt(unsigned char)>:
c0023c20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023c25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023c29:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0023c31:	c3                   	ret    

c0023c32 <selectDrive(unsigned char, unsigned char)>:
c0023c32:	c3                   	ret    
c0023c33:	90                   	nop

c0023c34 <IDE::getBase(unsigned char)>:
c0023c34:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023c39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023c3d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023c45:	c3                   	ret    

c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023c46:	55                   	push   ebp
c0023c47:	57                   	push   edi
c0023c48:	56                   	push   esi
c0023c49:	53                   	push   ebx
c0023c4a:	83 ec 1c             	sub    esp,0x1c
c0023c4d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023c51:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023c55:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023c58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023c5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023c60:	80 f9 03             	cmp    cl,0x3
c0023c63:	77 51                	ja     c0023cb6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023c65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023c69:	0f b6 f2             	movzx  esi,dl
c0023c6c:	0f b6 db             	movzx  ebx,bl
c0023c6f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023c72:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023c76:	83 ca 80             	or     edx,0xffffff80
c0023c79:	0f b6 d2             	movzx  edx,dl
c0023c7c:	52                   	push   edx
c0023c7d:	6a 0c                	push   0xc
c0023c7f:	56                   	push   esi
c0023c80:	57                   	push   edi
c0023c81:	e8 c0 ff ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c86:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023c8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023c8f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023c93:	ee                   	out    dx,al
c0023c94:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023c99:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0023c9d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023ca1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ca5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023cad:	83 c4 2c             	add    esp,0x2c
c0023cb0:	5b                   	pop    ebx
c0023cb1:	5e                   	pop    esi
c0023cb2:	5f                   	pop    edi
c0023cb3:	5d                   	pop    ebp
c0023cb4:	eb 90                	jmp    c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023cb6:	80 fb 07             	cmp    bl,0x7
c0023cb9:	77 12                	ja     c0023ccd <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023cbb:	0f b6 d2             	movzx  edx,dl
c0023cbe:	0f b6 db             	movzx  ebx,bl
c0023cc1:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023cc9:	89 da                	mov    edx,ebx
c0023ccb:	eb 2f                	jmp    c0023cfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023ccd:	80 fb 0d             	cmp    bl,0xd
c0023cd0:	77 13                	ja     c0023ce5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023cd2:	0f b6 d2             	movzx  edx,dl
c0023cd5:	0f b6 db             	movzx  ebx,bl
c0023cd8:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023cdf:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023ce3:	eb 17                	jmp    c0023cfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023ce5:	80 fb 15             	cmp    bl,0x15
c0023ce8:	77 13                	ja     c0023cfd <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023cea:	0f b6 d2             	movzx  edx,dl
c0023ced:	0f b6 db             	movzx  ebx,bl
c0023cf0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023cf8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023cfc:	ee                   	out    dx,al
c0023cfd:	83 c4 1c             	add    esp,0x1c
c0023d00:	5b                   	pop    ebx
c0023d01:	5e                   	pop    esi
c0023d02:	5f                   	pop    edi
c0023d03:	5d                   	pop    ebp
c0023d04:	c3                   	ret    
c0023d05:	90                   	nop

c0023d06 <IDE::read(unsigned char, unsigned char)>:
c0023d06:	55                   	push   ebp
c0023d07:	57                   	push   edi
c0023d08:	56                   	push   esi
c0023d09:	53                   	push   ebx
c0023d0a:	83 ec 1c             	sub    esp,0x1c
c0023d0d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023d11:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023d15:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023d18:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023d1c:	3c 03                	cmp    al,0x3
c0023d1e:	77 43                	ja     c0023d63 <IDE::read(unsigned char, unsigned char)+0x5d>
c0023d20:	0f b6 f2             	movzx  esi,dl
c0023d23:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023d26:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023d2a:	83 c8 80             	or     eax,0xffffff80
c0023d2d:	0f b6 c0             	movzx  eax,al
c0023d30:	50                   	push   eax
c0023d31:	6a 0c                	push   0xc
c0023d33:	56                   	push   esi
c0023d34:	57                   	push   edi
c0023d35:	e8 0c ff ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d3a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023d3f:	0f b6 c3             	movzx  eax,bl
c0023d42:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023d46:	ec                   	in     al,dx
c0023d47:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023d4b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023d50:	52                   	push   edx
c0023d51:	6a 0c                	push   0xc
c0023d53:	56                   	push   esi
c0023d54:	57                   	push   edi
c0023d55:	e8 ec fe ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023d5a:	83 c4 20             	add    esp,0x20
c0023d5d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023d61:	eb 49                	jmp    c0023dac <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d63:	80 fb 07             	cmp    bl,0x7
c0023d66:	77 12                	ja     c0023d7a <IDE::read(unsigned char, unsigned char)+0x74>
c0023d68:	0f b6 d2             	movzx  edx,dl
c0023d6b:	0f b6 c3             	movzx  eax,bl
c0023d6e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023d76:	89 c2                	mov    edx,eax
c0023d78:	eb 31                	jmp    c0023dab <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d7a:	80 fb 0d             	cmp    bl,0xd
c0023d7d:	77 13                	ja     c0023d92 <IDE::read(unsigned char, unsigned char)+0x8c>
c0023d7f:	0f b6 d2             	movzx  edx,dl
c0023d82:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023d89:	0f b6 d3             	movzx  edx,bl
c0023d8c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023d90:	eb 19                	jmp    c0023dab <IDE::read(unsigned char, unsigned char)+0xa5>
c0023d92:	31 c0                	xor    eax,eax
c0023d94:	80 fb 15             	cmp    bl,0x15
c0023d97:	77 13                	ja     c0023dac <IDE::read(unsigned char, unsigned char)+0xa6>
c0023d99:	0f b6 d2             	movzx  edx,dl
c0023d9c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023da4:	0f b6 d3             	movzx  edx,bl
c0023da7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023dab:	ec                   	in     al,dx
c0023dac:	83 c4 1c             	add    esp,0x1c
c0023daf:	5b                   	pop    ebx
c0023db0:	5e                   	pop    esi
c0023db1:	5f                   	pop    edi
c0023db2:	5d                   	pop    ebp
c0023db3:	c3                   	ret    

c0023db4 <IDE::waitInterrupt(unsigned char)>:
c0023db4:	55                   	push   ebp
c0023db5:	57                   	push   edi
c0023db6:	56                   	push   esi
c0023db7:	53                   	push   ebx
c0023db8:	31 db                	xor    ebx,ebx
c0023dba:	83 ec 0c             	sub    esp,0xc
c0023dbd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023dc1:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023dc6:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023dce:	89 e8                	mov    eax,ebp
c0023dd0:	84 c0                	test   al,al
c0023dd2:	75 34                	jne    c0023e08 <IDE::waitInterrupt(unsigned char)+0x54>
c0023dd4:	52                   	push   edx
c0023dd5:	6a 0c                	push   0xc
c0023dd7:	56                   	push   esi
c0023dd8:	57                   	push   edi
c0023dd9:	e8 28 ff ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0023dde:	83 c4 10             	add    esp,0x10
c0023de1:	a8 01                	test   al,0x1
c0023de3:	75 2b                	jne    c0023e10 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023de5:	f6 c3 04             	test   bl,0x4
c0023de8:	75 16                	jne    c0023e00 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023dea:	83 fb 32             	cmp    ebx,0x32
c0023ded:	7e 11                	jle    c0023e00 <IDE::waitInterrupt(unsigned char)+0x4c>
c0023def:	50                   	push   eax
c0023df0:	50                   	push   eax
c0023df1:	6a 00                	push   0x0
c0023df3:	68 80 96 98 00       	push   0x989680
c0023df8:	e8 b2 ab ff ff       	call   c001e9af <nanoSleep(unsigned long long)>
c0023dfd:	83 c4 10             	add    esp,0x10
c0023e00:	83 fb 3c             	cmp    ebx,0x3c
c0023e03:	74 0b                	je     c0023e10 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023e05:	43                   	inc    ebx
c0023e06:	eb be                	jmp    c0023dc6 <IDE::waitInterrupt(unsigned char)+0x12>
c0023e08:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023e10:	83 c4 0c             	add    esp,0xc
c0023e13:	89 e8                	mov    eax,ebp
c0023e15:	5b                   	pop    ebx
c0023e16:	5e                   	pop    esi
c0023e17:	5f                   	pop    edi
c0023e18:	5d                   	pop    ebp
c0023e19:	c3                   	ret    

c0023e1a <ideChannel0IRQHandler(regs*, void*)>:
c0023e1a:	83 ec 10             	sub    esp,0x10
c0023e1d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e21:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023e28:	6a 07                	push   0x7
c0023e2a:	6a 00                	push   0x0
c0023e2c:	50                   	push   eax
c0023e2d:	e8 d4 fe ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0023e32:	83 c4 1c             	add    esp,0x1c
c0023e35:	c3                   	ret    

c0023e36 <ideChannel1IRQHandler(regs*, void*)>:
c0023e36:	83 ec 10             	sub    esp,0x10
c0023e39:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023e3d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023e44:	6a 07                	push   0x7
c0023e46:	6a 01                	push   0x1
c0023e48:	50                   	push   eax
c0023e49:	e8 b8 fe ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0023e4e:	83 c4 1c             	add    esp,0x1c
c0023e51:	c3                   	ret    

c0023e52 <IDE::enableIRQs(unsigned char, bool)>:
c0023e52:	57                   	push   edi
c0023e53:	56                   	push   esi
c0023e54:	be 04 00 00 00       	mov    esi,0x4
c0023e59:	53                   	push   ebx
c0023e5a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023e5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023e63:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023e68:	0f 94 c0             	sete   al
c0023e6b:	d1 e0                	shl    eax,1
c0023e6d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023e74:	0f b6 c0             	movzx  eax,al
c0023e77:	50                   	push   eax
c0023e78:	6a 0c                	push   0xc
c0023e7a:	57                   	push   edi
c0023e7b:	53                   	push   ebx
c0023e7c:	e8 c5 fd ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e81:	83 c4 10             	add    esp,0x10
c0023e84:	50                   	push   eax
c0023e85:	6a 0c                	push   0xc
c0023e87:	57                   	push   edi
c0023e88:	53                   	push   ebx
c0023e89:	e8 78 fe ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0023e8e:	83 c4 10             	add    esp,0x10
c0023e91:	4e                   	dec    esi
c0023e92:	75 f0                	jne    c0023e84 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023e94:	5b                   	pop    ebx
c0023e95:	5e                   	pop    esi
c0023e96:	5f                   	pop    edi
c0023e97:	c3                   	ret    

c0023e98 <IDE::open(int, int, void*)>:
c0023e98:	55                   	push   ebp
c0023e99:	57                   	push   edi
c0023e9a:	56                   	push   esi
c0023e9b:	53                   	push   ebx
c0023e9c:	83 ec 1c             	sub    esp,0x1c
c0023e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023ea3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023eac:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023eb5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023ebc:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023ec3:	0f 85 b0 02 00 00    	jne    c0024179 <IDE::open(int, int, void*)+0x2e1>
c0023ec9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023ecf:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023ed3:	83 e0 7f             	and    eax,0x7f
c0023ed6:	3c 05                	cmp    al,0x5
c0023ed8:	74 04                	je     c0023ede <IDE::open(int, int, void*)+0x46>
c0023eda:	3c 0f                	cmp    al,0xf
c0023edc:	75 32                	jne    c0023f10 <IDE::open(int, int, void*)+0x78>
c0023ede:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023ee4:	83 e0 fc             	and    eax,0xfffffffc
c0023ee7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023eee:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023ef4:	83 e0 fc             	and    eax,0xfffffffc
c0023ef7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023efe:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023f04:	83 e0 fc             	and    eax,0xfffffffc
c0023f07:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023f0e:	eb 14                	jmp    c0023f24 <IDE::open(int, int, void*)+0x8c>
c0023f10:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023f1a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023f24:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023f2b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023f32:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023f36:	89 c6                	mov    esi,eax
c0023f38:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023f3d:	c1 e6 10             	shl    esi,0x10
c0023f40:	89 e8                	mov    eax,ebp
c0023f42:	89 fa                	mov    edx,edi
c0023f44:	c1 e0 0b             	shl    eax,0xb
c0023f47:	09 f0                	or     eax,esi
c0023f49:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023f50:	c1 e6 08             	shl    esi,0x8
c0023f53:	09 c6                	or     esi,eax
c0023f55:	89 f0                	mov    eax,esi
c0023f57:	0d 08 00 00 80       	or     eax,0x80000008
c0023f5c:	ef                   	out    dx,eax
c0023f5d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023f62:	89 ca                	mov    edx,ecx
c0023f64:	ed                   	in     eax,dx
c0023f65:	c1 e8 10             	shr    eax,0x10
c0023f68:	3d ff ff 00 00       	cmp    eax,0xffff
c0023f6d:	0f 84 f5 00 00 00    	je     c0024068 <IDE::open(int, int, void*)+0x1d0>
c0023f73:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023f79:	89 fa                	mov    edx,edi
c0023f7b:	89 f0                	mov    eax,esi
c0023f7d:	ef                   	out    dx,eax
c0023f7e:	b0 fe                	mov    al,0xfe
c0023f80:	89 ca                	mov    edx,ecx
c0023f82:	ee                   	out    dx,al
c0023f83:	89 f0                	mov    eax,esi
c0023f85:	89 fa                	mov    edx,edi
c0023f87:	ef                   	out    dx,eax
c0023f88:	89 ca                	mov    edx,ecx
c0023f8a:	ed                   	in     eax,dx
c0023f8b:	3c fe                	cmp    al,0xfe
c0023f8d:	0f 85 a9 00 00 00    	jne    c002403c <IDE::open(int, int, void*)+0x1a4>
c0023f93:	8b 15 c8 f2 02 c0    	mov    edx,DWORD PTR ds:0xc002f2c8
c0023f99:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023fa0:	74 33                	je     c0023fd5 <IDE::open(int, int, void*)+0x13d>
c0023fa2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023fa8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023fac:	40                   	inc    eax
c0023fad:	83 ec 0c             	sub    esp,0xc
c0023fb0:	0f b6 c0             	movzx  eax,al
c0023fb3:	50                   	push   eax
c0023fb4:	55                   	push   ebp
c0023fb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023fb9:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023fbf:	51                   	push   ecx
c0023fc0:	e8 93 43 ff ff       	call   c0018358 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023fc5:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023fca:	83 c4 1c             	add    esp,0x1c
c0023fcd:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023fd3:	eb 0a                	jmp    c0023fdf <IDE::open(int, int, void*)+0x147>
c0023fd5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023fdf:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023fe6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023fed:	c1 e1 10             	shl    ecx,0x10
c0023ff0:	c1 e0 08             	shl    eax,0x8
c0023ff3:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023ff8:	09 c1                	or     ecx,eax
c0023ffa:	89 fa                	mov    edx,edi
c0023ffc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0024003:	c1 e0 0b             	shl    eax,0xb
c0024006:	09 c1                	or     ecx,eax
c0024008:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002400e:	89 c8                	mov    eax,ecx
c0024010:	ef                   	out    dx,eax
c0024011:	be fc 0c 00 00       	mov    esi,0xcfc
c0024016:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002401c:	89 f2                	mov    edx,esi
c002401e:	ee                   	out    dx,al
c002401f:	89 c8                	mov    eax,ecx
c0024021:	89 fa                	mov    edx,edi
c0024023:	ef                   	out    dx,eax
c0024024:	89 f2                	mov    edx,esi
c0024026:	ed                   	in     eax,dx
c0024027:	0f b6 c0             	movzx  eax,al
c002402a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0024030:	74 46                	je     c0024078 <IDE::open(int, int, void*)+0x1e0>
c0024032:	83 ec 0c             	sub    esp,0xc
c0024035:	68 58 d9 02 c0       	push   0xc002d958
c002403a:	eb 34                	jmp    c0024070 <IDE::open(int, int, void*)+0x1d8>
c002403c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0024045:	75 17                	jne    c002405e <IDE::open(int, int, void*)+0x1c6>
c0024047:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002404c:	74 07                	je     c0024055 <IDE::open(int, int, void*)+0x1bd>
c002404e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0024053:	75 09                	jne    c002405e <IDE::open(int, int, void*)+0x1c6>
c0024055:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002405c:	eb 1a                	jmp    c0024078 <IDE::open(int, int, void*)+0x1e0>
c002405e:	83 ec 0c             	sub    esp,0xc
c0024061:	68 60 d9 02 c0       	push   0xc002d960
c0024066:	eb 08                	jmp    c0024070 <IDE::open(int, int, void*)+0x1d8>
c0024068:	83 ec 0c             	sub    esp,0xc
c002406b:	68 91 d9 02 c0       	push   0xc002d991
c0024070:	e8 84 68 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0024075:	83 c4 10             	add    esp,0x10
c0024078:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c002407f:	79 1a                	jns    c002409b <IDE::open(int, int, void*)+0x203>
c0024081:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0024087:	83 e0 fc             	and    eax,0xfffffffc
c002408a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0024091:	83 c0 08             	add    eax,0x8
c0024094:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c002409b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00240a1:	89 c2                	mov    edx,eax
c00240a3:	83 e2 0f             	and    edx,0xf
c00240a6:	66 83 fa 08          	cmp    dx,0x8
c00240aa:	75 0a                	jne    c00240b6 <IDE::open(int, int, void*)+0x21e>
c00240ac:	83 e8 02             	sub    eax,0x2
c00240af:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00240b6:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c00240bc:	89 c2                	mov    edx,eax
c00240be:	83 e2 0f             	and    edx,0xf
c00240c1:	66 83 fa 08          	cmp    dx,0x8
c00240c5:	75 0a                	jne    c00240d1 <IDE::open(int, int, void*)+0x239>
c00240c7:	83 e8 02             	sub    eax,0x2
c00240ca:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00240d1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00240d8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00240df:	89 d0                	mov    eax,edx
c00240e1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00240e4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00240e8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00240ec:	8d 4a 01             	lea    ecx,[edx+0x1]
c00240ef:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00240f4:	0f b6 c9             	movzx  ecx,cl
c00240f7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00240fe:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0024101:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0024105:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0024109:	8d 50 02             	lea    edx,[eax+0x2]
c002410c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0024111:	0f b6 d2             	movzx  edx,dl
c0024114:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002411a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002411d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024121:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0024125:	8d 48 03             	lea    ecx,[eax+0x3]
c0024128:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002412d:	0f b6 c9             	movzx  ecx,cl
c0024130:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0024136:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0024139:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002413d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0024141:	8d 50 04             	lea    edx,[eax+0x4]
c0024144:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002414a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002414f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0024156:	66 85 f6             	test   si,si
c0024159:	74 3e                	je     c0024199 <IDE::open(int, int, void*)+0x301>
c002415b:	0f b6 d2             	movzx  edx,dl
c002415e:	83 c0 05             	add    eax,0x5
c0024161:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0024164:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0024168:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c002416c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0024172:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0024177:	eb 20                	jmp    c0024199 <IDE::open(int, int, void*)+0x301>
c0024179:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0024183:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002418d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0024194:	e9 02 ff ff ff       	jmp    c002409b <IDE::open(int, int, void*)+0x203>
c0024199:	52                   	push   edx
c002419a:	52                   	push   edx
c002419b:	6a 00                	push   0x0
c002419d:	53                   	push   ebx
c002419e:	e8 7d fa ff ff       	call   c0023c20 <IDE::prepareInterrupt(unsigned char)>
c00241a3:	59                   	pop    ecx
c00241a4:	5e                   	pop    esi
c00241a5:	6a 01                	push   0x1
c00241a7:	53                   	push   ebx
c00241a8:	e8 73 fa ff ff       	call   c0023c20 <IDE::prepareInterrupt(unsigned char)>
c00241ad:	83 c4 0c             	add    esp,0xc
c00241b0:	6a 00                	push   0x0
c00241b2:	6a 00                	push   0x0
c00241b4:	53                   	push   ebx
c00241b5:	e8 98 fc ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c00241ba:	83 c4 0c             	add    esp,0xc
c00241bd:	6a 00                	push   0x0
c00241bf:	6a 01                	push   0x1
c00241c1:	53                   	push   ebx
c00241c2:	e8 8b fc ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c00241c7:	83 c4 10             	add    esp,0x10
c00241ca:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00241d1:	74 40                	je     c0024213 <IDE::open(int, int, void*)+0x37b>
c00241d3:	83 ec 0c             	sub    esp,0xc
c00241d6:	68 bb d9 02 c0       	push   0xc002d9bb
c00241db:	e8 7f ec fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00241e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241e3:	6a 01                	push   0x1
c00241e5:	68 1a 3e 02 c0       	push   0xc0023e1a
c00241ea:	6a 0e                	push   0xe
c00241ec:	53                   	push   ebx
c00241ed:	e8 12 00 ff ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00241f2:	83 c4 14             	add    esp,0x14
c00241f5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00241fb:	53                   	push   ebx
c00241fc:	6a 01                	push   0x1
c00241fe:	68 36 3e 02 c0       	push   0xc0023e36
c0024203:	6a 0f                	push   0xf
c0024205:	53                   	push   ebx
c0024206:	e8 f9 ff fe ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002420b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0024211:	eb 4a                	jmp    c002425d <IDE::open(int, int, void*)+0x3c5>
c0024213:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002421d:	50                   	push   eax
c002421e:	6a 0f                	push   0xf
c0024220:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024226:	68 d7 d9 02 c0       	push   0xc002d9d7
c002422b:	e8 2f ec fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024233:	6a 00                	push   0x0
c0024235:	68 1a 3e 02 c0       	push   0xc0023e1a
c002423a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0024240:	53                   	push   ebx
c0024241:	e8 be ff fe ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024246:	83 c4 14             	add    esp,0x14
c0024249:	53                   	push   ebx
c002424a:	6a 00                	push   0x0
c002424c:	68 36 3e 02 c0       	push   0xc0023e36
c0024251:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0024257:	53                   	push   ebx
c0024258:	e8 a7 ff fe ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002425d:	8b 03                	mov    eax,DWORD PTR [ebx]
c002425f:	83 c4 20             	add    esp,0x20
c0024262:	83 ec 0c             	sub    esp,0xc
c0024265:	53                   	push   ebx
c0024266:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0024269:	83 c4 0c             	add    esp,0xc
c002426c:	6a 07                	push   0x7
c002426e:	6a 00                	push   0x0
c0024270:	53                   	push   ebx
c0024271:	e8 90 fa ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024276:	83 c4 0c             	add    esp,0xc
c0024279:	6a 07                	push   0x7
c002427b:	6a 01                	push   0x1
c002427d:	53                   	push   ebx
c002427e:	e8 83 fa ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024283:	83 c4 0c             	add    esp,0xc
c0024286:	6a 01                	push   0x1
c0024288:	6a 00                	push   0x0
c002428a:	53                   	push   ebx
c002428b:	e8 c2 fb ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c0024290:	83 c4 0c             	add    esp,0xc
c0024293:	6a 01                	push   0x1
c0024295:	6a 01                	push   0x1
c0024297:	53                   	push   ebx
c0024298:	e8 b5 fb ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c002429d:	83 c4 2c             	add    esp,0x2c
c00242a0:	31 c0                	xor    eax,eax
c00242a2:	5b                   	pop    ebx
c00242a3:	5e                   	pop    esi
c00242a4:	5f                   	pop    edi
c00242a5:	5d                   	pop    ebp
c00242a6:	c3                   	ret    
c00242a7:	90                   	nop

c00242a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00242a8:	55                   	push   ebp
c00242a9:	57                   	push   edi
c00242aa:	56                   	push   esi
c00242ab:	53                   	push   ebx
c00242ac:	83 ec 1c             	sub    esp,0x1c
c00242af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00242b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00242b7:	8d 50 f8             	lea    edx,[eax-0x8]
c00242ba:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00242be:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00242c2:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00242c6:	80 fa 03             	cmp    dl,0x3
c00242c9:	77 5d                	ja     c0024328 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00242cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00242cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00242d3:	0f b6 db             	movzx  ebx,bl
c00242d6:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00242d9:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00242dd:	83 ca 80             	or     edx,0xffffff80
c00242e0:	0f b6 d2             	movzx  edx,dl
c00242e3:	52                   	push   edx
c00242e4:	6a 0c                	push   0xc
c00242e6:	53                   	push   ebx
c00242e7:	56                   	push   esi
c00242e8:	e8 59 f9 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242ed:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00242f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00242f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00242fa:	0f b6 c0             	movzx  eax,al
c00242fd:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0024301:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0024303:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0024308:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002430c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0024310:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0024314:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002431c:	83 c4 2c             	add    esp,0x2c
c002431f:	5b                   	pop    ebx
c0024320:	5e                   	pop    esi
c0024321:	5f                   	pop    edi
c0024322:	5d                   	pop    ebp
c0024323:	e9 1e f9 ff ff       	jmp    c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024328:	3c 07                	cmp    al,0x7
c002432a:	77 10                	ja     c002433c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002432c:	0f b6 db             	movzx  ebx,bl
c002432f:	0f b6 d0             	movzx  edx,al
c0024332:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002433a:	eb 2d                	jmp    c0024369 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002433c:	3c 0d                	cmp    al,0xd
c002433e:	77 13                	ja     c0024353 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0024340:	0f b6 db             	movzx  ebx,bl
c0024343:	0f b6 c0             	movzx  eax,al
c0024346:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002434d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0024351:	eb 16                	jmp    c0024369 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0024353:	3c 15                	cmp    al,0x15
c0024355:	77 14                	ja     c002436b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0024357:	0f b6 db             	movzx  ebx,bl
c002435a:	0f b6 c0             	movzx  eax,al
c002435d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0024365:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0024369:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002436b:	83 c4 1c             	add    esp,0x1c
c002436e:	5b                   	pop    ebx
c002436f:	5e                   	pop    esi
c0024370:	5f                   	pop    edi
c0024371:	5d                   	pop    ebp
c0024372:	c3                   	ret    
c0024373:	90                   	nop

c0024374 <IDE::detect()>:
c0024374:	55                   	push   ebp
c0024375:	57                   	push   edi
c0024376:	56                   	push   esi
c0024377:	53                   	push   ebx
c0024378:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002437e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0024385:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c002438c:	0f 85 be 02 00 00    	jne    c0024650 <IDE::detect()+0x2dc>
c0024392:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0024399:	31 f6                	xor    esi,esi
c002439b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00243a3:	31 ed                	xor    ebp,ebp
c00243a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00243a9:	c1 e0 06             	shl    eax,0x6
c00243ac:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c00243b4:	89 e8                	mov    eax,ebp
c00243b6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00243ba:	c1 e0 04             	shl    eax,0x4
c00243bd:	83 c8 a0             	or     eax,0xffffffa0
c00243c0:	0f b6 c0             	movzx  eax,al
c00243c3:	50                   	push   eax
c00243c4:	6a 06                	push   0x6
c00243c6:	56                   	push   esi
c00243c7:	53                   	push   ebx
c00243c8:	e8 79 f8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243cd:	83 c4 0c             	add    esp,0xc
c00243d0:	6a 0c                	push   0xc
c00243d2:	56                   	push   esi
c00243d3:	53                   	push   ebx
c00243d4:	e8 2d f9 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c00243d9:	83 c4 0c             	add    esp,0xc
c00243dc:	6a 0c                	push   0xc
c00243de:	56                   	push   esi
c00243df:	53                   	push   ebx
c00243e0:	e8 21 f9 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c00243e5:	83 c4 0c             	add    esp,0xc
c00243e8:	6a 0c                	push   0xc
c00243ea:	56                   	push   esi
c00243eb:	53                   	push   ebx
c00243ec:	e8 15 f9 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c00243f1:	83 c4 0c             	add    esp,0xc
c00243f4:	6a 0c                	push   0xc
c00243f6:	56                   	push   esi
c00243f7:	53                   	push   ebx
c00243f8:	e8 09 f9 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c00243fd:	68 ec 00 00 00       	push   0xec
c0024402:	6a 07                	push   0x7
c0024404:	56                   	push   esi
c0024405:	53                   	push   ebx
c0024406:	e8 3b f8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002440b:	83 c4 1c             	add    esp,0x1c
c002440e:	6a 0c                	push   0xc
c0024410:	56                   	push   esi
c0024411:	53                   	push   ebx
c0024412:	e8 ef f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024417:	83 c4 0c             	add    esp,0xc
c002441a:	6a 0c                	push   0xc
c002441c:	56                   	push   esi
c002441d:	53                   	push   ebx
c002441e:	e8 e3 f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024423:	83 c4 0c             	add    esp,0xc
c0024426:	6a 0c                	push   0xc
c0024428:	56                   	push   esi
c0024429:	53                   	push   ebx
c002442a:	e8 d7 f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c002442f:	83 c4 0c             	add    esp,0xc
c0024432:	6a 0c                	push   0xc
c0024434:	56                   	push   esi
c0024435:	53                   	push   ebx
c0024436:	e8 cb f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c002443b:	83 c4 0c             	add    esp,0xc
c002443e:	6a 0c                	push   0xc
c0024440:	56                   	push   esi
c0024441:	53                   	push   ebx
c0024442:	e8 bf f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024447:	83 c4 10             	add    esp,0x10
c002444a:	84 c0                	test   al,al
c002444c:	0f 84 8b 01 00 00    	je     c00245dd <IDE::detect()+0x269>
c0024452:	31 ff                	xor    edi,edi
c0024454:	50                   	push   eax
c0024455:	6a 0c                	push   0xc
c0024457:	56                   	push   esi
c0024458:	53                   	push   ebx
c0024459:	e8 a8 f8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c002445e:	83 c4 10             	add    esp,0x10
c0024461:	a8 01                	test   al,0x1
c0024463:	0f 85 8e 01 00 00    	jne    c00245f7 <IDE::detect()+0x283>
c0024469:	84 c0                	test   al,al
c002446b:	78 04                	js     c0024471 <IDE::detect()+0xfd>
c002446d:	a8 08                	test   al,0x8
c002446f:	75 27                	jne    c0024498 <IDE::detect()+0x124>
c0024471:	47                   	inc    edi
c0024472:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024478:	7e da                	jle    c0024454 <IDE::detect()+0xe0>
c002447a:	50                   	push   eax
c002447b:	50                   	push   eax
c002447c:	6a 00                	push   0x0
c002447e:	68 40 4b 4c 00       	push   0x4c4b40
c0024483:	e8 27 a5 ff ff       	call   c001e9af <nanoSleep(unsigned long long)>
c0024488:	83 c4 10             	add    esp,0x10
c002448b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024491:	75 c1                	jne    c0024454 <IDE::detect()+0xe0>
c0024493:	e9 5f 01 00 00       	jmp    c00245f7 <IDE::detect()+0x283>
c0024498:	31 c9                	xor    ecx,ecx
c002449a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002449e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00244a2:	83 ec 0c             	sub    esp,0xc
c00244a5:	68 80 00 00 00       	push   0x80
c00244aa:	57                   	push   edi
c00244ab:	6a 00                	push   0x0
c00244ad:	56                   	push   esi
c00244ae:	53                   	push   ebx
c00244af:	e8 f4 fd ff ff       	call   c00242a8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00244b4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00244b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00244bd:	89 d1                	mov    ecx,edx
c00244bf:	c1 e0 06             	shl    eax,0x6
c00244c2:	01 d8                	add    eax,ebx
c00244c4:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00244cb:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00244d2:	89 f2                	mov    edx,esi
c00244d4:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00244da:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00244de:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00244e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244e8:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00244ef:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00244f7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00244fe:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024506:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002450c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024513:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024519:	8d 54 24 58          	lea    edx,[esp+0x58]
c002451d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0024521:	83 c4 20             	add    esp,0x20
c0024524:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024527:	83 c0 02             	add    eax,0x2
c002452a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0024530:	83 c7 02             	add    edi,0x2
c0024533:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024536:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002453c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0024540:	75 e2                	jne    c0024524 <IDE::detect()+0x1b0>
c0024542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024546:	c1 e0 06             	shl    eax,0x6
c0024549:	01 d8                	add    eax,ebx
c002454b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024551:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024558:	66 c1 ea 09          	shr    dx,0x9
c002455c:	83 e2 01             	and    edx,0x1
c002455f:	84 c9                	test   cl,cl
c0024561:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024567:	75 2f                	jne    c0024598 <IDE::detect()+0x224>
c0024569:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002456f:	85 c0                	test   eax,eax
c0024571:	74 66                	je     c00245d9 <IDE::detect()+0x265>
c0024573:	50                   	push   eax
c0024574:	55                   	push   ebp
c0024575:	56                   	push   esi
c0024576:	68 f3 d9 02 c0       	push   0xc002d9f3
c002457b:	e8 df e8 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024580:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024587:	e8 28 b3 fe ff       	call   c000f8b4 <malloc>
c002458c:	89 c7                	mov    edi,eax
c002458e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024591:	e8 78 06 00 00       	call   c0024c0e <ATA::ATA()>
c0024596:	eb 28                	jmp    c00245c0 <IDE::detect()+0x24c>
c0024598:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002459e:	55                   	push   ebp
c002459f:	56                   	push   esi
c00245a0:	68 22 da 02 c0       	push   0xc002da22
c00245a5:	e8 b5 e8 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00245aa:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00245b1:	e8 fe b2 fe ff       	call   c000f8b4 <malloc>
c00245b6:	89 c7                	mov    edi,eax
c00245b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00245bb:	e8 8e 0c 00 00       	call   c002524e <ATAPI::ATAPI()>
c00245c0:	5a                   	pop    edx
c00245c1:	59                   	pop    ecx
c00245c2:	57                   	push   edi
c00245c3:	53                   	push   ebx
c00245c4:	e8 b7 fc fe ff       	call   c0014280 <Device::addChild(Device*)>
c00245c9:	8b 07                	mov    eax,DWORD PTR [edi]
c00245cb:	53                   	push   ebx
c00245cc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00245d0:	6a 00                	push   0x0
c00245d2:	57                   	push   edi
c00245d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00245d6:	83 c4 20             	add    esp,0x20
c00245d9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00245dd:	4d                   	dec    ebp
c00245de:	74 0a                	je     c00245ea <IDE::detect()+0x276>
c00245e0:	bd 01 00 00 00       	mov    ebp,0x1
c00245e5:	e9 bb fd ff ff       	jmp    c00243a5 <IDE::detect()+0x31>
c00245ea:	4e                   	dec    esi
c00245eb:	74 63                	je     c0024650 <IDE::detect()+0x2dc>
c00245ed:	be 01 00 00 00       	mov    esi,0x1
c00245f2:	e9 ac fd ff ff       	jmp    c00243a3 <IDE::detect()+0x2f>
c00245f7:	50                   	push   eax
c00245f8:	6a 04                	push   0x4
c00245fa:	56                   	push   esi
c00245fb:	53                   	push   ebx
c00245fc:	e8 05 f7 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024601:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024605:	83 c4 0c             	add    esp,0xc
c0024608:	6a 05                	push   0x5
c002460a:	56                   	push   esi
c002460b:	53                   	push   ebx
c002460c:	e8 f5 f6 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024611:	83 c4 10             	add    esp,0x10
c0024614:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024618:	80 fa 14             	cmp    dl,0x14
c002461b:	75 04                	jne    c0024621 <IDE::detect()+0x2ad>
c002461d:	3c eb                	cmp    al,0xeb
c002461f:	eb 07                	jmp    c0024628 <IDE::detect()+0x2b4>
c0024621:	3c 96                	cmp    al,0x96
c0024623:	75 b8                	jne    c00245dd <IDE::detect()+0x269>
c0024625:	80 fa 69             	cmp    dl,0x69
c0024628:	75 b3                	jne    c00245dd <IDE::detect()+0x269>
c002462a:	68 a1 00 00 00       	push   0xa1
c002462f:	6a 07                	push   0x7
c0024631:	56                   	push   esi
c0024632:	53                   	push   ebx
c0024633:	e8 0e f6 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024638:	5f                   	pop    edi
c0024639:	58                   	pop    eax
c002463a:	6a 00                	push   0x0
c002463c:	68 40 42 0f 00       	push   0xf4240
c0024641:	e8 69 a3 ff ff       	call   c001e9af <nanoSleep(unsigned long long)>
c0024646:	83 c4 10             	add    esp,0x10
c0024649:	b1 01                	mov    cl,0x1
c002464b:	e9 4a fe ff ff       	jmp    c002449a <IDE::detect()+0x126>
c0024650:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024656:	5b                   	pop    ebx
c0024657:	5e                   	pop    esi
c0024658:	5f                   	pop    edi
c0024659:	5d                   	pop    ebp
c002465a:	c3                   	ret    
c002465b:	90                   	nop

c002465c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002465c:	55                   	push   ebp
c002465d:	57                   	push   edi
c002465e:	56                   	push   esi
c002465f:	53                   	push   ebx
c0024660:	83 ec 1c             	sub    esp,0x1c
c0024663:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024667:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002466b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002466f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024673:	88 c3                	mov    bl,al
c0024675:	84 c0                	test   al,al
c0024677:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002467b:	0f 84 67 01 00 00    	je     c00247e8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024681:	83 ec 0c             	sub    esp,0xc
c0024684:	68 53 da 02 c0       	push   0xc002da53
c0024689:	e8 d1 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c002468e:	83 c4 10             	add    esp,0x10
c0024691:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024695:	3c 01                	cmp    al,0x1
c0024697:	75 17                	jne    c00246b0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024699:	83 ec 0c             	sub    esp,0xc
c002469c:	b3 13                	mov    bl,0x13
c002469e:	68 5f da 02 c0       	push   0xc002da5f
c00246a3:	e8 b7 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00246a8:	83 c4 10             	add    esp,0x10
c00246ab:	e9 25 01 00 00       	jmp    c00247d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00246b0:	3c 02                	cmp    al,0x2
c00246b2:	0f 85 ef 00 00 00    	jne    c00247a7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00246b8:	d1 e6                	shl    esi,1
c00246ba:	09 ee                	or     esi,ebp
c00246bc:	52                   	push   edx
c00246bd:	89 f0                	mov    eax,esi
c00246bf:	6a 01                	push   0x1
c00246c1:	0f b6 f0             	movzx  esi,al
c00246c4:	c1 e6 06             	shl    esi,0x6
c00246c7:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00246cf:	50                   	push   eax
c00246d0:	57                   	push   edi
c00246d1:	e8 30 f6 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c00246d6:	83 c4 10             	add    esp,0x10
c00246d9:	89 c6                	mov    esi,eax
c00246db:	a8 01                	test   al,0x1
c00246dd:	74 12                	je     c00246f1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00246df:	83 ec 0c             	sub    esp,0xc
c00246e2:	b3 07                	mov    bl,0x7
c00246e4:	68 74 da 02 c0       	push   0xc002da74
c00246e9:	e8 71 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00246ee:	83 c4 10             	add    esp,0x10
c00246f1:	f7 c6 02 00 00 00    	test   esi,0x2
c00246f7:	74 12                	je     c002470b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00246f9:	83 ec 0c             	sub    esp,0xc
c00246fc:	b3 03                	mov    bl,0x3
c00246fe:	68 92 da 02 c0       	push   0xc002da92
c0024703:	e8 57 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024708:	83 c4 10             	add    esp,0x10
c002470b:	f7 c6 04 00 00 00    	test   esi,0x4
c0024711:	74 12                	je     c0024725 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024713:	83 ec 0c             	sub    esp,0xc
c0024716:	b3 14                	mov    bl,0x14
c0024718:	68 b2 da 02 c0       	push   0xc002dab2
c002471d:	e8 3d e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024722:	83 c4 10             	add    esp,0x10
c0024725:	f7 c6 08 00 00 00    	test   esi,0x8
c002472b:	74 12                	je     c002473f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002472d:	83 ec 0c             	sub    esp,0xc
c0024730:	b3 03                	mov    bl,0x3
c0024732:	68 92 da 02 c0       	push   0xc002da92
c0024737:	e8 23 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c002473c:	83 c4 10             	add    esp,0x10
c002473f:	f7 c6 10 00 00 00    	test   esi,0x10
c0024745:	74 12                	je     c0024759 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024747:	83 ec 0c             	sub    esp,0xc
c002474a:	b3 15                	mov    bl,0x15
c002474c:	68 ca da 02 c0       	push   0xc002daca
c0024751:	e8 09 e7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024756:	83 c4 10             	add    esp,0x10
c0024759:	f7 c6 20 00 00 00    	test   esi,0x20
c002475f:	74 12                	je     c0024773 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024761:	83 ec 0c             	sub    esp,0xc
c0024764:	b3 03                	mov    bl,0x3
c0024766:	68 92 da 02 c0       	push   0xc002da92
c002476b:	e8 ef e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024770:	83 c4 10             	add    esp,0x10
c0024773:	f7 c6 40 00 00 00    	test   esi,0x40
c0024779:	74 12                	je     c002478d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002477b:	83 ec 0c             	sub    esp,0xc
c002477e:	b3 16                	mov    bl,0x16
c0024780:	68 e4 da 02 c0       	push   0xc002dae4
c0024785:	e8 d5 e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c002478a:	83 c4 10             	add    esp,0x10
c002478d:	89 f0                	mov    eax,esi
c002478f:	84 c0                	test   al,al
c0024791:	79 42                	jns    c00247d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024793:	83 ec 0c             	sub    esp,0xc
c0024796:	b3 0d                	mov    bl,0xd
c0024798:	68 05 db 02 c0       	push   0xc002db05
c002479d:	e8 bd e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	eb 2e                	jmp    c00247d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00247a7:	3c 03                	cmp    al,0x3
c00247a9:	75 14                	jne    c00247bf <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00247ab:	83 ec 0c             	sub    esp,0xc
c00247ae:	b3 17                	mov    bl,0x17
c00247b0:	68 19 db 02 c0       	push   0xc002db19
c00247b5:	e8 a5 e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00247ba:	83 c4 10             	add    esp,0x10
c00247bd:	eb 16                	jmp    c00247d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00247bf:	3c 04                	cmp    al,0x4
c00247c1:	75 12                	jne    c00247d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00247c3:	83 ec 0c             	sub    esp,0xc
c00247c6:	b3 08                	mov    bl,0x8
c00247c8:	68 2f db 02 c0       	push   0xc002db2f
c00247cd:	e8 8d e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00247d2:	83 c4 10             	add    esp,0x10
c00247d5:	50                   	push   eax
c00247d6:	50                   	push   eax
c00247d7:	0f b6 c3             	movzx  eax,bl
c00247da:	50                   	push   eax
c00247db:	68 47 db 02 c0       	push   0xc002db47
c00247e0:	e8 7a e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00247e5:	83 c4 10             	add    esp,0x10
c00247e8:	83 c4 1c             	add    esp,0x1c
c00247eb:	88 d8                	mov    al,bl
c00247ed:	5b                   	pop    ebx
c00247ee:	5e                   	pop    esi
c00247ef:	5f                   	pop    edi
c00247f0:	5d                   	pop    ebp
c00247f1:	c3                   	ret    

c00247f2 <IDE::polling(unsigned char, unsigned int)>:
c00247f2:	57                   	push   edi
c00247f3:	56                   	push   esi
c00247f4:	53                   	push   ebx
c00247f5:	bb 04 00 00 00       	mov    ebx,0x4
c00247fa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00247fe:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024803:	52                   	push   edx
c0024804:	6a 0c                	push   0xc
c0024806:	56                   	push   esi
c0024807:	57                   	push   edi
c0024808:	e8 f9 f4 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c002480d:	83 c4 10             	add    esp,0x10
c0024810:	4b                   	dec    ebx
c0024811:	75 f0                	jne    c0024803 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024813:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024818:	50                   	push   eax
c0024819:	6a 0c                	push   0xc
c002481b:	56                   	push   esi
c002481c:	57                   	push   edi
c002481d:	e8 e4 f4 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024822:	83 c4 10             	add    esp,0x10
c0024825:	a8 01                	test   al,0x1
c0024827:	74 12                	je     c002483b <IDE::polling(unsigned char, unsigned int)+0x49>
c0024829:	83 ec 0c             	sub    esp,0xc
c002482c:	68 61 db 02 c0       	push   0xc002db61
c0024831:	e8 29 e6 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024836:	83 c4 10             	add    esp,0x10
c0024839:	eb 17                	jmp    c0024852 <IDE::polling(unsigned char, unsigned int)+0x60>
c002483b:	a8 20                	test   al,0x20
c002483d:	75 0f                	jne    c002484e <IDE::polling(unsigned char, unsigned int)+0x5c>
c002483f:	4b                   	dec    ebx
c0024840:	74 10                	je     c0024852 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024842:	84 c0                	test   al,al
c0024844:	78 d2                	js     c0024818 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024846:	a8 08                	test   al,0x8
c0024848:	74 ce                	je     c0024818 <IDE::polling(unsigned char, unsigned int)+0x26>
c002484a:	31 c0                	xor    eax,eax
c002484c:	eb 06                	jmp    c0024854 <IDE::polling(unsigned char, unsigned int)+0x62>
c002484e:	b0 01                	mov    al,0x1
c0024850:	eb 02                	jmp    c0024854 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024852:	b0 02                	mov    al,0x2
c0024854:	5b                   	pop    ebx
c0024855:	5e                   	pop    esi
c0024856:	5f                   	pop    edi
c0024857:	c3                   	ret    

c0024858 <SATABus::close(int, int, void*)>:
c0024858:	31 c0                	xor    eax,eax
c002485a:	c3                   	ret    
c002485b:	90                   	nop

c002485c <SATABus::detect()>:
c002485c:	c3                   	ret    
c002485d:	90                   	nop

c002485e <SATABus::SATABus()>:
c002485e:	83 ec 0c             	sub    esp,0xc
c0024861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024865:	83 ec 08             	sub    esp,0x8
c0024868:	68 a4 db 02 c0       	push   0xc002dba4
c002486d:	50                   	push   eax
c002486e:	e8 a7 fd fe ff       	call   c001461a <HardDiskController::HardDiskController(char const*)>
c0024873:	83 c4 10             	add    esp,0x10
c0024876:	ba 60 dc 02 c0       	mov    edx,0xc002dc60
c002487b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002487f:	89 10                	mov    DWORD PTR [eax],edx
c0024881:	83 ec 0c             	sub    esp,0xc
c0024884:	6a 50                	push   0x50
c0024886:	e8 7a b7 fe ff       	call   c0010005 <Phys::allocateContiguousPages(int)>
c002488b:	83 c4 10             	add    esp,0x10
c002488e:	89 c2                	mov    edx,eax
c0024890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024894:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002489a:	83 ec 0c             	sub    esp,0xc
c002489d:	6a 50                	push   0x50
c002489f:	e8 b5 d1 fe ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c00248a4:	83 c4 10             	add    esp,0x10
c00248a7:	89 c2                	mov    edx,eax
c00248a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ad:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00248b3:	a1 50 f4 02 c0       	mov    eax,ds:0xc002f450
c00248b8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00248bc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00248c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00248c6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00248cc:	83 ec 0c             	sub    esp,0xc
c00248cf:	6a 03                	push   0x3
c00248d1:	6a 50                	push   0x50
c00248d3:	51                   	push   ecx
c00248d4:	52                   	push   edx
c00248d5:	50                   	push   eax
c00248d6:	e8 ab dc fe ff       	call   c0012586 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00248db:	83 c4 20             	add    esp,0x20
c00248de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e2:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00248e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00248f2:	83 ec 04             	sub    esp,0x4
c00248f5:	52                   	push   edx
c00248f6:	50                   	push   eax
c00248f7:	68 c8 db 02 c0       	push   0xc002dbc8
c00248fc:	e8 5e e5 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024901:	83 c4 10             	add    esp,0x10
c0024904:	90                   	nop
c0024905:	83 c4 0c             	add    esp,0xc
c0024908:	c3                   	ret    
c0024909:	90                   	nop

c002490a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c002490a:	83 ec 0c             	sub    esp,0xc
c002490d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024911:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024914:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024917:	09 c2                	or     edx,eax
c0024919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024923:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024925:	31 c0                	xor    eax,eax
c0024927:	c1 e9 08             	shr    ecx,0x8
c002492a:	83 e1 0f             	and    ecx,0xf
c002492d:	39 c8                	cmp    eax,ecx
c002492f:	74 0a                	je     c002493b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0024931:	f6 c2 01             	test   dl,0x1
c0024934:	74 18                	je     c002494e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024936:	d1 ea                	shr    edx,1
c0024938:	40                   	inc    eax
c0024939:	eb f2                	jmp    c002492d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c002493b:	83 ec 0c             	sub    esp,0xc
c002493e:	68 ec db 02 c0       	push   0xc002dbec
c0024943:	e8 b1 5f ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0024948:	83 c4 10             	add    esp,0x10
c002494b:	83 c8 ff             	or     eax,0xffffffff
c002494e:	83 c4 0c             	add    esp,0xc
c0024951:	c3                   	ret    

c0024952 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024952:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024956:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024959:	89 c2                	mov    edx,eax
c002495b:	c1 ea 08             	shr    edx,0x8
c002495e:	83 e2 0f             	and    edx,0xf
c0024961:	fe ca                	dec    dl
c0024963:	75 31                	jne    c0024996 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024965:	83 e0 0f             	and    eax,0xf
c0024968:	3c 03                	cmp    al,0x3
c002496a:	75 2a                	jne    c0024996 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002496c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002496f:	b8 02 00 00 00       	mov    eax,0x2
c0024974:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002497a:	74 1c                	je     c0024998 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002497c:	b8 04 00 00 00       	mov    eax,0x4
c0024981:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024987:	74 0f                	je     c0024998 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024989:	31 c0                	xor    eax,eax
c002498b:	83 fa 03             	cmp    edx,0x3
c002498e:	0f 94 c0             	sete   al
c0024991:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024995:	c3                   	ret    
c0024996:	31 c0                	xor    eax,eax
c0024998:	c3                   	ret    
c0024999:	90                   	nop

c002499a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002499a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002499e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249a1:	0f ba e2 0f          	bt     edx,0xf
c00249a5:	72 f7                	jb     c002499e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00249a7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249aa:	83 ca 10             	or     edx,0x10
c00249ad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249b0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249b3:	83 ca 01             	or     edx,0x1
c00249b6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249b9:	c3                   	ret    

c00249ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00249ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00249be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249c1:	83 e2 fe             	and    edx,0xfffffffe
c00249c4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249ca:	83 e2 ef             	and    edx,0xffffffef
c00249cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00249d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249d3:	0f ba e2 0e          	bt     edx,0xe
c00249d7:	72 f7                	jb     c00249d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249d9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00249dc:	0f ba e2 0f          	bt     edx,0xf
c00249e0:	72 ee                	jb     c00249d0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00249e2:	c3                   	ret    
c00249e3:	90                   	nop

c00249e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00249e4:	55                   	push   ebp
c00249e5:	57                   	push   edi
c00249e6:	56                   	push   esi
c00249e7:	53                   	push   ebx
c00249e8:	83 ec 1c             	sub    esp,0x1c
c00249eb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00249ef:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00249f3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00249f7:	53                   	push   ebx
c00249f8:	89 fd                	mov    ebp,edi
c00249fa:	56                   	push   esi
c00249fb:	c1 e5 0a             	shl    ebp,0xa
c00249fe:	e8 b7 ff ff ff       	call   c00249ba <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024a03:	83 ec 0c             	sub    esp,0xc
c0024a06:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0024a0c:	01 e8                	add    eax,ebp
c0024a0e:	89 03                	mov    DWORD PTR [ebx],eax
c0024a10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024a12:	68 00 04 00 00       	push   0x400
c0024a17:	6a 00                	push   0x0
c0024a19:	50                   	push   eax
c0024a1a:	e8 59 bd fd ff       	call   c0000778 <memset>
c0024a1f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024a25:	89 fa                	mov    edx,edi
c0024a27:	01 e8                	add    eax,ebp
c0024a29:	c1 e7 0d             	shl    edi,0xd
c0024a2c:	89 03                	mov    DWORD PTR [ebx],eax
c0024a2e:	c1 e2 08             	shl    edx,0x8
c0024a31:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024a38:	81 c2 00 80 00 00    	add    edx,0x8000
c0024a3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024a42:	89 d0                	mov    eax,edx
c0024a44:	83 c4 1c             	add    esp,0x1c
c0024a47:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a4d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024a50:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024a53:	68 00 01 00 00       	push   0x100
c0024a58:	6a 00                	push   0x0
c0024a5a:	50                   	push   eax
c0024a5b:	e8 18 bd fd ff       	call   c0000778 <memset>
c0024a60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024a64:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024a6a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024a70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024a74:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024a77:	83 c4 10             	add    esp,0x10
c0024a7a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024a81:	31 ff                	xor    edi,edi
c0024a83:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024a89:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0024a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024a93:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024a99:	83 c5 20             	add    ebp,0x20
c0024a9c:	01 f8                	add    eax,edi
c0024a9e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024aa1:	52                   	push   edx
c0024aa2:	68 00 01 00 00       	push   0x100
c0024aa7:	6a 00                	push   0x0
c0024aa9:	50                   	push   eax
c0024aaa:	e8 c9 bc fd ff       	call   c0000778 <memset>
c0024aaf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ab3:	83 c4 10             	add    esp,0x10
c0024ab6:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0024abc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024ac3:	01 f8                	add    eax,edi
c0024ac5:	81 c7 00 01 00 00    	add    edi,0x100
c0024acb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024ace:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024ad4:	75 b3                	jne    c0024a89 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024ad6:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0024ada:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0024ade:	83 c4 1c             	add    esp,0x1c
c0024ae1:	5b                   	pop    ebx
c0024ae2:	5e                   	pop    esi
c0024ae3:	5f                   	pop    edi
c0024ae4:	5d                   	pop    ebp
c0024ae5:	e9 b0 fe ff ff       	jmp    c002499a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0024aea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0024aea:	55                   	push   ebp
c0024aeb:	57                   	push   edi
c0024aec:	56                   	push   esi
c0024aed:	53                   	push   ebx
c0024aee:	31 db                	xor    ebx,ebx
c0024af0:	83 ec 0c             	sub    esp,0xc
c0024af3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0024af7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024afb:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0024afe:	f7 c7 01 00 00 00    	test   edi,0x1
c0024b04:	0f 84 aa 00 00 00    	je     c0024bb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024b0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024b0e:	89 d8                	mov    eax,ebx
c0024b10:	c1 e0 07             	shl    eax,0x7
c0024b13:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024b1a:	55                   	push   ebp
c0024b1b:	56                   	push   esi
c0024b1c:	e8 31 fe ff ff       	call   c0024952 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0024b21:	5a                   	pop    edx
c0024b22:	83 f8 01             	cmp    eax,0x1
c0024b25:	59                   	pop    ecx
c0024b26:	75 30                	jne    c0024b58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024b28:	50                   	push   eax
c0024b29:	50                   	push   eax
c0024b2a:	53                   	push   ebx
c0024b2b:	68 11 dc 02 c0       	push   0xc002dc11
c0024b30:	e8 2a e3 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024b35:	83 c4 0c             	add    esp,0xc
c0024b38:	53                   	push   ebx
c0024b39:	55                   	push   ebp
c0024b3a:	56                   	push   esi
c0024b3b:	e8 a4 fe ff ff       	call   c00249e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b40:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024b47:	e8 68 ad fe ff       	call   c000f8b4 <malloc>
c0024b4c:	89 c5                	mov    ebp,eax
c0024b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b51:	e8 5c 0d 00 00       	call   c00258b2 <SATA::SATA()>
c0024b56:	eb 33                	jmp    c0024b8b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024b58:	83 f8 04             	cmp    eax,0x4
c0024b5b:	75 47                	jne    c0024ba4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0024b5d:	50                   	push   eax
c0024b5e:	50                   	push   eax
c0024b5f:	53                   	push   ebx
c0024b60:	68 28 dc 02 c0       	push   0xc002dc28
c0024b65:	e8 f5 e2 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024b6a:	83 c4 0c             	add    esp,0xc
c0024b6d:	53                   	push   ebx
c0024b6e:	55                   	push   ebp
c0024b6f:	56                   	push   esi
c0024b70:	e8 6f fe ff ff       	call   c00249e4 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024b75:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024b7c:	e8 33 ad fe ff       	call   c000f8b4 <malloc>
c0024b81:	89 c5                	mov    ebp,eax
c0024b83:	89 04 24             	mov    DWORD PTR [esp],eax
c0024b86:	e8 d3 10 00 00       	call   c0025c5e <SATAPI::SATAPI()>
c0024b8b:	5a                   	pop    edx
c0024b8c:	59                   	pop    ecx
c0024b8d:	55                   	push   ebp
c0024b8e:	56                   	push   esi
c0024b8f:	e8 ec f6 fe ff       	call   c0014280 <Device::addChild(Device*)>
c0024b94:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024b97:	56                   	push   esi
c0024b98:	6a 00                	push   0x0
c0024b9a:	53                   	push   ebx
c0024b9b:	55                   	push   ebp
c0024b9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024b9f:	83 c4 20             	add    esp,0x20
c0024ba2:	eb 10                	jmp    c0024bb4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024ba4:	50                   	push   eax
c0024ba5:	50                   	push   eax
c0024ba6:	53                   	push   ebx
c0024ba7:	68 41 dc 02 c0       	push   0xc002dc41
c0024bac:	e8 ae e2 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024bb1:	83 c4 10             	add    esp,0x10
c0024bb4:	d1 ef                	shr    edi,1
c0024bb6:	43                   	inc    ebx
c0024bb7:	83 fb 20             	cmp    ebx,0x20
c0024bba:	0f 85 3e ff ff ff    	jne    c0024afe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024bc0:	83 c4 0c             	add    esp,0xc
c0024bc3:	5b                   	pop    ebx
c0024bc4:	5e                   	pop    esi
c0024bc5:	5f                   	pop    edi
c0024bc6:	5d                   	pop    ebp
c0024bc7:	c3                   	ret    

c0024bc8 <SATABus::open(int, int, void*)>:
c0024bc8:	83 ec 14             	sub    esp,0x14
c0024bcb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024bcf:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024bd5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024bdb:	52                   	push   edx
c0024bdc:	50                   	push   eax
c0024bdd:	e8 08 ff ff ff       	call   c0024aea <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024be2:	31 c0                	xor    eax,eax
c0024be4:	83 c4 1c             	add    esp,0x1c
c0024be7:	c3                   	ret    

c0024be8 <ATA::close(int, int, void*)>:
c0024be8:	83 ec 0c             	sub    esp,0xc
c0024beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024bef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024bf5:	85 c0                	test   eax,eax
c0024bf7:	74 0c                	je     c0024c05 <ATA::close(int, int, void*)+0x1d>
c0024bf9:	83 ec 0c             	sub    esp,0xc
c0024bfc:	8b 10                	mov    edx,DWORD PTR [eax]
c0024bfe:	50                   	push   eax
c0024bff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c02:	83 c4 10             	add    esp,0x10
c0024c05:	31 c0                	xor    eax,eax
c0024c07:	83 c4 0c             	add    esp,0xc
c0024c0a:	c3                   	ret    
c0024c0b:	90                   	nop

c0024c0c <ATA::powerSaving(PowerSavingLevel)>:
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <ATA::ATA()>:
c0024c0e:	83 ec 0c             	sub    esp,0xc
c0024c11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c15:	83 ec 04             	sub    esp,0x4
c0024c18:	68 00 02 00 00       	push   0x200
c0024c1d:	68 29 dd 02 c0       	push   0xc002dd29
c0024c22:	50                   	push   eax
c0024c23:	e8 8a fa fe ff       	call   c00146b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c28:	83 c4 10             	add    esp,0x10
c0024c2b:	ba ac dc 02 c0       	mov    edx,0xc002dcac
c0024c30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c34:	89 10                	mov    DWORD PTR [eax],edx
c0024c36:	90                   	nop
c0024c37:	83 c4 0c             	add    esp,0xc
c0024c3a:	c3                   	ret    
c0024c3b:	90                   	nop

c0024c3c <ATA::flush(bool)>:
c0024c3c:	53                   	push   ebx
c0024c3d:	83 ec 08             	sub    esp,0x8
c0024c40:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024c45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c49:	19 c0                	sbb    eax,eax
c0024c4b:	83 e0 fd             	and    eax,0xfffffffd
c0024c4e:	05 ea 00 00 00       	add    eax,0xea
c0024c53:	50                   	push   eax
c0024c54:	6a 07                	push   0x7
c0024c56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c5d:	50                   	push   eax
c0024c5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c64:	e8 dd ef ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024c69:	83 c4 0c             	add    esp,0xc
c0024c6c:	6a 00                	push   0x0
c0024c6e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024c75:	50                   	push   eax
c0024c76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c7c:	e8 71 fb ff ff       	call   c00247f2 <IDE::polling(unsigned char, unsigned int)>
c0024c81:	83 c4 18             	add    esp,0x18
c0024c84:	5b                   	pop    ebx
c0024c85:	c3                   	ret    

c0024c86 <ATA::readyForCommand()>:
c0024c86:	56                   	push   esi
c0024c87:	53                   	push   ebx
c0024c88:	31 db                	xor    ebx,ebx
c0024c8a:	50                   	push   eax
c0024c8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024c8f:	50                   	push   eax
c0024c90:	6a 0c                	push   0xc
c0024c92:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024c99:	50                   	push   eax
c0024c9a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024ca0:	e8 61 f0 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0024ca5:	83 c4 10             	add    esp,0x10
c0024ca8:	a8 88                	test   al,0x88
c0024caa:	74 23                	je     c0024ccf <ATA::readyForCommand()+0x49>
c0024cac:	43                   	inc    ebx
c0024cad:	83 fb 63             	cmp    ebx,0x63
c0024cb0:	7e dd                	jle    c0024c8f <ATA::readyForCommand()+0x9>
c0024cb2:	51                   	push   ecx
c0024cb3:	51                   	push   ecx
c0024cb4:	6a 00                	push   0x0
c0024cb6:	68 40 42 0f 00       	push   0xf4240
c0024cbb:	e8 ef 9c ff ff       	call   c001e9af <nanoSleep(unsigned long long)>
c0024cc0:	83 c4 10             	add    esp,0x10
c0024cc3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024cc9:	75 c4                	jne    c0024c8f <ATA::readyForCommand()+0x9>
c0024ccb:	31 c0                	xor    eax,eax
c0024ccd:	eb 02                	jmp    c0024cd1 <ATA::readyForCommand()+0x4b>
c0024ccf:	b0 01                	mov    al,0x1
c0024cd1:	5a                   	pop    edx
c0024cd2:	5b                   	pop    ebx
c0024cd3:	5e                   	pop    esi
c0024cd4:	c3                   	ret    
c0024cd5:	90                   	nop

c0024cd6 <ATA::access(unsigned long long, int, void*, bool)>:
c0024cd6:	55                   	push   ebp
c0024cd7:	57                   	push   edi
c0024cd8:	56                   	push   esi
c0024cd9:	53                   	push   ebx
c0024cda:	83 ec 2c             	sub    esp,0x2c
c0024cdd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024ce1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024ce5:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024ce9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024ced:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0024cf1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0024cf5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024cf9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024cff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d03:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024d0d:	c1 e0 06             	shl    eax,0x6
c0024d10:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024d18:	74 5d                	je     c0024d77 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024d1a:	89 fa                	mov    edx,edi
c0024d1c:	89 f0                	mov    eax,esi
c0024d1e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024d22:	c1 ea 1c             	shr    edx,0x1c
c0024d25:	89 d1                	mov    ecx,edx
c0024d27:	09 c1                	or     ecx,eax
c0024d29:	74 25                	je     c0024d50 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024d2b:	31 ed                	xor    ebp,ebp
c0024d2d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024d34:	89 fa                	mov    edx,edi
c0024d36:	89 f0                	mov    eax,esi
c0024d38:	0f ad d0             	shrd   eax,edx,cl
c0024d3b:	d3 ea                	shr    edx,cl
c0024d3d:	f6 c1 20             	test   cl,0x20
c0024d40:	74 02                	je     c0024d44 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024d42:	89 d0                	mov    eax,edx
c0024d44:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024d48:	45                   	inc    ebp
c0024d49:	83 fd 06             	cmp    ebp,0x6
c0024d4c:	75 df                	jne    c0024d2d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0024d4e:	eb 76                	jmp    c0024dc6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024d50:	89 f0                	mov    eax,esi
c0024d52:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024d57:	89 fa                	mov    edx,edi
c0024d59:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024d60:	0f ac d0 10          	shrd   eax,edx,0x10
c0024d64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024d69:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0024d6d:	c1 ee 18             	shr    esi,0x18
c0024d70:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024d75:	eb 56                	jmp    c0024dcd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024d77:	6a 00                	push   0x0
c0024d79:	6a 3f                	push   0x3f
c0024d7b:	57                   	push   edi
c0024d7c:	56                   	push   esi
c0024d7d:	e8 92 29 00 00       	call   c0027714 <__umoddi3>
c0024d82:	83 c4 10             	add    esp,0x10
c0024d85:	40                   	inc    eax
c0024d86:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024d8a:	6a 00                	push   0x0
c0024d8c:	68 f0 03 00 00       	push   0x3f0
c0024d91:	57                   	push   edi
c0024d92:	56                   	push   esi
c0024d93:	e8 7c 28 00 00       	call   c0027614 <__udivdi3>
c0024d98:	83 c4 10             	add    esp,0x10
c0024d9b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024da0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024da7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024dac:	6a 00                	push   0x0
c0024dae:	6a 3f                	push   0x3f
c0024db0:	57                   	push   edi
c0024db1:	56                   	push   esi
c0024db2:	e8 5d 28 00 00       	call   c0027614 <__udivdi3>
c0024db7:	83 c4 10             	add    esp,0x10
c0024dba:	89 c6                	mov    esi,eax
c0024dbc:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024dc1:	83 e6 0f             	and    esi,0xf
c0024dc4:	eb 07                	jmp    c0024dcd <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024dc6:	31 f6                	xor    esi,esi
c0024dc8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024dcd:	bf 01 00 00 00       	mov    edi,0x1
c0024dd2:	50                   	push   eax
c0024dd3:	6a 00                	push   0x0
c0024dd5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ddc:	50                   	push   eax
c0024ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024de1:	e8 6c f0 ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c0024de6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024de9:	e8 98 fe ff ff       	call   c0024c86 <ATA::readyForCommand()>
c0024dee:	83 c4 10             	add    esp,0x10
c0024df1:	84 c0                	test   al,al
c0024df3:	0f 84 5a 02 00 00    	je     c0025053 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024df9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024dff:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024e05:	c1 e0 04             	shl    eax,0x4
c0024e08:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024e0f:	09 c6                	or     esi,eax
c0024e11:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024e16:	75 05                	jne    c0024e1d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024e18:	83 ce a0             	or     esi,0xffffffa0
c0024e1b:	eb 03                	jmp    c0024e20 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024e1d:	83 ce e0             	or     esi,0xffffffe0
c0024e20:	89 f0                	mov    eax,esi
c0024e22:	0f b6 f0             	movzx  esi,al
c0024e25:	56                   	push   esi
c0024e26:	6a 06                	push   0x6
c0024e28:	51                   	push   ecx
c0024e29:	52                   	push   edx
c0024e2a:	e8 17 ee ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e2f:	83 c4 10             	add    esp,0x10
c0024e32:	6a 00                	push   0x0
c0024e34:	6a 01                	push   0x1
c0024e36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e3d:	50                   	push   eax
c0024e3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e44:	e8 fd ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e49:	83 c4 10             	add    esp,0x10
c0024e4c:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024e51:	75 6e                	jne    c0024ec1 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024e53:	6a 00                	push   0x0
c0024e55:	6a 08                	push   0x8
c0024e57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e5e:	50                   	push   eax
c0024e5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e65:	e8 dc ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e6a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024e6f:	50                   	push   eax
c0024e70:	6a 09                	push   0x9
c0024e72:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e79:	50                   	push   eax
c0024e7a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e80:	e8 c1 ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024e85:	83 c4 20             	add    esp,0x20
c0024e88:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024e8d:	50                   	push   eax
c0024e8e:	6a 0a                	push   0xa
c0024e90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024e97:	50                   	push   eax
c0024e98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024e9e:	e8 a3 ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ea3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024ea8:	50                   	push   eax
c0024ea9:	6a 0b                	push   0xb
c0024eab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024eb2:	50                   	push   eax
c0024eb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024eb9:	e8 88 ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ebe:	83 c4 20             	add    esp,0x20
c0024ec1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024ec6:	50                   	push   eax
c0024ec7:	6a 02                	push   0x2
c0024ec9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ed0:	50                   	push   eax
c0024ed1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ed7:	e8 6a ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024edc:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024ee1:	50                   	push   eax
c0024ee2:	6a 03                	push   0x3
c0024ee4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024eeb:	50                   	push   eax
c0024eec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ef2:	e8 4f ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ef7:	83 c4 20             	add    esp,0x20
c0024efa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024eff:	50                   	push   eax
c0024f00:	6a 04                	push   0x4
c0024f02:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f09:	50                   	push   eax
c0024f0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f10:	e8 31 ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f15:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024f1a:	50                   	push   eax
c0024f1b:	6a 05                	push   0x5
c0024f1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f24:	50                   	push   eax
c0024f25:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f2b:	e8 16 ed ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f30:	83 c4 20             	add    esp,0x20
c0024f33:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024f38:	0f 94 c0             	sete   al
c0024f3b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024f40:	74 09                	je     c0024f4b <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024f42:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024f49:	eb 07                	jmp    c0024f52 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024f4b:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024f52:	0f b6 c0             	movzx  eax,al
c0024f55:	50                   	push   eax
c0024f56:	6a 07                	push   0x7
c0024f58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f5f:	50                   	push   eax
c0024f60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f66:	e8 db ec ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f6b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024f6f:	83 c4 10             	add    esp,0x10
c0024f72:	85 f6                	test   esi,esi
c0024f74:	0f 84 ba 00 00 00    	je     c0025034 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024f7a:	50                   	push   eax
c0024f7b:	6a 01                	push   0x1
c0024f7d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024f84:	50                   	push   eax
c0024f85:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024f8b:	e8 62 f8 ff ff       	call   c00247f2 <IDE::polling(unsigned char, unsigned int)>
c0024f90:	83 c4 10             	add    esp,0x10
c0024f93:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024f99:	84 c0                	test   al,al
c0024f9b:	74 2c                	je     c0024fc9 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024f9d:	0f b6 f8             	movzx  edi,al
c0024fa0:	0f b6 d2             	movzx  edx,dl
c0024fa3:	57                   	push   edi
c0024fa4:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024fab:	50                   	push   eax
c0024fac:	52                   	push   edx
c0024fad:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fb3:	e8 a4 f6 ff ff       	call   c002465c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024fb8:	c7 04 24 84 dc 02 c0 	mov    DWORD PTR [esp],0xc002dc84
c0024fbf:	e8 9b de fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0024fc4:	e9 87 00 00 00       	jmp    c0025050 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024fc9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024fce:	74 33                	je     c0025003 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024fd0:	31 ed                	xor    ebp,ebp
c0024fd2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024fd6:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024fda:	50                   	push   eax
c0024fdb:	50                   	push   eax
c0024fdc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024fe3:	50                   	push   eax
c0024fe4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024fea:	e8 45 ec ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c0024fef:	89 c2                	mov    edx,eax
c0024ff1:	89 f8                	mov    eax,edi
c0024ff3:	66 ef                	out    dx,ax
c0024ff5:	45                   	inc    ebp
c0024ff6:	83 c4 10             	add    esp,0x10
c0024ff9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024fff:	75 d1                	jne    c0024fd2 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0025001:	eb 23                	jmp    c0025026 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0025003:	0f b6 d2             	movzx  edx,dl
c0025006:	51                   	push   ecx
c0025007:	51                   	push   ecx
c0025008:	52                   	push   edx
c0025009:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002500f:	e8 20 ec ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c0025014:	b9 00 01 00 00       	mov    ecx,0x100
c0025019:	89 c2                	mov    edx,eax
c002501b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c002501f:	fc                   	cld    
c0025020:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0025023:	83 c4 10             	add    esp,0x10
c0025026:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c002502e:	4e                   	dec    esi
c002502f:	e9 3e ff ff ff       	jmp    c0024f72 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0025034:	31 ff                	xor    edi,edi
c0025036:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002503b:	74 16                	je     c0025053 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c002503d:	50                   	push   eax
c002503e:	50                   	push   eax
c002503f:	31 c0                	xor    eax,eax
c0025041:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0025046:	0f 94 c0             	sete   al
c0025049:	50                   	push   eax
c002504a:	53                   	push   ebx
c002504b:	e8 ec fb ff ff       	call   c0024c3c <ATA::flush(bool)>
c0025050:	83 c4 10             	add    esp,0x10
c0025053:	83 c4 2c             	add    esp,0x2c
c0025056:	89 f8                	mov    eax,edi
c0025058:	5b                   	pop    ebx
c0025059:	5e                   	pop    esi
c002505a:	5f                   	pop    edi
c002505b:	5d                   	pop    ebp
c002505c:	c3                   	ret    
c002505d:	90                   	nop

c002505e <ATA::read(unsigned long long, int, void*)>:
c002505e:	57                   	push   edi
c002505f:	b8 04 00 00 00       	mov    eax,0x4
c0025064:	56                   	push   esi
c0025065:	53                   	push   ebx
c0025066:	83 ec 10             	sub    esp,0x10
c0025069:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002506d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025071:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025074:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025078:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002507c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025082:	77 3b                	ja     c00250bf <ATA::read(unsigned long long, int, void*)+0x61>
c0025084:	b8 06 00 00 00       	mov    eax,0x6
c0025089:	85 d2                	test   edx,edx
c002508b:	74 32                	je     c00250bf <ATA::read(unsigned long long, int, void*)+0x61>
c002508d:	50                   	push   eax
c002508e:	50                   	push   eax
c002508f:	6a 00                	push   0x0
c0025091:	52                   	push   edx
c0025092:	53                   	push   ebx
c0025093:	57                   	push   edi
c0025094:	56                   	push   esi
c0025095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025099:	e8 38 fc ff ff       	call   c0024cd6 <ATA::access(unsigned long long, int, void*, bool)>
c002509e:	83 c4 20             	add    esp,0x20
c00250a1:	85 c0                	test   eax,eax
c00250a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00250a7:	75 11                	jne    c00250ba <ATA::read(unsigned long long, int, void*)+0x5c>
c00250a9:	01 1d 34 36 03 c0    	add    DWORD PTR ds:0xc0033634,ebx
c00250af:	e8 b0 b8 fe ff       	call   c0010964 <VgaText::updateDiskUsage()>
c00250b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00250b8:	eb 05                	jmp    c00250bf <ATA::read(unsigned long long, int, void*)+0x61>
c00250ba:	b8 01 00 00 00       	mov    eax,0x1
c00250bf:	83 c4 10             	add    esp,0x10
c00250c2:	5b                   	pop    ebx
c00250c3:	5e                   	pop    esi
c00250c4:	5f                   	pop    edi
c00250c5:	c3                   	ret    

c00250c6 <ATA::write(unsigned long long, int, void*)>:
c00250c6:	57                   	push   edi
c00250c7:	b8 04 00 00 00       	mov    eax,0x4
c00250cc:	56                   	push   esi
c00250cd:	53                   	push   ebx
c00250ce:	83 ec 10             	sub    esp,0x10
c00250d1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00250d5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00250d9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00250dc:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00250e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00250e4:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00250ea:	77 3b                	ja     c0025127 <ATA::write(unsigned long long, int, void*)+0x61>
c00250ec:	b8 06 00 00 00       	mov    eax,0x6
c00250f1:	85 d2                	test   edx,edx
c00250f3:	74 32                	je     c0025127 <ATA::write(unsigned long long, int, void*)+0x61>
c00250f5:	50                   	push   eax
c00250f6:	50                   	push   eax
c00250f7:	6a 01                	push   0x1
c00250f9:	52                   	push   edx
c00250fa:	53                   	push   ebx
c00250fb:	57                   	push   edi
c00250fc:	56                   	push   esi
c00250fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025101:	e8 d0 fb ff ff       	call   c0024cd6 <ATA::access(unsigned long long, int, void*, bool)>
c0025106:	83 c4 20             	add    esp,0x20
c0025109:	85 c0                	test   eax,eax
c002510b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002510f:	75 11                	jne    c0025122 <ATA::write(unsigned long long, int, void*)+0x5c>
c0025111:	01 1d 30 36 03 c0    	add    DWORD PTR ds:0xc0033630,ebx
c0025117:	e8 48 b8 fe ff       	call   c0010964 <VgaText::updateDiskUsage()>
c002511c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025120:	eb 05                	jmp    c0025127 <ATA::write(unsigned long long, int, void*)+0x61>
c0025122:	b8 01 00 00 00       	mov    eax,0x1
c0025127:	83 c4 10             	add    esp,0x10
c002512a:	5b                   	pop    ebx
c002512b:	5e                   	pop    esi
c002512c:	5f                   	pop    edi
c002512d:	c3                   	ret    

c002512e <ATA::detectCHS()>:
c002512e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0025132:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0025138:	c1 e0 06             	shl    eax,0x6
c002513b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0025141:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002514b:	c7 44 24 04 8f dc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002dc8f
c0025153:	e9 a1 57 ff ff       	jmp    c001a8f9 <Krnl::panic(char const*)>

c0025158 <ATA::open(int, int, void*)>:
c0025158:	53                   	push   ebx
c0025159:	83 ec 08             	sub    esp,0x8
c002515c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025160:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025164:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025168:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002516e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025174:	c1 e0 06             	shl    eax,0x6
c0025177:	01 d0                	add    eax,edx
c0025179:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0025180:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0025186:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c002518d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0025197:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c002519d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00251a4:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00251ab:	75 0c                	jne    c00251b9 <ATA::open(int, int, void*)+0x61>
c00251ad:	83 ec 0c             	sub    esp,0xc
c00251b0:	53                   	push   ebx
c00251b1:	e8 78 ff ff ff       	call   c002512e <ATA::detectCHS()>
c00251b6:	83 c4 10             	add    esp,0x10
c00251b9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00251bf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00251c5:	c1 e0 06             	shl    eax,0x6
c00251c8:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00251cf:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00251d9:	d1 e8                	shr    eax,1
c00251db:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00251e1:	6a 04                	push   0x4
c00251e3:	6a 0c                	push   0xc
c00251e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00251ec:	50                   	push   eax
c00251ed:	52                   	push   edx
c00251ee:	e8 53 ea ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00251f3:	90                   	nop
c00251f4:	90                   	nop
c00251f5:	6a 00                	push   0x0
c00251f7:	6a 0c                	push   0xc
c00251f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025200:	50                   	push   eax
c0025201:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025207:	e8 3a ea ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002520c:	83 c4 14             	add    esp,0x14
c002520f:	53                   	push   ebx
c0025210:	e8 05 f5 fe ff       	call   c001471a <PhysicalDisk::startCache()>
c0025215:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025218:	e8 dd 17 ff ff       	call   c00169fa <createPartitionsForDisk(PhysicalDisk*)>
c002521d:	31 c0                	xor    eax,eax
c002521f:	83 c4 18             	add    esp,0x18
c0025222:	5b                   	pop    ebx
c0025223:	c3                   	ret    

c0025224 <ATAPI::write(unsigned long long, int, void*)>:
c0025224:	b8 03 00 00 00       	mov    eax,0x3
c0025229:	c3                   	ret    

c002522a <ATAPI::close(int, int, void*)>:
c002522a:	83 ec 0c             	sub    esp,0xc
c002522d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025231:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025237:	85 c0                	test   eax,eax
c0025239:	74 0c                	je     c0025247 <ATAPI::close(int, int, void*)+0x1d>
c002523b:	83 ec 0c             	sub    esp,0xc
c002523e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025240:	50                   	push   eax
c0025241:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025244:	83 c4 10             	add    esp,0x10
c0025247:	31 c0                	xor    eax,eax
c0025249:	83 c4 0c             	add    esp,0xc
c002524c:	c3                   	ret    
c002524d:	90                   	nop

c002524e <ATAPI::ATAPI()>:
c002524e:	83 ec 0c             	sub    esp,0xc
c0025251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025255:	83 ec 04             	sub    esp,0x4
c0025258:	68 00 08 00 00       	push   0x800
c002525d:	68 c9 dd 02 c0       	push   0xc002ddc9
c0025262:	50                   	push   eax
c0025263:	e8 4a f4 fe ff       	call   c00146b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025268:	83 c4 10             	add    esp,0x10
c002526b:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0025270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025274:	89 10                	mov    DWORD PTR [eax],edx
c0025276:	90                   	nop
c0025277:	83 c4 0c             	add    esp,0xc
c002527a:	c3                   	ret    
c002527b:	90                   	nop

c002527c <ATAPI::readyForCommand()>:
c002527c:	56                   	push   esi
c002527d:	53                   	push   ebx
c002527e:	31 db                	xor    ebx,ebx
c0025280:	50                   	push   eax
c0025281:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0025285:	50                   	push   eax
c0025286:	6a 0c                	push   0xc
c0025288:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c002528f:	50                   	push   eax
c0025290:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0025296:	e8 6b ea ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c002529b:	83 c4 10             	add    esp,0x10
c002529e:	a8 88                	test   al,0x88
c00252a0:	74 23                	je     c00252c5 <ATAPI::readyForCommand()+0x49>
c00252a2:	43                   	inc    ebx
c00252a3:	83 fb 63             	cmp    ebx,0x63
c00252a6:	7e dd                	jle    c0025285 <ATAPI::readyForCommand()+0x9>
c00252a8:	51                   	push   ecx
c00252a9:	51                   	push   ecx
c00252aa:	6a 00                	push   0x0
c00252ac:	68 40 42 0f 00       	push   0xf4240
c00252b1:	e8 f9 96 ff ff       	call   c001e9af <nanoSleep(unsigned long long)>
c00252b6:	83 c4 10             	add    esp,0x10
c00252b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00252bf:	75 c4                	jne    c0025285 <ATAPI::readyForCommand()+0x9>
c00252c1:	31 c0                	xor    eax,eax
c00252c3:	eb 02                	jmp    c00252c7 <ATAPI::readyForCommand()+0x4b>
c00252c5:	b0 01                	mov    al,0x1
c00252c7:	5a                   	pop    edx
c00252c8:	5b                   	pop    ebx
c00252c9:	5e                   	pop    esi
c00252ca:	c3                   	ret    
c00252cb:	90                   	nop

c00252cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00252cc:	55                   	push   ebp
c00252cd:	57                   	push   edi
c00252ce:	56                   	push   esi
c00252cf:	53                   	push   ebx
c00252d0:	83 ec 20             	sub    esp,0x20
c00252d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00252d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00252db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00252df:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00252e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00252e7:	6a 01                	push   0x1
c00252e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00252f0:	50                   	push   eax
c00252f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00252f7:	e8 56 eb ff ff       	call   c0023e52 <IDE::enableIRQs(unsigned char, bool)>
c00252fc:	5e                   	pop    esi
c00252fd:	58                   	pop    eax
c00252fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025305:	50                   	push   eax
c0025306:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002530c:	e8 0f e9 ff ff       	call   c0023c20 <IDE::prepareInterrupt(unsigned char)>
c0025311:	89 3c 24             	mov    DWORD PTR [esp],edi
c0025314:	e8 63 ff ff ff       	call   c002527c <ATAPI::readyForCommand()>
c0025319:	83 c4 10             	add    esp,0x10
c002531c:	84 c0                	test   al,al
c002531e:	75 0a                	jne    c002532a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0025320:	bb 01 00 00 00       	mov    ebx,0x1
c0025325:	e9 57 02 00 00       	jmp    c0025581 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002532a:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0025330:	c1 e0 04             	shl    eax,0x4
c0025333:	0f b6 c0             	movzx  eax,al
c0025336:	50                   	push   eax
c0025337:	6a 06                	push   0x6
c0025339:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025340:	50                   	push   eax
c0025341:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025347:	e8 fa e8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002534c:	6a 00                	push   0x0
c002534e:	6a 01                	push   0x1
c0025350:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025357:	50                   	push   eax
c0025358:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002535e:	e8 e3 e8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025363:	83 c4 20             	add    esp,0x20
c0025366:	0f b6 c3             	movzx  eax,bl
c0025369:	0f b6 df             	movzx  ebx,bh
c002536c:	50                   	push   eax
c002536d:	6a 04                	push   0x4
c002536f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025376:	50                   	push   eax
c0025377:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002537d:	e8 c4 e8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025382:	53                   	push   ebx
c0025383:	6a 05                	push   0x5
c0025385:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002538c:	50                   	push   eax
c002538d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025393:	e8 ae e8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025398:	83 c4 20             	add    esp,0x20
c002539b:	68 a0 00 00 00       	push   0xa0
c00253a0:	6a 07                	push   0x7
c00253a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253a9:	50                   	push   eax
c00253aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253b0:	e8 91 e8 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00253b5:	83 c4 0c             	add    esp,0xc
c00253b8:	6a 01                	push   0x1
c00253ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00253c1:	50                   	push   eax
c00253c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253c8:	e8 25 f4 ff ff       	call   c00247f2 <IDE::polling(unsigned char, unsigned int)>
c00253cd:	83 c4 10             	add    esp,0x10
c00253d0:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00253d6:	84 c0                	test   al,al
c00253d8:	74 23                	je     c00253fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00253da:	0f b6 d8             	movzx  ebx,al
c00253dd:	0f b6 d2             	movzx  edx,dl
c00253e0:	53                   	push   ebx
c00253e1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00253e8:	50                   	push   eax
c00253e9:	52                   	push   edx
c00253ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00253f0:	e8 67 f2 ff ff       	call   c002465c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00253f5:	83 c4 10             	add    esp,0x10
c00253f8:	e9 84 01 00 00       	jmp    c0025581 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00253fd:	0f b6 d2             	movzx  edx,dl
c0025400:	53                   	push   ebx
c0025401:	53                   	push   ebx
c0025402:	52                   	push   edx
c0025403:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025409:	e8 26 e8 ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c002540e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0025412:	b9 06 00 00 00       	mov    ecx,0x6
c0025417:	89 c2                	mov    edx,eax
c0025419:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c002541c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0025420:	83 c4 10             	add    esp,0x10
c0025423:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025429:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025430:	85 db                	test   ebx,ebx
c0025432:	0f 84 ec 00 00 00    	je     c0025524 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0025438:	51                   	push   ecx
c0025439:	51                   	push   ecx
c002543a:	52                   	push   edx
c002543b:	50                   	push   eax
c002543c:	e8 73 e9 ff ff       	call   c0023db4 <IDE::waitInterrupt(unsigned char)>
c0025441:	83 c4 10             	add    esp,0x10
c0025444:	84 c0                	test   al,al
c0025446:	0f 84 d4 fe ff ff    	je     c0025320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c002544c:	56                   	push   esi
c002544d:	56                   	push   esi
c002544e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025455:	50                   	push   eax
c0025456:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002545c:	e8 bf e7 ff ff       	call   c0023c20 <IDE::prepareInterrupt(unsigned char)>
c0025461:	83 c4 0c             	add    esp,0xc
c0025464:	6a 04                	push   0x4
c0025466:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002546d:	50                   	push   eax
c002546e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025474:	e8 8d e8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0025479:	83 c4 0c             	add    esp,0xc
c002547c:	89 c6                	mov    esi,eax
c002547e:	6a 05                	push   0x5
c0025480:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025487:	50                   	push   eax
c0025488:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002548e:	e8 73 e8 ff ff       	call   c0023d06 <IDE::read(unsigned char, unsigned char)>
c0025493:	89 f1                	mov    ecx,esi
c0025495:	0f b6 c0             	movzx  eax,al
c0025498:	0f b6 f1             	movzx  esi,cl
c002549b:	c1 e0 08             	shl    eax,0x8
c002549e:	09 c6                	or     esi,eax
c00254a0:	d1 fe                	sar    esi,1
c00254a2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00254a6:	83 c4 10             	add    esp,0x10
c00254a9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00254ae:	74 41                	je     c00254f1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00254b0:	31 c9                	xor    ecx,ecx
c00254b2:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00254b8:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00254bf:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00254c3:	75 0a                	jne    c00254cf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00254c5:	01 c9                	add    ecx,ecx
c00254c7:	01 cd                	add    ebp,ecx
c00254c9:	4b                   	dec    ebx
c00254ca:	e9 54 ff ff ff       	jmp    c0025423 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00254cf:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00254d4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00254d8:	51                   	push   ecx
c00254d9:	51                   	push   ecx
c00254da:	52                   	push   edx
c00254db:	50                   	push   eax
c00254dc:	e8 53 e7 ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c00254e1:	89 c2                	mov    edx,eax
c00254e3:	89 f0                	mov    eax,esi
c00254e5:	66 ef                	out    dx,ax
c00254e7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00254eb:	83 c4 10             	add    esp,0x10
c00254ee:	41                   	inc    ecx
c00254ef:	eb c1                	jmp    c00254b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00254f1:	31 f6                	xor    esi,esi
c00254f3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00254f9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025500:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0025504:	75 06                	jne    c002550c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0025506:	01 f6                	add    esi,esi
c0025508:	01 f5                	add    ebp,esi
c002550a:	eb bd                	jmp    c00254c9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c002550c:	51                   	push   ecx
c002550d:	51                   	push   ecx
c002550e:	52                   	push   edx
c002550f:	50                   	push   eax
c0025510:	e8 1f e7 ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c0025515:	89 c2                	mov    edx,eax
c0025517:	66 ed                	in     ax,dx
c0025519:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c002551e:	83 c4 10             	add    esp,0x10
c0025521:	46                   	inc    esi
c0025522:	eb cf                	jmp    c00254f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c0025524:	51                   	push   ecx
c0025525:	51                   	push   ecx
c0025526:	52                   	push   edx
c0025527:	50                   	push   eax
c0025528:	e8 87 e8 ff ff       	call   c0023db4 <IDE::waitInterrupt(unsigned char)>
c002552d:	83 c4 10             	add    esp,0x10
c0025530:	84 c0                	test   al,al
c0025532:	0f 84 e8 fd ff ff    	je     c0025320 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025538:	bb a0 86 01 00       	mov    ebx,0x186a0
c002553d:	52                   	push   edx
c002553e:	52                   	push   edx
c002553f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025546:	50                   	push   eax
c0025547:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002554d:	e8 ce e6 ff ff       	call   c0023c20 <IDE::prepareInterrupt(unsigned char)>
c0025552:	83 c4 10             	add    esp,0x10
c0025555:	50                   	push   eax
c0025556:	50                   	push   eax
c0025557:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002555e:	50                   	push   eax
c002555f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025565:	e8 ca e6 ff ff       	call   c0023c34 <IDE::getBase(unsigned char)>
c002556a:	8d 50 07             	lea    edx,[eax+0x7]
c002556d:	ec                   	in     al,dx
c002556e:	83 c4 10             	add    esp,0x10
c0025571:	a8 88                	test   al,0x88
c0025573:	74 0a                	je     c002557f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025575:	4b                   	dec    ebx
c0025576:	75 dd                	jne    c0025555 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025578:	bb 02 00 00 00       	mov    ebx,0x2
c002557d:	eb 02                	jmp    c0025581 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002557f:	31 db                	xor    ebx,ebx
c0025581:	83 c4 1c             	add    esp,0x1c
c0025584:	89 d8                	mov    eax,ebx
c0025586:	5b                   	pop    ebx
c0025587:	5e                   	pop    esi
c0025588:	5f                   	pop    edi
c0025589:	5d                   	pop    ebp
c002558a:	c3                   	ret    
c002558b:	90                   	nop

c002558c <ATAPI::diskRemoved()>:
c002558c:	83 ec 18             	sub    esp,0x18
c002558f:	68 d5 dd 02 c0       	push   0xc002ddd5
c0025594:	e8 c6 d8 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0025599:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002559d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00255a4:	83 c4 1c             	add    esp,0x1c
c00255a7:	c3                   	ret    

c00255a8 <ATAPI::eject()>:
c00255a8:	57                   	push   edi
c00255a9:	b9 03 00 00 00       	mov    ecx,0x3
c00255ae:	53                   	push   ebx
c00255af:	83 ec 14             	sub    esp,0x14
c00255b2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00255b6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00255ba:	fc                   	cld    
c00255bb:	31 c0                	xor    eax,eax
c00255bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00255bf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00255c4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00255c9:	50                   	push   eax
c00255ca:	50                   	push   eax
c00255cb:	6a 00                	push   0x0
c00255cd:	6a 00                	push   0x0
c00255cf:	6a 00                	push   0x0
c00255d1:	6a 02                	push   0x2
c00255d3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00255d7:	50                   	push   eax
c00255d8:	53                   	push   ebx
c00255d9:	e8 ee fc ff ff       	call   c00252cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00255de:	83 c4 14             	add    esp,0x14
c00255e1:	53                   	push   ebx
c00255e2:	e8 a5 ff ff ff       	call   c002558c <ATAPI::diskRemoved()>
c00255e7:	83 c4 24             	add    esp,0x24
c00255ea:	31 c0                	xor    eax,eax
c00255ec:	5b                   	pop    ebx
c00255ed:	5f                   	pop    edi
c00255ee:	c3                   	ret    
c00255ef:	90                   	nop

c00255f0 <ATAPI::diskInserted()>:
c00255f0:	53                   	push   ebx
c00255f1:	83 ec 14             	sub    esp,0x14
c00255f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00255f8:	68 ec dd 02 c0       	push   0xc002ddec
c00255fd:	e8 5d d8 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0025602:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0025609:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002560c:	e8 09 f1 fe ff       	call   c001471a <PhysicalDisk::startCache()>
c0025611:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025615:	83 c4 18             	add    esp,0x18
c0025618:	5b                   	pop    ebx
c0025619:	e9 dc 13 ff ff       	jmp    c00169fa <createPartitionsForDisk(PhysicalDisk*)>

c002561e <ATAPI::detectMedia()>:
c002561e:	56                   	push   esi
c002561f:	53                   	push   ebx
c0025620:	83 ec 28             	sub    esp,0x28
c0025623:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025627:	6a 0c                	push   0xc
c0025629:	6a 00                	push   0x0
c002562b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c002562f:	56                   	push   esi
c0025630:	e8 43 b1 fd ff       	call   c0000778 <memset>
c0025635:	58                   	pop    eax
c0025636:	5a                   	pop    edx
c0025637:	6a 00                	push   0x0
c0025639:	6a 00                	push   0x0
c002563b:	6a 00                	push   0x0
c002563d:	6a 00                	push   0x0
c002563f:	56                   	push   esi
c0025640:	53                   	push   ebx
c0025641:	e8 86 fc ff ff       	call   c00252cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025646:	83 c4 1c             	add    esp,0x1c
c0025649:	6a 0c                	push   0xc
c002564b:	6a 00                	push   0x0
c002564d:	56                   	push   esi
c002564e:	e8 25 b1 fd ff       	call   c0000778 <memset>
c0025653:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025658:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002565d:	59                   	pop    ecx
c002565e:	58                   	pop    eax
c002565f:	6a 01                	push   0x1
c0025661:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025665:	50                   	push   eax
c0025666:	6a 00                	push   0x0
c0025668:	6a 12                	push   0x12
c002566a:	56                   	push   esi
c002566b:	53                   	push   ebx
c002566c:	e8 5b fc ff ff       	call   c00252cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025671:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025675:	83 c4 20             	add    esp,0x20
c0025678:	83 e0 7f             	and    eax,0x7f
c002567b:	3c 70                	cmp    al,0x70
c002567d:	74 15                	je     c0025694 <ATAPI::detectMedia()+0x76>
c002567f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025686:	75 0c                	jne    c0025694 <ATAPI::detectMedia()+0x76>
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	53                   	push   ebx
c002568c:	e8 5f ff ff ff       	call   c00255f0 <ATAPI::diskInserted()>
c0025691:	83 c4 10             	add    esp,0x10
c0025694:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025698:	83 e0 0f             	and    eax,0xf
c002569b:	3c 02                	cmp    al,0x2
c002569d:	75 1b                	jne    c00256ba <ATAPI::detectMedia()+0x9c>
c002569f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00256a4:	75 2d                	jne    c00256d3 <ATAPI::detectMedia()+0xb5>
c00256a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00256ad:	74 24                	je     c00256d3 <ATAPI::detectMedia()+0xb5>
c00256af:	83 ec 0c             	sub    esp,0xc
c00256b2:	53                   	push   ebx
c00256b3:	e8 d4 fe ff ff       	call   c002558c <ATAPI::diskRemoved()>
c00256b8:	eb 16                	jmp    c00256d0 <ATAPI::detectMedia()+0xb2>
c00256ba:	84 c0                	test   al,al
c00256bc:	75 15                	jne    c00256d3 <ATAPI::detectMedia()+0xb5>
c00256be:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00256c5:	75 0c                	jne    c00256d3 <ATAPI::detectMedia()+0xb5>
c00256c7:	83 ec 0c             	sub    esp,0xc
c00256ca:	53                   	push   ebx
c00256cb:	e8 20 ff ff ff       	call   c00255f0 <ATAPI::diskInserted()>
c00256d0:	83 c4 10             	add    esp,0x10
c00256d3:	83 c4 24             	add    esp,0x24
c00256d6:	5b                   	pop    ebx
c00256d7:	5e                   	pop    esi
c00256d8:	c3                   	ret    
c00256d9:	90                   	nop

c00256da <ATAPI::open(int, int, void*)>:
c00256da:	53                   	push   ebx
c00256db:	83 ec 08             	sub    esp,0x8
c00256de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00256e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00256e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00256ea:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00256f0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00256f6:	c1 e0 06             	shl    eax,0x6
c00256f9:	01 d0                	add    eax,edx
c00256fb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0025702:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0025708:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c002570f:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025719:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002571f:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025726:	6a 04                	push   0x4
c0025728:	6a 0c                	push   0xc
c002572a:	51                   	push   ecx
c002572b:	52                   	push   edx
c002572c:	e8 15 e5 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025731:	90                   	nop
c0025732:	90                   	nop
c0025733:	6a 00                	push   0x0
c0025735:	6a 0c                	push   0xc
c0025737:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002573e:	50                   	push   eax
c002573f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0025745:	e8 fc e4 ff ff       	call   c0023c46 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002574a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025751:	83 c4 14             	add    esp,0x14
c0025754:	53                   	push   ebx
c0025755:	e8 c4 fe ff ff       	call   c002561e <ATAPI::detectMedia()>
c002575a:	31 c0                	xor    eax,eax
c002575c:	83 c4 18             	add    esp,0x18
c002575f:	5b                   	pop    ebx
c0025760:	c3                   	ret    
c0025761:	90                   	nop

c0025762 <ATAPI::read(unsigned long long, int, void*)>:
c0025762:	55                   	push   ebp
c0025763:	57                   	push   edi
c0025764:	56                   	push   esi
c0025765:	53                   	push   ebx
c0025766:	83 ec 1c             	sub    esp,0x1c
c0025769:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002576d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025771:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025775:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002577c:	74 41                	je     c00257bf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002577e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025782:	b9 03 00 00 00       	mov    ecx,0x3
c0025787:	fc                   	cld    
c0025788:	31 c0                	xor    eax,eax
c002578a:	86 fb                	xchg   bl,bh
c002578c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002578e:	c1 c3 10             	rol    ebx,0x10
c0025791:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025796:	89 e8                	mov    eax,ebp
c0025798:	86 fb                	xchg   bl,bh
c002579a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002579e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c00257a2:	50                   	push   eax
c00257a3:	50                   	push   eax
c00257a4:	55                   	push   ebp
c00257a5:	c1 e5 0b             	shl    ebp,0xb
c00257a8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00257ac:	6a 00                	push   0x0
c00257ae:	55                   	push   ebp
c00257af:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00257b3:	50                   	push   eax
c00257b4:	56                   	push   esi
c00257b5:	e8 12 fb ff ff       	call   c00252cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00257ba:	83 c4 20             	add    esp,0x20
c00257bd:	eb 1a                	jmp    c00257d9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c00257bf:	83 ec 0c             	sub    esp,0xc
c00257c2:	56                   	push   esi
c00257c3:	e8 56 fe ff ff       	call   c002561e <ATAPI::detectMedia()>
c00257c8:	83 c4 10             	add    esp,0x10
c00257cb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00257d2:	75 aa                	jne    c002577e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00257d4:	b8 02 00 00 00       	mov    eax,0x2
c00257d9:	83 c4 1c             	add    esp,0x1c
c00257dc:	5b                   	pop    ebx
c00257dd:	5e                   	pop    esi
c00257de:	5f                   	pop    edi
c00257df:	5d                   	pop    ebp
c00257e0:	c3                   	ret    
c00257e1:	90                   	nop

c00257e2 <SATA::close(int, int, void*)>:
c00257e2:	83 ec 0c             	sub    esp,0xc
c00257e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257ef:	85 c0                	test   eax,eax
c00257f1:	74 0c                	je     c00257ff <SATA::close(int, int, void*)+0x1d>
c00257f3:	83 ec 0c             	sub    esp,0xc
c00257f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00257f8:	50                   	push   eax
c00257f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257fc:	83 c4 10             	add    esp,0x10
c00257ff:	31 c0                	xor    eax,eax
c0025801:	83 c4 0c             	add    esp,0xc
c0025804:	c3                   	ret    
c0025805:	90                   	nop

c0025806 <SATA::powerSaving(PowerSavingLevel)>:
c0025806:	c3                   	ret    
c0025807:	90                   	nop

c0025808 <SATA::open(int, int, void*)>:
c0025808:	56                   	push   esi
c0025809:	53                   	push   ebx
c002580a:	50                   	push   eax
c002580b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002580f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025813:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c002581d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025823:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002582d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025831:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002583b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025841:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0025848:	e8 d3 a6 fe ff       	call   c000ff20 <Phys::allocatePage()>
c002584d:	89 c6                	mov    esi,eax
c002584f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025855:	81 c6 00 10 00 00    	add    esi,0x1000
c002585b:	e8 c0 a6 fe ff       	call   c000ff20 <Phys::allocatePage()>
c0025860:	39 c6                	cmp    esi,eax
c0025862:	74 10                	je     c0025874 <SATA::open(int, int, void*)+0x6c>
c0025864:	83 ec 0c             	sub    esp,0xc
c0025867:	68 14 dd 02 c0       	push   0xc002dd14
c002586c:	e8 88 50 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0025871:	83 c4 10             	add    esp,0x10
c0025874:	83 ec 0c             	sub    esp,0xc
c0025877:	6a 02                	push   0x2
c0025879:	e8 db c1 fe ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c002587e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025884:	6a 03                	push   0x3
c0025886:	50                   	push   eax
c0025887:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002588d:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0025893:	e8 f8 c9 fe ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025898:	83 c4 14             	add    esp,0x14
c002589b:	53                   	push   ebx
c002589c:	e8 79 ee fe ff       	call   c001471a <PhysicalDisk::startCache()>
c00258a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00258a4:	e8 51 11 ff ff       	call   c00169fa <createPartitionsForDisk(PhysicalDisk*)>
c00258a9:	83 c4 14             	add    esp,0x14
c00258ac:	31 c0                	xor    eax,eax
c00258ae:	5b                   	pop    ebx
c00258af:	5e                   	pop    esi
c00258b0:	c3                   	ret    
c00258b1:	90                   	nop

c00258b2 <SATA::SATA()>:
c00258b2:	83 ec 0c             	sub    esp,0xc
c00258b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258b9:	83 ec 04             	sub    esp,0x4
c00258bc:	68 00 02 00 00       	push   0x200
c00258c1:	68 28 dd 02 c0       	push   0xc002dd28
c00258c6:	50                   	push   eax
c00258c7:	e8 e6 ed fe ff       	call   c00146b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c00258cc:	83 c4 10             	add    esp,0x10
c00258cf:	ba 98 dd 02 c0       	mov    edx,0xc002dd98
c00258d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00258d8:	89 10                	mov    DWORD PTR [eax],edx
c00258da:	90                   	nop
c00258db:	83 c4 0c             	add    esp,0xc
c00258de:	c3                   	ret    
c00258df:	90                   	nop

c00258e0 <SATA::access(unsigned long long, int, void*, bool)>:
c00258e0:	55                   	push   ebp
c00258e1:	57                   	push   edi
c00258e2:	56                   	push   esi
c00258e3:	53                   	push   ebx
c00258e4:	83 ec 2c             	sub    esp,0x2c
c00258e7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00258eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00258ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00258f3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00258f7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00258fb:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0025900:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025904:	7e 10                	jle    c0025916 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0025906:	83 ec 0c             	sub    esp,0xc
c0025909:	68 38 dd 02 c0       	push   0xc002dd38
c002590e:	e8 e6 4f ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0025913:	83 c4 10             	add    esp,0x10
c0025916:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002591c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0025922:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025928:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002592c:	89 d0                	mov    eax,edx
c002592e:	c1 e0 07             	shl    eax,0x7
c0025931:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025935:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002593f:	51                   	push   ecx
c0025940:	8d 42 02             	lea    eax,[edx+0x2]
c0025943:	51                   	push   ecx
c0025944:	c1 e0 07             	shl    eax,0x7
c0025947:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002594b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002594f:	50                   	push   eax
c0025950:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025956:	e8 af ef ff ff       	call   c002490a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002595b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002595f:	83 c4 10             	add    esp,0x10
c0025962:	b8 01 00 00 00       	mov    eax,0x1
c0025967:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002596c:	0f 84 cb 01 00 00    	je     c0025b3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025972:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025976:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002597a:	c1 e0 09             	shl    eax,0x9
c002597d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025982:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025986:	74 0e                	je     c0025996 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025988:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c002598e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025992:	89 c1                	mov    ecx,eax
c0025994:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025996:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002599a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00259a0:	8d 42 02             	lea    eax,[edx+0x2]
c00259a3:	c1 e0 07             	shl    eax,0x7
c00259a6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00259aa:	8b 00                	mov    eax,DWORD PTR [eax]
c00259ac:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00259b2:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00259b8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00259bc:	c1 e1 05             	shl    ecx,0x5
c00259bf:	01 c8                	add    eax,ecx
c00259c1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00259c5:	83 e1 01             	and    ecx,0x1
c00259c8:	89 ce                	mov    esi,ecx
c00259ca:	8a 08                	mov    cl,BYTE PTR [eax]
c00259cc:	c1 e6 06             	shl    esi,0x6
c00259cf:	83 e1 bf             	and    ecx,0xffffffbf
c00259d2:	09 f1                	or     ecx,esi
c00259d4:	88 08                	mov    BYTE PTR [eax],cl
c00259d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c00259d8:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00259de:	81 c9 05 00 01 00    	or     ecx,0x10005
c00259e4:	89 08                	mov    DWORD PTR [eax],ecx
c00259e6:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00259ec:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00259f2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00259f8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00259fb:	50                   	push   eax
c00259fc:	68 90 00 00 00       	push   0x90
c0025a01:	6a 00                	push   0x0
c0025a03:	56                   	push   esi
c0025a04:	e8 6f ad fd ff       	call   c0000778 <memset>
c0025a09:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0025a0f:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c0025a13:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c0025a19:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c0025a1d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0025a21:	83 c4 10             	add    esp,0x10
c0025a24:	48                   	dec    eax
c0025a25:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025a2a:	89 c1                	mov    ecx,eax
c0025a2c:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0025a32:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025a37:	09 c8                	or     eax,ecx
c0025a39:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025a3f:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025a42:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0025a49:	66 25 00 7f          	and    ax,0x7f00
c0025a4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025a51:	66 0d 27 80          	or     ax,0x8027
c0025a55:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025a5a:	66 89 06             	mov    WORD PTR [esi],ax
c0025a5d:	19 c0                	sbb    eax,eax
c0025a5f:	83 e0 f0             	and    eax,0xfffffff0
c0025a62:	83 c0 35             	add    eax,0x35
c0025a65:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025a68:	89 e8                	mov    eax,ebp
c0025a6a:	c1 e8 10             	shr    eax,0x10
c0025a6d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025a70:	89 e8                	mov    eax,ebp
c0025a72:	c1 e8 18             	shr    eax,0x18
c0025a75:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025a78:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025a7c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025a7f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025a83:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025a86:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025a8a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025a8e:	89 d6                	mov    esi,edx
c0025a90:	31 c0                	xor    eax,eax
c0025a92:	c1 e6 07             	shl    esi,0x7
c0025a95:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025a99:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025a9f:	80 e1 88             	and    cl,0x88
c0025aa2:	74 0a                	je     c0025aae <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025aa4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025aa9:	74 0a                	je     c0025ab5 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025aab:	40                   	inc    eax
c0025aac:	eb eb                	jmp    c0025a99 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025aae:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025ab3:	75 0a                	jne    c0025abf <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025ab5:	83 ec 0c             	sub    esp,0xc
c0025ab8:	68 71 dd 02 c0       	push   0xc002dd71
c0025abd:	eb 56                	jmp    c0025b15 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025abf:	b8 01 00 00 00       	mov    eax,0x1
c0025ac4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025ac8:	c1 e2 07             	shl    edx,0x7
c0025acb:	d3 e0                	shl    eax,cl
c0025acd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025ad1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025ad7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c0025add:	85 c8                	test   eax,ecx
c0025adf:	74 20                	je     c0025b01 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025ae1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025ae7:	0f ba e1 1e          	bt     ecx,0x1e
c0025aeb:	73 ea                	jae    c0025ad7 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c0025aed:	83 ec 0c             	sub    esp,0xc
c0025af0:	68 7f dd 02 c0       	push   0xc002dd7f
c0025af5:	e8 ff 4d ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0025afa:	83 c4 10             	add    esp,0x10
c0025afd:	31 c0                	xor    eax,eax
c0025aff:	eb 3c                	jmp    c0025b3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025b01:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c0025b07:	0f ba e0 1e          	bt     eax,0x1e
c0025b0b:	73 17                	jae    c0025b24 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c0025b0d:	83 ec 0c             	sub    esp,0xc
c0025b10:	68 7f dd 02 c0       	push   0xc002dd7f
c0025b15:	e8 df 4d ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0025b1a:	83 c4 10             	add    esp,0x10
c0025b1d:	b8 01 00 00 00       	mov    eax,0x1
c0025b22:	eb 19                	jmp    c0025b3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025b24:	31 c0                	xor    eax,eax
c0025b26:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025b2b:	75 10                	jne    c0025b3d <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025b2d:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0025b33:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0025b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025b3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025b3d:	83 c4 2c             	add    esp,0x2c
c0025b40:	5b                   	pop    ebx
c0025b41:	5e                   	pop    esi
c0025b42:	5f                   	pop    edi
c0025b43:	5d                   	pop    ebp
c0025b44:	c3                   	ret    
c0025b45:	90                   	nop

c0025b46 <SATA::read(unsigned long long, int, void*)>:
c0025b46:	57                   	push   edi
c0025b47:	b8 04 00 00 00       	mov    eax,0x4
c0025b4c:	56                   	push   esi
c0025b4d:	53                   	push   ebx
c0025b4e:	83 ec 10             	sub    esp,0x10
c0025b51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025b55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025b59:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0025b5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025b60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025b64:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0025b6a:	77 3b                	ja     c0025ba7 <SATA::read(unsigned long long, int, void*)+0x61>
c0025b6c:	b8 06 00 00 00       	mov    eax,0x6
c0025b71:	85 d2                	test   edx,edx
c0025b73:	74 32                	je     c0025ba7 <SATA::read(unsigned long long, int, void*)+0x61>
c0025b75:	50                   	push   eax
c0025b76:	50                   	push   eax
c0025b77:	6a 00                	push   0x0
c0025b79:	52                   	push   edx
c0025b7a:	53                   	push   ebx
c0025b7b:	57                   	push   edi
c0025b7c:	56                   	push   esi
c0025b7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025b81:	e8 5a fd ff ff       	call   c00258e0 <SATA::access(unsigned long long, int, void*, bool)>
c0025b86:	83 c4 20             	add    esp,0x20
c0025b89:	85 c0                	test   eax,eax
c0025b8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025b8f:	75 11                	jne    c0025ba2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025b91:	01 1d 34 36 03 c0    	add    DWORD PTR ds:0xc0033634,ebx
c0025b97:	e8 c8 ad fe ff       	call   c0010964 <VgaText::updateDiskUsage()>
c0025b9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025ba0:	eb 05                	jmp    c0025ba7 <SATA::read(unsigned long long, int, void*)+0x61>
c0025ba2:	b8 01 00 00 00       	mov    eax,0x1
c0025ba7:	83 c4 10             	add    esp,0x10
c0025baa:	5b                   	pop    ebx
c0025bab:	5e                   	pop    esi
c0025bac:	5f                   	pop    edi
c0025bad:	c3                   	ret    

c0025bae <SATA::write(unsigned long long, int, void*)>:
c0025bae:	55                   	push   ebp
c0025baf:	b8 04 00 00 00       	mov    eax,0x4
c0025bb4:	57                   	push   edi
c0025bb5:	56                   	push   esi
c0025bb6:	53                   	push   ebx
c0025bb7:	83 ec 1c             	sub    esp,0x1c
c0025bba:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025bbe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025bc2:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025bc5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025bc9:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0025bcd:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025bd3:	77 56                	ja     c0025c2b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025bd5:	b8 06 00 00 00       	mov    eax,0x6
c0025bda:	85 ff                	test   edi,edi
c0025bdc:	74 4d                	je     c0025c2b <SATA::write(unsigned long long, int, void*)+0x7d>
c0025bde:	89 ee                	mov    esi,ebp
c0025be0:	c1 e6 09             	shl    esi,0x9
c0025be3:	01 fe                	add    esi,edi
c0025be5:	89 c8                	mov    eax,ecx
c0025be7:	89 da                	mov    edx,ebx
c0025be9:	83 c0 01             	add    eax,0x1
c0025bec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025bf0:	83 d2 00             	adc    edx,0x0
c0025bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025bf7:	50                   	push   eax
c0025bf8:	50                   	push   eax
c0025bf9:	6a 01                	push   0x1
c0025bfb:	57                   	push   edi
c0025bfc:	81 c7 00 02 00 00    	add    edi,0x200
c0025c02:	6a 01                	push   0x1
c0025c04:	53                   	push   ebx
c0025c05:	51                   	push   ecx
c0025c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025c0a:	e8 d1 fc ff ff       	call   c00258e0 <SATA::access(unsigned long long, int, void*, bool)>
c0025c0f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025c13:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025c17:	83 c4 20             	add    esp,0x20
c0025c1a:	39 f7                	cmp    edi,esi
c0025c1c:	75 c7                	jne    c0025be5 <SATA::write(unsigned long long, int, void*)+0x37>
c0025c1e:	01 2d 30 36 03 c0    	add    DWORD PTR ds:0xc0033630,ebp
c0025c24:	e8 3b ad fe ff       	call   c0010964 <VgaText::updateDiskUsage()>
c0025c29:	31 c0                	xor    eax,eax
c0025c2b:	83 c4 1c             	add    esp,0x1c
c0025c2e:	5b                   	pop    ebx
c0025c2f:	5e                   	pop    esi
c0025c30:	5f                   	pop    edi
c0025c31:	5d                   	pop    ebp
c0025c32:	c3                   	ret    
c0025c33:	90                   	nop

c0025c34 <SATAPI::write(unsigned long long, int, void*)>:
c0025c34:	b8 03 00 00 00       	mov    eax,0x3
c0025c39:	c3                   	ret    

c0025c3a <SATAPI::close(int, int, void*)>:
c0025c3a:	83 ec 0c             	sub    esp,0xc
c0025c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c41:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025c47:	85 c0                	test   eax,eax
c0025c49:	74 0c                	je     c0025c57 <SATAPI::close(int, int, void*)+0x1d>
c0025c4b:	83 ec 0c             	sub    esp,0xc
c0025c4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0025c50:	50                   	push   eax
c0025c51:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025c54:	83 c4 10             	add    esp,0x10
c0025c57:	31 c0                	xor    eax,eax
c0025c59:	83 c4 0c             	add    esp,0xc
c0025c5c:	c3                   	ret    
c0025c5d:	90                   	nop

c0025c5e <SATAPI::SATAPI()>:
c0025c5e:	83 ec 0c             	sub    esp,0xc
c0025c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c65:	83 ec 04             	sub    esp,0x4
c0025c68:	68 00 08 00 00       	push   0x800
c0025c6d:	68 c8 dd 02 c0       	push   0xc002ddc8
c0025c72:	50                   	push   eax
c0025c73:	e8 3a ea fe ff       	call   c00146b2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025c78:	83 c4 10             	add    esp,0x10
c0025c7b:	ba 74 de 02 c0       	mov    edx,0xc002de74
c0025c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025c84:	89 10                	mov    DWORD PTR [eax],edx
c0025c86:	90                   	nop
c0025c87:	83 c4 0c             	add    esp,0xc
c0025c8a:	c3                   	ret    
c0025c8b:	90                   	nop

c0025c8c <SATAPI::diskRemoved()>:
c0025c8c:	83 ec 18             	sub    esp,0x18
c0025c8f:	68 d4 dd 02 c0       	push   0xc002ddd4
c0025c94:	e8 c6 d1 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0025c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025c9d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025ca4:	83 c4 1c             	add    esp,0x1c
c0025ca7:	c3                   	ret    

c0025ca8 <SATAPI::diskInserted()>:
c0025ca8:	53                   	push   ebx
c0025ca9:	83 ec 14             	sub    esp,0x14
c0025cac:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025cb0:	68 eb dd 02 c0       	push   0xc002ddeb
c0025cb5:	e8 a5 d1 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0025cba:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025cc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025cc4:	e8 51 ea fe ff       	call   c001471a <PhysicalDisk::startCache()>
c0025cc9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0025ccd:	83 c4 18             	add    esp,0x18
c0025cd0:	5b                   	pop    ebx
c0025cd1:	e9 24 0d ff ff       	jmp    c00169fa <createPartitionsForDisk(PhysicalDisk*)>

c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025cd6:	55                   	push   ebp
c0025cd7:	57                   	push   edi
c0025cd8:	56                   	push   esi
c0025cd9:	53                   	push   ebx
c0025cda:	83 ec 34             	sub    esp,0x34
c0025cdd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025ce1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025ce5:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025ce9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025ced:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025cf1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025cf7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025cfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025d01:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025d07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025d0b:	c1 e0 07             	shl    eax,0x7
c0025d0e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025d12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025d16:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025d20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d24:	8d 58 02             	lea    ebx,[eax+0x2]
c0025d27:	c1 e3 07             	shl    ebx,0x7
c0025d2a:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0025d2e:	53                   	push   ebx
c0025d2f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0025d35:	e8 d0 eb ff ff       	call   c002490a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025d3a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025d3e:	83 c4 10             	add    esp,0x10
c0025d41:	b8 01 00 00 00       	mov    eax,0x1
c0025d46:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025d4b:	0f 84 85 01 00 00    	je     c0025ed6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025d51:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025d59:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025d5f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025d65:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025d69:	c1 e1 05             	shl    ecx,0x5
c0025d6c:	01 c8                	add    eax,ecx
c0025d6e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025d70:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025d76:	81 c9 25 00 01 00    	or     ecx,0x10025
c0025d7c:	89 08                	mov    DWORD PTR [eax],ecx
c0025d7e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025d84:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0025d8a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025d90:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025d93:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025d96:	50                   	push   eax
c0025d97:	68 90 00 00 00       	push   0x90
c0025d9c:	6a 00                	push   0x0
c0025d9e:	53                   	push   ebx
c0025d9f:	e8 d4 a9 fd ff       	call   c0000778 <memset>
c0025da4:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025da8:	b9 0c 00 00 00       	mov    ecx,0xc
c0025dad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025daf:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025db5:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025db9:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025dbf:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025dc3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025dc7:	48                   	dec    eax
c0025dc8:	25 ff ff 3f 00       	and    eax,0x3fffff
c0025dcd:	89 c1                	mov    ecx,eax
c0025dcf:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025dd5:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025dda:	09 c8                	or     eax,ecx
c0025ddc:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025de2:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025de5:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025dec:	66 25 00 7f          	and    ax,0x7f00
c0025df0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025df4:	66 0d 27 80          	or     ax,0x8027
c0025df8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0025dfc:	66 89 03             	mov    WORD PTR [ebx],ax
c0025dff:	89 d0                	mov    eax,edx
c0025e01:	c1 ea 18             	shr    edx,0x18
c0025e04:	c1 e8 10             	shr    eax,0x10
c0025e07:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0025e0a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025e0d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0025e11:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0025e14:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0025e18:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025e1b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0025e1f:	83 c4 10             	add    esp,0x10
c0025e22:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0025e26:	31 c0                	xor    eax,eax
c0025e28:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0025e2c:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c0025e32:	80 e2 88             	and    dl,0x88
c0025e35:	74 0a                	je     c0025e41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025e37:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e3c:	74 0a                	je     c0025e48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c0025e3e:	40                   	inc    eax
c0025e3f:	eb eb                	jmp    c0025e2c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c0025e41:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025e46:	75 0f                	jne    c0025e57 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c0025e48:	83 ec 0c             	sub    esp,0xc
c0025e4b:	68 71 dd 02 c0       	push   0xc002dd71
c0025e50:	e8 a4 4a ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0025e55:	eb 3f                	jmp    c0025e96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025e57:	ba 01 00 00 00       	mov    edx,0x1
c0025e5c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025e60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025e64:	d3 e2                	shl    edx,cl
c0025e66:	c1 e0 07             	shl    eax,0x7
c0025e69:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025e6f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025e73:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025e79:	85 ca                	test   edx,ecx
c0025e7b:	74 23                	je     c0025ea0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025e7d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025e83:	0f ba e1 1e          	bt     ecx,0x1e
c0025e87:	73 ea                	jae    c0025e73 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025e89:	83 ec 0c             	sub    esp,0xc
c0025e8c:	68 03 de 02 c0       	push   0xc002de03
c0025e91:	e8 c9 cf fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0025e96:	83 c4 10             	add    esp,0x10
c0025e99:	b8 01 00 00 00       	mov    eax,0x1
c0025e9e:	eb 36                	jmp    c0025ed6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025ea0:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025ea6:	0f ba e0 1e          	bt     eax,0x1e
c0025eaa:	73 0a                	jae    c0025eb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	68 16 de 02 c0       	push   0xc002de16
c0025eb4:	eb db                	jmp    c0025e91 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025eb6:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025ebb:	74 17                	je     c0025ed4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ebd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025ec2:	74 10                	je     c0025ed4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025ec4:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025eca:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025ece:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025ed2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025ed4:	31 c0                	xor    eax,eax
c0025ed6:	83 c4 2c             	add    esp,0x2c
c0025ed9:	5b                   	pop    ebx
c0025eda:	5e                   	pop    esi
c0025edb:	5f                   	pop    edi
c0025edc:	5d                   	pop    ebp
c0025edd:	c3                   	ret    

c0025ede <SATAPI::eject()>:
c0025ede:	57                   	push   edi
c0025edf:	b9 03 00 00 00       	mov    ecx,0x3
c0025ee4:	53                   	push   ebx
c0025ee5:	83 ec 14             	sub    esp,0x14
c0025ee8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025eec:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025ef0:	fc                   	cld    
c0025ef1:	31 c0                	xor    eax,eax
c0025ef3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025ef5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025efa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025eff:	50                   	push   eax
c0025f00:	6a 00                	push   0x0
c0025f02:	6a 00                	push   0x0
c0025f04:	6a 00                	push   0x0
c0025f06:	6a 00                	push   0x0
c0025f08:	6a 02                	push   0x2
c0025f0a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025f0e:	50                   	push   eax
c0025f0f:	53                   	push   ebx
c0025f10:	e8 c1 fd ff ff       	call   c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f15:	83 c4 14             	add    esp,0x14
c0025f18:	53                   	push   ebx
c0025f19:	e8 6e fd ff ff       	call   c0025c8c <SATAPI::diskRemoved()>
c0025f1e:	83 c4 24             	add    esp,0x24
c0025f21:	31 c0                	xor    eax,eax
c0025f23:	5b                   	pop    ebx
c0025f24:	5f                   	pop    edi
c0025f25:	c3                   	ret    

c0025f26 <SATAPI::detectMedia()>:
c0025f26:	56                   	push   esi
c0025f27:	53                   	push   ebx
c0025f28:	83 ec 28             	sub    esp,0x28
c0025f2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f2f:	6a 0c                	push   0xc
c0025f31:	6a 00                	push   0x0
c0025f33:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025f37:	56                   	push   esi
c0025f38:	e8 3b a8 fd ff       	call   c0000778 <memset>
c0025f3d:	83 c4 0c             	add    esp,0xc
c0025f40:	6a 00                	push   0x0
c0025f42:	6a 00                	push   0x0
c0025f44:	6a 00                	push   0x0
c0025f46:	6a 00                	push   0x0
c0025f48:	6a 00                	push   0x0
c0025f4a:	56                   	push   esi
c0025f4b:	53                   	push   ebx
c0025f4c:	e8 85 fd ff ff       	call   c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f51:	83 c4 1c             	add    esp,0x1c
c0025f54:	6a 0c                	push   0xc
c0025f56:	6a 00                	push   0x0
c0025f58:	56                   	push   esi
c0025f59:	e8 1a a8 fd ff       	call   c0000778 <memset>
c0025f5e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025f63:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025f68:	83 c4 0c             	add    esp,0xc
c0025f6b:	6a 01                	push   0x1
c0025f6d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025f71:	50                   	push   eax
c0025f72:	6a 00                	push   0x0
c0025f74:	6a 00                	push   0x0
c0025f76:	6a 12                	push   0x12
c0025f78:	56                   	push   esi
c0025f79:	53                   	push   ebx
c0025f7a:	e8 57 fd ff ff       	call   c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025f7f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025f83:	83 c4 20             	add    esp,0x20
c0025f86:	83 e0 7f             	and    eax,0x7f
c0025f89:	3c 70                	cmp    al,0x70
c0025f8b:	74 15                	je     c0025fa2 <SATAPI::detectMedia()+0x7c>
c0025f8d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025f94:	75 0c                	jne    c0025fa2 <SATAPI::detectMedia()+0x7c>
c0025f96:	83 ec 0c             	sub    esp,0xc
c0025f99:	53                   	push   ebx
c0025f9a:	e8 09 fd ff ff       	call   c0025ca8 <SATAPI::diskInserted()>
c0025f9f:	83 c4 10             	add    esp,0x10
c0025fa2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025fa6:	83 e0 0f             	and    eax,0xf
c0025fa9:	3c 02                	cmp    al,0x2
c0025fab:	75 1b                	jne    c0025fc8 <SATAPI::detectMedia()+0xa2>
c0025fad:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025fb2:	75 2d                	jne    c0025fe1 <SATAPI::detectMedia()+0xbb>
c0025fb4:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025fbb:	74 24                	je     c0025fe1 <SATAPI::detectMedia()+0xbb>
c0025fbd:	83 ec 0c             	sub    esp,0xc
c0025fc0:	53                   	push   ebx
c0025fc1:	e8 c6 fc ff ff       	call   c0025c8c <SATAPI::diskRemoved()>
c0025fc6:	eb 16                	jmp    c0025fde <SATAPI::detectMedia()+0xb8>
c0025fc8:	84 c0                	test   al,al
c0025fca:	75 15                	jne    c0025fe1 <SATAPI::detectMedia()+0xbb>
c0025fcc:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025fd3:	75 0c                	jne    c0025fe1 <SATAPI::detectMedia()+0xbb>
c0025fd5:	83 ec 0c             	sub    esp,0xc
c0025fd8:	53                   	push   ebx
c0025fd9:	e8 ca fc ff ff       	call   c0025ca8 <SATAPI::diskInserted()>
c0025fde:	83 c4 10             	add    esp,0x10
c0025fe1:	83 c4 24             	add    esp,0x24
c0025fe4:	5b                   	pop    ebx
c0025fe5:	5e                   	pop    esi
c0025fe6:	c3                   	ret    
c0025fe7:	90                   	nop

c0025fe8 <SATAPI::open(int, int, void*)>:
c0025fe8:	56                   	push   esi
c0025fe9:	53                   	push   ebx
c0025fea:	50                   	push   eax
c0025feb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025fef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ff3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025ffd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0026003:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002600d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026011:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002601b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0026021:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0026028:	e8 f3 9e fe ff       	call   c000ff20 <Phys::allocatePage()>
c002602d:	89 c6                	mov    esi,eax
c002602f:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0026035:	81 c6 00 10 00 00    	add    esi,0x1000
c002603b:	e8 e0 9e fe ff       	call   c000ff20 <Phys::allocatePage()>
c0026040:	39 c6                	cmp    esi,eax
c0026042:	74 10                	je     c0026054 <SATAPI::open(int, int, void*)+0x6c>
c0026044:	83 ec 0c             	sub    esp,0xc
c0026047:	68 2b de 02 c0       	push   0xc002de2b
c002604c:	e8 a8 48 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0026051:	83 c4 10             	add    esp,0x10
c0026054:	83 ec 0c             	sub    esp,0xc
c0026057:	6a 02                	push   0x2
c0026059:	e8 fb b9 fe ff       	call   c0011a59 <Virt::allocateKernelVirtualPages(int)>
c002605e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0026064:	6a 03                	push   0x3
c0026066:	50                   	push   eax
c0026067:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002606d:	ff 35 50 f4 02 c0    	push   DWORD PTR ds:0xc002f450
c0026073:	e8 18 c2 fe ff       	call   c0012290 <VAS::mapPage(unsigned long, unsigned long, int)>
c0026078:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002607f:	83 c4 14             	add    esp,0x14
c0026082:	53                   	push   ebx
c0026083:	e8 9e fe ff ff       	call   c0025f26 <SATAPI::detectMedia()>
c0026088:	83 c4 14             	add    esp,0x14
c002608b:	31 c0                	xor    eax,eax
c002608d:	5b                   	pop    ebx
c002608e:	5e                   	pop    esi
c002608f:	c3                   	ret    

c0026090 <SATAPI::read(unsigned long long, int, void*)>:
c0026090:	55                   	push   ebp
c0026091:	57                   	push   edi
c0026092:	56                   	push   esi
c0026093:	53                   	push   ebx
c0026094:	83 ec 1c             	sub    esp,0x1c
c0026097:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002609b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002609f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00260a3:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00260aa:	74 19                	je     c00260c5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c00260ac:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c00260b1:	7e 2e                	jle    c00260e1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00260b3:	83 ec 0c             	sub    esp,0xc
c00260b6:	68 41 de 02 c0       	push   0xc002de41
c00260bb:	e8 39 48 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00260c0:	83 c4 10             	add    esp,0x10
c00260c3:	eb 1c                	jmp    c00260e1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00260c5:	83 ec 0c             	sub    esp,0xc
c00260c8:	55                   	push   ebp
c00260c9:	e8 58 fe ff ff       	call   c0025f26 <SATAPI::detectMedia()>
c00260ce:	83 c4 10             	add    esp,0x10
c00260d1:	b8 02 00 00 00       	mov    eax,0x2
c00260d6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00260dd:	75 cd                	jne    c00260ac <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00260df:	eb 49                	jmp    c002612a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00260e1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00260e5:	b9 03 00 00 00       	mov    ecx,0x3
c00260ea:	fc                   	cld    
c00260eb:	31 c0                	xor    eax,eax
c00260ed:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00260ef:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00260f4:	89 d8                	mov    eax,ebx
c00260f6:	86 e0                	xchg   al,ah
c00260f8:	c1 c0 10             	rol    eax,0x10
c00260fb:	86 e0                	xchg   al,ah
c00260fd:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0026101:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0026105:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0026109:	50                   	push   eax
c002610a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002610e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0026112:	56                   	push   esi
c0026113:	53                   	push   ebx
c0026114:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0026118:	c1 e0 0b             	shl    eax,0xb
c002611b:	50                   	push   eax
c002611c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0026120:	50                   	push   eax
c0026121:	55                   	push   ebp
c0026122:	e8 af fb ff ff       	call   c0025cd6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0026127:	83 c4 20             	add    esp,0x20
c002612a:	83 c4 1c             	add    esp,0x1c
c002612d:	5b                   	pop    ebx
c002612e:	5e                   	pop    esi
c002612f:	5f                   	pop    edi
c0026130:	5d                   	pop    ebp
c0026131:	c3                   	ret    

c0026132 <AVX::open(int, int, void*)>:
c0026132:	83 ec 0c             	sub    esp,0xc
c0026135:	e8 3e 11 00 00       	call   c0027278 <avxInit>
c002613a:	b8 00 00 00 00       	mov    eax,0x0
c002613f:	83 c4 0c             	add    esp,0xc
c0026142:	c3                   	ret    
c0026143:	90                   	nop

c0026144 <AVX::close(int, int, void*)>:
c0026144:	83 ec 0c             	sub    esp,0xc
c0026147:	e8 2d 11 00 00       	call   c0027279 <avxClose>
c002614c:	b8 00 00 00 00       	mov    eax,0x0
c0026151:	83 c4 0c             	add    esp,0xc
c0026154:	c3                   	ret    
c0026155:	90                   	nop

c0026156 <AVX::available()>:
c0026156:	83 ec 0c             	sub    esp,0xc
c0026159:	e8 12 11 00 00       	call   c0027270 <avxDetect>
c002615e:	85 c0                	test   eax,eax
c0026160:	0f 95 c0             	setne  al
c0026163:	83 c4 0c             	add    esp,0xc
c0026166:	c3                   	ret    
c0026167:	90                   	nop

c0026168 <AVX::save(void*)>:
c0026168:	83 ec 0c             	sub    esp,0xc
c002616b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002616f:	83 ec 0c             	sub    esp,0xc
c0026172:	50                   	push   eax
c0026173:	e8 fe 10 00 00       	call   c0027276 <avxSave>
c0026178:	83 c4 10             	add    esp,0x10
c002617b:	90                   	nop
c002617c:	83 c4 0c             	add    esp,0xc
c002617f:	c3                   	ret    

c0026180 <AVX::load(void*)>:
c0026180:	83 ec 0c             	sub    esp,0xc
c0026183:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026187:	83 ec 0c             	sub    esp,0xc
c002618a:	50                   	push   eax
c002618b:	e8 e7 10 00 00       	call   c0027277 <avxLoad>
c0026190:	83 c4 10             	add    esp,0x10
c0026193:	90                   	nop
c0026194:	83 c4 0c             	add    esp,0xc
c0026197:	c3                   	ret    

c0026198 <AVX::AVX()>:
c0026198:	83 ec 0c             	sub    esp,0xc
c002619b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002619f:	83 ec 08             	sub    esp,0x8
c00261a2:	68 a4 de 02 c0       	push   0xc002dea4
c00261a7:	50                   	push   eax
c00261a8:	e8 e3 e5 fe ff       	call   c0014790 <FPU::FPU(char const*)>
c00261ad:	83 c4 10             	add    esp,0x10
c00261b0:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c00261b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b9:	89 10                	mov    DWORD PTR [eax],edx
c00261bb:	90                   	nop
c00261bc:	83 c4 0c             	add    esp,0xc
c00261bf:	c3                   	ret    

c00261c0 <MMX::available()>:
c00261c0:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00261c5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00261cb:	83 e0 20             	and    eax,0x20
c00261ce:	84 c0                	test   al,al
c00261d0:	0f 95 c0             	setne  al
c00261d3:	c3                   	ret    

c00261d4 <MMX::open(int, int, void*)>:
c00261d4:	83 ec 0c             	sub    esp,0xc
c00261d7:	e8 26 11 00 00       	call   c0027302 <x87Init>
c00261dc:	b8 00 00 00 00       	mov    eax,0x0
c00261e1:	83 c4 0c             	add    esp,0xc
c00261e4:	c3                   	ret    
c00261e5:	90                   	nop

c00261e6 <MMX::close(int, int, void*)>:
c00261e6:	83 ec 0c             	sub    esp,0xc
c00261e9:	e8 2e 11 00 00       	call   c002731c <x87Close>
c00261ee:	b8 00 00 00 00       	mov    eax,0x0
c00261f3:	83 c4 0c             	add    esp,0xc
c00261f6:	c3                   	ret    
c00261f7:	90                   	nop

c00261f8 <MMX::save(void*)>:
c00261f8:	83 ec 0c             	sub    esp,0xc
c00261fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00261ff:	83 ec 0c             	sub    esp,0xc
c0026202:	50                   	push   eax
c0026203:	e8 e9 10 00 00       	call   c00272f1 <x87Save>
c0026208:	83 c4 10             	add    esp,0x10
c002620b:	90                   	nop
c002620c:	83 c4 0c             	add    esp,0xc
c002620f:	c3                   	ret    

c0026210 <MMX::load(void*)>:
c0026210:	83 ec 0c             	sub    esp,0xc
c0026213:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026217:	83 ec 0c             	sub    esp,0xc
c002621a:	50                   	push   eax
c002621b:	e8 da 10 00 00       	call   c00272fa <x87Load>
c0026220:	83 c4 10             	add    esp,0x10
c0026223:	90                   	nop
c0026224:	83 c4 0c             	add    esp,0xc
c0026227:	c3                   	ret    

c0026228 <MMX::MMX()>:
c0026228:	83 ec 0c             	sub    esp,0xc
c002622b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002622f:	83 ec 08             	sub    esp,0x8
c0026232:	68 e4 de 02 c0       	push   0xc002dee4
c0026237:	50                   	push   eax
c0026238:	e8 53 e5 fe ff       	call   c0014790 <FPU::FPU(char const*)>
c002623d:	83 c4 10             	add    esp,0x10
c0026240:	ba f4 de 02 c0       	mov    edx,0xc002def4
c0026245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026249:	89 10                	mov    DWORD PTR [eax],edx
c002624b:	90                   	nop
c002624c:	83 c4 0c             	add    esp,0xc
c002624f:	c3                   	ret    

c0026250 <SSE::open(int, int, void*)>:
c0026250:	83 ec 0c             	sub    esp,0xc
c0026253:	e8 5c 10 00 00       	call   c00272b4 <sseInit>
c0026258:	b8 00 00 00 00       	mov    eax,0x0
c002625d:	83 c4 0c             	add    esp,0xc
c0026260:	c3                   	ret    
c0026261:	90                   	nop

c0026262 <SSE::close(int, int, void*)>:
c0026262:	83 ec 0c             	sub    esp,0xc
c0026265:	e8 5a 10 00 00       	call   c00272c4 <sseClose>
c002626a:	b8 00 00 00 00       	mov    eax,0x0
c002626f:	83 c4 0c             	add    esp,0xc
c0026272:	c3                   	ret    
c0026273:	90                   	nop

c0026274 <SSE::available()>:
c0026274:	83 ec 1c             	sub    esp,0x1c
c0026277:	e8 14 10 00 00       	call   c0027290 <absolutelyNoChanceInHell>
c002627c:	85 c0                	test   eax,eax
c002627e:	0f 95 c0             	setne  al
c0026281:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0026285:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0026289:	83 c4 1c             	add    esp,0x1c
c002628c:	c3                   	ret    
c002628d:	90                   	nop

c002628e <SSE::save(void*)>:
c002628e:	83 ec 0c             	sub    esp,0xc
c0026291:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026295:	83 ec 0c             	sub    esp,0xc
c0026298:	50                   	push   eax
c0026299:	e8 0a 10 00 00       	call   c00272a8 <sseSave>
c002629e:	83 c4 10             	add    esp,0x10
c00262a1:	90                   	nop
c00262a2:	83 c4 0c             	add    esp,0xc
c00262a5:	c3                   	ret    

c00262a6 <SSE::load(void*)>:
c00262a6:	83 ec 0c             	sub    esp,0xc
c00262a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262ad:	83 ec 0c             	sub    esp,0xc
c00262b0:	50                   	push   eax
c00262b1:	e8 f8 0f 00 00       	call   c00272ae <sseLoad>
c00262b6:	83 c4 10             	add    esp,0x10
c00262b9:	90                   	nop
c00262ba:	83 c4 0c             	add    esp,0xc
c00262bd:	c3                   	ret    

c00262be <SSE::SSE()>:
c00262be:	83 ec 0c             	sub    esp,0xc
c00262c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262c5:	83 ec 08             	sub    esp,0x8
c00262c8:	68 24 df 02 c0       	push   0xc002df24
c00262cd:	50                   	push   eax
c00262ce:	e8 bd e4 fe ff       	call   c0014790 <FPU::FPU(char const*)>
c00262d3:	83 c4 10             	add    esp,0x10
c00262d6:	ba 34 df 02 c0       	mov    edx,0xc002df34
c00262db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00262df:	89 10                	mov    DWORD PTR [eax],edx
c00262e1:	90                   	nop
c00262e2:	83 c4 0c             	add    esp,0xc
c00262e5:	c3                   	ret    

c00262e6 <x87::open(int, int, void*)>:
c00262e6:	83 ec 0c             	sub    esp,0xc
c00262e9:	e8 14 10 00 00       	call   c0027302 <x87Init>
c00262ee:	b8 00 00 00 00       	mov    eax,0x0
c00262f3:	83 c4 0c             	add    esp,0xc
c00262f6:	c3                   	ret    
c00262f7:	90                   	nop

c00262f8 <x87::close(int, int, void*)>:
c00262f8:	83 ec 0c             	sub    esp,0xc
c00262fb:	e8 1c 10 00 00       	call   c002731c <x87Close>
c0026300:	b8 00 00 00 00       	mov    eax,0x0
c0026305:	83 c4 0c             	add    esp,0xc
c0026308:	c3                   	ret    
c0026309:	90                   	nop

c002630a <x87::available()>:
c002630a:	83 ec 0c             	sub    esp,0xc
c002630d:	e8 c4 0f 00 00       	call   c00272d6 <x87Detect>
c0026312:	85 c0                	test   eax,eax
c0026314:	0f 95 c0             	setne  al
c0026317:	83 c4 0c             	add    esp,0xc
c002631a:	c3                   	ret    
c002631b:	90                   	nop

c002631c <x87::save(void*)>:
c002631c:	83 ec 0c             	sub    esp,0xc
c002631f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026323:	83 ec 0c             	sub    esp,0xc
c0026326:	50                   	push   eax
c0026327:	e8 c5 0f 00 00       	call   c00272f1 <x87Save>
c002632c:	83 c4 10             	add    esp,0x10
c002632f:	90                   	nop
c0026330:	83 c4 0c             	add    esp,0xc
c0026333:	c3                   	ret    

c0026334 <x87::load(void*)>:
c0026334:	83 ec 0c             	sub    esp,0xc
c0026337:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002633b:	83 ec 0c             	sub    esp,0xc
c002633e:	50                   	push   eax
c002633f:	e8 b6 0f 00 00       	call   c00272fa <x87Load>
c0026344:	83 c4 10             	add    esp,0x10
c0026347:	90                   	nop
c0026348:	83 c4 0c             	add    esp,0xc
c002634b:	c3                   	ret    

c002634c <x87::x87()>:
c002634c:	83 ec 0c             	sub    esp,0xc
c002634f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026353:	83 ec 08             	sub    esp,0x8
c0026356:	68 64 df 02 c0       	push   0xc002df64
c002635b:	50                   	push   eax
c002635c:	e8 2f e4 fe ff       	call   c0014790 <FPU::FPU(char const*)>
c0026361:	83 c4 10             	add    esp,0x10
c0026364:	ba 74 df 02 c0       	mov    edx,0xc002df74
c0026369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002636d:	89 10                	mov    DWORD PTR [eax],edx
c002636f:	90                   	nop
c0026370:	83 c4 0c             	add    esp,0xc
c0026373:	c3                   	ret    

c0026374 <APIC::disable()>:
c0026374:	90                   	nop
c0026375:	c3                   	ret    

c0026376 <APIC::close(int, int, void*)>:
c0026376:	55                   	push   ebp
c0026377:	89 e5                	mov    ebp,esp
c0026379:	83 ec 08             	sub    esp,0x8
c002637c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002637f:	8b 00                	mov    eax,DWORD PTR [eax]
c0026381:	83 c0 3c             	add    eax,0x3c
c0026384:	8b 00                	mov    eax,DWORD PTR [eax]
c0026386:	83 ec 0c             	sub    esp,0xc
c0026389:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002638c:	ff d0                	call   eax
c002638e:	83 c4 10             	add    esp,0x10
c0026391:	b8 00 00 00 00       	mov    eax,0x0
c0026396:	c9                   	leave  
c0026397:	c3                   	ret    

c0026398 <IOAPIC::close(int, int, void*)>:
c0026398:	b8 00 00 00 00       	mov    eax,0x0
c002639d:	c3                   	ret    

c002639e <APIC::io_wait()>:
c002639e:	eb 00                	jmp    c00263a0 <APIC::io_wait()+0x2>
c00263a0:	eb 00                	jmp    c00263a2 <APIC::io_wait()+0x4>
c00263a2:	90                   	nop
c00263a3:	c3                   	ret    

c00263a4 <APIC::getBase()>:
c00263a4:	55                   	push   ebp
c00263a5:	89 e5                	mov    ebp,esp
c00263a7:	83 ec 18             	sub    esp,0x18
c00263aa:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00263af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00263b5:	83 e0 08             	and    eax,0x8
c00263b8:	84 c0                	test   al,al
c00263ba:	75 07                	jne    c00263c3 <APIC::getBase()+0x1f>
c00263bc:	b8 00 00 00 00       	mov    eax,0x0
c00263c1:	eb 21                	jmp    c00263e4 <APIC::getBase()+0x40>
c00263c3:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c00263c8:	83 ec 08             	sub    esp,0x8
c00263cb:	6a 1b                	push   0x1b
c00263cd:	50                   	push   eax
c00263ce:	e8 87 8a fe ff       	call   c000ee5a <Computer::rdmsr(unsigned int)>
c00263d3:	83 c4 10             	add    esp,0x10
c00263d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263d9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00263dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263df:	25 00 f0 ff ff       	and    eax,0xfffff000
c00263e4:	c9                   	leave  
c00263e5:	c3                   	ret    

c00263e6 <APIC::eoi(unsigned char)>:
c00263e6:	55                   	push   ebp
c00263e7:	89 e5                	mov    ebp,esp
c00263e9:	83 ec 28             	sub    esp,0x28
c00263ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00263ef:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263f2:	83 ec 0c             	sub    esp,0xc
c00263f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f8:	e8 a7 ff ff ff       	call   c00263a4 <APIC::getBase()>
c00263fd:	83 c4 10             	add    esp,0x10
c0026400:	05 b0 00 00 00       	add    eax,0xb0
c0026405:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002640b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0026411:	90                   	nop
c0026412:	c9                   	leave  
c0026413:	c3                   	ret    

c0026414 <APIC::open(int, int, void*)>:
c0026414:	55                   	push   ebp
c0026415:	89 e5                	mov    ebp,esp
c0026417:	57                   	push   edi
c0026418:	56                   	push   esi
c0026419:	53                   	push   ebx
c002641a:	83 ec 2c             	sub    esp,0x2c
c002641d:	83 ec 0c             	sub    esp,0xc
c0026420:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026423:	e8 7c ff ff ff       	call   c00263a4 <APIC::getBase()>
c0026428:	83 c4 10             	add    esp,0x10
c002642b:	89 c2                	mov    edx,eax
c002642d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026430:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026436:	0f b6 f8             	movzx  edi,al
c0026439:	89 d0                	mov    eax,edx
c002643b:	ba 00 00 00 00       	mov    edx,0x0
c0026440:	89 c1                	mov    ecx,eax
c0026442:	80 e5 ff             	and    ch,0xff
c0026445:	89 cb                	mov    ebx,ecx
c0026447:	0f b6 f2             	movzx  esi,dl
c002644a:	89 d8                	mov    eax,ebx
c002644c:	89 f2                	mov    edx,esi
c002644e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026451:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026454:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026458:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002645c:	83 e0 00             	and    eax,0x0
c002645f:	09 d0                	or     eax,edx
c0026461:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026468:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002646e:	8d 50 01             	lea    edx,[eax+0x1]
c0026471:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026474:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002647a:	0f b6 d0             	movzx  edx,al
c002647d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026480:	83 c2 08             	add    edx,0x8
c0026483:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026487:	0f b6 c9             	movzx  ecx,cl
c002648a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026490:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026494:	83 ec 0c             	sub    esp,0xc
c0026497:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002649a:	e8 05 ff ff ff       	call   c00263a4 <APIC::getBase()>
c002649f:	83 c4 10             	add    esp,0x10
c00264a2:	05 f0 00 00 00       	add    eax,0xf0
c00264a7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00264aa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00264ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00264af:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00264b2:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c00264b9:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00264c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00264c3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00264c6:	89 10                	mov    DWORD PTR [eax],edx
c00264c8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00264cf:	a1 b0 1b 03 c0       	mov    eax,ds:0xc0031bb0
c00264d4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00264d7:	7d 7c                	jge    c0026555 <APIC::open(int, int, void*)+0x141>
c00264d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264dc:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00264e3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00264e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264e9:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c00264f0:	c1 e8 08             	shr    eax,0x8
c00264f3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00264f7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264fa:	8b 04 85 c0 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce440]
c0026501:	c1 e8 18             	shr    eax,0x18
c0026504:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026507:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002650b:	75 40                	jne    c002654d <APIC::open(int, int, void*)+0x139>
c002650d:	83 ec 0c             	sub    esp,0xc
c0026510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026513:	e8 8c fe ff ff       	call   c00263a4 <APIC::getBase()>
c0026518:	83 c4 10             	add    esp,0x10
c002651b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002651f:	75 07                	jne    c0026528 <APIC::open(int, int, void*)+0x114>
c0026521:	ba 60 03 00 00       	mov    edx,0x360
c0026526:	eb 05                	jmp    c002652d <APIC::open(int, int, void*)+0x119>
c0026528:	ba 50 03 00 00       	mov    edx,0x350
c002652d:	01 d0                	add    eax,edx
c002652f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0026532:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026535:	8b 00                	mov    eax,DWORD PTR [eax]
c0026537:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002653a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0026541:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0026545:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026548:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002654b:	89 10                	mov    DWORD PTR [eax],edx
c002654d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026550:	e9 7a ff ff ff       	jmp    c00264cf <APIC::open(int, int, void*)+0xbb>
c0026555:	b8 00 00 00 00       	mov    eax,0x0
c002655a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002655d:	5b                   	pop    ebx
c002655e:	5e                   	pop    esi
c002655f:	5f                   	pop    edi
c0026560:	5d                   	pop    ebp
c0026561:	c3                   	ret    

c0026562 <IOAPIC::IOAPIC()>:
c0026562:	83 ec 0c             	sub    esp,0xc
c0026565:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026569:	83 ec 08             	sub    esp,0x8
c002656c:	68 a4 df 02 c0       	push   0xc002dfa4
c0026571:	50                   	push   eax
c0026572:	e8 f9 de fe ff       	call   c0014470 <Device::Device(char const*)>
c0026577:	83 c4 10             	add    esp,0x10
c002657a:	ba cc e0 02 c0       	mov    edx,0xc002e0cc
c002657f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026583:	89 10                	mov    DWORD PTR [eax],edx
c0026585:	90                   	nop
c0026586:	83 c4 0c             	add    esp,0xc
c0026589:	c3                   	ret    

c002658a <APIC::APIC()>:
c002658a:	53                   	push   ebx
c002658b:	83 ec 18             	sub    esp,0x18
c002658e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026592:	83 ec 08             	sub    esp,0x8
c0026595:	68 ac df 02 c0       	push   0xc002dfac
c002659a:	50                   	push   eax
c002659b:	e8 4a e6 fe ff       	call   c0014bea <InterruptController::InterruptController(char const*)>
c00265a0:	83 c4 10             	add    esp,0x10
c00265a3:	ba 84 e0 02 c0       	mov    edx,0xc002e084
c00265a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00265ac:	89 10                	mov    DWORD PTR [eax],edx
c00265ae:	a0 80 36 03 c0       	mov    al,ds:0xc0033680
c00265b3:	83 f0 01             	xor    eax,0x1
c00265b6:	84 c0                	test   al,al
c00265b8:	0f 84 a1 00 00 00    	je     c002665f <APIC::APIC()+0xd5>
c00265be:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00265c3:	a0 60 1c 03 c0       	mov    al,ds:0xc0031c60
c00265c8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00265cc:	0f 83 86 00 00 00    	jae    c0026658 <APIC::APIC()+0xce>
c00265d2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00265da:	83 ec 0c             	sub    esp,0xc
c00265dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00265e1:	e8 ce 92 fe ff       	call   c000f8b4 <malloc>
c00265e6:	83 c4 10             	add    esp,0x10
c00265e9:	89 c3                	mov    ebx,eax
c00265eb:	83 ec 0c             	sub    esp,0xc
c00265ee:	53                   	push   ebx
c00265ef:	e8 6e ff ff ff       	call   c0026562 <IOAPIC::IOAPIC()>
c00265f4:	83 c4 10             	add    esp,0x10
c00265f7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00265fb:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026600:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026604:	89 14 85 60 36 03 c0 	mov    DWORD PTR [eax*4-0x3ffcc9a0],edx
c002660b:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c0026610:	40                   	inc    eax
c0026611:	a3 40 36 03 c0       	mov    ds:0xc0033640,eax
c0026616:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c002661b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0026621:	83 ec 08             	sub    esp,0x8
c0026624:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026628:	50                   	push   eax
c0026629:	e8 52 dc fe ff       	call   c0014280 <Device::addChild(Device*)>
c002662e:	83 c4 10             	add    esp,0x10
c0026631:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026635:	8b 00                	mov    eax,DWORD PTR [eax]
c0026637:	83 c0 08             	add    eax,0x8
c002663a:	8b 00                	mov    eax,DWORD PTR [eax]
c002663c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0026641:	6a 00                	push   0x0
c0026643:	6a 00                	push   0x0
c0026645:	52                   	push   edx
c0026646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002664a:	ff d0                	call   eax
c002664c:	83 c4 10             	add    esp,0x10
c002664f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026653:	e9 6b ff ff ff       	jmp    c00265c3 <APIC::APIC()+0x39>
c0026658:	c6 05 80 36 03 c0 01 	mov    BYTE PTR ds:0xc0033680,0x1
c002665f:	90                   	nop
c0026660:	83 c4 18             	add    esp,0x18
c0026663:	5b                   	pop    ebx
c0026664:	c3                   	ret    
c0026665:	90                   	nop

c0026666 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026666:	55                   	push   ebp
c0026667:	89 e5                	mov    ebp,esp
c0026669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002666c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026672:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026675:	72 1d                	jb     c0026694 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002667a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026680:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026683:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026689:	01 d0                	add    eax,edx
c002668b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002668e:	73 04                	jae    c0026694 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026690:	b0 01                	mov    al,0x1
c0026692:	eb 02                	jmp    c0026696 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026694:	b0 00                	mov    al,0x0
c0026696:	5d                   	pop    ebp
c0026697:	c3                   	ret    

c0026698 <IOAPIC::read(int)>:
c0026698:	55                   	push   ebp
c0026699:	89 e5                	mov    ebp,esp
c002669b:	83 ec 10             	sub    esp,0x10
c002669e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266a1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00266a7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00266aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00266ad:	0f b6 d0             	movzx  edx,al
c00266b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00266b3:	89 10                	mov    DWORD PTR [eax],edx
c00266b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00266b8:	83 c0 10             	add    eax,0x10
c00266bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00266bd:	c9                   	leave  
c00266be:	c3                   	ret    
c00266bf:	90                   	nop

c00266c0 <IOAPIC::open(int, int, void*)>:
c00266c0:	55                   	push   ebp
c00266c1:	89 e5                	mov    ebp,esp
c00266c3:	57                   	push   edi
c00266c4:	56                   	push   esi
c00266c5:	53                   	push   ebx
c00266c6:	83 ec 0c             	sub    esp,0xc
c00266c9:	83 ec 0c             	sub    esp,0xc
c00266cc:	68 d7 df 02 c0       	push   0xc002dfd7
c00266d1:	e8 89 c7 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c00266d6:	83 c4 10             	add    esp,0x10
c00266d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00266df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00266e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00266ee:	8b 14 85 a0 1c 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce360]
c00266f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00266f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00266fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026701:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026707:	8b 14 85 20 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce2e0]
c002670e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026711:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0026717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002671a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0026720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026723:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026729:	0f b6 f8             	movzx  edi,al
c002672c:	89 d0                	mov    eax,edx
c002672e:	ba 00 00 00 00       	mov    edx,0x0
c0026733:	89 c1                	mov    ecx,eax
c0026735:	80 e5 ff             	and    ch,0xff
c0026738:	89 cb                	mov    ebx,ecx
c002673a:	0f b6 f2             	movzx  esi,dl
c002673d:	89 d8                	mov    eax,ebx
c002673f:	89 f2                	mov    edx,esi
c0026741:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026744:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026747:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002674b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002674f:	83 e0 00             	and    eax,0x0
c0026752:	09 d0                	or     eax,edx
c0026754:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002675b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026761:	8d 50 01             	lea    edx,[eax+0x1]
c0026764:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026767:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002676d:	0f b6 d0             	movzx  edx,al
c0026770:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026773:	83 c2 08             	add    edx,0x8
c0026776:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002677a:	0f b6 c9             	movzx  ecx,cl
c002677d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026783:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026787:	83 ec 08             	sub    esp,0x8
c002678a:	6a 01                	push   0x1
c002678c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002678f:	e8 04 ff ff ff       	call   c0026698 <IOAPIC::read(int)>
c0026794:	83 c4 10             	add    esp,0x10
c0026797:	c1 f8 10             	sar    eax,0x10
c002679a:	0f b6 c0             	movzx  eax,al
c002679d:	8d 50 01             	lea    edx,[eax+0x1]
c00267a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267a3:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00267a9:	b8 00 00 00 00       	mov    eax,0x0
c00267ae:	8d 65 f4             	lea    esp,[ebp-0xc]
c00267b1:	5b                   	pop    ebx
c00267b2:	5e                   	pop    esi
c00267b3:	5f                   	pop    edi
c00267b4:	5d                   	pop    ebp
c00267b5:	c3                   	ret    

c00267b6 <IOAPIC::write(int, int)>:
c00267b6:	55                   	push   ebp
c00267b7:	89 e5                	mov    ebp,esp
c00267b9:	83 ec 10             	sub    esp,0x10
c00267bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00267bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00267c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00267c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267cb:	0f b6 d0             	movzx  edx,al
c00267ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267d1:	89 10                	mov    DWORD PTR [eax],edx
c00267d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00267d6:	8d 50 10             	lea    edx,[eax+0x10]
c00267d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267dc:	89 02                	mov    DWORD PTR [edx],eax
c00267de:	90                   	nop
c00267df:	c9                   	leave  
c00267e0:	c3                   	ret    
c00267e1:	90                   	nop

c00267e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00267e2:	55                   	push   ebp
c00267e3:	89 e5                	mov    ebp,esp
c00267e5:	53                   	push   ebx
c00267e6:	83 ec 2c             	sub    esp,0x2c
c00267e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267ec:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00267ef:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00267f2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00267f5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00267f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00267fb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00267fe:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026801:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026804:	88 d8                	mov    al,bl
c0026806:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026809:	88 c8                	mov    al,cl
c002680b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002680e:	88 d0                	mov    al,dl
c0026810:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0026813:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026817:	83 c0 08             	add    eax,0x8
c002681a:	01 c0                	add    eax,eax
c002681c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002681f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026823:	83 c0 08             	add    eax,0x8
c0026826:	01 c0                	add    eax,eax
c0026828:	40                   	inc    eax
c0026829:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002682c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002682f:	50                   	push   eax
c0026830:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026833:	e8 60 fe ff ff       	call   c0026698 <IOAPIC::read(int)>
c0026838:	83 c4 08             	add    esp,0x8
c002683b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002683e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0026845:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0026848:	c1 e0 18             	shl    eax,0x18
c002684b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002684e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026851:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026854:	52                   	push   edx
c0026855:	50                   	push   eax
c0026856:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026859:	e8 58 ff ff ff       	call   c00267b6 <IOAPIC::write(int, int)>
c002685e:	83 c4 0c             	add    esp,0xc
c0026861:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026864:	50                   	push   eax
c0026865:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026868:	e8 2b fe ff ff       	call   c0026698 <IOAPIC::read(int)>
c002686d:	83 c4 08             	add    esp,0x8
c0026870:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026873:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002687a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026881:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026888:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002688c:	74 09                	je     c0026897 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002688e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026895:	eb 07                	jmp    c002689e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026897:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002689e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c00268a2:	74 09                	je     c00268ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c00268a4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00268ab:	eb 07                	jmp    c00268b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c00268ad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00268b4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00268bb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00268bf:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00268c2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00268c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268c8:	52                   	push   edx
c00268c9:	50                   	push   eax
c00268ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268cd:	e8 e4 fe ff ff       	call   c00267b6 <IOAPIC::write(int, int)>
c00268d2:	83 c4 0c             	add    esp,0xc
c00268d5:	90                   	nop
c00268d6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00268d9:	c9                   	leave  
c00268da:	c3                   	ret    
c00268db:	90                   	nop

c00268dc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00268dc:	55                   	push   ebp
c00268dd:	89 e5                	mov    ebp,esp
c00268df:	57                   	push   edi
c00268e0:	56                   	push   esi
c00268e1:	53                   	push   ebx
c00268e2:	83 ec 2c             	sub    esp,0x2c
c00268e5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268e8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00268eb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00268ef:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00268f3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00268f7:	74 5a                	je     c0026953 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00268f9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00268fd:	7f 44                	jg     c0026943 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00268ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026902:	05 20 e5 02 c0       	add    eax,0xc002e520
c0026907:	8a 00                	mov    al,BYTE PTR [eax]
c0026909:	0f b6 c0             	movzx  eax,al
c002690c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002690f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026912:	66 8b 84 00 40 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3c0]
c002691a:	0f b7 c0             	movzx  eax,ax
c002691d:	83 e0 02             	and    eax,0x2
c0026920:	85 c0                	test   eax,eax
c0026922:	74 04                	je     c0026928 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0026924:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0026928:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002692b:	66 8b 84 00 40 1c 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce3c0]
c0026933:	0f b7 c0             	movzx  eax,ax
c0026936:	83 e0 08             	and    eax,0x8
c0026939:	85 c0                	test   eax,eax
c002693b:	74 16                	je     c0026953 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002693d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0026941:	eb 10                	jmp    c0026953 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026943:	83 ec 0c             	sub    esp,0xc
c0026946:	68 e8 df 02 c0       	push   0xc002dfe8
c002694b:	e8 a9 3f ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0026950:	83 c4 10             	add    esp,0x10
c0026953:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026957:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c002695c:	83 ec 08             	sub    esp,0x8
c002695f:	50                   	push   eax
c0026960:	68 20 e0 02 c0       	push   0xc002e020
c0026965:	e8 f5 c4 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c002696a:	83 c4 10             	add    esp,0x10
c002696d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026974:	a1 40 36 03 c0       	mov    eax,ds:0xc0033640
c0026979:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002697c:	7d 67                	jge    c00269e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002697e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026981:	8b 04 85 60 36 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcc9a0]
c0026988:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002698b:	83 ec 08             	sub    esp,0x8
c002698e:	52                   	push   edx
c002698f:	50                   	push   eax
c0026990:	e8 d1 fc ff ff       	call   c0026666 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026995:	83 c4 10             	add    esp,0x10
c0026998:	84 c0                	test   al,al
c002699a:	74 44                	je     c00269e0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002699c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002699f:	8b 1c 85 60 36 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcc9a0]
c00269a6:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c00269aa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00269ad:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c00269b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00269b4:	83 c0 20             	add    eax,0x20
c00269b7:	0f b6 f0             	movzx  esi,al
c00269ba:	b8 00 00 00 00       	mov    eax,0x0
c00269bf:	99                   	cdq    
c00269c0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00269c3:	0f b6 c9             	movzx  ecx,cl
c00269c6:	83 ec 04             	sub    esp,0x4
c00269c9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00269cc:	57                   	push   edi
c00269cd:	56                   	push   esi
c00269ce:	52                   	push   edx
c00269cf:	50                   	push   eax
c00269d0:	51                   	push   ecx
c00269d1:	53                   	push   ebx
c00269d2:	e8 0b fe ff ff       	call   c00267e2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00269d7:	83 c4 20             	add    esp,0x20
c00269da:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00269de:	eb 05                	jmp    c00269e5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00269e0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00269e3:	eb 8f                	jmp    c0026974 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00269e5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00269e8:	83 f0 01             	xor    eax,0x1
c00269eb:	84 c0                	test   al,al
c00269ed:	74 10                	je     c00269ff <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00269ef:	83 ec 0c             	sub    esp,0xc
c00269f2:	68 37 e0 02 c0       	push   0xc002e037
c00269f7:	e8 fd 3e ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00269fc:	83 c4 10             	add    esp,0x10
c00269ff:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026a03:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0026a0a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0026a0e:	7f 65                	jg     c0026a75 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0026a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a13:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a16:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a1d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a20:	01 ca                	add    edx,ecx
c0026a22:	83 c2 54             	add    edx,0x54
c0026a25:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0026a29:	85 c0                	test   eax,eax
c0026a2b:	75 43                	jne    c0026a70 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0026a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a30:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a33:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a3a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a3d:	01 ca                	add    edx,ecx
c0026a3f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0026a42:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0026a45:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026a4c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026a4f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026a56:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026a59:	01 ca                	add    edx,ecx
c0026a5b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026a61:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026a64:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026a68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026a6b:	83 e8 20             	sub    eax,0x20
c0026a6e:	eb 1a                	jmp    c0026a8a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026a70:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026a73:	eb 95                	jmp    c0026a0a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026a75:	83 ec 0c             	sub    esp,0xc
c0026a78:	68 44 e0 02 c0       	push   0xc002e044
c0026a7d:	e8 77 3e ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0026a82:	83 c4 10             	add    esp,0x10
c0026a85:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026a8a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026a8d:	5b                   	pop    ebx
c0026a8e:	5e                   	pop    esi
c0026a8f:	5f                   	pop    edi
c0026a90:	5d                   	pop    ebp
c0026a91:	c3                   	ret    

c0026a92 <PIC::disable()>:
c0026a92:	55                   	push   ebp
c0026a93:	89 e5                	mov    ebp,esp
c0026a95:	83 ec 10             	sub    esp,0x10
c0026a98:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0026a9e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026aa2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026aa5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026aa9:	ee                   	out    dx,al
c0026aaa:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026ab0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026ab4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026ab7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0026abb:	ee                   	out    dx,al
c0026abc:	90                   	nop
c0026abd:	c9                   	leave  
c0026abe:	c3                   	ret    
c0026abf:	90                   	nop

c0026ac0 <PIC::close(int, int, void*)>:
c0026ac0:	55                   	push   ebp
c0026ac1:	89 e5                	mov    ebp,esp
c0026ac3:	83 ec 08             	sub    esp,0x8
c0026ac6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026ac9:	8b 00                	mov    eax,DWORD PTR [eax]
c0026acb:	83 c0 3c             	add    eax,0x3c
c0026ace:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ad0:	83 ec 0c             	sub    esp,0xc
c0026ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026ad6:	ff d0                	call   eax
c0026ad8:	83 c4 10             	add    esp,0x10
c0026adb:	b8 00 00 00 00       	mov    eax,0x0
c0026ae0:	c9                   	leave  
c0026ae1:	c3                   	ret    

c0026ae2 <PIC::PIC()>:
c0026ae2:	83 ec 0c             	sub    esp,0xc
c0026ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ae9:	83 ec 08             	sub    esp,0x8
c0026aec:	68 f0 e0 02 c0       	push   0xc002e0f0
c0026af1:	50                   	push   eax
c0026af2:	e8 f3 e0 fe ff       	call   c0014bea <InterruptController::InterruptController(char const*)>
c0026af7:	83 c4 10             	add    esp,0x10
c0026afa:	ba 1c e1 02 c0       	mov    edx,0xc002e11c
c0026aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b03:	89 10                	mov    DWORD PTR [eax],edx
c0026b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b09:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b0f:	0f b6 d0             	movzx  edx,al
c0026b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b16:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0026b1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b21:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b27:	0f b6 d0             	movzx  edx,al
c0026b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b2e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b3d:	8d 50 01             	lea    edx,[eax+0x1]
c0026b40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b44:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026b4a:	0f b6 d0             	movzx  edx,al
c0026b4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b51:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026b55:	83 e1 3f             	and    ecx,0x3f
c0026b58:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b60:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b66:	0f b6 d0             	movzx  edx,al
c0026b69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b6d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b78:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b7e:	0f b6 d0             	movzx  edx,al
c0026b81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b85:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0026b8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b8e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026b94:	8d 50 01             	lea    edx,[eax+0x1]
c0026b97:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b9b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026ba1:	0f b6 d0             	movzx  edx,al
c0026ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ba8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026bac:	83 e1 3f             	and    ecx,0x3f
c0026baf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026bb3:	90                   	nop
c0026bb4:	83 c4 0c             	add    esp,0xc
c0026bb7:	c3                   	ret    

c0026bb8 <PIC::ioWait()>:
c0026bb8:	eb 00                	jmp    c0026bba <PIC::ioWait()+0x2>
c0026bba:	eb 00                	jmp    c0026bbc <PIC::ioWait()+0x4>
c0026bbc:	90                   	nop
c0026bbd:	c3                   	ret    

c0026bbe <PIC::getIRQReg(int)>:
c0026bbe:	55                   	push   ebp
c0026bbf:	89 e5                	mov    ebp,esp
c0026bc1:	83 ec 10             	sub    esp,0x10
c0026bc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bc7:	0f b6 c0             	movzx  eax,al
c0026bca:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026bd0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026bd3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026bd6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026bda:	ee                   	out    dx,al
c0026bdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026bde:	0f b6 c0             	movzx  eax,al
c0026be1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026be7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0026bea:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026bed:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026bf1:	ee                   	out    dx,al
c0026bf2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026bf8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0026bfc:	89 c2                	mov    edx,eax
c0026bfe:	ec                   	in     al,dx
c0026bff:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026c02:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026c05:	0f b6 c0             	movzx  eax,al
c0026c08:	c1 e0 08             	shl    eax,0x8
c0026c0b:	89 c1                	mov    ecx,eax
c0026c0d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026c13:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026c17:	89 c2                	mov    edx,eax
c0026c19:	ec                   	in     al,dx
c0026c1a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0026c1d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026c20:	0f b6 c0             	movzx  eax,al
c0026c23:	09 c8                	or     eax,ecx
c0026c25:	c9                   	leave  
c0026c26:	c3                   	ret    
c0026c27:	90                   	nop

c0026c28 <PIC::eoi(unsigned char)>:
c0026c28:	55                   	push   ebp
c0026c29:	89 e5                	mov    ebp,esp
c0026c2b:	83 ec 14             	sub    esp,0x14
c0026c2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c31:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026c34:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c38:	75 1e                	jne    c0026c58 <PIC::eoi(unsigned char)+0x30>
c0026c3a:	6a 0b                	push   0xb
c0026c3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c3f:	e8 7a ff ff ff       	call   c0026bbe <PIC::getIRQReg(int)>
c0026c44:	83 c4 08             	add    esp,0x8
c0026c47:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0026c4b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0026c4f:	25 80 00 00 00       	and    eax,0x80
c0026c54:	85 c0                	test   eax,eax
c0026c56:	74 5f                	je     c0026cb7 <PIC::eoi(unsigned char)+0x8f>
c0026c58:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0026c5c:	75 2d                	jne    c0026c8b <PIC::eoi(unsigned char)+0x63>
c0026c5e:	6a 0b                	push   0xb
c0026c60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026c63:	e8 56 ff ff ff       	call   c0026bbe <PIC::getIRQReg(int)>
c0026c68:	83 c4 08             	add    esp,0x8
c0026c6b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0026c6f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026c72:	66 85 c0             	test   ax,ax
c0026c75:	78 14                	js     c0026c8b <PIC::eoi(unsigned char)+0x63>
c0026c77:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0026c7d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026c81:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026c84:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026c88:	ee                   	out    dx,al
c0026c89:	eb 2d                	jmp    c0026cb8 <PIC::eoi(unsigned char)+0x90>
c0026c8b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026c8f:	76 12                	jbe    c0026ca3 <PIC::eoi(unsigned char)+0x7b>
c0026c91:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026c97:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0026c9b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026c9e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026ca2:	ee                   	out    dx,al
c0026ca3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026ca9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0026cad:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026cb0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026cb4:	ee                   	out    dx,al
c0026cb5:	eb 01                	jmp    c0026cb8 <PIC::eoi(unsigned char)+0x90>
c0026cb7:	90                   	nop
c0026cb8:	c9                   	leave  
c0026cb9:	c3                   	ret    

c0026cba <PIC::remap()>:
c0026cba:	55                   	push   ebp
c0026cbb:	89 e5                	mov    ebp,esp
c0026cbd:	83 ec 48             	sub    esp,0x48
c0026cc0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026cc7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0026cce:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026cd4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026cd7:	89 c2                	mov    edx,eax
c0026cd9:	ec                   	in     al,dx
c0026cda:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0026cdd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026ce0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026ce3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026ce9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0026cec:	89 c2                	mov    edx,eax
c0026cee:	ec                   	in     al,dx
c0026cef:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026cf2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026cf5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026cf8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0026cfe:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026d02:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026d05:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026d08:	ee                   	out    dx,al
c0026d09:	83 ec 0c             	sub    esp,0xc
c0026d0c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d0f:	e8 a4 fe ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026d14:	83 c4 10             	add    esp,0x10
c0026d17:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0026d1d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026d21:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026d24:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026d27:	ee                   	out    dx,al
c0026d28:	83 ec 0c             	sub    esp,0xc
c0026d2b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d2e:	e8 85 fe ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026d33:	83 c4 10             	add    esp,0x10
c0026d36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026d39:	0f b6 c0             	movzx  eax,al
c0026d3c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0026d42:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0026d45:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0026d48:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0026d4b:	ee                   	out    dx,al
c0026d4c:	83 ec 0c             	sub    esp,0xc
c0026d4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d52:	e8 61 fe ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026d57:	83 c4 10             	add    esp,0x10
c0026d5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d5d:	0f b6 c0             	movzx  eax,al
c0026d60:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026d66:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026d69:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0026d6c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026d6f:	ee                   	out    dx,al
c0026d70:	83 ec 0c             	sub    esp,0xc
c0026d73:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d76:	e8 3d fe ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026d7b:	83 c4 10             	add    esp,0x10
c0026d7e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026d84:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026d88:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0026d8b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0026d8e:	ee                   	out    dx,al
c0026d8f:	83 ec 0c             	sub    esp,0xc
c0026d92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026d95:	e8 1e fe ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026d9a:	83 c4 10             	add    esp,0x10
c0026d9d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026da3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026da7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0026daa:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026dad:	ee                   	out    dx,al
c0026dae:	83 ec 0c             	sub    esp,0xc
c0026db1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026db4:	e8 ff fd ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026db9:	83 c4 10             	add    esp,0x10
c0026dbc:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026dc2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026dc6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026dc9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0026dcc:	ee                   	out    dx,al
c0026dcd:	83 ec 0c             	sub    esp,0xc
c0026dd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026dd3:	e8 e0 fd ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026dd8:	83 c4 10             	add    esp,0x10
c0026ddb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026de1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026de5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026de8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026deb:	ee                   	out    dx,al
c0026dec:	83 ec 0c             	sub    esp,0xc
c0026def:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026df2:	e8 c1 fd ff ff       	call   c0026bb8 <PIC::ioWait()>
c0026df7:	83 c4 10             	add    esp,0x10
c0026dfa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0026dfe:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026e04:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026e07:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0026e0a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026e0d:	ee                   	out    dx,al
c0026e0e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026e12:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026e18:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0026e1b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0026e1e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026e21:	ee                   	out    dx,al
c0026e22:	90                   	nop
c0026e23:	c9                   	leave  
c0026e24:	c3                   	ret    
c0026e25:	90                   	nop

c0026e26 <PIC::open(int, int, void*)>:
c0026e26:	55                   	push   ebp
c0026e27:	89 e5                	mov    ebp,esp
c0026e29:	83 ec 18             	sub    esp,0x18
c0026e2c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026e32:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026e36:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026e39:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026e3d:	ee                   	out    dx,al
c0026e3e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0026e44:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0026e48:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0026e4b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026e4f:	ee                   	out    dx,al
c0026e50:	83 ec 0c             	sub    esp,0xc
c0026e53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e56:	e8 5f fe ff ff       	call   c0026cba <PIC::remap()>
c0026e5b:	83 c4 10             	add    esp,0x10
c0026e5e:	b8 00 00 00 00       	mov    eax,0x0
c0026e63:	c9                   	leave  
c0026e64:	c3                   	ret    
c0026e65:	90                   	nop

c0026e66 <APICTimer::close(int, int, void*)>:
c0026e66:	b8 00 00 00 00       	mov    eax,0x0
c0026e6b:	c3                   	ret    

c0026e6c <apicTimerHandler(regs*, void*)>:
c0026e6c:	83 ec 0c             	sub    esp,0xc
c0026e6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026e73:	8b 00                	mov    eax,DWORD PTR [eax]
c0026e75:	99                   	cdq    
c0026e76:	52                   	push   edx
c0026e77:	50                   	push   eax
c0026e78:	6a 00                	push   0x0
c0026e7a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026e7f:	e8 90 07 00 00       	call   c0027614 <__udivdi3>
c0026e84:	83 c4 10             	add    esp,0x10
c0026e87:	83 ec 08             	sub    esp,0x8
c0026e8a:	52                   	push   edx
c0026e8b:	50                   	push   eax
c0026e8c:	e8 0e ff fe ff       	call   c0016d9f <timerHandler(unsigned long long)>
c0026e91:	83 c4 10             	add    esp,0x10
c0026e94:	90                   	nop
c0026e95:	83 c4 0c             	add    esp,0xc
c0026e98:	c3                   	ret    
c0026e99:	90                   	nop

c0026e9a <APICTimer::write(int)>:
c0026e9a:	53                   	push   ebx
c0026e9b:	83 ec 28             	sub    esp,0x28
c0026e9e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026ea2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026ea6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026eac:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026eb1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026eb7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026ebd:	83 ec 0c             	sub    esp,0xc
c0026ec0:	50                   	push   eax
c0026ec1:	e8 de f4 ff ff       	call   c00263a4 <APIC::getBase()>
c0026ec6:	83 c4 10             	add    esp,0x10
c0026ec9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026ecd:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c0026ed2:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c0026ed8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026edc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026ee0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ee4:	05 e0 03 00 00       	add    eax,0x3e0
c0026ee9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026eef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026ef3:	05 80 03 00 00       	add    eax,0x380
c0026ef8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026efe:	fb                   	sti    
c0026eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026f03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026f07:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026f0c:	83 d2 00             	adc    edx,0x0
c0026f0f:	89 c1                	mov    ecx,eax
c0026f11:	89 d3                	mov    ebx,edx
c0026f13:	a1 50 f9 02 c0       	mov    eax,ds:0xc002f950
c0026f18:	8b 15 54 f9 02 c0    	mov    edx,DWORD PTR ds:0xc002f954
c0026f1e:	39 c8                	cmp    eax,ecx
c0026f20:	89 d0                	mov    eax,edx
c0026f22:	19 d8                	sbb    eax,ebx
c0026f24:	73 02                	jae    c0026f28 <APICTimer::write(int)+0x8e>
c0026f26:	eb d7                	jmp    c0026eff <APICTimer::write(int)+0x65>
c0026f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f2c:	05 20 03 00 00       	add    eax,0x320
c0026f31:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026f37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f3b:	05 90 03 00 00       	add    eax,0x390
c0026f40:	8b 00                	mov    eax,DWORD PTR [eax]
c0026f42:	f7 d0                	not    eax
c0026f44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026f48:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026f50:	ba 00 00 00 00       	mov    edx,0x0
c0026f55:	f7 f3                	div    ebx
c0026f57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026f5f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026f65:	0d 00 00 02 00       	or     eax,0x20000
c0026f6a:	89 c2                	mov    edx,eax
c0026f6c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f70:	05 20 03 00 00       	add    eax,0x320
c0026f75:	89 10                	mov    DWORD PTR [eax],edx
c0026f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f7b:	05 e0 03 00 00       	add    eax,0x3e0
c0026f80:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026f86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026f8a:	05 80 03 00 00       	add    eax,0x380
c0026f8f:	89 c2                	mov    edx,eax
c0026f91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026f95:	89 02                	mov    DWORD PTR [edx],eax
c0026f97:	90                   	nop
c0026f98:	83 c4 28             	add    esp,0x28
c0026f9b:	5b                   	pop    ebx
c0026f9c:	c3                   	ret    
c0026f9d:	90                   	nop

c0026f9e <APICTimer::open(int, int, void*)>:
c0026f9e:	57                   	push   edi
c0026f9f:	56                   	push   esi
c0026fa0:	53                   	push   ebx
c0026fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fa5:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fa7:	83 c0 24             	add    eax,0x24
c0026faa:	8b 00                	mov    eax,DWORD PTR [eax]
c0026fac:	83 ec 08             	sub    esp,0x8
c0026faf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fb3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026fb7:	ff d0                	call   eax
c0026fb9:	83 c4 10             	add    esp,0x10
c0026fbc:	a1 c8 f2 02 c0       	mov    eax,ds:0xc002f2c8
c0026fc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026fc7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026fcd:	83 ec 0c             	sub    esp,0xc
c0026fd0:	50                   	push   eax
c0026fd1:	e8 ce f3 ff ff       	call   c00263a4 <APIC::getBase()>
c0026fd6:	83 c4 10             	add    esp,0x10
c0026fd9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026fdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026fe3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026fe9:	0f b6 f8             	movzx  edi,al
c0026fec:	89 d0                	mov    eax,edx
c0026fee:	ba 00 00 00 00       	mov    edx,0x0
c0026ff3:	89 c1                	mov    ecx,eax
c0026ff5:	80 e5 ff             	and    ch,0xff
c0026ff8:	89 cb                	mov    ebx,ecx
c0026ffa:	0f b6 f2             	movzx  esi,dl
c0026ffd:	89 d8                	mov    eax,ebx
c0026fff:	89 f2                	mov    edx,esi
c0027001:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0027005:	8d 5f 08             	lea    ebx,[edi+0x8]
c0027008:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002700c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0027010:	83 e0 00             	and    eax,0x0
c0027013:	09 d0                	or     eax,edx
c0027015:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0027019:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002701d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0027023:	8d 50 01             	lea    edx,[eax+0x1]
c0027026:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002702a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0027030:	0f b6 d0             	movzx  edx,al
c0027033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027037:	83 c2 08             	add    edx,0x8
c002703a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002703e:	0f b6 c9             	movzx  ecx,cl
c0027041:	81 c9 00 00 01 00    	or     ecx,0x10000
c0027047:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002704b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002704f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0027053:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0027059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002705d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0027061:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0027067:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002706b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0027071:	83 ec 0c             	sub    esp,0xc
c0027074:	51                   	push   ecx
c0027075:	6a 01                	push   0x1
c0027077:	68 6c 6e 02 c0       	push   0xc0026e6c
c002707c:	52                   	push   edx
c002707d:	50                   	push   eax
c002707e:	e8 81 d1 fe ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0027083:	83 c4 20             	add    esp,0x20
c0027086:	89 c2                	mov    edx,eax
c0027088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002708c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0027092:	b8 00 00 00 00       	mov    eax,0x0
c0027097:	5b                   	pop    ebx
c0027098:	5e                   	pop    esi
c0027099:	5f                   	pop    edi
c002709a:	c3                   	ret    
c002709b:	90                   	nop

c002709c <APICTimer::APICTimer()>:
c002709c:	83 ec 0c             	sub    esp,0xc
c002709f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270a3:	83 ec 08             	sub    esp,0x8
c00270a6:	68 5c e1 02 c0       	push   0xc002e15c
c00270ab:	50                   	push   eax
c00270ac:	e8 5f fc fe ff       	call   c0016d10 <Timer::Timer(char const*)>
c00270b1:	83 c4 10             	add    esp,0x10
c00270b4:	ba 70 e1 02 c0       	mov    edx,0xc002e170
c00270b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270bd:	89 10                	mov    DWORD PTR [eax],edx
c00270bf:	90                   	nop
c00270c0:	83 c4 0c             	add    esp,0xc
c00270c3:	c3                   	ret    

c00270c4 <PIT::write(int)>:
c00270c4:	83 ec 10             	sub    esp,0x10
c00270c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00270cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00270cf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00270d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00270d9:	a3 84 36 03 c0       	mov    ds:0xc0033684,eax
c00270de:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00270e3:	99                   	cdq    
c00270e4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00270e8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270ec:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00270f3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00270f8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00270fc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0027101:	ee                   	out    dx,al
c0027102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027106:	0f b6 c0             	movzx  eax,al
c0027109:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0027110:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0027114:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0027118:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002711d:	ee                   	out    dx,al
c002711e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027122:	c1 f8 08             	sar    eax,0x8
c0027125:	0f b6 c0             	movzx  eax,al
c0027128:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002712f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0027133:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0027137:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002713c:	ee                   	out    dx,al
c002713d:	90                   	nop
c002713e:	83 c4 10             	add    esp,0x10
c0027141:	c3                   	ret    

c0027142 <pitHandler(regs*, void*)>:
c0027142:	83 ec 0c             	sub    esp,0xc
c0027145:	a1 84 36 03 c0       	mov    eax,ds:0xc0033684
c002714a:	99                   	cdq    
c002714b:	52                   	push   edx
c002714c:	50                   	push   eax
c002714d:	6a 00                	push   0x0
c002714f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0027154:	e8 bb 04 00 00       	call   c0027614 <__udivdi3>
c0027159:	83 c4 10             	add    esp,0x10
c002715c:	83 ec 08             	sub    esp,0x8
c002715f:	52                   	push   edx
c0027160:	50                   	push   eax
c0027161:	e8 39 fc fe ff       	call   c0016d9f <timerHandler(unsigned long long)>
c0027166:	83 c4 10             	add    esp,0x10
c0027169:	90                   	nop
c002716a:	83 c4 0c             	add    esp,0xc
c002716d:	c3                   	ret    

c002716e <PIT::open(int, int, void*)>:
c002716e:	83 ec 0c             	sub    esp,0xc
c0027171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027175:	8b 00                	mov    eax,DWORD PTR [eax]
c0027177:	83 c0 24             	add    eax,0x24
c002717a:	8b 00                	mov    eax,DWORD PTR [eax]
c002717c:	83 ec 08             	sub    esp,0x8
c002717f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027187:	ff d0                	call   eax
c0027189:	83 c4 10             	add    esp,0x10
c002718c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027190:	83 ec 0c             	sub    esp,0xc
c0027193:	6a 00                	push   0x0
c0027195:	6a 01                	push   0x1
c0027197:	68 42 71 02 c0       	push   0xc0027142
c002719c:	6a 00                	push   0x0
c002719e:	50                   	push   eax
c002719f:	e8 60 d0 fe ff       	call   c0014204 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00271a4:	83 c4 20             	add    esp,0x20
c00271a7:	89 c2                	mov    edx,eax
c00271a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ad:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00271b3:	b8 00 00 00 00       	mov    eax,0x0
c00271b8:	83 c4 0c             	add    esp,0xc
c00271bb:	c3                   	ret    

c00271bc <PIT::close(int, int, void*)>:
c00271bc:	83 ec 0c             	sub    esp,0xc
c00271bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00271cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d1:	6a 01                	push   0x1
c00271d3:	68 42 71 02 c0       	push   0xc0027142
c00271d8:	6a 00                	push   0x0
c00271da:	50                   	push   eax
c00271db:	e8 62 d0 fe ff       	call   c0014242 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00271e0:	83 c4 10             	add    esp,0x10
c00271e3:	b8 00 00 00 00       	mov    eax,0x0
c00271e8:	83 c4 0c             	add    esp,0xc
c00271eb:	c3                   	ret    

c00271ec <PIT::PIT()>:
c00271ec:	83 ec 0c             	sub    esp,0xc
c00271ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f3:	83 ec 08             	sub    esp,0x8
c00271f6:	68 98 e1 02 c0       	push   0xc002e198
c00271fb:	50                   	push   eax
c00271fc:	e8 0f fb fe ff       	call   c0016d10 <Timer::Timer(char const*)>
c0027201:	83 c4 10             	add    esp,0x10
c0027204:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c0027209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002720d:	89 10                	mov    DWORD PTR [eax],edx
c002720f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027213:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027219:	0f b6 d0             	movzx  edx,al
c002721c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027220:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0027227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027231:	0f b6 d0             	movzx  edx,al
c0027234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027238:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002723d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027241:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0027247:	8d 50 01             	lea    edx,[eax+0x1]
c002724a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002724e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0027254:	0f b6 d0             	movzx  edx,al
c0027257:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002725f:	83 e1 3f             	and    ecx,0x3f
c0027262:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0027266:	90                   	nop
c0027267:	83 c4 0c             	add    esp,0xc
c002726a:	c3                   	ret    
c002726b:	66 90                	xchg   ax,ax
c002726d:	66 90                	xchg   ax,ax
c002726f:	90                   	nop

c0027270 <avxDetect>:
c0027270:	b8 00 00 00 00       	mov    eax,0x0
c0027275:	c3                   	ret    

c0027276 <avxSave>:
c0027276:	c3                   	ret    

c0027277 <avxLoad>:
c0027277:	c3                   	ret    

c0027278 <avxInit>:
c0027278:	c3                   	ret    

c0027279 <avxClose>:
c0027279:	c3                   	ret    

c002727a <wouldSheSayYes>:
c002727a:	c3                   	ret    
c002727b:	49                   	dec    ecx
c002727c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0027280:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0027284:	75 20                	jne    c00272a6 <sseDetect.noSSE+0x1>
c0027286:	4e                   	dec    esi
c0027287:	79 61                	jns    c00272ea <x87Detect+0x14>
c0027289:	68 2e 2e 2e 00       	push   0x2e2e2e
c002728e:	66 90                	xchg   ax,ax

c0027290 <absolutelyNoChanceInHell>:
c0027290:	b8 01 00 00 00       	mov    eax,0x1
c0027295:	0f a2                	cpuid  
c0027297:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002729d:	74 06                	je     c00272a5 <sseDetect.noSSE>
c002729f:	b8 01 00 00 00       	mov    eax,0x1
c00272a4:	c3                   	ret    

c00272a5 <sseDetect.noSSE>:
c00272a5:	31 c0                	xor    eax,eax
c00272a7:	c3                   	ret    

c00272a8 <sseSave>:
c00272a8:	0f ae 44 24 04       	fxsave [esp+0x4]
c00272ad:	c3                   	ret    

c00272ae <sseLoad>:
c00272ae:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c00272b3:	c3                   	ret    

c00272b4 <sseInit>:
c00272b4:	e8 49 00 00 00       	call   c0027302 <x87Init>
c00272b9:	0f 20 e0             	mov    eax,cr4
c00272bc:	66 0d 00 06          	or     ax,0x600
c00272c0:	0f 22 e0             	mov    cr4,eax
c00272c3:	c3                   	ret    

c00272c4 <sseClose>:
c00272c4:	c3                   	ret    
c00272c5:	66 90                	xchg   ax,ax
c00272c7:	66 90                	xchg   ax,ax
c00272c9:	66 90                	xchg   ax,ax
c00272cb:	66 90                	xchg   ax,ax
c00272cd:	66 90                	xchg   ax,ax
c00272cf:	90                   	nop

c00272d0 <value_37F>:
c00272d0:	7f 03                	jg     c00272d5 <value_37A+0x1>

c00272d2 <value_37E>:
c00272d2:	7e 03                	jle    c00272d7 <x87Detect+0x1>

c00272d4 <value_37A>:
c00272d4:	7a 03                	jp     c00272d9 <x87Detect+0x3>

c00272d6 <x87Detect>:
c00272d6:	b8 01 00 00 00       	mov    eax,0x1
c00272db:	0f a2                	cpuid  
c00272dd:	f7 c2 01 00 00 00    	test   edx,0x1
c00272e3:	74 06                	je     c00272eb <x87Detect.nox87>
c00272e5:	b8 01 00 00 00       	mov    eax,0x1
c00272ea:	c3                   	ret    

c00272eb <x87Detect.nox87>:
c00272eb:	b8 00 00 00 00       	mov    eax,0x0
c00272f0:	c3                   	ret    

c00272f1 <x87Save>:
c00272f1:	55                   	push   ebp
c00272f2:	89 e5                	mov    ebp,esp
c00272f4:	9b dd 75 08          	fsave  [ebp+0x8]
c00272f8:	c9                   	leave  
c00272f9:	c3                   	ret    

c00272fa <x87Load>:
c00272fa:	55                   	push   ebp
c00272fb:	89 e5                	mov    ebp,esp
c00272fd:	dd 65 08             	frstor [ebp+0x8]
c0027300:	c9                   	leave  
c0027301:	c3                   	ret    

c0027302 <x87Init>:
c0027302:	9b db e3             	finit  
c0027305:	0f 20 c0             	mov    eax,cr0
c0027308:	66 25 fb ff          	and    ax,0xfffb
c002730c:	66 0d 22 00          	or     ax,0x22
c0027310:	0f 22 c0             	mov    cr0,eax
c0027313:	0f 06                	clts   
c0027315:	d9 2d d4 72 02 c0    	fldcw  WORD PTR ds:0xc00272d4
c002731b:	c3                   	ret    

c002731c <x87Close>:
c002731c:	c3                   	ret    
c002731d:	66 90                	xchg   ax,ax
c002731f:	90                   	nop

c0027320 <__do_global_ctors_aux>:
c0027320:	a1 58 9f 02 c0       	mov    eax,ds:0xc0029f58
c0027325:	83 f8 ff             	cmp    eax,0xffffffff
c0027328:	74 1a                	je     c0027344 <__do_global_ctors_aux+0x24>
c002732a:	55                   	push   ebp
c002732b:	89 e5                	mov    ebp,esp
c002732d:	53                   	push   ebx
c002732e:	52                   	push   edx
c002732f:	bb 58 9f 02 c0       	mov    ebx,0xc0029f58
c0027334:	ff d0                	call   eax
c0027336:	83 eb 04             	sub    ebx,0x4
c0027339:	8b 03                	mov    eax,DWORD PTR [ebx]
c002733b:	83 f8 ff             	cmp    eax,0xffffffff
c002733e:	75 f4                	jne    c0027334 <__do_global_ctors_aux+0x14>
c0027340:	58                   	pop    eax
c0027341:	5b                   	pop    ebx
c0027342:	5d                   	pop    ebp
c0027343:	c3                   	ret    
c0027344:	c3                   	ret    
c0027345:	66 90                	xchg   ax,ax
c0027347:	90                   	nop

c0027348 <__divdi3>:
c0027348:	55                   	push   ebp
c0027349:	57                   	push   edi
c002734a:	56                   	push   esi
c002734b:	53                   	push   ebx
c002734c:	83 ec 1c             	sub    esp,0x1c
c002734f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0027353:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027357:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002735a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002735e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0027362:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0027366:	85 db                	test   ebx,ebx
c0027368:	0f 88 8e 00 00 00    	js     c00273fc <__divdi3+0xb4>
c002736e:	89 dd                	mov    ebp,ebx
c0027370:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0027378:	89 d3                	mov    ebx,edx
c002737a:	85 d2                	test   edx,edx
c002737c:	79 0d                	jns    c002738b <__divdi3+0x43>
c002737e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0027382:	f7 d8                	neg    eax
c0027384:	83 d2 00             	adc    edx,0x0
c0027387:	f7 da                	neg    edx
c0027389:	89 d3                	mov    ebx,edx
c002738b:	89 c7                	mov    edi,eax
c002738d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0027390:	85 db                	test   ebx,ebx
c0027392:	75 48                	jne    c00273dc <__divdi3+0x94>
c0027394:	39 ef                	cmp    edi,ebp
c0027396:	76 24                	jbe    c00273bc <__divdi3+0x74>
c0027398:	89 ea                	mov    edx,ebp
c002739a:	f7 f7                	div    edi
c002739c:	89 c1                	mov    ecx,eax
c002739e:	31 f6                	xor    esi,esi
c00273a0:	89 c8                	mov    eax,ecx
c00273a2:	89 f2                	mov    edx,esi
c00273a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00273a8:	85 c9                	test   ecx,ecx
c00273aa:	74 07                	je     c00273b3 <__divdi3+0x6b>
c00273ac:	f7 d8                	neg    eax
c00273ae:	83 d2 00             	adc    edx,0x0
c00273b1:	f7 da                	neg    edx
c00273b3:	83 c4 1c             	add    esp,0x1c
c00273b6:	5b                   	pop    ebx
c00273b7:	5e                   	pop    esi
c00273b8:	5f                   	pop    edi
c00273b9:	5d                   	pop    ebp
c00273ba:	c3                   	ret    
c00273bb:	90                   	nop
c00273bc:	85 ff                	test   edi,edi
c00273be:	75 0b                	jne    c00273cb <__divdi3+0x83>
c00273c0:	b8 01 00 00 00       	mov    eax,0x1
c00273c5:	31 d2                	xor    edx,edx
c00273c7:	f7 f3                	div    ebx
c00273c9:	89 c7                	mov    edi,eax
c00273cb:	31 d2                	xor    edx,edx
c00273cd:	89 e8                	mov    eax,ebp
c00273cf:	f7 f7                	div    edi
c00273d1:	89 c6                	mov    esi,eax
c00273d3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00273d6:	f7 f7                	div    edi
c00273d8:	89 c1                	mov    ecx,eax
c00273da:	eb c4                	jmp    c00273a0 <__divdi3+0x58>
c00273dc:	39 eb                	cmp    ebx,ebp
c00273de:	77 3c                	ja     c002741c <__divdi3+0xd4>
c00273e0:	0f bd f3             	bsr    esi,ebx
c00273e3:	83 f6 1f             	xor    esi,0x1f
c00273e6:	75 40                	jne    c0027428 <__divdi3+0xe0>
c00273e8:	39 eb                	cmp    ebx,ebp
c00273ea:	72 09                	jb     c00273f5 <__divdi3+0xad>
c00273ec:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00273ef:	0f 87 97 00 00 00    	ja     c002748c <__divdi3+0x144>
c00273f5:	b9 01 00 00 00       	mov    ecx,0x1
c00273fa:	eb a4                	jmp    c00273a0 <__divdi3+0x58>
c00273fc:	f7 d9                	neg    ecx
c00273fe:	83 d3 00             	adc    ebx,0x0
c0027401:	f7 db                	neg    ebx
c0027403:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0027406:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002740a:	89 dd                	mov    ebp,ebx
c002740c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0027414:	e9 5f ff ff ff       	jmp    c0027378 <__divdi3+0x30>
c0027419:	8d 76 00             	lea    esi,[esi+0x0]
c002741c:	31 f6                	xor    esi,esi
c002741e:	31 c9                	xor    ecx,ecx
c0027420:	e9 7b ff ff ff       	jmp    c00273a0 <__divdi3+0x58>
c0027425:	8d 76 00             	lea    esi,[esi+0x0]
c0027428:	b8 20 00 00 00       	mov    eax,0x20
c002742d:	29 f0                	sub    eax,esi
c002742f:	89 f1                	mov    ecx,esi
c0027431:	d3 e3                	shl    ebx,cl
c0027433:	89 fa                	mov    edx,edi
c0027435:	88 c1                	mov    cl,al
c0027437:	d3 ea                	shr    edx,cl
c0027439:	09 da                	or     edx,ebx
c002743b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002743f:	89 f1                	mov    ecx,esi
c0027441:	d3 e7                	shl    edi,cl
c0027443:	89 eb                	mov    ebx,ebp
c0027445:	88 c1                	mov    cl,al
c0027447:	d3 eb                	shr    ebx,cl
c0027449:	89 f1                	mov    ecx,esi
c002744b:	d3 e5                	shl    ebp,cl
c002744d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027450:	88 c1                	mov    cl,al
c0027452:	d3 ea                	shr    edx,cl
c0027454:	09 d5                	or     ebp,edx
c0027456:	89 e8                	mov    eax,ebp
c0027458:	89 da                	mov    edx,ebx
c002745a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002745e:	89 d3                	mov    ebx,edx
c0027460:	89 c5                	mov    ebp,eax
c0027462:	f7 e7                	mul    edi
c0027464:	39 d3                	cmp    ebx,edx
c0027466:	72 18                	jb     c0027480 <__divdi3+0x138>
c0027468:	74 0a                	je     c0027474 <__divdi3+0x12c>
c002746a:	89 e9                	mov    ecx,ebp
c002746c:	31 f6                	xor    esi,esi
c002746e:	e9 2d ff ff ff       	jmp    c00273a0 <__divdi3+0x58>
c0027473:	90                   	nop
c0027474:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027477:	89 f1                	mov    ecx,esi
c0027479:	d3 e7                	shl    edi,cl
c002747b:	39 c7                	cmp    edi,eax
c002747d:	73 eb                	jae    c002746a <__divdi3+0x122>
c002747f:	90                   	nop
c0027480:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027483:	31 f6                	xor    esi,esi
c0027485:	e9 16 ff ff ff       	jmp    c00273a0 <__divdi3+0x58>
c002748a:	66 90                	xchg   ax,ax
c002748c:	31 c9                	xor    ecx,ecx
c002748e:	e9 0d ff ff ff       	jmp    c00273a0 <__divdi3+0x58>
c0027493:	90                   	nop

c0027494 <__moddi3>:
c0027494:	55                   	push   ebp
c0027495:	57                   	push   edi
c0027496:	56                   	push   esi
c0027497:	53                   	push   ebx
c0027498:	83 ec 2c             	sub    esp,0x2c
c002749b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002749f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00274a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00274a7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00274ab:	85 db                	test   ebx,ebx
c00274ad:	0f 88 85 00 00 00    	js     c0027538 <__moddi3+0xa4>
c00274b3:	89 de                	mov    esi,ebx
c00274b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00274bd:	89 d7                	mov    edi,edx
c00274bf:	85 d2                	test   edx,edx
c00274c1:	79 09                	jns    c00274cc <__moddi3+0x38>
c00274c3:	f7 d8                	neg    eax
c00274c5:	83 d2 00             	adc    edx,0x0
c00274c8:	f7 da                	neg    edx
c00274ca:	89 d7                	mov    edi,edx
c00274cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00274d0:	89 cd                	mov    ebp,ecx
c00274d2:	85 ff                	test   edi,edi
c00274d4:	75 52                	jne    c0027528 <__moddi3+0x94>
c00274d6:	89 c3                	mov    ebx,eax
c00274d8:	39 f0                	cmp    eax,esi
c00274da:	76 24                	jbe    c0027500 <__moddi3+0x6c>
c00274dc:	89 c8                	mov    eax,ecx
c00274de:	89 f2                	mov    edx,esi
c00274e0:	f7 f3                	div    ebx
c00274e2:	89 d6                	mov    esi,edx
c00274e4:	89 f0                	mov    eax,esi
c00274e6:	31 d2                	xor    edx,edx
c00274e8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00274ec:	85 c9                	test   ecx,ecx
c00274ee:	74 07                	je     c00274f7 <__moddi3+0x63>
c00274f0:	f7 d8                	neg    eax
c00274f2:	83 d2 00             	adc    edx,0x0
c00274f5:	f7 da                	neg    edx
c00274f7:	83 c4 2c             	add    esp,0x2c
c00274fa:	5b                   	pop    ebx
c00274fb:	5e                   	pop    esi
c00274fc:	5f                   	pop    edi
c00274fd:	5d                   	pop    ebp
c00274fe:	c3                   	ret    
c00274ff:	90                   	nop
c0027500:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027504:	85 db                	test   ebx,ebx
c0027506:	75 0d                	jne    c0027515 <__moddi3+0x81>
c0027508:	b8 01 00 00 00       	mov    eax,0x1
c002750d:	31 d2                	xor    edx,edx
c002750f:	f7 f7                	div    edi
c0027511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027515:	89 f0                	mov    eax,esi
c0027517:	31 d2                	xor    edx,edx
c0027519:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002751d:	f7 f7                	div    edi
c002751f:	89 e8                	mov    eax,ebp
c0027521:	f7 f7                	div    edi
c0027523:	89 d6                	mov    esi,edx
c0027525:	eb bd                	jmp    c00274e4 <__moddi3+0x50>
c0027527:	90                   	nop
c0027528:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002752c:	39 f7                	cmp    edi,esi
c002752e:	76 20                	jbe    c0027550 <__moddi3+0xbc>
c0027530:	89 c8                	mov    eax,ecx
c0027532:	89 f2                	mov    edx,esi
c0027534:	eb b2                	jmp    c00274e8 <__moddi3+0x54>
c0027536:	66 90                	xchg   ax,ax
c0027538:	f7 d9                	neg    ecx
c002753a:	83 d3 00             	adc    ebx,0x0
c002753d:	f7 db                	neg    ebx
c002753f:	89 de                	mov    esi,ebx
c0027541:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0027549:	e9 6f ff ff ff       	jmp    c00274bd <__moddi3+0x29>
c002754e:	66 90                	xchg   ax,ax
c0027550:	0f bd c7             	bsr    eax,edi
c0027553:	83 f0 1f             	xor    eax,0x1f
c0027556:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002755a:	75 24                	jne    c0027580 <__moddi3+0xec>
c002755c:	39 f7                	cmp    edi,esi
c002755e:	72 06                	jb     c0027566 <__moddi3+0xd2>
c0027560:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027564:	77 0c                	ja     c0027572 <__moddi3+0xde>
c0027566:	89 e9                	mov    ecx,ebp
c0027568:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002756c:	19 fe                	sbb    esi,edi
c002756e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027576:	89 f2                	mov    edx,esi
c0027578:	e9 6b ff ff ff       	jmp    c00274e8 <__moddi3+0x54>
c002757d:	8d 76 00             	lea    esi,[esi+0x0]
c0027580:	b8 20 00 00 00       	mov    eax,0x20
c0027585:	89 c2                	mov    edx,eax
c0027587:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002758b:	29 da                	sub    edx,ebx
c002758d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027591:	88 d9                	mov    cl,bl
c0027593:	d3 e7                	shl    edi,cl
c0027595:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027599:	88 d1                	mov    cl,dl
c002759b:	d3 e8                	shr    eax,cl
c002759d:	09 c7                	or     edi,eax
c002759f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00275a3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00275a7:	89 d8                	mov    eax,ebx
c00275a9:	88 d9                	mov    cl,bl
c00275ab:	d3 e7                	shl    edi,cl
c00275ad:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00275b1:	89 f3                	mov    ebx,esi
c00275b3:	88 d1                	mov    cl,dl
c00275b5:	d3 eb                	shr    ebx,cl
c00275b7:	89 c7                	mov    edi,eax
c00275b9:	88 c1                	mov    cl,al
c00275bb:	d3 e6                	shl    esi,cl
c00275bd:	89 e8                	mov    eax,ebp
c00275bf:	88 d1                	mov    cl,dl
c00275c1:	d3 e8                	shr    eax,cl
c00275c3:	09 f0                	or     eax,esi
c00275c5:	89 f9                	mov    ecx,edi
c00275c7:	d3 e5                	shl    ebp,cl
c00275c9:	89 da                	mov    edx,ebx
c00275cb:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00275cf:	89 d3                	mov    ebx,edx
c00275d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00275d5:	89 c6                	mov    esi,eax
c00275d7:	89 d1                	mov    ecx,edx
c00275d9:	39 d3                	cmp    ebx,edx
c00275db:	72 27                	jb     c0027604 <__moddi3+0x170>
c00275dd:	74 21                	je     c0027600 <__moddi3+0x16c>
c00275df:	29 f5                	sub    ebp,esi
c00275e1:	19 cb                	sbb    ebx,ecx
c00275e3:	89 de                	mov    esi,ebx
c00275e5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00275e9:	d3 e6                	shl    esi,cl
c00275eb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00275ef:	89 f9                	mov    ecx,edi
c00275f1:	d3 ed                	shr    ebp,cl
c00275f3:	09 ee                	or     esi,ebp
c00275f5:	89 f0                	mov    eax,esi
c00275f7:	d3 eb                	shr    ebx,cl
c00275f9:	89 da                	mov    edx,ebx
c00275fb:	e9 e8 fe ff ff       	jmp    c00274e8 <__moddi3+0x54>
c0027600:	39 c5                	cmp    ebp,eax
c0027602:	73 db                	jae    c00275df <__moddi3+0x14b>
c0027604:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027608:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002760c:	89 d1                	mov    ecx,edx
c002760e:	89 c6                	mov    esi,eax
c0027610:	eb cd                	jmp    c00275df <__moddi3+0x14b>
c0027612:	66 90                	xchg   ax,ax

c0027614 <__udivdi3>:
c0027614:	55                   	push   ebp
c0027615:	57                   	push   edi
c0027616:	56                   	push   esi
c0027617:	53                   	push   ebx
c0027618:	83 ec 1c             	sub    esp,0x1c
c002761b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002761f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0027623:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027627:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002762b:	85 d2                	test   edx,edx
c002762d:	75 41                	jne    c0027670 <__udivdi3+0x5c>
c002762f:	39 f7                	cmp    edi,esi
c0027631:	76 15                	jbe    c0027648 <__udivdi3+0x34>
c0027633:	89 e8                	mov    eax,ebp
c0027635:	89 f2                	mov    edx,esi
c0027637:	f7 f7                	div    edi
c0027639:	31 db                	xor    ebx,ebx
c002763b:	89 da                	mov    edx,ebx
c002763d:	83 c4 1c             	add    esp,0x1c
c0027640:	5b                   	pop    ebx
c0027641:	5e                   	pop    esi
c0027642:	5f                   	pop    edi
c0027643:	5d                   	pop    ebp
c0027644:	c3                   	ret    
c0027645:	8d 76 00             	lea    esi,[esi+0x0]
c0027648:	89 f9                	mov    ecx,edi
c002764a:	85 ff                	test   edi,edi
c002764c:	75 0b                	jne    c0027659 <__udivdi3+0x45>
c002764e:	b8 01 00 00 00       	mov    eax,0x1
c0027653:	31 d2                	xor    edx,edx
c0027655:	f7 f7                	div    edi
c0027657:	89 c1                	mov    ecx,eax
c0027659:	31 d2                	xor    edx,edx
c002765b:	89 f0                	mov    eax,esi
c002765d:	f7 f1                	div    ecx
c002765f:	89 c3                	mov    ebx,eax
c0027661:	89 e8                	mov    eax,ebp
c0027663:	f7 f1                	div    ecx
c0027665:	89 da                	mov    edx,ebx
c0027667:	83 c4 1c             	add    esp,0x1c
c002766a:	5b                   	pop    ebx
c002766b:	5e                   	pop    esi
c002766c:	5f                   	pop    edi
c002766d:	5d                   	pop    ebp
c002766e:	c3                   	ret    
c002766f:	90                   	nop
c0027670:	39 f2                	cmp    edx,esi
c0027672:	77 1c                	ja     c0027690 <__udivdi3+0x7c>
c0027674:	0f bd da             	bsr    ebx,edx
c0027677:	83 f3 1f             	xor    ebx,0x1f
c002767a:	75 24                	jne    c00276a0 <__udivdi3+0x8c>
c002767c:	39 f2                	cmp    edx,esi
c002767e:	72 08                	jb     c0027688 <__udivdi3+0x74>
c0027680:	39 ef                	cmp    edi,ebp
c0027682:	0f 87 84 00 00 00    	ja     c002770c <__udivdi3+0xf8>
c0027688:	b8 01 00 00 00       	mov    eax,0x1
c002768d:	eb ac                	jmp    c002763b <__udivdi3+0x27>
c002768f:	90                   	nop
c0027690:	31 db                	xor    ebx,ebx
c0027692:	31 c0                	xor    eax,eax
c0027694:	89 da                	mov    edx,ebx
c0027696:	83 c4 1c             	add    esp,0x1c
c0027699:	5b                   	pop    ebx
c002769a:	5e                   	pop    esi
c002769b:	5f                   	pop    edi
c002769c:	5d                   	pop    ebp
c002769d:	c3                   	ret    
c002769e:	66 90                	xchg   ax,ax
c00276a0:	b8 20 00 00 00       	mov    eax,0x20
c00276a5:	29 d8                	sub    eax,ebx
c00276a7:	88 d9                	mov    cl,bl
c00276a9:	d3 e2                	shl    edx,cl
c00276ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00276af:	89 fa                	mov    edx,edi
c00276b1:	88 c1                	mov    cl,al
c00276b3:	d3 ea                	shr    edx,cl
c00276b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00276b9:	09 d1                	or     ecx,edx
c00276bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00276bf:	88 d9                	mov    cl,bl
c00276c1:	d3 e7                	shl    edi,cl
c00276c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00276c7:	89 f7                	mov    edi,esi
c00276c9:	88 c1                	mov    cl,al
c00276cb:	d3 ef                	shr    edi,cl
c00276cd:	88 d9                	mov    cl,bl
c00276cf:	d3 e6                	shl    esi,cl
c00276d1:	89 ea                	mov    edx,ebp
c00276d3:	88 c1                	mov    cl,al
c00276d5:	d3 ea                	shr    edx,cl
c00276d7:	09 d6                	or     esi,edx
c00276d9:	89 f0                	mov    eax,esi
c00276db:	89 fa                	mov    edx,edi
c00276dd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00276e1:	89 d7                	mov    edi,edx
c00276e3:	89 c6                	mov    esi,eax
c00276e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00276e9:	39 d7                	cmp    edi,edx
c00276eb:	72 13                	jb     c0027700 <__udivdi3+0xec>
c00276ed:	74 09                	je     c00276f8 <__udivdi3+0xe4>
c00276ef:	89 f0                	mov    eax,esi
c00276f1:	31 db                	xor    ebx,ebx
c00276f3:	e9 43 ff ff ff       	jmp    c002763b <__udivdi3+0x27>
c00276f8:	88 d9                	mov    cl,bl
c00276fa:	d3 e5                	shl    ebp,cl
c00276fc:	39 c5                	cmp    ebp,eax
c00276fe:	73 ef                	jae    c00276ef <__udivdi3+0xdb>
c0027700:	8d 46 ff             	lea    eax,[esi-0x1]
c0027703:	31 db                	xor    ebx,ebx
c0027705:	e9 31 ff ff ff       	jmp    c002763b <__udivdi3+0x27>
c002770a:	66 90                	xchg   ax,ax
c002770c:	31 c0                	xor    eax,eax
c002770e:	e9 28 ff ff ff       	jmp    c002763b <__udivdi3+0x27>
c0027713:	90                   	nop

c0027714 <__umoddi3>:
c0027714:	55                   	push   ebp
c0027715:	57                   	push   edi
c0027716:	56                   	push   esi
c0027717:	53                   	push   ebx
c0027718:	83 ec 1c             	sub    esp,0x1c
c002771b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002771f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0027723:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0027727:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002772b:	89 da                	mov    edx,ebx
c002772d:	85 c0                	test   eax,eax
c002772f:	75 37                	jne    c0027768 <__umoddi3+0x54>
c0027731:	39 df                	cmp    edi,ebx
c0027733:	76 13                	jbe    c0027748 <__umoddi3+0x34>
c0027735:	89 f0                	mov    eax,esi
c0027737:	f7 f7                	div    edi
c0027739:	89 d0                	mov    eax,edx
c002773b:	31 d2                	xor    edx,edx
c002773d:	83 c4 1c             	add    esp,0x1c
c0027740:	5b                   	pop    ebx
c0027741:	5e                   	pop    esi
c0027742:	5f                   	pop    edi
c0027743:	5d                   	pop    ebp
c0027744:	c3                   	ret    
c0027745:	8d 76 00             	lea    esi,[esi+0x0]
c0027748:	89 fd                	mov    ebp,edi
c002774a:	85 ff                	test   edi,edi
c002774c:	75 0b                	jne    c0027759 <__umoddi3+0x45>
c002774e:	b8 01 00 00 00       	mov    eax,0x1
c0027753:	31 d2                	xor    edx,edx
c0027755:	f7 f7                	div    edi
c0027757:	89 c5                	mov    ebp,eax
c0027759:	89 d8                	mov    eax,ebx
c002775b:	31 d2                	xor    edx,edx
c002775d:	f7 f5                	div    ebp
c002775f:	89 f0                	mov    eax,esi
c0027761:	f7 f5                	div    ebp
c0027763:	89 d0                	mov    eax,edx
c0027765:	eb d4                	jmp    c002773b <__umoddi3+0x27>
c0027767:	90                   	nop
c0027768:	89 f1                	mov    ecx,esi
c002776a:	39 d8                	cmp    eax,ebx
c002776c:	76 0a                	jbe    c0027778 <__umoddi3+0x64>
c002776e:	89 f0                	mov    eax,esi
c0027770:	83 c4 1c             	add    esp,0x1c
c0027773:	5b                   	pop    ebx
c0027774:	5e                   	pop    esi
c0027775:	5f                   	pop    edi
c0027776:	5d                   	pop    ebp
c0027777:	c3                   	ret    
c0027778:	0f bd e8             	bsr    ebp,eax
c002777b:	83 f5 1f             	xor    ebp,0x1f
c002777e:	75 1c                	jne    c002779c <__umoddi3+0x88>
c0027780:	39 d8                	cmp    eax,ebx
c0027782:	72 04                	jb     c0027788 <__umoddi3+0x74>
c0027784:	39 f7                	cmp    edi,esi
c0027786:	77 08                	ja     c0027790 <__umoddi3+0x7c>
c0027788:	89 da                	mov    edx,ebx
c002778a:	29 fe                	sub    esi,edi
c002778c:	19 c2                	sbb    edx,eax
c002778e:	89 f1                	mov    ecx,esi
c0027790:	89 c8                	mov    eax,ecx
c0027792:	83 c4 1c             	add    esp,0x1c
c0027795:	5b                   	pop    ebx
c0027796:	5e                   	pop    esi
c0027797:	5f                   	pop    edi
c0027798:	5d                   	pop    ebp
c0027799:	c3                   	ret    
c002779a:	66 90                	xchg   ax,ax
c002779c:	ba 20 00 00 00       	mov    edx,0x20
c00277a1:	29 ea                	sub    edx,ebp
c00277a3:	89 e9                	mov    ecx,ebp
c00277a5:	d3 e0                	shl    eax,cl
c00277a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00277ab:	89 f8                	mov    eax,edi
c00277ad:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00277b1:	88 d1                	mov    cl,dl
c00277b3:	d3 e8                	shr    eax,cl
c00277b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00277b9:	09 c1                	or     ecx,eax
c00277bb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00277bf:	89 e9                	mov    ecx,ebp
c00277c1:	d3 e7                	shl    edi,cl
c00277c3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00277c7:	89 d8                	mov    eax,ebx
c00277c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00277cd:	88 d1                	mov    cl,dl
c00277cf:	d3 e8                	shr    eax,cl
c00277d1:	89 c7                	mov    edi,eax
c00277d3:	89 e9                	mov    ecx,ebp
c00277d5:	d3 e3                	shl    ebx,cl
c00277d7:	89 f0                	mov    eax,esi
c00277d9:	88 d1                	mov    cl,dl
c00277db:	d3 e8                	shr    eax,cl
c00277dd:	09 d8                	or     eax,ebx
c00277df:	89 e9                	mov    ecx,ebp
c00277e1:	d3 e6                	shl    esi,cl
c00277e3:	89 f3                	mov    ebx,esi
c00277e5:	89 fa                	mov    edx,edi
c00277e7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00277eb:	89 d1                	mov    ecx,edx
c00277ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00277f1:	89 c6                	mov    esi,eax
c00277f3:	89 d7                	mov    edi,edx
c00277f5:	39 d1                	cmp    ecx,edx
c00277f7:	72 27                	jb     c0027820 <__umoddi3+0x10c>
c00277f9:	74 21                	je     c002781c <__umoddi3+0x108>
c00277fb:	89 ca                	mov    edx,ecx
c00277fd:	29 f3                	sub    ebx,esi
c00277ff:	19 fa                	sbb    edx,edi
c0027801:	89 d0                	mov    eax,edx
c0027803:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027807:	d3 e0                	shl    eax,cl
c0027809:	89 e9                	mov    ecx,ebp
c002780b:	d3 eb                	shr    ebx,cl
c002780d:	09 d8                	or     eax,ebx
c002780f:	d3 ea                	shr    edx,cl
c0027811:	83 c4 1c             	add    esp,0x1c
c0027814:	5b                   	pop    ebx
c0027815:	5e                   	pop    esi
c0027816:	5f                   	pop    edi
c0027817:	5d                   	pop    ebp
c0027818:	c3                   	ret    
c0027819:	8d 76 00             	lea    esi,[esi+0x0]
c002781c:	39 c3                	cmp    ebx,eax
c002781e:	73 db                	jae    c00277fb <__umoddi3+0xe7>
c0027820:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027824:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0027828:	89 d7                	mov    edi,edx
c002782a:	89 c6                	mov    esi,eax
c002782c:	eb cd                	jmp    c00277fb <__umoddi3+0xe7>

c002782e <__addsf3>:
c002782e:	55                   	push   ebp
c002782f:	89 e5                	mov    ebp,esp
c0027831:	57                   	push   edi
c0027832:	56                   	push   esi
c0027833:	53                   	push   ebx
c0027834:	83 ec 08             	sub    esp,0x8
c0027837:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002783a:	89 fa                	mov    edx,edi
c002783c:	89 f8                	mov    eax,edi
c002783e:	c1 f8 17             	sar    eax,0x17
c0027841:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027844:	c1 e2 08             	shl    edx,0x8
c0027847:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002784d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027850:	89 de                	mov    esi,ebx
c0027852:	c1 fe 17             	sar    esi,0x17
c0027855:	c1 e3 08             	shl    ebx,0x8
c0027858:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002785e:	31 f0                	xor    eax,esi
c0027860:	0f 88 3b 01 00 00    	js     c00279a1 <__addsf3+0x173>
c0027866:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027869:	29 f1                	sub    ecx,esi
c002786b:	85 c9                	test   ecx,ecx
c002786d:	7e 54                	jle    c00278c3 <__addsf3+0x95>
c002786f:	89 f0                	mov    eax,esi
c0027871:	84 c0                	test   al,al
c0027873:	75 10                	jne    c0027885 <__addsf3+0x57>
c0027875:	85 db                	test   ebx,ebx
c0027877:	0f 84 aa 02 00 00    	je     c0027b27 <__addsf3+0x2f9>
c002787d:	49                   	dec    ecx
c002787e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027881:	74 38                	je     c00278bb <__addsf3+0x8d>
c0027883:	eb 13                	jmp    c0027898 <__addsf3+0x6a>
c0027885:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027888:	f7 d0                	not    eax
c002788a:	84 c0                	test   al,al
c002788c:	0f 84 95 02 00 00    	je     c0027b27 <__addsf3+0x2f9>
c0027892:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027898:	83 f9 1f             	cmp    ecx,0x1f
c002789b:	0f 8f 86 02 00 00    	jg     c0027b27 <__addsf3+0x2f9>
c00278a1:	89 de                	mov    esi,ebx
c00278a3:	d3 ee                	shr    esi,cl
c00278a5:	b8 20 00 00 00       	mov    eax,0x20
c00278aa:	29 c8                	sub    eax,ecx
c00278ac:	89 c1                	mov    ecx,eax
c00278ae:	d3 e3                	shl    ebx,cl
c00278b0:	31 c0                	xor    eax,eax
c00278b2:	85 db                	test   ebx,ebx
c00278b4:	0f 95 c0             	setne  al
c00278b7:	09 f0                	or     eax,esi
c00278b9:	01 d0                	add    eax,edx
c00278bb:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00278be:	e9 b6 00 00 00       	jmp    c0027979 <__addsf3+0x14b>
c00278c3:	74 5c                	je     c0027921 <__addsf3+0xf3>
c00278c5:	89 f1                	mov    ecx,esi
c00278c7:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00278ca:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278cd:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00278d1:	75 14                	jne    c00278e7 <__addsf3+0xb9>
c00278d3:	85 d2                	test   edx,edx
c00278d5:	0f 84 4c 02 00 00    	je     c0027b27 <__addsf3+0x2f9>
c00278db:	49                   	dec    ecx
c00278dc:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00278df:	0f 84 94 00 00 00    	je     c0027979 <__addsf3+0x14b>
c00278e5:	eb 12                	jmp    c00278f9 <__addsf3+0xcb>
c00278e7:	89 f0                	mov    eax,esi
c00278e9:	f7 d0                	not    eax
c00278eb:	84 c0                	test   al,al
c00278ed:	0f 84 34 02 00 00    	je     c0027b27 <__addsf3+0x2f9>
c00278f3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00278f9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00278fc:	83 f9 1f             	cmp    ecx,0x1f
c00278ff:	0f 8f 22 02 00 00    	jg     c0027b27 <__addsf3+0x2f9>
c0027905:	89 d7                	mov    edi,edx
c0027907:	d3 ef                	shr    edi,cl
c0027909:	b8 20 00 00 00       	mov    eax,0x20
c002790e:	29 c8                	sub    eax,ecx
c0027910:	89 c1                	mov    ecx,eax
c0027912:	d3 e2                	shl    edx,cl
c0027914:	31 c0                	xor    eax,eax
c0027916:	85 d2                	test   edx,edx
c0027918:	0f 95 c0             	setne  al
c002791b:	09 f8                	or     eax,edi
c002791d:	01 d8                	add    eax,ebx
c002791f:	eb 58                	jmp    c0027979 <__addsf3+0x14b>
c0027921:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027924:	8d 70 01             	lea    esi,[eax+0x1]
c0027927:	f7 c6 fe 00 00 00    	test   esi,0xfe
c002792d:	75 32                	jne    c0027961 <__addsf3+0x133>
c002792f:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027933:	75 1f                	jne    c0027954 <__addsf3+0x126>
c0027935:	85 d2                	test   edx,edx
c0027937:	0f 84 e0 01 00 00    	je     c0027b1d <__addsf3+0x2ef>
c002793d:	85 db                	test   ebx,ebx
c002793f:	0f 84 e2 01 00 00    	je     c0027b27 <__addsf3+0x2f9>
c0027945:	89 d0                	mov    eax,edx
c0027947:	01 d8                	add    eax,ebx
c0027949:	0f 89 a9 01 00 00    	jns    c0027af8 <__addsf3+0x2ca>
c002794f:	e9 9d 01 00 00       	jmp    c0027af1 <__addsf3+0x2c3>
c0027954:	85 d2                	test   edx,edx
c0027956:	0f 85 cb 01 00 00    	jne    c0027b27 <__addsf3+0x2f9>
c002795c:	e9 bc 01 00 00       	jmp    c0027b1d <__addsf3+0x2ef>
c0027961:	31 c0                	xor    eax,eax
c0027963:	89 f1                	mov    ecx,esi
c0027965:	f7 d1                	not    ecx
c0027967:	84 c9                	test   cl,cl
c0027969:	0f 84 90 01 00 00    	je     c0027aff <__addsf3+0x2d1>
c002796f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027972:	d1 e8                	shr    eax,1
c0027974:	e9 86 01 00 00       	jmp    c0027aff <__addsf3+0x2d1>
c0027979:	85 c0                	test   eax,eax
c002797b:	0f 89 7e 01 00 00    	jns    c0027aff <__addsf3+0x2d1>
c0027981:	46                   	inc    esi
c0027982:	89 f2                	mov    edx,esi
c0027984:	f7 d2                	not    edx
c0027986:	84 d2                	test   dl,dl
c0027988:	0f 84 6f 01 00 00    	je     c0027afd <__addsf3+0x2cf>
c002798e:	89 c2                	mov    edx,eax
c0027990:	83 e2 01             	and    edx,0x1
c0027993:	d1 e8                	shr    eax,1
c0027995:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002799a:	09 d0                	or     eax,edx
c002799c:	e9 5e 01 00 00       	jmp    c0027aff <__addsf3+0x2d1>
c00279a1:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c00279a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00279a8:	89 f0                	mov    eax,esi
c00279aa:	0f b6 c0             	movzx  eax,al
c00279ad:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00279b0:	29 c1                	sub    ecx,eax
c00279b2:	85 c9                	test   ecx,ecx
c00279b4:	7e 55                	jle    c0027a0b <__addsf3+0x1dd>
c00279b6:	85 c0                	test   eax,eax
c00279b8:	75 11                	jne    c00279cb <__addsf3+0x19d>
c00279ba:	85 db                	test   ebx,ebx
c00279bc:	0f 84 65 01 00 00    	je     c0027b27 <__addsf3+0x2f9>
c00279c2:	49                   	dec    ecx
c00279c3:	75 19                	jne    c00279de <__addsf3+0x1b0>
c00279c5:	89 d0                	mov    eax,edx
c00279c7:	29 d8                	sub    eax,ebx
c00279c9:	eb 38                	jmp    c0027a03 <__addsf3+0x1d5>
c00279cb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00279ce:	f7 d0                	not    eax
c00279d0:	84 c0                	test   al,al
c00279d2:	0f 84 4f 01 00 00    	je     c0027b27 <__addsf3+0x2f9>
c00279d8:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00279de:	83 f9 1f             	cmp    ecx,0x1f
c00279e1:	0f 8f 40 01 00 00    	jg     c0027b27 <__addsf3+0x2f9>
c00279e7:	89 de                	mov    esi,ebx
c00279e9:	d3 ee                	shr    esi,cl
c00279eb:	b8 20 00 00 00       	mov    eax,0x20
c00279f0:	29 c8                	sub    eax,ecx
c00279f2:	89 c1                	mov    ecx,eax
c00279f4:	d3 e3                	shl    ebx,cl
c00279f6:	31 c0                	xor    eax,eax
c00279f8:	85 db                	test   ebx,ebx
c00279fa:	0f 95 c0             	setne  al
c00279fd:	09 f0                	or     eax,esi
c00279ff:	29 c2                	sub    edx,eax
c0027a01:	89 d0                	mov    eax,edx
c0027a03:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027a06:	e9 af 00 00 00       	jmp    c0027aba <__addsf3+0x28c>
c0027a0b:	74 5c                	je     c0027a69 <__addsf3+0x23b>
c0027a0d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0027a10:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a13:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027a17:	75 14                	jne    c0027a2d <__addsf3+0x1ff>
c0027a19:	85 d2                	test   edx,edx
c0027a1b:	0f 84 06 01 00 00    	je     c0027b27 <__addsf3+0x2f9>
c0027a21:	48                   	dec    eax
c0027a22:	75 1b                	jne    c0027a3f <__addsf3+0x211>
c0027a24:	89 d8                	mov    eax,ebx
c0027a26:	29 d0                	sub    eax,edx
c0027a28:	e9 8d 00 00 00       	jmp    c0027aba <__addsf3+0x28c>
c0027a2d:	89 f1                	mov    ecx,esi
c0027a2f:	f7 d1                	not    ecx
c0027a31:	84 c9                	test   cl,cl
c0027a33:	0f 84 ee 00 00 00    	je     c0027b27 <__addsf3+0x2f9>
c0027a39:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a3f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a42:	83 f8 1f             	cmp    eax,0x1f
c0027a45:	0f 8f dc 00 00 00    	jg     c0027b27 <__addsf3+0x2f9>
c0027a4b:	89 d7                	mov    edi,edx
c0027a4d:	88 c1                	mov    cl,al
c0027a4f:	d3 ef                	shr    edi,cl
c0027a51:	b9 20 00 00 00       	mov    ecx,0x20
c0027a56:	29 c1                	sub    ecx,eax
c0027a58:	d3 e2                	shl    edx,cl
c0027a5a:	31 c0                	xor    eax,eax
c0027a5c:	85 d2                	test   edx,edx
c0027a5e:	0f 95 c0             	setne  al
c0027a61:	09 f8                	or     eax,edi
c0027a63:	29 c3                	sub    ebx,eax
c0027a65:	89 d8                	mov    eax,ebx
c0027a67:	eb 51                	jmp    c0027aba <__addsf3+0x28c>
c0027a69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027a6c:	40                   	inc    eax
c0027a6d:	a8 fe                	test   al,0xfe
c0027a6f:	75 3d                	jne    c0027aae <__addsf3+0x280>
c0027a71:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027a75:	0f 85 a7 00 00 00    	jne    c0027b22 <__addsf3+0x2f4>
c0027a7b:	85 d2                	test   edx,edx
c0027a7d:	75 12                	jne    c0027a91 <__addsf3+0x263>
c0027a7f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027a82:	85 db                	test   ebx,ebx
c0027a84:	0f 85 9d 00 00 00    	jne    c0027b27 <__addsf3+0x2f9>
c0027a8a:	31 ff                	xor    edi,edi
c0027a8c:	e9 96 00 00 00       	jmp    c0027b27 <__addsf3+0x2f9>
c0027a91:	85 db                	test   ebx,ebx
c0027a93:	0f 84 8e 00 00 00    	je     c0027b27 <__addsf3+0x2f9>
c0027a99:	89 d0                	mov    eax,edx
c0027a9b:	29 d8                	sub    eax,ebx
c0027a9d:	79 06                	jns    c0027aa5 <__addsf3+0x277>
c0027a9f:	89 d8                	mov    eax,ebx
c0027aa1:	29 d0                	sub    eax,edx
c0027aa3:	eb 5a                	jmp    c0027aff <__addsf3+0x2d1>
c0027aa5:	bf 00 00 00 00       	mov    edi,0x0
c0027aaa:	74 7b                	je     c0027b27 <__addsf3+0x2f9>
c0027aac:	eb 4a                	jmp    c0027af8 <__addsf3+0x2ca>
c0027aae:	89 d0                	mov    eax,edx
c0027ab0:	29 d8                	sub    eax,ebx
c0027ab2:	79 12                	jns    c0027ac6 <__addsf3+0x298>
c0027ab4:	89 d8                	mov    eax,ebx
c0027ab6:	29 d0                	sub    eax,edx
c0027ab8:	eb 09                	jmp    c0027ac3 <__addsf3+0x295>
c0027aba:	85 c0                	test   eax,eax
c0027abc:	79 41                	jns    c0027aff <__addsf3+0x2d1>
c0027abe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ac3:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027ac6:	31 f6                	xor    esi,esi
c0027ac8:	85 c0                	test   eax,eax
c0027aca:	74 33                	je     c0027aff <__addsf3+0x2d1>
c0027acc:	0f bd c8             	bsr    ecx,eax
c0027acf:	83 f1 1f             	xor    ecx,0x1f
c0027ad2:	d3 e0                	shl    eax,cl
c0027ad4:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027ad8:	39 ca                	cmp    edx,ecx
c0027ada:	7f 10                	jg     c0027aec <__addsf3+0x2be>
c0027adc:	29 d1                	sub    ecx,edx
c0027ade:	41                   	inc    ecx
c0027adf:	d3 e8                	shr    eax,cl
c0027ae1:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027ae4:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0027aea:	eb 13                	jmp    c0027aff <__addsf3+0x2d1>
c0027aec:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027aef:	29 ce                	sub    esi,ecx
c0027af1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027af6:	eb 07                	jmp    c0027aff <__addsf3+0x2d1>
c0027af8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027afb:	eb 02                	jmp    c0027aff <__addsf3+0x2d1>
c0027afd:	31 c0                	xor    eax,eax
c0027aff:	89 c2                	mov    edx,eax
c0027b01:	c1 ea 08             	shr    edx,0x8
c0027b04:	a8 7f                	test   al,0x7f
c0027b06:	0f 95 c1             	setne  cl
c0027b09:	09 d1                	or     ecx,edx
c0027b0b:	83 e1 01             	and    ecx,0x1
c0027b0e:	c1 e8 07             	shr    eax,0x7
c0027b11:	21 c8                	and    eax,ecx
c0027b13:	c1 e6 17             	shl    esi,0x17
c0027b16:	09 d6                	or     esi,edx
c0027b18:	8d 3c 30             	lea    edi,[eax+esi*1]
c0027b1b:	eb 0a                	jmp    c0027b27 <__addsf3+0x2f9>
c0027b1d:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027b20:	eb 05                	jmp    c0027b27 <__addsf3+0x2f9>
c0027b22:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0027b27:	89 f8                	mov    eax,edi
c0027b29:	5a                   	pop    edx
c0027b2a:	59                   	pop    ecx
c0027b2b:	5b                   	pop    ebx
c0027b2c:	5e                   	pop    esi
c0027b2d:	5f                   	pop    edi
c0027b2e:	5d                   	pop    ebp
c0027b2f:	c3                   	ret    

c0027b30 <__subsf3>:
c0027b30:	55                   	push   ebp
c0027b31:	89 e5                	mov    ebp,esp
c0027b33:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b36:	05 00 00 00 80       	add    eax,0x80000000
c0027b3b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0027b3e:	5d                   	pop    ebp
c0027b3f:	e9 ea fc ff ff       	jmp    c002782e <__addsf3>

c0027b44 <__negsf2>:
c0027b44:	55                   	push   ebp
c0027b45:	89 e5                	mov    ebp,esp
c0027b47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027b4a:	05 00 00 00 80       	add    eax,0x80000000
c0027b4f:	5d                   	pop    ebp
c0027b50:	c3                   	ret    

c0027b51 <__mulsf3>:
c0027b51:	55                   	push   ebp
c0027b52:	89 e5                	mov    ebp,esp
c0027b54:	57                   	push   edi
c0027b55:	56                   	push   esi
c0027b56:	53                   	push   ebx
c0027b57:	83 ec 1c             	sub    esp,0x1c
c0027b5a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0027b5d:	89 f0                	mov    eax,esi
c0027b5f:	89 f1                	mov    ecx,esi
c0027b61:	c1 f9 17             	sar    ecx,0x17
c0027b64:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027b67:	c1 e0 08             	shl    eax,0x8
c0027b6a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027b6f:	89 c1                	mov    ecx,eax
c0027b71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027b74:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027b77:	89 c7                	mov    edi,eax
c0027b79:	c1 ff 17             	sar    edi,0x17
c0027b7c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027b80:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027b83:	89 f8                	mov    eax,edi
c0027b85:	0f b6 c0             	movzx  eax,al
c0027b88:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027b8b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0027b8f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027b92:	42                   	inc    edx
c0027b93:	80 e2 fe             	and    dl,0xfe
c0027b96:	75 7b                	jne    c0027c13 <__mulsf3+0xc2>
c0027b98:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027b9c:	74 54                	je     c0027bf2 <__mulsf3+0xa1>
c0027b9e:	85 c9                	test   ecx,ecx
c0027ba0:	0f 85 64 01 00 00    	jne    c0027d0a <__mulsf3+0x1b9>
c0027ba6:	8d 57 01             	lea    edx,[edi+0x1]
c0027ba9:	80 e2 fe             	and    dl,0xfe
c0027bac:	75 1f                	jne    c0027bcd <__mulsf3+0x7c>
c0027bae:	85 c0                	test   eax,eax
c0027bb0:	b8 00 00 00 00       	mov    eax,0x0
c0027bb5:	74 29                	je     c0027be0 <__mulsf3+0x8f>
c0027bb7:	53                   	push   ebx
c0027bb8:	53                   	push   ebx
c0027bb9:	50                   	push   eax
c0027bba:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027bbd:	e8 96 05 00 00       	call   c0028158 <__nesf2>
c0027bc2:	83 c4 10             	add    esp,0x10
c0027bc5:	85 c0                	test   eax,eax
c0027bc7:	0f 85 3a 01 00 00    	jne    c0027d07 <__mulsf3+0x1b6>
c0027bcd:	85 ff                	test   edi,edi
c0027bcf:	0f 89 35 01 00 00    	jns    c0027d0a <__mulsf3+0x1b9>
c0027bd5:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027bdb:	e9 2a 01 00 00       	jmp    c0027d0a <__mulsf3+0x1b9>
c0027be0:	51                   	push   ecx
c0027be1:	51                   	push   ecx
c0027be2:	50                   	push   eax
c0027be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027be6:	e8 6d 05 00 00       	call   c0028158 <__nesf2>
c0027beb:	83 c4 10             	add    esp,0x10
c0027bee:	85 c0                	test   eax,eax
c0027bf0:	eb 15                	jmp    c0027c07 <__mulsf3+0xb6>
c0027bf2:	85 c9                	test   ecx,ecx
c0027bf4:	74 0b                	je     c0027c01 <__mulsf3+0xb0>
c0027bf6:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027bf9:	01 c9                	add    ecx,ecx
c0027bfb:	78 16                	js     c0027c13 <__mulsf3+0xc2>
c0027bfd:	89 d3                	mov    ebx,edx
c0027bff:	eb f5                	jmp    c0027bf6 <__mulsf3+0xa5>
c0027c01:	89 f8                	mov    eax,edi
c0027c03:	f7 d0                	not    eax
c0027c05:	84 c0                	test   al,al
c0027c07:	75 c4                	jne    c0027bcd <__mulsf3+0x7c>
c0027c09:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027c0e:	e9 f7 00 00 00       	jmp    c0027d0a <__mulsf3+0x1b9>
c0027c13:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027c16:	c1 e6 08             	shl    esi,0x8
c0027c19:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027c1f:	8d 57 01             	lea    edx,[edi+0x1]
c0027c22:	80 e2 fe             	and    dl,0xfe
c0027c25:	75 63                	jne    c0027c8a <__mulsf3+0x139>
c0027c27:	85 c0                	test   eax,eax
c0027c29:	74 2f                	je     c0027c5a <__mulsf3+0x109>
c0027c2b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c2f:	0f 89 d2 00 00 00    	jns    c0027d07 <__mulsf3+0x1b6>
c0027c35:	52                   	push   edx
c0027c36:	52                   	push   edx
c0027c37:	6a 00                	push   0x0
c0027c39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c3c:	e8 dc 04 00 00       	call   c002811d <__eqsf2>
c0027c41:	83 c4 10             	add    esp,0x10
c0027c44:	85 c0                	test   eax,eax
c0027c46:	0f 85 bb 00 00 00    	jne    c0027d07 <__mulsf3+0x1b6>
c0027c4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c4f:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027c55:	e9 b0 00 00 00       	jmp    c0027d0a <__mulsf3+0x1b9>
c0027c5a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027c5d:	50                   	push   eax
c0027c5e:	50                   	push   eax
c0027c5f:	6a 00                	push   0x0
c0027c61:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c64:	e8 b4 04 00 00       	call   c002811d <__eqsf2>
c0027c69:	83 c4 10             	add    esp,0x10
c0027c6c:	85 c0                	test   eax,eax
c0027c6e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027c71:	75 0c                	jne    c0027c7f <__mulsf3+0x12e>
c0027c73:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027c77:	0f 89 8a 00 00 00    	jns    c0027d07 <__mulsf3+0x1b6>
c0027c7d:	eb cd                	jmp    c0027c4c <__mulsf3+0xfb>
c0027c7f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027c82:	01 f6                	add    esi,esi
c0027c84:	78 04                	js     c0027c8a <__mulsf3+0x139>
c0027c86:	89 c3                	mov    ebx,eax
c0027c88:	eb f5                	jmp    c0027c7f <__mulsf3+0x12e>
c0027c8a:	89 c8                	mov    eax,ecx
c0027c8c:	0d 00 00 00 80       	or     eax,0x80000000
c0027c91:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c97:	f7 e6                	mul    esi
c0027c99:	85 c0                	test   eax,eax
c0027c9b:	0f 95 c0             	setne  al
c0027c9e:	0f b6 c0             	movzx  eax,al
c0027ca1:	09 c2                	or     edx,eax
c0027ca3:	78 03                	js     c0027ca8 <__mulsf3+0x157>
c0027ca5:	01 d2                	add    edx,edx
c0027ca7:	4b                   	dec    ebx
c0027ca8:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027cae:	7f 22                	jg     c0027cd2 <__mulsf3+0x181>
c0027cb0:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027cb6:	85 db                	test   ebx,ebx
c0027cb8:	7f 23                	jg     c0027cdd <__mulsf3+0x18c>
c0027cba:	83 fb e9             	cmp    ebx,0xffffffe9
c0027cbd:	7c 1a                	jl     c0027cd9 <__mulsf3+0x188>
c0027cbf:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027cc5:	b9 01 00 00 00       	mov    ecx,0x1
c0027cca:	29 d9                	sub    ecx,ebx
c0027ccc:	d3 ea                	shr    edx,cl
c0027cce:	31 db                	xor    ebx,ebx
c0027cd0:	eb 0b                	jmp    c0027cdd <__mulsf3+0x18c>
c0027cd2:	bb ff 00 00 00       	mov    ebx,0xff
c0027cd7:	eb 02                	jmp    c0027cdb <__mulsf3+0x18a>
c0027cd9:	31 db                	xor    ebx,ebx
c0027cdb:	31 d2                	xor    edx,edx
c0027cdd:	89 d0                	mov    eax,edx
c0027cdf:	c1 e8 08             	shr    eax,0x8
c0027ce2:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ce5:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027ceb:	09 fb                	or     ebx,edi
c0027ced:	c1 e3 17             	shl    ebx,0x17
c0027cf0:	09 c3                	or     ebx,eax
c0027cf2:	f6 c2 7f             	test   dl,0x7f
c0027cf5:	0f 95 c1             	setne  cl
c0027cf8:	09 c8                	or     eax,ecx
c0027cfa:	83 e0 01             	and    eax,0x1
c0027cfd:	c1 ea 07             	shr    edx,0x7
c0027d00:	21 c2                	and    edx,eax
c0027d02:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027d05:	eb 03                	jmp    c0027d0a <__mulsf3+0x1b9>
c0027d07:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027d0a:	89 f0                	mov    eax,esi
c0027d0c:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027d0f:	5b                   	pop    ebx
c0027d10:	5e                   	pop    esi
c0027d11:	5f                   	pop    edi
c0027d12:	5d                   	pop    ebp
c0027d13:	c3                   	ret    

c0027d14 <__divsf3>:
c0027d14:	55                   	push   ebp
c0027d15:	89 e5                	mov    ebp,esp
c0027d17:	57                   	push   edi
c0027d18:	56                   	push   esi
c0027d19:	53                   	push   ebx
c0027d1a:	83 ec 1c             	sub    esp,0x1c
c0027d1d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027d20:	89 d8                	mov    eax,ebx
c0027d22:	89 d9                	mov    ecx,ebx
c0027d24:	c1 f9 17             	sar    ecx,0x17
c0027d27:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027d2a:	c1 e0 08             	shl    eax,0x8
c0027d2d:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027d32:	89 c1                	mov    ecx,eax
c0027d34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027d37:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d3a:	89 c7                	mov    edi,eax
c0027d3c:	c1 ff 17             	sar    edi,0x17
c0027d3f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027d43:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027d46:	89 f8                	mov    eax,edi
c0027d48:	0f b6 c0             	movzx  eax,al
c0027d4b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027d4e:	29 c6                	sub    esi,eax
c0027d50:	83 c6 7f             	add    esi,0x7f
c0027d53:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027d56:	42                   	inc    edx
c0027d57:	80 e2 fe             	and    dl,0xfe
c0027d5a:	0f 85 9c 00 00 00    	jne    c0027dfc <__divsf3+0xe8>
c0027d60:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027d64:	74 33                	je     c0027d99 <__divsf3+0x85>
c0027d66:	85 c9                	test   ecx,ecx
c0027d68:	0f 85 c7 01 00 00    	jne    c0027f35 <__divsf3+0x221>
c0027d6e:	8d 57 01             	lea    edx,[edi+0x1]
c0027d71:	80 e2 fe             	and    dl,0xfe
c0027d74:	75 2f                	jne    c0027da5 <__divsf3+0x91>
c0027d76:	85 c0                	test   eax,eax
c0027d78:	74 2b                	je     c0027da5 <__divsf3+0x91>
c0027d7a:	51                   	push   ecx
c0027d7b:	51                   	push   ecx
c0027d7c:	6a 00                	push   0x0
c0027d7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d81:	e8 d2 03 00 00       	call   c0028158 <__nesf2>
c0027d86:	83 c4 10             	add    esp,0x10
c0027d89:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027d8c:	85 c0                	test   eax,eax
c0027d8e:	0f 85 a1 01 00 00    	jne    c0027f35 <__divsf3+0x221>
c0027d94:	e9 92 01 00 00       	jmp    c0027f2b <__divsf3+0x217>
c0027d99:	85 c9                	test   ecx,ecx
c0027d9b:	75 1b                	jne    c0027db8 <__divsf3+0xa4>
c0027d9d:	8d 57 01             	lea    edx,[edi+0x1]
c0027da0:	80 e2 fe             	and    dl,0xfe
c0027da3:	74 1e                	je     c0027dc3 <__divsf3+0xaf>
c0027da5:	85 ff                	test   edi,edi
c0027da7:	0f 89 88 01 00 00    	jns    c0027f35 <__divsf3+0x221>
c0027dad:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027db3:	e9 7d 01 00 00       	jmp    c0027f35 <__divsf3+0x221>
c0027db8:	8d 56 ff             	lea    edx,[esi-0x1]
c0027dbb:	01 c9                	add    ecx,ecx
c0027dbd:	78 3d                	js     c0027dfc <__divsf3+0xe8>
c0027dbf:	89 d6                	mov    esi,edx
c0027dc1:	eb f5                	jmp    c0027db8 <__divsf3+0xa4>
c0027dc3:	85 c0                	test   eax,eax
c0027dc5:	b8 00 00 00 00       	mov    eax,0x0
c0027dca:	74 18                	je     c0027de4 <__divsf3+0xd0>
c0027dcc:	52                   	push   edx
c0027dcd:	52                   	push   edx
c0027dce:	50                   	push   eax
c0027dcf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dd2:	e8 81 03 00 00       	call   c0028158 <__nesf2>
c0027dd7:	83 c4 10             	add    esp,0x10
c0027dda:	85 c0                	test   eax,eax
c0027ddc:	0f 85 50 01 00 00    	jne    c0027f32 <__divsf3+0x21e>
c0027de2:	eb c1                	jmp    c0027da5 <__divsf3+0x91>
c0027de4:	56                   	push   esi
c0027de5:	56                   	push   esi
c0027de6:	50                   	push   eax
c0027de7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027dea:	e8 69 03 00 00       	call   c0028158 <__nesf2>
c0027def:	83 c4 10             	add    esp,0x10
c0027df2:	85 c0                	test   eax,eax
c0027df4:	0f 84 31 01 00 00    	je     c0027f2b <__divsf3+0x217>
c0027dfa:	eb a9                	jmp    c0027da5 <__divsf3+0x91>
c0027dfc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027dff:	c1 e3 08             	shl    ebx,0x8
c0027e02:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027e08:	8d 57 01             	lea    edx,[edi+0x1]
c0027e0b:	80 e2 fe             	and    dl,0xfe
c0027e0e:	75 71                	jne    c0027e81 <__divsf3+0x16d>
c0027e10:	85 c0                	test   eax,eax
c0027e12:	ba 00 00 00 00       	mov    edx,0x0
c0027e17:	74 2f                	je     c0027e48 <__divsf3+0x134>
c0027e19:	51                   	push   ecx
c0027e1a:	51                   	push   ecx
c0027e1b:	52                   	push   edx
c0027e1c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e1f:	e8 f9 02 00 00       	call   c002811d <__eqsf2>
c0027e24:	83 c4 10             	add    esp,0x10
c0027e27:	85 c0                	test   eax,eax
c0027e29:	0f 85 03 01 00 00    	jne    c0027f32 <__divsf3+0x21e>
c0027e2f:	31 d2                	xor    edx,edx
c0027e31:	89 d3                	mov    ebx,edx
c0027e33:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e36:	31 f8                	xor    eax,edi
c0027e38:	0f 89 f7 00 00 00    	jns    c0027f35 <__divsf3+0x221>
c0027e3e:	bb 00 00 00 80       	mov    ebx,0x80000000
c0027e43:	e9 ed 00 00 00       	jmp    c0027f35 <__divsf3+0x221>
c0027e48:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0027e4b:	50                   	push   eax
c0027e4c:	50                   	push   eax
c0027e4d:	52                   	push   edx
c0027e4e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027e51:	e8 c7 02 00 00       	call   c002811d <__eqsf2>
c0027e56:	83 c4 10             	add    esp,0x10
c0027e59:	85 c0                	test   eax,eax
c0027e5b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e5e:	75 16                	jne    c0027e76 <__divsf3+0x162>
c0027e60:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027e63:	31 fb                	xor    ebx,edi
c0027e65:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027e6b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027e71:	e9 bf 00 00 00       	jmp    c0027f35 <__divsf3+0x221>
c0027e76:	8d 46 01             	lea    eax,[esi+0x1]
c0027e79:	01 db                	add    ebx,ebx
c0027e7b:	78 04                	js     c0027e81 <__divsf3+0x16d>
c0027e7d:	89 c6                	mov    esi,eax
c0027e7f:	eb f5                	jmp    c0027e76 <__divsf3+0x162>
c0027e81:	89 c8                	mov    eax,ecx
c0027e83:	0d 00 00 00 80       	or     eax,0x80000000
c0027e88:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027e8e:	31 d2                	xor    edx,edx
c0027e90:	39 d8                	cmp    eax,ebx
c0027e92:	72 07                	jb     c0027e9b <__divsf3+0x187>
c0027e94:	29 d8                	sub    eax,ebx
c0027e96:	ba 01 00 00 00       	mov    edx,0x1
c0027e9b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027ea2:	01 d2                	add    edx,edx
c0027ea4:	89 c1                	mov    ecx,eax
c0027ea6:	01 c0                	add    eax,eax
c0027ea8:	85 c9                	test   ecx,ecx
c0027eaa:	78 04                	js     c0027eb0 <__divsf3+0x19c>
c0027eac:	39 c3                	cmp    ebx,eax
c0027eae:	77 05                	ja     c0027eb5 <__divsf3+0x1a1>
c0027eb0:	29 d8                	sub    eax,ebx
c0027eb2:	83 ca 01             	or     edx,0x1
c0027eb5:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027eb8:	75 e8                	jne    c0027ea2 <__divsf3+0x18e>
c0027eba:	85 c0                	test   eax,eax
c0027ebc:	0f 95 c0             	setne  al
c0027ebf:	0f b6 c0             	movzx  eax,al
c0027ec2:	c1 e2 06             	shl    edx,0x6
c0027ec5:	09 c2                	or     edx,eax
c0027ec7:	78 03                	js     c0027ecc <__divsf3+0x1b8>
c0027ec9:	01 d2                	add    edx,edx
c0027ecb:	4e                   	dec    esi
c0027ecc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027ed2:	7f 22                	jg     c0027ef6 <__divsf3+0x1e2>
c0027ed4:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027eda:	85 f6                	test   esi,esi
c0027edc:	7f 23                	jg     c0027f01 <__divsf3+0x1ed>
c0027ede:	83 fe e9             	cmp    esi,0xffffffe9
c0027ee1:	7c 1a                	jl     c0027efd <__divsf3+0x1e9>
c0027ee3:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027ee9:	b9 01 00 00 00       	mov    ecx,0x1
c0027eee:	29 f1                	sub    ecx,esi
c0027ef0:	d3 ea                	shr    edx,cl
c0027ef2:	31 f6                	xor    esi,esi
c0027ef4:	eb 0b                	jmp    c0027f01 <__divsf3+0x1ed>
c0027ef6:	be ff 00 00 00       	mov    esi,0xff
c0027efb:	eb 02                	jmp    c0027eff <__divsf3+0x1eb>
c0027efd:	31 f6                	xor    esi,esi
c0027eff:	31 d2                	xor    edx,edx
c0027f01:	89 d0                	mov    eax,edx
c0027f03:	c1 e8 08             	shr    eax,0x8
c0027f06:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027f09:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027f0f:	09 fe                	or     esi,edi
c0027f11:	c1 e6 17             	shl    esi,0x17
c0027f14:	09 c6                	or     esi,eax
c0027f16:	f6 c2 7f             	test   dl,0x7f
c0027f19:	0f 95 c1             	setne  cl
c0027f1c:	09 c8                	or     eax,ecx
c0027f1e:	83 e0 01             	and    eax,0x1
c0027f21:	c1 ea 07             	shr    edx,0x7
c0027f24:	21 c2                	and    edx,eax
c0027f26:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027f29:	eb 0a                	jmp    c0027f35 <__divsf3+0x221>
c0027f2b:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027f30:	eb 03                	jmp    c0027f35 <__divsf3+0x221>
c0027f32:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027f35:	89 d8                	mov    eax,ebx
c0027f37:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027f3a:	5b                   	pop    ebx
c0027f3b:	5e                   	pop    esi
c0027f3c:	5f                   	pop    edi
c0027f3d:	5d                   	pop    ebp
c0027f3e:	c3                   	ret    

c0027f3f <__floatsisf>:
c0027f3f:	55                   	push   ebp
c0027f40:	89 e5                	mov    ebp,esp
c0027f42:	53                   	push   ebx
c0027f43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027f46:	85 d2                	test   edx,edx
c0027f48:	7e 2b                	jle    c0027f75 <__floatsisf+0x36>
c0027f4a:	0f bd ca             	bsr    ecx,edx
c0027f4d:	83 f1 1f             	xor    ecx,0x1f
c0027f50:	d3 e2                	shl    edx,cl
c0027f52:	89 d0                	mov    eax,edx
c0027f54:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f59:	89 c3                	mov    ebx,eax
c0027f5b:	c1 eb 08             	shr    ebx,0x8
c0027f5e:	80 e2 7f             	and    dl,0x7f
c0027f61:	0f 95 c2             	setne  dl
c0027f64:	09 da                	or     edx,ebx
c0027f66:	83 e2 01             	and    edx,0x1
c0027f69:	c1 e8 07             	shr    eax,0x7
c0027f6c:	21 c2                	and    edx,eax
c0027f6e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027f73:	eb 32                	jmp    c0027fa7 <__floatsisf+0x68>
c0027f75:	b8 00 00 00 00       	mov    eax,0x0
c0027f7a:	74 34                	je     c0027fb0 <__floatsisf+0x71>
c0027f7c:	f7 da                	neg    edx
c0027f7e:	0f bd ca             	bsr    ecx,edx
c0027f81:	83 f1 1f             	xor    ecx,0x1f
c0027f84:	d3 e2                	shl    edx,cl
c0027f86:	89 d0                	mov    eax,edx
c0027f88:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027f8d:	89 c3                	mov    ebx,eax
c0027f8f:	c1 eb 08             	shr    ebx,0x8
c0027f92:	80 e2 7f             	and    dl,0x7f
c0027f95:	0f 95 c2             	setne  dl
c0027f98:	09 da                	or     edx,ebx
c0027f9a:	83 e2 01             	and    edx,0x1
c0027f9d:	c1 e8 07             	shr    eax,0x7
c0027fa0:	21 c2                	and    edx,eax
c0027fa2:	b8 9e 01 00 00       	mov    eax,0x19e
c0027fa7:	29 c8                	sub    eax,ecx
c0027fa9:	c1 e0 17             	shl    eax,0x17
c0027fac:	09 d8                	or     eax,ebx
c0027fae:	01 d0                	add    eax,edx
c0027fb0:	5b                   	pop    ebx
c0027fb1:	5d                   	pop    ebp
c0027fb2:	c3                   	ret    

c0027fb3 <__floatunsisf>:
c0027fb3:	55                   	push   ebp
c0027fb4:	89 e5                	mov    ebp,esp
c0027fb6:	53                   	push   ebx
c0027fb7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027fba:	31 c0                	xor    eax,eax
c0027fbc:	85 d2                	test   edx,edx
c0027fbe:	74 32                	je     c0027ff2 <__floatunsisf+0x3f>
c0027fc0:	0f bd ca             	bsr    ecx,edx
c0027fc3:	83 f1 1f             	xor    ecx,0x1f
c0027fc6:	d3 e2                	shl    edx,cl
c0027fc8:	89 d0                	mov    eax,edx
c0027fca:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027fcf:	89 c3                	mov    ebx,eax
c0027fd1:	c1 eb 08             	shr    ebx,0x8
c0027fd4:	80 e2 7f             	and    dl,0x7f
c0027fd7:	0f 95 c2             	setne  dl
c0027fda:	09 da                	or     edx,ebx
c0027fdc:	83 e2 01             	and    edx,0x1
c0027fdf:	c1 e8 07             	shr    eax,0x7
c0027fe2:	21 c2                	and    edx,eax
c0027fe4:	b8 9e 00 00 00       	mov    eax,0x9e
c0027fe9:	29 c8                	sub    eax,ecx
c0027feb:	c1 e0 17             	shl    eax,0x17
c0027fee:	09 d8                	or     eax,ebx
c0027ff0:	01 d0                	add    eax,edx
c0027ff2:	5b                   	pop    ebx
c0027ff3:	5d                   	pop    ebp
c0027ff4:	c3                   	ret    

c0027ff5 <__fixsfsi>:
c0027ff5:	55                   	push   ebp
c0027ff6:	89 e5                	mov    ebp,esp
c0027ff8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ffb:	89 d1                	mov    ecx,edx
c0027ffd:	c1 e1 08             	shl    ecx,0x8
c0028000:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0028006:	c1 fa 17             	sar    edx,0x17
c0028009:	78 1c                	js     c0028027 <__fixsfsi+0x32>
c002800b:	83 ea 7f             	sub    edx,0x7f
c002800e:	31 c0                	xor    eax,eax
c0028010:	83 fa 1e             	cmp    edx,0x1e
c0028013:	77 40                	ja     c0028055 <__fixsfsi+0x60>
c0028015:	89 c8                	mov    eax,ecx
c0028017:	0d 00 00 00 80       	or     eax,0x80000000
c002801c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028021:	29 d1                	sub    ecx,edx
c0028023:	d3 e8                	shr    eax,cl
c0028025:	eb 2e                	jmp    c0028055 <__fixsfsi+0x60>
c0028027:	31 c0                	xor    eax,eax
c0028029:	81 c2 81 00 00 00    	add    edx,0x81
c002802f:	78 24                	js     c0028055 <__fixsfsi+0x60>
c0028031:	83 fa 1e             	cmp    edx,0x1e
c0028034:	7e 09                	jle    c002803f <__fixsfsi+0x4a>
c0028036:	83 fa 1f             	cmp    edx,0x1f
c0028039:	75 18                	jne    c0028053 <__fixsfsi+0x5e>
c002803b:	85 c9                	test   ecx,ecx
c002803d:	75 14                	jne    c0028053 <__fixsfsi+0x5e>
c002803f:	89 c8                	mov    eax,ecx
c0028041:	0d 00 00 00 80       	or     eax,0x80000000
c0028046:	b9 1f 00 00 00       	mov    ecx,0x1f
c002804b:	29 d1                	sub    ecx,edx
c002804d:	d3 e8                	shr    eax,cl
c002804f:	f7 d8                	neg    eax
c0028051:	eb 02                	jmp    c0028055 <__fixsfsi+0x60>
c0028053:	31 c0                	xor    eax,eax
c0028055:	5d                   	pop    ebp
c0028056:	c3                   	ret    

c0028057 <__fixunssfsi>:
c0028057:	55                   	push   ebp
c0028058:	89 e5                	mov    ebp,esp
c002805a:	53                   	push   ebx
c002805b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002805e:	89 d3                	mov    ebx,edx
c0028060:	c1 fb 17             	sar    ebx,0x17
c0028063:	83 eb 7f             	sub    ebx,0x7f
c0028066:	31 c0                	xor    eax,eax
c0028068:	83 fb 1f             	cmp    ebx,0x1f
c002806b:	77 18                	ja     c0028085 <__fixunssfsi+0x2e>
c002806d:	89 d0                	mov    eax,edx
c002806f:	c1 e0 08             	shl    eax,0x8
c0028072:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0028077:	0d 00 00 00 80       	or     eax,0x80000000
c002807c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028081:	29 d9                	sub    ecx,ebx
c0028083:	d3 e8                	shr    eax,cl
c0028085:	5b                   	pop    ebx
c0028086:	5d                   	pop    ebp
c0028087:	c3                   	ret    

c0028088 <__cmpsf2>:
c0028088:	55                   	push   ebp
c0028089:	89 e5                	mov    ebp,esp
c002808b:	57                   	push   edi
c002808c:	56                   	push   esi
c002808d:	53                   	push   ebx
c002808e:	83 ec 24             	sub    esp,0x24
c0028091:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028094:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028097:	e8 4f 10 00 00       	call   c00290eb <__truncdfsf2>
c002809c:	5a                   	pop    edx
c002809d:	59                   	pop    ecx
c002809e:	89 c3                	mov    ebx,eax
c00280a0:	c1 e8 17             	shr    eax,0x17
c00280a3:	0f b6 f0             	movzx  esi,al
c00280a6:	89 d8                	mov    eax,ebx
c00280a8:	c1 e8 1f             	shr    eax,0x1f
c00280ab:	31 c6                	xor    esi,eax
c00280ad:	c1 e3 08             	shl    ebx,0x8
c00280b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280b6:	e8 30 10 00 00       	call   c00290eb <__truncdfsf2>
c00280bb:	83 c4 10             	add    esp,0x10
c00280be:	89 c1                	mov    ecx,eax
c00280c0:	c1 e9 17             	shr    ecx,0x17
c00280c3:	0f b6 c9             	movzx  ecx,cl
c00280c6:	89 c7                	mov    edi,eax
c00280c8:	c1 ef 1f             	shr    edi,0x1f
c00280cb:	89 ca                	mov    edx,ecx
c00280cd:	31 fa                	xor    edx,edi
c00280cf:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00280d2:	c1 e0 08             	shl    eax,0x8
c00280d5:	89 c2                	mov    edx,eax
c00280d7:	89 d8                	mov    eax,ebx
c00280d9:	09 d0                	or     eax,edx
c00280db:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00280e0:	09 f0                	or     eax,esi
c00280e2:	75 08                	jne    c00280ec <__cmpsf2+0x64>
c00280e4:	31 c0                	xor    eax,eax
c00280e6:	39 f9                	cmp    ecx,edi
c00280e8:	75 0c                	jne    c00280f6 <__cmpsf2+0x6e>
c00280ea:	eb 29                	jmp    c0028115 <__cmpsf2+0x8d>
c00280ec:	b8 01 00 00 00       	mov    eax,0x1
c00280f1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280f4:	7f 1f                	jg     c0028115 <__cmpsf2+0x8d>
c00280f6:	83 c8 ff             	or     eax,0xffffffff
c00280f9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00280fc:	7c 17                	jl     c0028115 <__cmpsf2+0x8d>
c00280fe:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0028104:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002810a:	b8 01 00 00 00       	mov    eax,0x1
c002810f:	39 d3                	cmp    ebx,edx
c0028111:	77 02                	ja     c0028115 <__cmpsf2+0x8d>
c0028113:	19 c0                	sbb    eax,eax
c0028115:	8d 65 f4             	lea    esp,[ebp-0xc]
c0028118:	5b                   	pop    ebx
c0028119:	5e                   	pop    esi
c002811a:	5f                   	pop    edi
c002811b:	5d                   	pop    ebp
c002811c:	c3                   	ret    

c002811d <__eqsf2>:
c002811d:	55                   	push   ebp
c002811e:	89 e5                	mov    ebp,esp
c0028120:	83 ec 24             	sub    esp,0x24
c0028123:	6a 01                	push   0x1
c0028125:	83 ec 0c             	sub    esp,0xc
c0028128:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002812b:	e8 df 10 00 00       	call   c002920f <__extendsfdf2>
c0028130:	83 c4 10             	add    esp,0x10
c0028133:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028136:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028139:	52                   	push   edx
c002813a:	50                   	push   eax
c002813b:	50                   	push   eax
c002813c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002813f:	e8 cb 10 00 00       	call   c002920f <__extendsfdf2>
c0028144:	59                   	pop    ecx
c0028145:	59                   	pop    ecx
c0028146:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028149:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002814c:	52                   	push   edx
c002814d:	50                   	push   eax
c002814e:	e8 35 ff ff ff       	call   c0028088 <__cmpsf2>
c0028153:	83 c4 20             	add    esp,0x20
c0028156:	c9                   	leave  
c0028157:	c3                   	ret    

c0028158 <__nesf2>:
c0028158:	eb c3                	jmp    c002811d <__eqsf2>

c002815a <__gtsf2>:
c002815a:	55                   	push   ebp
c002815b:	89 e5                	mov    ebp,esp
c002815d:	83 ec 24             	sub    esp,0x24
c0028160:	6a ff                	push   0xffffffff
c0028162:	83 ec 0c             	sub    esp,0xc
c0028165:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028168:	e8 a2 10 00 00       	call   c002920f <__extendsfdf2>
c002816d:	83 c4 10             	add    esp,0x10
c0028170:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028173:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028176:	52                   	push   edx
c0028177:	50                   	push   eax
c0028178:	50                   	push   eax
c0028179:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002817c:	e8 8e 10 00 00       	call   c002920f <__extendsfdf2>
c0028181:	59                   	pop    ecx
c0028182:	59                   	pop    ecx
c0028183:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0028186:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0028189:	52                   	push   edx
c002818a:	50                   	push   eax
c002818b:	e8 f8 fe ff ff       	call   c0028088 <__cmpsf2>
c0028190:	83 c4 20             	add    esp,0x20
c0028193:	c9                   	leave  
c0028194:	c3                   	ret    

c0028195 <__gesf2>:
c0028195:	eb c3                	jmp    c002815a <__gtsf2>

c0028197 <__ltsf2>:
c0028197:	eb 84                	jmp    c002811d <__eqsf2>

c0028199 <__lesf2>:
c0028199:	eb 82                	jmp    c002811d <__eqsf2>

c002819b <__adddf3>:
c002819b:	55                   	push   ebp
c002819c:	89 e5                	mov    ebp,esp
c002819e:	57                   	push   edi
c002819f:	56                   	push   esi
c00281a0:	53                   	push   ebx
c00281a1:	83 ec 24             	sub    esp,0x24
c00281a4:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00281a7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00281aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00281ad:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00281b0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00281b3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00281b6:	89 c8                	mov    eax,ecx
c00281b8:	89 ce                	mov    esi,ecx
c00281ba:	c1 fe 14             	sar    esi,0x14
c00281bd:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c00281c0:	89 fb                	mov    ebx,edi
c00281c2:	89 fa                	mov    edx,edi
c00281c4:	c1 e2 0b             	shl    edx,0xb
c00281c7:	c1 e0 0b             	shl    eax,0xb
c00281ca:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00281cf:	c1 eb 15             	shr    ebx,0x15
c00281d2:	09 d8                	or     eax,ebx
c00281d4:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00281d7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00281da:	c1 fe 14             	sar    esi,0x14
c00281dd:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00281e0:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00281e3:	89 f3                	mov    ebx,esi
c00281e5:	c1 e3 0b             	shl    ebx,0xb
c00281e8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00281eb:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00281ee:	c1 e3 0b             	shl    ebx,0xb
c00281f1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00281f7:	c1 ee 15             	shr    esi,0x15
c00281fa:	09 f3                	or     ebx,esi
c00281fc:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00281ff:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0028202:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0028205:	0f 88 5f 02 00 00    	js     c002846a <__adddf3+0x2cf>
c002820b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002820e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0028211:	85 db                	test   ebx,ebx
c0028213:	0f 8e c7 00 00 00    	jle    c00282e0 <__adddf3+0x145>
c0028219:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0028220:	75 1a                	jne    c002823c <__adddf3+0xa1>
c0028222:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028225:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0028228:	0f 84 b2 05 00 00    	je     c00287e0 <__adddf3+0x645>
c002822e:	4b                   	dec    ebx
c002822f:	75 23                	jne    c0028254 <__adddf3+0xb9>
c0028231:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0028234:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028237:	e9 99 00 00 00       	jmp    c00282d5 <__adddf3+0x13a>
c002823c:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002823f:	f7 d6                	not    esi
c0028241:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028247:	0f 84 93 05 00 00    	je     c00287e0 <__adddf3+0x645>
c002824d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0028254:	83 fb 1f             	cmp    ebx,0x1f
c0028257:	7e 42                	jle    c002829b <__adddf3+0x100>
c0028259:	83 fb 3f             	cmp    ebx,0x3f
c002825c:	0f 8f 7e 05 00 00    	jg     c00287e0 <__adddf3+0x645>
c0028262:	83 e3 1f             	and    ebx,0x1f
c0028265:	89 d9                	mov    ecx,ebx
c0028267:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c002826a:	d3 ef                	shr    edi,cl
c002826c:	31 db                	xor    ebx,ebx
c002826e:	85 c9                	test   ecx,ecx
c0028270:	74 15                	je     c0028287 <__adddf3+0xec>
c0028272:	be 20 00 00 00       	mov    esi,0x20
c0028277:	29 ce                	sub    esi,ecx
c0028279:	89 f1                	mov    ecx,esi
c002827b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002827e:	d3 e6                	shl    esi,cl
c0028280:	31 db                	xor    ebx,ebx
c0028282:	85 f6                	test   esi,esi
c0028284:	0f 95 c3             	setne  bl
c0028287:	31 c9                	xor    ecx,ecx
c0028289:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002828d:	0f 95 c1             	setne  cl
c0028290:	09 cf                	or     edi,ecx
c0028292:	09 fb                	or     ebx,edi
c0028294:	01 da                	add    edx,ebx
c0028296:	83 d0 00             	adc    eax,0x0
c0028299:	eb 3a                	jmp    c00282d5 <__adddf3+0x13a>
c002829b:	bf 20 00 00 00       	mov    edi,0x20
c00282a0:	29 df                	sub    edi,ebx
c00282a2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282a5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00282a8:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00282ab:	d3 e6                	shl    esi,cl
c00282ad:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00282b0:	88 d9                	mov    cl,bl
c00282b2:	d3 ef                	shr    edi,cl
c00282b4:	09 fe                	or     esi,edi
c00282b6:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00282b9:	88 d9                	mov    cl,bl
c00282bb:	d3 ef                	shr    edi,cl
c00282bd:	89 fb                	mov    ebx,edi
c00282bf:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00282c2:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00282c5:	d3 e7                	shl    edi,cl
c00282c7:	85 ff                	test   edi,edi
c00282c9:	0f 95 c1             	setne  cl
c00282cc:	0f b6 c9             	movzx  ecx,cl
c00282cf:	09 ce                	or     esi,ecx
c00282d1:	01 f2                	add    edx,esi
c00282d3:	11 d8                	adc    eax,ebx
c00282d5:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282d8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00282db:	e9 52 01 00 00       	jmp    c0028432 <__adddf3+0x297>
c00282e0:	0f 84 d5 00 00 00    	je     c00283bb <__adddf3+0x220>
c00282e6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00282e9:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00282ec:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00282ef:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00282f2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00282f9:	75 20                	jne    c002831b <__adddf3+0x180>
c00282fb:	89 d6                	mov    esi,edx
c00282fd:	09 c6                	or     esi,eax
c00282ff:	0f 84 db 04 00 00    	je     c00287e0 <__adddf3+0x645>
c0028305:	4b                   	dec    ebx
c0028306:	75 29                	jne    c0028331 <__adddf3+0x196>
c0028308:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002830b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002830e:	01 d1                	add    ecx,edx
c0028310:	11 c6                	adc    esi,eax
c0028312:	89 f0                	mov    eax,esi
c0028314:	89 ca                	mov    edx,ecx
c0028316:	e9 17 01 00 00       	jmp    c0028432 <__adddf3+0x297>
c002831b:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002831e:	f7 d6                	not    esi
c0028320:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028326:	0f 84 b4 04 00 00    	je     c00287e0 <__adddf3+0x645>
c002832c:	0d 00 00 00 80       	or     eax,0x80000000
c0028331:	83 fb 1f             	cmp    ebx,0x1f
c0028334:	7e 48                	jle    c002837e <__adddf3+0x1e3>
c0028336:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028339:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002833c:	83 fb 3f             	cmp    ebx,0x3f
c002833f:	0f 8f 9b 04 00 00    	jg     c00287e0 <__adddf3+0x645>
c0028345:	83 e3 1f             	and    ebx,0x1f
c0028348:	89 d9                	mov    ecx,ebx
c002834a:	89 c7                	mov    edi,eax
c002834c:	d3 ef                	shr    edi,cl
c002834e:	31 db                	xor    ebx,ebx
c0028350:	85 c9                	test   ecx,ecx
c0028352:	74 12                	je     c0028366 <__adddf3+0x1cb>
c0028354:	be 20 00 00 00       	mov    esi,0x20
c0028359:	29 ce                	sub    esi,ecx
c002835b:	89 f1                	mov    ecx,esi
c002835d:	d3 e0                	shl    eax,cl
c002835f:	31 db                	xor    ebx,ebx
c0028361:	85 c0                	test   eax,eax
c0028363:	0f 95 c3             	setne  bl
c0028366:	31 c0                	xor    eax,eax
c0028368:	85 d2                	test   edx,edx
c002836a:	0f 95 c0             	setne  al
c002836d:	09 c7                	or     edi,eax
c002836f:	09 fb                	or     ebx,edi
c0028371:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028374:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028377:	01 da                	add    edx,ebx
c0028379:	83 d6 00             	adc    esi,0x0
c002837c:	eb 39                	jmp    c00283b7 <__adddf3+0x21c>
c002837e:	be 20 00 00 00       	mov    esi,0x20
c0028383:	29 de                	sub    esi,ebx
c0028385:	89 c7                	mov    edi,eax
c0028387:	89 f1                	mov    ecx,esi
c0028389:	d3 e7                	shl    edi,cl
c002838b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002838e:	89 d7                	mov    edi,edx
c0028390:	88 d9                	mov    cl,bl
c0028392:	d3 ef                	shr    edi,cl
c0028394:	89 f9                	mov    ecx,edi
c0028396:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028399:	09 cf                	or     edi,ecx
c002839b:	88 d9                	mov    cl,bl
c002839d:	d3 e8                	shr    eax,cl
c002839f:	89 f1                	mov    ecx,esi
c00283a1:	d3 e2                	shl    edx,cl
c00283a3:	85 d2                	test   edx,edx
c00283a5:	0f 95 c2             	setne  dl
c00283a8:	0f b6 d2             	movzx  edx,dl
c00283ab:	09 d7                	or     edi,edx
c00283ad:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00283b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00283b3:	01 fa                	add    edx,edi
c00283b5:	11 c6                	adc    esi,eax
c00283b7:	89 f0                	mov    eax,esi
c00283b9:	eb 77                	jmp    c0028432 <__adddf3+0x297>
c00283bb:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00283be:	46                   	inc    esi
c00283bf:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00283c2:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00283c8:	75 41                	jne    c002840b <__adddf3+0x270>
c00283ca:	89 d3                	mov    ebx,edx
c00283cc:	09 c3                	or     ebx,eax
c00283ce:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00283d5:	75 27                	jne    c00283fe <__adddf3+0x263>
c00283d7:	85 db                	test   ebx,ebx
c00283d9:	0f 84 fb 03 00 00    	je     c00287da <__adddf3+0x63f>
c00283df:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00283e2:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00283e5:	0f 84 f5 03 00 00    	je     c00287e0 <__adddf3+0x645>
c00283eb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00283ee:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00283f1:	85 c0                	test   eax,eax
c00283f3:	0f 89 91 03 00 00    	jns    c002878a <__adddf3+0x5ef>
c00283f9:	e9 85 03 00 00       	jmp    c0028783 <__adddf3+0x5e8>
c00283fe:	85 db                	test   ebx,ebx
c0028400:	0f 85 da 03 00 00    	jne    c00287e0 <__adddf3+0x645>
c0028406:	e9 cf 03 00 00       	jmp    c00287da <__adddf3+0x63f>
c002840b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002840e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0028411:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028414:	f7 d1                	not    ecx
c0028416:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c002841c:	0f 84 70 03 00 00    	je     c0028792 <__adddf3+0x5f7>
c0028422:	d1 ea                	shr    edx,1
c0028424:	89 c1                	mov    ecx,eax
c0028426:	c1 e1 1f             	shl    ecx,0x1f
c0028429:	09 ca                	or     edx,ecx
c002842b:	d1 e8                	shr    eax,1
c002842d:	e9 6f 03 00 00       	jmp    c00287a1 <__adddf3+0x606>
c0028432:	85 c0                	test   eax,eax
c0028434:	0f 89 67 03 00 00    	jns    c00287a1 <__adddf3+0x606>
c002843a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c002843d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028440:	f7 d1                	not    ecx
c0028442:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0028448:	0f 84 44 03 00 00    	je     c0028792 <__adddf3+0x5f7>
c002844e:	89 d1                	mov    ecx,edx
c0028450:	d1 e9                	shr    ecx,1
c0028452:	83 e2 01             	and    edx,0x1
c0028455:	09 ca                	or     edx,ecx
c0028457:	89 c1                	mov    ecx,eax
c0028459:	c1 e1 1f             	shl    ecx,0x1f
c002845c:	09 ca                	or     edx,ecx
c002845e:	d1 e8                	shr    eax,1
c0028460:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028465:	e9 37 03 00 00       	jmp    c00287a1 <__adddf3+0x606>
c002846a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002846d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028473:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028476:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028479:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002847f:	29 de                	sub    esi,ebx
c0028481:	85 f6                	test   esi,esi
c0028483:	0f 8e bd 00 00 00    	jle    c0028546 <__adddf3+0x3ab>
c0028489:	85 db                	test   ebx,ebx
c002848b:	75 17                	jne    c00284a4 <__adddf3+0x309>
c002848d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028490:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028493:	0f 84 47 03 00 00    	je     c00287e0 <__adddf3+0x645>
c0028499:	4e                   	dec    esi
c002849a:	75 20                	jne    c00284bc <__adddf3+0x321>
c002849c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002849f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00284a2:	eb 5b                	jmp    c00284ff <__adddf3+0x364>
c00284a4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00284a7:	f7 d3                	not    ebx
c00284a9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00284af:	0f 84 2b 03 00 00    	je     c00287e0 <__adddf3+0x645>
c00284b5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00284bc:	83 fe 1f             	cmp    esi,0x1f
c00284bf:	7e 49                	jle    c002850a <__adddf3+0x36f>
c00284c1:	83 fe 3f             	cmp    esi,0x3f
c00284c4:	0f 8f 16 03 00 00    	jg     c00287e0 <__adddf3+0x645>
c00284ca:	83 e6 1f             	and    esi,0x1f
c00284cd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00284d0:	89 f1                	mov    ecx,esi
c00284d2:	d3 ef                	shr    edi,cl
c00284d4:	31 db                	xor    ebx,ebx
c00284d6:	85 f6                	test   esi,esi
c00284d8:	74 13                	je     c00284ed <__adddf3+0x352>
c00284da:	b9 20 00 00 00       	mov    ecx,0x20
c00284df:	29 f1                	sub    ecx,esi
c00284e1:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00284e4:	d3 e6                	shl    esi,cl
c00284e6:	31 db                	xor    ebx,ebx
c00284e8:	85 f6                	test   esi,esi
c00284ea:	0f 95 c3             	setne  bl
c00284ed:	31 c9                	xor    ecx,ecx
c00284ef:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00284f3:	0f 95 c1             	setne  cl
c00284f6:	09 cf                	or     edi,ecx
c00284f8:	09 fb                	or     ebx,edi
c00284fa:	29 da                	sub    edx,ebx
c00284fc:	83 d8 00             	sbb    eax,0x0
c00284ff:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028502:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028505:	e9 aa 01 00 00       	jmp    c00286b4 <__adddf3+0x519>
c002850a:	bf 20 00 00 00       	mov    edi,0x20
c002850f:	29 f7                	sub    edi,esi
c0028511:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028514:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028517:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002851a:	d3 e3                	shl    ebx,cl
c002851c:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002851f:	89 f1                	mov    ecx,esi
c0028521:	d3 ef                	shr    edi,cl
c0028523:	09 fb                	or     ebx,edi
c0028525:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028528:	89 f1                	mov    ecx,esi
c002852a:	d3 ef                	shr    edi,cl
c002852c:	89 fe                	mov    esi,edi
c002852e:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0028531:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0028534:	d3 e7                	shl    edi,cl
c0028536:	85 ff                	test   edi,edi
c0028538:	0f 95 c1             	setne  cl
c002853b:	0f b6 c9             	movzx  ecx,cl
c002853e:	09 cb                	or     ebx,ecx
c0028540:	29 da                	sub    edx,ebx
c0028542:	19 f0                	sbb    eax,esi
c0028544:	eb b9                	jmp    c00284ff <__adddf3+0x364>
c0028546:	0f 84 cd 00 00 00    	je     c0028619 <__adddf3+0x47e>
c002854c:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c002854f:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028552:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028555:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028559:	75 1b                	jne    c0028576 <__adddf3+0x3db>
c002855b:	89 d6                	mov    esi,edx
c002855d:	09 c6                	or     esi,eax
c002855f:	0f 84 7b 02 00 00    	je     c00287e0 <__adddf3+0x645>
c0028565:	4b                   	dec    ebx
c0028566:	75 24                	jne    c002858c <__adddf3+0x3f1>
c0028568:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002856b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002856e:	29 d1                	sub    ecx,edx
c0028570:	19 c6                	sbb    esi,eax
c0028572:	89 ca                	mov    edx,ecx
c0028574:	eb 61                	jmp    c00285d7 <__adddf3+0x43c>
c0028576:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028579:	f7 d6                	not    esi
c002857b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028581:	0f 84 59 02 00 00    	je     c00287e0 <__adddf3+0x645>
c0028587:	0d 00 00 00 80       	or     eax,0x80000000
c002858c:	83 fb 1f             	cmp    ebx,0x1f
c002858f:	7e 4d                	jle    c00285de <__adddf3+0x443>
c0028591:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028594:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028597:	83 fb 3f             	cmp    ebx,0x3f
c002859a:	0f 8f 40 02 00 00    	jg     c00287e0 <__adddf3+0x645>
c00285a0:	83 e3 1f             	and    ebx,0x1f
c00285a3:	89 d9                	mov    ecx,ebx
c00285a5:	89 c7                	mov    edi,eax
c00285a7:	d3 ef                	shr    edi,cl
c00285a9:	31 db                	xor    ebx,ebx
c00285ab:	85 c9                	test   ecx,ecx
c00285ad:	74 12                	je     c00285c1 <__adddf3+0x426>
c00285af:	be 20 00 00 00       	mov    esi,0x20
c00285b4:	29 ce                	sub    esi,ecx
c00285b6:	89 f1                	mov    ecx,esi
c00285b8:	d3 e0                	shl    eax,cl
c00285ba:	31 db                	xor    ebx,ebx
c00285bc:	85 c0                	test   eax,eax
c00285be:	0f 95 c3             	setne  bl
c00285c1:	31 c0                	xor    eax,eax
c00285c3:	85 d2                	test   edx,edx
c00285c5:	0f 95 c0             	setne  al
c00285c8:	09 c7                	or     edi,eax
c00285ca:	09 fb                	or     ebx,edi
c00285cc:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00285cf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00285d2:	29 da                	sub    edx,ebx
c00285d4:	83 de 00             	sbb    esi,0x0
c00285d7:	89 f0                	mov    eax,esi
c00285d9:	e9 d6 00 00 00       	jmp    c00286b4 <__adddf3+0x519>
c00285de:	be 20 00 00 00       	mov    esi,0x20
c00285e3:	29 de                	sub    esi,ebx
c00285e5:	89 c7                	mov    edi,eax
c00285e7:	89 f1                	mov    ecx,esi
c00285e9:	d3 e7                	shl    edi,cl
c00285eb:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00285ee:	89 d7                	mov    edi,edx
c00285f0:	88 d9                	mov    cl,bl
c00285f2:	d3 ef                	shr    edi,cl
c00285f4:	89 f9                	mov    ecx,edi
c00285f6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00285f9:	09 cf                	or     edi,ecx
c00285fb:	88 d9                	mov    cl,bl
c00285fd:	d3 e8                	shr    eax,cl
c00285ff:	89 f1                	mov    ecx,esi
c0028601:	d3 e2                	shl    edx,cl
c0028603:	85 d2                	test   edx,edx
c0028605:	0f 95 c2             	setne  dl
c0028608:	0f b6 d2             	movzx  edx,dl
c002860b:	09 d7                	or     edi,edx
c002860d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028610:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028613:	29 fa                	sub    edx,edi
c0028615:	19 c6                	sbb    esi,eax
c0028617:	eb be                	jmp    c00285d7 <__adddf3+0x43c>
c0028619:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002861c:	8d 5e 01             	lea    ebx,[esi+0x1]
c002861f:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0028625:	75 6a                	jne    c0028691 <__adddf3+0x4f6>
c0028627:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002862b:	75 58                	jne    c0028685 <__adddf3+0x4ea>
c002862d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028630:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028633:	89 d6                	mov    esi,edx
c0028635:	09 c6                	or     esi,eax
c0028637:	75 17                	jne    c0028650 <__adddf3+0x4b5>
c0028639:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002863c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002863f:	85 db                	test   ebx,ebx
c0028641:	0f 85 99 01 00 00    	jne    c00287e0 <__adddf3+0x645>
c0028647:	31 ff                	xor    edi,edi
c0028649:	31 c9                	xor    ecx,ecx
c002864b:	e9 90 01 00 00       	jmp    c00287e0 <__adddf3+0x645>
c0028650:	85 db                	test   ebx,ebx
c0028652:	0f 84 88 01 00 00    	je     c00287e0 <__adddf3+0x645>
c0028658:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002865b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002865e:	85 c0                	test   eax,eax
c0028660:	79 10                	jns    c0028672 <__adddf3+0x4d7>
c0028662:	31 c9                	xor    ecx,ecx
c0028664:	f7 da                	neg    edx
c0028666:	0f 95 c1             	setne  cl
c0028669:	01 c8                	add    eax,ecx
c002866b:	f7 d8                	neg    eax
c002866d:	e9 2f 01 00 00       	jmp    c00287a1 <__adddf3+0x606>
c0028672:	31 ff                	xor    edi,edi
c0028674:	31 c9                	xor    ecx,ecx
c0028676:	89 c3                	mov    ebx,eax
c0028678:	09 d3                	or     ebx,edx
c002867a:	0f 84 60 01 00 00    	je     c00287e0 <__adddf3+0x645>
c0028680:	e9 05 01 00 00       	jmp    c002878a <__adddf3+0x5ef>
c0028685:	31 ff                	xor    edi,edi
c0028687:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002868c:	e9 4f 01 00 00       	jmp    c00287e0 <__adddf3+0x645>
c0028691:	89 c1                	mov    ecx,eax
c0028693:	89 d0                	mov    eax,edx
c0028695:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028698:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002869b:	89 ca                	mov    edx,ecx
c002869d:	85 c9                	test   ecx,ecx
c002869f:	79 2c                	jns    c00286cd <__adddf3+0x532>
c00286a1:	31 c9                	xor    ecx,ecx
c00286a3:	f7 d8                	neg    eax
c00286a5:	0f 95 c1             	setne  cl
c00286a8:	01 ca                	add    edx,ecx
c00286aa:	f7 da                	neg    edx
c00286ac:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00286af:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00286b2:	eb 19                	jmp    c00286cd <__adddf3+0x532>
c00286b4:	85 c0                	test   eax,eax
c00286b6:	0f 89 e5 00 00 00    	jns    c00287a1 <__adddf3+0x606>
c00286bc:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286c1:	89 c1                	mov    ecx,eax
c00286c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00286c6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00286c9:	89 d0                	mov    eax,edx
c00286cb:	89 ca                	mov    edx,ecx
c00286cd:	85 d2                	test   edx,edx
c00286cf:	74 59                	je     c002872a <__adddf3+0x58f>
c00286d1:	0f bd da             	bsr    ebx,edx
c00286d4:	83 f3 1f             	xor    ebx,0x1f
c00286d7:	88 d9                	mov    cl,bl
c00286d9:	d3 e2                	shl    edx,cl
c00286db:	bf 20 00 00 00       	mov    edi,0x20
c00286e0:	89 f9                	mov    ecx,edi
c00286e2:	29 d9                	sub    ecx,ebx
c00286e4:	89 c6                	mov    esi,eax
c00286e6:	d3 ee                	shr    esi,cl
c00286e8:	09 d6                	or     esi,edx
c00286ea:	88 d9                	mov    cl,bl
c00286ec:	d3 e0                	shl    eax,cl
c00286ee:	89 c2                	mov    edx,eax
c00286f0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00286f3:	25 ff 07 00 00       	and    eax,0x7ff
c00286f8:	39 d8                	cmp    eax,ebx
c00286fa:	7f 22                	jg     c002871e <__adddf3+0x583>
c00286fc:	29 c3                	sub    ebx,eax
c00286fe:	43                   	inc    ebx
c00286ff:	88 d9                	mov    cl,bl
c0028701:	d3 ea                	shr    edx,cl
c0028703:	29 df                	sub    edi,ebx
c0028705:	89 f9                	mov    ecx,edi
c0028707:	89 f0                	mov    eax,esi
c0028709:	d3 e0                	shl    eax,cl
c002870b:	09 c2                	or     edx,eax
c002870d:	89 f0                	mov    eax,esi
c002870f:	88 d9                	mov    cl,bl
c0028711:	d3 e8                	shr    eax,cl
c0028713:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028716:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c002871c:	eb 6f                	jmp    c002878d <__adddf3+0x5f2>
c002871e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028721:	29 d8                	sub    eax,ebx
c0028723:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028726:	89 f0                	mov    eax,esi
c0028728:	eb 59                	jmp    c0028783 <__adddf3+0x5e8>
c002872a:	85 c0                	test   eax,eax
c002872c:	74 6a                	je     c0028798 <__adddf3+0x5fd>
c002872e:	0f bd c8             	bsr    ecx,eax
c0028731:	83 f1 1f             	xor    ecx,0x1f
c0028734:	d3 e0                	shl    eax,cl
c0028736:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028739:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002873f:	83 c1 20             	add    ecx,0x20
c0028742:	39 cb                	cmp    ebx,ecx
c0028744:	7f 35                	jg     c002877b <__adddf3+0x5e0>
c0028746:	29 d9                	sub    ecx,ebx
c0028748:	8d 71 01             	lea    esi,[ecx+0x1]
c002874b:	83 fe 1f             	cmp    esi,0x1f
c002874e:	7e 09                	jle    c0028759 <__adddf3+0x5be>
c0028750:	83 e9 1f             	sub    ecx,0x1f
c0028753:	d3 e8                	shr    eax,cl
c0028755:	89 c3                	mov    ebx,eax
c0028757:	eb 11                	jmp    c002876a <__adddf3+0x5cf>
c0028759:	b9 20 00 00 00       	mov    ecx,0x20
c002875e:	29 f1                	sub    ecx,esi
c0028760:	89 c3                	mov    ebx,eax
c0028762:	d3 e3                	shl    ebx,cl
c0028764:	89 f1                	mov    ecx,esi
c0028766:	d3 e8                	shr    eax,cl
c0028768:	89 c2                	mov    edx,eax
c002876a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002876d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028772:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028775:	89 d0                	mov    eax,edx
c0028777:	89 da                	mov    edx,ebx
c0028779:	eb 26                	jmp    c00287a1 <__adddf3+0x606>
c002877b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002877e:	29 cf                	sub    edi,ecx
c0028780:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028783:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028788:	eb 17                	jmp    c00287a1 <__adddf3+0x606>
c002878a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002878d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028790:	eb 0f                	jmp    c00287a1 <__adddf3+0x606>
c0028792:	31 d2                	xor    edx,edx
c0028794:	31 c0                	xor    eax,eax
c0028796:	eb 09                	jmp    c00287a1 <__adddf3+0x606>
c0028798:	89 c2                	mov    edx,eax
c002879a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00287a1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00287a4:	c1 e1 14             	shl    ecx,0x14
c00287a7:	89 c3                	mov    ebx,eax
c00287a9:	c1 eb 0b             	shr    ebx,0xb
c00287ac:	09 d9                	or     ecx,ebx
c00287ae:	89 d3                	mov    ebx,edx
c00287b0:	c1 eb 0b             	shr    ebx,0xb
c00287b3:	c1 e0 15             	shl    eax,0x15
c00287b6:	09 d8                	or     eax,ebx
c00287b8:	89 c7                	mov    edi,eax
c00287ba:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c00287c0:	0f 95 c0             	setne  al
c00287c3:	89 c6                	mov    esi,eax
c00287c5:	09 f3                	or     ebx,esi
c00287c7:	83 e3 01             	and    ebx,0x1
c00287ca:	c1 ea 0a             	shr    edx,0xa
c00287cd:	21 da                	and    edx,ebx
c00287cf:	89 f8                	mov    eax,edi
c00287d1:	01 d0                	add    eax,edx
c00287d3:	83 d1 00             	adc    ecx,0x0
c00287d6:	89 c7                	mov    edi,eax
c00287d8:	eb 06                	jmp    c00287e0 <__adddf3+0x645>
c00287da:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00287dd:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00287e0:	89 f8                	mov    eax,edi
c00287e2:	89 ca                	mov    edx,ecx
c00287e4:	83 c4 24             	add    esp,0x24
c00287e7:	5b                   	pop    ebx
c00287e8:	5e                   	pop    esi
c00287e9:	5f                   	pop    edi
c00287ea:	5d                   	pop    ebp
c00287eb:	c3                   	ret    

c00287ec <__subdf3>:
c00287ec:	55                   	push   ebp
c00287ed:	89 e5                	mov    ebp,esp
c00287ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00287f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00287f5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00287fb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00287fe:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028801:	5d                   	pop    ebp
c0028802:	e9 94 f9 ff ff       	jmp    c002819b <__adddf3>

c0028807 <__negdf2>:
c0028807:	55                   	push   ebp
c0028808:	89 e5                	mov    ebp,esp
c002880a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002880d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028810:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028816:	5d                   	pop    ebp
c0028817:	c3                   	ret    

c0028818 <__muldf3>:
c0028818:	55                   	push   ebp
c0028819:	89 e5                	mov    ebp,esp
c002881b:	57                   	push   edi
c002881c:	56                   	push   esi
c002881d:	53                   	push   ebx
c002881e:	83 ec 24             	sub    esp,0x24
c0028821:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028824:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0028827:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002882a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002882d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0028830:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0028833:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028836:	89 c8                	mov    eax,ecx
c0028838:	c1 f8 14             	sar    eax,0x14
c002883b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002883e:	89 f8                	mov    eax,edi
c0028840:	89 fb                	mov    ebx,edi
c0028842:	c1 e3 0b             	shl    ebx,0xb
c0028845:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0028848:	c1 e1 0b             	shl    ecx,0xb
c002884b:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028851:	c1 e8 15             	shr    eax,0x15
c0028854:	09 c1                	or     ecx,eax
c0028856:	89 d6                	mov    esi,edx
c0028858:	89 d0                	mov    eax,edx
c002885a:	c1 f8 14             	sar    eax,0x14
c002885d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028860:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028863:	89 c3                	mov    ebx,eax
c0028865:	c1 e3 0b             	shl    ebx,0xb
c0028868:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002886b:	c1 e6 0b             	shl    esi,0xb
c002886e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028874:	c1 e8 15             	shr    eax,0x15
c0028877:	09 c6                	or     esi,eax
c0028879:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002887c:	25 ff 07 00 00       	and    eax,0x7ff
c0028881:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028884:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028887:	25 ff 07 00 00       	and    eax,0x7ff
c002888c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002888f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028892:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028895:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002889c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002889f:	40                   	inc    eax
c00288a0:	a9 fe 07 00 00       	test   eax,0x7fe
c00288a5:	0f 85 8d 00 00 00    	jne    c0028938 <__muldf3+0x120>
c00288ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00288ae:	09 c8                	or     eax,ecx
c00288b0:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c00288b4:	74 44                	je     c00288fa <__muldf3+0xe2>
c00288b6:	85 c0                	test   eax,eax
c00288b8:	0f 85 31 02 00 00    	jne    c0028aef <__muldf3+0x2d7>
c00288be:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00288c1:	40                   	inc    eax
c00288c2:	a9 fe 07 00 00       	test   eax,0x7fe
c00288c7:	75 13                	jne    c00288dc <__muldf3+0xc4>
c00288c9:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00288cc:	09 f1                	or     ecx,esi
c00288ce:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00288d2:	74 22                	je     c00288f6 <__muldf3+0xde>
c00288d4:	85 c9                	test   ecx,ecx
c00288d6:	0f 85 0d 02 00 00    	jne    c0028ae9 <__muldf3+0x2d1>
c00288dc:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00288e0:	0f 89 09 02 00 00    	jns    c0028aef <__muldf3+0x2d7>
c00288e6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00288e9:	05 00 00 00 80       	add    eax,0x80000000
c00288ee:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00288f1:	e9 f9 01 00 00       	jmp    c0028aef <__muldf3+0x2d7>
c00288f6:	85 c9                	test   ecx,ecx
c00288f8:	eb 2e                	jmp    c0028928 <__muldf3+0x110>
c00288fa:	85 c0                	test   eax,eax
c00288fc:	74 20                	je     c002891e <__muldf3+0x106>
c00288fe:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028901:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028904:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028907:	c1 ef 1f             	shr    edi,0x1f
c002890a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002890d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0028910:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028913:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028916:	09 f9                	or     ecx,edi
c0028918:	78 1e                	js     c0028938 <__muldf3+0x120>
c002891a:	89 c3                	mov    ebx,eax
c002891c:	eb e0                	jmp    c00288fe <__muldf3+0xe6>
c002891e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028921:	f7 d0                	not    eax
c0028923:	a9 ff 07 00 00       	test   eax,0x7ff
c0028928:	75 b2                	jne    c00288dc <__muldf3+0xc4>
c002892a:	31 ff                	xor    edi,edi
c002892c:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0028933:	e9 b7 01 00 00       	jmp    c0028aef <__muldf3+0x2d7>
c0028938:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002893b:	40                   	inc    eax
c002893c:	a9 fe 07 00 00       	test   eax,0x7fe
c0028941:	75 57                	jne    c002899a <__muldf3+0x182>
c0028943:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0028946:	09 f0                	or     eax,esi
c0028948:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c002894c:	74 23                	je     c0028971 <__muldf3+0x159>
c002894e:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028952:	0f 89 91 01 00 00    	jns    c0028ae9 <__muldf3+0x2d1>
c0028958:	85 c0                	test   eax,eax
c002895a:	0f 85 89 01 00 00    	jne    c0028ae9 <__muldf3+0x2d1>
c0028960:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028963:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028969:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002896c:	e9 7e 01 00 00       	jmp    c0028aef <__muldf3+0x2d7>
c0028971:	85 c0                	test   eax,eax
c0028973:	75 0c                	jne    c0028981 <__muldf3+0x169>
c0028975:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028979:	0f 89 6a 01 00 00    	jns    c0028ae9 <__muldf3+0x2d1>
c002897f:	eb df                	jmp    c0028960 <__muldf3+0x148>
c0028981:	01 f6                	add    esi,esi
c0028983:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028986:	c1 ea 1f             	shr    edx,0x1f
c0028989:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002898c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002898f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028992:	09 d6                	or     esi,edx
c0028994:	78 04                	js     c002899a <__muldf3+0x182>
c0028996:	89 c3                	mov    ebx,eax
c0028998:	eb e7                	jmp    c0028981 <__muldf3+0x169>
c002899a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00289a0:	81 ce 00 00 00 80    	or     esi,0x80000000
c00289a6:	89 c8                	mov    eax,ecx
c00289a8:	f7 e6                	mul    esi
c00289aa:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c00289ad:	89 c7                	mov    edi,eax
c00289af:	89 c8                	mov    eax,ecx
c00289b1:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00289b4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00289b7:	89 c1                	mov    ecx,eax
c00289b9:	89 f0                	mov    eax,esi
c00289bb:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c00289be:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c00289c1:	89 c6                	mov    esi,eax
c00289c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00289c6:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00289c9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00289cc:	31 c0                	xor    eax,eax
c00289ce:	01 f1                	add    ecx,esi
c00289d0:	0f 92 c0             	setb   al
c00289d3:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00289d6:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00289d9:	83 d6 00             	adc    esi,0x0
c00289dc:	01 c7                	add    edi,eax
c00289de:	83 d6 00             	adc    esi,0x0
c00289e1:	01 ca                	add    edx,ecx
c00289e3:	0f 92 c1             	setb   cl
c00289e6:	0f b6 c9             	movzx  ecx,cl
c00289e9:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00289ec:	83 d6 00             	adc    esi,0x0
c00289ef:	01 cf                	add    edi,ecx
c00289f1:	83 d6 00             	adc    esi,0x0
c00289f4:	31 c9                	xor    ecx,ecx
c00289f6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00289f9:	0f 95 c1             	setne  cl
c00289fc:	09 cf                	or     edi,ecx
c00289fe:	85 f6                	test   esi,esi
c0028a00:	78 0c                	js     c0028a0e <__muldf3+0x1f6>
c0028a02:	01 f6                	add    esi,esi
c0028a04:	89 f8                	mov    eax,edi
c0028a06:	c1 e8 1f             	shr    eax,0x1f
c0028a09:	09 c6                	or     esi,eax
c0028a0b:	01 ff                	add    edi,edi
c0028a0d:	4b                   	dec    ebx
c0028a0e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0028a14:	0f 8f 85 00 00 00    	jg     c0028a9f <__muldf3+0x287>
c0028a1a:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0028a20:	85 db                	test   ebx,ebx
c0028a22:	0f 8f 84 00 00 00    	jg     c0028aac <__muldf3+0x294>
c0028a28:	83 fb cc             	cmp    ebx,0xffffffcc
c0028a2b:	7c 79                	jl     c0028aa6 <__muldf3+0x28e>
c0028a2d:	ba 01 00 00 00       	mov    edx,0x1
c0028a32:	29 da                	sub    edx,ebx
c0028a34:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028a3a:	83 fa 1f             	cmp    edx,0x1f
c0028a3d:	7e 30                	jle    c0028a6f <__muldf3+0x257>
c0028a3f:	83 fa 20             	cmp    edx,0x20
c0028a42:	75 0b                	jne    c0028a4f <__muldf3+0x237>
c0028a44:	31 c0                	xor    eax,eax
c0028a46:	85 ff                	test   edi,edi
c0028a48:	0f 95 c0             	setne  al
c0028a4b:	89 c7                	mov    edi,eax
c0028a4d:	eb 1a                	jmp    c0028a69 <__muldf3+0x251>
c0028a4f:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028a52:	89 f0                	mov    eax,esi
c0028a54:	d3 e0                	shl    eax,cl
c0028a56:	09 f8                	or     eax,edi
c0028a58:	0f 95 c0             	setne  al
c0028a5b:	0f b6 c0             	movzx  eax,al
c0028a5e:	89 c7                	mov    edi,eax
c0028a60:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028a65:	29 d9                	sub    ecx,ebx
c0028a67:	d3 ee                	shr    esi,cl
c0028a69:	09 f7                	or     edi,esi
c0028a6b:	31 db                	xor    ebx,ebx
c0028a6d:	eb 3b                	jmp    c0028aaa <__muldf3+0x292>
c0028a6f:	83 c3 1f             	add    ebx,0x1f
c0028a72:	89 f0                	mov    eax,esi
c0028a74:	88 d9                	mov    cl,bl
c0028a76:	d3 e0                	shl    eax,cl
c0028a78:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028a7b:	89 f8                	mov    eax,edi
c0028a7d:	88 d1                	mov    cl,dl
c0028a7f:	d3 e8                	shr    eax,cl
c0028a81:	89 c1                	mov    ecx,eax
c0028a83:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028a86:	09 c8                	or     eax,ecx
c0028a88:	88 d9                	mov    cl,bl
c0028a8a:	d3 e7                	shl    edi,cl
c0028a8c:	31 db                	xor    ebx,ebx
c0028a8e:	85 ff                	test   edi,edi
c0028a90:	0f 95 c3             	setne  bl
c0028a93:	89 df                	mov    edi,ebx
c0028a95:	09 c7                	or     edi,eax
c0028a97:	88 d1                	mov    cl,dl
c0028a99:	d3 ee                	shr    esi,cl
c0028a9b:	31 db                	xor    ebx,ebx
c0028a9d:	eb 0d                	jmp    c0028aac <__muldf3+0x294>
c0028a9f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028aa4:	eb 02                	jmp    c0028aa8 <__muldf3+0x290>
c0028aa6:	31 db                	xor    ebx,ebx
c0028aa8:	31 ff                	xor    edi,edi
c0028aaa:	31 f6                	xor    esi,esi
c0028aac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028aaf:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028ab2:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028ab7:	09 c3                	or     ebx,eax
c0028ab9:	c1 e3 14             	shl    ebx,0x14
c0028abc:	89 f0                	mov    eax,esi
c0028abe:	c1 e8 0b             	shr    eax,0xb
c0028ac1:	09 c3                	or     ebx,eax
c0028ac3:	89 f8                	mov    eax,edi
c0028ac5:	c1 e8 0b             	shr    eax,0xb
c0028ac8:	c1 e6 15             	shl    esi,0x15
c0028acb:	09 c6                	or     esi,eax
c0028acd:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028ad3:	0f 95 c1             	setne  cl
c0028ad6:	09 c8                	or     eax,ecx
c0028ad8:	83 e0 01             	and    eax,0x1
c0028adb:	c1 ef 0a             	shr    edi,0xa
c0028ade:	21 c7                	and    edi,eax
c0028ae0:	01 f7                	add    edi,esi
c0028ae2:	83 d3 00             	adc    ebx,0x0
c0028ae5:	89 da                	mov    edx,ebx
c0028ae7:	eb 03                	jmp    c0028aec <__muldf3+0x2d4>
c0028ae9:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028aec:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028aef:	89 f8                	mov    eax,edi
c0028af1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028af4:	83 c4 24             	add    esp,0x24
c0028af7:	5b                   	pop    ebx
c0028af8:	5e                   	pop    esi
c0028af9:	5f                   	pop    edi
c0028afa:	5d                   	pop    ebp
c0028afb:	c3                   	ret    

c0028afc <__divdf3>:
c0028afc:	55                   	push   ebp
c0028afd:	89 e5                	mov    ebp,esp
c0028aff:	57                   	push   edi
c0028b00:	56                   	push   esi
c0028b01:	53                   	push   ebx
c0028b02:	83 ec 2c             	sub    esp,0x2c
c0028b05:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028b08:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028b0e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0028b11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0028b14:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028b17:	89 ce                	mov    esi,ecx
c0028b19:	89 c8                	mov    eax,ecx
c0028b1b:	c1 f8 14             	sar    eax,0x14
c0028b1e:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0028b21:	89 f8                	mov    eax,edi
c0028b23:	89 fb                	mov    ebx,edi
c0028b25:	c1 e3 0b             	shl    ebx,0xb
c0028b28:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0028b2b:	c1 e6 0b             	shl    esi,0xb
c0028b2e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028b34:	c1 e8 15             	shr    eax,0x15
c0028b37:	09 c6                	or     esi,eax
c0028b39:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0028b3c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028b3f:	89 c2                	mov    edx,eax
c0028b41:	c1 fa 14             	sar    edx,0x14
c0028b44:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0028b47:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028b4a:	89 de                	mov    esi,ebx
c0028b4c:	c1 e6 0b             	shl    esi,0xb
c0028b4f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028b52:	c1 e0 0b             	shl    eax,0xb
c0028b55:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b5a:	c1 eb 15             	shr    ebx,0x15
c0028b5d:	09 d8                	or     eax,ebx
c0028b5f:	89 c2                	mov    edx,eax
c0028b61:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028b64:	25 ff 07 00 00       	and    eax,0x7ff
c0028b69:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0028b6c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028b6f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028b75:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028b78:	29 d8                	sub    eax,ebx
c0028b7a:	05 ff 03 00 00       	add    eax,0x3ff
c0028b7f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028b82:	46                   	inc    esi
c0028b83:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028b89:	0f 85 a5 00 00 00    	jne    c0028c34 <__divdf3+0x138>
c0028b8f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028b92:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028b95:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028b99:	74 2a                	je     c0028bc5 <__divdf3+0xc9>
c0028b9b:	85 f6                	test   esi,esi
c0028b9d:	0f 85 cc 02 00 00    	jne    c0028e6f <__divdf3+0x373>
c0028ba3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028ba6:	40                   	inc    eax
c0028ba7:	a9 fe 07 00 00       	test   eax,0x7fe
c0028bac:	75 26                	jne    c0028bd4 <__divdf3+0xd8>
c0028bae:	85 db                	test   ebx,ebx
c0028bb0:	74 22                	je     c0028bd4 <__divdf3+0xd8>
c0028bb2:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028bb5:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028bb8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028bbb:	09 d0                	or     eax,edx
c0028bbd:	0f 85 ac 02 00 00    	jne    c0028e6f <__divdf3+0x373>
c0028bc3:	eb 63                	jmp    c0028c28 <__divdf3+0x12c>
c0028bc5:	85 f6                	test   esi,esi
c0028bc7:	75 22                	jne    c0028beb <__divdf3+0xef>
c0028bc9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028bcc:	40                   	inc    eax
c0028bcd:	a9 fe 07 00 00       	test   eax,0x7fe
c0028bd2:	74 36                	je     c0028c0a <__divdf3+0x10e>
c0028bd4:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028bd8:	0f 89 91 02 00 00    	jns    c0028e6f <__divdf3+0x373>
c0028bde:	89 f8                	mov    eax,edi
c0028be0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028be6:	e9 80 02 00 00       	jmp    c0028e6b <__divdf3+0x36f>
c0028beb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028bee:	01 f6                	add    esi,esi
c0028bf0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028bf3:	c1 ef 1f             	shr    edi,0x1f
c0028bf6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bf9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028bfc:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028bff:	09 f7                	or     edi,esi
c0028c01:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028c04:	78 2e                	js     c0028c34 <__divdf3+0x138>
c0028c06:	89 c8                	mov    eax,ecx
c0028c08:	eb e1                	jmp    c0028beb <__divdf3+0xef>
c0028c0a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028c0d:	09 d0                	or     eax,edx
c0028c0f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028c13:	74 0f                	je     c0028c24 <__divdf3+0x128>
c0028c15:	85 c0                	test   eax,eax
c0028c17:	74 bb                	je     c0028bd4 <__divdf3+0xd8>
c0028c19:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028c1c:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028c1f:	e9 4b 02 00 00       	jmp    c0028e6f <__divdf3+0x373>
c0028c24:	85 c0                	test   eax,eax
c0028c26:	75 ac                	jne    c0028bd4 <__divdf3+0xd8>
c0028c28:	31 ff                	xor    edi,edi
c0028c2a:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028c2f:	e9 3b 02 00 00       	jmp    c0028e6f <__divdf3+0x373>
c0028c34:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028c37:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028c3a:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028c40:	75 6b                	jne    c0028cad <__divdf3+0x1b1>
c0028c42:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c45:	09 d6                	or     esi,edx
c0028c47:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0028c4b:	74 28                	je     c0028c75 <__divdf3+0x179>
c0028c4d:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028c50:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028c53:	85 f6                	test   esi,esi
c0028c55:	0f 85 14 02 00 00    	jne    c0028e6f <__divdf3+0x373>
c0028c5b:	31 ff                	xor    edi,edi
c0028c5d:	31 c9                	xor    ecx,ecx
c0028c5f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c62:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c65:	0f 89 04 02 00 00    	jns    c0028e6f <__divdf3+0x373>
c0028c6b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028c70:	e9 fa 01 00 00       	jmp    c0028e6f <__divdf3+0x373>
c0028c75:	85 f6                	test   esi,esi
c0028c77:	75 1b                	jne    c0028c94 <__divdf3+0x198>
c0028c79:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028c7c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028c7f:	25 00 00 00 80       	and    eax,0x80000000
c0028c84:	31 c9                	xor    ecx,ecx
c0028c86:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0028c8b:	89 cf                	mov    edi,ecx
c0028c8d:	89 c1                	mov    ecx,eax
c0028c8f:	e9 db 01 00 00       	jmp    c0028e6f <__divdf3+0x373>
c0028c94:	01 d2                	add    edx,edx
c0028c96:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028c99:	c1 eb 1f             	shr    ebx,0x1f
c0028c9c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028c9f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028ca2:	8d 48 01             	lea    ecx,[eax+0x1]
c0028ca5:	09 da                	or     edx,ebx
c0028ca7:	78 04                	js     c0028cad <__divdf3+0x1b1>
c0028ca9:	89 c8                	mov    eax,ecx
c0028cab:	eb e7                	jmp    c0028c94 <__divdf3+0x198>
c0028cad:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028cb0:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028cb6:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028cbc:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028cbf:	39 d6                	cmp    esi,edx
c0028cc1:	77 0d                	ja     c0028cd0 <__divdf3+0x1d4>
c0028cc3:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028cc6:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028cc9:	72 1b                	jb     c0028ce6 <__divdf3+0x1ea>
c0028ccb:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028cce:	75 16                	jne    c0028ce6 <__divdf3+0x1ea>
c0028cd0:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028cd3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028cd6:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028cd9:	83 de 00             	sbb    esi,0x0
c0028cdc:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028cdf:	ba 01 00 00 00       	mov    edx,0x1
c0028ce4:	eb 02                	jmp    c0028ce8 <__divdf3+0x1ec>
c0028ce6:	31 d2                	xor    edx,edx
c0028ce8:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028cef:	31 ff                	xor    edi,edi
c0028cf1:	01 ff                	add    edi,edi
c0028cf3:	89 d1                	mov    ecx,edx
c0028cf5:	c1 e9 1f             	shr    ecx,0x1f
c0028cf8:	09 cf                	or     edi,ecx
c0028cfa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028cfd:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028d00:	89 da                	mov    edx,ebx
c0028d02:	89 f3                	mov    ebx,esi
c0028d04:	8d 34 36             	lea    esi,[esi+esi*1]
c0028d07:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028d0a:	c1 e9 1f             	shr    ecx,0x1f
c0028d0d:	09 ce                	or     esi,ecx
c0028d0f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028d12:	01 c9                	add    ecx,ecx
c0028d14:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0028d17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028d1a:	85 db                	test   ebx,ebx
c0028d1c:	78 29                	js     c0028d47 <__divdf3+0x24b>
c0028d1e:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028d21:	72 07                	jb     c0028d2a <__divdf3+0x22e>
c0028d23:	75 3c                	jne    c0028d61 <__divdf3+0x265>
c0028d25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d28:	77 37                	ja     c0028d61 <__divdf3+0x265>
c0028d2a:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028d2d:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028d30:	31 d2                	xor    edx,edx
c0028d32:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0028d35:	0f 97 c2             	seta   dl
c0028d38:	29 d6                	sub    esi,edx
c0028d3a:	89 d9                	mov    ecx,ebx
c0028d3c:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028d3f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028d42:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0028d45:	eb 17                	jmp    c0028d5e <__divdf3+0x262>
c0028d47:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028d4a:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028d4d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028d50:	0f 97 c1             	seta   cl
c0028d53:	0f b6 c9             	movzx  ecx,cl
c0028d56:	29 ce                	sub    esi,ecx
c0028d58:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0028d5b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0028d5e:	83 ca 01             	or     edx,0x1
c0028d61:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028d64:	75 8b                	jne    c0028cf1 <__divdf3+0x1f5>
c0028d66:	c1 e7 09             	shl    edi,0x9
c0028d69:	89 d1                	mov    ecx,edx
c0028d6b:	c1 e9 17             	shr    ecx,0x17
c0028d6e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028d71:	09 f3                	or     ebx,esi
c0028d73:	0f 95 c3             	setne  bl
c0028d76:	0f b6 db             	movzx  ebx,bl
c0028d79:	c1 e2 09             	shl    edx,0x9
c0028d7c:	09 d3                	or     ebx,edx
c0028d7e:	89 ca                	mov    edx,ecx
c0028d80:	09 fa                	or     edx,edi
c0028d82:	78 0c                	js     c0028d90 <__divdf3+0x294>
c0028d84:	01 d2                	add    edx,edx
c0028d86:	89 d9                	mov    ecx,ebx
c0028d88:	c1 e9 1f             	shr    ecx,0x1f
c0028d8b:	09 ca                	or     edx,ecx
c0028d8d:	01 db                	add    ebx,ebx
c0028d8f:	48                   	dec    eax
c0028d90:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028d95:	0f 8f 83 00 00 00    	jg     c0028e1e <__divdf3+0x322>
c0028d9b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028da1:	85 c0                	test   eax,eax
c0028da3:	0f 8f 82 00 00 00    	jg     c0028e2b <__divdf3+0x32f>
c0028da9:	83 f8 cc             	cmp    eax,0xffffffcc
c0028dac:	7c 77                	jl     c0028e25 <__divdf3+0x329>
c0028dae:	be 01 00 00 00       	mov    esi,0x1
c0028db3:	29 c6                	sub    esi,eax
c0028db5:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028dbb:	83 fe 1f             	cmp    esi,0x1f
c0028dbe:	7e 2f                	jle    c0028def <__divdf3+0x2f3>
c0028dc0:	83 fe 20             	cmp    esi,0x20
c0028dc3:	75 0a                	jne    c0028dcf <__divdf3+0x2d3>
c0028dc5:	85 db                	test   ebx,ebx
c0028dc7:	0f 95 c3             	setne  bl
c0028dca:	0f b6 db             	movzx  ebx,bl
c0028dcd:	eb 1a                	jmp    c0028de9 <__divdf3+0x2ed>
c0028dcf:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028dd2:	89 d7                	mov    edi,edx
c0028dd4:	d3 e7                	shl    edi,cl
c0028dd6:	89 f9                	mov    ecx,edi
c0028dd8:	09 d9                	or     ecx,ebx
c0028dda:	0f 95 c3             	setne  bl
c0028ddd:	0f b6 db             	movzx  ebx,bl
c0028de0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028de5:	29 c1                	sub    ecx,eax
c0028de7:	d3 ea                	shr    edx,cl
c0028de9:	09 d3                	or     ebx,edx
c0028deb:	31 c0                	xor    eax,eax
c0028ded:	eb 3a                	jmp    c0028e29 <__divdf3+0x32d>
c0028def:	83 c0 1f             	add    eax,0x1f
c0028df2:	89 d7                	mov    edi,edx
c0028df4:	88 c1                	mov    cl,al
c0028df6:	d3 e7                	shl    edi,cl
c0028df8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028dfb:	89 df                	mov    edi,ebx
c0028dfd:	89 f1                	mov    ecx,esi
c0028dff:	d3 ef                	shr    edi,cl
c0028e01:	89 f9                	mov    ecx,edi
c0028e03:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028e06:	09 cf                	or     edi,ecx
c0028e08:	88 c1                	mov    cl,al
c0028e0a:	d3 e3                	shl    ebx,cl
c0028e0c:	85 db                	test   ebx,ebx
c0028e0e:	0f 95 c3             	setne  bl
c0028e11:	0f b6 db             	movzx  ebx,bl
c0028e14:	09 fb                	or     ebx,edi
c0028e16:	89 f1                	mov    ecx,esi
c0028e18:	d3 ea                	shr    edx,cl
c0028e1a:	31 c0                	xor    eax,eax
c0028e1c:	eb 0d                	jmp    c0028e2b <__divdf3+0x32f>
c0028e1e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0028e23:	eb 02                	jmp    c0028e27 <__divdf3+0x32b>
c0028e25:	31 c0                	xor    eax,eax
c0028e27:	31 db                	xor    ebx,ebx
c0028e29:	31 d2                	xor    edx,edx
c0028e2b:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028e2e:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028e31:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0028e37:	09 c8                	or     eax,ecx
c0028e39:	c1 e0 14             	shl    eax,0x14
c0028e3c:	89 d1                	mov    ecx,edx
c0028e3e:	c1 e9 0b             	shr    ecx,0xb
c0028e41:	09 c8                	or     eax,ecx
c0028e43:	89 c6                	mov    esi,eax
c0028e45:	89 d9                	mov    ecx,ebx
c0028e47:	c1 e9 0b             	shr    ecx,0xb
c0028e4a:	c1 e2 15             	shl    edx,0x15
c0028e4d:	09 ca                	or     edx,ecx
c0028e4f:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028e55:	0f 95 c0             	setne  al
c0028e58:	09 c1                	or     ecx,eax
c0028e5a:	83 e1 01             	and    ecx,0x1
c0028e5d:	c1 eb 0a             	shr    ebx,0xa
c0028e60:	21 cb                	and    ebx,ecx
c0028e62:	01 d3                	add    ebx,edx
c0028e64:	89 d8                	mov    eax,ebx
c0028e66:	83 d6 00             	adc    esi,0x0
c0028e69:	89 f2                	mov    edx,esi
c0028e6b:	89 c7                	mov    edi,eax
c0028e6d:	89 d1                	mov    ecx,edx
c0028e6f:	89 f8                	mov    eax,edi
c0028e71:	89 ca                	mov    edx,ecx
c0028e73:	83 c4 2c             	add    esp,0x2c
c0028e76:	5b                   	pop    ebx
c0028e77:	5e                   	pop    esi
c0028e78:	5f                   	pop    edi
c0028e79:	5d                   	pop    ebp
c0028e7a:	c3                   	ret    

c0028e7b <__floatsidf>:
c0028e7b:	55                   	push   ebp
c0028e7c:	89 e5                	mov    ebp,esp
c0028e7e:	56                   	push   esi
c0028e7f:	53                   	push   ebx
c0028e80:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028e83:	85 db                	test   ebx,ebx
c0028e85:	7e 15                	jle    c0028e9c <__floatsidf+0x21>
c0028e87:	0f bd cb             	bsr    ecx,ebx
c0028e8a:	83 f1 1f             	xor    ecx,0x1f
c0028e8d:	d3 e3                	shl    ebx,cl
c0028e8f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028e95:	b8 1e 04 00 00       	mov    eax,0x41e
c0028e9a:	eb 21                	jmp    c0028ebd <__floatsidf+0x42>
c0028e9c:	b8 00 00 00 00       	mov    eax,0x0
c0028ea1:	ba 00 00 00 00       	mov    edx,0x0
c0028ea6:	74 2a                	je     c0028ed2 <__floatsidf+0x57>
c0028ea8:	f7 db                	neg    ebx
c0028eaa:	0f bd cb             	bsr    ecx,ebx
c0028ead:	83 f1 1f             	xor    ecx,0x1f
c0028eb0:	d3 e3                	shl    ebx,cl
c0028eb2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028eb8:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028ebd:	29 c8                	sub    eax,ecx
c0028ebf:	c1 e0 14             	shl    eax,0x14
c0028ec2:	89 c1                	mov    ecx,eax
c0028ec4:	89 de                	mov    esi,ebx
c0028ec6:	c1 ee 0b             	shr    esi,0xb
c0028ec9:	09 f1                	or     ecx,esi
c0028ecb:	89 ca                	mov    edx,ecx
c0028ecd:	c1 e3 15             	shl    ebx,0x15
c0028ed0:	89 d8                	mov    eax,ebx
c0028ed2:	5b                   	pop    ebx
c0028ed3:	5e                   	pop    esi
c0028ed4:	5d                   	pop    ebp
c0028ed5:	c3                   	ret    

c0028ed6 <__floatunsidf>:
c0028ed6:	55                   	push   ebp
c0028ed7:	89 e5                	mov    ebp,esp
c0028ed9:	56                   	push   esi
c0028eda:	53                   	push   ebx
c0028edb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028ede:	85 db                	test   ebx,ebx
c0028ee0:	74 2a                	je     c0028f0c <__floatunsidf+0x36>
c0028ee2:	0f bd cb             	bsr    ecx,ebx
c0028ee5:	83 f1 1f             	xor    ecx,0x1f
c0028ee8:	d3 e3                	shl    ebx,cl
c0028eea:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028ef0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028ef5:	29 c8                	sub    eax,ecx
c0028ef7:	c1 e0 14             	shl    eax,0x14
c0028efa:	89 c1                	mov    ecx,eax
c0028efc:	89 de                	mov    esi,ebx
c0028efe:	c1 ee 0b             	shr    esi,0xb
c0028f01:	09 f1                	or     ecx,esi
c0028f03:	89 ca                	mov    edx,ecx
c0028f05:	c1 e3 15             	shl    ebx,0x15
c0028f08:	89 d8                	mov    eax,ebx
c0028f0a:	eb 04                	jmp    c0028f10 <__floatunsidf+0x3a>
c0028f0c:	31 c0                	xor    eax,eax
c0028f0e:	31 d2                	xor    edx,edx
c0028f10:	5b                   	pop    ebx
c0028f11:	5e                   	pop    esi
c0028f12:	5d                   	pop    ebp
c0028f13:	c3                   	ret    

c0028f14 <__fixdfsi>:
c0028f14:	55                   	push   ebp
c0028f15:	89 e5                	mov    ebp,esp
c0028f17:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f1a:	89 d1                	mov    ecx,edx
c0028f1c:	c1 e1 0b             	shl    ecx,0xb
c0028f1f:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028f28:	c1 e8 15             	shr    eax,0x15
c0028f2b:	09 c1                	or     ecx,eax
c0028f2d:	c1 fa 14             	sar    edx,0x14
c0028f30:	78 1f                	js     c0028f51 <__fixdfsi+0x3d>
c0028f32:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028f38:	31 c0                	xor    eax,eax
c0028f3a:	83 fa 1e             	cmp    edx,0x1e
c0028f3d:	77 40                	ja     c0028f7f <__fixdfsi+0x6b>
c0028f3f:	89 c8                	mov    eax,ecx
c0028f41:	0d 00 00 00 80       	or     eax,0x80000000
c0028f46:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f4b:	29 d1                	sub    ecx,edx
c0028f4d:	d3 e8                	shr    eax,cl
c0028f4f:	eb 2e                	jmp    c0028f7f <__fixdfsi+0x6b>
c0028f51:	31 c0                	xor    eax,eax
c0028f53:	81 c2 01 04 00 00    	add    edx,0x401
c0028f59:	78 24                	js     c0028f7f <__fixdfsi+0x6b>
c0028f5b:	83 fa 1e             	cmp    edx,0x1e
c0028f5e:	7e 09                	jle    c0028f69 <__fixdfsi+0x55>
c0028f60:	83 fa 1f             	cmp    edx,0x1f
c0028f63:	75 18                	jne    c0028f7d <__fixdfsi+0x69>
c0028f65:	85 c9                	test   ecx,ecx
c0028f67:	75 14                	jne    c0028f7d <__fixdfsi+0x69>
c0028f69:	89 c8                	mov    eax,ecx
c0028f6b:	0d 00 00 00 80       	or     eax,0x80000000
c0028f70:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028f75:	29 d1                	sub    ecx,edx
c0028f77:	d3 e8                	shr    eax,cl
c0028f79:	f7 d8                	neg    eax
c0028f7b:	eb 02                	jmp    c0028f7f <__fixdfsi+0x6b>
c0028f7d:	31 c0                	xor    eax,eax
c0028f7f:	5d                   	pop    ebp
c0028f80:	c3                   	ret    

c0028f81 <__fixunsdfsi>:
c0028f81:	55                   	push   ebp
c0028f82:	89 e5                	mov    ebp,esp
c0028f84:	53                   	push   ebx
c0028f85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028f88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028f8b:	89 d3                	mov    ebx,edx
c0028f8d:	c1 fb 14             	sar    ebx,0x14
c0028f90:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028f96:	31 c0                	xor    eax,eax
c0028f98:	83 fb 1f             	cmp    ebx,0x1f
c0028f9b:	77 1d                	ja     c0028fba <__fixunsdfsi+0x39>
c0028f9d:	89 d0                	mov    eax,edx
c0028f9f:	c1 e0 0b             	shl    eax,0xb
c0028fa2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028fa7:	c1 e9 15             	shr    ecx,0x15
c0028faa:	09 c8                	or     eax,ecx
c0028fac:	0d 00 00 00 80       	or     eax,0x80000000
c0028fb1:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028fb6:	29 d9                	sub    ecx,ebx
c0028fb8:	d3 e8                	shr    eax,cl
c0028fba:	5b                   	pop    ebx
c0028fbb:	5d                   	pop    ebp
c0028fbc:	c3                   	ret    

c0028fbd <__cmpdf2>:
c0028fbd:	55                   	push   ebp
c0028fbe:	89 e5                	mov    ebp,esp
c0028fc0:	57                   	push   edi
c0028fc1:	56                   	push   esi
c0028fc2:	53                   	push   ebx
c0028fc3:	83 ec 0c             	sub    esp,0xc
c0028fc6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028fc9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028fcc:	89 ca                	mov    edx,ecx
c0028fce:	c1 ea 14             	shr    edx,0x14
c0028fd1:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028fd7:	89 cb                	mov    ebx,ecx
c0028fd9:	c1 fb 1f             	sar    ebx,0x1f
c0028fdc:	31 da                	xor    edx,ebx
c0028fde:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028fe1:	89 df                	mov    edi,ebx
c0028fe3:	c1 e7 0b             	shl    edi,0xb
c0028fe6:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028fe9:	c1 e1 0b             	shl    ecx,0xb
c0028fec:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ff2:	c1 eb 15             	shr    ebx,0x15
c0028ff5:	09 d9                	or     ecx,ebx
c0028ff7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028ffa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028ffd:	89 ce                	mov    esi,ecx
c0028fff:	c1 ee 14             	shr    esi,0x14
c0029002:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0029008:	89 cb                	mov    ebx,ecx
c002900a:	c1 fb 1f             	sar    ebx,0x1f
c002900d:	31 de                	xor    esi,ebx
c002900f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0029012:	89 df                	mov    edi,ebx
c0029014:	c1 e7 0b             	shl    edi,0xb
c0029017:	c1 e1 0b             	shl    ecx,0xb
c002901a:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0029020:	c1 eb 15             	shr    ebx,0x15
c0029023:	09 d9                	or     ecx,ebx
c0029025:	89 d3                	mov    ebx,edx
c0029027:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002902d:	43                   	inc    ebx
c002902e:	83 fb 01             	cmp    ebx,0x1
c0029031:	77 08                	ja     c002903b <__cmpdf2+0x7e>
c0029033:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0029036:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0029039:	75 68                	jne    c00290a3 <__cmpdf2+0xe6>
c002903b:	89 f3                	mov    ebx,esi
c002903d:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0029043:	43                   	inc    ebx
c0029044:	83 fb 01             	cmp    ebx,0x1
c0029047:	77 06                	ja     c002904f <__cmpdf2+0x92>
c0029049:	89 fb                	mov    ebx,edi
c002904b:	09 cb                	or     ebx,ecx
c002904d:	75 54                	jne    c00290a3 <__cmpdf2+0xe6>
c002904f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0029052:	09 f8                	or     eax,edi
c0029054:	09 c8                	or     eax,ecx
c0029056:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0029059:	75 12                	jne    c002906d <__cmpdf2+0xb0>
c002905b:	8d 42 01             	lea    eax,[edx+0x1]
c002905e:	83 f8 01             	cmp    eax,0x1
c0029061:	77 0a                	ja     c002906d <__cmpdf2+0xb0>
c0029063:	8d 5e 01             	lea    ebx,[esi+0x1]
c0029066:	31 c0                	xor    eax,eax
c0029068:	83 fb 01             	cmp    ebx,0x1
c002906b:	76 36                	jbe    c00290a3 <__cmpdf2+0xe6>
c002906d:	b8 01 00 00 00       	mov    eax,0x1
c0029072:	39 f2                	cmp    edx,esi
c0029074:	7f 2d                	jg     c00290a3 <__cmpdf2+0xe6>
c0029076:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002907b:	7c 26                	jl     c00290a3 <__cmpdf2+0xe6>
c002907d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0029080:	77 07                	ja     c0029089 <__cmpdf2+0xcc>
c0029082:	72 16                	jb     c002909a <__cmpdf2+0xdd>
c0029084:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0029087:	76 0a                	jbe    c0029093 <__cmpdf2+0xd6>
c0029089:	89 d0                	mov    eax,edx
c002908b:	c1 f8 1f             	sar    eax,0x1f
c002908e:	83 c8 01             	or     eax,0x1
c0029091:	eb 10                	jmp    c00290a3 <__cmpdf2+0xe6>
c0029093:	b8 00 00 00 00       	mov    eax,0x0
c0029098:	73 09                	jae    c00290a3 <__cmpdf2+0xe6>
c002909a:	89 d0                	mov    eax,edx
c002909c:	c1 f8 1f             	sar    eax,0x1f
c002909f:	83 e0 02             	and    eax,0x2
c00290a2:	48                   	dec    eax
c00290a3:	83 c4 0c             	add    esp,0xc
c00290a6:	5b                   	pop    ebx
c00290a7:	5e                   	pop    esi
c00290a8:	5f                   	pop    edi
c00290a9:	5d                   	pop    ebp
c00290aa:	c3                   	ret    

c00290ab <__eqdf2>:
c00290ab:	55                   	push   ebp
c00290ac:	89 e5                	mov    ebp,esp
c00290ae:	50                   	push   eax
c00290af:	6a 01                	push   0x1
c00290b1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00290b4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00290b7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00290ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00290bd:	e8 fb fe ff ff       	call   c0028fbd <__cmpdf2>
c00290c2:	83 c4 18             	add    esp,0x18
c00290c5:	c9                   	leave  
c00290c6:	c3                   	ret    

c00290c7 <__nedf2>:
c00290c7:	eb e2                	jmp    c00290ab <__eqdf2>

c00290c9 <__gtdf2>:
c00290c9:	55                   	push   ebp
c00290ca:	89 e5                	mov    ebp,esp
c00290cc:	50                   	push   eax
c00290cd:	6a ff                	push   0xffffffff
c00290cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00290d2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00290d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00290d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00290db:	e8 dd fe ff ff       	call   c0028fbd <__cmpdf2>
c00290e0:	83 c4 18             	add    esp,0x18
c00290e3:	c9                   	leave  
c00290e4:	c3                   	ret    

c00290e5 <__gedf2>:
c00290e5:	eb e2                	jmp    c00290c9 <__gtdf2>

c00290e7 <__ltdf2>:
c00290e7:	eb c2                	jmp    c00290ab <__eqdf2>

c00290e9 <__ledf2>:
c00290e9:	eb c0                	jmp    c00290ab <__eqdf2>

c00290eb <__truncdfsf2>:
c00290eb:	55                   	push   ebp
c00290ec:	89 e5                	mov    ebp,esp
c00290ee:	57                   	push   edi
c00290ef:	56                   	push   esi
c00290f0:	53                   	push   ebx
c00290f1:	83 ec 0c             	sub    esp,0xc
c00290f4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00290f7:	89 d1                	mov    ecx,edx
c00290f9:	c1 f9 14             	sar    ecx,0x14
c00290fc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00290ff:	89 df                	mov    edi,ebx
c0029101:	c1 e7 0b             	shl    edi,0xb
c0029104:	89 d0                	mov    eax,edx
c0029106:	c1 e0 0b             	shl    eax,0xb
c0029109:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002910e:	c1 eb 15             	shr    ebx,0x15
c0029111:	09 d8                	or     eax,ebx
c0029113:	89 cb                	mov    ebx,ecx
c0029115:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002911b:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0029121:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0029127:	0f 86 9e 00 00 00    	jbe    c00291cb <__truncdfsf2+0xe0>
c002912d:	85 db                	test   ebx,ebx
c002912f:	75 0a                	jne    c002913b <__truncdfsf2+0x50>
c0029131:	c1 fa 17             	sar    edx,0x17
c0029134:	30 d2                	xor    dl,dl
c0029136:	e9 84 00 00 00       	jmp    c00291bf <__truncdfsf2+0xd4>
c002913b:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0029141:	83 fe 83             	cmp    esi,0xffffff83
c0029144:	7d 4b                	jge    c0029191 <__truncdfsf2+0xa6>
c0029146:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c002914b:	29 f1                	sub    ecx,esi
c002914d:	83 f9 1f             	cmp    ecx,0x1f
c0029150:	7f 6b                	jg     c00291bd <__truncdfsf2+0xd2>
c0029152:	0d 00 00 00 80       	or     eax,0x80000000
c0029157:	89 c3                	mov    ebx,eax
c0029159:	d3 eb                	shr    ebx,cl
c002915b:	be 01 00 00 00       	mov    esi,0x1
c0029160:	d3 e6                	shl    esi,cl
c0029162:	4e                   	dec    esi
c0029163:	21 f0                	and    eax,esi
c0029165:	09 f8                	or     eax,edi
c0029167:	0f 95 c0             	setne  al
c002916a:	0f b6 c0             	movzx  eax,al
c002916d:	09 c3                	or     ebx,eax
c002916f:	89 d9                	mov    ecx,ebx
c0029171:	c1 e9 08             	shr    ecx,0x8
c0029174:	f6 c3 7f             	test   bl,0x7f
c0029177:	0f 95 c0             	setne  al
c002917a:	09 c8                	or     eax,ecx
c002917c:	83 e0 01             	and    eax,0x1
c002917f:	c1 eb 07             	shr    ebx,0x7
c0029182:	21 c3                	and    ebx,eax
c0029184:	81 e2 00 00 00 80    	and    edx,0x80000000
c002918a:	09 d1                	or     ecx,edx
c002918c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c002918f:	eb 76                	jmp    c0029207 <__truncdfsf2+0x11c>
c0029191:	83 c6 80             	add    esi,0xffffff80
c0029194:	7e 1d                	jle    c00291b3 <__truncdfsf2+0xc8>
c0029196:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c002919c:	75 0b                	jne    c00291a9 <__truncdfsf2+0xbe>
c002919e:	09 f8                	or     eax,edi
c00291a0:	74 09                	je     c00291ab <__truncdfsf2+0xc0>
c00291a2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00291a7:	eb 02                	jmp    c00291ab <__truncdfsf2+0xc0>
c00291a9:	31 c0                	xor    eax,eax
c00291ab:	c1 fa 17             	sar    edx,0x17
c00291ae:	80 ca ff             	or     dl,0xff
c00291b1:	eb 0e                	jmp    c00291c1 <__truncdfsf2+0xd6>
c00291b3:	c1 fa 1f             	sar    edx,0x1f
c00291b6:	c1 e2 08             	shl    edx,0x8
c00291b9:	09 ca                	or     edx,ecx
c00291bb:	eb 04                	jmp    c00291c1 <__truncdfsf2+0xd6>
c00291bd:	31 d2                	xor    edx,edx
c00291bf:	31 c0                	xor    eax,eax
c00291c1:	c1 e2 17             	shl    edx,0x17
c00291c4:	c1 e8 08             	shr    eax,0x8
c00291c7:	09 d0                	or     eax,edx
c00291c9:	eb 3c                	jmp    c0029207 <__truncdfsf2+0x11c>
c00291cb:	81 e9 80 03 00 00    	sub    ecx,0x380
c00291d1:	89 ca                	mov    edx,ecx
c00291d3:	c1 fa 0b             	sar    edx,0xb
c00291d6:	c1 e2 08             	shl    edx,0x8
c00291d9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00291dc:	31 db                	xor    ebx,ebx
c00291de:	85 ff                	test   edi,edi
c00291e0:	0f 95 c3             	setne  bl
c00291e3:	09 d8                	or     eax,ebx
c00291e5:	89 c3                	mov    ebx,eax
c00291e7:	c1 eb 08             	shr    ebx,0x8
c00291ea:	a8 7f                	test   al,0x7f
c00291ec:	0f 95 c2             	setne  dl
c00291ef:	89 d6                	mov    esi,edx
c00291f1:	09 de                	or     esi,ebx
c00291f3:	83 e6 01             	and    esi,0x1
c00291f6:	c1 e8 07             	shr    eax,0x7
c00291f9:	21 f0                	and    eax,esi
c00291fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00291fe:	09 ca                	or     edx,ecx
c0029200:	c1 e2 17             	shl    edx,0x17
c0029203:	09 da                	or     edx,ebx
c0029205:	01 d0                	add    eax,edx
c0029207:	83 c4 0c             	add    esp,0xc
c002920a:	5b                   	pop    ebx
c002920b:	5e                   	pop    esi
c002920c:	5f                   	pop    edi
c002920d:	5d                   	pop    ebp
c002920e:	c3                   	ret    

c002920f <__extendsfdf2>:
c002920f:	55                   	push   ebp
c0029210:	89 e5                	mov    ebp,esp
c0029212:	57                   	push   edi
c0029213:	56                   	push   esi
c0029214:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0029217:	89 d1                	mov    ecx,edx
c0029219:	c1 f9 17             	sar    ecx,0x17
c002921c:	c1 e2 08             	shl    edx,0x8
c002921f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0029225:	89 c8                	mov    eax,ecx
c0029227:	80 e4 f8             	and    ah,0xf8
c002922a:	8d 71 01             	lea    esi,[ecx+0x1]
c002922d:	81 e6 fe 00 00 00    	and    esi,0xfe
c0029233:	75 27                	jne    c002925c <__extendsfdf2+0x4d>
c0029235:	81 e1 ff 00 00 00    	and    ecx,0xff
c002923b:	75 18                	jne    c0029255 <__extendsfdf2+0x46>
c002923d:	85 d2                	test   edx,edx
c002923f:	74 20                	je     c0029261 <__extendsfdf2+0x52>
c0029241:	41                   	inc    ecx
c0029242:	01 d2                	add    edx,edx
c0029244:	79 fb                	jns    c0029241 <__extendsfdf2+0x32>
c0029246:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002924c:	29 c8                	sub    eax,ecx
c002924e:	05 81 03 00 00       	add    eax,0x381
c0029253:	eb 0c                	jmp    c0029261 <__extendsfdf2+0x52>
c0029255:	05 00 07 00 00       	add    eax,0x700
c002925a:	eb 05                	jmp    c0029261 <__extendsfdf2+0x52>
c002925c:	05 80 03 00 00       	add    eax,0x380
c0029261:	c1 e0 14             	shl    eax,0x14
c0029264:	89 c1                	mov    ecx,eax
c0029266:	89 d0                	mov    eax,edx
c0029268:	c1 e8 0b             	shr    eax,0xb
c002926b:	09 c1                	or     ecx,eax
c002926d:	c1 e2 15             	shl    edx,0x15
c0029270:	89 d0                	mov    eax,edx
c0029272:	89 ca                	mov    edx,ecx
c0029274:	5e                   	pop    esi
c0029275:	5f                   	pop    edi
c0029276:	5d                   	pop    ebp
c0029277:	c3                   	ret    
c0029278:	66 90                	xchg   ax,ax
c002927a:	66 90                	xchg   ax,ax
c002927c:	66 90                	xchg   ax,ax
c002927e:	66 90                	xchg   ax,ax

c0029280 <fabs>:
c0029280:	83 ec 0c             	sub    esp,0xc
c0029283:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029287:	89 04 24             	mov    DWORD PTR [esp],eax
c002928a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002928e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0029293:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0029297:	dd 04 24             	fld    QWORD PTR [esp]
c002929a:	83 c4 0c             	add    esp,0xc
c002929d:	c3                   	ret    
c002929e:	66 90                	xchg   ax,ax

c00292a0 <lrint>:
c00292a0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00292a4:	83 ec 04             	sub    esp,0x4
c00292a7:	db 1c 24             	fistp  DWORD PTR [esp]
c00292aa:	58                   	pop    eax
c00292ab:	c3                   	ret    

c00292ac <lrintf>:
c00292ac:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c00292b0:	83 ec 04             	sub    esp,0x4
c00292b3:	db 1c 24             	fistp  DWORD PTR [esp]
c00292b6:	58                   	pop    eax
c00292b7:	c3                   	ret    

Disassembly of section .init:

c00292b8 <_init>:
c00292b8:	55                   	push   ebp
c00292b9:	89 e5                	mov    ebp,esp
c00292bb:	e8 58 6e fd ff       	call   c0000118 <frame_dummy>
c00292c0:	e8 5b e0 ff ff       	call   c0027320 <__do_global_ctors_aux>
c00292c5:	5d                   	pop    ebp
c00292c6:	c3                   	ret    

Disassembly of section .fini:

c00292c7 <_fini>:
c00292c7:	55                   	push   ebp
c00292c8:	89 e5                	mov    ebp,esp
c00292ca:	e8 d9 6d fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00292cf:	5d                   	pop    ebp
c00292d0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00292d2 <Computer::~Computer()>:
c00292d2:	83 ec 0c             	sub    esp,0xc
c00292d5:	ba 08 af 02 c0       	mov    edx,0xc002af08
c00292da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292de:	89 10                	mov    DWORD PTR [eax],edx
c00292e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e4:	83 ec 0c             	sub    esp,0xc
c00292e7:	50                   	push   eax
c00292e8:	e8 79 ae fe ff       	call   c0014166 <Device::~Device()>
c00292ed:	83 c4 10             	add    esp,0x10
c00292f0:	90                   	nop
c00292f1:	83 c4 0c             	add    esp,0xc
c00292f4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00292f6 <Computer::~Computer()>:
c00292f6:	83 ec 0c             	sub    esp,0xc
c00292f9:	83 ec 0c             	sub    esp,0xc
c00292fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029300:	e8 cd ff ff ff       	call   c00292d2 <Computer::~Computer()>
c0029305:	83 c4 10             	add    esp,0x10
c0029308:	83 ec 08             	sub    esp,0x8
c002930b:	68 ec 01 00 00       	push   0x1ec
c0029310:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029314:	e8 66 9a fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029319:	83 c4 10             	add    esp,0x10
c002931c:	83 c4 0c             	add    esp,0xc
c002931f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0029320 <idleCommon()>:
c0029320:	83 ec 0c             	sub    esp,0xc
c0029323:	fa                   	cli    
c0029324:	ff 05 08 28 03 c0    	inc    DWORD PTR ds:0xc0032808
c002932a:	e8 7d 53 ff ff       	call   c001e6ac <schedule()>
c002932f:	a1 08 28 03 c0       	mov    eax,ds:0xc0032808
c0029334:	48                   	dec    eax
c0029335:	a3 08 28 03 c0       	mov    ds:0xc0032808,eax
c002933a:	75 01                	jne    c002933d <idleCommon()+0x1d>
c002933c:	fb                   	sti    
c002933d:	83 c4 0c             	add    esp,0xc
c0029340:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0029342 <LinkedList<UnixFile>::~LinkedList()>:
c0029342:	90                   	nop
c0029343:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0029344 <LinkedList<UnixFile>::LinkedList()>:
c0029344:	83 ec 0c             	sub    esp,0xc
c0029347:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029351:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029355:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002935c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029360:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029371:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029375:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002937c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029380:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029387:	83 ec 0c             	sub    esp,0xc
c002938a:	68 c6 b1 02 c0       	push   0xc002b1c6
c002938f:	e8 cb 9a fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0029394:	83 c4 10             	add    esp,0x10
c0029397:	90                   	nop
c0029398:	83 c4 0c             	add    esp,0xc
c002939b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002939c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002939c:	83 ec 0c             	sub    esp,0xc
c002939f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00293a4:	75 10                	jne    c00293b6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00293a6:	83 ec 0c             	sub    esp,0xc
c00293a9:	68 e0 b1 02 c0       	push   0xc002b1e0
c00293ae:	e8 46 15 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00293b3:	83 c4 10             	add    esp,0x10
c00293b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00293bc:	85 c0                	test   eax,eax
c00293be:	74 34                	je     c00293f4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293c7:	85 c0                	test   eax,eax
c00293c9:	74 29                	je     c00293f4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00293cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293cf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00293e1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00293e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293eb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00293f2:	eb 65                	jmp    c0029459 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00293f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00293fa:	85 c0                	test   eax,eax
c00293fc:	75 4b                	jne    c0029449 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00293fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029402:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029405:	85 c0                	test   eax,eax
c0029407:	75 40                	jne    c0029449 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0029409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002940d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029411:	89 10                	mov    DWORD PTR [eax],edx
c0029413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029417:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002941b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002941e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029425:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029430:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029433:	85 c0                	test   eax,eax
c0029435:	74 22                	je     c0029459 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029437:	83 ec 0c             	sub    esp,0xc
c002943a:	68 02 b2 02 c0       	push   0xc002b202
c002943f:	e8 b5 14 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029444:	83 c4 10             	add    esp,0x10
c0029447:	eb 10                	jmp    c0029459 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0029449:	83 ec 0c             	sub    esp,0xc
c002944c:	68 0c b2 02 c0       	push   0xc002b20c
c0029451:	e8 a3 14 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029456:	83 c4 10             	add    esp,0x10
c0029459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002945d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029460:	8d 50 01             	lea    edx,[eax+0x1]
c0029463:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029467:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002946a:	90                   	nop
c002946b:	83 c4 0c             	add    esp,0xc
c002946e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029470 <LinkedList<UnixFile>::getFirstElement()>:
c0029470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029474:	8b 00                	mov    eax,DWORD PTR [eax]
c0029476:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029478 <LinkedList<UnixFile>::removeFirst()>:
c0029478:	83 ec 0c             	sub    esp,0xc
c002947b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002947f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029481:	85 c0                	test   eax,eax
c0029483:	75 12                	jne    c0029497 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029485:	83 ec 0c             	sub    esp,0xc
c0029488:	68 18 b2 02 c0       	push   0xc002b218
c002948d:	e8 67 14 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029492:	83 c4 10             	add    esp,0x10
c0029495:	eb 7e                	jmp    c0029515 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002949e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294a1:	85 c0                	test   eax,eax
c00294a3:	74 10                	je     c00294b5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00294a5:	83 ec 0c             	sub    esp,0xc
c00294a8:	68 63 b2 02 c0       	push   0xc002b263
c00294ad:	e8 47 14 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00294b2:	83 c4 10             	add    esp,0x10
c00294b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00294bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294be:	85 c0                	test   eax,eax
c00294c0:	75 33                	jne    c00294f5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00294c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294db:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294de:	83 f8 01             	cmp    eax,0x1
c00294e1:	74 21                	je     c0029504 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294e3:	83 ec 0c             	sub    esp,0xc
c00294e6:	68 3c b2 02 c0       	push   0xc002b23c
c00294eb:	e8 09 14 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00294f0:	83 c4 10             	add    esp,0x10
c00294f3:	eb 0f                	jmp    c0029504 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00294f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00294fb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00294fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029502:	89 10                	mov    DWORD PTR [eax],edx
c0029504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029508:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002950b:	8d 50 ff             	lea    edx,[eax-0x1]
c002950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029512:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029515:	83 c4 0c             	add    esp,0xc
c0029518:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002951a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002951a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002951e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029521:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0029522 <DriverlessDevice::~DriverlessDevice()>:
c0029522:	ba e4 b9 02 c0       	mov    edx,0xc002b9e4
c0029527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002952b:	89 10                	mov    DWORD PTR [eax],edx
c002952d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029531:	50                   	push   eax
c0029532:	e8 2f ac fe ff       	call   c0014166 <Device::~Device()>
c0029537:	83 c4 04             	add    esp,0x4
c002953a:	90                   	nop
c002953b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002953c <DriverlessDevice::~DriverlessDevice()>:
c002953c:	83 ec 0c             	sub    esp,0xc
c002953f:	83 ec 0c             	sub    esp,0xc
c0029542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029546:	e8 d7 ff ff ff       	call   c0029522 <DriverlessDevice::~DriverlessDevice()>
c002954b:	83 c4 10             	add    esp,0x10
c002954e:	83 ec 08             	sub    esp,0x8
c0029551:	68 58 01 00 00       	push   0x158
c0029556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002955a:	e8 20 98 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c002955f:	83 c4 10             	add    esp,0x10
c0029562:	83 c4 0c             	add    esp,0xc
c0029565:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029566 <LinkedList<Device>::addElement(Device*)>:
c0029566:	83 ec 0c             	sub    esp,0xc
c0029569:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002956e:	75 10                	jne    c0029580 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029570:	83 ec 0c             	sub    esp,0xc
c0029573:	68 e0 b1 02 c0       	push   0xc002b1e0
c0029578:	e8 7c 13 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c002957d:	83 c4 10             	add    esp,0x10
c0029580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029584:	8b 00                	mov    eax,DWORD PTR [eax]
c0029586:	85 c0                	test   eax,eax
c0029588:	74 3a                	je     c00295c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c002958a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002958e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029591:	85 c0                	test   eax,eax
c0029593:	74 2f                	je     c00295c4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029595:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029599:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002959c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295a0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00295a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295b8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00295c2:	eb 68                	jmp    c002962c <LinkedList<Device>::addElement(Device*)+0xc6>
c00295c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00295ca:	85 c0                	test   eax,eax
c00295cc:	75 4e                	jne    c002961c <LinkedList<Device>::addElement(Device*)+0xb6>
c00295ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295d5:	85 c0                	test   eax,eax
c00295d7:	75 43                	jne    c002961c <LinkedList<Device>::addElement(Device*)+0xb6>
c00295d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295e1:	89 10                	mov    DWORD PTR [eax],edx
c00295e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00295eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00295ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00295f5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00295ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029603:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029606:	85 c0                	test   eax,eax
c0029608:	74 22                	je     c002962c <LinkedList<Device>::addElement(Device*)+0xc6>
c002960a:	83 ec 0c             	sub    esp,0xc
c002960d:	68 02 b2 02 c0       	push   0xc002b202
c0029612:	e8 e2 12 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029617:	83 c4 10             	add    esp,0x10
c002961a:	eb 10                	jmp    c002962c <LinkedList<Device>::addElement(Device*)+0xc6>
c002961c:	83 ec 0c             	sub    esp,0xc
c002961f:	68 0c b2 02 c0       	push   0xc002b20c
c0029624:	e8 d0 12 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029629:	83 c4 10             	add    esp,0x10
c002962c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029630:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029633:	8d 50 01             	lea    edx,[eax+0x1]
c0029636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002963a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002963d:	90                   	nop
c002963e:	83 c4 0c             	add    esp,0xc
c0029641:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0029642 <LinkedList<Device>::LinkedList()>:
c0029642:	83 ec 0c             	sub    esp,0xc
c0029645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029649:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002964f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029653:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002965a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029665:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029669:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002966f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029673:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002967a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029685:	83 ec 0c             	sub    esp,0xc
c0029688:	68 c6 b1 02 c0       	push   0xc002b1c6
c002968d:	e8 cd 97 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0029692:	83 c4 10             	add    esp,0x10
c0029695:	90                   	nop
c0029696:	83 c4 0c             	add    esp,0xc
c0029699:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002969a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002969a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002969e:	8b 00                	mov    eax,DWORD PTR [eax]
c00296a0:	85 c0                	test   eax,eax
c00296a2:	75 0e                	jne    c00296b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00296a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296ab:	85 c0                	test   eax,eax
c00296ad:	75 03                	jne    c00296b2 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00296af:	b0 01                	mov    al,0x1
c00296b1:	c3                   	ret    
c00296b2:	b0 00                	mov    al,0x0
c00296b4:	90                   	nop
c00296b5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00296b6 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00296b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00296ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00296bc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00296be <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00296be:	83 ec 0c             	sub    esp,0xc
c00296c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00296c7:	85 c0                	test   eax,eax
c00296c9:	75 15                	jne    c00296e0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c00296cb:	83 ec 0c             	sub    esp,0xc
c00296ce:	68 18 b2 02 c0       	push   0xc002b218
c00296d3:	e8 21 12 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00296d8:	83 c4 10             	add    esp,0x10
c00296db:	e9 88 00 00 00       	jmp    c0029768 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00296e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00296e7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00296ea:	85 c0                	test   eax,eax
c00296ec:	0f 95 c0             	setne  al
c00296ef:	84 c0                	test   al,al
c00296f1:	74 10                	je     c0029703 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00296f3:	83 ec 0c             	sub    esp,0xc
c00296f6:	68 63 b2 02 c0       	push   0xc002b263
c00296fb:	e8 f9 11 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029700:	83 c4 10             	add    esp,0x10
c0029703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029707:	8b 00                	mov    eax,DWORD PTR [eax]
c0029709:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002970c:	85 c0                	test   eax,eax
c002970e:	0f 94 c0             	sete   al
c0029711:	84 c0                	test   al,al
c0029713:	74 33                	je     c0029748 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0029715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029719:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002971f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029723:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002972a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002972e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029731:	83 f8 01             	cmp    eax,0x1
c0029734:	74 21                	je     c0029757 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029736:	83 ec 0c             	sub    esp,0xc
c0029739:	68 3c b2 02 c0       	push   0xc002b23c
c002973e:	e8 b6 11 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029743:	83 c4 10             	add    esp,0x10
c0029746:	eb 0f                	jmp    c0029757 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0029748:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002974c:	8b 00                	mov    eax,DWORD PTR [eax]
c002974e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029751:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029755:	89 10                	mov    DWORD PTR [eax],edx
c0029757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002975e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029765:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029768:	83 c4 0c             	add    esp,0xc
c002976b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002976c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002976c:	83 ec 0c             	sub    esp,0xc
c002976f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029774:	75 10                	jne    c0029786 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029776:	83 ec 0c             	sub    esp,0xc
c0029779:	68 e0 b1 02 c0       	push   0xc002b1e0
c002977e:	e8 76 11 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029783:	83 c4 10             	add    esp,0x10
c0029786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978a:	8b 00                	mov    eax,DWORD PTR [eax]
c002978c:	85 c0                	test   eax,eax
c002978e:	74 34                	je     c00297c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029797:	85 c0                	test   eax,eax
c0029799:	74 29                	je     c00297c4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002979b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002979f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297a6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00297a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00297b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297bb:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297c2:	eb 65                	jmp    c0029829 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00297c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00297ca:	85 c0                	test   eax,eax
c00297cc:	75 4b                	jne    c0029819 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00297ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297d5:	85 c0                	test   eax,eax
c00297d7:	75 40                	jne    c0029819 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c00297d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297e1:	89 10                	mov    DWORD PTR [eax],edx
c00297e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00297eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00297ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00297f5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00297fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029800:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029803:	85 c0                	test   eax,eax
c0029805:	74 22                	je     c0029829 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029807:	83 ec 0c             	sub    esp,0xc
c002980a:	68 02 b2 02 c0       	push   0xc002b202
c002980f:	e8 e5 10 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029814:	83 c4 10             	add    esp,0x10
c0029817:	eb 10                	jmp    c0029829 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029819:	83 ec 0c             	sub    esp,0xc
c002981c:	68 0c b2 02 c0       	push   0xc002b20c
c0029821:	e8 d3 10 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029826:	83 c4 10             	add    esp,0x10
c0029829:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029830:	8d 50 01             	lea    edx,[eax+0x1]
c0029833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029837:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002983a:	90                   	nop
c002983b:	83 c4 0c             	add    esp,0xc
c002983e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0029840 <ACPI::~ACPI()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	ba 10 c4 02 c0       	mov    edx,0xc002c410
c0029848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984c:	89 10                	mov    DWORD PTR [eax],edx
c002984e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029852:	83 ec 0c             	sub    esp,0xc
c0029855:	50                   	push   eax
c0029856:	e8 0b a9 fe ff       	call   c0014166 <Device::~Device()>
c002985b:	83 c4 10             	add    esp,0x10
c002985e:	90                   	nop
c002985f:	83 c4 0c             	add    esp,0xc
c0029862:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029864 <ACPI::~ACPI()>:
c0029864:	83 ec 0c             	sub    esp,0xc
c0029867:	83 ec 0c             	sub    esp,0xc
c002986a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986e:	e8 cd ff ff ff       	call   c0029840 <ACPI::~ACPI()>
c0029873:	83 c4 10             	add    esp,0x10
c0029876:	83 ec 08             	sub    esp,0x8
c0029879:	68 68 12 00 00       	push   0x1268
c002987e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029882:	e8 f8 94 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029887:	83 c4 10             	add    esp,0x10
c002988a:	83 c4 0c             	add    esp,0xc
c002988d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002988e <LinkedList<Device>::~LinkedList()>:
c002988e:	90                   	nop
c002988f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029890 <LinkedList<Device>::isEmpty()>:
c0029890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029894:	8b 00                	mov    eax,DWORD PTR [eax]
c0029896:	85 c0                	test   eax,eax
c0029898:	75 0e                	jne    c00298a8 <LinkedList<Device>::isEmpty()+0x18>
c002989a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002989e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298a1:	85 c0                	test   eax,eax
c00298a3:	75 03                	jne    c00298a8 <LinkedList<Device>::isEmpty()+0x18>
c00298a5:	b0 01                	mov    al,0x1
c00298a7:	c3                   	ret    
c00298a8:	b0 00                	mov    al,0x0
c00298aa:	90                   	nop
c00298ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c00298ac <LinkedList<Device>::getFirstElement()>:
c00298ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00298b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00298b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c00298b4 <LinkedList<Device>::removeFirst()>:
c00298b4:	83 ec 0c             	sub    esp,0xc
c00298b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00298bd:	85 c0                	test   eax,eax
c00298bf:	75 15                	jne    c00298d6 <LinkedList<Device>::removeFirst()+0x22>
c00298c1:	83 ec 0c             	sub    esp,0xc
c00298c4:	68 18 b2 02 c0       	push   0xc002b218
c00298c9:	e8 2b 10 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00298ce:	83 c4 10             	add    esp,0x10
c00298d1:	e9 87 00 00 00       	jmp    c002995d <LinkedList<Device>::removeFirst()+0xa9>
c00298d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00298dd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00298e3:	85 c0                	test   eax,eax
c00298e5:	74 10                	je     c00298f7 <LinkedList<Device>::removeFirst()+0x43>
c00298e7:	83 ec 0c             	sub    esp,0xc
c00298ea:	68 63 b2 02 c0       	push   0xc002b263
c00298ef:	e8 05 10 ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c00298f4:	83 c4 10             	add    esp,0x10
c00298f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00298fd:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029903:	85 c0                	test   eax,eax
c0029905:	75 33                	jne    c002993a <LinkedList<Device>::removeFirst()+0x86>
c0029907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002990b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029915:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002991c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029920:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029923:	83 f8 01             	cmp    eax,0x1
c0029926:	74 24                	je     c002994c <LinkedList<Device>::removeFirst()+0x98>
c0029928:	83 ec 0c             	sub    esp,0xc
c002992b:	68 3c b2 02 c0       	push   0xc002b23c
c0029930:	e8 c4 0f ff ff       	call   c001a8f9 <Krnl::panic(char const*)>
c0029935:	83 c4 10             	add    esp,0x10
c0029938:	eb 12                	jmp    c002994c <LinkedList<Device>::removeFirst()+0x98>
c002993a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002993e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029940:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0029946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002994a:	89 10                	mov    DWORD PTR [eax],edx
c002994c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029950:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029953:	8d 50 ff             	lea    edx,[eax-0x1]
c0029956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002995a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002995d:	83 c4 0c             	add    esp,0xc
c0029960:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029962 <CPU::~CPU()>:
c0029962:	83 ec 0c             	sub    esp,0xc
c0029965:	ba 00 c8 02 c0       	mov    edx,0xc002c800
c002996a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002996e:	89 10                	mov    DWORD PTR [eax],edx
c0029970:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029974:	83 ec 0c             	sub    esp,0xc
c0029977:	50                   	push   eax
c0029978:	e8 e9 a7 fe ff       	call   c0014166 <Device::~Device()>
c002997d:	83 c4 10             	add    esp,0x10
c0029980:	90                   	nop
c0029981:	83 c4 0c             	add    esp,0xc
c0029984:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029986 <CPU::~CPU()>:
c0029986:	83 ec 0c             	sub    esp,0xc
c0029989:	83 ec 0c             	sub    esp,0xc
c002998c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029990:	e8 cd ff ff ff       	call   c0029962 <CPU::~CPU()>
c0029995:	83 c4 10             	add    esp,0x10
c0029998:	83 ec 08             	sub    esp,0x8
c002999b:	68 98 11 00 00       	push   0x1198
c00299a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a4:	e8 d6 93 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c00299a9:	83 c4 10             	add    esp,0x10
c00299ac:	83 c4 0c             	add    esp,0xc
c00299af:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00299b0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00299b0:	90                   	nop
c00299b1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00299b2 <ThreadControlBlock::ThreadControlBlock()>:
c00299b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299b6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00299bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299c1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00299c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299cc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00299d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299d7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00299de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299e2:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c00299e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299ed:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00299f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00299f5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00299f9:	90                   	nop
c00299fa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00299fc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00299fc:	83 ec 0c             	sub    esp,0xc
c00299ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a38:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029a3f:	83 ec 0c             	sub    esp,0xc
c0029a42:	68 c6 b1 02 c0       	push   0xc002b1c6
c0029a47:	e8 13 94 fe ff       	call   c0012e5f <Dbg::kprintf(char const*, ...)>
c0029a4c:	83 c4 10             	add    esp,0x10
c0029a4f:	90                   	nop
c0029a50:	83 c4 0c             	add    esp,0xc
c0029a53:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029a54 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029a58:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0029a5b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0029a5c <Vm::_FPUState::_FPUState()>:
c0029a5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029a60:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029a67:	90                   	nop
c0029a68:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0029a6a <PCI::~PCI()>:
c0029a6a:	83 ec 0c             	sub    esp,0xc
c0029a6d:	ba 1c d9 02 c0       	mov    edx,0xc002d91c
c0029a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a76:	89 10                	mov    DWORD PTR [eax],edx
c0029a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a7c:	83 ec 0c             	sub    esp,0xc
c0029a7f:	50                   	push   eax
c0029a80:	e8 b1 a0 fe ff       	call   c0013b36 <Bus::~Bus()>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	90                   	nop
c0029a89:	83 c4 0c             	add    esp,0xc
c0029a8c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0029a8e <PCI::~PCI()>:
c0029a8e:	83 ec 0c             	sub    esp,0xc
c0029a91:	83 ec 0c             	sub    esp,0xc
c0029a94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a98:	e8 cd ff ff ff       	call   c0029a6a <PCI::~PCI()>
c0029a9d:	83 c4 10             	add    esp,0x10
c0029aa0:	83 ec 08             	sub    esp,0x8
c0029aa3:	68 58 01 00 00       	push   0x158
c0029aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aac:	e8 ce 92 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029ab1:	83 c4 10             	add    esp,0x10
c0029ab4:	83 c4 0c             	add    esp,0xc
c0029ab7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029ab8 <IDE::~IDE()>:
c0029ab8:	83 ec 0c             	sub    esp,0xc
c0029abb:	ba 80 db 02 c0       	mov    edx,0xc002db80
c0029ac0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ac4:	89 10                	mov    DWORD PTR [eax],edx
c0029ac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029aca:	83 ec 0c             	sub    esp,0xc
c0029acd:	50                   	push   eax
c0029ace:	e8 7d ab fe ff       	call   c0014650 <HardDiskController::~HardDiskController()>
c0029ad3:	83 c4 10             	add    esp,0x10
c0029ad6:	90                   	nop
c0029ad7:	83 c4 0c             	add    esp,0xc
c0029ada:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0029adc <IDE::~IDE()>:
c0029adc:	83 ec 0c             	sub    esp,0xc
c0029adf:	83 ec 0c             	sub    esp,0xc
c0029ae2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ae6:	e8 cd ff ff ff       	call   c0029ab8 <IDE::~IDE()>
c0029aeb:	83 c4 10             	add    esp,0x10
c0029aee:	83 ec 08             	sub    esp,0x8
c0029af1:	68 70 02 00 00       	push   0x270
c0029af6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029afa:	e8 80 92 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029aff:	83 c4 10             	add    esp,0x10
c0029b02:	83 c4 0c             	add    esp,0xc
c0029b05:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029b06 <SATABus::~SATABus()>:
c0029b06:	83 ec 0c             	sub    esp,0xc
c0029b09:	ba 60 dc 02 c0       	mov    edx,0xc002dc60
c0029b0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b12:	89 10                	mov    DWORD PTR [eax],edx
c0029b14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b18:	83 ec 0c             	sub    esp,0xc
c0029b1b:	50                   	push   eax
c0029b1c:	e8 2f ab fe ff       	call   c0014650 <HardDiskController::~HardDiskController()>
c0029b21:	83 c4 10             	add    esp,0x10
c0029b24:	90                   	nop
c0029b25:	83 c4 0c             	add    esp,0xc
c0029b28:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0029b2a <SATABus::~SATABus()>:
c0029b2a:	83 ec 0c             	sub    esp,0xc
c0029b2d:	83 ec 0c             	sub    esp,0xc
c0029b30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b34:	e8 cd ff ff ff       	call   c0029b06 <SATABus::~SATABus()>
c0029b39:	83 c4 10             	add    esp,0x10
c0029b3c:	83 ec 08             	sub    esp,0x8
c0029b3f:	68 64 01 00 00       	push   0x164
c0029b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b48:	e8 32 92 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029b4d:	83 c4 10             	add    esp,0x10
c0029b50:	83 c4 0c             	add    esp,0xc
c0029b53:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029b54 <ATA::~ATA()>:
c0029b54:	83 ec 0c             	sub    esp,0xc
c0029b57:	ba ac dc 02 c0       	mov    edx,0xc002dcac
c0029b5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b60:	89 10                	mov    DWORD PTR [eax],edx
c0029b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029b66:	83 ec 0c             	sub    esp,0xc
c0029b69:	50                   	push   eax
c0029b6a:	e8 d3 ab fe ff       	call   c0014742 <PhysicalDisk::~PhysicalDisk()>
c0029b6f:	83 c4 10             	add    esp,0x10
c0029b72:	90                   	nop
c0029b73:	83 c4 0c             	add    esp,0xc
c0029b76:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029b78 <ATA::~ATA()>:
c0029b78:	83 ec 0c             	sub    esp,0xc
c0029b7b:	83 ec 0c             	sub    esp,0xc
c0029b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b82:	e8 cd ff ff ff       	call   c0029b54 <ATA::~ATA()>
c0029b87:	83 c4 10             	add    esp,0x10
c0029b8a:	83 ec 08             	sub    esp,0x8
c0029b8d:	68 7c 01 00 00       	push   0x17c
c0029b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029b96:	e8 e4 91 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029b9b:	83 c4 10             	add    esp,0x10
c0029b9e:	83 c4 0c             	add    esp,0xc
c0029ba1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029ba2 <ATAPI::~ATAPI()>:
c0029ba2:	83 ec 0c             	sub    esp,0xc
c0029ba5:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0029baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bae:	89 10                	mov    DWORD PTR [eax],edx
c0029bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bb4:	83 ec 0c             	sub    esp,0xc
c0029bb7:	50                   	push   eax
c0029bb8:	e8 85 ab fe ff       	call   c0014742 <PhysicalDisk::~PhysicalDisk()>
c0029bbd:	83 c4 10             	add    esp,0x10
c0029bc0:	90                   	nop
c0029bc1:	83 c4 0c             	add    esp,0xc
c0029bc4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029bc6 <ATAPI::~ATAPI()>:
c0029bc6:	83 ec 0c             	sub    esp,0xc
c0029bc9:	83 ec 0c             	sub    esp,0xc
c0029bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029bd0:	e8 cd ff ff ff       	call   c0029ba2 <ATAPI::~ATAPI()>
c0029bd5:	83 c4 10             	add    esp,0x10
c0029bd8:	83 ec 08             	sub    esp,0x8
c0029bdb:	68 80 01 00 00       	push   0x180
c0029be0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029be4:	e8 96 91 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029be9:	83 c4 10             	add    esp,0x10
c0029bec:	83 c4 0c             	add    esp,0xc
c0029bef:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029bf0 <SATA::~SATA()>:
c0029bf0:	83 ec 0c             	sub    esp,0xc
c0029bf3:	ba 98 dd 02 c0       	mov    edx,0xc002dd98
c0029bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029bfc:	89 10                	mov    DWORD PTR [eax],edx
c0029bfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c02:	83 ec 0c             	sub    esp,0xc
c0029c05:	50                   	push   eax
c0029c06:	e8 37 ab fe ff       	call   c0014742 <PhysicalDisk::~PhysicalDisk()>
c0029c0b:	83 c4 10             	add    esp,0x10
c0029c0e:	90                   	nop
c0029c0f:	83 c4 0c             	add    esp,0xc
c0029c12:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0029c14 <SATA::~SATA()>:
c0029c14:	83 ec 0c             	sub    esp,0xc
c0029c17:	83 ec 0c             	sub    esp,0xc
c0029c1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c1e:	e8 cd ff ff ff       	call   c0029bf0 <SATA::~SATA()>
c0029c23:	83 c4 10             	add    esp,0x10
c0029c26:	83 ec 08             	sub    esp,0x8
c0029c29:	68 7c 01 00 00       	push   0x17c
c0029c2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c32:	e8 48 91 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029c37:	83 c4 10             	add    esp,0x10
c0029c3a:	83 c4 0c             	add    esp,0xc
c0029c3d:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0029c3e <SATAPI::~SATAPI()>:
c0029c3e:	83 ec 0c             	sub    esp,0xc
c0029c41:	ba 74 de 02 c0       	mov    edx,0xc002de74
c0029c46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c4a:	89 10                	mov    DWORD PTR [eax],edx
c0029c4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c50:	83 ec 0c             	sub    esp,0xc
c0029c53:	50                   	push   eax
c0029c54:	e8 e9 aa fe ff       	call   c0014742 <PhysicalDisk::~PhysicalDisk()>
c0029c59:	83 c4 10             	add    esp,0x10
c0029c5c:	90                   	nop
c0029c5d:	83 c4 0c             	add    esp,0xc
c0029c60:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029c62 <SATAPI::~SATAPI()>:
c0029c62:	83 ec 0c             	sub    esp,0xc
c0029c65:	83 ec 0c             	sub    esp,0xc
c0029c68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c6c:	e8 cd ff ff ff       	call   c0029c3e <SATAPI::~SATAPI()>
c0029c71:	83 c4 10             	add    esp,0x10
c0029c74:	83 ec 08             	sub    esp,0x8
c0029c77:	68 80 01 00 00       	push   0x180
c0029c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029c80:	e8 fa 90 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029c85:	83 c4 10             	add    esp,0x10
c0029c88:	83 c4 0c             	add    esp,0xc
c0029c8b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0029c8c <AVX::~AVX()>:
c0029c8c:	83 ec 0c             	sub    esp,0xc
c0029c8f:	ba b4 de 02 c0       	mov    edx,0xc002deb4
c0029c94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c98:	89 10                	mov    DWORD PTR [eax],edx
c0029c9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029c9e:	83 ec 0c             	sub    esp,0xc
c0029ca1:	50                   	push   eax
c0029ca2:	e8 1f ab fe ff       	call   c00147c6 <FPU::~FPU()>
c0029ca7:	83 c4 10             	add    esp,0x10
c0029caa:	90                   	nop
c0029cab:	83 c4 0c             	add    esp,0xc
c0029cae:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029cb0 <AVX::~AVX()>:
c0029cb0:	83 ec 0c             	sub    esp,0xc
c0029cb3:	83 ec 0c             	sub    esp,0xc
c0029cb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cba:	e8 cd ff ff ff       	call   c0029c8c <AVX::~AVX()>
c0029cbf:	83 c4 10             	add    esp,0x10
c0029cc2:	83 ec 08             	sub    esp,0x8
c0029cc5:	68 58 01 00 00       	push   0x158
c0029cca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029cce:	e8 ac 90 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029cd3:	83 c4 10             	add    esp,0x10
c0029cd6:	83 c4 0c             	add    esp,0xc
c0029cd9:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0029cda <MMX::~MMX()>:
c0029cda:	83 ec 0c             	sub    esp,0xc
c0029cdd:	ba f4 de 02 c0       	mov    edx,0xc002def4
c0029ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ce6:	89 10                	mov    DWORD PTR [eax],edx
c0029ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029cec:	83 ec 0c             	sub    esp,0xc
c0029cef:	50                   	push   eax
c0029cf0:	e8 d1 aa fe ff       	call   c00147c6 <FPU::~FPU()>
c0029cf5:	83 c4 10             	add    esp,0x10
c0029cf8:	90                   	nop
c0029cf9:	83 c4 0c             	add    esp,0xc
c0029cfc:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029cfe <MMX::~MMX()>:
c0029cfe:	83 ec 0c             	sub    esp,0xc
c0029d01:	83 ec 0c             	sub    esp,0xc
c0029d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d08:	e8 cd ff ff ff       	call   c0029cda <MMX::~MMX()>
c0029d0d:	83 c4 10             	add    esp,0x10
c0029d10:	83 ec 08             	sub    esp,0x8
c0029d13:	68 58 01 00 00       	push   0x158
c0029d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d1c:	e8 5e 90 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029d21:	83 c4 10             	add    esp,0x10
c0029d24:	83 c4 0c             	add    esp,0xc
c0029d27:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0029d28 <SSE::~SSE()>:
c0029d28:	83 ec 0c             	sub    esp,0xc
c0029d2b:	ba 34 df 02 c0       	mov    edx,0xc002df34
c0029d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d34:	89 10                	mov    DWORD PTR [eax],edx
c0029d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d3a:	83 ec 0c             	sub    esp,0xc
c0029d3d:	50                   	push   eax
c0029d3e:	e8 83 aa fe ff       	call   c00147c6 <FPU::~FPU()>
c0029d43:	83 c4 10             	add    esp,0x10
c0029d46:	90                   	nop
c0029d47:	83 c4 0c             	add    esp,0xc
c0029d4a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0029d4c <SSE::~SSE()>:
c0029d4c:	83 ec 0c             	sub    esp,0xc
c0029d4f:	83 ec 0c             	sub    esp,0xc
c0029d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d56:	e8 cd ff ff ff       	call   c0029d28 <SSE::~SSE()>
c0029d5b:	83 c4 10             	add    esp,0x10
c0029d5e:	83 ec 08             	sub    esp,0x8
c0029d61:	68 58 01 00 00       	push   0x158
c0029d66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029d6a:	e8 10 90 fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029d6f:	83 c4 10             	add    esp,0x10
c0029d72:	83 c4 0c             	add    esp,0xc
c0029d75:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029d76 <x87::~x87()>:
c0029d76:	83 ec 0c             	sub    esp,0xc
c0029d79:	ba 74 df 02 c0       	mov    edx,0xc002df74
c0029d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d82:	89 10                	mov    DWORD PTR [eax],edx
c0029d84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029d88:	83 ec 0c             	sub    esp,0xc
c0029d8b:	50                   	push   eax
c0029d8c:	e8 35 aa fe ff       	call   c00147c6 <FPU::~FPU()>
c0029d91:	83 c4 10             	add    esp,0x10
c0029d94:	90                   	nop
c0029d95:	83 c4 0c             	add    esp,0xc
c0029d98:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0029d9a <x87::~x87()>:
c0029d9a:	83 ec 0c             	sub    esp,0xc
c0029d9d:	83 ec 0c             	sub    esp,0xc
c0029da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029da4:	e8 cd ff ff ff       	call   c0029d76 <x87::~x87()>
c0029da9:	83 c4 10             	add    esp,0x10
c0029dac:	83 ec 08             	sub    esp,0x8
c0029daf:	68 58 01 00 00       	push   0x158
c0029db4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029db8:	e8 c2 8f fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029dbd:	83 c4 10             	add    esp,0x10
c0029dc0:	83 c4 0c             	add    esp,0xc
c0029dc3:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029dc4 <IOAPIC::~IOAPIC()>:
c0029dc4:	83 ec 0c             	sub    esp,0xc
c0029dc7:	ba cc e0 02 c0       	mov    edx,0xc002e0cc
c0029dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dd0:	89 10                	mov    DWORD PTR [eax],edx
c0029dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029dd6:	83 ec 0c             	sub    esp,0xc
c0029dd9:	50                   	push   eax
c0029dda:	e8 87 a3 fe ff       	call   c0014166 <Device::~Device()>
c0029ddf:	83 c4 10             	add    esp,0x10
c0029de2:	90                   	nop
c0029de3:	83 c4 0c             	add    esp,0xc
c0029de6:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029de8 <IOAPIC::~IOAPIC()>:
c0029de8:	83 ec 0c             	sub    esp,0xc
c0029deb:	83 ec 0c             	sub    esp,0xc
c0029dee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029df2:	e8 cd ff ff ff       	call   c0029dc4 <IOAPIC::~IOAPIC()>
c0029df7:	83 c4 10             	add    esp,0x10
c0029dfa:	83 ec 08             	sub    esp,0x8
c0029dfd:	68 68 01 00 00       	push   0x168
c0029e02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e06:	e8 74 8f fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029e0b:	83 c4 10             	add    esp,0x10
c0029e0e:	83 c4 0c             	add    esp,0xc
c0029e11:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029e12 <APIC::~APIC()>:
c0029e12:	83 ec 0c             	sub    esp,0xc
c0029e15:	ba 84 e0 02 c0       	mov    edx,0xc002e084
c0029e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e1e:	89 10                	mov    DWORD PTR [eax],edx
c0029e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e24:	83 ec 0c             	sub    esp,0xc
c0029e27:	50                   	push   eax
c0029e28:	e8 63 ae fe ff       	call   c0014c90 <InterruptController::~InterruptController()>
c0029e2d:	83 c4 10             	add    esp,0x10
c0029e30:	90                   	nop
c0029e31:	83 c4 0c             	add    esp,0xc
c0029e34:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0029e36 <APIC::~APIC()>:
c0029e36:	83 ec 0c             	sub    esp,0xc
c0029e39:	83 ec 0c             	sub    esp,0xc
c0029e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e40:	e8 cd ff ff ff       	call   c0029e12 <APIC::~APIC()>
c0029e45:	83 c4 10             	add    esp,0x10
c0029e48:	83 ec 08             	sub    esp,0x8
c0029e4b:	68 58 21 00 00       	push   0x2158
c0029e50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e54:	e8 26 8f fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029e59:	83 c4 10             	add    esp,0x10
c0029e5c:	83 c4 0c             	add    esp,0xc
c0029e5f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029e60 <PIC::~PIC()>:
c0029e60:	83 ec 0c             	sub    esp,0xc
c0029e63:	ba 1c e1 02 c0       	mov    edx,0xc002e11c
c0029e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e6c:	89 10                	mov    DWORD PTR [eax],edx
c0029e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029e72:	83 ec 0c             	sub    esp,0xc
c0029e75:	50                   	push   eax
c0029e76:	e8 15 ae fe ff       	call   c0014c90 <InterruptController::~InterruptController()>
c0029e7b:	83 c4 10             	add    esp,0x10
c0029e7e:	90                   	nop
c0029e7f:	83 c4 0c             	add    esp,0xc
c0029e82:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029e84 <PIC::~PIC()>:
c0029e84:	83 ec 0c             	sub    esp,0xc
c0029e87:	83 ec 0c             	sub    esp,0xc
c0029e8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029e8e:	e8 cd ff ff ff       	call   c0029e60 <PIC::~PIC()>
c0029e93:	83 c4 10             	add    esp,0x10
c0029e96:	83 ec 08             	sub    esp,0x8
c0029e99:	68 58 21 00 00       	push   0x2158
c0029e9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ea2:	e8 d8 8e fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029ea7:	83 c4 10             	add    esp,0x10
c0029eaa:	83 c4 0c             	add    esp,0xc
c0029ead:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029eae <APICTimer::~APICTimer()>:
c0029eae:	83 ec 0c             	sub    esp,0xc
c0029eb1:	ba 70 e1 02 c0       	mov    edx,0xc002e170
c0029eb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029eba:	89 10                	mov    DWORD PTR [eax],edx
c0029ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ec0:	83 ec 0c             	sub    esp,0xc
c0029ec3:	50                   	push   eax
c0029ec4:	e8 7d ce fe ff       	call   c0016d46 <Timer::~Timer()>
c0029ec9:	83 c4 10             	add    esp,0x10
c0029ecc:	90                   	nop
c0029ecd:	83 c4 0c             	add    esp,0xc
c0029ed0:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029ed2 <APICTimer::~APICTimer()>:
c0029ed2:	83 ec 0c             	sub    esp,0xc
c0029ed5:	83 ec 0c             	sub    esp,0xc
c0029ed8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029edc:	e8 cd ff ff ff       	call   c0029eae <APICTimer::~APICTimer()>
c0029ee1:	83 c4 10             	add    esp,0x10
c0029ee4:	83 ec 08             	sub    esp,0x8
c0029ee7:	68 60 01 00 00       	push   0x160
c0029eec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ef0:	e8 8a 8e fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029ef5:	83 c4 10             	add    esp,0x10
c0029ef8:	83 c4 0c             	add    esp,0xc
c0029efb:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029efc <PIT::~PIT()>:
c0029efc:	83 ec 0c             	sub    esp,0xc
c0029eff:	ba c0 e1 02 c0       	mov    edx,0xc002e1c0
c0029f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f08:	89 10                	mov    DWORD PTR [eax],edx
c0029f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029f0e:	83 ec 0c             	sub    esp,0xc
c0029f11:	50                   	push   eax
c0029f12:	e8 2f ce fe ff       	call   c0016d46 <Timer::~Timer()>
c0029f17:	83 c4 10             	add    esp,0x10
c0029f1a:	90                   	nop
c0029f1b:	83 c4 0c             	add    esp,0xc
c0029f1e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029f20 <PIT::~PIT()>:
c0029f20:	83 ec 0c             	sub    esp,0xc
c0029f23:	83 ec 0c             	sub    esp,0xc
c0029f26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f2a:	e8 cd ff ff ff       	call   c0029efc <PIT::~PIT()>
c0029f2f:	83 c4 10             	add    esp,0x10
c0029f32:	83 ec 08             	sub    esp,0x8
c0029f35:	68 5c 01 00 00       	push   0x15c
c0029f3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029f3e:	e8 3c 8e fe ff       	call   c0012d7f <operator delete(void*, unsigned long)>
c0029f43:	83 c4 10             	add    esp,0x10
c0029f46:	83 c4 0c             	add    esp,0xc
c0029f49:	c3                   	ret    
