
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 e4 37 02 c0       	mov    eax,0xc00237e4
c0000025:	3d e4 37 02 c0       	cmp    eax,0xc00237e4
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 e4 37 02 c0       	push   0xc00237e4
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 e4 37 02 c0       	mov    eax,0xc00237e4
c0000051:	2d e4 37 02 c0       	sub    eax,0xc00237e4
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 e4 37 02 c0       	push   0xc00237e4
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec fe 01 c0       	mov    ebx,0xc001feec
c0000097:	81 eb e8 fe 01 c0    	sub    ebx,0xc001fee8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 fe 01 c0       	mov    esi,0xc001fee8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 e4 37 02 c0       	push   0xc00237e4
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 e4 37 02 c0       	push   0xc00237e4
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 37 51 01 00       	call   c00153e4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 15 51 01 00       	call   c00153e4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 22 56 01 00       	call   c0015910 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e1 5c 01 00       	call   c0015fd8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 5d 0f 01 00       	jmp    c00112dc <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 ff 01 c0 02 	test   BYTE PTR [edx-0x3ffe0100],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0100],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 ff 01 c0 08 	test   BYTE PTR [edx-0x3ffe0100],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 ff 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0100],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 ff 01 c0 01 	test   BYTE PTR [edx-0x3ffe0100],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 00 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfffc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 de 77 01 00       	jmp    c0019580 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 08 78 01 00       	jmp    c00195c0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 29 78 01 00       	jmp    c0019600 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 01 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdfea0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfea0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 04 28 02 c0       	mov    edx,0xc0022804
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c 00 02 c0       	mov    edx,0xc002001c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 00 02 c0       	mov    eax,0xc0020022
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdff20]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b 00 02 c0       	mov    eax,0xc002002b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 01 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfea0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 00 02 c0       	mov    eax,0xc00200b0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 00 02 c0       	mov    ebx,0xc00200a0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 00 02 c0       	mov    eax,0xc0020080
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 00 02 c0       	mov    eax,0xc0020090
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 00 02 c0       	mov    edx,0xc0020032
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e 00 02 c0       	mov    edx,0xc002003e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 00 02 c0       	mov    edx,0xc0020052
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020480
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020480
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 02 02 c0       	mov    eax,0xc0020280
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 01 02 c0       	mov    eax,0xc00201c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfe80]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 05 02 c0       	push   0xc0020580
c000611b:	e8 fc 3d 01 00       	call   c0019f1c <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 05 02 c0       	push   0xc002058e
c0006153:	e8 c4 3d 01 00       	call   c0019f1c <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 2d 3d 01 00       	call   c0019ec0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 05 02 c0       	push   0xc002059d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 05 02 c0       	push   0xc00205a0
c0006812:	e8 05 37 01 00       	call   c0019f1c <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 19 37 01 00       	call   c0019f38 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 05 02 c0 	mov    DWORD PTR [esp],0xc00205a5
c000682c:	e8 eb 36 01 00       	call   c0019f1c <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 fb 36 01 00       	call   c0019f38 <iso_kprintfd>
c000683d:	c7 04 24 ab 05 02 c0 	mov    DWORD PTR [esp],0xc00205ab
c0006844:	e8 d3 36 01 00       	call   c0019f1c <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 e3 36 01 00       	call   c0019f38 <iso_kprintfd>
c0006855:	c7 04 24 b1 05 02 c0 	mov    DWORD PTR [esp],0xc00205b1
c000685c:	e8 bb 36 01 00       	call   c0019f1c <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 cb 36 01 00       	call   c0019f38 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 05 02 c0       	push   0xc002059d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 05 02 c0       	push   0xc00205ba
c0006a31:	e8 e6 34 01 00       	call   c0019f1c <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 05 02 c0       	push   0xc00205c5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 05 02 c0       	push   0xc00205cc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 05 02 c0       	push   0xc00205d3
c0006b48:	e8 cf 33 01 00       	call   c0019f1c <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 05 02 c0       	push   0xc00205de
c0006b63:	e8 b4 33 01 00       	call   c0019f1c <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 ca 9e 00 00       	call   c0010b3c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 5f 5b 00 00       	call   c000c7e0 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 ef 05 02 c0       	push   0xc00205ef
c0006cb2:	e8 64 9f 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 08 06 02 c0       	push   0xc0020608
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 5d ea 00 00       	call   c001573c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 6c ec 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 48 64 01 c0       	push   0xc0016448
c0006d03:	52                   	push   edx
c0006d04:	e8 57 ec 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 04 07 02 c0       	push   0xc0020704
c0006d16:	e8 00 9f 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 83 a7 00 00       	call   c00114aa <KeInitRand()>
c0006d27:	e8 3f fb 00 00       	call   c001686b <Vm::initialise8086()>
c0006d2c:	e8 8f 48 00 00       	call   c000b5c0 <Fs::initVFS()>
c0006d31:	c7 04 24 15 06 02 c0 	mov    DWORD PTR [esp],0xc0020615
c0006d38:	e8 de 9e 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 04 07 02 c0       	push   0xc0020704
c0006d5c:	e8 ba 9e 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006d61:	e8 37 45 00 00       	call   c000b29d <KeInitialiseSymlinks()>
c0006d66:	e8 e9 a3 00 00       	call   c0011154 <KeLoadSystemEnv()>
c0006d6b:	e8 46 a6 00 00       	call   c00113b6 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 2f 06 02 c0       	push   0xc002062f
c0006d7a:	68 38 06 02 c0       	push   0xc0020638
c0006d7f:	e8 04 cc 00 00       	call   c0013988 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 b4 53 00 00       	call   c000c140 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 28 07 02 c0 	mov    DWORD PTR [esp],0xc0020728
c0006d93:	e8 83 9e 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 34 5a 00 00       	call   c000c7de <Device::loadDriversForAll()>
c0006daa:	c7 04 24 40 06 02 c0 	mov    DWORD PTR [esp],0xc0020640
c0006db1:	e8 65 9e 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 51 06 02 c0       	push   0xc0020651
c0006dc5:	e8 88 e3 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 b0 e5 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 e4 ef 00 00       	call   c0015dc4 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 6d 06 02 c0       	push   0xc002066d
c0006df5:	50                   	push   eax
c0006df6:	e8 5f 5a 00 00       	call   c000c85a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 74 07 02 c0       	mov    edx,0xc0020774
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 f1 7f 01 00       	call   c001eee6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 21 91 00 00       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 fa 90 00 00       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 d8 90 00 00       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 b6 90 00 00       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 c3 8f 00 00       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 9e 8f 00 00       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 50 7e 01 00       	call   c001eea0 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 9e 7a 01 00       	call   c001eb10 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 b4 8f 00 00       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 76 06 02 c0       	push   0xc0020676
c00070e2:	e8 0a a2 00 00       	call   c00112f1 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 7c 06 02 c0       	push   0xc002067c
c000711e:	e8 ce a1 00 00       	call   c00112f1 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 01 89 00 00       	jmp    c000fa6c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 82 06 02 c0       	push   0xc0020682
c00071c3:	0f 94 05 40 30 02 c0 	sete   BYTE PTR ds:0xc0023040
c00071ca:	e8 4c 9a 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 fb 83 00 00       	call   c000f5e0 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 ce 54 00 00       	call   c000c6c2 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 9a 06 02 c0 	mov    DWORD PTR [esp],0xc002069a
c000720d:	e8 09 9a 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 e4 8e 00 00       	call   c001010c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 8b 54 00 00       	call   c000c6c2 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 48 07 02 c0       	push   0xc0020748
c0007254:	e8 c2 99 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0007259:	e8 4a 08 01 00       	call   c0017aa8 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 b4 06 02 c0 	mov    DWORD PTR [esp],0xc00206b4
c0007265:	e8 b1 99 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 16 e8 00 00       	call   c0015a8c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 cf 06 02 c0       	push   0xc00206cf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 e0 06 02 c0       	push   0xc00206e0
c00072ed:	e8 ff 9f 00 00       	call   c00112f1 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 ed 06 02 c0       	push   0xc00206ed
c0007302:	e8 ea 9f 00 00       	call   c00112f1 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 f7 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc00206f7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 d0 9f 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 61 02 01 00       	call   c0017774 <HalSystemIdle()>
c0007513:	e8 8a 7f 01 00       	call   c001f4a2 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 a0 eb 01 c0       	push   0xc001eba0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 b0 eb 01 c0       	push   0xc001ebb0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ba eb 01 c0       	push   0xc001ebba
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 c4 eb 01 c0       	push   0xc001ebc4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ce eb 01 c0       	push   0xc001ebce
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 d8 eb 01 c0       	push   0xc001ebd8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 e2 eb 01 c0       	push   0xc001ebe2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 ec eb 01 c0       	push   0xc001ebec
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 f6 eb 01 c0       	push   0xc001ebf6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 fe eb 01 c0       	push   0xc001ebfe
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 08 ec 01 c0       	push   0xc001ec08
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 10 ec 01 c0       	push   0xc001ec10
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 18 ec 01 c0       	push   0xc001ec18
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 20 ec 01 c0       	push   0xc001ec20
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 3a ec 01 c0       	push   0xc001ec3a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 42 ec 01 c0       	push   0xc001ec42
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 4c ec 01 c0       	push   0xc001ec4c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 56 ec 01 c0       	push   0xc001ec56
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 60 ec 01 c0       	push   0xc001ec60
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 fa ec 01 c0       	push   0xc001ecfa
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 01 ed 01 c0       	push   0xc001ed01
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 ec ec 01 c0       	push   0xc001ecec
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 f3 ec 01 c0       	push   0xc001ecf3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 6a ec 01 c0       	push   0xc001ec6a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 74 ec 01 c0       	push   0xc001ec74
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 7e ec 01 c0       	push   0xc001ec7e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 88 ec 01 c0       	push   0xc001ec88
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 92 ec 01 c0       	push   0xc001ec92
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 9c ec 01 c0       	push   0xc001ec9c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 a6 ec 01 c0       	push   0xc001eca6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 b0 ec 01 c0       	push   0xc001ecb0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ba ec 01 c0       	push   0xc001ecba
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 c4 ec 01 c0       	push   0xc001ecc4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ce ec 01 c0       	push   0xc001ecce
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 d8 ec 01 c0       	push   0xc001ecd8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 e2 ec 01 c0       	push   0xc001ece2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 3c ee 01 c0       	push   0xc001ee3c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 46 ee 01 c0       	push   0xc001ee46
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 50 ee 01 c0       	push   0xc001ee50
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 5a ee 01 c0       	push   0xc001ee5a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 64 ee 01 c0       	push   0xc001ee64
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 6e ee 01 c0       	push   0xc001ee6e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 78 ee 01 c0       	push   0xc001ee78
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 82 ee 01 c0       	push   0xc001ee82
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 f6 eb 01 c0       	push   0xc001ebf6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 34 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023034
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 34 30 02 c0    	mov    edi,DWORD PTR ds:0xc0023034
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 34 30 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023034,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 34 30 02 c0       	mov    eax,ds:0xc0023034
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 98 07 02 c0       	push   0xc0020798
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 c8 07 02 c0       	push   0xc00207c8
c0007a27:	e8 c5 98 00 00       	call   c00112f1 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 cd 07 02 c0       	push   0xc00207cd
c0007a3d:	e8 af 98 00 00       	call   c00112f1 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 d4 07 02 c0       	push   0xc00207d4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 36 90 00 00       	call   c0010b9f <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 5f 8f 00 00       	call   c0010ae9 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 9a 78 01 00       	call   c001f43a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ec 07 02 c0       	push   0xc00207ec
c0007c31:	e8 bb 96 00 00       	call   c00112f1 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ec 07 02 c0       	push   0xc00207ec
c0007ca2:	e8 4a 96 00 00       	call   c00112f1 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 38 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023038
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 38 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023038
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 38 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023038
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 91 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020891
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 44 95 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 14 08 02 c0       	push   0xc0020814
c0007e31:	e8 bb 94 00 00       	call   c00112f1 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 a7 08 02 c0       	push   0xc00208a7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 44 08 02 c0       	push   0xc0020844
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 68 08 02 c0       	push   0xc0020868
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 cd 08 02 c0       	push   0xc00208cd
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 bf 08 02 c0       	push   0xc00208bf
c000813c:	e8 b0 91 00 00       	call   c00112f1 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 2c 09 02 c0       	mov    edx,0xc002092c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 e9 08 02 c0       	push   0xc00208e9
c0008311:	e8 db 8f 00 00       	call   c00112f1 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 51 d8 00 00       	call   c0015bb0 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 29 6f 01 00       	call   c001f320 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 09 02 c0       	push   0xc0020906
c000840c:	e8 e0 8e 00 00       	call   c00112f1 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c 09 02 c0       	mov    edx,0xc002092c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 09 02 c0       	mov    edx,0xc0020974
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 a6 50 00 00       	call   c000d59c <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 4c 04 01 00       	call   c0018968 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d 60 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcfa0]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d 60 30 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdcfa0]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 18 2f 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd0e8]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 f0 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd110]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 7e 01 01 00       	call   c00187fc <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 db 01 01 00       	jmp    c0018904 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020940
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 7b 8b 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 14 38 00 00       	jmp    c000c0e7 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 4e 09 02 c0       	mov    esi,0xc002094e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 e2 fc 00 00       	call   c0018904 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 74 09 02 c0       	mov    edx,0xc0020974
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 5f 09 02 c0       	push   0xc002095f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 65 09 02 c0       	push   0xc0020965
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 a0 30 02 c0       	mov    eax,ds:0xc00230a0
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 a0 30 02 c0    	mov    DWORD PTR ds:0xc00230a0,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 07 63 01 00       	call   c001f508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 58 0a 02 c0       	mov    edx,0xc0020a58
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 3c 0a 02 c0       	mov    edx,0xc0020a3c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 07 62 01 00       	call   c001f5dc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 fb 61 01 00       	call   c001f5e4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 01 61 01 00       	call   c001f508 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 14 0a 02 c0       	push   0xc0020a14
c000942c:	e8 c0 7e 00 00       	call   c00112f1 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 58 0a 02 c0       	mov    edx,0xc0020a58
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 06 61 01 00       	call   c001f5dc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 93 61 01 00       	call   c001f686 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 51 5f 01 00       	call   c001f4c6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 30 30 02 c0       	push   0xc0023030
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 c4 f4 01 c0       	push   0xc001f4c4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 a8 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230a8
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d a8 30 02 c0    	mov    ecx,DWORD PTR ds:0xc00230a8
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 a4 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230a4
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 a4 30 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00230a4,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 a4 30 02 c0    	mov    DWORD PTR ds:0xc00230a4,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 6c 0a 02 c0       	push   0xc0020a6c
c0009689:	e8 63 7c 00 00       	call   c00112f1 <KePanic(char const*)>
c000968e:	8b 35 a4 30 02 c0    	mov    esi,DWORD PTR ds:0xc00230a4
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d a4 30 02 c0    	mov    DWORD PTR ds:0xc00230a4,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 a4 30 02 c0       	mov    eax,ds:0xc00230a4
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 a4 30 02 c0    	mov    DWORD PTR ds:0xc00230a4,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 a4 30 02 c0       	mov    ds:0xc00230a4,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 ac 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230ac
c000975f:	8b 0d b4 30 02 c0    	mov    ecx,DWORD PTR ds:0xc00230b4
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d ac 30 02 c0    	mov    ecx,DWORD PTR ds:0xc00230ac
c000977a:	a1 b0 30 02 c0       	mov    eax,ds:0xc00230b0
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d b0 30 02 c0    	cmp    DWORD PTR ds:0xc00230b0,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 00 0d 02 c0       	push   0xc0020d00
c00097c0:	e8 2c 7b 00 00       	call   c00112f1 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 17 0d 02 c0       	push   0xc0020d17
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d b0 30 02 c0    	mov    DWORD PTR ds:0xc00230b0,ebx
c0009864:	c6 05 b8 30 02 c0 43 	mov    BYTE PTR ds:0xc00230b8,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 b4 30 02 c0       	mov    ds:0xc00230b4,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 ac 30 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00230ac,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 b0 30 02 c0       	mov    eax,ds:0xc00230b0
c0009896:	f7 35 ac 30 02 c0    	div    DWORD PTR ds:0xc00230ac
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 8c 0a 02 c0       	push   0xc0020a8c
c00098d1:	e8 1b 7a 00 00       	call   c00112f1 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 2e 0d 02 c0       	push   0xc0020d2e
c00099a3:	e8 49 79 00 00       	call   c00112f1 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 b0 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ab0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 e6 78 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 4a 0d 02 c0       	push   0xc0020d4a
c0009a18:	e8 d4 78 00 00       	call   c00112f1 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 66 0d 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020d66
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 8a 78 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 d4 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ad4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 f8 0a 02 c0       	push   0xc0020af8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 60 0b 02 c0       	push   0xc0020b60
c0009dad:	e8 3f 75 00 00       	call   c00112f1 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 84 0b 02 c0       	push   0xc0020b84
c0009e99:	e8 53 74 00 00       	call   c00112f1 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 b0 0b 02 c0       	push   0xc0020bb0
c0009fed:	e8 ff 72 00 00       	call   c00112f1 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 32 27 00 00       	call   c000c956 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 80 0d 02 c0       	push   0xc0020d80
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 ac 30 02 c0       	mov    eax,ds:0xc00230ac
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 b8 30 02 c0 	movsx  eax,BYTE PTR ds:0xc00230b8
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 06 38 00 00       	call   c000db10 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d ac 30 02 c0    	cmp    DWORD PTR ds:0xc00230ac,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 d4 0b 02 c0       	push   0xc0020bd4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 8e 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020d8e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 b1 0d 02 c0       	push   0xc0020db1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 9f 0d 02 c0       	push   0xc0020d9f
c000a3db:	e8 11 6f 00 00       	call   c00112f1 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 b1 0d 02 c0       	push   0xc0020db1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 ac 30 02 c0    	mov    edx,DWORD PTR ds:0xc00230ac
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 b8 30 02 c0 	movsx  eax,BYTE PTR ds:0xc00230b8
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 1d 36 00 00       	call   c000daa4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 ac 30 02 c0    	cmp    DWORD PTR ds:0xc00230ac,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 c4 0d 02 c0       	push   0xc0020dc4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 04 0c 02 c0       	push   0xc0020c04
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 24 0c 02 c0       	push   0xc0020c24
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 84 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c84
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 d9 0d 02 c0       	push   0xc0020dd9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ed 0d 02 c0       	push   0xc0020ded
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 00 0e 02 c0       	push   0xc0020e00
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 0d 0e 02 c0       	push   0xc0020e0d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 26 0e 02 c0       	push   0xc0020e26
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 26 0e 02 c0       	push   0xc0020e26
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 2e 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e2e
c000a7f8:	e8 f4 6a 00 00       	call   c00112f1 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 46 0e 02 c0       	push   0xc0020e46
c000a80a:	e8 e2 6a 00 00       	call   c00112f1 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 4f 09 02 c0       	mov    esi,0xc002094f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 4e 09 02 c0       	mov    al,ds:0xc002094e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 5c 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf1a4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 ac 0f 02 c0       	push   0xc0020fac
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 c0 0f 02 c0       	push   0xc0020fc0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ca 0f 02 c0       	push   0xc0020fca
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 d4 0f 02 c0       	push   0xc0020fd4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 18 11 02 c0       	push   0xc0021118
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 de 0f 02 c0       	push   0xc0020fde
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 38 11 02 c0       	push   0xc0021138
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 f3 0f 02 c0       	push   0xc0020ff3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 0d 10 02 c0       	push   0xc002100d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 c0 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcf40]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 60 11 02 c0       	push   0xc0021160
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 18 11 02 c0       	push   0xc0021118
c000abb4:	e8 38 67 00 00       	call   c00112f1 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 a8 11 02 c0       	push   0xc00211a8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 a8 11 02 c0       	push   0xc00211a8
c000abe3:	e8 09 67 00 00       	call   c00112f1 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 18 10 02 c0       	push   0xc0021018
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 18 10 02 c0       	push   0xc0021018
c000ac0f:	e8 dd 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 35 10 02 c0       	push   0xc0021035
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 35 10 02 c0       	push   0xc0021035
c000ac3b:	e8 b1 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 c8 11 02 c0       	push   0xc00211c8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 c8 11 02 c0       	push   0xc00211c8
c000ac67:	e8 85 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ec 11 02 c0       	push   0xc00211ec
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ec 11 02 c0       	push   0xc00211ec
c000ac93:	e8 59 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 51 10 02 c0       	push   0xc0021051
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 51 10 02 c0       	push   0xc0021051
c000acbf:	e8 2d 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 6d 10 02 c0       	push   0xc002106d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 6d 10 02 c0       	push   0xc002106d
c000aceb:	e8 01 66 00 00       	call   c00112f1 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 0c 12 02 c0       	push   0xc002120c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 0c 12 02 c0       	push   0xc002120c
c000ad17:	e8 d5 65 00 00       	call   c00112f1 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 30 12 02 c0       	push   0xc0021230
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 30 12 02 c0       	push   0xc0021230
c000ad43:	e8 a9 65 00 00       	call   c00112f1 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 e1 66 00 00       	call   c001143f <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 4f 12 02 c0       	push   0xc002124f
c000ad97:	e8 55 65 00 00       	call   c00112f1 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 58 12 02 c0       	push   0xc0021258
c000addc:	50                   	push   eax
c000addd:	e8 d6 09 00 00       	call   c000b7b8 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 76 12 02 c0       	push   0xc0021276
c000adf1:	e8 fb 64 00 00       	call   c00112f1 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 71 0a 00 00       	call   c000b874 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 90 12 02 c0       	push   0xc0021290
c000ae12:	e8 da 64 00 00       	call   c00112f1 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 aa 12 02 c0       	push   0xc00212aa
c000ae59:	e8 93 64 00 00       	call   c00112f1 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 5b 0a 00 00       	call   c000b8d2 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 44             	sub    esp,0x44
c000af52:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000af56:	56                   	push   esi
c000af57:	68 c4 12 02 c0       	push   0xc00212c4
c000af5c:	e8 e4 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af61:	89 34 24             	mov    DWORD PTR [esp],esi
c000af64:	e8 9b ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	89 c7                	mov    edi,eax
c000af6e:	89 d0                	mov    eax,edx
c000af70:	09 f8                	or     eax,edi
c000af72:	0f 84 de 01 00 00    	je     c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000af78:	89 d5                	mov    ebp,edx
c000af7a:	53                   	push   ebx
c000af7b:	53                   	push   ebx
c000af7c:	57                   	push   edi
c000af7d:	68 de 12 02 c0       	push   0xc00212de
c000af82:	e8 be f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af87:	58                   	pop    eax
c000af88:	5a                   	pop    edx
c000af89:	55                   	push   ebp
c000af8a:	68 ec 12 02 c0       	push   0xc00212ec
c000af8f:	e8 b1 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000af94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af9b:	e8 16 cb ff ff       	call   c0007ab6 <malloc>
c000afa0:	83 c4 0c             	add    esp,0xc
c000afa3:	89 c3                	mov    ebx,eax
c000afa5:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000afab:	56                   	push   esi
c000afac:	50                   	push   eax
c000afad:	e8 06 08 00 00       	call   c000b7b8 <File::File(char const*, Process*)>
c000afb2:	83 c4 10             	add    esp,0x10
c000afb5:	85 db                	test   ebx,ebx
c000afb7:	0f 84 68 01 00 00    	je     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000afbd:	83 ec 0c             	sub    esp,0xc
c000afc0:	68 a0 1e 02 c0       	push   0xc0021ea0
c000afc5:	e8 7b f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000afca:	5a                   	pop    edx
c000afcb:	59                   	pop    ecx
c000afcc:	6a 01                	push   0x1
c000afce:	53                   	push   ebx
c000afcf:	e8 a0 08 00 00       	call   c000b874 <File::open(FileOpenMode)>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	85 c0                	test   eax,eax
c000afd9:	74 0b                	je     c000afe6 <KeDereferenceSymlink(char const*, char*)+0x9b>
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afe0:	53                   	push   ebx
c000afe1:	e9 39 01 00 00       	jmp    c000b11f <KeDereferenceSymlink(char const*, char*)+0x1d4>
c000afe6:	83 ec 0c             	sub    esp,0xc
c000afe9:	68 e6 08 02 c0       	push   0xc00208e6
c000afee:	e8 52 f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aff3:	58                   	pop    eax
c000aff4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000aff6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000affa:	56                   	push   esi
c000affb:	8d 54 24 37          	lea    edx,[esp+0x37]
c000afff:	52                   	push   edx
c000b000:	6a 00                	push   0x0
c000b002:	6a 08                	push   0x8
c000b004:	53                   	push   ebx
c000b005:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b008:	83 c4 20             	add    esp,0x20
c000b00b:	85 c0                	test   eax,eax
c000b00d:	0f 85 fe 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b013:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b018:	0f 85 f3 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b01e:	83 ec 0c             	sub    esp,0xc
c000b021:	68 d2 1e 02 c0       	push   0xc0021ed2
c000b026:	e8 1a f9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b02b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b02d:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b031:	89 34 24             	mov    DWORD PTR [esp],esi
c000b034:	52                   	push   edx
c000b035:	6a 00                	push   0x0
c000b037:	6a 08                	push   0x8
c000b039:	53                   	push   ebx
c000b03a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b03d:	83 c4 20             	add    esp,0x20
c000b040:	85 c0                	test   eax,eax
c000b042:	0f 85 c9 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b048:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b04d:	0f 85 be 00 00 00    	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b053:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b057:	0f 85 f9 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b05d:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b061:	0f 85 ef 00 00 00    	jne    c000b156 <KeDereferenceSymlink(char const*, char*)+0x20b>
c000b067:	83 ec 0c             	sub    esp,0xc
c000b06a:	68 fa 12 02 c0       	push   0xc00212fa
c000b06f:	e8 d1 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b074:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b07c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b084:	83 c4 0c             	add    esp,0xc
c000b087:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b08b:	50                   	push   eax
c000b08c:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b090:	50                   	push   eax
c000b091:	53                   	push   ebx
c000b092:	e8 df 0a 00 00       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b09f:	75 70                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0a1:	31 ff                	xor    edi,edi
c000b0a3:	b8 0f 00 00 00       	mov    eax,0xf
c000b0a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b0ac:	89 f8                	mov    eax,edi
c000b0ae:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b0b2:	73 5d                	jae    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0b4:	83 ec 0c             	sub    esp,0xc
c000b0b7:	68 fa 12 02 c0       	push   0xc00212fa
c000b0bc:	e8 84 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b0c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b0c5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b0c9:	83 c0 f0             	add    eax,0xfffffff0
c000b0cc:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0d1:	83 d2 ff             	adc    edx,0xffffffff
c000b0d4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	39 c1                	cmp    ecx,eax
c000b0e1:	19 d7                	sbb    edi,edx
c000b0e3:	72 40                	jb     c000b125 <KeDereferenceSymlink(char const*, char*)+0x1da>
c000b0e5:	83 ec 0c             	sub    esp,0xc
c000b0e8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b0ea:	56                   	push   esi
c000b0eb:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b0ef:	52                   	push   edx
c000b0f0:	50                   	push   eax
c000b0f1:	53                   	push   ebx
c000b0f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b0f5:	83 c4 20             	add    esp,0x20
c000b0f8:	85 c0                	test   eax,eax
c000b0fa:	75 15                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b0fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b100:	89 c7                	mov    edi,eax
c000b102:	c1 ff 1f             	sar    edi,0x1f
c000b105:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b109:	75 06                	jne    c000b111 <KeDereferenceSymlink(char const*, char*)+0x1c6>
c000b10b:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b10f:	74 19                	je     c000b12a <KeDereferenceSymlink(char const*, char*)+0x1df>
c000b111:	83 ec 0c             	sub    esp,0xc
c000b114:	53                   	push   ebx
c000b115:	e8 b8 07 00 00       	call   c000b8d2 <File::close()>
c000b11a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b11c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b11f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b122:	83 c4 10             	add    esp,0x10
c000b125:	83 c8 ff             	or     eax,0xffffffff
c000b128:	eb 2e                	jmp    c000b158 <KeDereferenceSymlink(char const*, char*)+0x20d>
c000b12a:	83 ec 0c             	sub    esp,0xc
c000b12d:	68 b2 29 02 c0       	push   0xc00229b2
c000b132:	e8 0e f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b137:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b13a:	e8 93 07 00 00       	call   c000b8d2 <File::close()>
c000b13f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b141:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b147:	c7 04 24 fd 12 02 c0 	mov    DWORD PTR [esp],0xc00212fd
c000b14e:	e8 f2 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	31 c0                	xor    eax,eax
c000b158:	83 c4 3c             	add    esp,0x3c
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16b:	68 14 01 00 00       	push   0x114
c000b170:	e8 41 c9 ff ff       	call   c0007ab6 <malloc>
c000b175:	83 c4 0c             	add    esp,0xc
c000b178:	89 c3                	mov    ebx,eax
c000b17a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b180:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b184:	50                   	push   eax
c000b185:	e8 2e 06 00 00       	call   c000b7b8 <File::File(char const*, Process*)>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	b8 01 00 00 00       	mov    eax,0x1
c000b192:	85 db                	test   ebx,ebx
c000b194:	0f 84 fb 00 00 00    	je     c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b19a:	52                   	push   edx
c000b19b:	52                   	push   edx
c000b19c:	6a 12                	push   0x12
c000b19e:	53                   	push   ebx
c000b19f:	e8 d0 06 00 00       	call   c000b874 <File::open(FileOpenMode)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	85 c0                	test   eax,eax
c000b1a9:	74 0b                	je     c000b1b6 <KeCreateSymlink(char const*, char const*)+0x56>
c000b1ab:	83 ec 0c             	sub    esp,0xc
c000b1ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b0:	53                   	push   ebx
c000b1b1:	e9 d4 00 00 00       	jmp    c000b28a <KeCreateSymlink(char const*, char const*)+0x12a>
c000b1b6:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b1ba:	be 00 13 02 c0       	mov    esi,0xc0021300
c000b1bf:	b9 09 00 00 00       	mov    ecx,0x9
c000b1c4:	fc                   	cld    
c000b1c5:	83 ec 0c             	sub    esp,0xc
c000b1c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1ca:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1d0:	56                   	push   esi
c000b1d1:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1d5:	52                   	push   edx
c000b1d6:	6a 00                	push   0x0
c000b1d8:	6a 08                	push   0x8
c000b1da:	53                   	push   ebx
c000b1db:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1de:	83 c4 20             	add    esp,0x20
c000b1e1:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1e6:	0f 85 90 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1ec:	85 c0                	test   eax,eax
c000b1ee:	0f 85 88 00 00 00    	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f4:	e8 57 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b1f9:	83 ec 0c             	sub    esp,0xc
c000b1fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b200:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 5e                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 5a                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 2d                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 29                	jne    c000b27c <KeCreateSymlink(char const*, char const*)+0x11c>
c000b253:	50                   	push   eax
c000b254:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b258:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b25c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b260:	e8 30 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b265:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b268:	e8 65 06 00 00       	call   c000b8d2 <File::close()>
c000b26d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b26f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b272:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b275:	83 c4 10             	add    esp,0x10
c000b278:	31 c0                	xor    eax,eax
c000b27a:	eb 19                	jmp    c000b295 <KeCreateSymlink(char const*, char const*)+0x135>
c000b27c:	83 ec 0c             	sub    esp,0xc
c000b27f:	53                   	push   ebx
c000b280:	e8 4d 06 00 00       	call   c000b8d2 <File::close()>
c000b285:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b287:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b28a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b28d:	83 c4 10             	add    esp,0x10
c000b290:	b8 01 00 00 00       	mov    eax,0x1
c000b295:	83 c4 2c             	add    esp,0x2c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    

c000b29d <KeInitialiseSymlinks()>:
c000b29d:	53                   	push   ebx
c000b29e:	83 ec 10             	sub    esp,0x10
c000b2a1:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b2ab:	6a 00                	push   0x0
c000b2ad:	68 90 ae 00 c0       	push   0xc000ae90
c000b2b2:	e8 51 58 00 00       	call   c0010b08 <KeRegisterAtexit(void (*)(void*), void*)>
c000b2b7:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b2be:	e8 f3 c7 ff ff       	call   c0007ab6 <malloc>
c000b2c3:	83 c4 0c             	add    esp,0xc
c000b2c6:	89 c3                	mov    ebx,eax
c000b2c8:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b2ce:	68 58 12 02 c0       	push   0xc0021258
c000b2d3:	50                   	push   eax
c000b2d4:	e8 df 04 00 00       	call   c000b7b8 <File::File(char const*, Process*)>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	85 db                	test   ebx,ebx
c000b2de:	75 10                	jne    c000b2f0 <KeInitialiseSymlinks()+0x53>
c000b2e0:	83 ec 0c             	sub    esp,0xc
c000b2e3:	68 09 13 02 c0       	push   0xc0021309
c000b2e8:	e8 04 60 00 00       	call   c00112f1 <KePanic(char const*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	83 ec 0c             	sub    esp,0xc
c000b2f3:	53                   	push   ebx
c000b2f4:	e8 3f 08 00 00       	call   c000bb38 <File::exists()>
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	84 c0                	test   al,al
c000b2fe:	75 2d                	jne    c000b32d <KeInitialiseSymlinks()+0x90>
c000b300:	52                   	push   edx
c000b301:	52                   	push   edx
c000b302:	6a 12                	push   0x12
c000b304:	53                   	push   ebx
c000b305:	e8 6a 05 00 00       	call   c000b874 <File::open(FileOpenMode)>
c000b30a:	83 c4 10             	add    esp,0x10
c000b30d:	85 c0                	test   eax,eax
c000b30f:	74 10                	je     c000b321 <KeInitialiseSymlinks()+0x84>
c000b311:	83 ec 0c             	sub    esp,0xc
c000b314:	68 26 13 02 c0       	push   0xc0021326
c000b319:	e8 d3 5f 00 00       	call   c00112f1 <KePanic(char const*)>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	83 ec 0c             	sub    esp,0xc
c000b324:	53                   	push   ebx
c000b325:	e8 a8 05 00 00       	call   c000b8d2 <File::close()>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	85 db                	test   ebx,ebx
c000b32f:	74 0c                	je     c000b33d <KeInitialiseSymlinks()+0xa0>
c000b331:	83 ec 0c             	sub    esp,0xc
c000b334:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b336:	53                   	push   ebx
c000b337:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b33a:	83 c4 10             	add    esp,0x10
c000b33d:	50                   	push   eax
c000b33e:	50                   	push   eax
c000b33f:	68 43 13 02 c0       	push   0xc0021343
c000b344:	68 51 13 02 c0       	push   0xc0021351
c000b349:	e8 12 fe ff ff       	call   c000b160 <KeCreateSymlink(char const*, char const*)>
c000b34e:	83 c4 18             	add    esp,0x18
c000b351:	5b                   	pop    ebx
c000b352:	c3                   	ret    
c000b353:	90                   	nop

c000b354 <File::read(unsigned long long, void*, int*)>:
c000b354:	53                   	push   ebx
c000b355:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b359:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b35d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b364:	83 f8 19             	cmp    eax,0x19
c000b367:	77 35                	ja     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b369:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b370:	85 c0                	test   eax,eax
c000b372:	74 2a                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b374:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b37a:	85 c0                	test   eax,eax
c000b37c:	74 20                	je     c000b39e <File::read(unsigned long long, void*, int*)+0x4a>
c000b37e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b382:	74 21                	je     c000b3a5 <File::read(unsigned long long, void*, int*)+0x51>
c000b384:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b386:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b38a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b390:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b394:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b398:	5b                   	pop    ebx
c000b399:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b39c:	ff e0                	jmp    eax
c000b39e:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a3:	eb 05                	jmp    c000b3aa <File::read(unsigned long long, void*, int*)+0x56>
c000b3a5:	b8 05 00 00 00       	mov    eax,0x5
c000b3aa:	5b                   	pop    ebx
c000b3ab:	c3                   	ret    

c000b3ac <File::write(unsigned long long, void*, int*)>:
c000b3ac:	53                   	push   ebx
c000b3ad:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3b5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3bc:	83 f8 19             	cmp    eax,0x19
c000b3bf:	77 35                	ja     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3c1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	74 2a                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3cc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3d2:	85 c0                	test   eax,eax
c000b3d4:	74 20                	je     c000b3f6 <File::write(unsigned long long, void*, int*)+0x4a>
c000b3d6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3da:	74 21                	je     c000b3fd <File::write(unsigned long long, void*, int*)+0x51>
c000b3dc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3de:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3e2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3f0:	5b                   	pop    ebx
c000b3f1:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b3f4:	ff e0                	jmp    eax
c000b3f6:	b8 0b 00 00 00       	mov    eax,0xb
c000b3fb:	eb 05                	jmp    c000b402 <File::write(unsigned long long, void*, int*)+0x56>
c000b3fd:	b8 05 00 00 00       	mov    eax,0x5
c000b402:	5b                   	pop    ebx
c000b403:	c3                   	ret    

c000b404 <Directory::read(unsigned long long, void*, int*)>:
c000b404:	53                   	push   ebx
c000b405:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b409:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b40d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b414:	83 f8 19             	cmp    eax,0x19
c000b417:	77 35                	ja     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b419:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b420:	85 c0                	test   eax,eax
c000b422:	74 2a                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b424:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b42a:	85 c0                	test   eax,eax
c000b42c:	74 20                	je     c000b44e <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b42e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b432:	74 21                	je     c000b455 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b434:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b436:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b43a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b440:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b444:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b448:	5b                   	pop    ebx
c000b449:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b44c:	ff e0                	jmp    eax
c000b44e:	b8 0b 00 00 00       	mov    eax,0xb
c000b453:	eb 05                	jmp    c000b45a <Directory::read(unsigned long long, void*, int*)+0x56>
c000b455:	b8 05 00 00 00       	mov    eax,0x5
c000b45a:	5b                   	pop    ebx
c000b45b:	c3                   	ret    

c000b45c <Directory::write(unsigned long long, void*, int*)>:
c000b45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b460:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b467:	b8 0b 00 00 00       	mov    eax,0xb
c000b46c:	83 fa 19             	cmp    edx,0x19
c000b46f:	77 18                	ja     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b471:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b478:	85 d2                	test   edx,edx
c000b47a:	74 0d                	je     c000b489 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b47c:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b483:	19 c0                	sbb    eax,eax
c000b485:	83 e0 0a             	and    eax,0xa
c000b488:	40                   	inc    eax
c000b489:	c3                   	ret    

c000b48a <File::isAtty()>:
c000b48a:	31 c0                	xor    eax,eax
c000b48c:	c3                   	ret    
c000b48d:	90                   	nop

c000b48e <Directory::isAtty()>:
c000b48e:	31 c0                	xor    eax,eax
c000b490:	c3                   	ret    
c000b491:	90                   	nop

c000b492 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b492:	b8 0a 00 00 00       	mov    eax,0xa
c000b497:	c3                   	ret    

c000b498 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b498:	b8 0a 00 00 00       	mov    eax,0xa
c000b49d:	c3                   	ret    

c000b49e <Filesystem::allocateSwapfile(char const*, int)>:
c000b49e:	31 c0                	xor    eax,eax
c000b4a0:	31 d2                	xor    edx,edx
c000b4a2:	c3                   	ret    
c000b4a3:	90                   	nop

c000b4a4 <File::~File()>:
c000b4a4:	83 ec 0c             	sub    esp,0xc
c000b4a7:	ba e4 13 02 c0       	mov    edx,0xc00213e4
c000b4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b0:	89 10                	mov    DWORD PTR [eax],edx
c000b4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4b6:	83 ec 0c             	sub    esp,0xc
c000b4b9:	50                   	push   eax
c000b4ba:	e8 e5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4bf:	83 c4 10             	add    esp,0x10
c000b4c2:	90                   	nop
c000b4c3:	83 c4 0c             	add    esp,0xc
c000b4c6:	c3                   	ret    
c000b4c7:	90                   	nop

c000b4c8 <File::~File()>:
c000b4c8:	83 ec 0c             	sub    esp,0xc
c000b4cb:	83 ec 0c             	sub    esp,0xc
c000b4ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d2:	e8 cd ff ff ff       	call   c000b4a4 <File::~File()>
c000b4d7:	83 c4 10             	add    esp,0x10
c000b4da:	83 ec 08             	sub    esp,0x8
c000b4dd:	68 14 01 00 00       	push   0x114
c000b4e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4e6:	e8 2d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	83 c4 0c             	add    esp,0xc
c000b4f1:	c3                   	ret    

c000b4f2 <Directory::~Directory()>:
c000b4f2:	83 ec 0c             	sub    esp,0xc
c000b4f5:	ba 00 14 02 c0       	mov    edx,0xc0021400
c000b4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4fe:	89 10                	mov    DWORD PTR [eax],edx
c000b500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b504:	83 ec 0c             	sub    esp,0xc
c000b507:	50                   	push   eax
c000b508:	e8 97 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b50d:	83 c4 10             	add    esp,0x10
c000b510:	90                   	nop
c000b511:	83 c4 0c             	add    esp,0xc
c000b514:	c3                   	ret    
c000b515:	90                   	nop

c000b516 <Directory::~Directory()>:
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	83 ec 0c             	sub    esp,0xc
c000b51c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b520:	e8 cd ff ff ff       	call   c000b4f2 <Directory::~Directory()>
c000b525:	83 c4 10             	add    esp,0x10
c000b528:	83 ec 08             	sub    esp,0x8
c000b52b:	68 14 01 00 00       	push   0x114
c000b530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b534:	e8 df f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b539:	83 c4 10             	add    esp,0x10
c000b53c:	83 c4 0c             	add    esp,0xc
c000b53f:	c3                   	ret    

c000b540 <Filesystem::Filesystem()>:
c000b540:	ba 78 13 02 c0       	mov    edx,0xc0021378
c000b545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b549:	89 10                	mov    DWORD PTR [eax],edx
c000b54b:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b555:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b561:	90                   	nop
c000b562:	c3                   	ret    
c000b563:	90                   	nop

c000b564 <Filesystem::~Filesystem()>:
c000b564:	ba 78 13 02 c0       	mov    edx,0xc0021378
c000b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b56d:	89 10                	mov    DWORD PTR [eax],edx
c000b56f:	90                   	nop
c000b570:	c3                   	ret    
c000b571:	90                   	nop

c000b572 <Filesystem::~Filesystem()>:
c000b572:	83 ec 0c             	sub    esp,0xc
c000b575:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b579:	e8 e6 ff ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c000b57e:	83 c4 04             	add    esp,0x4
c000b581:	83 ec 08             	sub    esp,0x8
c000b584:	6a 08                	push   0x8
c000b586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58a:	e8 89 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b58f:	83 c4 10             	add    esp,0x10
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    

c000b596 <Fs::getcwd(Process*, char*, int)>:
c000b596:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b59a:	31 c0                	xor    eax,eax
c000b59c:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b59f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b5a3:	7d 15                	jge    c000b5ba <Fs::getcwd(Process*, char*, int)+0x24>
c000b5a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b5a9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b5b0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b5b3:	84 c9                	test   cl,cl
c000b5b5:	74 06                	je     c000b5bd <Fs::getcwd(Process*, char*, int)+0x27>
c000b5b7:	40                   	inc    eax
c000b5b8:	eb e2                	jmp    c000b59c <Fs::getcwd(Process*, char*, int)+0x6>
c000b5ba:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b5bd:	31 c0                	xor    eax,eax
c000b5bf:	c3                   	ret    

c000b5c0 <Fs::initVFS()>:
c000b5c0:	83 ec 18             	sub    esp,0x18
c000b5c3:	6a 08                	push   0x8
c000b5c5:	e8 ec c4 ff ff       	call   c0007ab6 <malloc>
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 4a e1 00 00       	call   c001971c <FAT::FAT()>
c000b5d2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b5d9:	e8 d8 c4 ff ff       	call   c0007ab6 <malloc>
c000b5de:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5e1:	e8 62 f0 00 00       	call   c001a648 <ISO9660::ISO9660()>
c000b5e6:	83 c4 1c             	add    esp,0x1c
c000b5e9:	c3                   	ret    

c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b5ea:	55                   	push   ebp
c000b5eb:	57                   	push   edi
c000b5ec:	56                   	push   esi
c000b5ed:	53                   	push   ebx
c000b5ee:	81 ec 10 04 00 00    	sub    esp,0x410
c000b5f4:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b5fb:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b602:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b609:	68 00 04 00 00       	push   0x400
c000b60e:	6a 00                	push   0x0
c000b610:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b614:	56                   	push   esi
c000b615:	e8 d6 4e ff ff       	call   c00004f0 <memset>
c000b61a:	83 c4 10             	add    esp,0x10
c000b61d:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b621:	75 0b                	jne    c000b62e <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b623:	50                   	push   eax
c000b624:	50                   	push   eax
c000b625:	57                   	push   edi
c000b626:	56                   	push   esi
c000b627:	e8 14 50 ff ff       	call   c0000640 <strcpy>
c000b62c:	eb 44                	jmp    c000b672 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b62e:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b631:	83 f8 5c             	cmp    eax,0x5c
c000b634:	74 05                	je     c000b63b <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b636:	83 f8 2f             	cmp    eax,0x2f
c000b639:	75 18                	jne    c000b653 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b63b:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b63e:	3c 60                	cmp    al,0x60
c000b640:	7e 03                	jle    c000b645 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b642:	83 e8 20             	sub    eax,0x20
c000b645:	88 04 24             	mov    BYTE PTR [esp],al
c000b648:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b64f:	50                   	push   eax
c000b650:	50                   	push   eax
c000b651:	eb 18                	jmp    c000b66b <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b653:	50                   	push   eax
c000b654:	50                   	push   eax
c000b655:	55                   	push   ebp
c000b656:	56                   	push   esi
c000b657:	e8 e4 4f ff ff       	call   c0000640 <strcpy>
c000b65c:	58                   	pop    eax
c000b65d:	5a                   	pop    edx
c000b65e:	68 23 23 02 c0       	push   0xc0022323
c000b663:	56                   	push   esi
c000b664:	e8 d7 51 ff ff       	call   c0000840 <strcat>
c000b669:	59                   	pop    ecx
c000b66a:	5d                   	pop    ebp
c000b66b:	57                   	push   edi
c000b66c:	56                   	push   esi
c000b66d:	e8 ce 51 ff ff       	call   c0000840 <strcat>
c000b672:	83 c4 10             	add    esp,0x10
c000b675:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b678:	3c 60                	cmp    al,0x60
c000b67a:	7e 03                	jle    c000b67f <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b67c:	83 e8 20             	sub    eax,0x20
c000b67f:	88 04 24             	mov    BYTE PTR [esp],al
c000b682:	88 03                	mov    BYTE PTR [ebx],al
c000b684:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b68b:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b691:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b695:	bf 03 00 00 00       	mov    edi,0x3
c000b69a:	b8 03 00 00 00       	mov    eax,0x3
c000b69f:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b6a3:	89 ea                	mov    edx,ebp
c000b6a5:	85 ed                	test   ebp,ebp
c000b6a7:	0f 84 97 00 00 00    	je     c000b744 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b6ad:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b6b0:	83 fd 2f             	cmp    ebp,0x2f
c000b6b3:	74 05                	je     c000b6ba <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b6b5:	83 fd 5c             	cmp    ebp,0x5c
c000b6b8:	75 12                	jne    c000b6cc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b6ba:	89 c5                	mov    ebp,eax
c000b6bc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6c1:	74 09                	je     c000b6cc <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b6c3:	40                   	inc    eax
c000b6c4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b6c8:	89 cf                	mov    edi,ecx
c000b6ca:	eb d3                	jmp    c000b69f <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b6cc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b6d1:	0f be ea             	movsx  ebp,dl
c000b6d4:	75 5e                	jne    c000b734 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b6d6:	83 fd 2e             	cmp    ebp,0x2e
c000b6d9:	75 59                	jne    c000b734 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b6db:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b6df:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b6e4:	74 18                	je     c000b6fe <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b6e6:	83 fd 2e             	cmp    ebp,0x2e
c000b6e9:	74 53                	je     c000b73e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b6eb:	89 f9                	mov    ecx,edi
c000b6ed:	41                   	inc    ecx
c000b6ee:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b6f2:	83 fa 2f             	cmp    edx,0x2f
c000b6f5:	74 f6                	je     c000b6ed <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b6f7:	83 fa 5c             	cmp    edx,0x5c
c000b6fa:	74 f1                	je     c000b6ed <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b6fc:	eb ca                	jmp    c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6fe:	83 fd 2e             	cmp    ebp,0x2e
c000b701:	74 3b                	je     c000b73e <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b703:	83 f8 03             	cmp    eax,0x3
c000b706:	74 c0                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b708:	41                   	inc    ecx
c000b709:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b70d:	83 fa 2f             	cmp    edx,0x2f
c000b710:	74 f6                	je     c000b708 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b712:	83 fa 5c             	cmp    edx,0x5c
c000b715:	74 f1                	je     c000b708 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b717:	48                   	dec    eax
c000b718:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b71c:	75 06                	jne    c000b724 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b71e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b722:	eb f3                	jmp    c000b717 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b724:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b728:	74 07                	je     c000b731 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b72a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b72e:	48                   	dec    eax
c000b72f:	eb f3                	jmp    c000b724 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b731:	40                   	inc    eax
c000b732:	eb 94                	jmp    c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b734:	83 fd 2f             	cmp    ebp,0x2f
c000b737:	74 8f                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b739:	83 fd 5c             	cmp    ebp,0x5c
c000b73c:	74 8a                	je     c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b73e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b741:	40                   	inc    eax
c000b742:	eb 84                	jmp    c000b6c8 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b744:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b748:	83 ec 0c             	sub    esp,0xc
c000b74b:	53                   	push   ebx
c000b74c:	e8 1f 4e ff ff       	call   c0000570 <strlen>
c000b751:	83 c4 10             	add    esp,0x10
c000b754:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b759:	75 26                	jne    c000b781 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b75b:	83 ec 0c             	sub    esp,0xc
c000b75e:	53                   	push   ebx
c000b75f:	e8 0c 4e ff ff       	call   c0000570 <strlen>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b76c:	74 26                	je     c000b794 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b76e:	83 ec 0c             	sub    esp,0xc
c000b771:	53                   	push   ebx
c000b772:	e8 f9 4d ff ff       	call   c0000570 <strlen>
c000b777:	83 c4 10             	add    esp,0x10
c000b77a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b77f:	eb c7                	jmp    c000b748 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b781:	83 ec 0c             	sub    esp,0xc
c000b784:	53                   	push   ebx
c000b785:	e8 e6 4d ff ff       	call   c0000570 <strlen>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b792:	74 c7                	je     c000b75b <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b794:	50                   	push   eax
c000b795:	50                   	push   eax
c000b796:	53                   	push   ebx
c000b797:	56                   	push   esi
c000b798:	e8 a3 4e ff ff       	call   c0000640 <strcpy>
c000b79d:	5a                   	pop    edx
c000b79e:	59                   	pop    ecx
c000b79f:	53                   	push   ebx
c000b7a0:	56                   	push   esi
c000b7a1:	e8 a5 f7 ff ff       	call   c000af4b <KeDereferenceSymlink(char const*, char*)>
c000b7a6:	83 c4 10             	add    esp,0x10
c000b7a9:	48                   	dec    eax
c000b7aa:	74 e8                	je     c000b794 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b7ac:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b7b2:	5b                   	pop    ebx
c000b7b3:	5e                   	pop    esi
c000b7b4:	5f                   	pop    edi
c000b7b5:	5d                   	pop    ebp
c000b7b6:	c3                   	ret    
c000b7b7:	90                   	nop

c000b7b8 <File::File(char const*, Process*)>:
c000b7b8:	83 ec 0c             	sub    esp,0xc
c000b7bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7bf:	83 ec 08             	sub    esp,0x8
c000b7c2:	6a 00                	push   0x0
c000b7c4:	50                   	push   eax
c000b7c5:	e8 f4 d9 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b7ca:	83 c4 10             	add    esp,0x10
c000b7cd:	ba e4 13 02 c0       	mov    edx,0xc00213e4
c000b7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7d6:	89 10                	mov    DWORD PTR [eax],edx
c000b7d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b7dc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b7e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7e6:	83 c0 0d             	add    eax,0xd
c000b7e9:	83 ec 04             	sub    esp,0x4
c000b7ec:	52                   	push   edx
c000b7ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f1:	50                   	push   eax
c000b7f2:	e8 f3 fd ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000b7f7:	83 c4 10             	add    esp,0x10
c000b7fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7fe:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b801:	83 e8 41             	sub    eax,0x41
c000b804:	88 c2                	mov    dl,al
c000b806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b80a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b814:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b818:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b81c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b822:	0f b6 c0             	movzx  eax,al
c000b825:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b82c:	85 c0                	test   eax,eax
c000b82e:	74 3e                	je     c000b86e <File::File(char const*, Process*)+0xb6>
c000b830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b834:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b83a:	0f b6 c0             	movzx  eax,al
c000b83d:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b844:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b84a:	85 c0                	test   eax,eax
c000b84c:	75 20                	jne    c000b86e <File::File(char const*, Process*)+0xb6>
c000b84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b852:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b858:	0f b6 c0             	movzx  eax,al
c000b85b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b862:	83 ec 0c             	sub    esp,0xc
c000b865:	50                   	push   eax
c000b866:	e8 77 21 00 00       	call   c000d9e2 <LogicalDisk::mount()>
c000b86b:	83 c4 10             	add    esp,0x10
c000b86e:	90                   	nop
c000b86f:	83 c4 0c             	add    esp,0xc
c000b872:	c3                   	ret    
c000b873:	90                   	nop

c000b874 <File::open(FileOpenMode)>:
c000b874:	53                   	push   ebx
c000b875:	b8 0b 00 00 00       	mov    eax,0xb
c000b87a:	83 ec 08             	sub    esp,0x8
c000b87d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b881:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b888:	83 fa 19             	cmp    edx,0x19
c000b88b:	77 40                	ja     c000b8cd <File::open(FileOpenMode)+0x59>
c000b88d:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b894:	85 d2                	test   edx,edx
c000b896:	74 35                	je     c000b8cd <File::open(FileOpenMode)+0x59>
c000b898:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b89e:	85 d2                	test   edx,edx
c000b8a0:	74 2b                	je     c000b8cd <File::open(FileOpenMode)+0x59>
c000b8a2:	b8 06 00 00 00       	mov    eax,0x6
c000b8a7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b8ab:	75 20                	jne    c000b8cd <File::open(FileOpenMode)+0x59>
c000b8ad:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8af:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b8b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b9:	51                   	push   ecx
c000b8ba:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b8bd:	51                   	push   ecx
c000b8be:	52                   	push   edx
c000b8bf:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	85 c0                	test   eax,eax
c000b8c7:	75 04                	jne    c000b8cd <File::open(FileOpenMode)+0x59>
c000b8c9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b8cd:	83 c4 08             	add    esp,0x8
c000b8d0:	5b                   	pop    ebx
c000b8d1:	c3                   	ret    

c000b8d2 <File::close()>:
c000b8d2:	53                   	push   ebx
c000b8d3:	b8 0b 00 00 00       	mov    eax,0xb
c000b8d8:	83 ec 08             	sub    esp,0x8
c000b8db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b8df:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b8e6:	83 f9 19             	cmp    ecx,0x19
c000b8e9:	77 41                	ja     c000b92c <File::close()+0x5a>
c000b8eb:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b8f2:	85 db                	test   ebx,ebx
c000b8f4:	74 36                	je     c000b92c <File::close()+0x5a>
c000b8f6:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b8fd:	74 2d                	je     c000b92c <File::close()+0x5a>
c000b8ff:	b8 05 00 00 00       	mov    eax,0x5
c000b904:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b908:	74 22                	je     c000b92c <File::close()+0x5a>
c000b90a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b90e:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b915:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b91b:	53                   	push   ebx
c000b91c:	53                   	push   ebx
c000b91d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b91f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b925:	50                   	push   eax
c000b926:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b929:	83 c4 10             	add    esp,0x10
c000b92c:	83 c4 08             	add    esp,0x8
c000b92f:	5b                   	pop    ebx
c000b930:	c3                   	ret    
c000b931:	90                   	nop

c000b932 <File::seek(unsigned long long)>:
c000b932:	56                   	push   esi
c000b933:	53                   	push   ebx
c000b934:	b8 0b 00 00 00       	mov    eax,0xb
c000b939:	51                   	push   ecx
c000b93a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b93e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b942:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b949:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b94d:	83 fa 19             	cmp    edx,0x19
c000b950:	77 31                	ja     c000b983 <File::seek(unsigned long long)+0x51>
c000b952:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b959:	85 d2                	test   edx,edx
c000b95b:	74 26                	je     c000b983 <File::seek(unsigned long long)+0x51>
c000b95d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b963:	85 d2                	test   edx,edx
c000b965:	74 1c                	je     c000b983 <File::seek(unsigned long long)+0x51>
c000b967:	b8 05 00 00 00       	mov    eax,0x5
c000b96c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b970:	74 11                	je     c000b983 <File::seek(unsigned long long)+0x51>
c000b972:	8b 02                	mov    eax,DWORD PTR [edx]
c000b974:	53                   	push   ebx
c000b975:	51                   	push   ecx
c000b976:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b97c:	52                   	push   edx
c000b97d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b980:	83 c4 10             	add    esp,0x10
c000b983:	5a                   	pop    edx
c000b984:	5b                   	pop    ebx
c000b985:	5e                   	pop    esi
c000b986:	c3                   	ret    
c000b987:	90                   	nop

c000b988 <File::truncate(unsigned long long)>:
c000b988:	56                   	push   esi
c000b989:	53                   	push   ebx
c000b98a:	b8 0b 00 00 00       	mov    eax,0xb
c000b98f:	51                   	push   ecx
c000b990:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b994:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b998:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b99f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b9a3:	83 fa 19             	cmp    edx,0x19
c000b9a6:	77 31                	ja     c000b9d9 <File::truncate(unsigned long long)+0x51>
c000b9a8:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9af:	85 d2                	test   edx,edx
c000b9b1:	74 26                	je     c000b9d9 <File::truncate(unsigned long long)+0x51>
c000b9b3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b9b9:	85 d2                	test   edx,edx
c000b9bb:	74 1c                	je     c000b9d9 <File::truncate(unsigned long long)+0x51>
c000b9bd:	b8 05 00 00 00       	mov    eax,0x5
c000b9c2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b9c6:	74 11                	je     c000b9d9 <File::truncate(unsigned long long)+0x51>
c000b9c8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9ca:	53                   	push   ebx
c000b9cb:	51                   	push   ecx
c000b9cc:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b9d2:	52                   	push   edx
c000b9d3:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b9d6:	83 c4 10             	add    esp,0x10
c000b9d9:	5a                   	pop    edx
c000b9da:	5b                   	pop    ebx
c000b9db:	5e                   	pop    esi
c000b9dc:	c3                   	ret    
c000b9dd:	90                   	nop

c000b9de <File::tell(unsigned long long*)>:
c000b9de:	83 ec 0c             	sub    esp,0xc
c000b9e1:	b8 0b 00 00 00       	mov    eax,0xb
c000b9e6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b9ea:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b9f1:	83 fa 19             	cmp    edx,0x19
c000b9f4:	77 34                	ja     c000ba2a <File::tell(unsigned long long*)+0x4c>
c000b9f6:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b9fd:	85 d2                	test   edx,edx
c000b9ff:	74 29                	je     c000ba2a <File::tell(unsigned long long*)+0x4c>
c000ba01:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000ba07:	85 d2                	test   edx,edx
c000ba09:	74 1f                	je     c000ba2a <File::tell(unsigned long long*)+0x4c>
c000ba0b:	b8 05 00 00 00       	mov    eax,0x5
c000ba10:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ba14:	74 14                	je     c000ba2a <File::tell(unsigned long long*)+0x4c>
c000ba16:	50                   	push   eax
c000ba17:	8b 02                	mov    eax,DWORD PTR [edx]
c000ba19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba1d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ba23:	52                   	push   edx
c000ba24:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ba27:	83 c4 10             	add    esp,0x10
c000ba2a:	83 c4 0c             	add    esp,0xc
c000ba2d:	c3                   	ret    

c000ba2e <File::rewind()>:
c000ba2e:	83 ec 10             	sub    esp,0x10
c000ba31:	6a 00                	push   0x0
c000ba33:	6a 00                	push   0x0
c000ba35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba39:	e8 f4 fe ff ff       	call   c000b932 <File::seek(unsigned long long)>
c000ba3e:	83 c4 1c             	add    esp,0x1c
c000ba41:	c3                   	ret    

c000ba42 <File::unlink()>:
c000ba42:	83 ec 0c             	sub    esp,0xc
c000ba45:	b8 0b 00 00 00       	mov    eax,0xb
c000ba4a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba4e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba55:	83 f9 19             	cmp    ecx,0x19
c000ba58:	77 2f                	ja     c000ba89 <File::unlink()+0x47>
c000ba5a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba61:	85 c9                	test   ecx,ecx
c000ba63:	74 24                	je     c000ba89 <File::unlink()+0x47>
c000ba65:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba6b:	85 c9                	test   ecx,ecx
c000ba6d:	74 1a                	je     c000ba89 <File::unlink()+0x47>
c000ba6f:	b8 06 00 00 00       	mov    eax,0x6
c000ba74:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba78:	75 0f                	jne    c000ba89 <File::unlink()+0x47>
c000ba7a:	83 c2 0d             	add    edx,0xd
c000ba7d:	50                   	push   eax
c000ba7e:	50                   	push   eax
c000ba7f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba81:	52                   	push   edx
c000ba82:	51                   	push   ecx
c000ba83:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000ba86:	83 c4 10             	add    esp,0x10
c000ba89:	83 c4 0c             	add    esp,0xc
c000ba8c:	c3                   	ret    
c000ba8d:	90                   	nop

c000ba8e <File::rename(char const*)>:
c000ba8e:	83 ec 0c             	sub    esp,0xc
c000ba91:	b8 0b 00 00 00       	mov    eax,0xb
c000ba96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baa1:	83 f9 19             	cmp    ecx,0x19
c000baa4:	77 32                	ja     c000bad8 <File::rename(char const*)+0x4a>
c000baa6:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000baad:	85 c9                	test   ecx,ecx
c000baaf:	74 27                	je     c000bad8 <File::rename(char const*)+0x4a>
c000bab1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bab7:	85 c9                	test   ecx,ecx
c000bab9:	74 1d                	je     c000bad8 <File::rename(char const*)+0x4a>
c000babb:	b8 06 00 00 00       	mov    eax,0x6
c000bac0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bac4:	75 12                	jne    c000bad8 <File::rename(char const*)+0x4a>
c000bac6:	83 c2 0d             	add    edx,0xd
c000bac9:	50                   	push   eax
c000baca:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bacc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bad0:	52                   	push   edx
c000bad1:	51                   	push   ecx
c000bad2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bad5:	83 c4 10             	add    esp,0x10
c000bad8:	83 c4 0c             	add    esp,0xc
c000badb:	c3                   	ret    

c000badc <File::chfatattr(unsigned char, unsigned char)>:
c000badc:	57                   	push   edi
c000badd:	b8 0b 00 00 00       	mov    eax,0xb
c000bae2:	56                   	push   esi
c000bae3:	53                   	push   ebx
c000bae4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000baec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baf3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000baf7:	83 f9 19             	cmp    ecx,0x19
c000bafa:	77 37                	ja     c000bb33 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bafc:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb03:	85 c9                	test   ecx,ecx
c000bb05:	74 2c                	je     c000bb33 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb07:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb0d:	85 c9                	test   ecx,ecx
c000bb0f:	74 22                	je     c000bb33 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb11:	b8 06 00 00 00       	mov    eax,0x6
c000bb16:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb1a:	75 17                	jne    c000bb33 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bb1c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000bb1e:	89 f0                	mov    eax,esi
c000bb20:	83 c2 0d             	add    edx,0xd
c000bb23:	0f b6 f0             	movzx  esi,al
c000bb26:	0f b6 db             	movzx  ebx,bl
c000bb29:	56                   	push   esi
c000bb2a:	53                   	push   ebx
c000bb2b:	52                   	push   edx
c000bb2c:	51                   	push   ecx
c000bb2d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000bb30:	83 c4 10             	add    esp,0x10
c000bb33:	5b                   	pop    ebx
c000bb34:	5e                   	pop    esi
c000bb35:	5f                   	pop    edi
c000bb36:	c3                   	ret    
c000bb37:	90                   	nop

c000bb38 <File::exists()>:
c000bb38:	83 ec 0c             	sub    esp,0xc
c000bb3b:	31 c0                	xor    eax,eax
c000bb3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb41:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb48:	83 f9 19             	cmp    ecx,0x19
c000bb4b:	77 24                	ja     c000bb71 <File::exists()+0x39>
c000bb4d:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb54:	85 c9                	test   ecx,ecx
c000bb56:	74 19                	je     c000bb71 <File::exists()+0x39>
c000bb58:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb5e:	85 c9                	test   ecx,ecx
c000bb60:	74 0f                	je     c000bb71 <File::exists()+0x39>
c000bb62:	83 c2 0d             	add    edx,0xd
c000bb65:	50                   	push   eax
c000bb66:	50                   	push   eax
c000bb67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb69:	52                   	push   edx
c000bb6a:	51                   	push   ecx
c000bb6b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	83 c4 0c             	add    esp,0xc
c000bb74:	c3                   	ret    
c000bb75:	90                   	nop

c000bb76 <File::stat(unsigned long long*, bool*)>:
c000bb76:	56                   	push   esi
c000bb77:	53                   	push   ebx
c000bb78:	50                   	push   eax
c000bb79:	b8 0b 00 00 00       	mov    eax,0xb
c000bb7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb82:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb86:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb8d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb91:	83 f9 19             	cmp    ecx,0x19
c000bb94:	77 3d                	ja     c000bbd3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bb96:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb9d:	85 c9                	test   ecx,ecx
c000bb9f:	74 32                	je     c000bbd3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bba1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bba7:	85 c9                	test   ecx,ecx
c000bba9:	74 28                	je     c000bbd3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bbab:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bbad:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bbb1:	74 13                	je     c000bbc6 <File::stat(unsigned long long*, bool*)+0x50>
c000bbb3:	83 ec 04             	sub    esp,0x4
c000bbb6:	56                   	push   esi
c000bbb7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bbbd:	51                   	push   ecx
c000bbbe:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bbc1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bbc4:	eb 0a                	jmp    c000bbd0 <File::stat(unsigned long long*, bool*)+0x5a>
c000bbc6:	53                   	push   ebx
c000bbc7:	83 c2 0d             	add    edx,0xd
c000bbca:	56                   	push   esi
c000bbcb:	52                   	push   edx
c000bbcc:	51                   	push   ecx
c000bbcd:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bbd0:	83 c4 10             	add    esp,0x10
c000bbd3:	5a                   	pop    edx
c000bbd4:	5b                   	pop    ebx
c000bbd5:	5e                   	pop    esi
c000bbd6:	c3                   	ret    

c000bbd7 <Fs::setcwd(Process*, char*)>:
c000bbd7:	55                   	push   ebp
c000bbd8:	57                   	push   edi
c000bbd9:	56                   	push   esi
c000bbda:	53                   	push   ebx
c000bbdb:	81 ec 20 02 00 00    	sub    esp,0x220
c000bbe1:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bbe8:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bbee:	57                   	push   edi
c000bbef:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bbf6:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bbfa:	56                   	push   esi
c000bbfb:	e8 ea f9 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000bc00:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc03:	e8 68 49 ff ff       	call   c0000570 <strlen>
c000bc08:	83 c4 10             	add    esp,0x10
c000bc0b:	83 f8 02             	cmp    eax,0x2
c000bc0e:	77 15                	ja     c000bc25 <Fs::setcwd(Process*, char*)+0x4e>
c000bc10:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bc15:	83 eb 41             	sub    ebx,0x41
c000bc18:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bc1f:	85 c0                	test   eax,eax
c000bc21:	75 1c                	jne    c000bc3f <Fs::setcwd(Process*, char*)+0x68>
c000bc23:	eb 2f                	jmp    c000bc54 <Fs::setcwd(Process*, char*)+0x7d>
c000bc25:	83 ec 0c             	sub    esp,0xc
c000bc28:	56                   	push   esi
c000bc29:	e8 42 49 ff ff       	call   c0000570 <strlen>
c000bc2e:	83 c4 10             	add    esp,0x10
c000bc31:	83 f8 03             	cmp    eax,0x3
c000bc34:	75 57                	jne    c000bc8d <Fs::setcwd(Process*, char*)+0xb6>
c000bc36:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bc3b:	75 50                	jne    c000bc8d <Fs::setcwd(Process*, char*)+0xb6>
c000bc3d:	eb d1                	jmp    c000bc10 <Fs::setcwd(Process*, char*)+0x39>
c000bc3f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bc46:	75 0c                	jne    c000bc54 <Fs::setcwd(Process*, char*)+0x7d>
c000bc48:	83 ec 0c             	sub    esp,0xc
c000bc4b:	50                   	push   eax
c000bc4c:	e8 91 1d 00 00       	call   c000d9e2 <LogicalDisk::mount()>
c000bc51:	83 c4 10             	add    esp,0x10
c000bc54:	b8 03 00 00 00       	mov    eax,0x3
c000bc59:	83 fb 19             	cmp    ebx,0x19
c000bc5c:	0f 87 c6 00 00 00    	ja     c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bc62:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bc69:	b8 05 00 00 00       	mov    eax,0x5
c000bc6e:	85 d2                	test   edx,edx
c000bc70:	0f 84 b2 00 00 00    	je     c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bc76:	b8 06 00 00 00       	mov    eax,0x6
c000bc7b:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bc82:	0f 85 92 00 00 00    	jne    c000bd1a <Fs::setcwd(Process*, char*)+0x143>
c000bc88:	e9 9b 00 00 00       	jmp    c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bc8d:	83 ec 0c             	sub    esp,0xc
c000bc90:	68 14 01 00 00       	push   0x114
c000bc95:	e8 1c be ff ff       	call   c0007ab6 <malloc>
c000bc9a:	83 c4 0c             	add    esp,0xc
c000bc9d:	89 c3                	mov    ebx,eax
c000bc9f:	55                   	push   ebp
c000bca0:	56                   	push   esi
c000bca1:	50                   	push   eax
c000bca2:	e8 11 fb ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c000bca7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bcac:	83 c4 0c             	add    esp,0xc
c000bcaf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bcb3:	50                   	push   eax
c000bcb4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bcb8:	50                   	push   eax
c000bcb9:	53                   	push   ebx
c000bcba:	e8 b7 fe ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c000bcbf:	83 c4 10             	add    esp,0x10
c000bcc2:	83 f8 02             	cmp    eax,0x2
c000bcc5:	74 27                	je     c000bcee <Fs::setcwd(Process*, char*)+0x117>
c000bcc7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bccc:	75 1c                	jne    c000bcea <Fs::setcwd(Process*, char*)+0x113>
c000bcce:	b8 02 00 00 00       	mov    eax,0x2
c000bcd3:	85 db                	test   ebx,ebx
c000bcd5:	74 51                	je     c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bcd7:	83 ec 0c             	sub    esp,0xc
c000bcda:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcdc:	53                   	push   ebx
c000bcdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bce0:	83 c4 10             	add    esp,0x10
c000bce3:	b8 02 00 00 00       	mov    eax,0x2
c000bce8:	eb 3e                	jmp    c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bcea:	85 c0                	test   eax,eax
c000bcec:	74 1c                	je     c000bd0a <Fs::setcwd(Process*, char*)+0x133>
c000bcee:	b8 01 00 00 00       	mov    eax,0x1
c000bcf3:	85 db                	test   ebx,ebx
c000bcf5:	74 31                	je     c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bcf7:	83 ec 0c             	sub    esp,0xc
c000bcfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bcfc:	53                   	push   ebx
c000bcfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd00:	83 c4 10             	add    esp,0x10
c000bd03:	b8 01 00 00 00       	mov    eax,0x1
c000bd08:	eb 1e                	jmp    c000bd28 <Fs::setcwd(Process*, char*)+0x151>
c000bd0a:	85 db                	test   ebx,ebx
c000bd0c:	74 0c                	je     c000bd1a <Fs::setcwd(Process*, char*)+0x143>
c000bd0e:	83 ec 0c             	sub    esp,0xc
c000bd11:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd13:	53                   	push   ebx
c000bd14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bd17:	83 c4 10             	add    esp,0x10
c000bd1a:	50                   	push   eax
c000bd1b:	50                   	push   eax
c000bd1c:	56                   	push   esi
c000bd1d:	57                   	push   edi
c000bd1e:	e8 1d 49 ff ff       	call   c0000640 <strcpy>
c000bd23:	83 c4 10             	add    esp,0x10
c000bd26:	31 c0                	xor    eax,eax
c000bd28:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bd2e:	5b                   	pop    ebx
c000bd2f:	5e                   	pop    esi
c000bd30:	5f                   	pop    edi
c000bd31:	5d                   	pop    ebp
c000bd32:	c3                   	ret    
c000bd33:	90                   	nop

c000bd34 <Directory::Directory(char const*, Process*)>:
c000bd34:	83 ec 0c             	sub    esp,0xc
c000bd37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3b:	83 ec 08             	sub    esp,0x8
c000bd3e:	6a 00                	push   0x0
c000bd40:	50                   	push   eax
c000bd41:	e8 78 d4 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bd46:	83 c4 10             	add    esp,0x10
c000bd49:	ba 00 14 02 c0       	mov    edx,0xc0021400
c000bd4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd52:	89 10                	mov    DWORD PTR [eax],edx
c000bd54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd58:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bd5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd62:	83 c0 0d             	add    eax,0xd
c000bd65:	83 ec 04             	sub    esp,0x4
c000bd68:	52                   	push   edx
c000bd69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd6d:	50                   	push   eax
c000bd6e:	e8 77 f8 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>
c000bd73:	83 c4 10             	add    esp,0x10
c000bd76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd7a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bd7d:	83 e8 41             	sub    eax,0x41
c000bd80:	88 c2                	mov    dl,al
c000bd82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd86:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd90:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd98:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd9e:	0f b6 c0             	movzx  eax,al
c000bda1:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bda8:	85 c0                	test   eax,eax
c000bdaa:	74 3e                	je     c000bdea <Directory::Directory(char const*, Process*)+0xb6>
c000bdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdb0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdb6:	0f b6 c0             	movzx  eax,al
c000bdb9:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdc0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdc6:	85 c0                	test   eax,eax
c000bdc8:	75 20                	jne    c000bdea <Directory::Directory(char const*, Process*)+0xb6>
c000bdca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdce:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bdd4:	0f b6 c0             	movzx  eax,al
c000bdd7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bdde:	83 ec 0c             	sub    esp,0xc
c000bde1:	50                   	push   eax
c000bde2:	e8 fb 1b 00 00       	call   c000d9e2 <LogicalDisk::mount()>
c000bde7:	83 c4 10             	add    esp,0x10
c000bdea:	90                   	nop
c000bdeb:	83 c4 0c             	add    esp,0xc
c000bdee:	c3                   	ret    
c000bdef:	90                   	nop

c000bdf0 <Directory::open()>:
c000bdf0:	53                   	push   ebx
c000bdf1:	b8 0b 00 00 00       	mov    eax,0xb
c000bdf6:	83 ec 08             	sub    esp,0x8
c000bdf9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bdfd:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000be04:	83 fa 19             	cmp    edx,0x19
c000be07:	77 3d                	ja     c000be46 <Directory::open()+0x56>
c000be09:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000be10:	85 d2                	test   edx,edx
c000be12:	74 32                	je     c000be46 <Directory::open()+0x56>
c000be14:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000be1a:	85 d2                	test   edx,edx
c000be1c:	74 28                	je     c000be46 <Directory::open()+0x56>
c000be1e:	b8 06 00 00 00       	mov    eax,0x6
c000be23:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000be27:	75 1d                	jne    c000be46 <Directory::open()+0x56>
c000be29:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000be2f:	50                   	push   eax
c000be30:	8b 02                	mov    eax,DWORD PTR [edx]
c000be32:	51                   	push   ecx
c000be33:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000be36:	51                   	push   ecx
c000be37:	52                   	push   edx
c000be38:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000be3b:	83 c4 10             	add    esp,0x10
c000be3e:	85 c0                	test   eax,eax
c000be40:	75 04                	jne    c000be46 <Directory::open()+0x56>
c000be42:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000be46:	83 c4 08             	add    esp,0x8
c000be49:	5b                   	pop    ebx
c000be4a:	c3                   	ret    
c000be4b:	90                   	nop

c000be4c <Directory::close()>:
c000be4c:	53                   	push   ebx
c000be4d:	b8 0b 00 00 00       	mov    eax,0xb
c000be52:	83 ec 08             	sub    esp,0x8
c000be55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be59:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be60:	83 f9 19             	cmp    ecx,0x19
c000be63:	77 41                	ja     c000bea6 <Directory::close()+0x5a>
c000be65:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000be6c:	85 db                	test   ebx,ebx
c000be6e:	74 36                	je     c000bea6 <Directory::close()+0x5a>
c000be70:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000be77:	74 2d                	je     c000bea6 <Directory::close()+0x5a>
c000be79:	b8 05 00 00 00       	mov    eax,0x5
c000be7e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be82:	74 22                	je     c000bea6 <Directory::close()+0x5a>
c000be84:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000be88:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000be8f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be95:	53                   	push   ebx
c000be96:	53                   	push   ebx
c000be97:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be99:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be9f:	50                   	push   eax
c000bea0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	83 c4 08             	add    esp,0x8
c000bea9:	5b                   	pop    ebx
c000beaa:	c3                   	ret    
c000beab:	90                   	nop

c000beac <Directory::unlink()>:
c000beac:	83 ec 0c             	sub    esp,0xc
c000beaf:	b8 0b 00 00 00       	mov    eax,0xb
c000beb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000beb8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bebf:	83 f9 19             	cmp    ecx,0x19
c000bec2:	77 2f                	ja     c000bef3 <Directory::unlink()+0x47>
c000bec4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000becb:	85 c9                	test   ecx,ecx
c000becd:	74 24                	je     c000bef3 <Directory::unlink()+0x47>
c000becf:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bed5:	85 c9                	test   ecx,ecx
c000bed7:	74 1a                	je     c000bef3 <Directory::unlink()+0x47>
c000bed9:	b8 06 00 00 00       	mov    eax,0x6
c000bede:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bee2:	75 0f                	jne    c000bef3 <Directory::unlink()+0x47>
c000bee4:	83 c2 0d             	add    edx,0xd
c000bee7:	50                   	push   eax
c000bee8:	50                   	push   eax
c000bee9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beeb:	52                   	push   edx
c000beec:	51                   	push   ecx
c000beed:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bef0:	83 c4 10             	add    esp,0x10
c000bef3:	83 c4 0c             	add    esp,0xc
c000bef6:	c3                   	ret    
c000bef7:	90                   	nop

c000bef8 <Directory::rename(char const*)>:
c000bef8:	83 ec 0c             	sub    esp,0xc
c000befb:	b8 0b 00 00 00       	mov    eax,0xb
c000bf00:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf04:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf0b:	83 f9 19             	cmp    ecx,0x19
c000bf0e:	77 32                	ja     c000bf42 <Directory::rename(char const*)+0x4a>
c000bf10:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf17:	85 c9                	test   ecx,ecx
c000bf19:	74 27                	je     c000bf42 <Directory::rename(char const*)+0x4a>
c000bf1b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf21:	85 c9                	test   ecx,ecx
c000bf23:	74 1d                	je     c000bf42 <Directory::rename(char const*)+0x4a>
c000bf25:	b8 06 00 00 00       	mov    eax,0x6
c000bf2a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf2e:	75 12                	jne    c000bf42 <Directory::rename(char const*)+0x4a>
c000bf30:	83 c2 0d             	add    edx,0xd
c000bf33:	50                   	push   eax
c000bf34:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf36:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf3a:	52                   	push   edx
c000bf3b:	51                   	push   ecx
c000bf3c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	83 c4 0c             	add    esp,0xc
c000bf45:	c3                   	ret    

c000bf46 <Directory::exists()>:
c000bf46:	83 ec 0c             	sub    esp,0xc
c000bf49:	31 c0                	xor    eax,eax
c000bf4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf4f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf56:	83 f9 19             	cmp    ecx,0x19
c000bf59:	77 24                	ja     c000bf7f <Directory::exists()+0x39>
c000bf5b:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf62:	85 c9                	test   ecx,ecx
c000bf64:	74 19                	je     c000bf7f <Directory::exists()+0x39>
c000bf66:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf6c:	85 c9                	test   ecx,ecx
c000bf6e:	74 0f                	je     c000bf7f <Directory::exists()+0x39>
c000bf70:	83 c2 0d             	add    edx,0xd
c000bf73:	50                   	push   eax
c000bf74:	50                   	push   eax
c000bf75:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf77:	52                   	push   edx
c000bf78:	51                   	push   ecx
c000bf79:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bf7c:	83 c4 10             	add    esp,0x10
c000bf7f:	83 c4 0c             	add    esp,0xc
c000bf82:	c3                   	ret    
c000bf83:	90                   	nop

c000bf84 <Directory::read(dirent*)>:
c000bf84:	83 ec 1c             	sub    esp,0x1c
c000bf87:	b8 0b 00 00 00       	mov    eax,0xb
c000bf8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf90:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf97:	83 f9 19             	cmp    ecx,0x19
c000bf9a:	77 30                	ja     c000bfcc <Directory::read(dirent*)+0x48>
c000bf9c:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfa3:	85 c9                	test   ecx,ecx
c000bfa5:	74 25                	je     c000bfcc <Directory::read(dirent*)+0x48>
c000bfa7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bfae:	74 1c                	je     c000bfcc <Directory::read(dirent*)+0x48>
c000bfb0:	83 ec 0c             	sub    esp,0xc
c000bfb3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bfb5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bfb9:	51                   	push   ecx
c000bfba:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfbe:	6a 00                	push   0x0
c000bfc0:	68 10 01 00 00       	push   0x110
c000bfc5:	52                   	push   edx
c000bfc6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bfc9:	83 c4 20             	add    esp,0x20
c000bfcc:	83 c4 1c             	add    esp,0x1c
c000bfcf:	c3                   	ret    

c000bfd0 <Directory::create()>:
c000bfd0:	83 ec 0c             	sub    esp,0xc
c000bfd3:	b8 0b 00 00 00       	mov    eax,0xb
c000bfd8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfdc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bfe3:	83 f9 19             	cmp    ecx,0x19
c000bfe6:	77 2f                	ja     c000c017 <Directory::create()+0x47>
c000bfe8:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bfef:	85 c9                	test   ecx,ecx
c000bff1:	74 24                	je     c000c017 <Directory::create()+0x47>
c000bff3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bff9:	85 c9                	test   ecx,ecx
c000bffb:	74 1a                	je     c000c017 <Directory::create()+0x47>
c000bffd:	b8 06 00 00 00       	mov    eax,0x6
c000c002:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c006:	75 0f                	jne    c000c017 <Directory::create()+0x47>
c000c008:	83 c2 0d             	add    edx,0xd
c000c00b:	50                   	push   eax
c000c00c:	50                   	push   eax
c000c00d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c00f:	52                   	push   edx
c000c010:	51                   	push   ecx
c000c011:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c014:	83 c4 10             	add    esp,0x10
c000c017:	83 c4 0c             	add    esp,0xc
c000c01a:	c3                   	ret    
c000c01b:	90                   	nop

c000c01c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c01c:	b8 0a 00 00 00       	mov    eax,0xa
c000c021:	c3                   	ret    
c000c022:	66 90                	xchg   ax,ax

c000c024 <Bus::Bus(char const*)>:
c000c024:	83 ec 0c             	sub    esp,0xc
c000c027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c02b:	83 ec 08             	sub    esp,0x8
c000c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c032:	50                   	push   eax
c000c033:	e8 22 08 00 00       	call   c000c85a <Device::Device(char const*)>
c000c038:	83 c4 10             	add    esp,0x10
c000c03b:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c000c040:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c044:	89 10                	mov    DWORD PTR [eax],edx
c000c046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c04a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c054:	90                   	nop
c000c055:	83 c4 0c             	add    esp,0xc
c000c058:	c3                   	ret    
c000c059:	90                   	nop
c000c05a:	66 90                	xchg   ax,ax

c000c05c <Bus::~Bus()>:
c000c05c:	83 ec 0c             	sub    esp,0xc
c000c05f:	ba 1c 14 02 c0       	mov    edx,0xc002141c
c000c064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c068:	89 10                	mov    DWORD PTR [eax],edx
c000c06a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c06e:	83 ec 0c             	sub    esp,0xc
c000c071:	50                   	push   eax
c000c072:	e8 4d 05 00 00       	call   c000c5c4 <Device::~Device()>
c000c077:	83 c4 10             	add    esp,0x10
c000c07a:	90                   	nop
c000c07b:	83 c4 0c             	add    esp,0xc
c000c07e:	c3                   	ret    
c000c07f:	90                   	nop

c000c080 <Bus::~Bus()>:
c000c080:	83 ec 0c             	sub    esp,0xc
c000c083:	83 ec 0c             	sub    esp,0xc
c000c086:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08a:	e8 cd ff ff ff       	call   c000c05c <Bus::~Bus()>
c000c08f:	83 c4 10             	add    esp,0x10
c000c092:	83 ec 08             	sub    esp,0x8
c000c095:	68 58 01 00 00       	push   0x158
c000c09a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c09e:	e8 75 e7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c0a3:	83 c4 10             	add    esp,0x10
c000c0a6:	83 c4 0c             	add    esp,0xc
c000c0a9:	c3                   	ret    

c000c0aa <beepThread(void*)>:
c000c0aa:	83 ec 0c             	sub    esp,0xc
c000c0ad:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c0b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c0b6:	48                   	dec    eax
c000c0b7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c0bc:	75 01                	jne    c000c0bf <beepThread(void*)+0x15>
c000c0be:	fb                   	sti    
c000c0bf:	83 ec 0c             	sub    esp,0xc
c000c0c2:	6b c2 0a             	imul   eax,edx,0xa
c000c0c5:	50                   	push   eax
c000c0c6:	e8 15 9e 00 00       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c000c0cb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c0d2:	e8 64 bd 00 00       	call   c0017e3b <HalMakeBeep(int)>
c000c0d7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c0df:	83 c4 1c             	add    esp,0x1c
c000c0e2:	e9 dd 9c 00 00       	jmp    c0015dc4 <blockTask(TaskState)>

c000c0e7 <Krnl::beep(int, int, bool)>:
c000c0e7:	56                   	push   esi
c000c0e8:	53                   	push   ebx
c000c0e9:	83 ec 10             	sub    esp,0x10
c000c0ec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c0f0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c0f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f8:	e8 3e bd 00 00       	call   c0017e3b <HalMakeBeep(int)>
c000c0fd:	83 c4 10             	add    esp,0x10
c000c100:	89 f0                	mov    eax,esi
c000c102:	84 c0                	test   al,al
c000c104:	74 1e                	je     c000c124 <Krnl::beep(int, int, bool)+0x3d>
c000c106:	83 ec 0c             	sub    esp,0xc
c000c109:	6b db 0a             	imul   ebx,ebx,0xa
c000c10c:	53                   	push   ebx
c000c10d:	e8 ce 9d 00 00       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c000c112:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c11a:	83 c4 14             	add    esp,0x14
c000c11d:	5b                   	pop    ebx
c000c11e:	5e                   	pop    esi
c000c11f:	e9 17 bd 00 00       	jmp    c0017e3b <HalMakeBeep(int)>
c000c124:	68 e6 00 00 00       	push   0xe6
c000c129:	53                   	push   ebx
c000c12a:	68 aa c0 00 c0       	push   0xc000c0aa
c000c12f:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c135:	e8 26 98 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c000c13a:	83 c4 14             	add    esp,0x14
c000c13d:	5b                   	pop    ebx
c000c13e:	5e                   	pop    esi
c000c13f:	c3                   	ret    

c000c140 <User::loadClockSettings(int)>:
c000c140:	53                   	push   ebx
c000c141:	83 ec 14             	sub    esp,0x14
c000c144:	68 14 01 00 00       	push   0x114
c000c149:	e8 68 b9 ff ff       	call   c0007ab6 <malloc>
c000c14e:	83 c4 0c             	add    esp,0xc
c000c151:	89 c3                	mov    ebx,eax
c000c153:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c159:	68 40 14 02 c0       	push   0xc0021440
c000c15e:	50                   	push   eax
c000c15f:	e8 54 f6 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c000c164:	58                   	pop    eax
c000c165:	5a                   	pop    edx
c000c166:	6a 01                	push   0x1
c000c168:	53                   	push   ebx
c000c169:	e8 06 f7 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c000c16e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c171:	e8 5c f7 ff ff       	call   c000b8d2 <File::close()>
c000c176:	83 c4 10             	add    esp,0x10
c000c179:	85 db                	test   ebx,ebx
c000c17b:	74 0f                	je     c000c18c <User::loadClockSettings(int)+0x4c>
c000c17d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c17f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c183:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c186:	83 c4 08             	add    esp,0x8
c000c189:	5b                   	pop    ebx
c000c18a:	ff e0                	jmp    eax
c000c18c:	83 c4 08             	add    esp,0x8
c000c18f:	5b                   	pop    ebx
c000c190:	c3                   	ret    
c000c191:	90                   	nop

c000c192 <Clock::Clock(char const*)>:
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c199:	83 ec 08             	sub    esp,0x8
c000c19c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1a0:	50                   	push   eax
c000c1a1:	e8 b4 06 00 00       	call   c000c85a <Device::Device(char const*)>
c000c1a6:	83 c4 10             	add    esp,0x10
c000c1a9:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000c1ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b2:	89 10                	mov    DWORD PTR [eax],edx
c000c1b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1b8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c1c2:	90                   	nop
c000c1c3:	83 c4 0c             	add    esp,0xc
c000c1c6:	c3                   	ret    
c000c1c7:	90                   	nop

c000c1c8 <Clock::~Clock()>:
c000c1c8:	83 ec 0c             	sub    esp,0xc
c000c1cb:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000c1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1d4:	89 10                	mov    DWORD PTR [eax],edx
c000c1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1da:	83 ec 0c             	sub    esp,0xc
c000c1dd:	50                   	push   eax
c000c1de:	e8 e1 03 00 00       	call   c000c5c4 <Device::~Device()>
c000c1e3:	83 c4 10             	add    esp,0x10
c000c1e6:	90                   	nop
c000c1e7:	83 c4 0c             	add    esp,0xc
c000c1ea:	c3                   	ret    
c000c1eb:	90                   	nop

c000c1ec <Clock::~Clock()>:
c000c1ec:	83 ec 0c             	sub    esp,0xc
c000c1ef:	83 ec 0c             	sub    esp,0xc
c000c1f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1f6:	e8 cd ff ff ff       	call   c000c1c8 <Clock::~Clock()>
c000c1fb:	83 c4 10             	add    esp,0x10
c000c1fe:	83 ec 08             	sub    esp,0x8
c000c201:	68 58 01 00 00       	push   0x158
c000c206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c20a:	e8 09 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c20f:	83 c4 10             	add    esp,0x10
c000c212:	83 c4 0c             	add    esp,0xc
c000c215:	c3                   	ret    

c000c216 <Clock::timeInSecondsLocal()>:
c000c216:	53                   	push   ebx
c000c217:	83 ec 14             	sub    esp,0x14
c000c21a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c21e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c220:	50                   	push   eax
c000c221:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c224:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c22b:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c231:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c237:	89 cb                	mov    ebx,ecx
c000c239:	c1 fb 1f             	sar    ebx,0x1f
c000c23c:	01 c8                	add    eax,ecx
c000c23e:	11 da                	adc    edx,ebx
c000c240:	83 c4 10             	add    esp,0x10
c000c243:	31 c9                	xor    ecx,ecx
c000c245:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c24c:	74 05                	je     c000c253 <Clock::timeInSecondsLocal()+0x3d>
c000c24e:	b9 08 07 00 00       	mov    ecx,0x708
c000c253:	31 db                	xor    ebx,ebx
c000c255:	01 c8                	add    eax,ecx
c000c257:	11 da                	adc    edx,ebx
c000c259:	83 c4 08             	add    esp,0x8
c000c25c:	5b                   	pop    ebx
c000c25d:	c3                   	ret    

c000c25e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c25e:	57                   	push   edi
c000c25f:	56                   	push   esi
c000c260:	53                   	push   ebx
c000c261:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c265:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c269:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c26b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c26f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c272:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c279:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c27f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c285:	99                   	cdq    
c000c286:	29 c6                	sub    esi,eax
c000c288:	19 d7                	sbb    edi,edx
c000c28a:	89 f0                	mov    eax,esi
c000c28c:	89 fa                	mov    edx,edi
c000c28e:	31 f6                	xor    esi,esi
c000c290:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c297:	74 05                	je     c000c29e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c299:	be 08 07 00 00       	mov    esi,0x708
c000c29e:	31 ff                	xor    edi,edi
c000c2a0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c2a4:	29 f0                	sub    eax,esi
c000c2a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c2aa:	19 fa                	sbb    edx,edi
c000c2ac:	89 d8                	mov    eax,ebx
c000c2ae:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c2b2:	5b                   	pop    ebx
c000c2b3:	5e                   	pop    esi
c000c2b4:	5f                   	pop    edi
c000c2b5:	ff e0                	jmp    eax

c000c2b7 <datetimeToSeconds(datetime_t)>:
c000c2b7:	55                   	push   ebp
c000c2b8:	57                   	push   edi
c000c2b9:	56                   	push   esi
c000c2ba:	53                   	push   ebx
c000c2bb:	83 ec 0c             	sub    esp,0xc
c000c2be:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2c2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c2c6:	89 d6                	mov    esi,edx
c000c2c8:	0f b6 c7             	movzx  eax,bh
c000c2cb:	c1 ee 10             	shr    esi,0x10
c000c2ce:	6b e8 3c             	imul   ebp,eax,0x3c
c000c2d1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c2d7:	0f b6 ce             	movzx  ecx,dh
c000c2da:	89 df                	mov    edi,ebx
c000c2dc:	49                   	dec    ecx
c000c2dd:	c1 ef 10             	shr    edi,0x10
c000c2e0:	0f b6 db             	movzx  ebx,bl
c000c2e3:	89 f8                	mov    eax,edi
c000c2e5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c2eb:	0f b6 f8             	movzx  edi,al
c000c2ee:	0f b6 d2             	movzx  edx,dl
c000c2f1:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c2f5:	01 d8                	add    eax,ebx
c000c2f7:	0f b7 de             	movzx  ebx,si
c000c2fa:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2fd:	c1 f8 1f             	sar    eax,0x1f
c000c300:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c304:	0f b6 c1             	movzx  eax,cl
c000c307:	8b 0c 85 a0 14 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeb60]
c000c30e:	83 f8 01             	cmp    eax,0x1
c000c311:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c315:	76 27                	jbe    c000c33e <datetimeToSeconds(datetime_t)+0x87>
c000c317:	83 e6 03             	and    esi,0x3
c000c31a:	75 22                	jne    c000c33e <datetimeToSeconds(datetime_t)+0x87>
c000c31c:	31 d2                	xor    edx,edx
c000c31e:	be 64 00 00 00       	mov    esi,0x64
c000c323:	89 d8                	mov    eax,ebx
c000c325:	f7 f6                	div    esi
c000c327:	85 d2                	test   edx,edx
c000c329:	75 12                	jne    c000c33d <datetimeToSeconds(datetime_t)+0x86>
c000c32b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c331:	be 90 01 00 00       	mov    esi,0x190
c000c336:	99                   	cdq    
c000c337:	f7 fe                	idiv   esi
c000c339:	85 d2                	test   edx,edx
c000c33b:	75 01                	jne    c000c33e <datetimeToSeconds(datetime_t)+0x87>
c000c33d:	41                   	inc    ecx
c000c33e:	83 fb 46             	cmp    ebx,0x46
c000c341:	76 48                	jbe    c000c38b <datetimeToSeconds(datetime_t)+0xd4>
c000c343:	be 46 00 00 00       	mov    esi,0x46
c000c348:	bf 64 00 00 00       	mov    edi,0x64
c000c34d:	bd 90 01 00 00       	mov    ebp,0x190
c000c352:	b8 6d 01 00 00       	mov    eax,0x16d
c000c357:	f7 c6 03 00 00 00    	test   esi,0x3
c000c35d:	75 23                	jne    c000c382 <datetimeToSeconds(datetime_t)+0xcb>
c000c35f:	89 f0                	mov    eax,esi
c000c361:	99                   	cdq    
c000c362:	f7 ff                	idiv   edi
c000c364:	b8 6e 01 00 00       	mov    eax,0x16e
c000c369:	85 d2                	test   edx,edx
c000c36b:	75 15                	jne    c000c382 <datetimeToSeconds(datetime_t)+0xcb>
c000c36d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c373:	99                   	cdq    
c000c374:	f7 fd                	idiv   ebp
c000c376:	83 fa 01             	cmp    edx,0x1
c000c379:	19 c0                	sbb    eax,eax
c000c37b:	f7 d0                	not    eax
c000c37d:	05 6e 01 00 00       	add    eax,0x16e
c000c382:	01 c1                	add    ecx,eax
c000c384:	46                   	inc    esi
c000c385:	39 de                	cmp    esi,ebx
c000c387:	7c c9                	jl     c000c352 <datetimeToSeconds(datetime_t)+0x9b>
c000c389:	eb 34                	jmp    c000c3bf <datetimeToSeconds(datetime_t)+0x108>
c000c38b:	74 32                	je     c000c3bf <datetimeToSeconds(datetime_t)+0x108>
c000c38d:	b8 45 00 00 00       	mov    eax,0x45
c000c392:	89 c2                	mov    edx,eax
c000c394:	83 e2 03             	and    edx,0x3
c000c397:	39 d8                	cmp    eax,ebx
c000c399:	7e 0f                	jle    c000c3aa <datetimeToSeconds(datetime_t)+0xf3>
c000c39b:	83 fa 01             	cmp    edx,0x1
c000c39e:	19 d2                	sbb    edx,edx
c000c3a0:	48                   	dec    eax
c000c3a1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c3a8:	eb e8                	jmp    c000c392 <datetimeToSeconds(datetime_t)+0xdb>
c000c3aa:	b8 6d 01 00 00       	mov    eax,0x16d
c000c3af:	85 d2                	test   edx,edx
c000c3b1:	75 0a                	jne    c000c3bd <datetimeToSeconds(datetime_t)+0x106>
c000c3b3:	83 fb 01             	cmp    ebx,0x1
c000c3b6:	19 c0                	sbb    eax,eax
c000c3b8:	05 6e 01 00 00       	add    eax,0x16e
c000c3bd:	29 c1                	sub    ecx,eax
c000c3bf:	b8 80 51 01 00       	mov    eax,0x15180
c000c3c4:	f7 e9                	imul   ecx
c000c3c6:	03 04 24             	add    eax,DWORD PTR [esp]
c000c3c9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c3cd:	83 c4 0c             	add    esp,0xc
c000c3d0:	5b                   	pop    ebx
c000c3d1:	5e                   	pop    esi
c000c3d2:	5f                   	pop    edi
c000c3d3:	5d                   	pop    ebp
c000c3d4:	c3                   	ret    
c000c3d5:	90                   	nop

c000c3d6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c3d6:	57                   	push   edi
c000c3d7:	56                   	push   esi
c000c3d8:	53                   	push   ebx
c000c3d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c3dd:	8b 06                	mov    eax,DWORD PTR [esi]
c000c3df:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c3e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c3ea:	e8 c8 fe ff ff       	call   c000c2b7 <datetimeToSeconds(datetime_t)>
c000c3ef:	59                   	pop    ecx
c000c3f0:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c3f7:	5b                   	pop    ebx
c000c3f8:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c3fe:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c404:	89 cb                	mov    ebx,ecx
c000c406:	c1 fb 1f             	sar    ebx,0x1f
c000c409:	29 c8                	sub    eax,ecx
c000c40b:	19 da                	sbb    edx,ebx
c000c40d:	31 c9                	xor    ecx,ecx
c000c40f:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c416:	74 05                	je     c000c41d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c418:	b9 08 07 00 00       	mov    ecx,0x708
c000c41d:	31 db                	xor    ebx,ebx
c000c41f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c423:	29 c8                	sub    eax,ecx
c000c425:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c429:	19 da                	sbb    edx,ebx
c000c42b:	89 f8                	mov    eax,edi
c000c42d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c431:	5b                   	pop    ebx
c000c432:	5e                   	pop    esi
c000c433:	5f                   	pop    edi
c000c434:	ff e0                	jmp    eax

c000c436 <secondsToDatetime(unsigned long long)>:
c000c436:	55                   	push   ebp
c000c437:	57                   	push   edi
c000c438:	56                   	push   esi
c000c439:	53                   	push   ebx
c000c43a:	83 ec 1c             	sub    esp,0x1c
c000c43d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c441:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c445:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c449:	6a 00                	push   0x0
c000c44b:	68 80 51 01 00       	push   0x15180
c000c450:	55                   	push   ebp
c000c451:	57                   	push   edi
c000c452:	e8 c9 2d 01 00       	call   c001f220 <__udivdi3>
c000c457:	83 c4 10             	add    esp,0x10
c000c45a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c464:	6a 00                	push   0x0
c000c466:	68 80 51 01 00       	push   0x15180
c000c46b:	55                   	push   ebp
c000c46c:	57                   	push   edi
c000c46d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c472:	e8 a9 2e 01 00       	call   c001f320 <__umoddi3>
c000c477:	83 c4 10             	add    esp,0x10
c000c47a:	99                   	cdq    
c000c47b:	f7 ff                	idiv   edi
c000c47d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c482:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c485:	89 d0                	mov    eax,edx
c000c487:	99                   	cdq    
c000c488:	f7 ff                	idiv   edi
c000c48a:	85 db                	test   ebx,ebx
c000c48c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c48f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c492:	79 11                	jns    c000c4a5 <secondsToDatetime(unsigned long long)+0x6f>
c000c494:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c498:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c49e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4a3:	eb 07                	jmp    c000c4ac <secondsToDatetime(unsigned long long)+0x76>
c000c4a5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c4aa:	89 d8                	mov    eax,ebx
c000c4ac:	bf b4 05 00 00       	mov    edi,0x5b4
c000c4b1:	99                   	cdq    
c000c4b2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c4b7:	f7 f9                	idiv   ecx
c000c4b9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c4be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c4c2:	31 d2                	xor    edx,edx
c000c4c4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c4cc:	01 c3                	add    ebx,eax
c000c4ce:	89 d8                	mov    eax,ebx
c000c4d0:	f7 f1                	div    ecx
c000c4d2:	31 d2                	xor    edx,edx
c000c4d4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c4d7:	89 d8                	mov    eax,ebx
c000c4d9:	f7 f7                	div    edi
c000c4db:	31 d2                	xor    edx,edx
c000c4dd:	29 c1                	sub    ecx,eax
c000c4df:	89 d8                	mov    eax,ebx
c000c4e1:	f7 f5                	div    ebp
c000c4e3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c4e8:	29 c1                	sub    ecx,eax
c000c4ea:	31 d2                	xor    edx,edx
c000c4ec:	89 c8                	mov    eax,ecx
c000c4ee:	f7 f5                	div    ebp
c000c4f0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c4f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c4f9:	31 d2                	xor    edx,edx
c000c4fb:	89 c8                	mov    eax,ecx
c000c4fd:	f7 f5                	div    ebp
c000c4ff:	31 d2                	xor    edx,edx
c000c501:	01 c3                	add    ebx,eax
c000c503:	89 c8                	mov    eax,ecx
c000c505:	f7 f7                	div    edi
c000c507:	bf 99 00 00 00       	mov    edi,0x99
c000c50c:	29 c3                	sub    ebx,eax
c000c50e:	31 d2                	xor    edx,edx
c000c510:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c518:	29 c3                	sub    ebx,eax
c000c51a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c51d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c520:	bb 05 00 00 00       	mov    ebx,0x5
c000c525:	83 c1 02             	add    ecx,0x2
c000c528:	89 c8                	mov    eax,ecx
c000c52a:	f7 f7                	div    edi
c000c52c:	31 d2                	xor    edx,edx
c000c52e:	89 c7                	mov    edi,eax
c000c530:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c536:	83 c0 02             	add    eax,0x2
c000c539:	f7 f3                	div    ebx
c000c53b:	89 eb                	mov    ebx,ebp
c000c53d:	29 c3                	sub    ebx,eax
c000c53f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c545:	88 1e                	mov    BYTE PTR [esi],bl
c000c547:	19 c0                	sbb    eax,eax
c000c549:	31 d2                	xor    edx,edx
c000c54b:	83 e0 0c             	and    eax,0xc
c000c54e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c552:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c55a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c55e:	83 f9 01             	cmp    ecx,0x1
c000c561:	0f 96 c2             	setbe  dl
c000c564:	41                   	inc    ecx
c000c565:	01 d0                	add    eax,edx
c000c567:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c56a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c56e:	83 c4 1c             	add    esp,0x1c
c000c571:	89 f0                	mov    eax,esi
c000c573:	5b                   	pop    ebx
c000c574:	5e                   	pop    esi
c000c575:	5f                   	pop    edi
c000c576:	5d                   	pop    ebp
c000c577:	c2 04 00             	ret    0x4

c000c57a <Clock::timeInDatetimeLocal()>:
c000c57a:	53                   	push   ebx
c000c57b:	83 ec 14             	sub    esp,0x14
c000c57e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c582:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c586:	e8 8b fc ff ff       	call   c000c216 <Clock::timeInSecondsLocal()>
c000c58b:	83 c4 0c             	add    esp,0xc
c000c58e:	52                   	push   edx
c000c58f:	50                   	push   eax
c000c590:	53                   	push   ebx
c000c591:	e8 a0 fe ff ff       	call   c000c436 <secondsToDatetime(unsigned long long)>
c000c596:	89 d8                	mov    eax,ebx
c000c598:	83 c4 14             	add    esp,0x14
c000c59b:	5b                   	pop    ebx
c000c59c:	c2 04 00             	ret    0x4
c000c59f:	90                   	nop

c000c5a0 <Device::hibernate()>:
c000c5a0:	c3                   	ret    
c000c5a1:	90                   	nop

c000c5a2 <Device::wake()>:
c000c5a2:	c3                   	ret    
c000c5a3:	90                   	nop

c000c5a4 <Device::detect()>:
c000c5a4:	c3                   	ret    
c000c5a5:	90                   	nop

c000c5a6 <Device::disableLegacy()>:
c000c5a6:	c3                   	ret    
c000c5a7:	90                   	nop

c000c5a8 <Device::powerSaving(PowerSavingLevel)>:
c000c5a8:	c3                   	ret    
c000c5a9:	90                   	nop

c000c5aa <DriverlessDevice::close(int, int, void*)>:
c000c5aa:	31 c0                	xor    eax,eax
c000c5ac:	c3                   	ret    
c000c5ad:	90                   	nop

c000c5ae <DriverlessDevice::detect()>:
c000c5ae:	c3                   	ret    
c000c5af:	90                   	nop

c000c5b0 <DriverlessDevice::open(int, int, void*)>:
c000c5b0:	83 ec 18             	sub    esp,0x18
c000c5b3:	68 d0 14 02 c0       	push   0xc00214d0
c000c5b8:	e8 34 4d 00 00       	call   c00112f1 <KePanic(char const*)>
c000c5bd:	83 c8 ff             	or     eax,0xffffffff
c000c5c0:	83 c4 1c             	add    esp,0x1c
c000c5c3:	c3                   	ret    

c000c5c4 <Device::~Device()>:
c000c5c4:	ba 30 15 02 c0       	mov    edx,0xc0021530
c000c5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5cd:	89 10                	mov    DWORD PTR [eax],edx
c000c5cf:	90                   	nop
c000c5d0:	c3                   	ret    
c000c5d1:	90                   	nop

c000c5d2 <Device::~Device()>:
c000c5d2:	83 ec 0c             	sub    esp,0xc
c000c5d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c5d9:	e8 e6 ff ff ff       	call   c000c5c4 <Device::~Device()>
c000c5de:	83 c4 04             	add    esp,0x4
c000c5e1:	83 ec 08             	sub    esp,0x8
c000c5e4:	68 58 01 00 00       	push   0x158
c000c5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ed:	e8 26 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c5f2:	83 c4 10             	add    esp,0x10
c000c5f5:	83 c4 0c             	add    esp,0xc
c000c5f8:	c3                   	ret    
c000c5f9:	90                   	nop

c000c5fa <Device::findAndLoadDriver()>:
c000c5fa:	c7 44 24 04 ee 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc00214ee
c000c602:	e9 3e e3 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c607:	90                   	nop

c000c608 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c608:	57                   	push   edi
c000c609:	b9 09 00 00 00       	mov    ecx,0x9
c000c60e:	56                   	push   esi
c000c60f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c613:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c617:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c621:	81 c7 18 01 00 00    	add    edi,0x118
c000c627:	fc                   	cld    
c000c628:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c62a:	5e                   	pop    esi
c000c62b:	5f                   	pop    edi
c000c62c:	c3                   	ret    
c000c62d:	90                   	nop

c000c62e <Device::preOpenACPI(void*, char*, char*)>:
c000c62e:	57                   	push   edi
c000c62f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c634:	56                   	push   esi
c000c635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c639:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c63d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c647:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c64d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c653:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c657:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c659:	b9 0e 00 00 00       	mov    ecx,0xe
c000c65e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c664:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c668:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c66a:	5e                   	pop    esi
c000c66b:	5f                   	pop    edi
c000c66c:	c3                   	ret    
c000c66d:	90                   	nop

c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c66e:	53                   	push   ebx
c000c66f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c673:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c677:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c67b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c67f:	0f b6 c0             	movzx  eax,al
c000c682:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c686:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c68a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c68e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c692:	5b                   	pop    ebx
c000c693:	e9 a8 05 00 00       	jmp    c000cc40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c698 <Device::getParent()>:
c000c698:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c69c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c6a2:	c3                   	ret    
c000c6a3:	90                   	nop

c000c6a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c6a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c6a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c6ac:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c6b1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c6b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c6b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c6bd:	e9 e6 06 00 00       	jmp    c000cda8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c6c2 <Device::addChild(Device*)>:
c000c6c2:	53                   	push   ebx
c000c6c3:	83 ec 08             	sub    esp,0x8
c000c6c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c6ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6ce:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c6d4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c6da:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c6dc:	85 d2                	test   edx,edx
c000c6de:	74 04                	je     c000c6e4 <Device::addChild(Device*)+0x22>
c000c6e0:	89 d3                	mov    ebx,edx
c000c6e2:	eb f6                	jmp    c000c6da <Device::addChild(Device*)+0x18>
c000c6e4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c6e7:	83 ec 0c             	sub    esp,0xc
c000c6ea:	6a 08                	push   0x8
c000c6ec:	e8 c5 b3 ff ff       	call   c0007ab6 <malloc>
c000c6f1:	89 03                	mov    DWORD PTR [ebx],eax
c000c6f3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6f9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c700:	83 c4 18             	add    esp,0x18
c000c703:	5b                   	pop    ebx
c000c704:	c3                   	ret    
c000c705:	90                   	nop

c000c706 <Device::removeAllChildren()>:
c000c706:	56                   	push   esi
c000c707:	53                   	push   ebx
c000c708:	52                   	push   edx
c000c709:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c70d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c713:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c716:	74 17                	je     c000c72f <Device::removeAllChildren()+0x29>
c000c718:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c71b:	85 c0                	test   eax,eax
c000c71d:	74 0c                	je     c000c72b <Device::removeAllChildren()+0x25>
c000c71f:	83 ec 0c             	sub    esp,0xc
c000c722:	8b 10                	mov    edx,DWORD PTR [eax]
c000c724:	50                   	push   eax
c000c725:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c72d:	eb e4                	jmp    c000c713 <Device::removeAllChildren()+0xd>
c000c72f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c735:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c73b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c741:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c748:	58                   	pop    eax
c000c749:	5b                   	pop    ebx
c000c74a:	5e                   	pop    esi
c000c74b:	c3                   	ret    

c000c74c <Device::hibernateAll()>:
c000c74c:	53                   	push   ebx
c000c74d:	83 ec 14             	sub    esp,0x14
c000c750:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c754:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c756:	53                   	push   ebx
c000c757:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c75a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c760:	83 c4 10             	add    esp,0x10
c000c763:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c766:	74 0f                	je     c000c777 <Device::hibernateAll()+0x2b>
c000c768:	83 ec 0c             	sub    esp,0xc
c000c76b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c76e:	e8 d9 ff ff ff       	call   c000c74c <Device::hibernateAll()>
c000c773:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c775:	eb e9                	jmp    c000c760 <Device::hibernateAll()+0x14>
c000c777:	83 c4 08             	add    esp,0x8
c000c77a:	5b                   	pop    ebx
c000c77b:	c3                   	ret    

c000c77c <Device::wakeAll()>:
c000c77c:	53                   	push   ebx
c000c77d:	83 ec 14             	sub    esp,0x14
c000c780:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c784:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c786:	53                   	push   ebx
c000c787:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c78a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c790:	83 c4 10             	add    esp,0x10
c000c793:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c796:	74 0f                	je     c000c7a7 <Device::wakeAll()+0x2b>
c000c798:	83 ec 0c             	sub    esp,0xc
c000c79b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c79e:	e8 d9 ff ff ff       	call   c000c77c <Device::wakeAll()>
c000c7a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7a5:	eb e9                	jmp    c000c790 <Device::wakeAll()+0x14>
c000c7a7:	83 c4 08             	add    esp,0x8
c000c7aa:	5b                   	pop    ebx
c000c7ab:	c3                   	ret    

c000c7ac <Device::detectAll()>:
c000c7ac:	53                   	push   ebx
c000c7ad:	83 ec 14             	sub    esp,0x14
c000c7b0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c7b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7b6:	53                   	push   ebx
c000c7b7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c7ba:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7c0:	83 c4 10             	add    esp,0x10
c000c7c3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7c6:	74 0f                	je     c000c7d7 <Device::detectAll()+0x2b>
c000c7c8:	83 ec 0c             	sub    esp,0xc
c000c7cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7ce:	e8 d9 ff ff ff       	call   c000c7ac <Device::detectAll()>
c000c7d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7d5:	eb e9                	jmp    c000c7c0 <Device::detectAll()+0x14>
c000c7d7:	83 c4 08             	add    esp,0x8
c000c7da:	5b                   	pop    ebx
c000c7db:	c3                   	ret    

c000c7dc <Device::disableLegacyAll()>:
c000c7dc:	c3                   	ret    
c000c7dd:	90                   	nop

c000c7de <Device::loadDriversForAll()>:
c000c7de:	c3                   	ret    
c000c7df:	90                   	nop

c000c7e0 <Device::closeAll()>:
c000c7e0:	53                   	push   ebx
c000c7e1:	83 ec 08             	sub    esp,0x8
c000c7e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c7e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ea:	6a 00                	push   0x0
c000c7ec:	6a 00                	push   0x0
c000c7ee:	6a 00                	push   0x0
c000c7f0:	53                   	push   ebx
c000c7f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c7f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7fa:	83 c4 10             	add    esp,0x10
c000c7fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c800:	74 0f                	je     c000c811 <Device::closeAll()+0x31>
c000c802:	83 ec 0c             	sub    esp,0xc
c000c805:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c808:	e8 d3 ff ff ff       	call   c000c7e0 <Device::closeAll()>
c000c80d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c80f:	eb e9                	jmp    c000c7fa <Device::closeAll()+0x1a>
c000c811:	83 c4 08             	add    esp,0x8
c000c814:	5b                   	pop    ebx
c000c815:	c3                   	ret    

c000c816 <Device::powerSavingAll(PowerSavingLevel)>:
c000c816:	56                   	push   esi
c000c817:	53                   	push   ebx
c000c818:	83 ec 0c             	sub    esp,0xc
c000c81b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c81f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c823:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c825:	56                   	push   esi
c000c826:	53                   	push   ebx
c000c827:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c82a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c830:	83 c4 10             	add    esp,0x10
c000c833:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c836:	74 0f                	je     c000c847 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c838:	52                   	push   edx
c000c839:	52                   	push   edx
c000c83a:	56                   	push   esi
c000c83b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c83e:	e8 d3 ff ff ff       	call   c000c816 <Device::powerSavingAll(PowerSavingLevel)>
c000c843:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c845:	eb e9                	jmp    c000c830 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c847:	58                   	pop    eax
c000c848:	5b                   	pop    ebx
c000c849:	5e                   	pop    esi
c000c84a:	c3                   	ret    
c000c84b:	90                   	nop

c000c84c <Device::setName(char const*)>:
c000c84c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c854:	e9 e7 3d ff ff       	jmp    c0000640 <strcpy>
c000c859:	90                   	nop

c000c85a <Device::Device(char const*)>:
c000c85a:	83 ec 1c             	sub    esp,0x1c
c000c85d:	ba 30 15 02 c0       	mov    edx,0xc0021530
c000c862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c866:	89 10                	mov    DWORD PTR [eax],edx
c000c868:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c87a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c884:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c888:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c892:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c896:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8a0:	83 ec 08             	sub    esp,0x8
c000c8a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8ab:	e8 9c ff ff ff       	call   c000c84c <Device::setName(char const*)>
c000c8b0:	83 c4 10             	add    esp,0x10
c000c8b3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c8bb:	83 ec 0c             	sub    esp,0xc
c000c8be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c8c2:	e8 ef b1 ff ff       	call   c0007ab6 <malloc>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c8d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c8d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c8db:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c8e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8e5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c8eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c8f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c8fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c902:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c906:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c911:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c918:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c91c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c92a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c938:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c942:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c946:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c950:	90                   	nop
c000c951:	83 c4 1c             	add    esp,0x1c
c000c954:	c3                   	ret    
c000c955:	90                   	nop

c000c956 <Device::getName()>:
c000c956:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c95a:	05 d0 00 00 00       	add    eax,0xd0
c000c95f:	c3                   	ret    

c000c960 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c960:	83 ec 0c             	sub    esp,0xc
c000c963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c967:	83 ec 08             	sub    esp,0x8
c000c96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c96e:	50                   	push   eax
c000c96f:	e8 e6 fe ff ff       	call   c000c85a <Device::Device(char const*)>
c000c974:	83 c4 10             	add    esp,0x10
c000c977:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c000c97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c980:	89 10                	mov    DWORD PTR [eax],edx
c000c982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c986:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c990:	90                   	nop
c000c991:	83 c4 0c             	add    esp,0xc
c000c994:	c3                   	ret    
c000c995:	90                   	nop

c000c996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c996:	57                   	push   edi
c000c997:	56                   	push   esi
c000c998:	53                   	push   ebx
c000c999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c99d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c9a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c9a5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c9ab:	75 0c                	jne    c000c9b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c9ad:	52                   	push   edx
c000c9ae:	52                   	push   edx
c000c9af:	53                   	push   ebx
c000c9b0:	56                   	push   esi
c000c9b1:	e8 1c 2d 01 00       	call   c001f6d2 <LinkedList<Device>::addElement(Device*)>
c000c9b6:	83 c4 10             	add    esp,0x10
c000c9b9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c9bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c9c2:	74 12                	je     c000c9d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c9c4:	50                   	push   eax
c000c9c5:	57                   	push   edi
c000c9c6:	56                   	push   esi
c000c9c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c9ca:	e8 c7 ff ff ff       	call   c000c996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c9cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c9d1:	83 c4 10             	add    esp,0x10
c000c9d4:	eb e9                	jmp    c000c9bf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c9d6:	5b                   	pop    ebx
c000c9d7:	5e                   	pop    esi
c000c9d8:	5f                   	pop    edi
c000c9d9:	c3                   	ret    

c000c9da <getDevicesOfType(DeviceType)>:
c000c9da:	53                   	push   ebx
c000c9db:	83 ec 14             	sub    esp,0x14
c000c9de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c9e2:	53                   	push   ebx
c000c9e3:	e8 c6 2d 01 00       	call   c001f7ae <LinkedList<Device>::LinkedList()>
c000c9e8:	83 c4 0c             	add    esp,0xc
c000c9eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c9ef:	53                   	push   ebx
c000c9f0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c9f6:	e8 9b ff ff ff       	call   c000c996 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c9fb:	89 d8                	mov    eax,ebx
c000c9fd:	83 c4 18             	add    esp,0x18
c000ca00:	5b                   	pop    ebx
c000ca01:	c2 04 00             	ret    0x4

c000ca04 <HardDiskController::HardDiskController(char const*)>:
c000ca04:	83 ec 0c             	sub    esp,0xc
c000ca07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca0b:	83 ec 08             	sub    esp,0x8
c000ca0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca12:	50                   	push   eax
c000ca13:	e8 42 fe ff ff       	call   c000c85a <Device::Device(char const*)>
c000ca18:	83 c4 10             	add    esp,0x10
c000ca1b:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000ca20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca24:	89 10                	mov    DWORD PTR [eax],edx
c000ca26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca2a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000ca34:	90                   	nop
c000ca35:	83 c4 0c             	add    esp,0xc
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop
c000ca3a:	66 90                	xchg   ax,ax

c000ca3c <HardDiskController::~HardDiskController()>:
c000ca3c:	83 ec 0c             	sub    esp,0xc
c000ca3f:	ba 88 15 02 c0       	mov    edx,0xc0021588
c000ca44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca48:	89 10                	mov    DWORD PTR [eax],edx
c000ca4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4e:	83 ec 0c             	sub    esp,0xc
c000ca51:	50                   	push   eax
c000ca52:	e8 6d fb ff ff       	call   c000c5c4 <Device::~Device()>
c000ca57:	83 c4 10             	add    esp,0x10
c000ca5a:	90                   	nop
c000ca5b:	83 c4 0c             	add    esp,0xc
c000ca5e:	c3                   	ret    
c000ca5f:	90                   	nop

c000ca60 <HardDiskController::~HardDiskController()>:
c000ca60:	83 ec 0c             	sub    esp,0xc
c000ca63:	83 ec 0c             	sub    esp,0xc
c000ca66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6a:	e8 cd ff ff ff       	call   c000ca3c <HardDiskController::~HardDiskController()>
c000ca6f:	83 c4 10             	add    esp,0x10
c000ca72:	83 ec 08             	sub    esp,0x8
c000ca75:	68 58 01 00 00       	push   0x158
c000ca7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca7e:	e8 95 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ca83:	83 c4 10             	add    esp,0x10
c000ca86:	83 c4 0c             	add    esp,0xc
c000ca89:	c3                   	ret    

c000ca8a <PhysicalDisk::eject()>:
c000ca8a:	83 c8 ff             	or     eax,0xffffffff
c000ca8d:	c3                   	ret    

c000ca8e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ca8e:	83 ec 0c             	sub    esp,0xc
c000ca91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca95:	83 ec 08             	sub    esp,0x8
c000ca98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca9c:	50                   	push   eax
c000ca9d:	e8 b8 fd ff ff       	call   c000c85a <Device::Device(char const*)>
c000caa2:	83 c4 10             	add    esp,0x10
c000caa5:	ba b4 15 02 c0       	mov    edx,0xc00215b4
c000caaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caae:	89 10                	mov    DWORD PTR [eax],edx
c000cab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cabf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cac6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caca:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cadc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000caf0:	90                   	nop
c000caf1:	83 c4 0c             	add    esp,0xc
c000caf4:	c3                   	ret    
c000caf5:	90                   	nop

c000caf6 <PhysicalDisk::startCache()>:
c000caf6:	56                   	push   esi
c000caf7:	53                   	push   ebx
c000caf8:	83 ec 10             	sub    esp,0x10
c000cafb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000caff:	6a 44                	push   0x44
c000cb01:	e8 b0 af ff ff       	call   c0007ab6 <malloc>
c000cb06:	89 c6                	mov    esi,eax
c000cb08:	58                   	pop    eax
c000cb09:	5a                   	pop    edx
c000cb0a:	53                   	push   ebx
c000cb0b:	56                   	push   esi
c000cb0c:	e8 7b 17 00 00       	call   c000e28c <VCache::VCache(PhysicalDisk*)>
c000cb11:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000cb17:	83 c4 14             	add    esp,0x14
c000cb1a:	5b                   	pop    ebx
c000cb1b:	5e                   	pop    esi
c000cb1c:	c3                   	ret    
c000cb1d:	90                   	nop

c000cb1e <PhysicalDisk::~PhysicalDisk()>:
c000cb1e:	83 ec 0c             	sub    esp,0xc
c000cb21:	ba b4 15 02 c0       	mov    edx,0xc00215b4
c000cb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2a:	89 10                	mov    DWORD PTR [eax],edx
c000cb2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb30:	83 ec 0c             	sub    esp,0xc
c000cb33:	50                   	push   eax
c000cb34:	e8 8b fa ff ff       	call   c000c5c4 <Device::~Device()>
c000cb39:	83 c4 10             	add    esp,0x10
c000cb3c:	90                   	nop
c000cb3d:	83 c4 0c             	add    esp,0xc
c000cb40:	c3                   	ret    
c000cb41:	90                   	nop

c000cb42 <PhysicalDisk::~PhysicalDisk()>:
c000cb42:	83 ec 0c             	sub    esp,0xc
c000cb45:	83 ec 0c             	sub    esp,0xc
c000cb48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb4c:	e8 cd ff ff ff       	call   c000cb1e <PhysicalDisk::~PhysicalDisk()>
c000cb51:	83 c4 10             	add    esp,0x10
c000cb54:	83 ec 08             	sub    esp,0x8
c000cb57:	68 6c 01 00 00       	push   0x16c
c000cb5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb60:	e8 b3 dc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	83 c4 0c             	add    esp,0xc
c000cb6b:	c3                   	ret    

c000cb6c <int_handler>:
c000cb6c:	55                   	push   ebp
c000cb6d:	57                   	push   edi
c000cb6e:	56                   	push   esi
c000cb6f:	53                   	push   ebx
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000cb77:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb7e:	74 0b                	je     c000cb8b <int_handler+0x1f>
c000cb80:	fa                   	cli    
c000cb81:	f4                   	hlt    
c000cb82:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb89:	75 f5                	jne    c000cb80 <int_handler+0x14>
c000cb8b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cb8e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cb91:	83 f8 17             	cmp    eax,0x17
c000cb94:	76 40                	jbe    c000cbd6 <int_handler+0x6a>
c000cb96:	c1 e6 04             	shl    esi,0x4
c000cb99:	31 db                	xor    ebx,ebx
c000cb9b:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cba1:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cba7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cbab:	85 c0                	test   eax,eax
c000cbad:	74 13                	je     c000cbc2 <int_handler+0x56>
c000cbaf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cbb2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cbb6:	74 2c                	je     c000cbe4 <int_handler+0x78>
c000cbb8:	83 ec 08             	sub    esp,0x8
c000cbbb:	52                   	push   edx
c000cbbc:	57                   	push   edi
c000cbbd:	ff d0                	call   eax
c000cbbf:	83 c4 10             	add    esp,0x10
c000cbc2:	83 c3 01             	add    ebx,0x1
c000cbc5:	83 fb 04             	cmp    ebx,0x4
c000cbc8:	75 dd                	jne    c000cba7 <int_handler+0x3b>
c000cbca:	83 c4 0c             	add    esp,0xc
c000cbcd:	31 c0                	xor    eax,eax
c000cbcf:	5b                   	pop    ebx
c000cbd0:	31 d2                	xor    edx,edx
c000cbd2:	5e                   	pop    esi
c000cbd3:	5f                   	pop    edi
c000cbd4:	5d                   	pop    ebp
c000cbd5:	c3                   	ret    
c000cbd6:	83 ec 0c             	sub    esp,0xc
c000cbd9:	50                   	push   eax
c000cbda:	e8 99 b2 00 00       	call   c0017e78 <HalEndOfInterrupt(int)>
c000cbdf:	83 c4 10             	add    esp,0x10
c000cbe2:	eb b2                	jmp    c000cb96 <int_handler+0x2a>
c000cbe4:	83 ec 08             	sub    esp,0x8
c000cbe7:	52                   	push   edx
c000cbe8:	57                   	push   edi
c000cbe9:	ff d0                	call   eax
c000cbeb:	83 c4 10             	add    esp,0x10
c000cbee:	83 c4 0c             	add    esp,0xc
c000cbf1:	5b                   	pop    ebx
c000cbf2:	5e                   	pop    esi
c000cbf3:	5f                   	pop    edi
c000cbf4:	5d                   	pop    ebp
c000cbf5:	c3                   	ret    

c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cbf6:	56                   	push   esi
c000cbf7:	31 c0                	xor    eax,eax
c000cbf9:	53                   	push   ebx
c000cbfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cbfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc02:	89 ca                	mov    edx,ecx
c000cc04:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc08:	c1 e2 04             	shl    edx,0x4
c000cc0b:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cc13:	74 17                	je     c000cc2c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cc15:	83 c0 01             	add    eax,0x1
c000cc18:	83 f8 04             	cmp    eax,0x4
c000cc1b:	75 ee                	jne    c000cc0b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cc1d:	c7 44 24 0c e4 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215e4
c000cc25:	5b                   	pop    ebx
c000cc26:	5e                   	pop    esi
c000cc27:	e9 c5 46 00 00       	jmp    c00112f1 <KePanic(char const*)>
c000cc2c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cc2f:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cc36:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cc3d:	5b                   	pop    ebx
c000cc3e:	5e                   	pop    esi
c000cc3f:	c3                   	ret    

c000cc40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cc40:	57                   	push   edi
c000cc41:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cc47:	56                   	push   esi
c000cc48:	53                   	push   ebx
c000cc49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cc51:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cc58:	74 54                	je     c000ccae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cc5a:	89 c7                	mov    edi,eax
c000cc5c:	84 c0                	test   al,al
c000cc5e:	74 1d                	je     c000cc7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cc60:	83 fe 0f             	cmp    esi,0xf
c000cc63:	0f 8f d5 00 00 00    	jg     c000cd3e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cc69:	0f b6 b6 e8 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcf18]
c000cc70:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cc78:	d1 ef                	shr    edi,1
c000cc7a:	83 e7 01             	and    edi,0x1
c000cc7d:	83 ec 08             	sub    esp,0x8
c000cc80:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc85:	31 db                	xor    ebx,ebx
c000cc87:	50                   	push   eax
c000cc88:	68 f1 15 02 c0       	push   0xc00215f1
c000cc8d:	e8 b3 dc ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cc92:	83 c4 10             	add    esp,0x10
c000cc95:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc9a:	85 c0                	test   eax,eax
c000cc9c:	7f 55                	jg     c000ccf3 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc9e:	83 ec 0c             	sub    esp,0xc
c000cca1:	68 08 16 02 c0       	push   0xc0021608
c000cca6:	e8 46 46 00 00       	call   c00112f1 <KePanic(char const*)>
c000ccab:	83 c4 10             	add    esp,0x10
c000ccae:	8d 7e 20             	lea    edi,[esi+0x20]
c000ccb1:	89 f8                	mov    eax,edi
c000ccb3:	31 d2                	xor    edx,edx
c000ccb5:	c1 e0 04             	shl    eax,0x4
c000ccb8:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000ccbf:	85 c9                	test   ecx,ecx
c000ccc1:	0f 84 8e 00 00 00    	je     c000cd55 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000ccc7:	83 c2 01             	add    edx,0x1
c000ccca:	83 fa 04             	cmp    edx,0x4
c000cccd:	75 e9                	jne    c000ccb8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cccf:	83 ec 0c             	sub    esp,0xc
c000ccd2:	68 5c 16 02 c0       	push   0xc002165c
c000ccd7:	e8 15 46 00 00       	call   c00112f1 <KePanic(char const*)>
c000ccdc:	83 c4 10             	add    esp,0x10
c000ccdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cce4:	5b                   	pop    ebx
c000cce5:	5e                   	pop    esi
c000cce6:	5f                   	pop    edi
c000cce7:	c3                   	ret    
c000cce8:	83 c3 01             	add    ebx,0x1
c000cceb:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000ccf1:	7e ab                	jle    c000cc9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000ccf3:	83 ec 08             	sub    esp,0x8
c000ccf6:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000ccfd:	56                   	push   esi
c000ccfe:	50                   	push   eax
c000ccff:	e8 fe 18 01 00       	call   c001e602 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cd04:	83 c4 10             	add    esp,0x10
c000cd07:	84 c0                	test   al,al
c000cd09:	74 dd                	je     c000cce8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cd0b:	83 ec 04             	sub    esp,0x4
c000cd0e:	89 f8                	mov    eax,edi
c000cd10:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cd17:	0f b6 f8             	movzx  edi,al
c000cd1a:	57                   	push   edi
c000cd1b:	8d 7e 20             	lea    edi,[esi+0x20]
c000cd1e:	6a 00                	push   0x0
c000cd20:	89 f8                	mov    eax,edi
c000cd22:	0f b6 c0             	movzx  eax,al
c000cd25:	50                   	push   eax
c000cd26:	89 f0                	mov    eax,esi
c000cd28:	6a 00                	push   0x0
c000cd2a:	0f b6 c0             	movzx  eax,al
c000cd2d:	6a 00                	push   0x0
c000cd2f:	50                   	push   eax
c000cd30:	53                   	push   ebx
c000cd31:	e8 38 1a 01 00       	call   c001e76e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cd36:	83 c4 20             	add    esp,0x20
c000cd39:	e9 73 ff ff ff       	jmp    c000ccb1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cd3e:	83 ec 0c             	sub    esp,0xc
c000cd41:	31 ff                	xor    edi,edi
c000cd43:	68 24 16 02 c0       	push   0xc0021624
c000cd48:	e8 a4 45 00 00       	call   c00112f1 <KePanic(char const*)>
c000cd4d:	83 c4 10             	add    esp,0x10
c000cd50:	e9 28 ff ff ff       	jmp    c000cc7d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cd55:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cd58:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd5c:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cd63:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd67:	5b                   	pop    ebx
c000cd68:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000cd6f:	89 f0                	mov    eax,esi
c000cd71:	5e                   	pop    esi
c000cd72:	5f                   	pop    edi
c000cd73:	c3                   	ret    

c000cd74 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cd74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd7c:	c1 e0 04             	shl    eax,0x4
c000cd7f:	8d 50 10             	lea    edx,[eax+0x10]
c000cd82:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cd88:	74 08                	je     c000cd92 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd8a:	83 c0 04             	add    eax,0x4
c000cd8d:	39 d0                	cmp    eax,edx
c000cd8f:	75 f1                	jne    c000cd82 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd91:	c3                   	ret    
c000cd92:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd9c:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cda6:	eb e2                	jmp    c000cd8a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cda8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cda8:	53                   	push   ebx
c000cda9:	83 ec 08             	sub    esp,0x8
c000cdac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cdb0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cdb5:	74 0e                	je     c000cdc5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cdb7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cdbc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cdc3:	75 37                	jne    c000cdfc <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cdc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc9:	83 c0 20             	add    eax,0x20
c000cdcc:	c1 e0 04             	shl    eax,0x4
c000cdcf:	8d 50 10             	lea    edx,[eax+0x10]
c000cdd2:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000cdd8:	74 0c                	je     c000cde6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cdda:	83 c0 04             	add    eax,0x4
c000cddd:	39 d0                	cmp    eax,edx
c000cddf:	75 f1                	jne    c000cdd2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cde1:	83 c4 08             	add    esp,0x8
c000cde4:	5b                   	pop    ebx
c000cde5:	c3                   	ret    
c000cde6:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdf0:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdfa:	eb de                	jmp    c000cdda <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cdfc:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000ce01:	7f 11                	jg     c000ce14 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000ce03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce07:	0f b6 80 e8 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcf18]
c000ce0e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce12:	eb b1                	jmp    c000cdc5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ce14:	83 ec 0c             	sub    esp,0xc
c000ce17:	68 15 16 02 c0       	push   0xc0021615
c000ce1c:	e8 d0 44 00 00       	call   c00112f1 <KePanic(char const*)>
c000ce21:	83 c4 10             	add    esp,0x10
c000ce24:	eb 9f                	jmp    c000cdc5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000ce26 <setupINTS()>:
c000ce26:	31 c0                	xor    eax,eax
c000ce28:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000ce32:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000ce3c:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000ce46:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000ce50:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000ce5a:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000ce64:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000ce6e:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000ce78:	83 c0 10             	add    eax,0x10
c000ce7b:	3d 00 10 00 00       	cmp    eax,0x1000
c000ce80:	75 a6                	jne    c000ce28 <setupINTS()+0x2>
c000ce82:	c3                   	ret    

c000ce83 <convertLegacyIRQNumber(int)>:
c000ce83:	83 ec 0c             	sub    esp,0xc
c000ce86:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ce8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce90:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce97:	74 0c                	je     c000cea5 <convertLegacyIRQNumber(int)+0x22>
c000ce99:	83 f8 0f             	cmp    eax,0xf
c000ce9c:	7f 0b                	jg     c000cea9 <convertLegacyIRQNumber(int)+0x26>
c000ce9e:	0f b6 80 e8 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcf18]
c000cea5:	83 c4 0c             	add    esp,0xc
c000cea8:	c3                   	ret    
c000cea9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cead:	83 ec 0c             	sub    esp,0xc
c000ceb0:	68 24 16 02 c0       	push   0xc0021624
c000ceb5:	e8 37 44 00 00       	call   c00112f1 <KePanic(char const*)>
c000ceba:	83 c4 10             	add    esp,0x10
c000cebd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cec1:	83 c4 0c             	add    esp,0xc
c000cec4:	c3                   	ret    
c000cec5:	90                   	nop

c000cec6 <startGUI(void*)>:
c000cec6:	55                   	push   ebp
c000cec7:	89 e5                	mov    ebp,esp
c000cec9:	53                   	push   ebx
c000ceca:	83 ec 04             	sub    esp,0x4
c000cecd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ced2:	83 e8 01             	sub    eax,0x1
c000ced5:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ceda:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cedf:	85 c0                	test   eax,eax
c000cee1:	75 01                	jne    c000cee4 <startGUI(void*)+0x1e>
c000cee3:	fb                   	sti    
c000cee4:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ceea:	83 ec 08             	sub    esp,0x8
c000ceed:	6a 01                	push   0x1
c000ceef:	68 81 16 02 c0       	push   0xc0021681
c000cef4:	e8 59 82 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	83 ec 08             	sub    esp,0x8
c000ceff:	53                   	push   ebx
c000cf00:	50                   	push   eax
c000cf01:	e8 7d 84 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000cf06:	83 c4 10             	add    esp,0x10
c000cf09:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf0f:	83 ec 08             	sub    esp,0x8
c000cf12:	6a 01                	push   0x1
c000cf14:	68 9b 16 02 c0       	push   0xc002169b
c000cf19:	e8 34 82 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000cf1e:	83 c4 10             	add    esp,0x10
c000cf21:	83 ec 08             	sub    esp,0x8
c000cf24:	53                   	push   ebx
c000cf25:	50                   	push   eax
c000cf26:	e8 58 84 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000cf2b:	83 c4 10             	add    esp,0x10
c000cf2e:	90                   	nop
c000cf2f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf32:	c9                   	leave  
c000cf33:	c3                   	ret    

c000cf34 <startGUIVESA(void*)>:
c000cf34:	55                   	push   ebp
c000cf35:	89 e5                	mov    ebp,esp
c000cf37:	53                   	push   ebx
c000cf38:	83 ec 04             	sub    esp,0x4
c000cf3b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf40:	83 e8 01             	sub    eax,0x1
c000cf43:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf48:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf4d:	85 c0                	test   eax,eax
c000cf4f:	75 01                	jne    c000cf52 <startGUIVESA(void*)+0x1e>
c000cf51:	fb                   	sti    
c000cf52:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf58:	83 ec 08             	sub    esp,0x8
c000cf5b:	6a 01                	push   0x1
c000cf5d:	68 b9 16 02 c0       	push   0xc00216b9
c000cf62:	e8 eb 81 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	83 ec 08             	sub    esp,0x8
c000cf6d:	53                   	push   ebx
c000cf6e:	50                   	push   eax
c000cf6f:	e8 0f 84 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000cf74:	83 c4 10             	add    esp,0x10
c000cf77:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf7d:	83 ec 08             	sub    esp,0x8
c000cf80:	6a 01                	push   0x1
c000cf82:	68 9b 16 02 c0       	push   0xc002169b
c000cf87:	e8 c6 81 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	83 ec 08             	sub    esp,0x8
c000cf92:	53                   	push   ebx
c000cf93:	50                   	push   eax
c000cf94:	e8 ea 83 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000cf99:	83 c4 10             	add    esp,0x10
c000cf9c:	90                   	nop
c000cf9d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cfa0:	c9                   	leave  
c000cfa1:	c3                   	ret    

c000cfa2 <sendKeyToTerminal(unsigned char)>:
c000cfa2:	55                   	push   ebp
c000cfa3:	89 e5                	mov    ebp,esp
c000cfa5:	83 ec 28             	sub    esp,0x28
c000cfa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfab:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cfae:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cfb3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cfb7:	83 ec 08             	sub    esp,0x8
c000cfba:	52                   	push   edx
c000cfbb:	50                   	push   eax
c000cfbc:	e8 f5 bd ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cfc1:	83 c4 10             	add    esp,0x10
c000cfc4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfc8:	83 f8 0a             	cmp    eax,0xa
c000cfcb:	74 16                	je     c000cfe3 <sendKeyToTerminal(unsigned char)+0x41>
c000cfcd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfd1:	83 f8 03             	cmp    eax,0x3
c000cfd4:	74 0d                	je     c000cfe3 <sendKeyToTerminal(unsigned char)+0x41>
c000cfd6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cfda:	83 f8 1c             	cmp    eax,0x1c
c000cfdd:	0f 85 97 00 00 00    	jne    c000d07a <sendKeyToTerminal(unsigned char)+0xd8>
c000cfe3:	fa                   	cli    
c000cfe4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cfe9:	83 c0 01             	add    eax,0x1
c000cfec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cff1:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cff6:	83 c0 01             	add    eax,0x1
c000cff9:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cffe:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000d003:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d006:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000d010:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d014:	74 1f                	je     c000d035 <sendKeyToTerminal(unsigned char)+0x93>
c000d016:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d019:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d01c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d01f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d022:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d025:	83 ec 0c             	sub    esp,0xc
c000d028:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d02b:	e8 98 90 00 00       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c000d030:	83 c4 10             	add    esp,0x10
c000d033:	eb db                	jmp    c000d010 <sendKeyToTerminal(unsigned char)+0x6e>
c000d035:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d03a:	83 e8 01             	sub    eax,0x1
c000d03d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000d042:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000d047:	85 c0                	test   eax,eax
c000d049:	75 18                	jne    c000d063 <sendKeyToTerminal(unsigned char)+0xc1>
c000d04b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000d050:	85 c0                	test   eax,eax
c000d052:	74 0f                	je     c000d063 <sendKeyToTerminal(unsigned char)+0xc1>
c000d054:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000d05e:	e8 4d 8b 00 00       	call   c0015bb0 <schedule()>
c000d063:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d068:	83 e8 01             	sub    eax,0x1
c000d06b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d070:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d075:	85 c0                	test   eax,eax
c000d077:	75 01                	jne    c000d07a <sendKeyToTerminal(unsigned char)+0xd8>
c000d079:	fb                   	sti    
c000d07a:	90                   	nop
c000d07b:	c9                   	leave  
c000d07c:	c3                   	ret    

c000d07d <sendKeyboardToken(KeyboardToken)>:
c000d07d:	55                   	push   ebp
c000d07e:	89 e5                	mov    ebp,esp
c000d080:	83 ec 18             	sub    esp,0x18
c000d083:	e8 b9 42 00 00       	call   c0011341 <KeUserIOReceived()>
c000d088:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d08b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d08e:	0f b7 c0             	movzx  eax,ax
c000d091:	83 f2 01             	xor    edx,0x1
c000d094:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d09a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d09f:	85 c0                	test   eax,eax
c000d0a1:	74 24                	je     c000d0c7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d0a3:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d0a9:	83 ec 04             	sub    esp,0x4
c000d0ac:	68 40 84 02 c0       	push   0xc0028440
c000d0b1:	83 ec 08             	sub    esp,0x8
c000d0b4:	89 e2                	mov    edx,esp
c000d0b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b9:	89 02                	mov    DWORD PTR [edx],eax
c000d0bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d0be:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d0c2:	ff d1                	call   ecx
c000d0c4:	83 c4 10             	add    esp,0x10
c000d0c7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d0cb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d0ce:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d0d3:	0f b6 d2             	movzx  edx,dl
c000d0d6:	0f b6 c0             	movzx  eax,al
c000d0d9:	39 c2                	cmp    edx,eax
c000d0db:	74 1c                	je     c000d0f9 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d0dd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d0e0:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d0e5:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d0ea:	0f b6 c0             	movzx  eax,al
c000d0ed:	83 ec 0c             	sub    esp,0xc
c000d0f0:	50                   	push   eax
c000d0f1:	e8 0c b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d0f6:	83 c4 10             	add    esp,0x10
c000d0f9:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d0fc:	0f b6 c0             	movzx  eax,al
c000d0ff:	85 c0                	test   eax,eax
c000d101:	0f 84 da 00 00 00    	je     c000d1e1 <sendKeyboardToken(KeyboardToken)+0x164>
c000d107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d10a:	0f b7 c0             	movzx  eax,ax
c000d10d:	3d 18 03 00 00       	cmp    eax,0x318
c000d112:	75 06                	jne    c000d11a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d114:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d11a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11d:	0f b7 c0             	movzx  eax,ax
c000d120:	3d 19 03 00 00       	cmp    eax,0x319
c000d125:	75 06                	jne    c000d12d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d127:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d12d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d130:	0f b7 c0             	movzx  eax,ax
c000d133:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d138:	75 06                	jne    c000d140 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d13a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d143:	0f b7 c0             	movzx  eax,ax
c000d146:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d14b:	75 06                	jne    c000d153 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d14d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d156:	0f b7 c0             	movzx  eax,ax
c000d159:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d15e:	75 06                	jne    c000d166 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d160:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d169:	0f b7 c0             	movzx  eax,ax
c000d16c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d171:	75 06                	jne    c000d179 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d173:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d17c:	0f b7 c0             	movzx  eax,ax
c000d17f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d184:	75 06                	jne    c000d18c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d186:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d18c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d18f:	0f b7 c0             	movzx  eax,ax
c000d192:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d197:	75 06                	jne    c000d19f <sendKeyboardToken(KeyboardToken)+0x122>
c000d199:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d19f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a2:	0f b7 c0             	movzx  eax,ax
c000d1a5:	3d 20 03 00 00       	cmp    eax,0x320
c000d1aa:	75 06                	jne    c000d1b2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d1ac:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d1b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b5:	0f b7 c0             	movzx  eax,ax
c000d1b8:	3d 21 03 00 00       	cmp    eax,0x321
c000d1bd:	75 06                	jne    c000d1c5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d1bf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c8:	0f b7 c0             	movzx  eax,ax
c000d1cb:	3d 22 03 00 00       	cmp    eax,0x322
c000d1d0:	0f 85 f1 00 00 00    	jne    c000d2c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1d6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d1dc:	e9 e6 00 00 00       	jmp    c000d2c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1e4:	0f b7 c0             	movzx  eax,ax
c000d1e7:	3d 18 03 00 00       	cmp    eax,0x318
c000d1ec:	75 0a                	jne    c000d1f8 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d1ee:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d1f4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1fb:	0f b7 c0             	movzx  eax,ax
c000d1fe:	3d 19 03 00 00       	cmp    eax,0x319
c000d203:	75 0a                	jne    c000d20f <sendKeyboardToken(KeyboardToken)+0x192>
c000d205:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d20b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d20f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d212:	0f b7 c0             	movzx  eax,ax
c000d215:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d21a:	75 0a                	jne    c000d226 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d21c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d222:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d226:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d229:	0f b7 c0             	movzx  eax,ax
c000d22c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d231:	75 0a                	jne    c000d23d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d233:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d239:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d23d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d240:	0f b7 c0             	movzx  eax,ax
c000d243:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d248:	75 0a                	jne    c000d254 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d24a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d250:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d254:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d257:	0f b7 c0             	movzx  eax,ax
c000d25a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d25f:	75 0a                	jne    c000d26b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d261:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d267:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d26b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d26e:	0f b7 c0             	movzx  eax,ax
c000d271:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d276:	75 0a                	jne    c000d282 <sendKeyboardToken(KeyboardToken)+0x205>
c000d278:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d27e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d285:	0f b7 c0             	movzx  eax,ax
c000d288:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d28d:	75 0a                	jne    c000d299 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d28f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d295:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d299:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d29c:	0f b7 c0             	movzx  eax,ax
c000d29f:	3d 20 03 00 00       	cmp    eax,0x320
c000d2a4:	75 0a                	jne    c000d2b0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d2a6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d2ac:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2b3:	0f b7 c0             	movzx  eax,ax
c000d2b6:	3d 21 03 00 00       	cmp    eax,0x321
c000d2bb:	75 0a                	jne    c000d2c7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d2bd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d2c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ca:	0f b7 c0             	movzx  eax,ax
c000d2cd:	3d 00 02 00 00       	cmp    eax,0x200
c000d2d2:	75 2f                	jne    c000d303 <sendKeyboardToken(KeyboardToken)+0x286>
c000d2d4:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d2d9:	83 f0 01             	xor    eax,0x1
c000d2dc:	0f b6 c0             	movzx  eax,al
c000d2df:	85 c0                	test   eax,eax
c000d2e1:	74 20                	je     c000d303 <sendKeyboardToken(KeyboardToken)+0x286>
c000d2e3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d2e8:	6a 01                	push   0x1
c000d2ea:	6a 00                	push   0x0
c000d2ec:	68 c6 ce 00 c0       	push   0xc000cec6
c000d2f1:	50                   	push   eax
c000d2f2:	e8 69 86 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c000d2f7:	83 c4 10             	add    esp,0x10
c000d2fa:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d301:	eb 3a                	jmp    c000d33d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d303:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d306:	0f b7 c0             	movzx  eax,ax
c000d309:	3d 01 02 00 00       	cmp    eax,0x201
c000d30e:	75 2d                	jne    c000d33d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d310:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d315:	83 f0 01             	xor    eax,0x1
c000d318:	0f b6 c0             	movzx  eax,al
c000d31b:	85 c0                	test   eax,eax
c000d31d:	74 1e                	je     c000d33d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d31f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d324:	6a 01                	push   0x1
c000d326:	6a 00                	push   0x0
c000d328:	68 34 cf 00 c0       	push   0xc000cf34
c000d32d:	50                   	push   eax
c000d32e:	e8 2d 86 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c000d333:	83 c4 10             	add    esp,0x10
c000d336:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d33d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d340:	0f b7 c0             	movzx  eax,ax
c000d343:	3d 25 03 00 00       	cmp    eax,0x325
c000d348:	75 06                	jne    c000d350 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d34a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d353:	0f b7 c0             	movzx  eax,ax
c000d356:	3d 24 03 00 00       	cmp    eax,0x324
c000d35b:	75 06                	jne    c000d363 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d35d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d363:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d366:	0f b7 c0             	movzx  eax,ax
c000d369:	3d 23 03 00 00       	cmp    eax,0x323
c000d36e:	75 06                	jne    c000d376 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d370:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d376:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d379:	0f b7 c0             	movzx  eax,ax
c000d37c:	3d 26 03 00 00       	cmp    eax,0x326
c000d381:	75 06                	jne    c000d389 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d383:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d389:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d38c:	0f b7 c0             	movzx  eax,ax
c000d38f:	3d 27 03 00 00       	cmp    eax,0x327
c000d394:	75 06                	jne    c000d39c <sendKeyboardToken(KeyboardToken)+0x31f>
c000d396:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d39c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d39f:	0f b7 c0             	movzx  eax,ax
c000d3a2:	3d 22 03 00 00       	cmp    eax,0x322
c000d3a7:	75 06                	jne    c000d3af <sendKeyboardToken(KeyboardToken)+0x332>
c000d3a9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d3af:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d3b3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3b6:	83 f0 01             	xor    eax,0x1
c000d3b9:	0f b6 c0             	movzx  eax,al
c000d3bc:	85 c0                	test   eax,eax
c000d3be:	74 7c                	je     c000d43c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d3c0:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d3c5:	0f b6 c0             	movzx  eax,al
c000d3c8:	85 c0                	test   eax,eax
c000d3ca:	74 43                	je     c000d40f <sendKeyboardToken(KeyboardToken)+0x392>
c000d3cc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3d0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d3d4:	85 c0                	test   eax,eax
c000d3d6:	74 2b                	je     c000d403 <sendKeyboardToken(KeyboardToken)+0x386>
c000d3d8:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d3de:	89 d0                	mov    eax,edx
c000d3e0:	c1 e0 02             	shl    eax,0x2
c000d3e3:	01 d0                	add    eax,edx
c000d3e5:	01 c0                	add    eax,eax
c000d3e7:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d3ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ef:	0f b7 c0             	movzx  eax,ax
c000d3f2:	8d 50 d0             	lea    edx,[eax-0x30]
c000d3f5:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3fa:	01 d0                	add    eax,edx
c000d3fc:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d401:	eb 71                	jmp    c000d474 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d403:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d40d:	eb 65                	jmp    c000d474 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d40f:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d414:	85 c0                	test   eax,eax
c000d416:	74 18                	je     c000d430 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d418:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d41d:	0f b6 c0             	movzx  eax,al
c000d420:	83 ec 0c             	sub    esp,0xc
c000d423:	50                   	push   eax
c000d424:	e8 79 fb ff ff       	call   c000cfa2 <sendKeyToTerminal(unsigned char)>
c000d429:	83 c4 10             	add    esp,0x10
c000d42c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d430:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d43a:	eb 38                	jmp    c000d474 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43f:	0f b7 c0             	movzx  eax,ax
c000d442:	3d 01 01 00 00       	cmp    eax,0x101
c000d447:	75 2b                	jne    c000d474 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d449:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d44e:	85 c0                	test   eax,eax
c000d450:	74 18                	je     c000d46a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d452:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d457:	0f b6 c0             	movzx  eax,al
c000d45a:	83 ec 0c             	sub    esp,0xc
c000d45d:	50                   	push   eax
c000d45e:	e8 3f fb ff ff       	call   c000cfa2 <sendKeyToTerminal(unsigned char)>
c000d463:	83 c4 10             	add    esp,0x10
c000d466:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d46a:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d474:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d477:	83 f0 01             	xor    eax,0x1
c000d47a:	0f b6 c0             	movzx  eax,al
c000d47d:	85 c0                	test   eax,eax
c000d47f:	74 5a                	je     c000d4db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d481:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d484:	83 f0 01             	xor    eax,0x1
c000d487:	0f b6 c0             	movzx  eax,al
c000d48a:	85 c0                	test   eax,eax
c000d48c:	74 4d                	je     c000d4db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d48e:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d493:	83 f0 01             	xor    eax,0x1
c000d496:	0f b6 c0             	movzx  eax,al
c000d499:	85 c0                	test   eax,eax
c000d49b:	74 3e                	je     c000d4db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d49d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a0:	0f b7 c0             	movzx  eax,ax
c000d4a3:	83 f8 1f             	cmp    eax,0x1f
c000d4a6:	76 0b                	jbe    c000d4b3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d4a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4ab:	0f b7 c0             	movzx  eax,ax
c000d4ae:	83 f8 7e             	cmp    eax,0x7e
c000d4b1:	76 16                	jbe    c000d4c9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b6:	0f b7 c0             	movzx  eax,ax
c000d4b9:	83 f8 0a             	cmp    eax,0xa
c000d4bc:	74 0b                	je     c000d4c9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c1:	0f b7 c0             	movzx  eax,ax
c000d4c4:	83 f8 08             	cmp    eax,0x8
c000d4c7:	75 12                	jne    c000d4db <sendKeyboardToken(KeyboardToken)+0x45e>
c000d4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4cc:	0f b6 c0             	movzx  eax,al
c000d4cf:	83 ec 0c             	sub    esp,0xc
c000d4d2:	50                   	push   eax
c000d4d3:	e8 ca fa ff ff       	call   c000cfa2 <sendKeyToTerminal(unsigned char)>
c000d4d8:	83 c4 10             	add    esp,0x10
c000d4db:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d4de:	83 f0 01             	xor    eax,0x1
c000d4e1:	0f b6 c0             	movzx  eax,al
c000d4e4:	85 c0                	test   eax,eax
c000d4e6:	74 5d                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d4e8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4eb:	83 f0 01             	xor    eax,0x1
c000d4ee:	0f b6 c0             	movzx  eax,al
c000d4f1:	85 c0                	test   eax,eax
c000d4f3:	74 50                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d4f5:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d4fa:	0f b6 c0             	movzx  eax,al
c000d4fd:	85 c0                	test   eax,eax
c000d4ff:	74 44                	je     c000d545 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d504:	0f b7 c0             	movzx  eax,ax
c000d507:	83 f8 3f             	cmp    eax,0x3f
c000d50a:	76 39                	jbe    c000d545 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d50c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50f:	0f b7 c0             	movzx  eax,ax
c000d512:	83 f8 7f             	cmp    eax,0x7f
c000d515:	77 2e                	ja     c000d545 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51a:	88 c2                	mov    dl,al
c000d51c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d51f:	0f b7 c0             	movzx  eax,ax
c000d522:	83 f8 5f             	cmp    eax,0x5f
c000d525:	76 04                	jbe    c000d52b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d527:	b0 20                	mov    al,0x20
c000d529:	eb 02                	jmp    c000d52d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d52b:	b0 00                	mov    al,0x0
c000d52d:	89 d1                	mov    ecx,edx
c000d52f:	29 c1                	sub    ecx,eax
c000d531:	89 c8                	mov    eax,ecx
c000d533:	83 e8 40             	sub    eax,0x40
c000d536:	0f b6 c0             	movzx  eax,al
c000d539:	83 ec 0c             	sub    esp,0xc
c000d53c:	50                   	push   eax
c000d53d:	e8 60 fa ff ff       	call   c000cfa2 <sendKeyToTerminal(unsigned char)>
c000d542:	83 c4 10             	add    esp,0x10
c000d545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d548:	0f b7 c0             	movzx  eax,ax
c000d54b:	3d 00 03 00 00       	cmp    eax,0x300
c000d550:	75 12                	jne    c000d564 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d552:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d555:	83 f0 01             	xor    eax,0x1
c000d558:	0f b6 c0             	movzx  eax,al
c000d55b:	85 c0                	test   eax,eax
c000d55d:	74 05                	je     c000d564 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d55f:	e8 9f af ff ff       	call   c0008503 <doTerminalCycle()>
c000d564:	90                   	nop
c000d565:	c9                   	leave  
c000d566:	c3                   	ret    

c000d567 <clearInternalKeybuffer(VgaText*)>:
c000d567:	55                   	push   ebp
c000d568:	89 e5                	mov    ebp,esp
c000d56a:	83 ec 08             	sub    esp,0x8
c000d56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d570:	05 02 01 00 00       	add    eax,0x102
c000d575:	83 ec 0c             	sub    esp,0xc
c000d578:	50                   	push   eax
c000d579:	e8 f2 2f ff ff       	call   c0000570 <strlen>
c000d57e:	83 c4 10             	add    esp,0x10
c000d581:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d584:	81 c2 02 01 00 00    	add    edx,0x102
c000d58a:	83 ec 04             	sub    esp,0x4
c000d58d:	50                   	push   eax
c000d58e:	6a 00                	push   0x0
c000d590:	52                   	push   edx
c000d591:	e8 5a 2f ff ff       	call   c00004f0 <memset>
c000d596:	83 c4 10             	add    esp,0x10
c000d599:	90                   	nop
c000d59a:	c9                   	leave  
c000d59b:	c3                   	ret    

c000d59c <readKeyboard(VgaText*, char*, unsigned long)>:
c000d59c:	55                   	push   ebp
c000d59d:	89 e5                	mov    ebp,esp
c000d59f:	83 ec 18             	sub    esp,0x18
c000d5a2:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d5a7:	85 c0                	test   eax,eax
c000d5a9:	74 2a                	je     c000d5d5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d5ab:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d5b1:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d5b7:	83 ec 04             	sub    esp,0x4
c000d5ba:	68 40 84 02 c0       	push   0xc0028440
c000d5bf:	83 ec 08             	sub    esp,0x8
c000d5c2:	89 e2                	mov    edx,esp
c000d5c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d5c7:	89 02                	mov    DWORD PTR [edx],eax
c000d5c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d5cc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d5d0:	ff d1                	call   ecx
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	fb                   	sti    
c000d5d6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d5dd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d5e1:	0f 84 0d 01 00 00    	je     c000d6f4 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d5e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ea:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5f0:	0f be c0             	movsx  eax,al
c000d5f3:	85 c0                	test   eax,eax
c000d5f5:	75 2c                	jne    c000d623 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d5f7:	fa                   	cli    
c000d5f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d5fd:	83 c0 01             	add    eax,0x1
c000d600:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d605:	e8 a6 85 00 00       	call   c0015bb0 <schedule()>
c000d60a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d60f:	83 e8 01             	sub    eax,0x1
c000d612:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d617:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d61c:	85 c0                	test   eax,eax
c000d61e:	75 c7                	jne    c000d5e7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d620:	fb                   	sti    
c000d621:	eb c4                	jmp    c000d5e7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d623:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d626:	8d 50 01             	lea    edx,[eax+0x1]
c000d629:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d62c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d62f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d635:	88 10                	mov    BYTE PTR [eax],dl
c000d637:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d63a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d640:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d643:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d647:	83 f8 03             	cmp    eax,0x3
c000d64a:	75 1e                	jne    c000d66a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d64c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d651:	8b 00                	mov    eax,DWORD PTR [eax]
c000d653:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d656:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d65c:	83 ec 08             	sub    esp,0x8
c000d65f:	6a 02                	push   0x2
c000d661:	50                   	push   eax
c000d662:	e8 2b 41 00 00       	call   c0011792 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d66e:	83 f8 1c             	cmp    eax,0x1c
c000d671:	75 1e                	jne    c000d691 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d673:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d678:	8b 00                	mov    eax,DWORD PTR [eax]
c000d67a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d67d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d683:	83 ec 08             	sub    esp,0x8
c000d686:	6a 09                	push   0x9
c000d688:	50                   	push   eax
c000d689:	e8 04 41 00 00       	call   c0011792 <KeRaiseSignal(SigHandlerBlock*, int)>
c000d68e:	83 c4 10             	add    esp,0x10
c000d691:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d694:	05 02 01 00 00       	add    eax,0x102
c000d699:	83 ec 0c             	sub    esp,0xc
c000d69c:	50                   	push   eax
c000d69d:	e8 ce 2e ff ff       	call   c0000570 <strlen>
c000d6a2:	83 c4 10             	add    esp,0x10
c000d6a5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6a8:	81 c2 02 01 00 00    	add    edx,0x102
c000d6ae:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d6b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d6b4:	81 c2 02 01 00 00    	add    edx,0x102
c000d6ba:	83 ec 04             	sub    esp,0x4
c000d6bd:	50                   	push   eax
c000d6be:	51                   	push   ecx
c000d6bf:	52                   	push   edx
c000d6c0:	e8 0b 2d ff ff       	call   c00003d0 <memmove>
c000d6c5:	83 c4 10             	add    esp,0x10
c000d6c8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d6cc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d6d0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6d4:	83 f8 0a             	cmp    eax,0xa
c000d6d7:	74 16                	je     c000d6ef <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d6d9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6dd:	83 f8 03             	cmp    eax,0x3
c000d6e0:	74 0d                	je     c000d6ef <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d6e2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d6e6:	83 f8 1c             	cmp    eax,0x1c
c000d6e9:	0f 85 ee fe ff ff    	jne    c000d5dd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d6ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d6f2:	eb 03                	jmp    c000d6f7 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d6f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d6f7:	c9                   	leave  
c000d6f8:	c3                   	ret    
c000d6f9:	90                   	nop

c000d6fa <Keyboard::Keyboard(char const*)>:
c000d6fa:	83 ec 0c             	sub    esp,0xc
c000d6fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d701:	83 ec 08             	sub    esp,0x8
c000d704:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d708:	50                   	push   eax
c000d709:	e8 4c f1 ff ff       	call   c000c85a <Device::Device(char const*)>
c000d70e:	83 c4 10             	add    esp,0x10
c000d711:	ba dc 16 02 c0       	mov    edx,0xc00216dc
c000d716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71a:	89 10                	mov    DWORD PTR [eax],edx
c000d71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d720:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d72a:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d731:	90                   	nop
c000d732:	83 c4 0c             	add    esp,0xc
c000d735:	c3                   	ret    

c000d736 <Keyboard::~Keyboard()>:
c000d736:	83 ec 0c             	sub    esp,0xc
c000d739:	ba dc 16 02 c0       	mov    edx,0xc00216dc
c000d73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d742:	89 10                	mov    DWORD PTR [eax],edx
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 73 ee ff ff       	call   c000c5c4 <Device::~Device()>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	90                   	nop
c000d755:	83 c4 0c             	add    esp,0xc
c000d758:	c3                   	ret    
c000d759:	90                   	nop

c000d75a <Keyboard::~Keyboard()>:
c000d75a:	83 ec 0c             	sub    esp,0xc
c000d75d:	83 ec 0c             	sub    esp,0xc
c000d760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d764:	e8 cd ff ff ff       	call   c000d736 <Keyboard::~Keyboard()>
c000d769:	83 c4 10             	add    esp,0x10
c000d76c:	83 ec 08             	sub    esp,0x8
c000d76f:	68 5c 01 00 00       	push   0x15c
c000d774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d778:	e8 9b d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d77d:	83 c4 10             	add    esp,0x10
c000d780:	83 c4 0c             	add    esp,0xc
c000d783:	c3                   	ret    

c000d784 <LogicalDisk::close(int, int, void*)>:
c000d784:	83 c8 ff             	or     eax,0xffffffff
c000d787:	c3                   	ret    

c000d788 <LogicalDisk::~LogicalDisk()>:
c000d788:	83 ec 0c             	sub    esp,0xc
c000d78b:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000d790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d794:	89 10                	mov    DWORD PTR [eax],edx
c000d796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79a:	83 ec 0c             	sub    esp,0xc
c000d79d:	50                   	push   eax
c000d79e:	e8 21 ee ff ff       	call   c000c5c4 <Device::~Device()>
c000d7a3:	83 c4 10             	add    esp,0x10
c000d7a6:	90                   	nop
c000d7a7:	83 c4 0c             	add    esp,0xc
c000d7aa:	c3                   	ret    
c000d7ab:	90                   	nop

c000d7ac <LogicalDisk::~LogicalDisk()>:
c000d7ac:	83 ec 0c             	sub    esp,0xc
c000d7af:	83 ec 0c             	sub    esp,0xc
c000d7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7b6:	e8 cd ff ff ff       	call   c000d788 <LogicalDisk::~LogicalDisk()>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	83 ec 08             	sub    esp,0x8
c000d7c1:	68 78 01 00 00       	push   0x178
c000d7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ca:	e8 49 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	83 c4 0c             	add    esp,0xc
c000d7d5:	c3                   	ret    

c000d7d6 <LogicalDisk::open(int, int, void*)>:
c000d7d6:	83 ec 18             	sub    esp,0x18
c000d7d9:	68 08 17 02 c0       	push   0xc0021708
c000d7de:	e8 0e 3b 00 00       	call   c00112f1 <KePanic(char const*)>
c000d7e3:	83 c8 ff             	or     eax,0xffffffff
c000d7e6:	83 c4 1c             	add    esp,0x1c
c000d7e9:	c3                   	ret    

c000d7ea <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d7ea:	53                   	push   ebx
c000d7eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d7f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d7f7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d7fd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d803:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d809:	77 10                	ja     c000d81b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d80b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d811:	89 d3                	mov    ebx,edx
c000d813:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d819:	72 05                	jb     c000d820 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d81b:	83 c8 ff             	or     eax,0xffffffff
c000d81e:	89 c2                	mov    edx,eax
c000d820:	5b                   	pop    ebx
c000d821:	c3                   	ret    

c000d822 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d822:	56                   	push   esi
c000d823:	83 c8 ff             	or     eax,0xffffffff
c000d826:	53                   	push   ebx
c000d827:	89 c2                	mov    edx,eax
c000d829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d82d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d831:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d835:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d83b:	77 27                	ja     c000d864 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d83d:	89 d8                	mov    eax,ebx
c000d83f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d845:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d84b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d850:	89 c2                	mov    edx,eax
c000d852:	73 10                	jae    c000d864 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d854:	89 c8                	mov    eax,ecx
c000d856:	89 da                	mov    edx,ebx
c000d858:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d85e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d864:	5b                   	pop    ebx
c000d865:	5e                   	pop    esi
c000d866:	c3                   	ret    
c000d867:	90                   	nop

c000d868 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d868:	83 ec 1c             	sub    esp,0x1c
c000d86b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d86f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d877:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d87b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d87f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d882:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d886:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d88e:	83 ec 08             	sub    esp,0x8
c000d891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d895:	50                   	push   eax
c000d896:	e8 bf ef ff ff       	call   c000c85a <Device::Device(char const*)>
c000d89b:	83 c4 10             	add    esp,0x10
c000d89e:	ba 54 17 02 c0       	mov    edx,0xc0021754
c000d8a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a7:	89 10                	mov    DWORD PTR [eax],edx
c000d8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ad:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8b8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d8bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8c3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8ce:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d8d8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d8dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d8e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d8e4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d8ea:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d8f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d8f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d8f7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8fb:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d901:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d907:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d90b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d90f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d915:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d919:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d923:	90                   	nop
c000d924:	83 c4 1c             	add    esp,0x1c
c000d927:	c3                   	ret    

c000d928 <LogicalDisk::assignDriveLetter()>:
c000d928:	55                   	push   ebp
c000d929:	57                   	push   edi
c000d92a:	56                   	push   esi
c000d92b:	53                   	push   ebx
c000d92c:	83 ec 14             	sub    esp,0x14
c000d92f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d933:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d939:	b0 41                	mov    al,0x41
c000d93b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d941:	84 d2                	test   dl,dl
c000d943:	75 02                	jne    c000d947 <LogicalDisk::assignDriveLetter()+0x1f>
c000d945:	b0 43                	mov    al,0x43
c000d947:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d94d:	0f b6 ca             	movzx  ecx,dl
c000d950:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d954:	0f be e8             	movsx  ebp,al
c000d957:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d95d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d961:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d965:	3c 43                	cmp    al,0x43
c000d967:	75 10                	jne    c000d979 <LogicalDisk::assignDriveLetter()+0x51>
c000d969:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d970:	75 5a                	jne    c000d9cc <LogicalDisk::assignDriveLetter()+0xa4>
c000d972:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d977:	75 53                	jne    c000d9cc <LogicalDisk::assignDriveLetter()+0xa4>
c000d979:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d97c:	ba 01 00 00 00       	mov    edx,0x1
c000d981:	89 34 24             	mov    DWORD PTR [esp],esi
c000d984:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d987:	d3 e2                	shl    edx,cl
c000d989:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d98d:	89 d7                	mov    edi,edx
c000d98f:	89 d6                	mov    esi,edx
c000d991:	c1 ff 1f             	sar    edi,0x1f
c000d994:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d998:	21 f9                	and    ecx,edi
c000d99a:	09 d1                	or     ecx,edx
c000d99c:	75 2e                	jne    c000d9cc <LogicalDisk::assignDriveLetter()+0xa4>
c000d99e:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d9a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d9a6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d9ac:	09 f2                	or     edx,esi
c000d9ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d9b1:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d9b7:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d9be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d9c2:	09 fa                	or     edx,edi
c000d9c4:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d9ca:	eb 0d                	jmp    c000d9d9 <LogicalDisk::assignDriveLetter()+0xb1>
c000d9cc:	8d 50 01             	lea    edx,[eax+0x1]
c000d9cf:	45                   	inc    ebp
c000d9d0:	88 d0                	mov    al,dl
c000d9d2:	80 fa 5b             	cmp    dl,0x5b
c000d9d5:	75 8e                	jne    c000d965 <LogicalDisk::assignDriveLetter()+0x3d>
c000d9d7:	31 c0                	xor    eax,eax
c000d9d9:	83 c4 14             	add    esp,0x14
c000d9dc:	5b                   	pop    ebx
c000d9dd:	5e                   	pop    esi
c000d9de:	5f                   	pop    edi
c000d9df:	5d                   	pop    ebp
c000d9e0:	c3                   	ret    
c000d9e1:	90                   	nop

c000d9e2 <LogicalDisk::mount()>:
c000d9e2:	56                   	push   esi
c000d9e3:	53                   	push   ebx
c000d9e4:	53                   	push   ebx
c000d9e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9e9:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d9ef:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d9f9:	85 db                	test   ebx,ebx
c000d9fb:	74 27                	je     c000da24 <LogicalDisk::mount()+0x42>
c000d9fd:	51                   	push   ecx
c000d9fe:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000da05:	8b 13                	mov    edx,DWORD PTR [ebx]
c000da07:	83 e8 41             	sub    eax,0x41
c000da0a:	50                   	push   eax
c000da0b:	56                   	push   esi
c000da0c:	53                   	push   ebx
c000da0d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000da10:	83 c4 10             	add    esp,0x10
c000da13:	84 c0                	test   al,al
c000da15:	74 08                	je     c000da1f <LogicalDisk::mount()+0x3d>
c000da17:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000da1d:	eb 07                	jmp    c000da26 <LogicalDisk::mount()+0x44>
c000da1f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000da22:	eb d5                	jmp    c000d9f9 <LogicalDisk::mount()+0x17>
c000da24:	31 c0                	xor    eax,eax
c000da26:	5a                   	pop    edx
c000da27:	5b                   	pop    ebx
c000da28:	5e                   	pop    esi
c000da29:	c3                   	ret    

c000da2a <LogicalDisk::unmount()>:
c000da2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da2e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000da38:	c3                   	ret    
c000da39:	90                   	nop

c000da3a <LogicalDisk::eject()>:
c000da3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da3e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000da44:	8b 10                	mov    edx,DWORD PTR [eax]
c000da46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000da4a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000da4d:	90                   	nop

c000da4e <LogicalDisk::unassignDriveLetter()>:
c000da4e:	57                   	push   edi
c000da4f:	56                   	push   esi
c000da50:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000da54:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000da5b:	85 c9                	test   ecx,ecx
c000da5d:	75 0f                	jne    c000da6e <LogicalDisk::unassignDriveLetter()+0x20>
c000da5f:	c7 44 24 0c 2c 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc002172c
c000da67:	5e                   	pop    esi
c000da68:	5f                   	pop    edi
c000da69:	e9 83 38 00 00       	jmp    c00112f1 <KePanic(char const*)>
c000da6e:	83 e9 41             	sub    ecx,0x41
c000da71:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000da78:	b8 01 00 00 00       	mov    eax,0x1
c000da7d:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000da88:	d3 e0                	shl    eax,cl
c000da8a:	89 c7                	mov    edi,eax
c000da8c:	f7 d0                	not    eax
c000da8e:	c1 ff 1f             	sar    edi,0x1f
c000da91:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da97:	89 fe                	mov    esi,edi
c000da99:	f7 d6                	not    esi
c000da9b:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000daa1:	5e                   	pop    esi
c000daa2:	5f                   	pop    edi
c000daa3:	c3                   	ret    

c000daa4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000daa4:	57                   	push   edi
c000daa5:	56                   	push   esi
c000daa6:	53                   	push   ebx
c000daa7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000daab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dab3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dab7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dabd:	77 41                	ja     c000db00 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000dabf:	99                   	cdq    
c000dac0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000dac6:	01 c8                	add    eax,ecx
c000dac8:	11 da                	adc    edx,ebx
c000daca:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dad0:	19 d7                	sbb    edi,edx
c000dad2:	72 33                	jb     c000db07 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dad4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dada:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dae0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dae4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dae8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000daee:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000daf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daf8:	5b                   	pop    ebx
c000daf9:	5e                   	pop    esi
c000dafa:	5f                   	pop    edi
c000dafb:	e9 c6 0a 00 00       	jmp    c000e5c6 <VCache::read(unsigned long long, int, void*)>
c000db00:	b8 05 00 00 00       	mov    eax,0x5
c000db05:	eb 05                	jmp    c000db0c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000db07:	b8 07 00 00 00       	mov    eax,0x7
c000db0c:	5b                   	pop    ebx
c000db0d:	5e                   	pop    esi
c000db0e:	5f                   	pop    edi
c000db0f:	c3                   	ret    

c000db10 <LogicalDisk::write(unsigned long long, int, void*)>:
c000db10:	57                   	push   edi
c000db11:	56                   	push   esi
c000db12:	53                   	push   ebx
c000db13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000db17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000db1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000db1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db29:	77 41                	ja     c000db6c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000db2b:	99                   	cdq    
c000db2c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000db32:	01 c8                	add    eax,ecx
c000db34:	11 da                	adc    edx,ebx
c000db36:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000db3c:	19 d7                	sbb    edi,edx
c000db3e:	72 33                	jb     c000db73 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000db40:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000db46:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000db4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000db50:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000db54:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000db5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000db60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000db64:	5b                   	pop    ebx
c000db65:	5e                   	pop    esi
c000db66:	5f                   	pop    edi
c000db67:	e9 6c 09 00 00       	jmp    c000e4d8 <VCache::write(unsigned long long, int, void*)>
c000db6c:	b8 05 00 00 00       	mov    eax,0x5
c000db71:	eb 05                	jmp    c000db78 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000db73:	b8 07 00 00 00       	mov    eax,0x7
c000db78:	5b                   	pop    ebx
c000db79:	5e                   	pop    esi
c000db7a:	5f                   	pop    edi
c000db7b:	c3                   	ret    

c000db7c <Mouse::Mouse(char const*)>:
c000db7c:	83 ec 0c             	sub    esp,0xc
c000db7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db83:	83 ec 08             	sub    esp,0x8
c000db86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8a:	50                   	push   eax
c000db8b:	e8 ca ec ff ff       	call   c000c85a <Device::Device(char const*)>
c000db90:	83 c4 10             	add    esp,0x10
c000db93:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000db98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9c:	89 10                	mov    DWORD PTR [eax],edx
c000db9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dba2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dbac:	90                   	nop
c000dbad:	83 c4 0c             	add    esp,0xc
c000dbb0:	c3                   	ret    
c000dbb1:	90                   	nop
c000dbb2:	66 90                	xchg   ax,ax

c000dbb4 <Mouse::~Mouse()>:
c000dbb4:	83 ec 0c             	sub    esp,0xc
c000dbb7:	ba 80 17 02 c0       	mov    edx,0xc0021780
c000dbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc0:	89 10                	mov    DWORD PTR [eax],edx
c000dbc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbc6:	83 ec 0c             	sub    esp,0xc
c000dbc9:	50                   	push   eax
c000dbca:	e8 f5 e9 ff ff       	call   c000c5c4 <Device::~Device()>
c000dbcf:	83 c4 10             	add    esp,0x10
c000dbd2:	90                   	nop
c000dbd3:	83 c4 0c             	add    esp,0xc
c000dbd6:	c3                   	ret    
c000dbd7:	90                   	nop

c000dbd8 <Mouse::~Mouse()>:
c000dbd8:	83 ec 0c             	sub    esp,0xc
c000dbdb:	83 ec 0c             	sub    esp,0xc
c000dbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe2:	e8 cd ff ff ff       	call   c000dbb4 <Mouse::~Mouse()>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	83 ec 08             	sub    esp,0x8
c000dbed:	68 58 01 00 00       	push   0x158
c000dbf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf6:	e8 1d cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dbfb:	83 c4 10             	add    esp,0x10
c000dbfe:	83 c4 0c             	add    esp,0xc
c000dc01:	c3                   	ret    

c000dc02 <NIC::getMAC()>:
c000dc02:	31 c0                	xor    eax,eax
c000dc04:	31 d2                	xor    edx,edx
c000dc06:	c3                   	ret    
c000dc07:	90                   	nop

c000dc08 <NIC::write(int, unsigned char*, int*)>:
c000dc08:	b8 01 00 00 00       	mov    eax,0x1
c000dc0d:	c3                   	ret    

c000dc0e <NIC::NIC(char const*)>:
c000dc0e:	83 ec 0c             	sub    esp,0xc
c000dc11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc15:	83 ec 08             	sub    esp,0x8
c000dc18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc1c:	50                   	push   eax
c000dc1d:	e8 38 ec ff ff       	call   c000c85a <Device::Device(char const*)>
c000dc22:	83 c4 10             	add    esp,0x10
c000dc25:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c000dc2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc2e:	89 10                	mov    DWORD PTR [eax],edx
c000dc30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc34:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dc3e:	90                   	nop
c000dc3f:	83 c4 0c             	add    esp,0xc
c000dc42:	c3                   	ret    
c000dc43:	90                   	nop

c000dc44 <NIC::~NIC()>:
c000dc44:	83 ec 0c             	sub    esp,0xc
c000dc47:	ba ac 17 02 c0       	mov    edx,0xc00217ac
c000dc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc50:	89 10                	mov    DWORD PTR [eax],edx
c000dc52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc56:	83 ec 0c             	sub    esp,0xc
c000dc59:	50                   	push   eax
c000dc5a:	e8 65 e9 ff ff       	call   c000c5c4 <Device::~Device()>
c000dc5f:	83 c4 10             	add    esp,0x10
c000dc62:	90                   	nop
c000dc63:	83 c4 0c             	add    esp,0xc
c000dc66:	c3                   	ret    
c000dc67:	90                   	nop

c000dc68 <NIC::~NIC()>:
c000dc68:	83 ec 0c             	sub    esp,0xc
c000dc6b:	83 ec 0c             	sub    esp,0xc
c000dc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc72:	e8 cd ff ff ff       	call   c000dc44 <NIC::~NIC()>
c000dc77:	83 c4 10             	add    esp,0x10
c000dc7a:	83 ec 08             	sub    esp,0x8
c000dc7d:	68 58 01 00 00       	push   0x158
c000dc82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc86:	e8 8d cb ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc8b:	83 c4 10             	add    esp,0x10
c000dc8e:	83 c4 0c             	add    esp,0xc
c000dc91:	c3                   	ret    

c000dc92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc92:	55                   	push   ebp
c000dc93:	57                   	push   edi
c000dc94:	56                   	push   esi
c000dc95:	53                   	push   ebx
c000dc96:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc9c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dca3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dcaa:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dcb1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dcb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dcbc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dcc0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dcc7:	e8 8a ec ff ff       	call   c000c956 <Device::getName()>
c000dccc:	5a                   	pop    edx
c000dccd:	59                   	pop    ecx
c000dcce:	50                   	push   eax
c000dccf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dcd3:	55                   	push   ebp
c000dcd4:	e8 67 29 ff ff       	call   c0000640 <strcpy>
c000dcd9:	5b                   	pop    ebx
c000dcda:	58                   	pop    eax
c000dcdb:	68 d8 17 02 c0       	push   0xc00217d8
c000dce0:	55                   	push   ebp
c000dce1:	e8 5a 2b ff ff       	call   c0000840 <strcat>
c000dce6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dced:	e8 c4 9d ff ff       	call   c0007ab6 <malloc>
c000dcf2:	83 c4 0c             	add    esp,0xc
c000dcf5:	89 c3                	mov    ebx,eax
c000dcf7:	57                   	push   edi
c000dcf8:	56                   	push   esi
c000dcf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcfd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dd01:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dd08:	55                   	push   ebp
c000dd09:	50                   	push   eax
c000dd0a:	e8 59 fb ff ff       	call   c000d868 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd0f:	83 c4 14             	add    esp,0x14
c000dd12:	53                   	push   ebx
c000dd13:	e8 10 fc ff ff       	call   c000d928 <LogicalDisk::assignDriveLetter()>
c000dd18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd1b:	e8 c2 fc ff ff       	call   c000d9e2 <LogicalDisk::mount()>
c000dd20:	58                   	pop    eax
c000dd21:	5a                   	pop    edx
c000dd22:	53                   	push   ebx
c000dd23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dd2a:	e8 93 e9 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c000dd2f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dd35:	5b                   	pop    ebx
c000dd36:	5e                   	pop    esi
c000dd37:	5f                   	pop    edi
c000dd38:	5d                   	pop    ebp
c000dd39:	c3                   	ret    

c000dd3a <createPartitionsForDisk(PhysicalDisk*)>:
c000dd3a:	55                   	push   ebp
c000dd3b:	57                   	push   edi
c000dd3c:	56                   	push   esi
c000dd3d:	53                   	push   ebx
c000dd3e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dd44:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dd4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dd51:	3d 00 02 00 00       	cmp    eax,0x200
c000dd56:	74 27                	je     c000dd7f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dd58:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dd5e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dd64:	83 ec 10             	sub    esp,0x10
c000dd67:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dd6b:	99                   	cdq    
c000dd6c:	c1 e6 0a             	shl    esi,0xa
c000dd6f:	52                   	push   edx
c000dd70:	89 fd                	mov    ebp,edi
c000dd72:	50                   	push   eax
c000dd73:	55                   	push   ebp
c000dd74:	56                   	push   esi
c000dd75:	e8 a6 14 01 00       	call   c001f220 <__udivdi3>
c000dd7a:	e9 b9 00 00 00       	jmp    c000de38 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd7f:	83 ec 0c             	sub    esp,0xc
c000dd82:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd84:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dd88:	56                   	push   esi
c000dd89:	6a 01                	push   0x1
c000dd8b:	6a 00                	push   0x0
c000dd8d:	6a 00                	push   0x0
c000dd8f:	53                   	push   ebx
c000dd90:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd93:	83 c4 20             	add    esp,0x20
c000dd96:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd9e:	75 0a                	jne    c000ddaa <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dda0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dda8:	74 2c                	je     c000ddd6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ddaa:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ddb0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ddb6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ddbc:	83 ec 10             	sub    esp,0x10
c000ddbf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ddc3:	89 f7                	mov    edi,esi
c000ddc5:	c1 e0 0a             	shl    eax,0xa
c000ddc8:	c1 ff 1f             	sar    edi,0x1f
c000ddcb:	57                   	push   edi
c000ddcc:	56                   	push   esi
c000ddcd:	52                   	push   edx
c000ddce:	50                   	push   eax
c000ddcf:	e8 4c 14 01 00       	call   c001f220 <__udivdi3>
c000ddd4:	eb 62                	jmp    c000de38 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ddd6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dddd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dde4:	89 cf                	mov    edi,ecx
c000dde6:	83 e2 7f             	and    edx,0x7f
c000dde9:	83 e7 7f             	and    edi,0x7f
c000ddec:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ddf3:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ddf6:	83 e0 7f             	and    eax,0x7f
c000ddf9:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ddfc:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000de03:	83 e0 7f             	and    eax,0x7f
c000de06:	01 d0                	add    eax,edx
c000de08:	89 c5                	mov    ebp,eax
c000de0a:	84 c0                	test   al,al
c000de0c:	74 41                	je     c000de4f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000de0e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de14:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de1a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de20:	83 ec 10             	sub    esp,0x10
c000de23:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de27:	89 f7                	mov    edi,esi
c000de29:	c1 e0 0a             	shl    eax,0xa
c000de2c:	c1 ff 1f             	sar    edi,0x1f
c000de2f:	57                   	push   edi
c000de30:	56                   	push   esi
c000de31:	52                   	push   edx
c000de32:	50                   	push   eax
c000de33:	e8 e8 13 01 00       	call   c001f220 <__udivdi3>
c000de38:	83 c4 14             	add    esp,0x14
c000de3b:	52                   	push   edx
c000de3c:	50                   	push   eax
c000de3d:	6a 00                	push   0x0
c000de3f:	6a 00                	push   0x0
c000de41:	53                   	push   ebx
c000de42:	e8 4b fe ff ff       	call   c000dc92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000de47:	83 c4 20             	add    esp,0x20
c000de4a:	e9 73 01 00 00       	jmp    c000dfc2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000de4f:	89 f0                	mov    eax,esi
c000de51:	31 c9                	xor    ecx,ecx
c000de53:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000de5a:	75 02                	jne    c000de5e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000de5c:	89 cd                	mov    ebp,ecx
c000de5e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000de65:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000de6c:	c1 e2 08             	shl    edx,0x8
c000de6f:	c1 e6 10             	shl    esi,0x10
c000de72:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000de7a:	09 f2                	or     edx,esi
c000de7c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000de84:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000de8b:	83 c0 10             	add    eax,0x10
c000de8e:	09 f2                	or     edx,esi
c000de90:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de97:	c1 e6 18             	shl    esi,0x18
c000de9a:	09 f2                	or     edx,esi
c000de9c:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000dea3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000dea7:	c1 e6 10             	shl    esi,0x10
c000deaa:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000deb1:	c1 e2 08             	shl    edx,0x8
c000deb4:	09 f2                	or     edx,esi
c000deb6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000debd:	09 f2                	or     edx,esi
c000debf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000dec6:	c1 e6 18             	shl    esi,0x18
c000dec9:	09 f2                	or     edx,esi
c000decb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000decf:	41                   	inc    ecx
c000ded0:	83 f9 04             	cmp    ecx,0x4
c000ded3:	0f 85 7a ff ff ff    	jne    c000de53 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ded9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dedd:	83 f0 01             	xor    eax,0x1
c000dee0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000dee4:	75 4f                	jne    c000df35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000dee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deea:	83 f0 01             	xor    eax,0x1
c000deed:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000def1:	75 42                	jne    c000df35 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000def3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000defb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000df03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000df09:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000df0f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000df15:	0f a4 c2 0a          	shld   edx,eax,0xa
c000df19:	89 f7                	mov    edi,esi
c000df1b:	c1 e0 0a             	shl    eax,0xa
c000df1e:	c1 ff 1f             	sar    edi,0x1f
c000df21:	57                   	push   edi
c000df22:	56                   	push   esi
c000df23:	52                   	push   edx
c000df24:	50                   	push   eax
c000df25:	e8 f6 12 01 00       	call   c001f220 <__udivdi3>
c000df2a:	83 c4 10             	add    esp,0x10
c000df2d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000df35:	89 e8                	mov    eax,ebp
c000df37:	0f b6 e8             	movzx  ebp,al
c000df3a:	85 ed                	test   ebp,ebp
c000df3c:	74 50                	je     c000df8e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000df3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df42:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000df46:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df4a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000df4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df56:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df5a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df62:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000df6a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000df6e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000df72:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df76:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df7e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000df82:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000df86:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000df8a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000df8e:	31 ed                	xor    ebp,ebp
c000df90:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df94:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df98:	89 f8                	mov    eax,edi
c000df9a:	09 f0                	or     eax,esi
c000df9c:	74 1e                	je     c000dfbc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df9e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dfa2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dfa6:	89 d1                	mov    ecx,edx
c000dfa8:	09 c1                	or     ecx,eax
c000dfaa:	74 10                	je     c000dfbc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	57                   	push   edi
c000dfb0:	56                   	push   esi
c000dfb1:	52                   	push   edx
c000dfb2:	50                   	push   eax
c000dfb3:	53                   	push   ebx
c000dfb4:	e8 d9 fc ff ff       	call   c000dc92 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dfb9:	83 c4 20             	add    esp,0x20
c000dfbc:	45                   	inc    ebp
c000dfbd:	83 fd 04             	cmp    ebp,0x4
c000dfc0:	75 ce                	jne    c000df90 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000dfc2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000dfc8:	5b                   	pop    ebx
c000dfc9:	5e                   	pop    esi
c000dfca:	5f                   	pop    edi
c000dfcb:	5d                   	pop    ebp
c000dfcc:	c3                   	ret    
c000dfcd:	66 90                	xchg   ax,ax
c000dfcf:	90                   	nop

c000dfd0 <Serial::Serial(char const*)>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfd7:	83 ec 08             	sub    esp,0x8
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	50                   	push   eax
c000dfdf:	e8 76 e8 ff ff       	call   c000c85a <Device::Device(char const*)>
c000dfe4:	83 c4 10             	add    esp,0x10
c000dfe7:	ba ec 17 02 c0       	mov    edx,0xc00217ec
c000dfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff0:	89 10                	mov    DWORD PTR [eax],edx
c000dff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dff6:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e000:	90                   	nop
c000e001:	83 c4 0c             	add    esp,0xc
c000e004:	c3                   	ret    
c000e005:	90                   	nop
c000e006:	66 90                	xchg   ax,ax

c000e008 <Serial::~Serial()>:
c000e008:	83 ec 0c             	sub    esp,0xc
c000e00b:	ba ec 17 02 c0       	mov    edx,0xc00217ec
c000e010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e014:	89 10                	mov    DWORD PTR [eax],edx
c000e016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e01a:	83 ec 0c             	sub    esp,0xc
c000e01d:	50                   	push   eax
c000e01e:	e8 a1 e5 ff ff       	call   c000c5c4 <Device::~Device()>
c000e023:	83 c4 10             	add    esp,0x10
c000e026:	90                   	nop
c000e027:	83 c4 0c             	add    esp,0xc
c000e02a:	c3                   	ret    
c000e02b:	90                   	nop

c000e02c <Serial::~Serial()>:
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	83 ec 0c             	sub    esp,0xc
c000e032:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e036:	e8 cd ff ff ff       	call   c000e008 <Serial::~Serial()>
c000e03b:	83 c4 10             	add    esp,0x10
c000e03e:	83 ec 08             	sub    esp,0x8
c000e041:	68 58 01 00 00       	push   0x158
c000e046:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04a:	e8 c9 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	83 c4 0c             	add    esp,0xc
c000e055:	c3                   	ret    
c000e056:	66 90                	xchg   ax,ax

c000e058 <Timer::Timer(char const*)>:
c000e058:	83 ec 0c             	sub    esp,0xc
c000e05b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e05f:	83 ec 08             	sub    esp,0x8
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	50                   	push   eax
c000e067:	e8 ee e7 ff ff       	call   c000c85a <Device::Device(char const*)>
c000e06c:	83 c4 10             	add    esp,0x10
c000e06f:	ba 30 18 02 c0       	mov    edx,0xc0021830
c000e074:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e078:	89 10                	mov    DWORD PTR [eax],edx
c000e07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e07e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e088:	90                   	nop
c000e089:	83 c4 0c             	add    esp,0xc
c000e08c:	c3                   	ret    
c000e08d:	90                   	nop
c000e08e:	66 90                	xchg   ax,ax

c000e090 <Timer::~Timer()>:
c000e090:	83 ec 0c             	sub    esp,0xc
c000e093:	ba 30 18 02 c0       	mov    edx,0xc0021830
c000e098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e09c:	89 10                	mov    DWORD PTR [eax],edx
c000e09e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0a2:	83 ec 0c             	sub    esp,0xc
c000e0a5:	50                   	push   eax
c000e0a6:	e8 19 e5 ff ff       	call   c000c5c4 <Device::~Device()>
c000e0ab:	83 c4 10             	add    esp,0x10
c000e0ae:	90                   	nop
c000e0af:	83 c4 0c             	add    esp,0xc
c000e0b2:	c3                   	ret    
c000e0b3:	90                   	nop

c000e0b4 <Timer::~Timer()>:
c000e0b4:	83 ec 0c             	sub    esp,0xc
c000e0b7:	83 ec 0c             	sub    esp,0xc
c000e0ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0be:	e8 cd ff ff ff       	call   c000e090 <Timer::~Timer()>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	83 ec 08             	sub    esp,0x8
c000e0c9:	68 5c 01 00 00       	push   0x15c
c000e0ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0d2:	e8 41 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e0d7:	83 c4 10             	add    esp,0x10
c000e0da:	83 c4 0c             	add    esp,0xc
c000e0dd:	c3                   	ret    

c000e0de <Timer::read()>:
c000e0de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e0e2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e0e8:	c3                   	ret    

c000e0e9 <setupTimer(int)>:
c000e0e9:	53                   	push   ebx
c000e0ea:	83 ec 14             	sub    esp,0x14
c000e0ed:	68 5c 01 00 00       	push   0x15c
c000e0f2:	e8 bf 99 ff ff       	call   c0007ab6 <malloc>
c000e0f7:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0fa:	89 c3                	mov    ebx,eax
c000e0fc:	e8 8b 09 01 00       	call   c001ea8c <PIT::PIT()>
c000e101:	58                   	pop    eax
c000e102:	5a                   	pop    edx
c000e103:	53                   	push   ebx
c000e104:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e10a:	e8 b3 e5 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c000e10f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e111:	6a 00                	push   0x0
c000e113:	6a 00                	push   0x0
c000e115:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e119:	53                   	push   ebx
c000e11a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e11d:	89 d8                	mov    eax,ebx
c000e11f:	83 c4 28             	add    esp,0x28
c000e122:	5b                   	pop    ebx
c000e123:	c3                   	ret    

c000e124 <timerHandler(unsigned int)>:
c000e124:	56                   	push   esi
c000e125:	53                   	push   ebx
c000e126:	51                   	push   ecx
c000e127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e12b:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e131:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e138:	0f 84 4a 01 00 00    	je     c000e288 <timerHandler(unsigned int)+0x164>
c000e13e:	fa                   	cli    
c000e13f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e145:	83 ec 0c             	sub    esp,0xc
c000e148:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e14e:	68 d8 96 02 c0       	push   0xc00296d8
c000e153:	e8 98 16 01 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e158:	83 c4 10             	add    esp,0x10
c000e15b:	84 c0                	test   al,al
c000e15d:	0f 85 a1 00 00 00    	jne    c000e204 <timerHandler(unsigned int)+0xe0>
c000e163:	83 ec 0c             	sub    esp,0xc
c000e166:	68 d8 96 02 c0       	push   0xc00296d8
c000e16b:	e8 9c 16 01 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e170:	83 c4 10             	add    esp,0x10
c000e173:	89 c6                	mov    esi,eax
c000e175:	8d 76 00             	lea    esi,[esi+0x0]
c000e178:	83 ec 0c             	sub    esp,0xc
c000e17b:	68 d8 96 02 c0       	push   0xc00296d8
c000e180:	e8 87 16 01 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e185:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e18c:	89 c3                	mov    ebx,eax
c000e18e:	e8 81 16 01 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e193:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e196:	83 c4 10             	add    esp,0x10
c000e199:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e19f:	77 23                	ja     c000e1c4 <timerHandler(unsigned int)+0xa0>
c000e1a1:	83 ec 0c             	sub    esp,0xc
c000e1a4:	53                   	push   ebx
c000e1a5:	e8 1e 7f 00 00       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c000e1aa:	83 c4 10             	add    esp,0x10
c000e1ad:	39 de                	cmp    esi,ebx
c000e1af:	75 27                	jne    c000e1d8 <timerHandler(unsigned int)+0xb4>
c000e1b1:	83 ec 0c             	sub    esp,0xc
c000e1b4:	68 d8 96 02 c0       	push   0xc00296d8
c000e1b9:	e8 4e 16 01 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1be:	89 c6                	mov    esi,eax
c000e1c0:	eb 12                	jmp    c000e1d4 <timerHandler(unsigned int)+0xb0>
c000e1c2:	66 90                	xchg   ax,ax
c000e1c4:	52                   	push   edx
c000e1c5:	52                   	push   edx
c000e1c6:	53                   	push   ebx
c000e1c7:	68 d8 96 02 c0       	push   0xc00296d8
c000e1cc:	e8 ff 16 01 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e1d1:	8d 76 00             	lea    esi,[esi+0x0]
c000e1d4:	83 c4 10             	add    esp,0x10
c000e1d7:	90                   	nop
c000e1d8:	83 ec 0c             	sub    esp,0xc
c000e1db:	68 d8 96 02 c0       	push   0xc00296d8
c000e1e0:	e8 0b 16 01 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e1e5:	83 c4 10             	add    esp,0x10
c000e1e8:	84 c0                	test   al,al
c000e1ea:	75 18                	jne    c000e204 <timerHandler(unsigned int)+0xe0>
c000e1ec:	83 ec 0c             	sub    esp,0xc
c000e1ef:	68 d8 96 02 c0       	push   0xc00296d8
c000e1f4:	e8 13 16 01 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e1f9:	83 c4 10             	add    esp,0x10
c000e1fc:	39 f0                	cmp    eax,esi
c000e1fe:	0f 85 74 ff ff ff    	jne    c000e178 <timerHandler(unsigned int)+0x54>
c000e204:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e209:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e20d:	74 41                	je     c000e250 <timerHandler(unsigned int)+0x12c>
c000e20f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e216:	74 38                	je     c000e250 <timerHandler(unsigned int)+0x12c>
c000e218:	fa                   	cli    
c000e219:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e21f:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e224:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e22a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e22d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e233:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e236:	72 08                	jb     c000e240 <timerHandler(unsigned int)+0x11c>
c000e238:	e8 73 79 00 00       	call   c0015bb0 <schedule()>
c000e23d:	8d 76 00             	lea    esi,[esi+0x0]
c000e240:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e245:	48                   	dec    eax
c000e246:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e24b:	75 03                	jne    c000e250 <timerHandler(unsigned int)+0x12c>
c000e24d:	fb                   	sti    
c000e24e:	66 90                	xchg   ax,ax
c000e250:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e255:	48                   	dec    eax
c000e256:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e25b:	75 1b                	jne    c000e278 <timerHandler(unsigned int)+0x154>
c000e25d:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e264:	74 12                	je     c000e278 <timerHandler(unsigned int)+0x154>
c000e266:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e270:	e8 3b 79 00 00       	call   c0015bb0 <schedule()>
c000e275:	8d 76 00             	lea    esi,[esi+0x0]
c000e278:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e27d:	48                   	dec    eax
c000e27e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e283:	75 03                	jne    c000e288 <timerHandler(unsigned int)+0x164>
c000e285:	fb                   	sti    
c000e286:	66 90                	xchg   ax,ax
c000e288:	58                   	pop    eax
c000e289:	5b                   	pop    ebx
c000e28a:	5e                   	pop    esi
c000e28b:	c3                   	ret    

c000e28c <VCache::VCache(PhysicalDisk*)>:
c000e28c:	53                   	push   ebx
c000e28d:	83 ec 18             	sub    esp,0x18
c000e290:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000e295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e299:	89 10                	mov    DWORD PTR [eax],edx
c000e29b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e2a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2aa:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e2b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2b5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e2bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e2c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e2ce:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e2e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ec:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e2f3:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e2fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2fe:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e306:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e30e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e316:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e31d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e325:	83 ec 0c             	sub    esp,0xc
c000e328:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e32c:	e8 85 97 ff ff       	call   c0007ab6 <malloc>
c000e331:	83 c4 10             	add    esp,0x10
c000e334:	89 c3                	mov    ebx,eax
c000e336:	83 ec 0c             	sub    esp,0xc
c000e339:	53                   	push   ebx
c000e33a:	e8 0d 76 00 00       	call   c001594c <Mutex::Mutex()>
c000e33f:	83 c4 10             	add    esp,0x10
c000e342:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e346:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e349:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e34d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e351:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e354:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e358:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e35f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e363:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e36d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e370:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e374:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e37a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e380:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e384:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e387:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e38a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e38e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e396:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e39c:	05 00 02 00 00       	add    eax,0x200
c000e3a1:	c1 e0 03             	shl    eax,0x3
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	50                   	push   eax
c000e3a8:	e8 09 97 ff ff       	call   c0007ab6 <malloc>
c000e3ad:	83 c4 10             	add    esp,0x10
c000e3b0:	89 c2                	mov    edx,eax
c000e3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3b6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e3b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3bd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e3c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3c8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e3cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e3d0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e3d6:	89 d0                	mov    eax,edx
c000e3d8:	c1 e0 02             	shl    eax,0x2
c000e3db:	01 d0                	add    eax,edx
c000e3dd:	c1 e0 04             	shl    eax,0x4
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	50                   	push   eax
c000e3e4:	e8 cd 96 ff ff       	call   c0007ab6 <malloc>
c000e3e9:	83 c4 10             	add    esp,0x10
c000e3ec:	89 c2                	mov    edx,eax
c000e3ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e3f2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e3f5:	90                   	nop
c000e3f6:	83 c4 18             	add    esp,0x18
c000e3f9:	5b                   	pop    ebx
c000e3fa:	c3                   	ret    
c000e3fb:	90                   	nop

c000e3fc <VCache::invalidateReadBuffer()>:
c000e3fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e400:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e406:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e40a:	c3                   	ret    
c000e40b:	90                   	nop

c000e40c <VCache::writeWriteBuffer()>:
c000e40c:	53                   	push   ebx
c000e40d:	83 ec 08             	sub    esp,0x8
c000e410:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e414:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e418:	74 1e                	je     c000e438 <VCache::writeWriteBuffer()+0x2c>
c000e41a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e41d:	83 ec 0c             	sub    esp,0xc
c000e420:	8b 10                	mov    edx,DWORD PTR [eax]
c000e422:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e425:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e428:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e42b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e42e:	50                   	push   eax
c000e42f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e432:	83 c4 20             	add    esp,0x20
c000e435:	8d 76 00             	lea    esi,[esi+0x0]
c000e438:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e446:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e44a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e451:	83 c4 08             	add    esp,0x8
c000e454:	5b                   	pop    ebx
c000e455:	c3                   	ret    
c000e456:	66 90                	xchg   ax,ax

c000e458 <VCache::~VCache()>:
c000e458:	83 ec 0c             	sub    esp,0xc
c000e45b:	ba 60 18 02 c0       	mov    edx,0xc0021860
c000e460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e464:	89 10                	mov    DWORD PTR [eax],edx
c000e466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e46a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e46d:	0f b6 c0             	movzx  eax,al
c000e470:	85 c0                	test   eax,eax
c000e472:	74 10                	je     c000e484 <VCache::~VCache()+0x2c>
c000e474:	83 ec 0c             	sub    esp,0xc
c000e477:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e47b:	e8 8c ff ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c000e480:	83 c4 10             	add    esp,0x10
c000e483:	90                   	nop
c000e484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e488:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e48b:	83 ec 0c             	sub    esp,0xc
c000e48e:	50                   	push   eax
c000e48f:	e8 32 96 ff ff       	call   c0007ac6 <free>
c000e494:	83 c4 10             	add    esp,0x10
c000e497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e49b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e49e:	83 ec 0c             	sub    esp,0xc
c000e4a1:	50                   	push   eax
c000e4a2:	e8 1f 96 ff ff       	call   c0007ac6 <free>
c000e4a7:	83 c4 10             	add    esp,0x10
c000e4aa:	90                   	nop
c000e4ab:	83 c4 0c             	add    esp,0xc
c000e4ae:	c3                   	ret    
c000e4af:	90                   	nop

c000e4b0 <VCache::~VCache()>:
c000e4b0:	83 ec 0c             	sub    esp,0xc
c000e4b3:	83 ec 0c             	sub    esp,0xc
c000e4b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4ba:	e8 99 ff ff ff       	call   c000e458 <VCache::~VCache()>
c000e4bf:	83 c4 10             	add    esp,0x10
c000e4c2:	83 ec 08             	sub    esp,0x8
c000e4c5:	6a 44                	push   0x44
c000e4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4cb:	e8 48 c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e4d0:	83 c4 10             	add    esp,0x10
c000e4d3:	83 c4 0c             	add    esp,0xc
c000e4d6:	c3                   	ret    
c000e4d7:	90                   	nop

c000e4d8 <VCache::write(unsigned long long, int, void*)>:
c000e4d8:	55                   	push   ebp
c000e4d9:	57                   	push   edi
c000e4da:	56                   	push   esi
c000e4db:	53                   	push   ebx
c000e4dc:	83 ec 1c             	sub    esp,0x1c
c000e4df:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e4e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e4e7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e4ef:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e4f3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e4f7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e4fb:	74 07                	je     c000e504 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e4fd:	53                   	push   ebx
c000e4fe:	e8 f9 fe ff ff       	call   c000e3fc <VCache::invalidateReadBuffer()>
c000e503:	58                   	pop    eax
c000e504:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e508:	74 62                	je     c000e56c <VCache::write(unsigned long long, int, void*)+0x94>
c000e50a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e50d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e511:	99                   	cdq    
c000e512:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e516:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e519:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e51c:	31 c1                	xor    ecx,eax
c000e51e:	89 d0                	mov    eax,edx
c000e520:	89 ca                	mov    edx,ecx
c000e522:	31 e8                	xor    eax,ebp
c000e524:	09 c2                	or     edx,eax
c000e526:	75 38                	jne    c000e560 <VCache::write(unsigned long long, int, void*)+0x88>
c000e528:	83 ff 01             	cmp    edi,0x1
c000e52b:	75 33                	jne    c000e560 <VCache::write(unsigned long long, int, void*)+0x88>
c000e52d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e530:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e534:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e53a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e53d:	0f af c8             	imul   ecx,eax
c000e540:	01 cf                	add    edi,ecx
c000e542:	89 c1                	mov    ecx,eax
c000e544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e546:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e549:	40                   	inc    eax
c000e54a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e54d:	83 f8 50             	cmp    eax,0x50
c000e550:	75 6a                	jne    c000e5bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e552:	83 ec 0c             	sub    esp,0xc
c000e555:	53                   	push   ebx
c000e556:	e8 b1 fe ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c000e55b:	83 c4 10             	add    esp,0x10
c000e55e:	eb 5c                	jmp    c000e5bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e560:	83 ec 0c             	sub    esp,0xc
c000e563:	53                   	push   ebx
c000e564:	e8 a3 fe ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c000e569:	83 c4 10             	add    esp,0x10
c000e56c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e56f:	83 ff 4f             	cmp    edi,0x4f
c000e572:	7f 20                	jg     c000e594 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e574:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e577:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e57b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e57e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e581:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e585:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e588:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e58e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e590:	eb 2a                	jmp    c000e5bc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e592:	66 90                	xchg   ax,ax
c000e594:	8b 10                	mov    edx,DWORD PTR [eax]
c000e596:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e59a:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e59e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e5a2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e5a6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e5aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e5ae:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e5b1:	83 c4 1c             	add    esp,0x1c
c000e5b4:	5b                   	pop    ebx
c000e5b5:	5e                   	pop    esi
c000e5b6:	5f                   	pop    edi
c000e5b7:	5d                   	pop    ebp
c000e5b8:	ff e0                	jmp    eax
c000e5ba:	66 90                	xchg   ax,ax
c000e5bc:	83 c4 1c             	add    esp,0x1c
c000e5bf:	31 c0                	xor    eax,eax
c000e5c1:	5b                   	pop    ebx
c000e5c2:	5e                   	pop    esi
c000e5c3:	5f                   	pop    edi
c000e5c4:	5d                   	pop    ebp
c000e5c5:	c3                   	ret    

c000e5c6 <VCache::read(unsigned long long, int, void*)>:
c000e5c6:	55                   	push   ebp
c000e5c7:	57                   	push   edi
c000e5c8:	56                   	push   esi
c000e5c9:	53                   	push   ebx
c000e5ca:	83 ec 1c             	sub    esp,0x1c
c000e5cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e5d1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e5d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e5d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e5dd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e5e1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e5e5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e5e9:	74 0d                	je     c000e5f8 <VCache::read(unsigned long long, int, void*)+0x32>
c000e5eb:	83 ec 0c             	sub    esp,0xc
c000e5ee:	57                   	push   edi
c000e5ef:	e8 18 fe ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c000e5f4:	83 c4 10             	add    esp,0x10
c000e5f7:	90                   	nop
c000e5f8:	83 fd 01             	cmp    ebp,0x1
c000e5fb:	0f 85 93 00 00 00    	jne    c000e694 <VCache::read(unsigned long long, int, void*)+0xce>
c000e601:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e604:	89 04 24             	mov    DWORD PTR [esp],eax
c000e607:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e60e:	0f 85 80 00 00 00    	jne    c000e694 <VCache::read(unsigned long long, int, void*)+0xce>
c000e614:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e617:	89 e9                	mov    ecx,ebp
c000e619:	f7 d9                	neg    ecx
c000e61b:	89 c8                	mov    eax,ecx
c000e61d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e621:	c1 f8 1f             	sar    eax,0x1f
c000e624:	21 d9                	and    ecx,ebx
c000e626:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e62a:	89 c8                	mov    eax,ecx
c000e62c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e630:	21 f1                	and    ecx,esi
c000e632:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e636:	89 ca                	mov    edx,ecx
c000e638:	74 2e                	je     c000e668 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e63a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e63d:	75 29                	jne    c000e668 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e63f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e642:	75 24                	jne    c000e668 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e644:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e647:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e64d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e650:	8d 70 ff             	lea    esi,[eax-0x1]
c000e653:	21 f3                	and    ebx,esi
c000e655:	0f af d9             	imul   ebx,ecx
c000e658:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e65b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e65f:	89 de                	mov    esi,ebx
c000e661:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e663:	31 c0                	xor    eax,eax
c000e665:	eb 61                	jmp    c000e6c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e667:	90                   	nop
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e66f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e673:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e676:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e679:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e67b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e67e:	55                   	push   ebp
c000e67f:	52                   	push   edx
c000e680:	50                   	push   eax
c000e681:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e685:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e688:	83 c4 20             	add    esp,0x20
c000e68b:	85 c0                	test   eax,eax
c000e68d:	75 39                	jne    c000e6c8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e68f:	eb b3                	jmp    c000e644 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e691:	8d 76 00             	lea    esi,[esi+0x0]
c000e694:	83 ec 0c             	sub    esp,0xc
c000e697:	57                   	push   edi
c000e698:	e8 5f fd ff ff       	call   c000e3fc <VCache::invalidateReadBuffer()>
c000e69d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e6a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6a6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e6aa:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e6ae:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e6b2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e6b6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e6ba:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e6bd:	83 c4 2c             	add    esp,0x2c
c000e6c0:	5b                   	pop    ebx
c000e6c1:	5e                   	pop    esi
c000e6c2:	5f                   	pop    edi
c000e6c3:	5d                   	pop    ebp
c000e6c4:	ff e0                	jmp    eax
c000e6c6:	66 90                	xchg   ax,ax
c000e6c8:	83 c4 1c             	add    esp,0x1c
c000e6cb:	5b                   	pop    ebx
c000e6cc:	5e                   	pop    esi
c000e6cd:	5f                   	pop    edi
c000e6ce:	5d                   	pop    ebp
c000e6cf:	c3                   	ret    

c000e6d0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e6d0:	55                   	push   ebp
c000e6d1:	57                   	push   edi
c000e6d2:	56                   	push   esi
c000e6d3:	53                   	push   ebx
c000e6d4:	83 ec 1c             	sub    esp,0x1c
c000e6d7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e6db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6df:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e6e3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e6e7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6ef:	01 df                	add    edi,ebx
c000e6f1:	39 fb                	cmp    ebx,edi
c000e6f3:	7d 1f                	jge    c000e714 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e6f5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e6f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e6fd:	7d 12                	jge    c000e711 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e6ff:	8b 16                	mov    edx,DWORD PTR [esi]
c000e701:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e705:	53                   	push   ebx
c000e706:	55                   	push   ebp
c000e707:	45                   	inc    ebp
c000e708:	56                   	push   esi
c000e709:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e70c:	83 c4 10             	add    esp,0x10
c000e70f:	eb e8                	jmp    c000e6f9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e711:	43                   	inc    ebx
c000e712:	eb dd                	jmp    c000e6f1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e714:	83 c4 1c             	add    esp,0x1c
c000e717:	5b                   	pop    ebx
c000e718:	5e                   	pop    esi
c000e719:	5f                   	pop    edi
c000e71a:	5d                   	pop    ebp
c000e71b:	c3                   	ret    

c000e71c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e71c:	55                   	push   ebp
c000e71d:	57                   	push   edi
c000e71e:	31 ff                	xor    edi,edi
c000e720:	56                   	push   esi
c000e721:	53                   	push   ebx
c000e722:	83 ec 1c             	sub    esp,0x1c
c000e725:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e729:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e72d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e734:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e739:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e73d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e741:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e745:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e748:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e74c:	01 f9                	add    ecx,edi
c000e74e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e752:	7d 2f                	jge    c000e783 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e754:	31 f6                	xor    esi,esi
c000e756:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e75a:	01 f2                	add    edx,esi
c000e75c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e760:	7d 1a                	jge    c000e77c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e762:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e765:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e768:	46                   	inc    esi
c000e769:	51                   	push   ecx
c000e76a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e76e:	52                   	push   edx
c000e76f:	55                   	push   ebp
c000e770:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e773:	83 c4 10             	add    esp,0x10
c000e776:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e77a:	eb da                	jmp    c000e756 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e77c:	47                   	inc    edi
c000e77d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e781:	eb c5                	jmp    c000e748 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e783:	83 c4 1c             	add    esp,0x1c
c000e786:	5b                   	pop    ebx
c000e787:	5e                   	pop    esi
c000e788:	5f                   	pop    edi
c000e789:	5d                   	pop    ebp
c000e78a:	c3                   	ret    
c000e78b:	90                   	nop

c000e78c <Video::blit(unsigned int*, int, int, int, int)>:
c000e78c:	55                   	push   ebp
c000e78d:	57                   	push   edi
c000e78e:	56                   	push   esi
c000e78f:	53                   	push   ebx
c000e790:	83 ec 1c             	sub    esp,0x1c
c000e793:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e797:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e79b:	85 c0                	test   eax,eax
c000e79d:	79 02                	jns    c000e7a1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e79f:	31 c0                	xor    eax,eax
c000e7a1:	c1 e0 02             	shl    eax,0x2
c000e7a4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e7a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7ac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e7b0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e7b4:	39 d8                	cmp    eax,ebx
c000e7b6:	7e 49                	jle    c000e801 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e7b8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e7be:	7c 41                	jl     c000e801 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e7c0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e7c4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e7c8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e7cc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e7d0:	39 f9                	cmp    ecx,edi
c000e7d2:	7e 22                	jle    c000e7f6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e7d4:	83 c5 04             	add    ebp,0x4
c000e7d7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e7dd:	7c 14                	jl     c000e7f3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e7df:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e7e1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e7e4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e7e8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e7ec:	56                   	push   esi
c000e7ed:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e7f0:	83 c4 10             	add    esp,0x10
c000e7f3:	47                   	inc    edi
c000e7f4:	eb d2                	jmp    c000e7c8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e7f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7fa:	43                   	inc    ebx
c000e7fb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e7ff:	eb ab                	jmp    c000e7ac <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e801:	83 c4 1c             	add    esp,0x1c
c000e804:	5b                   	pop    ebx
c000e805:	5e                   	pop    esi
c000e806:	5f                   	pop    edi
c000e807:	5d                   	pop    ebp
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <Video::clearScreen(unsigned int)>:
c000e80a:	57                   	push   edi
c000e80b:	56                   	push   esi
c000e80c:	53                   	push   ebx
c000e80d:	31 db                	xor    ebx,ebx
c000e80f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e813:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e819:	7e 1f                	jle    c000e83a <Video::clearScreen(unsigned int)+0x30>
c000e81b:	31 ff                	xor    edi,edi
c000e81d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e823:	7e 12                	jle    c000e837 <Video::clearScreen(unsigned int)+0x2d>
c000e825:	8b 06                	mov    eax,DWORD PTR [esi]
c000e827:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e82b:	53                   	push   ebx
c000e82c:	57                   	push   edi
c000e82d:	47                   	inc    edi
c000e82e:	56                   	push   esi
c000e82f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e832:	83 c4 10             	add    esp,0x10
c000e835:	eb e6                	jmp    c000e81d <Video::clearScreen(unsigned int)+0x13>
c000e837:	43                   	inc    ebx
c000e838:	eb d9                	jmp    c000e813 <Video::clearScreen(unsigned int)+0x9>
c000e83a:	5b                   	pop    ebx
c000e83b:	5e                   	pop    esi
c000e83c:	5f                   	pop    edi
c000e83d:	c3                   	ret    

c000e83e <Video::putpixel(int, int, unsigned int)>:
c000e83e:	c7 44 24 04 68 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021868
c000e846:	e9 a6 2a 00 00       	jmp    c00112f1 <KePanic(char const*)>
c000e84b:	90                   	nop

c000e84c <Video::readPixelApprox(int, int)>:
c000e84c:	83 ec 18             	sub    esp,0x18
c000e84f:	68 89 18 02 c0       	push   0xc0021889
c000e854:	e8 98 2a 00 00       	call   c00112f1 <KePanic(char const*)>
c000e859:	31 c0                	xor    eax,eax
c000e85b:	83 c4 1c             	add    esp,0x1c
c000e85e:	c3                   	ret    
c000e85f:	90                   	nop

c000e860 <Video::Video(char const*)>:
c000e860:	83 ec 0c             	sub    esp,0xc
c000e863:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e867:	83 ec 08             	sub    esp,0x8
c000e86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e86e:	50                   	push   eax
c000e86f:	e8 e6 df ff ff       	call   c000c85a <Device::Device(char const*)>
c000e874:	83 c4 10             	add    esp,0x10
c000e877:	ba 04 19 02 c0       	mov    edx,0xc0021904
c000e87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e880:	89 10                	mov    DWORD PTR [eax],edx
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e890:	90                   	nop
c000e891:	83 c4 0c             	add    esp,0xc
c000e894:	c3                   	ret    
c000e895:	90                   	nop

c000e896 <Video::~Video()>:
c000e896:	83 ec 0c             	sub    esp,0xc
c000e899:	ba 04 19 02 c0       	mov    edx,0xc0021904
c000e89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a2:	89 10                	mov    DWORD PTR [eax],edx
c000e8a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a8:	83 ec 0c             	sub    esp,0xc
c000e8ab:	50                   	push   eax
c000e8ac:	e8 13 dd ff ff       	call   c000c5c4 <Device::~Device()>
c000e8b1:	83 c4 10             	add    esp,0x10
c000e8b4:	90                   	nop
c000e8b5:	83 c4 0c             	add    esp,0xc
c000e8b8:	c3                   	ret    
c000e8b9:	90                   	nop

c000e8ba <Video::~Video()>:
c000e8ba:	83 ec 0c             	sub    esp,0xc
c000e8bd:	83 ec 0c             	sub    esp,0xc
c000e8c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8c4:	e8 cd ff ff ff       	call   c000e896 <Video::~Video()>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	83 ec 08             	sub    esp,0x8
c000e8cf:	68 64 01 00 00       	push   0x164
c000e8d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e8d8:	e8 3b bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e8dd:	83 c4 10             	add    esp,0x10
c000e8e0:	83 c4 0c             	add    esp,0xc
c000e8e3:	c3                   	ret    

c000e8e4 <Video::isMonochrome()>:
c000e8e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8e8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e8ee:	c3                   	ret    
c000e8ef:	90                   	nop

c000e8f0 <Video::getWidth()>:
c000e8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8f4:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e8fa:	c3                   	ret    
c000e8fb:	90                   	nop

c000e8fc <Video::getHeight()>:
c000e8fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e900:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e906:	c3                   	ret    
c000e907:	90                   	nop

c000e908 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e908:	55                   	push   ebp
c000e909:	57                   	push   edi
c000e90a:	56                   	push   esi
c000e90b:	53                   	push   ebx
c000e90c:	83 ec 2c             	sub    esp,0x2c
c000e90f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e913:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e917:	83 f8 01             	cmp    eax,0x1
c000e91a:	19 c9                	sbb    ecx,ecx
c000e91c:	31 db                	xor    ebx,ebx
c000e91e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e922:	89 cd                	mov    ebp,ecx
c000e924:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e92c:	f7 d5                	not    ebp
c000e92e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e934:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e938:	01 d8                	add    eax,ebx
c000e93a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93e:	56                   	push   esi
c000e93f:	e8 b8 ff ff ff       	call   c000e8fc <Video::getHeight()>
c000e944:	59                   	pop    ecx
c000e945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e949:	7e 70                	jle    c000e9bb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e94b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e94f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e953:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e956:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e95a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e95e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e965:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e969:	89 f8                	mov    eax,edi
c000e96b:	83 c0 20             	add    eax,0x20
c000e96e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e972:	56                   	push   esi
c000e973:	e8 78 ff ff ff       	call   c000e8f0 <Video::getWidth()>
c000e978:	5a                   	pop    edx
c000e979:	39 c7                	cmp    edi,eax
c000e97b:	7d 34                	jge    c000e9b1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e97d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e982:	74 05                	je     c000e989 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e984:	8b 06                	mov    eax,DWORD PTR [esi]
c000e986:	55                   	push   ebp
c000e987:	eb 0d                	jmp    c000e996 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e989:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e98e:	74 12                	je     c000e9a2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e990:	8b 06                	mov    eax,DWORD PTR [esi]
c000e992:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e996:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e99a:	57                   	push   edi
c000e99b:	56                   	push   esi
c000e99c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e9a6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e9aa:	47                   	inc    edi
c000e9ab:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e9af:	75 c1                	jne    c000e972 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e9b1:	43                   	inc    ebx
c000e9b2:	83 fb 20             	cmp    ebx,0x20
c000e9b5:	0f 85 79 ff ff ff    	jne    c000e934 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e9bb:	83 c4 2c             	add    esp,0x2c
c000e9be:	5b                   	pop    ebx
c000e9bf:	5e                   	pop    esi
c000e9c0:	5f                   	pop    edi
c000e9c1:	5d                   	pop    ebp
c000e9c2:	c3                   	ret    
c000e9c3:	90                   	nop

c000e9c4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e9c4:	55                   	push   ebp
c000e9c5:	57                   	push   edi
c000e9c6:	56                   	push   esi
c000e9c7:	53                   	push   ebx
c000e9c8:	83 ec 28             	sub    esp,0x28
c000e9cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e9cf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e9d3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e9d7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e9db:	c1 e6 08             	shl    esi,0x8
c000e9de:	01 c6                	add    esi,eax
c000e9e0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e9e4:	c1 e0 08             	shl    eax,0x8
c000e9e7:	01 d0                	add    eax,edx
c000e9e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9f1:	0f af c6             	imul   eax,esi
c000e9f4:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e9fb:	50                   	push   eax
c000e9fc:	e8 b5 90 ff ff       	call   c0007ab6 <malloc>
c000ea01:	83 c4 10             	add    esp,0x10
c000ea04:	89 c7                	mov    edi,eax
c000ea06:	85 c0                	test   eax,eax
c000ea08:	75 10                	jne    c000ea1a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ea0a:	83 ec 0c             	sub    esp,0xc
c000ea0d:	68 b4 18 02 c0       	push   0xc00218b4
c000ea12:	e8 da 28 00 00       	call   c00112f1 <KePanic(char const*)>
c000ea17:	83 c4 10             	add    esp,0x10
c000ea1a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ea1e:	ba 12 00 00 00       	mov    edx,0x12
c000ea23:	85 c0                	test   eax,eax
c000ea25:	74 11                	je     c000ea38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ea27:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ea2b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ea2f:	c1 fa 03             	sar    edx,0x3
c000ea32:	0f af d1             	imul   edx,ecx
c000ea35:	83 c2 12             	add    edx,0x12
c000ea38:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ea3c:	74 04                	je     c000ea42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ea3e:	85 f6                	test   esi,esi
c000ea40:	75 12                	jne    c000ea54 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ea42:	83 ec 0c             	sub    esp,0xc
c000ea45:	68 c4 18 02 c0       	push   0xc00218c4
c000ea4a:	e8 f6 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea4f:	e9 b8 00 00 00       	jmp    c000eb0c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ea54:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ea58:	83 f9 02             	cmp    ecx,0x2
c000ea5b:	0f 85 96 00 00 00    	jne    c000eaf7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ea61:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ea66:	75 0e                	jne    c000ea76 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea68:	85 c0                	test   eax,eax
c000ea6a:	75 0a                	jne    c000ea76 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ea6c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ea6f:	83 e8 18             	sub    eax,0x18
c000ea72:	a8 f7                	test   al,0xf7
c000ea74:	74 0a                	je     c000ea80 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ea76:	83 ec 0c             	sub    esp,0xc
c000ea79:	68 d9 18 02 c0       	push   0xc00218d9
c000ea7e:	eb 7f                	jmp    c000eaff <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ea80:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea88:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea90:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ea94:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea9c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000eaa0:	75 0c                	jne    c000eaae <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000eaa2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000eaa7:	c1 e0 18             	shl    eax,0x18
c000eaaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaae:	45                   	inc    ebp
c000eaaf:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000eab4:	c1 e1 10             	shl    ecx,0x10
c000eab7:	89 c8                	mov    eax,ecx
c000eab9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000eabe:	c1 e1 08             	shl    ecx,0x8
c000eac1:	09 c1                	or     ecx,eax
c000eac3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000eac7:	09 c1                	or     ecx,eax
c000eac9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eacd:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ead1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ead5:	c1 f8 03             	sar    eax,0x3
c000ead8:	01 c2                	add    edx,eax
c000eada:	89 e8                	mov    eax,ebp
c000eadc:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000eae0:	39 c6                	cmp    esi,eax
c000eae2:	7f b0                	jg     c000ea94 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000eae4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000eae8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000eaec:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000eaef:	7e 22                	jle    c000eb13 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000eaf1:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000eaf5:	eb 99                	jmp    c000ea90 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000eaf7:	50                   	push   eax
c000eaf8:	50                   	push   eax
c000eaf9:	51                   	push   ecx
c000eafa:	68 e7 18 02 c0       	push   0xc00218e7
c000eaff:	e8 41 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000eb04:	89 3c 24             	mov    DWORD PTR [esp],edi
c000eb07:	e8 ba 8f ff ff       	call   c0007ac6 <free>
c000eb0c:	83 c4 10             	add    esp,0x10
c000eb0f:	31 ff                	xor    edi,edi
c000eb11:	eb 0f                	jmp    c000eb22 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000eb13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb17:	89 30                	mov    DWORD PTR [eax],esi
c000eb19:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eb1d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eb20:	89 30                	mov    DWORD PTR [eax],esi
c000eb22:	83 c4 1c             	add    esp,0x1c
c000eb25:	89 f8                	mov    eax,edi
c000eb27:	5b                   	pop    ebx
c000eb28:	5e                   	pop    esi
c000eb29:	5f                   	pop    edi
c000eb2a:	5d                   	pop    ebp
c000eb2b:	c3                   	ret    

c000eb2c <Video::putTGA(int, int, unsigned char*, int)>:
c000eb2c:	55                   	push   ebp
c000eb2d:	57                   	push   edi
c000eb2e:	56                   	push   esi
c000eb2f:	53                   	push   ebx
c000eb30:	83 ec 28             	sub    esp,0x28
c000eb33:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eb37:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb3b:	50                   	push   eax
c000eb3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eb40:	50                   	push   eax
c000eb41:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb45:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eb49:	56                   	push   esi
c000eb4a:	e8 75 fe ff ff       	call   c000e9c4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000eb4f:	83 c4 20             	add    esp,0x20
c000eb52:	85 c0                	test   eax,eax
c000eb54:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eb58:	74 35                	je     c000eb8f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eb5a:	89 c7                	mov    edi,eax
c000eb5c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eb60:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eb64:	39 d8                	cmp    eax,ebx
c000eb66:	7e 27                	jle    c000eb8f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eb68:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eb6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb70:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eb74:	39 e8                	cmp    eax,ebp
c000eb76:	7e 14                	jle    c000eb8c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eb78:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb7a:	83 c7 04             	add    edi,0x4
c000eb7d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eb80:	53                   	push   ebx
c000eb81:	55                   	push   ebp
c000eb82:	45                   	inc    ebp
c000eb83:	56                   	push   esi
c000eb84:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb87:	83 c4 10             	add    esp,0x10
c000eb8a:	eb e0                	jmp    c000eb6c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb8c:	43                   	inc    ebx
c000eb8d:	eb cd                	jmp    c000eb5c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb8f:	83 c4 1c             	add    esp,0x1c
c000eb92:	5b                   	pop    ebx
c000eb93:	5e                   	pop    esi
c000eb94:	5f                   	pop    edi
c000eb95:	5d                   	pop    ebp
c000eb96:	c3                   	ret    
c000eb97:	90                   	nop

c000eb98 <ACPI::close(int, int, void*)>:
c000eb98:	83 ec 1c             	sub    esp,0x1c
c000eb9b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eba3:	74 0b                	je     c000ebb0 <ACPI::close(int, int, void*)+0x18>
c000eba5:	b8 00 00 00 00       	mov    eax,0x0
c000ebaa:	e9 99 00 00 00       	jmp    c000ec48 <ACPI::close(int, int, void*)+0xb0>
c000ebaf:	90                   	nop
c000ebb0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ebb5:	75 29                	jne    c000ebe0 <ACPI::close(int, int, void*)+0x48>
c000ebb7:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ebbc:	85 c0                	test   eax,eax
c000ebbe:	74 08                	je     c000ebc8 <ACPI::close(int, int, void*)+0x30>
c000ebc0:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000ebc5:	ff d0                	call   eax
c000ebc7:	90                   	nop
c000ebc8:	83 ec 0c             	sub    esp,0xc
c000ebcb:	68 48 19 02 c0       	push   0xc0021948
c000ebd0:	e8 1c 27 00 00       	call   c00112f1 <KePanic(char const*)>
c000ebd5:	83 c4 10             	add    esp,0x10
c000ebd8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebdd:	eb 69                	jmp    c000ec48 <ACPI::close(int, int, void*)+0xb0>
c000ebdf:	90                   	nop
c000ebe0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000ebe5:	75 59                	jne    c000ec40 <ACPI::close(int, int, void*)+0xa8>
c000ebe7:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ebec:	85 c0                	test   eax,eax
c000ebee:	74 08                	je     c000ebf8 <ACPI::close(int, int, void*)+0x60>
c000ebf0:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000ebf5:	ff d0                	call   eax
c000ebf7:	90                   	nop
c000ebf8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ec00:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ec05:	83 e0 02             	and    eax,0x2
c000ec08:	74 1e                	je     c000ec28 <ACPI::close(int, int, void*)+0x90>
c000ec0a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ec11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec15:	89 c2                	mov    edx,eax
c000ec17:	ec                   	in     al,dx
c000ec18:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ec1c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ec20:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ec24:	eb da                	jmp    c000ec00 <ACPI::close(int, int, void*)+0x68>
c000ec26:	66 90                	xchg   ax,ax
c000ec28:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ec2f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ec34:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ec38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec3c:	ee                   	out    dx,al
c000ec3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ec40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ec45:	8d 76 00             	lea    esi,[esi+0x0]
c000ec48:	83 c4 1c             	add    esp,0x1c
c000ec4b:	c3                   	ret    

c000ec4c <findRSDP()>:
c000ec4c:	83 ec 1c             	sub    esp,0x1c
c000ec4f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec54:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec5a:	83 e0 04             	and    eax,0x4
c000ec5d:	0f b6 c0             	movzx  eax,al
c000ec60:	85 c0                	test   eax,eax
c000ec62:	75 08                	jne    c000ec6c <findRSDP()+0x20>
c000ec64:	b8 00 00 00 00       	mov    eax,0x0
c000ec69:	eb 75                	jmp    c000ece0 <findRSDP()+0x94>
c000ec6b:	90                   	nop
c000ec6c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ec71:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ec76:	7f 1c                	jg     c000ec94 <findRSDP()+0x48>
c000ec78:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec7d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ec83:	83 e2 fb             	and    edx,0xfffffffb
c000ec86:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec8c:	b8 00 00 00 00       	mov    eax,0x0
c000ec91:	eb 4d                	jmp    c000ece0 <findRSDP()+0x94>
c000ec93:	90                   	nop
c000ec94:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec9c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000eca4:	77 32                	ja     c000ecd8 <findRSDP()+0x8c>
c000eca6:	83 ec 04             	sub    esp,0x4
c000eca9:	6a 08                	push   0x8
c000ecab:	68 e3 19 02 c0       	push   0xc00219e3
c000ecb0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ecb4:	e8 c7 16 ff ff       	call   c0000380 <memcmp>
c000ecb9:	83 c4 10             	add    esp,0x10
c000ecbc:	85 c0                	test   eax,eax
c000ecbe:	0f 94 c0             	sete   al
c000ecc1:	0f b6 c0             	movzx  eax,al
c000ecc4:	85 c0                	test   eax,eax
c000ecc6:	74 08                	je     c000ecd0 <findRSDP()+0x84>
c000ecc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eccc:	eb 12                	jmp    c000ece0 <findRSDP()+0x94>
c000ecce:	66 90                	xchg   ax,ax
c000ecd0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ecd5:	eb c5                	jmp    c000ec9c <findRSDP()+0x50>
c000ecd7:	90                   	nop
c000ecd8:	b8 00 00 00 00       	mov    eax,0x0
c000ecdd:	8d 76 00             	lea    esi,[esi+0x0]
c000ece0:	83 c4 1c             	add    esp,0x1c
c000ece3:	c3                   	ret    

c000ece4 <loadACPITables(unsigned char*)>:
c000ece4:	57                   	push   edi
c000ece5:	56                   	push   esi
c000ece6:	53                   	push   ebx
c000ece7:	83 ec 60             	sub    esp,0x60
c000ecea:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ecef:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ecf5:	83 e0 04             	and    eax,0x4
c000ecf8:	0f b6 c0             	movzx  eax,al
c000ecfb:	85 c0                	test   eax,eax
c000ecfd:	0f 84 41 02 00 00    	je     c000ef44 <loadACPITables(unsigned char*)+0x260>
c000ed03:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ed08:	0f b6 c0             	movzx  eax,al
c000ed0b:	85 c0                	test   eax,eax
c000ed0d:	74 79                	je     c000ed88 <loadACPITables(unsigned char*)+0xa4>
c000ed0f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed13:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ed17:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ed1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed1e:	83 e8 24             	sub    eax,0x24
c000ed21:	c1 e8 03             	shr    eax,0x3
c000ed24:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ed28:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ed30:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed34:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ed38:	0f 8d ba 00 00 00    	jge    c000edf8 <loadACPITables(unsigned char*)+0x114>
c000ed3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed42:	83 c0 24             	add    eax,0x24
c000ed45:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ed49:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ed4d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ed51:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ed55:	c1 e0 03             	shl    eax,0x3
c000ed58:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ed5c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ed60:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ed63:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed65:	89 c1                	mov    ecx,eax
c000ed67:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed6c:	8d 50 01             	lea    edx,[eax+0x1]
c000ed6f:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed75:	89 ca                	mov    edx,ecx
c000ed77:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed7e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ed83:	eb ab                	jmp    c000ed30 <loadACPITables(unsigned char*)+0x4c>
c000ed85:	8d 76 00             	lea    esi,[esi+0x0]
c000ed88:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed90:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed97:	83 e8 24             	sub    eax,0x24
c000ed9a:	c1 e8 02             	shr    eax,0x2
c000ed9d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000eda1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000eda9:	8d 76 00             	lea    esi,[esi+0x0]
c000edac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000edb0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000edb4:	7d 42                	jge    c000edf8 <loadACPITables(unsigned char*)+0x114>
c000edb6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000edba:	83 c0 24             	add    eax,0x24
c000edbd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000edc1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000edc5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000edc9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000edcd:	c1 e0 02             	shl    eax,0x2
c000edd0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000edd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000edd8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000edda:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000eddf:	8d 50 01             	lea    edx,[eax+0x1]
c000ede2:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ede8:	89 ca                	mov    edx,ecx
c000edea:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000edf1:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000edf6:	eb b4                	jmp    c000edac <loadACPITables(unsigned char*)+0xc8>
c000edf8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ee00:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ee05:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ee09:	0f 8d 39 01 00 00    	jge    c000ef48 <loadACPITables(unsigned char*)+0x264>
c000ee0f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee13:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000ee1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee22:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ee26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee2a:	25 ff 0f 00 00       	and    eax,0xfff
c000ee2f:	89 c6                	mov    esi,eax
c000ee31:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee37:	83 ec 0c             	sub    esp,0xc
c000ee3a:	6a 01                	push   0x1
c000ee3c:	e8 cc a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee41:	83 c4 10             	add    esp,0x10
c000ee44:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee48:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee4e:	83 ec 0c             	sub    esp,0xc
c000ee51:	6a 01                	push   0x1
c000ee53:	6a 01                	push   0x1
c000ee55:	50                   	push   eax
c000ee56:	52                   	push   edx
c000ee57:	53                   	push   ebx
c000ee58:	e8 bd b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee5d:	83 c4 20             	add    esp,0x20
c000ee60:	09 f0                	or     eax,esi
c000ee62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee66:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee6a:	c1 e0 03             	shl    eax,0x3
c000ee6d:	05 20 89 02 c0       	add    eax,0xc0028920
c000ee72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee7a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee7e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ee86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee92:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee9a:	89 c6                	mov    esi,eax
c000ee9c:	89 d7                	mov    edi,edx
c000ee9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eea0:	89 c8                	mov    eax,ecx
c000eea2:	89 fa                	mov    edx,edi
c000eea4:	89 f3                	mov    ebx,esi
c000eea6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000eeaa:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000eeae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eeb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eeb9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eebd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000eec1:	05 00 10 00 00       	add    eax,0x1000
c000eec6:	c1 e8 0c             	shr    eax,0xc
c000eec9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eecd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000eed5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed9:	25 ff 0f 00 00       	and    eax,0xfff
c000eede:	89 c6                	mov    esi,eax
c000eee0:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000eee6:	83 ec 0c             	sub    esp,0xc
c000eee9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000eeed:	e8 1b a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eef2:	83 c4 10             	add    esp,0x10
c000eef5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eef9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eeff:	83 ec 0c             	sub    esp,0xc
c000ef02:	6a 01                	push   0x1
c000ef04:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef08:	50                   	push   eax
c000ef09:	52                   	push   edx
c000ef0a:	53                   	push   ebx
c000ef0b:	e8 0a b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef10:	83 c4 20             	add    esp,0x20
c000ef13:	09 f0                	or     eax,esi
c000ef15:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef1d:	83 ec 0c             	sub    esp,0xc
c000ef20:	50                   	push   eax
c000ef21:	e8 05 aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ef26:	83 c4 10             	add    esp,0x10
c000ef29:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ef2d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ef31:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ef38:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ef3d:	e9 be fe ff ff       	jmp    c000ee00 <loadACPITables(unsigned char*)+0x11c>
c000ef42:	66 90                	xchg   ax,ax
c000ef44:	90                   	nop
c000ef45:	8d 76 00             	lea    esi,[esi+0x0]
c000ef48:	83 c4 60             	add    esp,0x60
c000ef4b:	5b                   	pop    ebx
c000ef4c:	5e                   	pop    esi
c000ef4d:	5f                   	pop    edi
c000ef4e:	c3                   	ret    
c000ef4f:	90                   	nop

c000ef50 <findRSDT(unsigned char*)>:
c000ef50:	57                   	push   edi
c000ef51:	56                   	push   esi
c000ef52:	53                   	push   ebx
c000ef53:	83 ec 50             	sub    esp,0x50
c000ef56:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ef5b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef61:	83 e0 04             	and    eax,0x4
c000ef64:	0f b6 c0             	movzx  eax,al
c000ef67:	85 c0                	test   eax,eax
c000ef69:	75 0d                	jne    c000ef78 <findRSDT(unsigned char*)+0x28>
c000ef6b:	b8 00 00 00 00       	mov    eax,0x0
c000ef70:	e9 2b 01 00 00       	jmp    c000f0a0 <findRSDT(unsigned char*)+0x150>
c000ef75:	8d 76 00             	lea    esi,[esi+0x0]
c000ef78:	89 e0                	mov    eax,esp
c000ef7a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef7e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef86:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef92:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef96:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef9a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef9e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000efa2:	89 c6                	mov    esi,eax
c000efa4:	89 d7                	mov    edi,edx
c000efa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000efa8:	89 c8                	mov    eax,ecx
c000efaa:	89 fa                	mov    edx,edi
c000efac:	89 f3                	mov    ebx,esi
c000efae:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000efb2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000efb6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000efba:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000efbe:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000efc2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000efca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efd2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000efda:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efde:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efe2:	25 ff 0f 00 00       	and    eax,0xfff
c000efe7:	89 c6                	mov    esi,eax
c000efe9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efef:	83 ec 0c             	sub    esp,0xc
c000eff2:	6a 02                	push   0x2
c000eff4:	e8 14 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000eff9:	83 c4 10             	add    esp,0x10
c000effc:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f000:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f006:	83 ec 0c             	sub    esp,0xc
c000f009:	6a 01                	push   0x1
c000f00b:	6a 02                	push   0x2
c000f00d:	50                   	push   eax
c000f00e:	52                   	push   edx
c000f00f:	53                   	push   ebx
c000f010:	e8 05 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f015:	83 c4 20             	add    esp,0x20
c000f018:	09 f0                	or     eax,esi
c000f01a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f01e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f022:	25 ff 0f 00 00       	and    eax,0xfff
c000f027:	89 c6                	mov    esi,eax
c000f029:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000f02f:	83 ec 0c             	sub    esp,0xc
c000f032:	6a 02                	push   0x2
c000f034:	e8 d4 a5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f039:	83 c4 10             	add    esp,0x10
c000f03c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f040:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f046:	83 ec 0c             	sub    esp,0xc
c000f049:	6a 01                	push   0x1
c000f04b:	6a 02                	push   0x2
c000f04d:	50                   	push   eax
c000f04e:	52                   	push   edx
c000f04f:	53                   	push   ebx
c000f050:	e8 c5 ae ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f055:	83 c4 20             	add    esp,0x20
c000f058:	09 f0                	or     eax,esi
c000f05a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f05e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f063:	85 c0                	test   eax,eax
c000f065:	75 11                	jne    c000f078 <findRSDT(unsigned char*)+0x128>
c000f067:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000f06e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f072:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f076:	eb 24                	jmp    c000f09c <findRSDT(unsigned char*)+0x14c>
c000f078:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f07d:	83 f8 02             	cmp    eax,0x2
c000f080:	75 12                	jne    c000f094 <findRSDT(unsigned char*)+0x144>
c000f082:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f089:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f08d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f091:	eb 09                	jmp    c000f09c <findRSDT(unsigned char*)+0x14c>
c000f093:	90                   	nop
c000f094:	b8 00 00 00 00       	mov    eax,0x0
c000f099:	eb 05                	jmp    c000f0a0 <findRSDT(unsigned char*)+0x150>
c000f09b:	90                   	nop
c000f09c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f0a0:	83 c4 50             	add    esp,0x50
c000f0a3:	5b                   	pop    ebx
c000f0a4:	5e                   	pop    esi
c000f0a5:	5f                   	pop    edi
c000f0a6:	c3                   	ret    
c000f0a7:	90                   	nop

c000f0a8 <findDataTable(unsigned char*, char*)>:
c000f0a8:	83 ec 1c             	sub    esp,0x1c
c000f0ab:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0b0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0b6:	83 e0 04             	and    eax,0x4
c000f0b9:	0f b6 c0             	movzx  eax,al
c000f0bc:	85 c0                	test   eax,eax
c000f0be:	75 08                	jne    c000f0c8 <findDataTable(unsigned char*, char*)+0x20>
c000f0c0:	b8 00 00 00 00       	mov    eax,0x0
c000f0c5:	eb 5d                	jmp    c000f124 <findDataTable(unsigned char*, char*)+0x7c>
c000f0c7:	90                   	nop
c000f0c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f0d0:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f0d5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f0d9:	7d 41                	jge    c000f11c <findDataTable(unsigned char*, char*)+0x74>
c000f0db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f0df:	c1 e0 03             	shl    eax,0x3
c000f0e2:	05 20 89 02 c0       	add    eax,0xc0028920
c000f0e7:	83 ec 04             	sub    esp,0x4
c000f0ea:	6a 04                	push   0x4
c000f0ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0f0:	50                   	push   eax
c000f0f1:	e8 8a 12 ff ff       	call   c0000380 <memcmp>
c000f0f6:	83 c4 10             	add    esp,0x10
c000f0f9:	85 c0                	test   eax,eax
c000f0fb:	0f 94 c0             	sete   al
c000f0fe:	0f b6 c0             	movzx  eax,al
c000f101:	85 c0                	test   eax,eax
c000f103:	74 0f                	je     c000f114 <findDataTable(unsigned char*, char*)+0x6c>
c000f105:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f109:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f110:	eb 12                	jmp    c000f124 <findDataTable(unsigned char*, char*)+0x7c>
c000f112:	66 90                	xchg   ax,ax
c000f114:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f119:	eb b5                	jmp    c000f0d0 <findDataTable(unsigned char*, char*)+0x28>
c000f11b:	90                   	nop
c000f11c:	b8 00 00 00 00       	mov    eax,0x0
c000f121:	8d 76 00             	lea    esi,[esi+0x0]
c000f124:	83 c4 1c             	add    esp,0x1c
c000f127:	c3                   	ret    

c000f128 <scanMADT()>:
c000f128:	53                   	push   ebx
c000f129:	83 ec 38             	sub    esp,0x38
c000f12c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f131:	25 00 04 00 00       	and    eax,0x400
c000f136:	74 14                	je     c000f14c <scanMADT()+0x24>
c000f138:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f13d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f143:	83 e2 fb             	and    edx,0xfffffffb
c000f146:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f14c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f151:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f157:	83 e0 04             	and    eax,0x4
c000f15a:	0f b6 c0             	movzx  eax,al
c000f15d:	85 c0                	test   eax,eax
c000f15f:	0f 84 6b 04 00 00    	je     c000f5d0 <scanMADT()+0x4a8>
c000f165:	e8 e2 fa ff ff       	call   c000ec4c <findRSDP()>
c000f16a:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f16f:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f174:	85 c0                	test   eax,eax
c000f176:	75 1c                	jne    c000f194 <scanMADT()+0x6c>
c000f178:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f17d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f183:	83 e2 fb             	and    edx,0xfffffffb
c000f186:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f18c:	e9 47 04 00 00       	jmp    c000f5d8 <scanMADT()+0x4b0>
c000f191:	8d 76 00             	lea    esi,[esi+0x0]
c000f194:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	50                   	push   eax
c000f19d:	e8 ae fd ff ff       	call   c000ef50 <findRSDT(unsigned char*)>
c000f1a2:	83 c4 10             	add    esp,0x10
c000f1a5:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f1aa:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1af:	85 c0                	test   eax,eax
c000f1b1:	75 19                	jne    c000f1cc <scanMADT()+0xa4>
c000f1b3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f1b8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f1be:	83 e2 fb             	and    edx,0xfffffffb
c000f1c1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f1c7:	e9 0c 04 00 00       	jmp    c000f5d8 <scanMADT()+0x4b0>
c000f1cc:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1d1:	83 ec 0c             	sub    esp,0xc
c000f1d4:	50                   	push   eax
c000f1d5:	e8 0a fb ff ff       	call   c000ece4 <loadACPITables(unsigned char*)>
c000f1da:	83 c4 10             	add    esp,0x10
c000f1dd:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f1e2:	83 ec 08             	sub    esp,0x8
c000f1e5:	68 ec 19 02 c0       	push   0xc00219ec
c000f1ea:	50                   	push   eax
c000f1eb:	e8 b8 fe ff ff       	call   c000f0a8 <findDataTable(unsigned char*, char*)>
c000f1f0:	83 c4 10             	add    esp,0x10
c000f1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1f7:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f1fc:	75 1a                	jne    c000f218 <scanMADT()+0xf0>
c000f1fe:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f203:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f209:	83 e2 fe             	and    edx,0xfffffffe
c000f20c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f212:	e9 c1 03 00 00       	jmp    c000f5d8 <scanMADT()+0x4b0>
c000f217:	90                   	nop
c000f218:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f224:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f227:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f22b:	0f 87 a7 03 00 00    	ja     c000f5d8 <scanMADT()+0x4b0>
c000f231:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f239:	0f 87 99 03 00 00    	ja     c000f5d8 <scanMADT()+0x4b0>
c000f23f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f243:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f247:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f24b:	8d 50 01             	lea    edx,[eax+0x1]
c000f24e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f252:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f256:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f25a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f25e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f262:	8d 50 01             	lea    edx,[eax+0x1]
c000f265:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f269:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f26d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f271:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f275:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f27a:	83 f8 02             	cmp    eax,0x2
c000f27d:	0f 86 51 03 00 00    	jbe    c000f5d4 <scanMADT()+0x4ac>
c000f283:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f288:	85 c0                	test   eax,eax
c000f28a:	75 58                	jne    c000f2e4 <scanMADT()+0x1bc>
c000f28c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f290:	8d 50 01             	lea    edx,[eax+0x1]
c000f293:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f297:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f29d:	0f b6 d2             	movzx  edx,dl
c000f2a0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2a4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2a8:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f2ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b2:	8d 50 01             	lea    edx,[eax+0x1]
c000f2b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2b9:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f2bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f2c2:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f2c8:	0f b6 d2             	movzx  edx,dl
c000f2cb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f2cf:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f2d3:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f2d9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2de:	e9 d9 02 00 00       	jmp    c000f5bc <scanMADT()+0x494>
c000f2e3:	90                   	nop
c000f2e4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f2e9:	83 f8 01             	cmp    eax,0x1
c000f2ec:	0f 85 1a 01 00 00    	jne    c000f40c <scanMADT()+0x2e4>
c000f2f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2f6:	8d 50 01             	lea    edx,[eax+0x1]
c000f2f9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f2fd:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f303:	0f b6 d2             	movzx  edx,dl
c000f306:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f30a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f30e:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f314:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f319:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f31d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f321:	01 d0                	add    eax,edx
c000f323:	83 c0 2c             	add    eax,0x2c
c000f326:	8a 00                	mov    al,BYTE PTR [eax]
c000f328:	0f b6 d0             	movzx  edx,al
c000f32b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f32f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f332:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f336:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f33a:	0f b6 c0             	movzx  eax,al
c000f33d:	c1 e0 08             	shl    eax,0x8
c000f340:	89 d1                	mov    ecx,edx
c000f342:	09 c1                	or     ecx,eax
c000f344:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f348:	8d 50 02             	lea    edx,[eax+0x2]
c000f34b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f34f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f353:	0f b6 c0             	movzx  eax,al
c000f356:	c1 e0 10             	shl    eax,0x10
c000f359:	09 c1                	or     ecx,eax
c000f35b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f35f:	8d 50 03             	lea    edx,[eax+0x3]
c000f362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f366:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f36a:	0f b6 c0             	movzx  eax,al
c000f36d:	c1 e0 18             	shl    eax,0x18
c000f370:	09 c1                	or     ecx,eax
c000f372:	89 ca                	mov    edx,ecx
c000f374:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f379:	0f b6 c0             	movzx  eax,al
c000f37c:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f383:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f388:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f38c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f390:	01 d0                	add    eax,edx
c000f392:	83 c0 2c             	add    eax,0x2c
c000f395:	8a 00                	mov    al,BYTE PTR [eax]
c000f397:	0f b6 d0             	movzx  edx,al
c000f39a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f39e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3a5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3a9:	0f b6 c0             	movzx  eax,al
c000f3ac:	c1 e0 08             	shl    eax,0x8
c000f3af:	89 d1                	mov    ecx,edx
c000f3b1:	09 c1                	or     ecx,eax
c000f3b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3b7:	8d 50 02             	lea    edx,[eax+0x2]
c000f3ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3be:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3c2:	0f b6 c0             	movzx  eax,al
c000f3c5:	c1 e0 10             	shl    eax,0x10
c000f3c8:	09 c1                	or     ecx,eax
c000f3ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ce:	8d 50 03             	lea    edx,[eax+0x3]
c000f3d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3d5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3d9:	0f b6 c0             	movzx  eax,al
c000f3dc:	c1 e0 18             	shl    eax,0x18
c000f3df:	09 c1                	or     ecx,eax
c000f3e1:	89 ca                	mov    edx,ecx
c000f3e3:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3e8:	0f b6 c0             	movzx  eax,al
c000f3eb:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f3f2:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3f7:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f3fc:	83 c0 01             	add    eax,0x1
c000f3ff:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f404:	e9 b3 01 00 00       	jmp    c000f5bc <scanMADT()+0x494>
c000f409:	8d 76 00             	lea    esi,[esi+0x0]
c000f40c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f411:	83 f8 02             	cmp    eax,0x2
c000f414:	0f 85 ea 00 00 00    	jne    c000f504 <scanMADT()+0x3dc>
c000f41a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f41e:	8d 50 01             	lea    edx,[eax+0x1]
c000f421:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f425:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f429:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f42d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f431:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f435:	8d 50 01             	lea    edx,[eax+0x1]
c000f438:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f43c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f440:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f444:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f448:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f44c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f450:	01 d0                	add    eax,edx
c000f452:	83 c0 2c             	add    eax,0x2c
c000f455:	8a 00                	mov    al,BYTE PTR [eax]
c000f457:	0f b6 d0             	movzx  edx,al
c000f45a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f45e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f465:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f469:	0f b6 c0             	movzx  eax,al
c000f46c:	c1 e0 08             	shl    eax,0x8
c000f46f:	89 d1                	mov    ecx,edx
c000f471:	09 c1                	or     ecx,eax
c000f473:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f477:	8d 50 02             	lea    edx,[eax+0x2]
c000f47a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f47e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f482:	0f b6 c0             	movzx  eax,al
c000f485:	c1 e0 10             	shl    eax,0x10
c000f488:	09 c1                	or     ecx,eax
c000f48a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f48e:	8d 50 03             	lea    edx,[eax+0x3]
c000f491:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f495:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f499:	0f b6 c0             	movzx  eax,al
c000f49c:	c1 e0 18             	shl    eax,0x18
c000f49f:	09 c8                	or     eax,ecx
c000f4a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f4a5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f4aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4b2:	01 d0                	add    eax,edx
c000f4b4:	83 c0 2c             	add    eax,0x2c
c000f4b7:	8a 00                	mov    al,BYTE PTR [eax]
c000f4b9:	0f b6 c0             	movzx  eax,al
c000f4bc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f4c0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f4c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4c7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f4cb:	0f b6 d2             	movzx  edx,dl
c000f4ce:	c1 e2 08             	shl    edx,0x8
c000f4d1:	09 d0                	or     eax,edx
c000f4d3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f4d8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4dd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f4e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f4e6:	88 90 e8 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcf18],dl
c000f4ec:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f4f1:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f4f6:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f4fe:	e9 b9 00 00 00       	jmp    c000f5bc <scanMADT()+0x494>
c000f503:	90                   	nop
c000f504:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f509:	83 f8 04             	cmp    eax,0x4
c000f50c:	0f 85 9a 00 00 00    	jne    c000f5ac <scanMADT()+0x484>
c000f512:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f516:	8d 50 01             	lea    edx,[eax+0x1]
c000f519:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f51d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f521:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f525:	0f b6 c0             	movzx  eax,al
c000f528:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f52c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f530:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f534:	01 d0                	add    eax,edx
c000f536:	83 c0 2c             	add    eax,0x2c
c000f539:	8a 00                	mov    al,BYTE PTR [eax]
c000f53b:	0f b6 d0             	movzx  edx,al
c000f53e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f542:	8d 48 01             	lea    ecx,[eax+0x1]
c000f545:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f549:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f54d:	0f b6 c0             	movzx  eax,al
c000f550:	c1 e0 08             	shl    eax,0x8
c000f553:	09 d0                	or     eax,edx
c000f555:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f559:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f55e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f562:	8d 50 01             	lea    edx,[eax+0x1]
c000f565:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f569:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f56d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f571:	0f b6 c0             	movzx  eax,al
c000f574:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f57c:	c1 e0 08             	shl    eax,0x8
c000f57f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f583:	89 c1                	mov    ecx,eax
c000f585:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f589:	c1 e0 18             	shl    eax,0x18
c000f58c:	89 c3                	mov    ebx,eax
c000f58e:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f593:	8d 50 01             	lea    edx,[eax+0x1]
c000f596:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f59c:	09 d9                	or     ecx,ebx
c000f59e:	89 ca                	mov    edx,ecx
c000f5a0:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f5a7:	eb 13                	jmp    c000f5bc <scanMADT()+0x494>
c000f5a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f5ac:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5b1:	83 f8 05             	cmp    eax,0x5
c000f5b4:	75 06                	jne    c000f5bc <scanMADT()+0x494>
c000f5b6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f5bb:	90                   	nop
c000f5bc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f5c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f5c5:	01 d0                	add    eax,edx
c000f5c7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f5cb:	e9 50 fc ff ff       	jmp    c000f220 <scanMADT()+0xf8>
c000f5d0:	90                   	nop
c000f5d1:	eb 05                	jmp    c000f5d8 <scanMADT()+0x4b0>
c000f5d3:	90                   	nop
c000f5d4:	90                   	nop
c000f5d5:	8d 76 00             	lea    esi,[esi+0x0]
c000f5d8:	83 c4 38             	add    esp,0x38
c000f5db:	5b                   	pop    ebx
c000f5dc:	c3                   	ret    
c000f5dd:	90                   	nop
c000f5de:	66 90                	xchg   ax,ax

c000f5e0 <ACPI::ACPI()>:
c000f5e0:	83 ec 0c             	sub    esp,0xc
c000f5e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5e7:	83 ec 08             	sub    esp,0x8
c000f5ea:	68 f1 19 02 c0       	push   0xc00219f1
c000f5ef:	50                   	push   eax
c000f5f0:	e8 65 d2 ff ff       	call   c000c85a <Device::Device(char const*)>
c000f5f5:	83 c4 10             	add    esp,0x10
c000f5f8:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c000f5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f601:	89 10                	mov    DWORD PTR [eax],edx
c000f603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f607:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f60e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f612:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f61c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f620:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f62a:	e8 f9 fa ff ff       	call   c000f128 <scanMADT()>
c000f62f:	90                   	nop
c000f630:	83 c4 0c             	add    esp,0xc
c000f633:	c3                   	ret    

c000f634 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f634:	83 ec 2c             	sub    esp,0x2c
c000f637:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f63b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f63f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f643:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f647:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f64c:	88 d0                	mov    al,dl
c000f64e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f652:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f657:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f65f:	90                   	nop
c000f660:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f664:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f66a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f66e:	0f 8d b0 00 00 00    	jge    c000f724 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f674:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f678:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f67c:	83 c2 2a             	add    edx,0x2a
c000f67f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f683:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f688:	0f b7 c0             	movzx  eax,ax
c000f68b:	39 c2                	cmp    edx,eax
c000f68d:	0f 85 85 00 00 00    	jne    c000f718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f693:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f697:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f69b:	83 c2 2a             	add    edx,0x2a
c000f69e:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f6a2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f6a7:	0f b6 c0             	movzx  eax,al
c000f6aa:	39 c2                	cmp    edx,eax
c000f6ac:	75 6a                	jne    c000f718 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f6ae:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f6b3:	85 c0                	test   eax,eax
c000f6b5:	74 3d                	je     c000f6f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f6b7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6bb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f6bf:	83 c2 2a             	add    edx,0x2a
c000f6c2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f6c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f6cd:	39 c2                	cmp    edx,eax
c000f6cf:	74 13                	je     c000f6e4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f6d1:	83 ec 0c             	sub    esp,0xc
c000f6d4:	68 6c 19 02 c0       	push   0xc002196c
c000f6d9:	e8 13 1c 00 00       	call   c00112f1 <KePanic(char const*)>
c000f6de:	83 c4 10             	add    esp,0x10
c000f6e1:	8d 76 00             	lea    esi,[esi+0x0]
c000f6e4:	83 ec 0c             	sub    esp,0xc
c000f6e7:	68 f6 19 02 c0       	push   0xc00219f6
c000f6ec:	e8 00 1c 00 00       	call   c00112f1 <KePanic(char const*)>
c000f6f1:	83 c4 10             	add    esp,0x10
c000f6f4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f6f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f6fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f700:	83 c2 2a             	add    edx,0x2a
c000f703:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f707:	8b 02                	mov    eax,DWORD PTR [edx]
c000f709:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f70c:	89 01                	mov    DWORD PTR [ecx],eax
c000f70e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f711:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f716:	66 90                	xchg   ax,ax
c000f718:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f71d:	e9 3e ff ff ff       	jmp    c000f660 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f722:	66 90                	xchg   ax,ax
c000f724:	90                   	nop
c000f725:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f729:	83 c4 2c             	add    esp,0x2c
c000f72c:	c2 04 00             	ret    0x4
c000f72f:	90                   	nop

c000f730 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f730:	83 ec 1c             	sub    esp,0x1c
c000f733:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f737:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f73b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f73f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f744:	88 c8                	mov    al,cl
c000f746:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f74a:	88 d0                	mov    al,dl
c000f74c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f750:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f754:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f75a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f75e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f761:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f765:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f76d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f773:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f777:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f77a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f77e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f783:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f787:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f78d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f791:	83 c0 01             	add    eax,0x1
c000f794:	88 c1                	mov    cl,al
c000f796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f79a:	83 c2 2a             	add    edx,0x2a
c000f79d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f7a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7a5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f7ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7af:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f7b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f7b6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7be:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000f7c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7cb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f7d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f7d5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f7db:	3d 00 02 00 00       	cmp    eax,0x200
c000f7e0:	75 12                	jne    c000f7f4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	68 05 1a 02 c0       	push   0xc0021a05
c000f7ea:	e8 02 1b 00 00       	call   c00112f1 <KePanic(char const*)>
c000f7ef:	83 c4 10             	add    esp,0x10
c000f7f2:	66 90                	xchg   ax,ax
c000f7f4:	90                   	nop
c000f7f5:	83 c4 1c             	add    esp,0x1c
c000f7f8:	c3                   	ret    
c000f7f9:	90                   	nop
c000f7fa:	66 90                	xchg   ax,ax

c000f7fc <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f7fc:	b8 00 00 00 00       	mov    eax,0x0
c000f801:	c3                   	ret    
c000f802:	66 90                	xchg   ax,ax

c000f804 <ACPI::detectPCI()>:
c000f804:	53                   	push   ebx
c000f805:	83 ec 28             	sub    esp,0x28
c000f808:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f80d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f812:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f817:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f81d:	83 e0 04             	and    eax,0x4
c000f820:	0f b6 c0             	movzx  eax,al
c000f823:	85 c0                	test   eax,eax
c000f825:	74 2d                	je     c000f854 <ACPI::detectPCI()+0x50>
c000f827:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f82c:	83 ec 08             	sub    esp,0x8
c000f82f:	68 22 1a 02 c0       	push   0xc0021a22
c000f834:	50                   	push   eax
c000f835:	e8 6e f8 ff ff       	call   c000f0a8 <findDataTable(unsigned char*, char*)>
c000f83a:	83 c4 10             	add    esp,0x10
c000f83d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f841:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f846:	74 0c                	je     c000f854 <ACPI::detectPCI()+0x50>
c000f848:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f84d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f852:	66 90                	xchg   ax,ax
c000f854:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f85c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f860:	8a 00                	mov    al,BYTE PTR [eax]
c000f862:	0f b6 c0             	movzx  eax,al
c000f865:	83 f8 01             	cmp    eax,0x1
c000f868:	75 0e                	jne    c000f878 <ACPI::detectPCI()+0x74>
c000f86a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f86f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f874:	eb 2e                	jmp    c000f8a4 <ACPI::detectPCI()+0xa0>
c000f876:	66 90                	xchg   ax,ax
c000f878:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f87c:	8a 00                	mov    al,BYTE PTR [eax]
c000f87e:	0f b6 c0             	movzx  eax,al
c000f881:	83 f8 02             	cmp    eax,0x2
c000f884:	75 1e                	jne    c000f8a4 <ACPI::detectPCI()+0xa0>
c000f886:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f88b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f890:	85 c0                	test   eax,eax
c000f892:	74 10                	je     c000f8a4 <ACPI::detectPCI()+0xa0>
c000f894:	83 ec 0c             	sub    esp,0xc
c000f897:	68 9c 19 02 c0       	push   0xc002199c
c000f89c:	e8 50 1a 00 00       	call   c00112f1 <KePanic(char const*)>
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f8a8:	83 f0 01             	xor    eax,0x1
c000f8ab:	0f b6 c0             	movzx  eax,al
c000f8ae:	85 c0                	test   eax,eax
c000f8b0:	74 46                	je     c000f8f8 <ACPI::detectPCI()+0xf4>
c000f8b2:	e8 79 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f8b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f8bb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f8c0:	75 0e                	jne    c000f8d0 <ACPI::detectPCI()+0xcc>
c000f8c2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8c7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f8cc:	eb 2a                	jmp    c000f8f8 <ACPI::detectPCI()+0xf4>
c000f8ce:	66 90                	xchg   ax,ax
c000f8d0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f8d5:	75 21                	jne    c000f8f8 <ACPI::detectPCI()+0xf4>
c000f8d7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f8dc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f8e1:	85 c0                	test   eax,eax
c000f8e3:	74 13                	je     c000f8f8 <ACPI::detectPCI()+0xf4>
c000f8e5:	83 ec 0c             	sub    esp,0xc
c000f8e8:	68 9c 19 02 c0       	push   0xc002199c
c000f8ed:	e8 ff 19 00 00       	call   c00112f1 <KePanic(char const*)>
c000f8f2:	83 c4 10             	add    esp,0x10
c000f8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f8fd:	85 c0                	test   eax,eax
c000f8ff:	0f 84 87 00 00 00    	je     c000f98c <ACPI::detectPCI()+0x188>
c000f905:	83 ec 0c             	sub    esp,0xc
c000f908:	68 27 1a 02 c0       	push   0xc0021a27
c000f90d:	e8 09 13 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000f912:	83 c4 10             	add    esp,0x10
c000f915:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f91d:	83 ec 0c             	sub    esp,0xc
c000f920:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f924:	e8 8d 81 ff ff       	call   c0007ab6 <malloc>
c000f929:	83 c4 10             	add    esp,0x10
c000f92c:	89 c3                	mov    ebx,eax
c000f92e:	83 ec 0c             	sub    esp,0xc
c000f931:	53                   	push   ebx
c000f932:	e8 51 b3 00 00       	call   c001ac88 <PCI::PCI()>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f93e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f942:	83 ec 08             	sub    esp,0x8
c000f945:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f949:	50                   	push   eax
c000f94a:	e8 73 cd ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c000f94f:	83 c4 10             	add    esp,0x10
c000f952:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f956:	8b 00                	mov    eax,DWORD PTR [eax]
c000f958:	83 c0 08             	add    eax,0x8
c000f95b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f962:	85 d2                	test   edx,edx
c000f964:	74 0a                	je     c000f970 <ACPI::detectPCI()+0x16c>
c000f966:	ba 01 00 00 00       	mov    edx,0x1
c000f96b:	eb 0b                	jmp    c000f978 <ACPI::detectPCI()+0x174>
c000f96d:	8d 76 00             	lea    esi,[esi+0x0]
c000f970:	ba 02 00 00 00       	mov    edx,0x2
c000f975:	8d 76 00             	lea    esi,[esi+0x0]
c000f978:	6a 00                	push   0x0
c000f97a:	6a 00                	push   0x0
c000f97c:	52                   	push   edx
c000f97d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f981:	ff d0                	call   eax
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	e9 91 00 00 00       	jmp    c000fa1c <ACPI::detectPCI()+0x218>
c000f98b:	90                   	nop
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	68 3f 1a 02 c0       	push   0xc0021a3f
c000f994:	e8 82 12 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000f999:	83 c4 10             	add    esp,0x10
c000f99c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f9a3:	83 ec 0c             	sub    esp,0xc
c000f9a6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f9aa:	e8 07 81 ff ff       	call   c0007ab6 <malloc>
c000f9af:	83 c4 10             	add    esp,0x10
c000f9b2:	89 c3                	mov    ebx,eax
c000f9b4:	83 ec 0c             	sub    esp,0xc
c000f9b7:	53                   	push   ebx
c000f9b8:	e8 65 be 00 00       	call   c001b822 <IDE::IDE()>
c000f9bd:	83 c4 10             	add    esp,0x10
c000f9c0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f9c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9c8:	83 ec 08             	sub    esp,0x8
c000f9cb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f9cf:	50                   	push   eax
c000f9d0:	e8 ed cc ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c000f9d5:	83 c4 10             	add    esp,0x10
c000f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9dc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9ea:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f9f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9f7:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fa00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa06:	83 c0 08             	add    eax,0x8
c000fa09:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa0b:	6a 00                	push   0x0
c000fa0d:	6a 00                	push   0x0
c000fa0f:	6a 00                	push   0x0
c000fa11:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa15:	ff d0                	call   eax
c000fa17:	83 c4 10             	add    esp,0x10
c000fa1a:	66 90                	xchg   ax,ax
c000fa1c:	90                   	nop
c000fa1d:	83 c4 28             	add    esp,0x28
c000fa20:	5b                   	pop    ebx
c000fa21:	c3                   	ret    
c000fa22:	66 90                	xchg   ax,ax

c000fa24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fa24:	83 ec 1c             	sub    esp,0x1c
c000fa27:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa2b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fa2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fa32:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa37:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa3c:	83 ec 08             	sub    esp,0x8
c000fa3f:	52                   	push   edx
c000fa40:	50                   	push   eax
c000fa41:	e8 32 77 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fa4d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fa52:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fa57:	83 ec 04             	sub    esp,0x4
c000fa5a:	6a 01                	push   0x1
c000fa5c:	52                   	push   edx
c000fa5d:	50                   	push   eax
c000fa5e:	e8 2f 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	90                   	nop
c000fa67:	83 c4 1c             	add    esp,0x1c
c000fa6a:	c3                   	ret    
c000fa6b:	90                   	nop

c000fa6c <ACPI::sleep()>:
c000fa6c:	83 ec 0c             	sub    esp,0xc
c000fa6f:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa74:	85 c0                	test   eax,eax
c000fa76:	74 08                	je     c000fa80 <ACPI::sleep()+0x14>
c000fa78:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa7d:	ff d0                	call   eax
c000fa7f:	90                   	nop
c000fa80:	90                   	nop
c000fa81:	83 c4 0c             	add    esp,0xc
c000fa84:	c3                   	ret    
c000fa85:	90                   	nop
c000fa86:	66 90                	xchg   ax,ax

c000fa88 <ACPI::open(int, int, void*)>:
c000fa88:	57                   	push   edi
c000fa89:	56                   	push   esi
c000fa8a:	53                   	push   ebx
c000fa8b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fa91:	83 ec 0c             	sub    esp,0xc
c000fa94:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fa9b:	e8 64 fd ff ff       	call   c000f804 <ACPI::detectPCI()>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	83 ec 0c             	sub    esp,0xc
c000faa6:	68 c4 19 02 c0       	push   0xc00219c4
c000faab:	e8 6b 11 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	b8 4c 05 00 00       	mov    eax,0x54c
c000fab8:	8a 00                	mov    al,BYTE PTR [eax]
c000faba:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fac1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fac9:	83 f8 01             	cmp    eax,0x1
c000facc:	75 12                	jne    c000fae0 <ACPI::open(int, int, void*)+0x58>
c000face:	83 ec 0c             	sub    esp,0xc
c000fad1:	68 51 13 02 c0       	push   0xc0021351
c000fad6:	e8 fd 4b 00 00       	call   c00146d8 <Thr::loadKernelSymbolTable(char const*)>
c000fadb:	83 c4 10             	add    esp,0x10
c000fade:	eb 34                	jmp    c000fb14 <ACPI::open(int, int, void*)+0x8c>
c000fae0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fae8:	3d bb 00 00 00       	cmp    eax,0xbb
c000faed:	75 15                	jne    c000fb04 <ACPI::open(int, int, void*)+0x7c>
c000faef:	83 ec 0c             	sub    esp,0xc
c000faf2:	68 54 1a 02 c0       	push   0xc0021a54
c000faf7:	e8 dc 4b 00 00       	call   c00146d8 <Thr::loadKernelSymbolTable(char const*)>
c000fafc:	83 c4 10             	add    esp,0x10
c000faff:	eb 13                	jmp    c000fb14 <ACPI::open(int, int, void*)+0x8c>
c000fb01:	8d 76 00             	lea    esi,[esi+0x0]
c000fb04:	83 ec 0c             	sub    esp,0xc
c000fb07:	68 72 1a 02 c0       	push   0xc0021a72
c000fb0c:	e8 e0 17 00 00       	call   c00112f1 <KePanic(char const*)>
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fb1c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fb27:	83 ec 0c             	sub    esp,0xc
c000fb2a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fb31:	e8 80 7f ff ff       	call   c0007ab6 <malloc>
c000fb36:	83 c4 10             	add    esp,0x10
c000fb39:	89 c3                	mov    ebx,eax
c000fb3b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fb40:	83 ec 04             	sub    esp,0x4
c000fb43:	50                   	push   eax
c000fb44:	68 8c 1a 02 c0       	push   0xc0021a8c
c000fb49:	53                   	push   ebx
c000fb4a:	e8 69 bc ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c000fb4f:	83 c4 10             	add    esp,0x10
c000fb52:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fb59:	83 ec 08             	sub    esp,0x8
c000fb5c:	6a 01                	push   0x1
c000fb5e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb65:	e8 0a bd ff ff       	call   c000b874 <File::open(FileOpenMode)>
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fb74:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fb7c:	75 16                	jne    c000fb94 <ACPI::open(int, int, void*)+0x10c>
c000fb7e:	83 ec 0c             	sub    esp,0xc
c000fb81:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb88:	e8 45 bd ff ff       	call   c000b8d2 <File::close()>
c000fb8d:	83 c4 10             	add    esp,0x10
c000fb90:	eb 0a                	jmp    c000fb9c <ACPI::open(int, int, void*)+0x114>
c000fb92:	66 90                	xchg   ax,ax
c000fb94:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fb9c:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fba4:	74 1e                	je     c000fbc4 <ACPI::open(int, int, void*)+0x13c>
c000fba6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fbad:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbaf:	83 c0 08             	add    eax,0x8
c000fbb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fbb4:	83 ec 0c             	sub    esp,0xc
c000fbb7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fbbe:	ff d0                	call   eax
c000fbc0:	83 c4 10             	add    esp,0x10
c000fbc3:	90                   	nop
c000fbc4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fbcb:	83 f0 01             	xor    eax,0x1
c000fbce:	0f b6 c0             	movzx  eax,al
c000fbd1:	85 c0                	test   eax,eax
c000fbd3:	74 43                	je     c000fc18 <ACPI::open(int, int, void*)+0x190>
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	68 aa 1a 02 c0       	push   0xc0021aaa
c000fbdd:	e8 39 10 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000fbe2:	83 c4 10             	add    esp,0x10
c000fbe5:	83 ec 04             	sub    esp,0x4
c000fbe8:	6a 0c                	push   0xc
c000fbea:	68 c5 1a 02 c0       	push   0xc0021ac5
c000fbef:	68 d6 1a 02 c0       	push   0xc0021ad6
c000fbf4:	e8 8f 3d 00 00       	call   c0013988 <Reg::readIntWithDefault(char*, char*, int)>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fc03:	83 ec 0c             	sub    esp,0xc
c000fc06:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fc0d:	e8 2a 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fc12:	83 c4 10             	add    esp,0x10
c000fc15:	8d 76 00             	lea    esi,[esi+0x0]
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	68 15 06 02 c0       	push   0xc0020615
c000fc20:	e8 f6 0f 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000fc25:	83 c4 10             	add    esp,0x10
c000fc28:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fc2f:	83 ec 08             	sub    esp,0x8
c000fc32:	6a 13                	push   0x13
c000fc34:	50                   	push   eax
c000fc35:	e8 a0 cd ff ff       	call   c000c9da <getDevicesOfType(DeviceType)>
c000fc3a:	83 c4 0c             	add    esp,0xc
c000fc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc40:	83 ec 0c             	sub    esp,0xc
c000fc43:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fc4a:	50                   	push   eax
c000fc4b:	e8 b0 fd 00 00       	call   c001fa00 <LinkedList<Device>::isEmpty()>
c000fc50:	83 c4 10             	add    esp,0x10
c000fc53:	83 f0 01             	xor    eax,0x1
c000fc56:	0f b6 c0             	movzx  eax,al
c000fc59:	85 c0                	test   eax,eax
c000fc5b:	0f 84 47 01 00 00    	je     c000fda8 <ACPI::open(int, int, void*)+0x320>
c000fc61:	83 ec 0c             	sub    esp,0xc
c000fc64:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fc6b:	50                   	push   eax
c000fc6c:	e8 ab fd 00 00       	call   c001fa1c <LinkedList<Device>::getFirstElement()>
c000fc71:	83 c4 10             	add    esp,0x10
c000fc74:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fc7b:	83 ec 0c             	sub    esp,0xc
c000fc7e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fc85:	50                   	push   eax
c000fc86:	e8 99 fd 00 00       	call   c001fa24 <LinkedList<Device>::removeFirst()>
c000fc8b:	83 c4 10             	add    esp,0x10
c000fc8e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fc95:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fc9c:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fca3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fca7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fcad:	ba 09 00 00 00       	mov    edx,0x9
c000fcb2:	fc                   	cld    
c000fcb3:	89 c7                	mov    edi,eax
c000fcb5:	89 de                	mov    esi,ebx
c000fcb7:	89 d1                	mov    ecx,edx
c000fcb9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fcbb:	83 ec 08             	sub    esp,0x8
c000fcbe:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fcc2:	50                   	push   eax
c000fcc3:	83 ec 24             	sub    esp,0x24
c000fcc6:	89 e0                	mov    eax,esp
c000fcc8:	89 c3                	mov    ebx,eax
c000fcca:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fcce:	ba 09 00 00 00       	mov    edx,0x9
c000fcd3:	89 df                	mov    edi,ebx
c000fcd5:	89 c6                	mov    esi,eax
c000fcd7:	89 d1                	mov    ecx,edx
c000fcd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fcdb:	e8 92 b4 00 00       	call   c001b172 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fce0:	83 c4 30             	add    esp,0x30
c000fce3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fcea:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fcf2:	0f 84 48 ff ff ff    	je     c000fc40 <ACPI::open(int, int, void*)+0x1b8>
c000fcf8:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fd03:	83 ec 0c             	sub    esp,0xc
c000fd06:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fd0d:	e8 a4 7d ff ff       	call   c0007ab6 <malloc>
c000fd12:	83 c4 10             	add    esp,0x10
c000fd15:	89 c3                	mov    ebx,eax
c000fd17:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fd1c:	83 ec 04             	sub    esp,0x4
c000fd1f:	50                   	push   eax
c000fd20:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd27:	53                   	push   ebx
c000fd28:	e8 8b ba ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c000fd2d:	83 c4 10             	add    esp,0x10
c000fd30:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fd37:	83 ec 0c             	sub    esp,0xc
c000fd3a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd41:	e8 f2 bd ff ff       	call   c000bb38 <File::exists()>
c000fd46:	83 c4 10             	add    esp,0x10
c000fd49:	0f b6 c0             	movzx  eax,al
c000fd4c:	85 c0                	test   eax,eax
c000fd4e:	74 28                	je     c000fd78 <ACPI::open(int, int, void*)+0x2f0>
c000fd50:	83 ec 08             	sub    esp,0x8
c000fd53:	6a 01                	push   0x1
c000fd55:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fd5c:	e8 f1 53 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000fd61:	83 c4 10             	add    esp,0x10
c000fd64:	83 ec 08             	sub    esp,0x8
c000fd67:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fd6e:	50                   	push   eax
c000fd6f:	e8 0f 56 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	90                   	nop
c000fd78:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fd80:	0f 84 ba fe ff ff    	je     c000fc40 <ACPI::open(int, int, void*)+0x1b8>
c000fd86:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fd8d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd8f:	83 c0 08             	add    eax,0x8
c000fd92:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd94:	83 ec 0c             	sub    esp,0xc
c000fd97:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd9e:	ff d0                	call   eax
c000fda0:	83 c4 10             	add    esp,0x10
c000fda3:	e9 98 fe ff ff       	jmp    c000fc40 <ACPI::open(int, int, void*)+0x1b8>
c000fda8:	83 ec 0c             	sub    esp,0xc
c000fdab:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fdb2:	50                   	push   eax
c000fdb3:	e8 44 fc 00 00       	call   c001f9fc <LinkedList<Device>::~LinkedList()>
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fdc1:	83 ec 08             	sub    esp,0x8
c000fdc4:	6a 01                	push   0x1
c000fdc6:	68 dd 1a 02 c0       	push   0xc0021add
c000fdcb:	e8 82 53 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000fdd0:	83 c4 10             	add    esp,0x10
c000fdd3:	83 ec 08             	sub    esp,0x8
c000fdd6:	53                   	push   ebx
c000fdd7:	50                   	push   eax
c000fdd8:	e8 a6 55 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000fddd:	83 c4 10             	add    esp,0x10
c000fde0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fde5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fdeb:	83 e0 04             	and    eax,0x4
c000fdee:	0f b6 c0             	movzx  eax,al
c000fdf1:	85 c0                	test   eax,eax
c000fdf3:	0f 84 1b 01 00 00    	je     c000ff14 <ACPI::open(int, int, void*)+0x48c>
c000fdf9:	83 ec 0c             	sub    esp,0xc
c000fdfc:	68 fa 1a 02 c0       	push   0xc0021afa
c000fe01:	e8 15 0e 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c000fe06:	83 c4 10             	add    esp,0x10
c000fe09:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fe1e:	e8 93 7c ff ff       	call   c0007ab6 <malloc>
c000fe23:	83 c4 10             	add    esp,0x10
c000fe26:	89 c3                	mov    ebx,eax
c000fe28:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fe2d:	83 ec 04             	sub    esp,0x4
c000fe30:	50                   	push   eax
c000fe31:	68 17 1b 02 c0       	push   0xc0021b17
c000fe36:	53                   	push   ebx
c000fe37:	e8 7c b9 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c000fe3c:	83 c4 10             	add    esp,0x10
c000fe3f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fe46:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe4e:	74 20                	je     c000fe70 <ACPI::open(int, int, void*)+0x3e8>
c000fe50:	83 ec 0c             	sub    esp,0xc
c000fe53:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fe5a:	e8 d9 bc ff ff       	call   c000bb38 <File::exists()>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	0f b6 c0             	movzx  eax,al
c000fe65:	85 c0                	test   eax,eax
c000fe67:	74 07                	je     c000fe70 <ACPI::open(int, int, void*)+0x3e8>
c000fe69:	b0 01                	mov    al,0x1
c000fe6b:	eb 07                	jmp    c000fe74 <ACPI::open(int, int, void*)+0x3ec>
c000fe6d:	8d 76 00             	lea    esi,[esi+0x0]
c000fe70:	b0 00                	mov    al,0x0
c000fe72:	66 90                	xchg   ax,ax
c000fe74:	0f b6 c0             	movzx  eax,al
c000fe77:	85 c0                	test   eax,eax
c000fe79:	74 25                	je     c000fea0 <ACPI::open(int, int, void*)+0x418>
c000fe7b:	83 ec 08             	sub    esp,0x8
c000fe7e:	6a 01                	push   0x1
c000fe80:	68 17 1b 02 c0       	push   0xc0021b17
c000fe85:	e8 c8 52 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c000fe8a:	83 c4 10             	add    esp,0x10
c000fe8d:	83 ec 08             	sub    esp,0x8
c000fe90:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fe97:	50                   	push   eax
c000fe98:	e8 e6 54 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fea8:	74 2a                	je     c000fed4 <ACPI::open(int, int, void*)+0x44c>
c000feaa:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000feb2:	74 20                	je     c000fed4 <ACPI::open(int, int, void*)+0x44c>
c000feb4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000febb:	8b 00                	mov    eax,DWORD PTR [eax]
c000febd:	83 c0 08             	add    eax,0x8
c000fec0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fecc:	ff d0                	call   eax
c000fece:	83 c4 10             	add    esp,0x10
c000fed1:	8d 76 00             	lea    esi,[esi+0x0]
c000fed4:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fed9:	83 ec 08             	sub    esp,0x8
c000fedc:	68 34 1b 02 c0       	push   0xc0021b34
c000fee1:	50                   	push   eax
c000fee2:	e8 c1 f1 ff ff       	call   c000f0a8 <findDataTable(unsigned char*, char*)>
c000fee7:	83 c4 10             	add    esp,0x10
c000feea:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fef1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fef9:	74 19                	je     c000ff14 <ACPI::open(int, int, void*)+0x48c>
c000fefb:	83 ec 08             	sub    esp,0x8
c000fefe:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ff05:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ff0c:	e8 13 fb ff ff       	call   c000fa24 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	b8 00 00 00 00       	mov    eax,0x0
c000ff19:	81 c4 70 01 00 00    	add    esp,0x170
c000ff1f:	5b                   	pop    ebx
c000ff20:	5e                   	pop    esi
c000ff21:	5f                   	pop    edi
c000ff22:	c3                   	ret    
c000ff23:	90                   	nop

c000ff24 <CPU::close(int, int, void*)>:
c000ff24:	31 c0                	xor    eax,eax
c000ff26:	c3                   	ret    
c000ff27:	90                   	nop

c000ff28 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000ff28:	60                   	pusha  
c000ff29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ff31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ff35:	9c                   	pushf  
c000ff36:	fa                   	cli    
c000ff37:	0f 09                	wbinvd 
c000ff39:	0f 30                	wrmsr  
c000ff3b:	9d                   	popf   
c000ff3c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff40:	89 02                	mov    DWORD PTR [edx],eax
c000ff42:	61                   	popa   
c000ff43:	c3                   	ret    

c000ff44 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ff44:	60                   	pusha  
c000ff45:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ff49:	9c                   	pushf  
c000ff4a:	fa                   	cli    
c000ff4b:	0f 09                	wbinvd 
c000ff4d:	31 c0                	xor    eax,eax
c000ff4f:	31 d2                	xor    edx,edx
c000ff51:	0f 32                	rdmsr  
c000ff53:	9d                   	popf   
c000ff54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ff58:	89 02                	mov    DWORD PTR [edx],eax
c000ff5a:	61                   	popa   
c000ff5b:	c3                   	ret    

c000ff5c <CPU::AMD_K6_writeback(int, int, int)>:
c000ff5c:	56                   	push   esi
c000ff5d:	53                   	push   ebx
c000ff5e:	83 ec 10             	sub    esp,0x10
c000ff61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ff65:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ff6a:	75 5d                	jne    c000ffc9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff6c:	83 f8 08             	cmp    eax,0x8
c000ff6f:	75 09                	jne    c000ff7a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ff71:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ff76:	7e 13                	jle    c000ff8b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff78:	eb 30                	jmp    c000ffaa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff7a:	83 f8 06             	cmp    eax,0x6
c000ff7d:	7c 4a                	jl     c000ffc9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff7f:	83 f8 07             	cmp    eax,0x7
c000ff82:	7e 07                	jle    c000ff8b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff84:	83 f8 09             	cmp    eax,0x9
c000ff87:	74 21                	je     c000ffaa <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff89:	eb 3e                	jmp    c000ffc9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff8b:	89 e6                	mov    esi,esp
c000ff8d:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff93:	56                   	push   esi
c000ff94:	c1 eb 15             	shr    ebx,0x15
c000ff97:	68 82 00 00 c0       	push   0xc0000082
c000ff9c:	83 e3 7e             	and    ebx,0x7e
c000ff9f:	e8 a0 ff ff ff       	call   c000ff44 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffa4:	56                   	push   esi
c000ffa5:	6a 00                	push   0x0
c000ffa7:	53                   	push   ebx
c000ffa8:	eb 12                	jmp    c000ffbc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ffaa:	89 e3                	mov    ebx,esp
c000ffac:	53                   	push   ebx
c000ffad:	68 82 00 00 c0       	push   0xc0000082
c000ffb2:	e8 8d ff ff ff       	call   c000ff44 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ffb7:	53                   	push   ebx
c000ffb8:	6a 00                	push   0x0
c000ffba:	6a 00                	push   0x0
c000ffbc:	68 82 00 00 c0       	push   0xc0000082
c000ffc1:	e8 62 ff ff ff       	call   c000ff28 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ffc6:	83 c4 18             	add    esp,0x18
c000ffc9:	83 c4 10             	add    esp,0x10
c000ffcc:	5b                   	pop    ebx
c000ffcd:	5e                   	pop    esi
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ffd0:	55                   	push   ebp
c000ffd1:	57                   	push   edi
c000ffd2:	56                   	push   esi
c000ffd3:	53                   	push   ebx
c000ffd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffd8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ffdc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ffe0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ffe4:	39 05 f8 30 02 c0    	cmp    DWORD PTR ds:0xc00230f8,eax
c000ffea:	75 23                	jne    c001000f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ffec:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000fff1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fff5:	89 06                	mov    DWORD PTR [esi],eax
c000fff7:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000fffc:	89 07                	mov    DWORD PTR [edi],eax
c000fffe:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c0010003:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010006:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c001000b:	89 02                	mov    DWORD PTR [edx],eax
c001000d:	eb 3f                	jmp    c001004e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001000f:	31 c9                	xor    ecx,ecx
c0010011:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010015:	0f a2                	cpuid  
c0010017:	89 06                	mov    DWORD PTR [esi],eax
c0010019:	89 1f                	mov    DWORD PTR [edi],ebx
c001001b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001001f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010022:	89 10                	mov    DWORD PTR [eax],edx
c0010024:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010028:	a3 f8 30 02 c0       	mov    ds:0xc00230f8,eax
c001002d:	8b 06                	mov    eax,DWORD PTR [esi]
c001002f:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c0010034:	8b 07                	mov    eax,DWORD PTR [edi]
c0010036:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c001003b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001003e:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c0010043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010047:	8b 00                	mov    eax,DWORD PTR [eax]
c0010049:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c001004e:	5b                   	pop    ebx
c001004f:	5e                   	pop    esi
c0010050:	5f                   	pop    edi
c0010051:	5d                   	pop    ebp
c0010052:	c3                   	ret    
c0010053:	90                   	nop

c0010054 <CPU::cpuidCheckEDX(unsigned int)>:
c0010054:	83 ec 10             	sub    esp,0x10
c0010057:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001005b:	50                   	push   eax
c001005c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010060:	50                   	push   eax
c0010061:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010065:	50                   	push   eax
c0010066:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006a:	50                   	push   eax
c001006b:	6a 01                	push   0x1
c001006d:	e8 5e ff ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010072:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010076:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001007a:	0f 95 c0             	setne  al
c001007d:	83 c4 24             	add    esp,0x24
c0010080:	c3                   	ret    
c0010081:	90                   	nop

c0010082 <CPU::cpuidCheckECX(unsigned int)>:
c0010082:	83 ec 10             	sub    esp,0x10
c0010085:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010089:	50                   	push   eax
c001008a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001008e:	50                   	push   eax
c001008f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010093:	50                   	push   eax
c0010094:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010098:	50                   	push   eax
c0010099:	6a 01                	push   0x1
c001009b:	e8 30 ff ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100a4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00100a8:	0f 95 c0             	setne  al
c00100ab:	83 c4 24             	add    esp,0x24
c00100ae:	c3                   	ret    
c00100af:	90                   	nop

c00100b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00100b0:	83 ec 10             	sub    esp,0x10
c00100b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100b7:	50                   	push   eax
c00100b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100bc:	50                   	push   eax
c00100bd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c1:	50                   	push   eax
c00100c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100c6:	50                   	push   eax
c00100c7:	6a 07                	push   0x7
c00100c9:	e8 02 ff ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00100d2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00100d6:	0f 95 c0             	setne  al
c00100d9:	83 c4 24             	add    esp,0x24
c00100dc:	c3                   	ret    
c00100dd:	90                   	nop

c00100de <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00100de:	83 ec 10             	sub    esp,0x10
c00100e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100e5:	50                   	push   eax
c00100e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ea:	50                   	push   eax
c00100eb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100ef:	50                   	push   eax
c00100f0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00100f4:	50                   	push   eax
c00100f5:	6a 07                	push   0x7
c00100f7:	e8 d4 fe ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00100fc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010100:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010104:	0f 95 c0             	setne  al
c0010107:	83 c4 24             	add    esp,0x24
c001010a:	c3                   	ret    
c001010b:	90                   	nop

c001010c <CPU::CPU()>:
c001010c:	83 ec 0c             	sub    esp,0xc
c001010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010113:	83 ec 08             	sub    esp,0x8
c0010116:	68 59 1c 02 c0       	push   0xc0021c59
c001011b:	50                   	push   eax
c001011c:	e8 39 c7 ff ff       	call   c000c85a <Device::Device(char const*)>
c0010121:	83 c4 10             	add    esp,0x10
c0010124:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c0010129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001012d:	89 10                	mov    DWORD PTR [eax],edx
c001012f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010133:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001013d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010141:	05 78 01 00 00       	add    eax,0x178
c0010146:	83 ec 0c             	sub    esp,0xc
c0010149:	50                   	push   eax
c001014a:	e8 0d 72 ff ff       	call   c000735c <GDT::GDT()>
c001014f:	83 c4 10             	add    esp,0x10
c0010152:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010156:	05 7c 09 00 00       	add    eax,0x97c
c001015b:	83 ec 0c             	sub    esp,0xc
c001015e:	50                   	push   eax
c001015f:	e8 48 74 ff ff       	call   c00075ac <IDT::IDT()>
c0010164:	83 c4 10             	add    esp,0x10
c0010167:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016b:	05 7c 11 00 00       	add    eax,0x117c
c0010170:	83 ec 0c             	sub    esp,0xc
c0010173:	50                   	push   eax
c0010174:	e8 cb 8d ff ff       	call   c0008f44 <TSS::TSS()>
c0010179:	83 c4 10             	add    esp,0x10
c001017c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010180:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010187:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0010195:	90                   	nop
c0010196:	83 c4 0c             	add    esp,0xc
c0010199:	c3                   	ret    

c001019a <CPU::displayFeatures()>:
c001019a:	c3                   	ret    
c001019b:	90                   	nop

c001019c <CPU::detectFeatures()>:
c001019c:	55                   	push   ebp
c001019d:	57                   	push   edi
c001019e:	56                   	push   esi
c001019f:	53                   	push   ebx
c00101a0:	83 ec 30             	sub    esp,0x30
c00101a3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00101a7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00101b1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00101b8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00101be:	6a 0d                	push   0xd
c00101c0:	6a 00                	push   0x0
c00101c2:	55                   	push   ebp
c00101c3:	e8 28 03 ff ff       	call   c00004f0 <memset>
c00101c8:	83 c4 10             	add    esp,0x10
c00101cb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00101d0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00101d7:	0f 84 db 05 00 00    	je     c00107b8 <CPU::detectFeatures()+0x61c>
c00101dd:	83 ec 0c             	sub    esp,0xc
c00101e0:	89 ef                	mov    edi,ebp
c00101e2:	6a 10                	push   0x10
c00101e4:	e8 6b fe ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c00101e9:	83 e0 01             	and    eax,0x1
c00101ec:	8d 14 00             	lea    edx,[eax+eax*1]
c00101ef:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101f5:	83 e0 fd             	and    eax,0xfffffffd
c00101f8:	09 d0                	or     eax,edx
c00101fa:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010200:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010207:	e8 48 fe ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c001020c:	83 e0 01             	and    eax,0x1
c001020f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010216:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001021c:	83 e0 fb             	and    eax,0xfffffffb
c001021f:	09 d0                	or     eax,edx
c0010221:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010227:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001022e:	e8 21 fe ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c0010233:	83 e0 01             	and    eax,0x1
c0010236:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001023d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010243:	83 e0 f7             	and    eax,0xfffffff7
c0010246:	09 d0                	or     eax,edx
c0010248:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001024e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010255:	e8 fa fd ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c001025a:	83 e0 01             	and    eax,0x1
c001025d:	c1 e0 04             	shl    eax,0x4
c0010260:	89 c2                	mov    edx,eax
c0010262:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010268:	83 e0 ef             	and    eax,0xffffffef
c001026b:	09 d0                	or     eax,edx
c001026d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010273:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001027a:	e8 d5 fd ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c001027f:	83 e0 01             	and    eax,0x1
c0010282:	c1 e0 05             	shl    eax,0x5
c0010285:	89 c2                	mov    edx,eax
c0010287:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001028d:	83 e0 df             	and    eax,0xffffffdf
c0010290:	09 d0                	or     eax,edx
c0010292:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010298:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001029f:	e8 b0 fd ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c00102a4:	83 e0 01             	and    eax,0x1
c00102a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00102aa:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00102b0:	83 e0 fd             	and    eax,0xfffffffd
c00102b3:	09 d0                	or     eax,edx
c00102b5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00102bb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00102c2:	e8 8d fd ff ff       	call   c0010054 <CPU::cpuidCheckEDX(unsigned int)>
c00102c7:	83 e0 01             	and    eax,0x1
c00102ca:	c1 e0 06             	shl    eax,0x6
c00102cd:	89 c2                	mov    edx,eax
c00102cf:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00102d5:	83 e0 bf             	and    eax,0xffffffbf
c00102d8:	09 d0                	or     eax,edx
c00102da:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00102e0:	58                   	pop    eax
c00102e1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102e5:	50                   	push   eax
c00102e6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102ea:	50                   	push   eax
c00102eb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00102ef:	56                   	push   esi
c00102f0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00102f4:	50                   	push   eax
c00102f5:	6a 00                	push   0x0
c00102f7:	e8 d4 fc ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00102fc:	b8 04 00 00 00       	mov    eax,0x4
c0010301:	89 c1                	mov    ecx,eax
c0010303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010305:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001030b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001030f:	89 c1                	mov    ecx,eax
c0010311:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010313:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010319:	8d 74 24 38          	lea    esi,[esp+0x38]
c001031d:	89 c1                	mov    ecx,eax
c001031f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010321:	83 c4 18             	add    esp,0x18
c0010324:	68 68 1b 02 c0       	push   0xc0021b68
c0010329:	55                   	push   ebp
c001032a:	e8 21 04 ff ff       	call   c0000750 <strcmp>
c001032f:	83 c4 10             	add    esp,0x10
c0010332:	85 c0                	test   eax,eax
c0010334:	75 0f                	jne    c0010345 <CPU::detectFeatures()+0x1a9>
c0010336:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010340:	e9 22 02 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010345:	50                   	push   eax
c0010346:	50                   	push   eax
c0010347:	68 75 1b 02 c0       	push   0xc0021b75
c001034c:	55                   	push   ebp
c001034d:	e8 fe 03 ff ff       	call   c0000750 <strcmp>
c0010352:	83 c4 10             	add    esp,0x10
c0010355:	85 c0                	test   eax,eax
c0010357:	74 dd                	je     c0010336 <CPU::detectFeatures()+0x19a>
c0010359:	50                   	push   eax
c001035a:	50                   	push   eax
c001035b:	68 82 1b 02 c0       	push   0xc0021b82
c0010360:	55                   	push   ebp
c0010361:	e8 ea 03 ff ff       	call   c0000750 <strcmp>
c0010366:	83 c4 10             	add    esp,0x10
c0010369:	85 c0                	test   eax,eax
c001036b:	74 2a                	je     c0010397 <CPU::detectFeatures()+0x1fb>
c001036d:	50                   	push   eax
c001036e:	50                   	push   eax
c001036f:	68 8f 1b 02 c0       	push   0xc0021b8f
c0010374:	55                   	push   ebp
c0010375:	e8 d6 03 ff ff       	call   c0000750 <strcmp>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	85 c0                	test   eax,eax
c001037f:	74 16                	je     c0010397 <CPU::detectFeatures()+0x1fb>
c0010381:	50                   	push   eax
c0010382:	50                   	push   eax
c0010383:	68 9c 1b 02 c0       	push   0xc0021b9c
c0010388:	55                   	push   ebp
c0010389:	e8 c2 03 ff ff       	call   c0000750 <strcmp>
c001038e:	83 c4 10             	add    esp,0x10
c0010391:	85 c0                	test   eax,eax
c0010393:	74 48                	je     c00103dd <CPU::detectFeatures()+0x241>
c0010395:	eb 0f                	jmp    c00103a6 <CPU::detectFeatures()+0x20a>
c0010397:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00103a1:	e9 c1 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c00103a6:	50                   	push   eax
c00103a7:	50                   	push   eax
c00103a8:	68 a9 1b 02 c0       	push   0xc0021ba9
c00103ad:	55                   	push   ebp
c00103ae:	e8 9d 03 ff ff       	call   c0000750 <strcmp>
c00103b3:	83 c4 10             	add    esp,0x10
c00103b6:	85 c0                	test   eax,eax
c00103b8:	74 23                	je     c00103dd <CPU::detectFeatures()+0x241>
c00103ba:	57                   	push   edi
c00103bb:	57                   	push   edi
c00103bc:	68 b6 1b 02 c0       	push   0xc0021bb6
c00103c1:	55                   	push   ebp
c00103c2:	e8 89 03 ff ff       	call   c0000750 <strcmp>
c00103c7:	83 c4 10             	add    esp,0x10
c00103ca:	85 c0                	test   eax,eax
c00103cc:	75 1e                	jne    c00103ec <CPU::detectFeatures()+0x250>
c00103ce:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00103d8:	e9 8a 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c00103dd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00103e7:	e9 7b 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c00103ec:	56                   	push   esi
c00103ed:	56                   	push   esi
c00103ee:	68 c3 1b 02 c0       	push   0xc0021bc3
c00103f3:	55                   	push   ebp
c00103f4:	e8 57 03 ff ff       	call   c0000750 <strcmp>
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	85 c0                	test   eax,eax
c00103fe:	75 0f                	jne    c001040f <CPU::detectFeatures()+0x273>
c0010400:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001040a:	e9 58 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c001040f:	51                   	push   ecx
c0010410:	51                   	push   ecx
c0010411:	68 82 1b 02 c0       	push   0xc0021b82
c0010416:	55                   	push   ebp
c0010417:	e8 34 03 ff ff       	call   c0000750 <strcmp>
c001041c:	83 c4 10             	add    esp,0x10
c001041f:	85 c0                	test   eax,eax
c0010421:	75 0f                	jne    c0010432 <CPU::detectFeatures()+0x296>
c0010423:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001042d:	e9 35 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010432:	52                   	push   edx
c0010433:	52                   	push   edx
c0010434:	68 d0 1b 02 c0       	push   0xc0021bd0
c0010439:	55                   	push   ebp
c001043a:	e8 11 03 ff ff       	call   c0000750 <strcmp>
c001043f:	83 c4 10             	add    esp,0x10
c0010442:	85 c0                	test   eax,eax
c0010444:	75 0f                	jne    c0010455 <CPU::detectFeatures()+0x2b9>
c0010446:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010450:	e9 12 01 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010455:	50                   	push   eax
c0010456:	50                   	push   eax
c0010457:	68 dd 1b 02 c0       	push   0xc0021bdd
c001045c:	55                   	push   ebp
c001045d:	e8 ee 02 ff ff       	call   c0000750 <strcmp>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	85 c0                	test   eax,eax
c0010467:	75 0f                	jne    c0010478 <CPU::detectFeatures()+0x2dc>
c0010469:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010473:	e9 ef 00 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010478:	50                   	push   eax
c0010479:	50                   	push   eax
c001047a:	68 ea 1b 02 c0       	push   0xc0021bea
c001047f:	55                   	push   ebp
c0010480:	e8 cb 02 ff ff       	call   c0000750 <strcmp>
c0010485:	83 c4 10             	add    esp,0x10
c0010488:	85 c0                	test   eax,eax
c001048a:	75 0f                	jne    c001049b <CPU::detectFeatures()+0x2ff>
c001048c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0010496:	e9 cc 00 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c001049b:	50                   	push   eax
c001049c:	50                   	push   eax
c001049d:	68 f7 1b 02 c0       	push   0xc0021bf7
c00104a2:	55                   	push   ebp
c00104a3:	e8 a8 02 ff ff       	call   c0000750 <strcmp>
c00104a8:	83 c4 10             	add    esp,0x10
c00104ab:	85 c0                	test   eax,eax
c00104ad:	75 0f                	jne    c00104be <CPU::detectFeatures()+0x322>
c00104af:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00104b9:	e9 a9 00 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c00104be:	50                   	push   eax
c00104bf:	50                   	push   eax
c00104c0:	68 04 1c 02 c0       	push   0xc0021c04
c00104c5:	55                   	push   ebp
c00104c6:	e8 85 02 ff ff       	call   c0000750 <strcmp>
c00104cb:	83 c4 10             	add    esp,0x10
c00104ce:	85 c0                	test   eax,eax
c00104d0:	75 0f                	jne    c00104e1 <CPU::detectFeatures()+0x345>
c00104d2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00104dc:	e9 86 00 00 00       	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c00104e1:	50                   	push   eax
c00104e2:	50                   	push   eax
c00104e3:	68 11 1c 02 c0       	push   0xc0021c11
c00104e8:	55                   	push   ebp
c00104e9:	e8 62 02 ff ff       	call   c0000750 <strcmp>
c00104ee:	83 c4 10             	add    esp,0x10
c00104f1:	85 c0                	test   eax,eax
c00104f3:	75 0c                	jne    c0010501 <CPU::detectFeatures()+0x365>
c00104f5:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00104ff:	eb 66                	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010501:	50                   	push   eax
c0010502:	50                   	push   eax
c0010503:	68 1e 1c 02 c0       	push   0xc0021c1e
c0010508:	55                   	push   ebp
c0010509:	e8 42 02 ff ff       	call   c0000750 <strcmp>
c001050e:	83 c4 10             	add    esp,0x10
c0010511:	85 c0                	test   eax,eax
c0010513:	75 0c                	jne    c0010521 <CPU::detectFeatures()+0x385>
c0010515:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001051f:	eb 46                	jmp    c0010567 <CPU::detectFeatures()+0x3cb>
c0010521:	57                   	push   edi
c0010522:	57                   	push   edi
c0010523:	68 2b 1c 02 c0       	push   0xc0021c2b
c0010528:	55                   	push   ebp
c0010529:	e8 22 02 ff ff       	call   c0000750 <strcmp>
c001052e:	83 c4 10             	add    esp,0x10
c0010531:	85 c0                	test   eax,eax
c0010533:	74 e0                	je     c0010515 <CPU::detectFeatures()+0x379>
c0010535:	56                   	push   esi
c0010536:	56                   	push   esi
c0010537:	68 38 1c 02 c0       	push   0xc0021c38
c001053c:	55                   	push   ebp
c001053d:	e8 0e 02 ff ff       	call   c0000750 <strcmp>
c0010542:	83 c4 10             	add    esp,0x10
c0010545:	85 c0                	test   eax,eax
c0010547:	74 cc                	je     c0010515 <CPU::detectFeatures()+0x379>
c0010549:	51                   	push   ecx
c001054a:	51                   	push   ecx
c001054b:	68 45 1c 02 c0       	push   0xc0021c45
c0010550:	55                   	push   ebp
c0010551:	e8 fa 01 ff ff       	call   c0000750 <strcmp>
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	85 c0                	test   eax,eax
c001055b:	74 b8                	je     c0010515 <CPU::detectFeatures()+0x379>
c001055d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010567:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001056c:	0f 86 be 00 00 00    	jbe    c0010630 <CPU::detectFeatures()+0x494>
c0010572:	83 ec 0c             	sub    esp,0xc
c0010575:	68 80 00 00 00       	push   0x80
c001057a:	e8 31 fb ff ff       	call   c00100b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001057f:	83 e0 01             	and    eax,0x1
c0010582:	c1 e0 06             	shl    eax,0x6
c0010585:	89 c2                	mov    edx,eax
c0010587:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001058d:	83 e0 bf             	and    eax,0xffffffbf
c0010590:	09 d0                	or     eax,edx
c0010592:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010598:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001059f:	e8 0c fb ff ff       	call   c00100b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105a4:	83 e0 01             	and    eax,0x1
c00105a7:	c1 e0 04             	shl    eax,0x4
c00105aa:	89 c2                	mov    edx,eax
c00105ac:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105b2:	83 e0 ef             	and    eax,0xffffffef
c00105b5:	09 d0                	or     eax,edx
c00105b7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105bd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00105c4:	e8 e7 fa ff ff       	call   c00100b0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00105c9:	89 c2                	mov    edx,eax
c00105cb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00105d1:	c1 e2 07             	shl    edx,0x7
c00105d4:	83 e0 7f             	and    eax,0x7f
c00105d7:	09 d0                	or     eax,edx
c00105d9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105df:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00105e6:	e8 f3 fa ff ff       	call   c00100de <CPU::cpuidCheckExtendedECX(unsigned int)>
c00105eb:	83 e0 01             	and    eax,0x1
c00105ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00105f5:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105fb:	83 e0 f7             	and    eax,0xfffffff7
c00105fe:	09 d0                	or     eax,edx
c0010600:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010606:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001060d:	e8 cc fa ff ff       	call   c00100de <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010612:	83 c4 10             	add    esp,0x10
c0010615:	83 e0 01             	and    eax,0x1
c0010618:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001061f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010625:	83 e0 fb             	and    eax,0xfffffffb
c0010628:	09 d0                	or     eax,edx
c001062a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010630:	83 ec 0c             	sub    esp,0xc
c0010633:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010637:	50                   	push   eax
c0010638:	8d 44 24 28          	lea    eax,[esp+0x28]
c001063c:	50                   	push   eax
c001063d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010641:	57                   	push   edi
c0010642:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010646:	56                   	push   esi
c0010647:	6a 01                	push   0x1
c0010649:	e8 82 f9 ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001064e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010652:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010658:	89 c1                	mov    ecx,eax
c001065a:	83 e2 f0             	and    edx,0xfffffff0
c001065d:	83 e1 0f             	and    ecx,0xf
c0010660:	09 ca                	or     edx,ecx
c0010662:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010668:	89 c2                	mov    edx,eax
c001066a:	c1 ea 04             	shr    edx,0x4
c001066d:	83 e2 0f             	and    edx,0xf
c0010670:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010674:	89 d1                	mov    ecx,edx
c0010676:	83 c4 20             	add    esp,0x20
c0010679:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001067f:	c1 e1 06             	shl    ecx,0x6
c0010682:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010688:	09 ca                	or     edx,ecx
c001068a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010691:	89 c2                	mov    edx,eax
c0010693:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010699:	c1 ea 08             	shr    edx,0x8
c001069c:	83 e1 3f             	and    ecx,0x3f
c001069f:	83 e2 0f             	and    edx,0xf
c00106a2:	89 d5                	mov    ebp,edx
c00106a4:	83 e5 03             	and    ebp,0x3
c00106a7:	c1 e5 06             	shl    ebp,0x6
c00106aa:	09 e9                	or     ecx,ebp
c00106ac:	89 d5                	mov    ebp,edx
c00106ae:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00106b4:	c1 ed 02             	shr    ebp,0x2
c00106b7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00106bd:	83 e1 c0             	and    ecx,0xffffffc0
c00106c0:	09 e9                	or     ecx,ebp
c00106c2:	89 c5                	mov    ebp,eax
c00106c4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00106ca:	c1 ed 08             	shr    ebp,0x8
c00106cd:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00106d3:	83 e5 30             	and    ebp,0x30
c00106d6:	83 e1 cf             	and    ecx,0xffffffcf
c00106d9:	09 e9                	or     ecx,ebp
c00106db:	83 fa 06             	cmp    edx,0x6
c00106de:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00106e4:	74 05                	je     c00106eb <CPU::detectFeatures()+0x54f>
c00106e6:	83 fa 0f             	cmp    edx,0xf
c00106e9:	75 64                	jne    c001074f <CPU::detectFeatures()+0x5b3>
c00106eb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00106f1:	89 c1                	mov    ecx,eax
c00106f3:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c00106f9:	c1 e9 10             	shr    ecx,0x10
c00106fc:	c1 e1 04             	shl    ecx,0x4
c00106ff:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010703:	0f b6 c9             	movzx  ecx,cl
c0010706:	c1 e1 06             	shl    ecx,0x6
c0010709:	09 e9                	or     ecx,ebp
c001070b:	83 fa 0f             	cmp    edx,0xf
c001070e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010715:	75 38                	jne    c001074f <CPU::detectFeatures()+0x5b3>
c0010717:	c1 e8 14             	shr    eax,0x14
c001071a:	83 c0 0f             	add    eax,0xf
c001071d:	0f b6 c0             	movzx  eax,al
c0010720:	89 c2                	mov    edx,eax
c0010722:	c1 e8 02             	shr    eax,0x2
c0010725:	83 e2 03             	and    edx,0x3
c0010728:	89 d1                	mov    ecx,edx
c001072a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010730:	c1 e1 06             	shl    ecx,0x6
c0010733:	83 e2 3f             	and    edx,0x3f
c0010736:	09 ca                	or     edx,ecx
c0010738:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001073e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010744:	83 e2 c0             	and    edx,0xffffffc0
c0010747:	09 d0                	or     eax,edx
c0010749:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001074f:	83 ec 0c             	sub    esp,0xc
c0010752:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010758:	83 c8 07             	or     eax,0x7
c001075b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010761:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010765:	50                   	push   eax
c0010766:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001076a:	55                   	push   ebp
c001076b:	57                   	push   edi
c001076c:	56                   	push   esi
c001076d:	68 00 00 00 80       	push   0x80000000
c0010772:	e8 59 f8 ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010777:	83 c4 20             	add    esp,0x20
c001077a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010782:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010786:	76 1e                	jbe    c00107a6 <CPU::detectFeatures()+0x60a>
c0010788:	83 ec 0c             	sub    esp,0xc
c001078b:	50                   	push   eax
c001078c:	55                   	push   ebp
c001078d:	57                   	push   edi
c001078e:	56                   	push   esi
c001078f:	68 01 00 00 80       	push   0x80000001
c0010794:	e8 37 f8 ff ff       	call   c000ffd0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010799:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00107a3:	83 c4 20             	add    esp,0x20
c00107a6:	52                   	push   edx
c00107a7:	52                   	push   edx
c00107a8:	68 51 1c 02 c0       	push   0xc0021c51
c00107ad:	53                   	push   ebx
c00107ae:	e8 99 c0 ff ff       	call   c000c84c <Device::setName(char const*)>
c00107b3:	83 c4 10             	add    esp,0x10
c00107b6:	eb 69                	jmp    c0010821 <CPU::detectFeatures()+0x685>
c00107b8:	50                   	push   eax
c00107b9:	50                   	push   eax
c00107ba:	68 b6 1b 02 c0       	push   0xc0021bb6
c00107bf:	55                   	push   ebp
c00107c0:	e8 7b fe fe ff       	call   c0000640 <strcpy>
c00107c5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00107cf:	e8 ef f9 fe ff       	call   c00001c3 <is486>
c00107d4:	83 c4 10             	add    esp,0x10
c00107d7:	85 c0                	test   eax,eax
c00107d9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00107df:	74 1f                	je     c0010800 <CPU::detectFeatures()+0x664>
c00107e1:	83 c8 07             	or     eax,0x7
c00107e4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00107ea:	0f 20 c0             	mov    eax,cr0
c00107ed:	83 e0 14             	and    eax,0x14
c00107f0:	83 f8 04             	cmp    eax,0x4
c00107f3:	75 10                	jne    c0010805 <CPU::detectFeatures()+0x669>
c00107f5:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107fb:	83 e0 fd             	and    eax,0xfffffffd
c00107fe:	eb 1b                	jmp    c001081b <CPU::detectFeatures()+0x67f>
c0010800:	83 e0 f8             	and    eax,0xfffffff8
c0010803:	eb df                	jmp    c00107e4 <CPU::detectFeatures()+0x648>
c0010805:	e8 94 f9 fe ff       	call   c000019e <hasLegacyFPU>
c001080a:	83 e0 01             	and    eax,0x1
c001080d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010810:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010816:	83 e0 fd             	and    eax,0xfffffffd
c0010819:	09 d0                	or     eax,edx
c001081b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010821:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010828:	74 17                	je     c0010841 <CPU::detectFeatures()+0x6a5>
c001082a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010830:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010836:	83 c8 10             	or     eax,0x10
c0010839:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001083f:	eb 20                	jmp    c0010861 <CPU::detectFeatures()+0x6c5>
c0010841:	e8 58 f9 fe ff       	call   c000019e <hasLegacyFPU>
c0010846:	83 e0 01             	and    eax,0x1
c0010849:	8d 14 00             	lea    edx,[eax+eax*1]
c001084c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010852:	83 e0 fd             	and    eax,0xfffffffd
c0010855:	09 d0                	or     eax,edx
c0010857:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001085d:	a8 02                	test   al,0x2
c001085f:	75 c9                	jne    c001082a <CPU::detectFeatures()+0x68e>
c0010861:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010868:	83 c4 2c             	add    esp,0x2c
c001086b:	5b                   	pop    ebx
c001086c:	5e                   	pop    esi
c001086d:	5f                   	pop    edi
c001086e:	5d                   	pop    ebp
c001086f:	c3                   	ret    

c0010870 <CPU::setupSMEP()>:
c0010870:	0f 20 e0             	mov    eax,cr4
c0010873:	0d 00 00 10 00       	or     eax,0x100000
c0010878:	0f 22 e0             	mov    cr4,eax
c001087b:	c3                   	ret    

c001087c <CPU::setupUMIP()>:
c001087c:	0f 20 e0             	mov    eax,cr4
c001087f:	80 cc 08             	or     ah,0x8
c0010882:	0f 22 e0             	mov    cr4,eax
c0010885:	c3                   	ret    

c0010886 <CPU::setupTSC()>:
c0010886:	0f 20 e0             	mov    eax,cr4
c0010889:	83 c8 04             	or     eax,0x4
c001088c:	0f 22 e0             	mov    cr4,eax
c001088f:	c3                   	ret    

c0010890 <CPU::setupLargePages()>:
c0010890:	0f 20 e0             	mov    eax,cr4
c0010893:	83 c8 10             	or     eax,0x10
c0010896:	0f 22 e0             	mov    cr4,eax
c0010899:	c3                   	ret    

c001089a <CPU::setupPAT()>:
c001089a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001089f:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00108a6:	74 2c                	je     c00108d4 <CPU::setupPAT()+0x3a>
c00108a8:	53                   	push   ebx
c00108a9:	83 ec 10             	sub    esp,0x10
c00108ac:	68 77 02 00 00       	push   0x277
c00108b1:	50                   	push   eax
c00108b2:	e8 09 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00108b7:	83 e2 f8             	and    edx,0xfffffff8
c00108ba:	83 ca 01             	or     edx,0x1
c00108bd:	52                   	push   edx
c00108be:	50                   	push   eax
c00108bf:	68 77 02 00 00       	push   0x277
c00108c4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00108ca:	e8 1d 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00108cf:	83 c4 28             	add    esp,0x28
c00108d2:	5b                   	pop    ebx
c00108d3:	c3                   	ret    
c00108d4:	c3                   	ret    
c00108d5:	90                   	nop

c00108d6 <CPU::setupMTRR()>:
c00108d6:	c3                   	ret    
c00108d7:	90                   	nop

c00108d8 <CPU::setupGlobalPages()>:
c00108d8:	0f 20 e0             	mov    eax,cr4
c00108db:	0c 80                	or     al,0x80
c00108dd:	0f 22 e0             	mov    cr4,eax
c00108e0:	c3                   	ret    
c00108e1:	90                   	nop

c00108e2 <CPU::allowUsermodeDataAccess()>:
c00108e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108e6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108ed:	74 03                	je     c00108f2 <CPU::allowUsermodeDataAccess()+0x10>
c00108ef:	0f 01 cb             	stac   
c00108f2:	c3                   	ret    
c00108f3:	90                   	nop

c00108f4 <CPU::prohibitUsermodeDataAccess()>:
c00108f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108f8:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c00108ff:	74 03                	je     c0010904 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010901:	0f 01 ca             	clac   
c0010904:	c3                   	ret    
c0010905:	90                   	nop

c0010906 <CPU::setupSMAP()>:
c0010906:	0f 20 e0             	mov    eax,cr4
c0010909:	0d 00 00 20 00       	or     eax,0x200000
c001090e:	0f 22 e0             	mov    cr4,eax
c0010911:	eb e1                	jmp    c00108f4 <CPU::prohibitUsermodeDataAccess()>
c0010913:	90                   	nop

c0010914 <CPU::setupFeatures()>:
c0010914:	53                   	push   ebx
c0010915:	83 ec 08             	sub    esp,0x8
c0010918:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001091c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010923:	74 18                	je     c001093d <CPU::setupFeatures()+0x29>
c0010925:	83 ec 0c             	sub    esp,0xc
c0010928:	68 5d 1c 02 c0       	push   0xc0021c5d
c001092d:	e8 13 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010932:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010935:	e8 42 ff ff ff       	call   c001087c <CPU::setupUMIP()>
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010944:	74 18                	je     c001095e <CPU::setupFeatures()+0x4a>
c0010946:	83 ec 0c             	sub    esp,0xc
c0010949:	68 67 1c 02 c0       	push   0xc0021c67
c001094e:	e8 f2 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010953:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010956:	e8 2b ff ff ff       	call   c0010886 <CPU::setupTSC()>
c001095b:	83 c4 10             	add    esp,0x10
c001095e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010965:	74 18                	je     c001097f <CPU::setupFeatures()+0x6b>
c0010967:	83 ec 0c             	sub    esp,0xc
c001096a:	68 70 1c 02 c0       	push   0xc0021c70
c001096f:	e8 d1 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010977:	e8 14 ff ff ff       	call   c0010890 <CPU::setupLargePages()>
c001097c:	83 c4 10             	add    esp,0x10
c001097f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010986:	74 18                	je     c00109a0 <CPU::setupFeatures()+0x8c>
c0010988:	83 ec 0c             	sub    esp,0xc
c001098b:	68 79 1c 02 c0       	push   0xc0021c79
c0010990:	e8 b0 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010995:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010998:	e8 3b ff ff ff       	call   c00108d8 <CPU::setupGlobalPages()>
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00109a7:	74 18                	je     c00109c1 <CPU::setupFeatures()+0xad>
c00109a9:	83 ec 0c             	sub    esp,0xc
c00109ac:	68 8b 1c 02 c0       	push   0xc0021c8b
c00109b1:	e8 8f 9f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00109b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b9:	e8 dc fe ff ff       	call   c001089a <CPU::setupPAT()>
c00109be:	83 c4 10             	add    esp,0x10
c00109c1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00109c8:	74 11                	je     c00109db <CPU::setupFeatures()+0xc7>
c00109ca:	c7 44 24 10 94 1c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021c94
c00109d2:	83 c4 08             	add    esp,0x8
c00109d5:	5b                   	pop    ebx
c00109d6:	e9 6a 9f ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c00109db:	83 c4 08             	add    esp,0x8
c00109de:	5b                   	pop    ebx
c00109df:	c3                   	ret    

c00109e0 <CPU::open(int, int, void*)>:
c00109e0:	55                   	push   ebp
c00109e1:	57                   	push   edi
c00109e2:	56                   	push   esi
c00109e3:	53                   	push   ebx
c00109e4:	83 ec 18             	sub    esp,0x18
c00109e7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00109eb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00109ef:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00109f3:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00109f9:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c00109ff:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010a05:	50                   	push   eax
c0010a06:	e8 b3 69 ff ff       	call   c00073be <GDT::setup()>
c0010a0b:	83 c4 0c             	add    esp,0xc
c0010a0e:	6a 00                	push   0x0
c0010a10:	68 ef be ad de       	push   0xdeadbeef
c0010a15:	55                   	push   ebp
c0010a16:	e8 6d 85 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010a1b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010a1e:	e8 45 85 ff ff       	call   c0008f68 <TSS::flush()>
c0010a23:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a2c:	e8 f1 6b ff ff       	call   c0007622 <IDT::setup()>
c0010a31:	b8 00 04 00 00       	mov    eax,0x400
c0010a36:	0f 23 f8             	mov    db7,eax
c0010a39:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010a43:	e8 77 73 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010a51:	85 f6                	test   esi,esi
c0010a53:	89 38                	mov    DWORD PTR [eax],edi
c0010a55:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010a5b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010a5e:	74 10                	je     c0010a70 <CPU::open(int, int, void*)+0x90>
c0010a60:	50                   	push   eax
c0010a61:	50                   	push   eax
c0010a62:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010a68:	56                   	push   esi
c0010a69:	e8 40 8e ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010a6e:	eb 0d                	jmp    c0010a7d <CPU::open(int, int, void*)+0x9d>
c0010a70:	83 ec 0c             	sub    esp,0xc
c0010a73:	68 9e 1c 02 c0       	push   0xc0021c9e
c0010a78:	e8 74 08 00 00       	call   c00112f1 <KePanic(char const*)>
c0010a7d:	83 c4 10             	add    esp,0x10
c0010a80:	83 ec 0c             	sub    esp,0xc
c0010a83:	68 ac 1c 02 c0       	push   0xc0021cac
c0010a88:	e8 8e 01 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0010a8d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a90:	e8 07 f7 ff ff       	call   c001019c <CPU::detectFeatures()>
c0010a95:	c7 04 24 cf 1c 02 c0 	mov    DWORD PTR [esp],0xc0021ccf
c0010a9c:	e8 7a 01 00 00       	call   c0010c1b <KeSetBootMessage(char const*)>
c0010aa1:	e8 df 71 00 00       	call   c0017c85 <HalInitialise()>
c0010aa6:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010aab:	83 e0 10             	and    eax,0x10
c0010aae:	83 f8 01             	cmp    eax,0x1
c0010ab1:	19 c0                	sbb    eax,eax
c0010ab3:	83 e0 46             	and    eax,0x46
c0010ab6:	83 c0 1e             	add    eax,0x1e
c0010ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010abc:	e8 28 d6 ff ff       	call   c000e0e9 <setupTimer(int)>
c0010ac1:	83 c4 10             	add    esp,0x10
c0010ac4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010aca:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010ad1:	74 0c                	je     c0010adf <CPU::open(int, int, void*)+0xff>
c0010ad3:	83 ec 0c             	sub    esp,0xc
c0010ad6:	53                   	push   ebx
c0010ad7:	e8 38 fe ff ff       	call   c0010914 <CPU::setupFeatures()>
c0010adc:	83 c4 10             	add    esp,0x10
c0010adf:	83 c4 0c             	add    esp,0xc
c0010ae2:	31 c0                	xor    eax,eax
c0010ae4:	5b                   	pop    ebx
c0010ae5:	5e                   	pop    esi
c0010ae6:	5f                   	pop    edi
c0010ae7:	5d                   	pop    ebp
c0010ae8:	c3                   	ret    

c0010ae9 <KeInitialiseAtexit()>:
c0010ae9:	83 ec 10             	sub    esp,0x10
c0010aec:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010af6:	6a 60                	push   0x60
c0010af8:	6a 00                	push   0x0
c0010afa:	68 20 8e 02 c0       	push   0xc0028e20
c0010aff:	e8 ec f9 fe ff       	call   c00004f0 <memset>
c0010b04:	83 c4 1c             	add    esp,0x1c
c0010b07:	c3                   	ret    

c0010b08 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010b08:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010b0d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b11:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010b18:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b1c:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010b23:	40                   	inc    eax
c0010b24:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010b29:	83 f8 17             	cmp    eax,0x17
c0010b2c:	7e 0d                	jle    c0010b3b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010b2e:	c7 44 24 04 10 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021d10
c0010b36:	e9 b6 07 00 00       	jmp    c00112f1 <KePanic(char const*)>
c0010b3b:	c3                   	ret    

c0010b3c <KeExecuteAtexit()>:
c0010b3c:	53                   	push   ebx
c0010b3d:	31 db                	xor    ebx,ebx
c0010b3f:	83 ec 08             	sub    esp,0x8
c0010b42:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010b48:	7e 50                	jle    c0010b9a <KeExecuteAtexit()+0x5e>
c0010b4a:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010b51:	85 c0                	test   eax,eax
c0010b53:	74 42                	je     c0010b97 <KeExecuteAtexit()+0x5b>
c0010b55:	51                   	push   ecx
c0010b56:	50                   	push   eax
c0010b57:	53                   	push   ebx
c0010b58:	68 29 1d 02 c0       	push   0xc0021d29
c0010b5d:	e8 e3 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b62:	58                   	pop    eax
c0010b63:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010b6a:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010b71:	c7 04 24 4b 1d 02 c0 	mov    DWORD PTR [esp],0xc0021d4b
c0010b78:	e8 c8 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b7d:	c7 04 24 ab 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eab
c0010b84:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b8f:	e8 b1 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	43                   	inc    ebx
c0010b98:	eb a8                	jmp    c0010b42 <KeExecuteAtexit()+0x6>
c0010b9a:	83 c4 08             	add    esp,0x8
c0010b9d:	5b                   	pop    ebx
c0010b9e:	c3                   	ret    

c0010b9f <KeDisplaySplashScreen()>:
c0010b9f:	55                   	push   ebp
c0010ba0:	bd 05 00 00 00       	mov    ebp,0x5
c0010ba5:	57                   	push   edi
c0010ba6:	bf 0a 00 00 00       	mov    edi,0xa
c0010bab:	56                   	push   esi
c0010bac:	31 f6                	xor    esi,esi
c0010bae:	53                   	push   ebx
c0010baf:	31 db                	xor    ebx,ebx
c0010bb1:	83 ec 0c             	sub    esp,0xc
c0010bb4:	0f b6 96 00 31 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcf00]
c0010bbb:	89 d0                	mov    eax,edx
c0010bbd:	85 d2                	test   edx,edx
c0010bbf:	74 52                	je     c0010c13 <KeDisplaySplashScreen()+0x74>
c0010bc1:	80 bb 36 31 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdceca],0xdb
c0010bc8:	75 13                	jne    c0010bdd <KeDisplaySplashScreen()+0x3e>
c0010bca:	0f b6 8b 35 31 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcecb]
c0010bd1:	83 e1 fe             	and    ecx,0xfffffffe
c0010bd4:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010bda:	75 01                	jne    c0010bdd <KeDisplaySplashScreen()+0x3e>
c0010bdc:	47                   	inc    edi
c0010bdd:	83 fa 0d             	cmp    edx,0xd
c0010be0:	74 28                	je     c0010c0a <KeDisplaySplashScreen()+0x6b>
c0010be2:	83 fa 0a             	cmp    edx,0xa
c0010be5:	75 0a                	jne    c0010bf1 <KeDisplaySplashScreen()+0x52>
c0010be7:	45                   	inc    ebp
c0010be8:	bf 0a 00 00 00       	mov    edi,0xa
c0010bed:	31 db                	xor    ebx,ebx
c0010bef:	eb 19                	jmp    c0010c0a <KeDisplaySplashScreen()+0x6b>
c0010bf1:	83 ec 0c             	sub    esp,0xc
c0010bf4:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010bf7:	55                   	push   ebp
c0010bf8:	0f be c0             	movsx  eax,al
c0010bfb:	52                   	push   edx
c0010bfc:	43                   	inc    ebx
c0010bfd:	6a 00                	push   0x0
c0010bff:	6a 0e                	push   0xe
c0010c01:	50                   	push   eax
c0010c02:	e8 fd 7c 00 00       	call   c0018904 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010c07:	83 c4 20             	add    esp,0x20
c0010c0a:	46                   	inc    esi
c0010c0b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010c11:	75 a1                	jne    c0010bb4 <KeDisplaySplashScreen()+0x15>
c0010c13:	83 c4 0c             	add    esp,0xc
c0010c16:	5b                   	pop    ebx
c0010c17:	5e                   	pop    esi
c0010c18:	5f                   	pop    edi
c0010c19:	5d                   	pop    ebp
c0010c1a:	c3                   	ret    

c0010c1b <KeSetBootMessage(char const*)>:
c0010c1b:	57                   	push   edi
c0010c1c:	56                   	push   esi
c0010c1d:	53                   	push   ebx
c0010c1e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010c24:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010c2b:	68 9e 00 00 00       	push   0x9e
c0010c30:	6a 00                	push   0x0
c0010c32:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010c36:	56                   	push   esi
c0010c37:	e8 b4 f8 fe ff       	call   c00004f0 <memset>
c0010c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3f:	e8 2c f9 fe ff       	call   c0000570 <strlen>
c0010c44:	ba 50 00 00 00       	mov    edx,0x50
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	29 c2                	sub    edx,eax
c0010c4e:	31 c9                	xor    ecx,ecx
c0010c50:	83 e2 fe             	and    edx,0xfffffffe
c0010c53:	01 f2                	add    edx,esi
c0010c55:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010c5a:	84 c0                	test   al,al
c0010c5c:	74 0a                	je     c0010c68 <KeSetBootMessage(char const*)+0x4d>
c0010c5e:	80 cc 0f             	or     ah,0xf
c0010c61:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010c65:	41                   	inc    ecx
c0010c66:	eb ed                	jmp    c0010c55 <KeSetBootMessage(char const*)+0x3a>
c0010c68:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010c6d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010c72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c74:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c7a:	5b                   	pop    ebx
c0010c7b:	5e                   	pop    esi
c0010c7c:	5f                   	pop    edi
c0010c7d:	c3                   	ret    
c0010c7e:	66 90                	xchg   ax,ax

c0010c80 <Krnl::handlePowerButton()>:
c0010c80:	83 ec 0c             	sub    esp,0xc
c0010c83:	e8 c4 06 00 00       	call   c001134c <KeHandlePowerButton()>
c0010c88:	90                   	nop
c0010c89:	83 c4 0c             	add    esp,0xc
c0010c8c:	c3                   	ret    
c0010c8d:	8d 76 00             	lea    esi,[esi+0x0]

c0010c90 <Krnl::handleSleepButton()>:
c0010c90:	83 ec 0c             	sub    esp,0xc
c0010c93:	e8 e9 06 00 00       	call   c0011381 <KeHandleSleepButton()>
c0010c98:	90                   	nop
c0010c99:	83 c4 0c             	add    esp,0xc
c0010c9c:	c3                   	ret    
c0010c9d:	90                   	nop

c0010c9e <EnvVarContainer::getEnv(char const*)>:
c0010c9e:	57                   	push   edi
c0010c9f:	56                   	push   esi
c0010ca0:	53                   	push   ebx
c0010ca1:	31 db                	xor    ebx,ebx
c0010ca3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ca7:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ca9:	7e 2b                	jle    c0010cd6 <EnvVarContainer::getEnv(char const*)+0x38>
c0010cab:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010cb2:	50                   	push   eax
c0010cb3:	50                   	push   eax
c0010cb4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010cb7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010cba:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010cbe:	e8 8d fa fe ff       	call   c0000750 <strcmp>
c0010cc3:	83 c4 10             	add    esp,0x10
c0010cc6:	85 c0                	test   eax,eax
c0010cc8:	75 09                	jne    c0010cd3 <EnvVarContainer::getEnv(char const*)+0x35>
c0010cca:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ccd:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010cd1:	eb 05                	jmp    c0010cd8 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010cd3:	43                   	inc    ebx
c0010cd4:	eb d1                	jmp    c0010ca7 <EnvVarContainer::getEnv(char const*)+0x9>
c0010cd6:	31 c0                	xor    eax,eax
c0010cd8:	5b                   	pop    ebx
c0010cd9:	5e                   	pop    esi
c0010cda:	5f                   	pop    edi
c0010cdb:	c3                   	ret    

c0010cdc <EnvVarContainer::setEnv(char const*, char const*)>:
c0010cdc:	55                   	push   ebp
c0010cdd:	57                   	push   edi
c0010cde:	56                   	push   esi
c0010cdf:	53                   	push   ebx
c0010ce0:	83 ec 28             	sub    esp,0x28
c0010ce3:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010ce7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010ceb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010cef:	56                   	push   esi
c0010cf0:	e8 7b f8 fe ff       	call   c0000570 <strlen>
c0010cf5:	40                   	inc    eax
c0010cf6:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cf9:	e8 b8 6d ff ff       	call   c0007ab6 <malloc>
c0010cfe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d01:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010d05:	e8 66 f8 fe ff       	call   c0000570 <strlen>
c0010d0a:	40                   	inc    eax
c0010d0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0e:	e8 a3 6d ff ff       	call   c0007ab6 <malloc>
c0010d13:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d16:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d1a:	e8 51 f8 fe ff       	call   c0000570 <strlen>
c0010d1f:	83 c4 0c             	add    esp,0xc
c0010d22:	40                   	inc    eax
c0010d23:	50                   	push   eax
c0010d24:	6a 00                	push   0x0
c0010d26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010d2a:	e8 c1 f7 fe ff       	call   c00004f0 <memset>
c0010d2f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d32:	e8 39 f8 fe ff       	call   c0000570 <strlen>
c0010d37:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010d3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d43:	89 de                	mov    esi,ebx
c0010d45:	e8 26 f8 fe ff       	call   c0000570 <strlen>
c0010d4a:	83 c4 0c             	add    esp,0xc
c0010d4d:	40                   	inc    eax
c0010d4e:	50                   	push   eax
c0010d4f:	6a 00                	push   0x0
c0010d51:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010d55:	e8 96 f7 fe ff       	call   c00004f0 <memset>
c0010d5a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d5d:	e8 0e f8 fe ff       	call   c0000570 <strlen>
c0010d62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010d66:	8d 48 01             	lea    ecx,[eax+0x1]
c0010d69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010d6e:	40                   	inc    eax
c0010d6f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010d72:	c1 e0 03             	shl    eax,0x3
c0010d75:	5a                   	pop    edx
c0010d76:	59                   	pop    ecx
c0010d77:	50                   	push   eax
c0010d78:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d7b:	e8 22 6d ff ff       	call   c0007aa2 <realloc>
c0010d80:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d84:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d87:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d8a:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d8e:	b9 08 00 00 00       	mov    ecx,0x8
c0010d93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d95:	83 c4 2c             	add    esp,0x2c
c0010d98:	5b                   	pop    ebx
c0010d99:	5e                   	pop    esi
c0010d9a:	5f                   	pop    edi
c0010d9b:	5d                   	pop    ebp
c0010d9c:	c3                   	ret    
c0010d9d:	90                   	nop

c0010d9e <EnvVarContainer::deleteEnv(char const*)>:
c0010d9e:	c3                   	ret    
c0010d9f:	90                   	nop

c0010da0 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010da0:	55                   	push   ebp
c0010da1:	57                   	push   edi
c0010da2:	56                   	push   esi
c0010da3:	53                   	push   ebx
c0010da4:	81 ec 38 01 00 00    	sub    esp,0x138
c0010daa:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010db1:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010db8:	68 14 01 00 00       	push   0x114
c0010dbd:	e8 f4 6c ff ff       	call   c0007ab6 <malloc>
c0010dc2:	83 c4 0c             	add    esp,0xc
c0010dc5:	89 c3                	mov    ebx,eax
c0010dc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010dca:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010dd1:	50                   	push   eax
c0010dd2:	e8 e1 a9 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0010dd7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dda:	e8 59 ad ff ff       	call   c000bb38 <File::exists()>
c0010ddf:	83 c4 10             	add    esp,0x10
c0010de2:	84 c0                	test   al,al
c0010de4:	75 31                	jne    c0010e17 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010de6:	50                   	push   eax
c0010de7:	50                   	push   eax
c0010de8:	6a 12                	push   0x12
c0010dea:	53                   	push   ebx
c0010deb:	e8 84 aa ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0010df0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010df2:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010df5:	89 34 24             	mov    DWORD PTR [esp],esi
c0010df8:	e8 73 f7 fe ff       	call   c0000570 <strlen>
c0010dfd:	5a                   	pop    edx
c0010dfe:	31 d2                	xor    edx,edx
c0010e00:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e04:	51                   	push   ecx
c0010e05:	56                   	push   esi
c0010e06:	52                   	push   edx
c0010e07:	50                   	push   eax
c0010e08:	53                   	push   ebx
c0010e09:	ff d7                	call   edi
c0010e0b:	83 c4 14             	add    esp,0x14
c0010e0e:	53                   	push   ebx
c0010e0f:	e8 be aa ff ff       	call   c000b8d2 <File::close()>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	56                   	push   esi
c0010e18:	31 f6                	xor    esi,esi
c0010e1a:	68 00 01 00 00       	push   0x100
c0010e1f:	6a 00                	push   0x0
c0010e21:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e25:	50                   	push   eax
c0010e26:	e8 c5 f6 fe ff       	call   c00004f0 <memset>
c0010e2b:	5f                   	pop    edi
c0010e2c:	58                   	pop    eax
c0010e2d:	6a 01                	push   0x1
c0010e2f:	53                   	push   ebx
c0010e30:	e8 3f aa ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e40:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010e48:	83 ec 0c             	sub    esp,0xc
c0010e4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010e4d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010e51:	51                   	push   ecx
c0010e52:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010e56:	52                   	push   edx
c0010e57:	6a 00                	push   0x0
c0010e59:	6a 01                	push   0x1
c0010e5b:	53                   	push   ebx
c0010e5c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010e5f:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010e64:	83 c4 20             	add    esp,0x20
c0010e67:	89 c2                	mov    edx,eax
c0010e69:	85 c0                	test   eax,eax
c0010e6b:	0f 84 36 01 00 00    	je     c0010fa7 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010e71:	83 f8 0d             	cmp    eax,0xd
c0010e74:	0f 84 22 01 00 00    	je     c0010f9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e7f:	0f 84 f0 00 00 00    	je     c0010f75 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e85:	83 f8 0a             	cmp    eax,0xa
c0010e88:	74 13                	je     c0010e9d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e8a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e8f:	74 0c                	je     c0010e9d <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e91:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e97:	0f 8e f6 00 00 00    	jle    c0010f93 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e9d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	8d 78 01             	lea    edi,[eax+0x1]
c0010ea7:	57                   	push   edi
c0010ea8:	e8 09 6c ff ff       	call   c0007ab6 <malloc>
c0010ead:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010eb1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010eb5:	8d 56 04             	lea    edx,[esi+0x4]
c0010eb8:	89 14 24             	mov    DWORD PTR [esp],edx
c0010ebb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010ebf:	e8 f2 6b ff ff       	call   c0007ab6 <malloc>
c0010ec4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010ec8:	83 c4 0c             	add    esp,0xc
c0010ecb:	57                   	push   edi
c0010ecc:	6a 00                	push   0x0
c0010ece:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ed2:	e8 19 f6 fe ff       	call   c00004f0 <memset>
c0010ed7:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010edb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010edf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010ee3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ee5:	83 c4 0c             	add    esp,0xc
c0010ee8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010eec:	52                   	push   edx
c0010eed:	6a 00                	push   0x0
c0010eef:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ef3:	e8 f8 f5 fe ff       	call   c00004f0 <memset>
c0010ef8:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010efc:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010f00:	89 34 24             	mov    DWORD PTR [esp],esi
c0010f03:	e8 68 f6 fe ff       	call   c0000570 <strlen>
c0010f08:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010f0c:	89 c1                	mov    ecx,eax
c0010f0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f10:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f13:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010f16:	40                   	inc    eax
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010f1d:	85 d2                	test   edx,edx
c0010f1f:	75 0c                	jne    c0010f2d <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010f21:	83 ec 0c             	sub    esp,0xc
c0010f24:	6a 08                	push   0x8
c0010f26:	e8 8b 6b ff ff       	call   c0007ab6 <malloc>
c0010f2b:	eb 0c                	jmp    c0010f39 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010f2d:	c1 e0 03             	shl    eax,0x3
c0010f30:	51                   	push   ecx
c0010f31:	51                   	push   ecx
c0010f32:	50                   	push   eax
c0010f33:	52                   	push   edx
c0010f34:	e8 69 6b ff ff       	call   c0007aa2 <realloc>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010f3f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010f42:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010f45:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010f49:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010f4d:	b9 08 00 00 00       	mov    ecx,0x8
c0010f52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f54:	31 f6                	xor    esi,esi
c0010f56:	50                   	push   eax
c0010f57:	68 00 01 00 00       	push   0x100
c0010f5c:	6a 00                	push   0x0
c0010f5e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010f62:	50                   	push   eax
c0010f63:	e8 88 f5 fe ff       	call   c00004f0 <memset>
c0010f68:	83 c4 10             	add    esp,0x10
c0010f6b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010f73:	eb 27                	jmp    c0010f9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f75:	83 f8 3d             	cmp    eax,0x3d
c0010f78:	74 1e                	je     c0010f98 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f7a:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f80:	7f 07                	jg     c0010f89 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f82:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010f86:	46                   	inc    esi
c0010f87:	eb 13                	jmp    c0010f9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f89:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f91:	eb 09                	jmp    c0010f9c <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f93:	83 f8 3d             	cmp    eax,0x3d
c0010f96:	75 ea                	jne    c0010f82 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f98:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f9c:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010fa1:	0f 85 99 fe ff ff    	jne    c0010e40 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010fa7:	83 ec 0c             	sub    esp,0xc
c0010faa:	53                   	push   ebx
c0010fab:	e8 22 a9 ff ff       	call   c000b8d2 <File::close()>
c0010fb0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010fb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010fb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010fb8:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010fbe:	5b                   	pop    ebx
c0010fbf:	5e                   	pop    esi
c0010fc0:	5f                   	pop    edi
c0010fc1:	5d                   	pop    ebp
c0010fc2:	c3                   	ret    
c0010fc3:	90                   	nop

c0010fc4 <EnvVarContainer::__loadSystem()>:
c0010fc4:	83 ec 10             	sub    esp,0x10
c0010fc7:	68 60 32 02 c0       	push   0xc0023260
c0010fcc:	68 50 1d 02 c0       	push   0xc0021d50
c0010fd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010fd5:	e8 c6 fd ff ff       	call   c0010da0 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010fda:	83 c4 1c             	add    esp,0x1c
c0010fdd:	c3                   	ret    

c0010fde <EnvVarContainer::__loadUser()>:
c0010fde:	c3                   	ret    
c0010fdf:	90                   	nop

c0010fe0 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fe4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010fea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ff2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ff5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ff9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011000:	90                   	nop
c0011001:	c3                   	ret    

c0011002 <EnvVarContainer::~EnvVarContainer()>:
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011009:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001100c:	85 c0                	test   eax,eax
c001100e:	74 1d                	je     c001102d <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011010:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011014:	8b 00                	mov    eax,DWORD PTR [eax]
c0011016:	85 c0                	test   eax,eax
c0011018:	74 13                	je     c001102d <EnvVarContainer::~EnvVarContainer()+0x2b>
c001101a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011021:	83 ec 0c             	sub    esp,0xc
c0011024:	50                   	push   eax
c0011025:	e8 9c 6a ff ff       	call   c0007ac6 <free>
c001102a:	83 c4 10             	add    esp,0x10
c001102d:	90                   	nop
c001102e:	83 c4 0c             	add    esp,0xc
c0011031:	c3                   	ret    

c0011032 <KeGetEnv(Process*, char const*)>:
c0011032:	53                   	push   ebx
c0011033:	83 ec 08             	sub    esp,0x8
c0011036:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001103e:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0011044:	74 04                	je     c001104a <KeGetEnv(Process*, char const*)+0x18>
c0011046:	85 c0                	test   eax,eax
c0011048:	75 0b                	jne    c0011055 <KeGetEnv(Process*, char const*)+0x23>
c001104a:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001104f:	85 c0                	test   eax,eax
c0011051:	75 19                	jne    c001106c <KeGetEnv(Process*, char const*)+0x3a>
c0011053:	eb 27                	jmp    c001107c <KeGetEnv(Process*, char const*)+0x4a>
c0011055:	52                   	push   edx
c0011056:	52                   	push   edx
c0011057:	53                   	push   ebx
c0011058:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c001105e:	e8 3b fc ff ff       	call   c0010c9e <EnvVarContainer::getEnv(char const*)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	85 c0                	test   eax,eax
c0011068:	75 28                	jne    c0011092 <KeGetEnv(Process*, char const*)+0x60>
c001106a:	eb de                	jmp    c001104a <KeGetEnv(Process*, char const*)+0x18>
c001106c:	52                   	push   edx
c001106d:	52                   	push   edx
c001106e:	53                   	push   ebx
c001106f:	50                   	push   eax
c0011070:	e8 29 fc ff ff       	call   c0010c9e <EnvVarContainer::getEnv(char const*)>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	85 c0                	test   eax,eax
c001107a:	75 16                	jne    c0011092 <KeGetEnv(Process*, char const*)+0x60>
c001107c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011080:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011085:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011089:	83 c4 08             	add    esp,0x8
c001108c:	5b                   	pop    ebx
c001108d:	e9 0c fc ff ff       	jmp    c0010c9e <EnvVarContainer::getEnv(char const*)>
c0011092:	83 c4 08             	add    esp,0x8
c0011095:	5b                   	pop    ebx
c0011096:	c3                   	ret    

c0011097 <KeSetEnvSystem(char const*, char const*)>:
c0011097:	83 ec 10             	sub    esp,0x10
c001109a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001109e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110a2:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c00110a8:	e8 2f fc ff ff       	call   c0010cdc <EnvVarContainer::setEnv(char const*, char const*)>
c00110ad:	83 c4 1c             	add    esp,0x1c
c00110b0:	c3                   	ret    

c00110b1 <KeSetEnvUser(char const*, char const*)>:
c00110b1:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c00110b6:	85 c0                	test   eax,eax
c00110b8:	74 15                	je     c00110cf <KeSetEnvUser(char const*, char const*)+0x1e>
c00110ba:	83 ec 10             	sub    esp,0x10
c00110bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00110c5:	50                   	push   eax
c00110c6:	e8 11 fc ff ff       	call   c0010cdc <EnvVarContainer::setEnv(char const*, char const*)>
c00110cb:	83 c4 1c             	add    esp,0x1c
c00110ce:	c3                   	ret    
c00110cf:	c3                   	ret    

c00110d0 <KeSetEnvProcess(Process*, char const*, char const*)>:
c00110d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110d4:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00110da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110de:	e9 f9 fb ff ff       	jmp    c0010cdc <EnvVarContainer::setEnv(char const*, char const*)>

c00110e3 <KeDeleteEnvSystem(char const*)>:
c00110e3:	c3                   	ret    

c00110e4 <KeDeleteEnvUser(char const*)>:
c00110e4:	c3                   	ret    

c00110e5 <KeDeleteEnvProcess(Process*, char const*)>:
c00110e5:	c3                   	ret    

c00110e6 <KeNewProcessEnv(Process*)>:
c00110e6:	83 ec 28             	sub    esp,0x28
c00110e9:	6a 0c                	push   0xc
c00110eb:	e8 c6 69 ff ff       	call   c0007ab6 <malloc>
c00110f0:	5a                   	pop    edx
c00110f1:	59                   	pop    ecx
c00110f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110f6:	50                   	push   eax
c00110f7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110fb:	e8 e0 fe ff ff       	call   c0010fe0 <EnvVarContainer::EnvVarContainer(Process*)>
c0011100:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011104:	83 c4 2c             	add    esp,0x2c
c0011107:	c3                   	ret    

c0011108 <KeCopyProcessEnv(Process*, Process*)>:
c0011108:	57                   	push   edi
c0011109:	56                   	push   esi
c001110a:	53                   	push   ebx
c001110b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110f:	83 ec 0c             	sub    esp,0xc
c0011112:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011118:	6a 0c                	push   0xc
c001111a:	e8 97 69 ff ff       	call   c0007ab6 <malloc>
c001111f:	89 c3                	mov    ebx,eax
c0011121:	58                   	pop    eax
c0011122:	5a                   	pop    edx
c0011123:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011127:	53                   	push   ebx
c0011128:	e8 b3 fe ff ff       	call   c0010fe0 <EnvVarContainer::EnvVarContainer(Process*)>
c001112d:	8b 07                	mov    eax,DWORD PTR [edi]
c001112f:	89 03                	mov    DWORD PTR [ebx],eax
c0011131:	c1 e0 03             	shl    eax,0x3
c0011134:	89 04 24             	mov    DWORD PTR [esp],eax
c0011137:	e8 7a 69 ff ff       	call   c0007ab6 <malloc>
c001113c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001113f:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0011141:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011144:	c1 e1 03             	shl    ecx,0x3
c0011147:	89 c7                	mov    edi,eax
c0011149:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001114b:	83 c4 10             	add    esp,0x10
c001114e:	89 d8                	mov    eax,ebx
c0011150:	5b                   	pop    ebx
c0011151:	5e                   	pop    esi
c0011152:	5f                   	pop    edi
c0011153:	c3                   	ret    

c0011154 <KeLoadSystemEnv()>:
c0011154:	53                   	push   ebx
c0011155:	83 ec 14             	sub    esp,0x14
c0011158:	6a 0c                	push   0xc
c001115a:	e8 57 69 ff ff       	call   c0007ab6 <malloc>
c001115f:	89 c3                	mov    ebx,eax
c0011161:	58                   	pop    eax
c0011162:	5a                   	pop    edx
c0011163:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011169:	53                   	push   ebx
c001116a:	e8 71 fe ff ff       	call   c0010fe0 <EnvVarContainer::EnvVarContainer(Process*)>
c001116f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011172:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011178:	e8 47 fe ff ff       	call   c0010fc4 <EnvVarContainer::__loadSystem()>
c001117d:	83 c4 18             	add    esp,0x18
c0011180:	5b                   	pop    ebx
c0011181:	c3                   	ret    

c0011182 <KeLoadUserEnv()>:
c0011182:	53                   	push   ebx
c0011183:	83 ec 14             	sub    esp,0x14
c0011186:	6a 0c                	push   0xc
c0011188:	e8 29 69 ff ff       	call   c0007ab6 <malloc>
c001118d:	89 c3                	mov    ebx,eax
c001118f:	58                   	pop    eax
c0011190:	5a                   	pop    edx
c0011191:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011197:	53                   	push   ebx
c0011198:	e8 43 fe ff ff       	call   c0010fe0 <EnvVarContainer::EnvVarContainer(Process*)>
c001119d:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c00111a3:	83 c4 18             	add    esp,0x18
c00111a6:	5b                   	pop    ebx
c00111a7:	c3                   	ret    

c00111a8 <KeFlushEnv()>:
c00111a8:	c3                   	ret    

c00111a9 <KeGetProcessTotalEnvCount(Process*)>:
c00111a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00111ad:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c00111b3:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111b9:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c00111be:	8b 00                	mov    eax,DWORD PTR [eax]
c00111c0:	03 01                	add    eax,DWORD PTR [ecx]
c00111c2:	85 d2                	test   edx,edx
c00111c4:	74 02                	je     c00111c8 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00111c6:	03 02                	add    eax,DWORD PTR [edx]
c00111c8:	c3                   	ret    

c00111c9 <KeGetProcessEnvPair(Process*, int)>:
c00111c9:	57                   	push   edi
c00111ca:	56                   	push   esi
c00111cb:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c00111d1:	53                   	push   ebx
c00111d2:	85 f6                	test   esi,esi
c00111d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111dc:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00111e2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00111e6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00111e8:	75 16                	jne    c0011200 <KeGetProcessEnvPair(Process*, int)+0x37>
c00111ea:	39 c2                	cmp    edx,eax
c00111ec:	7c 16                	jl     c0011204 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00111ee:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c00111f4:	8b 31                	mov    esi,DWORD PTR [ecx]
c00111f6:	01 c6                	add    esi,eax
c00111f8:	39 d6                	cmp    esi,edx
c00111fa:	7e 3c                	jle    c0011238 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111fc:	29 c2                	sub    edx,eax
c00111fe:	eb 04                	jmp    c0011204 <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011200:	39 c2                	cmp    edx,eax
c0011202:	7d 05                	jge    c0011209 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011204:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011207:	eb 20                	jmp    c0011229 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011209:	8b 3e                	mov    edi,DWORD PTR [esi]
c001120b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001120e:	39 d1                	cmp    ecx,edx
c0011210:	7e 04                	jle    c0011216 <KeGetProcessEnvPair(Process*, int)+0x4d>
c0011212:	29 c2                	sub    edx,eax
c0011214:	eb 10                	jmp    c0011226 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011216:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c001121c:	03 0e                	add    ecx,DWORD PTR [esi]
c001121e:	39 d1                	cmp    ecx,edx
c0011220:	7e 16                	jle    c0011238 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011222:	29 c2                	sub    edx,eax
c0011224:	29 fa                	sub    edx,edi
c0011226:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011229:	8d 14 d0             	lea    edx,[eax+edx*8]
c001122c:	8b 02                	mov    eax,DWORD PTR [edx]
c001122e:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011231:	89 03                	mov    DWORD PTR [ebx],eax
c0011233:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011236:	eb 1d                	jmp    c0011255 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011238:	83 ec 0c             	sub    esp,0xc
c001123b:	68 72 1d 02 c0       	push   0xc0021d72
c0011240:	e8 ac 00 00 00       	call   c00112f1 <KePanic(char const*)>
c0011245:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001124b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011252:	83 c4 10             	add    esp,0x10
c0011255:	89 d8                	mov    eax,ebx
c0011257:	5b                   	pop    ebx
c0011258:	5e                   	pop    esi
c0011259:	5f                   	pop    edi
c001125a:	c2 04 00             	ret    0x4

c001125d <CPU::current()>:
c001125d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011262:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011268:	c3                   	ret    

c0011269 <operator new(unsigned long)>:
c0011269:	e9 48 68 ff ff       	jmp    c0007ab6 <malloc>

c001126e <operator delete(void*)>:
c001126e:	e9 63 68 ff ff       	jmp    c0007ad6 <rfree>

c0011273 <disableIRQs()>:
c0011273:	fa                   	cli    
c0011274:	c3                   	ret    

c0011275 <enableIRQs()>:
c0011275:	fb                   	sti    
c0011276:	c3                   	ret    

c0011277 <lockScheduler()>:
c0011277:	fa                   	cli    
c0011278:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001127e:	c3                   	ret    

c001127f <unlockScheduler()>:
c001127f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011284:	48                   	dec    eax
c0011285:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001128a:	75 01                	jne    c001128d <unlockScheduler()+0xe>
c001128c:	fb                   	sti    
c001128d:	c3                   	ret    

c001128e <lockStuff()>:
c001128e:	fa                   	cli    
c001128f:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011295:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c001129b:	c3                   	ret    

c001129c <unlockStuff()>:
c001129c:	83 ec 0c             	sub    esp,0xc
c001129f:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00112a4:	48                   	dec    eax
c00112a5:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00112aa:	75 18                	jne    c00112c4 <unlockStuff()+0x28>
c00112ac:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00112b3:	74 0f                	je     c00112c4 <unlockStuff()+0x28>
c00112b5:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00112bf:	e8 ec 48 00 00       	call   c0015bb0 <schedule()>
c00112c4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00112c9:	48                   	dec    eax
c00112ca:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00112cf:	75 01                	jne    c00112d2 <unlockStuff()+0x36>
c00112d1:	fb                   	sti    
c00112d2:	83 c4 0c             	add    esp,0xc
c00112d5:	c3                   	ret    

c00112d6 <Virt::getAKernelVAS()>:
c00112d6:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00112db:	c3                   	ret    

c00112dc <__not_memcpy>:
c00112dc:	57                   	push   edi
c00112dd:	56                   	push   esi
c00112de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112e6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112ea:	89 c7                	mov    edi,eax
c00112ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00112ee:	5e                   	pop    esi
c00112ef:	5f                   	pop    edi
c00112f0:	c3                   	ret    

c00112f1 <KePanic(char const*)>:
c00112f1:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c00112f8:	e9 59 68 00 00       	jmp    c0017b56 <HalPanic(char const*)>

c00112fd <KePowerThread(void*)>:
c00112fd:	83 ec 0c             	sub    esp,0xc
c0011300:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011305:	48                   	dec    eax
c0011306:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001130b:	75 01                	jne    c001130e <KePowerThread(void*)+0x11>
c001130d:	fb                   	sti    
c001130e:	83 ec 0c             	sub    esp,0xc
c0011311:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011318:	6a 0a                	push   0xa
c001131a:	e8 d5 4b 00 00       	call   c0015ef4 <sleep(unsigned int)>
c001131f:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c0011326:	83 c4 10             	add    esp,0x10
c0011329:	eb e3                	jmp    c001130e <KePowerThread(void*)+0x11>

c001132b <KeChangePowerSettings(PowerSettings)>:
c001132b:	57                   	push   edi
c001132c:	b9 09 00 00 00       	mov    ecx,0x9
c0011331:	56                   	push   esi
c0011332:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c0011337:	fc                   	cld    
c0011338:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001133c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001133e:	5e                   	pop    esi
c001133f:	5f                   	pop    edi
c0011340:	c3                   	ret    

c0011341 <KeUserIOReceived()>:
c0011341:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001134b:	c3                   	ret    

c001134c <KeHandlePowerButton()>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0011354:	83 f8 02             	cmp    eax,0x2
c0011357:	75 10                	jne    c0011369 <KeHandlePowerButton()+0x1d>
c0011359:	83 ec 0c             	sub    esp,0xc
c001135c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011362:	e8 c1 5d ff ff       	call   c0007128 <Computer::shutdown()>
c0011367:	eb 11                	jmp    c001137a <KeHandlePowerButton()+0x2e>
c0011369:	48                   	dec    eax
c001136a:	75 11                	jne    c001137d <KeHandlePowerButton()+0x31>
c001136c:	83 ec 0c             	sub    esp,0xc
c001136f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011375:	e8 de 5d ff ff       	call   c0007158 <Computer::sleep()>
c001137a:	83 c4 10             	add    esp,0x10
c001137d:	83 c4 0c             	add    esp,0xc
c0011380:	c3                   	ret    

c0011381 <KeHandleSleepButton()>:
c0011381:	83 ec 0c             	sub    esp,0xc
c0011384:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011389:	83 f8 02             	cmp    eax,0x2
c001138c:	75 10                	jne    c001139e <KeHandleSleepButton()+0x1d>
c001138e:	83 ec 0c             	sub    esp,0xc
c0011391:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011397:	e8 8c 5d ff ff       	call   c0007128 <Computer::shutdown()>
c001139c:	eb 11                	jmp    c00113af <KeHandleSleepButton()+0x2e>
c001139e:	48                   	dec    eax
c001139f:	75 11                	jne    c00113b2 <KeHandleSleepButton()+0x31>
c00113a1:	83 ec 0c             	sub    esp,0xc
c00113a4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00113aa:	e8 a9 5d ff ff       	call   c0007158 <Computer::sleep()>
c00113af:	83 c4 10             	add    esp,0x10
c00113b2:	83 c4 0c             	add    esp,0xc
c00113b5:	c3                   	ret    

c00113b6 <KeSetupPowerManager()>:
c00113b6:	83 ec 0c             	sub    esp,0xc
c00113b9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00113c3:	68 f0 00 00 00       	push   0xf0
c00113c8:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00113cf:	6a 00                	push   0x0
c00113d1:	68 fd 12 01 c0       	push   0xc00112fd
c00113d6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00113dc:	e8 7f 45 00 00       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c00113e1:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c00113eb:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c00113f5:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c00113ff:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011409:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c0011413:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c001141d:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c0011427:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c0011431:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c001143b:	83 c4 1c             	add    esp,0x1c
c001143e:	c3                   	ret    

c001143f <KeRand()>:
c001143f:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c0011449:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c0011453:	53                   	push   ebx
c0011454:	01 c1                	add    ecx,eax
c0011456:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001145b:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c0011461:	01 ca                	add    edx,ecx
c0011463:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011468:	83 d2 00             	adc    edx,0x0
c001146b:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011470:	0f b7 da             	movzx  ebx,dx
c0011473:	89 da                	mov    edx,ebx
c0011475:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c001147b:	0f ac d0 0e          	shrd   eax,edx,0xe
c001147f:	5b                   	pop    ebx
c0011480:	c3                   	ret    

c0011481 <KeSeedRand(unsigned int)>:
c0011481:	53                   	push   ebx
c0011482:	83 ec 08             	sub    esp,0x8
c0011485:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011489:	e8 e7 69 00 00       	call   c0017e75 <HalGetRand()>
c001148e:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011498:	31 d8                	xor    eax,ebx
c001149a:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c001149f:	e8 9b ff ff ff       	call   c001143f <KeRand()>
c00114a4:	83 c4 08             	add    esp,0x8
c00114a7:	5b                   	pop    ebx
c00114a8:	eb 95                	jmp    c001143f <KeRand()>

c00114aa <KeInitRand()>:
c00114aa:	83 ec 0c             	sub    esp,0xc
c00114ad:	e8 b8 67 00 00       	call   c0017c6a <HalQueryPerformanceCounter()>
c00114b2:	0f 20 da             	mov    edx,cr3
c00114b5:	0f 22 da             	mov    cr3,edx
c00114b8:	0f 20 da             	mov    edx,cr3
c00114bb:	0f 22 da             	mov    cr3,edx
c00114be:	0f 20 da             	mov    edx,cr3
c00114c1:	0f 22 da             	mov    cr3,edx
c00114c4:	0f 20 da             	mov    edx,cr3
c00114c7:	0f 22 da             	mov    cr3,edx
c00114ca:	83 ec 0c             	sub    esp,0xc
c00114cd:	35 03 8a 95 38       	xor    eax,0x38958a03
c00114d2:	50                   	push   eax
c00114d3:	e8 a9 ff ff ff       	call   c0011481 <KeSeedRand(unsigned int)>
c00114d8:	83 c4 1c             	add    esp,0x1c
c00114db:	c3                   	ret    

c00114dc <KeResolveCompatibilitySymbol(char*)>:
c00114dc:	83 ec 0c             	sub    esp,0xc
c00114df:	83 ec 08             	sub    esp,0x8
c00114e2:	68 8c 1d 02 c0       	push   0xc0021d8c
c00114e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114eb:	e8 60 f2 fe ff       	call   c0000750 <strcmp>
c00114f0:	83 c4 10             	add    esp,0x10
c00114f3:	85 c0                	test   eax,eax
c00114f5:	0f 94 c0             	sete   al
c00114f8:	0f b6 c0             	movzx  eax,al
c00114fb:	85 c0                	test   eax,eax
c00114fd:	74 0d                	je     c001150c <KeResolveCompatibilitySymbol(char*)+0x30>
c00114ff:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011504:	e9 8b 01 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011509:	8d 76 00             	lea    esi,[esi+0x0]
c001150c:	83 ec 08             	sub    esp,0x8
c001150f:	68 95 1d 02 c0       	push   0xc0021d95
c0011514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011518:	e8 33 f2 fe ff       	call   c0000750 <strcmp>
c001151d:	83 c4 10             	add    esp,0x10
c0011520:	85 c0                	test   eax,eax
c0011522:	0f 94 c0             	sete   al
c0011525:	0f b6 c0             	movzx  eax,al
c0011528:	85 c0                	test   eax,eax
c001152a:	74 0c                	je     c0011538 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001152c:	b8 20 f2 01 c0       	mov    eax,0xc001f220
c0011531:	e9 5e 01 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011536:	66 90                	xchg   ax,ax
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	68 9f 1d 02 c0       	push   0xc0021d9f
c0011540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011544:	e8 07 f2 fe ff       	call   c0000750 <strcmp>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	85 c0                	test   eax,eax
c001154e:	0f 94 c0             	sete   al
c0011551:	0f b6 c0             	movzx  eax,al
c0011554:	85 c0                	test   eax,eax
c0011556:	74 0c                	je     c0011564 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011558:	b8 54 ef 01 c0       	mov    eax,0xc001ef54
c001155d:	e9 32 01 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011562:	66 90                	xchg   ax,ax
c0011564:	83 ec 08             	sub    esp,0x8
c0011567:	68 a8 1d 02 c0       	push   0xc0021da8
c001156c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011570:	e8 db f1 fe ff       	call   c0000750 <strcmp>
c0011575:	83 c4 10             	add    esp,0x10
c0011578:	85 c0                	test   eax,eax
c001157a:	0f 94 c0             	sete   al
c001157d:	0f b6 c0             	movzx  eax,al
c0011580:	85 c0                	test   eax,eax
c0011582:	74 0c                	je     c0011590 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011584:	b8 f1 12 01 c0       	mov    eax,0xc00112f1
c0011589:	e9 06 01 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001158e:	66 90                	xchg   ax,ax
c0011590:	83 ec 08             	sub    esp,0x8
c0011593:	68 bb 1d 02 c0       	push   0xc0021dbb
c0011598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001159c:	e8 af f1 fe ff       	call   c0000750 <strcmp>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	85 c0                	test   eax,eax
c00115a6:	0f 94 c0             	sete   al
c00115a9:	0f b6 c0             	movzx  eax,al
c00115ac:	85 c0                	test   eax,eax
c00115ae:	74 0c                	je     c00115bc <KeResolveCompatibilitySymbol(char*)+0xe0>
c00115b0:	b8 1b 0c 01 c0       	mov    eax,0xc0010c1b
c00115b5:	e9 da 00 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115ba:	66 90                	xchg   ax,ax
c00115bc:	83 ec 08             	sub    esp,0x8
c00115bf:	68 d8 1d 02 c0       	push   0xc0021dd8
c00115c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115c8:	e8 83 f1 fe ff       	call   c0000750 <strcmp>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	85 c0                	test   eax,eax
c00115d2:	0f 94 c0             	sete   al
c00115d5:	0f b6 c0             	movzx  eax,al
c00115d8:	85 c0                	test   eax,eax
c00115da:	74 0c                	je     c00115e8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00115dc:	b8 20 f3 01 c0       	mov    eax,0xc001f320
c00115e1:	e9 ae 00 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115e6:	66 90                	xchg   ax,ax
c00115e8:	83 ec 08             	sub    esp,0x8
c00115eb:	68 e2 1d 02 c0       	push   0xc0021de2
c00115f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f4:	e8 57 f1 fe ff       	call   c0000750 <strcmp>
c00115f9:	83 c4 10             	add    esp,0x10
c00115fc:	85 c0                	test   eax,eax
c00115fe:	0f 94 c0             	sete   al
c0011601:	0f b6 c0             	movzx  eax,al
c0011604:	85 c0                	test   eax,eax
c0011606:	74 0c                	je     c0011614 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011608:	b8 a0 f0 01 c0       	mov    eax,0xc001f0a0
c001160d:	e9 82 00 00 00       	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011612:	66 90                	xchg   ax,ax
c0011614:	83 ec 08             	sub    esp,0x8
c0011617:	68 eb 1d 02 c0       	push   0xc0021deb
c001161c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011620:	e8 2b f1 fe ff       	call   c0000750 <strcmp>
c0011625:	83 c4 10             	add    esp,0x10
c0011628:	85 c0                	test   eax,eax
c001162a:	0f 94 c0             	sete   al
c001162d:	0f b6 c0             	movzx  eax,al
c0011630:	85 c0                	test   eax,eax
c0011632:	74 08                	je     c001163c <KeResolveCompatibilitySymbol(char*)+0x160>
c0011634:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011639:	eb 59                	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001163b:	90                   	nop
c001163c:	83 ec 08             	sub    esp,0x8
c001163f:	68 03 1e 02 c0       	push   0xc0021e03
c0011644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011648:	e8 03 f1 fe ff       	call   c0000750 <strcmp>
c001164d:	83 c4 10             	add    esp,0x10
c0011650:	85 c0                	test   eax,eax
c0011652:	0f 94 c0             	sete   al
c0011655:	0f b6 c0             	movzx  eax,al
c0011658:	85 c0                	test   eax,eax
c001165a:	74 08                	je     c0011664 <KeResolveCompatibilitySymbol(char*)+0x188>
c001165c:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011661:	eb 31                	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011663:	90                   	nop
c0011664:	83 ec 08             	sub    esp,0x8
c0011667:	68 10 1e 02 c0       	push   0xc0021e10
c001166c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011670:	e8 db f0 fe ff       	call   c0000750 <strcmp>
c0011675:	83 c4 10             	add    esp,0x10
c0011678:	85 c0                	test   eax,eax
c001167a:	0f 94 c0             	sete   al
c001167d:	0f b6 c0             	movzx  eax,al
c0011680:	85 c0                	test   eax,eax
c0011682:	74 08                	je     c001168c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011684:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011689:	eb 09                	jmp    c0011694 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001168b:	90                   	nop
c001168c:	b8 00 00 00 00       	mov    eax,0x0
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	83 c4 0c             	add    esp,0xc
c0011697:	c3                   	ret    

c0011698 <KiSigKill(int)>:
c0011698:	83 ec 0c             	sub    esp,0xc
c001169b:	6a 00                	push   0x0
c001169d:	6a 00                	push   0x0
c001169f:	6a ff                	push   0xffffffff
c00116a1:	6a 01                	push   0x1
c00116a3:	e8 aa 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116a8:	83 c4 1c             	add    esp,0x1c
c00116ab:	c3                   	ret    

c00116ac <KiDefaultSignalHandlerIgnore(int)>:
c00116ac:	c3                   	ret    

c00116ad <KiDefaultSignalHandlerPause(int)>:
c00116ad:	57                   	push   edi
c00116ae:	b9 07 00 00 00       	mov    ecx,0x7
c00116b3:	56                   	push   esi
c00116b4:	be 59 1e 02 c0       	mov    esi,0xc0021e59
c00116b9:	83 ec 24             	sub    esp,0x24
c00116bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00116c0:	fc                   	cld    
c00116c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00116c3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00116c7:	50                   	push   eax
c00116c8:	6a 00                	push   0x0
c00116ca:	6a 00                	push   0x0
c00116cc:	6a 27                	push   0x27
c00116ce:	e8 7f 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116d3:	83 c4 34             	add    esp,0x34
c00116d6:	5e                   	pop    esi
c00116d7:	5f                   	pop    edi
c00116d8:	c3                   	ret    

c00116d9 <KiDefaultSignalHandlerResume(int)>:
c00116d9:	57                   	push   edi
c00116da:	b9 1d 00 00 00       	mov    ecx,0x1d
c00116df:	56                   	push   esi
c00116e0:	be 75 1e 02 c0       	mov    esi,0xc0021e75
c00116e5:	83 ec 24             	sub    esp,0x24
c00116e8:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00116ec:	fc                   	cld    
c00116ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00116ef:	8d 44 24 03          	lea    eax,[esp+0x3]
c00116f3:	50                   	push   eax
c00116f4:	6a 00                	push   0x0
c00116f6:	6a 00                	push   0x0
c00116f8:	6a 27                	push   0x27
c00116fa:	e8 53 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00116ff:	83 c4 34             	add    esp,0x34
c0011702:	5e                   	pop    esi
c0011703:	5f                   	pop    edi
c0011704:	c3                   	ret    

c0011705 <KeDeinitSignals(SigHandlerBlock*)>:
c0011705:	e9 bc 63 ff ff       	jmp    c0007ac6 <free>

c001170a <KeInitSignals()>:
c001170a:	53                   	push   ebx
c001170b:	83 ec 14             	sub    esp,0x14
c001170e:	68 c8 00 00 00       	push   0xc8
c0011713:	e8 9e 63 ff ff       	call   c0007ab6 <malloc>
c0011718:	83 c4 0c             	add    esp,0xc
c001171b:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011725:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001172f:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011736:	89 c3                	mov    ebx,eax
c0011738:	6a 20                	push   0x20
c001173a:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011740:	6a 00                	push   0x0
c0011742:	50                   	push   eax
c0011743:	e8 a8 ed fe ff       	call   c00004f0 <memset>
c0011748:	83 c4 0c             	add    esp,0xc
c001174b:	6a 44                	push   0x44
c001174d:	6a 00                	push   0x0
c001174f:	53                   	push   ebx
c0011750:	e8 9b ed fe ff       	call   c00004f0 <memset>
c0011755:	89 d8                	mov    eax,ebx
c0011757:	83 c4 18             	add    esp,0x18
c001175a:	5b                   	pop    ebx
c001175b:	c3                   	ret    

c001175c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001175c:	53                   	push   ebx
c001175d:	b8 01 00 00 00       	mov    eax,0x1
c0011762:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011766:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001176a:	83 f9 10             	cmp    ecx,0x10
c001176d:	7f 21                	jg     c0011790 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001176f:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011776:	89 03                	mov    DWORD PTR [ebx],eax
c0011778:	b8 01 00 00 00       	mov    eax,0x1
c001177d:	d3 e0                	shl    eax,cl
c001177f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011783:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011786:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001178e:	31 c0                	xor    eax,eax
c0011790:	5b                   	pop    ebx
c0011791:	c3                   	ret    

c0011792 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011792:	55                   	push   ebp
c0011793:	57                   	push   edi
c0011794:	bf 08 00 00 00       	mov    edi,0x8
c0011799:	56                   	push   esi
c001179a:	53                   	push   ebx
c001179b:	83 ec 18             	sub    esp,0x18
c001179e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00117a2:	68 92 1e 02 c0       	push   0xc0021e92
c00117a7:	e8 99 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00117ac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117b3:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	31 c9                	xor    ecx,ecx
c00117be:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00117c2:	99                   	cdq    
c00117c3:	f7 ff                	idiv   edi
c00117c5:	8d 42 24             	lea    eax,[edx+0x24]
c00117c8:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00117cc:	85 f6                	test   esi,esi
c00117ce:	75 1a                	jne    c00117ea <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00117d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00117d4:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00117d8:	50                   	push   eax
c00117d9:	50                   	push   eax
c00117da:	52                   	push   edx
c00117db:	68 a3 1e 02 c0       	push   0xc0021ea3
c00117e0:	e8 60 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00117e5:	83 c4 10             	add    esp,0x10
c00117e8:	eb 1b                	jmp    c0011805 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00117ea:	41                   	inc    ecx
c00117eb:	83 f9 08             	cmp    ecx,0x8
c00117ee:	75 ce                	jne    c00117be <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00117f0:	83 ec 0c             	sub    esp,0xc
c00117f3:	be 01 00 00 00       	mov    esi,0x1
c00117f8:	68 c4 1e 02 c0       	push   0xc0021ec4
c00117fd:	e8 43 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011802:	83 c4 10             	add    esp,0x10
c0011805:	83 c4 0c             	add    esp,0xc
c0011808:	89 f0                	mov    eax,esi
c001180a:	5b                   	pop    ebx
c001180b:	5e                   	pop    esi
c001180c:	5f                   	pop    edi
c001180d:	5d                   	pop    ebp
c001180e:	c3                   	ret    

c001180f <KeCheckSignal(SigHandlerBlock*, int*)>:
c001180f:	55                   	push   ebp
c0011810:	57                   	push   edi
c0011811:	56                   	push   esi
c0011812:	53                   	push   ebx
c0011813:	51                   	push   ecx
c0011814:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011818:	85 db                	test   ebx,ebx
c001181a:	0f 84 bc 00 00 00    	je     c00118dc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011820:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011827:	0f 84 af 00 00 00    	je     c00118dc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001182d:	31 c9                	xor    ecx,ecx
c001182f:	bf 08 00 00 00       	mov    edi,0x8
c0011834:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001183a:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001183d:	99                   	cdq    
c001183e:	f7 ff                	idiv   edi
c0011840:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011847:	85 ed                	test   ebp,ebp
c0011849:	0f 84 9e 00 00 00    	je     c00118ed <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001184f:	89 e9                	mov    ecx,ebp
c0011851:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011857:	bf 01 00 00 00       	mov    edi,0x1
c001185c:	89 04 24             	mov    DWORD PTR [esp],eax
c001185f:	d3 e7                	shl    edi,cl
c0011861:	31 c9                	xor    ecx,ecx
c0011863:	b8 01 00 00 00       	mov    eax,0x1
c0011868:	d3 e0                	shl    eax,cl
c001186a:	85 04 24             	test   DWORD PTR [esp],eax
c001186d:	74 06                	je     c0011875 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001186f:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011873:	75 67                	jne    c00118dc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011875:	41                   	inc    ecx
c0011876:	83 f9 11             	cmp    ecx,0x11
c0011879:	75 e8                	jne    c0011863 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001187b:	46                   	inc    esi
c001187c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001187f:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011885:	09 f8                	or     eax,edi
c0011887:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011892:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011898:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001189f:	31 c0                	xor    eax,eax
c00118a1:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00118a9:	74 09                	je     c00118b4 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00118ab:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00118b2:	eb 06                	jmp    c00118ba <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00118b4:	40                   	inc    eax
c00118b5:	83 f8 08             	cmp    eax,0x8
c00118b8:	75 e7                	jne    c00118a1 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00118ba:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00118bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00118c1:	83 fd 09             	cmp    ebp,0x9
c00118c4:	89 2a                	mov    DWORD PTR [edx],ebp
c00118c6:	75 07                	jne    c00118cf <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00118c8:	b8 98 16 01 c0       	mov    eax,0xc0011698
c00118cd:	eb 31                	jmp    c0011900 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118cf:	83 f8 01             	cmp    eax,0x1
c00118d2:	75 0c                	jne    c00118e0 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00118d4:	f7 d7                	not    edi
c00118d6:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00118dc:	31 c0                	xor    eax,eax
c00118de:	eb 20                	jmp    c0011900 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118e0:	85 c0                	test   eax,eax
c00118e2:	75 1c                	jne    c0011900 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118e4:	8b 04 ad c0 32 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcd40]
c00118eb:	eb 13                	jmp    c0011900 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00118ed:	46                   	inc    esi
c00118ee:	41                   	inc    ecx
c00118ef:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00118f5:	83 f9 08             	cmp    ecx,0x8
c00118f8:	0f 85 36 ff ff ff    	jne    c0011834 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00118fe:	eb dc                	jmp    c00118dc <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011900:	5a                   	pop    edx
c0011901:	5b                   	pop    ebx
c0011902:	5e                   	pop    esi
c0011903:	5f                   	pop    edi
c0011904:	5d                   	pop    ebp
c0011905:	c3                   	ret    

c0011906 <KiCheckSignalZ>:
c0011906:	83 ec 10             	sub    esp,0x10
c0011909:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001190d:	50                   	push   eax
c001190e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011913:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011916:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001191c:	e8 ee fe ff ff       	call   c001180f <KeCheckSignal(SigHandlerBlock*, int*)>
c0011921:	5a                   	pop    edx
c0011922:	31 d2                	xor    edx,edx
c0011924:	59                   	pop    ecx
c0011925:	85 c0                	test   eax,eax
c0011927:	74 19                	je     c0011942 <KiCheckSignalZ+0x3c>
c0011929:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001192f:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011932:	89 02                	mov    DWORD PTR [edx],eax
c0011934:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001193b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001193f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011942:	89 d0                	mov    eax,edx
c0011944:	83 c4 10             	add    esp,0x10
c0011947:	c3                   	ret    

c0011948 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011948:	56                   	push   esi
c0011949:	53                   	push   ebx
c001194a:	bb 01 00 00 00       	mov    ebx,0x1
c001194f:	52                   	push   edx
c0011950:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011954:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011958:	d3 e3                	shl    ebx,cl
c001195a:	83 f9 10             	cmp    ecx,0x10
c001195d:	7f 08                	jg     c0011967 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001195f:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011965:	75 10                	jne    c0011977 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	68 d5 1e 02 c0       	push   0xc0021ed5
c001196f:	e8 7d f9 ff ff       	call   c00112f1 <KePanic(char const*)>
c0011974:	83 c4 10             	add    esp,0x10
c0011977:	f7 d3                	not    ebx
c0011979:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001197f:	58                   	pop    eax
c0011980:	5b                   	pop    ebx
c0011981:	5e                   	pop    esi
c0011982:	c3                   	ret    

c0011983 <KiFinishSignalZ>:
c0011983:	53                   	push   ebx
c0011984:	83 ec 10             	sub    esp,0x10
c0011987:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001198b:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001198e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011993:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011996:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001199c:	e8 a7 ff ff ff       	call   c0011948 <KeCompleteSignal(SigHandlerBlock*, int)>
c00119a1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00119a7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00119ae:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00119b5:	83 c4 18             	add    esp,0x18
c00119b8:	5b                   	pop    ebx
c00119b9:	c3                   	ret    

c00119ba <SysSeekDir(regs*)>:
c00119ba:	31 c0                	xor    eax,eax
c00119bc:	31 d2                	xor    edx,edx
c00119be:	c3                   	ret    

c00119bf <SysTellDir(regs*)>:
c00119bf:	31 c0                	xor    eax,eax
c00119c1:	31 d2                	xor    edx,edx
c00119c3:	c3                   	ret    

c00119c4 <SysVerify(regs*)>:
c00119c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00119c8:	31 d2                	xor    edx,edx
c00119ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119cd:	c3                   	ret    

c00119ce <SysGetArgc(regs*)>:
c00119ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119d6:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00119dc:	89 c2                	mov    edx,eax
c00119de:	c1 fa 1f             	sar    edx,0x1f
c00119e1:	c3                   	ret    

c00119e2 <SysTTYName(regs*)>:
c00119e2:	b8 01 00 00 00       	mov    eax,0x1
c00119e7:	31 d2                	xor    edx,edx
c00119e9:	c3                   	ret    

c00119ea <SysFormatDisk(regs*)>:
c00119ea:	56                   	push   esi
c00119eb:	53                   	push   ebx
c00119ec:	83 ec 04             	sub    esp,0x4
c00119ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00119f3:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c00119f9:	eb 28                	jmp    c0011a23 <SysFormatDisk(regs*)+0x39>
c00119fb:	83 ec 0c             	sub    esp,0xc
c00119fe:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011a01:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011a04:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011a06:	51                   	push   ecx
c0011a07:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011a0a:	51                   	push   ecx
c0011a0b:	50                   	push   eax
c0011a0c:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0011a13:	50                   	push   eax
c0011a14:	53                   	push   ebx
c0011a15:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011a18:	83 c4 20             	add    esp,0x20
c0011a1b:	83 f8 08             	cmp    eax,0x8
c0011a1e:	75 14                	jne    c0011a34 <SysFormatDisk(regs*)+0x4a>
c0011a20:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011a23:	85 db                	test   ebx,ebx
c0011a25:	75 d4                	jne    c00119fb <SysFormatDisk(regs*)+0x11>
c0011a27:	83 c4 04             	add    esp,0x4
c0011a2a:	b8 03 00 00 00       	mov    eax,0x3
c0011a2f:	31 d2                	xor    edx,edx
c0011a31:	5b                   	pop    ebx
c0011a32:	5e                   	pop    esi
c0011a33:	c3                   	ret    
c0011a34:	85 c0                	test   eax,eax
c0011a36:	74 1f                	je     c0011a57 <SysFormatDisk(regs*)+0x6d>
c0011a38:	83 f8 09             	cmp    eax,0x9
c0011a3b:	74 0d                	je     c0011a4a <SysFormatDisk(regs*)+0x60>
c0011a3d:	83 c4 04             	add    esp,0x4
c0011a40:	b8 02 00 00 00       	mov    eax,0x2
c0011a45:	31 d2                	xor    edx,edx
c0011a47:	5b                   	pop    ebx
c0011a48:	5e                   	pop    esi
c0011a49:	c3                   	ret    
c0011a4a:	83 c4 04             	add    esp,0x4
c0011a4d:	b8 01 00 00 00       	mov    eax,0x1
c0011a52:	31 d2                	xor    edx,edx
c0011a54:	5b                   	pop    ebx
c0011a55:	5e                   	pop    esi
c0011a56:	c3                   	ret    
c0011a57:	83 c4 04             	add    esp,0x4
c0011a5a:	31 c0                	xor    eax,eax
c0011a5c:	31 d2                	xor    edx,edx
c0011a5e:	5b                   	pop    ebx
c0011a5f:	5e                   	pop    esi
c0011a60:	c3                   	ret    

c0011a61 <SysSetDiskVolumeLabel(regs*)>:
c0011a61:	56                   	push   esi
c0011a62:	53                   	push   ebx
c0011a63:	83 ec 04             	sub    esp,0x4
c0011a66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011a6a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011a6d:	83 f8 19             	cmp    eax,0x19
c0011a70:	77 33                	ja     c0011aa5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a72:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a79:	85 c9                	test   ecx,ecx
c0011a7b:	74 28                	je     c0011aa5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a7d:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a80:	85 db                	test   ebx,ebx
c0011a82:	74 21                	je     c0011aa5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a84:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a8a:	85 d2                	test   edx,edx
c0011a8c:	74 17                	je     c0011aa5 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a8e:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a90:	53                   	push   ebx
c0011a91:	50                   	push   eax
c0011a92:	51                   	push   ecx
c0011a93:	52                   	push   edx
c0011a94:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a97:	83 c4 10             	add    esp,0x10
c0011a9a:	89 c2                	mov    edx,eax
c0011a9c:	83 c4 04             	add    esp,0x4
c0011a9f:	c1 fa 1f             	sar    edx,0x1f
c0011aa2:	5b                   	pop    ebx
c0011aa3:	5e                   	pop    esi
c0011aa4:	c3                   	ret    
c0011aa5:	83 c4 04             	add    esp,0x4
c0011aa8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011aad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab2:	5b                   	pop    ebx
c0011ab3:	5e                   	pop    esi
c0011ab4:	c3                   	ret    

c0011ab5 <SysGetDiskVolumeLabel(regs*)>:
c0011ab5:	57                   	push   edi
c0011ab6:	56                   	push   esi
c0011ab7:	53                   	push   ebx
c0011ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011abc:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011abf:	83 fa 19             	cmp    edx,0x19
c0011ac2:	77 3c                	ja     c0011b00 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ac4:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011acb:	85 c9                	test   ecx,ecx
c0011acd:	74 31                	je     c0011b00 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011acf:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011ad2:	85 db                	test   ebx,ebx
c0011ad4:	74 2a                	je     c0011b00 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ad6:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011ad9:	85 f6                	test   esi,esi
c0011adb:	74 23                	je     c0011b00 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011add:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011ae3:	85 c0                	test   eax,eax
c0011ae5:	74 19                	je     c0011b00 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011ae7:	83 ec 0c             	sub    esp,0xc
c0011aea:	8b 38                	mov    edi,DWORD PTR [eax]
c0011aec:	56                   	push   esi
c0011aed:	53                   	push   ebx
c0011aee:	52                   	push   edx
c0011aef:	51                   	push   ecx
c0011af0:	50                   	push   eax
c0011af1:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011af4:	83 c4 20             	add    esp,0x20
c0011af7:	89 c2                	mov    edx,eax
c0011af9:	5b                   	pop    ebx
c0011afa:	c1 fa 1f             	sar    edx,0x1f
c0011afd:	5e                   	pop    esi
c0011afe:	5f                   	pop    edi
c0011aff:	c3                   	ret    
c0011b00:	5b                   	pop    ebx
c0011b01:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011b06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b0b:	5e                   	pop    esi
c0011b0c:	5f                   	pop    edi
c0011b0d:	c3                   	ret    

c0011b0e <SysShutdown(regs*)>:
c0011b0e:	83 ec 0c             	sub    esp,0xc
c0011b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b15:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b18:	85 c0                	test   eax,eax
c0011b1a:	74 18                	je     c0011b34 <SysShutdown(regs*)+0x26>
c0011b1c:	83 f8 01             	cmp    eax,0x1
c0011b1f:	74 38                	je     c0011b59 <SysShutdown(regs*)+0x4b>
c0011b21:	83 f8 02             	cmp    eax,0x2
c0011b24:	74 24                	je     c0011b4a <SysShutdown(regs*)+0x3c>
c0011b26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b2b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b30:	83 c4 0c             	add    esp,0xc
c0011b33:	c3                   	ret    
c0011b34:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b39:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b3b:	6a 00                	push   0x0
c0011b3d:	6a 00                	push   0x0
c0011b3f:	6a 00                	push   0x0
c0011b41:	50                   	push   eax
c0011b42:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b45:	83 c4 10             	add    esp,0x10
c0011b48:	eb dc                	jmp    c0011b26 <SysShutdown(regs*)+0x18>
c0011b4a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011b4f:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b51:	6a 00                	push   0x0
c0011b53:	6a 00                	push   0x0
c0011b55:	6a 01                	push   0x1
c0011b57:	eb e8                	jmp    c0011b41 <SysShutdown(regs*)+0x33>
c0011b59:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011b5e:	85 c0                	test   eax,eax
c0011b60:	74 02                	je     c0011b64 <SysShutdown(regs*)+0x56>
c0011b62:	ff d0                	call   eax
c0011b64:	31 c0                	xor    eax,eax
c0011b66:	31 d2                	xor    edx,edx
c0011b68:	83 c4 0c             	add    esp,0xc
c0011b6b:	c3                   	ret    

c0011b6c <SysRealpath(regs*)>:
c0011b6c:	83 ec 0c             	sub    esp,0xc
c0011b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b73:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011b76:	85 d2                	test   edx,edx
c0011b78:	74 07                	je     c0011b81 <SysRealpath(regs*)+0x15>
c0011b7a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b7d:	85 c0                	test   eax,eax
c0011b7f:	75 0b                	jne    c0011b8c <SysRealpath(regs*)+0x20>
c0011b81:	b8 01 00 00 00       	mov    eax,0x1
c0011b86:	31 d2                	xor    edx,edx
c0011b88:	83 c4 0c             	add    esp,0xc
c0011b8b:	c3                   	ret    
c0011b8c:	83 ec 04             	sub    esp,0x4
c0011b8f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b95:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011b98:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011b9e:	51                   	push   ecx
c0011b9f:	52                   	push   edx
c0011ba0:	50                   	push   eax
c0011ba1:	e8 44 9a ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0011ba6:	83 c4 10             	add    esp,0x10
c0011ba9:	31 c0                	xor    eax,eax
c0011bab:	31 d2                	xor    edx,edx
c0011bad:	83 c4 0c             	add    esp,0xc
c0011bb0:	c3                   	ret    

c0011bb1 <SysReadDir(regs*)>:
c0011bb1:	53                   	push   ebx
c0011bb2:	83 ec 18             	sub    esp,0x18
c0011bb5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011bb9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bbc:	83 f8 02             	cmp    eax,0x2
c0011bbf:	76 61                	jbe    c0011c22 <SysReadDir(regs*)+0x71>
c0011bc1:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011bc8:	77 49                	ja     c0011c13 <SysReadDir(regs*)+0x62>
c0011bca:	83 ec 0c             	sub    esp,0xc
c0011bcd:	50                   	push   eax
c0011bce:	e8 e0 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bd3:	83 c4 10             	add    esp,0x10
c0011bd6:	85 c0                	test   eax,eax
c0011bd8:	74 39                	je     c0011c13 <SysReadDir(regs*)+0x62>
c0011bda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011be2:	83 ec 0c             	sub    esp,0xc
c0011be5:	8b 10                	mov    edx,DWORD PTR [eax]
c0011be7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011beb:	51                   	push   ecx
c0011bec:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011bef:	51                   	push   ecx
c0011bf0:	6a 00                	push   0x0
c0011bf2:	68 10 01 00 00       	push   0x110
c0011bf7:	50                   	push   eax
c0011bf8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011bfb:	83 c4 20             	add    esp,0x20
c0011bfe:	85 c0                	test   eax,eax
c0011c00:	74 29                	je     c0011c2b <SysReadDir(regs*)+0x7a>
c0011c02:	83 f8 07             	cmp    eax,0x7
c0011c05:	74 1b                	je     c0011c22 <SysReadDir(regs*)+0x71>
c0011c07:	b8 02 00 00 00       	mov    eax,0x2
c0011c0c:	31 d2                	xor    edx,edx
c0011c0e:	83 c4 18             	add    esp,0x18
c0011c11:	5b                   	pop    ebx
c0011c12:	c3                   	ret    
c0011c13:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c18:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c1d:	83 c4 18             	add    esp,0x18
c0011c20:	5b                   	pop    ebx
c0011c21:	c3                   	ret    
c0011c22:	b8 01 00 00 00       	mov    eax,0x1
c0011c27:	31 d2                	xor    edx,edx
c0011c29:	eb e3                	jmp    c0011c0e <SysReadDir(regs*)+0x5d>
c0011c2b:	31 c0                	xor    eax,eax
c0011c2d:	31 d2                	xor    edx,edx
c0011c2f:	eb dd                	jmp    c0011c0e <SysReadDir(regs*)+0x5d>

c0011c31 <SysIsATTY(regs*)>:
c0011c31:	83 ec 0c             	sub    esp,0xc
c0011c34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c38:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011c3b:	83 f8 02             	cmp    eax,0x2
c0011c3e:	76 07                	jbe    c0011c47 <SysIsATTY(regs*)+0x16>
c0011c40:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011c45:	75 26                	jne    c0011c6d <SysIsATTY(regs*)+0x3c>
c0011c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c4f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011c55:	85 c0                	test   eax,eax
c0011c57:	74 24                	je     c0011c7d <SysIsATTY(regs*)+0x4c>
c0011c59:	83 ec 0c             	sub    esp,0xc
c0011c5c:	8b 10                	mov    edx,DWORD PTR [eax]
c0011c5e:	50                   	push   eax
c0011c5f:	ff 12                	call   DWORD PTR [edx]
c0011c61:	31 d2                	xor    edx,edx
c0011c63:	0f b6 c0             	movzx  eax,al
c0011c66:	83 c4 10             	add    esp,0x10
c0011c69:	83 c4 0c             	add    esp,0xc
c0011c6c:	c3                   	ret    
c0011c6d:	83 ec 0c             	sub    esp,0xc
c0011c70:	50                   	push   eax
c0011c71:	e8 3d 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c76:	83 c4 10             	add    esp,0x10
c0011c79:	85 c0                	test   eax,eax
c0011c7b:	75 dc                	jne    c0011c59 <SysIsATTY(regs*)+0x28>
c0011c7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c82:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c87:	83 c4 0c             	add    esp,0xc
c0011c8a:	c3                   	ret    

c0011c8b <SysSeek(regs*)>:
c0011c8b:	53                   	push   ebx
c0011c8c:	83 ec 08             	sub    esp,0x8
c0011c8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c96:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c99:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c9f:	77 32                	ja     c0011cd3 <SysSeek(regs*)+0x48>
c0011ca1:	83 ec 0c             	sub    esp,0xc
c0011ca4:	50                   	push   eax
c0011ca5:	e8 09 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011caa:	83 c4 0c             	add    esp,0xc
c0011cad:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011cb0:	31 db                	xor    ebx,ebx
c0011cb2:	53                   	push   ebx
c0011cb3:	51                   	push   ecx
c0011cb4:	50                   	push   eax
c0011cb5:	e8 78 9c ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0011cba:	83 c4 10             	add    esp,0x10
c0011cbd:	85 c0                	test   eax,eax
c0011cbf:	0f 95 c0             	setne  al
c0011cc2:	31 d2                	xor    edx,edx
c0011cc4:	0f b6 c0             	movzx  eax,al
c0011cc7:	f7 d8                	neg    eax
c0011cc9:	83 d2 00             	adc    edx,0x0
c0011ccc:	83 c4 08             	add    esp,0x8
c0011ccf:	f7 da                	neg    edx
c0011cd1:	5b                   	pop    ebx
c0011cd2:	c3                   	ret    
c0011cd3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cd8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cdd:	83 c4 08             	add    esp,0x8
c0011ce0:	5b                   	pop    ebx
c0011ce1:	c3                   	ret    

c0011ce2 <SysTell(regs*)>:
c0011ce2:	53                   	push   ebx
c0011ce3:	83 ec 08             	sub    esp,0x8
c0011ce6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011cea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ced:	83 f8 02             	cmp    eax,0x2
c0011cf0:	76 4e                	jbe    c0011d40 <SysTell(regs*)+0x5e>
c0011cf2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cf7:	76 19                	jbe    c0011d12 <SysTell(regs*)+0x30>
c0011cf9:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cfc:	31 d2                	xor    edx,edx
c0011cfe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d04:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d0b:	31 c0                	xor    eax,eax
c0011d0d:	83 c4 08             	add    esp,0x8
c0011d10:	5b                   	pop    ebx
c0011d11:	c3                   	ret    
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	50                   	push   eax
c0011d16:	e8 98 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d1b:	5a                   	pop    edx
c0011d1c:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011d1f:	59                   	pop    ecx
c0011d20:	53                   	push   ebx
c0011d21:	50                   	push   eax
c0011d22:	e8 b7 9c ff ff       	call   c000b9de <File::tell(unsigned long long*)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	85 c0                	test   eax,eax
c0011d2c:	0f 95 c0             	setne  al
c0011d2f:	31 d2                	xor    edx,edx
c0011d31:	0f b6 c0             	movzx  eax,al
c0011d34:	f7 d8                	neg    eax
c0011d36:	83 d2 00             	adc    edx,0x0
c0011d39:	83 c4 08             	add    esp,0x8
c0011d3c:	f7 da                	neg    edx
c0011d3e:	5b                   	pop    ebx
c0011d3f:	c3                   	ret    
c0011d40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d45:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d4a:	83 c4 08             	add    esp,0x8
c0011d4d:	5b                   	pop    ebx
c0011d4e:	c3                   	ret    

c0011d4f <SysSize(regs*)>:
c0011d4f:	53                   	push   ebx
c0011d50:	83 ec 18             	sub    esp,0x18
c0011d53:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d57:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d5a:	83 f8 02             	cmp    eax,0x2
c0011d5d:	76 54                	jbe    c0011db3 <SysSize(regs*)+0x64>
c0011d5f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d64:	76 19                	jbe    c0011d7f <SysSize(regs*)+0x30>
c0011d66:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011d69:	31 d2                	xor    edx,edx
c0011d6b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d78:	31 c0                	xor    eax,eax
c0011d7a:	83 c4 18             	add    esp,0x18
c0011d7d:	5b                   	pop    ebx
c0011d7e:	c3                   	ret    
c0011d7f:	83 ec 0c             	sub    esp,0xc
c0011d82:	50                   	push   eax
c0011d83:	e8 2b 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d88:	83 c4 0c             	add    esp,0xc
c0011d8b:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d8f:	52                   	push   edx
c0011d90:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d93:	52                   	push   edx
c0011d94:	50                   	push   eax
c0011d95:	e8 dc 9d ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c0011d9a:	83 c4 10             	add    esp,0x10
c0011d9d:	85 c0                	test   eax,eax
c0011d9f:	0f 95 c0             	setne  al
c0011da2:	31 d2                	xor    edx,edx
c0011da4:	0f b6 c0             	movzx  eax,al
c0011da7:	f7 d8                	neg    eax
c0011da9:	83 d2 00             	adc    edx,0x0
c0011dac:	83 c4 18             	add    esp,0x18
c0011daf:	f7 da                	neg    edx
c0011db1:	5b                   	pop    ebx
c0011db2:	c3                   	ret    
c0011db3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011db8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dbd:	83 c4 18             	add    esp,0x18
c0011dc0:	5b                   	pop    ebx
c0011dc1:	c3                   	ret    

c0011dc2 <SysSizeFromFilename(regs*)>:
c0011dc2:	57                   	push   edi
c0011dc3:	56                   	push   esi
c0011dc4:	53                   	push   ebx
c0011dc5:	83 ec 20             	sub    esp,0x20
c0011dc8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011dcc:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011dcf:	83 fb 02             	cmp    ebx,0x2
c0011dd2:	0f 86 8a 00 00 00    	jbe    c0011e62 <SysSizeFromFilename(regs*)+0xa0>
c0011dd8:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011dde:	76 1b                	jbe    c0011dfb <SysSizeFromFilename(regs*)+0x39>
c0011de0:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011de3:	31 d2                	xor    edx,edx
c0011de5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011deb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011df2:	83 c4 20             	add    esp,0x20
c0011df5:	31 c0                	xor    eax,eax
c0011df7:	5b                   	pop    ebx
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	c3                   	ret    
c0011dfb:	83 ec 0c             	sub    esp,0xc
c0011dfe:	68 14 01 00 00       	push   0x114
c0011e03:	e8 ae 5c ff ff       	call   c0007ab6 <malloc>
c0011e08:	83 c4 0c             	add    esp,0xc
c0011e0b:	89 c7                	mov    edi,eax
c0011e0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e12:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e15:	50                   	push   eax
c0011e16:	53                   	push   ebx
c0011e17:	57                   	push   edi
c0011e18:	e8 9b 99 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0011e1d:	83 c4 0c             	add    esp,0xc
c0011e20:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011e24:	50                   	push   eax
c0011e25:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011e28:	52                   	push   edx
c0011e29:	57                   	push   edi
c0011e2a:	e8 47 9d ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c0011e2f:	83 c4 10             	add    esp,0x10
c0011e32:	85 ff                	test   edi,edi
c0011e34:	74 14                	je     c0011e4a <SysSizeFromFilename(regs*)+0x88>
c0011e36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011e3a:	8b 17                	mov    edx,DWORD PTR [edi]
c0011e3c:	83 ec 0c             	sub    esp,0xc
c0011e3f:	57                   	push   edi
c0011e40:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011e43:	83 c4 10             	add    esp,0x10
c0011e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e4a:	85 c0                	test   eax,eax
c0011e4c:	0f 95 c0             	setne  al
c0011e4f:	31 d2                	xor    edx,edx
c0011e51:	0f b6 c0             	movzx  eax,al
c0011e54:	f7 d8                	neg    eax
c0011e56:	83 d2 00             	adc    edx,0x0
c0011e59:	83 c4 20             	add    esp,0x20
c0011e5c:	f7 da                	neg    edx
c0011e5e:	5b                   	pop    ebx
c0011e5f:	5e                   	pop    esi
c0011e60:	5f                   	pop    edi
c0011e61:	c3                   	ret    
c0011e62:	83 c4 20             	add    esp,0x20
c0011e65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e6a:	5b                   	pop    ebx
c0011e6b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e70:	5e                   	pop    esi
c0011e71:	5f                   	pop    edi
c0011e72:	c3                   	ret    

c0011e73 <SysClose(regs*)>:
c0011e73:	53                   	push   ebx
c0011e74:	83 ec 08             	sub    esp,0x8
c0011e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e7e:	83 f8 02             	cmp    eax,0x2
c0011e81:	76 41                	jbe    c0011ec4 <SysClose(regs*)+0x51>
c0011e83:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e89:	83 fa 01             	cmp    edx,0x1
c0011e8c:	76 2d                	jbe    c0011ebb <SysClose(regs*)+0x48>
c0011e8e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e93:	77 2f                	ja     c0011ec4 <SysClose(regs*)+0x51>
c0011e95:	83 ec 0c             	sub    esp,0xc
c0011e98:	50                   	push   eax
c0011e99:	e8 15 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e9e:	89 c3                	mov    ebx,eax
c0011ea0:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ea3:	e8 2a 9a ff ff       	call   c000b8d2 <File::close()>
c0011ea8:	83 c4 10             	add    esp,0x10
c0011eab:	85 db                	test   ebx,ebx
c0011ead:	74 0c                	je     c0011ebb <SysClose(regs*)+0x48>
c0011eaf:	83 ec 0c             	sub    esp,0xc
c0011eb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eb4:	53                   	push   ebx
c0011eb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011eb8:	83 c4 10             	add    esp,0x10
c0011ebb:	31 c0                	xor    eax,eax
c0011ebd:	31 d2                	xor    edx,edx
c0011ebf:	83 c4 08             	add    esp,0x8
c0011ec2:	5b                   	pop    ebx
c0011ec3:	c3                   	ret    
c0011ec4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ec9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ece:	83 c4 08             	add    esp,0x8
c0011ed1:	5b                   	pop    ebx
c0011ed2:	c3                   	ret    

c0011ed3 <SysOpenDir(regs*)>:
c0011ed3:	56                   	push   esi
c0011ed4:	53                   	push   ebx
c0011ed5:	83 ec 04             	sub    esp,0x4
c0011ed8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011edc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011edf:	85 c9                	test   ecx,ecx
c0011ee1:	74 5d                	je     c0011f40 <SysOpenDir(regs*)+0x6d>
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	68 14 01 00 00       	push   0x114
c0011eeb:	e8 c6 5b ff ff       	call   c0007ab6 <malloc>
c0011ef0:	83 c4 0c             	add    esp,0xc
c0011ef3:	89 c6                	mov    esi,eax
c0011ef5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011efa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011efd:	50                   	push   eax
c0011efe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011f01:	52                   	push   edx
c0011f02:	56                   	push   esi
c0011f03:	e8 2c 9e ff ff       	call   c000bd34 <Directory::Directory(char const*, Process*)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	85 f6                	test   esi,esi
c0011f0d:	74 31                	je     c0011f40 <SysOpenDir(regs*)+0x6d>
c0011f0f:	83 ec 0c             	sub    esp,0xc
c0011f12:	56                   	push   esi
c0011f13:	e8 d8 9e ff ff       	call   c000bdf0 <Directory::open()>
c0011f18:	83 c4 10             	add    esp,0x10
c0011f1b:	85 c0                	test   eax,eax
c0011f1d:	75 21                	jne    c0011f40 <SysOpenDir(regs*)+0x6d>
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	56                   	push   esi
c0011f23:	e8 8e 72 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011f28:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011f2b:	83 c4 10             	add    esp,0x10
c0011f2e:	89 02                	mov    DWORD PTR [edx],eax
c0011f30:	c1 f8 1f             	sar    eax,0x1f
c0011f33:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011f36:	83 c4 04             	add    esp,0x4
c0011f39:	31 c0                	xor    eax,eax
c0011f3b:	31 d2                	xor    edx,edx
c0011f3d:	5b                   	pop    ebx
c0011f3e:	5e                   	pop    esi
c0011f3f:	c3                   	ret    
c0011f40:	83 c4 04             	add    esp,0x4
c0011f43:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f48:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f4d:	5b                   	pop    ebx
c0011f4e:	5e                   	pop    esi
c0011f4f:	c3                   	ret    

c0011f50 <SysMakeDir(regs*)>:
c0011f50:	56                   	push   esi
c0011f51:	53                   	push   ebx
c0011f52:	83 ec 10             	sub    esp,0x10
c0011f55:	68 14 01 00 00       	push   0x114
c0011f5a:	e8 57 5b ff ff       	call   c0007ab6 <malloc>
c0011f5f:	83 c4 0c             	add    esp,0xc
c0011f62:	89 c3                	mov    ebx,eax
c0011f64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f69:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f6c:	50                   	push   eax
c0011f6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011f71:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011f74:	52                   	push   edx
c0011f75:	53                   	push   ebx
c0011f76:	e8 b9 9d ff ff       	call   c000bd34 <Directory::Directory(char const*, Process*)>
c0011f7b:	83 c4 10             	add    esp,0x10
c0011f7e:	85 db                	test   ebx,ebx
c0011f80:	74 2c                	je     c0011fae <SysMakeDir(regs*)+0x5e>
c0011f82:	83 ec 0c             	sub    esp,0xc
c0011f85:	53                   	push   ebx
c0011f86:	e8 45 a0 ff ff       	call   c000bfd0 <Directory::create()>
c0011f8b:	89 c6                	mov    esi,eax
c0011f8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f92:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f95:	83 c4 10             	add    esp,0x10
c0011f98:	31 c0                	xor    eax,eax
c0011f9a:	85 f6                	test   esi,esi
c0011f9c:	0f 95 c0             	setne  al
c0011f9f:	31 d2                	xor    edx,edx
c0011fa1:	f7 d8                	neg    eax
c0011fa3:	83 d2 00             	adc    edx,0x0
c0011fa6:	83 c4 04             	add    esp,0x4
c0011fa9:	f7 da                	neg    edx
c0011fab:	5b                   	pop    ebx
c0011fac:	5e                   	pop    esi
c0011fad:	c3                   	ret    
c0011fae:	83 c4 04             	add    esp,0x4
c0011fb1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fb6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fbb:	5b                   	pop    ebx
c0011fbc:	5e                   	pop    esi
c0011fbd:	c3                   	ret    

c0011fbe <SysCloseDir(regs*)>:
c0011fbe:	53                   	push   ebx
c0011fbf:	83 ec 08             	sub    esp,0x8
c0011fc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fc6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fc9:	8d 50 fd             	lea    edx,[eax-0x3]
c0011fcc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011fd2:	77 2f                	ja     c0012003 <SysCloseDir(regs*)+0x45>
c0011fd4:	83 ec 0c             	sub    esp,0xc
c0011fd7:	50                   	push   eax
c0011fd8:	e8 d6 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fdd:	89 c3                	mov    ebx,eax
c0011fdf:	89 04 24             	mov    DWORD PTR [esp],eax
c0011fe2:	e8 65 9e ff ff       	call   c000be4c <Directory::close()>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	85 db                	test   ebx,ebx
c0011fec:	74 0c                	je     c0011ffa <SysCloseDir(regs*)+0x3c>
c0011fee:	83 ec 0c             	sub    esp,0xc
c0011ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011ff3:	53                   	push   ebx
c0011ff4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ff7:	83 c4 10             	add    esp,0x10
c0011ffa:	31 c0                	xor    eax,eax
c0011ffc:	31 d2                	xor    edx,edx
c0011ffe:	83 c4 08             	add    esp,0x8
c0012001:	5b                   	pop    ebx
c0012002:	c3                   	ret    
c0012003:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012008:	ba ff ff ff ff       	mov    edx,0xffffffff
c001200d:	83 c4 08             	add    esp,0x8
c0012010:	5b                   	pop    ebx
c0012011:	c3                   	ret    

c0012012 <SysWait(regs*)>:
c0012012:	83 ec 10             	sub    esp,0x10
c0012015:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012019:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001201c:	52                   	push   edx
c001201d:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0012020:	51                   	push   ecx
c0012021:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012024:	50                   	push   eax
c0012025:	e8 d2 3d 00 00       	call   c0015dfc <waitTask(int, int*, int)>
c001202a:	83 c4 1c             	add    esp,0x1c
c001202d:	89 c2                	mov    edx,eax
c001202f:	c1 fa 1f             	sar    edx,0x1f
c0012032:	c3                   	ret    

c0012033 <SysNotImpl(regs*)>:
c0012033:	83 ec 18             	sub    esp,0x18
c0012036:	68 e6 1e 02 c0       	push   0xc0021ee6
c001203b:	e8 b1 f2 ff ff       	call   c00112f1 <KePanic(char const*)>
c0012040:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012045:	ba ff ff ff ff       	mov    edx,0xffffffff
c001204a:	83 c4 1c             	add    esp,0x1c
c001204d:	c3                   	ret    

c001204e <SysPanic(regs*)>:
c001204e:	83 ec 18             	sub    esp,0x18
c0012051:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012055:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0012058:	50                   	push   eax
c0012059:	e8 93 f2 ff ff       	call   c00112f1 <KePanic(char const*)>
c001205e:	b8 01 00 00 00       	mov    eax,0x1
c0012063:	31 d2                	xor    edx,edx
c0012065:	83 c4 1c             	add    esp,0x1c
c0012068:	c3                   	ret    

c0012069 <SysRmdir(regs*)>:
c0012069:	56                   	push   esi
c001206a:	53                   	push   ebx
c001206b:	83 ec 20             	sub    esp,0x20
c001206e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012072:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012075:	68 14 01 00 00       	push   0x114
c001207a:	e8 37 5a ff ff       	call   c0007ab6 <malloc>
c001207f:	83 c4 0c             	add    esp,0xc
c0012082:	89 c3                	mov    ebx,eax
c0012084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012089:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001208c:	50                   	push   eax
c001208d:	56                   	push   esi
c001208e:	53                   	push   ebx
c001208f:	e8 24 97 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0012094:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012097:	e8 a6 99 ff ff       	call   c000ba42 <File::unlink()>
c001209c:	83 c4 10             	add    esp,0x10
c001209f:	85 db                	test   ebx,ebx
c00120a1:	74 14                	je     c00120b7 <SysRmdir(regs*)+0x4e>
c00120a3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00120a9:	83 ec 0c             	sub    esp,0xc
c00120ac:	53                   	push   ebx
c00120ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00120b0:	83 c4 10             	add    esp,0x10
c00120b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120b7:	85 c0                	test   eax,eax
c00120b9:	0f 95 c0             	setne  al
c00120bc:	31 d2                	xor    edx,edx
c00120be:	0f b6 c0             	movzx  eax,al
c00120c1:	f7 d8                	neg    eax
c00120c3:	83 d2 00             	adc    edx,0x0
c00120c6:	83 c4 14             	add    esp,0x14
c00120c9:	f7 da                	neg    edx
c00120cb:	5b                   	pop    ebx
c00120cc:	5e                   	pop    esi
c00120cd:	c3                   	ret    

c00120ce <SysUnlink(regs*)>:
c00120ce:	56                   	push   esi
c00120cf:	53                   	push   ebx
c00120d0:	83 ec 20             	sub    esp,0x20
c00120d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120d7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00120da:	68 14 01 00 00       	push   0x114
c00120df:	e8 d2 59 ff ff       	call   c0007ab6 <malloc>
c00120e4:	83 c4 0c             	add    esp,0xc
c00120e7:	89 c3                	mov    ebx,eax
c00120e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120f1:	50                   	push   eax
c00120f2:	56                   	push   esi
c00120f3:	53                   	push   ebx
c00120f4:	e8 bf 96 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00120f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120fc:	e8 41 99 ff ff       	call   c000ba42 <File::unlink()>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	85 db                	test   ebx,ebx
c0012106:	74 14                	je     c001211c <SysUnlink(regs*)+0x4e>
c0012108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001210c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001210e:	83 ec 0c             	sub    esp,0xc
c0012111:	53                   	push   ebx
c0012112:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012115:	83 c4 10             	add    esp,0x10
c0012118:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001211c:	85 c0                	test   eax,eax
c001211e:	0f 95 c0             	setne  al
c0012121:	31 d2                	xor    edx,edx
c0012123:	0f b6 c0             	movzx  eax,al
c0012126:	f7 d8                	neg    eax
c0012128:	83 d2 00             	adc    edx,0x0
c001212b:	83 c4 14             	add    esp,0x14
c001212e:	f7 da                	neg    edx
c0012130:	5b                   	pop    ebx
c0012131:	5e                   	pop    esi
c0012132:	c3                   	ret    

c0012133 <SysGetArgv(regs*)>:
c0012133:	83 ec 0c             	sub    esp,0xc
c0012136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001213a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001213d:	85 c0                	test   eax,eax
c001213f:	78 2c                	js     c001216d <SysGetArgv(regs*)+0x3a>
c0012141:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012147:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001214a:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012150:	7d 1b                	jge    c001216d <SysGetArgv(regs*)+0x3a>
c0012152:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012159:	85 c0                	test   eax,eax
c001215b:	74 18                	je     c0012175 <SysGetArgv(regs*)+0x42>
c001215d:	83 ec 08             	sub    esp,0x8
c0012160:	50                   	push   eax
c0012161:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012164:	50                   	push   eax
c0012165:	e8 d6 e4 fe ff       	call   c0000640 <strcpy>
c001216a:	83 c4 10             	add    esp,0x10
c001216d:	31 c0                	xor    eax,eax
c001216f:	31 d2                	xor    edx,edx
c0012171:	83 c4 0c             	add    esp,0xc
c0012174:	c3                   	ret    
c0012175:	b8 01 00 00 00       	mov    eax,0x1
c001217a:	31 d2                	xor    edx,edx
c001217c:	83 c4 0c             	add    esp,0xc
c001217f:	c3                   	ret    

c0012180 <SysUSleep(regs*)>:
c0012180:	83 ec 1c             	sub    esp,0x1c
c0012183:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012187:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001218a:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001218d:	6a 00                	push   0x0
c001218f:	6a 64                	push   0x64
c0012191:	52                   	push   edx
c0012192:	50                   	push   eax
c0012193:	e8 88 d0 00 00       	call   c001f220 <__udivdi3>
c0012198:	83 c4 14             	add    esp,0x14
c001219b:	50                   	push   eax
c001219c:	e8 3f 3d 00 00       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c00121a1:	31 c0                	xor    eax,eax
c00121a3:	31 d2                	xor    edx,edx
c00121a5:	83 c4 1c             	add    esp,0x1c
c00121a8:	c3                   	ret    

c00121a9 <SysSpawn(regs*)>:
c00121a9:	56                   	push   esi
c00121aa:	53                   	push   ebx
c00121ab:	83 ec 04             	sub    esp,0x4
c00121ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00121b2:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121b5:	85 f6                	test   esi,esi
c00121b7:	75 0a                	jne    c00121c3 <SysSpawn(regs*)+0x1a>
c00121b9:	83 c4 04             	add    esp,0x4
c00121bc:	31 c0                	xor    eax,eax
c00121be:	31 d2                	xor    edx,edx
c00121c0:	5b                   	pop    ebx
c00121c1:	5e                   	pop    esi
c00121c2:	c3                   	ret    
c00121c3:	83 ec 0c             	sub    esp,0xc
c00121c6:	68 24 07 00 00       	push   0x724
c00121cb:	e8 e6 58 ff ff       	call   c0007ab6 <malloc>
c00121d0:	83 c4 10             	add    esp,0x10
c00121d3:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00121d6:	89 c6                	mov    esi,eax
c00121d8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121db:	85 c9                	test   ecx,ecx
c00121dd:	75 39                	jne    c0012218 <SysSpawn(regs*)+0x6f>
c00121df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121e4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121e7:	52                   	push   edx
c00121e8:	50                   	push   eax
c00121e9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00121ec:	50                   	push   eax
c00121ed:	56                   	push   esi
c00121ee:	e8 3d 33 00 00       	call   c0015530 <Process::Process(char const*, Process*, char**)>
c00121f3:	83 c4 10             	add    esp,0x10
c00121f6:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00121fd:	75 ba                	jne    c00121b9 <SysSpawn(regs*)+0x10>
c00121ff:	83 ec 0c             	sub    esp,0xc
c0012202:	56                   	push   esi
c0012203:	e8 64 38 00 00       	call   c0015a6c <Process::createUserThread()>
c0012208:	8b 06                	mov    eax,DWORD PTR [esi]
c001220a:	83 c4 10             	add    esp,0x10
c001220d:	89 c2                	mov    edx,eax
c001220f:	83 c4 04             	add    esp,0x4
c0012212:	c1 fa 1f             	sar    edx,0x1f
c0012215:	5b                   	pop    ebx
c0012216:	5e                   	pop    esi
c0012217:	c3                   	ret    
c0012218:	31 c0                	xor    eax,eax
c001221a:	eb cb                	jmp    c00121e7 <SysSpawn(regs*)+0x3e>

c001221c <SysGetEnv(regs*)>:
c001221c:	57                   	push   edi
c001221d:	56                   	push   esi
c001221e:	53                   	push   ebx
c001221f:	83 ec 1c             	sub    esp,0x1c
c0012222:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012226:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001222b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001222e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012231:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012234:	51                   	push   ecx
c0012235:	e8 6f ef ff ff       	call   c00111a9 <KeGetProcessTotalEnvCount(Process*)>
c001223a:	83 c4 10             	add    esp,0x10
c001223d:	39 c7                	cmp    edi,eax
c001223f:	7c 14                	jl     c0012255 <SysGetEnv(regs*)+0x39>
c0012241:	85 f6                	test   esi,esi
c0012243:	75 0b                	jne    c0012250 <SysGetEnv(regs*)+0x34>
c0012245:	83 c4 10             	add    esp,0x10
c0012248:	31 c0                	xor    eax,eax
c001224a:	5b                   	pop    ebx
c001224b:	31 d2                	xor    edx,edx
c001224d:	5e                   	pop    esi
c001224e:	5f                   	pop    edi
c001224f:	c3                   	ret    
c0012250:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012253:	eb f0                	jmp    c0012245 <SysGetEnv(regs*)+0x29>
c0012255:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012259:	83 ec 04             	sub    esp,0x4
c001225c:	57                   	push   edi
c001225d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012263:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012266:	57                   	push   edi
c0012267:	50                   	push   eax
c0012268:	e8 5c ef ff ff       	call   c00111c9 <KeGetProcessEnvPair(Process*, int)>
c001226d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012270:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012274:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012278:	83 c4 0c             	add    esp,0xc
c001227b:	85 d2                	test   edx,edx
c001227d:	75 23                	jne    c00122a2 <SysGetEnv(regs*)+0x86>
c001227f:	83 ec 0c             	sub    esp,0xc
c0012282:	50                   	push   eax
c0012283:	e8 e8 e2 fe ff       	call   c0000570 <strlen>
c0012288:	89 3c 24             	mov    DWORD PTR [esp],edi
c001228b:	89 c3                	mov    ebx,eax
c001228d:	e8 de e2 fe ff       	call   c0000570 <strlen>
c0012292:	83 c4 10             	add    esp,0x10
c0012295:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012299:	83 c4 10             	add    esp,0x10
c001229c:	31 d2                	xor    edx,edx
c001229e:	5b                   	pop    ebx
c001229f:	5e                   	pop    esi
c00122a0:	5f                   	pop    edi
c00122a1:	c3                   	ret    
c00122a2:	83 ec 08             	sub    esp,0x8
c00122a5:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00122a8:	50                   	push   eax
c00122a9:	56                   	push   esi
c00122aa:	e8 91 e3 fe ff       	call   c0000640 <strcpy>
c00122af:	58                   	pop    eax
c00122b0:	5a                   	pop    edx
c00122b1:	68 00 1f 02 c0       	push   0xc0021f00
c00122b6:	56                   	push   esi
c00122b7:	e8 84 e5 fe ff       	call   c0000840 <strcat>
c00122bc:	59                   	pop    ecx
c00122bd:	5b                   	pop    ebx
c00122be:	57                   	push   edi
c00122bf:	56                   	push   esi
c00122c0:	e8 7b e5 fe ff       	call   c0000840 <strcat>
c00122c5:	83 c4 10             	add    esp,0x10
c00122c8:	e9 78 ff ff ff       	jmp    c0012245 <SysGetEnv(regs*)+0x29>

c00122cd <SysSetFatAttrib(regs*)>:
c00122cd:	57                   	push   edi
c00122ce:	56                   	push   esi
c00122cf:	53                   	push   ebx
c00122d0:	83 ec 1c             	sub    esp,0x1c
c00122d3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00122d7:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00122da:	68 14 01 00 00       	push   0x114
c00122df:	e8 d2 57 ff ff       	call   c0007ab6 <malloc>
c00122e4:	83 c4 0c             	add    esp,0xc
c00122e7:	89 c3                	mov    ebx,eax
c00122e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00122ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00122f1:	50                   	push   eax
c00122f2:	57                   	push   edi
c00122f3:	53                   	push   ebx
c00122f4:	e8 bf 94 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00122f9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00122fc:	83 c4 0c             	add    esp,0xc
c00122ff:	0f b6 d4             	movzx  edx,ah
c0012302:	0f b6 c0             	movzx  eax,al
c0012305:	52                   	push   edx
c0012306:	50                   	push   eax
c0012307:	53                   	push   ebx
c0012308:	e8 cf 97 ff ff       	call   c000badc <File::chfatattr(unsigned char, unsigned char)>
c001230d:	83 c4 10             	add    esp,0x10
c0012310:	85 db                	test   ebx,ebx
c0012312:	74 14                	je     c0012328 <SysSetFatAttrib(regs*)+0x5b>
c0012314:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012318:	8b 13                	mov    edx,DWORD PTR [ebx]
c001231a:	83 ec 0c             	sub    esp,0xc
c001231d:	53                   	push   ebx
c001231e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012321:	83 c4 10             	add    esp,0x10
c0012324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012328:	85 c0                	test   eax,eax
c001232a:	0f 95 c0             	setne  al
c001232d:	31 d2                	xor    edx,edx
c001232f:	0f b6 c0             	movzx  eax,al
c0012332:	f7 d8                	neg    eax
c0012334:	83 d2 00             	adc    edx,0x0
c0012337:	83 c4 10             	add    esp,0x10
c001233a:	f7 da                	neg    edx
c001233c:	5b                   	pop    ebx
c001233d:	5e                   	pop    esi
c001233e:	5f                   	pop    edi
c001233f:	c3                   	ret    

c0012340 <SysPipe(regs*)>:
c0012340:	57                   	push   edi
c0012341:	56                   	push   esi
c0012342:	53                   	push   ebx
c0012343:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001234d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012350:	6a 20                	push   0x20
c0012352:	e8 5f 57 ff ff       	call   c0007ab6 <malloc>
c0012357:	89 c3                	mov    ebx,eax
c0012359:	58                   	pop    eax
c001235a:	5a                   	pop    edx
c001235b:	68 00 50 00 00       	push   0x5000
c0012360:	53                   	push   ebx
c0012361:	e8 c2 60 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012366:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012369:	e8 48 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001236e:	89 07                	mov    DWORD PTR [edi],eax
c0012370:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012373:	e8 3e 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012378:	83 c4 10             	add    esp,0x10
c001237b:	89 06                	mov    DWORD PTR [esi],eax
c001237d:	31 d2                	xor    edx,edx
c001237f:	5b                   	pop    ebx
c0012380:	31 c0                	xor    eax,eax
c0012382:	5e                   	pop    esi
c0012383:	5f                   	pop    edi
c0012384:	c3                   	ret    

c0012385 <SysGetUnixTime(regs*)>:
c0012385:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001238a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012390:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012394:	e9 7d 9e ff ff       	jmp    c000c216 <Clock::timeInSecondsLocal()>

c0012399 <string_ends_with(char const*, char const*)>:
c0012399:	57                   	push   edi
c001239a:	56                   	push   esi
c001239b:	53                   	push   ebx
c001239c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00123a0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00123a4:	83 ec 0c             	sub    esp,0xc
c00123a7:	53                   	push   ebx
c00123a8:	e8 c3 e1 fe ff       	call   c0000570 <strlen>
c00123ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123b0:	89 c6                	mov    esi,eax
c00123b2:	e8 b9 e1 fe ff       	call   c0000570 <strlen>
c00123b7:	83 c4 10             	add    esp,0x10
c00123ba:	39 c6                	cmp    esi,eax
c00123bc:	7d 06                	jge    c00123c4 <string_ends_with(char const*, char const*)+0x2b>
c00123be:	5b                   	pop    ebx
c00123bf:	31 c0                	xor    eax,eax
c00123c1:	5e                   	pop    esi
c00123c2:	5f                   	pop    edi
c00123c3:	c3                   	ret    
c00123c4:	83 ec 08             	sub    esp,0x8
c00123c7:	29 c6                	sub    esi,eax
c00123c9:	57                   	push   edi
c00123ca:	01 f3                	add    ebx,esi
c00123cc:	53                   	push   ebx
c00123cd:	e8 7e e3 fe ff       	call   c0000750 <strcmp>
c00123d2:	83 c4 10             	add    esp,0x10
c00123d5:	85 c0                	test   eax,eax
c00123d7:	5b                   	pop    ebx
c00123d8:	0f 94 c0             	sete   al
c00123db:	5e                   	pop    esi
c00123dc:	0f b6 c0             	movzx  eax,al
c00123df:	5f                   	pop    edi
c00123e0:	c3                   	ret    

c00123e1 <SysOpen(regs*)>:
c00123e1:	56                   	push   esi
c00123e2:	53                   	push   ebx
c00123e3:	81 ec 04 01 00 00    	sub    esp,0x104
c00123e9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00123f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123f3:	85 c0                	test   eax,eax
c00123f5:	0f 84 bd 01 00 00    	je     c00125b8 <SysOpen(regs*)+0x1d7>
c00123fb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123fe:	85 c0                	test   eax,eax
c0012400:	0f 84 b2 01 00 00    	je     c00125b8 <SysOpen(regs*)+0x1d7>
c0012406:	83 ec 04             	sub    esp,0x4
c0012409:	68 02 1f 02 c0       	push   0xc0021f02
c001240e:	50                   	push   eax
c001240f:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012413:	56                   	push   esi
c0012414:	e8 d1 91 ff ff       	call   c000b5ea <Fs::standardiseFiles(char*, char const*, char const*)>
c0012419:	89 34 24             	mov    DWORD PTR [esp],esi
c001241c:	e8 4f e1 fe ff       	call   c0000570 <strlen>
c0012421:	83 c4 10             	add    esp,0x10
c0012424:	83 e8 01             	sub    eax,0x1
c0012427:	74 21                	je     c001244a <SysOpen(regs*)+0x69>
c0012429:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c001242d:	eb 12                	jmp    c0012441 <SysOpen(regs*)+0x60>
c001242f:	83 fa 3a             	cmp    edx,0x3a
c0012432:	74 12                	je     c0012446 <SysOpen(regs*)+0x65>
c0012434:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012438:	83 e8 01             	sub    eax,0x1
c001243b:	74 0d                	je     c001244a <SysOpen(regs*)+0x69>
c001243d:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0012441:	83 fa 2e             	cmp    edx,0x2e
c0012444:	75 e9                	jne    c001242f <SysOpen(regs*)+0x4e>
c0012446:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001244a:	83 ec 08             	sub    esp,0x8
c001244d:	68 06 1f 02 c0       	push   0xc0021f06
c0012452:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012455:	50                   	push   eax
c0012456:	e8 3e ff ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c001245b:	83 c4 10             	add    esp,0x10
c001245e:	85 c0                	test   eax,eax
c0012460:	74 1d                	je     c001247f <SysOpen(regs*)+0x9e>
c0012462:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012465:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001246b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012472:	81 c4 04 01 00 00    	add    esp,0x104
c0012478:	31 c0                	xor    eax,eax
c001247a:	31 d2                	xor    edx,edx
c001247c:	5b                   	pop    ebx
c001247d:	5e                   	pop    esi
c001247e:	c3                   	ret    
c001247f:	83 ec 08             	sub    esp,0x8
c0012482:	68 0b 1f 02 c0       	push   0xc0021f0b
c0012487:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001248a:	50                   	push   eax
c001248b:	e8 09 ff ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	85 c0                	test   eax,eax
c0012495:	75 cb                	jne    c0012462 <SysOpen(regs*)+0x81>
c0012497:	83 ec 08             	sub    esp,0x8
c001249a:	68 07 1f 02 c0       	push   0xc0021f07
c001249f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124a2:	50                   	push   eax
c00124a3:	e8 a8 e2 fe ff       	call   c0000750 <strcmp>
c00124a8:	83 c4 10             	add    esp,0x10
c00124ab:	85 c0                	test   eax,eax
c00124ad:	74 b3                	je     c0012462 <SysOpen(regs*)+0x81>
c00124af:	83 ec 08             	sub    esp,0x8
c00124b2:	68 06 1f 02 c0       	push   0xc0021f06
c00124b7:	56                   	push   esi
c00124b8:	e8 dc fe ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c00124bd:	83 c4 10             	add    esp,0x10
c00124c0:	85 c0                	test   eax,eax
c00124c2:	75 9e                	jne    c0012462 <SysOpen(regs*)+0x81>
c00124c4:	83 ec 08             	sub    esp,0x8
c00124c7:	68 10 1f 02 c0       	push   0xc0021f10
c00124cc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124cf:	50                   	push   eax
c00124d0:	e8 c4 fe ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c00124d5:	83 c4 10             	add    esp,0x10
c00124d8:	85 c0                	test   eax,eax
c00124da:	0f 85 eb 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1ea>
c00124e0:	83 ec 08             	sub    esp,0x8
c00124e3:	68 15 1f 02 c0       	push   0xc0021f15
c00124e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00124eb:	50                   	push   eax
c00124ec:	e8 a8 fe ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c00124f1:	83 c4 10             	add    esp,0x10
c00124f4:	85 c0                	test   eax,eax
c00124f6:	0f 85 cf 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1ea>
c00124fc:	83 ec 08             	sub    esp,0x8
c00124ff:	68 11 1f 02 c0       	push   0xc0021f11
c0012504:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012507:	51                   	push   ecx
c0012508:	e8 43 e2 fe ff       	call   c0000750 <strcmp>
c001250d:	83 c4 10             	add    esp,0x10
c0012510:	85 c0                	test   eax,eax
c0012512:	0f 84 b3 00 00 00    	je     c00125cb <SysOpen(regs*)+0x1ea>
c0012518:	83 ec 08             	sub    esp,0x8
c001251b:	68 10 1f 02 c0       	push   0xc0021f10
c0012520:	56                   	push   esi
c0012521:	e8 73 fe ff ff       	call   c0012399 <string_ends_with(char const*, char const*)>
c0012526:	83 c4 10             	add    esp,0x10
c0012529:	85 c0                	test   eax,eax
c001252b:	0f 85 9a 00 00 00    	jne    c00125cb <SysOpen(regs*)+0x1ea>
c0012531:	83 ec 0c             	sub    esp,0xc
c0012534:	68 14 01 00 00       	push   0x114
c0012539:	e8 78 55 ff ff       	call   c0007ab6 <malloc>
c001253e:	83 c4 0c             	add    esp,0xc
c0012541:	89 c6                	mov    esi,eax
c0012543:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012548:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001254b:	50                   	push   eax
c001254c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001254f:	52                   	push   edx
c0012550:	56                   	push   esi
c0012551:	e8 62 92 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0012556:	83 c4 10             	add    esp,0x10
c0012559:	85 f6                	test   esi,esi
c001255b:	74 5b                	je     c00125b8 <SysOpen(regs*)+0x1d7>
c001255d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012560:	0f b6 c2             	movzx  eax,dl
c0012563:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012566:	89 d0                	mov    eax,edx
c0012568:	83 e0 01             	and    eax,0x1
c001256b:	f6 c2 02             	test   dl,0x2
c001256e:	74 03                	je     c0012573 <SysOpen(regs*)+0x192>
c0012570:	83 c8 02             	or     eax,0x2
c0012573:	f6 c2 04             	test   dl,0x4
c0012576:	74 03                	je     c001257b <SysOpen(regs*)+0x19a>
c0012578:	83 c8 04             	or     eax,0x4
c001257b:	f6 c2 08             	test   dl,0x8
c001257e:	74 03                	je     c0012583 <SysOpen(regs*)+0x1a2>
c0012580:	83 c8 0a             	or     eax,0xa
c0012583:	80 e2 10             	and    dl,0x10
c0012586:	74 03                	je     c001258b <SysOpen(regs*)+0x1aa>
c0012588:	83 c8 12             	or     eax,0x12
c001258b:	83 ec 08             	sub    esp,0x8
c001258e:	50                   	push   eax
c001258f:	56                   	push   esi
c0012590:	e8 df 92 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0012595:	83 c4 10             	add    esp,0x10
c0012598:	85 c0                	test   eax,eax
c001259a:	75 1c                	jne    c00125b8 <SysOpen(regs*)+0x1d7>
c001259c:	83 ec 0c             	sub    esp,0xc
c001259f:	56                   	push   esi
c00125a0:	e8 11 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00125a5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00125a8:	83 c4 10             	add    esp,0x10
c00125ab:	89 02                	mov    DWORD PTR [edx],eax
c00125ad:	c1 f8 1f             	sar    eax,0x1f
c00125b0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00125b3:	e9 ba fe ff ff       	jmp    c0012472 <SysOpen(regs*)+0x91>
c00125b8:	81 c4 04 01 00 00    	add    esp,0x104
c00125be:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00125c3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00125c8:	5b                   	pop    ebx
c00125c9:	5e                   	pop    esi
c00125ca:	c3                   	ret    
c00125cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00125ce:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00125d4:	e9 92 fe ff ff       	jmp    c001246b <SysOpen(regs*)+0x8a>

c00125d9 <KeSystemCall(regs*, void*)>:
c00125d9:	53                   	push   ebx
c00125da:	83 ec 08             	sub    esp,0x8
c00125dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00125e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00125e4:	83 f8 3b             	cmp    eax,0x3b
c00125e7:	77 16                	ja     c00125ff <KeSystemCall(regs*, void*)+0x26>
c00125e9:	8b 14 85 20 33 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcce0]
c00125f0:	85 d2                	test   edx,edx
c00125f2:	74 0b                	je     c00125ff <KeSystemCall(regs*, void*)+0x26>
c00125f4:	83 ec 0c             	sub    esp,0xc
c00125f7:	53                   	push   ebx
c00125f8:	ff d2                	call   edx
c00125fa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00125fd:	eb 0d                	jmp    c001260c <KeSystemCall(regs*, void*)+0x33>
c00125ff:	52                   	push   edx
c0012600:	52                   	push   edx
c0012601:	50                   	push   eax
c0012602:	68 1a 1f 02 c0       	push   0xc0021f1a
c0012607:	e8 39 83 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012614:	31 d2                	xor    edx,edx
c0012616:	83 c4 08             	add    esp,0x8
c0012619:	5b                   	pop    ebx
c001261a:	c3                   	ret    
c001261b:	90                   	nop

c001261c <KeSwitchEndian16(unsigned short)>:
c001261c:	83 ec 04             	sub    esp,0x4
c001261f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012623:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012627:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001262b:	c1 f8 08             	sar    eax,0x8
c001262e:	89 c2                	mov    edx,eax
c0012630:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012634:	c1 e0 08             	shl    eax,0x8
c0012637:	09 d0                	or     eax,edx
c0012639:	83 c4 04             	add    esp,0x4
c001263c:	c3                   	ret    
c001263d:	8d 76 00             	lea    esi,[esi+0x0]

c0012640 <KeSwitchEndian32(unsigned int)>:
c0012640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012644:	c1 e8 18             	shr    eax,0x18
c0012647:	89 c2                	mov    edx,eax
c0012649:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001264d:	c1 e0 08             	shl    eax,0x8
c0012650:	25 00 00 ff 00       	and    eax,0xff0000
c0012655:	09 c2                	or     edx,eax
c0012657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265b:	c1 e8 08             	shr    eax,0x8
c001265e:	25 00 ff 00 00       	and    eax,0xff00
c0012663:	09 c2                	or     edx,eax
c0012665:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012669:	c1 e0 18             	shl    eax,0x18
c001266c:	09 d0                	or     eax,edx
c001266e:	c3                   	ret    
c001266f:	90                   	nop

c0012670 <EthernetCRC32(unsigned char*, int)>:
c0012670:	83 ec 10             	sub    esp,0x10
c0012673:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012678:	75 0a                	jne    c0012684 <EthernetCRC32(unsigned char*, int)+0x14>
c001267a:	b8 00 00 00 00       	mov    eax,0x0
c001267f:	e9 8c 00 00 00       	jmp    c0012710 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012684:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012689:	7f 09                	jg     c0012694 <EthernetCRC32(unsigned char*, int)+0x24>
c001268b:	b8 00 00 00 00       	mov    eax,0x0
c0012690:	eb 7e                	jmp    c0012710 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012692:	66 90                	xchg   ax,ax
c0012694:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001269c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00126a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00126a8:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00126ac:	7d 5a                	jge    c0012708 <EthernetCRC32(unsigned char*, int)+0x98>
c00126ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00126b6:	01 d0                	add    eax,edx
c00126b8:	8a 00                	mov    al,BYTE PTR [eax]
c00126ba:	0f b6 c0             	movzx  eax,al
c00126bd:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00126c1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00126c9:	8d 76 00             	lea    esi,[esi+0x0]
c00126cc:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00126d1:	7f 2d                	jg     c0012700 <EthernetCRC32(unsigned char*, int)+0x90>
c00126d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d7:	83 e0 01             	and    eax,0x1
c00126da:	74 10                	je     c00126ec <EthernetCRC32(unsigned char*, int)+0x7c>
c00126dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e0:	d1 e8                	shr    eax,1
c00126e2:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00126e7:	eb 0b                	jmp    c00126f4 <EthernetCRC32(unsigned char*, int)+0x84>
c00126e9:	8d 76 00             	lea    esi,[esi+0x0]
c00126ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126f0:	d1 e8                	shr    eax,1
c00126f2:	66 90                	xchg   ax,ax
c00126f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126f8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00126fd:	eb cd                	jmp    c00126cc <EthernetCRC32(unsigned char*, int)+0x5c>
c00126ff:	90                   	nop
c0012700:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012705:	eb 9d                	jmp    c00126a4 <EthernetCRC32(unsigned char*, int)+0x34>
c0012707:	90                   	nop
c0012708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001270c:	f7 d0                	not    eax
c001270e:	66 90                	xchg   ax,ax
c0012710:	83 c4 10             	add    esp,0x10
c0012713:	c3                   	ret    

c0012714 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012714:	83 ec 2c             	sub    esp,0x2c
c0012717:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001271b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012720:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012724:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001272c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001272f:	0f b7 c0             	movzx  eax,ax
c0012732:	3d 06 08 00 00       	cmp    eax,0x806
c0012737:	75 13                	jne    c001274c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012739:	83 ec 0c             	sub    esp,0xc
c001273c:	68 2e 1f 02 c0       	push   0xc0021f2e
c0012741:	e8 ff 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012746:	83 c4 10             	add    esp,0x10
c0012749:	eb 25                	jmp    c0012770 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001274b:	90                   	nop
c001274c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012750:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012753:	0f b7 c0             	movzx  eax,ax
c0012756:	3d 00 08 00 00       	cmp    eax,0x800
c001275b:	75 13                	jne    c0012770 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c001275d:	83 ec 0c             	sub    esp,0xc
c0012760:	68 44 1f 02 c0       	push   0xc0021f44
c0012765:	e8 db 81 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001276a:	83 c4 10             	add    esp,0x10
c001276d:	8d 76 00             	lea    esi,[esi+0x0]
c0012770:	90                   	nop
c0012771:	83 c4 2c             	add    esp,0x2c
c0012774:	c3                   	ret    

c0012775 <CmOpen(char const*)>:
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	83 ec 1c             	sub    esp,0x1c
c001277b:	6a 30                	push   0x30
c001277d:	e8 34 53 ff ff       	call   c0007ab6 <malloc>
c0012782:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012789:	89 c3                	mov    ebx,eax
c001278b:	e8 26 53 ff ff       	call   c0007ab6 <malloc>
c0012790:	83 c4 0c             	add    esp,0xc
c0012793:	89 c6                	mov    esi,eax
c0012795:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001279b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001279f:	50                   	push   eax
c00127a0:	e8 13 90 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00127a5:	83 c4 0c             	add    esp,0xc
c00127a8:	89 33                	mov    DWORD PTR [ebx],esi
c00127aa:	8d 44 24 07          	lea    eax,[esp+0x7]
c00127ae:	50                   	push   eax
c00127af:	8d 44 24 10          	lea    eax,[esp+0x10]
c00127b3:	50                   	push   eax
c00127b4:	56                   	push   esi
c00127b5:	e8 bc 93 ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c00127ba:	5a                   	pop    edx
c00127bb:	59                   	pop    ecx
c00127bc:	6a 01                	push   0x1
c00127be:	ff 33                	push   DWORD PTR [ebx]
c00127c0:	e8 af 90 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c00127c5:	5e                   	pop    esi
c00127c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00127ca:	e8 e7 52 ff ff       	call   c0007ab6 <malloc>
c00127cf:	5a                   	pop    edx
c00127d0:	89 c7                	mov    edi,eax
c00127d2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00127d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127d8:	8b 10                	mov    edx,DWORD PTR [eax]
c00127da:	56                   	push   esi
c00127db:	57                   	push   edi
c00127dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00127e4:	50                   	push   eax
c00127e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127e8:	83 c4 14             	add    esp,0x14
c00127eb:	ff 33                	push   DWORD PTR [ebx]
c00127ed:	e8 e0 90 ff ff       	call   c000b8d2 <File::close()>
c00127f2:	59                   	pop    ecx
c00127f3:	58                   	pop    eax
c00127f4:	6a 13                	push   0x13
c00127f6:	ff 33                	push   DWORD PTR [ebx]
c00127f8:	e8 77 90 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c00127fd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127ff:	8b 10                	mov    edx,DWORD PTR [eax]
c0012801:	89 34 24             	mov    DWORD PTR [esp],esi
c0012804:	57                   	push   edi
c0012805:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012809:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001280d:	50                   	push   eax
c001280e:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012811:	83 c4 14             	add    esp,0x14
c0012814:	57                   	push   edi
c0012815:	e8 ac 52 ff ff       	call   c0007ac6 <free>
c001281a:	83 c4 10             	add    esp,0x10
c001281d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012820:	75 10                	jne    c0012832 <CmOpen(char const*)+0xbd>
c0012822:	83 ec 0c             	sub    esp,0xc
c0012825:	68 59 1f 02 c0       	push   0xc0021f59
c001282a:	e8 c2 ea ff ff       	call   c00112f1 <KePanic(char const*)>
c001282f:	83 c4 10             	add    esp,0x10
c0012832:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012835:	50                   	push   eax
c0012836:	6a 00                	push   0x0
c0012838:	6a 00                	push   0x0
c001283a:	ff 33                	push   DWORD PTR [ebx]
c001283c:	e8 f1 90 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0012841:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012843:	8b 10                	mov    edx,DWORD PTR [eax]
c0012845:	89 34 24             	mov    DWORD PTR [esp],esi
c0012848:	57                   	push   edi
c0012849:	6a 00                	push   0x0
c001284b:	6a 2b                	push   0x2b
c001284d:	50                   	push   eax
c001284e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012851:	83 c4 1c             	add    esp,0x1c
c0012854:	6a 00                	push   0x0
c0012856:	6a 00                	push   0x0
c0012858:	ff 33                	push   DWORD PTR [ebx]
c001285a:	e8 d3 90 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c001285f:	83 c4 0c             	add    esp,0xc
c0012862:	6a 08                	push   0x8
c0012864:	68 6a 1f 02 c0       	push   0xc0021f6a
c0012869:	57                   	push   edi
c001286a:	e8 11 db fe ff       	call   c0000380 <memcmp>
c001286f:	83 c4 10             	add    esp,0x10
c0012872:	85 c0                	test   eax,eax
c0012874:	74 10                	je     c0012886 <CmOpen(char const*)+0x111>
c0012876:	83 ec 0c             	sub    esp,0xc
c0012879:	68 73 1f 02 c0       	push   0xc0021f73
c001287e:	e8 6e ea ff ff       	call   c00112f1 <KePanic(char const*)>
c0012883:	83 c4 10             	add    esp,0x10
c0012886:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c001288a:	89 d8                	mov    eax,ebx
c001288c:	83 c4 10             	add    esp,0x10
c001288f:	5b                   	pop    ebx
c0012890:	5e                   	pop    esi
c0012891:	5f                   	pop    edi
c0012892:	c3                   	ret    

c0012893 <CmClose(Reghive_Tag*)>:
c0012893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012897:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c001289b:	74 0b                	je     c00128a8 <CmClose(Reghive_Tag*)+0x15>
c001289d:	8b 00                	mov    eax,DWORD PTR [eax]
c001289f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00128a3:	e9 2a 90 ff ff       	jmp    c000b8d2 <File::close()>
c00128a8:	c3                   	ret    

c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00128a9:	53                   	push   ebx
c00128aa:	83 ec 18             	sub    esp,0x18
c00128ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128b1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128b5:	74 29                	je     c00128e0 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128b7:	50                   	push   eax
c00128b8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128bd:	99                   	cdq    
c00128be:	52                   	push   edx
c00128bf:	50                   	push   eax
c00128c0:	ff 33                	push   DWORD PTR [ebx]
c00128c2:	e8 6b 90 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c00128c7:	5a                   	pop    edx
c00128c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128ca:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00128d0:	51                   	push   ecx
c00128d1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128d5:	6a 00                	push   0x0
c00128d7:	6a 2b                	push   0x2b
c00128d9:	50                   	push   eax
c00128da:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00128dd:	83 c4 20             	add    esp,0x20
c00128e0:	83 c4 18             	add    esp,0x18
c00128e3:	5b                   	pop    ebx
c00128e4:	c3                   	ret    

c00128e5 <CmGetString(Reghive_Tag*, int, char*)>:
c00128e5:	55                   	push   ebp
c00128e6:	57                   	push   edi
c00128e7:	56                   	push   esi
c00128e8:	53                   	push   ebx
c00128e9:	31 db                	xor    ebx,ebx
c00128eb:	83 ec 70             	sub    esp,0x70
c00128ee:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00128f5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00128f9:	50                   	push   eax
c00128fa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012901:	55                   	push   ebp
c0012902:	e8 a2 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012907:	83 c4 10             	add    esp,0x10
c001290a:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001290f:	c1 e0 08             	shl    eax,0x8
c0012912:	89 c2                	mov    edx,eax
c0012914:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012919:	09 d0                	or     eax,edx
c001291b:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012920:	c1 e0 08             	shl    eax,0x8
c0012923:	09 d0                	or     eax,edx
c0012925:	74 25                	je     c001294c <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012927:	6b fb 0d             	imul   edi,ebx,0xd
c001292a:	52                   	push   edx
c001292b:	8d 54 24 39          	lea    edx,[esp+0x39]
c001292f:	52                   	push   edx
c0012930:	50                   	push   eax
c0012931:	55                   	push   ebp
c0012932:	e8 72 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012937:	8d 74 24 49          	lea    esi,[esp+0x49]
c001293b:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012942:	b9 27 00 00 00       	mov    ecx,0x27
c0012947:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012949:	83 c4 10             	add    esp,0x10
c001294c:	83 c3 03             	add    ebx,0x3
c001294f:	83 fb 15             	cmp    ebx,0x15
c0012952:	75 b6                	jne    c001290a <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012954:	83 c4 6c             	add    esp,0x6c
c0012957:	5b                   	pop    ebx
c0012958:	5e                   	pop    esi
c0012959:	5f                   	pop    edi
c001295a:	5d                   	pop    ebp
c001295b:	c3                   	ret    

c001295c <CmEnterDirectory(Reghive_Tag*, int)>:
c001295c:	83 ec 40             	sub    esp,0x40
c001295f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012963:	50                   	push   eax
c0012964:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001296c:	e8 38 ff ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012971:	83 c4 10             	add    esp,0x10
c0012974:	83 c8 ff             	or     eax,0xffffffff
c0012977:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c001297c:	75 19                	jne    c0012997 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001297e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012983:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012988:	c1 e0 08             	shl    eax,0x8
c001298b:	09 c2                	or     edx,eax
c001298d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012992:	c1 e0 10             	shl    eax,0x10
c0012995:	09 d0                	or     eax,edx
c0012997:	83 c4 3c             	add    esp,0x3c
c001299a:	c3                   	ret    

c001299b <CmGetNext(Reghive_Tag*, int)>:
c001299b:	83 ec 40             	sub    esp,0x40
c001299e:	8d 44 24 09          	lea    eax,[esp+0x9]
c00129a2:	50                   	push   eax
c00129a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129ab:	e8 f9 fe ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00129b0:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00129b5:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00129ba:	c1 e0 08             	shl    eax,0x8
c00129bd:	09 c2                	or     edx,eax
c00129bf:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00129c4:	83 c4 4c             	add    esp,0x4c
c00129c7:	c1 e0 10             	shl    eax,0x10
c00129ca:	09 d0                	or     eax,edx
c00129cc:	c3                   	ret    

c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00129cd:	53                   	push   ebx
c00129ce:	83 ec 18             	sub    esp,0x18
c00129d1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00129d5:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129d9:	74 29                	je     c0012a04 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00129db:	50                   	push   eax
c00129dc:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00129e1:	99                   	cdq    
c00129e2:	52                   	push   edx
c00129e3:	50                   	push   eax
c00129e4:	ff 33                	push   DWORD PTR [ebx]
c00129e6:	e8 47 8f ff ff       	call   c000b932 <File::seek(unsigned long long)>
c00129eb:	5a                   	pop    edx
c00129ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00129ee:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00129f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00129f4:	51                   	push   ecx
c00129f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00129f9:	6a 00                	push   0x0
c00129fb:	6a 2b                	push   0x2b
c00129fd:	50                   	push   eax
c00129fe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a01:	83 c4 20             	add    esp,0x20
c0012a04:	83 c4 18             	add    esp,0x18
c0012a07:	5b                   	pop    ebx
c0012a08:	c3                   	ret    

c0012a09 <CmFreeExtent(Reghive_Tag*, int)>:
c0012a09:	53                   	push   ebx
c0012a0a:	83 ec 3c             	sub    esp,0x3c
c0012a0d:	6a 2b                	push   0x2b
c0012a0f:	6a 00                	push   0x0
c0012a11:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012a15:	53                   	push   ebx
c0012a16:	e8 d5 da fe ff       	call   c00004f0 <memset>
c0012a1b:	83 c4 0c             	add    esp,0xc
c0012a1e:	53                   	push   ebx
c0012a1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012a27:	e8 a1 ff ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a2c:	83 c4 48             	add    esp,0x48
c0012a2f:	5b                   	pop    ebx
c0012a30:	c3                   	ret    

c0012a31 <CmUpdateHeader(Reghive_Tag*)>:
c0012a31:	83 ec 0c             	sub    esp,0xc
c0012a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a38:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012a3c:	74 10                	je     c0012a4e <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012a3e:	52                   	push   edx
c0012a3f:	8d 50 05             	lea    edx,[eax+0x5]
c0012a42:	52                   	push   edx
c0012a43:	6a 00                	push   0x0
c0012a45:	50                   	push   eax
c0012a46:	e8 82 ff ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012a4b:	83 c4 10             	add    esp,0x10
c0012a4e:	83 c4 0c             	add    esp,0xc
c0012a51:	c3                   	ret    

c0012a52 <CmExpand(Reghive_Tag*, int)>:
c0012a52:	57                   	push   edi
c0012a53:	56                   	push   esi
c0012a54:	83 ce ff             	or     esi,0xffffffff
c0012a57:	53                   	push   ebx
c0012a58:	83 ec 30             	sub    esp,0x30
c0012a5b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012a5f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012a63:	74 5f                	je     c0012ac4 <CmExpand(Reghive_Tag*, int)+0x72>
c0012a65:	31 d2                	xor    edx,edx
c0012a67:	31 f6                	xor    esi,esi
c0012a69:	50                   	push   eax
c0012a6a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012a6e:	52                   	push   edx
c0012a6f:	50                   	push   eax
c0012a70:	ff 33                	push   DWORD PTR [ebx]
c0012a72:	e8 bb 8e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0012a77:	83 c4 0c             	add    esp,0xc
c0012a7a:	6a 2b                	push   0x2b
c0012a7c:	6a 00                	push   0x0
c0012a7e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012a82:	57                   	push   edi
c0012a83:	e8 68 da fe ff       	call   c00004f0 <memset>
c0012a88:	83 c4 10             	add    esp,0x10
c0012a8b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012a8f:	7d 1b                	jge    c0012aac <CmExpand(Reghive_Tag*, int)+0x5a>
c0012a91:	83 ec 0c             	sub    esp,0xc
c0012a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a96:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a9c:	46                   	inc    esi
c0012a9d:	51                   	push   ecx
c0012a9e:	57                   	push   edi
c0012a9f:	6a 00                	push   0x0
c0012aa1:	6a 2b                	push   0x2b
c0012aa3:	50                   	push   eax
c0012aa4:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012aa7:	83 c4 20             	add    esp,0x20
c0012aaa:	eb df                	jmp    c0012a8b <CmExpand(Reghive_Tag*, int)+0x39>
c0012aac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012ab0:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012ab3:	83 ec 0c             	sub    esp,0xc
c0012ab6:	01 f2                	add    edx,esi
c0012ab8:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012abb:	53                   	push   ebx
c0012abc:	e8 70 ff ff ff       	call   c0012a31 <CmUpdateHeader(Reghive_Tag*)>
c0012ac1:	83 c4 10             	add    esp,0x10
c0012ac4:	83 c4 30             	add    esp,0x30
c0012ac7:	89 f0                	mov    eax,esi
c0012ac9:	5b                   	pop    ebx
c0012aca:	5e                   	pop    esi
c0012acb:	5f                   	pop    edi
c0012acc:	c3                   	ret    

c0012acd <CmFindUnusedExtent(Reghive_Tag*)>:
c0012acd:	55                   	push   ebp
c0012ace:	57                   	push   edi
c0012acf:	56                   	push   esi
c0012ad0:	53                   	push   ebx
c0012ad1:	83 cb ff             	or     ebx,0xffffffff
c0012ad4:	83 ec 1c             	sub    esp,0x1c
c0012ad7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012adb:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012adf:	74 68                	je     c0012b49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012ae1:	be 2b 00 00 00       	mov    esi,0x2b
c0012ae6:	51                   	push   ecx
c0012ae7:	31 ff                	xor    edi,edi
c0012ae9:	6a 00                	push   0x0
c0012aeb:	31 db                	xor    ebx,ebx
c0012aed:	6a 00                	push   0x0
c0012aef:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012af2:	e8 3b 8e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0012af7:	83 c4 10             	add    esp,0x10
c0012afa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012afd:	76 3b                	jbe    c0012b3a <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012aff:	83 ec 0c             	sub    esp,0xc
c0012b02:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b05:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012b09:	8b 10                	mov    edx,DWORD PTR [eax]
c0012b0b:	51                   	push   ecx
c0012b0c:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012b10:	51                   	push   ecx
c0012b11:	6a 00                	push   0x0
c0012b13:	6a 01                	push   0x1
c0012b15:	50                   	push   eax
c0012b16:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012b19:	83 c4 20             	add    esp,0x20
c0012b1c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012b21:	74 26                	je     c0012b49 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012b23:	43                   	inc    ebx
c0012b24:	52                   	push   edx
c0012b25:	57                   	push   edi
c0012b26:	56                   	push   esi
c0012b27:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012b2a:	e8 03 8e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0012b2f:	83 c6 2b             	add    esi,0x2b
c0012b32:	83 d7 00             	adc    edi,0x0
c0012b35:	83 c4 10             	add    esp,0x10
c0012b38:	eb c0                	jmp    c0012afa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012b3a:	50                   	push   eax
c0012b3b:	50                   	push   eax
c0012b3c:	6a 40                	push   0x40
c0012b3e:	55                   	push   ebp
c0012b3f:	e8 0e ff ff ff       	call   c0012a52 <CmExpand(Reghive_Tag*, int)>
c0012b44:	83 c4 10             	add    esp,0x10
c0012b47:	89 c3                	mov    ebx,eax
c0012b49:	83 c4 1c             	add    esp,0x1c
c0012b4c:	89 d8                	mov    eax,ebx
c0012b4e:	5b                   	pop    ebx
c0012b4f:	5e                   	pop    esi
c0012b50:	5f                   	pop    edi
c0012b51:	5d                   	pop    ebp
c0012b52:	c3                   	ret    

c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012b53:	55                   	push   ebp
c0012b54:	57                   	push   edi
c0012b55:	56                   	push   esi
c0012b56:	53                   	push   ebx
c0012b57:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b5d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012b64:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b6b:	e8 5d ff ff ff       	call   c0012acd <CmFindUnusedExtent(Reghive_Tag*)>
c0012b70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b74:	83 c4 0c             	add    esp,0xc
c0012b77:	6a 2b                	push   0x2b
c0012b79:	6a 00                	push   0x0
c0012b7b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012b7f:	55                   	push   ebp
c0012b80:	e8 6b d9 fe ff       	call   c00004f0 <memset>
c0012b85:	83 c4 10             	add    esp,0x10
c0012b88:	85 db                	test   ebx,ebx
c0012b8a:	74 12                	je     c0012b9e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b8c:	51                   	push   ecx
c0012b8d:	55                   	push   ebp
c0012b8e:	53                   	push   ebx
c0012b8f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b96:	e8 0e fd ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012ba2:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012ba9:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012bae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012bb0:	85 db                	test   ebx,ebx
c0012bb2:	74 49                	je     c0012bfd <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012bb4:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012bb9:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012bbe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bc2:	c1 e0 08             	shl    eax,0x8
c0012bc5:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012bcb:	09 c8                	or     eax,ecx
c0012bcd:	74 11                	je     c0012be0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012bcf:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012bd3:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012bd7:	c1 e8 10             	shr    eax,0x10
c0012bda:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012bde:	eb 0f                	jmp    c0012bef <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012be0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012be5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012bea:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012bef:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012bf3:	c1 ea 08             	shr    edx,0x8
c0012bf6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012bfb:	eb 0f                	jmp    c0012c0c <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012bfd:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012c02:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012c07:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012c0c:	52                   	push   edx
c0012c0d:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012c11:	50                   	push   eax
c0012c12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c16:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c1d:	e8 ab fd ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	85 db                	test   ebx,ebx
c0012c27:	74 12                	je     c0012c3b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012c29:	50                   	push   eax
c0012c2a:	55                   	push   ebp
c0012c2b:	53                   	push   ebx
c0012c2c:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c33:	e8 95 fd ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c38:	83 c4 10             	add    esp,0x10
c0012c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012c3f:	83 c4 7c             	add    esp,0x7c
c0012c42:	5b                   	pop    ebx
c0012c43:	5e                   	pop    esi
c0012c44:	5f                   	pop    edi
c0012c45:	5d                   	pop    ebp
c0012c46:	c3                   	ret    

c0012c47 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012c47:	55                   	push   ebp
c0012c48:	57                   	push   edi
c0012c49:	56                   	push   esi
c0012c4a:	53                   	push   ebx
c0012c4b:	bb 27 00 00 00       	mov    ebx,0x27
c0012c50:	81 ec 88 00 00 00    	sub    esp,0x88
c0012c56:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012c5d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012c64:	e8 07 d9 fe ff       	call   c0000570 <strlen>
c0012c69:	8d 48 26             	lea    ecx,[eax+0x26]
c0012c6c:	89 c8                	mov    eax,ecx
c0012c6e:	99                   	cdq    
c0012c6f:	f7 fb                	idiv   ebx
c0012c71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012c7e:	7e 10                	jle    c0012c90 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012c80:	83 ec 0c             	sub    esp,0xc
c0012c83:	68 84 1f 02 c0       	push   0xc0021f84
c0012c88:	e8 64 e6 ff ff       	call   c00112f1 <KePanic(char const*)>
c0012c8d:	83 c4 10             	add    esp,0x10
c0012c90:	31 ff                	xor    edi,edi
c0012c92:	50                   	push   eax
c0012c93:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c97:	53                   	push   ebx
c0012c98:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c9f:	56                   	push   esi
c0012ca0:	e8 04 fc ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012cac:	89 d0                	mov    eax,edx
c0012cae:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012cb2:	c1 e0 08             	shl    eax,0x8
c0012cb5:	09 c2                	or     edx,eax
c0012cb7:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012cbb:	c1 e2 08             	shl    edx,0x8
c0012cbe:	09 c2                	or     edx,eax
c0012cc0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012cc4:	7e 76                	jle    c0012d3c <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012cc6:	85 d2                	test   edx,edx
c0012cc8:	75 25                	jne    c0012cef <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012cca:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012ccf:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012cd3:	50                   	push   eax
c0012cd4:	6a 00                	push   0x0
c0012cd6:	6a 00                	push   0x0
c0012cd8:	56                   	push   esi
c0012cd9:	e8 75 fe ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	89 c2                	mov    edx,eax
c0012ce3:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012ce6:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012ce9:	c1 f8 10             	sar    eax,0x10
c0012cec:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012cef:	55                   	push   ebp
c0012cf0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012cf4:	55                   	push   ebp
c0012cf5:	52                   	push   edx
c0012cf6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012cfa:	56                   	push   esi
c0012cfb:	e8 a9 fb ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d00:	83 c4 0c             	add    esp,0xc
c0012d03:	6a 27                	push   0x27
c0012d05:	6a 00                	push   0x0
c0012d07:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d0b:	51                   	push   ecx
c0012d0c:	e8 df d7 fe ff       	call   c00004f0 <memset>
c0012d11:	83 c4 0c             	add    esp,0xc
c0012d14:	6b c7 27             	imul   eax,edi,0x27
c0012d17:	6a 27                	push   0x27
c0012d19:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012d20:	50                   	push   eax
c0012d21:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012d25:	51                   	push   ecx
c0012d26:	e8 55 d9 fe ff       	call   c0000680 <strncpy>
c0012d2b:	83 c4 0c             	add    esp,0xc
c0012d2e:	55                   	push   ebp
c0012d2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012d33:	52                   	push   edx
c0012d34:	56                   	push   esi
c0012d35:	e8 93 fc ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d3a:	eb 19                	jmp    c0012d55 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012d3c:	85 d2                	test   edx,edx
c0012d3e:	74 18                	je     c0012d58 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012d40:	51                   	push   ecx
c0012d41:	51                   	push   ecx
c0012d42:	52                   	push   edx
c0012d43:	56                   	push   esi
c0012d44:	e8 c0 fc ff ff       	call   c0012a09 <CmFreeExtent(Reghive_Tag*, int)>
c0012d49:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012d4d:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012d51:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012d55:	83 c4 10             	add    esp,0x10
c0012d58:	47                   	inc    edi
c0012d59:	83 c3 03             	add    ebx,0x3
c0012d5c:	83 ff 07             	cmp    edi,0x7
c0012d5f:	0f 85 43 ff ff ff    	jne    c0012ca8 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012d65:	50                   	push   eax
c0012d66:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012d6a:	50                   	push   eax
c0012d6b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012d72:	56                   	push   esi
c0012d73:	e8 55 fc ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d78:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012d7e:	5b                   	pop    ebx
c0012d7f:	5e                   	pop    esi
c0012d80:	5f                   	pop    edi
c0012d81:	5d                   	pop    ebp
c0012d82:	c3                   	ret    

c0012d83 <CmGetMatch(char*, char*, bool, bool*)>:
c0012d83:	56                   	push   esi
c0012d84:	53                   	push   ebx
c0012d85:	50                   	push   eax
c0012d86:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d8a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d8f:	74 25                	je     c0012db6 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d91:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d94:	31 db                	xor    ebx,ebx
c0012d96:	50                   	push   eax
c0012d97:	50                   	push   eax
c0012d98:	8d 04 9d 20 34 02 c0 	lea    eax,[ebx*4-0x3ffdcbe0]
c0012d9f:	50                   	push   eax
c0012da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012da4:	e8 a7 d9 fe ff       	call   c0000750 <strcmp>
c0012da9:	83 c4 10             	add    esp,0x10
c0012dac:	85 c0                	test   eax,eax
c0012dae:	74 2e                	je     c0012dde <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012db0:	43                   	inc    ebx
c0012db1:	83 fb 3f             	cmp    ebx,0x3f
c0012db4:	75 e0                	jne    c0012d96 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012db6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db9:	31 db                	xor    ebx,ebx
c0012dbb:	8d 04 9d 20 34 02 c0 	lea    eax,[ebx*4-0x3ffdcbe0]
c0012dc2:	51                   	push   ecx
c0012dc3:	51                   	push   ecx
c0012dc4:	50                   	push   eax
c0012dc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012dc9:	e8 82 d9 fe ff       	call   c0000750 <strcmp>
c0012dce:	83 c4 10             	add    esp,0x10
c0012dd1:	85 c0                	test   eax,eax
c0012dd3:	74 09                	je     c0012dde <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012dd5:	43                   	inc    ebx
c0012dd6:	83 fb 3f             	cmp    ebx,0x3f
c0012dd9:	75 e0                	jne    c0012dbb <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012ddb:	83 cb ff             	or     ebx,0xffffffff
c0012dde:	89 d8                	mov    eax,ebx
c0012de0:	5a                   	pop    edx
c0012de1:	5b                   	pop    ebx
c0012de2:	5e                   	pop    esi
c0012de3:	c3                   	ret    

c0012de4 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012de4:	55                   	push   ebp
c0012de5:	31 c0                	xor    eax,eax
c0012de7:	57                   	push   edi
c0012de8:	56                   	push   esi
c0012de9:	53                   	push   ebx
c0012dea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012dee:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012df2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012df4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012df8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012dfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012dff:	83 fd 1f             	cmp    ebp,0x1f
c0012e02:	7f 0b                	jg     c0012e0f <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012e04:	0f b6 c2             	movzx  eax,dl
c0012e07:	d3 e0                	shl    eax,cl
c0012e09:	09 07                	or     DWORD PTR [edi],eax
c0012e0b:	b0 01                	mov    al,0x1
c0012e0d:	01 33                	add    DWORD PTR [ebx],esi
c0012e0f:	5b                   	pop    ebx
c0012e10:	5e                   	pop    esi
c0012e11:	5f                   	pop    edi
c0012e12:	5d                   	pop    ebp
c0012e13:	c3                   	ret    

c0012e14 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012e14:	57                   	push   edi
c0012e15:	56                   	push   esi
c0012e16:	53                   	push   ebx
c0012e17:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012e1b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012e1f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012e23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012e27:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012e29:	7c 17                	jl     c0012e42 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012e2b:	8b 17                	mov    edx,DWORD PTR [edi]
c0012e2d:	b8 01 00 00 00       	mov    eax,0x1
c0012e32:	d3 e0                	shl    eax,cl
c0012e34:	48                   	dec    eax
c0012e35:	21 d0                	and    eax,edx
c0012e37:	d3 ea                	shr    edx,cl
c0012e39:	89 17                	mov    DWORD PTR [edi],edx
c0012e3b:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012e3d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012e40:	eb 05                	jmp    c0012e47 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012e42:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012e45:	31 c0                	xor    eax,eax
c0012e47:	5b                   	pop    ebx
c0012e48:	5e                   	pop    esi
c0012e49:	5f                   	pop    edi
c0012e4a:	c3                   	ret    

c0012e4b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012e4b:	83 ec 40             	sub    esp,0x40
c0012e4e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e52:	50                   	push   eax
c0012e53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e5b:	e8 49 fa ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e60:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012e64:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012e68:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012e6c:	89 10                	mov    DWORD PTR [eax],edx
c0012e6e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012e71:	83 c4 4c             	add    esp,0x4c
c0012e74:	c3                   	ret    

c0012e75 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012e75:	55                   	push   ebp
c0012e76:	57                   	push   edi
c0012e77:	56                   	push   esi
c0012e78:	53                   	push   ebx
c0012e79:	83 ec 40             	sub    esp,0x40
c0012e7c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012e80:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012e84:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e88:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e8c:	53                   	push   ebx
c0012e8d:	56                   	push   esi
c0012e8e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e92:	e8 12 fa ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e97:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e9b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e9f:	83 c4 0c             	add    esp,0xc
c0012ea2:	53                   	push   ebx
c0012ea3:	56                   	push   esi
c0012ea4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012ea8:	e8 20 fb ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012ead:	83 c4 4c             	add    esp,0x4c
c0012eb0:	5b                   	pop    ebx
c0012eb1:	5e                   	pop    esi
c0012eb2:	5f                   	pop    edi
c0012eb3:	5d                   	pop    ebp
c0012eb4:	c3                   	ret    

c0012eb5 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012eb5:	55                   	push   ebp
c0012eb6:	57                   	push   edi
c0012eb7:	56                   	push   esi
c0012eb8:	31 f6                	xor    esi,esi
c0012eba:	53                   	push   ebx
c0012ebb:	31 db                	xor    ebx,ebx
c0012ebd:	83 ec 40             	sub    esp,0x40
c0012ec0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012ec8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012ed0:	6a 12                	push   0x12
c0012ed2:	68 ee 00 00 00       	push   0xee
c0012ed7:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012edb:	e8 10 d6 fe ff       	call   c00004f0 <memset>
c0012ee0:	83 c4 10             	add    esp,0x10
c0012ee3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012ee7:	6a 08                	push   0x8
c0012ee9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012eed:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012ef1:	50                   	push   eax
c0012ef2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012ef6:	55                   	push   ebp
c0012ef7:	57                   	push   edi
c0012ef8:	e8 e7 fe ff ff       	call   c0012de4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012efd:	83 c4 10             	add    esp,0x10
c0012f00:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f04:	50                   	push   eax
c0012f05:	6a 06                	push   0x6
c0012f07:	55                   	push   ebp
c0012f08:	57                   	push   edi
c0012f09:	e8 06 ff ff ff       	call   c0012e14 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f16:	74 07                	je     c0012f1f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012f18:	46                   	inc    esi
c0012f19:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012f1d:	eb e1                	jmp    c0012f00 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012f1f:	43                   	inc    ebx
c0012f20:	83 fb 12             	cmp    ebx,0x12
c0012f23:	75 c2                	jne    c0012ee7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012f25:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f29:	31 db                	xor    ebx,ebx
c0012f2b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012f2e:	50                   	push   eax
c0012f2f:	50                   	push   eax
c0012f30:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012f35:	43                   	inc    ebx
c0012f36:	8d 04 85 20 34 02 c0 	lea    eax,[eax*4-0x3ffdcbe0]
c0012f3d:	50                   	push   eax
c0012f3e:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012f42:	e8 f9 d8 fe ff       	call   c0000840 <strcat>
c0012f47:	83 c4 10             	add    esp,0x10
c0012f4a:	83 fb 18             	cmp    ebx,0x18
c0012f4d:	75 df                	jne    c0012f2e <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012f4f:	83 c4 3c             	add    esp,0x3c
c0012f52:	31 c0                	xor    eax,eax
c0012f54:	5b                   	pop    ebx
c0012f55:	5e                   	pop    esi
c0012f56:	5f                   	pop    edi
c0012f57:	5d                   	pop    ebp
c0012f58:	c3                   	ret    

c0012f59 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012f59:	83 ec 40             	sub    esp,0x40
c0012f5c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012f60:	50                   	push   eax
c0012f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f65:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012f69:	e8 3b f9 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012f6e:	58                   	pop    eax
c0012f6f:	5a                   	pop    edx
c0012f70:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012f74:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f78:	50                   	push   eax
c0012f79:	e8 37 ff ff ff       	call   c0012eb5 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012f7e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012f83:	83 c4 4c             	add    esp,0x4c
c0012f86:	c3                   	ret    

c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012f87:	55                   	push   ebp
c0012f88:	57                   	push   edi
c0012f89:	56                   	push   esi
c0012f8a:	53                   	push   ebx
c0012f8b:	31 db                	xor    ebx,ebx
c0012f8d:	83 ec 70             	sub    esp,0x70
c0012f90:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f97:	6a 30                	push   0x30
c0012f99:	6a 00                	push   0x0
c0012f9b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f9f:	56                   	push   esi
c0012fa0:	e8 4b d5 fe ff       	call   c00004f0 <memset>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	83 ec 0c             	sub    esp,0xc
c0012fab:	57                   	push   edi
c0012fac:	e8 bf d5 fe ff       	call   c0000570 <strlen>
c0012fb1:	83 c4 10             	add    esp,0x10
c0012fb4:	39 d8                	cmp    eax,ebx
c0012fb6:	76 16                	jbe    c0012fce <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012fb8:	83 ec 0c             	sub    esp,0xc
c0012fbb:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012fbf:	50                   	push   eax
c0012fc0:	e8 6b d9 fe ff       	call   c0000930 <toupper>
c0012fc5:	83 c4 10             	add    esp,0x10
c0012fc8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012fcb:	43                   	inc    ebx
c0012fcc:	eb da                	jmp    c0012fa8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012fce:	31 f6                	xor    esi,esi
c0012fd0:	52                   	push   edx
c0012fd1:	31 ff                	xor    edi,edi
c0012fd3:	6a 18                	push   0x18
c0012fd5:	6a 3f                	push   0x3f
c0012fd7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012fdb:	50                   	push   eax
c0012fdc:	e8 0f d5 fe ff       	call   c00004f0 <memset>
c0012fe1:	83 c4 10             	add    esp,0x10
c0012fe4:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012fe8:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012fec:	84 c0                	test   al,al
c0012fee:	0f 84 b0 00 00 00    	je     c00130a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012ff4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ff8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012ffd:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013001:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0013006:	8d 6e 01             	lea    ebp,[esi+0x1]
c0013009:	83 ec 0c             	sub    esp,0xc
c001300c:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0013010:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0013014:	53                   	push   ebx
c0013015:	e8 56 d5 fe ff       	call   c0000570 <strlen>
c001301a:	83 c4 10             	add    esp,0x10
c001301d:	85 c0                	test   eax,eax
c001301f:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013023:	74 0b                	je     c0013030 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0013025:	50                   	push   eax
c0013026:	6a 01                	push   0x1
c0013028:	53                   	push   ebx
c0013029:	8d 44 24 20          	lea    eax,[esp+0x20]
c001302d:	50                   	push   eax
c001302e:	eb 0a                	jmp    c001303a <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0013030:	50                   	push   eax
c0013031:	6a 00                	push   0x0
c0013033:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0013037:	50                   	push   eax
c0013038:	6a 00                	push   0x0
c001303a:	e8 44 fd ff ff       	call   c0012d83 <CmGetMatch(char*, char*, bool, bool*)>
c001303f:	83 c4 10             	add    esp,0x10
c0013042:	83 f8 ff             	cmp    eax,0xffffffff
c0013045:	75 1a                	jne    c0013061 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0013047:	83 ec 0c             	sub    esp,0xc
c001304a:	68 99 1f 02 c0       	push   0xc0021f99
c001304f:	e8 9d e2 ff ff       	call   c00112f1 <KePanic(char const*)>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	b8 02 00 00 00       	mov    eax,0x2
c001305c:	e9 bc 00 00 00       	jmp    c001311d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013061:	83 ff 18             	cmp    edi,0x18
c0013064:	75 1a                	jne    c0013080 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013066:	83 ec 0c             	sub    esp,0xc
c0013069:	68 ae 1f 02 c0       	push   0xc0021fae
c001306e:	e8 7e e2 ff ff       	call   c00112f1 <KePanic(char const*)>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	b8 01 00 00 00       	mov    eax,0x1
c001307b:	e9 9d 00 00 00       	jmp    c001311d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013080:	47                   	inc    edi
c0013081:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013086:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001308a:	74 02                	je     c001308e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001308c:	89 ee                	mov    esi,ebp
c001308e:	83 ec 0c             	sub    esp,0xc
c0013091:	53                   	push   ebx
c0013092:	e8 d9 d4 fe ff       	call   c0000570 <strlen>
c0013097:	83 c4 10             	add    esp,0x10
c001309a:	85 c0                	test   eax,eax
c001309c:	74 06                	je     c00130a4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001309e:	46                   	inc    esi
c001309f:	e9 40 ff ff ff       	jmp    c0012fe4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c00130a4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00130ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00130b4:	31 f6                	xor    esi,esi
c00130b6:	50                   	push   eax
c00130b7:	31 ff                	xor    edi,edi
c00130b9:	6a 12                	push   0x12
c00130bb:	68 ee 00 00 00       	push   0xee
c00130c0:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00130c7:	e8 24 d4 fe ff       	call   c00004f0 <memset>
c00130cc:	83 c4 10             	add    esp,0x10
c00130cf:	83 fe 17             	cmp    esi,0x17
c00130d2:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c00130d6:	7e 26                	jle    c00130fe <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c00130d8:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00130dc:	50                   	push   eax
c00130dd:	6a 08                	push   0x8
c00130df:	55                   	push   ebp
c00130e0:	53                   	push   ebx
c00130e1:	e8 2e fd ff ff       	call   c0012e14 <CmGetShift(unsigned int*, int*, int, bool*)>
c00130e6:	83 c4 10             	add    esp,0x10
c00130e9:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00130ee:	74 26                	je     c0013116 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00130f0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00130f7:	4e                   	dec    esi
c00130f8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00130fb:	47                   	inc    edi
c00130fc:	eb 1c                	jmp    c001311a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00130fe:	6a 06                	push   0x6
c0013100:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013105:	50                   	push   eax
c0013106:	55                   	push   ebp
c0013107:	53                   	push   ebx
c0013108:	e8 d7 fc ff ff       	call   c0012de4 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c001310d:	83 c4 10             	add    esp,0x10
c0013110:	84 c0                	test   al,al
c0013112:	75 06                	jne    c001311a <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013114:	eb c2                	jmp    c00130d8 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013116:	31 c0                	xor    eax,eax
c0013118:	eb 03                	jmp    c001311d <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c001311a:	46                   	inc    esi
c001311b:	eb b2                	jmp    c00130cf <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c001311d:	83 c4 6c             	add    esp,0x6c
c0013120:	5b                   	pop    ebx
c0013121:	5e                   	pop    esi
c0013122:	5f                   	pop    edi
c0013123:	5d                   	pop    ebp
c0013124:	c3                   	ret    

c0013125 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013125:	53                   	push   ebx
c0013126:	83 ec 3c             	sub    esp,0x3c
c0013129:	6a 2b                	push   0x2b
c001312b:	6a 00                	push   0x0
c001312d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013131:	53                   	push   ebx
c0013132:	e8 b9 d3 fe ff       	call   c00004f0 <memset>
c0013137:	58                   	pop    eax
c0013138:	5a                   	pop    edx
c0013139:	8d 44 24 11          	lea    eax,[esp+0x11]
c001313d:	50                   	push   eax
c001313e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013142:	e8 40 fe ff ff       	call   c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013147:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c001314c:	83 c4 0c             	add    esp,0xc
c001314f:	6a 15                	push   0x15
c0013151:	6a 00                	push   0x0
c0013153:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013157:	50                   	push   eax
c0013158:	e8 93 d3 fe ff       	call   c00004f0 <memset>
c001315d:	53                   	push   ebx
c001315e:	6a 00                	push   0x0
c0013160:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013164:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013168:	e8 e6 f9 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001316d:	83 c4 58             	add    esp,0x58
c0013170:	5b                   	pop    ebx
c0013171:	c3                   	ret    

c0013172 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013172:	56                   	push   esi
c0013173:	53                   	push   ebx
c0013174:	83 ec 48             	sub    esp,0x48
c0013177:	6a 12                	push   0x12
c0013179:	68 ff 00 00 00       	push   0xff
c001317e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013182:	56                   	push   esi
c0013183:	e8 68 d3 fe ff       	call   c00004f0 <memset>
c0013188:	5a                   	pop    edx
c0013189:	59                   	pop    ecx
c001318a:	56                   	push   esi
c001318b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001318f:	e8 f3 fd ff ff       	call   c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013194:	83 c4 10             	add    esp,0x10
c0013197:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001319b:	85 db                	test   ebx,ebx
c001319d:	74 42                	je     c00131e1 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001319f:	50                   	push   eax
c00131a0:	8d 44 24 19          	lea    eax,[esp+0x19]
c00131a4:	50                   	push   eax
c00131a5:	53                   	push   ebx
c00131a6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131aa:	e8 fa f6 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131af:	83 c4 0c             	add    esp,0xc
c00131b2:	6a 12                	push   0x12
c00131b4:	8d 44 24 21          	lea    eax,[esp+0x21]
c00131b8:	50                   	push   eax
c00131b9:	56                   	push   esi
c00131ba:	e8 c1 d1 fe ff       	call   c0000380 <memcmp>
c00131bf:	83 c4 10             	add    esp,0x10
c00131c2:	85 c0                	test   eax,eax
c00131c4:	74 1e                	je     c00131e4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00131c6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00131cb:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00131d0:	c1 e3 08             	shl    ebx,0x8
c00131d3:	09 d8                	or     eax,ebx
c00131d5:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00131da:	c1 e3 10             	shl    ebx,0x10
c00131dd:	09 c3                	or     ebx,eax
c00131df:	eb ba                	jmp    c001319b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00131e1:	83 cb ff             	or     ebx,0xffffffff
c00131e4:	89 d8                	mov    eax,ebx
c00131e6:	83 c4 44             	add    esp,0x44
c00131e9:	5b                   	pop    ebx
c00131ea:	5e                   	pop    esi
c00131eb:	c3                   	ret    

c00131ec <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00131ec:	57                   	push   edi
c00131ed:	56                   	push   esi
c00131ee:	53                   	push   ebx
c00131ef:	83 ec 34             	sub    esp,0x34
c00131f2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00131f6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00131fa:	6a 2b                	push   0x2b
c00131fc:	6a 00                	push   0x0
c00131fe:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0013202:	53                   	push   ebx
c0013203:	e8 e8 d2 fe ff       	call   c00004f0 <memset>
c0013208:	58                   	pop    eax
c0013209:	5a                   	pop    edx
c001320a:	8d 44 24 11          	lea    eax,[esp+0x11]
c001320e:	50                   	push   eax
c001320f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013213:	e8 6f fd ff ff       	call   c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013218:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001321c:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c0013220:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013224:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013228:	53                   	push   ebx
c0013229:	6a 00                	push   0x0
c001322b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001322f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013233:	e8 1b f9 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013238:	83 c4 50             	add    esp,0x50
c001323b:	5b                   	pop    ebx
c001323c:	5e                   	pop    esi
c001323d:	5f                   	pop    edi
c001323e:	c3                   	ret    

c001323f <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001323f:	55                   	push   ebp
c0013240:	57                   	push   edi
c0013241:	56                   	push   esi
c0013242:	53                   	push   ebx
c0013243:	83 ec 40             	sub    esp,0x40
c0013246:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c001324a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001324e:	6a 2b                	push   0x2b
c0013250:	6a 00                	push   0x0
c0013252:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013256:	56                   	push   esi
c0013257:	e8 94 d2 fe ff       	call   c00004f0 <memset>
c001325c:	5f                   	pop    edi
c001325d:	89 ef                	mov    edi,ebp
c001325f:	58                   	pop    eax
c0013260:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013264:	50                   	push   eax
c0013265:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013269:	e8 19 fd ff ff       	call   c0012f87 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001326e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013273:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013278:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001327d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013282:	83 c4 10             	add    esp,0x10
c0013285:	85 ed                	test   ebp,ebp
c0013287:	74 14                	je     c001329d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013289:	51                   	push   ecx
c001328a:	51                   	push   ecx
c001328b:	57                   	push   edi
c001328c:	53                   	push   ebx
c001328d:	e8 09 f7 ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c0013292:	83 c4 10             	add    esp,0x10
c0013295:	85 c0                	test   eax,eax
c0013297:	74 04                	je     c001329d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013299:	89 c7                	mov    edi,eax
c001329b:	eb e8                	jmp    c0013285 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001329d:	56                   	push   esi
c001329e:	6a 00                	push   0x0
c00132a0:	57                   	push   edi
c00132a1:	53                   	push   ebx
c00132a2:	e8 ac f8 ff ff       	call   c0012b53 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00132a7:	83 c4 0c             	add    esp,0xc
c00132aa:	89 c7                	mov    edi,eax
c00132ac:	56                   	push   esi
c00132ad:	50                   	push   eax
c00132ae:	53                   	push   ebx
c00132af:	e8 f5 f5 ff ff       	call   c00128a9 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00132b4:	58                   	pop    eax
c00132b5:	5a                   	pop    edx
c00132b6:	6a 6c                	push   0x6c
c00132b8:	6a 00                	push   0x0
c00132ba:	6a 00                	push   0x0
c00132bc:	68 bf 1f 02 c0       	push   0xc0021fbf
c00132c1:	57                   	push   edi
c00132c2:	53                   	push   ebx
c00132c3:	e8 24 ff ff ff       	call   c00131ec <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00132c8:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00132cc:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00132d0:	c1 e8 10             	shr    eax,0x10
c00132d3:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00132d7:	83 c4 1c             	add    esp,0x1c
c00132da:	56                   	push   esi
c00132db:	57                   	push   edi
c00132dc:	53                   	push   ebx
c00132dd:	e8 eb f6 ff ff       	call   c00129cd <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00132e2:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00132e7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00132ec:	c1 e0 08             	shl    eax,0x8
c00132ef:	09 c2                	or     edx,eax
c00132f1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00132f6:	83 c4 4c             	add    esp,0x4c
c00132f9:	c1 e0 10             	shl    eax,0x10
c00132fc:	5b                   	pop    ebx
c00132fd:	09 d0                	or     eax,edx
c00132ff:	5e                   	pop    esi
c0013300:	5f                   	pop    edi
c0013301:	5d                   	pop    ebp
c0013302:	c3                   	ret    

c0013303 <zStrtok(char*, char const*)>:
c0013303:	55                   	push   ebp
c0013304:	57                   	push   edi
c0013305:	56                   	push   esi
c0013306:	53                   	push   ebx
c0013307:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001330b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001330f:	85 db                	test   ebx,ebx
c0013311:	74 2f                	je     c0013342 <zStrtok(char*, char const*)+0x3f>
c0013313:	85 c0                	test   eax,eax
c0013315:	75 09                	jne    c0013320 <zStrtok(char*, char const*)+0x1d>
c0013317:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c001331c:	85 c0                	test   eax,eax
c001331e:	74 50                	je     c0013370 <zStrtok(char*, char const*)+0x6d>
c0013320:	31 c9                	xor    ecx,ecx
c0013322:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013326:	74 03                	je     c001332b <zStrtok(char*, char const*)+0x28>
c0013328:	41                   	inc    ecx
c0013329:	eb f7                	jmp    c0013322 <zStrtok(char*, char const*)+0x1f>
c001332b:	31 d2                	xor    edx,edx
c001332d:	39 ca                	cmp    edx,ecx
c001332f:	74 15                	je     c0013346 <zStrtok(char*, char const*)+0x43>
c0013331:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013335:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013338:	8d 3c 10             	lea    edi,[eax+edx*1]
c001333b:	39 ee                	cmp    esi,ebp
c001333d:	74 13                	je     c0013352 <zStrtok(char*, char const*)+0x4f>
c001333f:	42                   	inc    edx
c0013340:	eb eb                	jmp    c001332d <zStrtok(char*, char const*)+0x2a>
c0013342:	31 c0                	xor    eax,eax
c0013344:	eb 2a                	jmp    c0013370 <zStrtok(char*, char const*)+0x6d>
c0013346:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c0013350:	eb 1e                	jmp    c0013370 <zStrtok(char*, char const*)+0x6d>
c0013352:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013355:	39 ce                	cmp    esi,ecx
c0013357:	75 0a                	jne    c0013363 <zStrtok(char*, char const*)+0x60>
c0013359:	40                   	inc    eax
c001335a:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c001335f:	89 d8                	mov    eax,ebx
c0013361:	eb 0d                	jmp    c0013370 <zStrtok(char*, char const*)+0x6d>
c0013363:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013367:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001336a:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c0013370:	5b                   	pop    ebx
c0013371:	5e                   	pop    esi
c0013372:	5f                   	pop    edi
c0013373:	5d                   	pop    ebp
c0013374:	c3                   	ret    

c0013375 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013375:	57                   	push   edi
c0013376:	56                   	push   esi
c0013377:	53                   	push   ebx
c0013378:	81 ec 08 01 00 00    	sub    esp,0x108
c001337e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013385:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001338c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013390:	53                   	push   ebx
c0013391:	e8 aa d2 fe ff       	call   c0000640 <strcpy>
c0013396:	59                   	pop    ecx
c0013397:	5e                   	pop    esi
c0013398:	68 23 23 02 c0       	push   0xc0022323
c001339d:	53                   	push   ebx
c001339e:	bb 01 00 00 00       	mov    ebx,0x1
c00133a3:	e8 5b ff ff ff       	call   c0013303 <zStrtok(char*, char const*)>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	85 c0                	test   eax,eax
c00133ad:	74 3b                	je     c00133ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133af:	52                   	push   edx
c00133b0:	50                   	push   eax
c00133b1:	6a 01                	push   0x1
c00133b3:	57                   	push   edi
c00133b4:	e8 b9 fd ff ff       	call   c0013172 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00133b9:	59                   	pop    ecx
c00133ba:	89 c3                	mov    ebx,eax
c00133bc:	5e                   	pop    esi
c00133bd:	68 23 23 02 c0       	push   0xc0022323
c00133c2:	6a 00                	push   0x0
c00133c4:	e8 3a ff ff ff       	call   c0013303 <zStrtok(char*, char const*)>
c00133c9:	83 c4 10             	add    esp,0x10
c00133cc:	89 c6                	mov    esi,eax
c00133ce:	85 c0                	test   eax,eax
c00133d0:	74 18                	je     c00133ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133d2:	52                   	push   edx
c00133d3:	52                   	push   edx
c00133d4:	53                   	push   ebx
c00133d5:	57                   	push   edi
c00133d6:	e8 81 f5 ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c00133db:	83 c4 10             	add    esp,0x10
c00133de:	89 c3                	mov    ebx,eax
c00133e0:	83 f8 ff             	cmp    eax,0xffffffff
c00133e3:	74 05                	je     c00133ea <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00133e5:	50                   	push   eax
c00133e6:	56                   	push   esi
c00133e7:	53                   	push   ebx
c00133e8:	eb c9                	jmp    c00133b3 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00133ea:	81 c4 00 01 00 00    	add    esp,0x100
c00133f0:	89 d8                	mov    eax,ebx
c00133f2:	5b                   	pop    ebx
c00133f3:	5e                   	pop    esi
c00133f4:	5f                   	pop    edi
c00133f5:	c3                   	ret    

c00133f6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00133f6:	55                   	push   ebp
c00133f7:	57                   	push   edi
c00133f8:	56                   	push   esi
c00133f9:	53                   	push   ebx
c00133fa:	83 ec 5c             	sub    esp,0x5c
c00133fd:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013401:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013405:	85 db                	test   ebx,ebx
c0013407:	0f 8e 84 00 00 00    	jle    c0013491 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c001340d:	31 ed                	xor    ebp,ebp
c001340f:	57                   	push   edi
c0013410:	6a 32                	push   0x32
c0013412:	6a 00                	push   0x0
c0013414:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013418:	57                   	push   edi
c0013419:	e8 d2 d0 fe ff       	call   c00004f0 <memset>
c001341e:	83 c4 0c             	add    esp,0xc
c0013421:	57                   	push   edi
c0013422:	53                   	push   ebx
c0013423:	56                   	push   esi
c0013424:	e8 30 fb ff ff       	call   c0012f59 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013429:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001342d:	83 c4 10             	add    esp,0x10
c0013430:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013434:	7d 13                	jge    c0013449 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013436:	83 ec 0c             	sub    esp,0xc
c0013439:	45                   	inc    ebp
c001343a:	68 c7 26 02 c0       	push   0xc00226c7
c001343f:	e8 01 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013444:	83 c4 10             	add    esp,0x10
c0013447:	eb e7                	jmp    c0013430 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013449:	51                   	push   ecx
c001344a:	57                   	push   edi
c001344b:	53                   	push   ebx
c001344c:	68 c5 1f 02 c0       	push   0xc0021fc5
c0013451:	e8 ef 74 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013456:	83 c4 10             	add    esp,0x10
c0013459:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001345e:	75 1e                	jne    c001347e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013460:	52                   	push   edx
c0013461:	52                   	push   edx
c0013462:	53                   	push   ebx
c0013463:	56                   	push   esi
c0013464:	e8 f3 f4 ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c0013469:	83 c4 0c             	add    esp,0xc
c001346c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013470:	8d 51 04             	lea    edx,[ecx+0x4]
c0013473:	52                   	push   edx
c0013474:	50                   	push   eax
c0013475:	56                   	push   esi
c0013476:	e8 7b ff ff ff       	call   c00133f6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001347b:	83 c4 10             	add    esp,0x10
c001347e:	50                   	push   eax
c001347f:	50                   	push   eax
c0013480:	53                   	push   ebx
c0013481:	56                   	push   esi
c0013482:	e8 14 f5 ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c0013487:	83 c4 10             	add    esp,0x10
c001348a:	89 c3                	mov    ebx,eax
c001348c:	e9 74 ff ff ff       	jmp    c0013405 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013491:	83 c4 5c             	add    esp,0x5c
c0013494:	5b                   	pop    ebx
c0013495:	5e                   	pop    esi
c0013496:	5f                   	pop    edi
c0013497:	5d                   	pop    ebp
c0013498:	c3                   	ret    

c0013499 <CmSplitFinalSlashInPlace(char*)>:
c0013499:	53                   	push   ebx
c001349a:	83 ec 14             	sub    esp,0x14
c001349d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00134a1:	53                   	push   ebx
c00134a2:	e8 c9 d0 fe ff       	call   c0000570 <strlen>
c00134a7:	83 c4 10             	add    esp,0x10
c00134aa:	48                   	dec    eax
c00134ab:	85 c0                	test   eax,eax
c00134ad:	74 15                	je     c00134c4 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00134af:	8d 14 03             	lea    edx,[ebx+eax*1]
c00134b2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134b6:	75 09                	jne    c00134c1 <CmSplitFinalSlashInPlace(char*)+0x28>
c00134b8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00134bb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00134bf:	eb 05                	jmp    c00134c6 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00134c1:	48                   	dec    eax
c00134c2:	eb e7                	jmp    c00134ab <CmSplitFinalSlashInPlace(char*)+0x12>
c00134c4:	31 c0                	xor    eax,eax
c00134c6:	83 c4 08             	add    esp,0x8
c00134c9:	5b                   	pop    ebx
c00134ca:	c3                   	ret    

c00134cb <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00134cb:	55                   	push   ebp
c00134cc:	57                   	push   edi
c00134cd:	56                   	push   esi
c00134ce:	53                   	push   ebx
c00134cf:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00134d5:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00134dc:	8a 13                	mov    dl,BYTE PTR [ebx]
c00134de:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00134e1:	80 fa 40             	cmp    dl,0x40
c00134e4:	75 1c                	jne    c0013502 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00134e6:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00134e9:	85 c9                	test   ecx,ecx
c00134eb:	0f 84 09 01 00 00    	je     c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134f1:	8d 43 01             	lea    eax,[ebx+0x1]
c00134f4:	83 f9 3a             	cmp    ecx,0x3a
c00134f7:	74 04                	je     c00134fd <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00134f9:	89 c3                	mov    ebx,eax
c00134fb:	eb e9                	jmp    c00134e6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00134fd:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013500:	89 c3                	mov    ebx,eax
c0013502:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013506:	50                   	push   eax
c0013507:	6a 40                	push   0x40
c0013509:	6a 00                	push   0x0
c001350b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001350f:	50                   	push   eax
c0013510:	e8 db cf fe ff       	call   c00004f0 <memset>
c0013515:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001351c:	31 c0                	xor    eax,eax
c001351e:	83 c4 10             	add    esp,0x10
c0013521:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013526:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013529:	89 d1                	mov    ecx,edx
c001352b:	85 d2                	test   edx,edx
c001352d:	0f 84 c7 00 00 00    	je     c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013533:	3d c7 00 00 00       	cmp    eax,0xc7
c0013538:	0f 8f bc 00 00 00    	jg     c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001353e:	83 fa 0a             	cmp    edx,0xa
c0013541:	0f 85 a4 00 00 00    	jne    c00135eb <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013547:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001354c:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013551:	89 c8                	mov    eax,ecx
c0013553:	a8 df                	test   al,0xdf
c0013555:	0f 94 c2             	sete   dl
c0013558:	83 f9 23             	cmp    ecx,0x23
c001355b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013560:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013564:	80 e2 01             	and    dl,0x1
c0013567:	75 4a                	jne    c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013569:	83 e8 09             	sub    eax,0x9
c001356c:	3c 01                	cmp    al,0x1
c001356e:	76 43                	jbe    c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013570:	83 f9 5b             	cmp    ecx,0x5b
c0013573:	75 42                	jne    c00135b7 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013575:	83 fe 40             	cmp    esi,0x40
c0013578:	75 39                	jne    c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001357a:	83 ec 0c             	sub    esp,0xc
c001357d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013581:	52                   	push   edx
c0013582:	e8 e9 cf fe ff       	call   c0000570 <strlen>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	83 f8 3f             	cmp    eax,0x3f
c001358d:	77 6b                	ja     c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001358f:	50                   	push   eax
c0013590:	50                   	push   eax
c0013591:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013595:	52                   	push   edx
c0013596:	8d 54 24 24          	lea    edx,[esp+0x24]
c001359a:	52                   	push   edx
c001359b:	e8 a0 d0 fe ff       	call   c0000640 <strcpy>
c00135a0:	58                   	pop    eax
c00135a1:	8d 54 24 24          	lea    edx,[esp+0x24]
c00135a5:	52                   	push   edx
c00135a6:	e8 c5 cf fe ff       	call   c0000570 <strlen>
c00135ab:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00135b0:	83 c4 10             	add    esp,0x10
c00135b3:	31 d2                	xor    edx,edx
c00135b5:	eb 3b                	jmp    c00135f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00135b7:	83 fe 40             	cmp    esi,0x40
c00135ba:	74 06                	je     c00135c2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00135bc:	8d 44 24 58          	lea    eax,[esp+0x58]
c00135c0:	eb 20                	jmp    c00135e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00135c2:	50                   	push   eax
c00135c3:	50                   	push   eax
c00135c4:	55                   	push   ebp
c00135c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00135c9:	50                   	push   eax
c00135ca:	e8 81 d1 fe ff       	call   c0000750 <strcmp>
c00135cf:	83 c4 10             	add    esp,0x10
c00135d2:	85 c0                	test   eax,eax
c00135d4:	75 dd                	jne    c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00135d6:	eb e4                	jmp    c00135bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00135d8:	8d 50 01             	lea    edx,[eax+0x1]
c00135db:	83 f9 3d             	cmp    ecx,0x3d
c00135de:	74 1e                	je     c00135fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00135e0:	89 d0                	mov    eax,edx
c00135e2:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00135e5:	85 c9                	test   ecx,ecx
c00135e7:	75 ef                	jne    c00135d8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00135e9:	eb 0f                	jmp    c00135fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00135eb:	8d 50 01             	lea    edx,[eax+0x1]
c00135ee:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00135f2:	47                   	inc    edi
c00135f3:	89 d0                	mov    eax,edx
c00135f5:	e9 2c ff ff ff       	jmp    c0013526 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00135fa:	31 c0                	xor    eax,eax
c00135fc:	eb 33                	jmp    c0013631 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00135fe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013602:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013605:	50                   	push   eax
c0013606:	50                   	push   eax
c0013607:	8d 44 24 60          	lea    eax,[esp+0x60]
c001360b:	50                   	push   eax
c001360c:	53                   	push   ebx
c001360d:	e8 3e d1 fe ff       	call   c0000750 <strcmp>
c0013612:	83 c4 10             	add    esp,0x10
c0013615:	85 c0                	test   eax,eax
c0013617:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001361b:	75 96                	jne    c00135b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001361d:	51                   	push   ecx
c001361e:	51                   	push   ecx
c001361f:	52                   	push   edx
c0013620:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013627:	e8 14 d0 fe ff       	call   c0000640 <strcpy>
c001362c:	83 c4 10             	add    esp,0x10
c001362f:	b0 01                	mov    al,0x1
c0013631:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013637:	5b                   	pop    ebx
c0013638:	5e                   	pop    esi
c0013639:	5f                   	pop    edi
c001363a:	5d                   	pop    ebp
c001363b:	c3                   	ret    

c001363c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001363c:	57                   	push   edi
c001363d:	56                   	push   esi
c001363e:	53                   	push   ebx
c001363f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013645:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001364c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013653:	53                   	push   ebx
c0013654:	e8 17 cf fe ff       	call   c0000570 <strlen>
c0013659:	89 34 24             	mov    DWORD PTR [esp],esi
c001365c:	89 c7                	mov    edi,eax
c001365e:	e8 0d cf fe ff       	call   c0000570 <strlen>
c0013663:	83 c4 10             	add    esp,0x10
c0013666:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001366a:	3d ff 00 00 00       	cmp    eax,0xff
c001366f:	0f 87 d3 00 00 00    	ja     c0013748 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013675:	57                   	push   edi
c0013676:	57                   	push   edi
c0013677:	56                   	push   esi
c0013678:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001367c:	56                   	push   esi
c001367d:	e8 be cf fe ff       	call   c0000640 <strcpy>
c0013682:	58                   	pop    eax
c0013683:	5a                   	pop    edx
c0013684:	68 23 23 02 c0       	push   0xc0022323
c0013689:	56                   	push   esi
c001368a:	e8 b1 d1 fe ff       	call   c0000840 <strcat>
c001368f:	59                   	pop    ecx
c0013690:	5f                   	pop    edi
c0013691:	53                   	push   ebx
c0013692:	56                   	push   esi
c0013693:	e8 a8 d1 fe ff       	call   c0000840 <strcat>
c0013698:	58                   	pop    eax
c0013699:	5a                   	pop    edx
c001369a:	68 cf 1f 02 c0       	push   0xc0021fcf
c001369f:	56                   	push   esi
c00136a0:	e8 9b d1 fe ff       	call   c0000840 <strcat>
c00136a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00136ac:	e8 05 44 ff ff       	call   c0007ab6 <malloc>
c00136b1:	83 c4 0c             	add    esp,0xc
c00136b4:	89 c3                	mov    ebx,eax
c00136b6:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00136bc:	56                   	push   esi
c00136bd:	50                   	push   eax
c00136be:	e8 f5 80 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00136c3:	83 c4 10             	add    esp,0x10
c00136c6:	85 db                	test   ebx,ebx
c00136c8:	74 7e                	je     c0013748 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00136ca:	51                   	push   ecx
c00136cb:	51                   	push   ecx
c00136cc:	6a 01                	push   0x1
c00136ce:	53                   	push   ebx
c00136cf:	e8 a0 81 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c00136d4:	83 c4 10             	add    esp,0x10
c00136d7:	85 c0                	test   eax,eax
c00136d9:	74 08                	je     c00136e3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00136db:	83 ec 0c             	sub    esp,0xc
c00136de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136e0:	53                   	push   ebx
c00136e1:	eb 5f                	jmp    c0013742 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00136e3:	52                   	push   edx
c00136e4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00136e8:	50                   	push   eax
c00136e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00136ed:	50                   	push   eax
c00136ee:	53                   	push   ebx
c00136ef:	e8 82 84 ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c00136f4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136f8:	83 c4 10             	add    esp,0x10
c00136fb:	89 c1                	mov    ecx,eax
c00136fd:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013701:	74 31                	je     c0013734 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013703:	83 ec 0c             	sub    esp,0xc
c0013706:	50                   	push   eax
c0013707:	e8 aa 43 ff ff       	call   c0007ab6 <malloc>
c001370c:	89 c6                	mov    esi,eax
c001370e:	58                   	pop    eax
c001370f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013711:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013715:	52                   	push   edx
c0013716:	56                   	push   esi
c0013717:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001371b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001371f:	53                   	push   ebx
c0013720:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013723:	83 c4 20             	add    esp,0x20
c0013726:	85 c0                	test   eax,eax
c0013728:	75 0a                	jne    c0013734 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001372a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001372e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013732:	74 18                	je     c001374c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013734:	83 ec 0c             	sub    esp,0xc
c0013737:	53                   	push   ebx
c0013738:	e8 95 81 ff ff       	call   c000b8d2 <File::close()>
c001373d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001373f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013742:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013745:	83 c4 10             	add    esp,0x10
c0013748:	31 c0                	xor    eax,eax
c001374a:	eb 3b                	jmp    c0013787 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001374c:	83 ec 0c             	sub    esp,0xc
c001374f:	53                   	push   ebx
c0013750:	e8 7d 81 ff ff       	call   c000b8d2 <File::close()>
c0013755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013757:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001375a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001375d:	83 c4 0c             	add    esp,0xc
c0013760:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013767:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001376e:	56                   	push   esi
c001376f:	e8 57 fd ff ff       	call   c00134cb <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013774:	89 34 24             	mov    DWORD PTR [esp],esi
c0013777:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001377b:	e8 46 43 ff ff       	call   c0007ac6 <free>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013787:	81 c4 20 01 00 00    	add    esp,0x120
c001378d:	5b                   	pop    ebx
c001378e:	5e                   	pop    esi
c001378f:	5f                   	pop    edi
c0013790:	c3                   	ret    

c0013791 <Reg::getLine(char*, char*, char*)>:
c0013791:	57                   	push   edi
c0013792:	56                   	push   esi
c0013793:	53                   	push   ebx
c0013794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013798:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001379c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00137a0:	57                   	push   edi
c00137a1:	56                   	push   esi
c00137a2:	53                   	push   ebx
c00137a3:	68 d4 1f 02 c0       	push   0xc0021fd4
c00137a8:	e8 8f fe ff ff       	call   c001363c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137ad:	83 c4 10             	add    esp,0x10
c00137b0:	84 c0                	test   al,al
c00137b2:	75 10                	jne    c00137c4 <Reg::getLine(char*, char*, char*)+0x33>
c00137b4:	57                   	push   edi
c00137b5:	56                   	push   esi
c00137b6:	53                   	push   ebx
c00137b7:	68 f9 1f 02 c0       	push   0xc0021ff9
c00137bc:	e8 7b fe ff ff       	call   c001363c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00137c1:	83 c4 10             	add    esp,0x10
c00137c4:	5b                   	pop    ebx
c00137c5:	5e                   	pop    esi
c00137c6:	5f                   	pop    edi
c00137c7:	c3                   	ret    

c00137c8 <Reg::readInt(char*, char*, int*)>:
c00137c8:	55                   	push   ebp
c00137c9:	57                   	push   edi
c00137ca:	56                   	push   esi
c00137cb:	53                   	push   ebx
c00137cc:	81 ec f0 00 00 00    	sub    esp,0xf0
c00137d2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00137d6:	55                   	push   ebp
c00137d7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137de:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00137e5:	e8 a7 ff ff ff       	call   c0013791 <Reg::getLine(char*, char*, char*)>
c00137ea:	83 c4 10             	add    esp,0x10
c00137ed:	84 c0                	test   al,al
c00137ef:	0f 84 b6 00 00 00    	je     c00138ab <Reg::readInt(char*, char*, int*)+0xe3>
c00137f5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00137fa:	83 fa 2b             	cmp    edx,0x2b
c00137fd:	74 0c                	je     c001380b <Reg::readInt(char*, char*, int*)+0x43>
c00137ff:	83 fa 2d             	cmp    edx,0x2d
c0013802:	75 0e                	jne    c0013812 <Reg::readInt(char*, char*, int*)+0x4a>
c0013804:	ba 01 00 00 00       	mov    edx,0x1
c0013809:	eb 0b                	jmp    c0013816 <Reg::readInt(char*, char*, int*)+0x4e>
c001380b:	ba 01 00 00 00       	mov    edx,0x1
c0013810:	eb 02                	jmp    c0013814 <Reg::readInt(char*, char*, int*)+0x4c>
c0013812:	31 d2                	xor    edx,edx
c0013814:	31 c0                	xor    eax,eax
c0013816:	be 0a 00 00 00       	mov    esi,0xa
c001381b:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013820:	75 21                	jne    c0013843 <Reg::readInt(char*, char*, int*)+0x7b>
c0013822:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013827:	83 f9 78             	cmp    ecx,0x78
c001382a:	75 0a                	jne    c0013836 <Reg::readInt(char*, char*, int*)+0x6e>
c001382c:	83 c2 02             	add    edx,0x2
c001382f:	be 10 00 00 00       	mov    esi,0x10
c0013834:	eb 0d                	jmp    c0013843 <Reg::readInt(char*, char*, int*)+0x7b>
c0013836:	83 f9 62             	cmp    ecx,0x62
c0013839:	75 08                	jne    c0013843 <Reg::readInt(char*, char*, int*)+0x7b>
c001383b:	83 c2 02             	add    edx,0x2
c001383e:	be 02 00 00 00       	mov    esi,0x2
c0013843:	01 d5                	add    ebp,edx
c0013845:	31 d2                	xor    edx,edx
c0013847:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c001384b:	83 f9 0d             	cmp    ecx,0xd
c001384e:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013852:	0f 94 c3             	sete   bl
c0013855:	85 c9                	test   ecx,ecx
c0013857:	89 df                	mov    edi,ebx
c0013859:	0f 94 c3             	sete   bl
c001385c:	09 df                	or     edi,ebx
c001385e:	89 fb                	mov    ebx,edi
c0013860:	83 e7 01             	and    edi,0x1
c0013863:	75 35                	jne    c001389a <Reg::readInt(char*, char*, int*)+0xd2>
c0013865:	0f af d6             	imul   edx,esi
c0013868:	83 fe 10             	cmp    esi,0x10
c001386b:	75 26                	jne    c0013893 <Reg::readInt(char*, char*, int*)+0xcb>
c001386d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013871:	83 ef 41             	sub    edi,0x41
c0013874:	89 fb                	mov    ebx,edi
c0013876:	80 fb 05             	cmp    bl,0x5
c0013879:	77 06                	ja     c0013881 <Reg::readInt(char*, char*, int*)+0xb9>
c001387b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001387f:	eb 16                	jmp    c0013897 <Reg::readInt(char*, char*, int*)+0xcf>
c0013881:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013885:	83 eb 61             	sub    ebx,0x61
c0013888:	80 fb 05             	cmp    bl,0x5
c001388b:	77 06                	ja     c0013893 <Reg::readInt(char*, char*, int*)+0xcb>
c001388d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013891:	eb 04                	jmp    c0013897 <Reg::readInt(char*, char*, int*)+0xcf>
c0013893:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013897:	45                   	inc    ebp
c0013898:	eb ad                	jmp    c0013847 <Reg::readInt(char*, char*, int*)+0x7f>
c001389a:	84 c0                	test   al,al
c001389c:	74 02                	je     c00138a0 <Reg::readInt(char*, char*, int*)+0xd8>
c001389e:	f7 da                	neg    edx
c00138a0:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00138a7:	89 10                	mov    DWORD PTR [eax],edx
c00138a9:	88 d8                	mov    al,bl
c00138ab:	81 c4 ec 00 00 00    	add    esp,0xec
c00138b1:	5b                   	pop    ebx
c00138b2:	5e                   	pop    esi
c00138b3:	5f                   	pop    edi
c00138b4:	5d                   	pop    ebp
c00138b5:	c3                   	ret    

c00138b6 <Reg::readString(char*, char*, char*, int)>:
c00138b6:	57                   	push   edi
c00138b7:	56                   	push   esi
c00138b8:	53                   	push   ebx
c00138b9:	81 ec d4 00 00 00    	sub    esp,0xd4
c00138bf:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00138c6:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00138ca:	57                   	push   edi
c00138cb:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138d2:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00138d9:	e8 b3 fe ff ff       	call   c0013791 <Reg::getLine(char*, char*, char*)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	89 c6                	mov    esi,eax
c00138e3:	84 c0                	test   al,al
c00138e5:	74 44                	je     c001392b <Reg::readString(char*, char*, char*, int)+0x75>
c00138e7:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00138ee:	31 c0                	xor    eax,eax
c00138f0:	4a                   	dec    edx
c00138f1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00138f4:	84 c9                	test   cl,cl
c00138f6:	74 0f                	je     c0013907 <Reg::readString(char*, char*, char*, int)+0x51>
c00138f8:	39 c2                	cmp    edx,eax
c00138fa:	7e 0b                	jle    c0013907 <Reg::readString(char*, char*, char*, int)+0x51>
c00138fc:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00138ff:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013904:	40                   	inc    eax
c0013905:	eb ea                	jmp    c00138f1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013907:	83 ec 0c             	sub    esp,0xc
c001390a:	53                   	push   ebx
c001390b:	e8 60 cc fe ff       	call   c0000570 <strlen>
c0013910:	83 c4 10             	add    esp,0x10
c0013913:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013918:	75 11                	jne    c001392b <Reg::readString(char*, char*, char*, int)+0x75>
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	53                   	push   ebx
c001391e:	e8 4d cc fe ff       	call   c0000570 <strlen>
c0013923:	83 c4 10             	add    esp,0x10
c0013926:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001392b:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013931:	89 f0                	mov    eax,esi
c0013933:	5b                   	pop    ebx
c0013934:	5e                   	pop    esi
c0013935:	5f                   	pop    edi
c0013936:	c3                   	ret    

c0013937 <Reg::readBool(char*, char*, bool*)>:
c0013937:	83 ec 20             	sub    esp,0x20
c001393a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001393e:	50                   	push   eax
c001393f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013947:	e8 7c fe ff ff       	call   c00137c8 <Reg::readInt(char*, char*, int*)>
c001394c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013951:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013955:	0f 95 02             	setne  BYTE PTR [edx]
c0013958:	83 c4 2c             	add    esp,0x2c
c001395b:	c3                   	ret    

c001395c <Reg::readBoolWithDefault(char*, char*, bool)>:
c001395c:	53                   	push   ebx
c001395d:	83 ec 1c             	sub    esp,0x1c
c0013960:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013964:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013968:	50                   	push   eax
c0013969:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001396d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013971:	e8 c1 ff ff ff       	call   c0013937 <Reg::readBool(char*, char*, bool*)>
c0013976:	83 c4 10             	add    esp,0x10
c0013979:	84 c0                	test   al,al
c001397b:	74 04                	je     c0013981 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001397d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013981:	88 d8                	mov    al,bl
c0013983:	83 c4 18             	add    esp,0x18
c0013986:	5b                   	pop    ebx
c0013987:	c3                   	ret    

c0013988 <Reg::readIntWithDefault(char*, char*, int)>:
c0013988:	53                   	push   ebx
c0013989:	83 ec 1c             	sub    esp,0x1c
c001398c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013990:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013994:	50                   	push   eax
c0013995:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013999:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001399d:	e8 26 fe ff ff       	call   c00137c8 <Reg::readInt(char*, char*, int*)>
c00139a2:	83 c4 10             	add    esp,0x10
c00139a5:	84 c0                	test   al,al
c00139a7:	74 04                	je     c00139ad <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00139a9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00139ad:	89 d8                	mov    eax,ebx
c00139af:	83 c4 18             	add    esp,0x18
c00139b2:	5b                   	pop    ebx
c00139b3:	c3                   	ret    

c00139b4 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00139b4:	57                   	push   edi
c00139b5:	56                   	push   esi
c00139b6:	56                   	push   esi
c00139b7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00139bb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00139bf:	56                   	push   esi
c00139c0:	57                   	push   edi
c00139c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139c9:	e8 e8 fe ff ff       	call   c00138b6 <Reg::readString(char*, char*, char*, int)>
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	84 c0                	test   al,al
c00139d3:	75 1a                	jne    c00139ef <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00139d5:	51                   	push   ecx
c00139d6:	56                   	push   esi
c00139d7:	6a 00                	push   0x0
c00139d9:	57                   	push   edi
c00139da:	e8 11 cb fe ff       	call   c00004f0 <memset>
c00139df:	8d 4e ff             	lea    ecx,[esi-0x1]
c00139e2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139e8:	83 c4 10             	add    esp,0x10
c00139eb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00139ef:	89 f8                	mov    eax,edi
c00139f1:	5a                   	pop    edx
c00139f2:	5e                   	pop    esi
c00139f3:	5f                   	pop    edi
c00139f4:	c3                   	ret    

c00139f5 <SysEject(regs*)>:
c00139f5:	83 ec 0c             	sub    esp,0xc
c00139f8:	83 ca ff             	or     edx,0xffffffff
c00139fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139ff:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013a02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013a07:	83 e9 41             	sub    ecx,0x41
c0013a0a:	83 f9 19             	cmp    ecx,0x19
c0013a0d:	77 18                	ja     c0013a27 <SysEject(regs*)+0x32>
c0013a0f:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0013a16:	85 c9                	test   ecx,ecx
c0013a18:	74 0d                	je     c0013a27 <SysEject(regs*)+0x32>
c0013a1a:	83 ec 0c             	sub    esp,0xc
c0013a1d:	51                   	push   ecx
c0013a1e:	e8 17 a0 ff ff       	call   c000da3a <LogicalDisk::eject()>
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	99                   	cdq    
c0013a27:	83 c4 0c             	add    esp,0xc
c0013a2a:	c3                   	ret    

c0013a2b <SysExit(regs*)>:
c0013a2b:	83 ec 18             	sub    esp,0x18
c0013a2e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013a32:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a35:	e8 16 2b 00 00       	call   c0016550 <terminateTask(int)>
c0013a3a:	83 c8 ff             	or     eax,0xffffffff
c0013a3d:	83 c4 1c             	add    esp,0x1c
c0013a40:	89 c2                	mov    edx,eax
c0013a42:	c3                   	ret    

c0013a43 <SysGetCwd(regs*)>:
c0013a43:	83 ec 10             	sub    esp,0x10
c0013a46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013a4a:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013a4d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013a50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a55:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013a58:	e8 39 7b ff ff       	call   c000b596 <Fs::getcwd(Process*, char*, int)>
c0013a5d:	83 c4 1c             	add    esp,0x1c
c0013a60:	99                   	cdq    
c0013a61:	c3                   	ret    

c0013a62 <SysGetPID(regs*)>:
c0013a62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a67:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013a6c:	99                   	cdq    
c0013a6d:	c3                   	ret    

c0013a6e <SysGetRAMData(regs*)>:
c0013a6e:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013a74:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013a7e:	99                   	cdq    
c0013a7f:	f7 f9                	idiv   ecx
c0013a81:	c1 e0 18             	shl    eax,0x18
c0013a84:	09 c8                	or     eax,ecx
c0013a86:	99                   	cdq    
c0013a87:	c3                   	ret    

c0013a88 <SysGetVGAPtr(regs*)>:
c0013a88:	55                   	push   ebp
c0013a89:	57                   	push   edi
c0013a8a:	56                   	push   esi
c0013a8b:	53                   	push   ebx
c0013a8c:	83 ec 18             	sub    esp,0x18
c0013a8f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a93:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a96:	e8 81 25 00 00       	call   c001601c <Thr::processFromPID(int)>
c0013a9b:	83 c4 10             	add    esp,0x10
c0013a9e:	89 c1                	mov    ecx,eax
c0013aa0:	b8 01 00 00 00       	mov    eax,0x1
c0013aa5:	85 c9                	test   ecx,ecx
c0013aa7:	74 57                	je     c0013b00 <SysGetVGAPtr(regs*)+0x78>
c0013aa9:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013aaf:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013ab3:	74 0c                	je     c0013ac1 <SysGetVGAPtr(regs*)+0x39>
c0013ab5:	83 ec 0c             	sub    esp,0xc
c0013ab8:	55                   	push   ebp
c0013ab9:	e8 9b 4c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013abe:	83 c4 10             	add    esp,0x10
c0013ac1:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013ac4:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013ac7:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013acc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ace:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013ad1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ad4:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013ada:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013add:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013ae0:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013ae6:	50                   	push   eax
c0013ae7:	50                   	push   eax
c0013ae8:	68 14 20 02 c0       	push   0xc0022014
c0013aed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013af0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013af5:	50                   	push   eax
c0013af6:	e8 45 cb fe ff       	call   c0000640 <strcpy>
c0013afb:	83 c4 10             	add    esp,0x10
c0013afe:	31 c0                	xor    eax,eax
c0013b00:	83 c4 0c             	add    esp,0xc
c0013b03:	31 d2                	xor    edx,edx
c0013b05:	5b                   	pop    ebx
c0013b06:	5e                   	pop    esi
c0013b07:	5f                   	pop    edi
c0013b08:	5d                   	pop    ebp
c0013b09:	c3                   	ret    
c0013b0a:	66 90                	xchg   ax,ax

c0013b0c <SysKill(regs*)>:
c0013b0c:	53                   	push   ebx
c0013b0d:	83 ec 08             	sub    esp,0x8
c0013b10:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013b14:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013b18:	75 16                	jne    c0013b30 <SysKill(regs*)+0x24>
c0013b1a:	83 ec 0c             	sub    esp,0xc
c0013b1d:	68 1e 20 02 c0       	push   0xc002201e
c0013b22:	e8 ca d7 ff ff       	call   c00112f1 <KePanic(char const*)>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	e9 89 00 00 00       	jmp    c0013bb8 <SysKill(regs*)+0xac>
c0013b2f:	90                   	nop
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	68 e4 96 02 c0       	push   0xc00296e4
c0013b38:	e8 cf bc 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b3d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	85 c0                	test   eax,eax
c0013b45:	74 19                	je     c0013b60 <SysKill(regs*)+0x54>
c0013b47:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b4a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b4d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b4f:	74 33                	je     c0013b84 <SysKill(regs*)+0x78>
c0013b51:	52                   	push   edx
c0013b52:	52                   	push   edx
c0013b53:	50                   	push   eax
c0013b54:	68 e4 96 02 c0       	push   0xc00296e4
c0013b59:	e8 ce bf 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b5e:	eb e0                	jmp    c0013b40 <SysKill(regs*)+0x34>
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	68 d8 96 02 c0       	push   0xc00296d8
c0013b68:	e8 9f bc 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b6d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	85 c0                	test   eax,eax
c0013b75:	74 41                	je     c0013bb8 <SysKill(regs*)+0xac>
c0013b77:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b7a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b7d:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b7f:	75 27                	jne    c0013ba8 <SysKill(regs*)+0x9c>
c0013b81:	8d 76 00             	lea    esi,[esi+0x0]
c0013b84:	51                   	push   ecx
c0013b85:	51                   	push   ecx
c0013b86:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b8e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b91:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b97:	e8 f6 db ff ff       	call   c0011792 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013b9c:	83 c4 10             	add    esp,0x10
c0013b9f:	31 c0                	xor    eax,eax
c0013ba1:	31 d2                	xor    edx,edx
c0013ba3:	eb 1b                	jmp    c0013bc0 <SysKill(regs*)+0xb4>
c0013ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ba8:	52                   	push   edx
c0013ba9:	52                   	push   edx
c0013baa:	50                   	push   eax
c0013bab:	68 d8 96 02 c0       	push   0xc00296d8
c0013bb0:	e8 77 bf 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013bb5:	eb b9                	jmp    c0013b70 <SysKill(regs*)+0x64>
c0013bb7:	90                   	nop
c0013bb8:	83 c8 ff             	or     eax,0xffffffff
c0013bbb:	89 c2                	mov    edx,eax
c0013bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0013bc0:	83 c4 08             	add    esp,0x8
c0013bc3:	5b                   	pop    ebx
c0013bc4:	c3                   	ret    

c0013bc5 <SysLoadDLL(regs*)>:
c0013bc5:	56                   	push   esi
c0013bc6:	53                   	push   ebx
c0013bc7:	31 d2                	xor    edx,edx
c0013bc9:	51                   	push   ecx
c0013bca:	b8 01 00 00 00       	mov    eax,0x1
c0013bcf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bd3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013bd7:	0f 84 8c 00 00 00    	je     c0013c69 <SysLoadDLL(regs*)+0xa4>
c0013bdd:	83 ec 0c             	sub    esp,0xc
c0013be0:	68 14 01 00 00       	push   0x114
c0013be5:	e8 cc 3e ff ff       	call   c0007ab6 <malloc>
c0013bea:	83 c4 0c             	add    esp,0xc
c0013bed:	89 c3                	mov    ebx,eax
c0013bef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013bf4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013bf7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013bfa:	53                   	push   ebx
c0013bfb:	e8 b8 7b ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0013c00:	83 c4 10             	add    esp,0x10
c0013c03:	31 d2                	xor    edx,edx
c0013c05:	b8 02 00 00 00       	mov    eax,0x2
c0013c0a:	85 db                	test   ebx,ebx
c0013c0c:	74 5b                	je     c0013c69 <SysLoadDLL(regs*)+0xa4>
c0013c0e:	83 ec 0c             	sub    esp,0xc
c0013c11:	53                   	push   ebx
c0013c12:	e8 21 7f ff ff       	call   c000bb38 <File::exists()>
c0013c17:	83 c4 10             	add    esp,0x10
c0013c1a:	84 c0                	test   al,al
c0013c1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c1e:	75 11                	jne    c0013c31 <SysLoadDLL(regs*)+0x6c>
c0013c20:	83 ec 0c             	sub    esp,0xc
c0013c23:	53                   	push   ebx
c0013c24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c27:	83 c4 10             	add    esp,0x10
c0013c2a:	b8 03 00 00 00       	mov    eax,0x3
c0013c2f:	eb 36                	jmp    c0013c67 <SysLoadDLL(regs*)+0xa2>
c0013c31:	83 ec 0c             	sub    esp,0xc
c0013c34:	53                   	push   ebx
c0013c35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c38:	58                   	pop    eax
c0013c39:	5a                   	pop    edx
c0013c3a:	6a 00                	push   0x0
c0013c3c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013c3f:	e8 0e 15 00 00       	call   c0015152 <Thr::loadDLL(char const*, bool)>
c0013c44:	83 c4 10             	add    esp,0x10
c0013c47:	89 c1                	mov    ecx,eax
c0013c49:	31 d2                	xor    edx,edx
c0013c4b:	b8 04 00 00 00       	mov    eax,0x4
c0013c50:	85 c9                	test   ecx,ecx
c0013c52:	74 15                	je     c0013c69 <SysLoadDLL(regs*)+0xa4>
c0013c54:	53                   	push   ebx
c0013c55:	53                   	push   ebx
c0013c56:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013c5c:	51                   	push   ecx
c0013c5d:	e8 21 17 00 00       	call   c0015383 <Thr::executeDLL(unsigned long, void*)>
c0013c62:	83 c4 10             	add    esp,0x10
c0013c65:	31 c0                	xor    eax,eax
c0013c67:	31 d2                	xor    edx,edx
c0013c69:	59                   	pop    ecx
c0013c6a:	5b                   	pop    ebx
c0013c6b:	5e                   	pop    esi
c0013c6c:	c3                   	ret    

c0013c6d <SysRead(regs*)>:
c0013c6d:	57                   	push   edi
c0013c6e:	56                   	push   esi
c0013c6f:	53                   	push   ebx
c0013c70:	83 ec 10             	sub    esp,0x10
c0013c73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013c77:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c7a:	83 f8 02             	cmp    eax,0x2
c0013c7d:	77 10                	ja     c0013c8f <SysRead(regs*)+0x22>
c0013c7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c84:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c87:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c8d:	eb 0e                	jmp    c0013c9d <SysRead(regs*)+0x30>
c0013c8f:	83 ec 0c             	sub    esp,0xc
c0013c92:	50                   	push   eax
c0013c93:	e8 1b 58 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013c98:	83 c4 10             	add    esp,0x10
c0013c9b:	89 c1                	mov    ecx,eax
c0013c9d:	83 c8 ff             	or     eax,0xffffffff
c0013ca0:	85 c9                	test   ecx,ecx
c0013ca2:	89 c2                	mov    edx,eax
c0013ca4:	74 28                	je     c0013cce <SysRead(regs*)+0x61>
c0013ca6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013cae:	31 ff                	xor    edi,edi
c0013cb0:	83 ec 0c             	sub    esp,0xc
c0013cb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013cb5:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013cb9:	52                   	push   edx
c0013cba:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cbd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013cc0:	57                   	push   edi
c0013cc1:	56                   	push   esi
c0013cc2:	51                   	push   ecx
c0013cc3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013cc6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013cca:	83 c4 20             	add    esp,0x20
c0013ccd:	99                   	cdq    
c0013cce:	83 c4 10             	add    esp,0x10
c0013cd1:	5b                   	pop    ebx
c0013cd2:	5e                   	pop    esi
c0013cd3:	5f                   	pop    edi
c0013cd4:	c3                   	ret    

c0013cd5 <SysRegisterSignal(regs*)>:
c0013cd5:	83 ec 18             	sub    esp,0x18
c0013cd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cdc:	6a 00                	push   0x0
c0013cde:	6a 00                	push   0x0
c0013ce0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013ce3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ce6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ceb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013cee:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013cf4:	e8 63 da ff ff       	call   c001175c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013cf9:	83 c4 2c             	add    esp,0x2c
c0013cfc:	99                   	cdq    
c0013cfd:	c3                   	ret    

c0013cfe <SysRegistryGetTypeFromPath(regs*)>:
c0013cfe:	57                   	push   edi
c0013cff:	56                   	push   esi
c0013d00:	53                   	push   ebx
c0013d01:	81 ec 38 01 00 00    	sub    esp,0x138
c0013d07:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013d0e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d11:	68 3f 20 02 c0       	push   0xc002203f
c0013d16:	e8 2a 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d1b:	5a                   	pop    edx
c0013d1c:	59                   	pop    ecx
c0013d1d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d20:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d23:	e8 4d f6 ff ff       	call   c0013375 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d28:	5f                   	pop    edi
c0013d29:	89 c6                	mov    esi,eax
c0013d2b:	5a                   	pop    edx
c0013d2c:	50                   	push   eax
c0013d2d:	68 5f 20 02 c0       	push   0xc002205f
c0013d32:	e8 0e 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d37:	83 c4 10             	add    esp,0x10
c0013d3a:	85 f6                	test   esi,esi
c0013d3c:	74 28                	je     c0013d66 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013d3e:	50                   	push   eax
c0013d3f:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d43:	57                   	push   edi
c0013d44:	56                   	push   esi
c0013d45:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d48:	e8 0c f2 ff ff       	call   c0012f59 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d4d:	83 c4 0c             	add    esp,0xc
c0013d50:	89 c3                	mov    ebx,eax
c0013d52:	57                   	push   edi
c0013d53:	50                   	push   eax
c0013d54:	68 67 20 02 c0       	push   0xc0022067
c0013d59:	e8 e7 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d5e:	89 d8                	mov    eax,ebx
c0013d60:	83 c4 10             	add    esp,0x10
c0013d63:	99                   	cdq    
c0013d64:	eb 05                	jmp    c0013d6b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013d66:	83 c8 ff             	or     eax,0xffffffff
c0013d69:	89 c2                	mov    edx,eax
c0013d6b:	81 c4 30 01 00 00    	add    esp,0x130
c0013d71:	5b                   	pop    ebx
c0013d72:	5e                   	pop    esi
c0013d73:	5f                   	pop    edi
c0013d74:	c3                   	ret    

c0013d75 <SysRegistryReadExtent(regs*)>:
c0013d75:	83 ec 1c             	sub    esp,0x1c
c0013d78:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d7c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d7f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d82:	85 c0                	test   eax,eax
c0013d84:	79 1f                	jns    c0013da5 <SysRegistryReadExtent(regs*)+0x30>
c0013d86:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013d8b:	52                   	push   edx
c0013d8c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d90:	52                   	push   edx
c0013d91:	50                   	push   eax
c0013d92:	51                   	push   ecx
c0013d93:	e8 b3 f0 ff ff       	call   c0012e4b <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013d98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	eb 14                	jmp    c0013db9 <SysRegistryReadExtent(regs*)+0x44>
c0013da5:	83 ec 04             	sub    esp,0x4
c0013da8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013dab:	50                   	push   eax
c0013dac:	51                   	push   ecx
c0013dad:	e8 33 eb ff ff       	call   c00128e5 <CmGetString(Reghive_Tag*, int, char*)>
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	31 c0                	xor    eax,eax
c0013db7:	31 d2                	xor    edx,edx
c0013db9:	83 c4 1c             	add    esp,0x1c
c0013dbc:	c3                   	ret    

c0013dbd <SysRegistryPathToExtentLookup(regs*)>:
c0013dbd:	53                   	push   ebx
c0013dbe:	83 ec 10             	sub    esp,0x10
c0013dc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dc5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dc8:	68 7d 20 02 c0       	push   0xc002207d
c0013dcd:	e8 73 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013dd2:	58                   	pop    eax
c0013dd3:	5a                   	pop    edx
c0013dd4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013dd7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013dda:	e8 96 f5 ff ff       	call   c0013375 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013ddf:	83 c4 18             	add    esp,0x18
c0013de2:	99                   	cdq    
c0013de3:	5b                   	pop    ebx
c0013de4:	c3                   	ret    

c0013de5 <SysRegistryEnterDirectory(regs*)>:
c0013de5:	53                   	push   ebx
c0013de6:	83 ec 10             	sub    esp,0x10
c0013de9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ded:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013df0:	68 a0 20 02 c0       	push   0xc00220a0
c0013df5:	e8 4b 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013dfa:	58                   	pop    eax
c0013dfb:	5a                   	pop    edx
c0013dfc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013dff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e02:	e8 55 eb ff ff       	call   c001295c <CmEnterDirectory(Reghive_Tag*, int)>
c0013e07:	83 c4 18             	add    esp,0x18
c0013e0a:	99                   	cdq    
c0013e0b:	5b                   	pop    ebx
c0013e0c:	c3                   	ret    

c0013e0d <SysRegistryGetNext(regs*)>:
c0013e0d:	53                   	push   ebx
c0013e0e:	83 ec 10             	sub    esp,0x10
c0013e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e15:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e18:	68 be 20 02 c0       	push   0xc00220be
c0013e1d:	e8 23 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013e22:	58                   	pop    eax
c0013e23:	5a                   	pop    edx
c0013e24:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013e27:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013e2a:	e8 6c eb ff ff       	call   c001299b <CmGetNext(Reghive_Tag*, int)>
c0013e2f:	83 c4 18             	add    esp,0x18
c0013e32:	99                   	cdq    
c0013e33:	5b                   	pop    ebx
c0013e34:	c3                   	ret    

c0013e35 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013e35:	57                   	push   edi
c0013e36:	56                   	push   esi
c0013e37:	53                   	push   ebx
c0013e38:	81 ec 34 01 00 00    	sub    esp,0x134
c0013e3e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013e45:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013e49:	57                   	push   edi
c0013e4a:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013e4d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013e50:	e8 04 f1 ff ff       	call   c0012f59 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013e55:	89 c3                	mov    ebx,eax
c0013e57:	58                   	pop    eax
c0013e58:	5a                   	pop    edx
c0013e59:	57                   	push   edi
c0013e5a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013e5d:	e8 de c7 fe ff       	call   c0000640 <strcpy>
c0013e62:	89 d8                	mov    eax,ebx
c0013e64:	81 c4 40 01 00 00    	add    esp,0x140
c0013e6a:	99                   	cdq    
c0013e6b:	5b                   	pop    ebx
c0013e6c:	5e                   	pop    esi
c0013e6d:	5f                   	pop    edi
c0013e6e:	c3                   	ret    

c0013e6f <SysRegistryOpen(regs*)>:
c0013e6f:	83 ec 18             	sub    esp,0x18
c0013e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e76:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e79:	e8 f7 e8 ff ff       	call   c0012775 <CmOpen(char const*)>
c0013e7e:	83 c4 1c             	add    esp,0x1c
c0013e81:	99                   	cdq    
c0013e82:	c3                   	ret    

c0013e83 <SysRegistryClose(regs*)>:
c0013e83:	83 ec 18             	sub    esp,0x18
c0013e86:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e8a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e8d:	e8 01 ea ff ff       	call   c0012893 <CmClose(Reghive_Tag*)>
c0013e92:	31 c0                	xor    eax,eax
c0013e94:	31 d2                	xor    edx,edx
c0013e96:	83 c4 1c             	add    esp,0x1c
c0013e99:	c3                   	ret    

c0013e9a <SysSbrk(regs*)>:
c0013e9a:	56                   	push   esi
c0013e9b:	53                   	push   ebx
c0013e9c:	50                   	push   eax
c0013e9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ea2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013ea6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ea9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013eac:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013eb2:	85 db                	test   ebx,ebx
c0013eb4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013eb7:	74 02                	je     c0013ebb <SysSbrk(regs*)+0x21>
c0013eb9:	79 06                	jns    c0013ec1 <SysSbrk(regs*)+0x27>
c0013ebb:	89 f0                	mov    eax,esi
c0013ebd:	31 d2                	xor    edx,edx
c0013ebf:	eb 2a                	jmp    c0013eeb <SysSbrk(regs*)+0x51>
c0013ec1:	83 c8 ff             	or     eax,0xffffffff
c0013ec4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013eca:	89 c2                	mov    edx,eax
c0013ecc:	77 1d                	ja     c0013eeb <SysSbrk(regs*)+0x51>
c0013ece:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013ed4:	50                   	push   eax
c0013ed5:	c1 ea 0c             	shr    edx,0xc
c0013ed8:	68 07 0c 00 00       	push   0xc07
c0013edd:	52                   	push   edx
c0013ede:	51                   	push   ecx
c0013edf:	e8 40 5f ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013ee4:	89 f0                	mov    eax,esi
c0013ee6:	31 d2                	xor    edx,edx
c0013ee8:	83 c4 10             	add    esp,0x10
c0013eeb:	59                   	pop    ecx
c0013eec:	5b                   	pop    ebx
c0013eed:	5e                   	pop    esi
c0013eee:	c3                   	ret    

c0013eef <SysSetCwd(regs*)>:
c0013eef:	83 ec 14             	sub    esp,0x14
c0013ef2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ef6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ef9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013efe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f01:	e8 d1 7c ff ff       	call   c000bbd7 <Fs::setcwd(Process*, char*)>
c0013f06:	83 c4 1c             	add    esp,0x1c
c0013f09:	99                   	cdq    
c0013f0a:	c3                   	ret    

c0013f0b <SysSetTime(regs*)>:
c0013f0b:	55                   	push   ebp
c0013f0c:	31 c9                	xor    ecx,ecx
c0013f0e:	57                   	push   edi
c0013f0f:	bd 0c 00 00 00       	mov    ebp,0xc
c0013f14:	56                   	push   esi
c0013f15:	53                   	push   ebx
c0013f16:	31 db                	xor    ebx,ebx
c0013f18:	83 ec 10             	sub    esp,0x10
c0013f1b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013f1f:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013f22:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013f25:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013f28:	89 c2                	mov    edx,eax
c0013f2a:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013f30:	83 e2 1f             	and    edx,0x1f
c0013f33:	c1 e7 10             	shl    edi,0x10
c0013f36:	42                   	inc    edx
c0013f37:	c1 e8 05             	shr    eax,0x5
c0013f3a:	88 d1                	mov    cl,dl
c0013f3c:	31 d2                	xor    edx,edx
c0013f3e:	f7 f5                	div    ebp
c0013f40:	89 dd                	mov    ebp,ebx
c0013f42:	88 d5                	mov    ch,dl
c0013f44:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013f4a:	0f b7 c1             	movzx  eax,cx
c0013f4d:	31 d2                	xor    edx,edx
c0013f4f:	09 f8                	or     eax,edi
c0013f51:	bf 3c 00 00 00       	mov    edi,0x3c
c0013f56:	89 c1                	mov    ecx,eax
c0013f58:	89 f0                	mov    eax,esi
c0013f5a:	f7 f7                	div    edi
c0013f5c:	c1 e2 10             	shl    edx,0x10
c0013f5f:	09 d5                	or     ebp,edx
c0013f61:	31 d2                	xor    edx,edx
c0013f63:	89 eb                	mov    ebx,ebp
c0013f65:	f7 f7                	div    edi
c0013f67:	bf 10 0e 00 00       	mov    edi,0xe10
c0013f6c:	88 d7                	mov    bh,dl
c0013f6e:	89 f0                	mov    eax,esi
c0013f70:	31 d2                	xor    edx,edx
c0013f72:	f7 f7                	div    edi
c0013f74:	bf 18 00 00 00       	mov    edi,0x18
c0013f79:	31 d2                	xor    edx,edx
c0013f7b:	f7 f7                	div    edi
c0013f7d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f82:	88 d3                	mov    bl,dl
c0013f84:	53                   	push   ebx
c0013f85:	51                   	push   ecx
c0013f86:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f8c:	e8 45 84 ff ff       	call   c000c3d6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f91:	83 c4 1c             	add    esp,0x1c
c0013f94:	83 f0 01             	xor    eax,0x1
c0013f97:	5b                   	pop    ebx
c0013f98:	0f b6 c0             	movzx  eax,al
c0013f9b:	5e                   	pop    esi
c0013f9c:	31 d2                	xor    edx,edx
c0013f9e:	5f                   	pop    edi
c0013f9f:	5d                   	pop    ebp
c0013fa0:	c3                   	ret    

c0013fa1 <SysTimezone(regs*)>:
c0013fa1:	53                   	push   ebx
c0013fa2:	83 ec 08             	sub    esp,0x8
c0013fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fa9:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013fad:	75 17                	jne    c0013fc6 <SysTimezone(regs*)+0x25>
c0013faf:	83 ec 0c             	sub    esp,0xc
c0013fb2:	68 d5 20 02 c0       	push   0xc00220d5
c0013fb7:	e8 89 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013fbc:	83 c8 ff             	or     eax,0xffffffff
c0013fbf:	83 c4 10             	add    esp,0x10
c0013fc2:	89 c2                	mov    edx,eax
c0013fc4:	eb 20                	jmp    c0013fe6 <SysTimezone(regs*)+0x45>
c0013fc6:	83 ec 0c             	sub    esp,0xc
c0013fc9:	68 ea 20 02 c0       	push   0xc00220ea
c0013fce:	e8 72 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013fd3:	58                   	pop    eax
c0013fd4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013fd7:	e8 64 81 ff ff       	call   c000c140 <User::loadClockSettings(int)>
c0013fdc:	83 c4 10             	add    esp,0x10
c0013fdf:	b8 01 00 00 00       	mov    eax,0x1
c0013fe4:	31 d2                	xor    edx,edx
c0013fe6:	83 c4 08             	add    esp,0x8
c0013fe9:	5b                   	pop    ebx
c0013fea:	c3                   	ret    

c0013feb <SysTruncate(regs*)>:
c0013feb:	55                   	push   ebp
c0013fec:	57                   	push   edi
c0013fed:	31 ff                	xor    edi,edi
c0013fef:	56                   	push   esi
c0013ff0:	53                   	push   ebx
c0013ff1:	83 ec 0c             	sub    esp,0xc
c0013ff4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ff8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ffb:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013ffe:	89 ce                	mov    esi,ecx
c0014000:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014004:	0f 84 9a 00 00 00    	je     c00140a4 <SysTruncate(regs*)+0xb9>
c001400a:	83 ec 0c             	sub    esp,0xc
c001400d:	68 14 01 00 00       	push   0x114
c0014012:	e8 9f 3a ff ff       	call   c0007ab6 <malloc>
c0014017:	83 c4 0c             	add    esp,0xc
c001401a:	89 c3                	mov    ebx,eax
c001401c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014021:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014024:	55                   	push   ebp
c0014025:	53                   	push   ebx
c0014026:	e8 8d 77 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c001402b:	83 c4 10             	add    esp,0x10
c001402e:	31 d2                	xor    edx,edx
c0014030:	b8 03 00 00 00       	mov    eax,0x3
c0014035:	85 db                	test   ebx,ebx
c0014037:	0f 84 a2 00 00 00    	je     c00140df <SysTruncate(regs*)+0xf4>
c001403d:	51                   	push   ecx
c001403e:	51                   	push   ecx
c001403f:	6a 02                	push   0x2
c0014041:	53                   	push   ebx
c0014042:	e8 2d 78 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0014047:	83 c4 10             	add    esp,0x10
c001404a:	85 c0                	test   eax,eax
c001404c:	74 13                	je     c0014061 <SysTruncate(regs*)+0x76>
c001404e:	83 ec 0c             	sub    esp,0xc
c0014051:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014053:	53                   	push   ebx
c0014054:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014057:	83 c4 10             	add    esp,0x10
c001405a:	b8 04 00 00 00       	mov    eax,0x4
c001405f:	eb 7c                	jmp    c00140dd <SysTruncate(regs*)+0xf2>
c0014061:	52                   	push   edx
c0014062:	57                   	push   edi
c0014063:	56                   	push   esi
c0014064:	53                   	push   ebx
c0014065:	e8 1e 79 ff ff       	call   c000b988 <File::truncate(unsigned long long)>
c001406a:	83 c4 10             	add    esp,0x10
c001406d:	85 c0                	test   eax,eax
c001406f:	74 1b                	je     c001408c <SysTruncate(regs*)+0xa1>
c0014071:	83 ec 0c             	sub    esp,0xc
c0014074:	53                   	push   ebx
c0014075:	e8 58 78 ff ff       	call   c000b8d2 <File::close()>
c001407a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001407c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001407f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014082:	83 c4 10             	add    esp,0x10
c0014085:	b8 05 00 00 00       	mov    eax,0x5
c001408a:	eb 51                	jmp    c00140dd <SysTruncate(regs*)+0xf2>
c001408c:	83 ec 0c             	sub    esp,0xc
c001408f:	53                   	push   ebx
c0014090:	e8 3d 78 ff ff       	call   c000b8d2 <File::close()>
c0014095:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014097:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001409a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001409d:	83 c4 10             	add    esp,0x10
c00140a0:	31 c0                	xor    eax,eax
c00140a2:	eb 39                	jmp    c00140dd <SysTruncate(regs*)+0xf2>
c00140a4:	31 d2                	xor    edx,edx
c00140a6:	b8 01 00 00 00       	mov    eax,0x1
c00140ab:	83 fd 02             	cmp    ebp,0x2
c00140ae:	7e 2f                	jle    c00140df <SysTruncate(regs*)+0xf4>
c00140b0:	83 ec 0c             	sub    esp,0xc
c00140b3:	51                   	push   ecx
c00140b4:	e8 fa 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	89 c1                	mov    ecx,eax
c00140be:	31 d2                	xor    edx,edx
c00140c0:	b8 02 00 00 00       	mov    eax,0x2
c00140c5:	85 c9                	test   ecx,ecx
c00140c7:	74 16                	je     c00140df <SysTruncate(regs*)+0xf4>
c00140c9:	50                   	push   eax
c00140ca:	57                   	push   edi
c00140cb:	56                   	push   esi
c00140cc:	51                   	push   ecx
c00140cd:	e8 b6 78 ff ff       	call   c000b988 <File::truncate(unsigned long long)>
c00140d2:	83 c4 10             	add    esp,0x10
c00140d5:	85 c0                	test   eax,eax
c00140d7:	0f 95 c0             	setne  al
c00140da:	0f b6 c0             	movzx  eax,al
c00140dd:	31 d2                	xor    edx,edx
c00140df:	83 c4 0c             	add    esp,0xc
c00140e2:	5b                   	pop    ebx
c00140e3:	5e                   	pop    esi
c00140e4:	5f                   	pop    edi
c00140e5:	5d                   	pop    ebp
c00140e6:	c3                   	ret    

c00140e7 <SysWrite(regs*)>:
c00140e7:	57                   	push   edi
c00140e8:	56                   	push   esi
c00140e9:	53                   	push   ebx
c00140ea:	83 ec 10             	sub    esp,0x10
c00140ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00140f1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00140f4:	83 f8 02             	cmp    eax,0x2
c00140f7:	77 10                	ja     c0014109 <SysWrite(regs*)+0x22>
c00140f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014101:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014107:	eb 0e                	jmp    c0014117 <SysWrite(regs*)+0x30>
c0014109:	83 ec 0c             	sub    esp,0xc
c001410c:	50                   	push   eax
c001410d:	e8 a1 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	89 c1                	mov    ecx,eax
c0014117:	83 c8 ff             	or     eax,0xffffffff
c001411a:	85 c9                	test   ecx,ecx
c001411c:	89 c2                	mov    edx,eax
c001411e:	74 28                	je     c0014148 <SysWrite(regs*)+0x61>
c0014120:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014128:	31 ff                	xor    edi,edi
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001412f:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014133:	52                   	push   edx
c0014134:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014137:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001413a:	57                   	push   edi
c001413b:	56                   	push   esi
c001413c:	51                   	push   ecx
c001413d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014140:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014144:	83 c4 20             	add    esp,0x20
c0014147:	99                   	cdq    
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	5b                   	pop    ebx
c001414c:	5e                   	pop    esi
c001414d:	5f                   	pop    edi
c001414e:	c3                   	ret    

c001414f <SysWsbe(regs*)>:
c001414f:	57                   	push   edi
c0014150:	b9 0b 00 00 00       	mov    ecx,0xb
c0014155:	56                   	push   esi
c0014156:	be 29 21 02 c0       	mov    esi,0xc0022129
c001415b:	53                   	push   ebx
c001415c:	83 ec 30             	sub    esp,0x30
c001415f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014163:	fc                   	cld    
c0014164:	83 ec 0c             	sub    esp,0xc
c0014167:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014169:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001416d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014172:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014175:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c001417b:	8b 06                	mov    eax,DWORD PTR [esi]
c001417d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014180:	57                   	push   edi
c0014181:	e8 ea c3 fe ff       	call   c0000570 <strlen>
c0014186:	5a                   	pop    edx
c0014187:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001418b:	52                   	push   edx
c001418c:	31 d2                	xor    edx,edx
c001418e:	57                   	push   edi
c001418f:	52                   	push   edx
c0014190:	50                   	push   eax
c0014191:	56                   	push   esi
c0014192:	ff d3                	call   ebx
c0014194:	83 c4 14             	add    esp,0x14
c0014197:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001419b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001419e:	e8 ad 23 00 00       	call   c0016550 <terminateTask(int)>
c00141a3:	83 c4 40             	add    esp,0x40
c00141a6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00141ab:	5b                   	pop    ebx
c00141ac:	31 d2                	xor    edx,edx
c00141ae:	5e                   	pop    esi
c00141af:	5f                   	pop    edi
c00141b0:	c3                   	ret    

c00141b1 <SysYield(regs*)>:
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	fa                   	cli    
c00141b5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00141bb:	e8 f0 19 00 00       	call   c0015bb0 <schedule()>
c00141c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00141c5:	48                   	dec    eax
c00141c6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00141cb:	75 01                	jne    c00141ce <SysYield(regs*)+0x1d>
c00141cd:	fb                   	sti    
c00141ce:	31 c0                	xor    eax,eax
c00141d0:	31 d2                	xor    edx,edx
c00141d2:	83 c4 0c             	add    esp,0xc
c00141d5:	c3                   	ret    

c00141d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00141d6:	55                   	push   ebp
c00141d7:	57                   	push   edi
c00141d8:	56                   	push   esi
c00141d9:	53                   	push   ebx
c00141da:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00141e0:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00141e8:	0f 95 c0             	setne  al
c00141eb:	31 d2                	xor    edx,edx
c00141ed:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00141f5:	0f 94 c2             	sete   dl
c00141f8:	85 c2                	test   edx,eax
c00141fa:	74 34                	je     c0014230 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00141fc:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014207:	74 27                	je     c0014230 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014209:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014210:	05 00 10 00 00       	add    eax,0x1000
c0014215:	89 c1                	mov    ecx,eax
c0014217:	25 00 f0 ff ff       	and    eax,0xfffff000
c001421c:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014222:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014229:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0014230:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014237:	83 ec 0c             	sub    esp,0xc
c001423a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014240:	6a 01                	push   0x1
c0014242:	e8 c6 53 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014247:	83 c4 10             	add    esp,0x10
c001424a:	89 c3                	mov    ebx,eax
c001424c:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014252:	0f 86 25 01 00 00    	jbe    c001437d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014258:	c1 ee 0c             	shr    esi,0xc
c001425b:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014262:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014266:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001426e:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014275:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014279:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014280:	29 ef                	sub    edi,ebp
c0014282:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014286:	0f 83 f8 00 00 00    	jae    c0014384 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c001428c:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0014292:	76 05                	jbe    c0014299 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014294:	bf 00 10 00 00       	mov    edi,0x1000
c0014299:	83 ec 0c             	sub    esp,0xc
c001429c:	31 d2                	xor    edx,edx
c001429e:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00142a5:	8b 08                	mov    ecx,DWORD PTR [eax]
c00142a7:	8d 44 24 28          	lea    eax,[esp+0x28]
c00142ab:	50                   	push   eax
c00142ac:	8d 74 24 30          	lea    esi,[esp+0x30]
c00142b0:	56                   	push   esi
c00142b1:	52                   	push   edx
c00142b2:	57                   	push   edi
c00142b3:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00142ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142bd:	83 c4 20             	add    esp,0x20
c00142c0:	85 c0                	test   eax,eax
c00142c2:	75 06                	jne    c00142ca <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00142c4:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00142c8:	74 13                	je     c00142dd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00142ca:	83 ec 0c             	sub    esp,0xc
c00142cd:	53                   	push   ebx
c00142ce:	e8 58 56 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00142d3:	83 c4 10             	add    esp,0x10
c00142d6:	31 c0                	xor    eax,eax
c00142d8:	e9 7c 01 00 00       	jmp    c0014459 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00142dd:	fa                   	cli    
c00142de:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00142e4:	e8 d6 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c00142e9:	6a 07                	push   0x7
c00142eb:	89 c7                	mov    edi,eax
c00142ed:	53                   	push   ebx
c00142ee:	50                   	push   eax
c00142ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142f4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142f7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142fd:	e8 1e 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014302:	83 c4 0c             	add    esp,0xc
c0014305:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001430c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014312:	6a 00                	push   0x0
c0014314:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014319:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001431c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014322:	e8 5f 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014327:	58                   	pop    eax
c0014328:	5a                   	pop    edx
c0014329:	68 07 0c 00 00       	push   0xc07
c001432e:	55                   	push   ebp
c001432f:	57                   	push   edi
c0014330:	89 df                	mov    edi,ebx
c0014332:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014339:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001433f:	6a 00                	push   0x0
c0014341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014346:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014349:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001434f:	e8 1e 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014354:	b9 00 10 00 00       	mov    ecx,0x1000
c0014359:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001435b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014360:	83 c4 20             	add    esp,0x20
c0014363:	48                   	dec    eax
c0014364:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014369:	85 c0                	test   eax,eax
c001436b:	75 01                	jne    c001436e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001436d:	fb                   	sti    
c001436e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014374:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014378:	e9 f1 fe ff ff       	jmp    c001426e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001437d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014384:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001438b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014391:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014397:	0f 86 ae 00 00 00    	jbe    c001444b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001439d:	fa                   	cli    
c001439e:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00143a4:	c1 ee 0c             	shr    esi,0xc
c00143a7:	51                   	push   ecx
c00143a8:	31 ff                	xor    edi,edi
c00143aa:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00143b1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143b7:	6a 00                	push   0x0
c00143b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143c7:	e8 ba 57 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00143cc:	83 c4 10             	add    esp,0x10
c00143cf:	e8 eb 39 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00143d4:	47                   	inc    edi
c00143d5:	6a 07                	push   0x7
c00143d7:	53                   	push   ebx
c00143d8:	50                   	push   eax
c00143d9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00143dd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00143e3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00143e6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00143ec:	e8 2f 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00143f1:	58                   	pop    eax
c00143f2:	5a                   	pop    edx
c00143f3:	68 07 0c 00 00       	push   0xc07
c00143f8:	55                   	push   ebp
c00143f9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00143ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014403:	50                   	push   eax
c0014404:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001440b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014411:	6a 00                	push   0x0
c0014413:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014418:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001441b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014421:	e8 4c 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014426:	83 c4 1c             	add    esp,0x1c
c0014429:	68 00 10 00 00       	push   0x1000
c001442e:	6a 00                	push   0x0
c0014430:	53                   	push   ebx
c0014431:	e8 ba c0 fe ff       	call   c00004f0 <memset>
c0014436:	83 c4 10             	add    esp,0x10
c0014439:	39 fe                	cmp    esi,edi
c001443b:	77 92                	ja     c00143cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001443d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0014442:	48                   	dec    eax
c0014443:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014448:	75 01                	jne    c001444b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001444a:	fb                   	sti    
c001444b:	83 ec 0c             	sub    esp,0xc
c001444e:	53                   	push   ebx
c001444f:	e8 d7 54 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014454:	83 c4 10             	add    esp,0x10
c0014457:	b0 01                	mov    al,0x1
c0014459:	81 c4 2c 10 00 00    	add    esp,0x102c
c001445f:	5b                   	pop    ebx
c0014460:	5e                   	pop    esi
c0014461:	5f                   	pop    edi
c0014462:	5d                   	pop    ebp
c0014463:	c3                   	ret    

c0014464 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014464:	55                   	push   ebp
c0014465:	57                   	push   edi
c0014466:	56                   	push   esi
c0014467:	53                   	push   ebx
c0014468:	83 ec 48             	sub    esp,0x48
c001446b:	68 14 01 00 00       	push   0x114
c0014470:	e8 41 36 ff ff       	call   c0007ab6 <malloc>
c0014475:	83 c4 0c             	add    esp,0xc
c0014478:	89 c6                	mov    esi,eax
c001447a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001447e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014482:	50                   	push   eax
c0014483:	e8 30 73 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0014488:	58                   	pop    eax
c0014489:	5a                   	pop    edx
c001448a:	6a 01                	push   0x1
c001448c:	56                   	push   esi
c001448d:	e8 e2 73 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0014492:	83 c4 10             	add    esp,0x10
c0014495:	85 c0                	test   eax,eax
c0014497:	0f 85 43 01 00 00    	jne    c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001449d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00144a5:	83 ec 0c             	sub    esp,0xc
c00144a8:	6a 34                	push   0x34
c00144aa:	e8 07 36 ff ff       	call   c0007ab6 <malloc>
c00144af:	89 c3                	mov    ebx,eax
c00144b1:	58                   	pop    eax
c00144b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00144b4:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00144b8:	57                   	push   edi
c00144b9:	53                   	push   ebx
c00144ba:	6a 00                	push   0x0
c00144bc:	6a 34                	push   0x34
c00144be:	56                   	push   esi
c00144bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00144c2:	83 c4 20             	add    esp,0x20
c00144c5:	85 c0                	test   eax,eax
c00144c7:	0f 85 13 01 00 00    	jne    c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144cd:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00144d3:	0f 85 07 01 00 00    	jne    c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144d9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00144dc:	85 c0                	test   eax,eax
c00144de:	0f 84 fc 00 00 00    	je     c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144e4:	31 d2                	xor    edx,edx
c00144e6:	55                   	push   ebp
c00144e7:	52                   	push   edx
c00144e8:	50                   	push   eax
c00144e9:	56                   	push   esi
c00144ea:	e8 43 74 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c00144ef:	83 c4 10             	add    esp,0x10
c00144f2:	85 c0                	test   eax,eax
c00144f4:	0f 85 e6 00 00 00    	jne    c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144fa:	83 ec 0c             	sub    esp,0xc
c00144fd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014500:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014508:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001450c:	0f af c2             	imul   eax,edx
c001450f:	50                   	push   eax
c0014510:	e8 a1 35 ff ff       	call   c0007ab6 <malloc>
c0014515:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014517:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001451b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001451e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014522:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014526:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001452a:	0f af c2             	imul   eax,edx
c001452d:	99                   	cdq    
c001452e:	52                   	push   edx
c001452f:	50                   	push   eax
c0014530:	56                   	push   esi
c0014531:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014534:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014537:	83 c4 20             	add    esp,0x20
c001453a:	85 c0                	test   eax,eax
c001453c:	0f 84 9e 00 00 00    	je     c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014542:	31 d2                	xor    edx,edx
c0014544:	51                   	push   ecx
c0014545:	52                   	push   edx
c0014546:	50                   	push   eax
c0014547:	56                   	push   esi
c0014548:	e8 e5 73 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c001454d:	83 c4 10             	add    esp,0x10
c0014550:	85 c0                	test   eax,eax
c0014552:	0f 85 88 00 00 00    	jne    c00145e0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014558:	83 ec 0c             	sub    esp,0xc
c001455b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001455f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014563:	31 ed                	xor    ebp,ebp
c0014565:	0f af c2             	imul   eax,edx
c0014568:	50                   	push   eax
c0014569:	e8 48 35 ff ff       	call   c0007ab6 <malloc>
c001456e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014570:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014574:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014577:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001457b:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001457f:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014583:	0f af c2             	imul   eax,edx
c0014586:	99                   	cdq    
c0014587:	52                   	push   edx
c0014588:	50                   	push   eax
c0014589:	56                   	push   esi
c001458a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001458d:	83 c4 20             	add    esp,0x20
c0014590:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014598:	0f b7 fd             	movzx  edi,bp
c001459b:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001459f:	73 7d                	jae    c001461e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00145a1:	c1 e7 05             	shl    edi,0x5
c00145a4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00145a8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00145ab:	75 6b                	jne    c0014618 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00145ad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00145b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00145b4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00145b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00145bb:	52                   	push   edx
c00145bc:	31 d2                	xor    edx,edx
c00145be:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00145c1:	52                   	push   edx
c00145c2:	50                   	push   eax
c00145c3:	56                   	push   esi
c00145c4:	e8 69 73 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c00145c9:	83 c4 10             	add    esp,0x10
c00145cc:	85 c0                	test   eax,eax
c00145ce:	74 17                	je     c00145e7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00145d0:	83 ec 0c             	sub    esp,0xc
c00145d3:	68 55 21 02 c0       	push   0xc0022155
c00145d8:	e8 68 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00145dd:	83 c4 10             	add    esp,0x10
c00145e0:	31 c0                	xor    eax,eax
c00145e2:	e9 87 00 00 00       	jmp    c001466e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00145e7:	83 ec 0c             	sub    esp,0xc
c00145ea:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00145ed:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00145f0:	50                   	push   eax
c00145f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00145f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145f9:	56                   	push   esi
c00145fa:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00145fe:	e8 d3 fb ff ff       	call   c00141d6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014603:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014607:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001460b:	83 c4 20             	add    esp,0x20
c001460e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014612:	73 04                	jae    c0014618 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014614:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014618:	45                   	inc    ebp
c0014619:	e9 7a ff ff ff       	jmp    c0014598 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001461e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014622:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001462a:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014630:	83 ec 0c             	sub    esp,0xc
c0014633:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014639:	25 00 f0 ff ff       	and    eax,0xfffff000
c001463e:	05 00 10 00 00       	add    eax,0x1000
c0014643:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014646:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001464a:	e8 77 34 ff ff       	call   c0007ac6 <free>
c001464f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014652:	e8 6f 34 ff ff       	call   c0007ac6 <free>
c0014657:	58                   	pop    eax
c0014658:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001465c:	e8 65 34 ff ff       	call   c0007ac6 <free>
c0014661:	89 34 24             	mov    DWORD PTR [esp],esi
c0014664:	e8 69 72 ff ff       	call   c000b8d2 <File::close()>
c0014669:	83 c4 10             	add    esp,0x10
c001466c:	b0 01                	mov    al,0x1
c001466e:	83 c4 3c             	add    esp,0x3c
c0014671:	5b                   	pop    ebx
c0014672:	5e                   	pop    esi
c0014673:	5f                   	pop    edi
c0014674:	5d                   	pop    ebp
c0014675:	c3                   	ret    

c0014676 <Thr::runtimeReferenceHelper()>:
c0014676:	83 ec 18             	sub    esp,0x18
c0014679:	68 5d 21 02 c0       	push   0xc002215d
c001467e:	e8 c2 62 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014683:	fa                   	cli    
c0014684:	83 c4 10             	add    esp,0x10
c0014687:	eb fe                	jmp    c0014687 <Thr::runtimeReferenceHelper()+0x11>

c0014689 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014689:	57                   	push   edi
c001468a:	56                   	push   esi
c001468b:	53                   	push   ebx
c001468c:	31 db                	xor    ebx,ebx
c001468e:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c0014694:	7e 3c                	jle    c00146d2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014696:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c001469d:	31 ff                	xor    edi,edi
c001469f:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c00146a6:	7e 27                	jle    c00146cf <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00146a8:	50                   	push   eax
c00146a9:	50                   	push   eax
c00146aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00146b0:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c00146b7:	50                   	push   eax
c00146b8:	e8 93 c0 fe ff       	call   c0000750 <strcmp>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	85 c0                	test   eax,eax
c00146c2:	75 05                	jne    c00146c9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00146c4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00146c7:	eb 0b                	jmp    c00146d4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00146c9:	83 c6 10             	add    esi,0x10
c00146cc:	47                   	inc    edi
c00146cd:	eb d0                	jmp    c001469f <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00146cf:	43                   	inc    ebx
c00146d0:	eb bc                	jmp    c001468e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00146d2:	31 c0                	xor    eax,eax
c00146d4:	5b                   	pop    ebx
c00146d5:	5e                   	pop    esi
c00146d6:	5f                   	pop    edi
c00146d7:	c3                   	ret    

c00146d8 <Thr::loadKernelSymbolTable(char const*)>:
c00146d8:	55                   	push   ebp
c00146d9:	57                   	push   edi
c00146da:	56                   	push   esi
c00146db:	53                   	push   ebx
c00146dc:	83 ec 68             	sub    esp,0x68
c00146df:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c00146e5:	68 14 01 00 00       	push   0x114
c00146ea:	e8 c7 33 ff ff       	call   c0007ab6 <malloc>
c00146ef:	83 c4 0c             	add    esp,0xc
c00146f2:	89 c3                	mov    ebx,eax
c00146f4:	56                   	push   esi
c00146f5:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00146f9:	50                   	push   eax
c00146fa:	e8 b9 70 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00146ff:	5e                   	pop    esi
c0014700:	5f                   	pop    edi
c0014701:	6a 01                	push   0x1
c0014703:	53                   	push   ebx
c0014704:	e8 6b 71 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0014709:	83 c4 10             	add    esp,0x10
c001470c:	85 c0                	test   eax,eax
c001470e:	74 0a                	je     c001471a <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014710:	83 ec 0c             	sub    esp,0xc
c0014713:	68 7f 21 02 c0       	push   0xc002217f
c0014718:	eb 34                	jmp    c001474e <Thr::loadKernelSymbolTable(char const*)+0x76>
c001471a:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014722:	83 ec 0c             	sub    esp,0xc
c0014725:	6a 34                	push   0x34
c0014727:	e8 8a 33 ff ff       	call   c0007ab6 <malloc>
c001472c:	59                   	pop    ecx
c001472d:	89 c7                	mov    edi,eax
c001472f:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014733:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014735:	56                   	push   esi
c0014736:	57                   	push   edi
c0014737:	6a 00                	push   0x0
c0014739:	6a 34                	push   0x34
c001473b:	53                   	push   ebx
c001473c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001473f:	83 c4 20             	add    esp,0x20
c0014742:	85 c0                	test   eax,eax
c0014744:	74 17                	je     c001475d <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014746:	83 ec 0c             	sub    esp,0xc
c0014749:	68 96 21 02 c0       	push   0xc0022196
c001474e:	e8 9e cb ff ff       	call   c00112f1 <KePanic(char const*)>
c0014753:	83 c4 10             	add    esp,0x10
c0014756:	31 c0                	xor    eax,eax
c0014758:	e9 31 02 00 00       	jmp    c001498e <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001475d:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014763:	75 e1                	jne    c0014746 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014765:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014768:	85 c0                	test   eax,eax
c001476a:	74 da                	je     c0014746 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001476c:	52                   	push   edx
c001476d:	31 d2                	xor    edx,edx
c001476f:	52                   	push   edx
c0014770:	50                   	push   eax
c0014771:	53                   	push   ebx
c0014772:	e8 bb 71 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014777:	83 c4 10             	add    esp,0x10
c001477a:	85 c0                	test   eax,eax
c001477c:	75 c8                	jne    c0014746 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001477e:	83 ec 0c             	sub    esp,0xc
c0014781:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014785:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014789:	31 ed                	xor    ebp,ebp
c001478b:	0f af c2             	imul   eax,edx
c001478e:	50                   	push   eax
c001478f:	e8 22 33 ff ff       	call   c0007ab6 <malloc>
c0014794:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014796:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001479a:	89 34 24             	mov    DWORD PTR [esp],esi
c001479d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147a1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00147a5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147a9:	0f af c2             	imul   eax,edx
c00147ac:	99                   	cdq    
c00147ad:	52                   	push   edx
c00147ae:	50                   	push   eax
c00147af:	53                   	push   ebx
c00147b0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00147b3:	83 c4 20             	add    esp,0x20
c00147b6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00147be:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00147c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00147ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147d6:	0f b7 f5             	movzx  esi,bp
c00147d9:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00147dd:	0f 83 a7 00 00 00    	jae    c001488a <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00147e3:	6b f6 28             	imul   esi,esi,0x28
c00147e6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00147ea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00147ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00147f1:	50                   	push   eax
c00147f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00147f6:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00147fa:	8b 16                	mov    edx,DWORD PTR [esi]
c00147fc:	6b c0 28             	imul   eax,eax,0x28
c00147ff:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014803:	89 d0                	mov    eax,edx
c0014805:	31 d2                	xor    edx,edx
c0014807:	52                   	push   edx
c0014808:	50                   	push   eax
c0014809:	53                   	push   ebx
c001480a:	e8 23 71 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c001480f:	83 c4 0c             	add    esp,0xc
c0014812:	6a 20                	push   0x20
c0014814:	6a 00                	push   0x0
c0014816:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001481a:	52                   	push   edx
c001481b:	e8 d0 bc fe ff       	call   c00004f0 <memset>
c0014820:	58                   	pop    eax
c0014821:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014823:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014827:	51                   	push   ecx
c0014828:	8d 54 24 40          	lea    edx,[esp+0x40]
c001482c:	52                   	push   edx
c001482d:	6a 00                	push   0x0
c001482f:	6a 1f                	push   0x1f
c0014831:	53                   	push   ebx
c0014832:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014835:	83 c4 18             	add    esp,0x18
c0014838:	68 ad 21 02 c0       	push   0xc00221ad
c001483d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014841:	52                   	push   edx
c0014842:	e8 09 bf fe ff       	call   c0000750 <strcmp>
c0014847:	83 c4 10             	add    esp,0x10
c001484a:	85 c0                	test   eax,eax
c001484c:	75 0f                	jne    c001485d <Thr::loadKernelSymbolTable(char const*)+0x185>
c001484e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014851:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014855:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014859:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001485d:	50                   	push   eax
c001485e:	50                   	push   eax
c001485f:	68 b5 21 02 c0       	push   0xc00221b5
c0014864:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014868:	50                   	push   eax
c0014869:	e8 e2 be fe ff       	call   c0000750 <strcmp>
c001486e:	83 c4 10             	add    esp,0x10
c0014871:	85 c0                	test   eax,eax
c0014873:	75 0f                	jne    c0014884 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014875:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014878:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001487c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014880:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014884:	45                   	inc    ebp
c0014885:	e9 4c ff ff ff       	jmp    c00147d6 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001488a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001488f:	75 10                	jne    c00148a1 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014891:	83 ec 0c             	sub    esp,0xc
c0014894:	68 bd 21 02 c0       	push   0xc00221bd
c0014899:	e8 53 ca ff ff       	call   c00112f1 <KePanic(char const*)>
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00148a6:	75 10                	jne    c00148b8 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	68 bd 21 02 c0       	push   0xc00221bd
c00148b0:	e8 3c ca ff ff       	call   c00112f1 <KePanic(char const*)>
c00148b5:	83 c4 10             	add    esp,0x10
c00148b8:	31 d2                	xor    edx,edx
c00148ba:	50                   	push   eax
c00148bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148bf:	52                   	push   edx
c00148c0:	50                   	push   eax
c00148c1:	53                   	push   ebx
c00148c2:	e8 6b 70 ff ff       	call   c000b932 <File::seek(unsigned long long)>
c00148c7:	5a                   	pop    edx
c00148c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00148cc:	e8 e5 31 ff ff       	call   c0007ab6 <malloc>
c00148d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00148d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00148d9:	31 c9                	xor    ecx,ecx
c00148db:	5e                   	pop    esi
c00148dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148de:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00148e2:	55                   	push   ebp
c00148e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e7:	51                   	push   ecx
c00148e8:	52                   	push   edx
c00148e9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00148ed:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00148f1:	53                   	push   ebx
c00148f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148f5:	83 c4 14             	add    esp,0x14
c00148f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00148fc:	e8 b5 31 ff ff       	call   c0007ab6 <malloc>
c0014901:	89 c6                	mov    esi,eax
c0014903:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014905:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014908:	56                   	push   esi
c0014909:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001490d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014911:	51                   	push   ecx
c0014912:	52                   	push   edx
c0014913:	53                   	push   ebx
c0014914:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014917:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001491b:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c0014921:	83 c4 1c             	add    esp,0x1c
c0014924:	c1 e8 04             	shr    eax,0x4
c0014927:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c001492e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014932:	31 d2                	xor    edx,edx
c0014934:	52                   	push   edx
c0014935:	50                   	push   eax
c0014936:	53                   	push   ebx
c0014937:	e8 f6 6f ff ff       	call   c000b932 <File::seek(unsigned long long)>
c001493c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001493e:	31 d2                	xor    edx,edx
c0014940:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014943:	56                   	push   esi
c0014944:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014948:	52                   	push   edx
c0014949:	50                   	push   eax
c001494a:	53                   	push   ebx
c001494b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001494e:	83 c4 14             	add    esp,0x14
c0014951:	53                   	push   ebx
c0014952:	e8 7b 6f ff ff       	call   c000b8d2 <File::close()>
c0014957:	5d                   	pop    ebp
c0014958:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001495c:	e8 65 31 ff ff       	call   c0007ac6 <free>
c0014961:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014964:	e8 5d 31 ff ff       	call   c0007ac6 <free>
c0014969:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c001496e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014972:	8d 50 01             	lea    edx,[eax+0x1]
c0014975:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c001497c:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c0014983:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014989:	83 c4 10             	add    esp,0x10
c001498c:	b0 01                	mov    al,0x1
c001498e:	83 c4 5c             	add    esp,0x5c
c0014991:	5b                   	pop    ebx
c0014992:	5e                   	pop    esi
c0014993:	5f                   	pop    edi
c0014994:	5d                   	pop    ebp
c0014995:	c3                   	ret    

c0014996 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014996:	55                   	push   ebp
c0014997:	57                   	push   edi
c0014998:	56                   	push   esi
c0014999:	53                   	push   ebx
c001499a:	81 ec 68 03 00 00    	sub    esp,0x368
c00149a0:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00149a7:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c00149ad:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00149b1:	68 14 01 00 00       	push   0x114
c00149b6:	e8 fb 30 ff ff       	call   c0007ab6 <malloc>
c00149bb:	83 c4 0c             	add    esp,0xc
c00149be:	89 c5                	mov    ebp,eax
c00149c0:	53                   	push   ebx
c00149c1:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00149c8:	50                   	push   eax
c00149c9:	e8 ea 6d ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c00149ce:	5e                   	pop    esi
c00149cf:	5f                   	pop    edi
c00149d0:	6a 01                	push   0x1
c00149d2:	55                   	push   ebp
c00149d3:	e8 9c 6e ff ff       	call   c000b874 <File::open(FileOpenMode)>
c00149d8:	83 c4 10             	add    esp,0x10
c00149db:	85 c0                	test   eax,eax
c00149dd:	0f 85 aa 06 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149e3:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00149eb:	83 ec 0c             	sub    esp,0xc
c00149ee:	6a 34                	push   0x34
c00149f0:	e8 c1 30 ff ff       	call   c0007ab6 <malloc>
c00149f5:	5b                   	pop    ebx
c00149f6:	89 c7                	mov    edi,eax
c00149f8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00149fc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00149ff:	53                   	push   ebx
c0014a00:	57                   	push   edi
c0014a01:	6a 00                	push   0x0
c0014a03:	6a 34                	push   0x34
c0014a05:	55                   	push   ebp
c0014a06:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014a09:	83 c4 20             	add    esp,0x20
c0014a0c:	85 c0                	test   eax,eax
c0014a0e:	0f 85 79 06 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a14:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014a1a:	0f 85 6d 06 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a20:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014a23:	85 c0                	test   eax,eax
c0014a25:	0f 84 62 06 00 00    	je     c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a2b:	31 d2                	xor    edx,edx
c0014a2d:	51                   	push   ecx
c0014a2e:	52                   	push   edx
c0014a2f:	50                   	push   eax
c0014a30:	55                   	push   ebp
c0014a31:	e8 fc 6e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014a36:	83 c4 10             	add    esp,0x10
c0014a39:	85 c0                	test   eax,eax
c0014a3b:	0f 85 4c 06 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a41:	83 ec 0c             	sub    esp,0xc
c0014a44:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014a47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014a4b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a4f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a53:	0f af c2             	imul   eax,edx
c0014a56:	50                   	push   eax
c0014a57:	e8 5a 30 ff ff       	call   c0007ab6 <malloc>
c0014a5c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a6a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014a6e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014a72:	0f af c2             	imul   eax,edx
c0014a75:	99                   	cdq    
c0014a76:	52                   	push   edx
c0014a77:	50                   	push   eax
c0014a78:	55                   	push   ebp
c0014a79:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a7c:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014a7f:	83 c4 20             	add    esp,0x20
c0014a82:	85 c0                	test   eax,eax
c0014a84:	0f 84 03 06 00 00    	je     c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a8a:	52                   	push   edx
c0014a8b:	31 d2                	xor    edx,edx
c0014a8d:	52                   	push   edx
c0014a8e:	50                   	push   eax
c0014a8f:	55                   	push   ebp
c0014a90:	e8 9d 6e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014a95:	83 c4 10             	add    esp,0x10
c0014a98:	85 c0                	test   eax,eax
c0014a9a:	0f 85 ed 05 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014aa7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014aab:	31 f6                	xor    esi,esi
c0014aad:	0f af c2             	imul   eax,edx
c0014ab0:	50                   	push   eax
c0014ab1:	e8 00 30 ff ff       	call   c0007ab6 <malloc>
c0014ab6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ab9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014abd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ac0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014ac4:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014ac8:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014acc:	0f af c2             	imul   eax,edx
c0014acf:	99                   	cdq    
c0014ad0:	52                   	push   edx
c0014ad1:	50                   	push   eax
c0014ad2:	55                   	push   ebp
c0014ad3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad6:	83 c4 20             	add    esp,0x20
c0014ad9:	0f b7 de             	movzx  ebx,si
c0014adc:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014ae0:	0f 83 87 00 00 00    	jae    c0014b6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014ae6:	c1 e3 05             	shl    ebx,0x5
c0014ae9:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014aed:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014af0:	75 75                	jne    c0014b67 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014af2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014af5:	31 d2                	xor    edx,edx
c0014af7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014afb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014afe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b02:	50                   	push   eax
c0014b03:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014b06:	52                   	push   edx
c0014b07:	50                   	push   eax
c0014b08:	55                   	push   ebp
c0014b09:	e8 24 6e ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014b0e:	83 c4 10             	add    esp,0x10
c0014b11:	85 c0                	test   eax,eax
c0014b13:	0f 85 74 05 00 00    	jne    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014b19:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014b20:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014b23:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014b27:	31 d2                	xor    edx,edx
c0014b29:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014b2d:	83 ec 0c             	sub    esp,0xc
c0014b30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014b34:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b3b:	50                   	push   eax
c0014b3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014b40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b44:	52                   	push   edx
c0014b45:	50                   	push   eax
c0014b46:	55                   	push   ebp
c0014b47:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b4a:	83 c4 1c             	add    esp,0x1c
c0014b4d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014b50:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014b53:	50                   	push   eax
c0014b54:	6a 00                	push   0x0
c0014b56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014b5a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014b5e:	50                   	push   eax
c0014b5f:	e8 8c b9 fe ff       	call   c00004f0 <memset>
c0014b64:	83 c4 10             	add    esp,0x10
c0014b67:	46                   	inc    esi
c0014b68:	e9 6c ff ff ff       	jmp    c0014ad9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014b6d:	53                   	push   ebx
c0014b6e:	31 db                	xor    ebx,ebx
c0014b70:	68 00 01 00 00       	push   0x100
c0014b75:	6a 00                	push   0x0
c0014b77:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b7b:	50                   	push   eax
c0014b7c:	e8 6f b9 fe ff       	call   c00004f0 <memset>
c0014b81:	83 c4 0c             	add    esp,0xc
c0014b84:	68 00 01 00 00       	push   0x100
c0014b89:	6a 00                	push   0x0
c0014b8b:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b92:	50                   	push   eax
c0014b93:	e8 58 b9 fe ff       	call   c00004f0 <memset>
c0014b98:	83 c4 10             	add    esp,0x10
c0014b9b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014ba3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014bab:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014bb3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014bbb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014bc3:	0f b7 f3             	movzx  esi,bx
c0014bc6:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014bca:	0f 83 2d 01 00 00    	jae    c0014cfd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014bd0:	6b f6 28             	imul   esi,esi,0x28
c0014bd3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014bd7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014bda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bde:	52                   	push   edx
c0014bdf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014be3:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014be7:	8b 06                	mov    eax,DWORD PTR [esi]
c0014be9:	6b d2 28             	imul   edx,edx,0x28
c0014bec:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014bf0:	31 d2                	xor    edx,edx
c0014bf2:	52                   	push   edx
c0014bf3:	50                   	push   eax
c0014bf4:	55                   	push   ebp
c0014bf5:	e8 38 6d ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014bfa:	83 c4 0c             	add    esp,0xc
c0014bfd:	6a 20                	push   0x20
c0014bff:	6a 00                	push   0x0
c0014c01:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c08:	51                   	push   ecx
c0014c09:	e8 e2 b8 fe ff       	call   c00004f0 <memset>
c0014c0e:	59                   	pop    ecx
c0014c0f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014c12:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014c16:	52                   	push   edx
c0014c17:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014c1e:	51                   	push   ecx
c0014c1f:	6a 00                	push   0x0
c0014c21:	6a 1f                	push   0x1f
c0014c23:	55                   	push   ebp
c0014c24:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c27:	83 c4 1c             	add    esp,0x1c
c0014c2a:	6a 09                	push   0x9
c0014c2c:	68 d7 21 02 c0       	push   0xc00221d7
c0014c31:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014c38:	51                   	push   ecx
c0014c39:	e8 42 b7 fe ff       	call   c0000380 <memcmp>
c0014c3e:	83 c4 10             	add    esp,0x10
c0014c41:	85 c0                	test   eax,eax
c0014c43:	75 21                	jne    c0014c66 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014c45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c4d:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014c51:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c58:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c5f:	89 d0                	mov    eax,edx
c0014c61:	40                   	inc    eax
c0014c62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c66:	50                   	push   eax
c0014c67:	6a 09                	push   0x9
c0014c69:	68 e1 21 02 c0       	push   0xc00221e1
c0014c6e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c75:	50                   	push   eax
c0014c76:	e8 05 b7 fe ff       	call   c0000380 <memcmp>
c0014c7b:	83 c4 10             	add    esp,0x10
c0014c7e:	85 c0                	test   eax,eax
c0014c80:	75 21                	jne    c0014ca3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014c82:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c8e:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014c92:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c95:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c9c:	89 d0                	mov    eax,edx
c0014c9e:	40                   	inc    eax
c0014c9f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ca3:	50                   	push   eax
c0014ca4:	50                   	push   eax
c0014ca5:	68 ad 21 02 c0       	push   0xc00221ad
c0014caa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cb1:	50                   	push   eax
c0014cb2:	e8 99 ba fe ff       	call   c0000750 <strcmp>
c0014cb7:	83 c4 10             	add    esp,0x10
c0014cba:	85 c0                	test   eax,eax
c0014cbc:	75 0f                	jne    c0014ccd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014cbe:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014cc1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014cc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014cc9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014ccd:	50                   	push   eax
c0014cce:	50                   	push   eax
c0014ccf:	68 b5 21 02 c0       	push   0xc00221b5
c0014cd4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014cdb:	50                   	push   eax
c0014cdc:	e8 6f ba fe ff       	call   c0000750 <strcmp>
c0014ce1:	83 c4 10             	add    esp,0x10
c0014ce4:	85 c0                	test   eax,eax
c0014ce6:	75 0f                	jne    c0014cf7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014ce8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014ceb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014cf3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014cf7:	43                   	inc    ebx
c0014cf8:	e9 c6 fe ff ff       	jmp    c0014bc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014cfd:	31 d2                	xor    edx,edx
c0014cff:	50                   	push   eax
c0014d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d04:	52                   	push   edx
c0014d05:	50                   	push   eax
c0014d06:	55                   	push   ebp
c0014d07:	e8 26 6c ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014d0c:	58                   	pop    eax
c0014d0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014d11:	e8 a0 2d ff ff       	call   c0007ab6 <malloc>
c0014d16:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d19:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014d1d:	31 d2                	xor    edx,edx
c0014d1f:	58                   	pop    eax
c0014d20:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014d24:	53                   	push   ebx
c0014d25:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014d29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d2d:	52                   	push   edx
c0014d2e:	50                   	push   eax
c0014d2f:	55                   	push   ebp
c0014d30:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d33:	83 c4 14             	add    esp,0x14
c0014d36:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014d3a:	e8 77 2d ff ff       	call   c0007ab6 <malloc>
c0014d3f:	31 d2                	xor    edx,edx
c0014d41:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d45:	83 c4 0c             	add    esp,0xc
c0014d48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d4c:	52                   	push   edx
c0014d4d:	50                   	push   eax
c0014d4e:	55                   	push   ebp
c0014d4f:	e8 de 6b ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014d54:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d57:	31 d2                	xor    edx,edx
c0014d59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014d5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014d64:	52                   	push   edx
c0014d65:	50                   	push   eax
c0014d66:	55                   	push   ebp
c0014d67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d6a:	83 c4 20             	add    esp,0x20
c0014d6d:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014d72:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d7e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d82:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014d86:	0f 84 05 03 00 00    	je     c0015091 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014d8c:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014d93:	31 d2                	xor    edx,edx
c0014d95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d99:	c1 e8 03             	shr    eax,0x3
c0014d9c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014da0:	51                   	push   ecx
c0014da1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014da5:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014da9:	52                   	push   edx
c0014daa:	50                   	push   eax
c0014dab:	55                   	push   ebp
c0014dac:	e8 81 6b ff ff       	call   c000b932 <File::seek(unsigned long long)>
c0014db1:	5b                   	pop    ebx
c0014db2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014db6:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014dbd:	e8 f4 2c ff ff       	call   c0007ab6 <malloc>
c0014dc2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014dc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014dc9:	31 d2                	xor    edx,edx
c0014dcb:	5e                   	pop    esi
c0014dcc:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014dd0:	50                   	push   eax
c0014dd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dd9:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014de0:	52                   	push   edx
c0014de1:	50                   	push   eax
c0014de2:	55                   	push   ebp
c0014de3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014de6:	83 c4 20             	add    esp,0x20
c0014de9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014df1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014df5:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014df9:	0f 8d 76 02 00 00    	jge    c0015075 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014dff:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014e03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e07:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014e0c:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014e0f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014e13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014e17:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014e1b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e1f:	c1 e8 08             	shr    eax,0x8
c0014e22:	89 c6                	mov    esi,eax
c0014e24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014e28:	c1 e6 04             	shl    esi,0x4
c0014e2b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014e2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014e32:	85 db                	test   ebx,ebx
c0014e34:	0f 85 b3 00 00 00    	jne    c0014eed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014e3a:	83 ec 0c             	sub    esp,0xc
c0014e3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e41:	03 06                	add    eax,DWORD PTR [esi]
c0014e43:	50                   	push   eax
c0014e44:	e8 40 f8 ff ff       	call   c0014689 <Thr::getAddressOfKernelSymbol(char const*)>
c0014e49:	83 c4 10             	add    esp,0x10
c0014e4c:	89 c3                	mov    ebx,eax
c0014e4e:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014e53:	85 c0                	test   eax,eax
c0014e55:	0f 85 92 00 00 00    	jne    c0014eed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014e5b:	83 ec 0c             	sub    esp,0xc
c0014e5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e62:	03 06                	add    eax,DWORD PTR [esi]
c0014e64:	50                   	push   eax
c0014e65:	e8 72 c6 ff ff       	call   c00114dc <KeResolveCompatibilitySymbol(char*)>
c0014e6a:	83 c4 10             	add    esp,0x10
c0014e6d:	89 c3                	mov    ebx,eax
c0014e6f:	85 c0                	test   eax,eax
c0014e71:	75 7a                	jne    c0014eed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014e73:	51                   	push   ecx
c0014e74:	51                   	push   ecx
c0014e75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e79:	03 06                	add    eax,DWORD PTR [esi]
c0014e7b:	50                   	push   eax
c0014e7c:	68 eb 21 02 c0       	push   0xc00221eb
c0014e81:	e8 bf 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014e86:	58                   	pop    eax
c0014e87:	5a                   	pop    edx
c0014e88:	68 05 22 02 c0       	push   0xc0022205
c0014e8d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e94:	50                   	push   eax
c0014e95:	e8 a6 b7 fe ff       	call   c0000640 <strcpy>
c0014e9a:	59                   	pop    ecx
c0014e9b:	58                   	pop    eax
c0014e9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014ea0:	03 06                	add    eax,DWORD PTR [esi]
c0014ea2:	50                   	push   eax
c0014ea3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014eaa:	50                   	push   eax
c0014eab:	e8 90 b9 fe ff       	call   c0000840 <strcat>
c0014eb0:	58                   	pop    eax
c0014eb1:	5a                   	pop    edx
c0014eb2:	68 9b 22 02 c0       	push   0xc002229b
c0014eb7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ebe:	50                   	push   eax
c0014ebf:	e8 7c b9 fe ff       	call   c0000840 <strcat>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014ecc:	0f 84 5d 01 00 00    	je     c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014ed2:	83 ec 0c             	sub    esp,0xc
c0014ed5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014edc:	50                   	push   eax
c0014edd:	e8 0f c4 ff ff       	call   c00112f1 <KePanic(char const*)>
c0014ee2:	83 c4 10             	add    esp,0x10
c0014ee5:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014ee9:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014eed:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014ef2:	83 f8 01             	cmp    eax,0x1
c0014ef5:	0f 85 8f 00 00 00    	jne    c0014f8a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014efb:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014f02:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014f06:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014f0a:	01 ce                	add    esi,ecx
c0014f0c:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014f14:	0f 94 c0             	sete   al
c0014f17:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014f1f:	0f 94 c2             	sete   dl
c0014f22:	09 c2                	or     edx,eax
c0014f24:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f26:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f2b:	0f b6 d2             	movzx  edx,dl
c0014f2e:	74 41                	je     c0014f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014f30:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014f33:	85 d2                	test   edx,edx
c0014f35:	75 15                	jne    c0014f4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014f37:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f3b:	66 83 f8 0c          	cmp    ax,0xc
c0014f3f:	76 05                	jbe    c0014f46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014f41:	b8 0c 00 00 00       	mov    eax,0xc
c0014f46:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f4a:	76 37                	jbe    c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014f4c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014f50:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f55:	0f 84 d4 00 00 00    	je     c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f5b:	83 ec 0c             	sub    esp,0xc
c0014f5e:	68 1c 22 02 c0       	push   0xc002221c
c0014f63:	e8 89 c3 ff ff       	call   c00112f1 <KePanic(char const*)>
c0014f68:	83 c4 10             	add    esp,0x10
c0014f6b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014f6f:	eb 12                	jmp    c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014f71:	01 c1                	add    ecx,eax
c0014f73:	85 d2                	test   edx,edx
c0014f75:	75 0c                	jne    c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014f77:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f7b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f7f:	77 02                	ja     c0014f83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014f81:	01 d9                	add    ecx,ebx
c0014f83:	89 0e                	mov    DWORD PTR [esi],ecx
c0014f85:	e9 e2 00 00 00       	jmp    c001506c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f8a:	83 f8 02             	cmp    eax,0x2
c0014f8d:	75 77                	jne    c0015006 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014f8f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014f96:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014f9a:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014f9e:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014fa6:	74 21                	je     c0014fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014fa8:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014fb0:	74 17                	je     c0014fc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014fb2:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014fb6:	b8 0a 00 00 00       	mov    eax,0xa
c0014fbb:	83 fa 0e             	cmp    edx,0xe
c0014fbe:	77 03                	ja     c0014fc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014fc0:	8d 42 fc             	lea    eax,[edx-0x4]
c0014fc3:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014fc7:	76 17                	jbe    c0014fe0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014fc9:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014fce:	74 5f                	je     c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014fd0:	83 ec 0c             	sub    esp,0xc
c0014fd3:	68 38 22 02 c0       	push   0xc0022238
c0014fd8:	e8 14 c3 ff ff       	call   c00112f1 <KePanic(char const*)>
c0014fdd:	83 c4 10             	add    esp,0x10
c0014fe0:	8b 06                	mov    eax,DWORD PTR [esi]
c0014fe2:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014fe7:	74 13                	je     c0014ffc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014fe9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014fed:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014ff4:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014ff8:	01 d0                	add    eax,edx
c0014ffa:	eb 04                	jmp    c0015000 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014ffc:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015000:	01 c3                	add    ebx,eax
c0015002:	89 1e                	mov    DWORD PTR [esi],ebx
c0015004:	eb 66                	jmp    c001506c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015006:	52                   	push   edx
c0015007:	52                   	push   edx
c0015008:	50                   	push   eax
c0015009:	68 54 22 02 c0       	push   0xc0022254
c001500e:	e8 32 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015013:	83 c4 10             	add    esp,0x10
c0015016:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001501b:	74 12                	je     c001502f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001501d:	83 ec 0c             	sub    esp,0xc
c0015020:	68 5f 22 02 c0       	push   0xc002225f
c0015025:	e8 c7 c2 ff ff       	call   c00112f1 <KePanic(char const*)>
c001502a:	83 c4 10             	add    esp,0x10
c001502d:	eb 3d                	jmp    c001506c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001502f:	83 ec 0c             	sub    esp,0xc
c0015032:	55                   	push   ebp
c0015033:	e8 9a 68 ff ff       	call   c000b8d2 <File::close()>
c0015038:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001503b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001503e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015041:	59                   	pop    ecx
c0015042:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015046:	e8 7b 2a ff ff       	call   c0007ac6 <free>
c001504b:	5b                   	pop    ebx
c001504c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015050:	e8 71 2a ff ff       	call   c0007ac6 <free>
c0015055:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015058:	e8 69 2a ff ff       	call   c0007ac6 <free>
c001505d:	5e                   	pop    esi
c001505e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015062:	e8 5f 2a ff ff       	call   c0007ac6 <free>
c0015067:	83 c4 10             	add    esp,0x10
c001506a:	eb 21                	jmp    c001508d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001506c:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015070:	e9 7c fd ff ff       	jmp    c0014df1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015075:	83 ec 0c             	sub    esp,0xc
c0015078:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001507c:	e8 45 2a ff ff       	call   c0007ac6 <free>
c0015081:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015085:	83 c4 10             	add    esp,0x10
c0015088:	e9 f1 fc ff ff       	jmp    c0014d7e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001508d:	31 c0                	xor    eax,eax
c001508f:	eb 33                	jmp    c00150c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015091:	83 ec 0c             	sub    esp,0xc
c0015094:	55                   	push   ebp
c0015095:	e8 38 68 ff ff       	call   c000b8d2 <File::close()>
c001509a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001509d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150a3:	58                   	pop    eax
c00150a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00150a8:	e8 19 2a ff ff       	call   c0007ac6 <free>
c00150ad:	89 3c 24             	mov    DWORD PTR [esp],edi
c00150b0:	e8 11 2a ff ff       	call   c0007ac6 <free>
c00150b5:	5a                   	pop    edx
c00150b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00150ba:	e8 07 2a ff ff       	call   c0007ac6 <free>
c00150bf:	83 c4 10             	add    esp,0x10
c00150c2:	b0 01                	mov    al,0x1
c00150c4:	81 c4 5c 03 00 00    	add    esp,0x35c
c00150ca:	5b                   	pop    ebx
c00150cb:	5e                   	pop    esi
c00150cc:	5f                   	pop    edi
c00150cd:	5d                   	pop    ebp
c00150ce:	c3                   	ret    

c00150cf <Thr::getDriverBaseFromAddress(unsigned long)>:
c00150cf:	56                   	push   esi
c00150d0:	31 d2                	xor    edx,edx
c00150d2:	53                   	push   ebx
c00150d3:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c00150d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150dd:	39 d3                	cmp    ebx,edx
c00150df:	7e 1b                	jle    c00150fc <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00150e1:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c00150e8:	39 c8                	cmp    eax,ecx
c00150ea:	77 0d                	ja     c00150f9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00150ec:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c00150f3:	01 c6                	add    esi,eax
c00150f5:	39 ce                	cmp    esi,ecx
c00150f7:	77 05                	ja     c00150fe <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00150f9:	42                   	inc    edx
c00150fa:	eb e1                	jmp    c00150dd <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00150fc:	31 c0                	xor    eax,eax
c00150fe:	5b                   	pop    ebx
c00150ff:	5e                   	pop    esi
c0015100:	c3                   	ret    

c0015101 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015101:	53                   	push   ebx
c0015102:	31 c0                	xor    eax,eax
c0015104:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015108:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c001510e:	39 c3                	cmp    ebx,eax
c0015110:	7e 22                	jle    c0015134 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015112:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c0015119:	39 ca                	cmp    edx,ecx
c001511b:	77 14                	ja     c0015131 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001511d:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c0015124:	39 ca                	cmp    edx,ecx
c0015126:	76 09                	jbe    c0015131 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015128:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c001512f:	eb 05                	jmp    c0015136 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015131:	40                   	inc    eax
c0015132:	eb da                	jmp    c001510e <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015134:	31 c0                	xor    eax,eax
c0015136:	5b                   	pop    ebx
c0015137:	c3                   	ret    

c0015138 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015138:	53                   	push   ebx
c0015139:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001513d:	53                   	push   ebx
c001513e:	e8 8c ff ff ff       	call   c00150cf <Thr::getDriverBaseFromAddress(unsigned long)>
c0015143:	5a                   	pop    edx
c0015144:	31 d2                	xor    edx,edx
c0015146:	85 c0                	test   eax,eax
c0015148:	74 04                	je     c001514e <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001514a:	89 da                	mov    edx,ebx
c001514c:	29 c2                	sub    edx,eax
c001514e:	89 d0                	mov    eax,edx
c0015150:	5b                   	pop    ebx
c0015151:	c3                   	ret    

c0015152 <Thr::loadDLL(char const*, bool)>:
c0015152:	55                   	push   ebp
c0015153:	57                   	push   edi
c0015154:	56                   	push   esi
c0015155:	53                   	push   ebx
c0015156:	81 ec 34 01 00 00    	sub    esp,0x134
c001515c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015163:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001516a:	56                   	push   esi
c001516b:	68 77 22 02 c0       	push   0xc0022277
c0015170:	e8 d0 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015175:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001517c:	e8 35 29 ff ff       	call   c0007ab6 <malloc>
c0015181:	83 c4 0c             	add    esp,0xc
c0015184:	89 c3                	mov    ebx,eax
c0015186:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001518c:	56                   	push   esi
c001518d:	50                   	push   eax
c001518e:	e8 25 66 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0015193:	83 c4 10             	add    esp,0x10
c0015196:	85 db                	test   ebx,ebx
c0015198:	75 3c                	jne    c00151d6 <Thr::loadDLL(char const*, bool)+0x84>
c001519a:	89 f8                	mov    eax,edi
c001519c:	84 c0                	test   al,al
c001519e:	0f 84 d2 01 00 00    	je     c0015376 <Thr::loadDLL(char const*, bool)+0x224>
c00151a4:	55                   	push   ebp
c00151a5:	55                   	push   ebp
c00151a6:	68 88 22 02 c0       	push   0xc0022288
c00151ab:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00151af:	55                   	push   ebp
c00151b0:	e8 8b b4 fe ff       	call   c0000640 <strcpy>
c00151b5:	58                   	pop    eax
c00151b6:	5a                   	pop    edx
c00151b7:	56                   	push   esi
c00151b8:	55                   	push   ebp
c00151b9:	e8 82 b6 fe ff       	call   c0000840 <strcat>
c00151be:	59                   	pop    ecx
c00151bf:	58                   	pop    eax
c00151c0:	68 9b 22 02 c0       	push   0xc002229b
c00151c5:	55                   	push   ebp
c00151c6:	e8 75 b6 fe ff       	call   c0000840 <strcat>
c00151cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00151ce:	e8 1e c1 ff ff       	call   c00112f1 <KePanic(char const*)>
c00151d3:	83 c4 10             	add    esp,0x10
c00151d6:	51                   	push   ecx
c00151d7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00151db:	50                   	push   eax
c00151dc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00151e0:	50                   	push   eax
c00151e1:	53                   	push   ebx
c00151e2:	e8 8f 69 ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c00151e7:	83 c4 10             	add    esp,0x10
c00151ea:	85 db                	test   ebx,ebx
c00151ec:	74 0c                	je     c00151fa <Thr::loadDLL(char const*, bool)+0xa8>
c00151ee:	83 ec 0c             	sub    esp,0xc
c00151f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151f3:	53                   	push   ebx
c00151f4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00151ff:	75 0a                	jne    c001520b <Thr::loadDLL(char const*, bool)+0xb9>
c0015201:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015205:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015209:	75 3c                	jne    c0015247 <Thr::loadDLL(char const*, bool)+0xf5>
c001520b:	89 f8                	mov    eax,edi
c001520d:	84 c0                	test   al,al
c001520f:	0f 84 49 01 00 00    	je     c001535e <Thr::loadDLL(char const*, bool)+0x20c>
c0015215:	51                   	push   ecx
c0015216:	51                   	push   ecx
c0015217:	68 88 22 02 c0       	push   0xc0022288
c001521c:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015220:	53                   	push   ebx
c0015221:	e8 1a b4 fe ff       	call   c0000640 <strcpy>
c0015226:	5d                   	pop    ebp
c0015227:	58                   	pop    eax
c0015228:	56                   	push   esi
c0015229:	53                   	push   ebx
c001522a:	e8 11 b6 fe ff       	call   c0000840 <strcat>
c001522f:	58                   	pop    eax
c0015230:	5a                   	pop    edx
c0015231:	68 9b 22 02 c0       	push   0xc002229b
c0015236:	53                   	push   ebx
c0015237:	e8 04 b6 fe ff       	call   c0000840 <strcat>
c001523c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001523f:	e8 ad c0 ff ff       	call   c00112f1 <KePanic(char const*)>
c0015244:	83 c4 10             	add    esp,0x10
c0015247:	52                   	push   edx
c0015248:	6a 03                	push   0x3
c001524a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001524e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015252:	05 ff 0f 00 00       	add    eax,0xfff
c0015257:	83 d2 00             	adc    edx,0x0
c001525a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001525e:	50                   	push   eax
c001525f:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015265:	e8 ba 4b ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c001526a:	59                   	pop    ecx
c001526b:	89 c3                	mov    ebx,eax
c001526d:	5d                   	pop    ebp
c001526e:	50                   	push   eax
c001526f:	68 b2 08 02 c0       	push   0xc00208b2
c0015274:	e8 cc 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015279:	89 34 24             	mov    DWORD PTR [esp],esi
c001527c:	e8 ef b2 fe ff       	call   c0000570 <strlen>
c0015281:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c0015287:	40                   	inc    eax
c0015288:	89 04 24             	mov    DWORD PTR [esp],eax
c001528b:	e8 26 28 ff ff       	call   c0007ab6 <malloc>
c0015290:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c0015297:	58                   	pop    eax
c0015298:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c001529d:	5a                   	pop    edx
c001529e:	56                   	push   esi
c001529f:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c00152a6:	e8 95 b3 fe ff       	call   c0000640 <strcpy>
c00152ab:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c00152b0:	8d 50 01             	lea    edx,[eax+0x1]
c00152b3:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c00152ba:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c00152c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152c4:	83 c4 0c             	add    esp,0xc
c00152c7:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c00152ce:	6a 01                	push   0x1
c00152d0:	53                   	push   ebx
c00152d1:	56                   	push   esi
c00152d2:	e8 bf f6 ff ff       	call   c0014996 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00152d7:	83 c4 10             	add    esp,0x10
c00152da:	0f b6 c0             	movzx  eax,al
c00152dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00152e1:	85 c0                	test   eax,eax
c00152e3:	0f 85 89 00 00 00    	jne    c0015372 <Thr::loadDLL(char const*, bool)+0x220>
c00152e9:	89 f8                	mov    eax,edi
c00152eb:	84 c0                	test   al,al
c00152ed:	74 73                	je     c0015362 <Thr::loadDLL(char const*, bool)+0x210>
c00152ef:	83 ec 0c             	sub    esp,0xc
c00152f2:	68 9d 22 02 c0       	push   0xc002229d
c00152f7:	e8 f5 bf ff ff       	call   c00112f1 <KePanic(char const*)>
c00152fc:	83 c4 10             	add    esp,0x10
c00152ff:	eb 61                	jmp    c0015362 <Thr::loadDLL(char const*, bool)+0x210>
c0015301:	50                   	push   eax
c0015302:	50                   	push   eax
c0015303:	89 e8                	mov    eax,ebp
c0015305:	c1 e0 0c             	shl    eax,0xc
c0015308:	01 d8                	add    eax,ebx
c001530a:	50                   	push   eax
c001530b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015311:	e8 f6 45 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015316:	83 c4 10             	add    esp,0x10
c0015319:	8b 00                	mov    eax,DWORD PTR [eax]
c001531b:	a8 60                	test   al,0x60
c001531d:	75 11                	jne    c0015330 <Thr::loadDLL(char const*, bool)+0x1de>
c001531f:	83 ec 0c             	sub    esp,0xc
c0015322:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015327:	50                   	push   eax
c0015328:	e8 29 2a ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	45                   	inc    ebp
c0015331:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015335:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015339:	05 ff 0f 00 00       	add    eax,0xfff
c001533e:	bf 00 00 00 00       	mov    edi,0x0
c0015343:	83 d2 00             	adc    edx,0x0
c0015346:	0f ac d0 0c          	shrd   eax,edx,0xc
c001534a:	c1 ea 0c             	shr    edx,0xc
c001534d:	39 c5                	cmp    ebp,eax
c001534f:	89 d1                	mov    ecx,edx
c0015351:	89 f8                	mov    eax,edi
c0015353:	19 c8                	sbb    eax,ecx
c0015355:	72 aa                	jb     c0015301 <Thr::loadDLL(char const*, bool)+0x1af>
c0015357:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001535c:	75 18                	jne    c0015376 <Thr::loadDLL(char const*, bool)+0x224>
c001535e:	31 db                	xor    ebx,ebx
c0015360:	eb 14                	jmp    c0015376 <Thr::loadDLL(char const*, bool)+0x224>
c0015362:	83 ec 0c             	sub    esp,0xc
c0015365:	68 bc 22 02 c0       	push   0xc00222bc
c001536a:	e8 82 bf ff ff       	call   c00112f1 <KePanic(char const*)>
c001536f:	83 c4 10             	add    esp,0x10
c0015372:	31 ed                	xor    ebp,ebp
c0015374:	eb bb                	jmp    c0015331 <Thr::loadDLL(char const*, bool)+0x1df>
c0015376:	81 c4 2c 01 00 00    	add    esp,0x12c
c001537c:	89 d8                	mov    eax,ebx
c001537e:	5b                   	pop    ebx
c001537f:	5e                   	pop    esi
c0015380:	5f                   	pop    edi
c0015381:	5d                   	pop    ebp
c0015382:	c3                   	ret    

c0015383 <Thr::executeDLL(unsigned long, void*)>:
c0015383:	56                   	push   esi
c0015384:	53                   	push   ebx
c0015385:	52                   	push   edx
c0015386:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001538a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001538e:	85 db                	test   ebx,ebx
c0015390:	75 10                	jne    c00153a2 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0015392:	83 ec 0c             	sub    esp,0xc
c0015395:	68 d8 22 02 c0       	push   0xc00222d8
c001539a:	e8 52 bf ff ff       	call   c00112f1 <KePanic(char const*)>
c001539f:	83 c4 10             	add    esp,0x10
c00153a2:	50                   	push   eax
c00153a3:	50                   	push   eax
c00153a4:	53                   	push   ebx
c00153a5:	68 02 23 02 c0       	push   0xc0022302
c00153aa:	e8 96 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00153af:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00153b3:	89 d8                	mov    eax,ebx
c00153b5:	83 c4 14             	add    esp,0x14
c00153b8:	5b                   	pop    ebx
c00153b9:	5e                   	pop    esi
c00153ba:	ff e0                	jmp    eax

c00153bc <userModeEntryPoint(void*)>:
c00153bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00153c1:	83 e8 01             	sub    eax,0x1
c00153c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00153c9:	75 01                	jne    c00153cc <userModeEntryPoint(void*)+0x10>
c00153cb:	fb                   	sti    
c00153cc:	fb                   	sti    
c00153cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153d2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153d5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00153db:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00153df:	e9 5b ae fe ff       	jmp    c000023f <goToUsermode>

c00153e4 <changeTSS>:
c00153e4:	83 ec 14             	sub    esp,0x14
c00153e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153ec:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00153ef:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00153f4:	c1 e2 15             	shl    edx,0x15
c00153f7:	29 d0                	sub    eax,edx
c00153f9:	50                   	push   eax
c00153fa:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00153ff:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015405:	05 7c 11 00 00       	add    eax,0x117c
c001540a:	50                   	push   eax
c001540b:	e8 44 3b ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015410:	83 c4 1c             	add    esp,0x1c
c0015413:	c3                   	ret    

c0015414 <switchToThread(ThreadControlBlock*)>:
c0015414:	57                   	push   edi
c0015415:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c001541b:	56                   	push   esi
c001541c:	85 c9                	test   ecx,ecx
c001541e:	53                   	push   ebx
c001541f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015423:	0f 85 8b 00 00 00    	jne    c00154b4 <switchToThread(ThreadControlBlock*)+0xa0>
c0015429:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001542d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015433:	74 7b                	je     c00154b0 <switchToThread(ThreadControlBlock*)+0x9c>
c0015435:	b8 00 04 00 00       	mov    eax,0x400
c001543a:	29 d0                	sub    eax,edx
c001543c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001543f:	d1 f8                	sar    eax,1
c0015441:	01 d0                	add    eax,edx
c0015443:	90                   	nop
c0015444:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015447:	e8 1e 28 00 00       	call   c0017c6a <HalQueryPerformanceCounter()>
c001544c:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c0015451:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c0015457:	89 c6                	mov    esi,eax
c0015459:	89 d7                	mov    edi,edx
c001545b:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c0015461:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c0015466:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c001546c:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c0015472:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015478:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001547e:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c0015484:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015487:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001548a:	01 c6                	add    esi,eax
c001548c:	11 d7                	adc    edi,edx
c001548e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015491:	83 ec 0c             	sub    esp,0xc
c0015494:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015497:	53                   	push   ebx
c0015498:	e8 da ad fe ff       	call   c0000277 <switchToThreadASM>
c001549d:	0f 20 c0             	mov    eax,cr0
c00154a0:	83 c8 08             	or     eax,0x8
c00154a3:	0f 22 c0             	mov    cr0,eax
c00154a6:	83 c4 10             	add    esp,0x10
c00154a9:	5b                   	pop    ebx
c00154aa:	5e                   	pop    esi
c00154ab:	5f                   	pop    edi
c00154ac:	c3                   	ret    
c00154ad:	8d 76 00             	lea    esi,[esi+0x0]
c00154b0:	31 c0                	xor    eax,eax
c00154b2:	eb 90                	jmp    c0015444 <switchToThread(ThreadControlBlock*)+0x30>
c00154b4:	5b                   	pop    ebx
c00154b5:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c00154bf:	5e                   	pop    esi
c00154c0:	5f                   	pop    edi
c00154c1:	c3                   	ret    
c00154c2:	66 90                	xchg   ax,ax

c00154c4 <Process::addArgs(char**)>:
c00154c4:	57                   	push   edi
c00154c5:	56                   	push   esi
c00154c6:	53                   	push   ebx
c00154c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00154cb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00154cf:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00154d9:	85 ff                	test   edi,edi
c00154db:	74 4f                	je     c001552c <Process::addArgs(char**)+0x68>
c00154dd:	8b 07                	mov    eax,DWORD PTR [edi]
c00154df:	85 c0                	test   eax,eax
c00154e1:	74 49                	je     c001552c <Process::addArgs(char**)+0x68>
c00154e3:	31 db                	xor    ebx,ebx
c00154e5:	8d 76 00             	lea    esi,[esi+0x0]
c00154e8:	83 ec 0c             	sub    esp,0xc
c00154eb:	50                   	push   eax
c00154ec:	e8 7f b0 fe ff       	call   c0000570 <strlen>
c00154f1:	83 c0 01             	add    eax,0x1
c00154f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00154f7:	e8 ba 25 ff ff       	call   c0007ab6 <malloc>
c00154fc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015503:	5a                   	pop    edx
c0015504:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015507:	59                   	pop    ecx
c0015508:	83 c3 01             	add    ebx,0x1
c001550b:	52                   	push   edx
c001550c:	50                   	push   eax
c001550d:	e8 2e b1 fe ff       	call   c0000640 <strcpy>
c0015512:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015518:	83 c4 10             	add    esp,0x10
c001551b:	83 c1 01             	add    ecx,0x1
c001551e:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015524:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015527:	85 c0                	test   eax,eax
c0015529:	75 bd                	jne    c00154e8 <Process::addArgs(char**)+0x24>
c001552b:	90                   	nop
c001552c:	5b                   	pop    ebx
c001552d:	5e                   	pop    esi
c001552e:	5f                   	pop    edi
c001552f:	c3                   	ret    

c0015530 <Process::Process(char const*, Process*, char**)>:
c0015530:	56                   	push   esi
c0015531:	53                   	push   ebx
c0015532:	83 ec 14             	sub    esp,0x14
c0015535:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015539:	05 0c 02 00 00       	add    eax,0x20c
c001553e:	bb 07 00 00 00       	mov    ebx,0x7
c0015543:	89 c6                	mov    esi,eax
c0015545:	8d 76 00             	lea    esi,[esi+0x0]
c0015548:	85 db                	test   ebx,ebx
c001554a:	78 14                	js     c0015560 <Process::Process(char const*, Process*, char**)+0x30>
c001554c:	83 ec 0c             	sub    esp,0xc
c001554f:	56                   	push   esi
c0015550:	e8 e3 a5 00 00       	call   c001fb38 <ThreadControlBlock::ThreadControlBlock()>
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	83 c6 5f             	add    esi,0x5f
c001555b:	83 eb 01             	sub    ebx,0x1
c001555e:	eb e8                	jmp    c0015548 <Process::Process(char const*, Process*, char**)+0x18>
c0015560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015564:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001556b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015576:	83 ec 0c             	sub    esp,0xc
c0015579:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557d:	e8 64 bb ff ff       	call   c00110e6 <KeNewProcessEnv(Process*)>
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	89 c2                	mov    edx,eax
c0015587:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001558b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015591:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015595:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001559e:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c00155a3:	8d 50 01             	lea    edx,[eax+0x1]
c00155a6:	89 15 20 35 02 c0    	mov    DWORD PTR ds:0xc0023520,edx
c00155ac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155b0:	89 02                	mov    DWORD PTR [edx],eax
c00155b2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00155ba:	83 ec 0c             	sub    esp,0xc
c00155bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00155c1:	e8 f0 24 ff ff       	call   c0007ab6 <malloc>
c00155c6:	83 c4 10             	add    esp,0x10
c00155c9:	89 c3                	mov    ebx,eax
c00155cb:	83 ec 08             	sub    esp,0x8
c00155ce:	6a 00                	push   0x0
c00155d0:	53                   	push   ebx
c00155d1:	e8 92 4a ff ff       	call   c000a068 <VAS::VAS(bool)>
c00155d6:	83 c4 10             	add    esp,0x10
c00155d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155dd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00155e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155e7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00155f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00155f9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00155ff:	e8 06 c1 ff ff       	call   c001170a <KeInitSignals()>
c0015604:	89 c2                	mov    edx,eax
c0015606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560a:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015610:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015614:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001561a:	85 c0                	test   eax,eax
c001561c:	74 42                	je     c0015660 <Process::Process(char const*, Process*, char**)+0x130>
c001561e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015622:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015628:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001562e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015632:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015638:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001563c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015642:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001564c:	05 0c 01 00 00       	add    eax,0x10c
c0015651:	83 ec 08             	sub    esp,0x8
c0015654:	52                   	push   edx
c0015655:	50                   	push   eax
c0015656:	e8 e5 af fe ff       	call   c0000640 <strcpy>
c001565b:	83 c4 10             	add    esp,0x10
c001565e:	eb 64                	jmp    c00156c4 <Process::Process(char const*, Process*, char**)+0x194>
c0015660:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015668:	83 ec 0c             	sub    esp,0xc
c001566b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001566f:	e8 42 24 ff ff       	call   c0007ab6 <malloc>
c0015674:	83 c4 10             	add    esp,0x10
c0015677:	89 c3                	mov    ebx,eax
c0015679:	83 ec 08             	sub    esp,0x8
c001567c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015680:	53                   	push   ebx
c0015681:	e8 e0 35 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001568d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015697:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001569d:	83 ec 0c             	sub    esp,0xc
c00156a0:	50                   	push   eax
c00156a1:	e8 5e 2e ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00156a6:	83 c4 10             	add    esp,0x10
c00156a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156ad:	05 0c 01 00 00       	add    eax,0x10c
c00156b2:	83 ec 08             	sub    esp,0x8
c00156b5:	68 21 23 02 c0       	push   0xc0022321
c00156ba:	50                   	push   eax
c00156bb:	e8 80 af fe ff       	call   c0000640 <strcpy>
c00156c0:	83 c4 10             	add    esp,0x10
c00156c3:	90                   	nop
c00156c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00156c8:	83 c0 0c             	add    eax,0xc
c00156cb:	83 ec 08             	sub    esp,0x8
c00156ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156d2:	50                   	push   eax
c00156d3:	e8 68 af fe ff       	call   c0000640 <strcpy>
c00156d8:	83 c4 10             	add    esp,0x10
c00156db:	83 ec 08             	sub    esp,0x8
c00156de:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00156e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156e6:	e8 d9 fd ff ff       	call   c00154c4 <Process::addArgs(char**)>
c00156eb:	83 c4 10             	add    esp,0x10
c00156ee:	83 ec 08             	sub    esp,0x8
c00156f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156f9:	e8 66 ed ff ff       	call   c0014464 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015705:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015709:	83 f0 01             	xor    eax,0x1
c001570c:	88 c2                	mov    dl,al
c001570e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015712:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015718:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001571d:	83 ec 04             	sub    esp,0x4
c0015720:	50                   	push   eax
c0015721:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015725:	68 78 23 02 c0       	push   0xc0022378
c001572a:	e8 16 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001572f:	83 c4 10             	add    esp,0x10
c0015732:	90                   	nop
c0015733:	83 c4 14             	add    esp,0x14
c0015736:	5b                   	pop    ebx
c0015737:	5e                   	pop    esi
c0015738:	c3                   	ret    
c0015739:	90                   	nop
c001573a:	66 90                	xchg   ax,ax

c001573c <Process::Process(bool, char const*, Process*, char**)>:
c001573c:	56                   	push   esi
c001573d:	53                   	push   ebx
c001573e:	83 ec 24             	sub    esp,0x24
c0015741:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015745:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001574d:	05 0c 02 00 00       	add    eax,0x20c
c0015752:	bb 07 00 00 00       	mov    ebx,0x7
c0015757:	89 c6                	mov    esi,eax
c0015759:	8d 76 00             	lea    esi,[esi+0x0]
c001575c:	85 db                	test   ebx,ebx
c001575e:	78 14                	js     c0015774 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015760:	83 ec 0c             	sub    esp,0xc
c0015763:	56                   	push   esi
c0015764:	e8 cf a3 00 00       	call   c001fb38 <ThreadControlBlock::ThreadControlBlock()>
c0015769:	83 c4 10             	add    esp,0x10
c001576c:	83 c6 5f             	add    esi,0x5f
c001576f:	83 eb 01             	sub    ebx,0x1
c0015772:	eb e8                	jmp    c001575c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015774:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015778:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001577f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015783:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001578a:	83 ec 0c             	sub    esp,0xc
c001578d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015791:	e8 50 b9 ff ff       	call   c00110e6 <KeNewProcessEnv(Process*)>
c0015796:	83 c4 10             	add    esp,0x10
c0015799:	89 c2                	mov    edx,eax
c001579b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001579f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00157a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00157b2:	a1 20 35 02 c0       	mov    eax,ds:0xc0023520
c00157b7:	8d 50 01             	lea    edx,[eax+0x1]
c00157ba:	89 15 20 35 02 c0    	mov    DWORD PTR ds:0xc0023520,edx
c00157c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00157c4:	89 02                	mov    DWORD PTR [edx],eax
c00157c6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00157ce:	83 ec 0c             	sub    esp,0xc
c00157d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157d5:	e8 dc 22 ff ff       	call   c0007ab6 <malloc>
c00157da:	83 c4 10             	add    esp,0x10
c00157dd:	89 c3                	mov    ebx,eax
c00157df:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00157e4:	83 ec 08             	sub    esp,0x8
c00157e7:	50                   	push   eax
c00157e8:	53                   	push   ebx
c00157e9:	e8 7a 48 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00157ee:	83 c4 10             	add    esp,0x10
c00157f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157f5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00157fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ff:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015809:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001580d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015811:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015817:	e8 ee be ff ff       	call   c001170a <KeInitSignals()>
c001581c:	89 c2                	mov    edx,eax
c001581e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015822:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015828:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001582c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015832:	85 c0                	test   eax,eax
c0015834:	74 42                	je     c0015878 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001583a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015840:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015846:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001584a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015854:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001585a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015860:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015864:	05 0c 01 00 00       	add    eax,0x10c
c0015869:	83 ec 08             	sub    esp,0x8
c001586c:	52                   	push   edx
c001586d:	50                   	push   eax
c001586e:	e8 cd ad fe ff       	call   c0000640 <strcpy>
c0015873:	83 c4 10             	add    esp,0x10
c0015876:	eb 64                	jmp    c00158dc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015878:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015887:	e8 2a 22 ff ff       	call   c0007ab6 <malloc>
c001588c:	83 c4 10             	add    esp,0x10
c001588f:	89 c3                	mov    ebx,eax
c0015891:	83 ec 08             	sub    esp,0x8
c0015894:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015898:	53                   	push   ebx
c0015899:	e8 c8 33 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001589e:	83 c4 10             	add    esp,0x10
c00158a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158a5:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00158ab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158af:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158b5:	83 ec 0c             	sub    esp,0xc
c00158b8:	50                   	push   eax
c00158b9:	e8 46 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00158be:	83 c4 10             	add    esp,0x10
c00158c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158c5:	05 0c 01 00 00       	add    eax,0x10c
c00158ca:	83 ec 08             	sub    esp,0x8
c00158cd:	68 21 23 02 c0       	push   0xc0022321
c00158d2:	50                   	push   eax
c00158d3:	e8 68 ad fe ff       	call   c0000640 <strcpy>
c00158d8:	83 c4 10             	add    esp,0x10
c00158db:	90                   	nop
c00158dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00158e0:	83 c0 0c             	add    eax,0xc
c00158e3:	83 ec 08             	sub    esp,0x8
c00158e6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00158ea:	50                   	push   eax
c00158eb:	e8 50 ad fe ff       	call   c0000640 <strcpy>
c00158f0:	83 c4 10             	add    esp,0x10
c00158f3:	83 ec 08             	sub    esp,0x8
c00158f6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00158fa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00158fe:	e8 c1 fb ff ff       	call   c00154c4 <Process::addArgs(char**)>
c0015903:	83 c4 10             	add    esp,0x10
c0015906:	90                   	nop
c0015907:	83 c4 24             	add    esp,0x24
c001590a:	5b                   	pop    ebx
c001590b:	5e                   	pop    esi
c001590c:	c3                   	ret    
c001590d:	8d 76 00             	lea    esi,[esi+0x0]

c0015910 <taskStartupFunction>:
c0015910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015915:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015918:	c3                   	ret    
c0015919:	90                   	nop
c001591a:	66 90                	xchg   ax,ax

c001591c <Semaphore::Semaphore(int)>:
c001591c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015920:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015924:	89 10                	mov    DWORD PTR [eax],edx
c0015926:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001592a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015931:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015935:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001593c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015940:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015947:	90                   	nop
c0015948:	c3                   	ret    
c0015949:	90                   	nop
c001594a:	66 90                	xchg   ax,ax

c001594c <Mutex::Mutex()>:
c001594c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015950:	6a 01                	push   0x1
c0015952:	50                   	push   eax
c0015953:	e8 c4 ff ff ff       	call   c001591c <Semaphore::Semaphore(int)>
c0015958:	83 c4 08             	add    esp,0x8
c001595b:	90                   	nop
c001595c:	c3                   	ret    
c001595d:	90                   	nop
c001595e:	66 90                	xchg   ax,ax

c0015960 <Process::createThread(void (*)(void*), void*, int)>:
c0015960:	57                   	push   edi
c0015961:	31 c9                	xor    ecx,ecx
c0015963:	56                   	push   esi
c0015964:	53                   	push   ebx
c0015965:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015969:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015970:	89 f2                	mov    edx,esi
c0015972:	66 90                	xchg   ax,ax
c0015974:	0f b7 c2             	movzx  eax,dx
c0015977:	80 e2 01             	and    dl,0x1
c001597a:	74 14                	je     c0015990 <Process::createThread(void (*)(void*), void*, int)+0x30>
c001597c:	d1 f8                	sar    eax,1
c001597e:	83 c1 01             	add    ecx,0x1
c0015981:	89 c2                	mov    edx,eax
c0015983:	83 f9 10             	cmp    ecx,0x10
c0015986:	75 ec                	jne    c0015974 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015988:	31 db                	xor    ebx,ebx
c001598a:	89 d8                	mov    eax,ebx
c001598c:	5b                   	pop    ebx
c001598d:	5e                   	pop    esi
c001598e:	5f                   	pop    edi
c001598f:	c3                   	ret    
c0015990:	b8 01 00 00 00       	mov    eax,0x1
c0015995:	d3 e0                	shl    eax,cl
c0015997:	09 c6                	or     esi,eax
c0015999:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001599c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00159a3:	01 c0                	add    eax,eax
c00159a5:	01 c8                	add    eax,ecx
c00159a7:	8d 04 80             	lea    eax,[eax+eax*4]
c00159aa:	01 d8                	add    eax,ebx
c00159ac:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00159b3:	75 0b                	jne    c00159c0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00159b5:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00159bf:	90                   	nop
c00159c0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00159cc:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00159cf:	01 c0                	add    eax,eax
c00159d1:	01 c8                	add    eax,ecx
c00159d3:	8d 3c 80             	lea    edi,[eax+eax*4]
c00159d6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00159d9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00159df:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00159e5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00159e9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00159ef:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00159f5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00159fb:	89 ca                	mov    edx,ecx
c00159fd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015a04:	f7 da                	neg    edx
c0015a06:	c1 e2 15             	shl    edx,0x15
c0015a09:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015a0f:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015a15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015a19:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015a23:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015a29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a2d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015a33:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015a3d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015a47:	68 00 01 00 00       	push   0x100
c0015a4c:	e8 65 20 ff ff       	call   c0007ab6 <malloc>
c0015a51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015a54:	58                   	pop    eax
c0015a55:	5a                   	pop    edx
c0015a56:	53                   	push   ebx
c0015a57:	68 e4 96 02 c0       	push   0xc00296e4
c0015a5c:	e8 6f 9e 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a61:	83 c4 10             	add    esp,0x10
c0015a64:	89 d8                	mov    eax,ebx
c0015a66:	5b                   	pop    ebx
c0015a67:	5e                   	pop    esi
c0015a68:	5f                   	pop    edi
c0015a69:	c3                   	ret    
c0015a6a:	66 90                	xchg   ax,ax

c0015a6c <Process::createUserThread()>:
c0015a6c:	83 ec 0c             	sub    esp,0xc
c0015a6f:	68 80 00 00 00       	push   0x80
c0015a74:	6a 00                	push   0x0
c0015a76:	68 bc 53 01 c0       	push   0xc00153bc
c0015a7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a7f:	50                   	push   eax
c0015a80:	e8 db fe ff ff       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c0015a85:	83 c4 1c             	add    esp,0x1c
c0015a88:	c3                   	ret    
c0015a89:	8d 76 00             	lea    esi,[esi+0x0]

c0015a8c <setupMultitasking(void (*)())>:
c0015a8c:	56                   	push   esi
c0015a8d:	53                   	push   ebx
c0015a8e:	83 ec 04             	sub    esp,0x4
c0015a91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a95:	eb 11                	jmp    c0015aa8 <setupMultitasking(void (*)())+0x1c>
c0015a97:	90                   	nop
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 e4 96 02 c0       	push   0xc00296e4
c0015aa0:	e8 6f 9d 00 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015aa5:	83 c4 10             	add    esp,0x10
c0015aa8:	83 ec 0c             	sub    esp,0xc
c0015aab:	68 e4 96 02 c0       	push   0xc00296e4
c0015ab0:	e8 3b 9d 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ab5:	83 c4 10             	add    esp,0x10
c0015ab8:	84 c0                	test   al,al
c0015aba:	74 dc                	je     c0015a98 <setupMultitasking(void (*)())+0xc>
c0015abc:	83 ec 0c             	sub    esp,0xc
c0015abf:	68 24 07 00 00       	push   0x724
c0015ac4:	e8 ed 1f ff ff       	call   c0007ab6 <malloc>
c0015ac9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015ad0:	89 c3                	mov    ebx,eax
c0015ad2:	6a 00                	push   0x0
c0015ad4:	68 25 23 02 c0       	push   0xc0022325
c0015ad9:	6a 01                	push   0x1
c0015adb:	50                   	push   eax
c0015adc:	e8 5b fc ff ff       	call   c001573c <Process::Process(bool, char const*, Process*, char**)>
c0015ae1:	83 c4 14             	add    esp,0x14
c0015ae4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015aea:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015af0:	50                   	push   eax
c0015af1:	e8 63 2c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015af6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015afd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015b07:	83 c8 01             	or     eax,0x1
c0015b0a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015b11:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015b17:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015b1a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015b24:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015b2a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015b30:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015b3a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015b44:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015b4e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015b54:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015b5e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015b64:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015b6e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015b75:	e8 3c 1f ff ff       	call   c0007ab6 <malloc>
c0015b7a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015b80:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015b86:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b8c:	5a                   	pop    edx
c0015b8d:	59                   	pop    ecx
c0015b8e:	68 21 23 02 c0       	push   0xc0022321
c0015b93:	50                   	push   eax
c0015b94:	e8 a7 aa fe ff       	call   c0000640 <strcpy>
c0015b99:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015ba0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015ba4:	83 c4 14             	add    esp,0x14
c0015ba7:	5b                   	pop    ebx
c0015ba8:	5e                   	pop    esi
c0015ba9:	e9 bb a6 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015bae:	66 90                	xchg   ax,ax

c0015bb0 <schedule()>:
c0015bb0:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015bb6:	85 d2                	test   edx,edx
c0015bb8:	74 0e                	je     c0015bc8 <schedule()+0x18>
c0015bba:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015bc4:	c3                   	ret    
c0015bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0015bc8:	53                   	push   ebx
c0015bc9:	83 ec 14             	sub    esp,0x14
c0015bcc:	68 e4 96 02 c0       	push   0xc00296e4
c0015bd1:	e8 1a 9c 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015bd6:	83 c4 10             	add    esp,0x10
c0015bd9:	84 c0                	test   al,al
c0015bdb:	75 3f                	jne    c0015c1c <schedule()+0x6c>
c0015bdd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015be2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015be5:	83 fa 01             	cmp    edx,0x1
c0015be8:	74 3a                	je     c0015c24 <schedule()+0x74>
c0015bea:	66 90                	xchg   ax,ax
c0015bec:	83 ec 0c             	sub    esp,0xc
c0015bef:	68 e4 96 02 c0       	push   0xc00296e4
c0015bf4:	e8 13 9c 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015bf9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015c00:	89 c3                	mov    ebx,eax
c0015c02:	e8 0d 9c 00 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015c07:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015c0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c11:	e8 fe f7 ff ff       	call   c0015414 <switchToThread(ThreadControlBlock*)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	8d 76 00             	lea    esi,[esi+0x0]
c0015c1c:	83 c4 08             	add    esp,0x8
c0015c1f:	5b                   	pop    ebx
c0015c20:	c3                   	ret    
c0015c21:	8d 76 00             	lea    esi,[esi+0x0]
c0015c24:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015c2b:	83 ec 08             	sub    esp,0x8
c0015c2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c33:	50                   	push   eax
c0015c34:	68 e4 96 02 c0       	push   0xc00296e4
c0015c39:	e8 92 9c 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c3e:	83 c4 10             	add    esp,0x10
c0015c41:	eb a9                	jmp    c0015bec <schedule()+0x3c>
c0015c43:	90                   	nop

c0015c44 <Semaphore::tryAcquire()>:
c0015c44:	53                   	push   ebx
c0015c45:	83 ec 08             	sub    esp,0x8
c0015c48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015c4c:	fa                   	cli    
c0015c4d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c52:	8d 50 01             	lea    edx,[eax+0x1]
c0015c55:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015c5b:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015c61:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015c64:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015c6a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015c6d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015c6f:	7c 33                	jl     c0015ca4 <Semaphore::tryAcquire()+0x60>
c0015c71:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015c77:	85 d2                	test   edx,edx
c0015c79:	75 0d                	jne    c0015c88 <Semaphore::tryAcquire()+0x44>
c0015c7b:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015c81:	85 d2                	test   edx,edx
c0015c83:	75 6f                	jne    c0015cf4 <Semaphore::tryAcquire()+0xb0>
c0015c85:	8d 76 00             	lea    esi,[esi+0x0]
c0015c88:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c8d:	85 c0                	test   eax,eax
c0015c8f:	74 0b                	je     c0015c9c <Semaphore::tryAcquire()+0x58>
c0015c91:	8d 76 00             	lea    esi,[esi+0x0]
c0015c94:	31 c0                	xor    eax,eax
c0015c96:	83 c4 08             	add    esp,0x8
c0015c99:	5b                   	pop    ebx
c0015c9a:	c3                   	ret    
c0015c9b:	90                   	nop
c0015c9c:	fb                   	sti    
c0015c9d:	83 c4 08             	add    esp,0x8
c0015ca0:	5b                   	pop    ebx
c0015ca1:	c3                   	ret    
c0015ca2:	66 90                	xchg   ax,ax
c0015ca4:	83 c3 01             	add    ebx,0x1
c0015ca7:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015cad:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015cb0:	85 d2                	test   edx,edx
c0015cb2:	75 24                	jne    c0015cd8 <Semaphore::tryAcquire()+0x94>
c0015cb4:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015cba:	85 c9                	test   ecx,ecx
c0015cbc:	74 1a                	je     c0015cd8 <Semaphore::tryAcquire()+0x94>
c0015cbe:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cc8:	e8 e3 fe ff ff       	call   c0015bb0 <schedule()>
c0015ccd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015cd2:	83 e8 01             	sub    eax,0x1
c0015cd5:	8d 76 00             	lea    esi,[esi+0x0]
c0015cd8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015cdd:	85 c0                	test   eax,eax
c0015cdf:	75 0b                	jne    c0015cec <Semaphore::tryAcquire()+0xa8>
c0015ce1:	fb                   	sti    
c0015ce2:	b0 01                	mov    al,0x1
c0015ce4:	83 c4 08             	add    esp,0x8
c0015ce7:	5b                   	pop    ebx
c0015ce8:	c3                   	ret    
c0015ce9:	8d 76 00             	lea    esi,[esi+0x0]
c0015cec:	b0 01                	mov    al,0x1
c0015cee:	83 c4 08             	add    esp,0x8
c0015cf1:	5b                   	pop    ebx
c0015cf2:	c3                   	ret    
c0015cf3:	90                   	nop
c0015cf4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015cfe:	e8 ad fe ff ff       	call   c0015bb0 <schedule()>
c0015d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d08:	83 e8 01             	sub    eax,0x1
c0015d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d10:	85 c0                	test   eax,eax
c0015d12:	75 80                	jne    c0015c94 <Semaphore::tryAcquire()+0x50>
c0015d14:	eb 86                	jmp    c0015c9c <Semaphore::tryAcquire()+0x58>
c0015d16:	66 90                	xchg   ax,ax

c0015d18 <Semaphore::assertLocked(char const*)>:
c0015d18:	83 ec 0c             	sub    esp,0xc
c0015d1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d1f:	fa                   	cli    
c0015d20:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015d26:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d2b:	83 c1 01             	add    ecx,0x1
c0015d2e:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015d34:	8d 48 01             	lea    ecx,[eax+0x1]
c0015d37:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015d3d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015d3f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015d42:	7c 28                	jl     c0015d6c <Semaphore::assertLocked(char const*)+0x54>
c0015d44:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015d49:	85 c0                	test   eax,eax
c0015d4b:	75 0b                	jne    c0015d58 <Semaphore::assertLocked(char const*)+0x40>
c0015d4d:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015d52:	85 c0                	test   eax,eax
c0015d54:	75 32                	jne    c0015d88 <Semaphore::assertLocked(char const*)+0x70>
c0015d56:	66 90                	xchg   ax,ax
c0015d58:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d5d:	83 e8 01             	sub    eax,0x1
c0015d60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d65:	75 01                	jne    c0015d68 <Semaphore::assertLocked(char const*)+0x50>
c0015d67:	fb                   	sti    
c0015d68:	83 c4 0c             	add    esp,0xc
c0015d6b:	c3                   	ret    
c0015d6c:	83 ec 0c             	sub    esp,0xc
c0015d6f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d73:	52                   	push   edx
c0015d74:	e8 78 b5 ff ff       	call   c00112f1 <KePanic(char const*)>
c0015d79:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	83 e8 01             	sub    eax,0x1
c0015d84:	eb be                	jmp    c0015d44 <Semaphore::assertLocked(char const*)+0x2c>
c0015d86:	66 90                	xchg   ax,ax
c0015d88:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d92:	e8 19 fe ff ff       	call   c0015bb0 <schedule()>
c0015d97:	eb bf                	jmp    c0015d58 <Semaphore::assertLocked(char const*)+0x40>
c0015d99:	8d 76 00             	lea    esi,[esi+0x0]

c0015d9c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d9c:	83 ec 0c             	sub    esp,0xc
c0015d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015da8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015dab:	e8 00 fe ff ff       	call   c0015bb0 <schedule()>
c0015db0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015db5:	83 e8 01             	sub    eax,0x1
c0015db8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dbd:	75 01                	jne    c0015dc0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015dbf:	fb                   	sti    
c0015dc0:	83 c4 0c             	add    esp,0xc
c0015dc3:	c3                   	ret    

c0015dc4 <blockTask(TaskState)>:
c0015dc4:	83 ec 0c             	sub    esp,0xc
c0015dc7:	fa                   	cli    
c0015dc8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015dcd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015dd1:	83 c0 01             	add    eax,0x1
c0015dd4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015dd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dde:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015de1:	e8 ca fd ff ff       	call   c0015bb0 <schedule()>
c0015de6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015deb:	83 e8 01             	sub    eax,0x1
c0015dee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015df3:	75 03                	jne    c0015df8 <blockTask(TaskState)+0x34>
c0015df5:	fb                   	sti    
c0015df6:	66 90                	xchg   ax,ax
c0015df8:	83 c4 0c             	add    esp,0xc
c0015dfb:	c3                   	ret    

c0015dfc <waitTask(int, int*, int)>:
c0015dfc:	83 ec 18             	sub    esp,0x18
c0015dff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e04:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015e08:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015e0b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015e0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e14:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015e17:	6a 07                	push   0x7
c0015e19:	e8 a6 ff ff ff       	call   c0015dc4 <blockTask(TaskState)>
c0015e1e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e23:	83 c4 10             	add    esp,0x10
c0015e26:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015e29:	85 d2                	test   edx,edx
c0015e2b:	74 0b                	je     c0015e38 <waitTask(int, int*, int)+0x3c>
c0015e2d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015e30:	89 02                	mov    DWORD PTR [edx],eax
c0015e32:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e37:	90                   	nop
c0015e38:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015e3b:	83 c4 0c             	add    esp,0xc
c0015e3e:	c3                   	ret    
c0015e3f:	90                   	nop

c0015e40 <milliTenthSleepUntil(unsigned int)>:
c0015e40:	83 ec 0c             	sub    esp,0xc
c0015e43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e47:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015e4d:	76 05                	jbe    c0015e54 <milliTenthSleepUntil(unsigned int)+0x14>
c0015e4f:	90                   	nop
c0015e50:	83 c4 0c             	add    esp,0xc
c0015e53:	c3                   	ret    
c0015e54:	fa                   	cli    
c0015e55:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015e5b:	83 ec 08             	sub    esp,0x8
c0015e5e:	83 c2 01             	add    edx,0x1
c0015e61:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015e67:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015e6d:	83 c1 01             	add    ecx,0x1
c0015e70:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015e76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e7c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015e7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e84:	50                   	push   eax
c0015e85:	68 d8 96 02 c0       	push   0xc00296d8
c0015e8a:	e8 41 9a 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e8f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015e96:	e8 29 ff ff ff       	call   c0015dc4 <blockTask(TaskState)>
c0015e9b:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015ea0:	83 c4 10             	add    esp,0x10
c0015ea3:	83 e8 01             	sub    eax,0x1
c0015ea6:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015eab:	85 c0                	test   eax,eax
c0015ead:	75 09                	jne    c0015eb8 <milliTenthSleepUntil(unsigned int)+0x78>
c0015eaf:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015eb4:	85 c0                	test   eax,eax
c0015eb6:	75 14                	jne    c0015ecc <milliTenthSleepUntil(unsigned int)+0x8c>
c0015eb8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ebd:	83 e8 01             	sub    eax,0x1
c0015ec0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ec5:	75 89                	jne    c0015e50 <milliTenthSleepUntil(unsigned int)+0x10>
c0015ec7:	fb                   	sti    
c0015ec8:	83 c4 0c             	add    esp,0xc
c0015ecb:	c3                   	ret    
c0015ecc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015ed6:	e8 d5 fc ff ff       	call   c0015bb0 <schedule()>
c0015edb:	eb db                	jmp    c0015eb8 <milliTenthSleepUntil(unsigned int)+0x78>
c0015edd:	8d 76 00             	lea    esi,[esi+0x0]

c0015ee0 <milliTenthSleep(unsigned int)>:
c0015ee0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ee4:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015ee9:	01 c2                	add    edx,eax
c0015eeb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015eef:	e9 4c ff ff ff       	jmp    c0015e40 <milliTenthSleepUntil(unsigned int)>

c0015ef4 <sleep(unsigned int)>:
c0015ef4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ef8:	8d 04 80             	lea    eax,[eax+eax*4]
c0015efb:	8d 04 80             	lea    eax,[eax+eax*4]
c0015efe:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f01:	8d 04 80             	lea    eax,[eax+eax*4]
c0015f04:	c1 e0 04             	shl    eax,0x4
c0015f07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015f0b:	eb d3                	jmp    c0015ee0 <milliTenthSleep(unsigned int)>
c0015f0d:	90                   	nop
c0015f0e:	66 90                	xchg   ax,ax

c0015f10 <Semaphore::acquire()>:
c0015f10:	83 ec 0c             	sub    esp,0xc
c0015f13:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f17:	fa                   	cli    
c0015f18:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f1d:	83 c0 01             	add    eax,0x1
c0015f20:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f25:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f2a:	8d 48 01             	lea    ecx,[eax+0x1]
c0015f2d:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015f33:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015f36:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015f38:	7d 2e                	jge    c0015f68 <Semaphore::acquire()+0x58>
c0015f3a:	83 c1 01             	add    ecx,0x1
c0015f3d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015f40:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015f45:	85 c0                	test   eax,eax
c0015f47:	75 0b                	jne    c0015f54 <Semaphore::acquire()+0x44>
c0015f49:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015f4e:	85 c0                	test   eax,eax
c0015f50:	75 66                	jne    c0015fb8 <Semaphore::acquire()+0xa8>
c0015f52:	66 90                	xchg   ax,ax
c0015f54:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f59:	83 e8 01             	sub    eax,0x1
c0015f5c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f61:	75 01                	jne    c0015f64 <Semaphore::acquire()+0x54>
c0015f63:	fb                   	sti    
c0015f64:	83 c4 0c             	add    esp,0xc
c0015f67:	c3                   	ret    
c0015f68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f6d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015f74:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015f77:	85 c9                	test   ecx,ecx
c0015f79:	74 51                	je     c0015fcc <Semaphore::acquire()+0xbc>
c0015f7b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015f7e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f84:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f87:	90                   	nop
c0015f88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f8d:	83 ec 0c             	sub    esp,0xc
c0015f90:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015f93:	68 a4 23 02 c0       	push   0xc00223a4
c0015f98:	e8 a8 49 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015f9d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015fa4:	e8 1b fe ff ff       	call   c0015dc4 <blockTask(TaskState)>
c0015fa9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015fae:	83 c4 10             	add    esp,0x10
c0015fb1:	83 e8 01             	sub    eax,0x1
c0015fb4:	eb 8a                	jmp    c0015f40 <Semaphore::acquire()+0x30>
c0015fb6:	66 90                	xchg   ax,ax
c0015fb8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015fc2:	e8 e9 fb ff ff       	call   c0015bb0 <schedule()>
c0015fc7:	eb 8b                	jmp    c0015f54 <Semaphore::acquire()+0x44>
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fcc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fd1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015fd4:	eb b2                	jmp    c0015f88 <Semaphore::acquire()+0x78>
c0015fd6:	66 90                	xchg   ax,ax

c0015fd8 <taskReturned>:
c0015fd8:	83 ec 18             	sub    esp,0x18
c0015fdb:	68 c4 23 02 c0       	push   0xc00223c4
c0015fe0:	e8 0c b3 ff ff       	call   c00112f1 <KePanic(char const*)>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	83 ec 0c             	sub    esp,0xc
c0015feb:	6a 02                	push   0x2
c0015fed:	e8 d2 fd ff ff       	call   c0015dc4 <blockTask(TaskState)>
c0015ff2:	fa                   	cli    
c0015ff3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ff8:	83 c0 01             	add    eax,0x1
c0015ffb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016000:	e8 ab fb ff ff       	call   c0015bb0 <schedule()>
c0016005:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001600a:	83 c4 10             	add    esp,0x10
c001600d:	83 e8 01             	sub    eax,0x1
c0016010:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016015:	85 c0                	test   eax,eax
c0016017:	75 cf                	jne    c0015fe8 <taskReturned+0x10>
c0016019:	fb                   	sti    
c001601a:	eb cc                	jmp    c0015fe8 <taskReturned+0x10>

c001601c <Thr::processFromPID(int)>:
c001601c:	57                   	push   edi
c001601d:	56                   	push   esi
c001601e:	53                   	push   ebx
c001601f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016023:	fa                   	cli    
c0016024:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c001602a:	83 ec 0c             	sub    esp,0xc
c001602d:	83 c1 01             	add    ecx,0x1
c0016030:	68 e4 96 02 c0       	push   0xc00296e4
c0016035:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c001603b:	e8 cc 97 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016040:	83 c4 10             	add    esp,0x10
c0016043:	89 c7                	mov    edi,eax
c0016045:	eb 15                	jmp    c001605c <Thr::processFromPID(int)+0x40>
c0016047:	90                   	nop
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 e4 96 02 c0       	push   0xc00296e4
c0016050:	e8 b7 97 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	39 f8                	cmp    eax,edi
c001605a:	74 50                	je     c00160ac <Thr::processFromPID(int)+0x90>
c001605c:	83 ec 0c             	sub    esp,0xc
c001605f:	68 e4 96 02 c0       	push   0xc00296e4
c0016064:	e8 a3 97 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016069:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016070:	89 c3                	mov    ebx,eax
c0016072:	e8 9d 97 00 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016077:	58                   	pop    eax
c0016078:	5a                   	pop    edx
c0016079:	53                   	push   ebx
c001607a:	68 e4 96 02 c0       	push   0xc00296e4
c001607f:	e8 4c 98 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016084:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016087:	83 c4 10             	add    esp,0x10
c001608a:	39 30                	cmp    DWORD PTR [eax],esi
c001608c:	75 ba                	jne    c0016048 <Thr::processFromPID(int)+0x2c>
c001608e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016093:	83 e8 01             	sub    eax,0x1
c0016096:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001609b:	74 0b                	je     c00160a8 <Thr::processFromPID(int)+0x8c>
c001609d:	8d 76 00             	lea    esi,[esi+0x0]
c00160a0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160a3:	5b                   	pop    ebx
c00160a4:	5e                   	pop    esi
c00160a5:	5f                   	pop    edi
c00160a6:	c3                   	ret    
c00160a7:	90                   	nop
c00160a8:	fb                   	sti    
c00160a9:	eb f5                	jmp    c00160a0 <Thr::processFromPID(int)+0x84>
c00160ab:	90                   	nop
c00160ac:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160b1:	83 e8 01             	sub    eax,0x1
c00160b4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160b9:	75 05                	jne    c00160c0 <Thr::processFromPID(int)+0xa4>
c00160bb:	fb                   	sti    
c00160bc:	5b                   	pop    ebx
c00160bd:	5e                   	pop    esi
c00160be:	5f                   	pop    edi
c00160bf:	c3                   	ret    
c00160c0:	5b                   	pop    ebx
c00160c1:	31 c0                	xor    eax,eax
c00160c3:	5e                   	pop    esi
c00160c4:	5f                   	pop    edi
c00160c5:	c3                   	ret    
c00160c6:	66 90                	xchg   ax,ax

c00160c8 <unblockTask(ThreadControlBlock*)>:
c00160c8:	53                   	push   ebx
c00160c9:	83 ec 08             	sub    esp,0x8
c00160cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160d0:	fa                   	cli    
c00160d1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160d6:	83 c0 01             	add    eax,0x1
c00160d9:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160de:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160e1:	85 c0                	test   eax,eax
c00160e3:	74 67                	je     c001614c <unblockTask(ThreadControlBlock*)+0x84>
c00160e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00160e8:	83 f8 01             	cmp    eax,0x1
c00160eb:	74 37                	je     c0016124 <unblockTask(ThreadControlBlock*)+0x5c>
c00160ed:	83 ec 0c             	sub    esp,0xc
c00160f0:	68 e4 96 02 c0       	push   0xc00296e4
c00160f5:	e8 12 97 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160fa:	83 c4 10             	add    esp,0x10
c00160fd:	85 c0                	test   eax,eax
c00160ff:	75 1b                	jne    c001611c <unblockTask(ThreadControlBlock*)+0x54>
c0016101:	eb 5d                	jmp    c0016160 <unblockTask(ThreadControlBlock*)+0x98>
c0016103:	90                   	nop
c0016104:	83 ec 08             	sub    esp,0x8
c0016107:	50                   	push   eax
c0016108:	68 e4 96 02 c0       	push   0xc00296e4
c001610d:	e8 1a 9a 00 00       	call   c001fb2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016112:	83 c4 10             	add    esp,0x10
c0016115:	85 c0                	test   eax,eax
c0016117:	74 47                	je     c0016160 <unblockTask(ThreadControlBlock*)+0x98>
c0016119:	8d 76 00             	lea    esi,[esi+0x0]
c001611c:	39 c3                	cmp    ebx,eax
c001611e:	75 e4                	jne    c0016104 <unblockTask(ThreadControlBlock*)+0x3c>
c0016120:	eb 12                	jmp    c0016134 <unblockTask(ThreadControlBlock*)+0x6c>
c0016122:	66 90                	xchg   ax,ax
c0016124:	83 ec 0c             	sub    esp,0xc
c0016127:	68 43 23 02 c0       	push   0xc0022343
c001612c:	e8 14 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016131:	83 c4 10             	add    esp,0x10
c0016134:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016139:	83 e8 01             	sub    eax,0x1
c001613c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016141:	75 01                	jne    c0016144 <unblockTask(ThreadControlBlock*)+0x7c>
c0016143:	fb                   	sti    
c0016144:	83 c4 08             	add    esp,0x8
c0016147:	5b                   	pop    ebx
c0016148:	c3                   	ret    
c0016149:	8d 76 00             	lea    esi,[esi+0x0]
c001614c:	83 ec 0c             	sub    esp,0xc
c001614f:	68 2c 23 02 c0       	push   0xc002232c
c0016154:	e8 ec 47 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	eb d6                	jmp    c0016134 <unblockTask(ThreadControlBlock*)+0x6c>
c001615e:	66 90                	xchg   ax,ax
c0016160:	83 ec 08             	sub    esp,0x8
c0016163:	53                   	push   ebx
c0016164:	68 e4 96 02 c0       	push   0xc00296e4
c0016169:	e8 62 97 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001616e:	83 c4 10             	add    esp,0x10
c0016171:	eb c1                	jmp    c0016134 <unblockTask(ThreadControlBlock*)+0x6c>
c0016173:	90                   	nop

c0016174 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016174:	55                   	push   ebp
c0016175:	57                   	push   edi
c0016176:	56                   	push   esi
c0016177:	53                   	push   ebx
c0016178:	83 ec 1c             	sub    esp,0x1c
c001617b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001617f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016182:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016188:	85 ed                	test   ebp,ebp
c001618a:	7e 28                	jle    c00161b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001618c:	31 f6                	xor    esi,esi
c001618e:	66 90                	xchg   ax,ax
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001619a:	83 c6 01             	add    esi,0x1
c001619d:	57                   	push   edi
c001619e:	e8 23 19 ff ff       	call   c0007ac6 <free>
c00161a3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161a6:	83 c4 10             	add    esp,0x10
c00161a9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00161af:	7f df                	jg     c0016190 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00161b1:	8d 76 00             	lea    esi,[esi+0x0]
c00161b4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00161be:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00161c3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00161c6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00161c9:	d3 c0                	rol    eax,cl
c00161cb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00161d2:	21 c8                	and    eax,ecx
c00161d4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00161db:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161de:	89 f7                	mov    edi,esi
c00161e0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00161e8:	0f 85 72 01 00 00    	jne    c0016360 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00161ee:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00161f4:	85 ed                	test   ebp,ebp
c00161f6:	74 1c                	je     c0016214 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	55                   	push   ebp
c00161fc:	e8 01 ae ff ff       	call   c0011002 <EnvVarContainer::~EnvVarContainer()>
c0016201:	59                   	pop    ecx
c0016202:	5e                   	pop    esi
c0016203:	6a 0c                	push   0xc
c0016205:	55                   	push   ebp
c0016206:	e8 0d 46 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001620b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001620e:	83 c4 10             	add    esp,0x10
c0016211:	89 f7                	mov    edi,esi
c0016213:	90                   	nop
c0016214:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001621a:	85 c0                	test   eax,eax
c001621c:	0f 84 b2 00 00 00    	je     c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016222:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016225:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016229:	31 c9                	xor    ecx,ecx
c001622b:	eb 17                	jmp    c0016244 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001622d:	8d 76 00             	lea    esi,[esi+0x0]
c0016230:	83 c1 01             	add    ecx,0x1
c0016233:	83 f9 10             	cmp    ecx,0x10
c0016236:	0f 84 98 00 00 00    	je     c00162d4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001623c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016242:	66 90                	xchg   ax,ax
c0016244:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001624b:	d3 fa                	sar    edx,cl
c001624d:	80 e2 01             	and    dl,0x1
c0016250:	74 de                	je     c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016252:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016255:	01 d2                	add    edx,edx
c0016257:	01 ca                	add    edx,ecx
c0016259:	8d 14 92             	lea    edx,[edx+edx*4]
c001625c:	01 d0                	add    eax,edx
c001625e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016264:	83 fd 07             	cmp    ebp,0x7
c0016267:	75 c7                	jne    c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016269:	05 40 02 00 00       	add    eax,0x240
c001626e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016271:	83 fd ff             	cmp    ebp,0xffffffff
c0016274:	0f 8c ee 00 00 00    	jl     c0016368 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001627a:	0f 84 ac 01 00 00    	je     c001642c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016280:	85 ed                	test   ebp,ebp
c0016282:	0f 84 90 01 00 00    	je     c0016418 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016288:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001628a:	75 a4                	jne    c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001628c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016292:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016296:	01 d0                	add    eax,edx
c0016298:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00162a5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162a8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00162ae:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00162b5:	50                   	push   eax
c00162b6:	e8 0d fe ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c00162bb:	83 c4 10             	add    esp,0x10
c00162be:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00162c1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00162c5:	89 f7                	mov    edi,esi
c00162c7:	83 c1 01             	add    ecx,0x1
c00162ca:	83 f9 10             	cmp    ecx,0x10
c00162cd:	0f 85 69 ff ff ff    	jne    c001623c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00162d3:	90                   	nop
c00162d4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00162da:	85 c0                	test   eax,eax
c00162dc:	74 62                	je     c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162de:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00162e4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00162ea:	74 54                	je     c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00162ec:	83 ec 0c             	sub    esp,0xc
c00162ef:	68 e4 96 02 c0       	push   0xc00296e4
c00162f4:	e8 13 95 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162f9:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016300:	89 c7                	mov    edi,eax
c0016302:	e8 e9 94 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016307:	83 c4 10             	add    esp,0x10
c001630a:	84 c0                	test   al,al
c001630c:	0f 84 ce 00 00 00    	je     c00163e0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0016312:	66 90                	xchg   ax,ax
c0016314:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016317:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001631d:	85 d2                	test   edx,edx
c001631f:	74 0f                	je     c0016330 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016321:	83 ec 0c             	sub    esp,0xc
c0016324:	8b 02                	mov    eax,DWORD PTR [edx]
c0016326:	52                   	push   edx
c0016327:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001632a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001632d:	83 c4 10             	add    esp,0x10
c0016330:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001633a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001633d:	8d 76 00             	lea    esi,[esi+0x0]
c0016340:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016346:	85 db                	test   ebx,ebx
c0016348:	74 16                	je     c0016360 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001634a:	83 ec 0c             	sub    esp,0xc
c001634d:	53                   	push   ebx
c001634e:	e8 5f 38 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016353:	58                   	pop    eax
c0016354:	5a                   	pop    edx
c0016355:	6a 14                	push   0x14
c0016357:	53                   	push   ebx
c0016358:	e8 bb 44 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001635d:	83 c4 10             	add    esp,0x10
c0016360:	83 c4 1c             	add    esp,0x1c
c0016363:	5b                   	pop    ebx
c0016364:	5e                   	pop    esi
c0016365:	5f                   	pop    edi
c0016366:	5d                   	pop    ebp
c0016367:	c3                   	ret    
c0016368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001636c:	83 ec 0c             	sub    esp,0xc
c001636f:	68 f8 23 02 c0       	push   0xc00223f8
c0016374:	e8 78 af ff ff       	call   c00112f1 <KePanic(char const*)>
c0016379:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	89 f7                	mov    edi,esi
c0016381:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016385:	e9 a6 fe ff ff       	jmp    c0016230 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001638a:	66 90                	xchg   ax,ax
c001638c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016392:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016398:	75 1e                	jne    c00163b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001639a:	83 ec 0c             	sub    esp,0xc
c001639d:	68 60 24 02 c0       	push   0xc0022460
c00163a2:	e8 9e 45 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00163a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00163ae:	e8 11 fa ff ff       	call   c0015dc4 <blockTask(TaskState)>
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	66 90                	xchg   ax,ax
c00163b8:	83 ec 08             	sub    esp,0x8
c00163bb:	56                   	push   esi
c00163bc:	68 e4 96 02 c0       	push   0xc00296e4
c00163c1:	e8 0a 95 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00163c6:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163cd:	e8 3a 94 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163d2:	83 c4 10             	add    esp,0x10
c00163d5:	39 f8                	cmp    eax,edi
c00163d7:	0f 84 37 ff ff ff    	je     c0016314 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00163dd:	8d 76 00             	lea    esi,[esi+0x0]
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	68 e4 96 02 c0       	push   0xc00296e4
c00163e8:	e8 1f 94 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163ed:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c00163f4:	89 c6                	mov    esi,eax
c00163f6:	e8 19 94 00 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	39 f3                	cmp    ebx,esi
c0016400:	74 b6                	je     c00163b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016402:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016405:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016408:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001640e:	75 a8                	jne    c00163b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016410:	e9 77 ff ff ff       	jmp    c001638c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016415:	8d 76 00             	lea    esi,[esi+0x0]
c0016418:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001641c:	83 ec 0c             	sub    esp,0xc
c001641f:	68 2c 24 02 c0       	push   0xc002242c
c0016424:	e9 4b ff ff ff       	jmp    c0016374 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016429:	8d 76 00             	lea    esi,[esi+0x0]
c001642c:	8b 36                	mov    esi,DWORD PTR [esi]
c001642e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016432:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016435:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016438:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001643e:	01 d7                	add    edi,edx
c0016440:	89 f8                	mov    eax,edi
c0016442:	e9 51 fe ff ff       	jmp    c0016298 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016447:	90                   	nop

c0016448 <cleanerTaskFunction(void*)>:
c0016448:	53                   	push   ebx
c0016449:	83 ec 08             	sub    esp,0x8
c001644c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016451:	83 e8 01             	sub    eax,0x1
c0016454:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016459:	75 01                	jne    c001645c <cleanerTaskFunction(void*)+0x14>
c001645b:	fb                   	sti    
c001645c:	fa                   	cli    
c001645d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016462:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c0016469:	8d 50 01             	lea    edx,[eax+0x1]
c001646c:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016472:	0f 84 c4 00 00 00    	je     c001653c <cleanerTaskFunction(void*)+0xf4>
c0016478:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001647d:	85 c0                	test   eax,eax
c001647f:	75 03                	jne    c0016484 <cleanerTaskFunction(void*)+0x3c>
c0016481:	fb                   	sti    
c0016482:	66 90                	xchg   ax,ax
c0016484:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c001648b:	fa                   	cli    
c001648c:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0016492:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016498:	83 c2 01             	add    edx,0x1
c001649b:	83 c1 01             	add    ecx,0x1
c001649e:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164a4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164aa:	fa                   	cli    
c00164ab:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c00164b1:	83 c3 01             	add    ebx,0x1
c00164b4:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c00164ba:	eb 28                	jmp    c00164e4 <cleanerTaskFunction(void*)+0x9c>
c00164bc:	83 ec 0c             	sub    esp,0xc
c00164bf:	68 cc 96 02 c0       	push   0xc00296cc
c00164c4:	e8 43 93 00 00       	call   c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164c9:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c00164d0:	89 c3                	mov    ebx,eax
c00164d2:	e8 3d 93 00 00       	call   c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164da:	e8 95 fc ff ff       	call   c0016174 <cleanupTerminatedTask(ThreadControlBlock*)>
c00164df:	83 c4 10             	add    esp,0x10
c00164e2:	66 90                	xchg   ax,ax
c00164e4:	83 ec 0c             	sub    esp,0xc
c00164e7:	68 cc 96 02 c0       	push   0xc00296cc
c00164ec:	e8 ff 92 00 00       	call   c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00164f1:	83 c4 10             	add    esp,0x10
c00164f4:	84 c0                	test   al,al
c00164f6:	74 c4                	je     c00164bc <cleanerTaskFunction(void*)+0x74>
c00164f8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00164fd:	83 e8 01             	sub    eax,0x1
c0016500:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016505:	75 01                	jne    c0016508 <cleanerTaskFunction(void*)+0xc0>
c0016507:	fb                   	sti    
c0016508:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001650d:	83 e8 01             	sub    eax,0x1
c0016510:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016515:	0f 85 31 ff ff ff    	jne    c001644c <cleanerTaskFunction(void*)+0x4>
c001651b:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016520:	85 c0                	test   eax,eax
c0016522:	0f 84 24 ff ff ff    	je     c001644c <cleanerTaskFunction(void*)+0x4>
c0016528:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016532:	e8 79 f6 ff ff       	call   c0015bb0 <schedule()>
c0016537:	e9 10 ff ff ff       	jmp    c001644c <cleanerTaskFunction(void*)+0x4>
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	6a 02                	push   0x2
c0016541:	e8 56 f8 ff ff       	call   c0015d9c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016546:	83 c4 10             	add    esp,0x10
c0016549:	e9 36 ff ff ff       	jmp    c0016484 <cleanerTaskFunction(void*)+0x3c>
c001654e:	66 90                	xchg   ax,ax

c0016550 <terminateTask(int)>:
c0016550:	83 ec 14             	sub    esp,0x14
c0016553:	fa                   	cli    
c0016554:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001655a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016560:	83 c2 01             	add    edx,0x1
c0016563:	83 c1 01             	add    ecx,0x1
c0016566:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001656c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016572:	fa                   	cli    
c0016573:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016578:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001657c:	83 c0 01             	add    eax,0x1
c001657f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016584:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016589:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001658c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016591:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016594:	50                   	push   eax
c0016595:	68 cc 96 02 c0       	push   0xc00296cc
c001659a:	e8 31 93 00 00       	call   c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001659f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165a4:	83 c4 10             	add    esp,0x10
c00165a7:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00165ae:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c00165b3:	85 c0                	test   eax,eax
c00165b5:	74 65                	je     c001661c <terminateTask(int)+0xcc>
c00165b7:	83 ec 0c             	sub    esp,0xc
c00165ba:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c00165c1:	50                   	push   eax
c00165c2:	e8 01 fb ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c00165c7:	83 c4 10             	add    esp,0x10
c00165ca:	66 90                	xchg   ax,ax
c00165cc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165d1:	83 e8 01             	sub    eax,0x1
c00165d4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165d9:	75 01                	jne    c00165dc <terminateTask(int)+0x8c>
c00165db:	fb                   	sti    
c00165dc:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165e1:	83 e8 01             	sub    eax,0x1
c00165e4:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c00165e9:	75 09                	jne    c00165f4 <terminateTask(int)+0xa4>
c00165eb:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c00165f2:	75 3c                	jne    c0016630 <terminateTask(int)+0xe0>
c00165f4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165f9:	83 e8 01             	sub    eax,0x1
c00165fc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016601:	75 01                	jne    c0016604 <terminateTask(int)+0xb4>
c0016603:	fb                   	sti    
c0016604:	fa                   	cli    
c0016605:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001660a:	83 c0 01             	add    eax,0x1
c001660d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016612:	66 90                	xchg   ax,ax
c0016614:	e8 97 f5 ff ff       	call   c0015bb0 <schedule()>
c0016619:	eb d9                	jmp    c00165f4 <terminateTask(int)+0xa4>
c001661b:	90                   	nop
c001661c:	83 ec 0c             	sub    esp,0xc
c001661f:	68 5a 23 02 c0       	push   0xc002235a
c0016624:	e8 1c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016629:	83 c4 10             	add    esp,0x10
c001662c:	eb 9e                	jmp    c00165cc <terminateTask(int)+0x7c>
c001662e:	66 90                	xchg   ax,ax
c0016630:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c001663a:	eb d8                	jmp    c0016614 <terminateTask(int)+0xc4>

c001663c <Thr::terminateFromIRQ(int)>:
c001663c:	83 ec 18             	sub    esp,0x18
c001663f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016643:	50                   	push   eax
c0016644:	e8 07 ff ff ff       	call   c0016550 <terminateTask(int)>
c0016649:	90                   	nop
c001664a:	66 90                	xchg   ax,ax

c001664c <Semaphore::release()>:
c001664c:	83 ec 0c             	sub    esp,0xc
c001664f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016653:	fa                   	cli    
c0016654:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016659:	83 c0 01             	add    eax,0x1
c001665c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016661:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016666:	8d 48 01             	lea    ecx,[eax+0x1]
c0016669:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c001666f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016672:	85 c9                	test   ecx,ecx
c0016674:	74 42                	je     c00166b8 <Semaphore::release()+0x6c>
c0016676:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016679:	83 ec 0c             	sub    esp,0xc
c001667c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001667f:	51                   	push   ecx
c0016680:	e8 43 fa ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c0016685:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	83 e8 01             	sub    eax,0x1
c0016690:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016695:	85 c0                	test   eax,eax
c0016697:	75 0b                	jne    c00166a4 <Semaphore::release()+0x58>
c0016699:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c001669e:	85 c0                	test   eax,eax
c00166a0:	75 22                	jne    c00166c4 <Semaphore::release()+0x78>
c00166a2:	66 90                	xchg   ax,ax
c00166a4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00166a9:	83 e8 01             	sub    eax,0x1
c00166ac:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00166b1:	75 01                	jne    c00166b4 <Semaphore::release()+0x68>
c00166b3:	fb                   	sti    
c00166b4:	83 c4 0c             	add    esp,0xc
c00166b7:	c3                   	ret    
c00166b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00166bb:	83 e9 01             	sub    ecx,0x1
c00166be:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00166c1:	eb cd                	jmp    c0016690 <Semaphore::release()+0x44>
c00166c3:	90                   	nop
c00166c4:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00166ce:	e8 dd f4 ff ff       	call   c0015bb0 <schedule()>
c00166d3:	eb cf                	jmp    c00166a4 <Semaphore::release()+0x58>
c00166d5:	8d 76 00             	lea    esi,[esi+0x0]

c00166d8 <__static_initialization_and_destruction_0(int, int)>:
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00166e0:	0f 85 8e 00 00 00    	jne    c0016774 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166e6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00166ee:	0f 85 80 00 00 00    	jne    c0016774 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00166f4:	83 ec 0c             	sub    esp,0xc
c00166f7:	68 e4 96 02 c0       	push   0xc00296e4
c00166fc:	e8 83 94 00 00       	call   c001fb84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016701:	83 c4 10             	add    esp,0x10
c0016704:	83 ec 04             	sub    esp,0x4
c0016707:	68 30 30 02 c0       	push   0xc0023030
c001670c:	68 e4 96 02 c0       	push   0xc00296e4
c0016711:	68 34 fb 01 c0       	push   0xc001fb34
c0016716:	e8 ad 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c001671b:	83 c4 10             	add    esp,0x10
c001671e:	83 ec 0c             	sub    esp,0xc
c0016721:	68 d8 96 02 c0       	push   0xc00296d8
c0016726:	e8 59 94 00 00       	call   c001fb84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001672b:	83 c4 10             	add    esp,0x10
c001672e:	83 ec 04             	sub    esp,0x4
c0016731:	68 30 30 02 c0       	push   0xc0023030
c0016736:	68 d8 96 02 c0       	push   0xc00296d8
c001673b:	68 34 fb 01 c0       	push   0xc001fb34
c0016740:	e8 83 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016745:	83 c4 10             	add    esp,0x10
c0016748:	83 ec 0c             	sub    esp,0xc
c001674b:	68 cc 96 02 c0       	push   0xc00296cc
c0016750:	e8 2f 94 00 00       	call   c001fb84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	83 ec 04             	sub    esp,0x4
c001675b:	68 30 30 02 c0       	push   0xc0023030
c0016760:	68 cc 96 02 c0       	push   0xc00296cc
c0016765:	68 34 fb 01 c0       	push   0xc001fb34
c001676a:	e8 59 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c001676f:	83 c4 10             	add    esp,0x10
c0016772:	66 90                	xchg   ax,ax
c0016774:	90                   	nop
c0016775:	83 c4 0c             	add    esp,0xc
c0016778:	c3                   	ret    
c0016779:	8d 76 00             	lea    esi,[esi+0x0]

c001677c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	83 ec 08             	sub    esp,0x8
c0016782:	68 ff ff 00 00       	push   0xffff
c0016787:	6a 01                	push   0x1
c0016789:	e8 4a ff ff ff       	call   c00166d8 <__static_initialization_and_destruction_0(int, int)>
c001678e:	83 c4 10             	add    esp,0x10
c0016791:	83 c4 0c             	add    esp,0xc
c0016794:	c3                   	ret    

c0016795 <Vm::inbv(unsigned short)>:
c0016795:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016799:	66 81 fa fe fe       	cmp    dx,0xfefe
c001679e:	75 06                	jne    c00167a6 <Vm::inbv(unsigned short)+0x11>
c00167a0:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c00167a5:	c3                   	ret    
c00167a6:	ec                   	in     al,dx
c00167a7:	c3                   	ret    

c00167a8 <Vm::outbv(unsigned short, unsigned char)>:
c00167a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00167ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167b0:	66 81 fa fe fe       	cmp    dx,0xfefe
c00167b5:	75 25                	jne    c00167dc <Vm::outbv(unsigned short, unsigned char)+0x34>
c00167b7:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c00167bd:	8d 51 01             	lea    edx,[ecx+0x1]
c00167c0:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c00167c6:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c00167cc:	83 fa 20             	cmp    edx,0x20
c00167cf:	75 0c                	jne    c00167dd <Vm::outbv(unsigned short, unsigned char)+0x35>
c00167d1:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c00167db:	c3                   	ret    
c00167dc:	ee                   	out    dx,al
c00167dd:	c3                   	ret    

c00167de <Vm::realToLinear(unsigned short, unsigned short)>:
c00167de:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00167e3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00167e8:	c1 e0 04             	shl    eax,0x4
c00167eb:	01 d0                	add    eax,edx
c00167ed:	c3                   	ret    

c00167ee <Vm::getSegment(unsigned int)>:
c00167ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167f2:	c1 e8 10             	shr    eax,0x10
c00167f5:	c3                   	ret    

c00167f6 <Vm::getOffset(unsigned int)>:
c00167f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167fa:	c3                   	ret    

c00167fb <Vm::mainloop2()>:
c00167fb:	83 ec 18             	sub    esp,0x18
c00167fe:	fa                   	cli    
c00167ff:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016805:	6a 02                	push   0x2
c0016807:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c001680e:	e8 89 f5 ff ff       	call   c0015d9c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016818:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001681c:	52                   	push   edx
c001681d:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016821:	52                   	push   edx
c0016822:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016826:	52                   	push   edx
c0016827:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001682b:	50                   	push   eax
c001682c:	e8 de 99 fe ff       	call   c000020f <goToVM86>
c0016831:	83 c4 2c             	add    esp,0x2c
c0016834:	c3                   	ret    

c0016835 <Vm::mainVm8086Loop(void*)>:
c0016835:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001683a:	48                   	dec    eax
c001683b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016840:	75 01                	jne    c0016843 <Vm::mainVm8086Loop(void*)+0xe>
c0016842:	fb                   	sti    
c0016843:	eb b6                	jmp    c00167fb <Vm::mainloop2()>

c0016845 <Vm::mainloop3(unsigned long)>:
c0016845:	83 ec 18             	sub    esp,0x18
c0016848:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001684c:	fa                   	cli    
c001684d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016853:	6a 02                	push   0x2
c0016855:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c001685c:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c0016861:	e8 36 f5 ff ff       	call   c0015d9c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016866:	83 c4 1c             	add    esp,0x1c
c0016869:	eb 90                	jmp    c00167fb <Vm::mainloop2()>

c001686b <Vm::initialise8086()>:
c001686b:	83 ec 0c             	sub    esp,0xc
c001686e:	68 80 00 00 00       	push   0x80
c0016873:	6a 00                	push   0x0
c0016875:	68 35 68 01 c0       	push   0xc0016835
c001687a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016880:	e8 db f0 ff ff       	call   c0015960 <Process::createThread(void (*)(void*), void*, int)>
c0016885:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001688c:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016891:	68 00 01 00 00       	push   0x100
c0016896:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001689b:	6a 00                	push   0x0
c001689d:	6a 00                	push   0x0
c001689f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00168a5:	e8 70 36 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00168aa:	83 c4 2c             	add    esp,0x2c
c00168ad:	c3                   	ret    

c00168ae <Vm::finish8086()>:
c00168ae:	53                   	push   ebx
c00168af:	83 ec 08             	sub    esp,0x8
c00168b2:	fa                   	cli    
c00168b3:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168b9:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c00168c0:	75 15                	jne    c00168d7 <Vm::finish8086()+0x29>
c00168c2:	e8 e9 f2 ff ff       	call   c0015bb0 <schedule()>
c00168c7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168cc:	48                   	dec    eax
c00168cd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168d2:	75 de                	jne    c00168b2 <Vm::finish8086()+0x4>
c00168d4:	fb                   	sti    
c00168d5:	eb db                	jmp    c00168b2 <Vm::finish8086()+0x4>
c00168d7:	83 ec 0c             	sub    esp,0xc
c00168da:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c00168e0:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00168e6:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c00168ed:	e8 d6 f7 ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c00168f2:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168f7:	83 c4 10             	add    esp,0x10
c00168fa:	8d 50 ff             	lea    edx,[eax-0x1]
c00168fd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0016903:	85 d2                	test   edx,edx
c0016905:	75 01                	jne    c0016908 <Vm::finish8086()+0x5a>
c0016907:	fb                   	sti    
c0016908:	89 d8                	mov    eax,ebx
c001690a:	83 c4 08             	add    esp,0x8
c001690d:	5b                   	pop    ebx
c001690e:	c3                   	ret    

c001690f <Vm::getOutput8086(unsigned char*)>:
c001690f:	57                   	push   edi
c0016910:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016916:	56                   	push   esi
c0016917:	be 40 97 02 c0       	mov    esi,0xc0029740
c001691c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016920:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016922:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c0016927:	5e                   	pop    esi
c0016928:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016932:	5f                   	pop    edi
c0016933:	c3                   	ret    

c0016934 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016934:	55                   	push   ebp
c0016935:	57                   	push   edi
c0016936:	56                   	push   esi
c0016937:	53                   	push   ebx
c0016938:	83 ec 0c             	sub    esp,0xc
c001693b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001693f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016943:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016947:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001694b:	fa                   	cli    
c001694c:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016952:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c0016959:	75 15                	jne    c0016970 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c001695b:	e8 50 f2 ff ff       	call   c0015bb0 <schedule()>
c0016960:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016965:	48                   	dec    eax
c0016966:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001696b:	75 de                	jne    c001694b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001696d:	fb                   	sti    
c001696e:	eb db                	jmp    c001694b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016970:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016975:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c001697f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016983:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016987:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001698b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001698f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016993:	0f b7 ff             	movzx  edi,di
c0016996:	0f b7 f6             	movzx  esi,si
c0016999:	50                   	push   eax
c001699a:	6a 20                	push   0x20
c001699c:	6a 00                	push   0x0
c001699e:	68 40 97 02 c0       	push   0xc0029740
c00169a3:	e8 48 9b fe ff       	call   c00004f0 <memset>
c00169a8:	5a                   	pop    edx
c00169a9:	59                   	pop    ecx
c00169aa:	57                   	push   edi
c00169ab:	56                   	push   esi
c00169ac:	e8 2d fe ff ff       	call   c00167de <Vm::realToLinear(unsigned short, unsigned short)>
c00169b1:	83 c4 10             	add    esp,0x10
c00169b4:	89 c7                	mov    edi,eax
c00169b6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00169ba:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00169be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169c0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169c5:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c00169cc:	48                   	dec    eax
c00169cd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169d2:	75 01                	jne    c00169d5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00169d4:	fb                   	sti    
c00169d5:	83 ec 0c             	sub    esp,0xc
c00169d8:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c00169de:	e8 e5 f6 ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c00169e3:	83 c4 1c             	add    esp,0x1c
c00169e6:	b0 01                	mov    al,0x1
c00169e8:	5b                   	pop    ebx
c00169e9:	5e                   	pop    esi
c00169ea:	5f                   	pop    edi
c00169eb:	5d                   	pop    ebp
c00169ec:	c3                   	ret    

c00169ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00169ed:	55                   	push   ebp
c00169ee:	57                   	push   edi
c00169ef:	56                   	push   esi
c00169f0:	53                   	push   ebx
c00169f1:	83 ec 34             	sub    esp,0x34
c00169f4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00169f8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00169fc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016a00:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016a04:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016a08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a0c:	68 88 24 02 c0       	push   0xc0022488
c0016a11:	e8 2f 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016a16:	83 c4 10             	add    esp,0x10
c0016a19:	fa                   	cli    
c0016a1a:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016a20:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c0016a26:	84 db                	test   bl,bl
c0016a28:	75 15                	jne    c0016a3f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016a2a:	e8 81 f1 ff ff       	call   c0015bb0 <schedule()>
c0016a2f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a34:	48                   	dec    eax
c0016a35:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a3a:	75 dd                	jne    c0016a19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a3c:	fb                   	sti    
c0016a3d:	eb da                	jmp    c0016a19 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016a3f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016a43:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c0016a48:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016a52:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016a56:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016a5a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016a5e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016a62:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016a66:	50                   	push   eax
c0016a67:	6a 20                	push   0x20
c0016a69:	6a 00                	push   0x0
c0016a6b:	68 40 97 02 c0       	push   0xc0029740
c0016a70:	e8 7b 9a fe ff       	call   c00004f0 <memset>
c0016a75:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016a7c:	e8 35 10 ff ff       	call   c0007ab6 <malloc>
c0016a81:	83 c4 0c             	add    esp,0xc
c0016a84:	89 c5                	mov    ebp,eax
c0016a86:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a8c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a90:	50                   	push   eax
c0016a91:	e8 22 4d ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0016a96:	83 c4 10             	add    esp,0x10
c0016a99:	85 ed                	test   ebp,ebp
c0016a9b:	75 0a                	jne    c0016aa7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016a9d:	83 ec 0c             	sub    esp,0xc
c0016aa0:	68 aa 24 02 c0       	push   0xc00224aa
c0016aa5:	eb 2b                	jmp    c0016ad2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016aa7:	50                   	push   eax
c0016aa8:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016aac:	50                   	push   eax
c0016aad:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016ab1:	50                   	push   eax
c0016ab2:	55                   	push   ebp
c0016ab3:	e8 be 50 ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c0016ab8:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016abc:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016ac0:	83 c4 10             	add    esp,0x10
c0016ac3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016ac8:	74 27                	je     c0016af1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016aca:	83 ec 0c             	sub    esp,0xc
c0016acd:	68 be 24 02 c0       	push   0xc00224be
c0016ad2:	e8 1a a8 ff ff       	call   c00112f1 <KePanic(char const*)>
c0016ad7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	48                   	dec    eax
c0016ae0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016ae5:	85 c0                	test   eax,eax
c0016ae7:	75 01                	jne    c0016aea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016ae9:	fb                   	sti    
c0016aea:	31 db                	xor    ebx,ebx
c0016aec:	e9 90 00 00 00       	jmp    c0016b81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016af1:	51                   	push   ecx
c0016af2:	51                   	push   ecx
c0016af3:	6a 01                	push   0x1
c0016af5:	55                   	push   ebp
c0016af6:	e8 79 4d ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0016afb:	83 c4 10             	add    esp,0x10
c0016afe:	85 c0                	test   eax,eax
c0016b00:	74 26                	je     c0016b28 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016b02:	83 ec 0c             	sub    esp,0xc
c0016b05:	68 d7 24 02 c0       	push   0xc00224d7
c0016b0a:	e8 e2 a7 ff ff       	call   c00112f1 <KePanic(char const*)>
c0016b0f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b14:	83 c4 10             	add    esp,0x10
c0016b17:	48                   	dec    eax
c0016b18:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b1d:	85 c0                	test   eax,eax
c0016b1f:	75 c9                	jne    c0016aea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016b21:	fb                   	sti    
c0016b22:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016b26:	eb 59                	jmp    c0016b81 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016b28:	0f b7 ff             	movzx  edi,di
c0016b2b:	50                   	push   eax
c0016b2c:	0f b7 f6             	movzx  esi,si
c0016b2f:	50                   	push   eax
c0016b30:	57                   	push   edi
c0016b31:	56                   	push   esi
c0016b32:	e8 a7 fc ff ff       	call   c00167de <Vm::realToLinear(unsigned short, unsigned short)>
c0016b37:	5a                   	pop    edx
c0016b38:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016b3b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016b3f:	51                   	push   ecx
c0016b40:	50                   	push   eax
c0016b41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b49:	55                   	push   ebp
c0016b4a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016b4d:	83 c4 14             	add    esp,0x14
c0016b50:	55                   	push   ebp
c0016b51:	e8 7c 4d ff ff       	call   c000b8d2 <File::close()>
c0016b56:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016b5b:	83 c4 10             	add    esp,0x10
c0016b5e:	48                   	dec    eax
c0016b5f:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016b66:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016b6b:	85 c0                	test   eax,eax
c0016b6d:	75 01                	jne    c0016b70 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016b6f:	fb                   	sti    
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b79:	e8 4a f5 ff ff       	call   c00160c8 <unblockTask(ThreadControlBlock*)>
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	83 c4 2c             	add    esp,0x2c
c0016b84:	88 d8                	mov    al,bl
c0016b86:	5b                   	pop    ebx
c0016b87:	5e                   	pop    esi
c0016b88:	5f                   	pop    edi
c0016b89:	5d                   	pop    ebp
c0016b8a:	c3                   	ret    

c0016b8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b8b:	57                   	push   edi
c0016b8c:	56                   	push   esi
c0016b8d:	53                   	push   ebx
c0016b8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b96:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b9a:	83 e8 06             	sub    eax,0x6
c0016b9d:	0f b7 c0             	movzx  eax,ax
c0016ba0:	50                   	push   eax
c0016ba1:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016ba6:	50                   	push   eax
c0016ba7:	e8 32 fc ff ff       	call   c00167de <Vm::realToLinear(unsigned short, unsigned short)>
c0016bac:	5a                   	pop    edx
c0016bad:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016bb0:	59                   	pop    ecx
c0016bb1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016bb4:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016bb7:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016bbd:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016bc0:	8d 56 02             	lea    edx,[esi+0x2]
c0016bc3:	66 89 10             	mov    WORD PTR [eax],dx
c0016bc6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016bca:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016bce:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016bd1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016bd5:	0f b6 f1             	movzx  esi,cl
c0016bd8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016bdc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016be2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016be6:	0f b6 d5             	movzx  edx,ch
c0016be9:	74 0a                	je     c0016bf5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016beb:	c1 e2 08             	shl    edx,0x8
c0016bee:	09 f2                	or     edx,esi
c0016bf0:	80 ce 02             	or     dh,0x2
c0016bf3:	eb 08                	jmp    c0016bfd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016bf5:	c1 e2 08             	shl    edx,0x8
c0016bf8:	09 f2                	or     edx,esi
c0016bfa:	80 e6 fd             	and    dh,0xfd
c0016bfd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016c01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c06:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016c0a:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016c12:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016c15:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016c1d:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016c20:	5b                   	pop    ebx
c0016c21:	5e                   	pop    esi
c0016c22:	5f                   	pop    edi
c0016c23:	c3                   	ret    

c0016c24 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016c24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c2e:	c1 e0 04             	shl    eax,0x4
c0016c31:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016c34:	c3                   	ret    

c0016c35 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016c35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c3f:	c1 e0 04             	shl    eax,0x4
c0016c42:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016c46:	c3                   	ret    

c0016c47 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016c47:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c4c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c51:	c1 e0 04             	shl    eax,0x4
c0016c54:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016c57:	c3                   	ret    

c0016c58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016c58:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c5d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c62:	c1 e0 04             	shl    eax,0x4
c0016c65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c69:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016c6c:	c3                   	ret    

c0016c6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016c6d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c72:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c77:	c1 e0 04             	shl    eax,0x4
c0016c7a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c7e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c82:	c3                   	ret    

c0016c83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c83:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c88:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c8d:	c1 e0 04             	shl    eax,0x4
c0016c90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c94:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016c97:	c3                   	ret    

c0016c98 <Vm::faultHandler(regs*)>:
c0016c98:	55                   	push   ebp
c0016c99:	57                   	push   edi
c0016c9a:	56                   	push   esi
c0016c9b:	53                   	push   ebx
c0016c9c:	83 ec 2c             	sub    esp,0x2c
c0016c9f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016ca3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ca6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016caa:	0f b7 f8             	movzx  edi,ax
c0016cad:	52                   	push   edx
c0016cae:	0f b7 c0             	movzx  eax,ax
c0016cb1:	50                   	push   eax
c0016cb2:	e8 27 fb ff ff       	call   c00167de <Vm::realToLinear(unsigned short, unsigned short)>
c0016cb7:	5a                   	pop    edx
c0016cb8:	59                   	pop    ecx
c0016cb9:	89 c1                	mov    ecx,eax
c0016cbb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016cbe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016cc2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016cc7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016ccb:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016cce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016cd2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016cd7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cdb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016cdf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ce3:	e8 f6 fa ff ff       	call   c00167de <Vm::realToLinear(unsigned short, unsigned short)>
c0016ce8:	5e                   	pop    esi
c0016ce9:	be 06 00 00 00       	mov    esi,0x6
c0016cee:	5d                   	pop    ebp
c0016cef:	31 ed                	xor    ebp,ebp
c0016cf1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016cf6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016cf9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016cff:	0f 84 74 02 00 00    	je     c0016f79 <Vm::faultHandler(regs*)+0x2e1>
c0016d05:	0f 87 94 00 00 00    	ja     c0016d9f <Vm::faultHandler(regs*)+0x107>
c0016d0b:	83 fa 66             	cmp    edx,0x66
c0016d0e:	0f 84 e2 01 00 00    	je     c0016ef6 <Vm::faultHandler(regs*)+0x25e>
c0016d14:	77 47                	ja     c0016d5d <Vm::faultHandler(regs*)+0xc5>
c0016d16:	83 fa 36             	cmp    edx,0x36
c0016d19:	0f 84 ca 01 00 00    	je     c0016ee9 <Vm::faultHandler(regs*)+0x251>
c0016d1f:	77 1a                	ja     c0016d3b <Vm::faultHandler(regs*)+0xa3>
c0016d21:	83 fa 26             	cmp    edx,0x26
c0016d24:	0f 84 98 01 00 00    	je     c0016ec2 <Vm::faultHandler(regs*)+0x22a>
c0016d2a:	83 fa 2e             	cmp    edx,0x2e
c0016d2d:	0f 85 21 06 00 00    	jne    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016d33:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d36:	31 f6                	xor    esi,esi
c0016d38:	41                   	inc    ecx
c0016d39:	eb bb                	jmp    c0016cf6 <Vm::faultHandler(regs*)+0x5e>
c0016d3b:	83 fa 64             	cmp    edx,0x64
c0016d3e:	0f 84 8b 01 00 00    	je     c0016ecf <Vm::faultHandler(regs*)+0x237>
c0016d44:	0f 87 92 01 00 00    	ja     c0016edc <Vm::faultHandler(regs*)+0x244>
c0016d4a:	83 fa 3e             	cmp    edx,0x3e
c0016d4d:	0f 85 01 06 00 00    	jne    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016d53:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016d56:	be 01 00 00 00       	mov    esi,0x1
c0016d5b:	eb db                	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016d5d:	83 fa 6d             	cmp    edx,0x6d
c0016d60:	0f 84 34 03 00 00    	je     c001709a <Vm::faultHandler(regs*)+0x402>
c0016d66:	77 17                	ja     c0016d7f <Vm::faultHandler(regs*)+0xe7>
c0016d68:	83 fa 67             	cmp    edx,0x67
c0016d6b:	0f 84 92 01 00 00    	je     c0016f03 <Vm::faultHandler(regs*)+0x26b>
c0016d71:	83 fa 6c             	cmp    edx,0x6c
c0016d74:	0f 84 b1 02 00 00    	je     c001702b <Vm::faultHandler(regs*)+0x393>
c0016d7a:	e9 d5 05 00 00       	jmp    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016d7f:	83 fa 6f             	cmp    edx,0x6f
c0016d82:	0f 84 3d 04 00 00    	je     c00171c5 <Vm::faultHandler(regs*)+0x52d>
c0016d88:	0f 82 9f 03 00 00    	jb     c001712d <Vm::faultHandler(regs*)+0x495>
c0016d8e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016d94:	0f 84 76 01 00 00    	je     c0016f10 <Vm::faultHandler(regs*)+0x278>
c0016d9a:	e9 b5 05 00 00       	jmp    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016d9f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016da5:	0f 84 51 05 00 00    	je     c00172fc <Vm::faultHandler(regs*)+0x664>
c0016dab:	0f 87 a9 00 00 00    	ja     c0016e5a <Vm::faultHandler(regs*)+0x1c2>
c0016db1:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016db7:	0f 84 d0 04 00 00    	je     c001728d <Vm::faultHandler(regs*)+0x5f5>
c0016dbd:	77 78                	ja     c0016e37 <Vm::faultHandler(regs*)+0x19f>
c0016dbf:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016dc5:	0f 84 0e 02 00 00    	je     c0016fd9 <Vm::faultHandler(regs*)+0x341>
c0016dcb:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016dd1:	0f 85 7d 05 00 00    	jne    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016ddb:	89 d1                	mov    ecx,edx
c0016ddd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016de0:	c1 e1 08             	shl    ecx,0x8
c0016de3:	09 ca                	or     edx,ecx
c0016de5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016de8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016dec:	89 d1                	mov    ecx,edx
c0016dee:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016df2:	c1 e1 08             	shl    ecx,0x8
c0016df5:	09 ca                	or     edx,ecx
c0016df7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016dfa:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016dfe:	89 d1                	mov    ecx,edx
c0016e00:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016e04:	c1 e1 08             	shl    ecx,0x8
c0016e07:	09 ca                	or     edx,ecx
c0016e09:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e0f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e12:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016e16:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e1c:	d1 e8                	shr    eax,1
c0016e1e:	83 e0 01             	and    eax,0x1
c0016e21:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e24:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e27:	83 c0 06             	add    eax,0x6
c0016e2a:	25 ff ff 00 00       	and    eax,0xffff
c0016e2f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016e32:	e9 19 05 00 00       	jmp    c0017350 <Vm::faultHandler(regs*)+0x6b8>
c0016e37:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016e3d:	0f 84 8f 04 00 00    	je     c00172d2 <Vm::faultHandler(regs*)+0x63a>
c0016e43:	0f 82 60 04 00 00    	jb     c00172a9 <Vm::faultHandler(regs*)+0x611>
c0016e49:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016e4f:	0f 84 94 04 00 00    	je     c00172e9 <Vm::faultHandler(regs*)+0x651>
c0016e55:	e9 fa 04 00 00       	jmp    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016e5a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016e60:	0f 84 d7 04 00 00    	je     c001733d <Vm::faultHandler(regs*)+0x6a5>
c0016e66:	77 2e                	ja     c0016e96 <Vm::faultHandler(regs*)+0x1fe>
c0016e68:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016e6e:	0f 84 a4 04 00 00    	je     c0017318 <Vm::faultHandler(regs*)+0x680>
c0016e74:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016e7a:	0f 85 d4 04 00 00    	jne    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016e80:	50                   	push   eax
c0016e81:	50                   	push   eax
c0016e82:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016e86:	50                   	push   eax
c0016e87:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e8b:	50                   	push   eax
c0016e8c:	e8 17 f9 ff ff       	call   c00167a8 <Vm::outbv(unsigned short, unsigned char)>
c0016e91:	e9 9f 04 00 00       	jmp    c0017335 <Vm::faultHandler(regs*)+0x69d>
c0016e96:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016e9c:	0f 84 6d 01 00 00    	je     c001700f <Vm::faultHandler(regs*)+0x377>
c0016ea2:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016ea8:	0f 84 6f 01 00 00    	je     c001701d <Vm::faultHandler(regs*)+0x385>
c0016eae:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016eb4:	0f 85 9a 04 00 00    	jne    c0017354 <Vm::faultHandler(regs*)+0x6bc>
c0016eba:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ebd:	e9 76 fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016ec2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ec5:	be 02 00 00 00       	mov    esi,0x2
c0016eca:	e9 69 fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016ecf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ed2:	be 03 00 00 00       	mov    esi,0x3
c0016ed7:	e9 5c fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016edc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016edf:	be 04 00 00 00       	mov    esi,0x4
c0016ee4:	e9 4f fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016ee9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016eec:	be 05 00 00 00       	mov    esi,0x5
c0016ef1:	e9 42 fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016ef6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ef9:	bd 01 00 00 00       	mov    ebp,0x1
c0016efe:	e9 35 fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016f03:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016f06:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016f0b:	e9 28 fe ff ff       	jmp    c0016d38 <Vm::faultHandler(regs*)+0xa0>
c0016f10:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016f13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016f17:	83 e5 01             	and    ebp,0x1
c0016f1a:	74 30                	je     c0016f4c <Vm::faultHandler(regs*)+0x2b4>
c0016f1c:	83 e9 04             	sub    ecx,0x4
c0016f1f:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f25:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f2b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f2e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f37:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f3b:	0f 84 0c 04 00 00    	je     c001734d <Vm::faultHandler(regs*)+0x6b5>
c0016f41:	80 ce 02             	or     dh,0x2
c0016f44:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016f47:	e9 01 04 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c0016f4c:	83 e9 02             	sub    ecx,0x2
c0016f4f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016f55:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016f58:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f5c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016f62:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016f66:	74 05                	je     c0016f6d <Vm::faultHandler(regs*)+0x2d5>
c0016f68:	80 ce 02             	or     dh,0x2
c0016f6b:	eb 03                	jmp    c0016f70 <Vm::faultHandler(regs*)+0x2d8>
c0016f6d:	80 e6 fd             	and    dh,0xfd
c0016f70:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016f74:	e9 d4 03 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c0016f79:	83 e5 01             	and    ebp,0x1
c0016f7c:	74 2a                	je     c0016fa8 <Vm::faultHandler(regs*)+0x310>
c0016f7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f80:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f86:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f8c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f91:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f97:	c1 e8 09             	shr    eax,0x9
c0016f9a:	83 e0 01             	and    eax,0x1
c0016f9d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fa0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fa3:	83 c0 04             	add    eax,0x4
c0016fa6:	eb 24                	jmp    c0016fcc <Vm::faultHandler(regs*)+0x334>
c0016fa8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016fab:	81 ca 00 02 02 00    	or     edx,0x20200
c0016fb1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016fb4:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016fb7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016fbd:	c1 e8 09             	shr    eax,0x9
c0016fc0:	83 e0 01             	and    eax,0x1
c0016fc3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016fc6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016fc9:	83 c0 02             	add    eax,0x2
c0016fcc:	25 ff ff 00 00       	and    eax,0xffff
c0016fd1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016fd4:	e9 74 03 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c0016fd9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fdd:	3d ee 00 00 00       	cmp    eax,0xee
c0016fe2:	75 10                	jne    c0016ff4 <Vm::faultHandler(regs*)+0x35c>
c0016fe4:	83 ec 0c             	sub    esp,0xc
c0016fe7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016fea:	e8 56 f8 ff ff       	call   c0016845 <Vm::mainloop3(unsigned long)>
c0016fef:	e9 44 03 00 00       	jmp    c0017338 <Vm::faultHandler(regs*)+0x6a0>
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ffb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016fff:	51                   	push   ecx
c0017000:	50                   	push   eax
c0017001:	53                   	push   ebx
c0017002:	e8 84 fb ff ff       	call   c0016b8b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017007:	83 c4 20             	add    esp,0x20
c001700a:	e9 41 03 00 00       	jmp    c0017350 <Vm::faultHandler(regs*)+0x6b8>
c001700f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017014:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017018:	e9 30 03 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c001701d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017022:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017026:	e9 22 03 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c001702b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001702e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017033:	74 2b                	je     c0017060 <Vm::faultHandler(regs*)+0x3c8>
c0017035:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001703c:	76 22                	jbe    c0017060 <Vm::faultHandler(regs*)+0x3c8>
c001703e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017042:	50                   	push   eax
c0017043:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017047:	50                   	push   eax
c0017048:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001704c:	50                   	push   eax
c001704d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017051:	50                   	push   eax
c0017052:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017056:	50                   	push   eax
c0017057:	6a 6c                	push   0x6c
c0017059:	6a 6c                	push   0x6c
c001705b:	e9 bd 01 00 00       	jmp    c001721d <Vm::faultHandler(regs*)+0x585>
c0017060:	83 ec 0c             	sub    esp,0xc
c0017063:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017067:	0f b7 f6             	movzx  esi,si
c001706a:	50                   	push   eax
c001706b:	e8 25 f7 ff ff       	call   c0016795 <Vm::inbv(unsigned short)>
c0017070:	83 c4 0c             	add    esp,0xc
c0017073:	0f b6 c0             	movzx  eax,al
c0017076:	50                   	push   eax
c0017077:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001707b:	50                   	push   eax
c001707c:	56                   	push   esi
c001707d:	e8 d6 fb ff ff       	call   c0016c58 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017082:	83 c4 10             	add    esp,0x10
c0017085:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017088:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001708c:	74 03                	je     c0017091 <Vm::faultHandler(regs*)+0x3f9>
c001708e:	48                   	dec    eax
c001708f:	eb 01                	jmp    c0017092 <Vm::faultHandler(regs*)+0x3fa>
c0017091:	40                   	inc    eax
c0017092:	0f b7 c0             	movzx  eax,ax
c0017095:	e9 8b 00 00 00       	jmp    c0017125 <Vm::faultHandler(regs*)+0x48d>
c001709a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001709d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170a0:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170a5:	74 29                	je     c00170d0 <Vm::faultHandler(regs*)+0x438>
c00170a7:	3d ff ff 00 00       	cmp    eax,0xffff
c00170ac:	76 22                	jbe    c00170d0 <Vm::faultHandler(regs*)+0x438>
c00170ae:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170b2:	50                   	push   eax
c00170b3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170b7:	50                   	push   eax
c00170b8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00170bc:	50                   	push   eax
c00170bd:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00170c1:	50                   	push   eax
c00170c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00170c6:	50                   	push   eax
c00170c7:	6a 6d                	push   0x6d
c00170c9:	6a 6d                	push   0x6d
c00170cb:	e9 4d 01 00 00       	jmp    c001721d <Vm::faultHandler(regs*)+0x585>
c00170d0:	0f b7 c8             	movzx  ecx,ax
c00170d3:	0f b7 f6             	movzx  esi,si
c00170d6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00170d9:	83 e5 01             	and    ebp,0x1
c00170dc:	74 20                	je     c00170fe <Vm::faultHandler(regs*)+0x466>
c00170de:	ed                   	in     eax,dx
c00170df:	55                   	push   ebp
c00170e0:	50                   	push   eax
c00170e1:	51                   	push   ecx
c00170e2:	56                   	push   esi
c00170e3:	e8 9b fb ff ff       	call   c0016c83 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00170e8:	83 c4 10             	add    esp,0x10
c00170eb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00170ee:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170f2:	74 05                	je     c00170f9 <Vm::faultHandler(regs*)+0x461>
c00170f4:	83 e8 04             	sub    eax,0x4
c00170f7:	eb 27                	jmp    c0017120 <Vm::faultHandler(regs*)+0x488>
c00170f9:	83 c0 04             	add    eax,0x4
c00170fc:	eb 22                	jmp    c0017120 <Vm::faultHandler(regs*)+0x488>
c00170fe:	66 ed                	in     ax,dx
c0017100:	0f b7 c0             	movzx  eax,ax
c0017103:	57                   	push   edi
c0017104:	50                   	push   eax
c0017105:	51                   	push   ecx
c0017106:	56                   	push   esi
c0017107:	e8 61 fb ff ff       	call   c0016c6d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001710c:	83 c4 10             	add    esp,0x10
c001710f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017112:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017116:	74 05                	je     c001711d <Vm::faultHandler(regs*)+0x485>
c0017118:	83 e8 02             	sub    eax,0x2
c001711b:	eb 03                	jmp    c0017120 <Vm::faultHandler(regs*)+0x488>
c001711d:	83 c0 02             	add    eax,0x2
c0017120:	25 ff ff 00 00       	and    eax,0xffff
c0017125:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017128:	e9 20 02 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c001712d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017130:	0f b6 f0             	movzx  esi,al
c0017133:	83 fe 05             	cmp    esi,0x5
c0017136:	77 23                	ja     c001715b <Vm::faultHandler(regs*)+0x4c3>
c0017138:	ff 24 b5 4c 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddab4]
c001713f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017144:	eb 15                	jmp    c001715b <Vm::faultHandler(regs*)+0x4c3>
c0017146:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001714a:	eb 0f                	jmp    c001715b <Vm::faultHandler(regs*)+0x4c3>
c001714c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017150:	eb 09                	jmp    c001715b <Vm::faultHandler(regs*)+0x4c3>
c0017152:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017156:	eb 03                	jmp    c001715b <Vm::faultHandler(regs*)+0x4c3>
c0017158:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001715b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001715e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017163:	74 29                	je     c001718e <Vm::faultHandler(regs*)+0x4f6>
c0017165:	3d ff ff 00 00       	cmp    eax,0xffff
c001716a:	76 22                	jbe    c001718e <Vm::faultHandler(regs*)+0x4f6>
c001716c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017170:	50                   	push   eax
c0017171:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017175:	50                   	push   eax
c0017176:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001717a:	50                   	push   eax
c001717b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001717f:	50                   	push   eax
c0017180:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017184:	50                   	push   eax
c0017185:	6a 6e                	push   0x6e
c0017187:	6a 6e                	push   0x6e
c0017189:	e9 8f 00 00 00       	jmp    c001721d <Vm::faultHandler(regs*)+0x585>
c001718e:	0f b7 c0             	movzx  eax,ax
c0017191:	52                   	push   edx
c0017192:	52                   	push   edx
c0017193:	50                   	push   eax
c0017194:	57                   	push   edi
c0017195:	e8 8a fa ff ff       	call   c0016c24 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001719a:	59                   	pop    ecx
c001719b:	0f b6 c0             	movzx  eax,al
c001719e:	5e                   	pop    esi
c001719f:	50                   	push   eax
c00171a0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00171a4:	50                   	push   eax
c00171a5:	e8 fe f5 ff ff       	call   c00167a8 <Vm::outbv(unsigned short, unsigned char)>
c00171aa:	83 c4 10             	add    esp,0x10
c00171ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00171b0:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00171b4:	74 03                	je     c00171b9 <Vm::faultHandler(regs*)+0x521>
c00171b6:	48                   	dec    eax
c00171b7:	eb 01                	jmp    c00171ba <Vm::faultHandler(regs*)+0x522>
c00171b9:	40                   	inc    eax
c00171ba:	0f b7 c0             	movzx  eax,ax
c00171bd:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00171c0:	e9 88 01 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c00171c5:	8d 46 ff             	lea    eax,[esi-0x1]
c00171c8:	0f b6 f0             	movzx  esi,al
c00171cb:	83 fe 05             	cmp    esi,0x5
c00171ce:	77 1e                	ja     c00171ee <Vm::faultHandler(regs*)+0x556>
c00171d0:	ff 24 b5 64 25 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdda9c]
c00171d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00171db:	eb 11                	jmp    c00171ee <Vm::faultHandler(regs*)+0x556>
c00171dd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00171e0:	eb 0c                	jmp    c00171ee <Vm::faultHandler(regs*)+0x556>
c00171e2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00171e5:	eb 07                	jmp    c00171ee <Vm::faultHandler(regs*)+0x556>
c00171e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00171ea:	eb 02                	jmp    c00171ee <Vm::faultHandler(regs*)+0x556>
c00171ec:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00171ee:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00171f1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00171f6:	74 37                	je     c001722f <Vm::faultHandler(regs*)+0x597>
c00171f8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00171fe:	76 2f                	jbe    c001722f <Vm::faultHandler(regs*)+0x597>
c0017200:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017204:	50                   	push   eax
c0017205:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017209:	50                   	push   eax
c001720a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001720e:	50                   	push   eax
c001720f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017213:	50                   	push   eax
c0017214:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017218:	50                   	push   eax
c0017219:	6a 6f                	push   0x6f
c001721b:	6a 6f                	push   0x6f
c001721d:	68 f0 24 02 c0       	push   0xc00224f0
c0017222:	e8 1e 37 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017227:	83 c4 20             	add    esp,0x20
c001722a:	e9 83 01 00 00       	jmp    c00173b2 <Vm::faultHandler(regs*)+0x71a>
c001722f:	0f b7 d7             	movzx  edx,di
c0017232:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017235:	0f b7 c6             	movzx  eax,si
c0017238:	81 e1 00 04 00 00    	and    ecx,0x400
c001723e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017241:	83 e5 01             	and    ebp,0x1
c0017244:	74 1d                	je     c0017263 <Vm::faultHandler(regs*)+0x5cb>
c0017246:	55                   	push   ebp
c0017247:	55                   	push   ebp
c0017248:	50                   	push   eax
c0017249:	52                   	push   edx
c001724a:	e8 f8 f9 ff ff       	call   c0016c47 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001724f:	83 c4 10             	add    esp,0x10
c0017252:	89 fa                	mov    edx,edi
c0017254:	ef                   	out    dx,eax
c0017255:	85 c9                	test   ecx,ecx
c0017257:	74 05                	je     c001725e <Vm::faultHandler(regs*)+0x5c6>
c0017259:	83 ee 04             	sub    esi,0x4
c001725c:	eb 21                	jmp    c001727f <Vm::faultHandler(regs*)+0x5e7>
c001725e:	83 c6 04             	add    esi,0x4
c0017261:	eb 1c                	jmp    c001727f <Vm::faultHandler(regs*)+0x5e7>
c0017263:	55                   	push   ebp
c0017264:	55                   	push   ebp
c0017265:	50                   	push   eax
c0017266:	52                   	push   edx
c0017267:	e8 c9 f9 ff ff       	call   c0016c35 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001726c:	83 c4 10             	add    esp,0x10
c001726f:	89 fa                	mov    edx,edi
c0017271:	66 ef                	out    dx,ax
c0017273:	85 c9                	test   ecx,ecx
c0017275:	74 05                	je     c001727c <Vm::faultHandler(regs*)+0x5e4>
c0017277:	83 ee 02             	sub    esi,0x2
c001727a:	eb 03                	jmp    c001727f <Vm::faultHandler(regs*)+0x5e7>
c001727c:	83 c6 02             	add    esi,0x2
c001727f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017285:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017288:	e9 c0 00 00 00       	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c001728d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017294:	83 ec 0c             	sub    esp,0xc
c0017297:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001729b:	50                   	push   eax
c001729c:	e8 f4 f4 ff ff       	call   c0016795 <Vm::inbv(unsigned short)>
c00172a1:	0f b6 c0             	movzx  eax,al
c00172a4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00172a7:	eb 3a                	jmp    c00172e3 <Vm::faultHandler(regs*)+0x64b>
c00172a9:	83 e5 01             	and    ebp,0x1
c00172ac:	74 07                	je     c00172b5 <Vm::faultHandler(regs*)+0x61d>
c00172ae:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172b2:	ed                   	in     eax,dx
c00172b3:	eb 14                	jmp    c00172c9 <Vm::faultHandler(regs*)+0x631>
c00172b5:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00172b8:	66 31 f6             	xor    si,si
c00172bb:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00172be:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172c2:	66 ed                	in     ax,dx
c00172c4:	0f b7 c0             	movzx  eax,ax
c00172c7:	09 f0                	or     eax,esi
c00172c9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172cc:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00172d0:	eb 7e                	jmp    c0017350 <Vm::faultHandler(regs*)+0x6b8>
c00172d2:	52                   	push   edx
c00172d3:	52                   	push   edx
c00172d4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00172d8:	50                   	push   eax
c00172d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172dd:	50                   	push   eax
c00172de:	e8 c5 f4 ff ff       	call   c00167a8 <Vm::outbv(unsigned short, unsigned char)>
c00172e3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00172e7:	eb 4f                	jmp    c0017338 <Vm::faultHandler(regs*)+0x6a0>
c00172e9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172ec:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00172f0:	83 e5 01             	and    ebp,0x1
c00172f3:	74 03                	je     c00172f8 <Vm::faultHandler(regs*)+0x660>
c00172f5:	ef                   	out    dx,eax
c00172f6:	eb d4                	jmp    c00172cc <Vm::faultHandler(regs*)+0x634>
c00172f8:	66 ef                	out    dx,ax
c00172fa:	eb d0                	jmp    c00172cc <Vm::faultHandler(regs*)+0x634>
c00172fc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017303:	83 ec 0c             	sub    esp,0xc
c0017306:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001730a:	50                   	push   eax
c001730b:	e8 85 f4 ff ff       	call   c0016795 <Vm::inbv(unsigned short)>
c0017310:	0f b6 c0             	movzx  eax,al
c0017313:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017316:	eb 1d                	jmp    c0017335 <Vm::faultHandler(regs*)+0x69d>
c0017318:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001731b:	83 e5 01             	and    ebp,0x1
c001731e:	74 03                	je     c0017323 <Vm::faultHandler(regs*)+0x68b>
c0017320:	ed                   	in     eax,dx
c0017321:	eb 0d                	jmp    c0017330 <Vm::faultHandler(regs*)+0x698>
c0017323:	66 ed                	in     ax,dx
c0017325:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017328:	0f b7 c0             	movzx  eax,ax
c001732b:	66 31 d2             	xor    dx,dx
c001732e:	09 d0                	or     eax,edx
c0017330:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017333:	eb 18                	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c0017335:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017338:	83 c4 10             	add    esp,0x10
c001733b:	eb 13                	jmp    c0017350 <Vm::faultHandler(regs*)+0x6b8>
c001733d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017340:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017343:	83 e5 01             	and    ebp,0x1
c0017346:	74 03                	je     c001734b <Vm::faultHandler(regs*)+0x6b3>
c0017348:	ef                   	out    dx,eax
c0017349:	eb 02                	jmp    c001734d <Vm::faultHandler(regs*)+0x6b5>
c001734b:	66 ef                	out    dx,ax
c001734d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017350:	b0 01                	mov    al,0x1
c0017352:	eb 60                	jmp    c00173b4 <Vm::faultHandler(regs*)+0x71c>
c0017354:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017358:	50                   	push   eax
c0017359:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001735d:	50                   	push   eax
c001735e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017362:	50                   	push   eax
c0017363:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017367:	50                   	push   eax
c0017368:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001736c:	50                   	push   eax
c001736d:	52                   	push   edx
c001736e:	52                   	push   edx
c001736f:	68 1d 25 02 c0       	push   0xc002251d
c0017374:	e8 cc 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017379:	83 c4 20             	add    esp,0x20
c001737c:	83 ec 0c             	sub    esp,0xc
c001737f:	6a 60                	push   0x60
c0017381:	e8 0f f4 ff ff       	call   c0016795 <Vm::inbv(unsigned short)>
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	0f b6 d0             	movzx  edx,al
c001738c:	83 fa 1c             	cmp    edx,0x1c
c001738f:	74 05                	je     c0017396 <Vm::faultHandler(regs*)+0x6fe>
c0017391:	83 fa 5a             	cmp    edx,0x5a
c0017394:	75 e6                	jne    c001737c <Vm::faultHandler(regs*)+0x6e4>
c0017396:	0f b6 c0             	movzx  eax,al
c0017399:	83 f8 1c             	cmp    eax,0x1c
c001739c:	74 05                	je     c00173a3 <Vm::faultHandler(regs*)+0x70b>
c001739e:	83 f8 5a             	cmp    eax,0x5a
c00173a1:	75 0f                	jne    c00173b2 <Vm::faultHandler(regs*)+0x71a>
c00173a3:	83 ec 0c             	sub    esp,0xc
c00173a6:	6a 60                	push   0x60
c00173a8:	e8 e8 f3 ff ff       	call   c0016795 <Vm::inbv(unsigned short)>
c00173ad:	83 c4 10             	add    esp,0x10
c00173b0:	eb e4                	jmp    c0017396 <Vm::faultHandler(regs*)+0x6fe>
c00173b2:	31 c0                	xor    eax,eax
c00173b4:	83 c4 2c             	add    esp,0x2c
c00173b7:	5b                   	pop    ebx
c00173b8:	5e                   	pop    esi
c00173b9:	5f                   	pop    edi
c00173ba:	5d                   	pop    ebp
c00173bb:	c3                   	ret    

c00173bc <noCopro(unsigned long)>:
c00173bc:	c3                   	ret    

c00173bd <nmiHandler(regs*, void*)>:
c00173bd:	83 ec 0c             	sub    esp,0xc
c00173c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00173c5:	83 ec 0c             	sub    esp,0xc
c00173c8:	50                   	push   eax
c00173c9:	e8 e8 fe fe ff       	call   c00072b6 <Computer::handleNMI()>
c00173ce:	83 c4 10             	add    esp,0x10
c00173d1:	90                   	nop
c00173d2:	83 c4 0c             	add    esp,0xc
c00173d5:	c3                   	ret    

c00173d6 <doubleFault(regs*, void*)>:
c00173d6:	55                   	push   ebp
c00173d7:	89 e5                	mov    ebp,esp
c00173d9:	83 ec 08             	sub    esp,0x8
c00173dc:	83 ec 0c             	sub    esp,0xc
c00173df:	68 7c 25 02 c0       	push   0xc002257c
c00173e4:	e8 08 9f ff ff       	call   c00112f1 <KePanic(char const*)>
c00173e9:	83 c4 10             	add    esp,0x10
c00173ec:	90                   	nop
c00173ed:	c9                   	leave  
c00173ee:	c3                   	ret    

c00173ef <displayDebugInfo(regs*)>:
c00173ef:	83 ec 1c             	sub    esp,0x1c
c00173f2:	0f 20 c0             	mov    eax,cr0
c00173f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00173f9:	0f 20 d0             	mov    eax,cr2
c00173fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017400:	0f 20 d8             	mov    eax,cr3
c0017403:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017407:	0f 20 e0             	mov    eax,cr4
c001740a:	89 04 24             	mov    DWORD PTR [esp],eax
c001740d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017411:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017414:	83 ec 08             	sub    esp,0x8
c0017417:	50                   	push   eax
c0017418:	68 98 25 02 c0       	push   0xc0022598
c001741d:	e8 23 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017429:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001742c:	83 ec 08             	sub    esp,0x8
c001742f:	50                   	push   eax
c0017430:	68 89 25 02 c0       	push   0xc0022589
c0017435:	e8 0b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001743a:	83 c4 10             	add    esp,0x10
c001743d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017441:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017444:	83 ec 08             	sub    esp,0x8
c0017447:	50                   	push   eax
c0017448:	68 94 25 02 c0       	push   0xc0022594
c001744d:	e8 f3 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017452:	83 c4 10             	add    esp,0x10
c0017455:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017459:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001745c:	83 ec 08             	sub    esp,0x8
c001745f:	50                   	push   eax
c0017460:	68 a3 25 02 c0       	push   0xc00225a3
c0017465:	e8 db 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001746a:	83 c4 10             	add    esp,0x10
c001746d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017471:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017474:	83 ec 08             	sub    esp,0x8
c0017477:	50                   	push   eax
c0017478:	68 ae 25 02 c0       	push   0xc00225ae
c001747d:	e8 c3 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017482:	83 c4 10             	add    esp,0x10
c0017485:	83 ec 08             	sub    esp,0x8
c0017488:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001748c:	68 b9 25 02 c0       	push   0xc00225b9
c0017491:	e8 af 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	83 ec 08             	sub    esp,0x8
c001749c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00174a0:	68 c4 25 02 c0       	push   0xc00225c4
c00174a5:	e8 9b 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174aa:	83 c4 10             	add    esp,0x10
c00174ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174b1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174b4:	c1 e0 05             	shl    eax,0x5
c00174b7:	8d 90 40 35 02 c0    	lea    edx,[eax-0x3ffdcac0]
c00174bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174c1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00174c4:	83 ec 04             	sub    esp,0x4
c00174c7:	52                   	push   edx
c00174c8:	50                   	push   eax
c00174c9:	68 cf 25 02 c0       	push   0xc00225cf
c00174ce:	e8 72 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174db:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174e1:	83 ec 0c             	sub    esp,0xc
c00174e4:	50                   	push   eax
c00174e5:	e8 6f 12 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00174ea:	83 c4 10             	add    esp,0x10
c00174ed:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174f2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174f8:	83 ec 08             	sub    esp,0x8
c00174fb:	68 de 25 02 c0       	push   0xc00225de
c0017500:	50                   	push   eax
c0017501:	e8 a0 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001750e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017514:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017518:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c001751b:	83 ec 08             	sub    esp,0x8
c001751e:	52                   	push   edx
c001751f:	50                   	push   eax
c0017520:	e8 3b 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017525:	83 c4 10             	add    esp,0x10
c0017528:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001752d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017533:	83 ec 08             	sub    esp,0x8
c0017536:	68 ec 25 02 c0       	push   0xc00225ec
c001753b:	50                   	push   eax
c001753c:	e8 65 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017541:	83 c4 10             	add    esp,0x10
c0017544:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017549:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001754f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017554:	8b 12                	mov    edx,DWORD PTR [edx]
c0017556:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017559:	83 c2 0c             	add    edx,0xc
c001755c:	83 ec 08             	sub    esp,0x8
c001755f:	52                   	push   edx
c0017560:	50                   	push   eax
c0017561:	e8 40 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017566:	83 c4 10             	add    esp,0x10
c0017569:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001756e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017574:	83 ec 08             	sub    esp,0x8
c0017577:	68 f5 25 02 c0       	push   0xc00225f5
c001757c:	50                   	push   eax
c001757d:	e8 24 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017582:	83 c4 10             	add    esp,0x10
c0017585:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001758a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017590:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017594:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017597:	83 ec 08             	sub    esp,0x8
c001759a:	52                   	push   edx
c001759b:	50                   	push   eax
c001759c:	e8 bf 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175a1:	83 c4 10             	add    esp,0x10
c00175a4:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175a9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175af:	83 ec 08             	sub    esp,0x8
c00175b2:	68 fd 25 02 c0       	push   0xc00225fd
c00175b7:	50                   	push   eax
c00175b8:	e8 e9 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175bd:	83 c4 10             	add    esp,0x10
c00175c0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175cf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	52                   	push   edx
c00175d6:	50                   	push   eax
c00175d7:	e8 84 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175dc:	83 c4 10             	add    esp,0x10
c00175df:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ea:	83 ec 08             	sub    esp,0x8
c00175ed:	68 05 26 02 c0       	push   0xc0022605
c00175f2:	50                   	push   eax
c00175f3:	e8 ae 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175f8:	83 c4 10             	add    esp,0x10
c00175fb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017600:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017606:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001760a:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c001760d:	83 ec 08             	sub    esp,0x8
c0017610:	52                   	push   edx
c0017611:	50                   	push   eax
c0017612:	e8 49 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017625:	83 ec 08             	sub    esp,0x8
c0017628:	68 0d 26 02 c0       	push   0xc002260d
c001762d:	50                   	push   eax
c001762e:	e8 73 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017633:	83 c4 10             	add    esp,0x10
c0017636:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001763b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017641:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017645:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017648:	83 ec 08             	sub    esp,0x8
c001764b:	52                   	push   edx
c001764c:	50                   	push   eax
c001764d:	e8 0e 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017652:	83 c4 10             	add    esp,0x10
c0017655:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001765a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017660:	83 ec 08             	sub    esp,0x8
c0017663:	68 15 26 02 c0       	push   0xc0022615
c0017668:	50                   	push   eax
c0017669:	e8 38 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001766e:	83 c4 10             	add    esp,0x10
c0017671:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017676:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017680:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017683:	83 ec 08             	sub    esp,0x8
c0017686:	52                   	push   edx
c0017687:	50                   	push   eax
c0017688:	e8 d3 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017695:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001769b:	83 ec 08             	sub    esp,0x8
c001769e:	68 1d 26 02 c0       	push   0xc002261d
c00176a3:	50                   	push   eax
c00176a4:	e8 fd 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176a9:	83 c4 10             	add    esp,0x10
c00176ac:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00176bb:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00176be:	83 ec 08             	sub    esp,0x8
c00176c1:	52                   	push   edx
c00176c2:	50                   	push   eax
c00176c3:	e8 98 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176c8:	83 c4 10             	add    esp,0x10
c00176cb:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176d0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176d6:	83 ec 08             	sub    esp,0x8
c00176d9:	68 25 26 02 c0       	push   0xc0022625
c00176de:	50                   	push   eax
c00176df:	e8 c2 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176e4:	83 c4 10             	add    esp,0x10
c00176e7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176f2:	83 ec 08             	sub    esp,0x8
c00176f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00176f9:	50                   	push   eax
c00176fa:	e8 61 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176ff:	83 c4 10             	add    esp,0x10
c0017702:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017707:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770d:	83 ec 08             	sub    esp,0x8
c0017710:	68 2e 26 02 c0       	push   0xc002262e
c0017715:	50                   	push   eax
c0017716:	e8 8b 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001771b:	83 c4 10             	add    esp,0x10
c001771e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017723:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017729:	83 ec 08             	sub    esp,0x8
c001772c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017730:	50                   	push   eax
c0017731:	e8 2a 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017736:	83 c4 10             	add    esp,0x10
c0017739:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001773e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017744:	83 ec 08             	sub    esp,0x8
c0017747:	68 36 26 02 c0       	push   0xc0022636
c001774c:	50                   	push   eax
c001774d:	e8 54 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017752:	83 c4 10             	add    esp,0x10
c0017755:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001775a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017760:	83 ec 08             	sub    esp,0x8
c0017763:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017767:	50                   	push   eax
c0017768:	e8 f3 12 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001776d:	83 c4 10             	add    esp,0x10
c0017770:	fa                   	cli    
c0017771:	f4                   	hlt    
c0017772:	eb fe                	jmp    c0017772 <displayDebugInfo(regs*)+0x383>

c0017774 <HalSystemIdle()>:
c0017774:	56                   	push   esi
c0017775:	53                   	push   ebx
c0017776:	83 ec 14             	sub    esp,0x14
c0017779:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001777e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017784:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c001778a:	83 e0 04             	and    eax,0x4
c001778d:	0f b6 c0             	movzx  eax,al
c0017790:	85 c0                	test   eax,eax
c0017792:	0f 95 c0             	setne  al
c0017795:	0f b6 c0             	movzx  eax,al
c0017798:	85 c0                	test   eax,eax
c001779a:	74 4c                	je     c00177e8 <HalSystemIdle()+0x74>
c001779c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177a1:	83 ec 08             	sub    esp,0x8
c00177a4:	68 e1 00 00 00       	push   0xe1
c00177a9:	50                   	push   eax
c00177aa:	e8 11 f9 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c00177af:	83 c4 10             	add    esp,0x10
c00177b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00177bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00177c3:	83 e2 02             	and    edx,0x2
c00177c6:	89 d3                	mov    ebx,edx
c00177c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177cc:	83 e2 00             	and    edx,0x0
c00177cf:	89 d6                	mov    esi,edx
c00177d1:	56                   	push   esi
c00177d2:	53                   	push   ebx
c00177d3:	68 e1 00 00 00       	push   0xe1
c00177d8:	50                   	push   eax
c00177d9:	e8 0e f9 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c00177de:	83 c4 10             	add    esp,0x10
c00177e1:	e8 ae 89 fe ff       	call   c0000194 <doTPAUSE>
c00177e6:	eb 01                	jmp    c00177e9 <HalSystemIdle()+0x75>
c00177e8:	f4                   	hlt    
c00177e9:	90                   	nop
c00177ea:	83 c4 14             	add    esp,0x14
c00177ed:	5b                   	pop    ebx
c00177ee:	5e                   	pop    esi
c00177ef:	c3                   	ret    

c00177f0 <displayProgramFault(char const*)>:
c00177f0:	83 ec 0c             	sub    esp,0xc
c00177f3:	83 ec 0c             	sub    esp,0xc
c00177f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00177fa:	e8 46 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177ff:	83 c4 10             	add    esp,0x10
c0017802:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017807:	8b 00                	mov    eax,DWORD PTR [eax]
c0017809:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001780c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017812:	85 c0                	test   eax,eax
c0017814:	74 21                	je     c0017837 <displayProgramFault(char const*)+0x47>
c0017816:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001781b:	8b 00                	mov    eax,DWORD PTR [eax]
c001781d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017820:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017826:	6a 04                	push   0x4
c0017828:	6a 0f                	push   0xf
c001782a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001782e:	50                   	push   eax
c001782f:	e8 e4 12 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017834:	83 c4 10             	add    esp,0x10
c0017837:	90                   	nop
c0017838:	83 c4 0c             	add    esp,0xc
c001783b:	c3                   	ret    

c001783c <gpFault(regs*, void*)>:
c001783c:	83 ec 1c             	sub    esp,0x1c
c001783f:	c7 05 74 97 02 c0 98 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c98
c0017849:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c001784e:	85 c0                	test   eax,eax
c0017850:	74 1e                	je     c0017870 <gpFault(regs*, void*)+0x34>
c0017852:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c0017857:	83 ec 0c             	sub    esp,0xc
c001785a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001785e:	ff d0                	call   eax
c0017860:	83 c4 10             	add    esp,0x10
c0017863:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017867:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001786c:	85 c0                	test   eax,eax
c001786e:	75 2e                	jne    c001789e <gpFault(regs*, void*)+0x62>
c0017870:	83 ec 0c             	sub    esp,0xc
c0017873:	68 3e 26 02 c0       	push   0xc002263e
c0017878:	e8 73 ff ff ff       	call   c00177f0 <displayProgramFault(char const*)>
c001787d:	83 c4 10             	add    esp,0x10
c0017880:	83 ec 0c             	sub    esp,0xc
c0017883:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017887:	e8 63 fb ff ff       	call   c00173ef <displayDebugInfo(regs*)>
c001788c:	83 c4 10             	add    esp,0x10
c001788f:	83 ec 0c             	sub    esp,0xc
c0017892:	6a 00                	push   0x0
c0017894:	e8 a3 ed ff ff       	call   c001663c <Thr::terminateFromIRQ(int)>
c0017899:	83 c4 10             	add    esp,0x10
c001789c:	eb 01                	jmp    c001789f <gpFault(regs*, void*)+0x63>
c001789e:	90                   	nop
c001789f:	83 c4 1c             	add    esp,0x1c
c00178a2:	c3                   	ret    

c00178a3 <pgFault(regs*, void*)>:
c00178a3:	83 ec 1c             	sub    esp,0x1c
c00178a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178aa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00178ad:	0f 20 d0             	mov    eax,cr2
c00178b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178b8:	83 ec 04             	sub    esp,0x4
c00178bb:	52                   	push   edx
c00178bc:	50                   	push   eax
c00178bd:	68 1c 27 02 c0       	push   0xc002271c
c00178c2:	e8 7e 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00178c7:	83 c4 10             	add    esp,0x10
c00178ca:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00178cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00178d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00178d4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00178da:	0f 20 d2             	mov    edx,cr2
c00178dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00178e1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00178e5:	83 ec 08             	sub    esp,0x8
c00178e8:	52                   	push   edx
c00178e9:	50                   	push   eax
c00178ea:	e8 a1 2a ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c00178ef:	83 c4 10             	add    esp,0x10
c00178f2:	0f b6 c0             	movzx  eax,al
c00178f5:	85 c0                	test   eax,eax
c00178f7:	75 2e                	jne    c0017927 <pgFault(regs*, void*)+0x84>
c00178f9:	83 ec 0c             	sub    esp,0xc
c00178fc:	68 57 26 02 c0       	push   0xc0022657
c0017901:	e8 ea fe ff ff       	call   c00177f0 <displayProgramFault(char const*)>
c0017906:	83 c4 10             	add    esp,0x10
c0017909:	83 ec 0c             	sub    esp,0xc
c001790c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017910:	e8 da fa ff ff       	call   c00173ef <displayDebugInfo(regs*)>
c0017915:	83 c4 10             	add    esp,0x10
c0017918:	83 ec 0c             	sub    esp,0xc
c001791b:	6a 00                	push   0x0
c001791d:	e8 1a ed ff ff       	call   c001663c <Thr::terminateFromIRQ(int)>
c0017922:	83 c4 10             	add    esp,0x10
c0017925:	eb 01                	jmp    c0017928 <pgFault(regs*, void*)+0x85>
c0017927:	90                   	nop
c0017928:	83 c4 1c             	add    esp,0x1c
c001792b:	c3                   	ret    

c001792c <otherISRHandler(regs*, void*)>:
c001792c:	83 ec 0c             	sub    esp,0xc
c001792f:	83 ec 0c             	sub    esp,0xc
c0017932:	68 44 27 02 c0       	push   0xc0022744
c0017937:	e8 b4 fe ff ff       	call   c00177f0 <displayProgramFault(char const*)>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	83 ec 0c             	sub    esp,0xc
c0017942:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017946:	e8 a4 fa ff ff       	call   c00173ef <displayDebugInfo(regs*)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	6a 00                	push   0x0
c0017953:	e8 e4 ec ff ff       	call   c001663c <Thr::terminateFromIRQ(int)>
c0017958:	83 c4 10             	add    esp,0x10
c001795b:	90                   	nop
c001795c:	83 c4 0c             	add    esp,0xc
c001795f:	c3                   	ret    

c0017960 <opcodeFault(regs*, void*)>:
c0017960:	55                   	push   ebp
c0017961:	89 e5                	mov    ebp,esp
c0017963:	83 ec 08             	sub    esp,0x8
c0017966:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017969:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001796c:	83 ec 08             	sub    esp,0x8
c001796f:	50                   	push   eax
c0017970:	68 62 26 02 c0       	push   0xc0022662
c0017975:	e8 cb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001797a:	83 c4 10             	add    esp,0x10
c001797d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017982:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017988:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001798e:	0f b6 c0             	movzx  eax,al
c0017991:	85 c0                	test   eax,eax
c0017993:	74 21                	je     c00179b6 <opcodeFault(regs*, void*)+0x56>
c0017995:	83 ec 0c             	sub    esp,0xc
c0017998:	68 6c 27 02 c0       	push   0xc002276c
c001799d:	e8 a3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179a2:	83 c4 10             	add    esp,0x10
c00179a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00179ab:	8d 50 19             	lea    edx,[eax+0x19]
c00179ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00179b1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00179b4:	eb 2b                	jmp    c00179e1 <opcodeFault(regs*, void*)+0x81>
c00179b6:	83 ec 0c             	sub    esp,0xc
c00179b9:	68 70 26 02 c0       	push   0xc0022670
c00179be:	e8 2d fe ff ff       	call   c00177f0 <displayProgramFault(char const*)>
c00179c3:	83 c4 10             	add    esp,0x10
c00179c6:	83 ec 0c             	sub    esp,0xc
c00179c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00179cc:	e8 1e fa ff ff       	call   c00173ef <displayDebugInfo(regs*)>
c00179d1:	83 c4 10             	add    esp,0x10
c00179d4:	83 ec 0c             	sub    esp,0xc
c00179d7:	6a 00                	push   0x0
c00179d9:	e8 5e ec ff ff       	call   c001663c <Thr::terminateFromIRQ(int)>
c00179de:	83 c4 10             	add    esp,0x10
c00179e1:	c9                   	leave  
c00179e2:	c3                   	ret    

c00179e3 <i386SaveCoprocessor(void*)>:
c00179e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179e7:	83 c0 3f             	add    eax,0x3f
c00179ea:	83 e0 c0             	and    eax,0xffffffc0
c00179ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00179f1:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c00179f7 <i386LoadCoprocessor(void*)>:
c00179f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179fb:	83 c0 3f             	add    eax,0x3f
c00179fe:	83 e0 c0             	and    eax,0xffffffc0
c0017a01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017a05:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017a0b <x87EmulHandler(regs*, void*)>:
c0017a0b:	53                   	push   ebx
c0017a0c:	83 ec 08             	sub    esp,0x8
c0017a0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a14:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017a18:	74 10                	je     c0017a2a <x87EmulHandler(regs*, void*)+0x1f>
c0017a1a:	83 ec 0c             	sub    esp,0xc
c0017a1d:	68 7d 26 02 c0       	push   0xc002267d
c0017a22:	e8 ca 98 ff ff       	call   c00112f1 <KePanic(char const*)>
c0017a27:	83 c4 10             	add    esp,0x10
c0017a2a:	0f 20 c0             	mov    eax,cr0
c0017a2d:	a8 08                	test   al,0x8
c0017a2f:	74 59                	je     c0017a8a <x87EmulHandler(regs*, void*)+0x7f>
c0017a31:	0f 06                	clts   
c0017a33:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a38:	85 c0                	test   eax,eax
c0017a3a:	74 0e                	je     c0017a4a <x87EmulHandler(regs*, void*)+0x3f>
c0017a3c:	83 ec 0c             	sub    esp,0xc
c0017a3f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a42:	e8 9c ff ff ff       	call   c00179e3 <i386SaveCoprocessor(void*)>
c0017a47:	83 c4 10             	add    esp,0x10
c0017a4a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017a50:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017a54:	75 12                	jne    c0017a68 <x87EmulHandler(regs*, void*)+0x5d>
c0017a56:	83 ec 0c             	sub    esp,0xc
c0017a59:	68 40 02 00 00       	push   0x240
c0017a5e:	e8 53 00 ff ff       	call   c0007ab6 <malloc>
c0017a63:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017a66:	eb 10                	jmp    c0017a78 <x87EmulHandler(regs*, void*)+0x6d>
c0017a68:	83 ec 0c             	sub    esp,0xc
c0017a6b:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c0017a70:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017a73:	e8 7f ff ff ff       	call   c00179f7 <i386LoadCoprocessor(void*)>
c0017a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a7d:	83 c4 10             	add    esp,0x10
c0017a80:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017a85:	83 c4 08             	add    esp,0x8
c0017a88:	5b                   	pop    ebx
c0017a89:	c3                   	ret    
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	68 91 26 02 c0       	push   0xc0022691
c0017a92:	e8 ae 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a97:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017a9f:	83 c4 18             	add    esp,0x18
c0017aa2:	5b                   	pop    ebx
c0017aa3:	e9 94 eb ff ff       	jmp    c001663c <Thr::terminateFromIRQ(int)>

c0017aa8 <HalInitialiseCoprocessor()>:
c0017aa8:	83 ec 10             	sub    esp,0x10
c0017aab:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017ab5:	6a 00                	push   0x0
c0017ab7:	68 0b 7a 01 c0       	push   0xc0017a0b
c0017abc:	6a 07                	push   0x7
c0017abe:	e8 33 51 ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ac3:	e8 48 70 00 00       	call   c001eb10 <avxDetect>
c0017ac8:	83 c4 10             	add    esp,0x10
c0017acb:	85 c0                	test   eax,eax
c0017acd:	74 1c                	je     c0017aeb <HalInitialiseCoprocessor()+0x43>
c0017acf:	c7 05 70 97 02 c0 3a eb 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eb3a
c0017ad9:	c7 05 6c 97 02 c0 4b eb 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eb4b
c0017ae3:	83 c4 0c             	add    esp,0xc
c0017ae6:	e9 71 70 00 00       	jmp    c001eb5c <avxInit>
c0017aeb:	e8 b0 73 00 00       	call   c001eea0 <absolutelyNoChanceInHell>
c0017af0:	85 c0                	test   eax,eax
c0017af2:	74 1c                	je     c0017b10 <HalInitialiseCoprocessor()+0x68>
c0017af4:	c7 05 70 97 02 c0 b8 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eeb8
c0017afe:	c7 05 6c 97 02 c0 c0 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eec0
c0017b08:	83 c4 0c             	add    esp,0xc
c0017b0b:	e9 b8 73 00 00       	jmp    c001eec8 <sseInit>
c0017b10:	e8 d1 73 00 00       	call   c001eee6 <x87Detect>
c0017b15:	85 c0                	test   eax,eax
c0017b17:	74 1c                	je     c0017b35 <HalInitialiseCoprocessor()+0x8d>
c0017b19:	c7 05 70 97 02 c0 01 ef 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ef01
c0017b23:	c7 05 6c 97 02 c0 08 ef 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ef08
c0017b2d:	83 c4 0c             	add    esp,0xc
c0017b30:	e9 da 73 00 00       	jmp    c001ef0f <x87Init>
c0017b35:	c7 05 70 97 02 c0 bc 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc00173bc
c0017b3f:	c7 05 6c 97 02 c0 bc 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc00173bc
c0017b49:	0f 20 c0             	mov    eax,cr0
c0017b4c:	83 c8 04             	or     eax,0x4
c0017b4f:	0f 22 c0             	mov    cr0,eax
c0017b52:	83 c4 0c             	add    esp,0xc
c0017b55:	c3                   	ret    

c0017b56 <HalPanic(char const*)>:
c0017b56:	53                   	push   ebx
c0017b57:	83 ec 10             	sub    esp,0x10
c0017b5a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017b5e:	fa                   	cli    
c0017b5f:	53                   	push   ebx
c0017b60:	68 a7 26 02 c0       	push   0xc00226a7
c0017b65:	e8 db 2d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017b6a:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017b6f:	83 c4 10             	add    esp,0x10
c0017b72:	85 c0                	test   eax,eax
c0017b74:	74 09                	je     c0017b7f <HalPanic(char const*)+0x29>
c0017b76:	83 ec 0c             	sub    esp,0xc
c0017b79:	53                   	push   ebx
c0017b7a:	ff d0                	call   eax
c0017b7c:	83 c4 10             	add    esp,0x10
c0017b7f:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017b84:	85 c0                	test   eax,eax
c0017b86:	0f 84 dc 00 00 00    	je     c0017c68 <HalPanic(char const*)+0x112>
c0017b8c:	52                   	push   edx
c0017b8d:	6a 01                	push   0x1
c0017b8f:	6a 0f                	push   0xf
c0017b91:	50                   	push   eax
c0017b92:	e8 1d 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b97:	59                   	pop    ecx
c0017b98:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b9e:	e8 01 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017ba3:	58                   	pop    eax
c0017ba4:	5a                   	pop    edx
c0017ba5:	68 64 09 02 c0       	push   0xc0020964
c0017baa:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb0:	e8 37 0a ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017bb5:	83 c4 0c             	add    esp,0xc
c0017bb8:	6a 01                	push   0x1
c0017bba:	6a 0f                	push   0xf
c0017bbc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc2:	e8 ed 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017bc7:	59                   	pop    ecx
c0017bc8:	58                   	pop    eax
c0017bc9:	68 c0 26 02 c0       	push   0xc00226c0
c0017bce:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd4:	e8 cd 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bd9:	83 c4 0c             	add    esp,0xc
c0017bdc:	6a 0f                	push   0xf
c0017bde:	6a 01                	push   0x1
c0017be0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017be6:	e8 c9 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017beb:	58                   	pop    eax
c0017bec:	5a                   	pop    edx
c0017bed:	68 c9 26 02 c0       	push   0xc00226c9
c0017bf2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bf8:	e8 a9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bfd:	83 c4 0c             	add    esp,0xc
c0017c00:	6a 01                	push   0x1
c0017c02:	6a 0f                	push   0xf
c0017c04:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c0a:	e8 a5 09 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017c0f:	59                   	pop    ecx
c0017c10:	58                   	pop    eax
c0017c11:	68 0d 27 02 c0       	push   0xc002270d
c0017c16:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c1c:	e8 85 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c21:	58                   	pop    eax
c0017c22:	5a                   	pop    edx
c0017c23:	68 d6 26 02 c0       	push   0xc00226d6
c0017c28:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c2e:	e8 73 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c33:	59                   	pop    ecx
c0017c34:	58                   	pop    eax
c0017c35:	68 10 27 02 c0       	push   0xc0022710
c0017c3a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c40:	e8 61 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c45:	58                   	pop    eax
c0017c46:	5a                   	pop    edx
c0017c47:	53                   	push   ebx
c0017c48:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c4e:	e8 53 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c53:	59                   	pop    ecx
c0017c54:	5b                   	pop    ebx
c0017c55:	68 0d 27 02 c0       	push   0xc002270d
c0017c5a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017c60:	e8 41 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c65:	83 c4 10             	add    esp,0x10
c0017c68:	eb fe                	jmp    c0017c68 <HalPanic(char const*)+0x112>

c0017c6a <HalQueryPerformanceCounter()>:
c0017c6a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c6f:	31 d2                	xor    edx,edx
c0017c71:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017c77:	31 c0                	xor    eax,eax
c0017c79:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017c80:	74 02                	je     c0017c84 <HalQueryPerformanceCounter()+0x1a>
c0017c82:	0f 31                	rdtsc  
c0017c84:	c3                   	ret    

c0017c85 <HalInitialise()>:
c0017c85:	53                   	push   ebx
c0017c86:	83 ec 08             	sub    esp,0x8
c0017c89:	e8 98 51 ff ff       	call   c000ce26 <setupINTS()>
c0017c8e:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017c95:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c9a:	75 0f                	jne    c0017cab <HalInitialise()+0x26>
c0017c9c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017ca2:	83 e2 fe             	and    edx,0xfffffffe
c0017ca5:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017cab:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017cb1:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017cb8:	83 e2 fe             	and    edx,0xfffffffe
c0017cbb:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017cc1:	e8 9e 02 00 00       	call   c0017f64 <picOpen()>
c0017cc6:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017ccd:	74 0a                	je     c0017cd9 <HalInitialise()+0x54>
c0017ccf:	e8 e0 01 00 00       	call   c0017eb4 <picDisable()>
c0017cd4:	e8 ad 67 00 00       	call   c001e486 <apicOpen()>
c0017cd9:	bb 0f 00 00 00       	mov    ebx,0xf
c0017cde:	50                   	push   eax
c0017cdf:	6a 00                	push   0x0
c0017ce1:	68 2c 79 01 c0       	push   0xc001792c
c0017ce6:	6a 00                	push   0x0
c0017ce8:	e8 09 4f ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ced:	83 c4 0c             	add    esp,0xc
c0017cf0:	6a 00                	push   0x0
c0017cf2:	68 2c 79 01 c0       	push   0xc001792c
c0017cf7:	6a 01                	push   0x1
c0017cf9:	e8 f8 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cfe:	83 c4 0c             	add    esp,0xc
c0017d01:	6a 00                	push   0x0
c0017d03:	68 bd 73 01 c0       	push   0xc00173bd
c0017d08:	6a 02                	push   0x2
c0017d0a:	e8 e7 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d0f:	83 c4 0c             	add    esp,0xc
c0017d12:	6a 00                	push   0x0
c0017d14:	68 2c 79 01 c0       	push   0xc001792c
c0017d19:	6a 03                	push   0x3
c0017d1b:	e8 d6 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d20:	83 c4 0c             	add    esp,0xc
c0017d23:	6a 00                	push   0x0
c0017d25:	68 2c 79 01 c0       	push   0xc001792c
c0017d2a:	6a 04                	push   0x4
c0017d2c:	e8 c5 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d31:	83 c4 0c             	add    esp,0xc
c0017d34:	6a 00                	push   0x0
c0017d36:	68 2c 79 01 c0       	push   0xc001792c
c0017d3b:	6a 05                	push   0x5
c0017d3d:	e8 b4 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d42:	83 c4 0c             	add    esp,0xc
c0017d45:	6a 00                	push   0x0
c0017d47:	68 60 79 01 c0       	push   0xc0017960
c0017d4c:	6a 06                	push   0x6
c0017d4e:	e8 a3 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d53:	83 c4 0c             	add    esp,0xc
c0017d56:	6a 00                	push   0x0
c0017d58:	68 d6 73 01 c0       	push   0xc00173d6
c0017d5d:	6a 08                	push   0x8
c0017d5f:	e8 92 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d64:	83 c4 0c             	add    esp,0xc
c0017d67:	6a 00                	push   0x0
c0017d69:	68 2c 79 01 c0       	push   0xc001792c
c0017d6e:	6a 09                	push   0x9
c0017d70:	e8 81 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d75:	83 c4 0c             	add    esp,0xc
c0017d78:	6a 00                	push   0x0
c0017d7a:	68 2c 79 01 c0       	push   0xc001792c
c0017d7f:	6a 0a                	push   0xa
c0017d81:	e8 70 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d86:	83 c4 0c             	add    esp,0xc
c0017d89:	6a 00                	push   0x0
c0017d8b:	68 2c 79 01 c0       	push   0xc001792c
c0017d90:	6a 0b                	push   0xb
c0017d92:	e8 5f 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d97:	83 c4 0c             	add    esp,0xc
c0017d9a:	6a 00                	push   0x0
c0017d9c:	68 3c 78 01 c0       	push   0xc001783c
c0017da1:	6a 0d                	push   0xd
c0017da3:	e8 4e 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017da8:	83 c4 0c             	add    esp,0xc
c0017dab:	6a 00                	push   0x0
c0017dad:	68 a3 78 01 c0       	push   0xc00178a3
c0017db2:	6a 0e                	push   0xe
c0017db4:	e8 3d 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	50                   	push   eax
c0017dbd:	6a 00                	push   0x0
c0017dbf:	68 2c 79 01 c0       	push   0xc001792c
c0017dc4:	53                   	push   ebx
c0017dc5:	43                   	inc    ebx
c0017dc6:	e8 2b 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017dcb:	83 c4 10             	add    esp,0x10
c0017dce:	83 fb 1e             	cmp    ebx,0x1e
c0017dd1:	75 e9                	jne    c0017dbc <HalInitialise()+0x137>
c0017dd3:	50                   	push   eax
c0017dd4:	6a 00                	push   0x0
c0017dd6:	68 d9 25 01 c0       	push   0xc00125d9
c0017ddb:	6a 60                	push   0x60
c0017ddd:	e8 14 4e ff ff       	call   c000cbf6 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017de2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017de7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017df1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017df8:	e8 b9 fc fe ff       	call   c0007ab6 <malloc>
c0017dfd:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e00:	89 c3                	mov    ebx,eax
c0017e02:	e8 3b 09 00 00       	call   c0018742 <RTC::RTC()>
c0017e07:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017e11:	5a                   	pop    edx
c0017e12:	59                   	pop    ecx
c0017e13:	53                   	push   ebx
c0017e14:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e1a:	e8 a3 48 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c0017e1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e21:	6a 00                	push   0x0
c0017e23:	6a 00                	push   0x0
c0017e25:	6a 00                	push   0x0
c0017e27:	53                   	push   ebx
c0017e28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e2b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017e30:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017e36:	83 c4 28             	add    esp,0x28
c0017e39:	5b                   	pop    ebx
c0017e3a:	c3                   	ret    

c0017e3b <HalMakeBeep(int)>:
c0017e3b:	53                   	push   ebx
c0017e3c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017e40:	85 db                	test   ebx,ebx
c0017e42:	75 07                	jne    c0017e4b <HalMakeBeep(int)+0x10>
c0017e44:	e4 61                	in     al,0x61
c0017e46:	83 e0 fc             	and    eax,0xfffffffc
c0017e49:	eb 26                	jmp    c0017e71 <HalMakeBeep(int)+0x36>
c0017e4b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017e50:	99                   	cdq    
c0017e51:	f7 fb                	idiv   ebx
c0017e53:	89 c1                	mov    ecx,eax
c0017e55:	b0 b6                	mov    al,0xb6
c0017e57:	e6 43                	out    0x43,al
c0017e59:	88 c8                	mov    al,cl
c0017e5b:	e6 42                	out    0x42,al
c0017e5d:	89 c8                	mov    eax,ecx
c0017e5f:	c1 e8 08             	shr    eax,0x8
c0017e62:	e6 42                	out    0x42,al
c0017e64:	e4 61                	in     al,0x61
c0017e66:	89 c2                	mov    edx,eax
c0017e68:	83 ca 03             	or     edx,0x3
c0017e6b:	38 d0                	cmp    al,dl
c0017e6d:	74 04                	je     c0017e73 <HalMakeBeep(int)+0x38>
c0017e6f:	88 d0                	mov    al,dl
c0017e71:	e6 61                	out    0x61,al
c0017e73:	5b                   	pop    ebx
c0017e74:	c3                   	ret    

c0017e75 <HalGetRand()>:
c0017e75:	31 c0                	xor    eax,eax
c0017e77:	c3                   	ret    

c0017e78 <HalEndOfInterrupt(int)>:
c0017e78:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e7f:	74 23                	je     c0017ea4 <HalEndOfInterrupt(int)+0x2c>
c0017e81:	83 ec 14             	sub    esp,0x14
c0017e84:	6a 1b                	push   0x1b
c0017e86:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e8c:	e8 2f f2 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017e91:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e96:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017ea0:	83 c4 1c             	add    esp,0x1c
c0017ea3:	c3                   	ret    
c0017ea4:	e9 3f 02 00 00       	jmp    c00180e8 <picEOI(int)>

c0017ea9 <HalRestart()>:
c0017ea9:	c3                   	ret    

c0017eaa <HalShutdown()>:
c0017eaa:	c3                   	ret    

c0017eab <HalSleep()>:
c0017eab:	c3                   	ret    

c0017eac <picIoWait()>:
c0017eac:	eb 00                	jmp    c0017eae <picIoWait()+0x2>
c0017eae:	eb 00                	jmp    c0017eb0 <picIoWait()+0x4>
c0017eb0:	90                   	nop
c0017eb1:	c3                   	ret    
c0017eb2:	66 90                	xchg   ax,ax

c0017eb4 <picDisable()>:
c0017eb4:	83 ec 10             	sub    esp,0x10
c0017eb7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017ebe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017ec3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ec7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017ecc:	ee                   	out    dx,al
c0017ecd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017ed4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017ed9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017edd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017ee2:	ee                   	out    dx,al
c0017ee3:	90                   	nop
c0017ee4:	83 c4 10             	add    esp,0x10
c0017ee7:	c3                   	ret    

c0017ee8 <picGetIRQReg(int)>:
c0017ee8:	83 ec 10             	sub    esp,0x10
c0017eeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017eef:	0f b6 c0             	movzx  eax,al
c0017ef2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017ef9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017efd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017f01:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017f06:	ee                   	out    dx,al
c0017f07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f0b:	0f b6 c0             	movzx  eax,al
c0017f0e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017f15:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017f19:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017f1d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017f22:	ee                   	out    dx,al
c0017f23:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017f2a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017f2f:	89 c2                	mov    edx,eax
c0017f31:	ec                   	in     al,dx
c0017f32:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017f36:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017f3a:	0f b6 c0             	movzx  eax,al
c0017f3d:	c1 e0 08             	shl    eax,0x8
c0017f40:	89 c1                	mov    ecx,eax
c0017f42:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017f49:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017f4e:	89 c2                	mov    edx,eax
c0017f50:	ec                   	in     al,dx
c0017f51:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017f55:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017f59:	0f b6 c0             	movzx  eax,al
c0017f5c:	09 c8                	or     eax,ecx
c0017f5e:	83 c4 10             	add    esp,0x10
c0017f61:	c3                   	ret    
c0017f62:	66 90                	xchg   ax,ax

c0017f64 <picOpen()>:
c0017f64:	83 ec 50             	sub    esp,0x50
c0017f67:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017f6e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017f73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017f77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f7b:	ee                   	out    dx,al
c0017f7c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017f83:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017f88:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017f8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f90:	ee                   	out    dx,al
c0017f91:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017f99:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017fa1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017fa8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017fac:	89 c2                	mov    edx,eax
c0017fae:	ec                   	in     al,dx
c0017faf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017fb3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017fb7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017fbb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fc6:	89 c2                	mov    edx,eax
c0017fc8:	ec                   	in     al,dx
c0017fc9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017fcd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017fd1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017fd5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017fdc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017fe1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fe5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017fe9:	ee                   	out    dx,al
c0017fea:	e8 bd fe ff ff       	call   c0017eac <picIoWait()>
c0017fef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017ff6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017ffb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017fff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018003:	ee                   	out    dx,al
c0018004:	e8 a3 fe ff ff       	call   c0017eac <picIoWait()>
c0018009:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001800d:	0f b6 c0             	movzx  eax,al
c0018010:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018017:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001801b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001801f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018023:	ee                   	out    dx,al
c0018024:	e8 83 fe ff ff       	call   c0017eac <picIoWait()>
c0018029:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001802d:	0f b6 c0             	movzx  eax,al
c0018030:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018037:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001803b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001803f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018043:	ee                   	out    dx,al
c0018044:	e8 63 fe ff ff       	call   c0017eac <picIoWait()>
c0018049:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018050:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018055:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018059:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001805d:	ee                   	out    dx,al
c001805e:	e8 49 fe ff ff       	call   c0017eac <picIoWait()>
c0018063:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001806a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001806f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018073:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018077:	ee                   	out    dx,al
c0018078:	e8 2f fe ff ff       	call   c0017eac <picIoWait()>
c001807d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018084:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018089:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001808d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018091:	ee                   	out    dx,al
c0018092:	e8 15 fe ff ff       	call   c0017eac <picIoWait()>
c0018097:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001809e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00180a3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00180a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00180ab:	ee                   	out    dx,al
c00180ac:	e8 fb fd ff ff       	call   c0017eac <picIoWait()>
c00180b1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c00180b6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00180bd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00180c1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00180c5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00180c9:	ee                   	out    dx,al
c00180ca:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00180cf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00180d6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00180da:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00180de:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00180e2:	ee                   	out    dx,al
c00180e3:	90                   	nop
c00180e4:	83 c4 50             	add    esp,0x50
c00180e7:	c3                   	ret    

c00180e8 <picEOI(int)>:
c00180e8:	83 ec 10             	sub    esp,0x10
c00180eb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180f0:	75 1e                	jne    c0018110 <picEOI(int)+0x28>
c00180f2:	6a 0b                	push   0xb
c00180f4:	e8 ef fd ff ff       	call   c0017ee8 <picGetIRQReg(int)>
c00180f9:	83 c4 04             	add    esp,0x4
c00180fc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018101:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018106:	25 80 00 00 00       	and    eax,0x80
c001810b:	74 73                	je     c0018180 <picEOI(int)+0x98>
c001810d:	8d 76 00             	lea    esi,[esi+0x0]
c0018110:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018115:	75 31                	jne    c0018148 <picEOI(int)+0x60>
c0018117:	6a 0b                	push   0xb
c0018119:	e8 ca fd ff ff       	call   c0017ee8 <picGetIRQReg(int)>
c001811e:	83 c4 04             	add    esp,0x4
c0018121:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018126:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001812a:	98                   	cwde   
c001812b:	85 c0                	test   eax,eax
c001812d:	78 19                	js     c0018148 <picEOI(int)+0x60>
c001812f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018136:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001813b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001813f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018144:	ee                   	out    dx,al
c0018145:	eb 3d                	jmp    c0018184 <picEOI(int)+0x9c>
c0018147:	90                   	nop
c0018148:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001814d:	7e 19                	jle    c0018168 <picEOI(int)+0x80>
c001814f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018156:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001815b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001815f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018164:	ee                   	out    dx,al
c0018165:	8d 76 00             	lea    esi,[esi+0x0]
c0018168:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001816f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018174:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018178:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001817d:	ee                   	out    dx,al
c001817e:	eb 04                	jmp    c0018184 <picEOI(int)+0x9c>
c0018180:	90                   	nop
c0018181:	8d 76 00             	lea    esi,[esi+0x0]
c0018184:	83 c4 10             	add    esp,0x10
c0018187:	c3                   	ret    

c0018188 <RTC::open(int, int, void*)>:
c0018188:	31 c0                	xor    eax,eax
c001818a:	c3                   	ret    
c001818b:	90                   	nop

c001818c <RTC::close(int, int, void*)>:
c001818c:	31 c0                	xor    eax,eax
c001818e:	c3                   	ret    
c001818f:	90                   	nop

c0018190 <RTC::timeInSecondsUTC()>:
c0018190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018194:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001819a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00181a0:	c3                   	ret    
c00181a1:	90                   	nop

c00181a2 <RTC::timeInDatetimeUTC()>:
c00181a2:	53                   	push   ebx
c00181a3:	83 ec 14             	sub    esp,0x14
c00181a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00181aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00181b0:	50                   	push   eax
c00181b1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00181b4:	83 c4 0c             	add    esp,0xc
c00181b7:	52                   	push   edx
c00181b8:	50                   	push   eax
c00181b9:	53                   	push   ebx
c00181ba:	e8 77 42 ff ff       	call   c000c436 <secondsToDatetime(unsigned long long)>
c00181bf:	89 d8                	mov    eax,ebx
c00181c1:	83 c4 14             	add    esp,0x14
c00181c4:	5b                   	pop    ebx
c00181c5:	c2 04 00             	ret    0x4

c00181c8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00181c8:	56                   	push   esi
c00181c9:	53                   	push   ebx
c00181ca:	83 ec 14             	sub    esp,0x14
c00181cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00181d1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00181d3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00181d6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00181da:	52                   	push   edx
c00181db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181e3:	50                   	push   eax
c00181e4:	e8 4d 42 ff ff       	call   c000c436 <secondsToDatetime(unsigned long long)>
c00181e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00181f5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00181f9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00181fd:	89 f0                	mov    eax,esi
c00181ff:	83 c4 20             	add    esp,0x20
c0018202:	5b                   	pop    ebx
c0018203:	5e                   	pop    esi
c0018204:	ff e0                	jmp    eax

c0018206 <RTC::~RTC()>:
c0018206:	83 ec 0c             	sub    esp,0xc
c0018209:	ba ac 27 02 c0       	mov    edx,0xc00227ac
c001820e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018212:	89 10                	mov    DWORD PTR [eax],edx
c0018214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018218:	83 ec 0c             	sub    esp,0xc
c001821b:	50                   	push   eax
c001821c:	e8 a7 3f ff ff       	call   c000c1c8 <Clock::~Clock()>
c0018221:	83 c4 10             	add    esp,0x10
c0018224:	90                   	nop
c0018225:	83 c4 0c             	add    esp,0xc
c0018228:	c3                   	ret    
c0018229:	90                   	nop

c001822a <RTC::~RTC()>:
c001822a:	83 ec 0c             	sub    esp,0xc
c001822d:	83 ec 0c             	sub    esp,0xc
c0018230:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018234:	e8 cd ff ff ff       	call   c0018206 <RTC::~RTC()>
c0018239:	83 c4 10             	add    esp,0x10
c001823c:	83 ec 08             	sub    esp,0x8
c001823f:	68 60 01 00 00       	push   0x160
c0018244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018248:	e8 cb 25 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001824d:	83 c4 10             	add    esp,0x10
c0018250:	83 c4 0c             	add    esp,0xc
c0018253:	c3                   	ret    

c0018254 <RTC::get_update_in_progress_flag()>:
c0018254:	83 ec 14             	sub    esp,0x14
c0018257:	6a 0a                	push   0xa
c0018259:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001825f:	e8 14 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018264:	83 c4 1c             	add    esp,0x1c
c0018267:	0f b6 c0             	movzx  eax,al
c001826a:	c1 e8 07             	shr    eax,0x7
c001826d:	c3                   	ret    

c001826e <RTC::completeRTCRefresh()>:
c001826e:	55                   	push   ebp
c001826f:	57                   	push   edi
c0018270:	56                   	push   esi
c0018271:	53                   	push   ebx
c0018272:	83 ec 3c             	sub    esp,0x3c
c0018275:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c001827b:	83 ec 0c             	sub    esp,0xc
c001827e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018282:	e8 cd ff ff ff       	call   c0018254 <RTC::get_update_in_progress_flag()>
c0018287:	83 c4 10             	add    esp,0x10
c001828a:	84 c0                	test   al,al
c001828c:	74 0e                	je     c001829c <RTC::completeRTCRefresh()+0x2e>
c001828e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018294:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c001829a:	73 df                	jae    c001827b <RTC::completeRTCRefresh()+0xd>
c001829c:	51                   	push   ecx
c001829d:	51                   	push   ecx
c001829e:	6a 00                	push   0x0
c00182a0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182a6:	e8 cd ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182ab:	5b                   	pop    ebx
c00182ac:	89 c7                	mov    edi,eax
c00182ae:	5e                   	pop    esi
c00182af:	6a 02                	push   0x2
c00182b1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182b7:	e8 bc ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182bc:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00182c0:	5d                   	pop    ebp
c00182c1:	58                   	pop    eax
c00182c2:	6a 04                	push   0x4
c00182c4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182ca:	e8 a9 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182cf:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00182d3:	58                   	pop    eax
c00182d4:	5a                   	pop    edx
c00182d5:	6a 07                	push   0x7
c00182d7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182dd:	e8 96 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182e2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00182e6:	59                   	pop    ecx
c00182e7:	5b                   	pop    ebx
c00182e8:	6a 08                	push   0x8
c00182ea:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f0:	e8 83 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182f5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00182f9:	5e                   	pop    esi
c00182fa:	5d                   	pop    ebp
c00182fb:	6a 09                	push   0x9
c00182fd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018303:	e8 70 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018308:	0f b6 c0             	movzx  eax,al
c001830b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001830f:	83 c4 10             	add    esp,0x10
c0018312:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018318:	83 ec 0c             	sub    esp,0xc
c001831b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001831f:	e8 30 ff ff ff       	call   c0018254 <RTC::get_update_in_progress_flag()>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	84 c0                	test   al,al
c0018329:	74 0e                	je     c0018339 <RTC::completeRTCRefresh()+0xcb>
c001832b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018331:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018337:	73 df                	jae    c0018318 <RTC::completeRTCRefresh()+0xaa>
c0018339:	51                   	push   ecx
c001833a:	51                   	push   ecx
c001833b:	6a 00                	push   0x0
c001833d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018343:	e8 30 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018348:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001834c:	5b                   	pop    ebx
c001834d:	5e                   	pop    esi
c001834e:	6a 02                	push   0x2
c0018350:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018356:	e8 1d ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001835b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001835f:	5d                   	pop    ebp
c0018360:	58                   	pop    eax
c0018361:	6a 04                	push   0x4
c0018363:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018369:	e8 0a ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001836e:	88 c3                	mov    bl,al
c0018370:	58                   	pop    eax
c0018371:	5a                   	pop    edx
c0018372:	6a 07                	push   0x7
c0018374:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001837a:	e8 f9 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001837f:	59                   	pop    ecx
c0018380:	89 c6                	mov    esi,eax
c0018382:	5d                   	pop    ebp
c0018383:	6a 08                	push   0x8
c0018385:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001838b:	e8 e8 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018390:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018394:	58                   	pop    eax
c0018395:	5a                   	pop    edx
c0018396:	6a 09                	push   0x9
c0018398:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001839e:	e8 d5 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183a3:	89 f9                	mov    ecx,edi
c00183a5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00183a9:	0f b6 e8             	movzx  ebp,al
c00183ac:	83 c4 10             	add    esp,0x10
c00183af:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00183b3:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183b8:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00183bd:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00183c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00183c5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00183c9:	0f 94 c0             	sete   al
c00183cc:	0f b6 fb             	movzx  edi,bl
c00183cf:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00183d3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00183d8:	0f 94 c2             	sete   dl
c00183db:	21 d0                	and    eax,edx
c00183dd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00183e1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00183e5:	0f 94 c2             	sete   dl
c00183e8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00183ec:	21 c2                	and    edx,eax
c00183ee:	89 f0                	mov    eax,esi
c00183f0:	0f b6 c0             	movzx  eax,al
c00183f3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00183f7:	89 f0                	mov    eax,esi
c00183f9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00183fd:	0f 94 c0             	sete   al
c0018400:	21 d0                	and    eax,edx
c0018402:	31 d2                	xor    edx,edx
c0018404:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018408:	0f 94 c2             	sete   dl
c001840b:	85 c2                	test   edx,eax
c001840d:	75 27                	jne    c0018436 <RTC::completeRTCRefresh()+0x1c8>
c001840f:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0018413:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018417:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001841b:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001841f:	89 f0                	mov    eax,esi
c0018421:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018425:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018429:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001842d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018431:	e9 dc fe ff ff       	jmp    c0018312 <RTC::completeRTCRefresh()+0xa4>
c0018436:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001843a:	75 d3                	jne    c001840f <RTC::completeRTCRefresh()+0x1a1>
c001843c:	52                   	push   edx
c001843d:	52                   	push   edx
c001843e:	6a 0b                	push   0xb
c0018440:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018446:	e8 2d ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001844b:	83 c4 10             	add    esp,0x10
c001844e:	a8 04                	test   al,0x4
c0018450:	75 7a                	jne    c00184cc <RTC::completeRTCRefresh()+0x25e>
c0018452:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018456:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001845a:	83 e1 0f             	and    ecx,0xf
c001845d:	c1 ea 04             	shr    edx,0x4
c0018460:	c1 ef 04             	shr    edi,0x4
c0018463:	6b d2 0a             	imul   edx,edx,0xa
c0018466:	83 e6 0f             	and    esi,0xf
c0018469:	01 d1                	add    ecx,edx
c001846b:	c1 ed 04             	shr    ebp,0x4
c001846e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018472:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018476:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001847a:	c1 ea 04             	shr    edx,0x4
c001847d:	83 e1 0f             	and    ecx,0xf
c0018480:	6b d2 0a             	imul   edx,edx,0xa
c0018483:	6b ed 0a             	imul   ebp,ebp,0xa
c0018486:	01 d1                	add    ecx,edx
c0018488:	89 fa                	mov    edx,edi
c001848a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001848e:	83 e2 07             	and    edx,0x7
c0018491:	89 d9                	mov    ecx,ebx
c0018493:	6b d2 0a             	imul   edx,edx,0xa
c0018496:	83 e1 0f             	and    ecx,0xf
c0018499:	83 e3 80             	and    ebx,0xffffff80
c001849c:	01 d1                	add    ecx,edx
c001849e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00184a2:	09 cb                	or     ebx,ecx
c00184a4:	c1 ea 04             	shr    edx,0x4
c00184a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00184ab:	6b d2 0a             	imul   edx,edx,0xa
c00184ae:	83 e1 0f             	and    ecx,0xf
c00184b1:	01 d6                	add    esi,edx
c00184b3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00184b7:	c1 ea 04             	shr    edx,0x4
c00184ba:	6b d2 0a             	imul   edx,edx,0xa
c00184bd:	01 d1                	add    ecx,edx
c00184bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00184c3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00184c7:	83 e2 0f             	and    edx,0xf
c00184ca:	01 d5                	add    ebp,edx
c00184cc:	a8 02                	test   al,0x2
c00184ce:	75 15                	jne    c00184e5 <RTC::completeRTCRefresh()+0x277>
c00184d0:	f6 c3 80             	test   bl,0x80
c00184d3:	74 10                	je     c00184e5 <RTC::completeRTCRefresh()+0x277>
c00184d5:	83 e3 7f             	and    ebx,0x7f
c00184d8:	b9 18 00 00 00       	mov    ecx,0x18
c00184dd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00184e0:	99                   	cdq    
c00184e1:	f7 f9                	idiv   ecx
c00184e3:	88 d3                	mov    bl,dl
c00184e5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00184eb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00184f1:	77 06                	ja     c00184f9 <RTC::completeRTCRefresh()+0x28b>
c00184f3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00184f9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00184fe:	31 c9                	xor    ecx,ecx
c0018500:	c1 e0 10             	shl    eax,0x10
c0018503:	89 cd                	mov    ebp,ecx
c0018505:	c1 e7 10             	shl    edi,0x10
c0018508:	31 d2                	xor    edx,edx
c001850a:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018510:	09 c5                	or     ebp,eax
c0018512:	89 f0                	mov    eax,esi
c0018514:	89 e9                	mov    ecx,ebp
c0018516:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001851a:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001851e:	88 c2                	mov    dl,al
c0018520:	88 d9                	mov    cl,bl
c0018522:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018526:	0f b7 c2             	movzx  eax,dx
c0018529:	09 f8                	or     eax,edi
c001852b:	89 c2                	mov    edx,eax
c001852d:	50                   	push   eax
c001852e:	50                   	push   eax
c001852f:	51                   	push   ecx
c0018530:	52                   	push   edx
c0018531:	e8 81 3d ff ff       	call   c000c2b7 <datetimeToSeconds(datetime_t)>
c0018536:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001853a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018540:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018546:	83 c4 4c             	add    esp,0x4c
c0018549:	5b                   	pop    ebx
c001854a:	5e                   	pop    esi
c001854b:	5f                   	pop    edi
c001854c:	5d                   	pop    ebp
c001854d:	c3                   	ret    

c001854e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001854e:	55                   	push   ebp
c001854f:	57                   	push   edi
c0018550:	56                   	push   esi
c0018551:	53                   	push   ebx
c0018552:	83 ec 30             	sub    esp,0x30
c0018555:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018559:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c001855d:	6a 00                	push   0x0
c001855f:	6a 00                	push   0x0
c0018561:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018567:	e8 26 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001856c:	83 c4 0c             	add    esp,0xc
c001856f:	6a 00                	push   0x0
c0018571:	6a 02                	push   0x2
c0018573:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018579:	e8 14 ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857e:	31 d2                	xor    edx,edx
c0018580:	89 f9                	mov    ecx,edi
c0018582:	89 f8                	mov    eax,edi
c0018584:	c1 e9 10             	shr    ecx,0x10
c0018587:	0f b6 c4             	movzx  eax,ah
c001858a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001858e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018592:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018596:	b9 64 00 00 00       	mov    ecx,0x64
c001859b:	89 f0                	mov    eax,esi
c001859d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00185a1:	89 f0                	mov    eax,esi
c00185a3:	0f b6 c4             	movzx  eax,ah
c00185a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185aa:	89 f0                	mov    eax,esi
c00185ac:	c1 e8 10             	shr    eax,0x10
c00185af:	f7 f1                	div    ecx
c00185b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00185b5:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00185b9:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00185bd:	59                   	pop    ecx
c00185be:	5b                   	pop    ebx
c00185bf:	89 fb                	mov    ebx,edi
c00185c1:	6a 0b                	push   0xb
c00185c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185c9:	e8 aa eb fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00185ce:	83 c4 10             	add    esp,0x10
c00185d1:	89 c5                	mov    ebp,eax
c00185d3:	a8 04                	test   al,0x4
c00185d5:	75 6e                	jne    c0018645 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00185d7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00185db:	31 d2                	xor    edx,edx
c00185dd:	0f b6 c1             	movzx  eax,cl
c00185e0:	b9 0a 00 00 00       	mov    ecx,0xa
c00185e5:	f7 f1                	div    ecx
c00185e7:	c1 e0 04             	shl    eax,0x4
c00185ea:	09 d0                	or     eax,edx
c00185ec:	31 d2                	xor    edx,edx
c00185ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00185f2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00185f7:	f7 f1                	div    ecx
c00185f9:	c1 e0 04             	shl    eax,0x4
c00185fc:	09 d0                	or     eax,edx
c00185fe:	31 d2                	xor    edx,edx
c0018600:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018604:	0f b6 c3             	movzx  eax,bl
c0018607:	f7 f1                	div    ecx
c0018609:	c1 e0 04             	shl    eax,0x4
c001860c:	09 d0                	or     eax,edx
c001860e:	31 d2                	xor    edx,edx
c0018610:	89 c3                	mov    ebx,eax
c0018612:	89 f0                	mov    eax,esi
c0018614:	0f b6 c0             	movzx  eax,al
c0018617:	f7 f1                	div    ecx
c0018619:	c1 e0 04             	shl    eax,0x4
c001861c:	09 d0                	or     eax,edx
c001861e:	31 d2                	xor    edx,edx
c0018620:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018624:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018629:	f7 f1                	div    ecx
c001862b:	c1 e0 04             	shl    eax,0x4
c001862e:	09 d0                	or     eax,edx
c0018630:	31 d2                	xor    edx,edx
c0018632:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001863a:	f7 f1                	div    ecx
c001863c:	c1 e0 04             	shl    eax,0x4
c001863f:	09 d0                	or     eax,edx
c0018641:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018645:	83 e5 02             	and    ebp,0x2
c0018648:	75 1e                	jne    c0018668 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001864a:	0f b6 c3             	movzx  eax,bl
c001864d:	83 f8 0b             	cmp    eax,0xb
c0018650:	76 10                	jbe    c0018662 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018652:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018655:	88 d3                	mov    bl,dl
c0018657:	84 d2                	test   dl,dl
c0018659:	75 02                	jne    c001865d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c001865b:	b3 0c                	mov    bl,0xc
c001865d:	83 cb 80             	or     ebx,0xffffff80
c0018660:	eb 06                	jmp    c0018668 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018662:	85 c0                	test   eax,eax
c0018664:	75 02                	jne    c0018668 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018666:	b3 0c                	mov    bl,0xc
c0018668:	0f b6 db             	movzx  ebx,bl
c001866b:	50                   	push   eax
c001866c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018671:	52                   	push   edx
c0018672:	6a 00                	push   0x0
c0018674:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001867a:	e8 13 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001867f:	83 c4 0c             	add    esp,0xc
c0018682:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018687:	50                   	push   eax
c0018688:	6a 02                	push   0x2
c001868a:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018690:	e8 fd eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018695:	83 c4 0c             	add    esp,0xc
c0018698:	53                   	push   ebx
c0018699:	6a 04                	push   0x4
c001869b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186a1:	e8 ec eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186a6:	83 c4 0c             	add    esp,0xc
c00186a9:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00186ae:	52                   	push   edx
c00186af:	6a 07                	push   0x7
c00186b1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186b7:	e8 d6 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186bc:	83 c4 0c             	add    esp,0xc
c00186bf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00186c4:	50                   	push   eax
c00186c5:	6a 08                	push   0x8
c00186c7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186cd:	e8 c0 eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186d2:	83 c4 0c             	add    esp,0xc
c00186d5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00186da:	55                   	push   ebp
c00186db:	6a 09                	push   0x9
c00186dd:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00186e3:	e8 aa eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186e8:	5a                   	pop    edx
c00186e9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00186ed:	e8 7c fb ff ff       	call   c001826e <RTC::completeRTCRefresh()>
c00186f2:	83 c4 3c             	add    esp,0x3c
c00186f5:	b0 01                	mov    al,0x1
c00186f7:	5b                   	pop    ebx
c00186f8:	5e                   	pop    esi
c00186f9:	5f                   	pop    edi
c00186fa:	5d                   	pop    ebp
c00186fb:	c3                   	ret    

c00186fc <rtcIRQHandler(regs*, void*)>:
c00186fc:	53                   	push   ebx
c00186fd:	83 ec 10             	sub    esp,0x10
c0018700:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018704:	6a 0c                	push   0xc
c0018706:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001870c:	e8 67 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018711:	83 c4 10             	add    esp,0x10
c0018714:	a8 80                	test   al,0x80
c0018716:	74 24                	je     c001873c <rtcIRQHandler(regs*, void*)+0x40>
c0018718:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001871f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018726:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c001872d:	75 0d                	jne    c001873c <rtcIRQHandler(regs*, void*)+0x40>
c001872f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018733:	83 c4 08             	add    esp,0x8
c0018736:	5b                   	pop    ebx
c0018737:	e9 32 fb ff ff       	jmp    c001826e <RTC::completeRTCRefresh()>
c001873c:	83 c4 08             	add    esp,0x8
c001873f:	5b                   	pop    ebx
c0018740:	c3                   	ret    
c0018741:	90                   	nop

c0018742 <RTC::RTC()>:
c0018742:	83 ec 1c             	sub    esp,0x1c
c0018745:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018749:	83 ec 08             	sub    esp,0x8
c001874c:	68 8f 27 02 c0       	push   0xc002278f
c0018751:	50                   	push   eax
c0018752:	e8 3b 3a ff ff       	call   c000c192 <Clock::Clock(char const*)>
c0018757:	83 c4 10             	add    esp,0x10
c001875a:	ba ac 27 02 c0       	mov    edx,0xc00227ac
c001875f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018763:	89 10                	mov    DWORD PTR [eax],edx
c0018765:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018769:	83 ec 0c             	sub    esp,0xc
c001876c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018770:	6a 01                	push   0x1
c0018772:	68 fc 86 01 c0       	push   0xc00186fc
c0018777:	6a 08                	push   0x8
c0018779:	50                   	push   eax
c001877a:	e8 ef 3e ff ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001877f:	83 c4 20             	add    esp,0x20
c0018782:	89 c2                	mov    edx,eax
c0018784:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018788:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001878e:	fa                   	cli    
c001878f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0018794:	83 c0 01             	add    eax,0x1
c0018797:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001879c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187a1:	83 ec 08             	sub    esp,0x8
c00187a4:	6a 0b                	push   0xb
c00187a6:	50                   	push   eax
c00187a7:	e8 cc e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187ac:	83 c4 10             	add    esp,0x10
c00187af:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00187b3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00187b8:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00187bc:	83 ca 10             	or     edx,0x10
c00187bf:	0f b6 d2             	movzx  edx,dl
c00187c2:	83 ec 04             	sub    esp,0x4
c00187c5:	52                   	push   edx
c00187c6:	6a 0b                	push   0xb
c00187c8:	50                   	push   eax
c00187c9:	e8 c4 ea fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00187ce:	83 c4 10             	add    esp,0x10
c00187d1:	83 ec 0c             	sub    esp,0xc
c00187d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187d8:	e8 91 fa ff ff       	call   c001826e <RTC::completeRTCRefresh()>
c00187dd:	83 c4 10             	add    esp,0x10
c00187e0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187e5:	83 e8 01             	sub    eax,0x1
c00187e8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00187ed:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00187f2:	85 c0                	test   eax,eax
c00187f4:	75 01                	jne    c00187f7 <RTC::RTC()+0xb5>
c00187f6:	fb                   	sti    
c00187f7:	90                   	nop
c00187f8:	83 c4 1c             	add    esp,0x1c
c00187fb:	c3                   	ret    

c00187fc <HalConsoleScroll(int, int)>:
c00187fc:	83 ec 10             	sub    esp,0x10
c00187ff:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018807:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001880f:	90                   	nop
c0018810:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018815:	0f 8f e1 00 00 00    	jg     c00188fc <HalConsoleScroll(int, int)+0x100>
c001881b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018823:	90                   	nop
c0018824:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001882c:	0f 8f be 00 00 00    	jg     c00188f0 <HalConsoleScroll(int, int)+0xf4>
c0018832:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018836:	89 d0                	mov    eax,edx
c0018838:	c1 e0 02             	shl    eax,0x2
c001883b:	01 d0                	add    eax,edx
c001883d:	c1 e0 05             	shl    eax,0x5
c0018840:	89 c2                	mov    edx,eax
c0018842:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018846:	01 d0                	add    eax,edx
c0018848:	89 c2                	mov    edx,eax
c001884a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001884e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018851:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018855:	89 d0                	mov    eax,edx
c0018857:	c1 e0 02             	shl    eax,0x2
c001885a:	01 d0                	add    eax,edx
c001885c:	c1 e0 05             	shl    eax,0x5
c001885f:	89 c2                	mov    edx,eax
c0018861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018865:	01 d0                	add    eax,edx
c0018867:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001886d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018871:	01 c2                	add    edx,eax
c0018873:	8a 01                	mov    al,BYTE PTR [ecx]
c0018875:	88 02                	mov    BYTE PTR [edx],al
c0018877:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001887c:	75 66                	jne    c00188e4 <HalConsoleScroll(int, int)+0xe8>
c001887e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018882:	83 e0 01             	and    eax,0x1
c0018885:	74 39                	je     c00188c0 <HalConsoleScroll(int, int)+0xc4>
c0018887:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001888b:	83 e0 0f             	and    eax,0xf
c001888e:	88 c2                	mov    dl,al
c0018890:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018894:	c1 e0 04             	shl    eax,0x4
c0018897:	09 d0                	or     eax,edx
c0018899:	88 c1                	mov    cl,al
c001889b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001889f:	89 d0                	mov    eax,edx
c00188a1:	c1 e0 02             	shl    eax,0x2
c00188a4:	01 d0                	add    eax,edx
c00188a6:	c1 e0 05             	shl    eax,0x5
c00188a9:	89 c2                	mov    edx,eax
c00188ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188af:	01 d0                	add    eax,edx
c00188b1:	89 c2                	mov    edx,eax
c00188b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188b7:	01 d0                	add    eax,edx
c00188b9:	88 ca                	mov    dl,cl
c00188bb:	88 10                	mov    BYTE PTR [eax],dl
c00188bd:	eb 25                	jmp    c00188e4 <HalConsoleScroll(int, int)+0xe8>
c00188bf:	90                   	nop
c00188c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188c4:	89 d0                	mov    eax,edx
c00188c6:	c1 e0 02             	shl    eax,0x2
c00188c9:	01 d0                	add    eax,edx
c00188cb:	c1 e0 05             	shl    eax,0x5
c00188ce:	89 c2                	mov    edx,eax
c00188d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188d4:	01 d0                	add    eax,edx
c00188d6:	89 c2                	mov    edx,eax
c00188d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188dc:	01 d0                	add    eax,edx
c00188de:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00188e1:	8d 76 00             	lea    esi,[esi+0x0]
c00188e4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00188e9:	e9 36 ff ff ff       	jmp    c0018824 <HalConsoleScroll(int, int)+0x28>
c00188ee:	66 90                	xchg   ax,ax
c00188f0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00188f5:	e9 16 ff ff ff       	jmp    c0018810 <HalConsoleScroll(int, int)+0x14>
c00188fa:	66 90                	xchg   ax,ax
c00188fc:	90                   	nop
c00188fd:	83 c4 10             	add    esp,0x10
c0018900:	c3                   	ret    
c0018901:	8d 76 00             	lea    esi,[esi+0x0]

c0018904 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018904:	83 ec 14             	sub    esp,0x14
c0018907:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001890b:	88 04 24             	mov    BYTE PTR [esp],al
c001890e:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018911:	0f b6 c0             	movzx  eax,al
c0018914:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018918:	89 d1                	mov    ecx,edx
c001891a:	83 e1 0f             	and    ecx,0xf
c001891d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018921:	c1 e2 04             	shl    edx,0x4
c0018924:	0f b6 d2             	movzx  edx,dl
c0018927:	09 ca                	or     edx,ecx
c0018929:	c1 e2 08             	shl    edx,0x8
c001892c:	09 d0                	or     eax,edx
c001892e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018933:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001893b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001893f:	89 d0                	mov    eax,edx
c0018941:	c1 e0 02             	shl    eax,0x2
c0018944:	01 d0                	add    eax,edx
c0018946:	c1 e0 04             	shl    eax,0x4
c0018949:	89 c2                	mov    edx,eax
c001894b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001894f:	01 d0                	add    eax,edx
c0018951:	01 c0                	add    eax,eax
c0018953:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018957:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001895b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018960:	66 89 02             	mov    WORD PTR [edx],ax
c0018963:	90                   	nop
c0018964:	83 c4 14             	add    esp,0x14
c0018967:	c3                   	ret    

c0018968 <HalConsoleCursorUpdate(int, int)>:
c0018968:	83 ec 20             	sub    esp,0x20
c001896b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001896f:	89 c2                	mov    edx,eax
c0018971:	c1 e2 02             	shl    edx,0x2
c0018974:	01 d0                	add    eax,edx
c0018976:	c1 e0 04             	shl    eax,0x4
c0018979:	89 c2                	mov    edx,eax
c001897b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001897f:	01 d0                	add    eax,edx
c0018981:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018986:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001898d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018992:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018996:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001899a:	ee                   	out    dx,al
c001899b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00189a0:	0f b6 c0             	movzx  eax,al
c00189a3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00189aa:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00189ae:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00189b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189b6:	ee                   	out    dx,al
c00189b7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00189be:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00189c3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00189c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189cb:	ee                   	out    dx,al
c00189cc:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00189d1:	c1 e8 08             	shr    eax,0x8
c00189d4:	0f b6 c0             	movzx  eax,al
c00189d7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00189de:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00189e2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00189e6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00189ea:	ee                   	out    dx,al
c00189eb:	90                   	nop
c00189ec:	83 c4 20             	add    esp,0x20
c00189ef:	c3                   	ret    

c00189f0 <FAT::getName()>:
c00189f0:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c00189f5:	c3                   	ret    
c00189f6:	66 90                	xchg   ax,ax

c00189f8 <FAT::tell(void*, unsigned long long*)>:
c00189f8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189fd:	75 09                	jne    c0018a08 <FAT::tell(void*, unsigned long long*)+0x10>
c00189ff:	b8 04 00 00 00       	mov    eax,0x4
c0018a04:	c3                   	ret    
c0018a05:	8d 76 00             	lea    esi,[esi+0x0]
c0018a08:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a0d:	75 09                	jne    c0018a18 <FAT::tell(void*, unsigned long long*)+0x20>
c0018a0f:	b8 04 00 00 00       	mov    eax,0x4
c0018a14:	c3                   	ret    
c0018a15:	8d 76 00             	lea    esi,[esi+0x0]
c0018a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a1c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018a1f:	ba 00 00 00 00       	mov    edx,0x0
c0018a24:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a28:	89 01                	mov    DWORD PTR [ecx],eax
c0018a2a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a2d:	b8 00 00 00 00       	mov    eax,0x0
c0018a32:	c3                   	ret    
c0018a33:	90                   	nop

c0018a34 <FAT::stat(void*, unsigned long long*)>:
c0018a34:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018a39:	75 09                	jne    c0018a44 <FAT::stat(void*, unsigned long long*)+0x10>
c0018a3b:	b8 04 00 00 00       	mov    eax,0x4
c0018a40:	c3                   	ret    
c0018a41:	8d 76 00             	lea    esi,[esi+0x0]
c0018a44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a49:	75 09                	jne    c0018a54 <FAT::stat(void*, unsigned long long*)+0x20>
c0018a4b:	b8 04 00 00 00       	mov    eax,0x4
c0018a50:	c3                   	ret    
c0018a51:	8d 76 00             	lea    esi,[esi+0x0]
c0018a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018a5b:	ba 00 00 00 00       	mov    edx,0x0
c0018a60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018a64:	89 01                	mov    DWORD PTR [ecx],eax
c0018a66:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018a69:	b8 00 00 00 00       	mov    eax,0x0
c0018a6e:	c3                   	ret    
c0018a6f:	90                   	nop

c0018a70 <FAT::~FAT()>:
c0018a70:	83 ec 0c             	sub    esp,0xc
c0018a73:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c0018a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a7c:	89 10                	mov    DWORD PTR [eax],edx
c0018a7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a82:	83 ec 0c             	sub    esp,0xc
c0018a85:	50                   	push   eax
c0018a86:	e8 d9 2a ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0018a8b:	83 c4 10             	add    esp,0x10
c0018a8e:	90                   	nop
c0018a8f:	83 c4 0c             	add    esp,0xc
c0018a92:	c3                   	ret    
c0018a93:	90                   	nop

c0018a94 <FAT::~FAT()>:
c0018a94:	83 ec 0c             	sub    esp,0xc
c0018a97:	83 ec 0c             	sub    esp,0xc
c0018a9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a9e:	e8 cd ff ff ff       	call   c0018a70 <FAT::~FAT()>
c0018aa3:	83 c4 10             	add    esp,0x10
c0018aa6:	83 ec 08             	sub    esp,0x8
c0018aa9:	6a 08                	push   0x8
c0018aab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018aaf:	e8 64 1d ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018ab4:	83 c4 10             	add    esp,0x10
c0018ab7:	83 c4 0c             	add    esp,0xc
c0018aba:	c3                   	ret    
c0018abb:	90                   	nop

c0018abc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018abc:	83 ec 1c             	sub    esp,0x1c
c0018abf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ac6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018acb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018acf:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018ad6:	83 f8 ff             	cmp    eax,0xffffffff
c0018ad9:	75 35                	jne    c0018b10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018adb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018adf:	88 c2                	mov    dl,al
c0018ae1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ae6:	01 d0                	add    eax,edx
c0018ae8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018aec:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018af2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018af6:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018afd:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b02:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018b06:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b0d:	eb 19                	jmp    c0018b28 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018b0f:	90                   	nop
c0018b10:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018b14:	88 c2                	mov    dl,al
c0018b16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018b1a:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b21:	01 d0                	add    eax,edx
c0018b23:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018b27:	90                   	nop
c0018b28:	83 ec 04             	sub    esp,0x4
c0018b2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b2f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018b33:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018b37:	50                   	push   eax
c0018b38:	e8 92 c4 fe ff       	call   c0004fcf <f_getlabel>
c0018b3d:	83 c4 10             	add    esp,0x10
c0018b40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018b44:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018b49:	75 09                	jne    c0018b54 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018b4b:	b8 00 00 00 00       	mov    eax,0x0
c0018b50:	eb 0a                	jmp    c0018b5c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018b52:	66 90                	xchg   ax,ax
c0018b54:	b8 01 00 00 00       	mov    eax,0x1
c0018b59:	8d 76 00             	lea    esi,[esi+0x0]
c0018b5c:	83 c4 1c             	add    esp,0x1c
c0018b5f:	c3                   	ret    

c0018b60 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018b60:	57                   	push   edi
c0018b61:	83 ec 58             	sub    esp,0x58
c0018b64:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018b6c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018b70:	b8 00 00 00 00       	mov    eax,0x0
c0018b75:	b9 0f 00 00 00       	mov    ecx,0xf
c0018b7a:	fc                   	cld    
c0018b7b:	89 d7                	mov    edi,edx
c0018b7d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018b7f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b83:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b8a:	83 f8 ff             	cmp    eax,0xffffffff
c0018b8d:	75 35                	jne    c0018bc4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018b8f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b93:	88 c2                	mov    dl,al
c0018b95:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b9a:	01 d0                	add    eax,edx
c0018b9c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ba0:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ba6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018baa:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018bb1:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018bb6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018bba:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018bc1:	eb 19                	jmp    c0018bdc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018bc3:	90                   	nop
c0018bc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018bc8:	88 c2                	mov    dl,al
c0018bca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018bce:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018bd5:	01 d0                	add    eax,edx
c0018bd7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018bdb:	90                   	nop
c0018bdc:	83 ec 08             	sub    esp,0x8
c0018bdf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018be3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018be7:	50                   	push   eax
c0018be8:	e8 53 7c fe ff       	call   c0000840 <strcat>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	83 ec 0c             	sub    esp,0xc
c0018bf3:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018bf7:	50                   	push   eax
c0018bf8:	e8 23 c5 fe ff       	call   c0005120 <f_setlabel>
c0018bfd:	83 c4 10             	add    esp,0x10
c0018c00:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c04:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018c09:	75 09                	jne    c0018c14 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018c0b:	b8 00 00 00 00       	mov    eax,0x0
c0018c10:	eb 0a                	jmp    c0018c1c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018c12:	66 90                	xchg   ax,ax
c0018c14:	b8 01 00 00 00       	mov    eax,0x1
c0018c19:	8d 76 00             	lea    esi,[esi+0x0]
c0018c1c:	83 c4 58             	add    esp,0x58
c0018c1f:	5f                   	pop    edi
c0018c20:	c3                   	ret    
c0018c21:	90                   	nop
c0018c22:	66 90                	xchg   ax,ax

c0018c24 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018c24:	83 ec 2c             	sub    esp,0x2c
c0018c27:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018c2f:	83 ec 08             	sub    esp,0x8
c0018c32:	68 04 28 02 c0       	push   0xc0022804
c0018c37:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c3b:	e8 10 7b fe ff       	call   c0000750 <strcmp>
c0018c40:	83 c4 10             	add    esp,0x10
c0018c43:	85 c0                	test   eax,eax
c0018c45:	0f 94 c0             	sete   al
c0018c48:	0f b6 c0             	movzx  eax,al
c0018c4b:	85 c0                	test   eax,eax
c0018c4d:	74 0d                	je     c0018c5c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018c4f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c57:	e9 c0 00 00 00       	jmp    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c5c:	83 ec 08             	sub    esp,0x8
c0018c5f:	68 f6 27 02 c0       	push   0xc00227f6
c0018c64:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c68:	e8 e3 7a fe ff       	call   c0000750 <strcmp>
c0018c6d:	83 c4 10             	add    esp,0x10
c0018c70:	85 c0                	test   eax,eax
c0018c72:	0f 94 c0             	sete   al
c0018c75:	0f b6 c0             	movzx  eax,al
c0018c78:	85 c0                	test   eax,eax
c0018c7a:	74 10                	je     c0018c8c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018c7c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c84:	e9 93 00 00 00       	jmp    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c89:	8d 76 00             	lea    esi,[esi+0x0]
c0018c8c:	83 ec 08             	sub    esp,0x8
c0018c8f:	68 fc 27 02 c0       	push   0xc00227fc
c0018c94:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c98:	e8 b3 7a fe ff       	call   c0000750 <strcmp>
c0018c9d:	83 c4 10             	add    esp,0x10
c0018ca0:	85 c0                	test   eax,eax
c0018ca2:	0f 94 c0             	sete   al
c0018ca5:	0f b6 c0             	movzx  eax,al
c0018ca8:	85 c0                	test   eax,eax
c0018caa:	74 0c                	je     c0018cb8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018cac:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018cb4:	eb 66                	jmp    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018cb6:	66 90                	xchg   ax,ax
c0018cb8:	83 ec 08             	sub    esp,0x8
c0018cbb:	68 1c 00 02 c0       	push   0xc002001c
c0018cc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cc4:	e8 87 7a fe ff       	call   c0000750 <strcmp>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	85 c0                	test   eax,eax
c0018cce:	0f 94 c0             	sete   al
c0018cd1:	0f b6 c0             	movzx  eax,al
c0018cd4:	85 c0                	test   eax,eax
c0018cd6:	74 0c                	je     c0018ce4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018cd8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018ce0:	eb 3a                	jmp    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018ce2:	66 90                	xchg   ax,ax
c0018ce4:	83 ec 08             	sub    esp,0x8
c0018ce7:	68 02 28 02 c0       	push   0xc0022802
c0018cec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cf0:	e8 5b 7a fe ff       	call   c0000750 <strcmp>
c0018cf5:	83 c4 10             	add    esp,0x10
c0018cf8:	85 c0                	test   eax,eax
c0018cfa:	0f 94 c0             	sete   al
c0018cfd:	0f b6 c0             	movzx  eax,al
c0018d00:	85 c0                	test   eax,eax
c0018d02:	74 0c                	je     c0018d10 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018d04:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018d0c:	eb 0e                	jmp    c0018d1c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018d0e:	66 90                	xchg   ax,ax
c0018d10:	b8 08 00 00 00       	mov    eax,0x8
c0018d15:	e9 ea 00 00 00       	jmp    c0018e04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d1a:	66 90                	xchg   ax,ax
c0018d1c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018d23:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018d28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d2c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d33:	83 f8 ff             	cmp    eax,0xffffffff
c0018d36:	75 34                	jne    c0018d6c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018d38:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d3c:	88 c2                	mov    dl,al
c0018d3e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d43:	01 d0                	add    eax,edx
c0018d45:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d49:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018d4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d53:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018d5a:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d63:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018d6a:	eb 18                	jmp    c0018d84 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018d6c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018d70:	88 c2                	mov    dl,al
c0018d72:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018d76:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d7d:	01 d0                	add    eax,edx
c0018d7f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d83:	90                   	nop
c0018d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d88:	88 04 24             	mov    BYTE PTR [esp],al
c0018d8b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d93:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d9b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018da0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	68 00 20 00 00       	push   0x2000
c0018db0:	e8 01 ed fe ff       	call   c0007ab6 <malloc>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018dbc:	68 00 20 00 00       	push   0x2000
c0018dc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018dc5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018dc9:	50                   	push   eax
c0018dca:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018dce:	50                   	push   eax
c0018dcf:	e8 49 c6 fe ff       	call   c000541d <f_mkfs>
c0018dd4:	83 c4 10             	add    esp,0x10
c0018dd7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018ddb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018de0:	75 0a                	jne    c0018dec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018de2:	b8 00 00 00 00       	mov    eax,0x0
c0018de7:	eb 1b                	jmp    c0018e04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018de9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dec:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018df1:	75 09                	jne    c0018dfc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018df3:	b8 09 00 00 00       	mov    eax,0x9
c0018df8:	eb 0a                	jmp    c0018e04 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018dfa:	66 90                	xchg   ax,ax
c0018dfc:	b8 01 00 00 00       	mov    eax,0x1
c0018e01:	8d 76 00             	lea    esi,[esi+0x0]
c0018e04:	83 c4 2c             	add    esp,0x2c
c0018e07:	c3                   	ret    

c0018e08 <FAT::tryMount(LogicalDisk*, int)>:
c0018e08:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018e0e:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e13:	83 f8 14             	cmp    eax,0x14
c0018e16:	75 18                	jne    c0018e30 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018e18:	83 ec 0c             	sub    esp,0xc
c0018e1b:	68 08 28 02 c0       	push   0xc0022808
c0018e20:	e8 cc 84 ff ff       	call   c00112f1 <KePanic(char const*)>
c0018e25:	83 c4 10             	add    esp,0x10
c0018e28:	b0 00                	mov    al,0x0
c0018e2a:	e9 ed 01 00 00       	jmp    c001901c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e2f:	90                   	nop
c0018e30:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018e37:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018e3d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018e43:	3d 00 02 00 00       	cmp    eax,0x200
c0018e48:	74 0a                	je     c0018e54 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018e4a:	b0 00                	mov    al,0x0
c0018e4c:	e9 cb 01 00 00       	jmp    c001901c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e51:	8d 76 00             	lea    esi,[esi+0x0]
c0018e54:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018e5c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e63:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018e6a:	83 f8 ff             	cmp    eax,0xffffffff
c0018e6d:	74 09                	je     c0018e78 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018e6f:	b0 01                	mov    al,0x1
c0018e71:	e9 a6 01 00 00       	jmp    c001901c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e76:	66 90                	xchg   ax,ax
c0018e78:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018e82:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018e8a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018e91:	88 c2                	mov    dl,al
c0018e93:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e98:	01 d0                	add    eax,edx
c0018e9a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018ea1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018ea7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018eae:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018eb5:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018eba:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018ec1:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018ec8:	83 ec 0c             	sub    esp,0xc
c0018ecb:	68 34 02 00 00       	push   0x234
c0018ed0:	e8 e1 eb fe ff       	call   c0007ab6 <malloc>
c0018ed5:	83 c4 10             	add    esp,0x10
c0018ed8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018edf:	83 ec 04             	sub    esp,0x4
c0018ee2:	6a 00                	push   0x0
c0018ee4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018eeb:	50                   	push   eax
c0018eec:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018ef3:	e8 00 ad fe ff       	call   c0003bf8 <f_mount>
c0018ef8:	83 c4 10             	add    esp,0x10
c0018efb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f02:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018f0a:	74 1c                	je     c0018f28 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018f0c:	83 ec 0c             	sub    esp,0xc
c0018f0f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f16:	e8 bb eb fe ff       	call   c0007ad6 <rfree>
c0018f1b:	83 c4 10             	add    esp,0x10
c0018f1e:	b0 00                	mov    al,0x0
c0018f20:	e9 f7 00 00 00       	jmp    c001901c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f25:	8d 76 00             	lea    esi,[esi+0x0]
c0018f28:	83 ec 04             	sub    esp,0x4
c0018f2b:	68 00 01 00 00       	push   0x100
c0018f30:	6a 00                	push   0x0
c0018f32:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f39:	50                   	push   eax
c0018f3a:	e8 b1 75 fe ff       	call   c00004f0 <memset>
c0018f3f:	83 c4 10             	add    esp,0x10
c0018f42:	83 ec 08             	sub    esp,0x8
c0018f45:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f4c:	50                   	push   eax
c0018f4d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f54:	50                   	push   eax
c0018f55:	e8 e6 78 fe ff       	call   c0000840 <strcat>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	83 ec 08             	sub    esp,0x8
c0018f60:	68 16 28 02 c0       	push   0xc0022816
c0018f65:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018f6c:	50                   	push   eax
c0018f6d:	e8 ce 78 fe ff       	call   c0000840 <strcat>
c0018f72:	83 c4 10             	add    esp,0x10
c0018f75:	83 ec 04             	sub    esp,0x4
c0018f78:	6a 01                	push   0x1
c0018f7a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018f81:	50                   	push   eax
c0018f82:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f86:	50                   	push   eax
c0018f87:	e8 ce ac fe ff       	call   c0003c5a <f_open>
c0018f8c:	83 c4 10             	add    esp,0x10
c0018f8f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f96:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018f9d:	85 c0                	test   eax,eax
c0018f9f:	74 0b                	je     c0018fac <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018fa1:	78 31                	js     c0018fd4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fa3:	83 e8 04             	sub    eax,0x4
c0018fa6:	83 f8 01             	cmp    eax,0x1
c0018fa9:	77 29                	ja     c0018fd4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018fab:	90                   	nop
c0018fac:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018fbb:	50                   	push   eax
c0018fbc:	e8 68 b4 fe ff       	call   c0004429 <f_close>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	90                   	nop
c0018fc5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018fcd:	85 c0                	test   eax,eax
c0018fcf:	74 43                	je     c0019014 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018fd1:	eb 31                	jmp    c0019004 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018fd3:	90                   	nop
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018fde:	e8 f3 ea fe ff       	call   c0007ad6 <rfree>
c0018fe3:	83 c4 10             	add    esp,0x10
c0018fe6:	83 ec 04             	sub    esp,0x4
c0018fe9:	6a 00                	push   0x0
c0018feb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ff2:	50                   	push   eax
c0018ff3:	6a 00                	push   0x0
c0018ff5:	e8 fe ab fe ff       	call   c0003bf8 <f_mount>
c0018ffa:	83 c4 10             	add    esp,0x10
c0018ffd:	b0 00                	mov    al,0x0
c0018fff:	eb 1b                	jmp    c001901c <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019001:	8d 76 00             	lea    esi,[esi+0x0]
c0019004:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0019009:	83 c0 01             	add    eax,0x1
c001900c:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0019011:	8d 76 00             	lea    esi,[esi+0x0]
c0019014:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001901b:	90                   	nop
c001901c:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019022:	c3                   	ret    
c0019023:	90                   	nop

c0019024 <FAT::allocateSwapfile(char const*, int)>:
c0019024:	55                   	push   ebp
c0019025:	57                   	push   edi
c0019026:	56                   	push   esi
c0019027:	53                   	push   ebx
c0019028:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001902e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019039:	83 ec 0c             	sub    esp,0xc
c001903c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019043:	e8 6e ea fe ff       	call   c0007ab6 <malloc>
c0019048:	83 c4 10             	add    esp,0x10
c001904b:	89 c7                	mov    edi,eax
c001904d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0019052:	83 ec 04             	sub    esp,0x4
c0019055:	50                   	push   eax
c0019056:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001905d:	57                   	push   edi
c001905e:	e8 55 27 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001906d:	83 ec 04             	sub    esp,0x4
c0019070:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019074:	50                   	push   eax
c0019075:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019079:	50                   	push   eax
c001907a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019081:	e8 f0 2a ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c0019086:	83 c4 10             	add    esp,0x10
c0019089:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019090:	c1 e0 14             	shl    eax,0x14
c0019093:	89 c7                	mov    edi,eax
c0019095:	89 c5                	mov    ebp,eax
c0019097:	c1 fd 1f             	sar    ebp,0x1f
c001909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001909e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00190a2:	89 f9                	mov    ecx,edi
c00190a4:	31 c1                	xor    ecx,eax
c00190a6:	89 cb                	mov    ebx,ecx
c00190a8:	89 e9                	mov    ecx,ebp
c00190aa:	31 d1                	xor    ecx,edx
c00190ac:	89 ce                	mov    esi,ecx
c00190ae:	89 f0                	mov    eax,esi
c00190b0:	09 d8                	or     eax,ebx
c00190b2:	0f 84 9c 00 00 00    	je     c0019154 <FAT::allocateSwapfile(char const*, int)+0x130>
c00190b8:	83 ec 0c             	sub    esp,0xc
c00190bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190c2:	e8 7b 29 ff ff       	call   c000ba42 <File::unlink()>
c00190c7:	83 c4 10             	add    esp,0x10
c00190ca:	83 ec 08             	sub    esp,0x8
c00190cd:	6a 12                	push   0x12
c00190cf:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190d6:	e8 99 27 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190e5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00190eb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190f2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00190f9:	c1 e0 14             	shl    eax,0x14
c00190fc:	83 ec 04             	sub    esp,0x4
c00190ff:	6a 01                	push   0x1
c0019101:	50                   	push   eax
c0019102:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019109:	e8 a2 c1 fe ff       	call   c00052b0 <f_expand>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019118:	8b 00                	mov    eax,DWORD PTR [eax]
c001911a:	83 c0 10             	add    eax,0x10
c001911d:	8b 00                	mov    eax,DWORD PTR [eax]
c001911f:	83 ec 0c             	sub    esp,0xc
c0019122:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019126:	52                   	push   edx
c0019127:	8d 54 24 30          	lea    edx,[esp+0x30]
c001912b:	52                   	push   edx
c001912c:	6a 00                	push   0x0
c001912e:	68 00 04 00 00       	push   0x400
c0019133:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001913a:	ff d0                	call   eax
c001913c:	83 c4 20             	add    esp,0x20
c001913f:	83 ec 0c             	sub    esp,0xc
c0019142:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019149:	e8 84 27 ff ff       	call   c000b8d2 <File::close()>
c001914e:	83 c4 10             	add    esp,0x10
c0019151:	8d 76 00             	lea    esi,[esi+0x0]
c0019154:	83 ec 08             	sub    esp,0x8
c0019157:	6a 01                	push   0x1
c0019159:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019160:	e8 0f 27 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c0019165:	83 c4 10             	add    esp,0x10
c0019168:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001916f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019171:	83 c0 0c             	add    eax,0xc
c0019174:	8b 00                	mov    eax,DWORD PTR [eax]
c0019176:	83 ec 0c             	sub    esp,0xc
c0019179:	8d 54 24 24          	lea    edx,[esp+0x24]
c001917d:	52                   	push   edx
c001917e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019182:	52                   	push   edx
c0019183:	6a 00                	push   0x0
c0019185:	6a 04                	push   0x4
c0019187:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001918e:	ff d0                	call   eax
c0019190:	83 c4 20             	add    esp,0x20
c0019193:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001919a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00191a0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00191a7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00191ae:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00191b1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00191b8:	83 ec 0c             	sub    esp,0xc
c00191bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00191c2:	e8 0b 27 ff ff       	call   c000b8d2 <File::close()>
c00191c7:	83 c4 10             	add    esp,0x10
c00191ca:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00191d1:	ba 00 00 00 00       	mov    edx,0x0
c00191d6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00191dc:	5b                   	pop    ebx
c00191dd:	5e                   	pop    esi
c00191de:	5f                   	pop    edi
c00191df:	5d                   	pop    ebp
c00191e0:	c3                   	ret    
c00191e1:	90                   	nop
c00191e2:	66 90                	xchg   ax,ax

c00191e4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00191e4:	57                   	push   edi
c00191e5:	56                   	push   esi
c00191e6:	53                   	push   ebx
c00191e7:	81 ec 50 02 00 00    	sub    esp,0x250
c00191ed:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00191f5:	74 0d                	je     c0019204 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00191f7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00191ff:	75 0f                	jne    c0019210 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019201:	8d 76 00             	lea    esi,[esi+0x0]
c0019204:	b8 04 00 00 00       	mov    eax,0x4
c0019209:	e9 3a 01 00 00       	jmp    c0019348 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001920e:	66 90                	xchg   ax,ax
c0019210:	83 ec 08             	sub    esp,0x8
c0019213:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001921a:	50                   	push   eax
c001921b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019222:	e8 cf b4 fe ff       	call   c00046f6 <f_readdir>
c0019227:	83 c4 10             	add    esp,0x10
c001922a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019231:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019238:	83 ec 0c             	sub    esp,0xc
c001923b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019242:	83 c0 16             	add    eax,0x16
c0019245:	50                   	push   eax
c0019246:	e8 25 73 fe ff       	call   c0000570 <strlen>
c001924b:	83 c4 10             	add    esp,0x10
c001924e:	ba 00 00 00 00       	mov    edx,0x0
c0019253:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019257:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001925b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019262:	0f b6 c0             	movzx  eax,al
c0019265:	83 e0 10             	and    eax,0x10
c0019268:	74 0a                	je     c0019274 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001926a:	b8 02 00 00 00       	mov    eax,0x2
c001926f:	eb 0b                	jmp    c001927c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019271:	8d 76 00             	lea    esi,[esi+0x0]
c0019274:	b8 01 00 00 00       	mov    eax,0x1
c0019279:	8d 76 00             	lea    esi,[esi+0x0]
c001927c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019280:	83 ec 08             	sub    esp,0x8
c0019283:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001928a:	83 c0 16             	add    eax,0x16
c001928d:	50                   	push   eax
c001928e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019292:	83 c0 10             	add    eax,0x10
c0019295:	50                   	push   eax
c0019296:	e8 a5 73 fe ff       	call   c0000640 <strcpy>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00192a5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00192ac:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192b0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00192b7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00192be:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00192c5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00192cc:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00192d3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00192da:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00192e1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00192e8:	89 c6                	mov    esi,eax
c00192ea:	89 d7                	mov    edi,edx
c00192ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00192ee:	89 c8                	mov    eax,ecx
c00192f0:	89 fa                	mov    edx,edi
c00192f2:	89 f3                	mov    ebx,esi
c00192f4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00192fb:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019302:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019309:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019310:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019316:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001931d:	0f be c0             	movsx  eax,al
c0019320:	85 c0                	test   eax,eax
c0019322:	75 08                	jne    c001932c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019324:	b8 07 00 00 00       	mov    eax,0x7
c0019329:	eb 1d                	jmp    c0019348 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001932b:	90                   	nop
c001932c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019333:	85 c0                	test   eax,eax
c0019335:	75 09                	jne    c0019340 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019337:	b8 00 00 00 00       	mov    eax,0x0
c001933c:	eb 0a                	jmp    c0019348 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001933e:	66 90                	xchg   ax,ax
c0019340:	b8 01 00 00 00       	mov    eax,0x1
c0019345:	8d 76 00             	lea    esi,[esi+0x0]
c0019348:	81 c4 50 02 00 00    	add    esp,0x250
c001934e:	5b                   	pop    ebx
c001934f:	5e                   	pop    esi
c0019350:	5f                   	pop    edi
c0019351:	c3                   	ret    
c0019352:	66 90                	xchg   ax,ax

c0019354 <FAT::read(void*, unsigned long, void*, int*)>:
c0019354:	83 ec 1c             	sub    esp,0x1c
c0019357:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001935c:	74 0a                	je     c0019368 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001935e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019363:	75 0b                	jne    c0019370 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019365:	8d 76 00             	lea    esi,[esi+0x0]
c0019368:	b8 04 00 00 00       	mov    eax,0x4
c001936d:	eb 41                	jmp    c00193b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001936f:	90                   	nop
c0019370:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019374:	50                   	push   eax
c0019375:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019379:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001937d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019381:	e8 97 ab fe ff       	call   c0003f1d <f_read>
c0019386:	83 c4 10             	add    esp,0x10
c0019389:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001938d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019391:	89 c2                	mov    edx,eax
c0019393:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019397:	89 10                	mov    DWORD PTR [eax],edx
c0019399:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001939d:	85 c0                	test   eax,eax
c001939f:	75 07                	jne    c00193a8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c00193a1:	b8 00 00 00 00       	mov    eax,0x0
c00193a6:	eb 08                	jmp    c00193b0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00193a8:	b8 01 00 00 00       	mov    eax,0x1
c00193ad:	8d 76 00             	lea    esi,[esi+0x0]
c00193b0:	83 c4 1c             	add    esp,0x1c
c00193b3:	c3                   	ret    

c00193b4 <FAT::write(void*, unsigned long, void*, int*)>:
c00193b4:	83 ec 1c             	sub    esp,0x1c
c00193b7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193bc:	74 0a                	je     c00193c8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00193be:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193c3:	75 0b                	jne    c00193d0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00193c5:	8d 76 00             	lea    esi,[esi+0x0]
c00193c8:	b8 04 00 00 00       	mov    eax,0x4
c00193cd:	eb 41                	jmp    c0019410 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00193cf:	90                   	nop
c00193d0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193d4:	50                   	push   eax
c00193d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193e1:	e8 36 ad fe ff       	call   c000411c <f_write>
c00193e6:	83 c4 10             	add    esp,0x10
c00193e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193f1:	89 c2                	mov    edx,eax
c00193f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193f7:	89 10                	mov    DWORD PTR [eax],edx
c00193f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193fd:	85 c0                	test   eax,eax
c00193ff:	75 07                	jne    c0019408 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019401:	b8 00 00 00 00       	mov    eax,0x0
c0019406:	eb 08                	jmp    c0019410 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019408:	b8 01 00 00 00       	mov    eax,0x1
c001940d:	8d 76 00             	lea    esi,[esi+0x0]
c0019410:	83 c4 1c             	add    esp,0x1c
c0019413:	c3                   	ret    

c0019414 <FAT::close(void*)>:
c0019414:	83 ec 1c             	sub    esp,0x1c
c0019417:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001941c:	75 0a                	jne    c0019428 <FAT::close(void*)+0x14>
c001941e:	b8 04 00 00 00       	mov    eax,0x4
c0019423:	eb 3f                	jmp    c0019464 <FAT::close(void*)+0x50>
c0019425:	8d 76 00             	lea    esi,[esi+0x0]
c0019428:	83 ec 0c             	sub    esp,0xc
c001942b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001942f:	e8 f5 af fe ff       	call   c0004429 <f_close>
c0019434:	83 c4 10             	add    esp,0x10
c0019437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001943b:	83 ec 0c             	sub    esp,0xc
c001943e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019442:	e8 7f e6 fe ff       	call   c0007ac6 <free>
c0019447:	83 c4 10             	add    esp,0x10
c001944a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001944e:	85 c0                	test   eax,eax
c0019450:	75 0a                	jne    c001945c <FAT::close(void*)+0x48>
c0019452:	b8 00 00 00 00       	mov    eax,0x0
c0019457:	eb 0b                	jmp    c0019464 <FAT::close(void*)+0x50>
c0019459:	8d 76 00             	lea    esi,[esi+0x0]
c001945c:	b8 01 00 00 00       	mov    eax,0x1
c0019461:	8d 76 00             	lea    esi,[esi+0x0]
c0019464:	83 c4 1c             	add    esp,0x1c
c0019467:	c3                   	ret    

c0019468 <FAT::closeDir(void*)>:
c0019468:	83 ec 1c             	sub    esp,0x1c
c001946b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019470:	75 0a                	jne    c001947c <FAT::closeDir(void*)+0x14>
c0019472:	b8 04 00 00 00       	mov    eax,0x4
c0019477:	eb 3f                	jmp    c00194b8 <FAT::closeDir(void*)+0x50>
c0019479:	8d 76 00             	lea    esi,[esi+0x0]
c001947c:	83 ec 0c             	sub    esp,0xc
c001947f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019483:	e8 4c b2 fe ff       	call   c00046d4 <f_closedir>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001948f:	83 ec 0c             	sub    esp,0xc
c0019492:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019496:	e8 2b e6 fe ff       	call   c0007ac6 <free>
c001949b:	83 c4 10             	add    esp,0x10
c001949e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194a2:	85 c0                	test   eax,eax
c00194a4:	75 0a                	jne    c00194b0 <FAT::closeDir(void*)+0x48>
c00194a6:	b8 00 00 00 00       	mov    eax,0x0
c00194ab:	eb 0b                	jmp    c00194b8 <FAT::closeDir(void*)+0x50>
c00194ad:	8d 76 00             	lea    esi,[esi+0x0]
c00194b0:	b8 01 00 00 00       	mov    eax,0x1
c00194b5:	8d 76 00             	lea    esi,[esi+0x0]
c00194b8:	83 c4 1c             	add    esp,0x1c
c00194bb:	c3                   	ret    

c00194bc <FAT::truncate(void*, unsigned long long)>:
c00194bc:	83 ec 2c             	sub    esp,0x2c
c00194bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194cf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194d4:	75 0a                	jne    c00194e0 <FAT::truncate(void*, unsigned long long)+0x24>
c00194d6:	b8 04 00 00 00       	mov    eax,0x4
c00194db:	eb 47                	jmp    c0019524 <FAT::truncate(void*, unsigned long long)+0x68>
c00194dd:	8d 76 00             	lea    esi,[esi+0x0]
c00194e0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00194e4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00194e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00194eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00194f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194f7:	83 ec 08             	sub    esp,0x8
c00194fa:	50                   	push   eax
c00194fb:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194ff:	e8 54 af fe ff       	call   c0004458 <f_lseek>
c0019504:	83 c4 10             	add    esp,0x10
c0019507:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001950b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001950f:	85 c0                	test   eax,eax
c0019511:	75 09                	jne    c001951c <FAT::truncate(void*, unsigned long long)+0x60>
c0019513:	b8 00 00 00 00       	mov    eax,0x0
c0019518:	eb 0a                	jmp    c0019524 <FAT::truncate(void*, unsigned long long)+0x68>
c001951a:	66 90                	xchg   ax,ax
c001951c:	b8 01 00 00 00       	mov    eax,0x1
c0019521:	8d 76 00             	lea    esi,[esi+0x0]
c0019524:	83 c4 2c             	add    esp,0x2c
c0019527:	c3                   	ret    

c0019528 <FAT::seek(void*, unsigned long long)>:
c0019528:	83 ec 2c             	sub    esp,0x2c
c001952b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001952f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019533:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019537:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001953b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019540:	75 0a                	jne    c001954c <FAT::seek(void*, unsigned long long)+0x24>
c0019542:	b8 04 00 00 00       	mov    eax,0x4
c0019547:	eb 33                	jmp    c001957c <FAT::seek(void*, unsigned long long)+0x54>
c0019549:	8d 76 00             	lea    esi,[esi+0x0]
c001954c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019550:	83 ec 08             	sub    esp,0x8
c0019553:	50                   	push   eax
c0019554:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019558:	e8 fb ae fe ff       	call   c0004458 <f_lseek>
c001955d:	83 c4 10             	add    esp,0x10
c0019560:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019564:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019568:	85 c0                	test   eax,eax
c001956a:	75 08                	jne    c0019574 <FAT::seek(void*, unsigned long long)+0x4c>
c001956c:	b8 00 00 00 00       	mov    eax,0x0
c0019571:	eb 09                	jmp    c001957c <FAT::seek(void*, unsigned long long)+0x54>
c0019573:	90                   	nop
c0019574:	b8 01 00 00 00       	mov    eax,0x1
c0019579:	8d 76 00             	lea    esi,[esi+0x0]
c001957c:	83 c4 2c             	add    esp,0x2c
c001957f:	c3                   	ret    

c0019580 <fatWrapperReadDisk>:
c0019580:	53                   	push   ebx
c0019581:	83 ec 18             	sub    esp,0x18
c0019584:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019588:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001958c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019591:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019598:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001959c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195a0:	ba 00 00 00 00       	mov    edx,0x0
c00195a5:	83 ec 0c             	sub    esp,0xc
c00195a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ac:	53                   	push   ebx
c00195ad:	52                   	push   edx
c00195ae:	50                   	push   eax
c00195af:	51                   	push   ecx
c00195b0:	e8 ef 44 ff ff       	call   c000daa4 <LogicalDisk::read(unsigned long long, int, void*)>
c00195b5:	83 c4 20             	add    esp,0x20
c00195b8:	83 c4 18             	add    esp,0x18
c00195bb:	5b                   	pop    ebx
c00195bc:	c3                   	ret    
c00195bd:	8d 76 00             	lea    esi,[esi+0x0]

c00195c0 <fatWrapperWriteDisk>:
c00195c0:	53                   	push   ebx
c00195c1:	83 ec 18             	sub    esp,0x18
c00195c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00195c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00195cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d1:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c00195d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00195dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195e0:	ba 00 00 00 00       	mov    edx,0x0
c00195e5:	83 ec 0c             	sub    esp,0xc
c00195e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ec:	53                   	push   ebx
c00195ed:	52                   	push   edx
c00195ee:	50                   	push   eax
c00195ef:	51                   	push   ecx
c00195f0:	e8 1b 45 ff ff       	call   c000db10 <LogicalDisk::write(unsigned long long, int, void*)>
c00195f5:	83 c4 20             	add    esp,0x20
c00195f8:	83 c4 18             	add    esp,0x18
c00195fb:	5b                   	pop    ebx
c00195fc:	c3                   	ret    
c00195fd:	8d 76 00             	lea    esi,[esi+0x0]

c0019600 <fatWrapperIoctl>:
c0019600:	53                   	push   ebx
c0019601:	83 ec 28             	sub    esp,0x28
c0019604:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019608:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001960c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019610:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019614:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019619:	83 f8 02             	cmp    eax,0x2
c001961c:	75 32                	jne    c0019650 <fatWrapperIoctl+0x50>
c001961e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019622:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019626:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001962b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c0019632:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019638:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001963e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019642:	66 89 02             	mov    WORD PTR [edx],ax
c0019645:	b8 00 00 00 00       	mov    eax,0x0
c001964a:	e9 c5 00 00 00       	jmp    c0019714 <fatWrapperIoctl+0x114>
c001964f:	90                   	nop
c0019650:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019655:	83 f8 01             	cmp    eax,0x1
c0019658:	75 6a                	jne    c00196c4 <fatWrapperIoctl+0xc4>
c001965a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001965e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019662:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019667:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001966e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019674:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001967a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019680:	89 c8                	mov    eax,ecx
c0019682:	89 da                	mov    edx,ebx
c0019684:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019688:	c1 e0 0a             	shl    eax,0xa
c001968b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019690:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c0019697:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001969d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00196a3:	89 cb                	mov    ebx,ecx
c00196a5:	c1 fb 1f             	sar    ebx,0x1f
c00196a8:	53                   	push   ebx
c00196a9:	51                   	push   ecx
c00196aa:	52                   	push   edx
c00196ab:	50                   	push   eax
c00196ac:	e8 6f 5b 00 00       	call   c001f220 <__udivdi3>
c00196b1:	83 c4 10             	add    esp,0x10
c00196b4:	89 c2                	mov    edx,eax
c00196b6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00196ba:	89 10                	mov    DWORD PTR [eax],edx
c00196bc:	b8 00 00 00 00       	mov    eax,0x0
c00196c1:	eb 51                	jmp    c0019714 <fatWrapperIoctl+0x114>
c00196c3:	90                   	nop
c00196c4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196c9:	85 c0                	test   eax,eax
c00196cb:	75 07                	jne    c00196d4 <fatWrapperIoctl+0xd4>
c00196cd:	b8 00 00 00 00       	mov    eax,0x0
c00196d2:	eb 40                	jmp    c0019714 <fatWrapperIoctl+0x114>
c00196d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196d9:	83 f8 03             	cmp    eax,0x3
c00196dc:	75 1a                	jne    c00196f8 <fatWrapperIoctl+0xf8>
c00196de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00196e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00196e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00196ea:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00196f0:	b8 00 00 00 00       	mov    eax,0x0
c00196f5:	eb 1d                	jmp    c0019714 <fatWrapperIoctl+0x114>
c00196f7:	90                   	nop
c00196f8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00196fd:	83 f8 04             	cmp    eax,0x4
c0019700:	75 0a                	jne    c001970c <fatWrapperIoctl+0x10c>
c0019702:	b8 00 00 00 00       	mov    eax,0x0
c0019707:	eb 0b                	jmp    c0019714 <fatWrapperIoctl+0x114>
c0019709:	8d 76 00             	lea    esi,[esi+0x0]
c001970c:	b8 04 00 00 00       	mov    eax,0x4
c0019711:	8d 76 00             	lea    esi,[esi+0x0]
c0019714:	83 c4 28             	add    esp,0x28
c0019717:	5b                   	pop    ebx
c0019718:	c3                   	ret    
c0019719:	90                   	nop
c001971a:	66 90                	xchg   ax,ax

c001971c <FAT::FAT()>:
c001971c:	83 ec 1c             	sub    esp,0x1c
c001971f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019723:	83 ec 0c             	sub    esp,0xc
c0019726:	50                   	push   eax
c0019727:	e8 14 1e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001972c:	83 c4 10             	add    esp,0x10
c001972f:	ba 2c 28 02 c0       	mov    edx,0xc002282c
c0019734:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019738:	89 10                	mov    DWORD PTR [eax],edx
c001973a:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c0019744:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001974c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019751:	7f 19                	jg     c001976c <FAT::FAT()+0x50>
c0019753:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019757:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c0019762:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019767:	eb e3                	jmp    c001974c <FAT::FAT()+0x30>
c0019769:	8d 76 00             	lea    esi,[esi+0x0]
c001976c:	90                   	nop
c001976d:	83 c4 1c             	add    esp,0x1c
c0019770:	c3                   	ret    
c0019771:	90                   	nop
c0019772:	66 90                	xchg   ax,ax

c0019774 <FAT::fixFilepath(char*)>:
c0019774:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019778:	8a 00                	mov    al,BYTE PTR [eax]
c001977a:	0f be c0             	movsx  eax,al
c001977d:	83 f8 40             	cmp    eax,0x40
c0019780:	7e 2e                	jle    c00197b0 <FAT::fixFilepath(char*)+0x3c>
c0019782:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019786:	8a 00                	mov    al,BYTE PTR [eax]
c0019788:	83 e8 41             	sub    eax,0x41
c001978b:	88 c2                	mov    dl,al
c001978d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019791:	88 10                	mov    BYTE PTR [eax],dl
c0019793:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019797:	8a 00                	mov    al,BYTE PTR [eax]
c0019799:	0f be c0             	movsx  eax,al
c001979c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c00197a3:	83 c0 30             	add    eax,0x30
c00197a6:	88 c2                	mov    dl,al
c00197a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197ac:	88 10                	mov    BYTE PTR [eax],dl
c00197ae:	66 90                	xchg   ax,ax
c00197b0:	90                   	nop
c00197b1:	c3                   	ret    
c00197b2:	66 90                	xchg   ax,ax

c00197b4 <FAT::open(char const*, void**, FileOpenMode)>:
c00197b4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00197ba:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00197c2:	74 0c                	je     c00197d0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00197c4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00197cc:	75 0e                	jne    c00197dc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00197ce:	66 90                	xchg   ax,ax
c00197d0:	b8 04 00 00 00       	mov    eax,0x4
c00197d5:	e9 46 01 00 00       	jmp    c0019920 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00197da:	66 90                	xchg   ax,ax
c00197dc:	83 ec 08             	sub    esp,0x8
c00197df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00197e6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00197ea:	50                   	push   eax
c00197eb:	e8 50 6e fe ff       	call   c0000640 <strcpy>
c00197f0:	83 c4 10             	add    esp,0x10
c00197f3:	83 ec 08             	sub    esp,0x8
c00197f6:	8d 44 24 10          	lea    eax,[esp+0x10]
c00197fa:	50                   	push   eax
c00197fb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019802:	e8 6d ff ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019807:	83 c4 10             	add    esp,0x10
c001980a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019812:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019819:	83 e0 01             	and    eax,0x1
c001981c:	74 12                	je     c0019830 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001981e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019825:	83 c8 01             	or     eax,0x1
c0019828:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001982f:	90                   	nop
c0019830:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019837:	83 e0 04             	and    eax,0x4
c001983a:	74 24                	je     c0019860 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001983c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019843:	83 c8 30             	or     eax,0x30
c0019846:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001984d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019854:	83 c8 02             	or     eax,0x2
c0019857:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001985e:	66 90                	xchg   ax,ax
c0019860:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019867:	83 e0 02             	and    eax,0x2
c001986a:	74 14                	je     c0019880 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001986c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019873:	83 c8 02             	or     eax,0x2
c0019876:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001987d:	8d 76 00             	lea    esi,[esi+0x0]
c0019880:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019887:	83 e0 08             	and    eax,0x8
c001988a:	74 14                	je     c00198a0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001988c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019893:	83 c8 04             	or     eax,0x4
c0019896:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198a7:	83 e0 10             	and    eax,0x10
c00198aa:	74 14                	je     c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00198ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00198b3:	83 c8 08             	or     eax,0x8
c00198b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00198bd:	8d 76 00             	lea    esi,[esi+0x0]
c00198c0:	83 ec 0c             	sub    esp,0xc
c00198c3:	68 28 02 00 00       	push   0x228
c00198c8:	e8 e9 e1 fe ff       	call   c0007ab6 <malloc>
c00198cd:	83 c4 10             	add    esp,0x10
c00198d0:	89 c2                	mov    edx,eax
c00198d2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198d9:	89 10                	mov    DWORD PTR [eax],edx
c00198db:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00198e3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00198ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00198ec:	83 ec 04             	sub    esp,0x4
c00198ef:	52                   	push   edx
c00198f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00198f4:	52                   	push   edx
c00198f5:	50                   	push   eax
c00198f6:	e8 5f a3 fe ff       	call   c0003c5a <f_open>
c00198fb:	83 c4 10             	add    esp,0x10
c00198fe:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019905:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001990d:	74 09                	je     c0019918 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001990f:	b8 01 00 00 00       	mov    eax,0x1
c0019914:	eb 0a                	jmp    c0019920 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019916:	66 90                	xchg   ax,ax
c0019918:	b8 00 00 00 00       	mov    eax,0x0
c001991d:	8d 76 00             	lea    esi,[esi+0x0]
c0019920:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019926:	c3                   	ret    
c0019927:	90                   	nop

c0019928 <FAT::openDir(char const*, void**)>:
c0019928:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001992e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019936:	74 0c                	je     c0019944 <FAT::openDir(char const*, void**)+0x1c>
c0019938:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019940:	75 0e                	jne    c0019950 <FAT::openDir(char const*, void**)+0x28>
c0019942:	66 90                	xchg   ax,ax
c0019944:	b8 04 00 00 00       	mov    eax,0x4
c0019949:	e9 82 00 00 00       	jmp    c00199d0 <FAT::openDir(char const*, void**)+0xa8>
c001994e:	66 90                	xchg   ax,ax
c0019950:	83 ec 08             	sub    esp,0x8
c0019953:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001995a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001995e:	50                   	push   eax
c001995f:	e8 dc 6c fe ff       	call   c0000640 <strcpy>
c0019964:	83 c4 10             	add    esp,0x10
c0019967:	83 ec 08             	sub    esp,0x8
c001996a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001996e:	50                   	push   eax
c001996f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019976:	e8 f9 fd ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	83 ec 0c             	sub    esp,0xc
c0019981:	6a 30                	push   0x30
c0019983:	e8 2e e1 fe ff       	call   c0007ab6 <malloc>
c0019988:	83 c4 10             	add    esp,0x10
c001998b:	89 c2                	mov    edx,eax
c001998d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019994:	89 10                	mov    DWORD PTR [eax],edx
c0019996:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001999d:	8b 00                	mov    eax,DWORD PTR [eax]
c001999f:	83 ec 08             	sub    esp,0x8
c00199a2:	8d 54 24 14          	lea    edx,[esp+0x14]
c00199a6:	52                   	push   edx
c00199a7:	50                   	push   eax
c00199a8:	e8 5c ac fe ff       	call   c0004609 <f_opendir>
c00199ad:	83 c4 10             	add    esp,0x10
c00199b0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00199b7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00199bf:	74 07                	je     c00199c8 <FAT::openDir(char const*, void**)+0xa0>
c00199c1:	b8 01 00 00 00       	mov    eax,0x1
c00199c6:	eb 08                	jmp    c00199d0 <FAT::openDir(char const*, void**)+0xa8>
c00199c8:	b8 00 00 00 00       	mov    eax,0x0
c00199cd:	8d 76 00             	lea    esi,[esi+0x0]
c00199d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199d6:	c3                   	ret    
c00199d7:	90                   	nop

c00199d8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00199d8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00199de:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00199e6:	75 0c                	jne    c00199f4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00199e8:	b8 04 00 00 00       	mov    eax,0x4
c00199ed:	e9 d6 00 00 00       	jmp    c0019ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199f2:	66 90                	xchg   ax,ax
c00199f4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00199fc:	75 0a                	jne    c0019a08 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00199fe:	b8 04 00 00 00       	mov    eax,0x4
c0019a03:	e9 c0 00 00 00       	jmp    c0019ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a08:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019a10:	75 0a                	jne    c0019a1c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019a12:	b8 04 00 00 00       	mov    eax,0x4
c0019a17:	e9 ac 00 00 00       	jmp    c0019ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a1c:	83 ec 08             	sub    esp,0x8
c0019a1f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a26:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a2d:	50                   	push   eax
c0019a2e:	e8 0d 6c fe ff       	call   c0000640 <strcpy>
c0019a33:	83 c4 10             	add    esp,0x10
c0019a36:	83 ec 08             	sub    esp,0x8
c0019a39:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019a40:	50                   	push   eax
c0019a41:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019a48:	e8 27 fd ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019a4d:	83 c4 10             	add    esp,0x10
c0019a50:	83 ec 08             	sub    esp,0x8
c0019a53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019a57:	50                   	push   eax
c0019a58:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019a5f:	50                   	push   eax
c0019a60:	e8 23 ad fe ff       	call   c0004788 <f_stat>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019a6f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019a76:	85 c0                	test   eax,eax
c0019a78:	74 0a                	je     c0019a84 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019a7a:	83 f8 04             	cmp    eax,0x4
c0019a7d:	74 39                	je     c0019ab8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a7f:	eb 3f                	jmp    c0019ac0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019a81:	8d 76 00             	lea    esi,[esi+0x0]
c0019a84:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a88:	0f b6 c0             	movzx  eax,al
c0019a8b:	83 e0 10             	and    eax,0x10
c0019a8e:	0f 95 c2             	setne  dl
c0019a91:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a98:	88 10                	mov    BYTE PTR [eax],dl
c0019a9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a9e:	ba 00 00 00 00       	mov    edx,0x0
c0019aa3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019aaa:	89 01                	mov    DWORD PTR [ecx],eax
c0019aac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019aaf:	b8 00 00 00 00       	mov    eax,0x0
c0019ab4:	eb 12                	jmp    c0019ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ab6:	66 90                	xchg   ax,ax
c0019ab8:	b8 02 00 00 00       	mov    eax,0x2
c0019abd:	eb 09                	jmp    c0019ac8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019abf:	90                   	nop
c0019ac0:	b8 01 00 00 00       	mov    eax,0x1
c0019ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ac8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ace:	c3                   	ret    
c0019acf:	90                   	nop

c0019ad0 <FAT::unlink(char const*)>:
c0019ad0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019ad6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ade:	75 08                	jne    c0019ae8 <FAT::unlink(char const*)+0x18>
c0019ae0:	b8 04 00 00 00       	mov    eax,0x4
c0019ae5:	eb 61                	jmp    c0019b48 <FAT::unlink(char const*)+0x78>
c0019ae7:	90                   	nop
c0019ae8:	83 ec 08             	sub    esp,0x8
c0019aeb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019af2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019af6:	50                   	push   eax
c0019af7:	e8 44 6b fe ff       	call   c0000640 <strcpy>
c0019afc:	83 c4 10             	add    esp,0x10
c0019aff:	83 ec 08             	sub    esp,0x8
c0019b02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b06:	50                   	push   eax
c0019b07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b0e:	e8 61 fc ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019b13:	83 c4 10             	add    esp,0x10
c0019b16:	83 ec 0c             	sub    esp,0xc
c0019b19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b1d:	50                   	push   eax
c0019b1e:	e8 d7 ae fe ff       	call   c00049fa <f_unlink>
c0019b23:	83 c4 10             	add    esp,0x10
c0019b26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019b2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019b34:	85 c0                	test   eax,eax
c0019b36:	75 08                	jne    c0019b40 <FAT::unlink(char const*)+0x70>
c0019b38:	b8 00 00 00 00       	mov    eax,0x0
c0019b3d:	eb 09                	jmp    c0019b48 <FAT::unlink(char const*)+0x78>
c0019b3f:	90                   	nop
c0019b40:	b8 01 00 00 00       	mov    eax,0x1
c0019b45:	8d 76 00             	lea    esi,[esi+0x0]
c0019b48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019b4e:	c3                   	ret    
c0019b4f:	90                   	nop

c0019b50 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019b50:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019b56:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019b5d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019b64:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019b68:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019b6c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019b74:	75 0a                	jne    c0019b80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019b76:	b8 04 00 00 00       	mov    eax,0x4
c0019b7b:	e9 7c 01 00 00       	jmp    c0019cfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019b80:	83 ec 08             	sub    esp,0x8
c0019b83:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b8a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b8e:	50                   	push   eax
c0019b8f:	e8 ac 6a fe ff       	call   c0000640 <strcpy>
c0019b94:	83 c4 10             	add    esp,0x10
c0019b97:	83 ec 08             	sub    esp,0x8
c0019b9a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b9e:	50                   	push   eax
c0019b9f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019ba6:	e8 c9 fb ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019bab:	83 c4 10             	add    esp,0x10
c0019bae:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019bb6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019bbe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bc3:	83 e0 01             	and    eax,0x1
c0019bc6:	74 14                	je     c0019bdc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019bc8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bcf:	83 c8 01             	or     eax,0x1
c0019bd2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bdc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019be1:	83 e0 02             	and    eax,0x2
c0019be4:	74 12                	je     c0019bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019be6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bed:	83 c8 20             	or     eax,0x20
c0019bf0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bf7:	90                   	nop
c0019bf8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bfd:	83 e0 04             	and    eax,0x4
c0019c00:	74 12                	je     c0019c14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019c02:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c09:	83 c8 04             	or     eax,0x4
c0019c0c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c13:	90                   	nop
c0019c14:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c19:	83 e0 08             	and    eax,0x8
c0019c1c:	74 12                	je     c0019c30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019c1e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c25:	83 c8 02             	or     eax,0x2
c0019c28:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019c2f:	90                   	nop
c0019c30:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c35:	83 e0 01             	and    eax,0x1
c0019c38:	74 12                	je     c0019c4c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019c3a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c41:	83 c8 01             	or     eax,0x1
c0019c44:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c4b:	90                   	nop
c0019c4c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c51:	83 e0 02             	and    eax,0x2
c0019c54:	74 12                	je     c0019c68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019c56:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c5d:	83 c8 20             	or     eax,0x20
c0019c60:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c67:	90                   	nop
c0019c68:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c6d:	83 e0 04             	and    eax,0x4
c0019c70:	74 12                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019c72:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c79:	83 c8 04             	or     eax,0x4
c0019c7c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c83:	90                   	nop
c0019c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c89:	83 e0 08             	and    eax,0x8
c0019c8c:	74 12                	je     c0019ca0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019c8e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c95:	83 c8 02             	or     eax,0x2
c0019c98:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c9f:	90                   	nop
c0019ca0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019ca7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cae:	09 d0                	or     eax,edx
c0019cb0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019cb7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019cbf:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019cc7:	83 ec 04             	sub    esp,0x4
c0019cca:	52                   	push   edx
c0019ccb:	50                   	push   eax
c0019ccc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cd0:	50                   	push   eax
c0019cd1:	e8 99 b1 fe ff       	call   c0004e6f <f_chmod>
c0019cd6:	83 c4 10             	add    esp,0x10
c0019cd9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019ce0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019ce7:	85 c0                	test   eax,eax
c0019ce9:	75 09                	jne    c0019cf4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019ceb:	b8 00 00 00 00       	mov    eax,0x0
c0019cf0:	eb 0a                	jmp    c0019cfc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019cf2:	66 90                	xchg   ax,ax
c0019cf4:	b8 01 00 00 00       	mov    eax,0x1
c0019cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0019cfc:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d02:	c3                   	ret    
c0019d03:	90                   	nop

c0019d04 <FAT::rename(char const*, char const*)>:
c0019d04:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d0a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d12:	74 0c                	je     c0019d20 <FAT::rename(char const*, char const*)+0x1c>
c0019d14:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d1c:	75 0e                	jne    c0019d2c <FAT::rename(char const*, char const*)+0x28>
c0019d1e:	66 90                	xchg   ax,ax
c0019d20:	b8 04 00 00 00       	mov    eax,0x4
c0019d25:	e9 9e 00 00 00       	jmp    c0019dc8 <FAT::rename(char const*, char const*)+0xc4>
c0019d2a:	66 90                	xchg   ax,ax
c0019d2c:	83 ec 08             	sub    esp,0x8
c0019d2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d3d:	50                   	push   eax
c0019d3e:	e8 fd 68 fe ff       	call   c0000640 <strcpy>
c0019d43:	83 c4 10             	add    esp,0x10
c0019d46:	83 ec 08             	sub    esp,0x8
c0019d49:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d50:	50                   	push   eax
c0019d51:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d58:	e8 17 fa ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	83 ec 08             	sub    esp,0x8
c0019d63:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d6e:	50                   	push   eax
c0019d6f:	e8 cc 68 fe ff       	call   c0000640 <strcpy>
c0019d74:	83 c4 10             	add    esp,0x10
c0019d77:	83 ec 08             	sub    esp,0x8
c0019d7a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d7e:	50                   	push   eax
c0019d7f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d86:	e8 e9 f9 ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019d8b:	83 c4 10             	add    esp,0x10
c0019d8e:	83 ec 08             	sub    esp,0x8
c0019d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d95:	50                   	push   eax
c0019d96:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d9d:	50                   	push   eax
c0019d9e:	e8 14 af fe ff       	call   c0004cb7 <f_rename>
c0019da3:	83 c4 10             	add    esp,0x10
c0019da6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019dad:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019db4:	85 c0                	test   eax,eax
c0019db6:	75 08                	jne    c0019dc0 <FAT::rename(char const*, char const*)+0xbc>
c0019db8:	b8 00 00 00 00       	mov    eax,0x0
c0019dbd:	eb 09                	jmp    c0019dc8 <FAT::rename(char const*, char const*)+0xc4>
c0019dbf:	90                   	nop
c0019dc0:	b8 01 00 00 00       	mov    eax,0x1
c0019dc5:	8d 76 00             	lea    esi,[esi+0x0]
c0019dc8:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019dce:	c3                   	ret    
c0019dcf:	90                   	nop

c0019dd0 <FAT::mkdir(char const*)>:
c0019dd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dd6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019dde:	75 08                	jne    c0019de8 <FAT::mkdir(char const*)+0x18>
c0019de0:	b8 04 00 00 00       	mov    eax,0x4
c0019de5:	eb 61                	jmp    c0019e48 <FAT::mkdir(char const*)+0x78>
c0019de7:	90                   	nop
c0019de8:	83 ec 08             	sub    esp,0x8
c0019deb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019df2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019df6:	50                   	push   eax
c0019df7:	e8 44 68 fe ff       	call   c0000640 <strcpy>
c0019dfc:	83 c4 10             	add    esp,0x10
c0019dff:	83 ec 08             	sub    esp,0x8
c0019e02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e06:	50                   	push   eax
c0019e07:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e0e:	e8 61 f9 ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019e13:	83 c4 10             	add    esp,0x10
c0019e16:	83 ec 0c             	sub    esp,0xc
c0019e19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e1d:	50                   	push   eax
c0019e1e:	e8 f9 ac fe ff       	call   c0004b1c <f_mkdir>
c0019e23:	83 c4 10             	add    esp,0x10
c0019e26:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e2d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e34:	85 c0                	test   eax,eax
c0019e36:	75 08                	jne    c0019e40 <FAT::mkdir(char const*)+0x70>
c0019e38:	b8 00 00 00 00       	mov    eax,0x0
c0019e3d:	eb 09                	jmp    c0019e48 <FAT::mkdir(char const*)+0x78>
c0019e3f:	90                   	nop
c0019e40:	b8 01 00 00 00       	mov    eax,0x1
c0019e45:	8d 76 00             	lea    esi,[esi+0x0]
c0019e48:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e4e:	c3                   	ret    
c0019e4f:	90                   	nop

c0019e50 <FAT::exists(char const*)>:
c0019e50:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019e56:	83 ec 08             	sub    esp,0x8
c0019e59:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e60:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e64:	50                   	push   eax
c0019e65:	e8 d6 67 fe ff       	call   c0000640 <strcpy>
c0019e6a:	83 c4 10             	add    esp,0x10
c0019e6d:	83 ec 08             	sub    esp,0x8
c0019e70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e74:	50                   	push   eax
c0019e75:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e7c:	e8 f3 f8 ff ff       	call   c0019774 <FAT::fixFilepath(char*)>
c0019e81:	83 c4 10             	add    esp,0x10
c0019e84:	83 ec 08             	sub    esp,0x8
c0019e87:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019e8e:	50                   	push   eax
c0019e8f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e93:	50                   	push   eax
c0019e94:	e8 ef a8 fe ff       	call   c0004788 <f_stat>
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019ea3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019eaa:	85 c0                	test   eax,eax
c0019eac:	75 06                	jne    c0019eb4 <FAT::exists(char const*)+0x64>
c0019eae:	b0 01                	mov    al,0x1
c0019eb0:	eb 06                	jmp    c0019eb8 <FAT::exists(char const*)+0x68>
c0019eb2:	66 90                	xchg   ax,ax
c0019eb4:	b0 00                	mov    al,0x0
c0019eb6:	66 90                	xchg   ax,ax
c0019eb8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019ebe:	c3                   	ret    
c0019ebf:	90                   	nop

c0019ec0 <isoReadDiscSectorHelper>:
c0019ec0:	83 ec 2c             	sub    esp,0x2c
c0019ec3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019ec7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019ecb:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019ed0:	83 e8 41             	sub    eax,0x41
c0019ed3:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019eda:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019ede:	ba 00 00 00 00       	mov    edx,0x0
c0019ee3:	83 ec 0c             	sub    esp,0xc
c0019ee6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019eea:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019eee:	52                   	push   edx
c0019eef:	50                   	push   eax
c0019ef0:	51                   	push   ecx
c0019ef1:	e8 ae 3b ff ff       	call   c000daa4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019ef6:	83 c4 20             	add    esp,0x20
c0019ef9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019efd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019f02:	74 0c                	je     c0019f10 <isoReadDiscSectorHelper+0x50>
c0019f04:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f08:	c1 e0 0b             	shl    eax,0xb
c0019f0b:	eb 0b                	jmp    c0019f18 <isoReadDiscSectorHelper+0x58>
c0019f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019f10:	b8 00 00 00 00       	mov    eax,0x0
c0019f15:	8d 76 00             	lea    esi,[esi+0x0]
c0019f18:	83 c4 2c             	add    esp,0x2c
c0019f1b:	c3                   	ret    

c0019f1c <iso_kprintf>:
c0019f1c:	83 ec 0c             	sub    esp,0xc
c0019f1f:	83 ec 08             	sub    esp,0x8
c0019f22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f26:	68 da 25 02 c0       	push   0xc00225da
c0019f2b:	e8 15 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f30:	83 c4 10             	add    esp,0x10
c0019f33:	90                   	nop
c0019f34:	83 c4 0c             	add    esp,0xc
c0019f37:	c3                   	ret    

c0019f38 <iso_kprintfd>:
c0019f38:	83 ec 0c             	sub    esp,0xc
c0019f3b:	83 ec 08             	sub    esp,0x8
c0019f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019f42:	68 fa 0d 02 c0       	push   0xc0020dfa
c0019f47:	e8 f9 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f4c:	83 c4 10             	add    esp,0x10
c0019f4f:	90                   	nop
c0019f50:	83 c4 0c             	add    esp,0xc
c0019f53:	c3                   	ret    

c0019f54 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019f54:	b8 08 00 00 00       	mov    eax,0x8
c0019f59:	c3                   	ret    

c0019f5a <ISO9660::truncate(void*, unsigned long long)>:
c0019f5a:	b8 01 00 00 00       	mov    eax,0x1
c0019f5f:	c3                   	ret    

c0019f60 <ISO9660::getName()>:
c0019f60:	b8 90 28 02 c0       	mov    eax,0xc0022890
c0019f65:	c3                   	ret    

c0019f66 <ISO9660::closeDir(void*)>:
c0019f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f6c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019f6f:	90                   	nop

c0019f70 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019f70:	b8 01 00 00 00       	mov    eax,0x1
c0019f75:	c3                   	ret    

c0019f76 <ISO9660::unlink(char const*)>:
c0019f76:	b8 01 00 00 00       	mov    eax,0x1
c0019f7b:	c3                   	ret    

c0019f7c <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f7c:	b8 03 00 00 00       	mov    eax,0x3
c0019f81:	c3                   	ret    

c0019f82 <ISO9660::rename(char const*, char const*)>:
c0019f82:	b8 01 00 00 00       	mov    eax,0x1
c0019f87:	c3                   	ret    

c0019f88 <ISO9660::mkdir(char const*)>:
c0019f88:	b8 01 00 00 00       	mov    eax,0x1
c0019f8d:	c3                   	ret    

c0019f8e <ISO9660::~ISO9660()>:
c0019f8e:	83 ec 0c             	sub    esp,0xc
c0019f91:	ba d0 29 02 c0       	mov    edx,0xc00229d0
c0019f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f9a:	89 10                	mov    DWORD PTR [eax],edx
c0019f9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fa0:	83 ec 0c             	sub    esp,0xc
c0019fa3:	50                   	push   eax
c0019fa4:	e8 bb 15 ff ff       	call   c000b564 <Filesystem::~Filesystem()>
c0019fa9:	83 c4 10             	add    esp,0x10
c0019fac:	90                   	nop
c0019fad:	83 c4 0c             	add    esp,0xc
c0019fb0:	c3                   	ret    
c0019fb1:	90                   	nop

c0019fb2 <ISO9660::~ISO9660()>:
c0019fb2:	83 ec 0c             	sub    esp,0xc
c0019fb5:	83 ec 0c             	sub    esp,0xc
c0019fb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fbc:	e8 cd ff ff ff       	call   c0019f8e <ISO9660::~ISO9660()>
c0019fc1:	83 c4 10             	add    esp,0x10
c0019fc4:	83 ec 08             	sub    esp,0x8
c0019fc7:	6a 08                	push   0x8
c0019fc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fcd:	e8 46 08 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019fd2:	83 c4 10             	add    esp,0x10
c0019fd5:	83 c4 0c             	add    esp,0xc
c0019fd8:	c3                   	ret    
c0019fd9:	90                   	nop

c0019fda <ISO9660::exists(char const*)>:
c0019fda:	83 ec 18             	sub    esp,0x18
c0019fdd:	68 ab 28 02 c0       	push   0xc00228ab
c0019fe2:	e8 0a 73 ff ff       	call   c00112f1 <KePanic(char const*)>
c0019fe7:	31 c0                	xor    eax,eax
c0019fe9:	83 c4 1c             	add    esp,0x1c
c0019fec:	c3                   	ret    
c0019fed:	90                   	nop

c0019fee <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019fee:	56                   	push   esi
c0019fef:	53                   	push   ebx
c0019ff0:	53                   	push   ebx
c0019ff1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ff5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ff9:	85 db                	test   ebx,ebx
c0019ffb:	0f 84 ca 00 00 00    	je     c001a0cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a001:	85 f6                	test   esi,esi
c001a003:	0f 84 c2 00 00 00    	je     c001a0cb <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a009:	b8 03 00 00 00       	mov    eax,0x3
c001a00e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a013:	0f 85 b7 00 00 00    	jne    c001a0d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a019:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a01b:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a022:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a028:	74 1b                	je     c001a045 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a02a:	85 c0                	test   eax,eax
c001a02c:	74 10                	je     c001a03e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a02e:	83 ec 0c             	sub    esp,0xc
c001a031:	68 c9 28 02 c0       	push   0xc00228c9
c001a036:	e8 b6 72 ff ff       	call   c00112f1 <KePanic(char const*)>
c001a03b:	83 c4 10             	add    esp,0x10
c001a03e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a040:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a045:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a048:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a04f:	85 c0                	test   eax,eax
c001a051:	74 09                	je     c001a05c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a053:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a05a:	74 48                	je     c001a0a4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a05c:	83 ec 0c             	sub    esp,0xc
c001a05f:	68 d9 28 02 c0       	push   0xc00228d9
c001a064:	e8 dc 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a069:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a06c:	83 c4 10             	add    esp,0x10
c001a06f:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a076:	85 c0                	test   eax,eax
c001a078:	74 17                	je     c001a091 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a07a:	83 ec 0c             	sub    esp,0xc
c001a07d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a084:	68 f9 28 02 c0       	push   0xc00228f9
c001a089:	e8 b7 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a08e:	83 c4 10             	add    esp,0x10
c001a091:	83 ec 0c             	sub    esp,0xc
c001a094:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a09b:	50                   	push   eax
c001a09c:	e8 a5 c9 fe ff       	call   c0006a46 <init_percd>
c001a0a1:	83 c4 10             	add    esp,0x10
c001a0a4:	83 c3 03             	add    ebx,0x3
c001a0a7:	51                   	push   ecx
c001a0a8:	51                   	push   ecx
c001a0a9:	6a 00                	push   0x0
c001a0ab:	53                   	push   ebx
c001a0ac:	e8 5c c4 fe ff       	call   c000650d <iso_open>
c001a0b1:	83 c4 10             	add    esp,0x10
c001a0b4:	89 c2                	mov    edx,eax
c001a0b6:	b8 01 00 00 00       	mov    eax,0x1
c001a0bb:	83 fa ff             	cmp    edx,0xffffffff
c001a0be:	74 10                	je     c001a0d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0c0:	83 c2 32             	add    edx,0x32
c001a0c3:	31 c0                	xor    eax,eax
c001a0c5:	01 d2                	add    edx,edx
c001a0c7:	89 16                	mov    DWORD PTR [esi],edx
c001a0c9:	eb 05                	jmp    c001a0d0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a0cb:	b8 04 00 00 00       	mov    eax,0x4
c001a0d0:	5a                   	pop    edx
c001a0d1:	5b                   	pop    ebx
c001a0d2:	5e                   	pop    esi
c001a0d3:	c3                   	ret    

c001a0d4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a0d4:	53                   	push   ebx
c001a0d5:	83 ec 08             	sub    esp,0x8
c001a0d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a0e0:	85 c0                	test   eax,eax
c001a0e2:	74 2d                	je     c001a111 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a0e4:	85 db                	test   ebx,ebx
c001a0e6:	74 29                	je     c001a111 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a0e8:	b9 02 00 00 00       	mov    ecx,0x2
c001a0ed:	52                   	push   edx
c001a0ee:	99                   	cdq    
c001a0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f3:	f7 f9                	idiv   ecx
c001a0f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a0f9:	83 e8 32             	sub    eax,0x32
c001a0fc:	50                   	push   eax
c001a0fd:	e8 b3 c4 fe ff       	call   c00065b5 <iso_read>
c001a102:	83 c4 10             	add    esp,0x10
c001a105:	89 03                	mov    DWORD PTR [ebx],eax
c001a107:	09 d0                	or     eax,edx
c001a109:	0f 94 c0             	sete   al
c001a10c:	0f b6 c0             	movzx  eax,al
c001a10f:	eb 05                	jmp    c001a116 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a111:	b8 04 00 00 00       	mov    eax,0x4
c001a116:	83 c4 08             	add    esp,0x8
c001a119:	5b                   	pop    ebx
c001a11a:	c3                   	ret    
c001a11b:	90                   	nop

c001a11c <ISO9660::seek(void*, unsigned long long)>:
c001a11c:	57                   	push   edi
c001a11d:	56                   	push   esi
c001a11e:	b8 04 00 00 00       	mov    eax,0x4
c001a123:	51                   	push   ecx
c001a124:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a128:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a12c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a130:	85 d2                	test   edx,edx
c001a132:	74 26                	je     c001a15a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a134:	6a 00                	push   0x0
c001a136:	b9 02 00 00 00       	mov    ecx,0x2
c001a13b:	57                   	push   edi
c001a13c:	89 d0                	mov    eax,edx
c001a13e:	56                   	push   esi
c001a13f:	99                   	cdq    
c001a140:	f7 f9                	idiv   ecx
c001a142:	83 e8 32             	sub    eax,0x32
c001a145:	50                   	push   eax
c001a146:	e8 80 c5 fe ff       	call   c00066cb <iso_seek>
c001a14b:	83 c4 10             	add    esp,0x10
c001a14e:	31 f0                	xor    eax,esi
c001a150:	31 fa                	xor    edx,edi
c001a152:	09 d0                	or     eax,edx
c001a154:	0f 95 c0             	setne  al
c001a157:	0f b6 c0             	movzx  eax,al
c001a15a:	5a                   	pop    edx
c001a15b:	5e                   	pop    esi
c001a15c:	5f                   	pop    edi
c001a15d:	c3                   	ret    

c001a15e <ISO9660::tell(void*, unsigned long long*)>:
c001a15e:	53                   	push   ebx
c001a15f:	83 ec 08             	sub    esp,0x8
c001a162:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a166:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a16a:	85 c0                	test   eax,eax
c001a16c:	74 24                	je     c001a192 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a16e:	85 db                	test   ebx,ebx
c001a170:	74 20                	je     c001a192 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a172:	83 ec 0c             	sub    esp,0xc
c001a175:	b9 02 00 00 00       	mov    ecx,0x2
c001a17a:	99                   	cdq    
c001a17b:	f7 f9                	idiv   ecx
c001a17d:	83 e8 32             	sub    eax,0x32
c001a180:	50                   	push   eax
c001a181:	e8 c9 c5 fe ff       	call   c000674f <iso_tell>
c001a186:	83 c4 10             	add    esp,0x10
c001a189:	89 03                	mov    DWORD PTR [ebx],eax
c001a18b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a18e:	31 c0                	xor    eax,eax
c001a190:	eb 05                	jmp    c001a197 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a192:	b8 04 00 00 00       	mov    eax,0x4
c001a197:	83 c4 08             	add    esp,0x8
c001a19a:	5b                   	pop    ebx
c001a19b:	c3                   	ret    

c001a19c <ISO9660::stat(void*, unsigned long long*)>:
c001a19c:	53                   	push   ebx
c001a19d:	83 ec 14             	sub    esp,0x14
c001a1a0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a1a4:	68 1d 29 02 c0       	push   0xc002291d
c001a1a9:	e8 97 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1ae:	83 c4 10             	add    esp,0x10
c001a1b1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a1b6:	74 2c                	je     c001a1e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1b8:	85 db                	test   ebx,ebx
c001a1ba:	74 28                	je     c001a1e4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a1bc:	83 ec 0c             	sub    esp,0xc
c001a1bf:	b9 02 00 00 00       	mov    ecx,0x2
c001a1c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1c8:	99                   	cdq    
c001a1c9:	f7 f9                	idiv   ecx
c001a1cb:	83 e8 32             	sub    eax,0x32
c001a1ce:	50                   	push   eax
c001a1cf:	e8 ac c5 fe ff       	call   c0006780 <iso_total>
c001a1d4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a1db:	89 03                	mov    DWORD PTR [ebx],eax
c001a1dd:	83 c4 10             	add    esp,0x10
c001a1e0:	31 c0                	xor    eax,eax
c001a1e2:	eb 05                	jmp    c001a1e9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a1e4:	b8 04 00 00 00       	mov    eax,0x4
c001a1e9:	83 c4 08             	add    esp,0x8
c001a1ec:	5b                   	pop    ebx
c001a1ed:	c3                   	ret    

c001a1ee <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a1ee:	55                   	push   ebp
c001a1ef:	57                   	push   edi
c001a1f0:	56                   	push   esi
c001a1f1:	53                   	push   ebx
c001a1f2:	83 ec 18             	sub    esp,0x18
c001a1f5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a1f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a1fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a201:	68 25 29 02 c0       	push   0xc0022925
c001a206:	e8 3a 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a20b:	83 c4 10             	add    esp,0x10
c001a20e:	85 ff                	test   edi,edi
c001a210:	0f 94 c0             	sete   al
c001a213:	85 f6                	test   esi,esi
c001a215:	0f 94 c2             	sete   dl
c001a218:	09 d0                	or     eax,edx
c001a21a:	a8 01                	test   al,0x1
c001a21c:	0f 85 dd 00 00 00    	jne    c001a2ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a222:	85 db                	test   ebx,ebx
c001a224:	0f 84 d5 00 00 00    	je     c001a2ff <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a22a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a22d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a233:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a23a:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a241:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a243:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a249:	74 1b                	je     c001a266 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a24b:	85 c0                	test   eax,eax
c001a24d:	74 10                	je     c001a25f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a24f:	83 ec 0c             	sub    esp,0xc
c001a252:	68 c9 28 02 c0       	push   0xc00228c9
c001a257:	e8 95 70 ff ff       	call   c00112f1 <KePanic(char const*)>
c001a25c:	83 c4 10             	add    esp,0x10
c001a25f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a261:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a266:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a269:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a270:	85 c0                	test   eax,eax
c001a272:	74 09                	je     c001a27d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a274:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a27b:	74 51                	je     c001a2ce <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a27d:	83 ec 0c             	sub    esp,0xc
c001a280:	68 2d 29 02 c0       	push   0xc002292d
c001a285:	e8 bb 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a28a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a28d:	83 c4 10             	add    esp,0x10
c001a290:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a298:	74 21                	je     c001a2bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a29a:	83 ec 0c             	sub    esp,0xc
c001a29d:	68 4d 29 02 c0       	push   0xc002294d
c001a2a2:	e8 9e 06 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a2a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2aa:	83 c4 10             	add    esp,0x10
c001a2ad:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a2b4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2bb:	83 ec 0c             	sub    esp,0xc
c001a2be:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a2c5:	50                   	push   eax
c001a2c6:	e8 7b c7 fe ff       	call   c0006a46 <init_percd>
c001a2cb:	83 c4 10             	add    esp,0x10
c001a2ce:	83 c3 03             	add    ebx,0x3
c001a2d1:	52                   	push   edx
c001a2d2:	52                   	push   edx
c001a2d3:	6a 00                	push   0x0
c001a2d5:	53                   	push   ebx
c001a2d6:	e8 32 c2 fe ff       	call   c000650d <iso_open>
c001a2db:	83 c4 10             	add    esp,0x10
c001a2de:	89 c5                	mov    ebp,eax
c001a2e0:	83 f8 ff             	cmp    eax,0xffffffff
c001a2e3:	75 21                	jne    c001a306 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a2e5:	50                   	push   eax
c001a2e6:	50                   	push   eax
c001a2e7:	6a 01                	push   0x1
c001a2e9:	53                   	push   ebx
c001a2ea:	e8 1e c2 fe ff       	call   c000650d <iso_open>
c001a2ef:	83 c4 10             	add    esp,0x10
c001a2f2:	ba 02 00 00 00       	mov    edx,0x2
c001a2f7:	40                   	inc    eax
c001a2f8:	74 2b                	je     c001a325 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a2fa:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a2fd:	eb 24                	jmp    c001a323 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a2ff:	ba 04 00 00 00       	mov    edx,0x4
c001a304:	eb 1f                	jmp    c001a325 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a306:	83 ec 0c             	sub    esp,0xc
c001a309:	50                   	push   eax
c001a30a:	e8 71 c4 fe ff       	call   c0006780 <iso_total>
c001a30f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a316:	89 07                	mov    DWORD PTR [edi],eax
c001a318:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a31b:	e8 77 c2 fe ff       	call   c0006597 <iso_close>
c001a320:	83 c4 10             	add    esp,0x10
c001a323:	31 d2                	xor    edx,edx
c001a325:	83 c4 0c             	add    esp,0xc
c001a328:	89 d0                	mov    eax,edx
c001a32a:	5b                   	pop    ebx
c001a32b:	5e                   	pop    esi
c001a32c:	5f                   	pop    edi
c001a32d:	5d                   	pop    ebp
c001a32e:	c3                   	ret    
c001a32f:	90                   	nop

c001a330 <ISO9660::close(void*)>:
c001a330:	83 ec 0c             	sub    esp,0xc
c001a333:	b8 04 00 00 00       	mov    eax,0x4
c001a338:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a33c:	85 d2                	test   edx,edx
c001a33e:	74 1b                	je     c001a35b <ISO9660::close(void*)+0x2b>
c001a340:	83 ec 0c             	sub    esp,0xc
c001a343:	b9 02 00 00 00       	mov    ecx,0x2
c001a348:	89 d0                	mov    eax,edx
c001a34a:	99                   	cdq    
c001a34b:	f7 f9                	idiv   ecx
c001a34d:	83 e8 32             	sub    eax,0x32
c001a350:	50                   	push   eax
c001a351:	e8 41 c2 fe ff       	call   c0006597 <iso_close>
c001a356:	83 c4 10             	add    esp,0x10
c001a359:	31 c0                	xor    eax,eax
c001a35b:	83 c4 0c             	add    esp,0xc
c001a35e:	c3                   	ret    
c001a35f:	90                   	nop

c001a360 <ISO9660::openDir(char const*, void**)>:
c001a360:	56                   	push   esi
c001a361:	53                   	push   ebx
c001a362:	50                   	push   eax
c001a363:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a367:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a36b:	85 db                	test   ebx,ebx
c001a36d:	0f 84 bd 00 00 00    	je     c001a430 <ISO9660::openDir(char const*, void**)+0xd0>
c001a373:	85 f6                	test   esi,esi
c001a375:	0f 84 b5 00 00 00    	je     c001a430 <ISO9660::openDir(char const*, void**)+0xd0>
c001a37b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a37d:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a384:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a38a:	74 1b                	je     c001a3a7 <ISO9660::openDir(char const*, void**)+0x47>
c001a38c:	85 c0                	test   eax,eax
c001a38e:	74 10                	je     c001a3a0 <ISO9660::openDir(char const*, void**)+0x40>
c001a390:	83 ec 0c             	sub    esp,0xc
c001a393:	68 c9 28 02 c0       	push   0xc00228c9
c001a398:	e8 54 6f ff ff       	call   c00112f1 <KePanic(char const*)>
c001a39d:	83 c4 10             	add    esp,0x10
c001a3a0:	8a 03                	mov    al,BYTE PTR [ebx]
c001a3a2:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a3a7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a3aa:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a3b1:	85 c0                	test   eax,eax
c001a3b3:	74 10                	je     c001a3c5 <ISO9660::openDir(char const*, void**)+0x65>
c001a3b5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a3bc:	74 1a                	je     c001a3d8 <ISO9660::openDir(char const*, void**)+0x78>
c001a3be:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a3c5:	83 ec 0c             	sub    esp,0xc
c001a3c8:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a3cf:	50                   	push   eax
c001a3d0:	e8 71 c6 fe ff       	call   c0006a46 <init_percd>
c001a3d5:	83 c4 10             	add    esp,0x10
c001a3d8:	83 c3 03             	add    ebx,0x3
c001a3db:	50                   	push   eax
c001a3dc:	50                   	push   eax
c001a3dd:	6a 01                	push   0x1
c001a3df:	53                   	push   ebx
c001a3e0:	e8 28 c1 fe ff       	call   c000650d <iso_open>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	89 c3                	mov    ebx,eax
c001a3ea:	83 f8 ff             	cmp    eax,0xffffffff
c001a3ed:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a3f2:	75 1c                	jne    c001a410 <ISO9660::openDir(char const*, void**)+0xb0>
c001a3f4:	53                   	push   ebx
c001a3f5:	53                   	push   ebx
c001a3f6:	68 71 29 02 c0       	push   0xc0022971
c001a3fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a401:	e8 a0 e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a406:	83 c4 10             	add    esp,0x10
c001a409:	b8 01 00 00 00       	mov    eax,0x1
c001a40e:	eb 25                	jmp    c001a435 <ISO9660::openDir(char const*, void**)+0xd5>
c001a410:	01 db                	add    ebx,ebx
c001a412:	51                   	push   ecx
c001a413:	83 c3 65             	add    ebx,0x65
c001a416:	51                   	push   ecx
c001a417:	68 84 29 02 c0       	push   0xc0022984
c001a41c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a422:	e8 7f e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a427:	89 1e                	mov    DWORD PTR [esi],ebx
c001a429:	83 c4 10             	add    esp,0x10
c001a42c:	31 c0                	xor    eax,eax
c001a42e:	eb 05                	jmp    c001a435 <ISO9660::openDir(char const*, void**)+0xd5>
c001a430:	b8 04 00 00 00       	mov    eax,0x4
c001a435:	5a                   	pop    edx
c001a436:	5b                   	pop    ebx
c001a437:	5e                   	pop    esi
c001a438:	c3                   	ret    
c001a439:	90                   	nop

c001a43a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a43a:	55                   	push   ebp
c001a43b:	57                   	push   edi
c001a43c:	56                   	push   esi
c001a43d:	53                   	push   ebx
c001a43e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a444:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a44b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a452:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a45a:	0f 84 e7 00 00 00    	je     c001a547 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a460:	85 db                	test   ebx,ebx
c001a462:	0f 84 df 00 00 00    	je     c001a547 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a468:	83 ec 0c             	sub    esp,0xc
c001a46b:	68 97 29 02 c0       	push   0xc0022997
c001a470:	e8 d0 04 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a475:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a47c:	b9 02 00 00 00       	mov    ecx,0x2
c001a481:	99                   	cdq    
c001a482:	f7 f9                	idiv   ecx
c001a484:	83 e8 32             	sub    eax,0x32
c001a487:	89 04 24             	mov    DWORD PTR [esp],eax
c001a48a:	e8 43 c3 fe ff       	call   c00067d2 <iso_readdir>
c001a48f:	83 c4 10             	add    esp,0x10
c001a492:	89 c6                	mov    esi,eax
c001a494:	85 c0                	test   eax,eax
c001a496:	75 37                	jne    c001a4cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a498:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a49d:	56                   	push   esi
c001a49e:	56                   	push   esi
c001a49f:	68 a2 29 02 c0       	push   0xc00229a2
c001a4a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4aa:	e8 f7 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4af:	83 c4 0c             	add    esp,0xc
c001a4b2:	68 10 01 00 00       	push   0x110
c001a4b7:	6a 00                	push   0x0
c001a4b9:	57                   	push   edi
c001a4ba:	e8 31 60 fe ff       	call   c00004f0 <memset>
c001a4bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a4c5:	83 c4 10             	add    esp,0x10
c001a4c8:	b8 01 00 00 00       	mov    eax,0x1
c001a4cd:	eb 7d                	jmp    c001a54c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a4cf:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a4d5:	8d 68 08             	lea    ebp,[eax+0x8]
c001a4d8:	83 ec 0c             	sub    esp,0xc
c001a4db:	55                   	push   ebp
c001a4dc:	e8 8f 60 fe ff       	call   c0000570 <strlen>
c001a4e1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a4e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a4ed:	83 c4 10             	add    esp,0x10
c001a4f0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a4f4:	75 0a                	jne    c001a500 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a4f6:	b8 02 00 00 00       	mov    eax,0x2
c001a4fb:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a4fe:	74 05                	je     c001a505 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a500:	b8 01 00 00 00       	mov    eax,0x1
c001a505:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a509:	50                   	push   eax
c001a50a:	50                   	push   eax
c001a50b:	55                   	push   ebp
c001a50c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a510:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a514:	50                   	push   eax
c001a515:	e8 26 61 fe ff       	call   c0000640 <strcpy>
c001a51a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a521:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a523:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a529:	5a                   	pop    edx
c001a52a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a52f:	59                   	pop    ecx
c001a530:	68 b5 29 02 c0       	push   0xc00229b5
c001a535:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a53b:	e8 66 e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	31 c0                	xor    eax,eax
c001a545:	eb 05                	jmp    c001a54c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a547:	b8 04 00 00 00       	mov    eax,0x4
c001a54c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a552:	5b                   	pop    ebx
c001a553:	5e                   	pop    esi
c001a554:	5f                   	pop    edi
c001a555:	5d                   	pop    ebp
c001a556:	c3                   	ret    

c001a557 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a557:	57                   	push   edi
c001a558:	56                   	push   esi
c001a559:	53                   	push   ebx
c001a55a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a55e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a562:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a566:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a56c:	0f be cb             	movsx  ecx,bl
c001a56f:	75 0b                	jne    c001a57c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a571:	0f be 05 e0 37 02 c0 	movsx  eax,BYTE PTR ds:0xc00237e0
c001a578:	39 c8                	cmp    eax,ecx
c001a57a:	74 47                	je     c001a5c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a57c:	83 ec 0c             	sub    esp,0xc
c001a57f:	31 d2                	xor    edx,edx
c001a581:	68 a0 98 02 c0       	push   0xc00298a0
c001a586:	6a 01                	push   0x1
c001a588:	52                   	push   edx
c001a589:	56                   	push   esi
c001a58a:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a591:	e8 0e 35 ff ff       	call   c000daa4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a596:	83 c4 20             	add    esp,0x20
c001a599:	85 c0                	test   eax,eax
c001a59b:	75 0e                	jne    c001a5ab <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a59d:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a5a3:	88 1d e0 37 02 c0    	mov    BYTE PTR ds:0xc00237e0,bl
c001a5a9:	eb 18                	jmp    c001a5c3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a5ab:	50                   	push   eax
c001a5ac:	68 00 08 00 00       	push   0x800
c001a5b1:	6a 00                	push   0x0
c001a5b3:	57                   	push   edi
c001a5b4:	e8 37 5f fe ff       	call   c00004f0 <memset>
c001a5b9:	83 c4 10             	add    esp,0x10
c001a5bc:	b8 01 00 00 00       	mov    eax,0x1
c001a5c1:	eb 0e                	jmp    c001a5d1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a5c3:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a5c8:	b9 00 08 00 00       	mov    ecx,0x800
c001a5cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a5cf:	31 c0                	xor    eax,eax
c001a5d1:	5b                   	pop    ebx
c001a5d2:	5e                   	pop    esi
c001a5d3:	5f                   	pop    edi
c001a5d4:	c3                   	ret    
c001a5d5:	90                   	nop

c001a5d6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a5d6:	53                   	push   ebx
c001a5d7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a5dd:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a5e7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a5ee:	8d 58 41             	lea    ebx,[eax+0x41]
c001a5f1:	0f be db             	movsx  ebx,bl
c001a5f4:	53                   	push   ebx
c001a5f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5f9:	50                   	push   eax
c001a5fa:	6a 10                	push   0x10
c001a5fc:	e8 56 ff ff ff       	call   c001a557 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a601:	83 c4 10             	add    esp,0x10
c001a604:	31 d2                	xor    edx,edx
c001a606:	85 c0                	test   eax,eax
c001a608:	75 33                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a60a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a60f:	75 2c                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a611:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a616:	75 25                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a618:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a61d:	75 1e                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a61f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a624:	75 17                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a626:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a62b:	75 10                	jne    c001a63d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a62d:	83 ec 0c             	sub    esp,0xc
c001a630:	53                   	push   ebx
c001a631:	e8 10 c4 fe ff       	call   c0006a46 <init_percd>
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	40                   	inc    eax
c001a63a:	0f 95 c2             	setne  dl
c001a63d:	88 d0                	mov    al,dl
c001a63f:	81 c4 08 08 00 00    	add    esp,0x808
c001a645:	5b                   	pop    ebx
c001a646:	c3                   	ret    
c001a647:	90                   	nop

c001a648 <ISO9660::ISO9660()>:
c001a648:	83 ec 0c             	sub    esp,0xc
c001a64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a64f:	83 ec 0c             	sub    esp,0xc
c001a652:	50                   	push   eax
c001a653:	e8 e8 0e ff ff       	call   c000b540 <Filesystem::Filesystem()>
c001a658:	83 c4 10             	add    esp,0x10
c001a65b:	ba d0 29 02 c0       	mov    edx,0xc00229d0
c001a660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a664:	89 10                	mov    DWORD PTR [eax],edx
c001a666:	e8 ed c4 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a66b:	90                   	nop
c001a66c:	83 c4 0c             	add    esp,0xc
c001a66f:	c3                   	ret    

c001a670 <SoundCard::beginPlayback()>:
c001a670:	c7 44 24 04 34 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a34
c001a678:	e9 74 6c ff ff       	jmp    c00112f1 <KePanic(char const*)>
c001a67d:	90                   	nop

c001a67e <SoundCard::stopPlayback()>:
c001a67e:	c7 44 24 04 34 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022a34
c001a686:	e9 66 6c ff ff       	jmp    c00112f1 <KePanic(char const*)>
c001a68b:	90                   	nop

c001a68c <SoundCard::SoundCard(char const*)>:
c001a68c:	83 ec 1c             	sub    esp,0x1c
c001a68f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a693:	83 ec 08             	sub    esp,0x8
c001a696:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a69a:	50                   	push   eax
c001a69b:	e8 ba 21 ff ff       	call   c000c85a <Device::Device(char const*)>
c001a6a0:	83 c4 10             	add    esp,0x10
c001a6a3:	ba 80 2a 02 c0       	mov    edx,0xc0022a80
c001a6a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ac:	89 10                	mov    DWORD PTR [eax],edx
c001a6ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6b2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6bd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a6c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6cb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a6d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6d9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a6e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6e7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a6f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6f9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a6fe:	7f 1a                	jg     c001a71a <SoundCard::SoundCard(char const*)+0x8e>
c001a700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a704:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a708:	83 c2 54             	add    edx,0x54
c001a70b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a713:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a718:	eb df                	jmp    c001a6f9 <SoundCard::SoundCard(char const*)+0x6d>
c001a71a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a71e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a725:	90                   	nop
c001a726:	83 c4 1c             	add    esp,0x1c
c001a729:	c3                   	ret    

c001a72a <SoundCard::~SoundCard()>:
c001a72a:	83 ec 0c             	sub    esp,0xc
c001a72d:	ba 80 2a 02 c0       	mov    edx,0xc0022a80
c001a732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a736:	89 10                	mov    DWORD PTR [eax],edx
c001a738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a73c:	83 ec 0c             	sub    esp,0xc
c001a73f:	50                   	push   eax
c001a740:	e8 7f 1e ff ff       	call   c000c5c4 <Device::~Device()>
c001a745:	83 c4 10             	add    esp,0x10
c001a748:	90                   	nop
c001a749:	83 c4 0c             	add    esp,0xc
c001a74c:	c3                   	ret    
c001a74d:	90                   	nop

c001a74e <SoundCard::~SoundCard()>:
c001a74e:	83 ec 0c             	sub    esp,0xc
c001a751:	83 ec 0c             	sub    esp,0xc
c001a754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a758:	e8 cd ff ff ff       	call   c001a72a <SoundCard::~SoundCard()>
c001a75d:	83 c4 10             	add    esp,0x10
c001a760:	83 ec 08             	sub    esp,0x8
c001a763:	68 e8 01 00 00       	push   0x1e8
c001a768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a76c:	e8 a7 00 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a771:	83 c4 10             	add    esp,0x10
c001a774:	83 c4 0c             	add    esp,0xc
c001a777:	c3                   	ret    

c001a778 <SoundCard::configureRates(int, int, int)>:
c001a778:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a77c:	31 c0                	xor    eax,eax
c001a77e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a785:	75 20                	jne    c001a7a7 <SoundCard::configureRates(int, int, int)+0x2f>
c001a787:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a78b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a791:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a795:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a79f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a7a5:	b0 01                	mov    al,0x1
c001a7a7:	c3                   	ret    

c001a7a8 <SoundCard::getSamples16(int, short*)>:
c001a7a8:	55                   	push   ebp
c001a7a9:	57                   	push   edi
c001a7aa:	31 ff                	xor    edi,edi
c001a7ac:	56                   	push   esi
c001a7ad:	53                   	push   ebx
c001a7ae:	31 db                	xor    ebx,ebx
c001a7b0:	83 ec 10             	sub    esp,0x10
c001a7b3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a7b7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7bb:	8d 04 36             	lea    eax,[esi+esi*1]
c001a7be:	50                   	push   eax
c001a7bf:	6a 00                	push   0x0
c001a7c1:	55                   	push   ebp
c001a7c2:	e8 29 5d fe ff       	call   c00004f0 <memset>
c001a7c7:	83 c4 10             	add    esp,0x10
c001a7ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7ce:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a7d5:	85 c0                	test   eax,eax
c001a7d7:	74 1b                	je     c001a7f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a7d9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a7dd:	75 15                	jne    c001a7f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a7df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7e3:	55                   	push   ebp
c001a7e4:	56                   	push   esi
c001a7e5:	50                   	push   eax
c001a7e6:	e8 f1 02 00 00       	call   c001aadc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a7eb:	83 c4 10             	add    esp,0x10
c001a7ee:	39 c7                	cmp    edi,eax
c001a7f0:	7d 02                	jge    c001a7f4 <SoundCard::getSamples16(int, short*)+0x4c>
c001a7f2:	89 c7                	mov    edi,eax
c001a7f4:	43                   	inc    ebx
c001a7f5:	83 fb 20             	cmp    ebx,0x20
c001a7f8:	75 d0                	jne    c001a7ca <SoundCard::getSamples16(int, short*)+0x22>
c001a7fa:	83 c4 0c             	add    esp,0xc
c001a7fd:	89 f8                	mov    eax,edi
c001a7ff:	5b                   	pop    ebx
c001a800:	5e                   	pop    esi
c001a801:	5f                   	pop    edi
c001a802:	5d                   	pop    ebp
c001a803:	c3                   	ret    

c001a804 <SoundCard::getSamples32(int, int*)>:
c001a804:	55                   	push   ebp
c001a805:	57                   	push   edi
c001a806:	31 ff                	xor    edi,edi
c001a808:	56                   	push   esi
c001a809:	31 f6                	xor    esi,esi
c001a80b:	53                   	push   ebx
c001a80c:	83 ec 10             	sub    esp,0x10
c001a80f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a813:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a817:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a81b:	c1 e0 02             	shl    eax,0x2
c001a81e:	50                   	push   eax
c001a81f:	6a 00                	push   0x0
c001a821:	55                   	push   ebp
c001a822:	e8 c9 5c fe ff       	call   c00004f0 <memset>
c001a827:	83 c4 10             	add    esp,0x10
c001a82a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a831:	85 c0                	test   eax,eax
c001a833:	74 1b                	je     c001a850 <SoundCard::getSamples32(int, int*)+0x4c>
c001a835:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a839:	75 15                	jne    c001a850 <SoundCard::getSamples32(int, int*)+0x4c>
c001a83b:	53                   	push   ebx
c001a83c:	55                   	push   ebp
c001a83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a841:	50                   	push   eax
c001a842:	e8 61 03 00 00       	call   c001aba8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a847:	83 c4 10             	add    esp,0x10
c001a84a:	39 c6                	cmp    esi,eax
c001a84c:	7d 02                	jge    c001a850 <SoundCard::getSamples32(int, int*)+0x4c>
c001a84e:	89 c6                	mov    esi,eax
c001a850:	47                   	inc    edi
c001a851:	83 ff 20             	cmp    edi,0x20
c001a854:	75 d4                	jne    c001a82a <SoundCard::getSamples32(int, int*)+0x26>
c001a856:	85 f6                	test   esi,esi
c001a858:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a85f:	75 0f                	jne    c001a870 <SoundCard::getSamples32(int, int*)+0x6c>
c001a861:	85 c0                	test   eax,eax
c001a863:	74 1b                	je     c001a880 <SoundCard::getSamples32(int, int*)+0x7c>
c001a865:	83 ec 0c             	sub    esp,0xc
c001a868:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a86a:	53                   	push   ebx
c001a86b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a86e:	eb 0d                	jmp    c001a87d <SoundCard::getSamples32(int, int*)+0x79>
c001a870:	85 c0                	test   eax,eax
c001a872:	75 0c                	jne    c001a880 <SoundCard::getSamples32(int, int*)+0x7c>
c001a874:	83 ec 0c             	sub    esp,0xc
c001a877:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a879:	53                   	push   ebx
c001a87a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	83 c4 0c             	add    esp,0xc
c001a883:	89 f0                	mov    eax,esi
c001a885:	5b                   	pop    ebx
c001a886:	5e                   	pop    esi
c001a887:	5f                   	pop    edi
c001a888:	5d                   	pop    ebp
c001a889:	c3                   	ret    

c001a88a <SoundCard::addChannel(SoundPort*)>:
c001a88a:	83 ec 0c             	sub    esp,0xc
c001a88d:	31 c0                	xor    eax,eax
c001a88f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a893:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a89b:	74 1b                	je     c001a8b8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a89d:	40                   	inc    eax
c001a89e:	83 f8 20             	cmp    eax,0x20
c001a8a1:	75 f0                	jne    c001a893 <SoundCard::addChannel(SoundPort*)+0x9>
c001a8a3:	83 ec 0c             	sub    esp,0xc
c001a8a6:	68 59 2a 02 c0       	push   0xc0022a59
c001a8ab:	e8 41 6a ff ff       	call   c00112f1 <KePanic(char const*)>
c001a8b0:	83 c4 10             	add    esp,0x10
c001a8b3:	83 c8 ff             	or     eax,0xffffffff
c001a8b6:	eb 0b                	jmp    c001a8c3 <SoundCard::addChannel(SoundPort*)+0x39>
c001a8b8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a8bc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a8c3:	83 c4 0c             	add    esp,0xc
c001a8c6:	c3                   	ret    
c001a8c7:	90                   	nop

c001a8c8 <SoundCard::removeChannel(int)>:
c001a8c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a8d0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a8db:	c3                   	ret    

c001a8dc <SoundPort::SoundPort(int, int, int, int)>:
c001a8dc:	83 ec 0c             	sub    esp,0xc
c001a8df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ee:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8fa:	89 10                	mov    DWORD PTR [eax],edx
c001a8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a900:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a904:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a907:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a90b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a90f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a912:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a917:	75 13                	jne    c001a92c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a91d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a91f:	05 a0 0f 00 00       	add    eax,0xfa0
c001a924:	01 c0                	add    eax,eax
c001a926:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a92a:	66 90                	xchg   ax,ax
c001a92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a930:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a934:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a937:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a93b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a946:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a949:	c1 e0 02             	shl    eax,0x2
c001a94c:	83 ec 0c             	sub    esp,0xc
c001a94f:	50                   	push   eax
c001a950:	e8 61 d1 fe ff       	call   c0007ab6 <malloc>
c001a955:	83 c4 10             	add    esp,0x10
c001a958:	89 c2                	mov    edx,eax
c001a95a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a95e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a961:	90                   	nop
c001a962:	83 c4 0c             	add    esp,0xc
c001a965:	c3                   	ret    
c001a966:	66 90                	xchg   ax,ax

c001a968 <SoundPort::~SoundPort()>:
c001a968:	83 ec 0c             	sub    esp,0xc
c001a96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a96f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a972:	85 c0                	test   eax,eax
c001a974:	74 1e                	je     c001a994 <SoundPort::~SoundPort()+0x2c>
c001a976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a97a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a97d:	83 ec 0c             	sub    esp,0xc
c001a980:	50                   	push   eax
c001a981:	e8 40 d1 fe ff       	call   c0007ac6 <free>
c001a986:	83 c4 10             	add    esp,0x10
c001a989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a98d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a994:	90                   	nop
c001a995:	83 c4 0c             	add    esp,0xc
c001a998:	c3                   	ret    
c001a999:	90                   	nop
c001a99a:	66 90                	xchg   ax,ax

c001a99c <SoundPort::unpause()>:
c001a99c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9a0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a9a4:	c3                   	ret    
c001a9a5:	90                   	nop
c001a9a6:	66 90                	xchg   ax,ax

c001a9a8 <SoundPort::pause()>:
c001a9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9ac:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a9b0:	c3                   	ret    
c001a9b1:	90                   	nop
c001a9b2:	66 90                	xchg   ax,ax

c001a9b4 <SoundPort::getBufferUsed()>:
c001a9b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9b8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9bb:	c3                   	ret    

c001a9bc <SoundPort::getBufferSize()>:
c001a9bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a9c3:	c3                   	ret    

c001a9c4 <SoundPort::buffer16(short*, int)>:
c001a9c4:	55                   	push   ebp
c001a9c5:	57                   	push   edi
c001a9c6:	56                   	push   esi
c001a9c7:	53                   	push   ebx
c001a9c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a9cc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a9d0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a9d3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a9d6:	74 68                	je     c001aa40 <SoundPort::buffer16(short*, int)+0x7c>
c001a9d8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a9dc:	85 c9                	test   ecx,ecx
c001a9de:	7e 60                	jle    c001aa40 <SoundPort::buffer16(short*, int)+0x7c>
c001a9e0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a9e4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a9e7:	c1 e1 0f             	shl    ecx,0xf
c001a9ea:	8d 70 01             	lea    esi,[eax+0x1]
c001a9ed:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a9f0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a9f3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9f6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9f9:	74 4d                	je     c001aa48 <SoundPort::buffer16(short*, int)+0x84>
c001a9fb:	31 f6                	xor    esi,esi
c001a9fd:	eb 21                	jmp    c001aa20 <SoundPort::buffer16(short*, int)+0x5c>
c001a9ff:	90                   	nop
c001aa00:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aa05:	8d 79 01             	lea    edi,[ecx+0x1]
c001aa08:	c1 e3 0f             	shl    ebx,0xf
c001aa0b:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aa0e:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aa11:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aa14:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa17:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa1a:	74 1c                	je     c001aa38 <SoundPort::buffer16(short*, int)+0x74>
c001aa1c:	89 c6                	mov    esi,eax
c001aa1e:	66 90                	xchg   ax,ax
c001aa20:	8d 46 01             	lea    eax,[esi+0x1]
c001aa23:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001aa27:	75 d7                	jne    c001aa00 <SoundPort::buffer16(short*, int)+0x3c>
c001aa29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aa2d:	8d 76 00             	lea    esi,[esi+0x0]
c001aa30:	5b                   	pop    ebx
c001aa31:	5e                   	pop    esi
c001aa32:	5f                   	pop    edi
c001aa33:	5d                   	pop    ebp
c001aa34:	c3                   	ret    
c001aa35:	8d 76 00             	lea    esi,[esi+0x0]
c001aa38:	5b                   	pop    ebx
c001aa39:	8d 46 02             	lea    eax,[esi+0x2]
c001aa3c:	5e                   	pop    esi
c001aa3d:	5f                   	pop    edi
c001aa3e:	5d                   	pop    ebp
c001aa3f:	c3                   	ret    
c001aa40:	5b                   	pop    ebx
c001aa41:	31 c0                	xor    eax,eax
c001aa43:	5e                   	pop    esi
c001aa44:	5f                   	pop    edi
c001aa45:	5d                   	pop    ebp
c001aa46:	c3                   	ret    
c001aa47:	90                   	nop
c001aa48:	b8 01 00 00 00       	mov    eax,0x1
c001aa4d:	eb e1                	jmp    c001aa30 <SoundPort::buffer16(short*, int)+0x6c>
c001aa4f:	90                   	nop

c001aa50 <SoundPort::buffer32(int*, int)>:
c001aa50:	55                   	push   ebp
c001aa51:	57                   	push   edi
c001aa52:	56                   	push   esi
c001aa53:	53                   	push   ebx
c001aa54:	83 ec 04             	sub    esp,0x4
c001aa57:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa62:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aa66:	89 04 24             	mov    DWORD PTR [esp],eax
c001aa69:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa6c:	74 5a                	je     c001aac8 <SoundPort::buffer32(int*, int)+0x78>
c001aa6e:	85 c0                	test   eax,eax
c001aa70:	7e 56                	jle    c001aac8 <SoundPort::buffer32(int*, int)+0x78>
c001aa72:	8d 71 01             	lea    esi,[ecx+0x1]
c001aa75:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa78:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa7b:	8b 37                	mov    esi,DWORD PTR [edi]
c001aa7d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aa80:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa83:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa86:	74 4c                	je     c001aad4 <SoundPort::buffer32(int*, int)+0x84>
c001aa88:	31 f6                	xor    esi,esi
c001aa8a:	eb 1c                	jmp    c001aaa8 <SoundPort::buffer32(int*, int)+0x58>
c001aa8c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aa8f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aa92:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aa95:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aa98:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aa9c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa9f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aaa2:	74 18                	je     c001aabc <SoundPort::buffer32(int*, int)+0x6c>
c001aaa4:	89 de                	mov    esi,ebx
c001aaa6:	66 90                	xchg   ax,ax
c001aaa8:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aaab:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aaae:	75 dc                	jne    c001aa8c <SoundPort::buffer32(int*, int)+0x3c>
c001aab0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aab3:	90                   	nop
c001aab4:	83 c4 04             	add    esp,0x4
c001aab7:	5b                   	pop    ebx
c001aab8:	5e                   	pop    esi
c001aab9:	5f                   	pop    edi
c001aaba:	5d                   	pop    ebp
c001aabb:	c3                   	ret    
c001aabc:	83 c4 04             	add    esp,0x4
c001aabf:	8d 46 02             	lea    eax,[esi+0x2]
c001aac2:	5b                   	pop    ebx
c001aac3:	5e                   	pop    esi
c001aac4:	5f                   	pop    edi
c001aac5:	5d                   	pop    ebp
c001aac6:	c3                   	ret    
c001aac7:	90                   	nop
c001aac8:	83 c4 04             	add    esp,0x4
c001aacb:	31 c0                	xor    eax,eax
c001aacd:	5b                   	pop    ebx
c001aace:	5e                   	pop    esi
c001aacf:	5f                   	pop    edi
c001aad0:	5d                   	pop    ebp
c001aad1:	c3                   	ret    
c001aad2:	66 90                	xchg   ax,ax
c001aad4:	b8 01 00 00 00       	mov    eax,0x1
c001aad9:	eb d9                	jmp    c001aab4 <SoundPort::buffer32(int*, int)+0x64>
c001aadb:	90                   	nop

c001aadc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aadc:	57                   	push   edi
c001aadd:	56                   	push   esi
c001aade:	53                   	push   ebx
c001aadf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aae3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aae7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aaed:	39 03                	cmp    DWORD PTR [ebx],eax
c001aaef:	74 13                	je     c001ab04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aaf1:	83 ec 0c             	sub    esp,0xc
c001aaf4:	68 ac 2a 02 c0       	push   0xc0022aac
c001aaf9:	e8 f3 67 ff ff       	call   c00112f1 <KePanic(char const*)>
c001aafe:	83 c4 10             	add    esp,0x10
c001ab01:	8d 76 00             	lea    esi,[esi+0x0]
c001ab04:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001ab0a:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001ab0d:	74 11                	je     c001ab20 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001ab0f:	83 ec 0c             	sub    esp,0xc
c001ab12:	68 eb 2a 02 c0       	push   0xc0022aeb
c001ab17:	e8 d5 67 ff ff       	call   c00112f1 <KePanic(char const*)>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	90                   	nop
c001ab20:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001ab26:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001ab29:	74 11                	je     c001ab3c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001ab2b:	83 ec 0c             	sub    esp,0xc
c001ab2e:	68 eb 2a 02 c0       	push   0xc0022aeb
c001ab33:	e8 b9 67 ff ff       	call   c00112f1 <KePanic(char const*)>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	90                   	nop
c001ab3c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001ab3f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001ab43:	7e 07                	jle    c001ab4c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001ab45:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab49:	8d 76 00             	lea    esi,[esi+0x0]
c001ab4c:	85 f6                	test   esi,esi
c001ab4e:	7e 2c                	jle    c001ab7c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001ab50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ab54:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ab57:	31 c9                	xor    ecx,ecx
c001ab59:	01 d7                	add    edi,edx
c001ab5b:	90                   	nop
c001ab5c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ab5f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ab62:	85 c0                	test   eax,eax
c001ab64:	79 06                	jns    c001ab6c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ab66:	05 ff 7f 00 00       	add    eax,0x7fff
c001ab6b:	90                   	nop
c001ab6c:	c1 f8 0f             	sar    eax,0xf
c001ab6f:	83 c1 04             	add    ecx,0x4
c001ab72:	66 01 02             	add    WORD PTR [edx],ax
c001ab75:	83 c2 02             	add    edx,0x2
c001ab78:	39 d7                	cmp    edi,edx
c001ab7a:	75 e0                	jne    c001ab5c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ab7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab7f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab82:	83 ec 04             	sub    esp,0x4
c001ab85:	29 f0                	sub    eax,esi
c001ab87:	c1 e0 02             	shl    eax,0x2
c001ab8a:	50                   	push   eax
c001ab8b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ab8e:	50                   	push   eax
c001ab8f:	52                   	push   edx
c001ab90:	e8 3b 58 fe ff       	call   c00003d0 <memmove>
c001ab95:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab98:	83 c4 10             	add    esp,0x10
c001ab9b:	29 f0                	sub    eax,esi
c001ab9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aba0:	89 f0                	mov    eax,esi
c001aba2:	5b                   	pop    ebx
c001aba3:	5e                   	pop    esi
c001aba4:	5f                   	pop    edi
c001aba5:	c3                   	ret    
c001aba6:	66 90                	xchg   ax,ax

c001aba8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aba8:	57                   	push   edi
c001aba9:	56                   	push   esi
c001abaa:	53                   	push   ebx
c001abab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001abaf:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001abb3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001abb7:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001abbd:	39 06                	cmp    DWORD PTR [esi],eax
c001abbf:	74 13                	je     c001abd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001abc1:	83 ec 0c             	sub    esp,0xc
c001abc4:	68 cc 2a 02 c0       	push   0xc0022acc
c001abc9:	e8 23 67 ff ff       	call   c00112f1 <KePanic(char const*)>
c001abce:	83 c4 10             	add    esp,0x10
c001abd1:	8d 76 00             	lea    esi,[esi+0x0]
c001abd4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001abda:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001abdd:	74 11                	je     c001abf0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001abdf:	83 ec 0c             	sub    esp,0xc
c001abe2:	68 07 2b 02 c0       	push   0xc0022b07
c001abe7:	e8 05 67 ff ff       	call   c00112f1 <KePanic(char const*)>
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	90                   	nop
c001abf0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001abf6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001abf9:	74 11                	je     c001ac0c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001abfb:	83 ec 0c             	sub    esp,0xc
c001abfe:	68 07 2b 02 c0       	push   0xc0022b07
c001ac03:	e8 e9 66 ff ff       	call   c00112f1 <KePanic(char const*)>
c001ac08:	83 c4 10             	add    esp,0x10
c001ac0b:	90                   	nop
c001ac0c:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ac0f:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ac13:	7e 07                	jle    c001ac1c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ac15:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ac19:	8d 76 00             	lea    esi,[esi+0x0]
c001ac1c:	85 ff                	test   edi,edi
c001ac1e:	7e 1c                	jle    c001ac3c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ac20:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ac27:	31 c0                	xor    eax,eax
c001ac29:	8d 76 00             	lea    esi,[esi+0x0]
c001ac2c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ac2f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ac32:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ac35:	83 c0 04             	add    eax,0x4
c001ac38:	39 c1                	cmp    ecx,eax
c001ac3a:	75 f0                	jne    c001ac2c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ac3c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ac3f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ac42:	83 ec 04             	sub    esp,0x4
c001ac45:	29 f8                	sub    eax,edi
c001ac47:	c1 e0 02             	shl    eax,0x2
c001ac4a:	50                   	push   eax
c001ac4b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ac4e:	50                   	push   eax
c001ac4f:	52                   	push   edx
c001ac50:	e8 7b 57 fe ff       	call   c00003d0 <memmove>
c001ac55:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ac58:	83 c4 10             	add    esp,0x10
c001ac5b:	29 f8                	sub    eax,edi
c001ac5d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ac60:	89 f8                	mov    eax,edi
c001ac62:	5b                   	pop    ebx
c001ac63:	5e                   	pop    esi
c001ac64:	5f                   	pop    edi
c001ac65:	c3                   	ret    

c001ac66 <PCI::open(int, int, void*)>:
c001ac66:	83 ec 18             	sub    esp,0x18
c001ac69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ac6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ac71:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ac77:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac79:	50                   	push   eax
c001ac7a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ac7d:	31 c0                	xor    eax,eax
c001ac7f:	83 c4 1c             	add    esp,0x1c
c001ac82:	c3                   	ret    
c001ac83:	90                   	nop

c001ac84 <PCI::close(int, int, void*)>:
c001ac84:	31 c0                	xor    eax,eax
c001ac86:	c3                   	ret    
c001ac87:	90                   	nop

c001ac88 <PCI::PCI()>:
c001ac88:	83 ec 0c             	sub    esp,0xc
c001ac8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac8f:	83 ec 08             	sub    esp,0x8
c001ac92:	68 23 2b 02 c0       	push   0xc0022b23
c001ac97:	50                   	push   eax
c001ac98:	e8 87 13 ff ff       	call   c000c024 <Bus::Bus(char const*)>
c001ac9d:	83 c4 10             	add    esp,0x10
c001aca0:	ba cc 2b 02 c0       	mov    edx,0xc0022bcc
c001aca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aca9:	89 10                	mov    DWORD PTR [eax],edx
c001acab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acaf:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001acb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acbd:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001acc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acc6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001accc:	0f b6 d0             	movzx  edx,al
c001accf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001acda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acde:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ace4:	0f b6 d0             	movzx  edx,al
c001ace7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aceb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001acf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acf4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001acfa:	8d 50 01             	lea    edx,[eax+0x1]
c001acfd:	88 d1                	mov    cl,dl
c001acff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad03:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ad09:	0f b6 d0             	movzx  edx,al
c001ad0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ad14:	83 c9 c0             	or     ecx,0xffffffc0
c001ad17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ad1b:	90                   	nop
c001ad1c:	83 c4 0c             	add    esp,0xc
c001ad1f:	c3                   	ret    

c001ad20 <PCI::readBAR8(unsigned int, int)>:
c001ad20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad28:	f6 c2 01             	test   dl,0x1
c001ad2b:	74 07                	je     c001ad34 <PCI::readBAR8(unsigned int, int)+0x14>
c001ad2d:	83 e2 fc             	and    edx,0xfffffffc
c001ad30:	01 c2                	add    edx,eax
c001ad32:	ec                   	in     al,dx
c001ad33:	c3                   	ret    
c001ad34:	83 e2 f0             	and    edx,0xfffffff0
c001ad37:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ad3a:	c3                   	ret    
c001ad3b:	90                   	nop

c001ad3c <PCI::readBAR16(unsigned int, int)>:
c001ad3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad44:	f6 c2 01             	test   dl,0x1
c001ad47:	74 08                	je     c001ad51 <PCI::readBAR16(unsigned int, int)+0x15>
c001ad49:	83 e2 fc             	and    edx,0xfffffffc
c001ad4c:	01 c2                	add    edx,eax
c001ad4e:	66 ed                	in     ax,dx
c001ad50:	c3                   	ret    
c001ad51:	83 e2 f0             	and    edx,0xfffffff0
c001ad54:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ad58:	c3                   	ret    
c001ad59:	90                   	nop

c001ad5a <PCI::readBAR32(unsigned int, int)>:
c001ad5a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad62:	f6 c2 01             	test   dl,0x1
c001ad65:	74 07                	je     c001ad6e <PCI::readBAR32(unsigned int, int)+0x14>
c001ad67:	83 e2 fc             	and    edx,0xfffffffc
c001ad6a:	01 c2                	add    edx,eax
c001ad6c:	ed                   	in     eax,dx
c001ad6d:	c3                   	ret    
c001ad6e:	83 e2 f0             	and    edx,0xfffffff0
c001ad71:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ad74:	c3                   	ret    
c001ad75:	90                   	nop

c001ad76 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ad76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad82:	f6 c2 01             	test   dl,0x1
c001ad85:	74 07                	je     c001ad8e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ad87:	83 e2 fc             	and    edx,0xfffffffc
c001ad8a:	01 ca                	add    edx,ecx
c001ad8c:	ee                   	out    dx,al
c001ad8d:	c3                   	ret    
c001ad8e:	83 e2 f0             	and    edx,0xfffffff0
c001ad91:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ad94:	c3                   	ret    
c001ad95:	90                   	nop

c001ad96 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ad96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ada2:	f6 c2 01             	test   dl,0x1
c001ada5:	74 08                	je     c001adaf <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ada7:	83 e2 fc             	and    edx,0xfffffffc
c001adaa:	01 ca                	add    edx,ecx
c001adac:	66 ef                	out    dx,ax
c001adae:	c3                   	ret    
c001adaf:	83 e2 f0             	and    edx,0xfffffff0
c001adb2:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001adb6:	c3                   	ret    
c001adb7:	90                   	nop

c001adb8 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001adb8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adbc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001adc0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001adc4:	f6 c2 01             	test   dl,0x1
c001adc7:	74 07                	je     c001add0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001adc9:	83 e2 fc             	and    edx,0xfffffffc
c001adcc:	01 ca                	add    edx,ecx
c001adce:	ef                   	out    dx,eax
c001adcf:	c3                   	ret    
c001add0:	83 e2 f0             	and    edx,0xfffffff0
c001add3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001add6:	c3                   	ret    
c001add7:	90                   	nop

c001add8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001add8:	55                   	push   ebp
c001add9:	57                   	push   edi
c001adda:	56                   	push   esi
c001addb:	53                   	push   ebx
c001addc:	83 ec 0c             	sub    esp,0xc
c001addf:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ade4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ade8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001adec:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001adf0:	83 fe 07             	cmp    esi,0x7
c001adf3:	76 10                	jbe    c001ae05 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001adf5:	83 ec 0c             	sub    esp,0xc
c001adf8:	68 2b 2b 02 c0       	push   0xc0022b2b
c001adfd:	e8 ef 64 ff ff       	call   c00112f1 <KePanic(char const*)>
c001ae02:	83 c4 10             	add    esp,0x10
c001ae05:	0f b6 db             	movzx  ebx,bl
c001ae08:	83 fb 0f             	cmp    ebx,0xf
c001ae0b:	76 10                	jbe    c001ae1d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ae0d:	83 ec 0c             	sub    esp,0xc
c001ae10:	68 5b 2b 02 c0       	push   0xc0022b5b
c001ae15:	e8 d7 64 ff ff       	call   c00112f1 <KePanic(char const*)>
c001ae1a:	83 c4 10             	add    esp,0x10
c001ae1d:	8d 04 36             	lea    eax,[esi+esi*1]
c001ae20:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae25:	83 c8 f0             	or     eax,0xfffffff0
c001ae28:	ee                   	out    dx,al
c001ae29:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ae2e:	89 e8                	mov    eax,ebp
c001ae30:	ee                   	out    dx,al
c001ae31:	83 c4 0c             	add    esp,0xc
c001ae34:	89 d8                	mov    eax,ebx
c001ae36:	89 f9                	mov    ecx,edi
c001ae38:	c1 e0 08             	shl    eax,0x8
c001ae3b:	0f b6 d9             	movzx  ebx,cl
c001ae3e:	83 e3 fc             	and    ebx,0xfffffffc
c001ae41:	09 d8                	or     eax,ebx
c001ae43:	5b                   	pop    ebx
c001ae44:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ae49:	5e                   	pop    esi
c001ae4a:	5f                   	pop    edi
c001ae4b:	5d                   	pop    ebp
c001ae4c:	c3                   	ret    
c001ae4d:	90                   	nop

c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae4e:	57                   	push   edi
c001ae4f:	56                   	push   esi
c001ae50:	53                   	push   ebx
c001ae51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ae55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae59:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ae5f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae63:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ae67:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ae6b:	83 ff 01             	cmp    edi,0x1
c001ae6e:	75 3f                	jne    c001aeaf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ae70:	89 de                	mov    esi,ebx
c001ae72:	0f b6 c0             	movzx  eax,al
c001ae75:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ae7b:	c1 e0 10             	shl    eax,0x10
c001ae7e:	0f b6 c9             	movzx  ecx,cl
c001ae81:	09 f0                	or     eax,esi
c001ae83:	c1 e1 08             	shl    ecx,0x8
c001ae86:	0f b6 d2             	movzx  edx,dl
c001ae89:	09 c8                	or     eax,ecx
c001ae8b:	c1 e2 0b             	shl    edx,0xb
c001ae8e:	09 d0                	or     eax,edx
c001ae90:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae95:	0d 00 00 00 80       	or     eax,0x80000000
c001ae9a:	ef                   	out    dx,eax
c001ae9b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aea0:	ed                   	in     eax,dx
c001aea1:	83 e3 02             	and    ebx,0x2
c001aea4:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aeab:	d3 e8                	shr    eax,cl
c001aead:	eb 44                	jmp    c001aef3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aeaf:	83 ff 02             	cmp    edi,0x2
c001aeb2:	75 2d                	jne    c001aee1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001aeb4:	83 ec 0c             	sub    esp,0xc
c001aeb7:	0f b6 c9             	movzx  ecx,cl
c001aeba:	0f b6 d2             	movzx  edx,dl
c001aebd:	0f b6 fb             	movzx  edi,bl
c001aec0:	0f b6 c0             	movzx  eax,al
c001aec3:	57                   	push   edi
c001aec4:	51                   	push   ecx
c001aec5:	52                   	push   edx
c001aec6:	50                   	push   eax
c001aec7:	56                   	push   esi
c001aec8:	e8 0b ff ff ff       	call   c001add8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aecd:	89 c2                	mov    edx,eax
c001aecf:	ed                   	in     eax,dx
c001aed0:	83 e3 02             	and    ebx,0x2
c001aed3:	83 c4 20             	add    esp,0x20
c001aed6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001aedd:	d3 e8                	shr    eax,cl
c001aedf:	eb 12                	jmp    c001aef3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001aee1:	83 ec 0c             	sub    esp,0xc
c001aee4:	68 8b 2b 02 c0       	push   0xc0022b8b
c001aee9:	e8 03 64 ff ff       	call   c00112f1 <KePanic(char const*)>
c001aeee:	83 c4 10             	add    esp,0x10
c001aef1:	31 c0                	xor    eax,eax
c001aef3:	5b                   	pop    ebx
c001aef4:	5e                   	pop    esi
c001aef5:	5f                   	pop    edi
c001aef6:	c3                   	ret    
c001aef7:	90                   	nop

c001aef8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aef8:	83 ec 18             	sub    esp,0x18
c001aefb:	6a 00                	push   0x0
c001aefd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af02:	50                   	push   eax
c001af03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af08:	50                   	push   eax
c001af09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af0e:	50                   	push   eax
c001af0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af13:	e8 36 ff ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af18:	83 c4 2c             	add    esp,0x2c
c001af1b:	c3                   	ret    

c001af1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af1c:	83 ec 18             	sub    esp,0x18
c001af1f:	6a 0e                	push   0xe
c001af21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af26:	50                   	push   eax
c001af27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2c:	50                   	push   eax
c001af2d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af32:	50                   	push   eax
c001af33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af37:	e8 12 ff ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af3c:	83 c4 2c             	add    esp,0x2c
c001af3f:	0f b6 c0             	movzx  eax,al
c001af42:	c3                   	ret    
c001af43:	90                   	nop

c001af44 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af44:	55                   	push   ebp
c001af45:	57                   	push   edi
c001af46:	56                   	push   esi
c001af47:	53                   	push   ebx
c001af48:	83 ec 18             	sub    esp,0x18
c001af4b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001af50:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001af55:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001af5a:	6a 0a                	push   0xa
c001af5c:	56                   	push   esi
c001af5d:	55                   	push   ebp
c001af5e:	57                   	push   edi
c001af5f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af63:	e8 e6 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af68:	83 c4 14             	add    esp,0x14
c001af6b:	89 c3                	mov    ebx,eax
c001af6d:	6a 0a                	push   0xa
c001af6f:	0f b6 db             	movzx  ebx,bl
c001af72:	56                   	push   esi
c001af73:	55                   	push   ebp
c001af74:	57                   	push   edi
c001af75:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af79:	e8 d0 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af7e:	83 c4 2c             	add    esp,0x2c
c001af81:	25 00 ff 00 00       	and    eax,0xff00
c001af86:	09 d8                	or     eax,ebx
c001af88:	5b                   	pop    ebx
c001af89:	5e                   	pop    esi
c001af8a:	5f                   	pop    edi
c001af8b:	5d                   	pop    ebp
c001af8c:	c3                   	ret    
c001af8d:	90                   	nop

c001af8e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af8e:	83 ec 18             	sub    esp,0x18
c001af91:	6a 08                	push   0x8
c001af93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af98:	50                   	push   eax
c001af99:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af9e:	50                   	push   eax
c001af9f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afa4:	50                   	push   eax
c001afa5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afa9:	e8 a0 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afae:	83 c4 2c             	add    esp,0x2c
c001afb1:	0f b6 c4             	movzx  eax,ah
c001afb4:	c3                   	ret    
c001afb5:	90                   	nop

c001afb6 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001afb6:	83 ec 18             	sub    esp,0x18
c001afb9:	6a 08                	push   0x8
c001afbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afc0:	50                   	push   eax
c001afc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afc6:	50                   	push   eax
c001afc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afcc:	50                   	push   eax
c001afcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afd1:	e8 78 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afd6:	83 c4 2c             	add    esp,0x2c
c001afd9:	c3                   	ret    

c001afda <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001afda:	83 ec 18             	sub    esp,0x18
c001afdd:	6a 3c                	push   0x3c
c001afdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afe4:	50                   	push   eax
c001afe5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001afea:	50                   	push   eax
c001afeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aff0:	50                   	push   eax
c001aff1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aff5:	e8 54 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001affa:	83 c4 2c             	add    esp,0x2c
c001affd:	c3                   	ret    

c001affe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001affe:	83 ec 18             	sub    esp,0x18
c001b001:	6a 18                	push   0x18
c001b003:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b008:	50                   	push   eax
c001b009:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b00e:	50                   	push   eax
c001b00f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b014:	50                   	push   eax
c001b015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b019:	e8 30 fe ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b01e:	83 c4 2c             	add    esp,0x2c
c001b021:	0f b6 c4             	movzx  eax,ah
c001b024:	c3                   	ret    
c001b025:	90                   	nop

c001b026 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b026:	55                   	push   ebp
c001b027:	57                   	push   edi
c001b028:	56                   	push   esi
c001b029:	53                   	push   ebx
c001b02a:	83 ec 28             	sub    esp,0x28
c001b02d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b031:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b036:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b03b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b040:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b047:	8d 43 12             	lea    eax,[ebx+0x12]
c001b04a:	83 c3 10             	add    ebx,0x10
c001b04d:	0f b6 c0             	movzx  eax,al
c001b050:	0f b6 db             	movzx  ebx,bl
c001b053:	50                   	push   eax
c001b054:	51                   	push   ecx
c001b055:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b059:	57                   	push   edi
c001b05a:	55                   	push   ebp
c001b05b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b05f:	e8 ea fd ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b064:	83 c4 14             	add    esp,0x14
c001b067:	89 c6                	mov    esi,eax
c001b069:	53                   	push   ebx
c001b06a:	c1 e6 10             	shl    esi,0x10
c001b06d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b071:	51                   	push   ecx
c001b072:	57                   	push   edi
c001b073:	55                   	push   ebp
c001b074:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b078:	e8 d1 fd ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b07d:	83 c4 3c             	add    esp,0x3c
c001b080:	0f b7 c0             	movzx  eax,ax
c001b083:	5b                   	pop    ebx
c001b084:	09 f0                	or     eax,esi
c001b086:	5e                   	pop    esi
c001b087:	5f                   	pop    edi
c001b088:	5d                   	pop    ebp
c001b089:	c3                   	ret    

c001b08a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b08a:	55                   	push   ebp
c001b08b:	57                   	push   edi
c001b08c:	56                   	push   esi
c001b08d:	53                   	push   ebx
c001b08e:	83 ec 0c             	sub    esp,0xc
c001b091:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b095:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b099:	89 f5                	mov    ebp,esi
c001b09b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b0a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b0a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b0a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0ad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b0b1:	83 f9 01             	cmp    ecx,0x1
c001b0b4:	75 5d                	jne    c001b113 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b0b6:	0f b6 c8             	movzx  ecx,al
c001b0b9:	0f b6 d2             	movzx  edx,dl
c001b0bc:	c1 e1 10             	shl    ecx,0x10
c001b0bf:	c1 e2 0b             	shl    edx,0xb
c001b0c2:	89 f0                	mov    eax,esi
c001b0c4:	25 fc 00 00 00       	and    eax,0xfc
c001b0c9:	09 c1                	or     ecx,eax
c001b0cb:	89 e8                	mov    eax,ebp
c001b0cd:	0f b6 c0             	movzx  eax,al
c001b0d0:	c1 e0 08             	shl    eax,0x8
c001b0d3:	09 c1                	or     ecx,eax
c001b0d5:	09 d1                	or     ecx,edx
c001b0d7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0dc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b0e2:	89 c8                	mov    eax,ecx
c001b0e4:	ef                   	out    dx,eax
c001b0e5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0ea:	ed                   	in     eax,dx
c001b0eb:	0f b7 db             	movzx  ebx,bx
c001b0ee:	83 e6 02             	and    esi,0x2
c001b0f1:	74 0a                	je     c001b0fd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b0f3:	0f b7 d0             	movzx  edx,ax
c001b0f6:	c1 e3 10             	shl    ebx,0x10
c001b0f9:	09 d3                	or     ebx,edx
c001b0fb:	eb 05                	jmp    c001b102 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b0fd:	66 31 c0             	xor    ax,ax
c001b100:	09 c3                	or     ebx,eax
c001b102:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b107:	89 c8                	mov    eax,ecx
c001b109:	ef                   	out    dx,eax
c001b10a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b10f:	89 d8                	mov    eax,ebx
c001b111:	eb 41                	jmp    c001b154 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b113:	83 f9 02             	cmp    ecx,0x2
c001b116:	75 45                	jne    c001b15d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	0f b6 d2             	movzx  edx,dl
c001b11e:	89 f1                	mov    ecx,esi
c001b120:	0f b6 c0             	movzx  eax,al
c001b123:	0f b6 f1             	movzx  esi,cl
c001b126:	89 e9                	mov    ecx,ebp
c001b128:	56                   	push   esi
c001b129:	0f b6 c9             	movzx  ecx,cl
c001b12c:	51                   	push   ecx
c001b12d:	52                   	push   edx
c001b12e:	50                   	push   eax
c001b12f:	57                   	push   edi
c001b130:	e8 a3 fc ff ff       	call   c001add8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b135:	89 c2                	mov    edx,eax
c001b137:	ed                   	in     eax,dx
c001b138:	83 c4 20             	add    esp,0x20
c001b13b:	0f b7 db             	movzx  ebx,bx
c001b13e:	f6 c2 02             	test   dl,0x2
c001b141:	74 0c                	je     c001b14f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b143:	0f b7 c8             	movzx  ecx,ax
c001b146:	89 d8                	mov    eax,ebx
c001b148:	c1 e0 10             	shl    eax,0x10
c001b14b:	09 c8                	or     eax,ecx
c001b14d:	eb 05                	jmp    c001b154 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b14f:	66 31 c0             	xor    ax,ax
c001b152:	09 d8                	or     eax,ebx
c001b154:	ef                   	out    dx,eax
c001b155:	83 c4 0c             	add    esp,0xc
c001b158:	5b                   	pop    ebx
c001b159:	5e                   	pop    esi
c001b15a:	5f                   	pop    edi
c001b15b:	5d                   	pop    ebp
c001b15c:	c3                   	ret    
c001b15d:	c7 44 24 20 8b 2b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022b8b
c001b165:	83 c4 0c             	add    esp,0xc
c001b168:	5b                   	pop    ebx
c001b169:	5e                   	pop    esi
c001b16a:	5f                   	pop    edi
c001b16b:	5d                   	pop    ebp
c001b16c:	e9 80 61 ff ff       	jmp    c00112f1 <KePanic(char const*)>
c001b171:	90                   	nop

c001b172 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b172:	55                   	push   ebp
c001b173:	57                   	push   edi
c001b174:	56                   	push   esi
c001b175:	53                   	push   ebx
c001b176:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b17c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b183:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b18a:	0f 85 bd 00 00 00    	jne    c001b24d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b190:	83 ec 0c             	sub    esp,0xc
c001b193:	68 14 01 00 00       	push   0x114
c001b198:	e8 19 c9 fe ff       	call   c0007ab6 <malloc>
c001b19d:	83 c4 0c             	add    esp,0xc
c001b1a0:	89 c3                	mov    ebx,eax
c001b1a2:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b1a8:	68 91 2b 02 c0       	push   0xc0022b91
c001b1ad:	50                   	push   eax
c001b1ae:	e8 05 06 ff ff       	call   c000b7b8 <File::File(char const*, Process*)>
c001b1b3:	83 c4 10             	add    esp,0x10
c001b1b6:	85 db                	test   ebx,ebx
c001b1b8:	0f 84 67 02 00 00    	je     c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1be:	56                   	push   esi
c001b1bf:	56                   	push   esi
c001b1c0:	6a 01                	push   0x1
c001b1c2:	53                   	push   ebx
c001b1c3:	e8 ac 06 ff ff       	call   c000b874 <File::open(FileOpenMode)>
c001b1c8:	83 c4 10             	add    esp,0x10
c001b1cb:	85 c0                	test   eax,eax
c001b1cd:	0f 85 52 02 00 00    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1d3:	52                   	push   edx
c001b1d4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b1d8:	50                   	push   eax
c001b1d9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b1dd:	50                   	push   eax
c001b1de:	53                   	push   ebx
c001b1df:	e8 92 09 ff ff       	call   c000bb76 <File::stat(unsigned long long*, bool*)>
c001b1e4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1e8:	40                   	inc    eax
c001b1e9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1ec:	e8 c5 c8 fe ff       	call   c0007ab6 <malloc>
c001b1f1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b1f5:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b1fa:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b1fe:	59                   	pop    ecx
c001b1ff:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b201:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b205:	51                   	push   ecx
c001b206:	50                   	push   eax
c001b207:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b20b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b20f:	53                   	push   ebx
c001b210:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b213:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b217:	83 c4 20             	add    esp,0x20
c001b21a:	89 c8                	mov    eax,ecx
c001b21c:	99                   	cdq    
c001b21d:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b221:	0f 85 fe 01 00 00    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b227:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b22b:	0f 85 f4 01 00 00    	jne    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b231:	83 ec 0c             	sub    esp,0xc
c001b234:	53                   	push   ebx
c001b235:	e8 98 06 ff ff       	call   c000b8d2 <File::close()>
c001b23a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b23e:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b245:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b252:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b258:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b25c:	31 f6                	xor    esi,esi
c001b25e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b266:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b26d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b272:	31 c9                	xor    ecx,ecx
c001b274:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b27c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b281:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b28d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b295:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b299:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b29d:	0f 8e 82 01 00 00    	jle    c001b425 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b2a3:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b2a6:	d4 40                	aam    0x40
c001b2a8:	d5 39                	aad    0x39
c001b2aa:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b2ae:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b2b2:	d4 40                	aam    0x40
c001b2b4:	d5 39                	aad    0x39
c001b2b6:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b2ba:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b2be:	d4 40                	aam    0x40
c001b2c0:	d5 39                	aad    0x39
c001b2c2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b2c6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b2ca:	d4 40                	aam    0x40
c001b2cc:	d5 39                	aad    0x39
c001b2ce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b2d2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b2d6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b2da:	3c 56                	cmp    al,0x56
c001b2dc:	74 43                	je     c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b2de:	d4 40                	aam    0x40
c001b2e0:	d5 39                	aad    0x39
c001b2e2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b2e5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b2e9:	0f b6 c9             	movzx  ecx,cl
c001b2ec:	c1 e1 04             	shl    ecx,0x4
c001b2ef:	d4 40                	aam    0x40
c001b2f1:	d5 39                	aad    0x39
c001b2f3:	83 e8 30             	sub    eax,0x30
c001b2f6:	0f b6 c0             	movzx  eax,al
c001b2f9:	09 c1                	or     ecx,eax
c001b2fb:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b2ff:	c1 e1 04             	shl    ecx,0x4
c001b302:	d4 40                	aam    0x40
c001b304:	d5 39                	aad    0x39
c001b306:	83 e8 30             	sub    eax,0x30
c001b309:	0f b6 c0             	movzx  eax,al
c001b30c:	09 c1                	or     ecx,eax
c001b30e:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b312:	c1 e1 04             	shl    ecx,0x4
c001b315:	d4 40                	aam    0x40
c001b317:	d5 39                	aad    0x39
c001b319:	83 e8 30             	sub    eax,0x30
c001b31c:	0f b6 c0             	movzx  eax,al
c001b31f:	09 c1                	or     ecx,eax
c001b321:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b325:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b329:	3c 58                	cmp    al,0x58
c001b32b:	74 47                	je     c001b374 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b32d:	d4 40                	aam    0x40
c001b32f:	d5 39                	aad    0x39
c001b331:	8d 50 d0             	lea    edx,[eax-0x30]
c001b334:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b338:	0f b6 d2             	movzx  edx,dl
c001b33b:	c1 e2 04             	shl    edx,0x4
c001b33e:	d4 40                	aam    0x40
c001b340:	d5 39                	aad    0x39
c001b342:	83 e8 30             	sub    eax,0x30
c001b345:	0f b6 c0             	movzx  eax,al
c001b348:	09 c2                	or     edx,eax
c001b34a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b34e:	c1 e2 04             	shl    edx,0x4
c001b351:	d4 40                	aam    0x40
c001b353:	d5 39                	aad    0x39
c001b355:	83 e8 30             	sub    eax,0x30
c001b358:	0f b6 c0             	movzx  eax,al
c001b35b:	09 c2                	or     edx,eax
c001b35d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b361:	c1 e2 04             	shl    edx,0x4
c001b364:	d4 40                	aam    0x40
c001b366:	d5 39                	aad    0x39
c001b368:	83 e8 30             	sub    eax,0x30
c001b36b:	0f b6 c0             	movzx  eax,al
c001b36e:	09 c2                	or     edx,eax
c001b370:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b374:	83 c6 10             	add    esi,0x10
c001b377:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b37b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b37f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b383:	83 fa 0a             	cmp    edx,0xa
c001b386:	74 0b                	je     c001b393 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b388:	47                   	inc    edi
c001b389:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b38d:	75 19                	jne    c001b3a8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b38f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b393:	31 c0                	xor    eax,eax
c001b395:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b39a:	0f 94 c0             	sete   al
c001b39d:	01 c6                	add    esi,eax
c001b39f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b3a4:	75 0b                	jne    c001b3b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b3a6:	eb 14                	jmp    c001b3bc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b3a8:	46                   	inc    esi
c001b3a9:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b3ac:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b3af:	eb ca                	jmp    c001b37b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b3b1:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b3b6:	0f 85 dd fe ff ff    	jne    c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b3bc:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b3c1:	74 10                	je     c001b3d3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b3c3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b3c8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b3cd:	0f 85 c6 fe ff ff    	jne    c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b3d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3d7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b3db:	83 e8 30             	sub    eax,0x30
c001b3de:	83 ef 30             	sub    edi,0x30
c001b3e1:	c1 e0 04             	shl    eax,0x4
c001b3e4:	09 f8                	or     eax,edi
c001b3e6:	0f b6 c0             	movzx  eax,al
c001b3e9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b3ed:	0f 85 a6 fe ff ff    	jne    c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b3f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3f7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b3fb:	83 e8 30             	sub    eax,0x30
c001b3fe:	83 ef 30             	sub    edi,0x30
c001b401:	c1 e0 04             	shl    eax,0x4
c001b404:	09 f8                	or     eax,edi
c001b406:	0f b6 c0             	movzx  eax,al
c001b409:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b40d:	0f 85 86 fe ff ff    	jne    c001b299 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b413:	50                   	push   eax
c001b414:	50                   	push   eax
c001b415:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b419:	50                   	push   eax
c001b41a:	55                   	push   ebp
c001b41b:	e8 20 52 fe ff       	call   c0000640 <strcpy>
c001b420:	83 c4 10             	add    esp,0x10
c001b423:	eb 06                	jmp    c001b42b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b425:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b429:	31 ed                	xor    ebp,ebp
c001b42b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b431:	89 e8                	mov    eax,ebp
c001b433:	5b                   	pop    ebx
c001b434:	5e                   	pop    esi
c001b435:	5f                   	pop    edi
c001b436:	5d                   	pop    ebp
c001b437:	c3                   	ret    

c001b438 <PCI::checkBus(unsigned char)>:
c001b438:	56                   	push   esi
c001b439:	53                   	push   ebx
c001b43a:	31 db                	xor    ebx,ebx
c001b43c:	51                   	push   ecx
c001b43d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b442:	52                   	push   edx
c001b443:	53                   	push   ebx
c001b444:	43                   	inc    ebx
c001b445:	56                   	push   esi
c001b446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b44a:	e8 03 03 00 00       	call   c001b752 <PCI::checkDevice(unsigned char, unsigned char)>
c001b44f:	83 c4 10             	add    esp,0x10
c001b452:	83 fb 20             	cmp    ebx,0x20
c001b455:	75 eb                	jne    c001b442 <PCI::checkBus(unsigned char)+0xa>
c001b457:	58                   	pop    eax
c001b458:	5b                   	pop    ebx
c001b459:	5e                   	pop    esi
c001b45a:	c3                   	ret    
c001b45b:	90                   	nop

c001b45c <PCI::foundDevice(PCIDeviceInfo)>:
c001b45c:	55                   	push   ebp
c001b45d:	57                   	push   edi
c001b45e:	56                   	push   esi
c001b45f:	53                   	push   ebx
c001b460:	83 ec 1c             	sub    esp,0x1c
c001b463:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b468:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b46c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b471:	0f 84 57 01 00 00    	je     c001b5ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b477:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b47c:	66 3d 06 04          	cmp    ax,0x406
c001b480:	75 2c                	jne    c001b4ae <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b482:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b487:	50                   	push   eax
c001b488:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b48d:	50                   	push   eax
c001b48e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b493:	50                   	push   eax
c001b494:	53                   	push   ebx
c001b495:	e8 64 fb ff ff       	call   c001affe <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b49a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b49e:	0f b6 c0             	movzx  eax,al
c001b4a1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b4a5:	83 c4 2c             	add    esp,0x2c
c001b4a8:	5b                   	pop    ebx
c001b4a9:	5e                   	pop    esi
c001b4aa:	5f                   	pop    edi
c001b4ab:	5d                   	pop    ebp
c001b4ac:	eb 8a                	jmp    c001b438 <PCI::checkBus(unsigned char)>
c001b4ae:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b4b2:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b4b8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b4bc:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b4c0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b4c5:	85 d2                	test   edx,edx
c001b4c7:	74 36                	je     c001b4ff <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b4c9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b4cc:	85 c9                	test   ecx,ecx
c001b4ce:	74 2b                	je     c001b4fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b4d0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b4d6:	31 ee                	xor    esi,ebp
c001b4d8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b4de:	75 1b                	jne    c001b4fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b4e0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b4e4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b4ea:	75 0f                	jne    c001b4fb <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b4ec:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b4f3:	39 f9                	cmp    ecx,edi
c001b4f5:	0f 84 d3 00 00 00    	je     c001b5ce <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b4fb:	8b 12                	mov    edx,DWORD PTR [edx]
c001b4fd:	eb c6                	jmp    c001b4c5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b4ff:	3d 01 06 00 00       	cmp    eax,0x601
c001b504:	75 19                	jne    c001b51f <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b506:	83 ec 0c             	sub    esp,0xc
c001b509:	68 64 01 00 00       	push   0x164
c001b50e:	e8 a3 c5 fe ff       	call   c0007ab6 <malloc>
c001b513:	89 c5                	mov    ebp,eax
c001b515:	89 04 24             	mov    DWORD PTR [esp],eax
c001b518:	e8 a1 0e 00 00       	call   c001c3be <SATABus::SATABus()>
c001b51d:	eb 1e                	jmp    c001b53d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b51f:	3d 01 01 00 00       	cmp    eax,0x101
c001b524:	75 62                	jne    c001b588 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b526:	83 ec 0c             	sub    esp,0xc
c001b529:	68 70 02 00 00       	push   0x270
c001b52e:	e8 83 c5 fe ff       	call   c0007ab6 <malloc>
c001b533:	89 c5                	mov    ebp,eax
c001b535:	89 04 24             	mov    DWORD PTR [esp],eax
c001b538:	e8 e5 02 00 00       	call   c001b822 <IDE::IDE()>
c001b53d:	5f                   	pop    edi
c001b53e:	58                   	pop    eax
c001b53f:	55                   	push   ebp
c001b540:	53                   	push   ebx
c001b541:	e8 7c 11 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c001b546:	83 ec 1c             	sub    esp,0x1c
c001b549:	b9 09 00 00 00       	mov    ecx,0x9
c001b54e:	fc                   	cld    
c001b54f:	89 e7                	mov    edi,esp
c001b551:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b555:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b557:	55                   	push   ebp
c001b558:	e8 ab 10 ff ff       	call   c000c608 <Device::preOpenPCI(PCIDeviceInfo)>
c001b55d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b560:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b564:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b56c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b574:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b57c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b57f:	83 c4 4c             	add    esp,0x4c
c001b582:	5b                   	pop    ebx
c001b583:	5e                   	pop    esi
c001b584:	5f                   	pop    edi
c001b585:	5d                   	pop    ebp
c001b586:	ff e0                	jmp    eax
c001b588:	83 ec 0c             	sub    esp,0xc
c001b58b:	68 58 01 00 00       	push   0x158
c001b590:	e8 21 c5 fe ff       	call   c0007ab6 <malloc>
c001b595:	89 c5                	mov    ebp,eax
c001b597:	58                   	pop    eax
c001b598:	5a                   	pop    edx
c001b599:	68 aa 2b 02 c0       	push   0xc0022baa
c001b59e:	55                   	push   ebp
c001b59f:	e8 bc 13 ff ff       	call   c000c960 <DriverlessDevice::DriverlessDevice(char const*)>
c001b5a4:	59                   	pop    ecx
c001b5a5:	5e                   	pop    esi
c001b5a6:	55                   	push   ebp
c001b5a7:	53                   	push   ebx
c001b5a8:	e8 15 11 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c001b5ad:	83 c4 10             	add    esp,0x10
c001b5b0:	b9 09 00 00 00       	mov    ecx,0x9
c001b5b5:	fc                   	cld    
c001b5b6:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b5ba:	89 fe                	mov    esi,edi
c001b5bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5be:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b5c2:	83 c4 1c             	add    esp,0x1c
c001b5c5:	5b                   	pop    ebx
c001b5c6:	5e                   	pop    esi
c001b5c7:	5f                   	pop    edi
c001b5c8:	5d                   	pop    ebp
c001b5c9:	e9 3a 10 ff ff       	jmp    c000c608 <Device::preOpenPCI(PCIDeviceInfo)>
c001b5ce:	83 c4 1c             	add    esp,0x1c
c001b5d1:	5b                   	pop    ebx
c001b5d2:	5e                   	pop    esi
c001b5d3:	5f                   	pop    edi
c001b5d4:	5d                   	pop    ebp
c001b5d5:	c3                   	ret    

c001b5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b5d6:	55                   	push   ebp
c001b5d7:	57                   	push   edi
c001b5d8:	56                   	push   esi
c001b5d9:	53                   	push   ebx
c001b5da:	83 ec 68             	sub    esp,0x68
c001b5dd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b5e1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b5e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5ec:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b5f3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b5f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5fc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b603:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b608:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b60c:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b611:	6a 0c                	push   0xc
c001b613:	57                   	push   edi
c001b614:	53                   	push   ebx
c001b615:	56                   	push   esi
c001b616:	55                   	push   ebp
c001b617:	e8 32 f8 ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b61c:	83 c4 20             	add    esp,0x20
c001b61f:	57                   	push   edi
c001b620:	53                   	push   ebx
c001b621:	56                   	push   esi
c001b622:	55                   	push   ebp
c001b623:	e8 1c f9 ff ff       	call   c001af44 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b628:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b62d:	57                   	push   edi
c001b62e:	53                   	push   ebx
c001b62f:	56                   	push   esi
c001b630:	55                   	push   ebp
c001b631:	e8 a4 f9 ff ff       	call   c001afda <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b636:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b63a:	83 c4 14             	add    esp,0x14
c001b63d:	6a 3c                	push   0x3c
c001b63f:	57                   	push   edi
c001b640:	53                   	push   ebx
c001b641:	56                   	push   esi
c001b642:	55                   	push   ebp
c001b643:	e8 06 f8 ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b648:	0f b6 c4             	movzx  eax,ah
c001b64b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b64f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b653:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b657:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b65c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b662:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b668:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b66c:	83 c4 20             	add    esp,0x20
c001b66f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b674:	74 30                	je     c001b6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b676:	31 c0                	xor    eax,eax
c001b678:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b67c:	7e 28                	jle    c001b6a6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b67e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b686:	39 cb                	cmp    ebx,ecx
c001b688:	75 19                	jne    c001b6a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b68a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b692:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b696:	75 0b                	jne    c001b6a3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b698:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b69f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b6a3:	40                   	inc    eax
c001b6a4:	eb d2                	jmp    c001b678 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b6a6:	31 d2                	xor    edx,edx
c001b6a8:	83 ec 0c             	sub    esp,0xc
c001b6ab:	57                   	push   edi
c001b6ac:	53                   	push   ebx
c001b6ad:	56                   	push   esi
c001b6ae:	52                   	push   edx
c001b6af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b6b3:	55                   	push   ebp
c001b6b4:	e8 6d f9 ff ff       	call   c001b026 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b6bd:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b6c1:	42                   	inc    edx
c001b6c2:	83 c4 20             	add    esp,0x20
c001b6c5:	83 fa 06             	cmp    edx,0x6
c001b6c8:	75 de                	jne    c001b6a8 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b6ca:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b6ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6d2:	c1 e2 08             	shl    edx,0x8
c001b6d5:	83 ec 0c             	sub    esp,0xc
c001b6d8:	0f b6 c4             	movzx  eax,ah
c001b6db:	09 d0                	or     eax,edx
c001b6dd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b6e2:	6a 02                	push   0x2
c001b6e4:	57                   	push   edi
c001b6e5:	53                   	push   ebx
c001b6e6:	56                   	push   esi
c001b6e7:	55                   	push   ebp
c001b6e8:	e8 61 f7 ff ff       	call   c001ae4e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b6ed:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b6f2:	83 c4 20             	add    esp,0x20
c001b6f5:	57                   	push   edi
c001b6f6:	53                   	push   ebx
c001b6f7:	56                   	push   esi
c001b6f8:	55                   	push   ebp
c001b6f9:	e8 90 f8 ff ff       	call   c001af8e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b6fe:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b702:	57                   	push   edi
c001b703:	53                   	push   ebx
c001b704:	56                   	push   esi
c001b705:	55                   	push   ebp
c001b706:	e8 ed f7 ff ff       	call   c001aef8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b70b:	b9 09 00 00 00       	mov    ecx,0x9
c001b710:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b715:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b719:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b71d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b721:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b725:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b729:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b72d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b731:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b735:	83 ec 0c             	sub    esp,0xc
c001b738:	fc                   	cld    
c001b739:	89 e7                	mov    edi,esp
c001b73b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b73f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b741:	55                   	push   ebp
c001b742:	e8 15 fd ff ff       	call   c001b45c <PCI::foundDevice(PCIDeviceInfo)>
c001b747:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b74d:	5b                   	pop    ebx
c001b74e:	5e                   	pop    esi
c001b74f:	5f                   	pop    edi
c001b750:	5d                   	pop    ebp
c001b751:	c3                   	ret    

c001b752 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b752:	55                   	push   ebp
c001b753:	57                   	push   edi
c001b754:	56                   	push   esi
c001b755:	53                   	push   ebx
c001b756:	83 ec 0c             	sub    esp,0xc
c001b759:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b75d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b762:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b767:	6a 00                	push   0x0
c001b769:	56                   	push   esi
c001b76a:	57                   	push   edi
c001b76b:	55                   	push   ebp
c001b76c:	e8 87 f7 ff ff       	call   c001aef8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b771:	6a 00                	push   0x0
c001b773:	56                   	push   esi
c001b774:	57                   	push   edi
c001b775:	55                   	push   ebp
c001b776:	e8 5b fe ff ff       	call   c001b5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b77b:	83 c4 20             	add    esp,0x20
c001b77e:	6a 00                	push   0x0
c001b780:	56                   	push   esi
c001b781:	57                   	push   edi
c001b782:	55                   	push   ebp
c001b783:	e8 94 f7 ff ff       	call   c001af1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b788:	83 c4 10             	add    esp,0x10
c001b78b:	a8 80                	test   al,0x80
c001b78d:	74 2d                	je     c001b7bc <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b78f:	bb 01 00 00 00       	mov    ebx,0x1
c001b794:	53                   	push   ebx
c001b795:	56                   	push   esi
c001b796:	57                   	push   edi
c001b797:	55                   	push   ebp
c001b798:	e8 5b f7 ff ff       	call   c001aef8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b79d:	83 c4 10             	add    esp,0x10
c001b7a0:	0f b7 c0             	movzx  eax,ax
c001b7a3:	3d ff ff 00 00       	cmp    eax,0xffff
c001b7a8:	74 0c                	je     c001b7b6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b7aa:	53                   	push   ebx
c001b7ab:	56                   	push   esi
c001b7ac:	57                   	push   edi
c001b7ad:	55                   	push   ebp
c001b7ae:	e8 23 fe ff ff       	call   c001b5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b7b3:	83 c4 10             	add    esp,0x10
c001b7b6:	43                   	inc    ebx
c001b7b7:	83 fb 08             	cmp    ebx,0x8
c001b7ba:	75 d8                	jne    c001b794 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b7bc:	83 c4 0c             	add    esp,0xc
c001b7bf:	5b                   	pop    ebx
c001b7c0:	5e                   	pop    esi
c001b7c1:	5f                   	pop    edi
c001b7c2:	5d                   	pop    ebp
c001b7c3:	c3                   	ret    

c001b7c4 <PCI::detect()>:
c001b7c4:	56                   	push   esi
c001b7c5:	53                   	push   ebx
c001b7c6:	53                   	push   ebx
c001b7c7:	31 db                	xor    ebx,ebx
c001b7c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b7cd:	6a 00                	push   0x0
c001b7cf:	6a 00                	push   0x0
c001b7d1:	6a 00                	push   0x0
c001b7d3:	56                   	push   esi
c001b7d4:	e8 43 f7 ff ff       	call   c001af1c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b7d9:	83 c4 10             	add    esp,0x10
c001b7dc:	a8 80                	test   al,0x80
c001b7de:	75 21                	jne    c001b801 <PCI::detect()+0x3d>
c001b7e0:	51                   	push   ecx
c001b7e1:	51                   	push   ecx
c001b7e2:	6a 00                	push   0x0
c001b7e4:	56                   	push   esi
c001b7e5:	e8 4e fc ff ff       	call   c001b438 <PCI::checkBus(unsigned char)>
c001b7ea:	83 c4 10             	add    esp,0x10
c001b7ed:	eb 2a                	jmp    c001b819 <PCI::detect()+0x55>
c001b7ef:	52                   	push   edx
c001b7f0:	52                   	push   edx
c001b7f1:	53                   	push   ebx
c001b7f2:	43                   	inc    ebx
c001b7f3:	56                   	push   esi
c001b7f4:	e8 3f fc ff ff       	call   c001b438 <PCI::checkBus(unsigned char)>
c001b7f9:	83 c4 10             	add    esp,0x10
c001b7fc:	83 fb 08             	cmp    ebx,0x8
c001b7ff:	74 18                	je     c001b819 <PCI::detect()+0x55>
c001b801:	53                   	push   ebx
c001b802:	6a 00                	push   0x0
c001b804:	6a 00                	push   0x0
c001b806:	56                   	push   esi
c001b807:	e8 ec f6 ff ff       	call   c001aef8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b80c:	83 c4 10             	add    esp,0x10
c001b80f:	0f b7 c0             	movzx  eax,ax
c001b812:	3d ff ff 00 00       	cmp    eax,0xffff
c001b817:	74 d6                	je     c001b7ef <PCI::detect()+0x2b>
c001b819:	58                   	pop    eax
c001b81a:	5b                   	pop    ebx
c001b81b:	5e                   	pop    esi
c001b81c:	c3                   	ret    
c001b81d:	90                   	nop

c001b81e <IDE::close(int, int, void*)>:
c001b81e:	83 c8 ff             	or     eax,0xffffffff
c001b821:	c3                   	ret    

c001b822 <IDE::IDE()>:
c001b822:	83 ec 0c             	sub    esp,0xc
c001b825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b829:	83 ec 08             	sub    esp,0x8
c001b82c:	68 f0 2b 02 c0       	push   0xc0022bf0
c001b831:	50                   	push   eax
c001b832:	e8 cd 11 ff ff       	call   c000ca04 <HardDiskController::HardDiskController(char const*)>
c001b837:	83 c4 10             	add    esp,0x10
c001b83a:	ba 80 2c 02 c0       	mov    edx,0xc0022c80
c001b83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b843:	89 10                	mov    DWORD PTR [eax],edx
c001b845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b849:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b850:	90                   	nop
c001b851:	83 c4 0c             	add    esp,0xc
c001b854:	c3                   	ret    
c001b855:	90                   	nop

c001b856 <IDE::prepareInterrupt(unsigned char)>:
c001b856:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b85b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b85f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b867:	c3                   	ret    

c001b868 <selectDrive(unsigned char, unsigned char)>:
c001b868:	c3                   	ret    
c001b869:	90                   	nop

c001b86a <IDE::getBase(unsigned char)>:
c001b86a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b86f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b873:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b87b:	c3                   	ret    

c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b87c:	55                   	push   ebp
c001b87d:	57                   	push   edi
c001b87e:	56                   	push   esi
c001b87f:	53                   	push   ebx
c001b880:	83 ec 1c             	sub    esp,0x1c
c001b883:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b887:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b88b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b88e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b892:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b896:	80 f9 03             	cmp    cl,0x3
c001b899:	77 4f                	ja     c001b8ea <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b89b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b89f:	0f b6 fa             	movzx  edi,dl
c001b8a2:	0f b6 db             	movzx  ebx,bl
c001b8a5:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b8a8:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b8ad:	80 ca 80             	or     dl,0x80
c001b8b0:	52                   	push   edx
c001b8b1:	6a 0c                	push   0xc
c001b8b3:	57                   	push   edi
c001b8b4:	56                   	push   esi
c001b8b5:	e8 c2 ff ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ba:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b8bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8c3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b8c7:	ee                   	out    dx,al
c001b8c8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b8cd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b8d1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b8d5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b8d9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b8e1:	83 c4 2c             	add    esp,0x2c
c001b8e4:	5b                   	pop    ebx
c001b8e5:	5e                   	pop    esi
c001b8e6:	5f                   	pop    edi
c001b8e7:	5d                   	pop    ebp
c001b8e8:	eb 92                	jmp    c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8ea:	0f b6 cb             	movzx  ecx,bl
c001b8ed:	83 f9 07             	cmp    ecx,0x7
c001b8f0:	77 12                	ja     c001b904 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b8f2:	0f b6 d2             	movzx  edx,dl
c001b8f5:	0f b6 db             	movzx  ebx,bl
c001b8f8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b900:	01 da                	add    edx,ebx
c001b902:	eb 2f                	jmp    c001b933 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b904:	83 f9 0d             	cmp    ecx,0xd
c001b907:	77 13                	ja     c001b91c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b909:	0f b6 d2             	movzx  edx,dl
c001b90c:	0f b6 db             	movzx  ebx,bl
c001b90f:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b916:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b91a:	eb 17                	jmp    c001b933 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b91c:	83 f9 15             	cmp    ecx,0x15
c001b91f:	77 13                	ja     c001b934 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b921:	0f b6 d2             	movzx  edx,dl
c001b924:	0f b6 db             	movzx  ebx,bl
c001b927:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b92f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b933:	ee                   	out    dx,al
c001b934:	83 c4 1c             	add    esp,0x1c
c001b937:	5b                   	pop    ebx
c001b938:	5e                   	pop    esi
c001b939:	5f                   	pop    edi
c001b93a:	5d                   	pop    ebp
c001b93b:	c3                   	ret    

c001b93c <IDE::read(unsigned char, unsigned char)>:
c001b93c:	55                   	push   ebp
c001b93d:	57                   	push   edi
c001b93e:	56                   	push   esi
c001b93f:	53                   	push   ebx
c001b940:	83 ec 1c             	sub    esp,0x1c
c001b943:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b947:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b94b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b94e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b952:	3c 03                	cmp    al,0x3
c001b954:	77 40                	ja     c001b996 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b956:	0f b6 f9             	movzx  edi,cl
c001b959:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b95c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b961:	0c 80                	or     al,0x80
c001b963:	50                   	push   eax
c001b964:	6a 0c                	push   0xc
c001b966:	57                   	push   edi
c001b967:	56                   	push   esi
c001b968:	e8 0f ff ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b96d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b972:	0f b6 d3             	movzx  edx,bl
c001b975:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b979:	ec                   	in     al,dx
c001b97a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b97e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b983:	52                   	push   edx
c001b984:	6a 0c                	push   0xc
c001b986:	57                   	push   edi
c001b987:	56                   	push   esi
c001b988:	e8 ef fe ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b98d:	83 c4 20             	add    esp,0x20
c001b990:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b994:	eb 4c                	jmp    c001b9e2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b996:	0f b6 d3             	movzx  edx,bl
c001b999:	83 fa 07             	cmp    edx,0x7
c001b99c:	77 12                	ja     c001b9b0 <IDE::read(unsigned char, unsigned char)+0x74>
c001b99e:	0f b6 c9             	movzx  ecx,cl
c001b9a1:	0f b6 d3             	movzx  edx,bl
c001b9a4:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b9ac:	01 c2                	add    edx,eax
c001b9ae:	eb 31                	jmp    c001b9e1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b9b0:	83 fa 0d             	cmp    edx,0xd
c001b9b3:	77 13                	ja     c001b9c8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b9b5:	0f b6 c9             	movzx  ecx,cl
c001b9b8:	0f b6 d3             	movzx  edx,bl
c001b9bb:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b9c2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b9c6:	eb 19                	jmp    c001b9e1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b9c8:	31 c0                	xor    eax,eax
c001b9ca:	83 fa 15             	cmp    edx,0x15
c001b9cd:	77 13                	ja     c001b9e2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001b9cf:	0f b6 c9             	movzx  ecx,cl
c001b9d2:	0f b6 d3             	movzx  edx,bl
c001b9d5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b9dd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b9e1:	ec                   	in     al,dx
c001b9e2:	83 c4 1c             	add    esp,0x1c
c001b9e5:	5b                   	pop    ebx
c001b9e6:	5e                   	pop    esi
c001b9e7:	5f                   	pop    edi
c001b9e8:	5d                   	pop    ebp
c001b9e9:	c3                   	ret    

c001b9ea <IDE::waitInterrupt(unsigned char)>:
c001b9ea:	55                   	push   ebp
c001b9eb:	57                   	push   edi
c001b9ec:	56                   	push   esi
c001b9ed:	53                   	push   ebx
c001b9ee:	31 db                	xor    ebx,ebx
c001b9f0:	83 ec 0c             	sub    esp,0xc
c001b9f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b9f7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b9fc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001ba04:	89 e8                	mov    eax,ebp
c001ba06:	84 c0                	test   al,al
c001ba08:	75 30                	jne    c001ba3a <IDE::waitInterrupt(unsigned char)+0x50>
c001ba0a:	50                   	push   eax
c001ba0b:	6a 0c                	push   0xc
c001ba0d:	56                   	push   esi
c001ba0e:	57                   	push   edi
c001ba0f:	e8 28 ff ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001ba14:	83 c4 10             	add    esp,0x10
c001ba17:	a8 01                	test   al,0x1
c001ba19:	75 27                	jne    c001ba42 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba1b:	f6 c3 04             	test   bl,0x4
c001ba1e:	75 12                	jne    c001ba32 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba20:	83 fb 32             	cmp    ebx,0x32
c001ba23:	7e 0d                	jle    c001ba32 <IDE::waitInterrupt(unsigned char)+0x48>
c001ba25:	83 ec 0c             	sub    esp,0xc
c001ba28:	6a 64                	push   0x64
c001ba2a:	e8 b1 a4 ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001ba2f:	83 c4 10             	add    esp,0x10
c001ba32:	83 fb 3c             	cmp    ebx,0x3c
c001ba35:	74 0b                	je     c001ba42 <IDE::waitInterrupt(unsigned char)+0x58>
c001ba37:	43                   	inc    ebx
c001ba38:	eb c2                	jmp    c001b9fc <IDE::waitInterrupt(unsigned char)+0x12>
c001ba3a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001ba42:	83 c4 0c             	add    esp,0xc
c001ba45:	89 e8                	mov    eax,ebp
c001ba47:	5b                   	pop    ebx
c001ba48:	5e                   	pop    esi
c001ba49:	5f                   	pop    edi
c001ba4a:	5d                   	pop    ebp
c001ba4b:	c3                   	ret    

c001ba4c <ideChannel0IRQHandler(regs*, void*)>:
c001ba4c:	83 ec 10             	sub    esp,0x10
c001ba4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba53:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001ba5a:	6a 07                	push   0x7
c001ba5c:	6a 00                	push   0x0
c001ba5e:	50                   	push   eax
c001ba5f:	e8 d8 fe ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001ba64:	83 c4 1c             	add    esp,0x1c
c001ba67:	c3                   	ret    

c001ba68 <ideChannel1IRQHandler(regs*, void*)>:
c001ba68:	83 ec 10             	sub    esp,0x10
c001ba6b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba6f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001ba76:	6a 07                	push   0x7
c001ba78:	6a 01                	push   0x1
c001ba7a:	50                   	push   eax
c001ba7b:	e8 bc fe ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001ba80:	83 c4 1c             	add    esp,0x1c
c001ba83:	c3                   	ret    

c001ba84 <IDE::enableIRQs(unsigned char, bool)>:
c001ba84:	57                   	push   edi
c001ba85:	b8 02 00 00 00       	mov    eax,0x2
c001ba8a:	56                   	push   esi
c001ba8b:	53                   	push   ebx
c001ba8c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba90:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ba94:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba99:	74 02                	je     c001ba9d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ba9b:	31 c0                	xor    eax,eax
c001ba9d:	0f b6 db             	movzx  ebx,bl
c001baa0:	bf 04 00 00 00       	mov    edi,0x4
c001baa5:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001baac:	50                   	push   eax
c001baad:	6a 0c                	push   0xc
c001baaf:	53                   	push   ebx
c001bab0:	56                   	push   esi
c001bab1:	e8 c6 fd ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bab6:	83 c4 10             	add    esp,0x10
c001bab9:	50                   	push   eax
c001baba:	6a 0c                	push   0xc
c001babc:	53                   	push   ebx
c001babd:	56                   	push   esi
c001babe:	e8 79 fe ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001bac3:	83 c4 10             	add    esp,0x10
c001bac6:	4f                   	dec    edi
c001bac7:	75 f0                	jne    c001bab9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bac9:	5b                   	pop    ebx
c001baca:	5e                   	pop    esi
c001bacb:	5f                   	pop    edi
c001bacc:	c3                   	ret    
c001bacd:	90                   	nop

c001bace <IDE::open(int, int, void*)>:
c001bace:	55                   	push   ebp
c001bacf:	57                   	push   edi
c001bad0:	56                   	push   esi
c001bad1:	53                   	push   ebx
c001bad2:	83 ec 1c             	sub    esp,0x1c
c001bad5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bad9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bae2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001baeb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001baf2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001baf9:	0f 85 de 02 00 00    	jne    c001bddd <IDE::open(int, int, void*)+0x30f>
c001baff:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bb05:	88 04 24             	mov    BYTE PTR [esp],al
c001bb08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bb0b:	83 e0 7f             	and    eax,0x7f
c001bb0e:	83 f8 05             	cmp    eax,0x5
c001bb11:	74 05                	je     c001bb18 <IDE::open(int, int, void*)+0x4a>
c001bb13:	83 f8 0f             	cmp    eax,0xf
c001bb16:	75 32                	jne    c001bb4a <IDE::open(int, int, void*)+0x7c>
c001bb18:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bb1e:	83 e0 fc             	and    eax,0xfffffffc
c001bb21:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bb28:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bb2e:	83 e0 fc             	and    eax,0xfffffffc
c001bb31:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bb38:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bb3e:	83 e0 fc             	and    eax,0xfffffffc
c001bb41:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bb48:	eb 14                	jmp    c001bb5e <IDE::open(int, int, void*)+0x90>
c001bb4a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001bb54:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bb5e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001bb65:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001bb6c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bb70:	89 c6                	mov    esi,eax
c001bb72:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb77:	c1 e6 10             	shl    esi,0x10
c001bb7a:	89 e8                	mov    eax,ebp
c001bb7c:	89 fa                	mov    edx,edi
c001bb7e:	c1 e0 0b             	shl    eax,0xb
c001bb81:	09 f0                	or     eax,esi
c001bb83:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bb8a:	c1 e6 08             	shl    esi,0x8
c001bb8d:	09 c6                	or     esi,eax
c001bb8f:	89 f0                	mov    eax,esi
c001bb91:	0d 08 00 00 80       	or     eax,0x80000008
c001bb96:	ef                   	out    dx,eax
c001bb97:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bb9c:	89 ca                	mov    edx,ecx
c001bb9e:	ed                   	in     eax,dx
c001bb9f:	c1 e8 10             	shr    eax,0x10
c001bba2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bba7:	0f 84 f9 00 00 00    	je     c001bca6 <IDE::open(int, int, void*)+0x1d8>
c001bbad:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bbb3:	89 fa                	mov    edx,edi
c001bbb5:	89 f0                	mov    eax,esi
c001bbb7:	ef                   	out    dx,eax
c001bbb8:	b0 fe                	mov    al,0xfe
c001bbba:	89 ca                	mov    edx,ecx
c001bbbc:	ee                   	out    dx,al
c001bbbd:	89 f0                	mov    eax,esi
c001bbbf:	89 fa                	mov    edx,edi
c001bbc1:	ef                   	out    dx,eax
c001bbc2:	89 ca                	mov    edx,ecx
c001bbc4:	ed                   	in     eax,dx
c001bbc5:	3c fe                	cmp    al,0xfe
c001bbc7:	0f 85 a9 00 00 00    	jne    c001bc76 <IDE::open(int, int, void*)+0x1a8>
c001bbcd:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bbd3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bbda:	74 33                	je     c001bc0f <IDE::open(int, int, void*)+0x141>
c001bbdc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bbe2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bbe6:	40                   	inc    eax
c001bbe7:	83 ec 0c             	sub    esp,0xc
c001bbea:	0f b6 c0             	movzx  eax,al
c001bbed:	50                   	push   eax
c001bbee:	55                   	push   ebp
c001bbef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbf3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bbf9:	51                   	push   ecx
c001bbfa:	e8 35 3a ff ff       	call   c000f634 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bbff:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bc04:	83 c4 1c             	add    esp,0x1c
c001bc07:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bc0d:	eb 0a                	jmp    c001bc19 <IDE::open(int, int, void*)+0x14b>
c001bc0f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bc19:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bc20:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bc27:	c1 e1 10             	shl    ecx,0x10
c001bc2a:	c1 e0 08             	shl    eax,0x8
c001bc2d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bc32:	09 c1                	or     ecx,eax
c001bc34:	89 fa                	mov    edx,edi
c001bc36:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bc3d:	c1 e0 0b             	shl    eax,0xb
c001bc40:	09 c1                	or     ecx,eax
c001bc42:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bc48:	89 c8                	mov    eax,ecx
c001bc4a:	ef                   	out    dx,eax
c001bc4b:	be fc 0c 00 00       	mov    esi,0xcfc
c001bc50:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bc56:	89 f2                	mov    edx,esi
c001bc58:	ee                   	out    dx,al
c001bc59:	89 c8                	mov    eax,ecx
c001bc5b:	89 fa                	mov    edx,edi
c001bc5d:	ef                   	out    dx,eax
c001bc5e:	89 f2                	mov    edx,esi
c001bc60:	ed                   	in     eax,dx
c001bc61:	0f b6 c0             	movzx  eax,al
c001bc64:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bc6a:	74 4a                	je     c001bcb6 <IDE::open(int, int, void*)+0x1e8>
c001bc6c:	83 ec 0c             	sub    esp,0xc
c001bc6f:	68 08 2c 02 c0       	push   0xc0022c08
c001bc74:	eb 38                	jmp    c001bcae <IDE::open(int, int, void*)+0x1e0>
c001bc76:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc7f:	75 1b                	jne    c001bc9c <IDE::open(int, int, void*)+0x1ce>
c001bc81:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bc85:	3d 80 00 00 00       	cmp    eax,0x80
c001bc8a:	74 07                	je     c001bc93 <IDE::open(int, int, void*)+0x1c5>
c001bc8c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bc91:	75 09                	jne    c001bc9c <IDE::open(int, int, void*)+0x1ce>
c001bc93:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc9a:	eb 1a                	jmp    c001bcb6 <IDE::open(int, int, void*)+0x1e8>
c001bc9c:	83 ec 0c             	sub    esp,0xc
c001bc9f:	68 10 2c 02 c0       	push   0xc0022c10
c001bca4:	eb 08                	jmp    c001bcae <IDE::open(int, int, void*)+0x1e0>
c001bca6:	83 ec 0c             	sub    esp,0xc
c001bca9:	68 41 2c 02 c0       	push   0xc0022c41
c001bcae:	e8 3e 56 ff ff       	call   c00112f1 <KePanic(char const*)>
c001bcb3:	83 c4 10             	add    esp,0x10
c001bcb6:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bcbd:	74 1a                	je     c001bcd9 <IDE::open(int, int, void*)+0x20b>
c001bcbf:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bcc5:	83 e0 fc             	and    eax,0xfffffffc
c001bcc8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bccf:	83 c0 08             	add    eax,0x8
c001bcd2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bcd9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bcdf:	89 c2                	mov    edx,eax
c001bce1:	83 e2 0f             	and    edx,0xf
c001bce4:	83 fa 08             	cmp    edx,0x8
c001bce7:	75 0a                	jne    c001bcf3 <IDE::open(int, int, void*)+0x225>
c001bce9:	83 e8 02             	sub    eax,0x2
c001bcec:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcf3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bcf9:	89 c2                	mov    edx,eax
c001bcfb:	83 e2 0f             	and    edx,0xf
c001bcfe:	83 fa 08             	cmp    edx,0x8
c001bd01:	75 0a                	jne    c001bd0d <IDE::open(int, int, void*)+0x23f>
c001bd03:	83 e8 02             	sub    eax,0x2
c001bd06:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd0d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bd14:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bd1b:	89 d0                	mov    eax,edx
c001bd1d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd20:	8d 7a 01             	lea    edi,[edx+0x1]
c001bd23:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd27:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bd2b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd2f:	83 e1 3f             	and    ecx,0x3f
c001bd32:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd36:	89 f9                	mov    ecx,edi
c001bd38:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bd3f:	0f b6 c9             	movzx  ecx,cl
c001bd42:	8d 78 02             	lea    edi,[eax+0x2]
c001bd45:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd48:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd4c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bd50:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd54:	83 e2 3f             	and    edx,0x3f
c001bd57:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd5b:	89 f9                	mov    ecx,edi
c001bd5d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bd63:	0f b6 d1             	movzx  edx,cl
c001bd66:	8d 78 03             	lea    edi,[eax+0x3]
c001bd69:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd6c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd70:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bd74:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd78:	83 e1 3f             	and    ecx,0x3f
c001bd7b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd7f:	89 f9                	mov    ecx,edi
c001bd81:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd87:	0f b6 c9             	movzx  ecx,cl
c001bd8a:	8d 78 04             	lea    edi,[eax+0x4]
c001bd8d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd90:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd94:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd98:	89 fa                	mov    edx,edi
c001bd9a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bda0:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bda4:	83 e2 3f             	and    edx,0x3f
c001bda7:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bdab:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bdb2:	66 85 f6             	test   si,si
c001bdb5:	74 65                	je     c001be1c <IDE::open(int, int, void*)+0x34e>
c001bdb7:	89 f9                	mov    ecx,edi
c001bdb9:	83 c0 05             	add    eax,0x5
c001bdbc:	0f b6 d1             	movzx  edx,cl
c001bdbf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bdc2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bdc6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bdca:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bdd0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bdd4:	83 e0 3f             	and    eax,0x3f
c001bdd7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bddb:	eb 3f                	jmp    c001be1c <IDE::open(int, int, void*)+0x34e>
c001bddd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bde3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bdea:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bdf1:	05 06 02 00 00       	add    eax,0x206
c001bdf6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bdfd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001be04:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be0b:	05 06 02 00 00       	add    eax,0x206
c001be10:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001be17:	e9 bd fe ff ff       	jmp    c001bcd9 <IDE::open(int, int, void*)+0x20b>
c001be1c:	50                   	push   eax
c001be1d:	50                   	push   eax
c001be1e:	6a 00                	push   0x0
c001be20:	53                   	push   ebx
c001be21:	e8 30 fa ff ff       	call   c001b856 <IDE::prepareInterrupt(unsigned char)>
c001be26:	5a                   	pop    edx
c001be27:	59                   	pop    ecx
c001be28:	6a 01                	push   0x1
c001be2a:	53                   	push   ebx
c001be2b:	e8 26 fa ff ff       	call   c001b856 <IDE::prepareInterrupt(unsigned char)>
c001be30:	83 c4 0c             	add    esp,0xc
c001be33:	6a 00                	push   0x0
c001be35:	6a 00                	push   0x0
c001be37:	53                   	push   ebx
c001be38:	e8 47 fc ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001be3d:	83 c4 0c             	add    esp,0xc
c001be40:	6a 00                	push   0x0
c001be42:	6a 01                	push   0x1
c001be44:	53                   	push   ebx
c001be45:	e8 3a fc ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001be4a:	83 c4 10             	add    esp,0x10
c001be4d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001be54:	74 34                	je     c001be8a <IDE::open(int, int, void*)+0x3bc>
c001be56:	83 ec 0c             	sub    esp,0xc
c001be59:	53                   	push   ebx
c001be5a:	6a 01                	push   0x1
c001be5c:	68 4c ba 01 c0       	push   0xc001ba4c
c001be61:	6a 0e                	push   0xe
c001be63:	53                   	push   ebx
c001be64:	e8 05 08 ff ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be69:	83 c4 14             	add    esp,0x14
c001be6c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001be72:	53                   	push   ebx
c001be73:	6a 01                	push   0x1
c001be75:	68 68 ba 01 c0       	push   0xc001ba68
c001be7a:	6a 0f                	push   0xf
c001be7c:	53                   	push   ebx
c001be7d:	e8 ec 07 ff ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be82:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be88:	eb 38                	jmp    c001bec2 <IDE::open(int, int, void*)+0x3f4>
c001be8a:	83 ec 0c             	sub    esp,0xc
c001be8d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be97:	53                   	push   ebx
c001be98:	6a 00                	push   0x0
c001be9a:	68 4c ba 01 c0       	push   0xc001ba4c
c001be9f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bea5:	53                   	push   ebx
c001bea6:	e8 c3 07 ff ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001beab:	83 c4 14             	add    esp,0x14
c001beae:	53                   	push   ebx
c001beaf:	6a 00                	push   0x0
c001beb1:	68 68 ba 01 c0       	push   0xc001ba68
c001beb6:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bebc:	53                   	push   ebx
c001bebd:	e8 ac 07 ff ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bec2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bec4:	83 c4 20             	add    esp,0x20
c001bec7:	83 ec 0c             	sub    esp,0xc
c001beca:	53                   	push   ebx
c001becb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bece:	83 c4 0c             	add    esp,0xc
c001bed1:	6a 07                	push   0x7
c001bed3:	6a 00                	push   0x0
c001bed5:	53                   	push   ebx
c001bed6:	e8 61 fa ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001bedb:	83 c4 0c             	add    esp,0xc
c001bede:	6a 07                	push   0x7
c001bee0:	6a 01                	push   0x1
c001bee2:	53                   	push   ebx
c001bee3:	e8 54 fa ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001bee8:	83 c4 0c             	add    esp,0xc
c001beeb:	6a 01                	push   0x1
c001beed:	6a 00                	push   0x0
c001beef:	53                   	push   ebx
c001bef0:	e8 8f fb ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001bef5:	83 c4 0c             	add    esp,0xc
c001bef8:	6a 01                	push   0x1
c001befa:	6a 01                	push   0x1
c001befc:	53                   	push   ebx
c001befd:	e8 82 fb ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001bf02:	83 c4 2c             	add    esp,0x2c
c001bf05:	31 c0                	xor    eax,eax
c001bf07:	5b                   	pop    ebx
c001bf08:	5e                   	pop    esi
c001bf09:	5f                   	pop    edi
c001bf0a:	5d                   	pop    ebp
c001bf0b:	c3                   	ret    

c001bf0c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bf0c:	55                   	push   ebp
c001bf0d:	57                   	push   edi
c001bf0e:	56                   	push   esi
c001bf0f:	53                   	push   ebx
c001bf10:	83 ec 1c             	sub    esp,0x1c
c001bf13:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001bf17:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bf1b:	8d 42 f8             	lea    eax,[edx-0x8]
c001bf1e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bf22:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bf26:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bf2a:	3c 03                	cmp    al,0x3
c001bf2c:	77 5a                	ja     c001bf88 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001bf2e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bf32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bf36:	0f b6 db             	movzx  ebx,bl
c001bf39:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bf3c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf41:	0c 80                	or     al,0x80
c001bf43:	50                   	push   eax
c001bf44:	6a 0c                	push   0xc
c001bf46:	53                   	push   ebx
c001bf47:	56                   	push   esi
c001bf48:	e8 2f f9 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf4d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001bf52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bf56:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bf5a:	0f b6 d2             	movzx  edx,dl
c001bf5d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bf61:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf63:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bf68:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bf6c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bf70:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bf74:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf7c:	83 c4 2c             	add    esp,0x2c
c001bf7f:	5b                   	pop    ebx
c001bf80:	5e                   	pop    esi
c001bf81:	5f                   	pop    edi
c001bf82:	5d                   	pop    ebp
c001bf83:	e9 f4 f8 ff ff       	jmp    c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf88:	0f b6 c2             	movzx  eax,dl
c001bf8b:	83 f8 07             	cmp    eax,0x7
c001bf8e:	77 12                	ja     c001bfa2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bf90:	0f b6 c2             	movzx  eax,dl
c001bf93:	0f b6 db             	movzx  ebx,bl
c001bf96:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf9e:	01 c2                	add    edx,eax
c001bfa0:	eb 2f                	jmp    c001bfd1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bfa2:	83 f8 0d             	cmp    eax,0xd
c001bfa5:	77 13                	ja     c001bfba <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bfa7:	0f b6 db             	movzx  ebx,bl
c001bfaa:	0f b6 d2             	movzx  edx,dl
c001bfad:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bfb4:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bfb8:	eb 17                	jmp    c001bfd1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bfba:	83 f8 15             	cmp    eax,0x15
c001bfbd:	77 14                	ja     c001bfd3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bfbf:	0f b6 db             	movzx  ebx,bl
c001bfc2:	0f b6 d2             	movzx  edx,dl
c001bfc5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bfcd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bfd1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bfd3:	83 c4 1c             	add    esp,0x1c
c001bfd6:	5b                   	pop    ebx
c001bfd7:	5e                   	pop    esi
c001bfd8:	5f                   	pop    edi
c001bfd9:	5d                   	pop    ebp
c001bfda:	c3                   	ret    
c001bfdb:	90                   	nop

c001bfdc <IDE::detect()>:
c001bfdc:	55                   	push   ebp
c001bfdd:	57                   	push   edi
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bfe6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bfed:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bff4:	0f 85 a4 02 00 00    	jne    c001c29e <IDE::detect()+0x2c2>
c001bffa:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c001:	31 f6                	xor    esi,esi
c001c003:	31 ed                	xor    ebp,ebp
c001c005:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c00d:	89 e8                	mov    eax,ebp
c001c00f:	c1 e0 06             	shl    eax,0x6
c001c012:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c01a:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c01e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c022:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c026:	c1 e0 04             	shl    eax,0x4
c001c029:	83 c8 a0             	or     eax,0xffffffa0
c001c02c:	0f b6 c0             	movzx  eax,al
c001c02f:	50                   	push   eax
c001c030:	6a 06                	push   0x6
c001c032:	56                   	push   esi
c001c033:	53                   	push   ebx
c001c034:	e8 43 f8 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c039:	83 c4 0c             	add    esp,0xc
c001c03c:	6a 0c                	push   0xc
c001c03e:	56                   	push   esi
c001c03f:	53                   	push   ebx
c001c040:	e8 f7 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c045:	83 c4 0c             	add    esp,0xc
c001c048:	6a 0c                	push   0xc
c001c04a:	56                   	push   esi
c001c04b:	53                   	push   ebx
c001c04c:	e8 eb f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c051:	83 c4 0c             	add    esp,0xc
c001c054:	6a 0c                	push   0xc
c001c056:	56                   	push   esi
c001c057:	53                   	push   ebx
c001c058:	e8 df f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c05d:	83 c4 0c             	add    esp,0xc
c001c060:	6a 0c                	push   0xc
c001c062:	56                   	push   esi
c001c063:	53                   	push   ebx
c001c064:	e8 d3 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c069:	68 ec 00 00 00       	push   0xec
c001c06e:	6a 07                	push   0x7
c001c070:	56                   	push   esi
c001c071:	53                   	push   ebx
c001c072:	e8 05 f8 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c077:	83 c4 1c             	add    esp,0x1c
c001c07a:	6a 0c                	push   0xc
c001c07c:	56                   	push   esi
c001c07d:	53                   	push   ebx
c001c07e:	e8 b9 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c083:	83 c4 0c             	add    esp,0xc
c001c086:	6a 0c                	push   0xc
c001c088:	56                   	push   esi
c001c089:	53                   	push   ebx
c001c08a:	e8 ad f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c08f:	83 c4 0c             	add    esp,0xc
c001c092:	6a 0c                	push   0xc
c001c094:	56                   	push   esi
c001c095:	53                   	push   ebx
c001c096:	e8 a1 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c09b:	83 c4 0c             	add    esp,0xc
c001c09e:	6a 0c                	push   0xc
c001c0a0:	56                   	push   esi
c001c0a1:	53                   	push   ebx
c001c0a2:	e8 95 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c0a7:	83 c4 0c             	add    esp,0xc
c001c0aa:	6a 0c                	push   0xc
c001c0ac:	56                   	push   esi
c001c0ad:	53                   	push   ebx
c001c0ae:	e8 89 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	84 c0                	test   al,al
c001c0b8:	0f 84 60 01 00 00    	je     c001c21e <IDE::detect()+0x242>
c001c0be:	31 ff                	xor    edi,edi
c001c0c0:	50                   	push   eax
c001c0c1:	6a 0c                	push   0xc
c001c0c3:	56                   	push   esi
c001c0c4:	53                   	push   ebx
c001c0c5:	e8 72 f8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c0ca:	83 c4 10             	add    esp,0x10
c001c0cd:	a8 01                	test   al,0x1
c001c0cf:	0f 85 6a 01 00 00    	jne    c001c23f <IDE::detect()+0x263>
c001c0d5:	a8 80                	test   al,0x80
c001c0d7:	75 04                	jne    c001c0dd <IDE::detect()+0x101>
c001c0d9:	a8 08                	test   al,0x8
c001c0db:	75 23                	jne    c001c100 <IDE::detect()+0x124>
c001c0dd:	47                   	inc    edi
c001c0de:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c0e4:	7e da                	jle    c001c0c0 <IDE::detect()+0xe4>
c001c0e6:	83 ec 0c             	sub    esp,0xc
c001c0e9:	6a 32                	push   0x32
c001c0eb:	e8 f0 9d ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001c0f0:	83 c4 10             	add    esp,0x10
c001c0f3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c0f9:	75 c5                	jne    c001c0c0 <IDE::detect()+0xe4>
c001c0fb:	e9 3f 01 00 00       	jmp    c001c23f <IDE::detect()+0x263>
c001c100:	31 c9                	xor    ecx,ecx
c001c102:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c106:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c10a:	83 ec 0c             	sub    esp,0xc
c001c10d:	68 80 00 00 00       	push   0x80
c001c112:	57                   	push   edi
c001c113:	6a 00                	push   0x0
c001c115:	56                   	push   esi
c001c116:	53                   	push   ebx
c001c117:	e8 f0 fd ff ff       	call   c001bf0c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c11c:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c121:	89 e8                	mov    eax,ebp
c001c123:	89 d1                	mov    ecx,edx
c001c125:	c1 e0 06             	shl    eax,0x6
c001c128:	01 d8                	add    eax,ebx
c001c12a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c131:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c138:	89 f2                	mov    edx,esi
c001c13a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c140:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c144:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c14a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c14e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c155:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c15d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c164:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c16c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c172:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c179:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c17f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c183:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c187:	83 c4 20             	add    esp,0x20
c001c18a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c18d:	83 c0 02             	add    eax,0x2
c001c190:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c196:	83 c7 02             	add    edi,0x2
c001c199:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c19c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c1a2:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c1a6:	75 e2                	jne    c001c18a <IDE::detect()+0x1ae>
c001c1a8:	89 e8                	mov    eax,ebp
c001c1aa:	c1 e0 06             	shl    eax,0x6
c001c1ad:	01 d8                	add    eax,ebx
c001c1af:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c1b6:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c1bd:	c1 ea 09             	shr    edx,0x9
c001c1c0:	83 e2 01             	and    edx,0x1
c001c1c3:	80 e1 01             	and    cl,0x1
c001c1c6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c1cc:	75 22                	jne    c001c1f0 <IDE::detect()+0x214>
c001c1ce:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c1d5:	74 46                	je     c001c21d <IDE::detect()+0x241>
c001c1d7:	83 ec 0c             	sub    esp,0xc
c001c1da:	68 7c 01 00 00       	push   0x17c
c001c1df:	e8 d2 b8 fe ff       	call   c0007ab6 <malloc>
c001c1e4:	89 c7                	mov    edi,eax
c001c1e6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c1e9:	e8 1a 05 00 00       	call   c001c708 <ATA::ATA()>
c001c1ee:	eb 17                	jmp    c001c207 <IDE::detect()+0x22b>
c001c1f0:	83 ec 0c             	sub    esp,0xc
c001c1f3:	68 84 01 00 00       	push   0x184
c001c1f8:	e8 b9 b8 fe ff       	call   c0007ab6 <malloc>
c001c1fd:	89 c7                	mov    edi,eax
c001c1ff:	89 04 24             	mov    DWORD PTR [esp],eax
c001c202:	e8 45 0e 00 00       	call   c001d04c <ATAPI::ATAPI()>
c001c207:	5a                   	pop    edx
c001c208:	59                   	pop    ecx
c001c209:	57                   	push   edi
c001c20a:	53                   	push   ebx
c001c20b:	e8 b2 04 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c001c210:	8b 07                	mov    eax,DWORD PTR [edi]
c001c212:	53                   	push   ebx
c001c213:	55                   	push   ebp
c001c214:	6a 00                	push   0x0
c001c216:	57                   	push   edi
c001c217:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c21a:	83 c4 20             	add    esp,0x20
c001c21d:	45                   	inc    ebp
c001c21e:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c223:	74 0d                	je     c001c232 <IDE::detect()+0x256>
c001c225:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c22d:	e9 db fd ff ff       	jmp    c001c00d <IDE::detect()+0x31>
c001c232:	4e                   	dec    esi
c001c233:	74 69                	je     c001c29e <IDE::detect()+0x2c2>
c001c235:	be 01 00 00 00       	mov    esi,0x1
c001c23a:	e9 c6 fd ff ff       	jmp    c001c005 <IDE::detect()+0x29>
c001c23f:	50                   	push   eax
c001c240:	6a 04                	push   0x4
c001c242:	56                   	push   esi
c001c243:	53                   	push   ebx
c001c244:	e8 f3 f6 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c249:	83 c4 0c             	add    esp,0xc
c001c24c:	89 c7                	mov    edi,eax
c001c24e:	6a 05                	push   0x5
c001c250:	56                   	push   esi
c001c251:	53                   	push   ebx
c001c252:	e8 e5 f6 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c257:	83 c4 10             	add    esp,0x10
c001c25a:	89 f9                	mov    ecx,edi
c001c25c:	0f b6 c0             	movzx  eax,al
c001c25f:	0f b6 f9             	movzx  edi,cl
c001c262:	83 ff 14             	cmp    edi,0x14
c001c265:	75 07                	jne    c001c26e <IDE::detect()+0x292>
c001c267:	3d eb 00 00 00       	cmp    eax,0xeb
c001c26c:	eb 0a                	jmp    c001c278 <IDE::detect()+0x29c>
c001c26e:	3d 96 00 00 00       	cmp    eax,0x96
c001c273:	75 a9                	jne    c001c21e <IDE::detect()+0x242>
c001c275:	83 ff 69             	cmp    edi,0x69
c001c278:	75 a4                	jne    c001c21e <IDE::detect()+0x242>
c001c27a:	68 a1 00 00 00       	push   0xa1
c001c27f:	6a 07                	push   0x7
c001c281:	56                   	push   esi
c001c282:	53                   	push   ebx
c001c283:	e8 f4 f5 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c288:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c28f:	e8 4c 9c ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001c294:	83 c4 10             	add    esp,0x10
c001c297:	b1 01                	mov    cl,0x1
c001c299:	e9 64 fe ff ff       	jmp    c001c102 <IDE::detect()+0x126>
c001c29e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c2a4:	5b                   	pop    ebx
c001c2a5:	5e                   	pop    esi
c001c2a6:	5f                   	pop    edi
c001c2a7:	5d                   	pop    ebp
c001c2a8:	c3                   	ret    
c001c2a9:	90                   	nop

c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c2aa:	55                   	push   ebp
c001c2ab:	57                   	push   edi
c001c2ac:	56                   	push   esi
c001c2ad:	53                   	push   ebx
c001c2ae:	83 ec 1c             	sub    esp,0x1c
c001c2b1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c2b5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c2b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c2bd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c2c1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c2c5:	88 c3                	mov    bl,al
c001c2c7:	25 ff 00 00 00       	and    eax,0xff
c001c2cc:	0f 84 88 00 00 00    	je     c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2d2:	83 ec 0c             	sub    esp,0xc
c001c2d5:	89 c7                	mov    edi,eax
c001c2d7:	68 6b 2c 02 c0       	push   0xc0022c6b
c001c2dc:	e8 64 e6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c2e1:	83 c4 10             	add    esp,0x10
c001c2e4:	83 ff 01             	cmp    edi,0x1
c001c2e7:	74 6b                	je     c001c354 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c2e9:	83 ff 02             	cmp    edi,0x2
c001c2ec:	75 58                	jne    c001c346 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c2ee:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c2f3:	01 ff                	add    edi,edi
c001c2f5:	50                   	push   eax
c001c2f6:	09 fe                	or     esi,edi
c001c2f8:	6a 01                	push   0x1
c001c2fa:	89 f0                	mov    eax,esi
c001c2fc:	0f b6 f0             	movzx  esi,al
c001c2ff:	c1 e6 06             	shl    esi,0x6
c001c302:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c30a:	50                   	push   eax
c001c30b:	55                   	push   ebp
c001c30c:	e8 2b f6 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	a8 01                	test   al,0x1
c001c316:	74 02                	je     c001c31a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c318:	b3 07                	mov    bl,0x7
c001c31a:	a8 02                	test   al,0x2
c001c31c:	74 02                	je     c001c320 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c31e:	b3 03                	mov    bl,0x3
c001c320:	a8 04                	test   al,0x4
c001c322:	74 02                	je     c001c326 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c324:	b3 14                	mov    bl,0x14
c001c326:	a8 08                	test   al,0x8
c001c328:	74 02                	je     c001c32c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c32a:	b3 03                	mov    bl,0x3
c001c32c:	a8 10                	test   al,0x10
c001c32e:	74 02                	je     c001c332 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c330:	b3 15                	mov    bl,0x15
c001c332:	a8 20                	test   al,0x20
c001c334:	74 02                	je     c001c338 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c336:	b3 03                	mov    bl,0x3
c001c338:	a8 40                	test   al,0x40
c001c33a:	74 02                	je     c001c33e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c33c:	b3 16                	mov    bl,0x16
c001c33e:	a8 80                	test   al,0x80
c001c340:	74 18                	je     c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c342:	b3 0d                	mov    bl,0xd
c001c344:	eb 14                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c346:	83 ff 03             	cmp    edi,0x3
c001c349:	74 0d                	je     c001c358 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c34b:	83 ff 04             	cmp    edi,0x4
c001c34e:	75 0a                	jne    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c350:	b3 08                	mov    bl,0x8
c001c352:	eb 06                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c354:	b3 13                	mov    bl,0x13
c001c356:	eb 02                	jmp    c001c35a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c358:	b3 17                	mov    bl,0x17
c001c35a:	83 c4 1c             	add    esp,0x1c
c001c35d:	88 d8                	mov    al,bl
c001c35f:	5b                   	pop    ebx
c001c360:	5e                   	pop    esi
c001c361:	5f                   	pop    edi
c001c362:	5d                   	pop    ebp
c001c363:	c3                   	ret    

c001c364 <IDE::polling(unsigned char, unsigned int)>:
c001c364:	57                   	push   edi
c001c365:	56                   	push   esi
c001c366:	53                   	push   ebx
c001c367:	bb 04 00 00 00       	mov    ebx,0x4
c001c36c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c370:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c375:	52                   	push   edx
c001c376:	6a 0c                	push   0xc
c001c378:	56                   	push   esi
c001c379:	57                   	push   edi
c001c37a:	e8 bd f5 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c37f:	83 c4 10             	add    esp,0x10
c001c382:	4b                   	dec    ebx
c001c383:	75 f0                	jne    c001c375 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c385:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c38a:	50                   	push   eax
c001c38b:	6a 0c                	push   0xc
c001c38d:	56                   	push   esi
c001c38e:	57                   	push   edi
c001c38f:	e8 a8 f5 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c394:	83 c4 10             	add    esp,0x10
c001c397:	a8 01                	test   al,0x1
c001c399:	75 17                	jne    c001c3b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c39b:	a8 20                	test   al,0x20
c001c39d:	75 0f                	jne    c001c3ae <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c39f:	4b                   	dec    ebx
c001c3a0:	74 10                	je     c001c3b2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c3a2:	a8 80                	test   al,0x80
c001c3a4:	75 e4                	jne    c001c38a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3a6:	a8 08                	test   al,0x8
c001c3a8:	74 e0                	je     c001c38a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c3aa:	31 c0                	xor    eax,eax
c001c3ac:	eb 06                	jmp    c001c3b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c3ae:	b0 01                	mov    al,0x1
c001c3b0:	eb 02                	jmp    c001c3b4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c3b2:	b0 02                	mov    al,0x2
c001c3b4:	5b                   	pop    ebx
c001c3b5:	5e                   	pop    esi
c001c3b6:	5f                   	pop    edi
c001c3b7:	c3                   	ret    

c001c3b8 <SATABus::close(int, int, void*)>:
c001c3b8:	31 c0                	xor    eax,eax
c001c3ba:	c3                   	ret    
c001c3bb:	90                   	nop

c001c3bc <SATABus::detect()>:
c001c3bc:	c3                   	ret    
c001c3bd:	90                   	nop

c001c3be <SATABus::SATABus()>:
c001c3be:	83 ec 0c             	sub    esp,0xc
c001c3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c5:	83 ec 08             	sub    esp,0x8
c001c3c8:	68 a4 2c 02 c0       	push   0xc0022ca4
c001c3cd:	50                   	push   eax
c001c3ce:	e8 31 06 ff ff       	call   c000ca04 <HardDiskController::HardDiskController(char const*)>
c001c3d3:	83 c4 10             	add    esp,0x10
c001c3d6:	ba d0 2c 02 c0       	mov    edx,0xc0022cd0
c001c3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3df:	89 10                	mov    DWORD PTR [eax],edx
c001c3e1:	83 ec 0c             	sub    esp,0xc
c001c3e4:	6a 50                	push   0x50
c001c3e6:	e8 a3 ba fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c3eb:	83 c4 10             	add    esp,0x10
c001c3ee:	89 c2                	mov    edx,eax
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c3fa:	83 ec 0c             	sub    esp,0xc
c001c3fd:	6a 50                	push   0x50
c001c3ff:	e8 09 d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c404:	83 c4 10             	add    esp,0x10
c001c407:	89 c2                	mov    edx,eax
c001c409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c40d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c413:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c418:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c41c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c422:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c426:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	6a 03                	push   0x3
c001c431:	6a 50                	push   0x50
c001c433:	51                   	push   ecx
c001c434:	52                   	push   edx
c001c435:	50                   	push   eax
c001c436:	e8 df da fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c43b:	83 c4 20             	add    esp,0x20
c001c43e:	90                   	nop
c001c43f:	83 c4 0c             	add    esp,0xc
c001c442:	c3                   	ret    
c001c443:	90                   	nop

c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c448:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c44b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c44e:	09 c2                	or     edx,eax
c001c450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c454:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c45a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c45c:	31 c0                	xor    eax,eax
c001c45e:	c1 e9 08             	shr    ecx,0x8
c001c461:	83 e1 0f             	and    ecx,0xf
c001c464:	39 c8                	cmp    eax,ecx
c001c466:	74 0a                	je     c001c472 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c468:	f6 c2 01             	test   dl,0x1
c001c46b:	74 08                	je     c001c475 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c46d:	d1 ea                	shr    edx,1
c001c46f:	40                   	inc    eax
c001c470:	eb f2                	jmp    c001c464 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c472:	83 c8 ff             	or     eax,0xffffffff
c001c475:	c3                   	ret    

c001c476 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c476:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c47a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c47d:	89 c2                	mov    edx,eax
c001c47f:	c1 ea 08             	shr    edx,0x8
c001c482:	83 e2 0f             	and    edx,0xf
c001c485:	4a                   	dec    edx
c001c486:	75 32                	jne    c001c4ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c488:	83 e0 0f             	and    eax,0xf
c001c48b:	83 f8 03             	cmp    eax,0x3
c001c48e:	75 2a                	jne    c001c4ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c490:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c493:	b8 02 00 00 00       	mov    eax,0x2
c001c498:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c49e:	74 1c                	je     c001c4bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4a0:	b8 04 00 00 00       	mov    eax,0x4
c001c4a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c4ab:	74 0f                	je     c001c4bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c4ad:	31 c0                	xor    eax,eax
c001c4af:	83 fa 03             	cmp    edx,0x3
c001c4b2:	0f 94 c0             	sete   al
c001c4b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c4b9:	c3                   	ret    
c001c4ba:	31 c0                	xor    eax,eax
c001c4bc:	c3                   	ret    
c001c4bd:	90                   	nop

c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c4be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4c5:	0f ba e2 0f          	bt     edx,0xf
c001c4c9:	72 f7                	jb     c001c4c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c4cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4ce:	83 ca 10             	or     edx,0x10
c001c4d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4d7:	83 ca 01             	or     edx,0x1
c001c4da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4dd:	c3                   	ret    

c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c4de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c4e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4e5:	83 e2 fe             	and    edx,0xfffffffe
c001c4e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4ee:	83 e2 ef             	and    edx,0xffffffef
c001c4f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c4f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c4f7:	0f ba e2 0e          	bt     edx,0xe
c001c4fb:	72 f7                	jb     c001c4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c4fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c500:	0f ba e2 0f          	bt     edx,0xf
c001c504:	72 ee                	jb     c001c4f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c506:	c3                   	ret    
c001c507:	90                   	nop

c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c508:	55                   	push   ebp
c001c509:	57                   	push   edi
c001c50a:	56                   	push   esi
c001c50b:	53                   	push   ebx
c001c50c:	83 ec 1c             	sub    esp,0x1c
c001c50f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c513:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c517:	53                   	push   ebx
c001c518:	56                   	push   esi
c001c519:	e8 c0 ff ff ff       	call   c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c51e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c522:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c528:	83 ec 0c             	sub    esp,0xc
c001c52b:	c1 e5 0a             	shl    ebp,0xa
c001c52e:	01 e8                	add    eax,ebp
c001c530:	89 03                	mov    DWORD PTR [ebx],eax
c001c532:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c534:	68 00 04 00 00       	push   0x400
c001c539:	6a 00                	push   0x0
c001c53b:	50                   	push   eax
c001c53c:	e8 af 3f fe ff       	call   c00004f0 <memset>
c001c541:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c547:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c54b:	01 e8                	add    eax,ebp
c001c54d:	83 c4 1c             	add    esp,0x1c
c001c550:	89 03                	mov    DWORD PTR [ebx],eax
c001c552:	c1 e2 08             	shl    edx,0x8
c001c555:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c55c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c562:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c568:	01 f8                	add    eax,edi
c001c56a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c56d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c570:	68 00 01 00 00       	push   0x100
c001c575:	6a 00                	push   0x0
c001c577:	50                   	push   eax
c001c578:	e8 73 3f fe ff       	call   c00004f0 <memset>
c001c57d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c583:	01 fa                	add    edx,edi
c001c585:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c589:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c58c:	c1 e7 0d             	shl    edi,0xd
c001c58f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c596:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c59c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c5a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c5a6:	31 ff                	xor    edi,edi
c001c5a8:	83 c4 10             	add    esp,0x10
c001c5ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c5b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c5bb:	83 c5 20             	add    ebp,0x20
c001c5be:	01 f8                	add    eax,edi
c001c5c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c5c3:	52                   	push   edx
c001c5c4:	68 00 01 00 00       	push   0x100
c001c5c9:	6a 00                	push   0x0
c001c5cb:	50                   	push   eax
c001c5cc:	e8 1f 3f fe ff       	call   c00004f0 <memset>
c001c5d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5d5:	83 c4 10             	add    esp,0x10
c001c5d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c5de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c5e5:	01 f8                	add    eax,edi
c001c5e7:	81 c7 00 01 00 00    	add    edi,0x100
c001c5ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c5f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c5f6:	75 b3                	jne    c001c5ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c5f8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c5ff:	50                   	push   eax
c001c600:	50                   	push   eax
c001c601:	53                   	push   ebx
c001c602:	56                   	push   esi
c001c603:	e8 b6 fe ff ff       	call   c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c608:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c60f:	83 c4 2c             	add    esp,0x2c
c001c612:	5b                   	pop    ebx
c001c613:	5e                   	pop    esi
c001c614:	5f                   	pop    edi
c001c615:	5d                   	pop    ebp
c001c616:	c3                   	ret    
c001c617:	90                   	nop

c001c618 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c618:	55                   	push   ebp
c001c619:	57                   	push   edi
c001c61a:	56                   	push   esi
c001c61b:	53                   	push   ebx
c001c61c:	31 db                	xor    ebx,ebx
c001c61e:	83 ec 0c             	sub    esp,0xc
c001c621:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c625:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c629:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c62c:	f7 c7 01 00 00 00    	test   edi,0x1
c001c632:	74 7a                	je     c001c6ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c634:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c638:	89 d8                	mov    eax,ebx
c001c63a:	c1 e0 07             	shl    eax,0x7
c001c63d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c644:	55                   	push   ebp
c001c645:	56                   	push   esi
c001c646:	e8 2b fe ff ff       	call   c001c476 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c64b:	5a                   	pop    edx
c001c64c:	83 f8 01             	cmp    eax,0x1
c001c64f:	59                   	pop    ecx
c001c650:	75 21                	jne    c001c673 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c652:	50                   	push   eax
c001c653:	53                   	push   ebx
c001c654:	55                   	push   ebp
c001c655:	56                   	push   esi
c001c656:	e8 ad fe ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c65b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c662:	e8 4f b4 fe ff       	call   c0007ab6 <malloc>
c001c667:	89 c5                	mov    ebp,eax
c001c669:	89 04 24             	mov    DWORD PTR [esp],eax
c001c66c:	e8 99 10 00 00       	call   c001d70a <SATA::SATA()>
c001c671:	eb 24                	jmp    c001c697 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c673:	83 f8 04             	cmp    eax,0x4
c001c676:	75 36                	jne    c001c6ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c678:	51                   	push   ecx
c001c679:	53                   	push   ebx
c001c67a:	55                   	push   ebp
c001c67b:	56                   	push   esi
c001c67c:	e8 87 fe ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c681:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c688:	e8 29 b4 fe ff       	call   c0007ab6 <malloc>
c001c68d:	89 c5                	mov    ebp,eax
c001c68f:	89 04 24             	mov    DWORD PTR [esp],eax
c001c692:	e8 d5 17 00 00       	call   c001de6c <SATAPI::SATAPI()>
c001c697:	58                   	pop    eax
c001c698:	5a                   	pop    edx
c001c699:	55                   	push   ebp
c001c69a:	56                   	push   esi
c001c69b:	e8 22 00 ff ff       	call   c000c6c2 <Device::addChild(Device*)>
c001c6a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c6a3:	56                   	push   esi
c001c6a4:	6a 00                	push   0x0
c001c6a6:	53                   	push   ebx
c001c6a7:	55                   	push   ebp
c001c6a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c6ab:	83 c4 20             	add    esp,0x20
c001c6ae:	d1 ef                	shr    edi,1
c001c6b0:	43                   	inc    ebx
c001c6b1:	83 fb 20             	cmp    ebx,0x20
c001c6b4:	0f 85 72 ff ff ff    	jne    c001c62c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c6ba:	83 c4 0c             	add    esp,0xc
c001c6bd:	5b                   	pop    ebx
c001c6be:	5e                   	pop    esi
c001c6bf:	5f                   	pop    edi
c001c6c0:	5d                   	pop    ebp
c001c6c1:	c3                   	ret    

c001c6c2 <SATABus::open(int, int, void*)>:
c001c6c2:	83 ec 14             	sub    esp,0x14
c001c6c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6c9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c6cf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c6d5:	52                   	push   edx
c001c6d6:	50                   	push   eax
c001c6d7:	e8 3c ff ff ff       	call   c001c618 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c6dc:	31 c0                	xor    eax,eax
c001c6de:	83 c4 1c             	add    esp,0x1c
c001c6e1:	c3                   	ret    

c001c6e2 <ATA::close(int, int, void*)>:
c001c6e2:	83 ec 0c             	sub    esp,0xc
c001c6e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c6ef:	85 c0                	test   eax,eax
c001c6f1:	74 0c                	je     c001c6ff <ATA::close(int, int, void*)+0x1d>
c001c6f3:	83 ec 0c             	sub    esp,0xc
c001c6f6:	8b 10                	mov    edx,DWORD PTR [eax]
c001c6f8:	50                   	push   eax
c001c6f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c6fc:	83 c4 10             	add    esp,0x10
c001c6ff:	31 c0                	xor    eax,eax
c001c701:	83 c4 0c             	add    esp,0xc
c001c704:	c3                   	ret    
c001c705:	90                   	nop

c001c706 <ATA::powerSaving(PowerSavingLevel)>:
c001c706:	c3                   	ret    
c001c707:	90                   	nop

c001c708 <ATA::ATA()>:
c001c708:	83 ec 0c             	sub    esp,0xc
c001c70b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c70f:	83 ec 04             	sub    esp,0x4
c001c712:	68 00 02 00 00       	push   0x200
c001c717:	68 9d 2d 02 c0       	push   0xc0022d9d
c001c71c:	50                   	push   eax
c001c71d:	e8 6c 03 ff ff       	call   c000ca8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c722:	83 c4 10             	add    esp,0x10
c001c725:	ba 10 2d 02 c0       	mov    edx,0xc0022d10
c001c72a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72e:	89 10                	mov    DWORD PTR [eax],edx
c001c730:	90                   	nop
c001c731:	83 c4 0c             	add    esp,0xc
c001c734:	c3                   	ret    
c001c735:	90                   	nop

c001c736 <ATA::flush(bool)>:
c001c736:	53                   	push   ebx
c001c737:	83 ec 08             	sub    esp,0x8
c001c73a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c73e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c743:	83 f8 01             	cmp    eax,0x1
c001c746:	19 c0                	sbb    eax,eax
c001c748:	83 e0 fd             	and    eax,0xfffffffd
c001c74b:	05 ea 00 00 00       	add    eax,0xea
c001c750:	50                   	push   eax
c001c751:	6a 07                	push   0x7
c001c753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c75a:	50                   	push   eax
c001c75b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c761:	e8 16 f1 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c766:	83 c4 0c             	add    esp,0xc
c001c769:	6a 00                	push   0x0
c001c76b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c772:	50                   	push   eax
c001c773:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c779:	e8 e6 fb ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001c77e:	83 c4 18             	add    esp,0x18
c001c781:	5b                   	pop    ebx
c001c782:	c3                   	ret    
c001c783:	90                   	nop

c001c784 <ATA::readyForCommand()>:
c001c784:	56                   	push   esi
c001c785:	53                   	push   ebx
c001c786:	53                   	push   ebx
c001c787:	31 db                	xor    ebx,ebx
c001c789:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c78d:	51                   	push   ecx
c001c78e:	6a 0c                	push   0xc
c001c790:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c797:	50                   	push   eax
c001c798:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c79e:	e8 99 f1 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	a8 88                	test   al,0x88
c001c7a8:	74 1f                	je     c001c7c9 <ATA::readyForCommand()+0x45>
c001c7aa:	43                   	inc    ebx
c001c7ab:	83 fb 63             	cmp    ebx,0x63
c001c7ae:	7e dd                	jle    c001c78d <ATA::readyForCommand()+0x9>
c001c7b0:	83 ec 0c             	sub    esp,0xc
c001c7b3:	6a 0a                	push   0xa
c001c7b5:	e8 26 97 ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001c7ba:	83 c4 10             	add    esp,0x10
c001c7bd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c7c3:	75 c8                	jne    c001c78d <ATA::readyForCommand()+0x9>
c001c7c5:	31 c0                	xor    eax,eax
c001c7c7:	eb 02                	jmp    c001c7cb <ATA::readyForCommand()+0x47>
c001c7c9:	b0 01                	mov    al,0x1
c001c7cb:	5a                   	pop    edx
c001c7cc:	5b                   	pop    ebx
c001c7cd:	5e                   	pop    esi
c001c7ce:	c3                   	ret    
c001c7cf:	90                   	nop

c001c7d0 <ATA::access(unsigned long long, int, void*, bool)>:
c001c7d0:	55                   	push   ebp
c001c7d1:	57                   	push   edi
c001c7d2:	56                   	push   esi
c001c7d3:	53                   	push   ebx
c001c7d4:	83 ec 2c             	sub    esp,0x2c
c001c7d7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c7db:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c7df:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c7e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c7e7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c7eb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c7ef:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c7f3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c7f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c7fd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c803:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c807:	c1 e0 06             	shl    eax,0x6
c001c80a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c812:	74 5d                	je     c001c871 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c814:	89 fa                	mov    edx,edi
c001c816:	89 f0                	mov    eax,esi
c001c818:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c81c:	c1 ea 1c             	shr    edx,0x1c
c001c81f:	89 d1                	mov    ecx,edx
c001c821:	09 c1                	or     ecx,eax
c001c823:	74 25                	je     c001c84a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c825:	31 ed                	xor    ebp,ebp
c001c827:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c82e:	89 fa                	mov    edx,edi
c001c830:	89 f0                	mov    eax,esi
c001c832:	0f ad d0             	shrd   eax,edx,cl
c001c835:	d3 ea                	shr    edx,cl
c001c837:	f6 c1 20             	test   cl,0x20
c001c83a:	74 02                	je     c001c83e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c83c:	89 d0                	mov    eax,edx
c001c83e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c842:	45                   	inc    ebp
c001c843:	83 fd 06             	cmp    ebp,0x6
c001c846:	75 df                	jne    c001c827 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c848:	eb 76                	jmp    c001c8c0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c84a:	89 f0                	mov    eax,esi
c001c84c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c851:	89 fa                	mov    edx,edi
c001c853:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c85a:	0f ac d0 10          	shrd   eax,edx,0x10
c001c85e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c863:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c867:	c1 ee 18             	shr    esi,0x18
c001c86a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c86f:	eb 56                	jmp    c001c8c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c871:	6a 00                	push   0x0
c001c873:	6a 3f                	push   0x3f
c001c875:	57                   	push   edi
c001c876:	56                   	push   esi
c001c877:	e8 a4 2a 00 00       	call   c001f320 <__umoddi3>
c001c87c:	83 c4 10             	add    esp,0x10
c001c87f:	40                   	inc    eax
c001c880:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c884:	6a 00                	push   0x0
c001c886:	68 f0 03 00 00       	push   0x3f0
c001c88b:	57                   	push   edi
c001c88c:	56                   	push   esi
c001c88d:	e8 8e 29 00 00       	call   c001f220 <__udivdi3>
c001c892:	83 c4 10             	add    esp,0x10
c001c895:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c89a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c8a1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c8a6:	6a 00                	push   0x0
c001c8a8:	6a 3f                	push   0x3f
c001c8aa:	57                   	push   edi
c001c8ab:	56                   	push   esi
c001c8ac:	e8 6f 29 00 00       	call   c001f220 <__udivdi3>
c001c8b1:	83 c4 10             	add    esp,0x10
c001c8b4:	83 e0 0f             	and    eax,0xf
c001c8b7:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c8bc:	89 c6                	mov    esi,eax
c001c8be:	eb 07                	jmp    c001c8c7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c8c0:	31 f6                	xor    esi,esi
c001c8c2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c8c7:	bf 01 00 00 00       	mov    edi,0x1
c001c8cc:	50                   	push   eax
c001c8cd:	6a 00                	push   0x0
c001c8cf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8d6:	50                   	push   eax
c001c8d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c8db:	e8 a4 f1 ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001c8e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c8e3:	e8 9c fe ff ff       	call   c001c784 <ATA::readyForCommand()>
c001c8e8:	83 c4 10             	add    esp,0x10
c001c8eb:	84 c0                	test   al,al
c001c8ed:	0f 84 69 02 00 00    	je     c001cb5c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c8f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c8f9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c8ff:	c1 e0 04             	shl    eax,0x4
c001c902:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c909:	09 c6                	or     esi,eax
c001c90b:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c910:	75 05                	jne    c001c917 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c912:	83 ce a0             	or     esi,0xffffffa0
c001c915:	eb 03                	jmp    c001c91a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c917:	83 ce e0             	or     esi,0xffffffe0
c001c91a:	89 f0                	mov    eax,esi
c001c91c:	0f b6 f0             	movzx  esi,al
c001c91f:	56                   	push   esi
c001c920:	6a 06                	push   0x6
c001c922:	51                   	push   ecx
c001c923:	52                   	push   edx
c001c924:	e8 53 ef ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c929:	83 c4 10             	add    esp,0x10
c001c92c:	6a 00                	push   0x0
c001c92e:	6a 01                	push   0x1
c001c930:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c937:	50                   	push   eax
c001c938:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c93e:	e8 39 ef ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c943:	83 c4 10             	add    esp,0x10
c001c946:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c94b:	83 f8 02             	cmp    eax,0x2
c001c94e:	75 6e                	jne    c001c9be <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c950:	6a 00                	push   0x0
c001c952:	6a 08                	push   0x8
c001c954:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c95b:	50                   	push   eax
c001c95c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c962:	e8 15 ef ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c967:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c96c:	50                   	push   eax
c001c96d:	6a 09                	push   0x9
c001c96f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c976:	50                   	push   eax
c001c977:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c97d:	e8 fa ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c982:	83 c4 20             	add    esp,0x20
c001c985:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c98a:	50                   	push   eax
c001c98b:	6a 0a                	push   0xa
c001c98d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c994:	50                   	push   eax
c001c995:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c99b:	e8 dc ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9a0:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c9a5:	50                   	push   eax
c001c9a6:	6a 0b                	push   0xb
c001c9a8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9af:	50                   	push   eax
c001c9b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b6:	e8 c1 ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9bb:	83 c4 20             	add    esp,0x20
c001c9be:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c9c3:	50                   	push   eax
c001c9c4:	6a 02                	push   0x2
c001c9c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9cd:	50                   	push   eax
c001c9ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9d4:	e8 a3 ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c9de:	50                   	push   eax
c001c9df:	6a 03                	push   0x3
c001c9e1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e8:	50                   	push   eax
c001c9e9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9ef:	e8 88 ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f4:	83 c4 20             	add    esp,0x20
c001c9f7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c9fc:	50                   	push   eax
c001c9fd:	6a 04                	push   0x4
c001c9ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca06:	50                   	push   eax
c001ca07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca0d:	e8 6a ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca12:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ca17:	50                   	push   eax
c001ca18:	6a 05                	push   0x5
c001ca1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca21:	50                   	push   eax
c001ca22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca28:	e8 4f ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2d:	83 c4 20             	add    esp,0x20
c001ca30:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca35:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001ca3a:	74 11                	je     c001ca4d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001ca3c:	b8 30 00 00 00       	mov    eax,0x30
c001ca41:	83 fa 02             	cmp    edx,0x2
c001ca44:	75 16                	jne    c001ca5c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001ca46:	b8 34 00 00 00       	mov    eax,0x34
c001ca4b:	eb 0f                	jmp    c001ca5c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001ca4d:	b8 20 00 00 00       	mov    eax,0x20
c001ca52:	83 fa 02             	cmp    edx,0x2
c001ca55:	75 05                	jne    c001ca5c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001ca57:	b8 24 00 00 00       	mov    eax,0x24
c001ca5c:	50                   	push   eax
c001ca5d:	6a 07                	push   0x7
c001ca5f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca66:	50                   	push   eax
c001ca67:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca6d:	e8 0a ee ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca72:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001ca76:	83 c4 10             	add    esp,0x10
c001ca79:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ca7e:	85 f6                	test   esi,esi
c001ca80:	0f 84 b3 00 00 00    	je     c001cb39 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001ca86:	50                   	push   eax
c001ca87:	6a 01                	push   0x1
c001ca89:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca90:	50                   	push   eax
c001ca91:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca97:	e8 c8 f8 ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001ca9c:	83 c4 10             	add    esp,0x10
c001ca9f:	0f b6 f8             	movzx  edi,al
c001caa2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001caa8:	85 ff                	test   edi,edi
c001caaa:	74 1d                	je     c001cac9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001caac:	57                   	push   edi
c001caad:	0f b6 d2             	movzx  edx,dl
c001cab0:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cab7:	50                   	push   eax
c001cab8:	52                   	push   edx
c001cab9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cabf:	e8 e6 f7 ff ff       	call   c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cac4:	e9 90 00 00 00       	jmp    c001cb59 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cac9:	85 ed                	test   ebp,ebp
c001cacb:	74 3b                	je     c001cb08 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cacd:	31 c9                	xor    ecx,ecx
c001cacf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cad3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cad7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cadb:	50                   	push   eax
c001cadc:	50                   	push   eax
c001cadd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae4:	50                   	push   eax
c001cae5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caeb:	e8 7a ed ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001caf0:	89 c2                	mov    edx,eax
c001caf2:	89 f8                	mov    eax,edi
c001caf4:	66 ef                	out    dx,ax
c001caf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cafa:	83 c4 10             	add    esp,0x10
c001cafd:	41                   	inc    ecx
c001cafe:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cb04:	75 c9                	jne    c001cacf <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cb06:	eb 23                	jmp    c001cb2b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cb08:	0f b6 d2             	movzx  edx,dl
c001cb0b:	51                   	push   ecx
c001cb0c:	51                   	push   ecx
c001cb0d:	52                   	push   edx
c001cb0e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb14:	e8 51 ed ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001cb19:	b9 00 01 00 00       	mov    ecx,0x100
c001cb1e:	89 c2                	mov    edx,eax
c001cb20:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb24:	fc                   	cld    
c001cb25:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cb28:	83 c4 10             	add    esp,0x10
c001cb2b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cb33:	4e                   	dec    esi
c001cb34:	e9 45 ff ff ff       	jmp    c001ca7e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cb39:	31 ff                	xor    edi,edi
c001cb3b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb40:	74 1a                	je     c001cb5c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cb42:	50                   	push   eax
c001cb43:	50                   	push   eax
c001cb44:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cb49:	83 f8 02             	cmp    eax,0x2
c001cb4c:	0f 94 c0             	sete   al
c001cb4f:	0f b6 c0             	movzx  eax,al
c001cb52:	50                   	push   eax
c001cb53:	53                   	push   ebx
c001cb54:	e8 dd fb ff ff       	call   c001c736 <ATA::flush(bool)>
c001cb59:	83 c4 10             	add    esp,0x10
c001cb5c:	83 c4 2c             	add    esp,0x2c
c001cb5f:	89 f8                	mov    eax,edi
c001cb61:	5b                   	pop    ebx
c001cb62:	5e                   	pop    esi
c001cb63:	5f                   	pop    edi
c001cb64:	5d                   	pop    ebp
c001cb65:	c3                   	ret    

c001cb66 <ATA::detectCHS()>:
c001cb66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cb6a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001cb70:	c1 e0 06             	shl    eax,0x6
c001cb73:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cb79:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cb83:	c7 44 24 04 f4 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022cf4
c001cb8b:	e9 61 47 ff ff       	jmp    c00112f1 <KePanic(char const*)>

c001cb90 <ATA::open(int, int, void*)>:
c001cb90:	53                   	push   ebx
c001cb91:	83 ec 08             	sub    esp,0x8
c001cb94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cba0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cba6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cbac:	c1 e0 06             	shl    eax,0x6
c001cbaf:	01 d0                	add    eax,edx
c001cbb1:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cbb8:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cbbe:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cbc5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cbcf:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cbd5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cbdc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cbe3:	75 0c                	jne    c001cbf1 <ATA::open(int, int, void*)+0x61>
c001cbe5:	83 ec 0c             	sub    esp,0xc
c001cbe8:	53                   	push   ebx
c001cbe9:	e8 78 ff ff ff       	call   c001cb66 <ATA::detectCHS()>
c001cbee:	83 c4 10             	add    esp,0x10
c001cbf1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cbf7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cbfd:	c1 e0 06             	shl    eax,0x6
c001cc00:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cc07:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cc11:	d1 e8                	shr    eax,1
c001cc13:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cc19:	6a 04                	push   0x4
c001cc1b:	6a 0c                	push   0xc
c001cc1d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc24:	50                   	push   eax
c001cc25:	52                   	push   edx
c001cc26:	e8 51 ec ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc2b:	90                   	nop
c001cc2c:	90                   	nop
c001cc2d:	6a 00                	push   0x0
c001cc2f:	6a 0c                	push   0xc
c001cc31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc38:	50                   	push   eax
c001cc39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc3f:	e8 38 ec ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc44:	83 c4 14             	add    esp,0x14
c001cc47:	53                   	push   ebx
c001cc48:	e8 a9 fe fe ff       	call   c000caf6 <PhysicalDisk::startCache()>
c001cc4d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc50:	e8 e5 10 ff ff       	call   c000dd3a <createPartitionsForDisk(PhysicalDisk*)>
c001cc55:	31 c0                	xor    eax,eax
c001cc57:	83 c4 18             	add    esp,0x18
c001cc5a:	5b                   	pop    ebx
c001cc5b:	c3                   	ret    

c001cc5c <combineCharAndColour(char, unsigned char)>:
c001cc5c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc61:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cc67:	c1 e0 08             	shl    eax,0x8
c001cc6a:	09 d0                	or     eax,edx
c001cc6c:	c3                   	ret    

c001cc6d <combineColours(unsigned char, unsigned char)>:
c001cc6d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cc72:	c1 e0 04             	shl    eax,0x4
c001cc75:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cc79:	c3                   	ret    

c001cc7a <ATA::read(unsigned long long, int, void*)>:
c001cc7a:	55                   	push   ebp
c001cc7b:	57                   	push   edi
c001cc7c:	56                   	push   esi
c001cc7d:	be 04 00 00 00       	mov    esi,0x4
c001cc82:	53                   	push   ebx
c001cc83:	83 ec 0c             	sub    esp,0xc
c001cc86:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc8a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc8e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc95:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc99:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc9f:	0f 87 a1 01 00 00    	ja     c001ce46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cca5:	be 06 00 00 00       	mov    esi,0x6
c001ccaa:	85 c9                	test   ecx,ecx
c001ccac:	0f 84 94 01 00 00    	je     c001ce46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ccb2:	55                   	push   ebp
c001ccb3:	55                   	push   ebp
c001ccb4:	6a 00                	push   0x0
c001ccb6:	51                   	push   ecx
c001ccb7:	53                   	push   ebx
c001ccb8:	52                   	push   edx
c001ccb9:	50                   	push   eax
c001ccba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccbe:	e8 0d fb ff ff       	call   c001c7d0 <ATA::access(unsigned long long, int, void*, bool)>
c001ccc3:	83 c4 20             	add    esp,0x20
c001ccc6:	89 c6                	mov    esi,eax
c001ccc8:	85 c0                	test   eax,eax
c001ccca:	0f 85 71 01 00 00    	jne    c001ce41 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001ccd0:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001ccd6:	89 da                	mov    edx,ebx
c001ccd8:	50                   	push   eax
c001ccd9:	bd 10 27 00 00       	mov    ebp,0x2710
c001ccde:	50                   	push   eax
c001ccdf:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cce5:	6a 0f                	push   0xf
c001cce7:	6a 00                	push   0x0
c001cce9:	e8 7f ff ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001ccee:	59                   	pop    ecx
c001ccef:	b9 0a 00 00 00       	mov    ecx,0xa
c001ccf4:	5b                   	pop    ebx
c001ccf5:	0f b6 d8             	movzx  ebx,al
c001ccf8:	89 d0                	mov    eax,edx
c001ccfa:	53                   	push   ebx
c001ccfb:	99                   	cdq    
c001ccfc:	f7 fd                	idiv   ebp
c001ccfe:	99                   	cdq    
c001ccff:	f7 f9                	idiv   ecx
c001cd01:	83 c2 30             	add    edx,0x30
c001cd04:	0f b6 d2             	movzx  edx,dl
c001cd07:	52                   	push   edx
c001cd08:	e8 4f ff ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cd0d:	5f                   	pop    edi
c001cd0e:	bf e8 03 00 00       	mov    edi,0x3e8
c001cd13:	5a                   	pop    edx
c001cd14:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cd1a:	53                   	push   ebx
c001cd1b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd20:	99                   	cdq    
c001cd21:	f7 ff                	idiv   edi
c001cd23:	99                   	cdq    
c001cd24:	f7 f9                	idiv   ecx
c001cd26:	8d 42 30             	lea    eax,[edx+0x30]
c001cd29:	0f b6 c0             	movzx  eax,al
c001cd2c:	50                   	push   eax
c001cd2d:	e8 2a ff ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cd32:	5f                   	pop    edi
c001cd33:	bf 64 00 00 00       	mov    edi,0x64
c001cd38:	5a                   	pop    edx
c001cd39:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cd3f:	53                   	push   ebx
c001cd40:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd45:	99                   	cdq    
c001cd46:	f7 ff                	idiv   edi
c001cd48:	99                   	cdq    
c001cd49:	f7 f9                	idiv   ecx
c001cd4b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd4e:	0f b6 c0             	movzx  eax,al
c001cd51:	50                   	push   eax
c001cd52:	e8 05 ff ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cd57:	5a                   	pop    edx
c001cd58:	5a                   	pop    edx
c001cd59:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cd5f:	53                   	push   ebx
c001cd60:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd65:	99                   	cdq    
c001cd66:	f7 f9                	idiv   ecx
c001cd68:	99                   	cdq    
c001cd69:	f7 f9                	idiv   ecx
c001cd6b:	8d 42 30             	lea    eax,[edx+0x30]
c001cd6e:	0f b6 c0             	movzx  eax,al
c001cd71:	50                   	push   eax
c001cd72:	e8 e5 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cd77:	5a                   	pop    edx
c001cd78:	5a                   	pop    edx
c001cd79:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cd7f:	53                   	push   ebx
c001cd80:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd85:	99                   	cdq    
c001cd86:	f7 f9                	idiv   ecx
c001cd88:	83 c2 30             	add    edx,0x30
c001cd8b:	0f b6 d2             	movzx  edx,dl
c001cd8e:	52                   	push   edx
c001cd8f:	e8 c8 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cd94:	5a                   	pop    edx
c001cd95:	5a                   	pop    edx
c001cd96:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd9c:	53                   	push   ebx
c001cd9d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cda2:	99                   	cdq    
c001cda3:	f7 fd                	idiv   ebp
c001cda5:	99                   	cdq    
c001cda6:	f7 f9                	idiv   ecx
c001cda8:	8d 42 30             	lea    eax,[edx+0x30]
c001cdab:	0f b6 c0             	movzx  eax,al
c001cdae:	50                   	push   eax
c001cdaf:	e8 a8 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cdb4:	5d                   	pop    ebp
c001cdb5:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cdba:	5a                   	pop    edx
c001cdbb:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cdc1:	53                   	push   ebx
c001cdc2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdc7:	99                   	cdq    
c001cdc8:	f7 fd                	idiv   ebp
c001cdca:	99                   	cdq    
c001cdcb:	f7 f9                	idiv   ecx
c001cdcd:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd0:	0f b6 c0             	movzx  eax,al
c001cdd3:	50                   	push   eax
c001cdd4:	e8 83 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cdd9:	5d                   	pop    ebp
c001cdda:	5a                   	pop    edx
c001cddb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cde1:	53                   	push   ebx
c001cde2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cde7:	99                   	cdq    
c001cde8:	f7 ff                	idiv   edi
c001cdea:	99                   	cdq    
c001cdeb:	f7 f9                	idiv   ecx
c001cded:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf0:	0f b6 c0             	movzx  eax,al
c001cdf3:	50                   	push   eax
c001cdf4:	e8 63 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cdf9:	5f                   	pop    edi
c001cdfa:	5d                   	pop    ebp
c001cdfb:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ce01:	53                   	push   ebx
c001ce02:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce07:	99                   	cdq    
c001ce08:	f7 f9                	idiv   ecx
c001ce0a:	99                   	cdq    
c001ce0b:	f7 f9                	idiv   ecx
c001ce0d:	8d 42 30             	lea    eax,[edx+0x30]
c001ce10:	0f b6 c0             	movzx  eax,al
c001ce13:	50                   	push   eax
c001ce14:	e8 43 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001ce19:	5a                   	pop    edx
c001ce1a:	5f                   	pop    edi
c001ce1b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ce21:	53                   	push   ebx
c001ce22:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ce27:	99                   	cdq    
c001ce28:	f7 f9                	idiv   ecx
c001ce2a:	83 c2 30             	add    edx,0x30
c001ce2d:	0f b6 d2             	movzx  edx,dl
c001ce30:	52                   	push   edx
c001ce31:	e8 26 fe ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001ce36:	83 c4 10             	add    esp,0x10
c001ce39:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ce3f:	eb 05                	jmp    c001ce46 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001ce41:	be 01 00 00 00       	mov    esi,0x1
c001ce46:	83 c4 0c             	add    esp,0xc
c001ce49:	89 f0                	mov    eax,esi
c001ce4b:	5b                   	pop    ebx
c001ce4c:	5e                   	pop    esi
c001ce4d:	5f                   	pop    edi
c001ce4e:	5d                   	pop    ebp
c001ce4f:	c3                   	ret    

c001ce50 <ATA::write(unsigned long long, int, void*)>:
c001ce50:	55                   	push   ebp
c001ce51:	57                   	push   edi
c001ce52:	56                   	push   esi
c001ce53:	be 04 00 00 00       	mov    esi,0x4
c001ce58:	53                   	push   ebx
c001ce59:	83 ec 0c             	sub    esp,0xc
c001ce5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ce60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce64:	8d 7b ff             	lea    edi,[ebx-0x1]
c001ce67:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ce6b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce6f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ce75:	0f 87 9c 01 00 00    	ja     c001d017 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce7b:	be 06 00 00 00       	mov    esi,0x6
c001ce80:	85 c9                	test   ecx,ecx
c001ce82:	0f 84 8f 01 00 00    	je     c001d017 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce88:	55                   	push   ebp
c001ce89:	55                   	push   ebp
c001ce8a:	6a 01                	push   0x1
c001ce8c:	51                   	push   ecx
c001ce8d:	53                   	push   ebx
c001ce8e:	52                   	push   edx
c001ce8f:	50                   	push   eax
c001ce90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce94:	e8 37 f9 ff ff       	call   c001c7d0 <ATA::access(unsigned long long, int, void*, bool)>
c001ce99:	83 c4 20             	add    esp,0x20
c001ce9c:	89 c6                	mov    esi,eax
c001ce9e:	85 c0                	test   eax,eax
c001cea0:	0f 85 6c 01 00 00    	jne    c001d012 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cea6:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ceac:	bd 10 27 00 00       	mov    ebp,0x2710
c001ceb1:	50                   	push   eax
c001ceb2:	50                   	push   eax
c001ceb3:	6a 0f                	push   0xf
c001ceb5:	6a 00                	push   0x0
c001ceb7:	e8 b1 fd ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001cebc:	5a                   	pop    edx
c001cebd:	0f b6 d8             	movzx  ebx,al
c001cec0:	59                   	pop    ecx
c001cec1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cec6:	53                   	push   ebx
c001cec7:	b9 0a 00 00 00       	mov    ecx,0xa
c001cecc:	99                   	cdq    
c001cecd:	f7 fd                	idiv   ebp
c001cecf:	99                   	cdq    
c001ced0:	f7 f9                	idiv   ecx
c001ced2:	8d 42 30             	lea    eax,[edx+0x30]
c001ced5:	0f b6 c0             	movzx  eax,al
c001ced8:	50                   	push   eax
c001ced9:	e8 7e fd ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cede:	5f                   	pop    edi
c001cedf:	bf e8 03 00 00       	mov    edi,0x3e8
c001cee4:	5a                   	pop    edx
c001cee5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ceeb:	53                   	push   ebx
c001ceec:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cef1:	99                   	cdq    
c001cef2:	f7 ff                	idiv   edi
c001cef4:	99                   	cdq    
c001cef5:	f7 f9                	idiv   ecx
c001cef7:	8d 42 30             	lea    eax,[edx+0x30]
c001cefa:	0f b6 c0             	movzx  eax,al
c001cefd:	50                   	push   eax
c001cefe:	e8 59 fd ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cf03:	5f                   	pop    edi
c001cf04:	bf 64 00 00 00       	mov    edi,0x64
c001cf09:	5a                   	pop    edx
c001cf0a:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cf10:	53                   	push   ebx
c001cf11:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf16:	99                   	cdq    
c001cf17:	f7 ff                	idiv   edi
c001cf19:	99                   	cdq    
c001cf1a:	f7 f9                	idiv   ecx
c001cf1c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf1f:	0f b6 c0             	movzx  eax,al
c001cf22:	50                   	push   eax
c001cf23:	e8 34 fd ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cf28:	5a                   	pop    edx
c001cf29:	5a                   	pop    edx
c001cf2a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cf30:	53                   	push   ebx
c001cf31:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf36:	99                   	cdq    
c001cf37:	f7 f9                	idiv   ecx
c001cf39:	99                   	cdq    
c001cf3a:	f7 f9                	idiv   ecx
c001cf3c:	8d 42 30             	lea    eax,[edx+0x30]
c001cf3f:	0f b6 c0             	movzx  eax,al
c001cf42:	50                   	push   eax
c001cf43:	e8 14 fd ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cf48:	5a                   	pop    edx
c001cf49:	5a                   	pop    edx
c001cf4a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cf50:	53                   	push   ebx
c001cf51:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cf56:	99                   	cdq    
c001cf57:	f7 f9                	idiv   ecx
c001cf59:	8d 42 30             	lea    eax,[edx+0x30]
c001cf5c:	0f b6 c0             	movzx  eax,al
c001cf5f:	50                   	push   eax
c001cf60:	e8 f7 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cf65:	5a                   	pop    edx
c001cf66:	5a                   	pop    edx
c001cf67:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cf6d:	53                   	push   ebx
c001cf6e:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf73:	99                   	cdq    
c001cf74:	f7 fd                	idiv   ebp
c001cf76:	99                   	cdq    
c001cf77:	f7 f9                	idiv   ecx
c001cf79:	8d 42 30             	lea    eax,[edx+0x30]
c001cf7c:	0f b6 c0             	movzx  eax,al
c001cf7f:	50                   	push   eax
c001cf80:	e8 d7 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cf85:	5d                   	pop    ebp
c001cf86:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf8b:	5a                   	pop    edx
c001cf8c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf92:	53                   	push   ebx
c001cf93:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf98:	99                   	cdq    
c001cf99:	f7 fd                	idiv   ebp
c001cf9b:	99                   	cdq    
c001cf9c:	f7 f9                	idiv   ecx
c001cf9e:	8d 42 30             	lea    eax,[edx+0x30]
c001cfa1:	0f b6 c0             	movzx  eax,al
c001cfa4:	50                   	push   eax
c001cfa5:	e8 b2 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cfaa:	5d                   	pop    ebp
c001cfab:	5a                   	pop    edx
c001cfac:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cfb2:	53                   	push   ebx
c001cfb3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfb8:	99                   	cdq    
c001cfb9:	f7 ff                	idiv   edi
c001cfbb:	99                   	cdq    
c001cfbc:	f7 f9                	idiv   ecx
c001cfbe:	8d 42 30             	lea    eax,[edx+0x30]
c001cfc1:	0f b6 c0             	movzx  eax,al
c001cfc4:	50                   	push   eax
c001cfc5:	e8 92 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cfca:	5f                   	pop    edi
c001cfcb:	5d                   	pop    ebp
c001cfcc:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cfd2:	53                   	push   ebx
c001cfd3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cfd8:	99                   	cdq    
c001cfd9:	f7 f9                	idiv   ecx
c001cfdb:	99                   	cdq    
c001cfdc:	f7 f9                	idiv   ecx
c001cfde:	8d 42 30             	lea    eax,[edx+0x30]
c001cfe1:	0f b6 c0             	movzx  eax,al
c001cfe4:	50                   	push   eax
c001cfe5:	e8 72 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001cfea:	5a                   	pop    edx
c001cfeb:	5f                   	pop    edi
c001cfec:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cff2:	53                   	push   ebx
c001cff3:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cff8:	99                   	cdq    
c001cff9:	f7 f9                	idiv   ecx
c001cffb:	83 c2 30             	add    edx,0x30
c001cffe:	0f b6 d2             	movzx  edx,dl
c001d001:	52                   	push   edx
c001d002:	e8 55 fc ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001d007:	83 c4 10             	add    esp,0x10
c001d00a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d010:	eb 05                	jmp    c001d017 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d012:	be 01 00 00 00       	mov    esi,0x1
c001d017:	83 c4 0c             	add    esp,0xc
c001d01a:	89 f0                	mov    eax,esi
c001d01c:	5b                   	pop    ebx
c001d01d:	5e                   	pop    esi
c001d01e:	5f                   	pop    edi
c001d01f:	5d                   	pop    ebp
c001d020:	c3                   	ret    
c001d021:	90                   	nop

c001d022 <ATAPI::write(unsigned long long, int, void*)>:
c001d022:	b8 03 00 00 00       	mov    eax,0x3
c001d027:	c3                   	ret    

c001d028 <ATAPI::close(int, int, void*)>:
c001d028:	83 ec 0c             	sub    esp,0xc
c001d02b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d02f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d035:	85 c0                	test   eax,eax
c001d037:	74 0c                	je     c001d045 <ATAPI::close(int, int, void*)+0x1d>
c001d039:	83 ec 0c             	sub    esp,0xc
c001d03c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d03e:	50                   	push   eax
c001d03f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d042:	83 c4 10             	add    esp,0x10
c001d045:	31 c0                	xor    eax,eax
c001d047:	83 c4 0c             	add    esp,0xc
c001d04a:	c3                   	ret    
c001d04b:	90                   	nop

c001d04c <ATAPI::ATAPI()>:
c001d04c:	83 ec 0c             	sub    esp,0xc
c001d04f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d053:	83 ec 04             	sub    esp,0x4
c001d056:	68 00 08 00 00       	push   0x800
c001d05b:	68 3d 2e 02 c0       	push   0xc0022e3d
c001d060:	50                   	push   eax
c001d061:	e8 28 fa fe ff       	call   c000ca8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d066:	83 c4 10             	add    esp,0x10
c001d069:	ba 58 2d 02 c0       	mov    edx,0xc0022d58
c001d06e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d072:	89 10                	mov    DWORD PTR [eax],edx
c001d074:	90                   	nop
c001d075:	83 c4 0c             	add    esp,0xc
c001d078:	c3                   	ret    
c001d079:	90                   	nop

c001d07a <ATAPI::readyForCommand()>:
c001d07a:	56                   	push   esi
c001d07b:	53                   	push   ebx
c001d07c:	53                   	push   ebx
c001d07d:	31 db                	xor    ebx,ebx
c001d07f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d083:	51                   	push   ecx
c001d084:	6a 0c                	push   0xc
c001d086:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d08d:	50                   	push   eax
c001d08e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d094:	e8 a3 e8 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001d099:	83 c4 10             	add    esp,0x10
c001d09c:	a8 88                	test   al,0x88
c001d09e:	74 25                	je     c001d0c5 <ATAPI::readyForCommand()+0x4b>
c001d0a0:	43                   	inc    ebx
c001d0a1:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d0a7:	7e da                	jle    c001d083 <ATAPI::readyForCommand()+0x9>
c001d0a9:	83 ec 0c             	sub    esp,0xc
c001d0ac:	68 5e 01 00 00       	push   0x15e
c001d0b1:	e8 2a 8e ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001d0b6:	83 c4 10             	add    esp,0x10
c001d0b9:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d0bf:	75 c2                	jne    c001d083 <ATAPI::readyForCommand()+0x9>
c001d0c1:	31 c0                	xor    eax,eax
c001d0c3:	eb 02                	jmp    c001d0c7 <ATAPI::readyForCommand()+0x4d>
c001d0c5:	b0 01                	mov    al,0x1
c001d0c7:	5a                   	pop    edx
c001d0c8:	5b                   	pop    ebx
c001d0c9:	5e                   	pop    esi
c001d0ca:	c3                   	ret    
c001d0cb:	90                   	nop

c001d0cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d0cc:	55                   	push   ebp
c001d0cd:	57                   	push   edi
c001d0ce:	56                   	push   esi
c001d0cf:	53                   	push   ebx
c001d0d0:	83 ec 20             	sub    esp,0x20
c001d0d3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d0d7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d0db:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d0df:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d0e3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d0e7:	6a 01                	push   0x1
c001d0e9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0f0:	50                   	push   eax
c001d0f1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0f7:	e8 88 e9 ff ff       	call   c001ba84 <IDE::enableIRQs(unsigned char, bool)>
c001d0fc:	5e                   	pop    esi
c001d0fd:	58                   	pop    eax
c001d0fe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d105:	50                   	push   eax
c001d106:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d10c:	e8 45 e7 ff ff       	call   c001b856 <IDE::prepareInterrupt(unsigned char)>
c001d111:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d114:	e8 61 ff ff ff       	call   c001d07a <ATAPI::readyForCommand()>
c001d119:	83 c4 10             	add    esp,0x10
c001d11c:	84 c0                	test   al,al
c001d11e:	75 0a                	jne    c001d12a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d120:	bb 01 00 00 00       	mov    ebx,0x1
c001d125:	e9 60 02 00 00       	jmp    c001d38a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d12a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d130:	c1 e0 04             	shl    eax,0x4
c001d133:	0f b6 c0             	movzx  eax,al
c001d136:	50                   	push   eax
c001d137:	6a 06                	push   0x6
c001d139:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d140:	50                   	push   eax
c001d141:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d147:	e8 30 e7 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d14c:	6a 00                	push   0x0
c001d14e:	6a 01                	push   0x1
c001d150:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d157:	50                   	push   eax
c001d158:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d15e:	e8 19 e7 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d163:	83 c4 20             	add    esp,0x20
c001d166:	0f b6 c3             	movzx  eax,bl
c001d169:	0f b6 df             	movzx  ebx,bh
c001d16c:	50                   	push   eax
c001d16d:	6a 04                	push   0x4
c001d16f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d176:	50                   	push   eax
c001d177:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d17d:	e8 fa e6 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d182:	53                   	push   ebx
c001d183:	6a 05                	push   0x5
c001d185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d18c:	50                   	push   eax
c001d18d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d193:	e8 e4 e6 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d198:	83 c4 20             	add    esp,0x20
c001d19b:	68 a0 00 00 00       	push   0xa0
c001d1a0:	6a 07                	push   0x7
c001d1a2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1a9:	50                   	push   eax
c001d1aa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1b0:	e8 c7 e6 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1b5:	83 c4 0c             	add    esp,0xc
c001d1b8:	6a 01                	push   0x1
c001d1ba:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1c1:	50                   	push   eax
c001d1c2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1c8:	e8 97 f1 ff ff       	call   c001c364 <IDE::polling(unsigned char, unsigned int)>
c001d1cd:	83 c4 10             	add    esp,0x10
c001d1d0:	0f b6 d8             	movzx  ebx,al
c001d1d3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d1d9:	85 db                	test   ebx,ebx
c001d1db:	74 20                	je     c001d1fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d1dd:	53                   	push   ebx
c001d1de:	0f b6 c0             	movzx  eax,al
c001d1e1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d1e8:	52                   	push   edx
c001d1e9:	50                   	push   eax
c001d1ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1f0:	e8 b5 f0 ff ff       	call   c001c2aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d1f5:	83 c4 10             	add    esp,0x10
c001d1f8:	e9 8d 01 00 00       	jmp    c001d38a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d1fd:	0f b6 c0             	movzx  eax,al
c001d200:	53                   	push   ebx
c001d201:	53                   	push   ebx
c001d202:	50                   	push   eax
c001d203:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d209:	e8 5c e6 ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001d20e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d212:	b9 06 00 00 00       	mov    ecx,0x6
c001d217:	89 c2                	mov    edx,eax
c001d219:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d21c:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d220:	83 c4 10             	add    esp,0x10
c001d223:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d22c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d232:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d239:	85 db                	test   ebx,ebx
c001d23b:	0f 84 ec 00 00 00    	je     c001d32d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d241:	51                   	push   ecx
c001d242:	51                   	push   ecx
c001d243:	52                   	push   edx
c001d244:	50                   	push   eax
c001d245:	e8 a0 e7 ff ff       	call   c001b9ea <IDE::waitInterrupt(unsigned char)>
c001d24a:	83 c4 10             	add    esp,0x10
c001d24d:	84 c0                	test   al,al
c001d24f:	0f 84 cb fe ff ff    	je     c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d255:	56                   	push   esi
c001d256:	56                   	push   esi
c001d257:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d25e:	50                   	push   eax
c001d25f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d265:	e8 ec e5 ff ff       	call   c001b856 <IDE::prepareInterrupt(unsigned char)>
c001d26a:	83 c4 0c             	add    esp,0xc
c001d26d:	6a 04                	push   0x4
c001d26f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d276:	50                   	push   eax
c001d277:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d27d:	e8 ba e6 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001d282:	83 c4 0c             	add    esp,0xc
c001d285:	89 c6                	mov    esi,eax
c001d287:	6a 05                	push   0x5
c001d289:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d290:	50                   	push   eax
c001d291:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d297:	e8 a0 e6 ff ff       	call   c001b93c <IDE::read(unsigned char, unsigned char)>
c001d29c:	89 f1                	mov    ecx,esi
c001d29e:	0f b6 c0             	movzx  eax,al
c001d2a1:	0f b6 f1             	movzx  esi,cl
c001d2a4:	c1 e0 08             	shl    eax,0x8
c001d2a7:	09 c6                	or     esi,eax
c001d2a9:	d1 fe                	sar    esi,1
c001d2ab:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d2b7:	74 41                	je     c001d2fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d2b9:	31 c9                	xor    ecx,ecx
c001d2bb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d2c1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d2c8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d2cc:	75 0a                	jne    c001d2d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d2ce:	01 c9                	add    ecx,ecx
c001d2d0:	01 cd                	add    ebp,ecx
c001d2d2:	4b                   	dec    ebx
c001d2d3:	e9 54 ff ff ff       	jmp    c001d22c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d2d8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d2dd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d2e1:	51                   	push   ecx
c001d2e2:	51                   	push   ecx
c001d2e3:	52                   	push   edx
c001d2e4:	50                   	push   eax
c001d2e5:	e8 80 e5 ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001d2ea:	89 c2                	mov    edx,eax
c001d2ec:	89 f0                	mov    eax,esi
c001d2ee:	66 ef                	out    dx,ax
c001d2f0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2f4:	83 c4 10             	add    esp,0x10
c001d2f7:	41                   	inc    ecx
c001d2f8:	eb c1                	jmp    c001d2bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d2fa:	31 f6                	xor    esi,esi
c001d2fc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d302:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d309:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d30d:	75 06                	jne    c001d315 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d30f:	01 f6                	add    esi,esi
c001d311:	01 f5                	add    ebp,esi
c001d313:	eb bd                	jmp    c001d2d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d315:	51                   	push   ecx
c001d316:	51                   	push   ecx
c001d317:	52                   	push   edx
c001d318:	50                   	push   eax
c001d319:	e8 4c e5 ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001d31e:	89 c2                	mov    edx,eax
c001d320:	66 ed                	in     ax,dx
c001d322:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d327:	83 c4 10             	add    esp,0x10
c001d32a:	46                   	inc    esi
c001d32b:	eb cf                	jmp    c001d2fc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d32d:	51                   	push   ecx
c001d32e:	51                   	push   ecx
c001d32f:	52                   	push   edx
c001d330:	50                   	push   eax
c001d331:	e8 b4 e6 ff ff       	call   c001b9ea <IDE::waitInterrupt(unsigned char)>
c001d336:	83 c4 10             	add    esp,0x10
c001d339:	84 c0                	test   al,al
c001d33b:	0f 84 df fd ff ff    	je     c001d120 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d341:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d346:	52                   	push   edx
c001d347:	52                   	push   edx
c001d348:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d34f:	50                   	push   eax
c001d350:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d356:	e8 fb e4 ff ff       	call   c001b856 <IDE::prepareInterrupt(unsigned char)>
c001d35b:	83 c4 10             	add    esp,0x10
c001d35e:	50                   	push   eax
c001d35f:	50                   	push   eax
c001d360:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d367:	50                   	push   eax
c001d368:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d36e:	e8 f7 e4 ff ff       	call   c001b86a <IDE::getBase(unsigned char)>
c001d373:	8d 50 07             	lea    edx,[eax+0x7]
c001d376:	ec                   	in     al,dx
c001d377:	83 c4 10             	add    esp,0x10
c001d37a:	a8 88                	test   al,0x88
c001d37c:	74 0a                	je     c001d388 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d37e:	4b                   	dec    ebx
c001d37f:	75 dd                	jne    c001d35e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d381:	bb 02 00 00 00       	mov    ebx,0x2
c001d386:	eb 02                	jmp    c001d38a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d388:	31 db                	xor    ebx,ebx
c001d38a:	83 c4 1c             	add    esp,0x1c
c001d38d:	89 d8                	mov    eax,ebx
c001d38f:	5b                   	pop    ebx
c001d390:	5e                   	pop    esi
c001d391:	5f                   	pop    edi
c001d392:	5d                   	pop    ebp
c001d393:	c3                   	ret    

c001d394 <ATAPI::diskRemoved()>:
c001d394:	53                   	push   ebx
c001d395:	83 ec 14             	sub    esp,0x14
c001d398:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d39c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d3a3:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d3a9:	e8 7c 06 ff ff       	call   c000da2a <LogicalDisk::unmount()>
c001d3ae:	58                   	pop    eax
c001d3af:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d3b5:	e8 52 10 ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c001d3ba:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d3c0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d3c4:	83 c4 18             	add    esp,0x18
c001d3c7:	5b                   	pop    ebx
c001d3c8:	e9 2f 10 ff ff       	jmp    c000e3fc <VCache::invalidateReadBuffer()>
c001d3cd:	90                   	nop

c001d3ce <ATAPI::eject()>:
c001d3ce:	57                   	push   edi
c001d3cf:	b9 03 00 00 00       	mov    ecx,0x3
c001d3d4:	53                   	push   ebx
c001d3d5:	83 ec 14             	sub    esp,0x14
c001d3d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d3dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d3e0:	fc                   	cld    
c001d3e1:	31 c0                	xor    eax,eax
c001d3e3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d3e5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d3ea:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d3ef:	50                   	push   eax
c001d3f0:	50                   	push   eax
c001d3f1:	6a 00                	push   0x0
c001d3f3:	6a 00                	push   0x0
c001d3f5:	6a 00                	push   0x0
c001d3f7:	6a 02                	push   0x2
c001d3f9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d3fd:	50                   	push   eax
c001d3fe:	53                   	push   ebx
c001d3ff:	e8 c8 fc ff ff       	call   c001d0cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d404:	83 c4 14             	add    esp,0x14
c001d407:	53                   	push   ebx
c001d408:	e8 87 ff ff ff       	call   c001d394 <ATAPI::diskRemoved()>
c001d40d:	83 c4 24             	add    esp,0x24
c001d410:	31 c0                	xor    eax,eax
c001d412:	5b                   	pop    ebx
c001d413:	5f                   	pop    edi
c001d414:	c3                   	ret    
c001d415:	90                   	nop

c001d416 <ATAPI::diskInserted()>:
c001d416:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d41a:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d421:	c3                   	ret    

c001d422 <ATAPI::detectMedia()>:
c001d422:	56                   	push   esi
c001d423:	53                   	push   ebx
c001d424:	83 ec 28             	sub    esp,0x28
c001d427:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d42b:	6a 0c                	push   0xc
c001d42d:	6a 00                	push   0x0
c001d42f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d433:	56                   	push   esi
c001d434:	e8 b7 30 fe ff       	call   c00004f0 <memset>
c001d439:	58                   	pop    eax
c001d43a:	5a                   	pop    edx
c001d43b:	6a 00                	push   0x0
c001d43d:	6a 00                	push   0x0
c001d43f:	6a 00                	push   0x0
c001d441:	6a 00                	push   0x0
c001d443:	56                   	push   esi
c001d444:	53                   	push   ebx
c001d445:	e8 82 fc ff ff       	call   c001d0cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d44a:	83 c4 1c             	add    esp,0x1c
c001d44d:	6a 0c                	push   0xc
c001d44f:	6a 00                	push   0x0
c001d451:	56                   	push   esi
c001d452:	e8 99 30 fe ff       	call   c00004f0 <memset>
c001d457:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d45c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d461:	59                   	pop    ecx
c001d462:	58                   	pop    eax
c001d463:	6a 01                	push   0x1
c001d465:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d469:	50                   	push   eax
c001d46a:	6a 00                	push   0x0
c001d46c:	6a 12                	push   0x12
c001d46e:	56                   	push   esi
c001d46f:	53                   	push   ebx
c001d470:	e8 57 fc ff ff       	call   c001d0cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d475:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d479:	83 c4 20             	add    esp,0x20
c001d47c:	83 e0 7f             	and    eax,0x7f
c001d47f:	83 f8 70             	cmp    eax,0x70
c001d482:	74 15                	je     c001d499 <ATAPI::detectMedia()+0x77>
c001d484:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d48b:	75 0c                	jne    c001d499 <ATAPI::detectMedia()+0x77>
c001d48d:	83 ec 0c             	sub    esp,0xc
c001d490:	53                   	push   ebx
c001d491:	e8 80 ff ff ff       	call   c001d416 <ATAPI::diskInserted()>
c001d496:	83 c4 10             	add    esp,0x10
c001d499:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d49d:	83 e0 0f             	and    eax,0xf
c001d4a0:	83 f8 02             	cmp    eax,0x2
c001d4a3:	75 1b                	jne    c001d4c0 <ATAPI::detectMedia()+0x9e>
c001d4a5:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d4aa:	75 2d                	jne    c001d4d9 <ATAPI::detectMedia()+0xb7>
c001d4ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4b3:	74 24                	je     c001d4d9 <ATAPI::detectMedia()+0xb7>
c001d4b5:	83 ec 0c             	sub    esp,0xc
c001d4b8:	53                   	push   ebx
c001d4b9:	e8 d6 fe ff ff       	call   c001d394 <ATAPI::diskRemoved()>
c001d4be:	eb 16                	jmp    c001d4d6 <ATAPI::detectMedia()+0xb4>
c001d4c0:	85 c0                	test   eax,eax
c001d4c2:	75 15                	jne    c001d4d9 <ATAPI::detectMedia()+0xb7>
c001d4c4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4cb:	75 0c                	jne    c001d4d9 <ATAPI::detectMedia()+0xb7>
c001d4cd:	83 ec 0c             	sub    esp,0xc
c001d4d0:	53                   	push   ebx
c001d4d1:	e8 40 ff ff ff       	call   c001d416 <ATAPI::diskInserted()>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	83 c4 24             	add    esp,0x24
c001d4dc:	5b                   	pop    ebx
c001d4dd:	5e                   	pop    esi
c001d4de:	c3                   	ret    
c001d4df:	90                   	nop

c001d4e0 <ATAPI::open(int, int, void*)>:
c001d4e0:	56                   	push   esi
c001d4e1:	53                   	push   ebx
c001d4e2:	50                   	push   eax
c001d4e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d4e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d4eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d4ef:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d4f5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d4fb:	c1 e0 06             	shl    eax,0x6
c001d4fe:	01 d0                	add    eax,edx
c001d500:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d507:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d50d:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d514:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d51e:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d524:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d52b:	6a 04                	push   0x4
c001d52d:	6a 0c                	push   0xc
c001d52f:	51                   	push   ecx
c001d530:	52                   	push   edx
c001d531:	e8 46 e3 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d536:	90                   	nop
c001d537:	90                   	nop
c001d538:	6a 00                	push   0x0
c001d53a:	6a 0c                	push   0xc
c001d53c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d543:	50                   	push   eax
c001d544:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d54a:	e8 2d e3 ff ff       	call   c001b87c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d54f:	83 c4 14             	add    esp,0x14
c001d552:	68 78 01 00 00       	push   0x178
c001d557:	e8 5a a5 fe ff       	call   c0007ab6 <malloc>
c001d55c:	83 c4 0c             	add    esp,0xc
c001d55f:	89 c6                	mov    esi,eax
c001d561:	6a 00                	push   0x0
c001d563:	68 ff ff ff 7f       	push   0x7fffffff
c001d568:	6a 00                	push   0x0
c001d56a:	6a 00                	push   0x0
c001d56c:	53                   	push   ebx
c001d56d:	68 ef 2e 02 c0       	push   0xc0022eef
c001d572:	50                   	push   eax
c001d573:	e8 f0 02 ff ff       	call   c000d868 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d578:	83 c4 14             	add    esp,0x14
c001d57b:	56                   	push   esi
c001d57c:	e8 a7 03 ff ff       	call   c000d928 <LogicalDisk::assignDriveLetter()>
c001d581:	5a                   	pop    edx
c001d582:	0f be c0             	movsx  eax,al
c001d585:	59                   	pop    ecx
c001d586:	50                   	push   eax
c001d587:	68 40 2d 02 c0       	push   0xc0022d40
c001d58c:	e8 b4 d3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d591:	58                   	pop    eax
c001d592:	5a                   	pop    edx
c001d593:	56                   	push   esi
c001d594:	53                   	push   ebx
c001d595:	e8 28 f1 fe ff       	call   c000c6c2 <Device::addChild(Device*)>
c001d59a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d5a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5a3:	e8 4e f5 fe ff       	call   c000caf6 <PhysicalDisk::startCache()>
c001d5a8:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d5af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5b2:	e8 6b fe ff ff       	call   c001d422 <ATAPI::detectMedia()>
c001d5b7:	83 c4 14             	add    esp,0x14
c001d5ba:	31 c0                	xor    eax,eax
c001d5bc:	5b                   	pop    ebx
c001d5bd:	5e                   	pop    esi
c001d5be:	c3                   	ret    
c001d5bf:	90                   	nop

c001d5c0 <ATAPI::read(unsigned long long, int, void*)>:
c001d5c0:	55                   	push   ebp
c001d5c1:	57                   	push   edi
c001d5c2:	56                   	push   esi
c001d5c3:	53                   	push   ebx
c001d5c4:	83 ec 1c             	sub    esp,0x1c
c001d5c7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d5cb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d5cf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d5d3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5da:	74 3c                	je     c001d618 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d5dc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d5e0:	b9 03 00 00 00       	mov    ecx,0x3
c001d5e5:	fc                   	cld    
c001d5e6:	31 c0                	xor    eax,eax
c001d5e8:	0f ce                	bswap  esi
c001d5ea:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d5ec:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d5f1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d5f5:	89 e8                	mov    eax,ebp
c001d5f7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d5fb:	50                   	push   eax
c001d5fc:	50                   	push   eax
c001d5fd:	55                   	push   ebp
c001d5fe:	c1 e5 0b             	shl    ebp,0xb
c001d601:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d605:	6a 00                	push   0x0
c001d607:	55                   	push   ebp
c001d608:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d60c:	50                   	push   eax
c001d60d:	53                   	push   ebx
c001d60e:	e8 b9 fa ff ff       	call   c001d0cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d613:	83 c4 20             	add    esp,0x20
c001d616:	eb 1a                	jmp    c001d632 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d618:	83 ec 0c             	sub    esp,0xc
c001d61b:	53                   	push   ebx
c001d61c:	e8 01 fe ff ff       	call   c001d422 <ATAPI::detectMedia()>
c001d621:	83 c4 10             	add    esp,0x10
c001d624:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d62b:	75 af                	jne    c001d5dc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d62d:	b8 02 00 00 00       	mov    eax,0x2
c001d632:	83 c4 1c             	add    esp,0x1c
c001d635:	5b                   	pop    ebx
c001d636:	5e                   	pop    esi
c001d637:	5f                   	pop    edi
c001d638:	5d                   	pop    ebp
c001d639:	c3                   	ret    

c001d63a <SATA::close(int, int, void*)>:
c001d63a:	83 ec 0c             	sub    esp,0xc
c001d63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d641:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d647:	85 c0                	test   eax,eax
c001d649:	74 0c                	je     c001d657 <SATA::close(int, int, void*)+0x1d>
c001d64b:	83 ec 0c             	sub    esp,0xc
c001d64e:	8b 10                	mov    edx,DWORD PTR [eax]
c001d650:	50                   	push   eax
c001d651:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	31 c0                	xor    eax,eax
c001d659:	83 c4 0c             	add    esp,0xc
c001d65c:	c3                   	ret    
c001d65d:	90                   	nop

c001d65e <SATA::powerSaving(PowerSavingLevel)>:
c001d65e:	c3                   	ret    
c001d65f:	90                   	nop

c001d660 <SATA::open(int, int, void*)>:
c001d660:	56                   	push   esi
c001d661:	53                   	push   ebx
c001d662:	50                   	push   eax
c001d663:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d667:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d66b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d675:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d67b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d685:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d689:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d693:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d699:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d6a0:	e8 1a a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d6a5:	89 c6                	mov    esi,eax
c001d6a7:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d6ad:	81 c6 00 10 00 00    	add    esi,0x1000
c001d6b3:	e8 07 a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d6b8:	39 c6                	cmp    esi,eax
c001d6ba:	74 10                	je     c001d6cc <SATA::open(int, int, void*)+0x6c>
c001d6bc:	83 ec 0c             	sub    esp,0xc
c001d6bf:	68 88 2d 02 c0       	push   0xc0022d88
c001d6c4:	e8 28 3c ff ff       	call   c00112f1 <KePanic(char const*)>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	83 ec 0c             	sub    esp,0xc
c001d6cf:	6a 02                	push   0x2
c001d6d1:	e8 37 bf fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d6d6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d6dc:	6a 03                	push   0x3
c001d6de:	50                   	push   eax
c001d6df:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d6e5:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d6eb:	e8 30 c6 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d6f0:	83 c4 14             	add    esp,0x14
c001d6f3:	53                   	push   ebx
c001d6f4:	e8 fd f3 fe ff       	call   c000caf6 <PhysicalDisk::startCache()>
c001d6f9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6fc:	e8 39 06 ff ff       	call   c000dd3a <createPartitionsForDisk(PhysicalDisk*)>
c001d701:	83 c4 14             	add    esp,0x14
c001d704:	31 c0                	xor    eax,eax
c001d706:	5b                   	pop    ebx
c001d707:	5e                   	pop    esi
c001d708:	c3                   	ret    
c001d709:	90                   	nop

c001d70a <SATA::SATA()>:
c001d70a:	83 ec 0c             	sub    esp,0xc
c001d70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d711:	83 ec 04             	sub    esp,0x4
c001d714:	68 00 02 00 00       	push   0x200
c001d719:	68 9c 2d 02 c0       	push   0xc0022d9c
c001d71e:	50                   	push   eax
c001d71f:	e8 6a f3 fe ff       	call   c000ca8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d724:	83 c4 10             	add    esp,0x10
c001d727:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001d72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d730:	89 10                	mov    DWORD PTR [eax],edx
c001d732:	90                   	nop
c001d733:	83 c4 0c             	add    esp,0xc
c001d736:	c3                   	ret    
c001d737:	90                   	nop

c001d738 <SATA::access(unsigned long long, int, void*, bool)>:
c001d738:	55                   	push   ebp
c001d739:	57                   	push   edi
c001d73a:	56                   	push   esi
c001d73b:	53                   	push   ebx
c001d73c:	83 ec 2c             	sub    esp,0x2c
c001d73f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d743:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d747:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d74b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d74f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d753:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d758:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d75c:	7e 10                	jle    c001d76e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d75e:	83 ec 0c             	sub    esp,0xc
c001d761:	68 ac 2d 02 c0       	push   0xc0022dac
c001d766:	e8 86 3b ff ff       	call   c00112f1 <KePanic(char const*)>
c001d76b:	83 c4 10             	add    esp,0x10
c001d76e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d774:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d77a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d780:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d784:	89 d0                	mov    eax,edx
c001d786:	c1 e0 07             	shl    eax,0x7
c001d789:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d78d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d797:	51                   	push   ecx
c001d798:	8d 42 02             	lea    eax,[edx+0x2]
c001d79b:	51                   	push   ecx
c001d79c:	c1 e0 07             	shl    eax,0x7
c001d79f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d7a7:	50                   	push   eax
c001d7a8:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d7ae:	e8 91 ec ff ff       	call   c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d7b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d7bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d7c3:	0f 84 57 01 00 00    	je     c001d920 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d7c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7cd:	c1 e0 09             	shl    eax,0x9
c001d7d0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d7d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d7d9:	74 0e                	je     c001d7e9 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d7db:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d7e1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d7e5:	89 c1                	mov    ecx,eax
c001d7e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d7e9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d7ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d7f3:	8d 42 02             	lea    eax,[edx+0x2]
c001d7f6:	c1 e0 07             	shl    eax,0x7
c001d7f9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d7fd:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7ff:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d805:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d80b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d80f:	c1 e1 05             	shl    ecx,0x5
c001d812:	01 c8                	add    eax,ecx
c001d814:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d818:	83 e1 01             	and    ecx,0x1
c001d81b:	89 ce                	mov    esi,ecx
c001d81d:	8a 08                	mov    cl,BYTE PTR [eax]
c001d81f:	c1 e6 06             	shl    esi,0x6
c001d822:	83 e1 bf             	and    ecx,0xffffffbf
c001d825:	09 f1                	or     ecx,esi
c001d827:	88 08                	mov    BYTE PTR [eax],cl
c001d829:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d82b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d831:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d837:	89 08                	mov    DWORD PTR [eax],ecx
c001d839:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d83f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d845:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d84b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d84e:	50                   	push   eax
c001d84f:	68 90 00 00 00       	push   0x90
c001d854:	6a 00                	push   0x0
c001d856:	56                   	push   esi
c001d857:	e8 94 2c fe ff       	call   c00004f0 <memset>
c001d85c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d862:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d868:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d86c:	83 c4 10             	add    esp,0x10
c001d86f:	48                   	dec    eax
c001d870:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d875:	89 c1                	mov    ecx,eax
c001d877:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d87d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d882:	09 c8                	or     eax,ecx
c001d884:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d88a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d890:	83 c8 80             	or     eax,0xffffff80
c001d893:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d899:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d89c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d8a0:	25 00 7f 00 00       	and    eax,0x7f00
c001d8a5:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d8aa:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d8af:	66 89 06             	mov    WORD PTR [esi],ax
c001d8b2:	b0 35                	mov    al,0x35
c001d8b4:	75 02                	jne    c001d8b8 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d8b6:	b0 25                	mov    al,0x25
c001d8b8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d8bb:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d8bf:	89 e8                	mov    eax,ebp
c001d8c1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d8c5:	c1 e8 10             	shr    eax,0x10
c001d8c8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d8cb:	89 e8                	mov    eax,ebp
c001d8cd:	c1 e8 18             	shr    eax,0x18
c001d8d0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d8d3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d8d7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d8da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8de:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d8e1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d8e5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d8e9:	89 d6                	mov    esi,edx
c001d8eb:	31 c0                	xor    eax,eax
c001d8ed:	c1 e6 07             	shl    esi,0x7
c001d8f0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d8f4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d8fa:	80 e1 88             	and    cl,0x88
c001d8fd:	74 0a                	je     c001d909 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d8ff:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d904:	74 0a                	je     c001d910 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d906:	40                   	inc    eax
c001d907:	eb eb                	jmp    c001d8f4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d909:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d90e:	75 17                	jne    c001d927 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d910:	83 ec 0c             	sub    esp,0xc
c001d913:	68 e5 2d 02 c0       	push   0xc0022de5
c001d918:	e8 28 d0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d91d:	83 c4 10             	add    esp,0x10
c001d920:	b8 01 00 00 00       	mov    eax,0x1
c001d925:	eb 5d                	jmp    c001d984 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d927:	b8 01 00 00 00       	mov    eax,0x1
c001d92c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d930:	c1 e2 07             	shl    edx,0x7
c001d933:	d3 e0                	shl    eax,cl
c001d935:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d939:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d93f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d945:	85 c8                	test   eax,ecx
c001d947:	74 16                	je     c001d95f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d949:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d94f:	0f ba e1 1e          	bt     ecx,0x1e
c001d953:	73 ea                	jae    c001d93f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d955:	83 ec 0c             	sub    esp,0xc
c001d958:	68 f3 2d 02 c0       	push   0xc0022df3
c001d95d:	eb b9                	jmp    c001d918 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d95f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d965:	0f ba e0 1e          	bt     eax,0x1e
c001d969:	72 b5                	jb     c001d920 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d96b:	31 c0                	xor    eax,eax
c001d96d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d972:	75 10                	jne    c001d984 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d974:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d97a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d97e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d982:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d984:	83 c4 2c             	add    esp,0x2c
c001d987:	5b                   	pop    ebx
c001d988:	5e                   	pop    esi
c001d989:	5f                   	pop    edi
c001d98a:	5d                   	pop    ebp
c001d98b:	c3                   	ret    

c001d98c <SATA::read(unsigned long long, int, void*)>:
c001d98c:	55                   	push   ebp
c001d98d:	57                   	push   edi
c001d98e:	56                   	push   esi
c001d98f:	be 04 00 00 00       	mov    esi,0x4
c001d994:	53                   	push   ebx
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d99c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d9a0:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d9a3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d9a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d9ab:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d9b1:	0f 87 1a 02 00 00    	ja     c001dbd1 <SATA::read(unsigned long long, int, void*)+0x245>
c001d9b7:	be 06 00 00 00       	mov    esi,0x6
c001d9bc:	85 c9                	test   ecx,ecx
c001d9be:	0f 84 0d 02 00 00    	je     c001dbd1 <SATA::read(unsigned long long, int, void*)+0x245>
c001d9c4:	56                   	push   esi
c001d9c5:	56                   	push   esi
c001d9c6:	6a 00                	push   0x0
c001d9c8:	51                   	push   ecx
c001d9c9:	53                   	push   ebx
c001d9ca:	52                   	push   edx
c001d9cb:	50                   	push   eax
c001d9cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9d0:	e8 63 fd ff ff       	call   c001d738 <SATA::access(unsigned long long, int, void*, bool)>
c001d9d5:	83 c4 20             	add    esp,0x20
c001d9d8:	89 c6                	mov    esi,eax
c001d9da:	85 c0                	test   eax,eax
c001d9dc:	0f 85 ea 01 00 00    	jne    c001dbcc <SATA::read(unsigned long long, int, void*)+0x240>
c001d9e2:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d9e8:	bb 0a 00 00 00       	mov    ebx,0xa
c001d9ed:	50                   	push   eax
c001d9ee:	50                   	push   eax
c001d9ef:	6a 0f                	push   0xf
c001d9f1:	6a 00                	push   0x0
c001d9f3:	e8 75 f2 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001d9f8:	5a                   	pop    edx
c001d9f9:	0f b6 c0             	movzx  eax,al
c001d9fc:	59                   	pop    ecx
c001d9fd:	b9 10 27 00 00       	mov    ecx,0x2710
c001da02:	50                   	push   eax
c001da03:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da08:	99                   	cdq    
c001da09:	f7 f9                	idiv   ecx
c001da0b:	99                   	cdq    
c001da0c:	f7 fb                	idiv   ebx
c001da0e:	8d 42 30             	lea    eax,[edx+0x30]
c001da11:	0f b6 c0             	movzx  eax,al
c001da14:	50                   	push   eax
c001da15:	e8 42 f2 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001da1a:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001da20:	5f                   	pop    edi
c001da21:	5d                   	pop    ebp
c001da22:	bd e8 03 00 00       	mov    ebp,0x3e8
c001da27:	6a 0f                	push   0xf
c001da29:	6a 00                	push   0x0
c001da2b:	e8 3d f2 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001da30:	5a                   	pop    edx
c001da31:	0f b6 c0             	movzx  eax,al
c001da34:	59                   	pop    ecx
c001da35:	50                   	push   eax
c001da36:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da3b:	99                   	cdq    
c001da3c:	f7 fd                	idiv   ebp
c001da3e:	99                   	cdq    
c001da3f:	f7 fb                	idiv   ebx
c001da41:	8d 42 30             	lea    eax,[edx+0x30]
c001da44:	0f b6 c0             	movzx  eax,al
c001da47:	50                   	push   eax
c001da48:	e8 0f f2 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001da4d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001da53:	5f                   	pop    edi
c001da54:	bf 64 00 00 00       	mov    edi,0x64
c001da59:	58                   	pop    eax
c001da5a:	6a 0f                	push   0xf
c001da5c:	6a 00                	push   0x0
c001da5e:	e8 0a f2 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001da63:	5a                   	pop    edx
c001da64:	0f b6 c0             	movzx  eax,al
c001da67:	59                   	pop    ecx
c001da68:	50                   	push   eax
c001da69:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da6e:	99                   	cdq    
c001da6f:	f7 ff                	idiv   edi
c001da71:	99                   	cdq    
c001da72:	f7 fb                	idiv   ebx
c001da74:	8d 42 30             	lea    eax,[edx+0x30]
c001da77:	0f b6 c0             	movzx  eax,al
c001da7a:	50                   	push   eax
c001da7b:	e8 dc f1 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001da80:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001da86:	58                   	pop    eax
c001da87:	5a                   	pop    edx
c001da88:	6a 0f                	push   0xf
c001da8a:	6a 00                	push   0x0
c001da8c:	e8 dc f1 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001da91:	59                   	pop    ecx
c001da92:	0f b6 c0             	movzx  eax,al
c001da95:	5a                   	pop    edx
c001da96:	50                   	push   eax
c001da97:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da9c:	99                   	cdq    
c001da9d:	f7 fb                	idiv   ebx
c001da9f:	99                   	cdq    
c001daa0:	f7 fb                	idiv   ebx
c001daa2:	8d 42 30             	lea    eax,[edx+0x30]
c001daa5:	0f b6 c0             	movzx  eax,al
c001daa8:	50                   	push   eax
c001daa9:	e8 ae f1 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001daae:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dab4:	59                   	pop    ecx
c001dab5:	58                   	pop    eax
c001dab6:	6a 0f                	push   0xf
c001dab8:	6a 00                	push   0x0
c001daba:	e8 ae f1 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dabf:	5a                   	pop    edx
c001dac0:	0f b6 c0             	movzx  eax,al
c001dac3:	59                   	pop    ecx
c001dac4:	50                   	push   eax
c001dac5:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001daca:	99                   	cdq    
c001dacb:	f7 fb                	idiv   ebx
c001dacd:	8d 42 30             	lea    eax,[edx+0x30]
c001dad0:	0f b6 c0             	movzx  eax,al
c001dad3:	50                   	push   eax
c001dad4:	e8 83 f1 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dad9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dadf:	58                   	pop    eax
c001dae0:	5a                   	pop    edx
c001dae1:	6a 0f                	push   0xf
c001dae3:	6a 00                	push   0x0
c001dae5:	e8 83 f1 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001daea:	59                   	pop    ecx
c001daeb:	0f b6 c0             	movzx  eax,al
c001daee:	5a                   	pop    edx
c001daef:	b9 10 27 00 00       	mov    ecx,0x2710
c001daf4:	50                   	push   eax
c001daf5:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dafa:	99                   	cdq    
c001dafb:	f7 f9                	idiv   ecx
c001dafd:	99                   	cdq    
c001dafe:	f7 fb                	idiv   ebx
c001db00:	8d 42 30             	lea    eax,[edx+0x30]
c001db03:	0f b6 c0             	movzx  eax,al
c001db06:	50                   	push   eax
c001db07:	e8 50 f1 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001db0c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001db12:	59                   	pop    ecx
c001db13:	58                   	pop    eax
c001db14:	6a 0f                	push   0xf
c001db16:	6a 00                	push   0x0
c001db18:	e8 50 f1 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001db1d:	5a                   	pop    edx
c001db1e:	0f b6 c0             	movzx  eax,al
c001db21:	59                   	pop    ecx
c001db22:	50                   	push   eax
c001db23:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db28:	99                   	cdq    
c001db29:	f7 fd                	idiv   ebp
c001db2b:	99                   	cdq    
c001db2c:	f7 fb                	idiv   ebx
c001db2e:	8d 42 30             	lea    eax,[edx+0x30]
c001db31:	0f b6 c0             	movzx  eax,al
c001db34:	50                   	push   eax
c001db35:	e8 22 f1 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001db3a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001db40:	5d                   	pop    ebp
c001db41:	58                   	pop    eax
c001db42:	6a 0f                	push   0xf
c001db44:	6a 00                	push   0x0
c001db46:	e8 22 f1 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001db4b:	5a                   	pop    edx
c001db4c:	0f b6 c0             	movzx  eax,al
c001db4f:	59                   	pop    ecx
c001db50:	50                   	push   eax
c001db51:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db56:	99                   	cdq    
c001db57:	f7 ff                	idiv   edi
c001db59:	99                   	cdq    
c001db5a:	f7 fb                	idiv   ebx
c001db5c:	8d 42 30             	lea    eax,[edx+0x30]
c001db5f:	0f b6 c0             	movzx  eax,al
c001db62:	50                   	push   eax
c001db63:	e8 f4 f0 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001db68:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001db6e:	5f                   	pop    edi
c001db6f:	5d                   	pop    ebp
c001db70:	6a 0f                	push   0xf
c001db72:	6a 00                	push   0x0
c001db74:	e8 f4 f0 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001db79:	5a                   	pop    edx
c001db7a:	0f b6 c0             	movzx  eax,al
c001db7d:	59                   	pop    ecx
c001db7e:	50                   	push   eax
c001db7f:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db84:	99                   	cdq    
c001db85:	f7 fb                	idiv   ebx
c001db87:	99                   	cdq    
c001db88:	f7 fb                	idiv   ebx
c001db8a:	8d 42 30             	lea    eax,[edx+0x30]
c001db8d:	0f b6 c0             	movzx  eax,al
c001db90:	50                   	push   eax
c001db91:	e8 c6 f0 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001db96:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001db9c:	5f                   	pop    edi
c001db9d:	5d                   	pop    ebp
c001db9e:	6a 0f                	push   0xf
c001dba0:	6a 00                	push   0x0
c001dba2:	e8 c6 f0 ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dba7:	5a                   	pop    edx
c001dba8:	0f b6 c0             	movzx  eax,al
c001dbab:	59                   	pop    ecx
c001dbac:	50                   	push   eax
c001dbad:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dbb2:	99                   	cdq    
c001dbb3:	f7 fb                	idiv   ebx
c001dbb5:	83 c2 30             	add    edx,0x30
c001dbb8:	0f b6 d2             	movzx  edx,dl
c001dbbb:	52                   	push   edx
c001dbbc:	e8 9b f0 ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dbc1:	83 c4 10             	add    esp,0x10
c001dbc4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dbca:	eb 05                	jmp    c001dbd1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dbcc:	be 01 00 00 00       	mov    esi,0x1
c001dbd1:	83 c4 0c             	add    esp,0xc
c001dbd4:	89 f0                	mov    eax,esi
c001dbd6:	5b                   	pop    ebx
c001dbd7:	5e                   	pop    esi
c001dbd8:	5f                   	pop    edi
c001dbd9:	5d                   	pop    ebp
c001dbda:	c3                   	ret    
c001dbdb:	90                   	nop

c001dbdc <SATA::write(unsigned long long, int, void*)>:
c001dbdc:	55                   	push   ebp
c001dbdd:	b8 04 00 00 00       	mov    eax,0x4
c001dbe2:	57                   	push   edi
c001dbe3:	56                   	push   esi
c001dbe4:	53                   	push   ebx
c001dbe5:	83 ec 1c             	sub    esp,0x1c
c001dbe8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dbec:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001dbf0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001dbf3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001dbf7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001dbfb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dc01:	0f 87 32 02 00 00    	ja     c001de39 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dc07:	b8 06 00 00 00       	mov    eax,0x6
c001dc0c:	85 ff                	test   edi,edi
c001dc0e:	0f 84 25 02 00 00    	je     c001de39 <SATA::write(unsigned long long, int, void*)+0x25d>
c001dc14:	89 ee                	mov    esi,ebp
c001dc16:	c1 e6 09             	shl    esi,0x9
c001dc19:	01 fe                	add    esi,edi
c001dc1b:	89 c8                	mov    eax,ecx
c001dc1d:	89 da                	mov    edx,ebx
c001dc1f:	83 c0 01             	add    eax,0x1
c001dc22:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc26:	83 d2 00             	adc    edx,0x0
c001dc29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc2d:	50                   	push   eax
c001dc2e:	50                   	push   eax
c001dc2f:	6a 01                	push   0x1
c001dc31:	57                   	push   edi
c001dc32:	81 c7 00 02 00 00    	add    edi,0x200
c001dc38:	6a 01                	push   0x1
c001dc3a:	53                   	push   ebx
c001dc3b:	51                   	push   ecx
c001dc3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dc40:	e8 f3 fa ff ff       	call   c001d738 <SATA::access(unsigned long long, int, void*, bool)>
c001dc45:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dc49:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dc4d:	83 c4 20             	add    esp,0x20
c001dc50:	39 f7                	cmp    edi,esi
c001dc52:	75 c7                	jne    c001dc1b <SATA::write(unsigned long long, int, void*)+0x3f>
c001dc54:	bb 0a 00 00 00       	mov    ebx,0xa
c001dc59:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dc5f:	bd 10 27 00 00       	mov    ebp,0x2710
c001dc64:	50                   	push   eax
c001dc65:	50                   	push   eax
c001dc66:	6a 0f                	push   0xf
c001dc68:	6a 00                	push   0x0
c001dc6a:	e8 fe ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dc6f:	5a                   	pop    edx
c001dc70:	0f b6 c0             	movzx  eax,al
c001dc73:	59                   	pop    ecx
c001dc74:	50                   	push   eax
c001dc75:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc7a:	99                   	cdq    
c001dc7b:	f7 fd                	idiv   ebp
c001dc7d:	99                   	cdq    
c001dc7e:	f7 fb                	idiv   ebx
c001dc80:	8d 42 30             	lea    eax,[edx+0x30]
c001dc83:	0f b6 c0             	movzx  eax,al
c001dc86:	50                   	push   eax
c001dc87:	e8 d0 ef ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dc8c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc92:	5e                   	pop    esi
c001dc93:	5f                   	pop    edi
c001dc94:	bf e8 03 00 00       	mov    edi,0x3e8
c001dc99:	6a 0f                	push   0xf
c001dc9b:	6a 00                	push   0x0
c001dc9d:	e8 cb ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dca2:	5a                   	pop    edx
c001dca3:	0f b6 c0             	movzx  eax,al
c001dca6:	59                   	pop    ecx
c001dca7:	50                   	push   eax
c001dca8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcad:	99                   	cdq    
c001dcae:	f7 ff                	idiv   edi
c001dcb0:	99                   	cdq    
c001dcb1:	f7 fb                	idiv   ebx
c001dcb3:	8d 42 30             	lea    eax,[edx+0x30]
c001dcb6:	0f b6 c0             	movzx  eax,al
c001dcb9:	50                   	push   eax
c001dcba:	e8 9d ef ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dcbf:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dcc5:	5e                   	pop    esi
c001dcc6:	be 64 00 00 00       	mov    esi,0x64
c001dccb:	58                   	pop    eax
c001dccc:	6a 0f                	push   0xf
c001dcce:	6a 00                	push   0x0
c001dcd0:	e8 98 ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dcd5:	5a                   	pop    edx
c001dcd6:	0f b6 c0             	movzx  eax,al
c001dcd9:	59                   	pop    ecx
c001dcda:	50                   	push   eax
c001dcdb:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dce0:	99                   	cdq    
c001dce1:	f7 fe                	idiv   esi
c001dce3:	99                   	cdq    
c001dce4:	f7 fb                	idiv   ebx
c001dce6:	8d 42 30             	lea    eax,[edx+0x30]
c001dce9:	0f b6 c0             	movzx  eax,al
c001dcec:	50                   	push   eax
c001dced:	e8 6a ef ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dcf2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dcf8:	58                   	pop    eax
c001dcf9:	5a                   	pop    edx
c001dcfa:	6a 0f                	push   0xf
c001dcfc:	6a 00                	push   0x0
c001dcfe:	e8 6a ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dd03:	59                   	pop    ecx
c001dd04:	0f b6 c0             	movzx  eax,al
c001dd07:	5a                   	pop    edx
c001dd08:	50                   	push   eax
c001dd09:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd0e:	99                   	cdq    
c001dd0f:	f7 fb                	idiv   ebx
c001dd11:	99                   	cdq    
c001dd12:	f7 fb                	idiv   ebx
c001dd14:	8d 42 30             	lea    eax,[edx+0x30]
c001dd17:	0f b6 c0             	movzx  eax,al
c001dd1a:	50                   	push   eax
c001dd1b:	e8 3c ef ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dd20:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dd26:	59                   	pop    ecx
c001dd27:	58                   	pop    eax
c001dd28:	6a 0f                	push   0xf
c001dd2a:	6a 00                	push   0x0
c001dd2c:	e8 3c ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dd31:	5a                   	pop    edx
c001dd32:	0f b6 c0             	movzx  eax,al
c001dd35:	59                   	pop    ecx
c001dd36:	50                   	push   eax
c001dd37:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dd3c:	99                   	cdq    
c001dd3d:	f7 fb                	idiv   ebx
c001dd3f:	83 c2 30             	add    edx,0x30
c001dd42:	0f b6 d2             	movzx  edx,dl
c001dd45:	52                   	push   edx
c001dd46:	e8 11 ef ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dd4b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dd51:	58                   	pop    eax
c001dd52:	5a                   	pop    edx
c001dd53:	6a 0f                	push   0xf
c001dd55:	6a 00                	push   0x0
c001dd57:	e8 11 ef ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dd5c:	59                   	pop    ecx
c001dd5d:	0f b6 c0             	movzx  eax,al
c001dd60:	5a                   	pop    edx
c001dd61:	50                   	push   eax
c001dd62:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd67:	99                   	cdq    
c001dd68:	f7 fd                	idiv   ebp
c001dd6a:	99                   	cdq    
c001dd6b:	f7 fb                	idiv   ebx
c001dd6d:	8d 42 30             	lea    eax,[edx+0x30]
c001dd70:	0f b6 c0             	movzx  eax,al
c001dd73:	50                   	push   eax
c001dd74:	e8 e3 ee ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dd79:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dd7f:	59                   	pop    ecx
c001dd80:	5d                   	pop    ebp
c001dd81:	6a 0f                	push   0xf
c001dd83:	6a 00                	push   0x0
c001dd85:	e8 e3 ee ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dd8a:	5a                   	pop    edx
c001dd8b:	0f b6 c0             	movzx  eax,al
c001dd8e:	59                   	pop    ecx
c001dd8f:	50                   	push   eax
c001dd90:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd95:	99                   	cdq    
c001dd96:	f7 ff                	idiv   edi
c001dd98:	99                   	cdq    
c001dd99:	f7 fb                	idiv   ebx
c001dd9b:	8d 42 30             	lea    eax,[edx+0x30]
c001dd9e:	0f b6 c0             	movzx  eax,al
c001dda1:	50                   	push   eax
c001dda2:	e8 b5 ee ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001dda7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ddad:	5f                   	pop    edi
c001ddae:	5d                   	pop    ebp
c001ddaf:	6a 0f                	push   0xf
c001ddb1:	6a 00                	push   0x0
c001ddb3:	e8 b5 ee ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001ddb8:	5a                   	pop    edx
c001ddb9:	0f b6 c0             	movzx  eax,al
c001ddbc:	59                   	pop    ecx
c001ddbd:	50                   	push   eax
c001ddbe:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddc3:	99                   	cdq    
c001ddc4:	f7 fe                	idiv   esi
c001ddc6:	99                   	cdq    
c001ddc7:	f7 fb                	idiv   ebx
c001ddc9:	8d 42 30             	lea    eax,[edx+0x30]
c001ddcc:	0f b6 c0             	movzx  eax,al
c001ddcf:	50                   	push   eax
c001ddd0:	e8 87 ee ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001ddd5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dddb:	5e                   	pop    esi
c001dddc:	5f                   	pop    edi
c001dddd:	6a 0f                	push   0xf
c001dddf:	6a 00                	push   0x0
c001dde1:	e8 87 ee ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001dde6:	5d                   	pop    ebp
c001dde7:	0f b6 c0             	movzx  eax,al
c001ddea:	5a                   	pop    edx
c001ddeb:	50                   	push   eax
c001ddec:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001ddf1:	99                   	cdq    
c001ddf2:	f7 fb                	idiv   ebx
c001ddf4:	99                   	cdq    
c001ddf5:	f7 fb                	idiv   ebx
c001ddf7:	8d 42 30             	lea    eax,[edx+0x30]
c001ddfa:	0f b6 c0             	movzx  eax,al
c001ddfd:	50                   	push   eax
c001ddfe:	e8 59 ee ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001de03:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001de09:	59                   	pop    ecx
c001de0a:	5e                   	pop    esi
c001de0b:	6a 0f                	push   0xf
c001de0d:	6a 00                	push   0x0
c001de0f:	e8 59 ee ff ff       	call   c001cc6d <combineColours(unsigned char, unsigned char)>
c001de14:	5f                   	pop    edi
c001de15:	0f b6 c0             	movzx  eax,al
c001de18:	5d                   	pop    ebp
c001de19:	50                   	push   eax
c001de1a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001de1f:	99                   	cdq    
c001de20:	f7 fb                	idiv   ebx
c001de22:	83 c2 30             	add    edx,0x30
c001de25:	0f b6 d2             	movzx  edx,dl
c001de28:	52                   	push   edx
c001de29:	e8 2e ee ff ff       	call   c001cc5c <combineCharAndColour(char, unsigned char)>
c001de2e:	83 c4 10             	add    esp,0x10
c001de31:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001de37:	31 c0                	xor    eax,eax
c001de39:	83 c4 1c             	add    esp,0x1c
c001de3c:	5b                   	pop    ebx
c001de3d:	5e                   	pop    esi
c001de3e:	5f                   	pop    edi
c001de3f:	5d                   	pop    ebp
c001de40:	c3                   	ret    
c001de41:	90                   	nop

c001de42 <SATAPI::write(unsigned long long, int, void*)>:
c001de42:	b8 03 00 00 00       	mov    eax,0x3
c001de47:	c3                   	ret    

c001de48 <SATAPI::close(int, int, void*)>:
c001de48:	83 ec 0c             	sub    esp,0xc
c001de4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de4f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001de55:	85 c0                	test   eax,eax
c001de57:	74 0c                	je     c001de65 <SATAPI::close(int, int, void*)+0x1d>
c001de59:	83 ec 0c             	sub    esp,0xc
c001de5c:	8b 10                	mov    edx,DWORD PTR [eax]
c001de5e:	50                   	push   eax
c001de5f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	31 c0                	xor    eax,eax
c001de67:	83 c4 0c             	add    esp,0xc
c001de6a:	c3                   	ret    
c001de6b:	90                   	nop

c001de6c <SATAPI::SATAPI()>:
c001de6c:	83 ec 0c             	sub    esp,0xc
c001de6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de73:	83 ec 04             	sub    esp,0x4
c001de76:	68 00 08 00 00       	push   0x800
c001de7b:	68 3c 2e 02 c0       	push   0xc0022e3c
c001de80:	50                   	push   eax
c001de81:	e8 08 ec fe ff       	call   c000ca8e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001de86:	83 c4 10             	add    esp,0x10
c001de89:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001de8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de92:	89 10                	mov    DWORD PTR [eax],edx
c001de94:	90                   	nop
c001de95:	83 c4 0c             	add    esp,0xc
c001de98:	c3                   	ret    
c001de99:	90                   	nop

c001de9a <SATAPI::diskRemoved()>:
c001de9a:	c3                   	ret    
c001de9b:	90                   	nop

c001de9c <SATAPI::diskInserted()>:
c001de9c:	83 ec 18             	sub    esp,0x18
c001de9f:	68 48 2e 02 c0       	push   0xc0022e48
c001dea4:	e8 9c ca fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dea9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dead:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001deb4:	83 c4 1c             	add    esp,0x1c
c001deb7:	c3                   	ret    

c001deb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001deb8:	55                   	push   ebp
c001deb9:	57                   	push   edi
c001deba:	56                   	push   esi
c001debb:	53                   	push   ebx
c001debc:	83 ec 34             	sub    esp,0x34
c001debf:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001dec3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dec7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001decb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001decf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ded3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ded9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dedf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dee3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001dee9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001deed:	83 c0 02             	add    eax,0x2
c001def0:	c1 e0 07             	shl    eax,0x7
c001def3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001def7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001defb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001deff:	c1 e0 07             	shl    eax,0x7
c001df02:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001df06:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001df0a:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001df14:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df18:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df1e:	e8 21 e5 ff ff       	call   c001c444 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001df23:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001df27:	83 c4 10             	add    esp,0x10
c001df2a:	b8 01 00 00 00       	mov    eax,0x1
c001df2f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001df34:	0f 84 53 02 00 00    	je     c001e18d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001df3a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df44:	8b 00                	mov    eax,DWORD PTR [eax]
c001df46:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001df4c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001df52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001df56:	c1 e1 05             	shl    ecx,0x5
c001df59:	01 c8                	add    eax,ecx
c001df5b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001df5d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001df63:	81 c9 25 00 01 00    	or     ecx,0x10025
c001df69:	89 08                	mov    DWORD PTR [eax],ecx
c001df6b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001df71:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001df77:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001df7d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001df80:	8d 7b 40             	lea    edi,[ebx+0x40]
c001df83:	50                   	push   eax
c001df84:	68 90 00 00 00       	push   0x90
c001df89:	6a 00                	push   0x0
c001df8b:	53                   	push   ebx
c001df8c:	e8 5f 25 fe ff       	call   c00004f0 <memset>
c001df91:	b9 0c 00 00 00       	mov    ecx,0xc
c001df96:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001df9a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df9c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001dfa2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dfa6:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001dfac:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001dfb0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001dfb4:	48                   	dec    eax
c001dfb5:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dfba:	89 c1                	mov    ecx,eax
c001dfbc:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001dfc2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dfc7:	09 c8                	or     eax,ecx
c001dfc9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001dfcf:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001dfd5:	83 c8 80             	or     eax,0xffffff80
c001dfd8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001dfde:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001dfe1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dfe5:	25 00 7f 00 00       	and    eax,0x7f00
c001dfea:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001dfee:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dff3:	66 89 03             	mov    WORD PTR [ebx],ax
c001dff6:	89 d0                	mov    eax,edx
c001dff8:	c1 ea 18             	shr    edx,0x18
c001dffb:	c1 e8 10             	shr    eax,0x10
c001dffe:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e001:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e004:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e008:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e00b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e00f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e012:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e016:	83 c4 10             	add    esp,0x10
c001e019:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e01d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e021:	31 c0                	xor    eax,eax
c001e023:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e029:	80 e1 88             	and    cl,0x88
c001e02c:	74 0a                	je     c001e038 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e02e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e033:	74 0a                	je     c001e03f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e035:	40                   	inc    eax
c001e036:	eb eb                	jmp    c001e023 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e038:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e03d:	75 43                	jne    c001e082 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e03f:	83 ec 0c             	sub    esp,0xc
c001e042:	68 60 2e 02 c0       	push   0xc0022e60
c001e047:	e8 f9 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e04c:	58                   	pop    eax
c001e04d:	5a                   	pop    edx
c001e04e:	68 75 2e 02 c0       	push   0xc0022e75
c001e053:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001e059:	e8 48 aa fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e05e:	59                   	pop    ecx
c001e05f:	5b                   	pop    ebx
c001e060:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e064:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e06a:	e8 6f e4 ff ff       	call   c001c4de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e06f:	5e                   	pop    esi
c001e070:	5f                   	pop    edi
c001e071:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e075:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e07b:	e8 3e e4 ff ff       	call   c001c4be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e080:	eb 48                	jmp    c001e0ca <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e082:	be 01 00 00 00       	mov    esi,0x1
c001e087:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e08b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e08f:	d3 e6                	shl    esi,cl
c001e091:	c1 e7 07             	shl    edi,0x7
c001e094:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e09a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e09f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e0a3:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e0a9:	85 c6                	test   esi,eax
c001e0ab:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e0b1:	0f 84 a3 00 00 00    	je     c001e15a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e0b7:	0f ba e0 1e          	bt     eax,0x1e
c001e0bb:	73 1a                	jae    c001e0d7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e0bd:	83 ec 0c             	sub    esp,0xc
c001e0c0:	68 87 2e 02 c0       	push   0xc0022e87
c001e0c5:	e8 7b c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0ca:	83 c4 10             	add    esp,0x10
c001e0cd:	b8 01 00 00 00       	mov    eax,0x1
c001e0d2:	e9 b6 00 00 00       	jmp    c001e18d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e0d7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e0dd:	83 f8 0d             	cmp    eax,0xd
c001e0e0:	77 0a                	ja     c001e0ec <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e0e2:	83 ec 0c             	sub    esp,0xc
c001e0e5:	68 c8 00 00 00       	push   0xc8
c001e0ea:	eb 28                	jmp    c001e114 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e0ec:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e0f2:	83 f8 0d             	cmp    eax,0xd
c001e0f5:	77 0a                	ja     c001e101 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e0f7:	83 ec 0c             	sub    esp,0xc
c001e0fa:	68 58 02 00 00       	push   0x258
c001e0ff:	eb 13                	jmp    c001e114 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e101:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e107:	83 f8 06             	cmp    eax,0x6
c001e10a:	77 10                	ja     c001e11c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	68 dc 05 00 00       	push   0x5dc
c001e114:	e8 c7 7d ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001e119:	83 c4 10             	add    esp,0x10
c001e11c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e120:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e123:	75 06                	jne    c001e12b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e125:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e129:	74 15                	je     c001e140 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e12b:	83 fb 06             	cmp    ebx,0x6
c001e12e:	77 10                	ja     c001e140 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e130:	83 ec 0c             	sub    esp,0xc
c001e133:	68 c4 09 00 00       	push   0x9c4
c001e138:	e8 a3 7d ff ff       	call   c0015ee0 <milliTenthSleep(unsigned int)>
c001e13d:	83 c4 10             	add    esp,0x10
c001e140:	43                   	inc    ebx
c001e141:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e147:	0f 85 56 ff ff ff    	jne    c001e0a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e14d:	83 ec 0c             	sub    esp,0xc
c001e150:	68 9a 2e 02 c0       	push   0xc0022e9a
c001e155:	e9 6b ff ff ff       	jmp    c001e0c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e15a:	0f ba e0 1e          	bt     eax,0x1e
c001e15e:	73 0d                	jae    c001e16d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	68 ae 2e 02 c0       	push   0xc0022eae
c001e168:	e9 58 ff ff ff       	jmp    c001e0c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e16d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e172:	74 17                	je     c001e18b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e174:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e179:	74 10                	je     c001e18b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e17b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e181:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e185:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e189:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e18b:	31 c0                	xor    eax,eax
c001e18d:	83 c4 2c             	add    esp,0x2c
c001e190:	5b                   	pop    ebx
c001e191:	5e                   	pop    esi
c001e192:	5f                   	pop    edi
c001e193:	5d                   	pop    ebp
c001e194:	c3                   	ret    
c001e195:	90                   	nop

c001e196 <SATAPI::eject()>:
c001e196:	57                   	push   edi
c001e197:	b9 03 00 00 00       	mov    ecx,0x3
c001e19c:	83 ec 18             	sub    esp,0x18
c001e19f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e1a3:	fc                   	cld    
c001e1a4:	31 c0                	xor    eax,eax
c001e1a6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e1a8:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e1ad:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e1b2:	50                   	push   eax
c001e1b3:	6a 00                	push   0x0
c001e1b5:	6a 00                	push   0x0
c001e1b7:	6a 00                	push   0x0
c001e1b9:	6a 00                	push   0x0
c001e1bb:	6a 02                	push   0x2
c001e1bd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e1c1:	50                   	push   eax
c001e1c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1c6:	e8 ed fc ff ff       	call   c001deb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e1cb:	31 c0                	xor    eax,eax
c001e1cd:	83 c4 38             	add    esp,0x38
c001e1d0:	5f                   	pop    edi
c001e1d1:	c3                   	ret    

c001e1d2 <SATAPI::detectMedia()>:
c001e1d2:	53                   	push   ebx
c001e1d3:	83 ec 14             	sub    esp,0x14
c001e1d6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e1da:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e1e0:	e8 27 02 ff ff       	call   c000e40c <VCache::writeWriteBuffer()>
c001e1e5:	59                   	pop    ecx
c001e1e6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e1ec:	e8 0b 02 ff ff       	call   c000e3fc <VCache::invalidateReadBuffer()>
c001e1f1:	c7 04 24 c3 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec3
c001e1f8:	e8 48 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e1fd:	83 c4 10             	add    esp,0x10
c001e200:	31 c0                	xor    eax,eax
c001e202:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e209:	85 d2                	test   edx,edx
c001e20b:	74 0f                	je     c001e21c <SATAPI::detectMedia()+0x4a>
c001e20d:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e213:	75 07                	jne    c001e21c <SATAPI::detectMedia()+0x4a>
c001e215:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e21c:	40                   	inc    eax
c001e21d:	83 f8 1a             	cmp    eax,0x1a
c001e220:	75 e0                	jne    c001e202 <SATAPI::detectMedia()+0x30>
c001e222:	83 c4 08             	add    esp,0x8
c001e225:	5b                   	pop    ebx
c001e226:	c3                   	ret    
c001e227:	90                   	nop

c001e228 <SATAPI::open(int, int, void*)>:
c001e228:	56                   	push   esi
c001e229:	53                   	push   ebx
c001e22a:	51                   	push   ecx
c001e22b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e22f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e233:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e23d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e243:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e251:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e25b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e261:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e268:	e8 52 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e26d:	89 c6                	mov    esi,eax
c001e26f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e275:	81 c6 00 10 00 00    	add    esi,0x1000
c001e27b:	e8 3f 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e280:	39 c6                	cmp    esi,eax
c001e282:	74 10                	je     c001e294 <SATAPI::open(int, int, void*)+0x6c>
c001e284:	83 ec 0c             	sub    esp,0xc
c001e287:	68 d8 2e 02 c0       	push   0xc0022ed8
c001e28c:	e8 60 30 ff ff       	call   c00112f1 <KePanic(char const*)>
c001e291:	83 c4 10             	add    esp,0x10
c001e294:	83 ec 0c             	sub    esp,0xc
c001e297:	6a 02                	push   0x2
c001e299:	e8 6f b3 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e29e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e2a4:	6a 03                	push   0x3
c001e2a6:	50                   	push   eax
c001e2a7:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e2ad:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e2b3:	e8 68 ba fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e2b8:	83 c4 14             	add    esp,0x14
c001e2bb:	68 78 01 00 00       	push   0x178
c001e2c0:	e8 f1 97 fe ff       	call   c0007ab6 <malloc>
c001e2c5:	83 c4 0c             	add    esp,0xc
c001e2c8:	89 c6                	mov    esi,eax
c001e2ca:	6a 00                	push   0x0
c001e2cc:	68 ff ff ff 7f       	push   0x7fffffff
c001e2d1:	6a 00                	push   0x0
c001e2d3:	6a 00                	push   0x0
c001e2d5:	53                   	push   ebx
c001e2d6:	68 ee 2e 02 c0       	push   0xc0022eee
c001e2db:	50                   	push   eax
c001e2dc:	e8 87 f5 fe ff       	call   c000d868 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e2e1:	83 c4 14             	add    esp,0x14
c001e2e4:	56                   	push   esi
c001e2e5:	e8 3e f6 fe ff       	call   c000d928 <LogicalDisk::assignDriveLetter()>
c001e2ea:	5a                   	pop    edx
c001e2eb:	0f be c0             	movsx  eax,al
c001e2ee:	59                   	pop    ecx
c001e2ef:	50                   	push   eax
c001e2f0:	68 40 2d 02 c0       	push   0xc0022d40
c001e2f5:	e8 4b c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e2fa:	58                   	pop    eax
c001e2fb:	5a                   	pop    edx
c001e2fc:	56                   	push   esi
c001e2fd:	53                   	push   ebx
c001e2fe:	e8 bf e3 fe ff       	call   c000c6c2 <Device::addChild(Device*)>
c001e303:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e309:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e30c:	e8 e5 e7 fe ff       	call   c000caf6 <PhysicalDisk::startCache()>
c001e311:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e31b:	e8 b2 fe ff ff       	call   c001e1d2 <SATAPI::detectMedia()>
c001e320:	83 c4 14             	add    esp,0x14
c001e323:	31 c0                	xor    eax,eax
c001e325:	5b                   	pop    ebx
c001e326:	5e                   	pop    esi
c001e327:	c3                   	ret    

c001e328 <SATAPI::read(unsigned long long, int, void*)>:
c001e328:	57                   	push   edi
c001e329:	56                   	push   esi
c001e32a:	53                   	push   ebx
c001e32b:	83 ec 30             	sub    esp,0x30
c001e32e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e332:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e336:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e33a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e33e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e342:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e346:	83 fe 04             	cmp    esi,0x4
c001e349:	7e 10                	jle    c001e35b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e34b:	83 ec 0c             	sub    esp,0xc
c001e34e:	68 fc 2e 02 c0       	push   0xc0022efc
c001e353:	e8 99 2f ff ff       	call   c00112f1 <KePanic(char const*)>
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e361:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e367:	51                   	push   ecx
c001e368:	50                   	push   eax
c001e369:	83 c0 02             	add    eax,0x2
c001e36c:	c1 e0 07             	shl    eax,0x7
c001e36f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e375:	50                   	push   eax
c001e376:	52                   	push   edx
c001e377:	e8 8c e1 ff ff       	call   c001c508 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e37c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e380:	b9 03 00 00 00       	mov    ecx,0x3
c001e385:	fc                   	cld    
c001e386:	31 c0                	xor    eax,eax
c001e388:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e38a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e38f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e394:	83 c4 0c             	add    esp,0xc
c001e397:	6a 00                	push   0x0
c001e399:	6a 00                	push   0x0
c001e39b:	6a 00                	push   0x0
c001e39d:	6a 00                	push   0x0
c001e39f:	6a 02                	push   0x2
c001e3a1:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e3a5:	50                   	push   eax
c001e3a6:	53                   	push   ebx
c001e3a7:	e8 0c fb ff ff       	call   c001deb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3ac:	83 c4 20             	add    esp,0x20
c001e3af:	85 c0                	test   eax,eax
c001e3b1:	75 44                	jne    c001e3f7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e3b3:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e3b7:	b9 03 00 00 00       	mov    ecx,0x3
c001e3bc:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e3be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3c2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e3c7:	0f c8                	bswap  eax
c001e3c9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e3cd:	89 f0                	mov    eax,esi
c001e3cf:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e3d3:	50                   	push   eax
c001e3d4:	56                   	push   esi
c001e3d5:	c1 e6 0b             	shl    esi,0xb
c001e3d8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e3dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e3e4:	56                   	push   esi
c001e3e5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e3e9:	50                   	push   eax
c001e3ea:	53                   	push   ebx
c001e3eb:	e8 c8 fa ff ff       	call   c001deb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e3f0:	83 c4 20             	add    esp,0x20
c001e3f3:	85 c0                	test   eax,eax
c001e3f5:	74 14                	je     c001e40b <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e3f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3fb:	83 ec 0c             	sub    esp,0xc
c001e3fe:	53                   	push   ebx
c001e3ff:	e8 ce fd ff ff       	call   c001e1d2 <SATAPI::detectMedia()>
c001e404:	83 c4 10             	add    esp,0x10
c001e407:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e40b:	83 c4 30             	add    esp,0x30
c001e40e:	5b                   	pop    ebx
c001e40f:	5e                   	pop    esi
c001e410:	5f                   	pop    edi
c001e411:	c3                   	ret    

c001e412 <IOAPIC::close(int, int, void*)>:
c001e412:	b8 00 00 00 00       	mov    eax,0x0
c001e417:	c3                   	ret    

c001e418 <apicGetBase()>:
c001e418:	55                   	push   ebp
c001e419:	89 e5                	mov    ebp,esp
c001e41b:	83 ec 18             	sub    esp,0x18
c001e41e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e423:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e429:	83 e0 08             	and    eax,0x8
c001e42c:	0f b6 c0             	movzx  eax,al
c001e42f:	85 c0                	test   eax,eax
c001e431:	75 07                	jne    c001e43a <apicGetBase()+0x22>
c001e433:	b8 00 00 00 00       	mov    eax,0x0
c001e438:	eb 21                	jmp    c001e45b <apicGetBase()+0x43>
c001e43a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e43f:	83 ec 08             	sub    esp,0x8
c001e442:	6a 1b                	push   0x1b
c001e444:	50                   	push   eax
c001e445:	e8 76 8c fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e44a:	83 c4 10             	add    esp,0x10
c001e44d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e450:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e453:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e456:	25 00 00 ff ff       	and    eax,0xffff0000
c001e45b:	c9                   	leave  
c001e45c:	c3                   	ret    
c001e45d:	90                   	nop

c001e45e <IOAPIC::IOAPIC()>:
c001e45e:	83 ec 0c             	sub    esp,0xc
c001e461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e465:	83 ec 08             	sub    esp,0x8
c001e468:	68 60 2f 02 c0       	push   0xc0022f60
c001e46d:	50                   	push   eax
c001e46e:	e8 e7 e3 fe ff       	call   c000c85a <Device::Device(char const*)>
c001e473:	83 c4 10             	add    esp,0x10
c001e476:	ba 70 2f 02 c0       	mov    edx,0xc0022f70
c001e47b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47f:	89 10                	mov    DWORD PTR [eax],edx
c001e481:	90                   	nop
c001e482:	83 c4 0c             	add    esp,0xc
c001e485:	c3                   	ret    

c001e486 <apicOpen()>:
c001e486:	55                   	push   ebp
c001e487:	89 e5                	mov    ebp,esp
c001e489:	53                   	push   ebx
c001e48a:	83 ec 34             	sub    esp,0x34
c001e48d:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e492:	83 f0 01             	xor    eax,0x1
c001e495:	0f b6 c0             	movzx  eax,al
c001e498:	85 c0                	test   eax,eax
c001e49a:	0f 84 a3 00 00 00    	je     c001e543 <apicOpen()+0xbd>
c001e4a0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e4a4:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e4a9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e4ad:	0f b6 c0             	movzx  eax,al
c001e4b0:	39 c2                	cmp    edx,eax
c001e4b2:	0f 83 84 00 00 00    	jae    c001e53c <apicOpen()+0xb6>
c001e4b8:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e4bf:	83 ec 0c             	sub    esp,0xc
c001e4c2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e4c5:	e8 ec 95 fe ff       	call   c0007ab6 <malloc>
c001e4ca:	83 c4 10             	add    esp,0x10
c001e4cd:	89 c3                	mov    ebx,eax
c001e4cf:	83 ec 0c             	sub    esp,0xc
c001e4d2:	53                   	push   ebx
c001e4d3:	e8 86 ff ff ff       	call   c001e45e <IOAPIC::IOAPIC()>
c001e4d8:	83 c4 10             	add    esp,0x10
c001e4db:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e4de:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e4e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e4e5:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e4ec:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e4f1:	83 c0 01             	add    eax,0x1
c001e4f4:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e4f9:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e4fe:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e504:	83 ec 08             	sub    esp,0x8
c001e507:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e50a:	50                   	push   eax
c001e50b:	e8 b2 e1 fe ff       	call   c000c6c2 <Device::addChild(Device*)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e516:	8b 00                	mov    eax,DWORD PTR [eax]
c001e518:	83 c0 08             	add    eax,0x8
c001e51b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e51d:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e521:	6a 00                	push   0x0
c001e523:	6a 00                	push   0x0
c001e525:	52                   	push   edx
c001e526:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e529:	ff d0                	call   eax
c001e52b:	83 c4 10             	add    esp,0x10
c001e52e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e531:	83 c0 01             	add    eax,0x1
c001e534:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e537:	e9 68 ff ff ff       	jmp    c001e4a4 <apicOpen()+0x1e>
c001e53c:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e543:	e8 d0 fe ff ff       	call   c001e418 <apicGetBase()>
c001e548:	05 f0 00 00 00       	add    eax,0xf0
c001e54d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e550:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e553:	8b 00                	mov    eax,DWORD PTR [eax]
c001e555:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e558:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e55f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e566:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e569:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e56c:	89 10                	mov    DWORD PTR [eax],edx
c001e56e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e575:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e57a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e57d:	7d 7c                	jge    c001e5fb <apicOpen()+0x175>
c001e57f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e582:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e589:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e58c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e58f:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e596:	c1 e8 08             	shr    eax,0x8
c001e599:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e59d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5a0:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e5a7:	c1 e8 18             	shr    eax,0x18
c001e5aa:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e5ad:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e5b1:	3d ff 00 00 00       	cmp    eax,0xff
c001e5b6:	75 3a                	jne    c001e5f2 <apicOpen()+0x16c>
c001e5b8:	e8 5b fe ff ff       	call   c001e418 <apicGetBase()>
c001e5bd:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e5c1:	83 fa 01             	cmp    edx,0x1
c001e5c4:	75 07                	jne    c001e5cd <apicOpen()+0x147>
c001e5c6:	ba 60 03 00 00       	mov    edx,0x360
c001e5cb:	eb 05                	jmp    c001e5d2 <apicOpen()+0x14c>
c001e5cd:	ba 50 03 00 00       	mov    edx,0x350
c001e5d2:	01 d0                	add    eax,edx
c001e5d4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e5d7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e5da:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5dc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e5df:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e5e6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e5ea:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e5ed:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e5f0:	89 10                	mov    DWORD PTR [eax],edx
c001e5f2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e5f6:	e9 7a ff ff ff       	jmp    c001e575 <apicOpen()+0xef>
c001e5fb:	90                   	nop
c001e5fc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e5ff:	c9                   	leave  
c001e600:	c3                   	ret    
c001e601:	90                   	nop

c001e602 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e602:	55                   	push   ebp
c001e603:	89 e5                	mov    ebp,esp
c001e605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e608:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e60e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e611:	72 1d                	jb     c001e630 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e616:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e61c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e625:	01 d0                	add    eax,edx
c001e627:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e62a:	73 04                	jae    c001e630 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e62c:	b0 01                	mov    al,0x1
c001e62e:	eb 02                	jmp    c001e632 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e630:	b0 00                	mov    al,0x0
c001e632:	5d                   	pop    ebp
c001e633:	c3                   	ret    

c001e634 <IOAPIC::read(int)>:
c001e634:	55                   	push   ebp
c001e635:	89 e5                	mov    ebp,esp
c001e637:	83 ec 10             	sub    esp,0x10
c001e63a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e63d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e643:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e646:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e649:	0f b6 d0             	movzx  edx,al
c001e64c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e64f:	89 10                	mov    DWORD PTR [eax],edx
c001e651:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e654:	83 c0 10             	add    eax,0x10
c001e657:	8b 00                	mov    eax,DWORD PTR [eax]
c001e659:	c9                   	leave  
c001e65a:	c3                   	ret    
c001e65b:	90                   	nop

c001e65c <IOAPIC::open(int, int, void*)>:
c001e65c:	55                   	push   ebp
c001e65d:	89 e5                	mov    ebp,esp
c001e65f:	57                   	push   edi
c001e660:	56                   	push   esi
c001e661:	53                   	push   ebx
c001e662:	83 ec 04             	sub    esp,0x4
c001e665:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e668:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e66b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e671:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e674:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e67a:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e684:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e68d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e693:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e69d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e6a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6b5:	0f b6 f0             	movzx  esi,al
c001e6b8:	89 d0                	mov    eax,edx
c001e6ba:	ba 00 00 00 00       	mov    edx,0x0
c001e6bf:	89 c7                	mov    edi,eax
c001e6c1:	83 e7 ff             	and    edi,0xffffffff
c001e6c4:	89 f9                	mov    ecx,edi
c001e6c6:	0f b6 da             	movzx  ebx,dl
c001e6c9:	89 c8                	mov    eax,ecx
c001e6cb:	89 da                	mov    edx,ebx
c001e6cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6d0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e6d3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e6d7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e6db:	83 e0 00             	and    eax,0x0
c001e6de:	09 d0                	or     eax,edx
c001e6e0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e6e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e6ed:	8d 50 01             	lea    edx,[eax+0x1]
c001e6f0:	88 d1                	mov    cl,dl
c001e6f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e6f5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e6fb:	0f b6 d0             	movzx  edx,al
c001e6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e701:	83 c2 08             	add    edx,0x8
c001e704:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e708:	0f b6 c9             	movzx  ecx,cl
c001e70b:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e711:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e715:	6a 01                	push   0x1
c001e717:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e71a:	e8 15 ff ff ff       	call   c001e634 <IOAPIC::read(int)>
c001e71f:	83 c4 08             	add    esp,0x8
c001e722:	c1 f8 10             	sar    eax,0x10
c001e725:	0f b6 c0             	movzx  eax,al
c001e728:	8d 50 01             	lea    edx,[eax+0x1]
c001e72b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e72e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e734:	b8 00 00 00 00       	mov    eax,0x0
c001e739:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e73c:	5b                   	pop    ebx
c001e73d:	5e                   	pop    esi
c001e73e:	5f                   	pop    edi
c001e73f:	5d                   	pop    ebp
c001e740:	c3                   	ret    
c001e741:	90                   	nop

c001e742 <IOAPIC::write(int, int)>:
c001e742:	55                   	push   ebp
c001e743:	89 e5                	mov    ebp,esp
c001e745:	83 ec 10             	sub    esp,0x10
c001e748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e74b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e751:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e757:	0f b6 d0             	movzx  edx,al
c001e75a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e75d:	89 10                	mov    DWORD PTR [eax],edx
c001e75f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e762:	8d 50 10             	lea    edx,[eax+0x10]
c001e765:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e768:	89 02                	mov    DWORD PTR [edx],eax
c001e76a:	90                   	nop
c001e76b:	c9                   	leave  
c001e76c:	c3                   	ret    
c001e76d:	90                   	nop

c001e76e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e76e:	55                   	push   ebp
c001e76f:	89 e5                	mov    ebp,esp
c001e771:	53                   	push   ebx
c001e772:	83 ec 2c             	sub    esp,0x2c
c001e775:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e778:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e77b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e77e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e781:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e784:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e787:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e78a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e78d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e790:	88 d8                	mov    al,bl
c001e792:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e795:	88 c8                	mov    al,cl
c001e797:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e79a:	88 d0                	mov    al,dl
c001e79c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e79f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e7a3:	83 c0 08             	add    eax,0x8
c001e7a6:	01 c0                	add    eax,eax
c001e7a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e7af:	83 c0 08             	add    eax,0x8
c001e7b2:	01 c0                	add    eax,eax
c001e7b4:	83 c0 01             	add    eax,0x1
c001e7b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e7ba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e7bd:	50                   	push   eax
c001e7be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7c1:	e8 6e fe ff ff       	call   c001e634 <IOAPIC::read(int)>
c001e7c6:	83 c4 08             	add    esp,0x8
c001e7c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e7cc:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e7d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e7d6:	c1 e0 18             	shl    eax,0x18
c001e7d9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e7dc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e7df:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e7e2:	52                   	push   edx
c001e7e3:	50                   	push   eax
c001e7e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7e7:	e8 56 ff ff ff       	call   c001e742 <IOAPIC::write(int, int)>
c001e7ec:	83 c4 0c             	add    esp,0xc
c001e7ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7f2:	50                   	push   eax
c001e7f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7f6:	e8 39 fe ff ff       	call   c001e634 <IOAPIC::read(int)>
c001e7fb:	83 c4 08             	add    esp,0x8
c001e7fe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e801:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e808:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e80f:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e816:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e81a:	85 c0                	test   eax,eax
c001e81c:	74 09                	je     c001e827 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e81e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e825:	eb 07                	jmp    c001e82e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e827:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e82e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e832:	85 c0                	test   eax,eax
c001e834:	74 09                	je     c001e83f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e836:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e83d:	eb 07                	jmp    c001e846 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e83f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e846:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e84d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e851:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e854:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e857:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e85a:	52                   	push   edx
c001e85b:	50                   	push   eax
c001e85c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e85f:	e8 de fe ff ff       	call   c001e742 <IOAPIC::write(int, int)>
c001e864:	83 c4 0c             	add    esp,0xc
c001e867:	90                   	nop
c001e868:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e86b:	c9                   	leave  
c001e86c:	c3                   	ret    
c001e86d:	66 90                	xchg   ax,ax
c001e86f:	90                   	nop

c001e870 <APICTimer::close(int, int, void*)>:
c001e870:	b8 00 00 00 00       	mov    eax,0x0
c001e875:	c3                   	ret    
c001e876:	66 90                	xchg   ax,ax

c001e878 <apicTimerHandler(regs*, void*)>:
c001e878:	83 ec 0c             	sub    esp,0xc
c001e87b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e87f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e881:	b8 10 27 00 00       	mov    eax,0x2710
c001e886:	ba 00 00 00 00       	mov    edx,0x0
c001e88b:	f7 f1                	div    ecx
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	50                   	push   eax
c001e891:	e8 8e f8 fe ff       	call   c000e124 <timerHandler(unsigned int)>
c001e896:	83 c4 10             	add    esp,0x10
c001e899:	90                   	nop
c001e89a:	83 c4 0c             	add    esp,0xc
c001e89d:	c3                   	ret    
c001e89e:	66 90                	xchg   ax,ax

c001e8a0 <APICTimer::open(int, int, void*)>:
c001e8a0:	83 ec 0c             	sub    esp,0xc
c001e8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8a9:	83 c0 24             	add    eax,0x24
c001e8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ae:	83 ec 08             	sub    esp,0x8
c001e8b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8b9:	ff d0                	call   eax
c001e8bb:	83 c4 10             	add    esp,0x10
c001e8be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8c6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8d4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e8da:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e8de:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e8e4:	83 ec 0c             	sub    esp,0xc
c001e8e7:	51                   	push   ecx
c001e8e8:	6a 01                	push   0x1
c001e8ea:	68 78 e8 01 c0       	push   0xc001e878
c001e8ef:	52                   	push   edx
c001e8f0:	50                   	push   eax
c001e8f1:	e8 78 dd fe ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e8f6:	83 c4 20             	add    esp,0x20
c001e8f9:	89 c2                	mov    edx,eax
c001e8fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8ff:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e905:	b8 00 00 00 00       	mov    eax,0x0
c001e90a:	83 c4 0c             	add    esp,0xc
c001e90d:	c3                   	ret    
c001e90e:	66 90                	xchg   ax,ax

c001e910 <APICTimer::write(int)>:
c001e910:	83 ec 0c             	sub    esp,0xc
c001e913:	83 ec 0c             	sub    esp,0xc
c001e916:	68 94 2f 02 c0       	push   0xc0022f94
c001e91b:	e8 d1 29 ff ff       	call   c00112f1 <KePanic(char const*)>
c001e920:	83 c4 10             	add    esp,0x10
c001e923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e927:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e92b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e931:	90                   	nop
c001e932:	83 c4 0c             	add    esp,0xc
c001e935:	c3                   	ret    
c001e936:	66 90                	xchg   ax,ax

c001e938 <APICTimer::APICTimer()>:
c001e938:	83 ec 0c             	sub    esp,0xc
c001e93b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e93f:	83 ec 08             	sub    esp,0x8
c001e942:	68 a4 2f 02 c0       	push   0xc0022fa4
c001e947:	50                   	push   eax
c001e948:	e8 0b f7 fe ff       	call   c000e058 <Timer::Timer(char const*)>
c001e94d:	83 c4 10             	add    esp,0x10
c001e950:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c001e955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e959:	89 10                	mov    DWORD PTR [eax],edx
c001e95b:	90                   	nop
c001e95c:	83 c4 0c             	add    esp,0xc
c001e95f:	c3                   	ret    

c001e960 <PIT::write(int)>:
c001e960:	83 ec 10             	sub    esp,0x10
c001e963:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e967:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e96b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e971:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e975:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e97a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e97f:	89 c2                	mov    edx,eax
c001e981:	c1 fa 1f             	sar    edx,0x1f
c001e984:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e988:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e98c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e993:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e998:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e99c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e9a1:	ee                   	out    dx,al
c001e9a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9a6:	0f b6 c0             	movzx  eax,al
c001e9a9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e9b0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e9b4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e9b8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e9bd:	ee                   	out    dx,al
c001e9be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9c2:	c1 f8 08             	sar    eax,0x8
c001e9c5:	0f b6 c0             	movzx  eax,al
c001e9c8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e9cf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e9d3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e9d7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e9dc:	ee                   	out    dx,al
c001e9dd:	90                   	nop
c001e9de:	83 c4 10             	add    esp,0x10
c001e9e1:	c3                   	ret    
c001e9e2:	66 90                	xchg   ax,ax

c001e9e4 <pitHandler(regs*, void*)>:
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e9ed:	b8 10 27 00 00       	mov    eax,0x2710
c001e9f2:	89 c2                	mov    edx,eax
c001e9f4:	c1 fa 1f             	sar    edx,0x1f
c001e9f7:	f7 f9                	idiv   ecx
c001e9f9:	83 ec 0c             	sub    esp,0xc
c001e9fc:	50                   	push   eax
c001e9fd:	e8 22 f7 fe ff       	call   c000e124 <timerHandler(unsigned int)>
c001ea02:	83 c4 10             	add    esp,0x10
c001ea05:	90                   	nop
c001ea06:	83 c4 0c             	add    esp,0xc
c001ea09:	c3                   	ret    
c001ea0a:	66 90                	xchg   ax,ax

c001ea0c <PIT::open(int, int, void*)>:
c001ea0c:	83 ec 0c             	sub    esp,0xc
c001ea0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea15:	83 c0 24             	add    eax,0x24
c001ea18:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea1a:	83 ec 08             	sub    esp,0x8
c001ea1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea25:	ff d0                	call   eax
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2e:	83 ec 0c             	sub    esp,0xc
c001ea31:	6a 00                	push   0x0
c001ea33:	6a 01                	push   0x1
c001ea35:	68 e4 e9 01 c0       	push   0xc001e9e4
c001ea3a:	6a 00                	push   0x0
c001ea3c:	50                   	push   eax
c001ea3d:	e8 2c dc fe ff       	call   c000c66e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea42:	83 c4 20             	add    esp,0x20
c001ea45:	89 c2                	mov    edx,eax
c001ea47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea4b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea51:	b8 00 00 00 00       	mov    eax,0x0
c001ea56:	83 c4 0c             	add    esp,0xc
c001ea59:	c3                   	ret    
c001ea5a:	66 90                	xchg   ax,ax

c001ea5c <PIT::close(int, int, void*)>:
c001ea5c:	83 ec 0c             	sub    esp,0xc
c001ea5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea63:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ea6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea71:	6a 01                	push   0x1
c001ea73:	68 e4 e9 01 c0       	push   0xc001e9e4
c001ea78:	6a 00                	push   0x0
c001ea7a:	50                   	push   eax
c001ea7b:	e8 24 dc fe ff       	call   c000c6a4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ea80:	83 c4 10             	add    esp,0x10
c001ea83:	b8 00 00 00 00       	mov    eax,0x0
c001ea88:	83 c4 0c             	add    esp,0xc
c001ea8b:	c3                   	ret    

c001ea8c <PIT::PIT()>:
c001ea8c:	83 ec 0c             	sub    esp,0xc
c001ea8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea93:	83 ec 08             	sub    esp,0x8
c001ea96:	68 e0 2f 02 c0       	push   0xc0022fe0
c001ea9b:	50                   	push   eax
c001ea9c:	e8 b7 f5 fe ff       	call   c000e058 <Timer::Timer(char const*)>
c001eaa1:	83 c4 10             	add    esp,0x10
c001eaa4:	ba 08 30 02 c0       	mov    edx,0xc0023008
c001eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaad:	89 10                	mov    DWORD PTR [eax],edx
c001eaaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eab9:	0f b6 d0             	movzx  edx,al
c001eabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eacb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ead1:	0f b6 d0             	movzx  edx,al
c001ead4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eae1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eae7:	8d 50 01             	lea    edx,[eax+0x1]
c001eaea:	88 d1                	mov    cl,dl
c001eaec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eaf0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001eaf6:	0f b6 d0             	movzx  edx,al
c001eaf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb01:	83 e1 3f             	and    ecx,0x3f
c001eb04:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb08:	90                   	nop
c001eb09:	83 c4 0c             	add    esp,0xc
c001eb0c:	c3                   	ret    
c001eb0d:	66 90                	xchg   ax,ax
c001eb0f:	90                   	nop

c001eb10 <avxDetect>:
c001eb10:	b8 01 00 00 00       	mov    eax,0x1
c001eb15:	0f a2                	cpuid  
c001eb17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eb1d:	74 15                	je     c001eb34 <avxDetect.noAVX>
c001eb1f:	b8 01 00 00 00       	mov    eax,0x1
c001eb24:	0f a2                	cpuid  
c001eb26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eb2c:	74 06                	je     c001eb34 <avxDetect.noAVX>
c001eb2e:	b8 01 00 00 00       	mov    eax,0x1
c001eb33:	c3                   	ret    

c001eb34 <avxDetect.noAVX>:
c001eb34:	b8 00 00 00 00       	mov    eax,0x0
c001eb39:	c3                   	ret    

c001eb3a <avxSave>:
c001eb3a:	53                   	push   ebx
c001eb3b:	52                   	push   edx
c001eb3c:	31 c0                	xor    eax,eax
c001eb3e:	48                   	dec    eax
c001eb3f:	89 c2                	mov    edx,eax
c001eb41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb45:	0f ae 23             	xsave  [ebx]
c001eb48:	5a                   	pop    edx
c001eb49:	5b                   	pop    ebx
c001eb4a:	c3                   	ret    

c001eb4b <avxLoad>:
c001eb4b:	53                   	push   ebx
c001eb4c:	52                   	push   edx
c001eb4d:	31 c0                	xor    eax,eax
c001eb4f:	48                   	dec    eax
c001eb50:	89 c2                	mov    edx,eax
c001eb52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb56:	0f ae 2b             	xrstor [ebx]
c001eb59:	5a                   	pop    edx
c001eb5a:	5b                   	pop    ebx
c001eb5b:	c3                   	ret    

c001eb5c <avxInit>:
c001eb5c:	e8 67 03 00 00       	call   c001eec8 <sseInit>
c001eb61:	50                   	push   eax
c001eb62:	51                   	push   ecx
c001eb63:	0f 20 e0             	mov    eax,cr4
c001eb66:	0d 00 00 04 00       	or     eax,0x40000
c001eb6b:	0f 22 e0             	mov    cr4,eax
c001eb6e:	31 c9                	xor    ecx,ecx
c001eb70:	0f 01 d0             	xgetbv 
c001eb73:	0d 07 00 00 00       	or     eax,0x7
c001eb78:	0f 01 d1             	xsetbv 
c001eb7b:	59                   	pop    ecx
c001eb7c:	58                   	pop    eax
c001eb7d:	c3                   	ret    

c001eb7e <avxClose>:
c001eb7e:	c3                   	ret    

c001eb7f <wouldSheSayYes>:
c001eb7f:	c3                   	ret    
c001eb80:	49                   	dec    ecx
c001eb81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eb85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eb89:	75 20                	jne    c001ebab <isr0+0xb>
c001eb8b:	4e                   	dec    esi
c001eb8c:	79 61                	jns    c001ebef <isr7+0x3>
c001eb8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eb93:	66 90                	xchg   ax,ax
c001eb95:	66 90                	xchg   ax,ax
c001eb97:	66 90                	xchg   ax,ax
c001eb99:	66 90                	xchg   ax,ax
c001eb9b:	66 90                	xchg   ax,ax
c001eb9d:	66 90                	xchg   ax,ax
c001eb9f:	90                   	nop

c001eba0 <isr0>:
c001eba0:	fa                   	cli    
c001eba1:	68 00 00 00 00       	push   0x0
c001eba6:	68 00 00 00 00       	push   0x0
c001ebab:	e9 56 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebb0 <isr1>:
c001ebb0:	fa                   	cli    
c001ebb1:	6a 00                	push   0x0
c001ebb3:	6a 01                	push   0x1
c001ebb5:	e9 4c 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebba <isr2>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 00                	push   0x0
c001ebbd:	6a 02                	push   0x2
c001ebbf:	e9 42 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebc4 <isr3>:
c001ebc4:	fa                   	cli    
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 03                	push   0x3
c001ebc9:	e9 38 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebce <isr4>:
c001ebce:	fa                   	cli    
c001ebcf:	6a 00                	push   0x0
c001ebd1:	6a 04                	push   0x4
c001ebd3:	e9 2e 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebd8 <isr5>:
c001ebd8:	fa                   	cli    
c001ebd9:	6a 00                	push   0x0
c001ebdb:	6a 05                	push   0x5
c001ebdd:	e9 24 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebe2 <isr6>:
c001ebe2:	fa                   	cli    
c001ebe3:	6a 00                	push   0x0
c001ebe5:	6a 06                	push   0x6
c001ebe7:	e9 1a 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebec <isr7>:
c001ebec:	fa                   	cli    
c001ebed:	6a 00                	push   0x0
c001ebef:	6a 07                	push   0x7
c001ebf1:	e9 10 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebf6 <isr8>:
c001ebf6:	fa                   	cli    
c001ebf7:	6a 08                	push   0x8
c001ebf9:	e9 08 01 00 00       	jmp    c001ed06 <int_common_stub>

c001ebfe <isr9>:
c001ebfe:	fa                   	cli    
c001ebff:	6a 00                	push   0x0
c001ec01:	6a 09                	push   0x9
c001ec03:	e9 fe 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec08 <isr10>:
c001ec08:	fa                   	cli    
c001ec09:	6a 0a                	push   0xa
c001ec0b:	e9 f6 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec10 <isr11>:
c001ec10:	fa                   	cli    
c001ec11:	6a 0b                	push   0xb
c001ec13:	e9 ee 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec18 <isr12>:
c001ec18:	fa                   	cli    
c001ec19:	6a 0c                	push   0xc
c001ec1b:	e9 e6 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec20 <isr13>:
c001ec20:	fa                   	cli    
c001ec21:	6a 0d                	push   0xd
c001ec23:	53                   	push   ebx
c001ec24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ec28:	81 fb f6 ed 01 c0    	cmp    ebx,0xc001edf6
c001ec2e:	5b                   	pop    ebx
c001ec2f:	0f 84 c3 01 00 00    	je     c001edf8 <finishSignal2>
c001ec35:	e9 cc 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec3a <isr14>:
c001ec3a:	fa                   	cli    
c001ec3b:	6a 0e                	push   0xe
c001ec3d:	e9 c4 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec42 <isr15>:
c001ec42:	fa                   	cli    
c001ec43:	6a 00                	push   0x0
c001ec45:	6a 0f                	push   0xf
c001ec47:	e9 ba 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec4c <isr16>:
c001ec4c:	fa                   	cli    
c001ec4d:	6a 00                	push   0x0
c001ec4f:	6a 10                	push   0x10
c001ec51:	e9 b0 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec56 <isr17>:
c001ec56:	fa                   	cli    
c001ec57:	6a 00                	push   0x0
c001ec59:	6a 11                	push   0x11
c001ec5b:	e9 a6 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec60 <isr18>:
c001ec60:	fa                   	cli    
c001ec61:	6a 00                	push   0x0
c001ec63:	6a 12                	push   0x12
c001ec65:	e9 9c 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec6a <irq3>:
c001ec6a:	fa                   	cli    
c001ec6b:	6a 00                	push   0x0
c001ec6d:	6a 23                	push   0x23
c001ec6f:	e9 92 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec74 <irq4>:
c001ec74:	fa                   	cli    
c001ec75:	6a 00                	push   0x0
c001ec77:	6a 24                	push   0x24
c001ec79:	e9 88 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec7e <irq5>:
c001ec7e:	fa                   	cli    
c001ec7f:	6a 00                	push   0x0
c001ec81:	6a 25                	push   0x25
c001ec83:	e9 7e 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec88 <irq6>:
c001ec88:	fa                   	cli    
c001ec89:	6a 00                	push   0x0
c001ec8b:	6a 26                	push   0x26
c001ec8d:	e9 74 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec92 <irq7>:
c001ec92:	fa                   	cli    
c001ec93:	6a 00                	push   0x0
c001ec95:	6a 27                	push   0x27
c001ec97:	e9 6a 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ec9c <irq8>:
c001ec9c:	fa                   	cli    
c001ec9d:	6a 00                	push   0x0
c001ec9f:	6a 28                	push   0x28
c001eca1:	e9 60 00 00 00       	jmp    c001ed06 <int_common_stub>

c001eca6 <irq9>:
c001eca6:	fa                   	cli    
c001eca7:	6a 00                	push   0x0
c001eca9:	6a 29                	push   0x29
c001ecab:	e9 56 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecb0 <irq10>:
c001ecb0:	fa                   	cli    
c001ecb1:	6a 00                	push   0x0
c001ecb3:	6a 2a                	push   0x2a
c001ecb5:	e9 4c 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecba <irq11>:
c001ecba:	fa                   	cli    
c001ecbb:	6a 00                	push   0x0
c001ecbd:	6a 2b                	push   0x2b
c001ecbf:	e9 42 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecc4 <irq12>:
c001ecc4:	fa                   	cli    
c001ecc5:	6a 00                	push   0x0
c001ecc7:	6a 2c                	push   0x2c
c001ecc9:	e9 38 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecce <irq13>:
c001ecce:	fa                   	cli    
c001eccf:	6a 00                	push   0x0
c001ecd1:	6a 2d                	push   0x2d
c001ecd3:	e9 2e 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecd8 <irq14>:
c001ecd8:	fa                   	cli    
c001ecd9:	6a 00                	push   0x0
c001ecdb:	6a 2e                	push   0x2e
c001ecdd:	e9 24 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ece2 <irq15>:
c001ece2:	fa                   	cli    
c001ece3:	6a 00                	push   0x0
c001ece5:	6a 2f                	push   0x2f
c001ece7:	e9 1a 00 00 00       	jmp    c001ed06 <int_common_stub>

c001ecec <irq1>:
c001ecec:	fa                   	cli    
c001eced:	6a 00                	push   0x0
c001ecef:	6a 21                	push   0x21
c001ecf1:	eb 13                	jmp    c001ed06 <int_common_stub>

c001ecf3 <irq2>:
c001ecf3:	fa                   	cli    
c001ecf4:	6a 00                	push   0x0
c001ecf6:	6a 22                	push   0x22
c001ecf8:	eb 0c                	jmp    c001ed06 <int_common_stub>

c001ecfa <isr96>:
c001ecfa:	6a 00                	push   0x0
c001ecfc:	6a 60                	push   0x60
c001ecfe:	fb                   	sti    
c001ecff:	eb 37                	jmp    c001ed38 <syscall_common_stub>

c001ed01 <irq0>:
c001ed01:	fa                   	cli    
c001ed02:	6a 00                	push   0x0
c001ed04:	6a 20                	push   0x20

c001ed06 <int_common_stub>:
c001ed06:	60                   	pusha  
c001ed07:	1e                   	push   ds
c001ed08:	06                   	push   es
c001ed09:	0f a0                	push   fs
c001ed0b:	0f a8                	push   gs
c001ed0d:	66 b8 10 00          	mov    ax,0x10
c001ed11:	66 8e d8             	mov    ds,ax
c001ed14:	66 8e c0             	mov    es,ax
c001ed17:	66 8e e0             	mov    fs,ax
c001ed1a:	66 8e e8             	mov    gs,ax
c001ed1d:	54                   	push   esp
c001ed1e:	fc                   	cld    
c001ed1f:	e8 48 de fe ff       	call   c000cb6c <int_handler>
c001ed24:	81 c4 04 00 00 00    	add    esp,0x4
c001ed2a:	0f a9                	pop    gs
c001ed2c:	0f a1                	pop    fs
c001ed2e:	07                   	pop    es
c001ed2f:	1f                   	pop    ds
c001ed30:	61                   	popa   
c001ed31:	81 c4 08 00 00 00    	add    esp,0x8
c001ed37:	cf                   	iret   

c001ed38 <syscall_common_stub>:
c001ed38:	60                   	pusha  
c001ed39:	1e                   	push   ds
c001ed3a:	06                   	push   es
c001ed3b:	0f a0                	push   fs
c001ed3d:	0f a8                	push   gs
c001ed3f:	66 b8 10 00          	mov    ax,0x10
c001ed43:	66 8e d8             	mov    ds,ax
c001ed46:	66 8e c0             	mov    es,ax
c001ed49:	66 8e e0             	mov    fs,ax
c001ed4c:	66 8e e8             	mov    gs,ax
c001ed4f:	54                   	push   esp
c001ed50:	fc                   	cld    
c001ed51:	e8 16 de fe ff       	call   c000cb6c <int_handler>
c001ed56:	81 c4 04 00 00 00    	add    esp,0x4
c001ed5c:	0f a9                	pop    gs
c001ed5e:	0f a1                	pop    fs
c001ed60:	07                   	pop    es
c001ed61:	1f                   	pop    ds
c001ed62:	e8 9f 2b ff ff       	call   c0011906 <KiCheckSignalZ>
c001ed67:	3d 00 00 00 00       	cmp    eax,0x0
c001ed6c:	0f 84 c0 00 00 00    	je     c001ee32 <skipSignals>
c001ed72:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ed77:	61                   	popa   
c001ed78:	53                   	push   ebx
c001ed79:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ed7f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ed82:	5b                   	pop    ebx
c001ed83:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ed88:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ed8b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ed8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed91:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ed94:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ed97:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ed9a:	81 c4 08 00 00 00    	add    esp,0x8
c001eda0:	5e                   	pop    esi
c001eda1:	5b                   	pop    ebx
c001eda2:	59                   	pop    ecx
c001eda3:	5a                   	pop    edx
c001eda4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001eda7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001edaa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001edad:	52                   	push   edx
c001edae:	51                   	push   ecx
c001edaf:	53                   	push   ebx
c001edb0:	56                   	push   esi
c001edb1:	81 ec 08 00 00 00    	sub    esp,0x8
c001edb7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001edba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001edbd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001edc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001edc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001edc6:	60                   	pusha  
c001edc7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001edcd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001edd0:	89 e3                	mov    ebx,esp
c001edd2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001edd5:	52                   	push   edx
c001edd6:	68 f6 ed 01 c0       	push   0xc001edf6
c001eddb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001edde:	89 dc                	mov    esp,ebx
c001ede0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ede3:	68 23 00 00 00       	push   0x23
c001ede8:	51                   	push   ecx
c001ede9:	68 02 02 00 00       	push   0x202
c001edee:	68 1b 00 00 00       	push   0x1b
c001edf3:	ff 36                	push   DWORD PTR [esi]
c001edf5:	cf                   	iret   

c001edf6 <finishSignal>:
c001edf6:	cd 0f                	int    0xf

c001edf8 <finishSignal2>:
c001edf8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001edfe:	e8 80 2b ff ff       	call   c0011983 <KiFinishSignalZ>
c001ee03:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ee09:	68 23 00 00 00       	push   0x23
c001ee0e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ee11:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ee14:	68 1b 00 00 00       	push   0x1b
c001ee19:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ee1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ee1f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ee22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ee25:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ee28:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ee2b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ee2e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ee31:	cf                   	iret   

c001ee32 <skipSignals>:
c001ee32:	61                   	popa   
c001ee33:	81 c4 08 00 00 00    	add    esp,0x8
c001ee39:	cf                   	iret   
c001ee3a:	90                   	nop
c001ee3b:	90                   	nop

c001ee3c <irq16>:
c001ee3c:	fa                   	cli    
c001ee3d:	6a 00                	push   0x0
c001ee3f:	6a 30                	push   0x30
c001ee41:	e9 c0 fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee46 <irq17>:
c001ee46:	fa                   	cli    
c001ee47:	6a 00                	push   0x0
c001ee49:	6a 31                	push   0x31
c001ee4b:	e9 b6 fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee50 <irq18>:
c001ee50:	fa                   	cli    
c001ee51:	6a 00                	push   0x0
c001ee53:	6a 32                	push   0x32
c001ee55:	e9 ac fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee5a <irq19>:
c001ee5a:	fa                   	cli    
c001ee5b:	6a 00                	push   0x0
c001ee5d:	6a 33                	push   0x33
c001ee5f:	e9 a2 fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee64 <irq20>:
c001ee64:	fa                   	cli    
c001ee65:	6a 00                	push   0x0
c001ee67:	6a 34                	push   0x34
c001ee69:	e9 98 fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee6e <irq21>:
c001ee6e:	fa                   	cli    
c001ee6f:	6a 00                	push   0x0
c001ee71:	6a 35                	push   0x35
c001ee73:	e9 8e fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee78 <irq22>:
c001ee78:	fa                   	cli    
c001ee79:	6a 00                	push   0x0
c001ee7b:	6a 36                	push   0x36
c001ee7d:	e9 84 fe ff ff       	jmp    c001ed06 <int_common_stub>

c001ee82 <irq23>:
c001ee82:	fa                   	cli    
c001ee83:	6a 00                	push   0x0
c001ee85:	6a 37                	push   0x37
c001ee87:	e9 7a fe ff ff       	jmp    c001ed06 <int_common_stub>
c001ee8c:	66 90                	xchg   ax,ax
c001ee8e:	66 90                	xchg   ax,ax

c001ee90 <i386GetRDRAND>:
c001ee90:	b9 64 00 00 00       	mov    ecx,0x64

c001ee95 <retry>:
c001ee95:	0f c7 f0             	rdrand eax
c001ee98:	72 05                	jb     c001ee9f <retry.done>
c001ee9a:	e2 f9                	loop   c001ee95 <retry>

c001ee9c <retry.fail>:
c001ee9c:	31 c0                	xor    eax,eax
c001ee9e:	c3                   	ret    

c001ee9f <retry.done>:
c001ee9f:	c3                   	ret    

c001eea0 <absolutelyNoChanceInHell>:
c001eea0:	b8 01 00 00 00       	mov    eax,0x1
c001eea5:	0f a2                	cpuid  
c001eea7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001eead:	74 06                	je     c001eeb5 <sseDetect.noSSE>
c001eeaf:	b8 01 00 00 00       	mov    eax,0x1
c001eeb4:	c3                   	ret    

c001eeb5 <sseDetect.noSSE>:
c001eeb5:	31 c0                	xor    eax,eax
c001eeb7:	c3                   	ret    

c001eeb8 <sseSave>:
c001eeb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eebc:	0f ae 00             	fxsave [eax]
c001eebf:	c3                   	ret    

c001eec0 <sseLoad>:
c001eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eec4:	0f ae 08             	fxrstor [eax]
c001eec7:	c3                   	ret    

c001eec8 <sseInit>:
c001eec8:	e8 42 00 00 00       	call   c001ef0f <x87Init>
c001eecd:	0f 20 e0             	mov    eax,cr4
c001eed0:	66 0d 00 06          	or     ax,0x600
c001eed4:	0f 22 e0             	mov    cr4,eax
c001eed7:	c3                   	ret    

c001eed8 <sseClose>:
c001eed8:	c3                   	ret    
c001eed9:	66 90                	xchg   ax,ax
c001eedb:	66 90                	xchg   ax,ax
c001eedd:	66 90                	xchg   ax,ax
c001eedf:	90                   	nop

c001eee0 <value_37F>:
c001eee0:	7f 03                	jg     c001eee5 <value_37A+0x1>

c001eee2 <value_37E>:
c001eee2:	7e 03                	jle    c001eee7 <x87Detect+0x1>

c001eee4 <value_37A>:
c001eee4:	7a 03                	jp     c001eee9 <x87Detect+0x3>

c001eee6 <x87Detect>:
c001eee6:	b8 01 00 00 00       	mov    eax,0x1
c001eeeb:	0f a2                	cpuid  
c001eeed:	f7 c2 01 00 00 00    	test   edx,0x1
c001eef3:	74 06                	je     c001eefb <x87Detect.nox87>
c001eef5:	b8 01 00 00 00       	mov    eax,0x1
c001eefa:	c3                   	ret    

c001eefb <x87Detect.nox87>:
c001eefb:	b8 00 00 00 00       	mov    eax,0x0
c001ef00:	c3                   	ret    

c001ef01 <x87Save>:
c001ef01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef05:	dd 30                	fnsave [eax]
c001ef07:	c3                   	ret    

c001ef08 <x87Load>:
c001ef08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ef0c:	dd 20                	frstor [eax]
c001ef0e:	c3                   	ret    

c001ef0f <x87Init>:
c001ef0f:	0f 20 c0             	mov    eax,cr0
c001ef12:	66 25 fb ff          	and    ax,0xfffb
c001ef16:	66 0d 22 00          	or     ax,0x22
c001ef1a:	0f 22 c0             	mov    cr0,eax
c001ef1d:	db e3                	fninit 
c001ef1f:	0f 06                	clts   
c001ef21:	d9 2d e4 ee 01 c0    	fldcw  WORD PTR ds:0xc001eee4
c001ef27:	c3                   	ret    

c001ef28 <x87Close>:
c001ef28:	c3                   	ret    
c001ef29:	66 90                	xchg   ax,ax
c001ef2b:	90                   	nop

c001ef2c <__do_global_ctors_aux>:
c001ef2c:	a1 e0 fe 01 c0       	mov    eax,ds:0xc001fee0
c001ef31:	83 f8 ff             	cmp    eax,0xffffffff
c001ef34:	74 1a                	je     c001ef50 <__do_global_ctors_aux+0x24>
c001ef36:	55                   	push   ebp
c001ef37:	89 e5                	mov    ebp,esp
c001ef39:	53                   	push   ebx
c001ef3a:	52                   	push   edx
c001ef3b:	bb e0 fe 01 c0       	mov    ebx,0xc001fee0
c001ef40:	ff d0                	call   eax
c001ef42:	83 eb 04             	sub    ebx,0x4
c001ef45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ef47:	83 f8 ff             	cmp    eax,0xffffffff
c001ef4a:	75 f4                	jne    c001ef40 <__do_global_ctors_aux+0x14>
c001ef4c:	58                   	pop    eax
c001ef4d:	5b                   	pop    ebx
c001ef4e:	5d                   	pop    ebp
c001ef4f:	c3                   	ret    
c001ef50:	c3                   	ret    
c001ef51:	66 90                	xchg   ax,ax
c001ef53:	90                   	nop

c001ef54 <__divdi3>:
c001ef54:	55                   	push   ebp
c001ef55:	57                   	push   edi
c001ef56:	56                   	push   esi
c001ef57:	53                   	push   ebx
c001ef58:	83 ec 1c             	sub    esp,0x1c
c001ef5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ef5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ef63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ef6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ef72:	85 db                	test   ebx,ebx
c001ef74:	0f 88 8e 00 00 00    	js     c001f008 <__divdi3+0xb4>
c001ef7a:	89 dd                	mov    ebp,ebx
c001ef7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef84:	89 d3                	mov    ebx,edx
c001ef86:	85 d2                	test   edx,edx
c001ef88:	79 0d                	jns    c001ef97 <__divdi3+0x43>
c001ef8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef8e:	f7 d8                	neg    eax
c001ef90:	83 d2 00             	adc    edx,0x0
c001ef93:	f7 da                	neg    edx
c001ef95:	89 d3                	mov    ebx,edx
c001ef97:	89 c7                	mov    edi,eax
c001ef99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef9c:	85 db                	test   ebx,ebx
c001ef9e:	75 48                	jne    c001efe8 <__divdi3+0x94>
c001efa0:	39 ef                	cmp    edi,ebp
c001efa2:	76 24                	jbe    c001efc8 <__divdi3+0x74>
c001efa4:	89 ea                	mov    edx,ebp
c001efa6:	f7 f7                	div    edi
c001efa8:	89 c1                	mov    ecx,eax
c001efaa:	31 f6                	xor    esi,esi
c001efac:	89 c8                	mov    eax,ecx
c001efae:	89 f2                	mov    edx,esi
c001efb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001efb4:	85 c9                	test   ecx,ecx
c001efb6:	74 07                	je     c001efbf <__divdi3+0x6b>
c001efb8:	f7 d8                	neg    eax
c001efba:	83 d2 00             	adc    edx,0x0
c001efbd:	f7 da                	neg    edx
c001efbf:	83 c4 1c             	add    esp,0x1c
c001efc2:	5b                   	pop    ebx
c001efc3:	5e                   	pop    esi
c001efc4:	5f                   	pop    edi
c001efc5:	5d                   	pop    ebp
c001efc6:	c3                   	ret    
c001efc7:	90                   	nop
c001efc8:	85 ff                	test   edi,edi
c001efca:	75 0b                	jne    c001efd7 <__divdi3+0x83>
c001efcc:	b8 01 00 00 00       	mov    eax,0x1
c001efd1:	31 d2                	xor    edx,edx
c001efd3:	f7 f3                	div    ebx
c001efd5:	89 c7                	mov    edi,eax
c001efd7:	31 d2                	xor    edx,edx
c001efd9:	89 e8                	mov    eax,ebp
c001efdb:	f7 f7                	div    edi
c001efdd:	89 c6                	mov    esi,eax
c001efdf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001efe2:	f7 f7                	div    edi
c001efe4:	89 c1                	mov    ecx,eax
c001efe6:	eb c4                	jmp    c001efac <__divdi3+0x58>
c001efe8:	39 eb                	cmp    ebx,ebp
c001efea:	77 3c                	ja     c001f028 <__divdi3+0xd4>
c001efec:	0f bd f3             	bsr    esi,ebx
c001efef:	83 f6 1f             	xor    esi,0x1f
c001eff2:	75 40                	jne    c001f034 <__divdi3+0xe0>
c001eff4:	39 eb                	cmp    ebx,ebp
c001eff6:	72 09                	jb     c001f001 <__divdi3+0xad>
c001eff8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001effb:	0f 87 97 00 00 00    	ja     c001f098 <__divdi3+0x144>
c001f001:	b9 01 00 00 00       	mov    ecx,0x1
c001f006:	eb a4                	jmp    c001efac <__divdi3+0x58>
c001f008:	f7 d9                	neg    ecx
c001f00a:	83 d3 00             	adc    ebx,0x0
c001f00d:	f7 db                	neg    ebx
c001f00f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f012:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f016:	89 dd                	mov    ebp,ebx
c001f018:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f020:	e9 5f ff ff ff       	jmp    c001ef84 <__divdi3+0x30>
c001f025:	8d 76 00             	lea    esi,[esi+0x0]
c001f028:	31 f6                	xor    esi,esi
c001f02a:	31 c9                	xor    ecx,ecx
c001f02c:	e9 7b ff ff ff       	jmp    c001efac <__divdi3+0x58>
c001f031:	8d 76 00             	lea    esi,[esi+0x0]
c001f034:	b8 20 00 00 00       	mov    eax,0x20
c001f039:	29 f0                	sub    eax,esi
c001f03b:	89 f1                	mov    ecx,esi
c001f03d:	d3 e3                	shl    ebx,cl
c001f03f:	89 fa                	mov    edx,edi
c001f041:	88 c1                	mov    cl,al
c001f043:	d3 ea                	shr    edx,cl
c001f045:	09 da                	or     edx,ebx
c001f047:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f04b:	89 f1                	mov    ecx,esi
c001f04d:	d3 e7                	shl    edi,cl
c001f04f:	89 eb                	mov    ebx,ebp
c001f051:	88 c1                	mov    cl,al
c001f053:	d3 eb                	shr    ebx,cl
c001f055:	89 f1                	mov    ecx,esi
c001f057:	d3 e5                	shl    ebp,cl
c001f059:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f05c:	88 c1                	mov    cl,al
c001f05e:	d3 ea                	shr    edx,cl
c001f060:	09 d5                	or     ebp,edx
c001f062:	89 e8                	mov    eax,ebp
c001f064:	89 da                	mov    edx,ebx
c001f066:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f06a:	89 d3                	mov    ebx,edx
c001f06c:	89 c5                	mov    ebp,eax
c001f06e:	f7 e7                	mul    edi
c001f070:	39 d3                	cmp    ebx,edx
c001f072:	72 18                	jb     c001f08c <__divdi3+0x138>
c001f074:	74 0a                	je     c001f080 <__divdi3+0x12c>
c001f076:	89 e9                	mov    ecx,ebp
c001f078:	31 f6                	xor    esi,esi
c001f07a:	e9 2d ff ff ff       	jmp    c001efac <__divdi3+0x58>
c001f07f:	90                   	nop
c001f080:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f083:	89 f1                	mov    ecx,esi
c001f085:	d3 e7                	shl    edi,cl
c001f087:	39 c7                	cmp    edi,eax
c001f089:	73 eb                	jae    c001f076 <__divdi3+0x122>
c001f08b:	90                   	nop
c001f08c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f08f:	31 f6                	xor    esi,esi
c001f091:	e9 16 ff ff ff       	jmp    c001efac <__divdi3+0x58>
c001f096:	66 90                	xchg   ax,ax
c001f098:	31 c9                	xor    ecx,ecx
c001f09a:	e9 0d ff ff ff       	jmp    c001efac <__divdi3+0x58>
c001f09f:	90                   	nop

c001f0a0 <__moddi3>:
c001f0a0:	55                   	push   ebp
c001f0a1:	57                   	push   edi
c001f0a2:	56                   	push   esi
c001f0a3:	53                   	push   ebx
c001f0a4:	83 ec 2c             	sub    esp,0x2c
c001f0a7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f0ab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f0af:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f0b3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f0b7:	85 db                	test   ebx,ebx
c001f0b9:	0f 88 85 00 00 00    	js     c001f144 <__moddi3+0xa4>
c001f0bf:	89 de                	mov    esi,ebx
c001f0c1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f0c9:	89 d7                	mov    edi,edx
c001f0cb:	85 d2                	test   edx,edx
c001f0cd:	79 09                	jns    c001f0d8 <__moddi3+0x38>
c001f0cf:	f7 d8                	neg    eax
c001f0d1:	83 d2 00             	adc    edx,0x0
c001f0d4:	f7 da                	neg    edx
c001f0d6:	89 d7                	mov    edi,edx
c001f0d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0dc:	89 cd                	mov    ebp,ecx
c001f0de:	85 ff                	test   edi,edi
c001f0e0:	75 52                	jne    c001f134 <__moddi3+0x94>
c001f0e2:	89 c3                	mov    ebx,eax
c001f0e4:	39 f0                	cmp    eax,esi
c001f0e6:	76 24                	jbe    c001f10c <__moddi3+0x6c>
c001f0e8:	89 c8                	mov    eax,ecx
c001f0ea:	89 f2                	mov    edx,esi
c001f0ec:	f7 f3                	div    ebx
c001f0ee:	89 d6                	mov    esi,edx
c001f0f0:	89 f0                	mov    eax,esi
c001f0f2:	31 d2                	xor    edx,edx
c001f0f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f0f8:	85 c9                	test   ecx,ecx
c001f0fa:	74 07                	je     c001f103 <__moddi3+0x63>
c001f0fc:	f7 d8                	neg    eax
c001f0fe:	83 d2 00             	adc    edx,0x0
c001f101:	f7 da                	neg    edx
c001f103:	83 c4 2c             	add    esp,0x2c
c001f106:	5b                   	pop    ebx
c001f107:	5e                   	pop    esi
c001f108:	5f                   	pop    edi
c001f109:	5d                   	pop    ebp
c001f10a:	c3                   	ret    
c001f10b:	90                   	nop
c001f10c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f110:	85 db                	test   ebx,ebx
c001f112:	75 0d                	jne    c001f121 <__moddi3+0x81>
c001f114:	b8 01 00 00 00       	mov    eax,0x1
c001f119:	31 d2                	xor    edx,edx
c001f11b:	f7 f7                	div    edi
c001f11d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f121:	89 f0                	mov    eax,esi
c001f123:	31 d2                	xor    edx,edx
c001f125:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f129:	f7 f7                	div    edi
c001f12b:	89 e8                	mov    eax,ebp
c001f12d:	f7 f7                	div    edi
c001f12f:	89 d6                	mov    esi,edx
c001f131:	eb bd                	jmp    c001f0f0 <__moddi3+0x50>
c001f133:	90                   	nop
c001f134:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f138:	39 f7                	cmp    edi,esi
c001f13a:	76 20                	jbe    c001f15c <__moddi3+0xbc>
c001f13c:	89 c8                	mov    eax,ecx
c001f13e:	89 f2                	mov    edx,esi
c001f140:	eb b2                	jmp    c001f0f4 <__moddi3+0x54>
c001f142:	66 90                	xchg   ax,ax
c001f144:	f7 d9                	neg    ecx
c001f146:	83 d3 00             	adc    ebx,0x0
c001f149:	f7 db                	neg    ebx
c001f14b:	89 de                	mov    esi,ebx
c001f14d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f155:	e9 6f ff ff ff       	jmp    c001f0c9 <__moddi3+0x29>
c001f15a:	66 90                	xchg   ax,ax
c001f15c:	0f bd c7             	bsr    eax,edi
c001f15f:	83 f0 1f             	xor    eax,0x1f
c001f162:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f166:	75 24                	jne    c001f18c <__moddi3+0xec>
c001f168:	39 f7                	cmp    edi,esi
c001f16a:	72 06                	jb     c001f172 <__moddi3+0xd2>
c001f16c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f170:	77 0c                	ja     c001f17e <__moddi3+0xde>
c001f172:	89 e9                	mov    ecx,ebp
c001f174:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f178:	19 fe                	sbb    esi,edi
c001f17a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f17e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f182:	89 f2                	mov    edx,esi
c001f184:	e9 6b ff ff ff       	jmp    c001f0f4 <__moddi3+0x54>
c001f189:	8d 76 00             	lea    esi,[esi+0x0]
c001f18c:	b8 20 00 00 00       	mov    eax,0x20
c001f191:	89 c2                	mov    edx,eax
c001f193:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f197:	29 da                	sub    edx,ebx
c001f199:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f19d:	88 d9                	mov    cl,bl
c001f19f:	d3 e7                	shl    edi,cl
c001f1a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f1a5:	88 d1                	mov    cl,dl
c001f1a7:	d3 e8                	shr    eax,cl
c001f1a9:	09 c7                	or     edi,eax
c001f1ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f1af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1b3:	89 d8                	mov    eax,ebx
c001f1b5:	88 d9                	mov    cl,bl
c001f1b7:	d3 e7                	shl    edi,cl
c001f1b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1bd:	89 f3                	mov    ebx,esi
c001f1bf:	88 d1                	mov    cl,dl
c001f1c1:	d3 eb                	shr    ebx,cl
c001f1c3:	89 c7                	mov    edi,eax
c001f1c5:	88 c1                	mov    cl,al
c001f1c7:	d3 e6                	shl    esi,cl
c001f1c9:	89 e8                	mov    eax,ebp
c001f1cb:	88 d1                	mov    cl,dl
c001f1cd:	d3 e8                	shr    eax,cl
c001f1cf:	09 f0                	or     eax,esi
c001f1d1:	89 f9                	mov    ecx,edi
c001f1d3:	d3 e5                	shl    ebp,cl
c001f1d5:	89 da                	mov    edx,ebx
c001f1d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f1db:	89 d3                	mov    ebx,edx
c001f1dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1e1:	89 c6                	mov    esi,eax
c001f1e3:	89 d1                	mov    ecx,edx
c001f1e5:	39 d3                	cmp    ebx,edx
c001f1e7:	72 27                	jb     c001f210 <__moddi3+0x170>
c001f1e9:	74 21                	je     c001f20c <__moddi3+0x16c>
c001f1eb:	29 f5                	sub    ebp,esi
c001f1ed:	19 cb                	sbb    ebx,ecx
c001f1ef:	89 de                	mov    esi,ebx
c001f1f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f1f5:	d3 e6                	shl    esi,cl
c001f1f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f1fb:	89 f9                	mov    ecx,edi
c001f1fd:	d3 ed                	shr    ebp,cl
c001f1ff:	09 ee                	or     esi,ebp
c001f201:	89 f0                	mov    eax,esi
c001f203:	d3 eb                	shr    ebx,cl
c001f205:	89 da                	mov    edx,ebx
c001f207:	e9 e8 fe ff ff       	jmp    c001f0f4 <__moddi3+0x54>
c001f20c:	39 c5                	cmp    ebp,eax
c001f20e:	73 db                	jae    c001f1eb <__moddi3+0x14b>
c001f210:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f214:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f218:	89 d1                	mov    ecx,edx
c001f21a:	89 c6                	mov    esi,eax
c001f21c:	eb cd                	jmp    c001f1eb <__moddi3+0x14b>
c001f21e:	66 90                	xchg   ax,ax

c001f220 <__udivdi3>:
c001f220:	55                   	push   ebp
c001f221:	57                   	push   edi
c001f222:	56                   	push   esi
c001f223:	53                   	push   ebx
c001f224:	83 ec 1c             	sub    esp,0x1c
c001f227:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f22b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f233:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f237:	85 d2                	test   edx,edx
c001f239:	75 41                	jne    c001f27c <__udivdi3+0x5c>
c001f23b:	39 f7                	cmp    edi,esi
c001f23d:	76 15                	jbe    c001f254 <__udivdi3+0x34>
c001f23f:	89 e8                	mov    eax,ebp
c001f241:	89 f2                	mov    edx,esi
c001f243:	f7 f7                	div    edi
c001f245:	31 db                	xor    ebx,ebx
c001f247:	89 da                	mov    edx,ebx
c001f249:	83 c4 1c             	add    esp,0x1c
c001f24c:	5b                   	pop    ebx
c001f24d:	5e                   	pop    esi
c001f24e:	5f                   	pop    edi
c001f24f:	5d                   	pop    ebp
c001f250:	c3                   	ret    
c001f251:	8d 76 00             	lea    esi,[esi+0x0]
c001f254:	89 f9                	mov    ecx,edi
c001f256:	85 ff                	test   edi,edi
c001f258:	75 0b                	jne    c001f265 <__udivdi3+0x45>
c001f25a:	b8 01 00 00 00       	mov    eax,0x1
c001f25f:	31 d2                	xor    edx,edx
c001f261:	f7 f7                	div    edi
c001f263:	89 c1                	mov    ecx,eax
c001f265:	31 d2                	xor    edx,edx
c001f267:	89 f0                	mov    eax,esi
c001f269:	f7 f1                	div    ecx
c001f26b:	89 c3                	mov    ebx,eax
c001f26d:	89 e8                	mov    eax,ebp
c001f26f:	f7 f1                	div    ecx
c001f271:	89 da                	mov    edx,ebx
c001f273:	83 c4 1c             	add    esp,0x1c
c001f276:	5b                   	pop    ebx
c001f277:	5e                   	pop    esi
c001f278:	5f                   	pop    edi
c001f279:	5d                   	pop    ebp
c001f27a:	c3                   	ret    
c001f27b:	90                   	nop
c001f27c:	39 f2                	cmp    edx,esi
c001f27e:	77 1c                	ja     c001f29c <__udivdi3+0x7c>
c001f280:	0f bd da             	bsr    ebx,edx
c001f283:	83 f3 1f             	xor    ebx,0x1f
c001f286:	75 24                	jne    c001f2ac <__udivdi3+0x8c>
c001f288:	39 f2                	cmp    edx,esi
c001f28a:	72 08                	jb     c001f294 <__udivdi3+0x74>
c001f28c:	39 ef                	cmp    edi,ebp
c001f28e:	0f 87 84 00 00 00    	ja     c001f318 <__udivdi3+0xf8>
c001f294:	b8 01 00 00 00       	mov    eax,0x1
c001f299:	eb ac                	jmp    c001f247 <__udivdi3+0x27>
c001f29b:	90                   	nop
c001f29c:	31 db                	xor    ebx,ebx
c001f29e:	31 c0                	xor    eax,eax
c001f2a0:	89 da                	mov    edx,ebx
c001f2a2:	83 c4 1c             	add    esp,0x1c
c001f2a5:	5b                   	pop    ebx
c001f2a6:	5e                   	pop    esi
c001f2a7:	5f                   	pop    edi
c001f2a8:	5d                   	pop    ebp
c001f2a9:	c3                   	ret    
c001f2aa:	66 90                	xchg   ax,ax
c001f2ac:	b8 20 00 00 00       	mov    eax,0x20
c001f2b1:	29 d8                	sub    eax,ebx
c001f2b3:	88 d9                	mov    cl,bl
c001f2b5:	d3 e2                	shl    edx,cl
c001f2b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f2bb:	89 fa                	mov    edx,edi
c001f2bd:	88 c1                	mov    cl,al
c001f2bf:	d3 ea                	shr    edx,cl
c001f2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2c5:	09 d1                	or     ecx,edx
c001f2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2cb:	88 d9                	mov    cl,bl
c001f2cd:	d3 e7                	shl    edi,cl
c001f2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2d3:	89 f7                	mov    edi,esi
c001f2d5:	88 c1                	mov    cl,al
c001f2d7:	d3 ef                	shr    edi,cl
c001f2d9:	88 d9                	mov    cl,bl
c001f2db:	d3 e6                	shl    esi,cl
c001f2dd:	89 ea                	mov    edx,ebp
c001f2df:	88 c1                	mov    cl,al
c001f2e1:	d3 ea                	shr    edx,cl
c001f2e3:	09 d6                	or     esi,edx
c001f2e5:	89 f0                	mov    eax,esi
c001f2e7:	89 fa                	mov    edx,edi
c001f2e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2ed:	89 d7                	mov    edi,edx
c001f2ef:	89 c6                	mov    esi,eax
c001f2f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2f5:	39 d7                	cmp    edi,edx
c001f2f7:	72 13                	jb     c001f30c <__udivdi3+0xec>
c001f2f9:	74 09                	je     c001f304 <__udivdi3+0xe4>
c001f2fb:	89 f0                	mov    eax,esi
c001f2fd:	31 db                	xor    ebx,ebx
c001f2ff:	e9 43 ff ff ff       	jmp    c001f247 <__udivdi3+0x27>
c001f304:	88 d9                	mov    cl,bl
c001f306:	d3 e5                	shl    ebp,cl
c001f308:	39 c5                	cmp    ebp,eax
c001f30a:	73 ef                	jae    c001f2fb <__udivdi3+0xdb>
c001f30c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f30f:	31 db                	xor    ebx,ebx
c001f311:	e9 31 ff ff ff       	jmp    c001f247 <__udivdi3+0x27>
c001f316:	66 90                	xchg   ax,ax
c001f318:	31 c0                	xor    eax,eax
c001f31a:	e9 28 ff ff ff       	jmp    c001f247 <__udivdi3+0x27>
c001f31f:	90                   	nop

c001f320 <__umoddi3>:
c001f320:	55                   	push   ebp
c001f321:	57                   	push   edi
c001f322:	56                   	push   esi
c001f323:	53                   	push   ebx
c001f324:	83 ec 1c             	sub    esp,0x1c
c001f327:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f32b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f32f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f333:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f337:	89 da                	mov    edx,ebx
c001f339:	85 c0                	test   eax,eax
c001f33b:	75 37                	jne    c001f374 <__umoddi3+0x54>
c001f33d:	39 df                	cmp    edi,ebx
c001f33f:	76 13                	jbe    c001f354 <__umoddi3+0x34>
c001f341:	89 f0                	mov    eax,esi
c001f343:	f7 f7                	div    edi
c001f345:	89 d0                	mov    eax,edx
c001f347:	31 d2                	xor    edx,edx
c001f349:	83 c4 1c             	add    esp,0x1c
c001f34c:	5b                   	pop    ebx
c001f34d:	5e                   	pop    esi
c001f34e:	5f                   	pop    edi
c001f34f:	5d                   	pop    ebp
c001f350:	c3                   	ret    
c001f351:	8d 76 00             	lea    esi,[esi+0x0]
c001f354:	89 fd                	mov    ebp,edi
c001f356:	85 ff                	test   edi,edi
c001f358:	75 0b                	jne    c001f365 <__umoddi3+0x45>
c001f35a:	b8 01 00 00 00       	mov    eax,0x1
c001f35f:	31 d2                	xor    edx,edx
c001f361:	f7 f7                	div    edi
c001f363:	89 c5                	mov    ebp,eax
c001f365:	89 d8                	mov    eax,ebx
c001f367:	31 d2                	xor    edx,edx
c001f369:	f7 f5                	div    ebp
c001f36b:	89 f0                	mov    eax,esi
c001f36d:	f7 f5                	div    ebp
c001f36f:	89 d0                	mov    eax,edx
c001f371:	eb d4                	jmp    c001f347 <__umoddi3+0x27>
c001f373:	90                   	nop
c001f374:	89 f1                	mov    ecx,esi
c001f376:	39 d8                	cmp    eax,ebx
c001f378:	76 0a                	jbe    c001f384 <__umoddi3+0x64>
c001f37a:	89 f0                	mov    eax,esi
c001f37c:	83 c4 1c             	add    esp,0x1c
c001f37f:	5b                   	pop    ebx
c001f380:	5e                   	pop    esi
c001f381:	5f                   	pop    edi
c001f382:	5d                   	pop    ebp
c001f383:	c3                   	ret    
c001f384:	0f bd e8             	bsr    ebp,eax
c001f387:	83 f5 1f             	xor    ebp,0x1f
c001f38a:	75 1c                	jne    c001f3a8 <__umoddi3+0x88>
c001f38c:	39 d8                	cmp    eax,ebx
c001f38e:	72 04                	jb     c001f394 <__umoddi3+0x74>
c001f390:	39 f7                	cmp    edi,esi
c001f392:	77 08                	ja     c001f39c <__umoddi3+0x7c>
c001f394:	89 da                	mov    edx,ebx
c001f396:	29 fe                	sub    esi,edi
c001f398:	19 c2                	sbb    edx,eax
c001f39a:	89 f1                	mov    ecx,esi
c001f39c:	89 c8                	mov    eax,ecx
c001f39e:	83 c4 1c             	add    esp,0x1c
c001f3a1:	5b                   	pop    ebx
c001f3a2:	5e                   	pop    esi
c001f3a3:	5f                   	pop    edi
c001f3a4:	5d                   	pop    ebp
c001f3a5:	c3                   	ret    
c001f3a6:	66 90                	xchg   ax,ax
c001f3a8:	ba 20 00 00 00       	mov    edx,0x20
c001f3ad:	29 ea                	sub    edx,ebp
c001f3af:	89 e9                	mov    ecx,ebp
c001f3b1:	d3 e0                	shl    eax,cl
c001f3b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f3b7:	89 f8                	mov    eax,edi
c001f3b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f3bd:	88 d1                	mov    cl,dl
c001f3bf:	d3 e8                	shr    eax,cl
c001f3c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f3c5:	09 c1                	or     ecx,eax
c001f3c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f3cb:	89 e9                	mov    ecx,ebp
c001f3cd:	d3 e7                	shl    edi,cl
c001f3cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f3d3:	89 d8                	mov    eax,ebx
c001f3d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f3d9:	88 d1                	mov    cl,dl
c001f3db:	d3 e8                	shr    eax,cl
c001f3dd:	89 c7                	mov    edi,eax
c001f3df:	89 e9                	mov    ecx,ebp
c001f3e1:	d3 e3                	shl    ebx,cl
c001f3e3:	89 f0                	mov    eax,esi
c001f3e5:	88 d1                	mov    cl,dl
c001f3e7:	d3 e8                	shr    eax,cl
c001f3e9:	09 d8                	or     eax,ebx
c001f3eb:	89 e9                	mov    ecx,ebp
c001f3ed:	d3 e6                	shl    esi,cl
c001f3ef:	89 f3                	mov    ebx,esi
c001f3f1:	89 fa                	mov    edx,edi
c001f3f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f3f7:	89 d1                	mov    ecx,edx
c001f3f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f3fd:	89 c6                	mov    esi,eax
c001f3ff:	89 d7                	mov    edi,edx
c001f401:	39 d1                	cmp    ecx,edx
c001f403:	72 27                	jb     c001f42c <__umoddi3+0x10c>
c001f405:	74 21                	je     c001f428 <__umoddi3+0x108>
c001f407:	89 ca                	mov    edx,ecx
c001f409:	29 f3                	sub    ebx,esi
c001f40b:	19 fa                	sbb    edx,edi
c001f40d:	89 d0                	mov    eax,edx
c001f40f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f413:	d3 e0                	shl    eax,cl
c001f415:	89 e9                	mov    ecx,ebp
c001f417:	d3 eb                	shr    ebx,cl
c001f419:	09 d8                	or     eax,ebx
c001f41b:	d3 ea                	shr    edx,cl
c001f41d:	83 c4 1c             	add    esp,0x1c
c001f420:	5b                   	pop    ebx
c001f421:	5e                   	pop    esi
c001f422:	5f                   	pop    edi
c001f423:	5d                   	pop    ebp
c001f424:	c3                   	ret    
c001f425:	8d 76 00             	lea    esi,[esi+0x0]
c001f428:	39 c3                	cmp    ebx,eax
c001f42a:	73 db                	jae    c001f407 <__umoddi3+0xe7>
c001f42c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f430:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f434:	89 d7                	mov    edi,edx
c001f436:	89 c6                	mov    esi,eax
c001f438:	eb cd                	jmp    c001f407 <__umoddi3+0xe7>

Disassembly of section .init:

c001f43a <_init>:
c001f43a:	55                   	push   ebp
c001f43b:	89 e5                	mov    ebp,esp
c001f43d:	e8 b2 0c fe ff       	call   c00000f4 <frame_dummy>
c001f442:	e8 e5 fa ff ff       	call   c001ef2c <__do_global_ctors_aux>
c001f447:	5d                   	pop    ebp
c001f448:	c3                   	ret    

Disassembly of section .fini:

c001f449 <_fini>:
c001f449:	55                   	push   ebp
c001f44a:	89 e5                	mov    ebp,esp
c001f44c:	e8 33 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f451:	5d                   	pop    ebp
c001f452:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f454 <Computer::~Computer()>:
c001f454:	83 ec 0c             	sub    esp,0xc
c001f457:	ba 74 07 02 c0       	mov    edx,0xc0020774
c001f45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f460:	89 10                	mov    DWORD PTR [eax],edx
c001f462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	50                   	push   eax
c001f46a:	e8 55 d1 fe ff       	call   c000c5c4 <Device::~Device()>
c001f46f:	83 c4 10             	add    esp,0x10
c001f472:	90                   	nop
c001f473:	83 c4 0c             	add    esp,0xc
c001f476:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f478 <Computer::~Computer()>:
c001f478:	83 ec 0c             	sub    esp,0xc
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f482:	e8 cd ff ff ff       	call   c001f454 <Computer::~Computer()>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	83 ec 08             	sub    esp,0x8
c001f48d:	68 70 01 00 00       	push   0x170
c001f492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f496:	e8 7d b3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f49b:	83 c4 10             	add    esp,0x10
c001f49e:	83 c4 0c             	add    esp,0xc
c001f4a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f4a2 <idleCommon()>:
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	fa                   	cli    
c001f4a6:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f4ac:	e8 ff 66 ff ff       	call   c0015bb0 <schedule()>
c001f4b1:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f4b6:	48                   	dec    eax
c001f4b7:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f4bc:	75 01                	jne    c001f4bf <idleCommon()+0x1d>
c001f4be:	fb                   	sti    
c001f4bf:	83 c4 0c             	add    esp,0xc
c001f4c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f4c4 <LinkedList<UnixFile>::~LinkedList()>:
c001f4c4:	90                   	nop
c001f4c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f4c6 <LinkedList<UnixFile>::LinkedList()>:
c001f4c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f506:	90                   	nop
c001f507:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f508 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f508:	83 ec 0c             	sub    esp,0xc
c001f50b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f510:	75 10                	jne    c001f522 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f512:	83 ec 0c             	sub    esp,0xc
c001f515:	68 88 09 02 c0       	push   0xc0020988
c001f51a:	e8 d2 1d ff ff       	call   c00112f1 <KePanic(char const*)>
c001f51f:	83 c4 10             	add    esp,0x10
c001f522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f526:	8b 00                	mov    eax,DWORD PTR [eax]
c001f528:	85 c0                	test   eax,eax
c001f52a:	74 34                	je     c001f560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f533:	85 c0                	test   eax,eax
c001f535:	74 29                	je     c001f560 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f537:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f53e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f542:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f549:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f54d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f557:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f55e:	eb 65                	jmp    c001f5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f564:	8b 00                	mov    eax,DWORD PTR [eax]
c001f566:	85 c0                	test   eax,eax
c001f568:	75 4b                	jne    c001f5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f571:	85 c0                	test   eax,eax
c001f573:	75 40                	jne    c001f5b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f579:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f57d:	89 10                	mov    DWORD PTR [eax],edx
c001f57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f583:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f587:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f58a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f591:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f59c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f59f:	85 c0                	test   eax,eax
c001f5a1:	74 22                	je     c001f5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5a3:	83 ec 0c             	sub    esp,0xc
c001f5a6:	68 aa 09 02 c0       	push   0xc00209aa
c001f5ab:	e8 41 1d ff ff       	call   c00112f1 <KePanic(char const*)>
c001f5b0:	83 c4 10             	add    esp,0x10
c001f5b3:	eb 10                	jmp    c001f5c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f5b5:	83 ec 0c             	sub    esp,0xc
c001f5b8:	68 b4 09 02 c0       	push   0xc00209b4
c001f5bd:	e8 2f 1d ff ff       	call   c00112f1 <KePanic(char const*)>
c001f5c2:	83 c4 10             	add    esp,0x10
c001f5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5cc:	8d 50 01             	lea    edx,[eax+0x1]
c001f5cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f5d6:	90                   	nop
c001f5d7:	83 c4 0c             	add    esp,0xc
c001f5da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f5dc <LinkedList<UnixFile>::getFirstElement()>:
c001f5dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f5e4 <LinkedList<UnixFile>::removeFirst()>:
c001f5e4:	83 ec 0c             	sub    esp,0xc
c001f5e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5ed:	85 c0                	test   eax,eax
c001f5ef:	75 12                	jne    c001f603 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f5f1:	83 ec 0c             	sub    esp,0xc
c001f5f4:	68 c0 09 02 c0       	push   0xc00209c0
c001f5f9:	e8 f3 1c ff ff       	call   c00112f1 <KePanic(char const*)>
c001f5fe:	83 c4 10             	add    esp,0x10
c001f601:	eb 7e                	jmp    c001f681 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f603:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f607:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f60a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f60d:	85 c0                	test   eax,eax
c001f60f:	74 10                	je     c001f621 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f611:	83 ec 0c             	sub    esp,0xc
c001f614:	68 0b 0a 02 c0       	push   0xc0020a0b
c001f619:	e8 d3 1c ff ff       	call   c00112f1 <KePanic(char const*)>
c001f61e:	83 c4 10             	add    esp,0x10
c001f621:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f625:	8b 00                	mov    eax,DWORD PTR [eax]
c001f627:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f62a:	85 c0                	test   eax,eax
c001f62c:	75 33                	jne    c001f661 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f632:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f647:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f64a:	83 f8 01             	cmp    eax,0x1
c001f64d:	74 21                	je     c001f670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f64f:	83 ec 0c             	sub    esp,0xc
c001f652:	68 e4 09 02 c0       	push   0xc00209e4
c001f657:	e8 95 1c ff ff       	call   c00112f1 <KePanic(char const*)>
c001f65c:	83 c4 10             	add    esp,0x10
c001f65f:	eb 0f                	jmp    c001f670 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f665:	8b 00                	mov    eax,DWORD PTR [eax]
c001f667:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f66a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66e:	89 10                	mov    DWORD PTR [eax],edx
c001f670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f674:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f677:	8d 50 ff             	lea    edx,[eax-0x1]
c001f67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f681:	83 c4 0c             	add    esp,0xc
c001f684:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f686 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f68a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f68d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f68e <DriverlessDevice::~DriverlessDevice()>:
c001f68e:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c001f693:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f697:	89 10                	mov    DWORD PTR [eax],edx
c001f699:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f69d:	50                   	push   eax
c001f69e:	e8 21 cf fe ff       	call   c000c5c4 <Device::~Device()>
c001f6a3:	83 c4 04             	add    esp,0x4
c001f6a6:	90                   	nop
c001f6a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f6a8 <DriverlessDevice::~DriverlessDevice()>:
c001f6a8:	83 ec 0c             	sub    esp,0xc
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6b2:	e8 d7 ff ff ff       	call   c001f68e <DriverlessDevice::~DriverlessDevice()>
c001f6b7:	83 c4 10             	add    esp,0x10
c001f6ba:	83 ec 08             	sub    esp,0x8
c001f6bd:	68 58 01 00 00       	push   0x158
c001f6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f6c6:	e8 4d b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f6cb:	83 c4 10             	add    esp,0x10
c001f6ce:	83 c4 0c             	add    esp,0xc
c001f6d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f6d2 <LinkedList<Device>::addElement(Device*)>:
c001f6d2:	83 ec 0c             	sub    esp,0xc
c001f6d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f6da:	75 10                	jne    c001f6ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001f6dc:	83 ec 0c             	sub    esp,0xc
c001f6df:	68 88 09 02 c0       	push   0xc0020988
c001f6e4:	e8 08 1c ff ff       	call   c00112f1 <KePanic(char const*)>
c001f6e9:	83 c4 10             	add    esp,0x10
c001f6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f2:	85 c0                	test   eax,eax
c001f6f4:	74 3a                	je     c001f730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6fd:	85 c0                	test   eax,eax
c001f6ff:	74 2f                	je     c001f730 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f705:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f708:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f70c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f716:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f71a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f71d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f721:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f724:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f72e:	eb 68                	jmp    c001f798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f734:	8b 00                	mov    eax,DWORD PTR [eax]
c001f736:	85 c0                	test   eax,eax
c001f738:	75 4e                	jne    c001f788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f741:	85 c0                	test   eax,eax
c001f743:	75 43                	jne    c001f788 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f749:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f74d:	89 10                	mov    DWORD PTR [eax],edx
c001f74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f753:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f757:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f75e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f761:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f76f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f772:	85 c0                	test   eax,eax
c001f774:	74 22                	je     c001f798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f776:	83 ec 0c             	sub    esp,0xc
c001f779:	68 aa 09 02 c0       	push   0xc00209aa
c001f77e:	e8 6e 1b ff ff       	call   c00112f1 <KePanic(char const*)>
c001f783:	83 c4 10             	add    esp,0x10
c001f786:	eb 10                	jmp    c001f798 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f788:	83 ec 0c             	sub    esp,0xc
c001f78b:	68 b4 09 02 c0       	push   0xc00209b4
c001f790:	e8 5c 1b ff ff       	call   c00112f1 <KePanic(char const*)>
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f79c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f79f:	8d 50 01             	lea    edx,[eax+0x1]
c001f7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7a9:	90                   	nop
c001f7aa:	83 c4 0c             	add    esp,0xc
c001f7ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f7ae <LinkedList<Device>::LinkedList()>:
c001f7ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f7d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f7e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f7ee:	90                   	nop
c001f7ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f7f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f6:	85 c0                	test   eax,eax
c001f7f8:	75 0e                	jne    c001f808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f801:	85 c0                	test   eax,eax
c001f803:	75 03                	jne    c001f808 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f805:	b0 01                	mov    al,0x1
c001f807:	c3                   	ret    
c001f808:	b0 00                	mov    al,0x0
c001f80a:	90                   	nop
c001f80b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f80c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f810:	8b 00                	mov    eax,DWORD PTR [eax]
c001f812:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f814 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f814:	83 ec 0c             	sub    esp,0xc
c001f817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f81d:	85 c0                	test   eax,eax
c001f81f:	75 17                	jne    c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f821:	83 ec 0c             	sub    esp,0xc
c001f824:	68 c0 09 02 c0       	push   0xc00209c0
c001f829:	e8 c3 1a ff ff       	call   c00112f1 <KePanic(char const*)>
c001f82e:	83 c4 10             	add    esp,0x10
c001f831:	e9 96 00 00 00       	jmp    c001f8cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f836:	66 90                	xchg   ax,ax
c001f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f83f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f842:	85 c0                	test   eax,eax
c001f844:	0f 95 c0             	setne  al
c001f847:	0f b6 c0             	movzx  eax,al
c001f84a:	85 c0                	test   eax,eax
c001f84c:	74 12                	je     c001f860 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f84e:	83 ec 0c             	sub    esp,0xc
c001f851:	68 0b 0a 02 c0       	push   0xc0020a0b
c001f856:	e8 96 1a ff ff       	call   c00112f1 <KePanic(char const*)>
c001f85b:	83 c4 10             	add    esp,0x10
c001f85e:	66 90                	xchg   ax,ax
c001f860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f864:	8b 00                	mov    eax,DWORD PTR [eax]
c001f866:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f869:	85 c0                	test   eax,eax
c001f86b:	0f 94 c0             	sete   al
c001f86e:	0f b6 c0             	movzx  eax,al
c001f871:	85 c0                	test   eax,eax
c001f873:	74 33                	je     c001f8a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f879:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f883:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f891:	83 f8 01             	cmp    eax,0x1
c001f894:	74 22                	je     c001f8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f896:	83 ec 0c             	sub    esp,0xc
c001f899:	68 e4 09 02 c0       	push   0xc00209e4
c001f89e:	e8 4e 1a ff ff       	call   c00112f1 <KePanic(char const*)>
c001f8a3:	83 c4 10             	add    esp,0x10
c001f8a6:	eb 10                	jmp    c001f8b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f8a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b5:	89 10                	mov    DWORD PTR [eax],edx
c001f8b7:	90                   	nop
c001f8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8bf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f8c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f8cc:	83 c4 0c             	add    esp,0xc
c001f8cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f8d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f8d0:	83 ec 0c             	sub    esp,0xc
c001f8d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f8d8:	75 12                	jne    c001f8ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f8da:	83 ec 0c             	sub    esp,0xc
c001f8dd:	68 88 09 02 c0       	push   0xc0020988
c001f8e2:	e8 0a 1a ff ff       	call   c00112f1 <KePanic(char const*)>
c001f8e7:	83 c4 10             	add    esp,0x10
c001f8ea:	66 90                	xchg   ax,ax
c001f8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8f2:	85 c0                	test   eax,eax
c001f8f4:	74 36                	je     c001f92c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f8f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8fd:	85 c0                	test   eax,eax
c001f8ff:	74 2b                	je     c001f92c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f905:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f908:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f90c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f913:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f917:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f91a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f921:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f928:	eb 6a                	jmp    c001f994 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f92a:	66 90                	xchg   ax,ax
c001f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f930:	8b 00                	mov    eax,DWORD PTR [eax]
c001f932:	85 c0                	test   eax,eax
c001f934:	75 4e                	jne    c001f984 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f93d:	85 c0                	test   eax,eax
c001f93f:	75 43                	jne    c001f984 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f945:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f949:	89 10                	mov    DWORD PTR [eax],edx
c001f94b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f953:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f95a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f968:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f96b:	85 c0                	test   eax,eax
c001f96d:	74 25                	je     c001f994 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f96f:	83 ec 0c             	sub    esp,0xc
c001f972:	68 aa 09 02 c0       	push   0xc00209aa
c001f977:	e8 75 19 ff ff       	call   c00112f1 <KePanic(char const*)>
c001f97c:	83 c4 10             	add    esp,0x10
c001f97f:	eb 13                	jmp    c001f994 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f981:	8d 76 00             	lea    esi,[esi+0x0]
c001f984:	83 ec 0c             	sub    esp,0xc
c001f987:	68 b4 09 02 c0       	push   0xc00209b4
c001f98c:	e8 60 19 ff ff       	call   c00112f1 <KePanic(char const*)>
c001f991:	83 c4 10             	add    esp,0x10
c001f994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f998:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99b:	8d 50 01             	lea    edx,[eax+0x1]
c001f99e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9a5:	90                   	nop
c001f9a6:	83 c4 0c             	add    esp,0xc
c001f9a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f9ac <ACPI::~ACPI()>:
c001f9ac:	83 ec 0c             	sub    esp,0xc
c001f9af:	ba 44 1b 02 c0       	mov    edx,0xc0021b44
c001f9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b8:	89 10                	mov    DWORD PTR [eax],edx
c001f9ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9be:	83 ec 0c             	sub    esp,0xc
c001f9c1:	50                   	push   eax
c001f9c2:	e8 fd cb fe ff       	call   c000c5c4 <Device::~Device()>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	90                   	nop
c001f9cb:	83 c4 0c             	add    esp,0xc
c001f9ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f9d0 <ACPI::~ACPI()>:
c001f9d0:	83 ec 0c             	sub    esp,0xc
c001f9d3:	83 ec 0c             	sub    esp,0xc
c001f9d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9da:	e8 cd ff ff ff       	call   c001f9ac <ACPI::~ACPI()>
c001f9df:	83 c4 10             	add    esp,0x10
c001f9e2:	83 ec 08             	sub    esp,0x8
c001f9e5:	68 64 12 00 00       	push   0x1264
c001f9ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ee:	e8 25 ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f9f3:	83 c4 10             	add    esp,0x10
c001f9f6:	83 c4 0c             	add    esp,0xc
c001f9f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f9fc <LinkedList<Device>::~LinkedList()>:
c001f9fc:	90                   	nop
c001f9fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fa00 <LinkedList<Device>::isEmpty()>:
c001fa00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa04:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa06:	85 c0                	test   eax,eax
c001fa08:	75 0e                	jne    c001fa18 <LinkedList<Device>::isEmpty()+0x18>
c001fa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa11:	85 c0                	test   eax,eax
c001fa13:	75 03                	jne    c001fa18 <LinkedList<Device>::isEmpty()+0x18>
c001fa15:	b0 01                	mov    al,0x1
c001fa17:	c3                   	ret    
c001fa18:	b0 00                	mov    al,0x0
c001fa1a:	90                   	nop
c001fa1b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fa1c <LinkedList<Device>::getFirstElement()>:
c001fa1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa20:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001fa24 <LinkedList<Device>::removeFirst()>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa2d:	85 c0                	test   eax,eax
c001fa2f:	75 17                	jne    c001fa48 <LinkedList<Device>::removeFirst()+0x24>
c001fa31:	83 ec 0c             	sub    esp,0xc
c001fa34:	68 c0 09 02 c0       	push   0xc00209c0
c001fa39:	e8 b3 18 ff ff       	call   c00112f1 <KePanic(char const*)>
c001fa3e:	83 c4 10             	add    esp,0x10
c001fa41:	e9 92 00 00 00       	jmp    c001fad8 <LinkedList<Device>::removeFirst()+0xb4>
c001fa46:	66 90                	xchg   ax,ax
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa55:	85 c0                	test   eax,eax
c001fa57:	74 13                	je     c001fa6c <LinkedList<Device>::removeFirst()+0x48>
c001fa59:	83 ec 0c             	sub    esp,0xc
c001fa5c:	68 0b 0a 02 c0       	push   0xc0020a0b
c001fa61:	e8 8b 18 ff ff       	call   c00112f1 <KePanic(char const*)>
c001fa66:	83 c4 10             	add    esp,0x10
c001fa69:	8d 76 00             	lea    esi,[esi+0x0]
c001fa6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa70:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa72:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa78:	85 c0                	test   eax,eax
c001fa7a:	75 34                	jne    c001fab0 <LinkedList<Device>::removeFirst()+0x8c>
c001fa7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa80:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa8a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa95:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa98:	83 f8 01             	cmp    eax,0x1
c001fa9b:	74 27                	je     c001fac4 <LinkedList<Device>::removeFirst()+0xa0>
c001fa9d:	83 ec 0c             	sub    esp,0xc
c001faa0:	68 e4 09 02 c0       	push   0xc00209e4
c001faa5:	e8 47 18 ff ff       	call   c00112f1 <KePanic(char const*)>
c001faaa:	83 c4 10             	add    esp,0x10
c001faad:	eb 15                	jmp    c001fac4 <LinkedList<Device>::removeFirst()+0xa0>
c001faaf:	90                   	nop
c001fab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fab6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fabc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac0:	89 10                	mov    DWORD PTR [eax],edx
c001fac2:	66 90                	xchg   ax,ax
c001fac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001facb:	8d 50 ff             	lea    edx,[eax-0x1]
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fad5:	8d 76 00             	lea    esi,[esi+0x0]
c001fad8:	83 c4 0c             	add    esp,0xc
c001fadb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fadc <CPU::~CPU()>:
c001fadc:	83 ec 0c             	sub    esp,0xc
c001fadf:	ba ec 1c 02 c0       	mov    edx,0xc0021cec
c001fae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae8:	89 10                	mov    DWORD PTR [eax],edx
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	83 ec 0c             	sub    esp,0xc
c001faf1:	50                   	push   eax
c001faf2:	e8 cd ca fe ff       	call   c000c5c4 <Device::~Device()>
c001faf7:	83 c4 10             	add    esp,0x10
c001fafa:	90                   	nop
c001fafb:	83 c4 0c             	add    esp,0xc
c001fafe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fb00 <CPU::~CPU()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	83 ec 0c             	sub    esp,0xc
c001fb06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb0a:	e8 cd ff ff ff       	call   c001fadc <CPU::~CPU()>
c001fb0f:	83 c4 10             	add    esp,0x10
c001fb12:	83 ec 08             	sub    esp,0x8
c001fb15:	68 94 11 00 00       	push   0x1194
c001fb1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb1e:	e8 f5 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	83 c4 0c             	add    esp,0xc
c001fb29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fb2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fb2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fb33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fb34 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fb34:	90                   	nop
c001fb35:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fb38 <ThreadControlBlock::ThreadControlBlock()>:
c001fb38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb3c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fb43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb47:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fb4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb52:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fb59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb5d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fb64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb68:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fb6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb73:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fb77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fb7f:	90                   	nop
c001fb80:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fba4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fba8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbb2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fbb9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbbd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fbc4:	90                   	nop
c001fbc5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fbc6 <PCI::~PCI()>:
c001fbc6:	83 ec 0c             	sub    esp,0xc
c001fbc9:	ba cc 2b 02 c0       	mov    edx,0xc0022bcc
c001fbce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd2:	89 10                	mov    DWORD PTR [eax],edx
c001fbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd8:	83 ec 0c             	sub    esp,0xc
c001fbdb:	50                   	push   eax
c001fbdc:	e8 7b c4 fe ff       	call   c000c05c <Bus::~Bus()>
c001fbe1:	83 c4 10             	add    esp,0x10
c001fbe4:	90                   	nop
c001fbe5:	83 c4 0c             	add    esp,0xc
c001fbe8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fbea <PCI::~PCI()>:
c001fbea:	83 ec 0c             	sub    esp,0xc
c001fbed:	83 ec 0c             	sub    esp,0xc
c001fbf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf4:	e8 cd ff ff ff       	call   c001fbc6 <PCI::~PCI()>
c001fbf9:	83 c4 10             	add    esp,0x10
c001fbfc:	83 ec 08             	sub    esp,0x8
c001fbff:	68 5c 01 00 00       	push   0x15c
c001fc04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc08:	e8 0b ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	83 c4 0c             	add    esp,0xc
c001fc13:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fc14 <IDE::~IDE()>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	ba 80 2c 02 c0       	mov    edx,0xc0022c80
c001fc1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc20:	89 10                	mov    DWORD PTR [eax],edx
c001fc22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc26:	83 ec 0c             	sub    esp,0xc
c001fc29:	50                   	push   eax
c001fc2a:	e8 0d ce fe ff       	call   c000ca3c <HardDiskController::~HardDiskController()>
c001fc2f:	83 c4 10             	add    esp,0x10
c001fc32:	90                   	nop
c001fc33:	83 c4 0c             	add    esp,0xc
c001fc36:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fc38 <IDE::~IDE()>:
c001fc38:	83 ec 0c             	sub    esp,0xc
c001fc3b:	83 ec 0c             	sub    esp,0xc
c001fc3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc42:	e8 cd ff ff ff       	call   c001fc14 <IDE::~IDE()>
c001fc47:	83 c4 10             	add    esp,0x10
c001fc4a:	83 ec 08             	sub    esp,0x8
c001fc4d:	68 70 02 00 00       	push   0x270
c001fc52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc56:	e8 bd ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	83 c4 0c             	add    esp,0xc
c001fc61:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fc62 <SATABus::~SATABus()>:
c001fc62:	83 ec 0c             	sub    esp,0xc
c001fc65:	ba d0 2c 02 c0       	mov    edx,0xc0022cd0
c001fc6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc6e:	89 10                	mov    DWORD PTR [eax],edx
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	83 ec 0c             	sub    esp,0xc
c001fc77:	50                   	push   eax
c001fc78:	e8 bf cd fe ff       	call   c000ca3c <HardDiskController::~HardDiskController()>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	90                   	nop
c001fc81:	83 c4 0c             	add    esp,0xc
c001fc84:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fc86 <SATABus::~SATABus()>:
c001fc86:	83 ec 0c             	sub    esp,0xc
c001fc89:	83 ec 0c             	sub    esp,0xc
c001fc8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc90:	e8 cd ff ff ff       	call   c001fc62 <SATABus::~SATABus()>
c001fc95:	83 c4 10             	add    esp,0x10
c001fc98:	83 ec 08             	sub    esp,0x8
c001fc9b:	68 64 01 00 00       	push   0x164
c001fca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fca4:	e8 6f ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	83 c4 0c             	add    esp,0xc
c001fcaf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fcb0 <ATA::~ATA()>:
c001fcb0:	83 ec 0c             	sub    esp,0xc
c001fcb3:	ba 10 2d 02 c0       	mov    edx,0xc0022d10
c001fcb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcbc:	89 10                	mov    DWORD PTR [eax],edx
c001fcbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcc2:	83 ec 0c             	sub    esp,0xc
c001fcc5:	50                   	push   eax
c001fcc6:	e8 53 ce fe ff       	call   c000cb1e <PhysicalDisk::~PhysicalDisk()>
c001fccb:	83 c4 10             	add    esp,0x10
c001fcce:	90                   	nop
c001fccf:	83 c4 0c             	add    esp,0xc
c001fcd2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fcd4 <ATA::~ATA()>:
c001fcd4:	83 ec 0c             	sub    esp,0xc
c001fcd7:	83 ec 0c             	sub    esp,0xc
c001fcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcde:	e8 cd ff ff ff       	call   c001fcb0 <ATA::~ATA()>
c001fce3:	83 c4 10             	add    esp,0x10
c001fce6:	83 ec 08             	sub    esp,0x8
c001fce9:	68 7c 01 00 00       	push   0x17c
c001fcee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcf2:	e8 21 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	83 c4 0c             	add    esp,0xc
c001fcfd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fcfe <ATAPI::~ATAPI()>:
c001fcfe:	83 ec 0c             	sub    esp,0xc
c001fd01:	ba 58 2d 02 c0       	mov    edx,0xc0022d58
c001fd06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0a:	89 10                	mov    DWORD PTR [eax],edx
c001fd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd10:	83 ec 0c             	sub    esp,0xc
c001fd13:	50                   	push   eax
c001fd14:	e8 05 ce fe ff       	call   c000cb1e <PhysicalDisk::~PhysicalDisk()>
c001fd19:	83 c4 10             	add    esp,0x10
c001fd1c:	90                   	nop
c001fd1d:	83 c4 0c             	add    esp,0xc
c001fd20:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fd22 <ATAPI::~ATAPI()>:
c001fd22:	83 ec 0c             	sub    esp,0xc
c001fd25:	83 ec 0c             	sub    esp,0xc
c001fd28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2c:	e8 cd ff ff ff       	call   c001fcfe <ATAPI::~ATAPI()>
c001fd31:	83 c4 10             	add    esp,0x10
c001fd34:	83 ec 08             	sub    esp,0x8
c001fd37:	68 84 01 00 00       	push   0x184
c001fd3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd40:	e8 d3 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	83 c4 0c             	add    esp,0xc
c001fd4b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fd4c <SATA::~SATA()>:
c001fd4c:	83 ec 0c             	sub    esp,0xc
c001fd4f:	ba 0c 2e 02 c0       	mov    edx,0xc0022e0c
c001fd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd58:	89 10                	mov    DWORD PTR [eax],edx
c001fd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5e:	83 ec 0c             	sub    esp,0xc
c001fd61:	50                   	push   eax
c001fd62:	e8 b7 cd fe ff       	call   c000cb1e <PhysicalDisk::~PhysicalDisk()>
c001fd67:	83 c4 10             	add    esp,0x10
c001fd6a:	90                   	nop
c001fd6b:	83 c4 0c             	add    esp,0xc
c001fd6e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fd70 <SATA::~SATA()>:
c001fd70:	83 ec 0c             	sub    esp,0xc
c001fd73:	83 ec 0c             	sub    esp,0xc
c001fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7a:	e8 cd ff ff ff       	call   c001fd4c <SATA::~SATA()>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	83 ec 08             	sub    esp,0x8
c001fd85:	68 7c 01 00 00       	push   0x17c
c001fd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd8e:	e8 85 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	83 c4 0c             	add    esp,0xc
c001fd99:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fd9a <SATAPI::~SATAPI()>:
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	ba 30 2f 02 c0       	mov    edx,0xc0022f30
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 10                	mov    DWORD PTR [eax],edx
c001fda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	50                   	push   eax
c001fdb0:	e8 69 cd fe ff       	call   c000cb1e <PhysicalDisk::~PhysicalDisk()>
c001fdb5:	83 c4 10             	add    esp,0x10
c001fdb8:	90                   	nop
c001fdb9:	83 c4 0c             	add    esp,0xc
c001fdbc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fdbe <SATAPI::~SATAPI()>:
c001fdbe:	83 ec 0c             	sub    esp,0xc
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 cd ff ff ff       	call   c001fd9a <SATAPI::~SATAPI()>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 ec 08             	sub    esp,0x8
c001fdd3:	68 84 01 00 00       	push   0x184
c001fdd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fddc:	e8 37 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fde1:	83 c4 10             	add    esp,0x10
c001fde4:	83 c4 0c             	add    esp,0xc
c001fde7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fde8 <IOAPIC::~IOAPIC()>:
c001fde8:	83 ec 0c             	sub    esp,0xc
c001fdeb:	ba 70 2f 02 c0       	mov    edx,0xc0022f70
c001fdf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf4:	89 10                	mov    DWORD PTR [eax],edx
c001fdf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfa:	83 ec 0c             	sub    esp,0xc
c001fdfd:	50                   	push   eax
c001fdfe:	e8 c1 c7 fe ff       	call   c000c5c4 <Device::~Device()>
c001fe03:	83 c4 10             	add    esp,0x10
c001fe06:	90                   	nop
c001fe07:	83 c4 0c             	add    esp,0xc
c001fe0a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fe0c <IOAPIC::~IOAPIC()>:
c001fe0c:	83 ec 0c             	sub    esp,0xc
c001fe0f:	83 ec 0c             	sub    esp,0xc
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 cd ff ff ff       	call   c001fde8 <IOAPIC::~IOAPIC()>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 ec 08             	sub    esp,0x8
c001fe21:	68 68 01 00 00       	push   0x168
c001fe26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe2a:	e8 e9 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe2f:	83 c4 10             	add    esp,0x10
c001fe32:	83 c4 0c             	add    esp,0xc
c001fe35:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fe38 <APICTimer::~APICTimer()>:
c001fe38:	83 ec 0c             	sub    esp,0xc
c001fe3b:	ba b8 2f 02 c0       	mov    edx,0xc0022fb8
c001fe40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe44:	89 10                	mov    DWORD PTR [eax],edx
c001fe46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe4a:	83 ec 0c             	sub    esp,0xc
c001fe4d:	50                   	push   eax
c001fe4e:	e8 3d e2 fe ff       	call   c000e090 <Timer::~Timer()>
c001fe53:	83 c4 10             	add    esp,0x10
c001fe56:	90                   	nop
c001fe57:	83 c4 0c             	add    esp,0xc
c001fe5a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fe5c <APICTimer::~APICTimer()>:
c001fe5c:	83 ec 0c             	sub    esp,0xc
c001fe5f:	83 ec 0c             	sub    esp,0xc
c001fe62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe66:	e8 cd ff ff ff       	call   c001fe38 <APICTimer::~APICTimer()>
c001fe6b:	83 c4 10             	add    esp,0x10
c001fe6e:	83 ec 08             	sub    esp,0x8
c001fe71:	68 60 01 00 00       	push   0x160
c001fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe7a:	e8 99 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	83 c4 0c             	add    esp,0xc
c001fe85:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fe88 <PIT::~PIT()>:
c001fe88:	83 ec 0c             	sub    esp,0xc
c001fe8b:	ba 08 30 02 c0       	mov    edx,0xc0023008
c001fe90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe94:	89 10                	mov    DWORD PTR [eax],edx
c001fe96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9a:	83 ec 0c             	sub    esp,0xc
c001fe9d:	50                   	push   eax
c001fe9e:	e8 ed e1 fe ff       	call   c000e090 <Timer::~Timer()>
c001fea3:	83 c4 10             	add    esp,0x10
c001fea6:	90                   	nop
c001fea7:	83 c4 0c             	add    esp,0xc
c001feaa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001feac <PIT::~PIT()>:
c001feac:	83 ec 0c             	sub    esp,0xc
c001feaf:	83 ec 0c             	sub    esp,0xc
c001feb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feb6:	e8 cd ff ff ff       	call   c001fe88 <PIT::~PIT()>
c001febb:	83 c4 10             	add    esp,0x10
c001febe:	83 ec 08             	sub    esp,0x8
c001fec1:	68 5c 01 00 00       	push   0x15c
c001fec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feca:	e8 49 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fecf:	83 c4 10             	add    esp,0x10
c001fed2:	83 c4 0c             	add    esp,0xc
c001fed5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 1d 1e 02 c0       	mov    esi,0xc0021e1d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 39 1e 02 c0       	mov    esi,0xc0021e39
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
